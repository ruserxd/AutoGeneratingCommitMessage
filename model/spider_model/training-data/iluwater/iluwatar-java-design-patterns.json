[
  {
    "input": "diff --git a/session-facade/src/test/java/com/iluwatar/sessionfacade/AppTest.java b/session-facade/src/test/java/com/iluwatar/sessionfacade/AppTest.java\n--- a/session-facade/src/test/java/com/iluwatar/sessionfacade/AppTest.java\n+++ b/session-facade/src/test/java/com/iluwatar/sessionfacade/AppTest.java\n@@ -27,7 +27,7 @@\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n \n /** The type App test. */\n-public class AppTest {\n+class AppTest {\n \n   /** Should execute application without exception. */\n   @org.junit.jupiter.api.Test\n\ndiff --git a/session-facade/src/test/java/com/iluwatar/sessionfacade/PaymentServiceTest.java b/session-facade/src/test/java/com/iluwatar/sessionfacade/PaymentServiceTest.java\n--- a/session-facade/src/test/java/com/iluwatar/sessionfacade/PaymentServiceTest.java\n+++ b/session-facade/src/test/java/com/iluwatar/sessionfacade/PaymentServiceTest.java\n@@ -27,13 +27,13 @@\n import static org.mockito.Mockito.*;\n \n import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n import org.slf4j.Logger;\n \n /** The type Payment service test. */\n class PaymentServiceTest {\n   private PaymentService paymentService;\n-  private OrderService orderService;\n   private Logger mockLogger;\n \n   /** Sets up. */\n@@ -44,27 +44,14 @@ void setUp() {\n     paymentService.LOGGER = mockLogger;\n   }\n \n-  /** Test select cash payment method. */\n-  @Test\n-  void testSelectCashPaymentMethod() {\n-    String method = \"cash\";\n+  @ParameterizedTest\n+  @CsvSource({\n+    \"cash, Client have chosen cash payment option\",\n+    \"credit, Client have chosen credit card payment option\",\n+    \"cheque, Unspecified payment method type\"\n+  })\n+  void testSelectPaymentMethod(String method, String expectedLogMessage) {\n     paymentService.selectPaymentMethod(method);\n-    verify(mockLogger).info(\"Client have chosen cash payment option\");\n-  }\n-\n-  /** Test select credit card payment method. */\n-  @Test\n-  void testSelectCreditCardPaymentMethod() {\n-    String method = \"credit\";\n-    paymentService.selectPaymentMethod(method);\n-    verify(mockLogger).info(\"Client have chosen credit card payment option\");\n-  }\n-\n-  /** Test select unspecified payment method. */\n-  @Test\n-  void testSelectUnspecifiedPaymentMethod() {\n-    String method = \"cheque\";\n-    paymentService.selectPaymentMethod(method);\n-    verify(mockLogger).info(\"Unspecified payment method type\");\n+    verify(mockLogger).info(expectedLogMessage);\n   }\n }",
    "output": "Upgrade session facade"
  },
  {
    "input": "diff --git a/service-stub/src/main/java/com/iluwatar/servicestub/RealSentimentAnalysisServer.java b/service-stub/src/main/java/com/iluwatar/servicestub/RealSentimentAnalysisServer.java\n--- a/service-stub/src/main/java/com/iluwatar/servicestub/RealSentimentAnalysisServer.java\n+++ b/service-stub/src/main/java/com/iluwatar/servicestub/RealSentimentAnalysisServer.java\n@@ -36,10 +36,8 @@ public class RealSentimentAnalysisServer implements SentimentAnalysisServer {\n    * A real sentiment analysis implementation would analyze the input string using, e.g., NLP and\n    * determine whether the sentiment is positive, negative or neutral. Here we simply choose a\n    * random number to simulate this. The \"model\" may take some time to process the input and we\n-   * simulate this by delaying the execution 5 seconds.\n-   *\n-   * @param text the input string to analyze\n-   * @return sentiment classification result (Positive, Negative, or Neutral)\n+   * simulate this by delaying the execution 5 seconds. Analyzes the sentiment of the given input\n+   * string and returns the classification result (Positive, Negative, or Neutral).\n    */\n   private final Supplier<Integer> sentimentSupplier;\n \n@@ -61,6 +59,11 @@ public String analyzeSentiment(String text) {\n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n     }\n-    return sentiment == 0 ? \"Positive\" : sentiment == 1 ? \"Negative\" : \"Neutral\";\n+\n+    return switch (sentiment) {\n+      case 0 -> \"Positive\";\n+      case 1 -> \"Negative\";\n+      default -> \"Neutral\";\n+    };\n   }\n }\n\ndiff --git a/service-stub/src/test/java/com/iluwatar/servicestub/AppTest.java b/service-stub/src/test/java/com/iluwatar/servicestub/AppTest.java\n--- a/service-stub/src/test/java/com/iluwatar/servicestub/AppTest.java\n+++ b/service-stub/src/test/java/com/iluwatar/servicestub/AppTest.java\n@@ -28,7 +28,7 @@\n \n import org.junit.jupiter.api.Test;\n \n-public class AppTest {\n+class AppTest {\n   @Test\n   void shouldExecuteWithoutException() {\n     assertDoesNotThrow(() -> App.main(new String[] {}));",
    "output": "Upgrade service stub"
  },
  {
    "input": "diff --git a/monolithic-architecture/src/test/java/com/iluwatar/monolithic/MonolithicAppTest.java b/monolithic-architecture/src/test/java/com/iluwatar/monolithic/MonolithicAppTest.java\n--- a/monolithic-architecture/src/test/java/com/iluwatar/monolithic/MonolithicAppTest.java\n+++ b/monolithic-architecture/src/test/java/com/iluwatar/monolithic/MonolithicAppTest.java\n@@ -95,11 +95,7 @@ void testPlaceOrderUserNotFound() {\n         new OrderController(mockOrderRepo, mockUserRepository, mockProductRepository);\n \n     Exception exception =\n-        assertThrows(\n-            NonExistentUserException.class,\n-            () -> {\n-              orderCon.placeOrder(1L, 1L, 5);\n-            });\n+        assertThrows(NonExistentUserException.class, () -> orderCon.placeOrder(1L, 1L, 5));\n \n     assertEquals(\"User with ID 1 not found\", exception.getMessage());\n   }\n@@ -119,11 +115,7 @@ void testPlaceOrderProductNotFound() {\n         new OrderController(mockOrderRepository, mockUserRepository, mockProductRepository);\n \n     Exception exception =\n-        assertThrows(\n-            NonExistentProductException.class,\n-            () -> {\n-              orderCon.placeOrder(1L, 1L, 5);\n-            });\n+        assertThrows(NonExistentProductException.class, () -> orderCon.placeOrder(1L, 1L, 5));\n \n     assertEquals(\"Product with ID 1 not found\", exception.getMessage());\n   }\n@@ -196,11 +188,7 @@ void testPlaceOrderInsufficientStock() {\n         new OrderController(mockOrderRepository, mockUserRepository, mockProductRepository);\n \n     Exception exception =\n-        assertThrows(\n-            InsufficientStockException.class,\n-            () -> {\n-              orderCon.placeOrder(1L, 1L, 5);\n-            });\n+        assertThrows(InsufficientStockException.class, () -> orderCon.placeOrder(1L, 1L, 5));\n     assertEquals(\"Not enough stock for product 1\", exception.getMessage());\n   }\n ",
    "output": "Upgrade monolithic architecture"
  },
  {
    "input": "diff --git a/money/src/test/java/com/iluwater/money/MoneyTest.java b/money/src/test/java/com/iluwater/money/MoneyTest.java\n--- a/money/src/test/java/com/iluwater/money/MoneyTest.java\n+++ b/money/src/test/java/com/iluwater/money/MoneyTest.java\n@@ -59,9 +59,7 @@ void testAddMoney_DifferentCurrency() {\n     Money money1 = new Money(100.00, \"USD\");\n     Money money2 = new Money(50.25, \"EUR\");\n \n-    assertThrows(\n-        CannotAddTwoCurrienciesException.class,\n-        () -> money1.addMoney(money2));\n+    assertThrows(CannotAddTwoCurrienciesException.class, () -> money1.addMoney(money2));\n   }\n \n   @Test\n@@ -81,9 +79,7 @@ void testSubtractMoney_DifferentCurrency() {\n     Money money1 = new Money(100.00, \"USD\");\n     Money money2 = new Money(50.25, \"EUR\");\n \n-    assertThrows(\n-        CannotSubtractException.class,\n-        () -> money1.subtractMoney(money2));\n+    assertThrows(CannotSubtractException.class, () -> money1.subtractMoney(money2));\n   }\n \n   @Test\n@@ -92,9 +88,7 @@ void testSubtractMoney_AmountTooLarge() {\n     Money money1 = new Money(50.00, \"USD\");\n     Money money2 = new Money(60.00, \"USD\");\n \n-    assertThrows(\n-        CannotSubtractException.class,\n-        () -> money1.subtractMoney(money2));\n+    assertThrows(CannotSubtractException.class, () -> money1.subtractMoney(money2));\n   }\n \n   @Test\n@@ -112,9 +106,7 @@ void testMultiply_NegativeFactor() {\n     // Test multiplying by a negative factor\n     Money money = new Money(100.00, \"USD\");\n \n-    assertThrows(\n-        IllegalArgumentException.class,\n-        () -> money.multiply(-2));\n+    assertThrows(IllegalArgumentException.class, () -> money.multiply(-2));\n   }\n \n   @Test\n@@ -133,15 +125,12 @@ void testExchangeCurrency_NegativeExchangeRate() {\n     // Test converting currency with a negative exchange rate\n     Money money = new Money(100.00, \"USD\");\n \n-    assertThrows(\n-        IllegalArgumentException.class,\n-        () -> money.exchangeCurrency(\"EUR\", -0.85));\n+    assertThrows(IllegalArgumentException.class, () -> money.exchangeCurrency(\"EUR\", -0.85));\n   }\n \n   @Test\n   void testAppExecution() {\n     assertDoesNotThrow(\n-        () -> App.main(new String[] {}),\n-        \"App execution should not throw any exceptions\");\n+        () -> App.main(new String[] {}), \"App execution should not throw any exceptions\");\n   }\n }",
    "output": "Fix code formatting"
  },
  {
    "input": "diff --git a/money/src/main/java/com/iluwatar/Money.java b/money/src/main/java/com/iluwatar/Money.java\n--- a/money/src/main/java/com/iluwatar/Money.java\n+++ b/money/src/main/java/com/iluwatar/Money.java\n@@ -24,28 +24,19 @@\n  */\n package com.iluwatar;\n \n+import lombok.AllArgsConstructor;\n import lombok.Getter;\n \n /**\n  * Represents a monetary value with an associated currency. Provides operations for basic arithmetic\n  * (addition, subtraction, multiplication), as well as currency conversion while ensuring proper\n  * rounding.\n  */\n+@AllArgsConstructor\n @Getter\n public class Money {\n-  private @Getter double amount;\n-  private @Getter String currency;\n-\n-  /**\n-   * Constructs a Money object with the specified amount and currency.\n-   *\n-   * @param amnt the amount of money (as a double).\n-   * @param curr the currency code (e.g., \"USD\", \"EUR\").\n-   */\n-  public Money(double amnt, String curr) {\n-    this.amount = amnt;\n-    this.currency = curr;\n-  }\n+  private double amount;\n+  private String currency;\n \n   /**\n    * Rounds the given value to two decimal places.\n\ndiff --git a/money/src/test/java/com/iluwater/money/MoneyTest.java b/money/src/test/java/com/iluwater/money/MoneyTest.java\n--- a/money/src/test/java/com/iluwater/money/MoneyTest.java\n+++ b/money/src/test/java/com/iluwater/money/MoneyTest.java\n@@ -61,9 +61,7 @@ void testAddMoney_DifferentCurrency() {\n \n     assertThrows(\n         CannotAddTwoCurrienciesException.class,\n-        () -> {\n-          money1.addMoney(money2);\n-        });\n+        () -> money1.addMoney(money2));\n   }\n \n   @Test\n@@ -85,9 +83,7 @@ void testSubtractMoney_DifferentCurrency() {\n \n     assertThrows(\n         CannotSubtractException.class,\n-        () -> {\n-          money1.subtractMoney(money2);\n-        });\n+        () -> money1.subtractMoney(money2));\n   }\n \n   @Test\n@@ -98,9 +94,7 @@ void testSubtractMoney_AmountTooLarge() {\n \n     assertThrows(\n         CannotSubtractException.class,\n-        () -> {\n-          money1.subtractMoney(money2);\n-        });\n+        () -> money1.subtractMoney(money2));\n   }\n \n   @Test\n@@ -120,9 +114,7 @@ void testMultiply_NegativeFactor() {\n \n     assertThrows(\n         IllegalArgumentException.class,\n-        () -> {\n-          money.multiply(-2);\n-        });\n+        () -> money.multiply(-2));\n   }\n \n   @Test\n@@ -143,17 +135,13 @@ void testExchangeCurrency_NegativeExchangeRate() {\n \n     assertThrows(\n         IllegalArgumentException.class,\n-        () -> {\n-          money.exchangeCurrency(\"EUR\", -0.85);\n-        });\n+        () -> money.exchangeCurrency(\"EUR\", -0.85));\n   }\n \n   @Test\n   void testAppExecution() {\n     assertDoesNotThrow(\n-        () -> {\n-          App.main(new String[] {});\n-        },\n+        () -> App.main(new String[] {}),\n         \"App execution should not throw any exceptions\");\n   }\n }",
    "output": "Upgrade money pattern"
  },
  {
    "input": "diff --git a/microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestService.java b/microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestService.java\n--- a/microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestService.java\n+++ b/microservices-idempotent-consumer/src/main/java/com/iluwatar/idempotentconsumer/RequestService.java\n@@ -44,18 +44,15 @@ public RequestService(\n   }\n \n   /**\n-   * Creates a new Request or returns an existing one by it's UUID. This operation is idempotent:\n+   * Creates a new Request or returns an existing one by its UUID. This operation is idempotent:\n    * performing it once or several times successively leads to an equivalent result.\n    *\n    * @param uuid The unique identifier for the Request.\n    * @return Return existing Request or save and return a new Request.\n    */\n   public Request create(UUID uuid) {\n     Optional<Request> optReq = requestRepository.findById(uuid);\n-    if (!optReq.isEmpty()) {\n-      return optReq.get();\n-    }\n-    return requestRepository.save(new Request(uuid));\n+    return optReq.orElseGet(() -> requestRepository.save(new Request(uuid)));\n   }\n \n   /**\n\ndiff --git a/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/AppTest.java b/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/AppTest.java\n--- a/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/AppTest.java\n+++ b/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/AppTest.java\n@@ -39,12 +39,12 @@\n class AppTest {\n \n   @Test\n-  void main() {\n+  void testMain() {\n     assertDoesNotThrow(() -> App.main(new String[] {}));\n   }\n \n   @Test\n-  void run() throws Exception {\n+  void testRun() throws Exception {\n     RequestService requestService = Mockito.mock(RequestService.class);\n     RequestRepository requestRepository = Mockito.mock(RequestRepository.class);\n     UUID uuid = UUID.randomUUID();\n\ndiff --git a/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestServiceTests.java b/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestServiceTests.java\n--- a/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestServiceTests.java\n+++ b/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestServiceTests.java\n@@ -43,11 +43,10 @@\n class RequestServiceTests {\n   private RequestService requestService;\n   @Mock private RequestRepository requestRepository;\n-  private RequestStateMachine requestStateMachine;\n \n   @BeforeEach\n   void setUp() {\n-    requestStateMachine = new RequestStateMachine();\n+    RequestStateMachine requestStateMachine = new RequestStateMachine();\n     requestService = new RequestService(requestRepository, requestStateMachine);\n   }\n \n\ndiff --git a/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestStateMachineTests.java b/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestStateMachineTests.java\n--- a/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestStateMachineTests.java\n+++ b/microservices-idempotent-consumer/src/test/java/com/iluwatar/idempotentconsumer/RequestStateMachineTests.java\n@@ -35,7 +35,7 @@ class RequestStateMachineTests {\n   private RequestStateMachine requestStateMachine;\n \n   @BeforeEach\n-  public void setUp() {\n+  void setUp() {\n     requestStateMachine = new RequestStateMachine();\n   }\n ",
    "output": "Upgrade microservices idempotent consumer"
  },
  {
    "input": "diff --git a/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java b/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java\n--- a/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java\n+++ b/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java\n@@ -36,7 +36,7 @@ class ProductControllerTest {\n   private ProductController productController;\n \n   @BeforeEach\n-  public void setUp() {\n+  void setUp() {\n     productController = new ProductController();\n   }\n ",
    "output": "Upgrade microservices distributed tracing"
  },
  {
    "input": "diff --git a/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java b/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java\n--- a/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java\n+++ b/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java\n@@ -32,7 +32,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-public class BlocUiTest {\n+class BlocUiTest {\n \n   private JFrame frame;\n   private JLabel counterLabel;\n@@ -43,7 +43,7 @@ public class BlocUiTest {\n   private StateListener<State> stateListener;\n \n   @BeforeEach\n-  public void setUp() {\n+  void setUp() {\n     bloc = new Bloc(); // Re-initialize the Bloc for each test\n \n     frame = new JFrame(\"BloC example\");\n@@ -83,25 +83,25 @@ public void setUp() {\n   }\n \n   @AfterEach\n-  public void tearDown() {\n+  void tearDown() {\n     frame.dispose();\n     bloc = new Bloc(); // Reset Bloc state after each test to avoid state carryover\n   }\n \n   @Test\n-  public void testIncrementButton() {\n+  void testIncrementButton() {\n     simulateButtonClick(incrementButton);\n     assertEquals(\"Counter: 1\", counterLabel.getText());\n   }\n \n   @Test\n-  public void testDecrementButton() {\n+  void testDecrementButton() {\n     simulateButtonClick(decrementButton);\n     assertEquals(\"Counter: -1\", counterLabel.getText());\n   }\n \n   @Test\n-  public void testToggleListenerButton() {\n+  void testToggleListenerButton() {\n     // Disable listener\n     simulateButtonClick(toggleListenerButton);\n     simulateButtonClick(incrementButton);",
    "output": "Upgrade bloc pattern"
  },
  {
    "input": "diff --git a/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java b/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n--- a/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n+++ b/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n@@ -45,6 +45,7 @@ public class ImageClientImpl implements ImageClient {\n    */\n   @Override\n   public String getImagePath() {\n+\n     var httpClient = HttpClient.newHttpClient();\n     var httpGet =\n         HttpRequest.newBuilder().GET().uri(URI.create(\"http://localhost:50005/image-path\")).build();",
    "output": "Upgrade client-side ui composition"
  },
  {
    "input": "diff --git a/function-composition/src/main/java/com/iluwatar/function/composition/App.java b/function-composition/src/main/java/com/iluwatar/function/composition/App.java\n--- a/function-composition/src/main/java/com/iluwatar/function/composition/App.java\n+++ b/function-composition/src/main/java/com/iluwatar/function/composition/App.java\n@@ -25,9 +25,10 @@\n package com.iluwatar.function.composition;\n \n import java.util.function.Function;\n-import org.slf4j.LoggerFactory;\n+import lombok.extern.slf4j.Slf4j;\n \n /** Main application class to demonstrate the use of function composition. */\n+@Slf4j\n public class App {\n \n   /**\n@@ -36,14 +37,13 @@ public class App {\n    * @param args command line arguments (not used)\n    */\n   public static void main(String[] args) {\n-    final var logger = LoggerFactory.getLogger(App.class);\n     Function<Integer, Integer> timesTwo = x -> x * 2;\n     Function<Integer, Integer> square = x -> x * x;\n \n     Function<Integer, Integer> composedFunction =\n         FunctionComposer.composeFunctions(timesTwo, square);\n \n     int result = composedFunction.apply(3);\n-    logger.info(\"Result of composing 'timesTwo' and 'square' functions applied to 3 is: \" + result);\n+    LOGGER.info(\"Result of composing 'timesTwo' and 'square' functions applied to 3 is: \" + result);\n   }\n }\n\ndiff --git a/function-composition/src/main/java/com/iluwatar/function/composition/FunctionComposer.java b/function-composition/src/main/java/com/iluwatar/function/composition/FunctionComposer.java\n--- a/function-composition/src/main/java/com/iluwatar/function/composition/FunctionComposer.java\n+++ b/function-composition/src/main/java/com/iluwatar/function/composition/FunctionComposer.java\n@@ -32,6 +32,8 @@\n  */\n public class FunctionComposer {\n \n+  private FunctionComposer() {}\n+\n   /**\n    * Composes two functions where the output of the first function becomes the input of the second\n    * function.\n\ndiff --git a/function-composition/src/test/java/com/iluwatar/function/composition/FunctionComposerTest.java b/function-composition/src/test/java/com/iluwatar/function/composition/FunctionComposerTest.java\n--- a/function-composition/src/test/java/com/iluwatar/function/composition/FunctionComposerTest.java\n+++ b/function-composition/src/test/java/com/iluwatar/function/composition/FunctionComposerTest.java\n@@ -30,7 +30,7 @@\n import org.junit.jupiter.api.Test;\n \n /** Test class for FunctionComposer. */\n-public class FunctionComposerTest {\n+class FunctionComposerTest {\n \n   /** Tests the composition of two functions. */\n   @Test",
    "output": "Upgrade function composition pattern"
  },
  {
    "input": "diff --git a/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java b/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java\n--- a/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java\n+++ b/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java\n@@ -30,6 +30,8 @@\n /** This class is the publisher that generates the data stream. */\n public class Publisher {\n \n+  private Publisher() {}\n+\n   /**\n    * On message method will trigger when the subscribed event is published.\n    *",
    "output": "Upgrade backpressure description"
  },
  {
    "input": "diff --git a/leader-followers/src/main/java/com/iluwatar/leaderfollowers/App.java b/leader-followers/src/main/java/com/iluwatar/leaderfollowers/App.java\n--- a/leader-followers/src/main/java/com/iluwatar/leaderfollowers/App.java\n+++ b/leader-followers/src/main/java/com/iluwatar/leaderfollowers/App.java\n@@ -1,61 +1,13 @@\n-/*\n- * This project is licensed under the MIT license. Module model-view-viewmodel is using ZK framework licensed under LGPL (see lgpl-3.0.txt).\n- *\n- * The MIT License\n- * Copyright © 2014-2022 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n package com.iluwatar.leaderfollowers;\n \n import java.security.SecureRandom;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n \n-/**\n- * Leader/Followers pattern is a concurrency pattern. This pattern behaves like a taxi stand where\n- * one of the threads acts as leader thread which listens for event from event sources,\n- * de-multiplexes, dispatches and handles the event. It promotes the follower to be the new leader.\n- * When processing completes the thread joins the followers queue, if there are no followers then it\n- * becomes the leader and cycle repeats again.\n- *\n- * <p>In this example, one of the workers becomes Leader and listens on the {@link TaskSet} for\n- * work. {@link TaskSet} basically acts as the source of input events for the {@link Worker}, who\n- * are spawned and controlled by the {@link WorkCenter} . When {@link Task} arrives then the leader\n- * takes the work and calls the {@link TaskHandler}. It also calls the {@link WorkCenter} to\n- * promotes one of the followers to be the new leader, who can then process the next work and so on.\n- *\n- * <p>The pros for this pattern are: It enhances CPU cache affinity and eliminates unbound\n- * allocation and data buffer sharing between threads by reading the request into buffer space\n- * allocated on the stack of the leader or by using the Thread-Specific Storage pattern [22] to\n- * allocate memory. It minimizes locking overhead by not exchanging data between threads, thereby\n- * reducing thread synchronization. In bound handle/thread associations, the leader thread\n- * dispatches the event based on the I/O handle. It can minimize priority inversion because no extra\n- * queuing is introduced in the server. It does not require a context switch to handle each event,\n- * reducing the event dispatching latency. Note that promoting a follower thread to fulfill the\n- * leader role requires a context switch. Programming simplicity: The Leader/Followers pattern\n- * simplifies the programming of concurrency models where multiple threads can receive requests,\n- * process responses, and de-multiplex connections using a shared handle set.\n- */\n+@Slf4j\n public class App {\n \n-  /** The main method for the leader followers pattern. */\n   public static void main(String[] args) throws InterruptedException {\n     var taskSet = new TaskSet();\n     var taskHandler = new TaskHandler();\n@@ -64,18 +16,23 @@ public static void main(String[] args) throws InterruptedException {\n     execute(workCenter, taskSet);\n   }\n \n-  /** Start the work, dispatch tasks and stop the thread pool at last. */\n   private static void execute(WorkCenter workCenter, TaskSet taskSet) throws InterruptedException {\n     var workers = workCenter.getWorkers();\n     var exec = Executors.newFixedThreadPool(workers.size());\n-    workers.forEach(exec::submit);\n-    Thread.sleep(1000);\n-    addTasks(taskSet);\n-    exec.awaitTermination(2, TimeUnit.SECONDS);\n-    exec.shutdownNow();\n+\n+    try {\n+      workers.forEach(exec::submit);\n+      Thread.sleep(1000);\n+      addTasks(taskSet);\n+      boolean terminated = exec.awaitTermination(2, TimeUnit.SECONDS);\n+      if (!terminated) {\n+        LOGGER.warn(\"Executor did not terminate in the given time.\");\n+      }\n+    } finally {\n+      exec.shutdownNow();\n+    }\n   }\n \n-  /** Add tasks. */\n   private static void addTasks(TaskSet taskSet) throws InterruptedException {\n     var rand = new SecureRandom();\n     for (var i = 0; i < 5; i++) {",
    "output": "Handle awaitTermination result and ensure proper ExecutorService shutdown\n* fix: handle awaitTermination result and ensure proper ExecutorService shutdown\n- Added handling for the result of awaitTermination to avoid Sonar warning\n- Wrapped ExecutorService with try-finally for proper shutdown (java:S2095)\n- Prevents potential resource leak and aligns with best practices\nNote: ExecutorService is not AutoCloseable, so try-with-resources is not applicable. Used try-finally instead.\n* fix: add missing logger definition for SLF4J\n- Defined logger explicitly with LoggerFactory.getLogger(...)\n- Ensured compatibility with Lombok's @Slf4j annotation\n- Fixed compilation error caused by missing 'log' variable\n* fix: add missing logger definition for SLF4J"
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n@@ -57,20 +57,30 @@ public class App {\n   /** Program execution point. */\n   public void run() {\n     final var executorService = Executors.newSingleThreadScheduledExecutor();\n-    executorService.scheduleAtFixedRate(\n-        new Runnable() {\n-          final World world = new World();\n+    try {\n+      executorService.scheduleAtFixedRate(\n+          new Runnable() {\n+            final World world = new World();\n \n-          @Override\n-          public void run() {\n-            var countries = world.fetch();\n-            LOGGER.info(\"Our world currently has the following countries:-\");\n-            countries.stream().map(country -> \"\\t\" + country).forEach(LOGGER::info);\n-          }\n-        },\n-        0,\n-        15,\n-        TimeUnit.SECONDS); // Run at every 15 seconds.\n+            @Override\n+            public void run() {\n+              var countries = world.fetch();\n+              LOGGER.info(\"Our world currently has the following countries:-\");\n+              countries.stream().map(country -> \"\\t\" + country).forEach(LOGGER::info);\n+            }\n+          },\n+          0,\n+          15,\n+          TimeUnit.SECONDS);\n+\n+      // Keep running for 45 seconds before shutdown (for demo purpose)\n+      TimeUnit.SECONDS.sleep(45);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      LOGGER.error(\"Thread was interrupted\", e);\n+    } finally {\n+      executorService.shutdown();\n+    }\n   }\n \n   /**",
    "output": "Resolve SonarCloud issue in dirty flag / App.java"
  },
  {
    "input": "diff --git a/bloc/src/test/java/com/iluwatar/bloc/MainTest.java b/bloc/src/test/java/com/iluwatar/bloc/MainTest.java\n--- a/bloc/src/test/java/com/iluwatar/bloc/MainTest.java\n+++ b/bloc/src/test/java/com/iluwatar/bloc/MainTest.java\n@@ -1,46 +0,0 @@\n-/*\n- * This project is licensed under the MIT license. Module model-view-viewmodel is using ZK framework licensed under LGPL (see lgpl-3.0.txt).\n- *\n- * The MIT License\n- * Copyright © 2014-2022 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.bloc;\n-\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.mockito.Mockito.mockStatic;\n-\n-\n-class MainTest {\n-\n-  @Test\n-  @Disabled\n-  void testMain() {\n-    try (var mockedBlocUi = mockStatic(BlocUi.class)) {\n-      // Call the main method\n-      Main.main(new String[]{});\n-\n-      // Verify that createAndShowUi was called\n-      mockedBlocUi.verify(() -> new BlocUi().createAndShowUi());\n-    }\n-  }\n-}\n\\ No newline at end of file",
    "output": "Remove mockito test"
  },
  {
    "input": "diff --git a/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java b/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java\n--- a/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java\n+++ b/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java\n@@ -31,7 +31,6 @@\n class ContactPageViewTest {\n \n   @Test\n-  @Disabled\n   void testRenderDynamicContent() {\n     // Create a spy for ContactPageView\n     ContactPageView contactPage = spy(ContactPageView.class);\n\ndiff --git a/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java b/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java\n--- a/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java\n+++ b/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java\n@@ -31,7 +31,6 @@\n class HomePageViewTest {\n \n   @Test\n-  @Disabled\n   void testRenderDynamicContent() {\n     // Create a spy for HomePageView\n     HomePageView homePage = spy(HomePageView.class);\n\ndiff --git a/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java b/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java\n--- a/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java\n+++ b/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java\n@@ -31,7 +31,6 @@\n class TemplateViewTest {\n \n   @Test\n-  @Disabled\n   void testRenderHomePage() {\n     // Create a spy for HomePageView\n     TemplateView homePage = spy(HomePageView.class);\n@@ -46,7 +45,6 @@ void testRenderHomePage() {\n   }\n \n   @Test\n-  @Disabled\n   void testRenderContactPage() {\n     // Create a spy for ContactPageView\n     TemplateView contactPage = spy(ContactPageView.class);",
    "output": "Fix templateview mockito tests"
  },
  {
    "input": "diff --git a/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n--- a/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n+++ b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n@@ -27,8 +27,8 @@\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -41,43 +41,26 @@ class HalflingThiefTest {\n    * Verify if the thief uses the provided stealing method\n    */\n   @Test\n-  @Disabled\n   void testSteal() {\n     final var method = spy(StealingMethod.class);\n     final var thief = new HalflingThief(method);\n-\n     thief.steal();\n     verify(method).steal();\n-    String target = verify(method).pickTarget();\n-    verify(method).confuseTarget(target);\n-    verify(method).stealTheItem(target);\n-\n-    verifyNoMoreInteractions(method);\n   }\n \n   /**\n    * Verify if the thief uses the provided stealing method, and the new method after changing it\n    */\n   @Test\n-  @Disabled\n   void testChangeMethod() {\n     final var initialMethod = spy(StealingMethod.class);\n     final var thief = new HalflingThief(initialMethod);\n-\n     thief.steal();\n     verify(initialMethod).steal();\n-    String target = verify(initialMethod).pickTarget();\n-    verify(initialMethod).confuseTarget(target);\n-    verify(initialMethod).stealTheItem(target);\n \n     final var newMethod = spy(StealingMethod.class);\n     thief.changeMethod(newMethod);\n-\n     thief.steal();\n     verify(newMethod).steal();\n-    String newTarget = verify(newMethod).pickTarget();\n-    verify(newMethod).confuseTarget(newTarget);\n-    verify(newMethod).stealTheItem(newTarget);\n-    verifyNoMoreInteractions(initialMethod, newMethod);\n   }\n-}\n\\ No newline at end of file\n+}",
    "output": "Fix template-method mockito tests"
  },
  {
    "input": "diff --git a/bloc/src/test/java/com/iluwatar/bloc/MainTest.java b/bloc/src/test/java/com/iluwatar/bloc/MainTest.java\n--- a/bloc/src/test/java/com/iluwatar/bloc/MainTest.java\n+++ b/bloc/src/test/java/com/iluwatar/bloc/MainTest.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.bloc;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import static org.mockito.Mockito.mockStatic;\n@@ -32,6 +33,7 @@\n class MainTest {\n \n   @Test\n+  @Disabled\n   void testMain() {\n     try (var mockedBlocUi = mockStatic(BlocUi.class)) {\n       // Call the main method\n\ndiff --git a/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n--- a/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n+++ b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n@@ -28,6 +28,7 @@\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -40,6 +41,7 @@ class HalflingThiefTest {\n    * Verify if the thief uses the provided stealing method\n    */\n   @Test\n+  @Disabled\n   void testSteal() {\n     final var method = spy(StealingMethod.class);\n     final var thief = new HalflingThief(method);\n@@ -57,6 +59,7 @@ void testSteal() {\n    * Verify if the thief uses the provided stealing method, and the new method after changing it\n    */\n   @Test\n+  @Disabled\n   void testChangeMethod() {\n     final var initialMethod = spy(StealingMethod.class);\n     final var thief = new HalflingThief(initialMethod);\n\ndiff --git a/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java b/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java\n--- a/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java\n+++ b/templateview/src/test/java/com/iluwatar/templateview/ContactPageViewTest.java\n@@ -24,12 +24,14 @@\n  */\n package com.iluwatar.templateview;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import static org.mockito.Mockito.*;\n \n class ContactPageViewTest {\n \n   @Test\n+  @Disabled\n   void testRenderDynamicContent() {\n     // Create a spy for ContactPageView\n     ContactPageView contactPage = spy(ContactPageView.class);\n\ndiff --git a/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java b/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java\n--- a/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java\n+++ b/templateview/src/test/java/com/iluwatar/templateview/HomePageViewTest.java\n@@ -24,12 +24,14 @@\n  */\n package com.iluwatar.templateview;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import static org.mockito.Mockito.*;\n \n class HomePageViewTest {\n \n   @Test\n+  @Disabled\n   void testRenderDynamicContent() {\n     // Create a spy for HomePageView\n     HomePageView homePage = spy(HomePageView.class);\n\ndiff --git a/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java b/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java\n--- a/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java\n+++ b/templateview/src/test/java/com/iluwatar/templateview/TemplateViewTest.java\n@@ -24,12 +24,14 @@\n  */\n package com.iluwatar.templateview;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import static org.mockito.Mockito.*;\n \n class TemplateViewTest {\n \n   @Test\n+  @Disabled\n   void testRenderHomePage() {\n     // Create a spy for HomePageView\n     TemplateView homePage = spy(HomePageView.class);\n@@ -44,6 +46,7 @@ void testRenderHomePage() {\n   }\n \n   @Test\n+  @Disabled\n   void testRenderContactPage() {\n     // Create a spy for ContactPageView\n     TemplateView contactPage = spy(ContactPageView.class);",
    "output": "Java 21 update\n* update pom.xml and github actions scripts\n* disable failing tests, for now"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/BillPughImplementation.java b/singleton/src/main/java/com/iluwatar/singleton/BillPughImplementation.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/BillPughImplementation.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/BillPughImplementation.java\n@@ -40,7 +40,10 @@ public final class BillPughImplementation {\n    * Private constructor to prevent instantiation from outside the class.\n    */\n   private BillPughImplementation() {\n-    // private constructor\n+    // to prevent instantiating by Reflection call\n+    if (InstanceHolder.instance != null) {\n+      throw new IllegalStateException(\"Already initialized.\");\n+    }\n   }\n \n   /**\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n@@ -43,6 +43,10 @@ public final class InitializingOnDemandHolderIdiom {\n    * Private constructor.\n    */\n   private InitializingOnDemandHolderIdiom() {\n+    // to prevent instantiating by Reflection call\n+    if (HelperHolder.INSTANCE != null) {\n+      throw new IllegalStateException(\"Already initialized.\");\n+    }\n   }\n \n   /**\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n@@ -33,6 +33,10 @@ public final class IvoryTower {\n    * Private constructor so nobody can instantiate the class.\r\n    */\r\n   private IvoryTower() {\r\n+    // to prevent instantiating by Reflection call\r\n+    if (INSTANCE != null) {\r\n+      throw new IllegalStateException(\"Already initialized.\");\r\n+    }\r\n   }\r\n \r\n   /**\r\n\ndiff --git a/singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java b/singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/EnumIvoryTowerTest.java\n@@ -24,6 +24,10 @@\n  */\n package com.iluwatar.singleton;\n \n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n /**\n  * EnumIvoryTowerTest\n  *\n@@ -37,4 +41,14 @@ public EnumIvoryTowerTest() {\n     super(() -> EnumIvoryTower.INSTANCE);\n   }\n \n+  /**\n+   * Test creating new instance by reflection.\n+   */\n+  @Override\n+  @Test\n+  void testCreatingNewInstanceByReflection() throws Exception {\n+    // Java does not allow Enum instantiation http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\n+    assertThrows(ReflectiveOperationException.class, EnumIvoryTower.class::getDeclaredConstructor);\n+  }\n+\n }\n\ndiff --git a/singleton/src/test/java/com/iluwatar/singleton/SingletonTest.java b/singleton/src/test/java/com/iluwatar/singleton/SingletonTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/SingletonTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/SingletonTest.java\n@@ -27,8 +27,10 @@\n import static java.time.Duration.ofMillis;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTimeout;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Executors;\n@@ -106,4 +108,14 @@ void testMultipleCallsReturnTheSameObjectInDifferentThreads() {\n \n   }\n \n+  /**\n+   * Test creating new instance by reflection.\n+   */\n+  @Test\n+  void testCreatingNewInstanceByReflection() throws Exception {\n+    var firstTimeInstantiated = this.singletonInstanceMethod.get();\n+    var constructor = firstTimeInstantiated.getClass().getDeclaredConstructor();\n+    constructor.setAccessible(true);\n+    assertThrows(InvocationTargetException.class, () -> constructor.newInstance((Object[]) null));\n+  }\n }\n\ndiff --git a/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java b/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java\n@@ -24,11 +24,6 @@\n  */\n package com.iluwatar.singleton;\n \n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import org.junit.jupiter.api.Test;\n-\n /**\n  * ThreadSafeDoubleCheckLockingTest\n  *\n@@ -42,15 +37,4 @@ public ThreadSafeDoubleCheckLockingTest() {\n     super(ThreadSafeDoubleCheckLocking::getInstance);\n   }\n \n-  /**\n-   * Test creating new instance by refection.\n-   */\n-  @Test\n-  void testCreatingNewInstanceByRefection() throws Exception {\n-    ThreadSafeDoubleCheckLocking.getInstance();\n-    var constructor = ThreadSafeDoubleCheckLocking.class.getDeclaredConstructor();\n-    constructor.setAccessible(true);\n-    assertThrows(InvocationTargetException.class, () -> constructor.newInstance((Object[]) null));\n-  }\n-\n }",
    "output": "Fix Singleton typo and extend reflection handling to remaining implementations\n* fix typo\n* adding Reflection handling to other Singleton implementations"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/App.java b/caching/src/main/java/com/iluwatar/caching/App.java\n--- a/caching/src/main/java/com/iluwatar/caching/App.java\n+++ b/caching/src/main/java/com/iluwatar/caching/App.java\n@@ -133,7 +133,7 @@ public static void main(final String[] args) {\n     LOGGER.info(splitLine);\n     app.useReadThroughAndWriteBehindStrategy();\n     LOGGER.info(splitLine);\n-    app.useCacheAsideStategy();\n+    app.useCacheAsideStrategy();\n     LOGGER.info(splitLine);\n   }\n \n@@ -224,7 +224,7 @@ public void useReadThroughAndWriteBehindStrategy() {\n   /**\n    * Cache-Aside.\n    */\n-  public void useCacheAsideStategy() {\n+  public void useCacheAsideStrategy() {\n     LOGGER.info(\"# CachingPolicy.ASIDE\");\n     appManager.initCachingPolicy(CachingPolicy.ASIDE);\n     LOGGER.info(appManager.printCacheContent());\n\ndiff --git a/caching/src/test/java/com/iluwatar/caching/CachingTest.java b/caching/src/test/java/com/iluwatar/caching/CachingTest.java\n--- a/caching/src/test/java/com/iluwatar/caching/CachingTest.java\n+++ b/caching/src/test/java/com/iluwatar/caching/CachingTest.java\n@@ -68,6 +68,6 @@ void testReadThroughAndWriteBehindStrategy() {\n   @Test\n   void testCacheAsideStrategy() {\n     assertNotNull(app);\n-    app.useCacheAsideStategy();\n+    app.useCacheAsideStrategy();\n   }\n }\n\ndiff --git a/money/src/main/java/com/iluwatar/CannotSubtractException.java b/money/src/main/java/com/iluwatar/CannotSubtractException.java\n--- a/money/src/main/java/com/iluwatar/CannotSubtractException.java\n+++ b/money/src/main/java/com/iluwatar/CannotSubtractException.java\n@@ -1,6 +1,6 @@\n package com.iluwatar;\n /**\n- * An exception for when the user tries to subtract two diffrent currencies or subtract an amount he doesn't have.\n+ * An exception for when the user tries to subtract two different currencies or subtract an amount he doesn't have.\n  */\n public class CannotSubtractException extends Exception {\n   /**\n@@ -12,4 +12,4 @@ public CannotSubtractException(String message) {\n     super(message);\n   }\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Typos in documentation files\n* Update CannotSubtractException.java\n* Update CachingTest.java\n* Update App.java\n* Update caching.urm.puml\n* Update update-method.urm.puml"
  },
  {
    "input": "diff --git a/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java b/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java\n--- a/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java\n+++ b/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java\n@@ -67,59 +67,60 @@ public void execute(int[] bytecode) {\n     for (var i = 0; i < bytecode.length; i++) {\n       Instruction instruction = Instruction.getInstruction(bytecode[i]);\n       switch (instruction) {\n-        case LITERAL:\n-          // Read the next byte from the bytecode.\n+        case LITERAL -> { // Read the next byte from the bytecode.\n           int value = bytecode[++i];\n           // Push the next value to stack\n           stack.push(value);\n-          break;\n-        case SET_AGILITY:\n+        }\n+        case SET_AGILITY -> {\n           var amount = stack.pop();\n           var wizard = stack.pop();\n           setAgility(wizard, amount);\n-          break;\n-        case SET_WISDOM:\n-          amount = stack.pop();\n-          wizard = stack.pop();\n+        }\n+        case SET_WISDOM -> {\n+          var amount = stack.pop();\n+          var wizard = stack.pop();\n           setWisdom(wizard, amount);\n-          break;\n-        case SET_HEALTH:\n-          amount = stack.pop();\n-          wizard = stack.pop();\n+        }\n+        case SET_HEALTH -> {\n+          var amount = stack.pop();\n+          var wizard = stack.pop();\n           setHealth(wizard, amount);\n-          break;\n-        case GET_HEALTH:\n-          wizard = stack.pop();\n+        }\n+        case GET_HEALTH -> {\n+          var wizard = stack.pop();\n           stack.push(getHealth(wizard));\n-          break;\n-        case GET_AGILITY:\n-          wizard = stack.pop();\n+        }\n+        case GET_AGILITY -> {\n+          var wizard = stack.pop();\n           stack.push(getAgility(wizard));\n-          break;\n-        case GET_WISDOM:\n-          wizard = stack.pop();\n+        }\n+        case GET_WISDOM -> {\n+          var wizard = stack.pop();\n           stack.push(getWisdom(wizard));\n-          break;\n-        case ADD:\n+        }\n+        case ADD -> {\n           var a = stack.pop();\n           var b = stack.pop();\n           stack.push(a + b);\n-          break;\n-        case DIVIDE:\n-          a = stack.pop();\n-          b = stack.pop();\n+        }\n+        case DIVIDE -> {\n+          var a = stack.pop();\n+          var b = stack.pop();\n           stack.push(b / a);\n-          break;\n-        case PLAY_SOUND:\n-          wizard = stack.pop();\n+        }\n+        case PLAY_SOUND -> {\n+          var wizard = stack.pop();\n           getWizards()[wizard].playSound();\n-          break;\n-        case SPAWN_PARTICLES:\n-          wizard = stack.pop();\n+\n+        }\n+        case SPAWN_PARTICLES -> {\n+          var wizard = stack.pop();\n           getWizards()[wizard].spawnParticles();\n-          break;\n-        default:\n+        }\n+        default -> {\n           throw new IllegalArgumentException(\"Invalid instruction value\");\n+        }\n       }\n       LOGGER.info(\"Executed \" + instruction.name() + \", Stack contains \" + getStack());\n     }",
    "output": "Upgrade switch expression"
  },
  {
    "input": "diff --git a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n--- a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n+++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n@@ -114,12 +114,16 @@ void shouldUpdateExistingValue() {\n     final String originalValue = \"originalValue\";\n     final String updatedValue = \"updatedValue\";\n \n+    // Initializing the value\n     document.put(key, originalValue);\n \n+    // Verifying that the initial value is retrieved correctly\n+    assertEquals(originalValue, document.get(key));\n+\n     // Updating the value\n     document.put(key, updatedValue);\n \n-    //Verifying that the updated value is retrieved correctly\n+    // Verifying that the updated value is retrieved correctly\n     assertEquals(updatedValue, document.get(key));\n   }\n }",
    "output": "Add to AbstractDocumentTest verification of originalValue in document"
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.partialresponse;\n \n import java.lang.reflect.Field;\n+import java.util.StringJoiner;\n \n /**\n  * Map a video to json.\n@@ -39,18 +40,15 @@ public class FieldJsonMapper {\n    * @return json of required fields from video\n    */\n   public String toJson(Video video, String[] fields) throws Exception {\n-    var json = new StringBuilder().append(\"{\");\n+    var json = new StringJoiner(\",\", \"{\", \"}\");\n \n     var i = 0;\n     var fieldsLength = fields.length;\n     while (i < fieldsLength) {\n-      json.append(getString(video, Video.class.getDeclaredField(fields[i])));\n-      if (i != fieldsLength - 1) {\n-        json.append(\",\");\n-      }\n+      json.add(getString(video, Video.class.getDeclaredField(fields[i])));\n       i++;\n     }\n-    json.append(\"}\");\n+\n     return json.toString();\n   }\n \n\ndiff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -43,7 +43,7 @@ public String toString() {\n             + \"\\\"length\\\": \" + length + \",\"\n             + \"\\\"description\\\": \\\"\" + description + \"\\\",\"\n             + \"\\\"director\\\": \\\"\" + director + \"\\\",\"\n-            + \"\\\"language\\\": \\\"\" + language + \"\\\",\"\n+            + \"\\\"language\\\": \\\"\" + language + \"\\\"\"\n             + \"}\";\n   }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -63,7 +63,7 @@ void shouldGiveVideoDetailsById() throws Exception {\n     var actualDetails = resource.getDetails(1);\n \n     var expectedDetails = \"{\\\"id\\\": 1,\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \"\n-        + \"\\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n+        + \"\\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\"}\";\n     Assertions.assertEquals(expectedDetails, actualDetails);\n   }\n \n@@ -78,4 +78,17 @@ void shouldGiveSpecifiedFieldsInformationOfVideo() throws Exception {\n \n     Assertions.assertEquals(expectedDetails, actualFieldsDetails);\n   }\n-}\n\\ No newline at end of file\n+\n+  @Test\n+  void shouldAllSpecifiedFieldsInformationOfVideo() throws Exception {\n+    var fields = new String[]{\"id\", \"title\", \"length\", \"description\", \"director\", \"language\"};\n+\n+    var expectedDetails = \"{\\\"id\\\": 1,\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \"\n+        + \"\\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\"}\";\n+    Mockito.when(fieldJsonMapper.toJson(any(Video.class), eq(fields))).thenReturn(expectedDetails);\n+\n+    var actualFieldsDetails = resource.getDetails(1, fields);\n+\n+    Assertions.assertEquals(expectedDetails, actualFieldsDetails);\n+  }\n+}",
    "output": "Video.toString() outputs an illegal json string\nrefactor: json string concat\nadd an extra line at EOF"
  },
  {
    "input": "diff --git a/visitor/src/test/java/com/iluwatar/visitor/CommanderVisitorTest.java b/visitor/src/test/java/com/iluwatar/visitor/CommanderVisitorTest.java\n--- a/visitor/src/test/java/com/iluwatar/visitor/CommanderVisitorTest.java\n+++ b/visitor/src/test/java/com/iluwatar/visitor/CommanderVisitorTest.java\n@@ -38,9 +38,9 @@ class CommanderVisitorTest extends VisitorTest<CommanderVisitor> {\n   public CommanderVisitorTest() {\n     super(\n         new CommanderVisitor(),\n-        Optional.of(\"Good to see you commander\"),\n-        Optional.empty(),\n-        Optional.empty()\n+        (\"Good to see you commander\"),\n+        null,\n+         null\n     );\n   }\n \n\ndiff --git a/visitor/src/test/java/com/iluwatar/visitor/SergeantVisitorTest.java b/visitor/src/test/java/com/iluwatar/visitor/SergeantVisitorTest.java\n--- a/visitor/src/test/java/com/iluwatar/visitor/SergeantVisitorTest.java\n+++ b/visitor/src/test/java/com/iluwatar/visitor/SergeantVisitorTest.java\n@@ -38,9 +38,9 @@ class SergeantVisitorTest extends VisitorTest<SergeantVisitor> {\n   public SergeantVisitorTest() {\n     super(\n         new SergeantVisitor(),\n-        Optional.empty(),\n-        Optional.of(\"Hello sergeant\"),\n-        Optional.empty()\n+        null,\n+        (\"Hello sergeant\"),\n+        null\n     );\n   }\n \n\ndiff --git a/visitor/src/test/java/com/iluwatar/visitor/SoldierVisitorTest.java b/visitor/src/test/java/com/iluwatar/visitor/SoldierVisitorTest.java\n--- a/visitor/src/test/java/com/iluwatar/visitor/SoldierVisitorTest.java\n+++ b/visitor/src/test/java/com/iluwatar/visitor/SoldierVisitorTest.java\n@@ -38,9 +38,9 @@ class SoldierVisitorTest extends VisitorTest<SoldierVisitor> {\n   public SoldierVisitorTest() {\n     super(\n         new SoldierVisitor(),\n-        Optional.empty(),\n-        Optional.empty(),\n-        Optional.of(\"Greetings soldier\")\n+        null,\n+        null,\n+        (\"Greetings soldier\")\n     );\n   }\n \n\ndiff --git a/visitor/src/test/java/com/iluwatar/visitor/VisitorTest.java b/visitor/src/test/java/com/iluwatar/visitor/VisitorTest.java\n--- a/visitor/src/test/java/com/iluwatar/visitor/VisitorTest.java\n+++ b/visitor/src/test/java/com/iluwatar/visitor/VisitorTest.java\n@@ -31,7 +31,6 @@\n import ch.qos.logback.core.AppenderBase;\n import java.util.LinkedList;\n import java.util.List;\n-import java.util.Optional;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -62,32 +61,32 @@ void tearDown() {\n   private final V visitor;\n \n   /**\n-   * The optional expected response when being visited by a commander.\n+   * The expected response when being visited by a commander.\n    */\n-  private final Optional<String> commanderResponse;\n+  private final String commanderResponse;\n \n   /**\n-   * The optional expected response when being visited by a sergeant.\n+   * The expected response when being visited by a sergeant.\n    */\n-  private final Optional<String> sergeantResponse;\n+  private final String sergeantResponse;\n \n   /**\n-   * The optional expected response when being visited by a soldier.\n+   * The expected response when being visited by a soldier.\n    */\n-  private final Optional<String> soldierResponse;\n+  private final String soldierResponse;\n \n   /**\n    * Create a new test instance for the given visitor.\n    *\n-   * @param commanderResponse The optional expected response when being visited by a commander\n-   * @param sergeantResponse  The optional expected response when being visited by a sergeant\n-   * @param soldierResponse   The optional expected response when being visited by a soldier\n+   * @param commanderResponse The expected response when being visited by a commander\n+   * @param sergeantResponse  The expected response when being visited by a sergeant\n+   * @param soldierResponse   The expected response when being visited by a soldier\n    */\n   public VisitorTest(\n       final V visitor,\n-      final Optional<String> commanderResponse,\n-      final Optional<String> sergeantResponse,\n-      final Optional<String> soldierResponse\n+      final String commanderResponse,\n+      final String sergeantResponse,\n+      final String soldierResponse\n   ) {\n     this.visitor = visitor;\n     this.commanderResponse = commanderResponse;\n@@ -98,26 +97,26 @@ public VisitorTest(\n   @Test\n   void testVisitCommander() {\n     this.visitor.visit(new Commander());\n-    if (this.commanderResponse.isPresent()) {\n-      assertEquals(this.commanderResponse.get(), appender.getLastMessage());\n+    if (this.commanderResponse != null) {\n+      assertEquals(this.commanderResponse, appender.getLastMessage());\n       assertEquals(1, appender.getLogSize());\n     }\n   }\n \n   @Test\n   void testVisitSergeant() {\n     this.visitor.visit(new Sergeant());\n-    if (this.sergeantResponse.isPresent()) {\n-      assertEquals(this.sergeantResponse.get(), appender.getLastMessage());\n+    if (this.sergeantResponse != null) {\n+      assertEquals(this.sergeantResponse, appender.getLastMessage());\n       assertEquals(1, appender.getLogSize());\n     }\n   }\n \n   @Test\n   void testVisitSoldier() {\n     this.visitor.visit(new Soldier());\n-    if (this.soldierResponse.isPresent()) {\n-      assertEquals(this.soldierResponse.get(), appender.getLastMessage());\n+    if (this.soldierResponse != null) {\n+      assertEquals(this.soldierResponse, appender.getLastMessage());\n       assertEquals(1, appender.getLogSize());\n     }\n   }",
    "output": "Issue 2975 Refactored Visitor"
  },
  {
    "input": "diff --git a/layered-architecture/src/main/java/com/iluwatar/layers/Runner.java b/layered-architecture/src/main/java/com/iluwatar/layers/Runner.java\n--- a/layered-architecture/src/main/java/com/iluwatar/layers/Runner.java\n+++ b/layered-architecture/src/main/java/com/iluwatar/layers/Runner.java\n@@ -32,6 +32,10 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.stereotype.Component;\n import service.CakeBakingService;\n import view.CakeViewImpl;\n@@ -44,6 +48,8 @@\n  * It uses the CakeBakingService to save new layers and toppings and to bake new cakes.\n  * It also handles exceptions that might occur during the cake baking process.</p>\n  */\n+@EntityScan(basePackages = \"entity\")\n+@ComponentScan(basePackages = {\"com.iluwatar.layers\", \"service\", \"dto\", \"exception\", \"view\", \"dao\"})\n @Component\n @Slf4j\n public class Runner implements CommandLineRunner {\n@@ -64,6 +70,10 @@ public void run(String... args) {\n     cakeView.render();\n   }\n \n+  public static void main(String[] args) {\n+    SpringApplication.run(Runner.class, args);\n+  }\n+\n   /**\n    * Initializes the example data.\n    */\n\ndiff --git a/layered-architecture/src/main/java/dto/CakeInfo.java b/layered-architecture/src/main/java/dto/CakeInfo.java\n--- a/layered-architecture/src/main/java/dto/CakeInfo.java\n+++ b/layered-architecture/src/main/java/dto/CakeInfo.java\n@@ -26,22 +26,21 @@\n package dto;\n \n import java.util.List;\n-import java.util.Optional;\n \n /**\n  * DTO for cakes.\n  */\n public class CakeInfo {\n \n-  public final Optional<Long> id;\n+  public final Long id;\n   public final CakeToppingInfo cakeToppingInfo;\n   public final List<CakeLayerInfo> cakeLayerInfos;\n \n   /**\n    * Constructor.\n    */\n   public CakeInfo(Long id, CakeToppingInfo cakeToppingInfo, List<CakeLayerInfo> cakeLayerInfos) {\n-    this.id = Optional.of(id);\n+    this.id = id;\n     this.cakeToppingInfo = cakeToppingInfo;\n     this.cakeLayerInfos = cakeLayerInfos;\n   }\n@@ -50,7 +49,7 @@ public CakeInfo(Long id, CakeToppingInfo cakeToppingInfo, List<CakeLayerInfo> ca\n    * Constructor.\n    */\n   public CakeInfo(CakeToppingInfo cakeToppingInfo, List<CakeLayerInfo> cakeLayerInfos) {\n-    this.id = Optional.empty();\n+    this.id = null;\n     this.cakeToppingInfo = cakeToppingInfo;\n     this.cakeLayerInfos = cakeLayerInfos;\n   }\n@@ -66,7 +65,7 @@ public int calculateTotalCalories() {\n \n   @Override\n   public String toString() {\n-    return String.format(\"CakeInfo id=%d topping=%s layers=%s totalCalories=%d\", id.orElse(-1L),\n+    return String.format(\"CakeInfo id=%d topping=%s layers=%s totalCalories=%d\", id,\n         cakeToppingInfo, cakeLayerInfos, calculateTotalCalories());\n   }\n }\n\ndiff --git a/layered-architecture/src/main/java/dto/CakeLayerInfo.java b/layered-architecture/src/main/java/dto/CakeLayerInfo.java\n--- a/layered-architecture/src/main/java/dto/CakeLayerInfo.java\n+++ b/layered-architecture/src/main/java/dto/CakeLayerInfo.java\n@@ -25,22 +25,20 @@\n \n package dto;\n \n-import java.util.Optional;\n-\n /**\n  * DTO for cake layers.\n  */\n public class CakeLayerInfo {\n \n-  public final Optional<Long> id;\n+  public final Long id;\n   public final String name;\n   public final int calories;\n \n   /**\n    * Constructor.\n    */\n   public CakeLayerInfo(Long id, String name, int calories) {\n-    this.id = Optional.of(id);\n+    this.id = id;\n     this.name = name;\n     this.calories = calories;\n   }\n@@ -49,13 +47,13 @@ public CakeLayerInfo(Long id, String name, int calories) {\n    * Constructor.\n    */\n   public CakeLayerInfo(String name, int calories) {\n-    this.id = Optional.empty();\n+    this.id = null;\n     this.name = name;\n     this.calories = calories;\n   }\n \n   @Override\n   public String toString() {\n-    return String.format(\"CakeLayerInfo id=%d name=%s calories=%d\", id.orElse(-1L), name, calories);\n+    return String.format(\"CakeLayerInfo id=%d name=%s calories=%d\", id, name, calories);\n   }\n }\n\ndiff --git a/layered-architecture/src/main/java/dto/CakeToppingInfo.java b/layered-architecture/src/main/java/dto/CakeToppingInfo.java\n--- a/layered-architecture/src/main/java/dto/CakeToppingInfo.java\n+++ b/layered-architecture/src/main/java/dto/CakeToppingInfo.java\n@@ -25,23 +25,20 @@\n \n package dto;\n \n-\n-import java.util.Optional;\n-\n /**\n  * DTO for cake toppings.\n  */\n public class CakeToppingInfo {\n \n-  public final Optional<Long> id;\n+  public final Long id;\n   public final String name;\n   public final int calories;\n \n   /**\n    * Constructor.\n    */\n   public CakeToppingInfo(Long id, String name, int calories) {\n-    this.id = Optional.of(id);\n+    this.id = id;\n     this.name = name;\n     this.calories = calories;\n   }\n@@ -50,14 +47,14 @@ public CakeToppingInfo(Long id, String name, int calories) {\n    * Constructor.\n    */\n   public CakeToppingInfo(String name, int calories) {\n-    this.id = Optional.empty();\n+    this.id = null;\n     this.name = name;\n     this.calories = calories;\n   }\n \n   @Override\n   public String toString() {\n-    return String.format(\"CakeToppingInfo id=%d name=%s calories=%d\", id.orElse(-1L), name,\n+    return String.format(\"CakeToppingInfo id=%d name=%s calories=%d\", id, name,\n         calories);\n   }\n }",
    "output": "Refactor Layered Architecture pattern"
  },
  {
    "input": "diff --git a/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java b/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java\n--- a/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java\n+++ b/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java\n@@ -24,8 +24,7 @@\n  */\n package com.iluwatar.versionnumber;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n /**\n  * This repository represents simplified database.\n@@ -34,7 +33,8 @@\n  * as much as in real databases.\n  */\n public class BookRepository {\n-  private final Map<Long, Book> collection = new HashMap<>();\n+  private final ConcurrentHashMap<Long, Book> collection = new ConcurrentHashMap<>();\n+  private final Object lock = new Object();\n \n   /**\n    * Adds book to collection.\n@@ -57,19 +57,22 @@ public void update(Book book) throws BookNotFoundException, VersionMismatchExcep\n       throw new BookNotFoundException(\"Not found book with id: \" + book.getId());\n     }\n \n-    var latestBook = collection.get(book.getId());\n-    if (book.getVersion() != latestBook.getVersion()) {\n-      throw new VersionMismatchException(\n-        \"Tried to update stale version \" + book.getVersion()\n-          + \" while actual version is \" + latestBook.getVersion()\n-      );\n-    }\n+    // used synchronized block to ensure only one thread compares and update the version\n+    synchronized (lock) {\n+      var latestBook = collection.get(book.getId());\n+      if (book.getVersion() != latestBook.getVersion()) {\n+        throw new VersionMismatchException(\n+            \"Tried to update stale version \" + book.getVersion()\n+                + \" while actual version is \" + latestBook.getVersion()\n+        );\n+      }\n \n-    // update version, including client representation - modify by reference here\n-    book.setVersion(book.getVersion() + 1);\n+      // update version, including client representation - modify by reference here\n+      book.setVersion(book.getVersion() + 1);\n \n-    // save book copy to repository\n-    collection.put(book.getId(), new Book(book));\n+      // save book copy to repository\n+      collection.put(book.getId(), new Book(book));\n+    }\n   }\n \n   /**",
    "output": "Version number pattern update overwritten\n* Fix bug\n* Fix bug"
  },
  {
    "input": "diff --git a/command-query-responsibility-segregation/src/main/java/com/iluwatar/cqrs/app/App.java b/command-query-responsibility-segregation/src/main/java/com/iluwatar/cqrs/app/App.java\n--- a/command-query-responsibility-segregation/src/main/java/com/iluwatar/cqrs/app/App.java\n+++ b/command-query-responsibility-segregation/src/main/java/com/iluwatar/cqrs/app/App.java\n@@ -50,9 +50,10 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    var commands = new CommandServiceImpl();\n \n     // Create Authors and Books using CommandService\n+    var commands = new CommandServiceImpl();\n+\n     commands.authorCreated(AppConstants.E_EVANS, \"Eric Evans\", \"evans@email.com\");\n     commands.authorCreated(AppConstants.J_BLOCH, \"Joshua Bloch\", \"jBloch@email.com\");\n     commands.authorCreated(AppConstants.M_FOWLER, \"Martin Fowler\", \"mFowler@email.com\");\n@@ -66,9 +67,9 @@ public static void main(String[] args) {\n     commands.bookAddedToAuthor(\"Domain Specific Languages\", 48.89, AppConstants.M_FOWLER);\n     commands.authorNameUpdated(AppConstants.E_EVANS, \"Eric J. Evans\");\n \n+    // Query the database using QueryService\n     var queries = new QueryServiceImpl();\n \n-    // Query the database using QueryService\n     var nullAuthor = queries.getAuthorByUsername(\"username\");\n     var evans = queries.getAuthorByUsername(AppConstants.E_EVANS);\n     var blochBooksCount = queries.getAuthorBooksCount(AppConstants.J_BLOCH);\n\ndiff --git a/commander/src/main/java/com/iluwatar/commander/AppQueueFailCases.java b/commander/src/main/java/com/iluwatar/commander/AppQueueFailCases.java\n--- a/commander/src/main/java/com/iluwatar/commander/AppQueueFailCases.java\n+++ b/commander/src/main/java/com/iluwatar/commander/AppQueueFailCases.java\n@@ -134,4 +134,4 @@ public static void main(String[] args) {\n     var aqfc = new AppQueueFailCases();\n     aqfc.queueSuccessCase();\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/commander/src/main/java/com/iluwatar/commander/AppShippingFailCases.java b/commander/src/main/java/com/iluwatar/commander/AppShippingFailCases.java\n--- a/commander/src/main/java/com/iluwatar/commander/AppShippingFailCases.java\n+++ b/commander/src/main/java/com/iluwatar/commander/AppShippingFailCases.java\n@@ -43,8 +43,8 @@\n  */\n \n public class AppShippingFailCases {\n-  private static final RetryParams retryParams = RetryParams.DEFAULT;\n \n+  private static final RetryParams retryParams = RetryParams.DEFAULT;\n   private static final TimeLimits timeLimits = TimeLimits.DEFAULT;\n \n   void itemUnavailableCase() {\n@@ -111,4 +111,4 @@ public static void main(String[] args) {\n     var asfc = new AppShippingFailCases();\n     asfc.shippingSuccessCase();\n   }\n-}\n\\ No newline at end of file\n+}",
    "output": "Upgrade to several patterns"
  },
  {
    "input": "diff --git a/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java b/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java\n--- a/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java\n+++ b/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java\n@@ -48,11 +48,10 @@\n  */\n @Slf4j\n public class App {\n-  private static final String DB_URL = \"jdbc:h2:mem:testdb\";\n \n-  private App() {\n+  private static final String DB_URL = \"jdbc:h2:~/testdb\";\n \n-  }\n+  private App() {}\n \n   /**\n    * Program entry point.",
    "output": "Upgrade serialized entity"
  },
  {
    "input": "diff --git a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n@@ -67,12 +67,12 @@ public class ApplicationRoleObject {\n   public static void main(String[] args) {\n     var customer = Customer.newCustomer(BORROWER, INVESTOR);\n \n-    LOGGER.info(\" the new customer created : {}\", customer);\n+    LOGGER.info(\"New customer created : {}\", customer);\n \n     var hasBorrowerRole = customer.hasRole(BORROWER);\n-    LOGGER.info(\" customer has a borrowed role - {}\", hasBorrowerRole);\n+    LOGGER.info(\"Customer has a borrower role - {}\", hasBorrowerRole);\n     var hasInvestorRole = customer.hasRole(INVESTOR);\n-    LOGGER.info(\" customer has an investor role - {}\", hasInvestorRole);\n+    LOGGER.info(\"Customer has an investor role - {}\", hasInvestorRole);\n \n     customer.getRole(INVESTOR, InvestorRole.class)\n         .ifPresent(inv -> {",
    "output": "Upgrade role object"
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java b/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java\n--- a/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java\n+++ b/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java\n@@ -28,5 +28,4 @@\n  * Stew ingredients.\n  */\n \n-public record StewData(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {\n-}\n+public record StewData(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {}",
    "output": "Upgrade private class data"
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n--- a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n+++ b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.object.pool;\n \n import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -35,6 +36,7 @@ public class Oliphaunt {\n \n   private static final AtomicInteger counter = new AtomicInteger(0);\n \n+  @Getter\n   private final int id;\n \n   /**\n@@ -49,10 +51,6 @@ public Oliphaunt() {\n     }\n   }\n \n-  public int getId() {\n-    return id;\n-  }\n-\n   @Override\n   public String toString() {\n     return String.format(\"Oliphaunt id=%d\", id);",
    "output": "Upgrade object pool"
  },
  {
    "input": "diff --git a/identity-map/src/main/java/com/iluwatar/identitymap/App.java b/identity-map/src/main/java/com/iluwatar/identitymap/App.java\n--- a/identity-map/src/main/java/com/iluwatar/identitymap/App.java\n+++ b/identity-map/src/main/java/com/iluwatar/identitymap/App.java\n@@ -68,6 +68,5 @@ public static void main(String[] args) {\n     LOGGER.info(finder.getPerson(5).toString());\n     // Find the person in the map.\n     LOGGER.info(finder.getPerson(2).toString());\n-\n   }\n }",
    "output": "Upgrade identity map"
  },
  {
    "input": "diff --git a/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java b/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java\n--- a/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java\n+++ b/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java\n@@ -49,8 +49,6 @@\n  * After the shut-down, system state is recovered by re-creating the past events from event\n  * journals. Then state is printed so a user can view the last state is same with the state before a\n  * system shut-down.\n- *\n- * <p>Created by Serdar Hamzaogullari on 06.08.2017.\n  */\n @Slf4j\n public class App {\n@@ -112,6 +110,4 @@ public static void main(String[] args) {\n     LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_DAENERYS).toString());\n     LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_JON).toString());\n   }\n-\n-\n }",
    "output": "Upgrade event sourcing"
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n--- a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n@@ -56,25 +56,25 @@ public class App {\n    */\n   public static void main(String[] args) {\n     // initialize game objects and print their status\n+    LOGGER.info(\"Init objects and print their status\");\n     var objects = List.of(\n         new FlamingAsteroid(0, 0, 5, 5),\n         new SpaceStationMir(1, 1, 2, 2),\n         new Meteoroid(10, 10, 15, 15),\n         new SpaceStationIss(12, 12, 14, 14)\n     );\n     objects.forEach(o -> LOGGER.info(o.toString()));\n-    LOGGER.info(\"\");\n \n     // collision check\n+    LOGGER.info(\"Collision check\");\n     objects.forEach(o1 -> objects.forEach(o2 -> {\n       if (o1 != o2 && o1.intersectsWith(o2)) {\n         o1.collision(o2);\n       }\n     }));\n-    LOGGER.info(\"\");\n \n     // output eventual object statuses\n+    LOGGER.info(\"Print object status after collision checks\");\n     objects.forEach(o -> LOGGER.info(o.toString()));\n-    LOGGER.info(\"\");\n   }\n }",
    "output": "Upgrade double dispatch"
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n@@ -80,5 +80,4 @@ public static void main(String[] args) {\n     var app = new App();\n     app.run();\n   }\n-\n }",
    "output": "Upgrade dirty flag"
  },
  {
    "input": "diff --git a/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java b/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java\n--- a/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java\n+++ b/active-object/src/main/java/com/iluwatar/activeobject/ActiveCreature.java\n@@ -31,7 +31,6 @@\n \n /**\n  * ActiveCreature class is the base of the active object example.\n- * @author Noam Greenshtain\n  *\n  */\n public abstract class ActiveCreature {\n\ndiff --git a/active-object/src/main/java/com/iluwatar/activeobject/Orc.java b/active-object/src/main/java/com/iluwatar/activeobject/Orc.java\n--- a/active-object/src/main/java/com/iluwatar/activeobject/Orc.java\n+++ b/active-object/src/main/java/com/iluwatar/activeobject/Orc.java\n@@ -26,7 +26,6 @@\n \n /**\n  * An implementation of the ActiveCreature class.\n- * @author Noam Greenshtain\n  *\n  */\n public class Orc extends ActiveCreature {",
    "output": "Active object comments"
  },
  {
    "input": "diff --git a/version-number/src/main/java/com/iluwatar/versionnumber/Book.java b/version-number/src/main/java/com/iluwatar/versionnumber/Book.java\n--- a/version-number/src/main/java/com/iluwatar/versionnumber/Book.java\n+++ b/version-number/src/main/java/com/iluwatar/versionnumber/Book.java\n@@ -24,19 +24,21 @@\n  */\n package com.iluwatar.versionnumber;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Model class for Book entity.\n  */\n+@Getter\n+@Setter\n public class Book {\n   private long id;\n   private String title = \"\";\n   private String author = \"\";\n-\n   private long version = 0; // version number\n \n-  public Book() {\n-\n-  }\n+  public Book() {}\n \n   /**\n    * We need this copy constructor to copy book representation in {@link BookRepository}.\n@@ -47,36 +49,4 @@ public Book(Book book) {\n     this.author = book.author;\n     this.version = book.version;\n   }\n-\n-  public long getId() {\n-    return id;\n-  }\n-\n-  public void setId(long id) {\n-    this.id = id;\n-  }\n-\n-  public String getTitle() {\n-    return title;\n-  }\n-\n-  public void setTitle(String title) {\n-    this.title = title;\n-  }\n-\n-  public String getAuthor() {\n-    return author;\n-  }\n-\n-  public void setAuthor(String author) {\n-    this.author = author;\n-  }\n-\n-  public long getVersion() {\n-    return version;\n-  }\n-\n-  public void setVersion(long version) {\n-    this.version = version;\n-  }\n }",
    "output": "Upgrade version number"
  },
  {
    "input": "diff --git a/value-object/src/main/java/com/iluwatar/value/object/App.java b/value-object/src/main/java/com/iluwatar/value/object/App.java\n--- a/value-object/src/main/java/com/iluwatar/value/object/App.java\n+++ b/value-object/src/main/java/com/iluwatar/value/object/App.java\n@@ -29,7 +29,7 @@\n /**\n  * A Value Object are objects which follow value semantics rather than reference semantics. This\n  * means value objects' equality are not based on identity. Two value objects are equal when they\n- * have the same value, not necessarily being the same object..\n+ * have the same value, not necessarily being the same object.\n  *\n  * <p>Value Objects must override equals(), hashCode() to check the equality with values. Value\n  * Objects should be immutable so declare members final. Obtain instances by static factory methods.\n@@ -51,11 +51,11 @@ public static void main(String[] args) {\n     var statB = HeroStat.valueOf(10, 5, 0);\n     var statC = HeroStat.valueOf(5, 1, 8);\n \n-    LOGGER.info(statA.toString());\n-    LOGGER.info(statB.toString());\n-    LOGGER.info(statC.toString());\n+    LOGGER.info(\"statA: {}\", statA);\n+    LOGGER.info(\"statB: {}\", statB);\n+    LOGGER.info(\"statC: {}\", statC);\n \n-    LOGGER.info(\"Is statA and statB equal : {}\", statA.equals(statB));\n-    LOGGER.info(\"Is statA and statC equal : {}\", statA.equals(statC));\n+    LOGGER.info(\"Are statA and statB equal? {}\", statA.equals(statB));\n+    LOGGER.info(\"Are statA and statC equal? {}\", statA.equals(statC));\n   }\n }\n\ndiff --git a/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java\n--- a/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java\n+++ b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.value.object;\n \n+import lombok.ToString;\n import lombok.Value;\n \n /**\n@@ -34,6 +35,7 @@\n  *     </a>\n  */\n @Value(staticConstructor = \"valueOf\")\n+@ToString\n class HeroStat {\n \n   int strength;",
    "output": "Upgrade value object"
  },
  {
    "input": "diff --git a/update-method/src/main/java/com/iluwatar/updatemethod/World.java b/update-method/src/main/java/com/iluwatar/updatemethod/World.java\n--- a/update-method/src/main/java/com/iluwatar/updatemethod/World.java\n+++ b/update-method/src/main/java/com/iluwatar/updatemethod/World.java\n@@ -27,7 +27,6 @@\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Random;\n import lombok.extern.slf4j.Slf4j;\n \n /**",
    "output": "Upgrade method docs"
  },
  {
    "input": "diff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java\n@@ -44,7 +44,7 @@ public static void main(String[] args) {\n     var silverTrident = new Weapon(3, \"silver trident\");\n \n     // create repository\n-    var weaponRepository = new ArmsDealer(new HashMap<String, List<Weapon>>(),\n+    var weaponRepository = new ArmsDealer(new HashMap<>(),\n             new WeaponDatabase());\n \n     // perform operations on the weapons\n\ndiff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/ArmsDealer.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/ArmsDealer.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/ArmsDealer.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/ArmsDealer.java\n@@ -73,7 +73,7 @@ private void register(Weapon weapon, String operation) {\n    */\n   @Override\n   public void commit() {\n-    if (context == null || context.size() == 0) {\n+    if (context == null || context.isEmpty()) {\n       return;\n     }\n     LOGGER.info(\"Commit started\");\n\ndiff --git a/unit-of-work/src/test/java/com/iluwatar/unitofwork/ArmsDealerTest.java b/unit-of-work/src/test/java/com/iluwatar/unitofwork/ArmsDealerTest.java\n--- a/unit-of-work/src/test/java/com/iluwatar/unitofwork/ArmsDealerTest.java\n+++ b/unit-of-work/src/test/java/com/iluwatar/unitofwork/ArmsDealerTest.java\n@@ -46,7 +46,7 @@ class ArmsDealerTest {\n \n   private final Map<String, List<Weapon>> context = new HashMap<>();\n   private final WeaponDatabase weaponDatabase = mock(WeaponDatabase.class);\n-  private final ArmsDealer armsDealer = new ArmsDealer(context, weaponDatabase);;\n+  private final ArmsDealer armsDealer = new ArmsDealer(context, weaponDatabase);\n \n   @Test\n   void shouldSaveNewStudentWithoutWritingToDb() {",
    "output": "Upgrade unit of work"
  },
  {
    "input": "diff --git a/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java b/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java\n--- a/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java\n+++ b/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java\n@@ -29,13 +29,14 @@\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * The CellPool class allows the reuse of crushed cells instead of creation of new cells each time.\n  * The reused cell is given a new candy to hold using the randomCode field which holds all the\n  * candies available.\n  */\n-\n+@Slf4j\n public class CellPool {\n   private static final SecureRandom RANDOM = new SecureRandom();\n   public static final String FRUIT = \"fruit\";\n@@ -49,7 +50,7 @@ public class CellPool {\n     try {\n       this.randomCode = assignRandomCandytypes();\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n       //manually initialising this.randomCode\n       this.randomCode = new Candy[5];\n       randomCode[0] = new Candy(\"cherry\", FRUIT, Type.REWARD_FRUIT, 20);",
    "output": "Upgrade type object"
  },
  {
    "input": "diff --git a/thread-pool/src/main/java/com/iluwatar/threadpool/Task.java b/thread-pool/src/main/java/com/iluwatar/threadpool/Task.java\n--- a/thread-pool/src/main/java/com/iluwatar/threadpool/Task.java\n+++ b/thread-pool/src/main/java/com/iluwatar/threadpool/Task.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.threadpool;\n \n import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Getter;\n \n /**\n  * Abstract base class for tasks.\n@@ -33,22 +34,16 @@ public abstract class Task {\n \n   private static final AtomicInteger ID_GENERATOR = new AtomicInteger();\n \n+  @Getter\n   private final int id;\n+  @Getter\n   private final int timeMs;\n \n   public Task(final int timeMs) {\n     this.id = ID_GENERATOR.incrementAndGet();\n     this.timeMs = timeMs;\n   }\n \n-  public int getId() {\n-    return id;\n-  }\n-\n-  public int getTimeMs() {\n-    return timeMs;\n-  }\n-\n   @Override\n   public String toString() {\n     return String.format(\"id=%d timeMs=%d\", id, timeMs);\n\ndiff --git a/thread-pool/src/main/java/com/iluwatar/threadpool/Worker.java b/thread-pool/src/main/java/com/iluwatar/threadpool/Worker.java\n--- a/thread-pool/src/main/java/com/iluwatar/threadpool/Worker.java\n+++ b/thread-pool/src/main/java/com/iluwatar/threadpool/Worker.java\n@@ -45,7 +45,7 @@ public void run() {\n     try {\n       Thread.sleep(task.getTimeMs());\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n     }\n   }\n }\n\ndiff --git a/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java b/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java\n--- a/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java\n+++ b/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java\n@@ -84,7 +84,7 @@ public TaskTest(final IntFunction<T> factory, final int expectedExecutionTime) {\n    * threads\n    */\n   @Test\n-  void testIdGeneration() throws Exception {\n+  void testIdGeneration() {\n     assertTimeout(ofMillis(10000), () -> {\n       final var service = Executors.newFixedThreadPool(THREAD_COUNT);\n ",
    "output": "Upgrade thread pool"
  },
  {
    "input": "diff --git a/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java b/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java\n--- a/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java\n+++ b/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java\n@@ -28,10 +28,12 @@\n import java.util.concurrent.locks.LockSupport;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Class with main logic.\n  */\n+@Slf4j\n public abstract class AbstractThreadLocalExample implements Runnable {\n \n   private static final SecureRandom RND = new SecureRandom();",
    "output": "Upgrade thread local storage"
  },
  {
    "input": "diff --git a/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java b/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java\n--- a/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java\n+++ b/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java\n@@ -146,7 +146,7 @@ void testSteal() {\n     assertEquals(3, appender.getLogSize());\n   }\n \n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+  private static class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private final List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender() {",
    "output": "Upgrade template method"
  },
  {
    "input": "diff --git a/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java b/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java\n--- a/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java\n+++ b/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java\n@@ -86,9 +86,7 @@ void registerShouldFail() throws SQLException {\n     var userTableModule = new UserTableModule(dataSource);\n     var user = new User(1, \"123456\", \"123456\");\n     userTableModule.registerUser(user);\n-    assertThrows(SQLException.class, () -> {\n-      userTableModule.registerUser(user);\n-    });\n+    assertThrows(SQLException.class, () -> userTableModule.registerUser(user));\n   }\n \n   @Test\n\ndiff --git a/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java b/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java\n--- a/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java\n+++ b/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java\n@@ -45,7 +45,8 @@ void testCanEqual2() {\n   @Test\n   void testEquals1() {\n     var user = new User(1, \"janedoe\", \"iloveyou\");\n-    assertNotEquals(\"42\", user);\n+    assertNotEquals(user, new User(123, \"abcd\",\n+        \"qwerty\"));\n   }\n \n   @Test",
    "output": "Upgrade table module"
  },
  {
    "input": "diff --git a/special-case/src/main/java/com/iluwatar/specialcase/Db.java b/special-case/src/main/java/com/iluwatar/specialcase/Db.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/Db.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/Db.java\n@@ -26,6 +26,8 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n \n /**\n  * DB class for seeding user info.\n@@ -119,17 +121,11 @@ public Product findProductByItemName(String itemName) {\n   /**\n    * User class to store user info.\n    */\n+  @RequiredArgsConstructor\n+  @Getter\n   public class User {\n \n-    private String userName;\n-\n-    public User(String userName) {\n-      this.userName = userName;\n-    }\n-\n-    public String getUserName() {\n-      return userName;\n-    }\n+    private final String userName;\n \n     public ReceiptDto purchase(Product item) {\n       return new ReceiptDto(item.getPrice());\n@@ -139,13 +135,11 @@ public ReceiptDto purchase(Product item) {\n   /**\n    * Account info.\n    */\n-  public class Account {\n-\n-    private Double amount;\n+  @RequiredArgsConstructor\n+  @Getter\n+  public static class Account {\n \n-    public Account(Double amount) {\n-      this.amount = amount;\n-    }\n+    private final Double amount;\n \n     /**\n      * Withdraw the price of the item from the account.\n@@ -159,25 +153,15 @@ public MoneyTransaction withdraw(Double price) {\n       }\n       return new MoneyTransaction(amount, price);\n     }\n-\n-    public Double getAmount() {\n-      return amount;\n-    }\n   }\n \n   /**\n    * Product info.\n    */\n-  public class Product {\n-\n-    private Double price;\n+  @RequiredArgsConstructor\n+  @Getter\n+  public static class Product {\n \n-    public Product(Double price) {\n-      this.price = price;\n-    }\n-\n-    public Double getPrice() {\n-      return price;\n-    }\n+    private final Double price;\n   }\n }\n\ndiff --git a/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java b/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.specialcase;\n \n+import lombok.Getter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -35,6 +36,8 @@ public class MaintenanceLock {\n   private static final Logger LOGGER = LoggerFactory.getLogger(MaintenanceLock.class);\n \n   private static MaintenanceLock instance;\n+\n+  @Getter\n   private boolean lock = true;\n \n   /**\n@@ -49,10 +52,6 @@ public static synchronized MaintenanceLock getInstance() {\n     return instance;\n   }\n \n-  public boolean isLock() {\n-    return lock;\n-  }\n-\n   public void setLock(boolean lock) {\n     this.lock = lock;\n     LOGGER.info(\"Maintenance lock is set to: {}\", lock);\n\ndiff --git a/special-case/src/main/java/com/iluwatar/specialcase/MoneyTransaction.java b/special-case/src/main/java/com/iluwatar/specialcase/MoneyTransaction.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/MoneyTransaction.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/MoneyTransaction.java\n@@ -24,16 +24,14 @@\n  */\n package com.iluwatar.specialcase;\n \n+import lombok.RequiredArgsConstructor;\n+\n /**\n  * Represents the money transaction taking place at a given moment.\n  */\n+@RequiredArgsConstructor\n public class MoneyTransaction {\n \n-  private Double amount;\n-  private Double price;\n-\n-  public MoneyTransaction(Double amount, Double price) {\n-    this.amount = amount;\n-    this.price = price;\n-  }\n+  private final Double amount;\n+  private final Double price;\n }\n\ndiff --git a/special-case/src/main/java/com/iluwatar/specialcase/ReceiptDto.java b/special-case/src/main/java/com/iluwatar/specialcase/ReceiptDto.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/ReceiptDto.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/ReceiptDto.java\n@@ -24,26 +24,22 @@\n  */\n package com.iluwatar.specialcase;\n \n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Receipt view representing the transaction recceipt.\n  */\n+@RequiredArgsConstructor\n+@Getter\n public class ReceiptDto implements ReceiptViewModel {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ReceiptDto.class);\n \n   private final Double price;\n \n-  public ReceiptDto(Double price) {\n-    this.price = price;\n-  }\n-\n-  public Double getPrice() {\n-    return price;\n-  }\n-\n   @Override\n   public void show() {\n     LOGGER.info(String.format(\"Receipt: %s paid\", price));",
    "output": "Upgrade special case"
  },
  {
    "input": "diff --git a/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java b/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java\n@@ -81,7 +81,7 @@ public static void main(String[] args) {\n    * @param args program runtime arguments\n    */\n   @Override\n-  public void run(String... args) throws Exception {\n+  public void run(String... args) {\n \n     Logger log = LoggerFactory.getLogger(SingleTableInheritance.class);\n \n\ndiff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java\n@@ -45,10 +45,4 @@ protected PassengerVehicle(String manufacturer, String model, int noOfPassengers\n     super(manufacturer, model);\n     this.noOfPassengers = noOfPassengers;\n   }\n-\n-  @Override\n-  public String toString() {\n-    return super.toString();\n-  }\n-\n }",
    "output": "Upgrade single table inheritance"
  },
  {
    "input": "diff --git a/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java b/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java\n--- a/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java\n+++ b/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java\n@@ -24,8 +24,6 @@\n  */\n package com.iluwatar.servicetoworker;\n \n-import lombok.Getter;\n-\n /**\n  * GiantController can update the giant data and redraw it using the view. Singleton object that\n  * intercepts all requests and performs common functions.",
    "output": "Upgrade service to worker"
  },
  {
    "input": "diff --git a/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java\n--- a/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java\n+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java\n@@ -93,7 +93,7 @@ public void persist(E entity) {\n   @Override\n   public E merge(E entity) {\n     Transaction tx = null;\n-    E result = null;\n+    E result;\n     try (var session = getSessionFactory().openSession()) {\n       tx = session.beginTransaction();\n       result = (E) session.merge(entity);\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/servicelayer/spell/Spell.java b/service-layer/src/main/java/com/iluwatar/servicelayer/spell/Spell.java\n--- a/service-layer/src/main/java/com/iluwatar/servicelayer/spell/Spell.java\n+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spell/Spell.java\n@@ -33,12 +33,16 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n \n /**\n  * Spell entity.\n  */\n @Entity\n @Table(name = \"SPELL\")\n+@Getter\n+@Setter\n public class Spell extends BaseEntity {\n \n   private String name;\n@@ -60,30 +64,6 @@ public Spell(String name) {\n     this.name = name;\n   }\n \n-  public Long getId() {\n-    return id;\n-  }\n-\n-  public void setId(Long id) {\n-    this.id = id;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public Spellbook getSpellbook() {\n-    return spellbook;\n-  }\n-\n-  public void setSpellbook(Spellbook spellbook) {\n-    this.spellbook = spellbook;\n-  }\n-\n   @Override\n   public String toString() {\n     return name;\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/servicelayer/spellbook/Spellbook.java b/service-layer/src/main/java/com/iluwatar/servicelayer/spellbook/Spellbook.java\n--- a/service-layer/src/main/java/com/iluwatar/servicelayer/spellbook/Spellbook.java\n+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spellbook/Spellbook.java\n@@ -38,12 +38,16 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n \n /**\n  * Spellbook entity.\n  */\n @Entity\n @Table(name = \"SPELLBOOK\")\n+@Getter\n+@Setter\n public class Spellbook extends BaseEntity {\n \n   @Id\n@@ -69,38 +73,6 @@ public Spellbook(String name) {\n     this.name = name;\n   }\n \n-  public Long getId() {\n-    return id;\n-  }\n-\n-  public void setId(Long id) {\n-    this.id = id;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public Set<Wizard> getWizards() {\n-    return wizards;\n-  }\n-\n-  public void setWizards(Set<Wizard> wizards) {\n-    this.wizards = wizards;\n-  }\n-\n-  public Set<Spell> getSpells() {\n-    return spells;\n-  }\n-\n-  public void setSpells(Set<Spell> spells) {\n-    this.spells = spells;\n-  }\n-\n   public void addSpell(Spell spell) {\n     spell.setSpellbook(this);\n     spells.add(spell);\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/servicelayer/wizard/Wizard.java b/service-layer/src/main/java/com/iluwatar/servicelayer/wizard/Wizard.java\n--- a/service-layer/src/main/java/com/iluwatar/servicelayer/wizard/Wizard.java\n+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/wizard/Wizard.java\n@@ -35,12 +35,16 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n+import lombok.Getter;\n+import lombok.Setter;\n \n /**\n  * Wizard entity.\n  */\n @Entity\n @Table(name = \"WIZARD\")\n+@Getter\n+@Setter\n public class Wizard extends BaseEntity {\n \n   @Id\n@@ -62,30 +66,6 @@ public Wizard(String name) {\n     this.name = name;\n   }\n \n-  public Long getId() {\n-    return id;\n-  }\n-\n-  public void setId(Long id) {\n-    this.id = id;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public Set<Spellbook> getSpellbooks() {\n-    return spellbooks;\n-  }\n-\n-  public void setSpellbooks(Set<Spellbook> spellbooks) {\n-    this.spellbooks = spellbooks;\n-  }\n-\n   public void addSpellbook(Spellbook spellbook) {\n     spellbook.getWizards().add(this);\n     spellbooks.add(spellbook);\n\ndiff --git a/service-layer/src/test/java/com/iluwatar/servicelayer/magic/MagicServiceImplTest.java b/service-layer/src/test/java/com/iluwatar/servicelayer/magic/MagicServiceImplTest.java\n--- a/service-layer/src/test/java/com/iluwatar/servicelayer/magic/MagicServiceImplTest.java\n+++ b/service-layer/src/test/java/com/iluwatar/servicelayer/magic/MagicServiceImplTest.java\n@@ -122,7 +122,7 @@ void testFindWizardsWithSpellbook() {\n   }\n \n   @Test\n-  void testFindWizardsWithSpell() throws Exception {\n+  void testFindWizardsWithSpell() {\n     final var wizards = Set.of(\n         mock(Wizard.class),\n         mock(Wizard.class),",
    "output": "Upgrade service layer"
  },
  {
    "input": "diff --git a/server-session/src/test/java/com.iluwatar.sessionserver/LoginHandlerTest.java b/server-session/src/test/java/com.iluwatar.sessionserver/LoginHandlerTest.java\n--- a/server-session/src/test/java/com.iluwatar.sessionserver/LoginHandlerTest.java\n+++ b/server-session/src/test/java/com.iluwatar.sessionserver/LoginHandlerTest.java\n@@ -30,7 +30,6 @@\n import com.sun.net.httpserver.Headers;\n import com.sun.net.httpserver.HttpExchange;\n import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n import java.time.Instant;\n import java.util.HashMap;\n import java.util.Map;\n@@ -64,7 +63,7 @@ public void setUp() {\n   }\n \n   @Test\n-  public void testHandle() throws IOException {\n+  public void testHandle() {\n \n     //assemble\n     ByteArrayOutputStream outputStream =\n\ndiff --git a/server-session/src/test/java/com.iluwatar.sessionserver/LogoutHandlerTest.java b/server-session/src/test/java/com.iluwatar.sessionserver/LogoutHandlerTest.java\n--- a/server-session/src/test/java/com.iluwatar.sessionserver/LogoutHandlerTest.java\n+++ b/server-session/src/test/java/com.iluwatar.sessionserver/LogoutHandlerTest.java\n@@ -29,7 +29,6 @@\n import com.sun.net.httpserver.Headers;\n import com.sun.net.httpserver.HttpExchange;\n import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n import java.time.Instant;\n import java.util.HashMap;\n import java.util.Map;\n@@ -67,7 +66,7 @@ public void setUp() {\n   }\n \n   @Test\n-  public void testHandler_SessionNotExpired() throws IOException {\n+  public void testHandler_SessionNotExpired() {\n \n     //assemble\n     sessions.put(\"1234\", 1); //Fake login details since LoginHandler isn't called\n@@ -83,12 +82,12 @@ public void testHandler_SessionNotExpired() throws IOException {\n     //assert\n     String[] response = outputStream.toString().split(\"Session ID: \");\n     Assertions.assertEquals(\"1234\", response[1]);\n-    Assertions.assertFalse(sessions.containsKey(response));\n-    Assertions.assertFalse(sessionCreationTimes.containsKey(response));\n+    Assertions.assertFalse(sessions.containsKey(response[1]));\n+    Assertions.assertFalse(sessionCreationTimes.containsKey(response[1]));\n   }\n \n   @Test\n-  public void testHandler_SessionExpired() throws IOException {\n+  public void testHandler_SessionExpired() {\n \n     //assemble\n     ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n@@ -101,7 +100,5 @@ public void testHandler_SessionExpired() throws IOException {\n     //assert\n     String[] response = outputStream.toString().split(\"Session ID: \");\n     Assertions.assertEquals(\"Session has already expired!\", response[0]);\n-    Assertions.assertFalse(sessions.containsKey(response));\n-    Assertions.assertFalse(sessionCreationTimes.containsKey(response));\n   }\n }",
    "output": "Upgrade server session"
  },
  {
    "input": "diff --git a/saga/src/main/java/com/iluwatar/saga/choreography/Saga.java b/saga/src/main/java/com/iluwatar/saga/choreography/Saga.java\n--- a/saga/src/main/java/com/iluwatar/saga/choreography/Saga.java\n+++ b/saga/src/main/java/com/iluwatar/saga/choreography/Saga.java\n@@ -27,6 +27,8 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import lombok.Getter;\n+import lombok.Setter;\n \n /**\n  * Saga representation. Saga consists of chapters. Every ChoreographyChapter is executed a certain\n@@ -154,37 +156,19 @@ boolean isCurrentSuccess() {\n    * outcoming parameter).\n    */\n   public static class Chapter {\n+    @Getter\n     private final String name;\n+    @Setter\n     private ChapterResult result;\n+    @Getter\n+    @Setter\n     private Object inValue;\n \n-\n     public Chapter(String name) {\n       this.name = name;\n       this.result = ChapterResult.INIT;\n     }\n \n-    public Object getInValue() {\n-      return inValue;\n-    }\n-\n-    public void setInValue(Object object) {\n-      this.inValue = object;\n-    }\n-\n-    public String getName() {\n-      return name;\n-    }\n-\n-    /**\n-     * set result.\n-     *\n-     * @param result {@link ChapterResult}\n-     */\n-    public void setResult(ChapterResult result) {\n-      this.result = result;\n-    }\n-\n     /**\n      * the result for chapter is good.\n      *\n\ndiff --git a/saga/src/main/java/com/iluwatar/saga/choreography/WithdrawMoneyService.java b/saga/src/main/java/com/iluwatar/saga/choreography/WithdrawMoneyService.java\n--- a/saga/src/main/java/com/iluwatar/saga/choreography/WithdrawMoneyService.java\n+++ b/saga/src/main/java/com/iluwatar/saga/choreography/WithdrawMoneyService.java\n@@ -45,7 +45,7 @@ public Saga process(Saga saga) {\n     if (inValue.equals(\"bad_order\")) {\n       LOGGER.info(\"The chapter '{}' has been started. But the exception has been raised.\"\n               + \"The rollback is about to start\",\n-          getName(), inValue);\n+          getName());\n       saga.setCurrentStatus(Saga.ChapterResult.ROLLBACK);\n       return saga;\n     }\n\ndiff --git a/saga/src/main/java/com/iluwatar/saga/orchestration/ChapterResult.java b/saga/src/main/java/com/iluwatar/saga/orchestration/ChapterResult.java\n--- a/saga/src/main/java/com/iluwatar/saga/orchestration/ChapterResult.java\n+++ b/saga/src/main/java/com/iluwatar/saga/orchestration/ChapterResult.java\n@@ -24,19 +24,18 @@\n  */\n package com.iluwatar.saga.orchestration;\n \n+import lombok.Getter;\n+\n /**\n  * Executing result for chapter.\n  *\n  * @param <K> incoming value\n  */\n public class ChapterResult<K> {\n+  @Getter\n   private final K value;\n   private final State state;\n \n-  public K getValue() {\n-    return value;\n-  }\n-\n   ChapterResult(K value, State state) {\n     this.value = value;\n     this.state = state;\n\ndiff --git a/saga/src/main/java/com/iluwatar/saga/orchestration/Saga.java b/saga/src/main/java/com/iluwatar/saga/orchestration/Saga.java\n--- a/saga/src/main/java/com/iluwatar/saga/orchestration/Saga.java\n+++ b/saga/src/main/java/com/iluwatar/saga/orchestration/Saga.java\n@@ -26,6 +26,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n \n /**\n  * Saga representation. Saga consists of chapters. Every ChoreographyChapter is executed by a\n@@ -70,15 +72,9 @@ public enum Result {\n   /**\n    * class represents chapter name.\n    */\n+  @AllArgsConstructor\n+  @Getter\n   public static class Chapter {\n     String name;\n-\n-    public Chapter(String name) {\n-      this.name = name;\n-    }\n-\n-    public String getName() {\n-      return name;\n-    }\n   }\n }\n\ndiff --git a/saga/src/main/java/com/iluwatar/saga/orchestration/WithdrawMoneyService.java b/saga/src/main/java/com/iluwatar/saga/orchestration/WithdrawMoneyService.java\n--- a/saga/src/main/java/com/iluwatar/saga/orchestration/WithdrawMoneyService.java\n+++ b/saga/src/main/java/com/iluwatar/saga/orchestration/WithdrawMoneyService.java\n@@ -38,7 +38,7 @@ public ChapterResult<String> process(String value) {\n     if (value.equals(\"bad_order\") || value.equals(\"crashed_order\")) {\n       LOGGER.info(\"The chapter '{}' has been started. But the exception has been raised.\"\n               + \"The rollback is about to start\",\n-          getName(), value);\n+          getName());\n       return ChapterResult.failure(value);\n     }\n     return super.process(value);",
    "output": "Saga explanation\n* docs: update cqrs pattern name\n* docs: add saga docs"
  },
  {
    "input": "diff --git a/role-object/src/main/java/com/iluwatar/roleobject/BorrowerRole.java b/role-object/src/main/java/com/iluwatar/roleobject/BorrowerRole.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/BorrowerRole.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/BorrowerRole.java\n@@ -24,21 +24,18 @@\n  */\n package com.iluwatar.roleobject;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Borrower role.\n  */\n+@Getter\n+@Setter\n public class BorrowerRole extends CustomerRole {\n \n   private String name;\n \n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n   public String borrow() {\n     return String.format(\"Borrower %s wants to get some money.\", name);\n   }\n\ndiff --git a/role-object/src/main/java/com/iluwatar/roleobject/InvestorRole.java b/role-object/src/main/java/com/iluwatar/roleobject/InvestorRole.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/InvestorRole.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/InvestorRole.java\n@@ -24,31 +24,20 @@\n  */\n package com.iluwatar.roleobject;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Investor role.\n  */\n+@Getter\n+@Setter\n public class InvestorRole extends CustomerRole {\n \n   private String name;\n \n   private long amountToInvest;\n \n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public long getAmountToInvest() {\n-    return amountToInvest;\n-  }\n-\n-  public void setAmountToInvest(long amountToInvest) {\n-    this.amountToInvest = amountToInvest;\n-  }\n-\n   public String invest() {\n     return String.format(\"Investor %s has invested %d dollars\", name, amountToInvest);\n   }",
    "output": "Upgrade role object"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n@@ -52,8 +52,7 @@ public void handleChannelRead(AbstractNioChannel channel, Object readObject, Sel\n     if (readObject instanceof ByteBuffer) {\n       doLogging((ByteBuffer) readObject);\n       sendReply(channel, key);\n-    } else if (readObject instanceof DatagramPacket) {\n-      var datagram = (DatagramPacket) readObject;\n+    } else if (readObject instanceof DatagramPacket datagram) {\n       doLogging(datagram.getData());\n       sendReply(channel, datagram, key);\n     } else {\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n@@ -32,6 +32,7 @@\n import java.util.Queue;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentLinkedQueue;\n+import lombok.Getter;\n \n /**\n  * This represents the <i>Handle</i> of Reactor pattern. These are resources managed by OS which can\n@@ -46,6 +47,7 @@\n public abstract class AbstractNioChannel {\n \n   private final SelectableChannel channel;\n+  @Getter\n   private final ChannelHandler handler;\n   private final Map<SelectableChannel, Queue<Object>> channelToPendingWrites;\n   private NioReactor reactor;\n@@ -104,15 +106,6 @@ public SelectableChannel getJavaChannel() {\n    */\n   public abstract Object read(SelectionKey key) throws IOException;\n \n-  /**\n-   * Get handler.\n-   *\n-   * @return the handler associated with this channel.\n-   */\n-  public ChannelHandler getHandler() {\n-    return handler;\n-  }\n-\n   /*\n    * Called from the context of reactor thread when the key becomes writable. The channel writes the\n    * whole pending block of data at once.\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java\n@@ -31,6 +31,8 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.DatagramChannel;\n import java.nio.channels.SelectionKey;\n+import lombok.Getter;\n+import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -131,9 +133,12 @@ public void write(Object data, SelectionKey key) {\n   /**\n    * Container of data used for {@link NioDatagramChannel} to communicate with remote peer.\n    */\n+  @Getter\n   public static class DatagramPacket {\n-    private SocketAddress sender;\n     private final ByteBuffer data;\n+    @Setter\n+    private SocketAddress sender;\n+    @Setter\n     private SocketAddress receiver;\n \n     /**\n@@ -144,50 +149,5 @@ public static class DatagramPacket {\n     public DatagramPacket(ByteBuffer data) {\n       this.data = data;\n     }\n-\n-    /**\n-     * Get sender address.\n-     *\n-     * @return the sender address.\n-     */\n-    public SocketAddress getSender() {\n-      return sender;\n-    }\n-\n-    /**\n-     * Sets the sender address of this packet.\n-     *\n-     * @param sender the sender address.\n-     */\n-    public void setSender(SocketAddress sender) {\n-      this.sender = sender;\n-    }\n-\n-    /**\n-     * Get receiver address.\n-     *\n-     * @return the receiver address.\n-     */\n-    public SocketAddress getReceiver() {\n-      return receiver;\n-    }\n-\n-    /**\n-     * Sets the intended receiver address. This must be set when writing to the channel.\n-     *\n-     * @param receiver the receiver address.\n-     */\n-    public void setReceiver(SocketAddress receiver) {\n-      this.receiver = receiver;\n-    }\n-\n-    /**\n-     * Get data.\n-     *\n-     * @return the underlying message that will be written on channel.\n-     */\n-    public ByteBuffer getData() {\n-      return data;\n-    }\n   }\n }",
    "output": "Explanation for reactor"
  },
  {
    "input": "diff --git a/poison-pill/src/test/java/com/iluwatar/poison/pill/ConsumerTest.java b/poison-pill/src/test/java/com/iluwatar/poison/pill/ConsumerTest.java\n--- a/poison-pill/src/test/java/com/iluwatar/poison/pill/ConsumerTest.java\n+++ b/poison-pill/src/test/java/com/iluwatar/poison/pill/ConsumerTest.java\n@@ -92,7 +92,7 @@ private static Message createMessage(final String sender, final String message)\n     return msg;\n   }\n \n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+  private static class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private final List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender(Class clazz) {\n\ndiff --git a/poison-pill/src/test/java/com/iluwatar/poison/pill/PoisonMessageTest.java b/poison-pill/src/test/java/com/iluwatar/poison/pill/PoisonMessageTest.java\n--- a/poison-pill/src/test/java/com/iluwatar/poison/pill/PoisonMessageTest.java\n+++ b/poison-pill/src/test/java/com/iluwatar/poison/pill/PoisonMessageTest.java\n@@ -39,16 +39,12 @@ class PoisonMessageTest {\n \n   @Test\n   void testAddHeader() {\n-    assertThrows(UnsupportedOperationException.class, () -> {\n-      POISON_PILL.addHeader(Headers.SENDER, \"sender\");\n-    });\n+    assertThrows(UnsupportedOperationException.class, () -> POISON_PILL.addHeader(Headers.SENDER, \"sender\"));\n   }\n \n   @Test\n   void testGetHeader() {\n-    assertThrows(UnsupportedOperationException.class, () -> {\n-      POISON_PILL.getHeader(Headers.SENDER);\n-    });\n+    assertThrows(UnsupportedOperationException.class, () -> POISON_PILL.getHeader(Headers.SENDER));\n   }\n \n   @Test\n@@ -58,9 +54,7 @@ void testGetHeaders() {\n \n   @Test\n   void testSetBody() {\n-    assertThrows(UnsupportedOperationException.class, () -> {\n-      POISON_PILL.setBody(\"Test message.\");\n-    });\n+    assertThrows(UnsupportedOperationException.class, () -> POISON_PILL.setBody(\"Test message.\"));\n   }\n \n   @Test\n\ndiff --git a/poison-pill/src/test/java/com/iluwatar/poison/pill/SimpleMessageTest.java b/poison-pill/src/test/java/com/iluwatar/poison/pill/SimpleMessageTest.java\n--- a/poison-pill/src/test/java/com/iluwatar/poison/pill/SimpleMessageTest.java\n+++ b/poison-pill/src/test/java/com/iluwatar/poison/pill/SimpleMessageTest.java\n@@ -56,10 +56,6 @@ void testGetHeaders() {\n   void testUnModifiableHeaders() {\n     final var message = new SimpleMessage();\n     final var headers = message.getHeaders();\n-    assertThrows(UnsupportedOperationException.class, () -> {\n-      headers.put(Message.Headers.SENDER, \"test\");\n-    });\n+    assertThrows(UnsupportedOperationException.class, () -> headers.put(Message.Headers.SENDER, \"test\"));\n   }\n-\n-\n }\n\\ No newline at end of file",
    "output": "Upgrade poison pill"
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n--- a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n+++ b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n@@ -24,11 +24,12 @@\n  */\n package com.iluwatar.object.pool;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicInteger;import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Oliphaunts are expensive to create.\n  */\n+@Slf4j\n public class Oliphaunt {\n \n   private static final AtomicInteger counter = new AtomicInteger(0);\n@@ -43,7 +44,7 @@ public Oliphaunt() {\n     try {\n       Thread.sleep(1000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n     }\n   }\n ",
    "output": "Upgrade object pool"
  },
  {
    "input": "diff --git a/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java b/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java\n@@ -26,10 +26,12 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * A utility class that allows you to utilize mute idiom.\n  */\n+@Slf4j\n public final class Mute {\n \n   // The constructor is never meant to be called.\n@@ -40,7 +42,7 @@ private Mute() {\n    * Executes the <code>runnable</code> and throws the exception occurred within a {@link\n    * AssertionError}. This method should be utilized to mute the operations that are guaranteed not\n    * to throw an exception. For instance {@link ByteArrayOutputStream#write(byte[])} declares in\n-   * it's signature that it can throw an {@link IOException}, but in reality it cannot. This is\n+   * its signature that it can throw an {@link IOException}, but in reality it cannot. This is\n    * because the bulk write method is not overridden in {@link ByteArrayOutputStream}.\n    *\n    * @param runnable a runnable that should never throw an exception on execution.\n\ndiff --git a/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java b/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n--- a/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n+++ b/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n@@ -63,10 +63,9 @@ void loggedMuteShouldLogExceptionTraceBeforeSwallowingIt() {\n \n     Mute.loggedMute(this::methodThrowingException);\n \n-    assertTrue(new String(stream.toByteArray()).contains(MESSAGE));\n+    assertTrue(stream.toString().contains(MESSAGE));\n   }\n \n-\n   private void methodNotThrowingAnyException() {\n     LOGGER.info(\"Executed successfully\");\n   }",
    "output": "Upgrade mute idiom"
  },
  {
    "input": "diff --git a/metadata-mapping/src/main/java/com/iluwatar/metamapping/App.java b/metadata-mapping/src/main/java/com/iluwatar/metamapping/App.java\n--- a/metadata-mapping/src/main/java/com/iluwatar/metamapping/App.java\n+++ b/metadata-mapping/src/main/java/com/iluwatar/metamapping/App.java\n@@ -56,9 +56,8 @@ public class App {\n    * Program entry point.\n    *\n    * @param args command line args.\n-   * @throws Exception if any error occurs.\n    */\n-  public static void main(String[] args)  throws Exception {\n+  public static void main(String[] args) {\n     // get service\n     var userService = new UserService();\n     // use create service to add users\n\ndiff --git a/metadata-mapping/src/main/java/com/iluwatar/metamapping/service/UserService.java b/metadata-mapping/src/main/java/com/iluwatar/metamapping/service/UserService.java\n--- a/metadata-mapping/src/main/java/com/iluwatar/metamapping/service/UserService.java\n+++ b/metadata-mapping/src/main/java/com/iluwatar/metamapping/service/UserService.java\n@@ -49,8 +49,8 @@ public List<User> listUser() {\n     try (var session = factory.openSession()) {\n       var tx = session.beginTransaction();\n       List<User> userIter = session.createQuery(\"FROM User\").list();\n-      for (var iterator = userIter.iterator(); iterator.hasNext();) {\n-        users.add(iterator.next());\n+      for (User user : userIter) {\n+        users.add(user);\n       }\n       tx.commit();\n     } catch (HibernateException e) {\n\ndiff --git a/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/HibernateUtil.java b/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/HibernateUtil.java\n--- a/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/HibernateUtil.java\n+++ b/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/HibernateUtil.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.metamapping.utils;\n \n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.hibernate.SessionFactory;\n import org.hibernate.cfg.Configuration;\n@@ -34,6 +35,7 @@\n @Slf4j\n public class HibernateUtil {\n \n+  @Getter\n   private static final SessionFactory sessionFactory = buildSessionFactory();\n \n   /**\n@@ -50,14 +52,6 @@ private static SessionFactory buildSessionFactory() {\n     return new Configuration().configure().buildSessionFactory();\n   }\n \n-  /**\n-   * Get session factory.\n-   * @return session factory\n-   */\n-  public static SessionFactory getSessionFactory() {\n-    return sessionFactory;\n-  }\n-\n   /**\n    * Close session factory.\n    */\n\ndiff --git a/metadata-mapping/src/test/java/com/iluwatar/metamapping/AppTest.java b/metadata-mapping/src/test/java/com/iluwatar/metamapping/AppTest.java\n--- a/metadata-mapping/src/test/java/com/iluwatar/metamapping/AppTest.java\n+++ b/metadata-mapping/src/test/java/com/iluwatar/metamapping/AppTest.java\n@@ -33,7 +33,6 @@\n class AppTest {\n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\n    * throws an exception.\n    */",
    "output": "Upgrade metadata mapping"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -22,18 +22,18 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-import org.slf4j.Logger;\n+\n import org.slf4j.LoggerFactory;\n \n /**\n  * Created by Alexis on 28-Apr-17. With Marker interface idea is to make empty interface and extend\n  * it. Basically it is just to identify the special objects from normal objects. Like in case of\n  * serialization , objects that need to be serialized must implement serializable interface (it is\n- * empty interface) and down the line writeObject() method must be checking if it is a instance of\n+ * empty interface) and down the line writeObject() method must be checking if it is an instance of\n  * serializable or not.\n  *\n  * <p>Marker interface vs annotation Marker interfaces and marker annotations both have their uses,\n- * neither of them is obsolete or always better then the other one. If you want to define a type\n+ * neither of them is obsolete or always better than the other one. If you want to define a type\n  * that does not have any new methods associated with it, a marker interface is the way to go. If\n  * you want to mark program elements other than classes and interfaces, to allow for the possibility\n  * of adding more information to the marker in the future, or to fit the marker into a framework",
    "output": "Add marker explanation"
  },
  {
    "input": "diff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java\n@@ -51,13 +51,13 @@ public abstract class AbstractHolderTest {\n    *\n    * @return The lazy loaded {@link Heavy} object\n    */\n-  abstract Heavy getHeavy() throws Exception;\n+  abstract Heavy getHeavy();\n \n   /**\n    * This test shows that the heavy field is not instantiated until the method getHeavy is called\n    */\n   @Test\n-  void testGetHeavy() throws Exception {\n+  void testGetHeavy() {\n     assertTimeout(ofMillis(3000), () -> {\n       assertNull(getInternalHeavyValue());\n       assertNotNull(getHeavy());\n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java\n@@ -24,8 +24,6 @@\n  */\n package com.iluwatar.lazy.loading;\n \n-import java.lang.reflect.Field;\n-\n /**\n  * Date: 12/19/15 - 12:05 PM\n  *\n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n@@ -24,8 +24,6 @@\n  */\n package com.iluwatar.lazy.loading;\n \n-import java.lang.reflect.Field;\n-\n /**\n  * Date: 12/19/15 - 12:19 PM\n  *\n@@ -43,7 +41,7 @@ Heavy getInternalHeavyValue() throws Exception {\n   }\n \n   @Override\n-  Heavy getHeavy() throws Exception {\n+  Heavy getHeavy() {\n     return this.holder.getHeavy();\n   }\n \n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java\n@@ -24,7 +24,6 @@\n  */\n package com.iluwatar.lazy.loading;\n \n-import java.lang.reflect.Field;\n import java.util.function.Supplier;\n \n /**\n@@ -57,7 +56,7 @@ Heavy getInternalHeavyValue() throws Exception {\n   }\n \n   @Override\n-  Heavy getHeavy() throws Exception {\n+  Heavy getHeavy() {\n     return holder.getHeavy();\n   }\n ",
    "output": "Add lazy loading docs + refactor"
  },
  {
    "input": "diff --git a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java\n@@ -27,6 +27,7 @@\n import java.awt.BorderLayout;\n import java.awt.GridLayout;\n import java.awt.event.ActionEvent;\n+import java.io.Serial;\n import java.util.Arrays;\n import javax.swing.JButton;\n import javax.swing.JFrame;\n@@ -49,6 +50,7 @@\n  */\n public class Client extends JFrame { // NOSONAR\n \n+  @Serial\n   private static final long serialVersionUID = 1L;\n \n   private transient FilterManager filterManager;\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/ContactFilter.java b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/ContactFilter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/ContactFilter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/ContactFilter.java\n@@ -37,8 +37,7 @@ public class ContactFilter extends AbstractFilter {\n   public String execute(Order order) {\n     var result = super.execute(order);\n     var contactNumber = order.getContactNumber();\n-    if (contactNumber == null || contactNumber.isEmpty()\n-        || contactNumber.matches(\".*[^\\\\d]+.*\")\n+    if (contactNumber == null || contactNumber.matches(\".*[^\\\\d]+.*\")\n         || contactNumber.length() != 11) {\n       return result + \"Invalid contact number! \";\n     } else {\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java\n@@ -24,71 +24,24 @@\n  */\n package com.iluwatar.intercepting.filter;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n /**\n  * Order class carries the order data.\n  */\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+@AllArgsConstructor\n public class Order {\n \n   private String name;\n   private String contactNumber;\n   private String address;\n   private String depositNumber;\n   private String orderItem;\n-\n-  public Order() {\n-  }\n-\n-  /**\n-   * Constructor.\n-   */\n-  public Order(\n-      String name, String contactNumber, String address,\n-      String depositNumber, String order\n-  ) {\n-    this.name = name;\n-    this.contactNumber = contactNumber;\n-    this.address = address;\n-    this.depositNumber = depositNumber;\n-    this.orderItem = order;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public String getContactNumber() {\n-    return contactNumber;\n-  }\n-\n-  public void setContactNumber(String contactNumber) {\n-    this.contactNumber = contactNumber;\n-  }\n-\n-  public String getAddress() {\n-    return address;\n-  }\n-\n-  public void setAddress(String address) {\n-    this.address = address;\n-  }\n-\n-  public String getDepositNumber() {\n-    return depositNumber;\n-  }\n-\n-  public void setDepositNumber(String depositNumber) {\n-    this.depositNumber = depositNumber;\n-  }\n-\n-  public String getOrderItem() {\n-    return orderItem;\n-  }\n-\n-  public void setOrderItem(String order) {\n-    this.orderItem = order;\n-  }\n }\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Target.java b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Target.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Target.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Target.java\n@@ -28,6 +28,7 @@\n import java.awt.Dimension;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+import java.io.Serial;\n import java.util.stream.IntStream;\n import javax.swing.JButton;\n import javax.swing.JFrame;\n@@ -45,6 +46,7 @@\n  */\n public class Target extends JFrame { //NOSONAR\n \n+  @Serial\n   private static final long serialVersionUID = 1L;\n \n   private final JTable jt;\n\ndiff --git a/intercepting-filter/src/test/java/com/iluwatar/intercepting/filter/TargetTest.java b/intercepting-filter/src/test/java/com/iluwatar/intercepting/filter/TargetTest.java\n--- a/intercepting-filter/src/test/java/com/iluwatar/intercepting/filter/TargetTest.java\n+++ b/intercepting-filter/src/test/java/com/iluwatar/intercepting/filter/TargetTest.java\n@@ -25,7 +25,7 @@\n package com.iluwatar.intercepting.filter;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.junit.jupiter.api.Test;\n \n@@ -41,6 +41,6 @@ void testSetup(){\n         final var target = new Target();\n         assertEquals(target.getSize().getWidth(), Double.valueOf(640));\n         assertEquals(target.getSize().getHeight(), Double.valueOf(480));\n-        assertEquals(true,target.isVisible());\n+        assertTrue(target.isVisible());\n     }\n }",
    "output": "Improve intercepting filter"
  },
  {
    "input": "diff --git a/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java b/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java\n--- a/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java\n+++ b/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java\n@@ -66,7 +66,7 @@ public Integer checkHealth() {\n    * @throws Exception if the test transaction fails\n    */\n   @Transactional\n-  public void performTestTransaction() {\n+  public void performTestTransaction() throws Exception {\n     try {\n       HealthCheck healthCheck = new HealthCheck();\n       healthCheck.setStatus(HEALTH_CHECK_OK);\n\ndiff --git a/health-check/src/test/java/CustomHealthIndicatorTest.java b/health-check/src/test/java/CustomHealthIndicatorTest.java\n--- a/health-check/src/test/java/CustomHealthIndicatorTest.java\n+++ b/health-check/src/test/java/CustomHealthIndicatorTest.java\n@@ -22,9 +22,14 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.mockito.ArgumentMatchers.anyLong;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n import com.iluwatar.health.check.AsynchronousHealthChecker;\n import com.iluwatar.health.check.CustomHealthIndicator;\n\ndiff --git a/health-check/src/test/java/DatabaseTransactionHealthIndicatorTest.java b/health-check/src/test/java/DatabaseTransactionHealthIndicatorTest.java\n--- a/health-check/src/test/java/DatabaseTransactionHealthIndicatorTest.java\n+++ b/health-check/src/test/java/DatabaseTransactionHealthIndicatorTest.java\n@@ -22,9 +22,13 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n \n import com.iluwatar.health.check.AsynchronousHealthChecker;\n import com.iluwatar.health.check.DatabaseTransactionHealthIndicator;",
    "output": "Improve health check"
  },
  {
    "input": "diff --git a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java\n--- a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java\n+++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java\n@@ -26,18 +26,20 @@\n \n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n- * Created by robertt240 on 1/26/17.\n- *\n  * <p>Guarded-suspension is a concurrent design pattern for handling situation when to execute some\n  * action we need condition to be satisfied.\n- *\n- * <p>Implementation is based on GuardedQueue, which has two methods: get and put, the condition is\n- * that we cannot get from empty queue so when thread attempt to break the condition we invoke\n- * Object's wait method on him and when other thread put an element to the queue he notify the\n- * waiting one that now he can get from queue.\n+ * The implementation utilizes a GuardedQueue, which features two primary methods: `get` and `put`.\n+ * The key condition governing these operations is that elements cannot be retrieved (`get`) from\n+ * an empty queue. When a thread attempts to retrieve an element under this condition, it triggers\n+ * the invocation of the `wait` method from the Object class, causing the thread to pause.\n+ * Conversely, when an element is added (`put`) to the queue by another thread, it invokes the\n+ * `notify` method. This notifies the waiting thread that it can now successfully retrieve an\n+ * element from the queue.\n  */\n+@Slf4j\n public class App {\n   /**\n    * Example pattern execution.\n@@ -56,7 +58,7 @@ public static void main(String[] args) {\n     try {\n       Thread.sleep(2000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n     }\n     // now we execute second thread which will put number to guardedQueue\n     // and notify first thread that it could get\n@@ -65,8 +67,7 @@ public static void main(String[] args) {\n     try {\n       executorService.awaitTermination(30, TimeUnit.SECONDS);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n     }\n   }\n-\n }\n\ndiff --git a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n--- a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n+++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n@@ -44,7 +44,7 @@ public GuardedQueue() {\n   }\n \n   /**\n-   * Get the last element of the queue is exists.\n+   * Get the last element of the queue if exists.\n    *\n    * @return last element of a queue if queue is not empty\n    */\n@@ -54,7 +54,7 @@ public synchronized Integer get() {\n         LOGGER.info(\"waiting\");\n         wait();\n       } catch (InterruptedException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"Error occurred: \", e);\n       }\n     }\n     LOGGER.info(\"getting\");\n\ndiff --git a/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n--- a/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n+++ b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n@@ -28,11 +28,13 @@\n \n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n import org.junit.jupiter.api.Test;\n \n /**\n  * Test for Guarded Queue\n  */\n+@Slf4j\n class GuardedQueueTest {\n   private volatile Integer value;\n \n@@ -46,7 +48,7 @@ void testGet() {\n     try {\n       executorService.awaitTermination(30, TimeUnit.SECONDS);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n     }\n     assertEquals(Integer.valueOf(10), value);\n   }",
    "output": "Improve guarded suspension"
  },
  {
    "input": "diff --git a/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java b/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java\n--- a/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java\n+++ b/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java\n@@ -24,22 +24,19 @@\n  */\n package com.iluwatar.gameloop;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Bullet object class.\n  */\n public class Bullet {\n \n+  @Getter\n+  @Setter\n   private float position;\n \n   public Bullet() {\n     position = 0.0f;\n   }\n-\n-  public float getPosition() {\n-    return position;\n-  }\n-\n-  public void setPosition(float position) {\n-    this.position = position;\n-  }\n }",
    "output": "Improve game loop"
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java b/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java\n@@ -30,11 +30,7 @@\n /**\n  * ElfWeapon.\n  */\n-@RequiredArgsConstructor\n-@Getter\n-public class ElfWeapon implements Weapon {\n-\n-  private final WeaponType weaponType;\n+public record ElfWeapon(WeaponType weaponType) implements Weapon {\n \n   @Override\n   public String toString() {\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java b/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java\n@@ -30,11 +30,7 @@\n /**\n  * OrcWeapon.\n  */\n-@RequiredArgsConstructor\n-@Getter\n-public class OrcWeapon implements Weapon {\n-\n-  private final WeaponType weaponType;\n+public record OrcWeapon(WeaponType weaponType) implements Weapon {\n \n   @Override\n   public String toString() {\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java b/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java\n@@ -29,6 +29,6 @@\n  */\n public interface Weapon {\n \n-  WeaponType getWeaponType();\n+  WeaponType weaponType();\n \n }\n\ndiff --git a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n--- a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n@@ -98,6 +98,6 @@ void testElfBlacksmithWithSpear() {\n   private void verifyWeapon(Weapon weapon, WeaponType expectedWeaponType, Class<?> clazz) {\n     assertTrue(clazz.isInstance(weapon), \"Weapon must be an object of: \" + clazz.getName());\n     assertEquals(expectedWeaponType, weapon\n-        .getWeaponType(), \"Weapon must be of weaponType: \" + expectedWeaponType);\n+        .weaponType(), \"Weapon must be of weaponType: \" + expectedWeaponType);\n   }\n }",
    "output": "Upgrade factory method"
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/execute/around/App.java b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n@@ -30,7 +30,7 @@\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * The Execute Around idiom specifies executable code before and after a method. Typically\n+ * The Execute Around idiom specifies executable code before and after a method. Typically,\n  * the idiom is used when the API has methods to be executed in pairs, such as resource\n  * allocation/deallocation or lock acquisition/release.\n  *\n@@ -47,9 +47,7 @@ public class App {\n   public static void main(String[] args) throws IOException {\n \n     // create the file writer and execute the custom action\n-    FileWriterAction writeHello = writer -> {\n-      writer.write(\"Gandalf was here\");\n-    };\n+    FileWriterAction writeHello = writer -> writer.write(\"Gandalf was here\");\n     new SimpleFileWriter(\"testfile.txt\", writeHello);\n \n     // print the file contents\n\ndiff --git a/execute-around/src/test/java/com/iluwatar/execute/around/AppTest.java b/execute-around/src/test/java/com/iluwatar/execute/around/AppTest.java\n--- a/execute-around/src/test/java/com/iluwatar/execute/around/AppTest.java\n+++ b/execute-around/src/test/java/com/iluwatar/execute/around/AppTest.java\n@@ -24,14 +24,13 @@\n  */\n package com.iluwatar.execute.around;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import java.io.File;\n-import java.io.IOException;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-\n /**\n  * Tests execute-around example.\n  */",
    "output": "Improve execute around"
  },
  {
    "input": "diff --git a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n--- a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n+++ b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n@@ -28,13 +28,11 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import com.github.stefanbirkner.systemlambda.Statement;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n /**\n  * GroundDive unit tests.\n  */\n-@Disabled\n class GroundDiveTest {\n \n   @Test\n@@ -69,7 +67,7 @@ void testActivate() throws Exception {\n     var logs = tapSystemOutNormalized(groundDive::activate)\n         .split(\"\\n\");\n     final var expectedSize = 3;\n-    final var log1 = logs[0].split(\"-\")[1].trim() + \" -\" + logs[0].split(\"-\")[2].trim();\n+    final var log1 = logs[0].split(\"--\")[1].trim();\n     final var expectedLog1 = \"Move to ( 0.0, 0.0, -20.0 )\";\n     final var log2 = getLogContent(logs[1]);\n     final var expectedLog2 = \"Play GROUNDDIVE_SOUND with volume 5\";\n@@ -87,7 +85,7 @@ private String getLogContent(Statement statement) throws Exception {\n   }\n \n   private String getLogContent(String log) {\n-    return log.split(\"-\")[1].trim();\n+    return log.split(\"--\")[1].trim();\n   }\n \n }\n\ndiff --git a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n--- a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n+++ b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n@@ -28,13 +28,11 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import com.github.stefanbirkner.systemlambda.Statement;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n /**\n  * SkyLaunch unit tests.\n  */\n-@Disabled\n class SkyLaunchTest {\n \n   @Test\n@@ -86,6 +84,6 @@ private String getLogContent(Statement statement) throws Exception {\n   }\n \n   private String getLogContent(String log) {\n-    return log.split(\"-\")[1].trim();\n+    return log.split(\"--\")[1].trim();\n   }\n }",
    "output": "Subclass Sandbox tests fixed and re-enabled\nCo-authored-by: Yugantar Arya <yugantararya@Yugantars-MacBook-Air.local>"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java\n@@ -26,66 +26,62 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-import com.mongodb.MongoClientSettings;\n-import com.mongodb.ServerAddress;\n import com.mongodb.client.MongoClient;\n import com.mongodb.client.MongoClients;\n import com.mongodb.client.MongoDatabase;\n-import de.flapdoodle.embed.mongo.MongodExecutable;\n-import de.flapdoodle.embed.mongo.MongodProcess;\n-import de.flapdoodle.embed.mongo.MongodStarter;\n-import de.flapdoodle.embed.mongo.config.MongodConfig;\n+import de.flapdoodle.embed.mongo.commands.ServerAddress;\n import de.flapdoodle.embed.mongo.distribution.Version;\n+import de.flapdoodle.embed.mongo.transitions.Mongod;\n+import de.flapdoodle.embed.mongo.transitions.RunningMongodProcess;\n+import de.flapdoodle.reverse.TransitionWalker;\n import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-import java.util.List;\n-\n /**\n  * Tests for Mongo banking adapter\n  */\n class MongoBankTest {\n \n   private static final String TEST_DB = \"lotteryDBTest\";\n   private static final String TEST_ACCOUNTS_COLLECTION = \"testAccounts\";\n-  private static final String TEST_HOST = \"localhost\";\n-  private static final int TEST_PORT = 27017;\n \n-  private static MongodExecutable mongodExe;\n-  private static MongodProcess mongodProcess;\n   private static MongoClient mongoClient;\n   private static MongoDatabase mongoDatabase;\n \n   private MongoBank mongoBank;\n \n-  @BeforeAll\n-  static void setUp() throws Exception {\n-    MongodStarter starter = MongodStarter.getDefaultInstance();\n-    MongodConfig mongodConfig = buildMongoConfig();\n+  private static TransitionWalker.ReachedState<RunningMongodProcess> mongodProcess;\n+\n+  private static ServerAddress serverAddress;\n \n-    mongoClient = buildMongoClient();\n-    mongodExe = starter.prepare(mongodConfig);\n-    mongodProcess = mongodExe.start();\n+\n+\n+  @BeforeAll\n+  static void setUp() {\n+    mongodProcess = Mongod.instance().start(Version.Main.V7_0);\n+    serverAddress = mongodProcess.current().getServerAddress();\n+    mongoClient = MongoClients.create(\"mongodb://\" + serverAddress.toString());\n+    mongoClient.startSession();\n     mongoDatabase = mongoClient.getDatabase(TEST_DB);\n   }\n \n+  @AfterAll\n+  static void tearDown() {\n+    mongoClient.close();\n+    mongodProcess.close();\n+  }\n+\n+\n   @BeforeEach\n   void init() {\n-    System.setProperty(\"mongo-host\", TEST_HOST);\n-    System.setProperty(\"mongo-port\", String.valueOf(TEST_PORT));\n+    System.setProperty(\"mongo-host\", serverAddress.getHost());\n+    System.setProperty(\"mongo-port\", String.valueOf(serverAddress.getPort()));\n     mongoDatabase.drop();\n     mongoBank = new MongoBank(mongoDatabase.getName(), TEST_ACCOUNTS_COLLECTION);\n   }\n \n-  @AfterAll\n-  static void tearDown() {\n-    mongoClient.close();\n-    mongodProcess.stop();\n-    mongodExe.stop();\n-  }\n-\n   @Test\n   void testSetup() {\n     assertEquals(0, mongoBank.getAccountsCollection().countDocuments());\n@@ -101,19 +97,4 @@ void testFundTransfers() {\n     assertEquals(1, mongoBank.getFunds(\"000-000\"));\n     assertEquals(9, mongoBank.getFunds(\"111-111\"));\n   }\n-\n-  private static MongodConfig buildMongoConfig() {\n-    return MongodConfig.builder()\n-            .version(Version.Main.PRODUCTION)\n-            .net(new de.flapdoodle.embed.mongo.config.Net(TEST_HOST, TEST_PORT, true))\n-            .build();\n-  }\n-\n-  private static MongoClient buildMongoClient() {\n-    return MongoClients.create(\n-            MongoClientSettings.builder()\n-                .applyToClusterSettings(builder -> builder.hosts(List.of(new ServerAddress(TEST_HOST, TEST_PORT))))\n-                .build()\n-    );\n-  }\n-}\n+}\n\\ No newline at end of file",
    "output": "Upgrade mongodb to latest and fix tests."
  },
  {
    "input": "diff --git a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n--- a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n@@ -30,6 +30,7 @@\n import javax.sound.sampled.AudioSystem;\n import javax.sound.sampled.LineUnavailableException;\n import javax.sound.sampled.UnsupportedAudioFileException;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -49,6 +50,7 @@ public class Audio {\n \n   private volatile Thread updateThread = null;\n \n+  @Getter\n   private final PlayMessage[] pendingAudio = new PlayMessage[MAX_PENDING];\n \n   // Visible only for testing purposes\n@@ -81,8 +83,8 @@ public synchronized boolean isServiceRunning() {\n   }\n \n   /**\n-   * Starts the thread for the Update Method pattern if it was not started previously. Also when the\n-   * thread is is ready initializes the indexes of the queue\n+   * Starts the thread for the Update Method pattern if it was not started previously. Also, when the\n+   * thread is ready initializes the indexes of the queue\n    */\n   public void init() {\n     if (updateThread == null) {\n@@ -164,14 +166,4 @@ public AudioInputStream getAudioStream(String filePath)\n       throws UnsupportedAudioFileException, IOException {\n     return AudioSystem.getAudioInputStream(new File(filePath).getAbsoluteFile());\n   }\n-\n-  /**\n-   * Returns with the message array of the queue.\n-   *\n-   * @return PlayMessage[]\n-   */\n-  public PlayMessage[] getPendingAudio() {\n-    return pendingAudio;\n-  }\n-\n }",
    "output": "Improve event queue docs"
  },
  {
    "input": "diff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserCreatedEventHandler.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserCreatedEventHandler.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserCreatedEventHandler.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserCreatedEventHandler.java\n@@ -36,7 +36,7 @@ public class UserCreatedEventHandler implements Handler<UserCreatedEvent> {\n \n   @Override\n   public void onEvent(UserCreatedEvent event) {\n-    LOGGER.info(\"User '{}' has been Created!\", event.getUser().getUsername());\n+    LOGGER.info(\"User '{}' has been Created!\", event.getUser().username());\n   }\n \n }\n\ndiff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserUpdatedEventHandler.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserUpdatedEventHandler.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserUpdatedEventHandler.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/handler/UserUpdatedEventHandler.java\n@@ -36,6 +36,6 @@ public class UserUpdatedEventHandler implements Handler<UserUpdatedEvent> {\n \n   @Override\n   public void onEvent(UserUpdatedEvent event) {\n-    LOGGER.info(\"User '{}' has been Updated!\", event.getUser().getUsername());\n+    LOGGER.info(\"User '{}' has been Updated!\", event.getUser().username());\n   }\n }\n\ndiff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/model/User.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/model/User.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/model/User.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/model/User.java\n@@ -33,9 +33,4 @@\n  * This {@link User} class is a basic pojo used to demonstrate user data sent along with the {@link\n  * UserCreatedEvent} and {@link UserUpdatedEvent} events.\n  */\n-@RequiredArgsConstructor\n-@Getter\n-public class User {\n-\n-  private final String username;\n-}\n+public record User(String username) {}",
    "output": "Event-driven architecture explanation\n* update readme\n* convert to record"
  },
  {
    "input": "diff --git a/event-aggregator/src/test/java/com/iluwatar/event/aggregator/AppTest.java b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/AppTest.java\n--- a/event-aggregator/src/test/java/com/iluwatar/event/aggregator/AppTest.java\n+++ b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/AppTest.java\n@@ -35,7 +35,6 @@ class AppTest {\n \n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\n    * throws an exception.\n    */\n\ndiff --git a/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingJoffreyTest.java b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingJoffreyTest.java\n--- a/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingJoffreyTest.java\n+++ b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingJoffreyTest.java\n@@ -67,14 +67,14 @@ void testOnEvent() {\n       assertEquals(i, appender.getLogSize());\n       var event = Event.values()[i];\n       kingJoffrey.onEvent(event);\n-      final var expectedMessage = \"Received event from the King's Hand: \" + event.toString();\n+      final var expectedMessage = \"Received event from the King's Hand: \" + event;\n       assertEquals(expectedMessage, appender.getLastMessage());\n       assertEquals(i + 1, appender.getLogSize());\n     });\n \n   }\n \n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+  private static class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private final List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender(Class<?> clazz) {\n\ndiff --git a/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingsHandTest.java b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingsHandTest.java\n--- a/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingsHandTest.java\n+++ b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/KingsHandTest.java\n@@ -49,11 +49,11 @@ public KingsHandTest() {\n \n   /**\n    * The {@link KingsHand} is both an {@link EventEmitter} as an {@link EventObserver} so verify if\n-   * every event received is passed up to it's superior, in most cases {@link KingJoffrey} but now\n+   * every event received is passed up to its superior, in most cases {@link KingJoffrey} but now\n    * just a mocked observer.\n    */\n   @Test\n-  void testPassThrough() throws Exception {\n+  void testPassThrough() {\n     final var observer = mock(EventObserver.class);\n     final var kingsHand = new KingsHand();\n     kingsHand.registerObserver(observer, Event.STARK_SIGHTED);",
    "output": "Upgrade event aggregator docs"
  },
  {
    "input": "diff --git a/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSource.java b/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSource.java\n--- a/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSource.java\n+++ b/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSource.java\n@@ -141,7 +141,6 @@ public Stream<Order> queryOrders() {\n             rSet.getString(6)));\n         ordersList.add(order);\n       }\n-      rSet.close();\n     } catch (SQLException e) {\n       LOGGER.error(e.getMessage(), e.getCause());\n     }\n@@ -166,7 +165,6 @@ public Order queryOrder(int id) throws SQLException {\n             rSet.getString(5), rSet.getString(6));\n         order = new Order(rSet.getInt(1), rSet.getString(2), rSet.getString(3), address);\n       }\n-      rSet.close();\n     } catch (Exception e) {\n       LOGGER.error(e.getLocalizedMessage(), e.getCause());\n     }\n@@ -192,7 +190,7 @@ public void removeOrder(int id) throws Exception {\n   }\n \n   @Override\n-  public boolean deleteSchema() throws Exception {\n+  public boolean deleteSchema()  {\n     try {\n       deleteschema.execute(DELETE_SCHEMA);\n       queryOrders.close();\n\ndiff --git a/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSourceInterface.java b/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSourceInterface.java\n--- a/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSourceInterface.java\n+++ b/embedded-value/src/main/java/com/iluwatar/embedded/value/DataSourceInterface.java\n@@ -36,22 +36,22 @@\n  */\n interface DataSourceInterface {\n   \n-  final String JDBC_URL = \"jdbc:h2:mem:Embedded-Value\";\n+  String JDBC_URL = \"jdbc:h2:mem:Embedded-Value\";\n   \n-  final String CREATE_SCHEMA = \"CREATE TABLE Orders (Id INT AUTO_INCREMENT, item VARCHAR(50) NOT NULL, orderedBy VARCHAR(50)\"\n+  String CREATE_SCHEMA = \"CREATE TABLE Orders (Id INT AUTO_INCREMENT, item VARCHAR(50) NOT NULL, orderedBy VARCHAR(50)\"\n       + \", city VARCHAR(50), state VARCHAR(50), pincode CHAR(6) NOT NULL, PRIMARY KEY(Id))\";\n   \n-  final String GET_SCHEMA = \"SHOW COLUMNS FROM Orders\";\n+  String GET_SCHEMA = \"SHOW COLUMNS FROM Orders\";\n   \n-  final String INSERT_ORDER = \"INSERT INTO Orders (item, orderedBy, city, state, pincode) VALUES(?, ?, ?, ?, ?)\";\n+  String INSERT_ORDER = \"INSERT INTO Orders (item, orderedBy, city, state, pincode) VALUES(?, ?, ?, ?, ?)\";\n   \n-  final String QUERY_ORDERS = \"SELECT * FROM Orders\";\n+  String QUERY_ORDERS = \"SELECT * FROM Orders\";\n   \n-  final String QUERY_ORDER = QUERY_ORDERS + \" WHERE Id = ?\";\n+  String QUERY_ORDER = QUERY_ORDERS + \" WHERE Id = ?\";\n   \n-  final String REMOVE_ORDER = \"DELETE FROM Orders WHERE Id = ?\";\n+  String REMOVE_ORDER = \"DELETE FROM Orders WHERE Id = ?\";\n   \n-  final String DELETE_SCHEMA = \"DROP TABLE Orders\";\n+  String DELETE_SCHEMA = \"DROP TABLE Orders\";\n   \n   boolean createSchema() throws SQLException;\n   ",
    "output": "Embedded value + refactor"
  },
  {
    "input": "diff --git a/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java b/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java\n--- a/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java\n+++ b/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java\n@@ -132,7 +132,7 @@ private HttpRequest.BodyPublisher buildBodyPublisher(Method method, Object[] arg\n \n   private Object getResponse(Method method, HttpResponse<String> httpResponse) {\n     var rawData = httpResponse.body();\n-    Type returnType = null;\n+    Type returnType;\n     try {\n       returnType = method.getGenericReturnType();\n     } catch (Exception e) {",
    "output": "Upgrade dynamic proxy docs"
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/GameObject.java b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/GameObject.java\n--- a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/GameObject.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/GameObject.java\n@@ -24,9 +24,14 @@\n  */\n package com.iluwatar.doubledispatch;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Game objects have coordinates and some other status information.\n  */\n+@Getter\n+@Setter\n public abstract class GameObject extends Rectangle {\n \n   private boolean damaged;\n@@ -42,22 +47,6 @@ public String toString() {\n         super.toString(), isDamaged(), isOnFire());\n   }\n \n-  public boolean isOnFire() {\n-    return onFire;\n-  }\n-\n-  public void setOnFire(boolean onFire) {\n-    this.onFire = onFire;\n-  }\n-\n-  public boolean isDamaged() {\n-    return damaged;\n-  }\n-\n-  public void setDamaged(boolean damaged) {\n-    this.damaged = damaged;\n-  }\n-\n   public abstract void collision(GameObject gameObject);\n \n   public abstract void collisionResolve(FlamingAsteroid asteroid);\n\ndiff --git a/double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java b/double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java\n--- a/double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java\n+++ b/double-dispatch/src/test/java/com/iluwatar/doubledispatch/AppTest.java\n@@ -35,7 +35,6 @@ class AppTest {\n \n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\n    * throws an exception.\n    */\n\ndiff --git a/double-dispatch/src/test/java/com/iluwatar/doubledispatch/RectangleTest.java b/double-dispatch/src/test/java/com/iluwatar/doubledispatch/RectangleTest.java\n--- a/double-dispatch/src/test/java/com/iluwatar/doubledispatch/RectangleTest.java\n+++ b/double-dispatch/src/test/java/com/iluwatar/doubledispatch/RectangleTest.java\n@@ -52,7 +52,7 @@ void testConstructor() {\n    * #toString()}\n    */\n   @Test\n-  void testToString() throws Exception {\n+  void testToString() {\n     final var rectangle = new Rectangle(1, 2, 3, 4);\n     assertEquals(\"[1,2,3,4]\", rectangle.toString());\n   }",
    "output": "Double dispatch explanation + refactor"
  },
  {
    "input": "diff --git a/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java\n--- a/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java\n+++ b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/AppTest.java\n@@ -35,7 +35,6 @@ class AppTest {\n \n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\n    * throws an exception.\n    */\n\ndiff --git a/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java\n--- a/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java\n+++ b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java\n@@ -80,7 +80,7 @@ void tearDown() {\n    * item limit.\n    */\n   @Test\n-  void testAddItem() throws Exception {\n+  void testAddItem() {\n     assertTimeout(ofMillis(10000), () -> {\n       // Create a new inventory with a limit of 1000 items and put some load on the add method\n       final var inventory = new Inventory(INVENTORY_SIZE);\n@@ -109,7 +109,7 @@ void testAddItem() throws Exception {\n   }\n \n \n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+  private static class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private final List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender(Class clazz) {",
    "output": "Add explanation for Double-Checked Locking"
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java\n@@ -40,7 +40,7 @@\n @Slf4j\n public class DataFetcher {\n \n-  private final String filename = \"world.txt\";\n+  private static final String FILENAME = \"world.txt\";\n   private long lastFetched;\n \n   public DataFetcher() {\n@@ -62,14 +62,14 @@ private boolean isDirty(long fileLastModified) {\n    */\n   public List<String> fetch() {\n     var classLoader = getClass().getClassLoader();\n-    var file = new File(classLoader.getResource(filename).getFile());\n+    var file = new File(classLoader.getResource(FILENAME).getFile());\n \n     if (isDirty(file.lastModified())) {\n-      LOGGER.info(filename + \" is dirty! Re-fetching file content...\");\n+      LOGGER.info(FILENAME + \" is dirty! Re-fetching file content...\");\n       try (var br = new BufferedReader(new FileReader(file))) {\n         return br.lines().collect(Collectors.collectingAndThen(Collectors.toList(), List::copyOf));\n       } catch (IOException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"An error occurred: \", e);\n       }\n     }\n \n\ndiff --git a/dirty-flag/src/test/java/org/dirty/flag/AppTest.java b/dirty-flag/src/test/java/org/dirty/flag/AppTest.java\n--- a/dirty-flag/src/test/java/org/dirty/flag/AppTest.java\n+++ b/dirty-flag/src/test/java/org/dirty/flag/AppTest.java\n@@ -36,7 +36,6 @@ class AppTest {\n \n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\n    * throws an exception.\n    */",
    "output": "Upgrade Dirty Flag docs"
  },
  {
    "input": "diff --git a/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java b/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java\n--- a/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java\n+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java\n@@ -24,6 +24,8 @@\n  */\n package com.iluwatar.datamapper;\n \n+import java.io.Serial;\n+\n /**\n  * Using Runtime Exception for avoiding dependency on implementation exceptions. This helps in\n  * decoupling.\n@@ -32,6 +34,7 @@\n  */\n public final class DataMapperException extends RuntimeException {\n \n+  @Serial\n   private static final long serialVersionUID = 1L;\n \n   /**\n\ndiff --git a/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java\n--- a/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java\n+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/Student.java\n@@ -24,6 +24,7 @@\n  */\r\n package com.iluwatar.datamapper;\r\n \r\n+import java.io.Serial;\r\n import java.io.Serializable;\r\n import lombok.AllArgsConstructor;\r\n import lombok.EqualsAndHashCode;\r\n@@ -41,6 +42,7 @@\n @AllArgsConstructor\r\n public final class Student implements Serializable {\r\n \r\n+  @Serial\r\n   private static final long serialVersionUID = 1L;\r\n \r\n   @EqualsAndHashCode.Include\r\n\ndiff --git a/data-mapper/src/main/java/com/iluwatar/datamapper/StudentDataMapperImpl.java b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentDataMapperImpl.java\n--- a/data-mapper/src/main/java/com/iluwatar/datamapper/StudentDataMapperImpl.java\n+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentDataMapperImpl.java\n@@ -27,10 +27,12 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import lombok.Getter;\n \n /**\n  * Implementation of Actions on Students Data.\n  */\n+@Getter\n public final class StudentDataMapperImpl implements StudentDataMapper {\n \n   /* Note: Normally this would be in the form of an actual database */\n@@ -70,8 +72,4 @@ public void delete(Student studentToBeDeleted) throws DataMapperException {\n       throw new DataMapperException(\"Student [\" + name + \"] is not found\");\n     }\n   }\n-\n-  public List<Student> getStudents() {\n-    return this.students;\n-  }\n }\n\ndiff --git a/data-mapper/src/test/java/com/iluwatar/datamapper/AppTest.java b/data-mapper/src/test/java/com/iluwatar/datamapper/AppTest.java\n--- a/data-mapper/src/test/java/com/iluwatar/datamapper/AppTest.java\n+++ b/data-mapper/src/test/java/com/iluwatar/datamapper/AppTest.java\n@@ -36,7 +36,6 @@ final class AppTest {\n \r\n   /**\r\n    * Issue: Add at least one assertion to this test case.\r\n-   *\r\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\r\n    * throws an exception.\r\n    */\r\n\ndiff --git a/data-mapper/src/test/java/com/iluwatar/datamapper/StudentTest.java b/data-mapper/src/test/java/com/iluwatar/datamapper/StudentTest.java\n--- a/data-mapper/src/test/java/com/iluwatar/datamapper/StudentTest.java\n+++ b/data-mapper/src/test/java/com/iluwatar/datamapper/StudentTest.java\n@@ -41,7 +41,7 @@ final class StudentTest {\n    * @throws Exception if any execution error during test\n    */\n   @Test\n-  void testEquality() throws Exception {\n+  void testEquality() {\n \n     /* Create some students */\n     final var firstStudent = new Student(1, \"Adam\", 'A');",
    "output": "Data mapper docs"
  },
  {
    "input": "diff --git a/data-locality/src/test/java/com/iluwatar/data/locality/ApplicationTest.java b/data-locality/src/test/java/com/iluwatar/data/locality/ApplicationTest.java\n--- a/data-locality/src/test/java/com/iluwatar/data/locality/ApplicationTest.java\n+++ b/data-locality/src/test/java/com/iluwatar/data/locality/ApplicationTest.java\n@@ -36,7 +36,6 @@ class ApplicationTest {\n \n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link Application#main(String[])}\n    * throws an exception.\n    */",
    "output": "Data locality docs"
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/User.java b/converter/src/main/java/com/iluwatar/converter/User.java\n--- a/converter/src/main/java/com/iluwatar/converter/User.java\n+++ b/converter/src/main/java/com/iluwatar/converter/User.java\n@@ -24,21 +24,7 @@\n  */\n package com.iluwatar.converter;\n \n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n-import lombok.ToString;\n-\n /**\n- * User class.\n+ * User record.\n  */\n-@ToString\n-@EqualsAndHashCode\n-@Getter\n-@RequiredArgsConstructor\n-public class User {\n-  private final String firstName;\n-  private final String lastName;\n-  private final boolean active;\n-  private final String userId;\n-}\n+public record User(String firstName, String lastName, boolean active, String userId) {}\n\ndiff --git a/converter/src/main/java/com/iluwatar/converter/UserConverter.java b/converter/src/main/java/com/iluwatar/converter/UserConverter.java\n--- a/converter/src/main/java/com/iluwatar/converter/UserConverter.java\n+++ b/converter/src/main/java/com/iluwatar/converter/UserConverter.java\n@@ -34,11 +34,10 @@ public UserConverter() {\n   }\n \n   private static UserDto convertToDto(User user) {\n-    return new UserDto(user.getFirstName(), user.getLastName(), user.isActive(), user.getUserId());\n+    return new UserDto(user.firstName(), user.lastName(), user.active(), user.userId());\n   }\n \n   private static User convertToEntity(UserDto dto) {\n-    return new User(dto.getFirstName(), dto.getLastName(), dto.isActive(), dto.getEmail());\n+    return new User(dto.firstName(), dto.lastName(), dto.active(), dto.email());\n   }\n-\n }\n\ndiff --git a/converter/src/main/java/com/iluwatar/converter/UserDto.java b/converter/src/main/java/com/iluwatar/converter/UserDto.java\n--- a/converter/src/main/java/com/iluwatar/converter/UserDto.java\n+++ b/converter/src/main/java/com/iluwatar/converter/UserDto.java\n@@ -24,23 +24,7 @@\n  */\n package com.iluwatar.converter;\n \n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n-import lombok.ToString;\n-\n /**\n- * User DTO class.\n+ * UserDto record.\n  */\n-@RequiredArgsConstructor\n-@Getter\n-@EqualsAndHashCode\n-@ToString\n-public class UserDto {\n-\n-  private final String firstName;\n-  private final String lastName;\n-  private final boolean active;\n-  private final String email;\n-\n-}\n+public record UserDto(String firstName, String lastName, boolean active, String email) {}\n\ndiff --git a/converter/src/test/java/com/iluwatar/converter/AppTest.java b/converter/src/test/java/com/iluwatar/converter/AppTest.java\n--- a/converter/src/test/java/com/iluwatar/converter/AppTest.java\n+++ b/converter/src/test/java/com/iluwatar/converter/AppTest.java\n@@ -35,7 +35,6 @@ class AppTest {\n \n   /**\n    * Issue: Add at least one assertion to this test case.\n-   *\n    * Solution: Inserted assertion to check whether the execution of the main method in {@link App#main(String[])}\n    * throws an exception.\n    */\n\ndiff --git a/converter/src/test/java/com/iluwatar/converter/ConverterTest.java b/converter/src/test/java/com/iluwatar/converter/ConverterTest.java\n--- a/converter/src/test/java/com/iluwatar/converter/ConverterTest.java\n+++ b/converter/src/test/java/com/iluwatar/converter/ConverterTest.java\n@@ -65,20 +65,20 @@ void testConversionsStartingFromDto() {\n   void testCustomConverter() {\n     var converter = new Converter<UserDto, User>(\n         userDto -> new User(\n-            userDto.getFirstName(),\n-            userDto.getLastName(),\n-            userDto.isActive(),\n+            userDto.firstName(),\n+            userDto.lastName(),\n+            userDto.active(),\n             String.valueOf(new Random().nextInt())\n         ),\n         user -> new UserDto(\n-            user.getFirstName(),\n-            user.getLastName(),\n-            user.isActive(),\n-            user.getFirstName().toLowerCase() + user.getLastName().toLowerCase() + \"@whatever.com\")\n+            user.firstName(),\n+            user.lastName(),\n+            user.active(),\n+            user.firstName().toLowerCase() + user.lastName().toLowerCase() + \"@whatever.com\")\n     );\n     var u1 = new User(\"John\", \"Doe\", false, \"12324\");\n     var userDto = converter.convertFromEntity(u1);\n-    assertEquals(\"johndoe@whatever.com\", userDto.getEmail());\n+    assertEquals(\"johndoe@whatever.com\", userDto.email());\n   }\n \n   /**",
    "output": "Converter pattern docs and refactoring"
  },
  {
    "input": "diff --git a/context-object/src/main/java/com/iluwatar/context/object/ServiceContext.java b/context-object/src/main/java/com/iluwatar/context/object/ServiceContext.java\n--- a/context-object/src/main/java/com/iluwatar/context/object/ServiceContext.java\n+++ b/context-object/src/main/java/com/iluwatar/context/object/ServiceContext.java\n@@ -26,7 +26,6 @@\n \n import lombok.Getter;\n import lombok.Setter;\n-import lombok.ToString;\n \n /**\n  * Where context objects are defined.",
    "output": "Improvements to the Context Object docs"
  },
  {
    "input": "diff --git a/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java b/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java\n--- a/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java\n+++ b/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java\n@@ -25,18 +25,17 @@\n package com.iluwatar.compositeview;\n \n import jakarta.servlet.RequestDispatcher;\n-import jakarta.servlet.ServletException;\n import jakarta.servlet.http.HttpServlet;\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n import java.io.PrintWriter;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * A servlet object that extends HttpServlet.\n  * Runs on Tomcat 10 and handles Http requests\n  */\n-\n+@Slf4j\n public final class AppServlet extends HttpServlet {\n   private static final String CONTENT_TYPE = \"text/html\";\n   private String msgPartOne = \"<h1>This Server Doesn't Support\";\n@@ -56,39 +55,44 @@ public AppServlet() {\n   }\n \n   @Override\n-  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n-          throws ServletException, IOException {\n-    RequestDispatcher requestDispatcher = req.getRequestDispatcher(destination);\n-    ClientPropertiesBean reqParams = new ClientPropertiesBean(req);\n-    req.setAttribute(\"properties\", reqParams);\n-    requestDispatcher.forward(req, resp);\n+  public void doGet(HttpServletRequest req, HttpServletResponse resp) {\n+    try {\n+      RequestDispatcher requestDispatcher = req.getRequestDispatcher(destination);\n+      ClientPropertiesBean reqParams = new ClientPropertiesBean(req);\n+      req.setAttribute(\"properties\", reqParams);\n+      requestDispatcher.forward(req, resp);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Exception occurred GET request processing \", e);\n+    }\n   }\n \n   @Override\n-  public void doPost(HttpServletRequest req, HttpServletResponse resp)\n-          throws ServletException, IOException {\n+  public void doPost(HttpServletRequest req, HttpServletResponse resp) {\n     resp.setContentType(CONTENT_TYPE);\n     try (PrintWriter out = resp.getWriter()) {\n       out.println(msgPartOne + \" Post \" + msgPartTwo);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Exception occurred POST request processing \", e);\n     }\n-\n   }\n \n   @Override\n-  public void doDelete(HttpServletRequest req, HttpServletResponse resp)\n-          throws ServletException, IOException {\n+  public void doDelete(HttpServletRequest req, HttpServletResponse resp) {\n     resp.setContentType(CONTENT_TYPE);\n     try (PrintWriter out = resp.getWriter()) {\n       out.println(msgPartOne + \" Delete \" + msgPartTwo);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Exception occurred DELETE request processing \", e);\n     }\n   }\n \n   @Override\n-  public void doPut(HttpServletRequest req, HttpServletResponse resp)\n-          throws ServletException, IOException {\n+  public void doPut(HttpServletRequest req, HttpServletResponse resp) {\n     resp.setContentType(CONTENT_TYPE);\n     try (PrintWriter out = resp.getWriter()) {\n       out.println(msgPartOne + \" Put \" + msgPartTwo);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Exception occurred PUT request processing \", e);\n     }\n   }\n }",
    "output": "Composite View\n* chore : upgrade the jackson-databind to latest version(2.17.0)\n* refactor: refactor Composite View\n* refactor: remove unnecessary chnges related to this PR\n* fix: checkstyle error in AppServlet.java"
  },
  {
    "input": "diff --git a/thread-local-storage/src/test/java/ThreadLocalTest.java b/thread-local-storage/src/test/java/ThreadLocalTest.java\n--- a/thread-local-storage/src/test/java/ThreadLocalTest.java\n+++ b/thread-local-storage/src/test/java/ThreadLocalTest.java\n@@ -57,15 +57,15 @@ public void withoutThreadLocal() throws InterruptedException {\n         int threadSize = 2;\n         ExecutorService executor = Executors.newFixedThreadPool(threadSize);\n \n-        WithoutThreadLocal threadLocal = new WithoutThreadLocal(initialValue);\n         for (int i = 0; i < threadSize; i++) {\n-            executor.submit(threadLocal);\n+          //Create independent thread\n+          WithoutThreadLocal threadLocal = new WithoutThreadLocal(initialValue);\n+          executor.submit(threadLocal);\n         }\n         executor.awaitTermination(3, TimeUnit.SECONDS);\n-\n         List<String> lines = outContent.toString().lines().toList();\n-        //Matches only first thread, the second has changed by first thread value\n-        Assertions.assertFalse(lines.stream()\n+\n+        Assertions.assertTrue(lines.stream()\n                 .allMatch(line -> line.endsWith(String.valueOf(initialValue))));\n     }\n ",
    "output": "Thread local storage test change\n* Updated the imports in code of the single table inheritance pattern for Spring Boot 3.x\nChange javax library to jakarta\n* add pom.xml\n* Updated the imports in code of the healthcheck pattern for SpringBoot 3.x\nChange javax library to jakarta and update maven dependency versions\n* change order of imports to pass Checkstyle violations\n* change import order to pass lexicographical order test\n* change import order to pass CustomImportOrder warning\n* Updated the maven imports of layers pattern for SpringBoot 3.2.4\n* remove unused maven import\n* Updated the maven imports of api-gateway pattern for SpringBoot 3.2.4\n* Flaky test in Thread Local Storage\n* Rollback testing changes\n* Flaky test in Thread Local Storage\nCreate independent threadLocal to make values unsharable and unchangable by other thread\n* rollback branch conflict"
  },
  {
    "input": "diff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n@@ -26,7 +26,7 @@\n \n import static java.util.Objects.requireNonNullElse;\n \n-import javax.annotation.Resource;\n+import jakarta.annotation.Resource;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n\ndiff --git a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n--- a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n@@ -24,7 +24,7 @@\n  */\n package com.iluwatar.api.gateway;\n \n-import javax.annotation.Resource;\n+import jakarta.annotation.Resource;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RestController;\n ",
    "output": "Aggregatormicroservice patterns spring version up\n* Updated the imports in code of the single table inheritance pattern for Spring Boot 3.x\nChange javax library to jakarta\n* add pom.xml\n* Updated the imports in code of the healthcheck pattern for SpringBoot 3.x\nChange javax library to jakarta and update maven dependency versions\n* change order of imports to pass Checkstyle violations\n* change import order to pass lexicographical order test\n* change import order to pass CustomImportOrder warning\n* Updated the maven imports of layers pattern for SpringBoot 3.2.4\n* remove unused maven import\n* Updated the maven imports of api-gateway pattern for SpringBoot 3.2.4\n* Updated the maven imports of Aggregator Microservices pattern for SpringBoot 3.2.4"
  },
  {
    "input": "diff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n@@ -36,41 +36,67 @@\n  */\n public abstract class AbstractDocument implements Document {\n \n-  private final Map<String, Object> properties;\n+  private final Map<String, Object> documentProperties;\n \n   protected AbstractDocument(Map<String, Object> properties) {\n     Objects.requireNonNull(properties, \"properties map is required\");\n-    this.properties = properties;\n+    this.documentProperties = properties;\n   }\n \n   @Override\n   public Void put(String key, Object value) {\n-    properties.put(key, value);\n+    documentProperties.put(key, value);\n     return null;\n   }\n \n   @Override\n   public Object get(String key) {\n-    return properties.get(key);\n+    return documentProperties.get(key);\n   }\n \n   @Override\n-  public <T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor) {\n+  public <T> Stream<T> children(String key, Function<Map<String, Object>, T> childConstructor) {\n     return Stream.ofNullable(get(key))\n-        .filter(Objects::nonNull)\n-        .map(el -> (List<Map<String, Object>>) el)\n-        .findAny()\n-        .stream()\n-        .flatMap(Collection::stream)\n-        .map(constructor);\n+            .filter(Objects::nonNull)\n+            .map(el -> (List<Map<String, Object>>) el)\n+            .findAny()\n+            .stream()\n+            .flatMap(Collection::stream)\n+            .map(childConstructor);\n   }\n \n   @Override\n   public String toString() {\n+    return buildStringRepresentation();\n+  }\n+\n+  private String buildStringRepresentation() {\n     var builder = new StringBuilder();\n     builder.append(getClass().getName()).append(\"[\");\n-    properties.forEach((key, value) -> builder.append(\"[\").append(key).append(\" : \").append(value)\n-        .append(\"]\"));\n+\n+    // Explaining variable for document properties map\n+    Map<String, Object> documentProperties = this.documentProperties;\n+\n+    // Explaining variable for the size of document properties map\n+    int numProperties = documentProperties.size();\n+\n+    // Explaining variable for tracking the current property index\n+    int currentPropertyIndex = 0;\n+\n+    // Iterate over document properties map\n+    for (Map.Entry<String, Object> entry : documentProperties.entrySet()) {\n+      String key = entry.getKey();\n+      Object value = entry.getValue();\n+\n+      // Append key-value pair\n+      builder.append(\"[\").append(key).append(\" : \").append(value).append(\"]\");\n+\n+      // Add comma if not last property\n+      if (++currentPropertyIndex < numProperties) {\n+        builder.append(\", \");\n+      }\n+    }\n+\n     builder.append(\"]\");\n     return builder.toString();\n   }\n\ndiff --git a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n--- a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n+++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n@@ -80,4 +80,46 @@ void shouldIncludePropsInToString() {\n     assertTrue(document.toString().contains(VALUE));\n   }\n \n+  @Test\n+  void shouldHandleExceptionDuringConstruction() {\n+    Map<String, Object> invalidProperties = null; // Invalid properties, causing NullPointerException\n+\n+    // Throw null pointer exception\n+    assertThrows(NullPointerException.class, () -> {\n+      // Attempt to construct a document with invalid properties\n+      new DocumentImplementation(invalidProperties);\n+    });\n+  }\n+\n+  @Test\n+  void shouldPutAndGetNestedDocument() {\n+    // Creating a nested document\n+    DocumentImplementation nestedDocument = new DocumentImplementation(new HashMap<>());\n+    nestedDocument.put(\"nestedKey\", \"nestedValue\");\n+\n+\n+    document.put(\"nested\", nestedDocument);\n+\n+    // Retrieving the nested document\n+    DocumentImplementation retrievedNestedDocument = (DocumentImplementation) document.get(\"nested\");\n+\n+    assertNotNull(retrievedNestedDocument);\n+    assertEquals(\"nestedValue\", retrievedNestedDocument.get(\"nestedKey\"));\n+  }\n+\n+  @Test\n+  void shouldUpdateExistingValue() {\n+    // Arrange\n+    final String key = \"key\";\n+    final String originalValue = \"originalValue\";\n+    final String updatedValue = \"updatedValue\";\n+\n+    document.put(key, originalValue);\n+\n+    // Updating the value\n+    document.put(key, updatedValue);\n+\n+    //Verifying that the updated value is retrieved correctly\n+    assertEquals(updatedValue, document.get(key));\n+  }\n }",
    "output": "Change to make Abstract-Document and Adapter better. * Added new test case for error handling * Added new test cases for error handling * Refactored Abstract Document * Changes updated"
  },
  {
    "input": "diff --git a/combinator/src/test/java/com/iluwatar/combinator/FinderTest.java b/combinator/src/test/java/com/iluwatar/combinator/FinderTest.java\n--- a/combinator/src/test/java/com/iluwatar/combinator/FinderTest.java\n+++ b/combinator/src/test/java/com/iluwatar/combinator/FinderTest.java\n@@ -22,6 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package com.iluwatar.combinator;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,12 +34,12 @@ class FinderTest {\n   @Test\n   void contains() {\n     var example = \"\"\"\n-                the first one \n-                the second one\\s\n-                \"\"\";\n+        the first one\n+        the second one\\s\n+        \"\"\";\n \n     var result = Finder.contains(\"second\").find(example);\n     assertEquals(1, result.size());\n-    assertEquals( \"the second one \", result.get(0));\n+    assertEquals(\"the second one \", result.get(0));\n   }\n }\n\ndiff --git a/combinator/src/test/java/com/iluwatar/combinator/FindersTest.java b/combinator/src/test/java/com/iluwatar/combinator/FindersTest.java\n--- a/combinator/src/test/java/com/iluwatar/combinator/FindersTest.java\n+++ b/combinator/src/test/java/com/iluwatar/combinator/FindersTest.java\n@@ -22,6 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package com.iluwatar.combinator;\n \n import static com.iluwatar.combinator.Finders.advancedFinder;\n@@ -38,48 +39,47 @@ class FindersTest {\n   void advancedFinderTest() {\n     var res = advancedFinder(\"it was\", \"kingdom\", \"sea\").find(text());\n     assertEquals(1, res.size());\n-    assertEquals( \"It was many and many a year ago,\", res.get(0));\n+    assertEquals(\"It was many and many a year ago,\", res.get(0));\n   }\n \n   @Test\n   void filteredFinderTest() {\n     var res = filteredFinder(\" was \", \"many\", \"child\").find(text());\n     assertEquals(1, res.size());\n-    assertEquals( \"But we loved with a love that was more than love-\", res.get(0));\n+    assertEquals(\"But we loved with a love that was more than love-\", res.get(0));\n   }\n \n   @Test\n   void specializedFinderTest() {\n     var res = specializedFinder(\"love\", \"heaven\").find(text());\n     assertEquals(1, res.size());\n-    assertEquals( \"With a love that the winged seraphs of heaven\", res.get(0));\n+    assertEquals(\"With a love that the winged seraphs of heaven\", res.get(0));\n   }\n \n   @Test\n   void expandedFinderTest() {\n     var res = expandedFinder(\"It was\", \"kingdom\").find(text());\n     assertEquals(3, res.size());\n-    assertEquals( \"It was many and many a year ago,\", res.get(0));\n-    assertEquals( \"In a kingdom by the sea,\", res.get(1));\n-    assertEquals( \"In this kingdom by the sea;\", res.get(2));\n+    assertEquals(\"It was many and many a year ago,\", res.get(0));\n+    assertEquals(\"In a kingdom by the sea,\", res.get(1));\n+    assertEquals(\"In this kingdom by the sea;\", res.get(2));\n   }\n \n \n   private String text() {\n-    return\n-            \"\"\"\n-                    It was many and many a year ago,\n-                    In a kingdom by the sea,\n-                    That a maiden there lived whom you may know\n-                    By the name of ANNABEL LEE;\n-                    And this maiden she lived with no other thought\n-                    Than to love and be loved by me.\n-                    I was a child and she was a child,\n-                    In this kingdom by the sea;\n-                    But we loved with a love that was more than love-\n-                    I and my Annabel Lee;\n-                    With a love that the winged seraphs of heaven\n-                    Coveted her and me.\"\"\";\n+    return \"\"\"\n+        It was many and many a year ago,\n+        In a kingdom by the sea,\n+        That a maiden there lived whom you may know\n+        By the name of ANNABEL LEE;\n+        And this maiden she lived with no other thought\n+        Than to love and be loved by me.\n+        I was a child and she was a child,\n+        In this kingdom by the sea;\n+        But we loved with a love that was more than love-\n+        I and my Annabel Lee;\n+        With a love that the winged seraphs of heaven\n+        Coveted her and me.\"\"\";\n   }\n \n }",
    "output": "Explanation for combinator"
  },
  {
    "input": "diff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java\n@@ -22,22 +22,11 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.collectionpipeline;\n \n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n+package com.iluwatar.collectionpipeline;\n \n /**\n  * A Car class that has the properties of make, model, year and category.\n  */\n-@Getter\n-@EqualsAndHashCode\n-@RequiredArgsConstructor\n-public class Car {\n-  private final String make;\n-  private final String model;\n-  private final int year;\n-  private final Category category;\n-\n-}\n\\ No newline at end of file\n+public record Car(String make, String model, int year, Category category) {\n+}\n\ndiff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/FunctionalProgramming.java\n@@ -22,6 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package com.iluwatar.collectionpipeline;\n \n import java.util.Comparator;\n@@ -54,9 +55,8 @@ private FunctionalProgramming() {\n    * @return {@link List} of {@link String} representing models built after year 2000\n    */\n   public static List<String> getModelsAfter2000(List<Car> cars) {\n-    return cars.stream().filter(car -> car.getYear() > 2000)\n-        .sorted(Comparator.comparing(Car::getYear))\n-        .map(Car::getModel).toList();\n+    return cars.stream().filter(car -> car.year() > 2000).sorted(Comparator.comparing(Car::year))\n+        .map(Car::model).toList();\n   }\n \n   /**\n@@ -66,7 +66,7 @@ public static List<String> getModelsAfter2000(List<Car> cars) {\n    * @return {@link Map} with category as key and cars belonging to that category as value\n    */\n   public static Map<Category, List<Car>> getGroupingOfCarsByCategory(List<Car> cars) {\n-    return cars.stream().collect(Collectors.groupingBy(Car::getCategory));\n+    return cars.stream().collect(Collectors.groupingBy(Car::category));\n   }\n \n   /**\n@@ -76,8 +76,8 @@ public static Map<Category, List<Car>> getGroupingOfCarsByCategory(List<Car> car\n    * @return {@link List} of {@link Car} to belonging to the group\n    */\n   public static List<Car> getSedanCarsOwnedSortedByDate(List<Person> persons) {\n-    return persons.stream().map(Person::getCars).flatMap(List::stream)\n-        .filter(car -> Category.SEDAN.equals(car.getCategory()))\n-        .sorted(Comparator.comparing(Car::getYear)).toList();\n+    return persons.stream().map(Person::cars).flatMap(List::stream)\n+        .filter(car -> Category.SEDAN.equals(car.category()))\n+        .sorted(Comparator.comparing(Car::year)).toList();\n   }\n }\n\ndiff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java\n@@ -61,21 +61,21 @@ public static List<String> getModelsAfter2000(List<Car> cars) {\n     List<Car> carsSortedByYear = new ArrayList<>();\n \n     for (Car car : cars) {\n-      if (car.getYear() > 2000) {\n+      if (car.year() > 2000) {\n         carsSortedByYear.add(car);\n       }\n     }\n \n     Collections.sort(carsSortedByYear, new Comparator<Car>() {\n       @Override\n       public int compare(Car car1, Car car2) {\n-        return car1.getYear() - car2.getYear();\n+        return car1.year() - car2.year();\n       }\n     });\n \n     List<String> models = new ArrayList<>();\n     for (Car car : carsSortedByYear) {\n-      models.add(car.getModel());\n+      models.add(car.model());\n     }\n \n     return models;\n@@ -90,12 +90,12 @@ public int compare(Car car1, Car car2) {\n   public static Map<Category, List<Car>> getGroupingOfCarsByCategory(List<Car> cars) {\n     Map<Category, List<Car>> groupingByCategory = new HashMap<>();\n     for (Car car : cars) {\n-      if (groupingByCategory.containsKey(car.getCategory())) {\n-        groupingByCategory.get(car.getCategory()).add(car);\n+      if (groupingByCategory.containsKey(car.category())) {\n+        groupingByCategory.get(car.category()).add(car);\n       } else {\n         List<Car> categoryCars = new ArrayList<>();\n         categoryCars.add(car);\n-        groupingByCategory.put(car.getCategory(), categoryCars);\n+        groupingByCategory.put(car.category(), categoryCars);\n       }\n     }\n     return groupingByCategory;\n@@ -111,20 +111,20 @@ public static Map<Category, List<Car>> getGroupingOfCarsByCategory(List<Car> car\n   public static List<Car> getSedanCarsOwnedSortedByDate(List<Person> persons) {\n     List<Car> cars = new ArrayList<>();\n     for (Person person : persons) {\n-      cars.addAll(person.getCars());\n+      cars.addAll(person.cars());\n     }\n \n     List<Car> sedanCars = new ArrayList<>();\n     for (Car car : cars) {\n-      if (Category.SEDAN.equals(car.getCategory())) {\n+      if (Category.SEDAN.equals(car.category())) {\n         sedanCars.add(car);\n       }\n     }\n \n     sedanCars.sort(new Comparator<Car>() {\n       @Override\n       public int compare(Car o1, Car o2) {\n-        return o1.getYear() - o2.getYear();\n+        return o1.year() - o2.year();\n       }\n     });\n \n\ndiff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java\n@@ -25,16 +25,8 @@\n package com.iluwatar.collectionpipeline;\n \n import java.util.List;\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n \n /**\n  * A Person class that has the list of cars that the person owns and use.\n  */\n-@Getter\n-@RequiredArgsConstructor\n-public class Person {\n-\n-  private final List<Car> cars;\n-\n-}\n\\ No newline at end of file\n+public record Person(List<Car> cars) {}",
    "output": "Collection pipeline explanation\n* collection pipeline docs + refactoring\n* restore imperative programming code"
  },
  {
    "input": "diff --git a/collecting-parameter/src/test/java/com/iluwatar/collectingparameter/PrinterQueueTest.java b/collecting-parameter/src/test/java/com/iluwatar/collectingparameter/PrinterQueueTest.java\n--- a/collecting-parameter/src/test/java/com/iluwatar/collectingparameter/PrinterQueueTest.java\n+++ b/collecting-parameter/src/test/java/com/iluwatar/collectingparameter/PrinterQueueTest.java\n@@ -27,8 +27,6 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.Timeout;\n-import java.util.LinkedList;\n-import java.util.Queue;\n \n import static org.junit.jupiter.api.Assertions.*;\n ",
    "output": "Collecting parameter docs + formatting"
  },
  {
    "input": "diff --git a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n--- a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n+++ b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n@@ -28,11 +28,13 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import com.github.stefanbirkner.systemlambda.Statement;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n /**\n  * GroundDive unit tests.\n  */\n+@Disabled\n class GroundDiveTest {\n \n   @Test\n\ndiff --git a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n--- a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n+++ b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n@@ -28,11 +28,13 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import com.github.stefanbirkner.systemlambda.Statement;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n /**\n  * SkyLaunch unit tests.\n  */\n+@Disabled\n class SkyLaunchTest {\n \n   @Test",
    "output": "Skip failing tests"
  },
  {
    "input": "diff --git a/health-check/src/main/java/com/iluwatar/health/check/AsynchronousHealthChecker.java b/health-check/src/main/java/com/iluwatar/health/check/AsynchronousHealthChecker.java\n--- a/health-check/src/main/java/com/iluwatar/health/check/AsynchronousHealthChecker.java\n+++ b/health-check/src/main/java/com/iluwatar/health/check/AsynchronousHealthChecker.java\n@@ -1,13 +1,13 @@\n package com.iluwatar.health.check;\n \n+import jakarta.annotation.PreDestroy;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionException;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.function.Supplier;\n-import javax.annotation.PreDestroy;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.actuate.health.Health;\n\ndiff --git a/health-check/src/main/java/com/iluwatar/health/check/CpuHealthIndicator.java b/health-check/src/main/java/com/iluwatar/health/check/CpuHealthIndicator.java\n--- a/health-check/src/main/java/com/iluwatar/health/check/CpuHealthIndicator.java\n+++ b/health-check/src/main/java/com/iluwatar/health/check/CpuHealthIndicator.java\n@@ -1,11 +1,11 @@\n package com.iluwatar.health.check;\n \n+import jakarta.annotation.PostConstruct;\n import java.lang.management.ManagementFactory;\n import java.lang.management.OperatingSystemMXBean;\n import java.time.Instant;\n import java.util.HashMap;\n import java.util.Map;\n-import javax.annotation.PostConstruct;\n import lombok.Getter;\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n\ndiff --git a/health-check/src/main/java/com/iluwatar/health/check/HealthCheck.java b/health-check/src/main/java/com/iluwatar/health/check/HealthCheck.java\n--- a/health-check/src/main/java/com/iluwatar/health/check/HealthCheck.java\n+++ b/health-check/src/main/java/com/iluwatar/health/check/HealthCheck.java\n@@ -1,10 +1,10 @@\n package com.iluwatar.health.check;\n \n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n+import jakarta.persistence.Column;\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.GenerationType;\n+import jakarta.persistence.Id;\n import lombok.Data;\n \n /**\n\ndiff --git a/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java b/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java\n--- a/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java\n+++ b/health-check/src/main/java/com/iluwatar/health/check/HealthCheckRepository.java\n@@ -1,8 +1,8 @@\n package com.iluwatar.health.check;\n \n-import javax.persistence.EntityManager;\n-import javax.persistence.PersistenceContext;\n-import javax.transaction.Transactional;\n+import jakarta.persistence.EntityManager;\n+import jakarta.persistence.PersistenceContext;\n+import jakarta.transaction.Transactional;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.stereotype.Repository;\n \n\ndiff --git a/health-check/src/test/java/HealthCheckRepositoryTest.java b/health-check/src/test/java/HealthCheckRepositoryTest.java\n--- a/health-check/src/test/java/HealthCheckRepositoryTest.java\n+++ b/health-check/src/test/java/HealthCheckRepositoryTest.java\n@@ -3,8 +3,8 @@\n \n import com.iluwatar.health.check.HealthCheck;\n import com.iluwatar.health.check.HealthCheckRepository;\n-import javax.persistence.EntityManager;\n-import javax.persistence.Query;\n+import jakarta.persistence.EntityManager;\n+import jakarta.persistence.Query;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;",
    "output": "Upgrade the imports in code of the healthcheck pattern for SpringBoot 3.x * Updated the imports in code of the single table inheritance pattern for Spring Boot 3.x Change javax library to jakarta * add pom.xml * Updated the imports in code of the healthcheck pattern for SpringBoot 3.x Change javax library to jakarta and update maven dependency versions * change order of imports to pass Checkstyle violations * change import order to pass lexicographical order test * change import order to pass CustomImportOrder warning"
  },
  {
    "input": "diff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/Car.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/Car.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/Car.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/Car.java\n@@ -1,7 +1,7 @@\n package com.iluwatar.entity;\n \n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n+import jakarta.persistence.DiscriminatorValue;\n+import jakarta.persistence.Entity;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.NoArgsConstructor;\n\ndiff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/Freighter.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/Freighter.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/Freighter.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/Freighter.java\n@@ -1,7 +1,7 @@\n package com.iluwatar.entity;\n \n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n+import jakarta.persistence.DiscriminatorValue;\n+import jakarta.persistence.Entity;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.NoArgsConstructor;\n\ndiff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/Train.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/Train.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/Train.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/Train.java\n@@ -1,7 +1,7 @@\n package com.iluwatar.entity;\n \n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n+import jakarta.persistence.DiscriminatorValue;\n+import jakarta.persistence.Entity;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.NoArgsConstructor;\n\ndiff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/Truck.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/Truck.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/Truck.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/Truck.java\n@@ -1,7 +1,7 @@\n package com.iluwatar.entity;\n \n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n+import jakarta.persistence.DiscriminatorValue;\n+import jakarta.persistence.Entity;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n \n\ndiff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/Vehicle.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/Vehicle.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/Vehicle.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/Vehicle.java\n@@ -1,12 +1,12 @@\n package com.iluwatar.entity;\n \n-import javax.persistence.DiscriminatorColumn;\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.Inheritance;\n-import javax.persistence.InheritanceType;\n+import jakarta.persistence.DiscriminatorColumn;\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.GenerationType;\n+import jakarta.persistence.Id;\n+import jakarta.persistence.Inheritance;\n+import jakarta.persistence.InheritanceType;\n import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;",
    "output": "Upgrade the imports in code of the single table inheritance pattern for SpringBoot 3.x * Updated the imports in code of the single table inheritance pattern for Spring Boot 3.x Change javax library to jakarta * add pom.xml"
  },
  {
    "input": "diff --git a/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/App.java b/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/App.java\n--- a/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/App.java\n+++ b/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/App.java\n@@ -99,7 +99,7 @@ public static void main(String[] args) {\n       LOGGER.info(\"Waiting for delayed service to become responsive\");\n       Thread.sleep(5000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"An error occurred: \", e);\n     }\n     //Check the state of delayed circuit breaker, should be HALF_OPEN\n     LOGGER.info(delayedServiceCircuitBreaker.getState());\n\ndiff --git a/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java b/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java\n--- a/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java\n+++ b/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java\n@@ -39,7 +39,8 @@ public class DefaultCircuitBreaker implements CircuitBreaker {\n   int failureCount;\n   private final int failureThreshold;\n   private State state;\n-  private final long futureTime = 1000L * 1000 * 1000 * 1000;\n+  // Future time offset, in nanoseconds\n+  private final long futureTime = 1_000_000_000_000L;\n \n   /**\n    * Constructor to create an instance of Circuit Breaker.\n\ndiff --git a/circuit-breaker/src/test/java/com/iluwatar/circuitbreaker/AppTest.java b/circuit-breaker/src/test/java/com/iluwatar/circuitbreaker/AppTest.java\n--- a/circuit-breaker/src/test/java/com/iluwatar/circuitbreaker/AppTest.java\n+++ b/circuit-breaker/src/test/java/com/iluwatar/circuitbreaker/AppTest.java\n@@ -54,7 +54,7 @@ class AppTest {\n   private CircuitBreaker quickServiceCircuitBreaker;\n \n   /**\n-   * Setup the circuit breakers and services, where {@link DelayedRemoteService} will be start with\n+   * Set up the circuit breakers and services, where {@link DelayedRemoteService} will be start with\n    * a delay of 4 seconds and a {@link QuickRemoteService} responding healthy. Both services are\n    * wrapped in a {@link DefaultCircuitBreaker} implementation with failure threshold of 1 failure\n    * and retry time period of 2 seconds.\n@@ -104,7 +104,7 @@ void testFailure_HalfOpenStateTransition() {\n       LOGGER.info(\"Waiting 2s for delayed service to become responsive\");\n       Thread.sleep(2000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"An error occurred: \", e);\n     }\n     //After 2 seconds, the circuit breaker should move to \"HALF_OPEN\" state and retry fetching response from service again\n     assertEquals(\"HALF_OPEN\", delayedServiceCircuitBreaker.getState());\n@@ -123,7 +123,7 @@ void testRecovery_ClosedStateTransition() {\n       LOGGER.info(\"Waiting 4s for delayed service to become responsive\");\n       Thread.sleep(4000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"An error occurred: \", e);\n     }\n     //As retry period is 2 seconds (<4 seconds of wait), hence the circuit breaker should be back in HALF_OPEN state.\n     assertEquals(\"HALF_OPEN\", delayedServiceCircuitBreaker.getState());",
    "output": "Improve Circuit Breaker docs"
  },
  {
    "input": "diff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java\n@@ -25,10 +25,12 @@\n package com.iluwatar.chain;\n \n import java.util.Objects;\n+import lombok.Getter;\n \n /**\n  * Request.\n  */\n+@Getter\n public class Request {\n \n   /**\n@@ -59,41 +61,13 @@ public Request(final RequestType requestType, final String requestDescription) {\n     this.requestDescription = Objects.requireNonNull(requestDescription);\n   }\n \n-  /**\n-   * Get a description of the request.\n-   *\n-   * @return A human readable description of the request\n-   */\n-  public String getRequestDescription() {\n-    return requestDescription;\n-  }\n-\n-  /**\n-   * Get the type of this request, used by each person in the chain of command to see if they should\n-   * or can handle this particular request.\n-   *\n-   * @return The request type\n-   */\n-  public RequestType getRequestType() {\n-    return requestType;\n-  }\n-\n   /**\n    * Mark the request as handled.\n    */\n   public void markHandled() {\n     this.handled = true;\n   }\n \n-  /**\n-   * Indicates if this request is handled or not.\n-   *\n-   * @return <tt>true</tt> when the request is handled, <tt>false</tt> if not\n-   */\n-  public boolean isHandled() {\n-    return this.handled;\n-  }\n-\n   @Override\n   public String toString() {\n     return getRequestDescription();",
    "output": "Improve Chain of Responsibility docs"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/repository/Person.java b/repository/src/main/java/com/iluwatar/repository/Person.java\n--- a/repository/src/main/java/com/iluwatar/repository/Person.java\n+++ b/repository/src/main/java/com/iluwatar/repository/Person.java\n@@ -24,9 +24,9 @@\n  */\n package com.iluwatar.repository;\n \n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.Id;\n+import jakarta.persistence.Entity;\n+import jakarta.persistence.GeneratedValue;\n+import jakarta.persistence.Id;\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n\ndiff --git a/repository/src/main/java/com/iluwatar/repository/PersonSpecifications.java b/repository/src/main/java/com/iluwatar/repository/PersonSpecifications.java\n--- a/repository/src/main/java/com/iluwatar/repository/PersonSpecifications.java\n+++ b/repository/src/main/java/com/iluwatar/repository/PersonSpecifications.java\n@@ -24,10 +24,10 @@\n  */\n package com.iluwatar.repository;\n \n-import javax.persistence.criteria.CriteriaBuilder;\n-import javax.persistence.criteria.CriteriaQuery;\n-import javax.persistence.criteria.Predicate;\n-import javax.persistence.criteria.Root;\n+import jakarta.persistence.criteria.CriteriaBuilder;\n+import jakarta.persistence.criteria.CriteriaQuery;\n+import jakarta.persistence.criteria.Predicate;\n+import jakarta.persistence.criteria.Root;\n import org.springframework.data.jpa.domain.Specification;\n \n /**\n\ndiff --git a/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java b/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\n--- a/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\n+++ b/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\n@@ -29,7 +29,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n-import javax.annotation.Resource;\n+import jakarta.annotation.Resource;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n\ndiff --git a/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java b/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\n--- a/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\n+++ b/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\n@@ -29,7 +29,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n-import javax.annotation.Resource;\n+import jakarta.annotation.Resource;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;",
    "output": "Upgrade Repository pattern to Spring Boot 3.x - updated dependencies in pom and imports in code\nCo-authored-by: leiferksn <lefierskn@zoho.com>"
  },
  {
    "input": "diff --git a/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java b/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java\n--- a/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java\n+++ b/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java\n@@ -25,7 +25,6 @@\n package com.iluwatar.business.delegate;\n \n import org.junit.jupiter.api.Test;\n-import java.io.IOException;\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n ",
    "output": "Improve Business Delegate documentation"
  },
  {
    "input": "diff --git a/balking/src/main/java/com/iluwatar/balking/WashingMachine.java b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n--- a/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n+++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.balking;\n \n import java.util.concurrent.TimeUnit;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -34,6 +35,8 @@\n public class WashingMachine {\n \n   private final DelayProvider delayProvider;\n+\n+  @Getter\n   private WashingMachineState washingMachineState;\n \n   /**\n@@ -60,10 +63,6 @@ public WashingMachine(DelayProvider delayProvider) {\n     this.washingMachineState = WashingMachineState.ENABLED;\n   }\n \n-  public WashingMachineState getWashingMachineState() {\n-    return washingMachineState;\n-  }\n-\n   /**\n    * Method responsible for washing if the object is in appropriate state.\n    */\n@@ -83,7 +82,7 @@ public void wash() {\n   }\n \n   /**\n-   * Method responsible of ending the washing by changing machine state.\n+   * Method is responsible for ending the washing by changing machine state.\n    */\n   public synchronized void endOfWashing() {\n     washingMachineState = WashingMachineState.ENABLED;",
    "output": "Improve Balking pattern docs"
  },
  {
    "input": "diff --git a/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java\n--- a/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java\n+++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java\n@@ -75,7 +75,7 @@ void setUp() {\n    * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)}\n    */\n   @Test\n-  void testSuccessfulTaskWithoutCallback() throws Exception {\n+  void testSuccessfulTaskWithoutCallback() {\n     assertTimeout(ofMillis(3000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -101,7 +101,7 @@ void testSuccessfulTaskWithoutCallback() throws Exception {\n    * AsyncCallback)}\n    */\n   @Test\n-  void testSuccessfulTaskWithCallback() throws Exception {\n+  void testSuccessfulTaskWithCallback() {\n     assertTimeout(ofMillis(3000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -134,7 +134,7 @@ void testSuccessfulTaskWithCallback() throws Exception {\n    * task takes a while to execute\n    */\n   @Test\n-  void testLongRunningTaskWithoutCallback() throws Exception {\n+  void testLongRunningTaskWithoutCallback() {\n     assertTimeout(ofMillis(5000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -174,7 +174,7 @@ void testLongRunningTaskWithoutCallback() throws Exception {\n    * AsyncCallback)} when a task takes a while to execute\n    */\n   @Test\n-  void testLongRunningTaskWithCallback() throws Exception {\n+  void testLongRunningTaskWithCallback() {\n     assertTimeout(ofMillis(5000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -222,7 +222,7 @@ void testLongRunningTaskWithCallback() throws Exception {\n    * ThreadAsyncExecutor#endProcess(AsyncResult)}\n    */\n   @Test\n-  void testEndProcess() throws Exception {\n+  void testEndProcess() {\n     assertTimeout(ofMillis(5000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -259,7 +259,7 @@ void testEndProcess() throws Exception {\n    * the callable is 'null'\n    */\n   @Test\n-  void testNullTask() throws Exception {\n+  void testNullTask() {\n     assertTimeout(ofMillis(3000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -286,7 +286,7 @@ void testNullTask() throws Exception {\n    * AsyncCallback)} when the callable is 'null', but the asynchronous callback is provided\n    */\n   @Test\n-  void testNullTaskWithCallback() throws Exception {\n+  void testNullTaskWithCallback() {\n     assertTimeout(ofMillis(3000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();\n@@ -322,7 +322,7 @@ void testNullTaskWithCallback() throws Exception {\n    * AsyncCallback)} when both the callable and the asynchronous callback are 'null'\n    */\n   @Test\n-  void testNullTaskWithNullCallback() throws Exception {\n+  void testNullTaskWithNullCallback() {\n     assertTimeout(ofMillis(3000), () -> {\n       // Instantiate a new executor and start a new 'null' task ...\n       final var executor = new ThreadAsyncExecutor();",
    "output": "Upgrade Async Method Invocation documentation"
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java\n@@ -24,6 +24,8 @@\n  */\n package com.iluwatar.ambassador;\n \n+import lombok.Getter;\n+\n /**\n  * Holds information regarding the status of the Remote Service.\n  *\n@@ -36,13 +38,10 @@\n public enum RemoteServiceStatus {\n   FAILURE(-1);\n \n+  @Getter\n   private final long remoteServiceStatusValue;\n \n   RemoteServiceStatus(long remoteServiceStatusValue) {\n     this.remoteServiceStatusValue = remoteServiceStatusValue;\n   }\n-\n-  public long getRemoteServiceStatusValue() {\n-    return remoteServiceStatusValue;\n-  }\n }",
    "output": "Improve Ambassador pattern description"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n@@ -162,11 +162,7 @@ public void write(Object data, SelectionKey key) {\n     var pendingWrites = this.channelToPendingWrites.get(key.channel());\n     if (pendingWrites == null) {\n       synchronized (this.channelToPendingWrites) {\n-        pendingWrites = this.channelToPendingWrites.get(key.channel());\n-        if (pendingWrites == null) {\n-          pendingWrites = new ConcurrentLinkedQueue<>();\n-          this.channelToPendingWrites.put(key.channel(), pendingWrites);\n-        }\n+        pendingWrites = this.channelToPendingWrites.computeIfAbsent(key.channel(), k -> new ConcurrentLinkedQueue<>());\n       }\n     }\n     pendingWrites.add(data);\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n@@ -37,7 +37,7 @@\n \n /**\n  * This class acts as Synchronous Event De-multiplexer and Initiation Dispatcher of Reactor pattern.\n- * Multiple handles i.e. {@link AbstractNioChannel}s can be registered to the reactor and it blocks\n+ * Multiple handles i.e. {@link AbstractNioChannel}s can be registered to the reactor, and it blocks\n  * for events from all these handles. Whenever an event occurs on any of the registered handles, it\n  * synchronously de-multiplexes the event which can be any of read, write or accept, and dispatches\n  * the event to the appropriate {@link ChannelHandler} using the {@link Dispatcher}.\n@@ -46,7 +46,7 @@\n  * #start()} method. {@link NioReactor} uses {@link Selector} for realizing Synchronous Event\n  * De-multiplexing.\n  *\n- * <p>NOTE: This is one of the ways to implement NIO reactor and it does not take care of all\n+ * <p>NOTE: This is one of the ways to implement NIO reactor, and it does not take care of all\n  * possible edge cases which are required in a real application. This implementation is meant to\n  * demonstrate the fundamental concepts that lie behind Reactor pattern.\n  */\n@@ -212,7 +212,7 @@ private void onChannelAcceptable(SelectionKey key) throws IOException {\n \n   /**\n    * Queues the change of operations request of a channel, which will change the interested\n-   * operations of the channel sometime in future.\n+   * operations of the channel sometime in the future.\n    *\n    * <p>This is a non-blocking method and does not guarantee that the operations have changed when\n    * this method returns.\n@@ -228,7 +228,7 @@ public void changeOps(SelectionKey key, int interestedOps) {\n   /**\n    * A command that changes the interested operations of the key provided.\n    */\n-  class ChangeKeyOpsCommand implements Runnable {\n+  static class ChangeKeyOpsCommand implements Runnable {\n     private final SelectionKey key;\n     private final int interestedOps;\n ",
    "output": "Refactor pattern - Polish Javadoc and Using 'Map.computeIfAbsent' instead of 'if' statement\n* refactor: using computeIfAbsent instead of if check.\n* docs: Polish Javadoc and comments"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.abstractfactory;\n \n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -41,14 +42,11 @@\n  * both concrete implementations to create a king, a castle, and an army.\n  */\n @Slf4j\n+@Getter\n public class App implements Runnable {\n \n   private final Kingdom kingdom = new Kingdom();\n \n-  public Kingdom getKingdom() {\n-    return kingdom;\n-  }\n-\n   /**\n    * Program entry point.\n    *\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n@@ -57,7 +57,6 @@ public static KingdomFactory makeFactory(KingdomType type) {\n       return switch (type) {\n         case ELF -> new ElfKingdomFactory();\n         case ORC -> new OrcKingdomFactory();\n-        default -> throw new IllegalArgumentException(\"KingdomType not supported.\");\n       };\n     }\n   }",
    "output": "Upgrade abstract factory"
  },
  {
    "input": "diff --git a/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n--- a/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n+++ b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n@@ -38,7 +38,7 @@ public void handleRequest(String request) {\n   private Command getCommand(String request) {\n     var commandClass = getCommandClass(request);\n     try {\n-      return (Command) commandClass.newInstance();\n+      return (Command) commandClass.getDeclaredConstructor().newInstance();\n     } catch (Exception e) {\n       throw new ApplicationException(e);\n     }\n\ndiff --git a/role-object/src/main/java/com/iluwatar/roleobject/Role.java b/role-object/src/main/java/com/iluwatar/roleobject/Role.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/Role.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/Role.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.roleobject;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.util.Optional;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -50,8 +51,8 @@ public enum Role {\n   public <T extends CustomerRole> Optional<T> instance() {\n     var typeCst = this.typeCst;\n     try {\n-      return (Optional<T>) Optional.of(typeCst.newInstance());\n-    } catch (InstantiationException | IllegalAccessException e) {\n+      return (Optional<T>) Optional.of(typeCst.getDeclaredConstructor().newInstance());\n+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n       logger.error(\"error creating an object\", e);\n     }\n     return Optional.empty();",
    "output": "Remove deprecated method of newInstance"
  },
  {
    "input": "diff --git a/optimistic-offline-lock/src/main/java/com/iluwatar/api/UpdateService.java b/optimistic-offline-lock/src/main/java/com/iluwatar/api/UpdateService.java\n--- a/optimistic-offline-lock/src/main/java/com/iluwatar/api/UpdateService.java\n+++ b/optimistic-offline-lock/src/main/java/com/iluwatar/api/UpdateService.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar.api;\n+\n+/**\n+ * Service for entity update.\n+ *\n+ * @param <T> target entity\n+ */\n+public interface UpdateService<T> {\n+\n+  /**\n+   * Update entity.\n+   *\n+   * @param obj entity to update\n+   * @param id  primary key\n+   * @return modified entity\n+   */\n+  T doUpdate(T obj, long id);\n+}\n\ndiff --git a/optimistic-offline-lock/src/main/java/com/iluwatar/exception/ApplicationException.java b/optimistic-offline-lock/src/main/java/com/iluwatar/exception/ApplicationException.java\n--- a/optimistic-offline-lock/src/main/java/com/iluwatar/exception/ApplicationException.java\n+++ b/optimistic-offline-lock/src/main/java/com/iluwatar/exception/ApplicationException.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar.exception;\n+\n+/**\n+ * Exception happens in application during business-logic execution.\n+ */\n+public class ApplicationException extends RuntimeException {\n+\n+  /**\n+   * Inherited constructor with exception message.\n+   *\n+   * @param message exception message\n+   */\n+  public ApplicationException(String message) {\n+    super(message);\n+  }\n+}\n\ndiff --git a/optimistic-offline-lock/src/main/java/com/iluwatar/model/Card.java b/optimistic-offline-lock/src/main/java/com/iluwatar/model/Card.java\n--- a/optimistic-offline-lock/src/main/java/com/iluwatar/model/Card.java\n+++ b/optimistic-offline-lock/src/main/java/com/iluwatar/model/Card.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar.model;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Bank card entity.\n+ */\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class Card {\n+\n+  /**\n+   * Primary key.\n+   */\n+  private long id;\n+\n+  /**\n+   * Foreign key points to card's owner.\n+   */\n+  private long personId;\n+\n+  /**\n+   * Sum of money.\n+   */\n+  private float sum;\n+\n+  /**\n+   * Current version of object.\n+   */\n+  private int version;\n+}\n\ndiff --git a/optimistic-offline-lock/src/main/java/com/iluwatar/repository/JpaRepository.java b/optimistic-offline-lock/src/main/java/com/iluwatar/repository/JpaRepository.java\n--- a/optimistic-offline-lock/src/main/java/com/iluwatar/repository/JpaRepository.java\n+++ b/optimistic-offline-lock/src/main/java/com/iluwatar/repository/JpaRepository.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar.repository;\n+\n+/**\n+ * Imitation of Spring's JpaRepository.\n+ *\n+ * @param <T> target database entity\n+ */\n+public interface JpaRepository<T> {\n+\n+  /**\n+   * Get object by it's PK.\n+   *\n+   * @param id primary key\n+   * @return {@link T}\n+   */\n+  T findById(long id);\n+\n+  /**\n+   * Get current object version.\n+   *\n+   * @param id primary key\n+   * @return object's version\n+   */\n+  int getEntityVersionById(long id);\n+\n+  /**\n+   * Update object.\n+   *\n+   * @param obj entity to update\n+   * @return number of modified records\n+   */\n+  int update(T obj);\n+}\n\ndiff --git a/optimistic-offline-lock/src/main/java/com/iluwatar/service/CardUpdateService.java b/optimistic-offline-lock/src/main/java/com/iluwatar/service/CardUpdateService.java\n--- a/optimistic-offline-lock/src/main/java/com/iluwatar/service/CardUpdateService.java\n+++ b/optimistic-offline-lock/src/main/java/com/iluwatar/service/CardUpdateService.java\n@@ -0,0 +1,35 @@\n+package com.iluwatar.service;\n+\n+import com.iluwatar.api.UpdateService;\n+import com.iluwatar.exception.ApplicationException;\n+import com.iluwatar.model.Card;\n+import com.iluwatar.repository.JpaRepository;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Service to update {@link Card} entity.\n+ */\n+@RequiredArgsConstructor\n+public class CardUpdateService implements UpdateService<Card> {\n+\n+  private final JpaRepository<Card> cardJpaRepository;\n+\n+  @Override\n+  public Card doUpdate(Card obj, long id) {\n+    float additionalSum = obj.getSum();\n+    Card cardToUpdate = cardJpaRepository.findById(id);\n+    int initialVersion = cardToUpdate.getVersion();\n+    float resultSum = cardToUpdate.getSum() + additionalSum;\n+    cardToUpdate.setSum(resultSum);\n+    //Maybe more complex business-logic e.g. HTTP-requests and so on\n+\n+    if (initialVersion != cardJpaRepository.getEntityVersionById(id)) {\n+      String exMessage =\n+          String.format(\"Entity with id %s were updated in another transaction\", id);\n+      throw new ApplicationException(exMessage);\n+    }\n+\n+    cardJpaRepository.update(cardToUpdate);\n+    return cardToUpdate;\n+  }\n+}\n\ndiff --git a/optimistic-offline-lock/src/test/java/com/iluwatar/OptimisticLockTest.java b/optimistic-offline-lock/src/test/java/com/iluwatar/OptimisticLockTest.java\n--- a/optimistic-offline-lock/src/test/java/com/iluwatar/OptimisticLockTest.java\n+++ b/optimistic-offline-lock/src/test/java/com/iluwatar/OptimisticLockTest.java\n@@ -0,0 +1,60 @@\n+package com.iluwatar;\n+\n+import com.iluwatar.exception.ApplicationException;\n+import com.iluwatar.model.Card;\n+import com.iluwatar.repository.JpaRepository;\n+import com.iluwatar.service.CardUpdateService;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.eq;\n+\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+public class OptimisticLockTest {\n+\n+  private CardUpdateService cardUpdateService;\n+\n+  private JpaRepository cardRepository;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    cardRepository = Mockito.mock(JpaRepository.class);\n+    cardUpdateService = new CardUpdateService(cardRepository);\n+  }\n+\n+  @Test\n+  public void shouldNotUpdateEntityOnDifferentVersion() {\n+    int initialVersion = 1;\n+    long cardId = 123L;\n+    Card card = Card.builder()\n+        .id(cardId)\n+        .version(initialVersion)\n+        .sum(123f)\n+        .build();\n+    when(cardRepository.findById(eq(cardId))).thenReturn(card);\n+    when(cardRepository.getEntityVersionById(Mockito.eq(cardId))).thenReturn(initialVersion + 1);\n+\n+    Assertions.assertThrows(ApplicationException.class,\n+        () -> cardUpdateService.doUpdate(card, cardId));\n+  }\n+\n+  @Test\n+  public void shouldUpdateOnSameVersion() {\n+    int initialVersion = 1;\n+    long cardId = 123L;\n+    Card card = Card.builder()\n+        .id(cardId)\n+        .version(initialVersion)\n+        .sum(123f)\n+        .build();\n+    when(cardRepository.findById(eq(cardId))).thenReturn(card);\n+    when(cardRepository.getEntityVersionById(Mockito.eq(cardId))).thenReturn(initialVersion);\n+\n+    cardUpdateService.doUpdate(card, cardId);\n+\n+    Mockito.verify(cardRepository).update(Mockito.any());\n+  }\n+}",
    "output": "Add optimistic offline lock"
  },
  {
    "input": "diff --git a/monitor/src/main/java/com/iluwatar/monitor/Bank.java b/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n--- a/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n+++ b/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n@@ -72,19 +72,21 @@ public Bank(int accountNum, int baseAmount) {\n    *\n    * @param accountA - source account\n    * @param accountB - destination account\n-   * @param amount - amount to be transferred\n+   * @param amount   - amount to be transferred\n    */\n   public synchronized void transfer(int accountA, int accountB, int amount) {\n-    if (accounts[accountA] >= amount) {\n+    if (accounts[accountA] >= amount && accountA != accountB) {\n       accounts[accountB] += amount;\n       accounts[accountA] -= amount;\n       if (LOGGER.isDebugEnabled()) {\n         LOGGER.debug(\n-            \"Transferred from account: {} to account: {} , amount: {} , balance: {}\",\n+            \"Transferred from account: {} to account: {} , amount: {} , bank balance at: {}, source account balance: {}, destination account balance: {}\",\n             accountA,\n             accountB,\n             amount,\n-            getBalance());\n+            getBalance(),\n+            getBalance(accountA),\n+            getBalance(accountB));\n       }\n     }\n   }\n@@ -102,6 +104,16 @@ public synchronized int getBalance() {\n     return balance;\n   }\n \n+  /**\n+   * Get the accountNumber balance.\n+   *\n+   * @param accountNumber - accountNumber number\n+   * @return accounts[accountNumber]\n+   */\n+  public synchronized int getBalance(int accountNumber) {\n+    return accounts[accountNumber];\n+  }\n+\n   /**\n    * Get all accounts.\n    *\n\ndiff --git a/monitor/src/main/java/com/iluwatar/monitor/Main.java b/monitor/src/main/java/com/iluwatar/monitor/Main.java\n--- a/monitor/src/main/java/com/iluwatar/monitor/Main.java\n+++ b/monitor/src/main/java/com/iluwatar/monitor/Main.java\n@@ -28,7 +28,6 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executors;\n import lombok.extern.slf4j.Slf4j;\n-\n /**\n  * The Monitor pattern is used in concurrent algorithms to achieve mutual exclusion.\n  *\n@@ -41,6 +40,8 @@\n public class Main {\n \n   private static final int NUMBER_OF_THREADS = 5;\n+  private static final int BASE_AMOUNT = 1000;\n+  private static final int ACCOUNT_NUM = 4;\n \n   /**\n    * Runner to perform a bunch of transfers and handle exception.\n@@ -54,7 +55,7 @@ public static void runner(Bank bank, CountDownLatch latch) {\n       Thread.sleep(random.nextInt(1000));\n       LOGGER.info(\"Start transferring...\");\n       for (int i = 0; i < 1000000; i++) {\n-        bank.transfer(random.nextInt(4), random.nextInt(4), random.nextInt());\n+        bank.transfer(random.nextInt(4), random.nextInt(4), random.nextInt(0, BASE_AMOUNT));\n       }\n       LOGGER.info(\"Finished transferring.\");\n       latch.countDown();\n@@ -70,7 +71,7 @@ public static void runner(Bank bank, CountDownLatch latch) {\n    * @param args command line args\n    */\n   public static void main(String[] args) throws InterruptedException {\n-    var bank = new Bank(4, 1000);\n+    var bank = new Bank(ACCOUNT_NUM, BASE_AMOUNT);\n     var latch = new CountDownLatch(NUMBER_OF_THREADS);\n     var executorService = Executors.newFixedThreadPool(NUMBER_OF_THREADS);\n \n\ndiff --git a/monitor/src/test/java/com/iluwatar/monitor/BankTest.java b/monitor/src/test/java/com/iluwatar/monitor/BankTest.java\n--- a/monitor/src/test/java/com/iluwatar/monitor/BankTest.java\n+++ b/monitor/src/test/java/com/iluwatar/monitor/BankTest.java\n@@ -69,4 +69,11 @@ void TransferMethodHaveToTransferAmountFromAnAccountToOtherAccount() {\n   void BalanceHaveToBeOK() {\n     assertEquals(4000, bank.getBalance());\n   }\n+\n+  @Test\n+  void ReturnBalanceWhenGivenAccountNumber() {\n+    bank.transfer(0, 1, 1000);\n+    assertEquals(0, bank.getBalance(0));\n+    assertEquals(2000, bank.getBalance(1));\n+  }\n }",
    "output": "Refactor monitor patterns example code\n* feat:adjust the interval of amount because it is not reasonable before and add condition when transfer TianLeZhou 9 minutes ago\n* feat:add ReturnBalanceWhenGivenAccountNumber test\n* feat:adjust order of import package"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/MongoBankTest.java\n@@ -1,56 +1,65 @@\n-/*\n- * This project is licensed under the MIT license. Module model-view-viewmodel is using ZK framework licensed under LGPL (see lgpl-3.0.txt).\n- *\n- * The MIT License\n- * Copyright © 2014-2022 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n package com.iluwatar.hexagonal.banking;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-import com.iluwatar.hexagonal.mongo.MongoConnectionPropertiesLoader;\n-import com.mongodb.MongoClient;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import de.flapdoodle.embed.mongo.MongodExecutable;\n+import de.flapdoodle.embed.mongo.MongodProcess;\n+import de.flapdoodle.embed.mongo.MongodStarter;\n+import de.flapdoodle.embed.mongo.config.MongodConfig;\n+import de.flapdoodle.embed.mongo.distribution.Version;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n+import java.util.List;\n+\n /**\n  * Tests for Mongo banking adapter\n  */\n-@Disabled\n class MongoBankTest {\n \n   private static final String TEST_DB = \"lotteryDBTest\";\n   private static final String TEST_ACCOUNTS_COLLECTION = \"testAccounts\";\n+  private static final String TEST_HOST = \"localhost\";\n+  private static final int TEST_PORT = 27017;\n+\n+  private static MongodExecutable mongodExe;\n+  private static MongodProcess mongodProcess;\n+  private static MongoClient mongoClient;\n+  private static MongoDatabase mongoDatabase;\n \n   private MongoBank mongoBank;\n \n+  @BeforeAll\n+  static void setUp() throws Exception {\n+    MongodStarter starter = MongodStarter.getDefaultInstance();\n+    MongodConfig mongodConfig = buildMongoConfig();\n+\n+    mongoClient = buildMongoClient();\n+    mongodExe = starter.prepare(mongodConfig);\n+    mongodProcess = mongodExe.start();\n+    mongoDatabase = mongoClient.getDatabase(TEST_DB);\n+  }\n+\n   @BeforeEach\n   void init() {\n-    MongoConnectionPropertiesLoader.load();\n-    var mongoClient = new MongoClient(System.getProperty(\"mongo-host\"),\n-        Integer.parseInt(System.getProperty(\"mongo-port\")));\n-    mongoClient.dropDatabase(TEST_DB);\n+    System.setProperty(\"mongo-host\", TEST_HOST);\n+    System.setProperty(\"mongo-port\", String.valueOf(TEST_PORT));\n+    mongoDatabase.drop();\n+    mongoBank = new MongoBank(mongoDatabase.getName(), TEST_ACCOUNTS_COLLECTION);\n+  }\n+\n+  @AfterAll\n+  static void tearDown() {\n     mongoClient.close();\n-    mongoBank = new MongoBank(TEST_DB, TEST_ACCOUNTS_COLLECTION);\n+    mongodProcess.stop();\n+    mongodExe.stop();\n   }\n \n   @Test\n@@ -68,4 +77,19 @@ void testFundTransfers() {\n     assertEquals(1, mongoBank.getFunds(\"000-000\"));\n     assertEquals(9, mongoBank.getFunds(\"111-111\"));\n   }\n+\n+  private static MongodConfig buildMongoConfig() {\n+    return MongodConfig.builder()\n+            .version(Version.Main.PRODUCTION)\n+            .net(new de.flapdoodle.embed.mongo.config.Net(TEST_HOST, TEST_PORT, true))\n+            .build();\n+  }\n+\n+  private static MongoClient buildMongoClient() {\n+    return MongoClients.create(\n+            MongoClientSettings.builder()\n+                .applyToClusterSettings(builder -> builder.hosts(List.of(new ServerAddress(TEST_HOST, TEST_PORT))))\n+                .build()\n+    );\n+  }\n }",
    "output": "Issue 2368/fix broken tests\n* fixing typo\n* added embedded mongo db to fix MongoBankTest\n* cleaning up tests\n* added embedded mongo db to fix MongoBankTest\n* cleaning up tests"
  },
  {
    "input": "diff --git a/factory-kit/src/main/java/com/iluwatar/factorykit/App.java b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n--- a/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n+++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n@@ -59,6 +59,6 @@ public static void main(String[] args) {\n     list.add(factory.create(WeaponType.SPEAR));\n     list.add(factory.create(WeaponType.SWORD));\n     list.add(factory.create(WeaponType.BOW));\n-    list.stream().forEach(weapon -> LOGGER.info(\"{}\", weapon.toString()));\n+    list.forEach(weapon -> LOGGER.info(\"{}\", weapon.toString()));\n   }\n }",
    "output": "Use simple forEach."
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -44,9 +44,9 @@ private ThreadSafeLazyLoadedIvoryTower() {\n    * The instance doesn't get created until the method is called for the first time.\n    */\n   public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n-      if (instance == null) {\n-          instance = new ThreadSafeLazyLoadedIvoryTower();\n-      }\n+    if (instance == null) {\n+      instance = new ThreadSafeLazyLoadedIvoryTower();\n+    }\n     return instance;\n   }\n }",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/model-view-viewmodel/src/test/java/com/iluwatar/model/view/viewmodel/BookTest.java b/model-view-viewmodel/src/test/java/com/iluwatar/model/view/viewmodel/BookTest.java\n--- a/model-view-viewmodel/src/test/java/com/iluwatar/model/view/viewmodel/BookTest.java\n+++ b/model-view-viewmodel/src/test/java/com/iluwatar/model/view/viewmodel/BookTest.java\n@@ -24,18 +24,15 @@\n  */\n package com.iluwatar.model.view.viewmodel;\n \n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertThat;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import java.util.List;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import com.google.common.testing.EqualsTester;\n \n class BookTest {\n \n@@ -67,13 +64,13 @@ void testBookModel() {\n   \n   @Test\n   void testEquals() {\n-    new EqualsTester().addEqualityGroup(testBook, testBookTwo).testEquals();\n+    assertEquals(testBook, testBookTwo);\n   }\n \n   @Test\n   void testToString() {\n-    assertThat(testBook.toString(), is(testBookTwo.toString()));\n-    assertThat(testBook.toString(), is(not(testBookThree.toString())));\n+    assertEquals(testBook.toString(), testBookTwo.toString());\n+    assertNotEquals(testBook.toString(), testBookThree.toString());\n   }\n   \n   @Test\n\ndiff --git a/repository/src/main/java/com/iluwatar/repository/PersonRepository.java b/repository/src/main/java/com/iluwatar/repository/PersonRepository.java\n--- a/repository/src/main/java/com/iluwatar/repository/PersonRepository.java\n+++ b/repository/src/main/java/com/iluwatar/repository/PersonRepository.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.repository;\n \n+import java.util.List;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.data.repository.CrudRepository;\n import org.springframework.stereotype.Repository;\n@@ -36,4 +37,6 @@ public interface PersonRepository\n     extends CrudRepository<Person, Long>, JpaSpecificationExecutor<Person> {\n \n   Person findByName(String name);\n+\n+  List<Person> findAll();\n }\n\ndiff --git a/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java b/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\n--- a/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\n+++ b/repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\n@@ -28,7 +28,6 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import com.google.common.collect.Lists;\n import java.util.List;\n import javax.annotation.Resource;\n import org.junit.jupiter.api.AfterEach;\n@@ -66,7 +65,7 @@ void setup() {\n \n   @Test\n   void testFindAll() {\n-    var actuals = Lists.newArrayList(repository.findAll());\n+    var actuals = repository.findAll();\n     assertTrue(actuals.containsAll(persons) && persons.containsAll(actuals));\n   }\n \n\ndiff --git a/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java b/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\n--- a/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\n+++ b/repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\n@@ -28,7 +28,6 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import com.google.common.collect.Lists;\n import java.util.List;\n import javax.annotation.Resource;\n import org.junit.jupiter.api.AfterEach;\n@@ -66,7 +65,7 @@ void setup() {\n \n   @Test\n   void testFindAll() {\n-    var actuals = Lists.newArrayList(repository.findAll());\n+    var actuals = repository.findAll();\n     assertTrue(actuals.containsAll(persons) && persons.containsAll(actuals));\n   }\n \n\ndiff --git a/value-object/src/test/java/com/iluwatar/value/object/HeroStatTest.java b/value-object/src/test/java/com/iluwatar/value/object/HeroStatTest.java\n--- a/value-object/src/test/java/com/iluwatar/value/object/HeroStatTest.java\n+++ b/value-object/src/test/java/com/iluwatar/value/object/HeroStatTest.java\n@@ -24,11 +24,9 @@\n  */\n package com.iluwatar.value.object;\n \n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n-import com.google.common.testing.EqualsTester;\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -47,7 +45,7 @@ class HeroStatTest {\n   void testEquals() {\n     var heroStatA = HeroStat.valueOf(3, 9, 2);\n     var heroStatB = HeroStat.valueOf(3, 9, 2);\n-    new EqualsTester().addEqualityGroup(heroStatA, heroStatB).testEquals();\n+    assertEquals(heroStatA, heroStatB);\n   }\n \n   /**\n@@ -59,9 +57,8 @@ void testToString() {\n     var heroStatA = HeroStat.valueOf(3, 9, 2);\n     var heroStatB = HeroStat.valueOf(3, 9, 2);\n     var heroStatC = HeroStat.valueOf(3, 9, 8);\n-\n-    assertThat(heroStatA.toString(), is(heroStatB.toString()));\n-    assertThat(heroStatA.toString(), is(not(heroStatC.toString())));\n+    assertEquals(heroStatA.toString(), heroStatB.toString());\n+    assertNotEquals(heroStatA.toString(), heroStatC.toString());\n   }\n \n }",
    "output": "Refactor unit tests without depending on Guava\n* Refactor unit tests without depending on Guava\n* Remove redundant casts.\n* Move import up\n* Update repository/src/test/java/com/iluwatar/repository/RepositoryTest.java\nCo-authored-by: Robert Volkmann <20912167+robertvolkmann@users.noreply.github.com>\n* Update repository/src/test/java/com/iluwatar/repository/AnnotationBasedRepositoryTest.java\nCo-authored-by: Robert Volkmann <20912167+robertvolkmann@users.noreply.github.com>\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\nCo-authored-by: Robert Volkmann <20912167+robertvolkmann@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/App.java b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/App.java\n--- a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/App.java\n+++ b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/App.java\n@@ -24,9 +24,7 @@\n  */\n package com.iluwatar.typeobject;\n \n-import java.io.IOException;\n import lombok.extern.slf4j.Slf4j;\n-import org.json.simple.parser.ParseException;\n \n /**\n  * <p>Type object pattern is the pattern we use when the OOP concept of creating a base class and\n@@ -54,7 +52,7 @@ public class App {\n    *\n    * @param args command line args\n    */\n-  public static void main(String[] args) throws IOException, ParseException {\n+  public static void main(String[] args) {\n     var givenTime = 50; //50ms\n     var toWin = 500; //points\n     var pointsWon = 0;\n\ndiff --git a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n--- a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n+++ b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n@@ -24,13 +24,12 @@\n  */\n package com.iluwatar.typeobject;\n \n+import com.google.gson.JsonParseException;\n import com.iluwatar.typeobject.Candy.Type;\n \n-import java.io.IOException;\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.List;\n-import org.json.simple.parser.ParseException;\n \n /**\n  * The CellPool class allows the reuse of crushed cells instead of creation of new cells each time.\n@@ -80,7 +79,7 @@ void addNewCell(Cell c) {\n     pointer++;\n   }\n \n-  Candy[] assignRandomCandytypes() throws IOException, ParseException {\n+  Candy[] assignRandomCandytypes() throws JsonParseException {\n     var jp = new JsonParser();\n     jp.parse();\n     var randomCode = new Candy[jp.candies.size() - 2]; //exclude generic types 'fruit' and 'candy'\n\ndiff --git a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/JsonParser.java b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/JsonParser.java\n--- a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/JsonParser.java\n+++ b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/JsonParser.java\n@@ -24,17 +24,13 @@\n  */\n package com.iluwatar.typeobject;\n \n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n import com.iluwatar.typeobject.Candy.Type;\n-import java.io.File;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.util.Hashtable;\n-import java.util.List;\n \n-import org.json.simple.JSONArray;\n-import org.json.simple.JSONObject;\n-import org.json.simple.parser.JSONParser;\n-import org.json.simple.parser.ParseException;\n+import java.io.InputStreamReader;\n+import java.util.Hashtable;\n \n /**\n  * The JsonParser class helps parse the json file candy.json to get all the different candies.\n@@ -47,23 +43,21 @@ public class JsonParser {\n     this.candies = new Hashtable<>();\n   }\n \n-  void parse() throws IOException, ParseException {\n-    var parser = new JSONParser();\n-    var workingDirectory = new File(\"\").getAbsolutePath();\n-    var filePath = List.of(\"src\", \"main\", \"java\", \"com\", \"iluwatar\", \"typeobject\", \"candy.json\");\n-    var absolutePath = workingDirectory + File.separator + String.join(File.separator, filePath);\n-    var jo = (JSONObject) parser.parse(new FileReader(absolutePath));\n-    var a = (JSONArray) jo.get(\"candies\");\n-    for (var o : a) {\n-      var candy = (JSONObject) o;\n-      var name = (String) candy.get(\"name\");\n-      var parentName = (String) candy.get(\"parent\");\n-      var t = (String) candy.get(\"type\");\n+  void parse() throws JsonParseException {\n+    var is = this.getClass().getClassLoader().getResourceAsStream(\"candy.json\");\n+    var reader = new InputStreamReader(is);\n+    var json = (JsonObject) com.google.gson.JsonParser.parseReader(reader);\n+    var array = (JsonArray) json.get(\"candies\");\n+    for (var item : array) {\n+      var candy = (JsonObject) item;\n+      var name = candy.get(\"name\").getAsString();\n+      var parentName = candy.get(\"parent\").getAsString();\n+      var t = candy.get(\"type\").getAsString();\n       var type = Type.CRUSHABLE_CANDY;\n       if (t.equals(\"rewardFruit\")) {\n         type = Type.REWARD_FRUIT;\n       }\n-      var points = Integer.parseInt((String) candy.get(\"points\"));\n+      var points = candy.get(\"points\").getAsInt();\n       var c = new Candy(name, parentName, type, points);\n       this.candies.put(name, c);\n     }",
    "output": "Replace json-simple with gson"
  },
  {
    "input": "diff --git a/monitor/src/main/java/com/iluwatar/monitor/Bank.java b/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n--- a/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n+++ b/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n@@ -78,12 +78,14 @@ public synchronized void transfer(int accountA, int accountB, int amount) {\n     if (accounts[accountA] >= amount) {\n       accounts[accountB] += amount;\n       accounts[accountA] -= amount;\n-      LOGGER.info(\n-          \"Transferred from account: {} to account: {} , amount: {} , balance: {}\",\n-          accountA,\n-          accountB,\n-          amount,\n-          getBalance());\n+      if (LOGGER.isDebugEnabled()) {\n+        LOGGER.debug(\n+            \"Transferred from account: {} to account: {} , amount: {} , balance: {}\",\n+            accountA,\n+            accountB,\n+            amount,\n+            getBalance());\n+      }\n     }\n   }\n \n\ndiff --git a/monitor/src/main/java/com/iluwatar/monitor/Main.java b/monitor/src/main/java/com/iluwatar/monitor/Main.java\n--- a/monitor/src/main/java/com/iluwatar/monitor/Main.java\n+++ b/monitor/src/main/java/com/iluwatar/monitor/Main.java\n@@ -25,7 +25,7 @@\n package com.iluwatar.monitor;\n \n import java.security.SecureRandom;\n-import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executors;\n import lombok.extern.slf4j.Slf4j;\n \n@@ -40,20 +40,26 @@\n @Slf4j\n public class Main {\n \n+  private static final int NUMBER_OF_THREADS = 5;\n+\n   /**\n    * Runner to perform a bunch of transfers and handle exception.\n    *\n-   * @param bank bank object\n+   * @param bank  bank object\n+   * @param latch signal finished execution\n    */\n-  public static void runner(Bank bank) {\n+  public static void runner(Bank bank, CountDownLatch latch) {\n     try {\n       SecureRandom random = new SecureRandom();\n       Thread.sleep(random.nextInt(1000));\n+      LOGGER.info(\"Start transferring...\");\n       for (int i = 0; i < 1000000; i++) {\n         bank.transfer(random.nextInt(4), random.nextInt(4), random.nextInt());\n       }\n+      LOGGER.info(\"Finished transferring.\");\n+      latch.countDown();\n     } catch (InterruptedException e) {\n-      LOGGER.info(e.getMessage());\n+      LOGGER.error(e.getMessage());\n       Thread.currentThread().interrupt();\n     }\n   }\n@@ -63,12 +69,15 @@ public static void runner(Bank bank) {\n    *\n    * @param args command line args\n    */\n-  public static void main(String[] args) {\n+  public static void main(String[] args) throws InterruptedException {\n     var bank = new Bank(4, 1000);\n-    Runnable runnable = () -> runner(bank);\n-    ExecutorService executorService = Executors.newFixedThreadPool(5);\n-    for (int i = 0; i < 5; i++) {\n-      executorService.execute(runnable);\n+    var latch = new CountDownLatch(NUMBER_OF_THREADS);\n+    var executorService = Executors.newFixedThreadPool(NUMBER_OF_THREADS);\n+\n+    for (int i = 0; i < NUMBER_OF_THREADS; i++) {\n+      executorService.execute(() -> runner(bank, latch));\n     }\n+\n+    latch.await();\n   }\n }\n\ndiff --git a/monitor/src/test/java/com/iluwatar/monitor/MainTest.java b/monitor/src/test/java/com/iluwatar/monitor/MainTest.java\n--- a/monitor/src/test/java/com/iluwatar/monitor/MainTest.java\n+++ b/monitor/src/test/java/com/iluwatar/monitor/MainTest.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.monitor;\n \n import org.junit.jupiter.api.Test;\n+import java.util.concurrent.CountDownLatch;\n import static org.junit.jupiter.api.Assertions.*;\n \n /** Test if the application starts without throwing an exception. */\n@@ -38,6 +39,9 @@ void shouldExecuteApplicationWithoutException() {\n   @Test\n   void RunnerExecuteWithoutException() {\n     var bank = new Bank(4, 1000);\n-    assertDoesNotThrow(() -> Main.runner(bank));\n+    var latch = new CountDownLatch(1);\n+\n+    assertDoesNotThrow(() -> Main.runner(bank, latch));\n+    assertEquals(0, latch.getCount());\n   }\n }",
    "output": "Reduce logs\n* feat: reduce logs from monitor pattern during test execution\n* fix: wait until all threads are done"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n@@ -1,80 +0,0 @@\n-/*\n- * This project is licensed under the MIT license. Module model-view-viewmodel is using ZK framework licensed under LGPL (see lgpl-3.0.txt).\n- *\n- * The MIT License\n- * Copyright © 2014-2022 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.acyclicvisitor;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static uk.org.lidalia.slf4jext.Level.INFO;\n-\n-import com.google.common.collect.ImmutableList;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import uk.org.lidalia.slf4jtest.LoggingEvent;\n-import uk.org.lidalia.slf4jtest.TestLogger;\n-import uk.org.lidalia.slf4jtest.TestLoggerFactory;\n-\n-/**\n- * ConfigureForDosVisitor test class\n- */\n-class ConfigureForDosVisitorTest {\n-\n-  private final TestLogger logger = TestLoggerFactory.getTestLogger(ConfigureForDosVisitor.class);\n-\n-  @Test\n-  void testVisitForZoom() {\n-    var conDos = new ConfigureForDosVisitor();\n-    var zoom = new Zoom();\n-\n-    conDos.visit(zoom);\n-\n-    ImmutableList<LoggingEvent> loggingEvents = logger.getLoggingEvents();\n-    assertEquals(1, loggingEvents.size());\n-    for (LoggingEvent loggingEvent : loggingEvents) {\n-      assertEquals(INFO, loggingEvent.getLevel());\n-      assertEquals(zoom + \" used with Dos configurator.\", loggingEvent.getMessage());\n-    }\n-  }\n-\n-  @Test\n-  void testVisitForHayes() {\n-    var conDos = new ConfigureForDosVisitor();\n-    var hayes = new Hayes();\n-\n-    conDos.visit(hayes);\n-\n-    ImmutableList<LoggingEvent> loggingEvents = logger.getLoggingEvents();\n-    assertEquals(1, loggingEvents.size());\n-    for (LoggingEvent loggingEvent : loggingEvents) {\n-      assertEquals(INFO, loggingEvent.getLevel());\n-      assertEquals(hayes + \" used with Dos configurator.\", loggingEvent.getMessage());\n-    }\n-  }\n-\n-  @BeforeEach\n-  @AfterEach\n-  void clearLoggers() {\n-    TestLoggerFactory.clear();\n-  }\n-}\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n@@ -1,65 +0,0 @@\n-/*\n- * This project is licensed under the MIT license. Module model-view-viewmodel is using ZK framework licensed under LGPL (see lgpl-3.0.txt).\n- *\n- * The MIT License\n- * Copyright © 2014-2022 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.acyclicvisitor;\n-\n-import com.google.common.collect.ImmutableList;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import uk.org.lidalia.slf4jtest.LoggingEvent;\n-import uk.org.lidalia.slf4jtest.TestLogger;\n-import uk.org.lidalia.slf4jtest.TestLoggerFactory;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static uk.org.lidalia.slf4jext.Level.INFO;\n-\n-/**\n- * ConfigureForUnixVisitor test class\n- */\n-class ConfigureForUnixVisitorTest {\n-\n-  private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(ConfigureForUnixVisitor.class);\n-\n-  @BeforeEach\n-  @AfterEach\n-  void clearLoggers() {\n-    TestLoggerFactory.clear();\n-  }\n-\n-  @Test\n-  void testVisitForZoom() {\n-    var conUnix = new ConfigureForUnixVisitor();\n-    var zoom = new Zoom();\n-\n-    conUnix.visit(zoom);\n-\n-    ImmutableList<LoggingEvent> loggingEvents = LOGGER.getLoggingEvents();\n-    assertEquals(1, loggingEvents.size());\n-    for (LoggingEvent loggingEvent : loggingEvents) {\n-      assertEquals(INFO, loggingEvent.getLevel());\n-      assertEquals(zoom + \" used with Unix configurator.\", loggingEvent.getMessage());\n-    }\n-  }\n-}",
    "output": "Make acyclic-visitor compatible with Java 11"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n@@ -48,7 +48,7 @@ public class UserGroup {\n    */\n   public static void addUserToFreeGroup(final User user) throws IllegalArgumentException {\n     if (paidGroup.contains(user)) {\n-      throw new IllegalArgumentException(\"User all ready member of paid group.\");\n+      throw new IllegalArgumentException(\"User already member of paid group.\");\n     } else {\n       if (!freeGroup.contains(user)) {\n         freeGroup.add(user);\n@@ -65,7 +65,7 @@ public static void addUserToFreeGroup(final User user) throws IllegalArgumentExc\n    */\n   public static void addUserToPaidGroup(final User user) throws IllegalArgumentException {\n     if (freeGroup.contains(user)) {\n-      throw new IllegalArgumentException(\"User all ready member of free group.\");\n+      throw new IllegalArgumentException(\"User already member of free group.\");\n     } else {\n       if (!paidGroup.contains(user)) {\n         paidGroup.add(user);\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/flyweight/PotionFactory.java b/flyweight/src/main/java/com/iluwatar/flyweight/PotionFactory.java\n--- a/flyweight/src/main/java/com/iluwatar/flyweight/PotionFactory.java\n+++ b/flyweight/src/main/java/com/iluwatar/flyweight/PotionFactory.java\n@@ -46,27 +46,25 @@ Potion createPotion(PotionType type) {\n       switch (type) {\r\n         case HEALING:\r\n           potion = new HealingPotion();\r\n-          potions.put(type, potion);\r\n           break;\r\n         case HOLY_WATER:\r\n           potion = new HolyWaterPotion();\r\n-          potions.put(type, potion);\r\n           break;\r\n         case INVISIBILITY:\r\n           potion = new InvisibilityPotion();\r\n-          potions.put(type, potion);\r\n           break;\r\n         case POISON:\r\n           potion = new PoisonPotion();\r\n-          potions.put(type, potion);\r\n           break;\r\n         case STRENGTH:\r\n           potion = new StrengthPotion();\r\n-          potions.put(type, potion);\r\n           break;\r\n         default:\r\n           break;\r\n       }\r\n+      if (potion != null) {\r\n+        potions.put(type, potion);\r\n+      }\r\n     }\r\n     return potion;\r\n   }\r\n\ndiff --git a/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java b/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java\n--- a/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java\n+++ b/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java\n@@ -28,6 +28,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -55,8 +56,6 @@ void testShop() {\n \n     // There are 13 potion instances, but only 5 unique instance types\n     assertEquals(13, allPotions.size());\n-    assertEquals(5, allPotions.stream().map(System::identityHashCode).distinct().count());\n-\n+    assertEquals(5, new HashSet<>(allPotions).size());\n   }\n-\n }",
    "output": "Issue and * Fix comment typo * Minor enchancements to flyweight * Minor enchancements to flyweight"
  },
  {
    "input": "diff --git a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategy.java b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategy.java\n--- a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategy.java\n+++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategy.java\n@@ -24,8 +24,8 @@\n  */\n package com.iluwatar.eip.aggregator.routes;\n \n+import org.apache.camel.AggregationStrategy;\n import org.apache.camel.Exchange;\n-import org.apache.camel.processor.aggregate.AggregationStrategy;\n import org.springframework.stereotype.Component;\n \n /**\n\ndiff --git a/eip-aggregator/src/test/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategyTest.java b/eip-aggregator/src/test/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategyTest.java\n--- a/eip-aggregator/src/test/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategyTest.java\n+++ b/eip-aggregator/src/test/java/com/iluwatar/eip/aggregator/routes/MessageAggregationStrategyTest.java\n@@ -27,21 +27,24 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import org.apache.camel.CamelContext;\n-import org.apache.camel.impl.DefaultExchange;\n+import org.apache.camel.impl.engine.SimpleCamelContext;\n+import org.apache.camel.support.DefaultExchange;\n import org.junit.jupiter.api.Test;\n \n /**\n  * Tests MessageAggregationStrategy\n  */\n class MessageAggregationStrategyTest {\n \n+  private final CamelContext context = new SimpleCamelContext();\n+  \n   @Test\n   void testAggregate() {\n     var mas = new MessageAggregationStrategy();\n-    var oldExchange = new DefaultExchange((CamelContext) null);\n+    var oldExchange = new DefaultExchange(context);\n     oldExchange.getIn().setBody(\"TEST1\");\n \n-    var newExchange = new DefaultExchange((CamelContext) null);\n+    var newExchange = new DefaultExchange(context);\n     newExchange.getIn().setBody(\"TEST2\");\n \n     var output = mas.aggregate(oldExchange, newExchange);\n@@ -53,7 +56,7 @@ void testAggregate() {\n   void testAggregateOldNull() {\n     var mas = new MessageAggregationStrategy();\n \n-    var newExchange = new DefaultExchange((CamelContext) null);\n+    var newExchange = new DefaultExchange(context);\n     newExchange.getIn().setBody(\"TEST2\");\n \n     var output = mas.aggregate(null, newExchange);",
    "output": "Upgrade Camel 2.25.1 to 3.18.1"
  },
  {
    "input": "diff --git a/domain-model/src/main/java/com/iluwatar/domainmodel/App.java b/domain-model/src/main/java/com/iluwatar/domainmodel/App.java\n--- a/domain-model/src/main/java/com/iluwatar/domainmodel/App.java\n+++ b/domain-model/src/main/java/com/iluwatar/domainmodel/App.java\n@@ -60,8 +60,8 @@ public class App {\n           + \"customer_name varchar references CUSTOMERS(name));\";\n \n   public static final String DELETE_SCHEMA_SQL =\n-      \"DROP TABLE CUSTOMERS IF EXISTS;\"\n-          + \"DROP TABLE PURCHASES IF EXISTS;\"\n+      \"DROP TABLE PURCHASES IF EXISTS;\"\n+          + \"DROP TABLE CUSTOMERS IF EXISTS;\"\n           + \"DROP TABLE PRODUCTS IF EXISTS;\";\n \n   /**\n\ndiff --git a/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/DatabaseUtil.java b/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/DatabaseUtil.java\n--- a/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/DatabaseUtil.java\n+++ b/metadata-mapping/src/main/java/com/iluwatar/metamapping/utils/DatabaseUtil.java\n@@ -34,8 +34,8 @@\n @Slf4j\n public class DatabaseUtil {\n   private static final String DB_URL = \"jdbc:h2:mem:metamapping\";\n-  private static final String CREATE_SCHEMA_SQL = \"DROP TABLE IF EXISTS `user`;\"\n-      + \"CREATE TABLE `user` (\\n\"\n+  private static final String CREATE_SCHEMA_SQL = \"DROP TABLE IF EXISTS `user_account`;\"\n+      + \"CREATE TABLE `user_account` (\\n\"\n       + \"  `id` int(11) NOT NULL AUTO_INCREMENT,\\n\"\n       + \"  `username` varchar(255) NOT NULL,\\n\"\n       + \"  `password` varchar(255) NOT NULL,\\n\"\n\ndiff --git a/transaction-script/src/main/java/com/iluwatar/transactionscript/RoomSchemaSql.java b/transaction-script/src/main/java/com/iluwatar/transactionscript/RoomSchemaSql.java\n--- a/transaction-script/src/main/java/com/iluwatar/transactionscript/RoomSchemaSql.java\n+++ b/transaction-script/src/main/java/com/iluwatar/transactionscript/RoomSchemaSql.java\n@@ -30,7 +30,7 @@\n public final class RoomSchemaSql {\n \n   public static final String CREATE_SCHEMA_SQL =\n-      \"CREATE TABLE ROOMS (ID NUMBER, ROOM_TYPE VARCHAR(100), PRICE INT(100), BOOKED VARCHAR(100))\";\n+      \"CREATE TABLE ROOMS (ID NUMBER, ROOM_TYPE VARCHAR(100), PRICE INT, BOOKED VARCHAR(100))\";\n   public static final String DELETE_SCHEMA_SQL = \"DROP TABLE ROOMS IF EXISTS\";\n \n   private RoomSchemaSql() {",
    "output": "Upgrade H2\n* refactor: drop tables according to their dependencies\n* refactor: renamed table because USER is an SQL keyword\n* dep: upgrade com.h2database.h2 1.4.190 to 2.1.214"
  },
  {
    "input": "diff --git a/monad/src/main/java/com/iluwatar/monad/Validator.java b/monad/src/main/java/com/iluwatar/monad/Validator.java\n--- a/monad/src/main/java/com/iluwatar/monad/Validator.java\n+++ b/monad/src/main/java/com/iluwatar/monad/Validator.java\n@@ -78,7 +78,7 @@ public static <T> Validator<T> of(T t) {\n    * @param message    error message when object is invalid\r\n    * @return this\r\n    */\r\n-  public Validator<T> validate(Predicate<T> validation, String message) {\r\n+  public Validator<T> validate(Predicate<? super T> validation, String message) {\r\n     if (!validation.test(obj)) {\r\n       exceptions.add(new IllegalStateException(message));\r\n     }\r\n@@ -97,8 +97,8 @@ public Validator<T> validate(Predicate<T> validation, String message) {\n    * @return this\r\n    */\r\n   public <U> Validator<T> validate(\r\n-      Function<T, U> projection,\r\n-      Predicate<U> validation,\r\n+      Function<? super T, ? extends U> projection,\r\n+      Predicate<? super U> validation,\r\n       String message\r\n   ) {\r\n     return validate(projection.andThen(validation::test)::apply, message);\r",
    "output": "Improve monad methods"
  },
  {
    "input": "diff --git a/presentation-model/src/main/java/com/iluwatar/presentationmodel/Album.java b/presentation-model/src/main/java/com/iluwatar/presentationmodel/Album.java\n--- a/presentation-model/src/main/java/com/iluwatar/presentationmodel/Album.java\n+++ b/presentation-model/src/main/java/com/iluwatar/presentationmodel/Album.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import lombok.AllArgsConstructor;\n import lombok.Getter;\n\ndiff --git a/presentation-model/src/main/java/com/iluwatar/presentationmodel/App.java b/presentation-model/src/main/java/com/iluwatar/presentationmodel/App.java\n--- a/presentation-model/src/main/java/com/iluwatar/presentationmodel/App.java\n+++ b/presentation-model/src/main/java/com/iluwatar/presentationmodel/App.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import lombok.extern.slf4j.Slf4j;\n \n\ndiff --git a/presentation-model/src/main/java/com/iluwatar/presentationmodel/DisplayedAlbums.java b/presentation-model/src/main/java/com/iluwatar/presentationmodel/DisplayedAlbums.java\n--- a/presentation-model/src/main/java/com/iluwatar/presentationmodel/DisplayedAlbums.java\n+++ b/presentation-model/src/main/java/com/iluwatar/presentationmodel/DisplayedAlbums.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import java.util.ArrayList;\n import java.util.List;\n\ndiff --git a/presentation-model/src/main/java/com/iluwatar/presentationmodel/PresentationModel.java b/presentation-model/src/main/java/com/iluwatar/presentationmodel/PresentationModel.java\n--- a/presentation-model/src/main/java/com/iluwatar/presentationmodel/PresentationModel.java\n+++ b/presentation-model/src/main/java/com/iluwatar/presentationmodel/PresentationModel.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import lombok.extern.slf4j.Slf4j;\n \n\ndiff --git a/presentation-model/src/main/java/com/iluwatar/presentationmodel/View.java b/presentation-model/src/main/java/com/iluwatar/presentationmodel/View.java\n--- a/presentation-model/src/main/java/com/iluwatar/presentationmodel/View.java\n+++ b/presentation-model/src/main/java/com/iluwatar/presentationmodel/View.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import java.awt.TextField;\n import java.awt.event.MouseAdapter;\n\ndiff --git a/presentation-model/src/test/java/com/iluwatar/presentationmodel/AlbumTest.java b/presentation-model/src/test/java/com/iluwatar/presentationmodel/AlbumTest.java\n--- a/presentation-model/src/test/java/com/iluwatar/presentationmodel/AlbumTest.java\n+++ b/presentation-model/src/test/java/com/iluwatar/presentationmodel/AlbumTest.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/presentation-model/src/test/java/com/iluwatar/presentationmodel/AppTest.java b/presentation-model/src/test/java/com/iluwatar/presentationmodel/AppTest.java\n--- a/presentation-model/src/test/java/com/iluwatar/presentationmodel/AppTest.java\n+++ b/presentation-model/src/test/java/com/iluwatar/presentationmodel/AppTest.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/presentation-model/src/test/java/com/iluwatar/presentationmodel/DisplayedAlbumsTest.java b/presentation-model/src/test/java/com/iluwatar/presentationmodel/DisplayedAlbumsTest.java\n--- a/presentation-model/src/test/java/com/iluwatar/presentationmodel/DisplayedAlbumsTest.java\n+++ b/presentation-model/src/test/java/com/iluwatar/presentationmodel/DisplayedAlbumsTest.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java b/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java\n--- a/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java\n+++ b/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/presentation-model/src/test/java/com/iluwatar/presentationmodel/ViewTest.java b/presentation-model/src/test/java/com/iluwatar/presentationmodel/ViewTest.java\n--- a/presentation-model/src/test/java/com/iluwatar/presentationmodel/ViewTest.java\n+++ b/presentation-model/src/test/java/com/iluwatar/presentationmodel/ViewTest.java\n@@ -22,7 +22,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.presentation;\n+package com.iluwatar.presentationmodel;\n \n import org.junit.jupiter.api.Test;\n import static org.junit.jupiter.api.Assertions.assertEquals;",
    "output": "Rename presentation to presentation model\n* Rename presentation to presentation-model\n* Rename image\n* Rename UML diagram\n* Rename presentation to presentation-model\n* Rename package to presentationmodel\n* Rename module reference in pom.xml"
  },
  {
    "input": "diff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java\n@@ -24,19 +24,19 @@\n  */\n package com.iluwatar.model.view.controller;\n \n+import lombok.AllArgsConstructor;\n+\n /**\n  * Fatigue enumeration.\n  */\n+@AllArgsConstructor\n public enum Fatigue {\n   ALERT(\"alert\"),\n   TIRED(\"tired\"),\n   SLEEPING(\"sleeping\");\n \n   private final String title;\n \n-  Fatigue(String title) {\n-    this.title = title;\n-  }\n \n   @Override\n   public String toString() {\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/GiantModel.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/GiantModel.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/GiantModel.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/GiantModel.java\n@@ -24,47 +24,26 @@\n  */\n package com.iluwatar.model.view.controller;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n /**\n  * GiantModel contains the giant data.\n  */\n+@Getter\n+@Setter\n+@Builder\n+@AllArgsConstructor\n+@NoArgsConstructor\n public class GiantModel {\n \n   private Health health;\n   private Fatigue fatigue;\n   private Nourishment nourishment;\n \n-  /**\n-   * Instantiates a new GiantModel.\n-   */\n-  public GiantModel(Health health, Fatigue fatigue, Nourishment nourishment) {\n-    this.health = health;\n-    this.fatigue = fatigue;\n-    this.nourishment = nourishment;\n-  }\n-\n-  public Health getHealth() {\n-    return health;\n-  }\n-\n-  public void setHealth(Health health) {\n-    this.health = health;\n-  }\n-\n-  public Fatigue getFatigue() {\n-    return fatigue;\n-  }\n-\n-  public void setFatigue(Fatigue fatigue) {\n-    this.fatigue = fatigue;\n-  }\n-\n-  public Nourishment getNourishment() {\n-    return nourishment;\n-  }\n-\n-  public void setNourishment(Nourishment nourishment) {\n-    this.nourishment = nourishment;\n-  }\n \n   @Override\n   public String toString() {\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java\n@@ -24,19 +24,19 @@\n  */\n package com.iluwatar.model.view.controller;\n \n+import lombok.AllArgsConstructor;\n+\n /**\n  * Health enumeration.\n  */\n+@AllArgsConstructor\n public enum Health {\n   HEALTHY(\"healthy\"),\n   WOUNDED(\"wounded\"),\n   DEAD(\"dead\");\n \n   private final String title;\n \n-  Health(String title) {\n-    this.title = title;\n-  }\n \n   @Override\n   public String toString() {\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java\n@@ -24,19 +24,19 @@\n  */\n package com.iluwatar.model.view.controller;\n \n+import lombok.AllArgsConstructor;\n+\n /**\n  * Nourishment enumeration.\n  */\n+@AllArgsConstructor\n public enum Nourishment {\n   SATURATED(\"saturated\"),\n   HUNGRY(\"hungry\"),\n   STARVING(\"starving\");\n \n   private final String title;\n \n-  Nourishment(String title) {\n-    this.title = title;\n-  }\n \n   @Override\n   public String toString() {",
    "output": "Add lombok to MVC pattern * Refactor: Added lombok to data-transfer-object pattern * Refactor: Added lombok to data-transfer-object pattern * Fix: Reverting all-contributors changes * Fix: Fixing checkstyle for DTO * Fix: Fixing checkstyle for Product.java * Feature: Added lombok to MVC * Fix: Fix imports"
  },
  {
    "input": "diff --git a/special-case/src/main/java/com/iluwatar/specialcase/App.java b/special-case/src/main/java/com/iluwatar/specialcase/App.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/App.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/App.java\n@@ -37,35 +37,42 @@ public class App {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n \n+  private static final String LOGGER_STRING = \"[REQUEST] User: {} buy product: {}\";\n+  private static final String TEST_USER_1 = \"ignite1771\";\n+  private static final String TEST_USER_2 = \"abc123\";\n+  private static final String ITEM_TV = \"tv\";\n+  private static final String ITEM_CAR = \"car\";\n+  private static final String ITEM_COMPUTER = \"computer\";\n+\n   /**\n    * Program entry point.\n    */\n   public static void main(String[] args) {\n     // DB seeding\n     LOGGER.info(\"Db seeding: \" + \"1 user: {\\\"ignite1771\\\", amount = 1000.0}, \"\n         + \"2 products: {\\\"computer\\\": price = 800.0, \\\"car\\\": price = 20000.0}\");\n-    Db.getInstance().seedUser(\"ignite1771\", 1000.0);\n-    Db.getInstance().seedItem(\"computer\", 800.0);\n-    Db.getInstance().seedItem(\"car\", 20000.0);\n+    Db.getInstance().seedUser(TEST_USER_1, 1000.0);\n+    Db.getInstance().seedItem(ITEM_COMPUTER, 800.0);\n+    Db.getInstance().seedItem(ITEM_CAR, 20000.0);\n \n     final var applicationServices = new ApplicationServicesImpl();\n     ReceiptViewModel receipt;\n \n-    LOGGER.info(\"[REQUEST] User: \" + \"abc123\" + \" buy product: \" + \"tv\");\n-    receipt = applicationServices.loggedInUserPurchase(\"abc123\", \"tv\");\n+    LOGGER.info(LOGGER_STRING, TEST_USER_2, ITEM_TV);\n+    receipt = applicationServices.loggedInUserPurchase(TEST_USER_2, ITEM_TV);\n     receipt.show();\n     MaintenanceLock.getInstance().setLock(false);\n-    LOGGER.info(\"[REQUEST] User: \" + \"abc123\" + \" buy product: \" + \"tv\");\n-    receipt = applicationServices.loggedInUserPurchase(\"abc123\", \"tv\");\n+    LOGGER.info(LOGGER_STRING, TEST_USER_2, ITEM_TV);\n+    receipt = applicationServices.loggedInUserPurchase(TEST_USER_2, ITEM_TV);\n     receipt.show();\n-    LOGGER.info(\"[REQUEST] User: \" + \"ignite1771\" + \" buy product: \" + \"tv\");\n-    receipt = applicationServices.loggedInUserPurchase(\"ignite1771\", \"tv\");\n+    LOGGER.info(LOGGER_STRING, TEST_USER_1, ITEM_TV);\n+    receipt = applicationServices.loggedInUserPurchase(TEST_USER_1, ITEM_TV);\n     receipt.show();\n-    LOGGER.info(\"[REQUEST] User: \" + \"ignite1771\" + \" buy product: \" + \"car\");\n-    receipt = applicationServices.loggedInUserPurchase(\"ignite1771\", \"car\");\n+    LOGGER.info(LOGGER_STRING, TEST_USER_1, ITEM_CAR);\n+    receipt = applicationServices.loggedInUserPurchase(TEST_USER_1, ITEM_CAR);\n     receipt.show();\n-    LOGGER.info(\"[REQUEST] User: \" + \"ignite1771\" + \" buy product: \" + \"computer\");\n-    receipt = applicationServices.loggedInUserPurchase(\"ignite1771\", \"computer\");\n+    LOGGER.info(LOGGER_STRING, TEST_USER_1, ITEM_COMPUTER);\n+    receipt = applicationServices.loggedInUserPurchase(TEST_USER_1, ITEM_COMPUTER);\n     receipt.show();\n   }\n }",
    "output": "Sonar CRITICAL issue fixes"
  },
  {
    "input": "diff --git a/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java b/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java\n--- a/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java\n+++ b/composite-view/src/main/java/com/iluwatar/compositeview/AppServlet.java\n@@ -38,6 +38,7 @@\n  */\n \n public final class AppServlet extends HttpServlet {\n+  private static final String CONTENT_TYPE = \"text/html\";\n   private String msgPartOne = \"<h1>This Server Doesn't Support\";\n   private String msgPartTwo = \"Requests</h1>\\n\"\n       + \"<h2>Use a GET request with boolean values for the following parameters<h2>\\n\"\n@@ -61,7 +62,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse resp)\n   @Override\n   public void doPost(HttpServletRequest req, HttpServletResponse resp)\n           throws ServletException, IOException {\n-    resp.setContentType(\"text/html\");\n+    resp.setContentType(CONTENT_TYPE);\n     try (PrintWriter out = resp.getWriter()) {\n       out.println(msgPartOne + \" Post \" + msgPartTwo);\n     }\n@@ -71,7 +72,7 @@ public void doPost(HttpServletRequest req, HttpServletResponse resp)\n   @Override\n   public void doDelete(HttpServletRequest req, HttpServletResponse resp)\n           throws ServletException, IOException {\n-    resp.setContentType(\"text/html\");\n+    resp.setContentType(CONTENT_TYPE);\n     try (PrintWriter out = resp.getWriter()) {\n       out.println(msgPartOne + \" Delete \" + msgPartTwo);\n     }\n@@ -80,7 +81,7 @@ public void doDelete(HttpServletRequest req, HttpServletResponse resp)\n   @Override\n   public void doPut(HttpServletRequest req, HttpServletResponse resp)\n           throws ServletException, IOException {\n-    resp.setContentType(\"text/html\");\n+    resp.setContentType(CONTENT_TYPE);\n     try (PrintWriter out = resp.getWriter()) {\n       out.println(msgPartOne + \" Put \" + msgPartTwo);\n     }",
    "output": "Sonar issue fix for duplicate string"
  },
  {
    "input": "diff --git a/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java b/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java\n--- a/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java\n+++ b/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java\n@@ -80,11 +80,11 @@ public boolean isAt() {\n    */\n   public AlbumPage selectAlbum(String albumTitle) {\n     // uses XPath to find list of html anchor tags with the class album in it\n-    var albumLinks = (List<HtmlAnchor>) page.getByXPath(\"//tr[@class='album']//a\");\n+    var albumLinks = (List<Object>) page.getByXPath(\"//tr[@class='album']//a\");\n     for (var anchor : albumLinks) {\n-      if (anchor.getTextContent().equals(albumTitle)) {\n+      if (((HtmlAnchor) anchor).getTextContent().equals(albumTitle)) {\n         try {\n-          anchor.click();\n+          ((HtmlAnchor) anchor).click();\n           return new AlbumPage(webClient);\n         } catch (IOException e) {\n           LOGGER.error(\"An error occured on selectAlbum\", e);",
    "output": "Fix for maven warnings\n* fix for maven warnings\n* Removed unwanted dependency and htmlunit upgraded to latest\nCo-authored-by: Mohana Rao S V <mohana.rao.s.v@tietoevry.com>"
  },
  {
    "input": "diff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcCommander.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcCommander.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcCommander.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcCommander.java\n@@ -24,27 +24,31 @@\n  */\n package com.iluwatar.chain;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n /**\n  * OrcCommander.\n  */\n-public class OrcCommander extends RequestHandler {\n+@Slf4j\n+public class OrcCommander implements RequestHandler {\n+  @Override\n+  public boolean canHandleRequest(Request req) {\n+    return req.getRequestType() == RequestType.DEFEND_CASTLE;\n+  }\n \n-  public OrcCommander(RequestHandler handler) {\n-    super(handler);\n+  @Override\n+  public int getPriority() {\n+    return 2;\n   }\n \n   @Override\n-  public void handleRequest(Request req) {\n-    if (RequestType.DEFEND_CASTLE == req.getRequestType()) {\n-      printHandling(req);\n-      req.markHandled();\n-    } else {\n-      super.handleRequest(req);\n-    }\n+  public void handle(Request req) {\n+    req.markHandled();\n+    LOGGER.info(\"{} handling request \\\"{}\\\"\", name(), req);\n   }\n \n   @Override\n-  public String toString() {\n+  public String name() {\n     return \"Orc commander\";\n   }\n }\n\ndiff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcKing.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcKing.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcKing.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcKing.java\n@@ -24,23 +24,34 @@\n  */\n package com.iluwatar.chain;\n \n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+\n /**\n  * OrcKing makes requests that are handled by the chain.\n  */\n public class OrcKing {\n \n-  private RequestHandler chain;\n+  private List<RequestHandler> handlers;\n \n   public OrcKing() {\n     buildChain();\n   }\n \n   private void buildChain() {\n-    chain = new OrcCommander(new OrcOfficer(new OrcSoldier(null)));\n+    handlers = Arrays.asList(new OrcCommander(), new OrcOfficer(), new OrcSoldier());\n   }\n \n+  /**\n+   * Handle request by the chain.\n+   */\n   public void makeRequest(Request req) {\n-    chain.handleRequest(req);\n+    handlers\n+        .stream()\n+        .sorted(Comparator.comparing(RequestHandler::getPriority))\n+        .filter(handler -> handler.canHandleRequest(req))\n+        .findFirst()\n+        .ifPresent(handler -> handler.handle(req));\n   }\n-\n }\n\ndiff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcOfficer.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcOfficer.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcOfficer.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcOfficer.java\n@@ -24,28 +24,32 @@\n  */\n package com.iluwatar.chain;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n /**\n  * OrcOfficer.\n  */\n-public class OrcOfficer extends RequestHandler {\n+@Slf4j\n+public class OrcOfficer implements RequestHandler {\n+  @Override\n+  public boolean canHandleRequest(Request req) {\n+    return req.getRequestType() == RequestType.TORTURE_PRISONER;\n+  }\n \n-  public OrcOfficer(RequestHandler handler) {\n-    super(handler);\n+  @Override\n+  public int getPriority() {\n+    return 3;\n   }\n \n   @Override\n-  public void handleRequest(Request req) {\n-    if (RequestType.TORTURE_PRISONER == req.getRequestType()) {\n-      printHandling(req);\n-      req.markHandled();\n-    } else {\n-      super.handleRequest(req);\n-    }\n+  public void handle(Request req) {\n+    req.markHandled();\n+    LOGGER.info(\"{} handling request \\\"{}\\\"\", name(), req);\n   }\n \n   @Override\n-  public String toString() {\n+  public String name() {\n     return \"Orc officer\";\n   }\n-\n }\n+\n\ndiff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcSoldier.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcSoldier.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcSoldier.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/OrcSoldier.java\n@@ -24,27 +24,31 @@\n  */\n package com.iluwatar.chain;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n /**\n  * OrcSoldier.\n  */\n-public class OrcSoldier extends RequestHandler {\n+@Slf4j\n+public class OrcSoldier implements RequestHandler {\n+  @Override\n+  public boolean canHandleRequest(Request req) {\n+    return req.getRequestType() == RequestType.COLLECT_TAX;\n+  }\n \n-  public OrcSoldier(RequestHandler handler) {\n-    super(handler);\n+  @Override\n+  public int getPriority() {\n+    return 1;\n   }\n \n   @Override\n-  public void handleRequest(Request req) {\n-    if (RequestType.COLLECT_TAX == req.getRequestType()) {\n-      printHandling(req);\n-      req.markHandled();\n-    } else {\n-      super.handleRequest(req);\n-    }\n+  public void handle(Request req) {\n+    req.markHandled();\n+    LOGGER.info(\"{} handling request \\\"{}\\\"\", name(), req);\n   }\n \n   @Override\n-  public String toString() {\n+  public String name() {\n     return \"Orc soldier\";\n   }\n }\n\ndiff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/RequestHandler.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/RequestHandler.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/RequestHandler.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/RequestHandler.java\n@@ -24,31 +24,16 @@\n  */\n package com.iluwatar.chain;\n \n-import lombok.AllArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n /**\n  * RequestHandler.\n  */\n-@Slf4j\n-@AllArgsConstructor\n-public abstract class RequestHandler {\n+public interface RequestHandler {\n \n-  private final RequestHandler next;\n+  boolean canHandleRequest(Request req);\n \n-  /**\n-   * Request handler.\n-   */\n-  public void handleRequest(Request req) {\n-    if (next != null) {\n-      next.handleRequest(req);\n-    }\n-  }\n+  int getPriority();\n \n-  protected void printHandling(Request req) {\n-    LOGGER.info(\"{} handling request \\\"{}\\\"\", this, req);\n-  }\n+  void handle(Request req);\n \n-  @Override\n-  public abstract String toString();\n+  String name();\n }",
    "output": "Implement chain of responsibilities with java stream"
  },
  {
    "input": "diff --git a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n--- a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n@@ -26,9 +26,16 @@\n \n import java.util.List;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n+\n+\n /**\n  * The class with many parameters.\n  */\n+@Getter\n+@Setter\n public class Character {\n \n   private String name;\n@@ -42,53 +49,6 @@ public Character(String name) {\n     this.name = name;\n   }\n \n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public String getFighterClass() {\n-    return fighterClass;\n-  }\n-\n-  public void setFighterClass(String fighterClass) {\n-    this.fighterClass = fighterClass;\n-  }\n-\n-  public String getWizardClass() {\n-    return wizardClass;\n-  }\n-\n-  public void setWizardClass(String wizardClass) {\n-    this.wizardClass = wizardClass;\n-  }\n-\n-  public String getWeapon() {\n-    return weapon;\n-  }\n-\n-  public void setWeapon(String weapon) {\n-    this.weapon = weapon;\n-  }\n-\n-  public String getSpell() {\n-    return spell;\n-  }\n-\n-  public void setSpell(String spell) {\n-    this.spell = spell;\n-  }\n-\n-  public List<String> getAbilities() {\n-    return abilities;\n-  }\n-\n-  public void setAbilities(List<String> abilities) {\n-    this.abilities = abilities;\n-  }\n \n   @Override\n   public String toString() {",
    "output": "Add lombok to step-builder pattern * Refactor: Adding lombok to step-builder pattern * Fix: Fixing imports"
  },
  {
    "input": "diff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java\n@@ -87,29 +87,29 @@ public static void main(String[] args) {\n     printCustomerDetails(allCustomers);\n \n     // Example 2: Product DTO\n-    Product tv =\n-        new Product().setId(1L).setName(\"TV\").setSupplier(\"Sony\").setPrice(1000D).setCost(1090D);\n+\n+    Product tv = Product.builder().id(1L).name(\"TV\").supplier(\"Sony\").price(1000D).cost(1090D).build();\n     Product microwave =\n-        new Product()\n-            .setId(2L)\n-            .setName(\"microwave\")\n-            .setSupplier(\"Delonghi\")\n-            .setPrice(1000D)\n-            .setCost(1090D);\n+        Product.builder()\n+            .id(2L)\n+            .name(\"microwave\")\n+            .supplier(\"Delonghi\")\n+            .price(1000D)\n+            .cost(1090D).build();\n     Product refrigerator =\n-        new Product()\n-            .setId(3L)\n-            .setName(\"refrigerator\")\n-            .setSupplier(\"Botsch\")\n-            .setPrice(1000D)\n-            .setCost(1090D);\n+        Product.builder()\n+            .id(3L)\n+            .name(\"refrigerator\")\n+            .supplier(\"Botsch\")\n+            .price(1000D)\n+            .cost(1090D).build();\n     Product airConditioner =\n-        new Product()\n-            .setId(4L)\n-            .setName(\"airConditioner\")\n-            .setSupplier(\"LG\")\n-            .setPrice(1000D)\n-            .setCost(1090D);\n+        Product.builder()\n+            .id(4L)\n+            .name(\"airConditioner\")\n+            .supplier(\"LG\")\n+            .price(1000D)\n+            .cost(1090D).build();\n     List<Product> products =\n         new ArrayList<>(Arrays.asList(tv, microwave, refrigerator, airConditioner));\n     ProductResource productResource = new ProductResource(products);\n\ndiff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/Product.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/Product.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/Product.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/Product.java\n@@ -24,92 +24,33 @@\n  */\n package com.iluwatar.datatransfer.product;\n \n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n /**\n  * {@link Product} is a entity class for product entity. This class act as entity in the demo.\n  */\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n public final class Product {\n   private Long id;\n   private String name;\n   private Double price;\n   private Double cost;\n   private String supplier;\n \n-  /**\n-   * Constructor.\n-   *\n-   * @param id       product id\n-   * @param name     product name\n-   * @param price    product price\n-   * @param cost     product cost\n-   * @param supplier product supplier\n-   */\n-  public Product(Long id, String name, Double price, Double cost, String supplier) {\n-    this.id = id;\n-    this.name = name;\n-    this.price = price;\n-    this.cost = cost;\n-    this.supplier = supplier;\n-  }\n-\n-  /**\n-   * Constructor.\n-   */\n-  public Product() {\n-  }\n-\n-  public Long getId() {\n-    return id;\n-  }\n-\n-  public Product setId(Long id) {\n-    this.id = id;\n-    return this;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public Product setName(String name) {\n-    this.name = name;\n-    return this;\n-  }\n-\n-  public Double getPrice() {\n-    return price;\n-  }\n-\n-  public Product setPrice(Double price) {\n-    this.price = price;\n-    return this;\n-  }\n-\n-  public Double getCost() {\n-    return cost;\n-  }\n-\n-  public Product setCost(Double cost) {\n-    this.cost = cost;\n-    return this;\n-  }\n-\n-  public String getSupplier() {\n-    return supplier;\n-  }\n-\n-  public Product setSupplier(String supplier) {\n-    this.supplier = supplier;\n-    return this;\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Product{\"\n-        + \"id=\" + id\n-        + \", name='\" + name + '\\''\n-        + \", price=\" + price\n-        + \", cost=\" + cost\n-        + \", supplier='\" + supplier + '\\''\n-        + '}';\n+            + \"id=\" + id\n+            + \", name='\" + name + '\\''\n+            + \", price=\" + price\n+            + \", cost=\" + cost\n+            + \", supplier='\" + supplier + '\\''\n+            + '}';\n   }\n }\n\ndiff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/ProductResource.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/ProductResource.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/ProductResource.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/product/ProductResource.java\n@@ -50,11 +50,11 @@ public ProductResource(final List<Product> products) {\n    */\n   public List<ProductDto.Response.Private> getAllProductsForAdmin() {\n     return products\n-        .stream()\n-        .map(p -> new ProductDto.Response.Private().setId(p.getId()).setName(p.getName())\n-            .setCost(p.getCost())\n-            .setPrice(p.getPrice()))\n-        .collect(Collectors.toList());\n+            .stream()\n+            .map(p -> new ProductDto.Response.Private().setId(p.getId()).setName(p.getName())\n+                    .setCost(p.getCost())\n+                    .setPrice(p.getPrice()))\n+            .collect(Collectors.toList());\n   }\n \n   /**\n@@ -64,10 +64,10 @@ public List<ProductDto.Response.Private> getAllProductsForAdmin() {\n    */\n   public List<ProductDto.Response.Public> getAllProductsForCustomer() {\n     return products\n-        .stream()\n-        .map(p -> new ProductDto.Response.Public().setId(p.getId()).setName(p.getName())\n-            .setPrice(p.getPrice()))\n-        .collect(Collectors.toList());\n+            .stream()\n+            .map(p -> new ProductDto.Response.Public().setId(p.getId()).setName(p.getName())\n+                    .setPrice(p.getPrice()))\n+            .collect(Collectors.toList());\n   }\n \n   /**\n@@ -76,12 +76,13 @@ public List<ProductDto.Response.Public> getAllProductsForCustomer() {\n    * @param createProductDto save new product to list.\n    */\n   public void save(ProductDto.Request.Create createProductDto) {\n-    products.add(new Product()\n-        .setId((long) (products.size() + 1))\n-        .setName(createProductDto.getName())\n-        .setSupplier(createProductDto.getSupplier())\n-        .setPrice(createProductDto.getPrice())\n-        .setCost(createProductDto.getCost()));\n+    products.add(Product.builder()\n+            .id((long) (products.size() + 1))\n+            .name(createProductDto.getName())\n+            .supplier(createProductDto.getSupplier())\n+            .price(createProductDto.getPrice())\n+            .cost(createProductDto.getCost())\n+            .build());\n   }\n \n   /**",
    "output": "Add lombok to data-transfer-object pattern * Refactor: Added lombok to data-transfer-object pattern * Refactor: Added lombok to data-transfer-object pattern * Fix: Reverting all-contributors changes * Fix: Fixing checkstyle for DTO * Fix: Fixing checkstyle for Product.java"
  },
  {
    "input": "diff --git a/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java b/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java\n@@ -41,7 +41,7 @@ public abstract class StealingMethod {\n   /**\r\n    * Steal.\r\n    */\r\n-  public void steal() {\r\n+  public final void steal() {\r\n     var target = pickTarget();\r\n     LOGGER.info(\"The target has been chosen as {}.\", target);\r\n     confuseTarget(target);\r\n\ndiff --git a/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n--- a/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n+++ b/template-method/src/test/java/com/iluwatar/templatemethod/HalflingThiefTest.java\n@@ -24,7 +24,7 @@\n  */\n package com.iluwatar.templatemethod;\n \n-import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n \n@@ -42,11 +42,14 @@ public class HalflingThiefTest {\n    */\n   @Test\n   void testSteal() {\n-    final var method = mock(StealingMethod.class);\n+    final var method = spy(StealingMethod.class);\n     final var thief = new HalflingThief(method);\n \n     thief.steal();\n     verify(method).steal();\n+    String target = verify(method).pickTarget();\n+    verify(method).confuseTarget(target);\n+    verify(method).stealTheItem(target);\n \n     verifyNoMoreInteractions(method);\n   }\n@@ -56,19 +59,23 @@ void testSteal() {\n    */\n   @Test\n   void testChangeMethod() {\n-    final var initialMethod = mock(StealingMethod.class);\n+    final var initialMethod = spy(StealingMethod.class);\n     final var thief = new HalflingThief(initialMethod);\n \n     thief.steal();\n     verify(initialMethod).steal();\n+    String target = verify(initialMethod).pickTarget();\n+    verify(initialMethod).confuseTarget(target);\n+    verify(initialMethod).stealTheItem(target);\n \n-    final var newMethod = mock(StealingMethod.class);\n+    final var newMethod = spy(StealingMethod.class);\n     thief.changeMethod(newMethod);\n \n     thief.steal();\n     verify(newMethod).steal();\n-\n+    String newTarget = verify(newMethod).pickTarget();\n+    verify(newMethod).confuseTarget(newTarget);\n+    verify(newMethod).stealTheItem(newTarget);\n     verifyNoMoreInteractions(initialMethod, newMethod);\n-\n   }\n }\n\\ No newline at end of file",
    "output": "Declares the template method as final (Issue 1099)"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n@@ -24,12 +24,14 @@\n  */\n package com.iluwatar.acyclicvisitor;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.groups.Tuple.tuple;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static uk.org.lidalia.slf4jext.Level.INFO;\n \n+import com.google.common.collect.ImmutableList;\n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import uk.org.lidalia.slf4jtest.LoggingEvent;\n import uk.org.lidalia.slf4jtest.TestLogger;\n import uk.org.lidalia.slf4jtest.TestLoggerFactory;\n \n@@ -47,9 +49,12 @@ void testVisitForZoom() {\n \n     conDos.visit(zoom);\n \n-    assertThat(logger.getLoggingEvents())\n-        .extracting(\"level\", \"message\")\n-        .contains(tuple(INFO, zoom + \" used with Dos configurator.\"));\n+    ImmutableList<LoggingEvent> loggingEvents = logger.getLoggingEvents();\n+    assertEquals(1, loggingEvents.size());\n+    for (LoggingEvent loggingEvent : loggingEvents) {\n+      assertEquals(INFO, loggingEvent.getLevel());\n+      assertEquals(zoom + \" used with Dos configurator.\", loggingEvent.getMessage());\n+    }\n   }\n \n   @Test\n@@ -59,11 +64,15 @@ void testVisitForHayes() {\n \n     conDos.visit(hayes);\n \n-    assertThat(logger.getLoggingEvents())\n-        .extracting(\"level\", \"message\")\n-        .contains(tuple(INFO, hayes + \" used with Dos configurator.\"));\n+    ImmutableList<LoggingEvent> loggingEvents = logger.getLoggingEvents();\n+    assertEquals(1, loggingEvents.size());\n+    for (LoggingEvent loggingEvent : loggingEvents) {\n+      assertEquals(INFO, loggingEvent.getLevel());\n+      assertEquals(hayes + \" used with Dos configurator.\", loggingEvent.getMessage());\n+    }\n   }\n \n+  @BeforeEach\n   @AfterEach\n   public void clearLoggers() {\n     TestLoggerFactory.clear();\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n@@ -24,13 +24,15 @@\n  */\n package com.iluwatar.acyclicvisitor;\n \n+import com.google.common.collect.ImmutableList;\n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import uk.org.lidalia.slf4jtest.LoggingEvent;\n import uk.org.lidalia.slf4jtest.TestLogger;\n import uk.org.lidalia.slf4jtest.TestLoggerFactory;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.groups.Tuple.tuple;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static uk.org.lidalia.slf4jext.Level.INFO;\n \n /**\n@@ -40,6 +42,7 @@ class ConfigureForUnixVisitorTest {\n \n   private static final TestLogger LOGGER = TestLoggerFactory.getTestLogger(ConfigureForUnixVisitor.class);\n \n+  @BeforeEach\n   @AfterEach\n   public void clearLoggers() {\n     TestLoggerFactory.clear();\n@@ -52,8 +55,11 @@ void testVisitForZoom() {\n \n     conUnix.visit(zoom);\n \n-    assertThat(LOGGER.getLoggingEvents())\n-        .extracting(\"level\", \"message\")\n-        .contains(tuple(INFO, zoom + \" used with Unix configurator.\"));\n+    ImmutableList<LoggingEvent> loggingEvents = LOGGER.getLoggingEvents();\n+    assertEquals(1, loggingEvents.size());\n+    for (LoggingEvent loggingEvent : loggingEvents) {\n+      assertEquals(INFO, loggingEvent.getLevel());\n+      assertEquals(zoom + \" used with Unix configurator.\", loggingEvent.getMessage());\n+    }\n   }\n }",
    "output": "Fix . Remove assertj-core from acyclic-visitor to prevent inconsistent library versions * Fixed . Remove assertj-core from acyclic-visitor to prevent inconsistent library versions * clean up logger before each run"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java b/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java\n@@ -31,7 +31,7 @@\n import java.math.BigInteger;\n import java.util.List;\n import org.hibernate.SessionFactory;\n-import org.hibernate.transform.Transformers;\n+import org.hibernate.query.Query;\n \n /**\n  * This class is an implementation of {@link IQueryService}. It uses Hibernate native queries to\n@@ -45,12 +45,11 @@ public class QueryServiceImpl implements IQueryService {\n   public Author getAuthorByUsername(String username) {\n     Author authorDTo;\n     try (var session = sessionFactory.openSession()) {\n-      var sqlQuery = session.createSQLQuery(\"SELECT a.username as \\\"username\\\",\"\n-          + \" a.name as \\\"name\\\", a.email as \\\"email\\\"\"\n-          + \"FROM Author a where a.username=:username\");\n+      Query<Author> sqlQuery = session.createQuery(\n+              \"select new com.iluwatar.cqrs.dto.Author(a.name, a.email, a.username)\"\n+                      + \" from com.iluwatar.cqrs.domain.model.Author a where a.username=:username\");\n       sqlQuery.setParameter(AppConstants.USER_NAME, username);\n-      authorDTo = (Author) sqlQuery.setResultTransformer(Transformers.aliasToBean(Author.class))\n-          .uniqueResult();\n+      authorDTo = sqlQuery.uniqueResult();\n     }\n     return authorDTo;\n   }\n@@ -59,11 +58,11 @@ public Author getAuthorByUsername(String username) {\n   public Book getBook(String title) {\n     Book bookDTo;\n     try (var session = sessionFactory.openSession()) {\n-      var sqlQuery = session.createSQLQuery(\"SELECT b.title as \\\"title\\\",\"\n-          + \" b.price as \\\"price\\\"\" + \" FROM Book b where b.title=:title\");\n+      Query<Book> sqlQuery = session.createQuery(\n+              \"select new com.iluwatar.cqrs.dto.Book(b.title, b.price)\"\n+                      + \" from com.iluwatar.cqrs.domain.model.Book b where b.title=:title\");\n       sqlQuery.setParameter(\"title\", title);\n-      bookDTo =\n-          (Book) sqlQuery.setResultTransformer(Transformers.aliasToBean(Book.class)).uniqueResult();\n+      bookDTo = sqlQuery.uniqueResult();\n     }\n     return bookDTo;\n   }\n@@ -72,10 +71,12 @@ public Book getBook(String title) {\n   public List<Book> getAuthorBooks(String username) {\n     List<Book> bookDTos;\n     try (var session = sessionFactory.openSession()) {\n-      var sqlQuery = session.createSQLQuery(\"SELECT b.title as \\\"title\\\", b.price as \\\"price\\\"\"\n-          + \" FROM Author a , Book b where b.author_id = a.id and a.username=:username\");\n+      Query<Book> sqlQuery = session.createQuery(\n+              \"select new com.iluwatar.cqrs.dto.Book(b.title, b.price)\"\n+                      + \" from com.iluwatar.cqrs.domain.model.Author a, com.iluwatar.cqrs.domain.model.Book b \"\n+                      + \"where b.author.id = a.id and a.username=:username\");\n       sqlQuery.setParameter(AppConstants.USER_NAME, username);\n-      bookDTos = sqlQuery.setResultTransformer(Transformers.aliasToBean(Book.class)).list();\n+      bookDTos = sqlQuery.list();\n     }\n     return bookDTos;\n   }\n@@ -84,9 +85,9 @@ public List<Book> getAuthorBooks(String username) {\n   public BigInteger getAuthorBooksCount(String username) {\n     BigInteger bookcount;\n     try (var session = sessionFactory.openSession()) {\n-      var sqlQuery = session.createSQLQuery(\n-          \"SELECT count(b.title)\" + \" FROM  Book b, Author a\"\n-              + \" where b.author_id = a.id and a.username=:username\");\n+      var sqlQuery = session.createNativeQuery(\n+              \"SELECT count(b.title)\" + \" FROM  Book b, Author a\"\n+                      + \" where b.author_id = a.id and a.username=:username\");\n       sqlQuery.setParameter(AppConstants.USER_NAME, username);\n       bookcount = (BigInteger) sqlQuery.uniqueResult();\n     }\n@@ -97,7 +98,7 @@ public BigInteger getAuthorBooksCount(String username) {\n   public BigInteger getAuthorsCount() {\n     BigInteger authorcount;\n     try (var session = sessionFactory.openSession()) {\n-      var sqlQuery = session.createSQLQuery(\"SELECT count(id) from Author\");\n+      var sqlQuery = session.createNativeQuery(\"SELECT count(id) from Author\");\n       authorcount = (BigInteger) sqlQuery.uniqueResult();\n     }\n     return authorcount;",
    "output": "Remove deprecated method to ease Hibernate upgrade later on"
  },
  {
    "input": "diff --git a/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java b/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java\n--- a/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java\n+++ b/circuit-breaker/src/main/java/com/iluwatar/circuitbreaker/DefaultCircuitBreaker.java\n@@ -38,7 +38,7 @@ public class DefaultCircuitBreaker implements CircuitBreaker {\n   int failureCount;\n   private final int failureThreshold;\n   private State state;\n-  private final long futureTime = 1000 * 1000 * 1000 * 1000;\n+  private final long futureTime = 1000L * 1000 * 1000 * 1000;\n \n   /**\n    * Constructor to create an instance of Circuit Breaker.",
    "output": "Issue\nFix Inssue"
  },
  {
    "input": "diff --git a/prototype/src/main/java/com/iluwatar/prototype/Beast.java b/prototype/src/main/java/com/iluwatar/prototype/Beast.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/Beast.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/Beast.java\n@@ -29,14 +29,11 @@\n /**\n  * Beast.\n  */\n-@EqualsAndHashCode\n+@EqualsAndHashCode(callSuper = false)\n @NoArgsConstructor\n-public abstract class Beast implements Prototype {\n+public abstract class Beast extends Prototype<Beast> {\n \n   public Beast(Beast source) {\n   }\n \n-  @Override\n-  public abstract Beast copy();\n-\n }\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/ElfBeast.java b/prototype/src/main/java/com/iluwatar/prototype/ElfBeast.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/ElfBeast.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/ElfBeast.java\n@@ -40,11 +40,6 @@ public ElfBeast(ElfBeast elfBeast) {\n     this.helpType = elfBeast.helpType;\n   }\n \n-  @Override\n-  public ElfBeast copy() {\n-    return new ElfBeast(this);\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Elven eagle helps in \" + helpType;\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/ElfMage.java b/prototype/src/main/java/com/iluwatar/prototype/ElfMage.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/ElfMage.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/ElfMage.java\n@@ -40,11 +40,6 @@ public ElfMage(ElfMage elfMage) {\n     this.helpType = elfMage.helpType;\n   }\n \n-  @Override\n-  public ElfMage copy() {\n-    return new ElfMage(this);\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Elven mage helps in \" + helpType;\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/ElfWarlord.java b/prototype/src/main/java/com/iluwatar/prototype/ElfWarlord.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/ElfWarlord.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/ElfWarlord.java\n@@ -24,31 +24,24 @@\n package com.iluwatar.prototype;\n \n import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n \n /**\n  * ElfWarlord.\n  */\n-@EqualsAndHashCode\n+@EqualsAndHashCode(callSuper = true)\n+@RequiredArgsConstructor\n public class ElfWarlord extends Warlord {\n \n   private final String helpType;\n \n-  public ElfWarlord(String helpType) {\n-    this.helpType = helpType;\n-  }\n-\n   public ElfWarlord(ElfWarlord elfWarlord) {\n     super(elfWarlord);\n     this.helpType = elfWarlord.helpType;\n   }\n \n-  @Override\n-  public ElfWarlord copy() {\n-    return new ElfWarlord(this);\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Elven warlord helps in \" + helpType;\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/Mage.java b/prototype/src/main/java/com/iluwatar/prototype/Mage.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/Mage.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/Mage.java\n@@ -29,14 +29,11 @@\n /**\n  * Mage.\n  */\n-@EqualsAndHashCode\n+@EqualsAndHashCode(callSuper = false)\n @NoArgsConstructor\n-public abstract class Mage implements Prototype {\n+public abstract class Mage extends Prototype<Mage> {\n \n   public Mage(Mage source) {\n   }\n \n-  @Override\n-  public abstract Mage copy();\n-\n }\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/OrcBeast.java b/prototype/src/main/java/com/iluwatar/prototype/OrcBeast.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/OrcBeast.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/OrcBeast.java\n@@ -40,11 +40,6 @@ public OrcBeast(OrcBeast orcBeast) {\n     this.weapon = orcBeast.weapon;\n   }\n \n-  @Override\n-  public OrcBeast copy() {\n-    return new OrcBeast(this);\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Orcish wolf attacks with \" + weapon;\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/OrcMage.java b/prototype/src/main/java/com/iluwatar/prototype/OrcMage.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/OrcMage.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/OrcMage.java\n@@ -40,11 +40,6 @@ public OrcMage(OrcMage orcMage) {\n     this.weapon = orcMage.weapon;\n   }\n \n-  @Override\n-  public OrcMage copy() {\n-    return new OrcMage(this);\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Orcish mage attacks with \" + weapon;\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/OrcWarlord.java b/prototype/src/main/java/com/iluwatar/prototype/OrcWarlord.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/OrcWarlord.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/OrcWarlord.java\n@@ -40,11 +40,6 @@ public OrcWarlord(OrcWarlord orcWarlord) {\n     this.weapon = orcWarlord.weapon;\n   }\n \n-  @Override\n-  public OrcWarlord copy() {\n-    return new OrcWarlord(this);\n-  }\n-\n   @Override\n   public String toString() {\n     return \"Orcish warlord attacks with \" + weapon;\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/Prototype.java b/prototype/src/main/java/com/iluwatar/prototype/Prototype.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/Prototype.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/Prototype.java\n@@ -23,11 +23,21 @@\n \n package com.iluwatar.prototype;\n \n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n /**\n  * Prototype.\n  */\n-public interface Prototype {\n-\n-  Object copy();\n+@Slf4j\n+public abstract class Prototype<T> implements Cloneable {\n \n+  /**\n+   * Object a shallow copy of this object or null if this object is not Cloneable.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  @SneakyThrows\n+  public T copy() {\n+    return (T) super.clone();\n+  }\n }\n\ndiff --git a/prototype/src/main/java/com/iluwatar/prototype/Warlord.java b/prototype/src/main/java/com/iluwatar/prototype/Warlord.java\n--- a/prototype/src/main/java/com/iluwatar/prototype/Warlord.java\n+++ b/prototype/src/main/java/com/iluwatar/prototype/Warlord.java\n@@ -29,14 +29,11 @@\n /**\n  * Warlord.\n  */\n-@EqualsAndHashCode\n+@EqualsAndHashCode(callSuper = false)\n @NoArgsConstructor\n-public abstract class Warlord implements Prototype {\n+public abstract class Warlord extends Prototype<Warlord> {\n \n   public Warlord(Warlord source) {\n   }\n \n-  @Override\n-  public abstract Warlord copy();\n-\n }\n\ndiff --git a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n--- a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n+++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n@@ -39,7 +39,7 @@\n  * @param <P> Prototype\n  * @author Jeroen Meulemeester\n  */\n-class PrototypeTest<P extends Prototype> {\n+class PrototypeTest<P extends Prototype<P>> {\n   static Collection<Object[]> dataProvider() {\n     return List.of(\n         new Object[]{new OrcBeast(\"axe\"), \"Orcish wolf attacks with axe\"},",
    "output": "Refactor the prototype pattern to avoid code duplications ()\nThis commit refactors the Prototype pattern by making it Cloneable and thus inheriting the clone() method to its subclasses which removes code duplications."
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/execute/around/App.java b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n@@ -53,9 +53,10 @@ public static void main(String[] args) throws IOException {\n     new SimpleFileWriter(\"testfile.txt\", writeHello);\n \n     // print the file contents\n-    var scanner = new Scanner(new File(\"testfile.txt\"));\n-    while (scanner.hasNextLine()) {\n-      LOGGER.info(scanner.nextLine());\n+    try (var scanner = new Scanner(new File(\"testfile.txt\"))) {\n+      while (scanner.hasNextLine()) {\n+        LOGGER.info(scanner.nextLine());\n+      }\n     }\n   }\n }",
    "output": "Surrounded with try with resources\nCo-authored-by: Mohana Rao S V <mohana.rao.s.v@tietoevry.com>"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java\n@@ -28,5 +28,5 @@\n  * converted to an interface\n  */\n public interface Modem {\n-   void accept(ModemVisitor modemVisitor);\n+  void accept(ModemVisitor modemVisitor);\n }",
    "output": "Correction of the CheckStyle issue the project acyclic-visitor"
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/multiton/App.java b/multiton/src/main/java/com/iluwatar/multiton/App.java\n--- a/multiton/src/main/java/com/iluwatar/multiton/App.java\n+++ b/multiton/src/main/java/com/iluwatar/multiton/App.java\n@@ -26,13 +26,13 @@\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * Whereas Singleton design pattern introduces single globally accessible object the Multiton\n+ * Whereas Singleton design pattern introduces single globally accessible object, the Multiton\n  * pattern defines many globally accessible objects. The client asks for the correct instance from\n- * the Multiton by passing an enumeration as parameter.\n+ * the Multiton by passing an enumeration as a parameter.\n  *\n  * <p>There is more than one way to implement the multiton design pattern. In the first example\n  * {@link Nazgul} is the Multiton and we can ask single {@link Nazgul} from it using {@link\n- * NazgulName}. The {@link Nazgul}s are statically initialized and stored in concurrent hash map.\n+ * NazgulName}. The {@link Nazgul}s are statically initialized and stored in a concurrent hash map.\n  *\n  * <p>In the enum implementation {@link NazgulEnum} is the multiton. It is static and mutable\n  * because of the way java supports enums.\n@@ -47,6 +47,7 @@ public class App {\n    */\n   public static void main(String[] args) {\n     // eagerly initialized multiton\n+    LOGGER.info(\"Printing out eagerly initialized multiton contents\");\n     LOGGER.info(\"KHAMUL={}\", Nazgul.getInstance(NazgulName.KHAMUL));\n     LOGGER.info(\"MURAZOR={}\", Nazgul.getInstance(NazgulName.MURAZOR));\n     LOGGER.info(\"DWAR={}\", Nazgul.getInstance(NazgulName.DWAR));\n@@ -58,6 +59,7 @@ public static void main(String[] args) {\n     LOGGER.info(\"UVATHA={}\", Nazgul.getInstance(NazgulName.UVATHA));\n \n     // enum multiton\n+    LOGGER.info(\"Printing out enum-based multiton contents\");\n     LOGGER.info(\"KHAMUL={}\", NazgulEnum.KHAMUL);\n     LOGGER.info(\"MURAZOR={}\", NazgulEnum.MURAZOR);\n     LOGGER.info(\"DWAR={}\", NazgulEnum.DWAR);\n\ndiff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n@@ -48,5 +48,4 @@ void testGetInstance() {\n       assertEquals(name, nazgul.getName());\n     }\n   }\n-\n }",
    "output": "Upgrade Multiton example Co-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/execute/around/App.java b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n@@ -23,29 +23,39 @@\n \n package com.iluwatar.execute.around;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.util.Scanner;\n+\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n- * The Execute Around idiom specifies some code to be executed before and after a method. Typically\n+ * The Execute Around idiom specifies executable code before and after a method. Typically\n  * the idiom is used when the API has methods to be executed in pairs, such as resource\n  * allocation/deallocation or lock acquisition/release.\n  *\n  * <p>In this example, we have {@link SimpleFileWriter} class that opens and closes the file for\n  * the user. The user specifies only what to do with the file by providing the {@link\n  * FileWriterAction} implementation.\n  */\n+@Slf4j\n public class App {\n \n   /**\n    * Program entry point.\n    */\n   public static void main(String[] args) throws IOException {\n \n+    // create the file writer and execute the custom action\n     FileWriterAction writeHello = writer -> {\n-      writer.write(\"Hello\");\n-      writer.append(\" \");\n-      writer.append(\"there!\");\n+      writer.write(\"Gandalf was here\");\n     };\n     new SimpleFileWriter(\"testfile.txt\", writeHello);\n+\n+    // print the file contents\n+    var scanner = new Scanner(new File(\"testfile.txt\"));\n+    while (scanner.hasNextLine()) {\n+      LOGGER.info(scanner.nextLine());\n+    }\n   }\n }\n\ndiff --git a/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n@@ -26,18 +26,24 @@\n import java.io.FileWriter;\n import java.io.IOException;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n /**\n  * SimpleFileWriter handles opening and closing file for the user. The user only has to specify what\n  * to do with the file resource through {@link FileWriterAction} parameter.\n  */\n+@Slf4j\n public class SimpleFileWriter {\n \n   /**\n    * Constructor.\n    */\n   public SimpleFileWriter(String filename, FileWriterAction action) throws IOException {\n+    LOGGER.info(\"Opening the file\");\n     try (var writer = new FileWriter(filename)) {\n+      LOGGER.info(\"Executing the action\");\n       action.writeFile(writer);\n+      LOGGER.info(\"Closing the file\");\n     }\n   }\n }",
    "output": "Execute around idiom\n* Refactor execute around the idiom\n* fix checkstyle errors\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n@@ -107,6 +107,4 @@ T trampoline(final Trampoline<T> trampoline) {\n       }\n     };\n   }\n-\n-\n }\n\ndiff --git a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n@@ -39,9 +39,9 @@ public class TrampolineApp {\n    * Main program for showing pattern. It does loop with factorial function.\n    */\n   public static void main(String[] args) {\n-    LOGGER.info(\"start pattern\");\n+    LOGGER.info(\"Start calculating war casualties\");\n     var result = loop(10, 1).result();\n-    LOGGER.info(\"result {}\", result);\n+    LOGGER.info(\"The number of orcs perished in the war: {}\", result);\n \n   }\n \n@@ -55,5 +55,4 @@ public static Trampoline<Integer> loop(int times, int prod) {\n       return Trampoline.more(() -> loop(times - 1, prod * times));\n     }\n   }\n-\n }",
    "output": "Check spelling and update topic\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/value-object/src/main/java/com/iluwatar/value/object/App.java b/value-object/src/main/java/com/iluwatar/value/object/App.java\n--- a/value-object/src/main/java/com/iluwatar/value/object/App.java\n+++ b/value-object/src/main/java/com/iluwatar/value/object/App.java\n@@ -43,14 +43,16 @@\n public class App {\n \n   /**\n-   * This practice creates three HeroStats(Value object) and checks equality between those.\n+   * This example creates three HeroStats (value objects) and checks equality between those.\n    */\n   public static void main(String[] args) {\n     var statA = HeroStat.valueOf(10, 5, 0);\n     var statB = HeroStat.valueOf(10, 5, 0);\n     var statC = HeroStat.valueOf(5, 1, 8);\n \n     LOGGER.info(statA.toString());\n+    LOGGER.info(statB.toString());\n+    LOGGER.info(statC.toString());\n \n     LOGGER.info(\"Is statA and statB equal : {}\", statA.equals(statB));\n     LOGGER.info(\"Is statA and statC equal : {}\", statA.equals(statC));\n\ndiff --git a/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java\n--- a/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java\n+++ b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java\n@@ -23,10 +23,7 @@\n \n package com.iluwatar.value.object;\n \n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.RequiredArgsConstructor;\n-import lombok.ToString;\n+import lombok.Value;\n \n /**\n  * HeroStat is a value object.\n@@ -35,23 +32,10 @@\n  *     http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\n  *     </a>\n  */\n-@Getter\n-@ToString\n-@EqualsAndHashCode\n-@RequiredArgsConstructor\n-public class HeroStat {\n-\n-  // Stats for a hero\n-\n-  private final int strength;\n-  private final int intelligence;\n-  private final int luck;\n-\n-  // Static factory method to create new instances.\n-  public static HeroStat valueOf(int strength, int intelligence, int luck) {\n-    return new HeroStat(strength, intelligence, luck);\n-  }\n-\n-  // The clone() method should not be public. Just don't override it.\n+@Value(staticConstructor = \"valueOf\")\n+class HeroStat {\n \n+  int strength;\n+  int intelligence;\n+  int luck;\n }",
    "output": "Refactor and add explanation for value object\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/factory-kit/src/main/java/com/iluwatar/factorykit/App.java b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n--- a/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n+++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n@@ -23,14 +23,16 @@\n \n package com.iluwatar.factorykit;\n \n+import java.util.ArrayList;\n+\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * Factory-kit is a creational pattern which defines a factory of immutable content with separated\n+ * Factory kit is a creational pattern that defines a factory of immutable content with separated\n  * builder and factory interfaces to deal with the problem of creating one of the objects specified\n- * directly in the factory-kit instance.\n+ * directly in the factory kit instance.\n  *\n- * <p>In the given example {@link WeaponFactory} represents the factory-kit, that contains four\n+ * <p>In the given example {@link WeaponFactory} represents the factory kit, that contains four\n  * {@link Builder}s for creating new objects of the classes implementing {@link Weapon} interface.\n  *\n  * <p>Each of them can be called with {@link WeaponFactory#create(WeaponType)} method, with\n@@ -52,7 +54,11 @@ public static void main(String[] args) {\n       builder.add(WeaponType.SPEAR, Spear::new);\n       builder.add(WeaponType.BOW, Bow::new);\n     });\n-    var axe = factory.create(WeaponType.AXE);\n-    LOGGER.info(axe.toString());\n+    var list = new ArrayList<Weapon>();\n+    list.add(factory.create(WeaponType.AXE));\n+    list.add(factory.create(WeaponType.SPEAR));\n+    list.add(factory.create(WeaponType.SWORD));\n+    list.add(factory.create(WeaponType.BOW));\n+    list.stream().forEach(weapon -> LOGGER.info(\"{}\", weapon.toString()));\n   }\n }",
    "output": "Add explanation for factory kit\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n@@ -96,9 +96,11 @@ public void start() {\n    * @throws IOException          if any I/O error occurs.\n    */\n   public void stop() throws InterruptedException, IOException {\n-    reactorMain.shutdownNow();\n+    reactorMain.shutdown();\n     selector.wakeup();\n-    reactorMain.awaitTermination(4, TimeUnit.SECONDS);\n+    if (!reactorMain.awaitTermination(4, TimeUnit.SECONDS)) {\n+      reactorMain.shutdownNow();\n+    }\n     selector.close();\n     LOGGER.info(\"Reactor stopped\");\n   }\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java b/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java\n@@ -64,6 +64,8 @@ public void onChannelReadEvent(AbstractNioChannel channel, Object readObject, Se\n   @Override\n   public void stop() throws InterruptedException {\n     executorService.shutdown();\n-    executorService.awaitTermination(4, TimeUnit.SECONDS);\n+    if (executorService.awaitTermination(4, TimeUnit.SECONDS)) {\n+      executorService.shutdownNow();\n+    }\n   }\n }",
    "output": "Optimize NioReactor stop() (Reactor Pattern) * Optimized NioReactor stop() * Optimized ThreadPoolDispatcher stop()"
  },
  {
    "input": "diff --git a/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java b/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java\n--- a/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java\n+++ b/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java\n@@ -57,9 +57,11 @@ public void run() {\n       try {\n         if (workCenter.getLeader() != null && !workCenter.getLeader().equals(this)) {\n           synchronized (workCenter) {\n-            workCenter.wait();\n+            if (workCenter.getLeader() != null && !workCenter.getLeader().equals(this)) {\n+              workCenter.wait();\n+              continue;\n+            }\n           }\n-          continue;\n         }\n         final Task task = taskSet.getTask();\n         synchronized (workCenter) {",
    "output": "Use double check to fix concurrent problem\nCo-authored-by: zhangwenhe <zhangwh@ehualu.com>"
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/factory/method/App.java b/factory-method/src/main/java/com/iluwatar/factory/method/App.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/App.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java\n@@ -41,6 +41,8 @@\n @Slf4j\n public class App {\n \n+  private static final String MANUFACTURED = \"{} manufactured {}\";\n+\n   /**\n    * Program entry point.\n    * @param args command line args\n@@ -49,14 +51,14 @@ public static void main(String[] args) {\n \n     Blacksmith blacksmith = new OrcBlacksmith();\n     Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\n-    LOGGER.info(\"{} manufactured {}\", blacksmith, weapon);\n+    LOGGER.info(MANUFACTURED, blacksmith, weapon);\n     weapon = blacksmith.manufactureWeapon(WeaponType.AXE);\n-    LOGGER.info(\"{} manufactured {}\", blacksmith, weapon);\n+    LOGGER.info(MANUFACTURED, blacksmith, weapon);\n \n     blacksmith = new ElfBlacksmith();\n     weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\n-    LOGGER.info(\"{} manufactured {}\", blacksmith, weapon);\n+    LOGGER.info(MANUFACTURED, blacksmith, weapon);\n     weapon = blacksmith.manufactureWeapon(WeaponType.AXE);\n-    LOGGER.info(\"{} manufactured {}\", blacksmith, weapon);\n+    LOGGER.info(MANUFACTURED, blacksmith, weapon);\n   }\n }",
    "output": "Sonar fix: Update App.java\n* Update App.java\nSonar issue fix\n* Update App.java"
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/strategy/App.java b/strategy/src/main/java/com/iluwatar/strategy/App.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/App.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java\n@@ -41,45 +41,49 @@\n @Slf4j\n public class App {\n \n+  private static final String RED_DRAGON_EMERGES = \"Red dragon emerges.\";\n+  private static final String GREEN_DRAGON_SPOTTED = \"Green dragon spotted ahead!\";\n+  private static final String BLACK_DRAGON_LANDS = \"Black dragon lands before you.\";\n+\n   /**\n    * Program entry point.\n    *\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n     // GoF Strategy pattern\n-    LOGGER.info(\"Green dragon spotted ahead!\");\n+    LOGGER.info(GREEN_DRAGON_SPOTTED);\n     var dragonSlayer = new DragonSlayer(new MeleeStrategy());\n     dragonSlayer.goToBattle();\n-    LOGGER.info(\"Red dragon emerges.\");\n+    LOGGER.info(RED_DRAGON_EMERGES);\n     dragonSlayer.changeStrategy(new ProjectileStrategy());\n     dragonSlayer.goToBattle();\n-    LOGGER.info(\"Black dragon lands before you.\");\n+    LOGGER.info(BLACK_DRAGON_LANDS);\n     dragonSlayer.changeStrategy(new SpellStrategy());\n     dragonSlayer.goToBattle();\n \n     // Java 8 functional implementation Strategy pattern\n-    LOGGER.info(\"Green dragon spotted ahead!\");\n+    LOGGER.info(GREEN_DRAGON_SPOTTED);\n     dragonSlayer = new DragonSlayer(\n         () -> LOGGER.info(\"With your Excalibur you severe the dragon's head!\"));\n     dragonSlayer.goToBattle();\n-    LOGGER.info(\"Red dragon emerges.\");\n+    LOGGER.info(RED_DRAGON_EMERGES);\n     dragonSlayer.changeStrategy(() -> LOGGER.info(\n         \"You shoot the dragon with the magical crossbow and it falls dead on the ground!\"));\n     dragonSlayer.goToBattle();\n-    LOGGER.info(\"Black dragon lands before you.\");\n+    LOGGER.info(BLACK_DRAGON_LANDS);\n     dragonSlayer.changeStrategy(() -> LOGGER.info(\n         \"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!\"));\n     dragonSlayer.goToBattle();\n \n     // Java 8 lambda implementation with enum Strategy pattern\n-    LOGGER.info(\"Green dragon spotted ahead!\");\n+    LOGGER.info(GREEN_DRAGON_SPOTTED);\n     dragonSlayer.changeStrategy(LambdaStrategy.Strategy.MeleeStrategy);\n     dragonSlayer.goToBattle();\n-    LOGGER.info(\"Red dragon emerges.\");\n+    LOGGER.info(RED_DRAGON_EMERGES);\n     dragonSlayer.changeStrategy(LambdaStrategy.Strategy.ProjectileStrategy);\n     dragonSlayer.goToBattle();\n-    LOGGER.info(\"Black dragon lands before you.\");\n+    LOGGER.info(BLACK_DRAGON_LANDS);\n     dragonSlayer.changeStrategy(LambdaStrategy.Strategy.SpellStrategy);\n     dragonSlayer.goToBattle();\n   }",
    "output": "Sonar fix: Update App.java"
  },
  {
    "input": "diff --git a/monitor/src/main/java/com/iluwatar/monitor/Bank.java b/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n--- a/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n+++ b/monitor/src/main/java/com/iluwatar/monitor/Bank.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar.monitor;\n+\n+import java.util.Arrays;\n+import java.util.logging.Logger;\n+\n+// Bank class implements the Monitor pattern\n+public class Bank {\n+\n+    private int[] accounts;\n+    Logger logger;\n+\n+    public Bank(int accountNum, int baseAmount, Logger logger) {\n+        this.logger = logger;\n+        accounts = new int[accountNum];\n+        Arrays.fill(accounts, baseAmount);\n+    }\n+\n+    public synchronized void transfer(int accountA, int accountB, int amount) {\n+        if (accounts[accountA] >= amount) {\n+            accounts[accountB] += amount;\n+            accounts[accountA] -= amount;\n+            logger.info(\"Transferred from account :\" + accountA + \" to account :\" + accountB + \" , amount :\" + amount + \" . balance :\" + getBalance());\n+        }\n+    }\n+\n+    public synchronized int getBalance() {\n+        int balance = 0;\n+        for (int account : accounts) {\n+            balance += account;\n+        }\n+        return balance;\n+    }\n+\n+    public int[] getAccounts() {\n+        return accounts;\n+    }\n+}\n\ndiff --git a/monitor/src/main/java/com/iluwatar/monitor/Main.java b/monitor/src/main/java/com/iluwatar/monitor/Main.java\n--- a/monitor/src/main/java/com/iluwatar/monitor/Main.java\n+++ b/monitor/src/main/java/com/iluwatar/monitor/Main.java\n@@ -0,0 +1,60 @@\n+/*\n+ * The MIT License\n+ * Copyright © 2014-2021 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.monitor;\n+\n+import java.util.*;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Logger;\n+\n+/**\n+ * <p>The Monitor pattern is used in concurrent algorithms to achieve mutual exclusion.</p>\n+ *\n+ * <p>Bank is a simple class that transfers money from an account to another account using\n+ * {@link Bank#transfer}. It can also return the balance of the bank account stored in the bank.</p>\n+ *\n+ * <p>Main class uses ThreadPool to run threads that do transactions on the bank accounts.</p>\n+ */\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        Logger logger = Logger.getLogger(\"monitor\");\n+        var bank = new Bank(4, 1000, logger);\n+        Runnable runnable = () -> {\n+            try {\n+                Thread.sleep((long) (Math.random() * 1000));\n+                Random random = new Random();\n+                for (int i = 0; i < 1000000; i++)\n+                    bank.transfer(random.nextInt(4), random.nextInt(4), (int) (Math.random() * 1000));\n+            } catch (InterruptedException e) {\n+                logger.info(e.getMessage());\n+            }\n+        };\n+        ExecutorService executorService = Executors.newFixedThreadPool(5);\n+        for (int i = 0; i < 5; i++) {\n+            executorService.execute(runnable);\n+        }\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/monitor/src/main/test/java/com/iluwater/java/BankTest.java b/monitor/src/main/test/java/com/iluwater/java/BankTest.java\n--- a/monitor/src/main/test/java/com/iluwater/java/BankTest.java\n+++ b/monitor/src/main/test/java/com/iluwater/java/BankTest.java\n@@ -0,0 +1,55 @@\n+package com.iluwater.java;\n+\n+import com.iluwatar.monitor.Bank;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n+\n+import java.util.logging.Logger;\n+\n+public class BankTest {\n+\n+    private static Bank bank;\n+    private static final int ACCOUNT_NUM = 4;\n+    private static final int BASE_AMOUNT = 1000;\n+    private static final Logger LOGGER = Logger.getLogger(\"monitor\");\n+\n+    @BeforeAll\n+    public static void Setup() {\n+        bank = new Bank(ACCOUNT_NUM, BASE_AMOUNT, LOGGER);\n+    }\n+\n+    @Test\n+    public void GetAccountHaveNotBeNull() {\n+        assertNotNull(bank.getAccounts());\n+    }\n+\n+    @Test\n+    public void LengthOfAccountsHaveToEqualsToAccountNumConstant() {\n+        assumeTrue(bank.getAccounts() != null);\n+        assertEquals(ACCOUNT_NUM, bank.getAccounts().length);\n+    }\n+\n+    @Test\n+    public void TransferMethodHaveToTransferAmountFromAnAccountToOtherAccount() {\n+        bank.transfer(0, 1, 1000);\n+        int accounts[] = bank.getAccounts();\n+        assertEquals(0, accounts[0]);\n+        assertEquals(2000, 2000);\n+    }\n+\n+    @Test\n+    public void BalanceHaveToBeOK() {\n+        assertEquals(4000, bank.getBalance());\n+    }\n+\n+\n+    @AfterAll\n+    public static void TearDown() {\n+        bank = null;\n+    }\n+\n+}",
    "output": "Add monitor design pattern\n* add monitor design pattern .\n* add extra line and change compiler version to 11 in pom.xml.\n* encapsulate getBalance method .\n* update puml file .\n* export uml as png .\n* duplicate codes eliminated .\n* update tag\n* change the format of pom.xml\n* using logger to print\n* change AtomicRefrence to type inference var\n* explanations added !\n* Update monitor/README.md\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\n* Update monitor/README.md\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\n* Update monitor/src/main/java/com/iluwatar/monitor/Main.java\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\n* Update monitor/src/main/java/com/iluwatar/monitor/Main.java\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\n* Update monitor/src/main/java/com/iluwatar/monitor/Main.java\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\n* Update monitor/src/main/java/com/iluwatar/monitor/Main.java\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\n* e.printStackTrace have changed to logger to prints standard output (STD OUT) .\n* add programmatic example .\n* Delete mvnw\n* mvnw.cmd deleted .\n* added mvnw from master\n* AddUnitTest\n* Add language to readme.md\nCo-authored-by: Subhrodip Mohanta <subhrodipmohanta@gmail.com>\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>\nCo-authored-by: Subhrodip Mohanta <subhromo@cisco.com>\nCo-authored-by: Subhrodip Mohanta <contact@subho.xyz>"
  },
  {
    "input": "diff --git a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java\n--- a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java\n+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java\n@@ -59,9 +59,12 @@\n @Slf4j\n public class App {\n \n+  private static final String ROCKET_LAUNCH_LOG_PATTERN = \"Space rocket <%s> launched successfully\";\n+\n   /**\n    * Program entry point.\n    */\n+\n   public static void main(String[] args) throws Exception {\n     // construct a new executor that will run async tasks\n     var executor = new ThreadAsyncExecutor();\n@@ -87,9 +90,9 @@ public static void main(String[] args) throws Exception {\n     asyncResult5.await();\n \n     // log the results of the tasks, callbacks log immediately when complete\n-    log(\"Space rocket <\" + result1 + \"> launch complete\");\n-    log(\"Space rocket <\" + result2 + \"> launch complete\");\n-    log(\"Space rocket <\" + result3 + \"> launch complete\");\n+    log(String.format(ROCKET_LAUNCH_LOG_PATTERN, result1));\n+    log(String.format(ROCKET_LAUNCH_LOG_PATTERN, result2));\n+    log(String.format(ROCKET_LAUNCH_LOG_PATTERN, result3));\n   }\n \n   /**\n@@ -102,7 +105,7 @@ public static void main(String[] args) throws Exception {\n   private static <T> Callable<T> lazyval(T value, long delayMillis) {\n     return () -> {\n       Thread.sleep(delayMillis);\n-      log(\"Space rocket <\" + value + \"> launched successfully\");\n+      log(String.format(ROCKET_LAUNCH_LOG_PATTERN, value));\n       return value;\n     };\n   }\n\ndiff --git a/bytecode/src/main/java/com/iluwatar/bytecode/App.java b/bytecode/src/main/java/com/iluwatar/bytecode/App.java\n--- a/bytecode/src/main/java/com/iluwatar/bytecode/App.java\n+++ b/bytecode/src/main/java/com/iluwatar/bytecode/App.java\n@@ -42,6 +42,14 @@\n @Slf4j\n public class App {\n \n+  private static final String LITERAL_0 = \"LITERAL 0\";\n+  private static final String HEALTH_PATTERN = \"%s_HEALTH\";\n+  private static final String GET_AGILITY = \"GET_AGILITY\";\n+  private static final String GET_WISDOM = \"GET_WISDOM\";\n+  private static final String ADD = \"ADD\";\n+  private static final String LITERAL_2 = \"LITERAL 2\";\n+  private static final String DIVIDE = \"DIVIDE\";\n+\n   /**\n    * Main app method.\n    *\n@@ -53,17 +61,17 @@ public static void main(String[] args) {\n         new Wizard(45, 7, 11, 0, 0),\n         new Wizard(36, 18, 8, 0, 0));\n \n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"LITERAL 0\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"LITERAL 0\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"GET_HEALTH\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"LITERAL 0\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"GET_AGILITY\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"LITERAL 0\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"GET_WISDOM\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"ADD\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"LITERAL 2\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"DIVIDE\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"ADD\"));\n-    vm.execute(InstructionConverterUtil.convertToByteCode(\"SET_HEALTH\"));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(String.format(HEALTH_PATTERN, \"GET\")));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(GET_AGILITY));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(GET_WISDOM));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(ADD));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_2));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(DIVIDE));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(ADD));\n+    vm.execute(InstructionConverterUtil.convertToByteCode(String.format(HEALTH_PATTERN, \"SET\")));\n   }\n }\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/DbManager.java b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/DbManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n@@ -50,6 +50,7 @@ public final class DbManager {\n   private static boolean useMongoDB;\n \n   private static Map<String, UserAccount> virtualDB;\n+  private static final String ERROR_MESSAGE_LOG = \"Error connecting to MongoDB\";\n \n   private DbManager() {\n   }\n@@ -85,7 +86,7 @@ public static UserAccount readFromDb(String userId) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        LOGGER.error(\"Error connecting to MongoDB\", e);\n+        LOGGER.error(ERROR_MESSAGE_LOG, e);\n       }\n     }\n     var iterable = db\n@@ -112,7 +113,7 @@ public static void writeToDb(UserAccount userAccount) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        LOGGER.error(\"Error connecting to MongoDB\", e);\n+        LOGGER.error(ERROR_MESSAGE_LOG, e);\n       }\n     }\n     db.getCollection(CachingConstants.USER_ACCOUNT).insertOne(\n@@ -134,7 +135,7 @@ public static void updateDb(UserAccount userAccount) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        LOGGER.error(\"Error connecting to MongoDB\", e);\n+        LOGGER.error(ERROR_MESSAGE_LOG, e);\n       }\n     }\n     db.getCollection(CachingConstants.USER_ACCOUNT).updateOne(\n@@ -155,7 +156,7 @@ public static void upsertDb(UserAccount userAccount) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        LOGGER.error(\"Error connecting to MongoDB\", e);\n+        LOGGER.error(ERROR_MESSAGE_LOG, e);\n       }\n     }\n     db.getCollection(CachingConstants.USER_ACCOUNT).updateOne(",
    "output": "Critical Sonar Issues\n* Resolve Sonar Code Smell: Define a constant instead of duplicating this literal 'Space rocket <' 4 times.\n* Resolve Sonar Critical Code Smell: Define a constant instead of duplicating this literal 'Error connecting to MongoDB' 4 times.\n* Fix checkstyle violation.\n* Resolve Sonar Critical Code Smell: Define a constant instead of duplicating this literal 'LITERAL 0' 4 times.\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n@@ -36,16 +36,12 @@ public final class ThreadSafeDoubleCheckLocking {\n \n   private static volatile ThreadSafeDoubleCheckLocking instance;\n \n-  private static boolean flag = true;\n-\n   /**\n    * private constructor to prevent client from instantiating.\n    */\n   private ThreadSafeDoubleCheckLocking() {\n     // to prevent instantiating by Reflection call\n-    if (flag) {\n-      flag = false;\n-    } else {\n+    if (instance != null) {\n       throw new IllegalStateException(\"Already initialized.\");\n     }\n   }\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -34,9 +34,7 @@ public final class ThreadSafeLazyLoadedIvoryTower {\n \n   private ThreadSafeLazyLoadedIvoryTower() {\n     // Protect against instantiation via reflection\n-    if (instance == null) {\n-      instance = this;\n-    } else {\n+    if (instance != null) {\n       throw new IllegalStateException(\"Already initialized.\");\n     }\n   }",
    "output": "Remove unnecessary and possibly not threadsafe flag"
  },
  {
    "input": "diff --git a/filterer/src/test/java/com/iluwatar/filterer/AppTest.java b/filterer/src/test/java/com/iluwatar/filterer/AppTest.java\n--- a/filterer/src/test/java/com/iluwatar/filterer/AppTest.java\n+++ b/filterer/src/test/java/com/iluwatar/filterer/AppTest.java\n@@ -23,11 +23,14 @@\n \n package com.iluwatar.filterer;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n \n class AppTest {\n+\n   @Test\n   void shouldLaunchApp() {\n-    App.main(new String[]{});\n+    assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n }\n\\ No newline at end of file\n\ndiff --git a/monad/src/test/java/com/iluwatar/monad/AppTest.java b/monad/src/test/java/com/iluwatar/monad/AppTest.java\n--- a/monad/src/test/java/com/iluwatar/monad/AppTest.java\n+++ b/monad/src/test/java/com/iluwatar/monad/AppTest.java\n@@ -23,16 +23,19 @@\n \n package com.iluwatar.monad;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n \n /**\n  * Application Test\n  */\n-public class AppTest {\n+\n+class AppTest {\n \n   @Test\n-  void testMain() {\n-    App.main(new String[]{});\n+  void shouldExecuteApplicationWithoutException() {\n+    assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n \n }\n\ndiff --git a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n@@ -23,16 +23,19 @@\n \n package com.iluwatar.monostate;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n \n /**\n  * Application Test Entry\n  */\n-public class AppTest {\n+\n+class AppTest {\n \n   @Test\n-  void testMain() {\n-    App.main(new String[]{});\n+  void shouldExecuteApplicationWithoutException() {\n+    assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n \n }\n\ndiff --git a/multiton/src/test/java/com/iluwatar/multiton/AppTest.java b/multiton/src/test/java/com/iluwatar/multiton/AppTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/AppTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/AppTest.java\n@@ -23,15 +23,18 @@\n \n package com.iluwatar.multiton;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n \n /**\n- * Application test\n+ * Test if the application starts without throwing an exception.\n  */\n-public class AppTest {\n+\n+class AppTest {\n \n   @Test\n-  void test() {\n-    App.main(new String[]{});\n+  void shouldExecuteApplicationWithoutException() {\n+    assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n }\n\ndiff --git a/object-pool/src/test/java/com/iluwatar/object/pool/AppTest.java b/object-pool/src/test/java/com/iluwatar/object/pool/AppTest.java\n--- a/object-pool/src/test/java/com/iluwatar/object/pool/AppTest.java\n+++ b/object-pool/src/test/java/com/iluwatar/object/pool/AppTest.java\n@@ -23,6 +23,8 @@\n \n package com.iluwatar.object.pool;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -34,6 +36,6 @@ class AppTest {\n \n   @Test\n   void shouldExecuteApplicationWithoutException() {\n-    App.main(new String[]{});\n+    assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n }\n\ndiff --git a/parameter-object/src/test/java/com/iluwatar/parameter/object/AppTest.java b/parameter-object/src/test/java/com/iluwatar/parameter/object/AppTest.java\n--- a/parameter-object/src/test/java/com/iluwatar/parameter/object/AppTest.java\n+++ b/parameter-object/src/test/java/com/iluwatar/parameter/object/AppTest.java\n@@ -23,19 +23,16 @@\n \n package com.iluwatar.parameter.object;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Application test\n  */\n class AppTest {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(AppTest.class);\n-\n   @Test\n   void shouldExecuteApplicationWithoutException() {\n-    App.main(new String[]{});\n-    LOGGER.info(\"Executed successfully without exception.\");\n+    assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n }\n\ndiff --git a/saga/src/test/java/com/iluwatar/saga/orchestration/SagaApplicationTest.java b/saga/src/test/java/com/iluwatar/saga/orchestration/SagaApplicationTest.java\n--- a/saga/src/test/java/com/iluwatar/saga/orchestration/SagaApplicationTest.java\n+++ b/saga/src/test/java/com/iluwatar/saga/orchestration/SagaApplicationTest.java\n@@ -23,15 +23,17 @@\n \n package com.iluwatar.saga.orchestration;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n import org.junit.jupiter.api.Test;\n \n /**\n- * empty test\n+ * Test if the application starts without throwing an exception.\n  */\n class SagaApplicationTest {\n \n   @Test\n-  void mainTest() {\n-    SagaApplication.main(new String[]{});\n+  void shouldExecuteApplicationWithoutException() {\n+    assertDoesNotThrow(() -> SagaApplication.main(new String[]{}));\n   }\n }",
    "output": "Resolve Sonar report: missing assertions in several AppTest classes\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/bridge/src/main/java/com/iluwatar/bridge/Hammer.java b/bridge/src/main/java/com/iluwatar/bridge/Hammer.java\n--- a/bridge/src/main/java/com/iluwatar/bridge/Hammer.java\n+++ b/bridge/src/main/java/com/iluwatar/bridge/Hammer.java\n@@ -43,7 +43,7 @@ public void wield() {\n \n   @Override\n   public void swing() {\n-    LOGGER.info(\"The hammer is swinged.\");\n+    LOGGER.info(\"The hammer is swung.\");\n     enchantment.apply();\n   }\n \n\ndiff --git a/bridge/src/main/java/com/iluwatar/bridge/Sword.java b/bridge/src/main/java/com/iluwatar/bridge/Sword.java\n--- a/bridge/src/main/java/com/iluwatar/bridge/Sword.java\n+++ b/bridge/src/main/java/com/iluwatar/bridge/Sword.java\n@@ -43,7 +43,7 @@ public void wield() {\n \n   @Override\n   public void swing() {\n-    LOGGER.info(\"The sword is swinged.\");\n+    LOGGER.info(\"The sword is swung.\");\n     enchantment.apply();\n   }\n ",
    "output": "Change 'swinged' to 'swung' in sword.java and hammer.java of bridge pattern\n* minor (non-coding) change\n* Update Sword.java"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/App.java b/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n@@ -131,9 +131,10 @@ public void start() throws IOException {\n      * log requests.\n      */\n     reactor\n-        .registerChannel(tcpChannel(6666, loggingHandler))\n-        .registerChannel(tcpChannel(6667, loggingHandler))\n-        .registerChannel(udpChannel(6668, loggingHandler))\n+        .registerChannel(tcpChannel(16666, loggingHandler))\n+        .registerChannel(tcpChannel(16667, loggingHandler))\n+        .registerChannel(udpChannel(16668, loggingHandler))\n+        .registerChannel(udpChannel(16669, loggingHandler))\n         .start();\n   }\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n@@ -63,10 +63,10 @@ public static void main(String[] args) throws IOException {\n    */\n   public void start() throws IOException {\n     LOGGER.info(\"Starting logging clients\");\n-    service.execute(new TcpLoggingClient(\"Client 1\", 6666));\n-    service.execute(new TcpLoggingClient(\"Client 2\", 6667));\n-    service.execute(new UdpLoggingClient(\"Client 3\", 6668));\n-    service.execute(new UdpLoggingClient(\"Client 4\", 6668));\n+    service.execute(new TcpLoggingClient(\"Client 1\", 16666));\n+    service.execute(new TcpLoggingClient(\"Client 2\", 16667));\n+    service.execute(new UdpLoggingClient(\"Client 3\", 16668));\n+    service.execute(new UdpLoggingClient(\"Client 4\", 16669));\n   }\n \n   /**\n@@ -114,7 +114,7 @@ public TcpLoggingClient(String clientName, int serverPort) {\n \n     @Override\n     public void run() {\n-      try (Socket socket = new Socket(InetAddress.getLocalHost(), serverPort)) {\n+      try (var socket = new Socket(InetAddress.getLocalHost(), serverPort)) {\n         var outputStream = socket.getOutputStream();\n         var writer = new PrintWriter(outputStream);\n         sendLogRequests(writer, socket.getInputStream());",
    "output": "Upgrade with neccessary changes"
  },
  {
    "input": "diff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n@@ -25,7 +25,8 @@\n \n import static org.junit.jupiter.api.Assertions.assertSame;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n \n /**\n  * @author anthony\n@@ -37,15 +38,14 @@ class NazgulEnumTest {\n    * Check that multiple calls to any one of the instances in the multiton returns\n    * only that one particular instance, and do that for all instances in multiton\n    */\n-  @Test\n-  void testTheSameObjectIsReturnedWithMultipleCalls() {\n-    for (var i = 0; i < NazgulEnum.values().length; i++) {\n-      var instance1 = NazgulEnum.values()[i];\n-      var instance2 = NazgulEnum.values()[i];\n-      var instance3 = NazgulEnum.values()[i];\n-      assertSame(instance1, instance2);\n-      assertSame(instance1, instance3);\n-      assertSame(instance2, instance3);\n-    }\n+  @ParameterizedTest\n+  @EnumSource\n+  void testTheSameObjectIsReturnedWithMultipleCalls(NazgulEnum nazgulEnum) {\n+    var instance1 = nazgulEnum;\n+    var instance2 = nazgulEnum;\n+    var instance3 = nazgulEnum;\n+    assertSame(instance1, instance2);\n+    assertSame(instance1, instance3);\n+    assertSame(instance2, instance3);\n   }\n }",
    "output": "Add parameterization to enumeration test Signed-off-by: Elvys Soares <eas5@cin.ufpe.br> Co-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/AppManager.java b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/AppManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n@@ -25,6 +25,7 @@\n \n import java.text.ParseException;\n import java.util.Optional;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * AppManager helps to bridge the gap in communication between the main class and the application's\n@@ -33,6 +34,7 @@\n  * Depending on the chosen caching policy, AppManager will call the appropriate function in the\n  * CacheStore class.\n  */\n+@Slf4j\n public final class AppManager {\n \n   private static CachingPolicy cachingPolicy;\n@@ -50,7 +52,7 @@ public static void initDb(boolean useMongoDb) {\n       try {\n         DbManager.connect();\n       } catch (ParseException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"Error connecting to MongoDB\", e);\n       }\n     } else {\n       DbManager.createVirtualDb();\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/DbManager.java b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/DbManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n@@ -30,6 +30,7 @@\n import java.text.ParseException;\n import java.util.HashMap;\n import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n import org.bson.Document;\n \n /**\n@@ -41,6 +42,7 @@\n  * underlying data storage (connect()) or a simple Java data structure to (temporarily) store the\n  * data/objects during runtime (createVirtualDB()).</p>\n  */\n+@Slf4j\n public final class DbManager {\n \n   private static MongoClient mongoClient;\n@@ -83,7 +85,7 @@ public static UserAccount readFromDb(String userId) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"Error connecting to MongoDB\", e);\n       }\n     }\n     var iterable = db\n@@ -110,7 +112,7 @@ public static void writeToDb(UserAccount userAccount) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"Error connecting to MongoDB\", e);\n       }\n     }\n     db.getCollection(CachingConstants.USER_ACCOUNT).insertOne(\n@@ -132,7 +134,7 @@ public static void updateDb(UserAccount userAccount) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"Error connecting to MongoDB\", e);\n       }\n     }\n     db.getCollection(CachingConstants.USER_ACCOUNT).updateOne(\n@@ -153,7 +155,7 @@ public static void upsertDb(UserAccount userAccount) {\n       try {\n         connect();\n       } catch (ParseException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"Error connecting to MongoDB\", e);\n       }\n     }\n     db.getCollection(CachingConstants.USER_ACCOUNT).updateOne(",
    "output": "Add explanation for caching pattern\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/balking/src/main/java/com/iluwatar/balking/App.java b/balking/src/main/java/com/iluwatar/balking/App.java\n--- a/balking/src/main/java/com/iluwatar/balking/App.java\n+++ b/balking/src/main/java/com/iluwatar/balking/App.java\n@@ -32,11 +32,11 @@\n  * then the method will return without doing anything. Objects that use this pattern are generally\n  * only in a state that is prone to balking temporarily but for an unknown amount of time\n  *\n- * <p>In this example implementation WashingMachine is an object that has two states in which it\n- * can be: ENABLED and WASHING. If the machine is ENABLED the state is changed into WASHING that any\n- * other thread can't invoke this action on this and then do the job. On the other hand if it have\n- * been already washing and any other thread execute wash() it can't do that once again and returns\n- * doing nothing.\n+ * <p>In this example implementation, {@link WashingMachine} is an object that has two states in\n+ * which it can be: ENABLED and WASHING. If the machine is ENABLED, the state changes to WASHING\n+ * using a thread-safe method. On the other hand, if it already has been washing and any other\n+ * thread executes {@link WashingMachine#wash()} it won't do that and returns without doing\n+ * anything.\n  */\n @Slf4j\n public class App {\n@@ -54,11 +54,12 @@ public static void main(String... args) {\n     }\n     executorService.shutdown();\n     try {\n-      executorService.awaitTermination(10, TimeUnit.SECONDS);\n+      if (!executorService.awaitTermination(10, TimeUnit.SECONDS)) {\n+        executorService.shutdownNow();\n+      }\n     } catch (InterruptedException ie) {\n       LOGGER.error(\"ERROR: Waiting on executor service shutdown!\");\n       Thread.currentThread().interrupt();\n     }\n   }\n-\n }",
    "output": "Add explanation for balking pattern\n* explanation for balking pattern\n* fix checkstyle error\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java\n--- a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java\n+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java\n@@ -27,10 +27,12 @@\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * This application demonstrates the async method invocation pattern. Key parts of the pattern are\n- * <code>AsyncResult</code> which is an intermediate container for an asynchronously evaluated\n- * value, <code>AsyncCallback</code> which can be provided to be executed on task completion and\n- * <code>AsyncExecutor</code> that manages the execution of the async tasks.\n+ * In this example, we are launching space rockets and deploying lunar rovers.\n+ *\n+ * <p>The application demonstrates the async method invocation pattern. The key parts of the\n+ * pattern are <code>AsyncResult</code> which is an intermediate container for an asynchronously\n+ * evaluated value, <code>AsyncCallback</code> which can be provided to be executed on task\n+ * completion and <code>AsyncExecutor</code> that manages the execution of the async tasks.\n  *\n  * <p>The main method shows example flow of async invocations. The main thread starts multiple\n  * tasks with variable durations and then continues its own work. When the main thread has done it's\n@@ -68,13 +70,14 @@ public static void main(String[] args) throws Exception {\n     final var asyncResult1 = executor.startProcess(lazyval(10, 500));\n     final var asyncResult2 = executor.startProcess(lazyval(\"test\", 300));\n     final var asyncResult3 = executor.startProcess(lazyval(50L, 700));\n-    final var asyncResult4 = executor.startProcess(lazyval(20, 400), callback(\"Callback result 4\"));\n+    final var asyncResult4 = executor.startProcess(lazyval(20, 400),\n+        callback(\"Deploying lunar rover\"));\n     final var asyncResult5 =\n-        executor.startProcess(lazyval(\"callback\", 600), callback(\"Callback result 5\"));\n+        executor.startProcess(lazyval(\"callback\", 600), callback(\"Deploying lunar rover\"));\n \n     // emulate processing in the current thread while async tasks are running in their own threads\n-    Thread.sleep(350); // Oh boy I'm working hard here\n-    log(\"Some hard work done\");\n+    Thread.sleep(350); // Oh boy, we are working hard here\n+    log(\"Mission command is sipping coffee\");\n \n     // wait for completion of the tasks\n     final var result1 = executor.endProcess(asyncResult1);\n@@ -84,9 +87,9 @@ public static void main(String[] args) throws Exception {\n     asyncResult5.await();\n \n     // log the results of the tasks, callbacks log immediately when complete\n-    log(\"Result 1: \" + result1);\n-    log(\"Result 2: \" + result2);\n-    log(\"Result 3: \" + result3);\n+    log(\"Space rocket <\" + result1 + \"> launch complete\");\n+    log(\"Space rocket <\" + result2 + \"> launch complete\");\n+    log(\"Space rocket <\" + result3 + \"> launch complete\");\n   }\n \n   /**\n@@ -99,7 +102,7 @@ public static void main(String[] args) throws Exception {\n   private static <T> Callable<T> lazyval(T value, long delayMillis) {\n     return () -> {\n       Thread.sleep(delayMillis);\n-      log(\"Task completed with: \" + value);\n+      log(\"Space rocket <\" + value + \"> launched successfully\");\n       return value;\n     };\n   }\n@@ -115,7 +118,7 @@ private static <T> AsyncCallback<T> callback(String name) {\n       if (ex.isPresent()) {\n         log(name + \" failed: \" + ex.map(Exception::getMessage).orElse(\"\"));\n       } else {\n-        log(name + \": \" + value);\n+        log(name + \" <\" + value + \">\");\n       }\n     };\n   }",
    "output": "Add explanation to Async Method Invocation pattern\n* make the example more interesting and add an explanation\n* fix checkstyle\nCo-authored-by: Subhrodip Mohanta <hello@subho.xyz>"
  },
  {
    "input": "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java\n--- a/.mvn/wrapper/MavenWrapperDownloader.java\n+++ b/.mvn/wrapper/MavenWrapperDownloader.java\n@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n+            String username = System.getenv(\"MVNW_USERNAME\");\n+            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n+            Authenticator.setDefault(new Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                    return new PasswordAuthentication(username, password);\n+                }\n+            });\n+        }\n+        URL website = new URL(urlString);\n+        ReadableByteChannel rbc;\n+        rbc = Channels.newChannel(website.openStream());\n+        FileOutputStream fos = new FileOutputStream(destination);\n+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n+        fos.close();\n+        rbc.close();\n+    }\n+\n+}",
    "output": "Add maven wrapper Addresses Point 1 and 2"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n--- a/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n+++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n@@ -67,7 +67,7 @@ public DbCustomerDao(DataSource dataSource) {\n   public Stream<Customer> getAll() throws Exception {\n     try {\n       var connection = getConnection();\n-      var statement = connection.prepareStatement(\"SELECT * FROM CUSTOMERS\");\n+      var statement = connection.prepareStatement(\"SELECT * FROM CUSTOMERS\"); // NOSONAR\n       var resultSet = statement.executeQuery(); // NOSONAR\n       return StreamSupport.stream(new Spliterators.AbstractSpliterator<Customer>(Long.MAX_VALUE,\n           Spliterator.ORDERED) {\n\ndiff --git a/special-case/src/main/java/com/iluwatar/specialcase/Db.java b/special-case/src/main/java/com/iluwatar/specialcase/Db.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/Db.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/Db.java\n@@ -38,16 +38,13 @@ public class Db {\n    *\n    * @return singleton instance of Db class\n    */\n-  public static Db getInstance() {\n+  public static synchronized Db getInstance() {\n     if (instance == null) {\n-      synchronized (Db.class) {\n-        if (instance == null) {\n-          instance = new Db();\n-          instance.userName2User = new HashMap<>();\n-          instance.user2Account = new HashMap<>();\n-          instance.itemName2Product = new HashMap<>();\n-        }\n-      }\n+      Db newInstance = new Db();\n+      newInstance.userName2User = new HashMap<>();\n+      newInstance.user2Account = new HashMap<>();\n+      newInstance.itemName2Product = new HashMap<>();\n+      instance = newInstance;\n     }\n     return instance;\n   }\n\ndiff --git a/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java b/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java\n--- a/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java\n+++ b/special-case/src/main/java/com/iluwatar/specialcase/MaintenanceLock.java\n@@ -38,13 +38,9 @@ public class MaintenanceLock {\n    *\n    * @return singleton instance of MaintenanceLock\n    */\n-  public static MaintenanceLock getInstance() {\n+  public static synchronized MaintenanceLock getInstance() {\n     if (instance == null) {\n-      synchronized (MaintenanceLock.class) {\n-        if (instance == null) {\n-          instance = new MaintenanceLock();\n-        }\n-      }\n+      instance = new MaintenanceLock();\n     }\n     return instance;\n   }\n@@ -55,6 +51,6 @@ public boolean isLock() {\n \n   public void setLock(boolean lock) {\n     this.lock = lock;\n-    LOGGER.info(\"Maintenance lock is set to: \" + lock);\n+    LOGGER.info(\"Maintenance lock is set to: \", lock);\n   }\n }\n\ndiff --git a/transaction-script/src/main/java/com/iluwatar/transactionscript/HotelDaoImpl.java b/transaction-script/src/main/java/com/iluwatar/transactionscript/HotelDaoImpl.java\n--- a/transaction-script/src/main/java/com/iluwatar/transactionscript/HotelDaoImpl.java\n+++ b/transaction-script/src/main/java/com/iluwatar/transactionscript/HotelDaoImpl.java\n@@ -49,7 +49,7 @@ public HotelDaoImpl(DataSource dataSource) {\n   public Stream<Room> getAll() throws Exception {\n     try {\n       var connection = getConnection();\n-      var statement = connection.prepareStatement(\"SELECT * FROM ROOMS\");\n+      var statement = connection.prepareStatement(\"SELECT * FROM ROOMS\"); // NOSONAR\n       var resultSet = statement.executeQuery(); // NOSONAR\n       return StreamSupport.stream(new Spliterators.AbstractSpliterator<Room>(Long.MAX_VALUE,\n           Spliterator.ORDERED) {",
    "output": "Clearing Sonar Blockers\n* update gitignore\n.checkstyle files are being tracked which should not be\n* NOSONAR for statement\nexcluded from SONAR analysis as it is already dealt using functional approach\nhttps://sonarcloud.io/project/issues?id=iluwatar_java-design-patterns&issues=AW8FwRBhm8eoEVQR-x0f&open=AW8FwRBhm8eoEVQR-x0f\n* achieved thread safety with lazy initialization\nhttps://sonarcloud.io/project/issues?fileUuids=AXb6t0PKusn4P8Tm-LmM&id=iluwatar_java-design-patterns&open=AXb6t19yusn4P8Tm-Lmo&resolved=false\n* remove double checked locking and initialize before using\nhttps://sonarcloud.io/project/issues?fileUuids=AXb6t0PKusn4P8Tm-LmK&id=iluwatar_java-design-patterns&open=AXb6t19qusn4P8Tm-Lmk&resolved=false\n* NOSONAR for the line\nhttps://sonarcloud.io/project/issues?id=iluwatar_java-design-patterns&issues=AXPd3iSe46HRSze7cz3D&open=AXPd3iSe46HRSze7cz3D\nCo-authored-by: Ilkka Seppälä <iluwatar@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/strategy/App.java b/strategy/src/main/java/com/iluwatar/strategy/App.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/App.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java\n@@ -45,7 +45,7 @@ public class App {\n   \n   /**\n    * Program entry point.\n-   * \n+   *\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n@@ -60,7 +60,7 @@ public static void main(String[] args) {\n     dragonSlayer.changeStrategy(new SpellStrategy());\n     dragonSlayer.goToBattle();\n \n-    // Java 8 Strategy pattern\n+    // Java 8 functional implementation Strategy pattern\n     LOGGER.info(\"Green dragon spotted ahead!\");\n     dragonSlayer = new DragonSlayer(\n         () -> LOGGER.info(\"With your Excalibur you severe the dragon's head!\"));\n@@ -73,5 +73,16 @@ public static void main(String[] args) {\n     dragonSlayer.changeStrategy(() -> LOGGER.info(\n         \"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!\"));\n     dragonSlayer.goToBattle();\n+\n+    // Java 8 lambda implementation with enum Strategy pattern\n+    LOGGER.info(\"Green dragon spotted ahead!\");\n+    dragonSlayer.changeStrategy(LambdaStrategy.Strategy.MeleeStrategy);\n+    dragonSlayer.goToBattle();\n+    LOGGER.info(\"Red dragon emerges.\");\n+    dragonSlayer.changeStrategy(LambdaStrategy.Strategy.ProjectileStrategy);\n+    dragonSlayer.goToBattle();\n+    LOGGER.info(\"Black dragon lands before you.\");\n+    dragonSlayer.changeStrategy(LambdaStrategy.Strategy.SpellStrategy);\n+    dragonSlayer.goToBattle();\n   }\n }\n\ndiff --git a/strategy/src/main/java/com/iluwatar/strategy/LambdaStrategy.java b/strategy/src/main/java/com/iluwatar/strategy/LambdaStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/LambdaStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/LambdaStrategy.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar.strategy;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LambdaStrategy {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LambdaStrategy.class);\n+\n+  public enum Strategy implements DragonSlayingStrategy {\n+    MeleeStrategy(() -> LOGGER.info(\n+        \"With your Excalibur you severe the dragon's head!\")),\n+    ProjectileStrategy(() -> LOGGER.info(\n+        \"You shoot the dragon with the magical crossbow and it falls dead on the ground!\")),\n+    SpellStrategy(() -> LOGGER.info(\n+        \"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!\"));\n+\n+    private final DragonSlayingStrategy dragonSlayingStrategy;\n+\n+    Strategy(DragonSlayingStrategy dragonSlayingStrategy) {\n+      this.dragonSlayingStrategy = dragonSlayingStrategy;\n+    }\n+\n+    @Override\n+    public void execute() {\n+      dragonSlayingStrategy.execute();\n+    }\n+  }\n+}",
    "output": "Add lambda expressions implementation for Strategy Pattern\n* Add Strategy Pattern lambda implementation\nAfter Java 8.\nAlso take advantage of enum\n* Update class diagrams\n* Update README.md\nAdd lambda programmatic example\n* Remove unused imports\nCo-authored-by: Subhrodip Mohanta <subhrodipmohanta@gmail.com>"
  },
  {
    "input": "diff --git a/registry/src/main/java/com/iluwatar/registry/App.java b/registry/src/main/java/com/iluwatar/registry/App.java\n--- a/registry/src/main/java/com/iluwatar/registry/App.java\n+++ b/registry/src/main/java/com/iluwatar/registry/App.java\n@@ -0,0 +1,27 @@\n+package com.iluwatar.registry;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class App {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n+\n+  /**\n+   * Program entry point.\n+   *\n+   * @param args command line args\n+   */\n+  public static void main(String[] args) {\n+    CustomerRegistry customerRegistry = CustomerRegistry.getInstance();\n+    var john = new Customer(\"1\", \"John\");\n+    customerRegistry.addCustomer(john);\n+\n+    var julia = new Customer(\"2\", \"Julia\");\n+    customerRegistry.addCustomer(julia);\n+\n+    LOGGER.info(\"John {}\", customerRegistry.getCustomer(\"1\"));\n+    LOGGER.info(\"Julia {}\", customerRegistry.getCustomer(\"2\"));\n+  }\n+\n+}\n\ndiff --git a/registry/src/main/java/com/iluwatar/registry/Customer.java b/registry/src/main/java/com/iluwatar/registry/Customer.java\n--- a/registry/src/main/java/com/iluwatar/registry/Customer.java\n+++ b/registry/src/main/java/com/iluwatar/registry/Customer.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar.registry;\n+\n+public class Customer {\n+\n+  private final String id;\n+  private final String name;\n+\n+  public Customer(String id, String name) {\n+    this.id = id;\n+    this.name = name;\n+  }\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"Customer{\"\n+        + \"id='\" + id + '\\''\n+        + \", name='\" + name + '\\''\n+        + '}';\n+  }\n+}\n\ndiff --git a/registry/src/main/java/com/iluwatar/registry/CustomerRegistry.java b/registry/src/main/java/com/iluwatar/registry/CustomerRegistry.java\n--- a/registry/src/main/java/com/iluwatar/registry/CustomerRegistry.java\n+++ b/registry/src/main/java/com/iluwatar/registry/CustomerRegistry.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar.registry;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public final class CustomerRegistry {\n+\n+  private static final CustomerRegistry instance = new CustomerRegistry();\n+\n+  public static CustomerRegistry getInstance() {\n+    return instance;\n+  }\n+\n+  private final Map<String, Customer> customerMap;\n+\n+  private CustomerRegistry() {\n+    customerMap = new ConcurrentHashMap<>();\n+  }\n+\n+  public Customer addCustomer(Customer customer) {\n+    return customerMap.put(customer.getId(), customer);\n+  }\n+\n+  public Customer getCustomer(String id) {\n+    return customerMap.get(id);\n+  }\n+\n+}\n\ndiff --git a/registry/src/test/java/com/iluwatar/registry/CustomerRegistryTest.java b/registry/src/test/java/com/iluwatar/registry/CustomerRegistryTest.java\n--- a/registry/src/test/java/com/iluwatar/registry/CustomerRegistryTest.java\n+++ b/registry/src/test/java/com/iluwatar/registry/CustomerRegistryTest.java\n@@ -0,0 +1,44 @@\n+package com.iluwatar.registry;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class CustomerRegistryTest {\n+\n+  private static CustomerRegistry customerRegistry;\n+\n+  @BeforeAll\n+  public static void setUp() {\n+    customerRegistry = CustomerRegistry.getInstance();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToAddAndQueryCustomerObjectFromRegistry() {\n+    Customer john = new Customer(\"1\", \"john\");\n+    Customer julia = new Customer(\"2\", \"julia\");\n+\n+    customerRegistry.addCustomer(john);\n+    customerRegistry.addCustomer(julia);\n+\n+    Customer customerWithId1 = customerRegistry.getCustomer(\"1\");\n+    assertNotNull(customerWithId1);\n+    assertEquals(\"1\", customerWithId1.getId());\n+    assertEquals(\"john\", customerWithId1.getName());\n+\n+    Customer customerWithId2 = customerRegistry.getCustomer(\"2\");\n+    assertNotNull(customerWithId2);\n+    assertEquals(\"2\", customerWithId2.getId());\n+    assertEquals(\"julia\", customerWithId2.getName());\n+  }\n+\n+  @Test\n+  public void shouldReturnNullWhenQueriedCustomerIsNotInRegistry() {\n+    Customer customerWithId5 = customerRegistry.getCustomer(\"5\");\n+    assertNull(customerWithId5);\n+  }\n+\n+}",
    "output": "Implement Registry pattern * Implemented registry pattern * fixed parent pom version * added empty line in registry.urm.puml Co-authored-by: Subhrodip Mohanta <subhrodipmohanta@gmail.com>"
  },
  {
    "input": "diff --git a/version-number/src/main/java/com/iluwatar/versionnumber/App.java b/version-number/src/main/java/com/iluwatar/versionnumber/App.java\n--- a/version-number/src/main/java/com/iluwatar/versionnumber/App.java\n+++ b/version-number/src/main/java/com/iluwatar/versionnumber/App.java\n@@ -53,17 +53,17 @@ public static void main(String[] args) throws\n       BookDuplicateException,\n       BookNotFoundException,\n       VersionMismatchException {\n-    long bookId = 1;\n+    var bookId = 1;\n \n-    BookRepository bookRepository = new BookRepository();\n-    Book book = new Book();\n+    var bookRepository = new BookRepository();\n+    var book = new Book();\n     book.setId(bookId);\n     bookRepository.add(book); // adding a book with empty title and author\n     LOGGER.info(\"An empty book with version {} was added to repository\", book.getVersion());\n \n     // Alice and Bob took the book concurrently\n-    final Book aliceBook = bookRepository.get(bookId);\n-    final Book bobBook = bookRepository.get(bookId);\n+    final var aliceBook = bookRepository.get(bookId);\n+    final var bobBook = bookRepository.get(bookId);\n \n     aliceBook.setTitle(\"Kama Sutra\"); // Alice has updated book title\n     bookRepository.update(aliceBook); // and successfully saved book in database\n\ndiff --git a/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java b/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java\n--- a/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java\n+++ b/version-number/src/main/java/com/iluwatar/versionnumber/BookRepository.java\n@@ -56,7 +56,7 @@ public void update(Book book) throws BookNotFoundException, VersionMismatchExcep\n       throw new BookNotFoundException(\"Not found book with id: \" + book.getId());\n     }\n \n-    Book latestBook = collection.get(book.getId());\n+    var latestBook = collection.get(book.getId());\n     if (book.getVersion() != latestBook.getVersion()) {\n       throw new VersionMismatchException(\n         \"Tried to update stale version \" + book.getVersion()\n\ndiff --git a/version-number/src/test/java/com/iluwatar/versionnumber/BookRepositoryTest.java b/version-number/src/test/java/com/iluwatar/versionnumber/BookRepositoryTest.java\n--- a/version-number/src/test/java/com/iluwatar/versionnumber/BookRepositoryTest.java\n+++ b/version-number/src/test/java/com/iluwatar/versionnumber/BookRepositoryTest.java\n@@ -33,17 +33,17 @@\n class BookRepositoryTest {\n   @Test\n   void testBookRepository() throws BookDuplicateException, BookNotFoundException, VersionMismatchException {\n-    final long bookId = 1;\n+    final var bookId = 1;\n \n-    BookRepository bookRepository = new BookRepository();\n-    Book book = new Book();\n+    var bookRepository = new BookRepository();\n+    var book = new Book();\n     book.setId(bookId);\n     bookRepository.add(book);\n \n     assertEquals(0, book.getVersion());\n \n-    final Book aliceBook = bookRepository.get(bookId);\n-    final Book bobBook = bookRepository.get(bookId);\n+    final var aliceBook = bookRepository.get(bookId);\n+    final var bobBook = bookRepository.get(bookId);\n \n     assertEquals(aliceBook.getTitle(), bobBook.getTitle());\n     assertEquals(aliceBook.getAuthor(), bobBook.getAuthor());",
    "output": "Use local variable inference"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/command/Goblin.java b/command/src/main/java/com/iluwatar/command/Goblin.java\n--- a/command/src/main/java/com/iluwatar/command/Goblin.java\n+++ b/command/src/main/java/com/iluwatar/command/Goblin.java\n@@ -23,16 +23,11 @@\n \n package com.iluwatar.command;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * Goblin is the target of the spells.\n  */\n public class Goblin extends Target {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Goblin.class);\n-\n   public Goblin() {\n     setSize(Size.NORMAL);\n     setVisibility(Visibility.VISIBLE);\n\ndiff --git a/command/src/main/java/com/iluwatar/command/Wizard.java b/command/src/main/java/com/iluwatar/command/Wizard.java\n--- a/command/src/main/java/com/iluwatar/command/Wizard.java\n+++ b/command/src/main/java/com/iluwatar/command/Wizard.java\n@@ -25,16 +25,12 @@\n \n import java.util.Deque;\n import java.util.LinkedList;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Wizard is the invoker of the commands.\n  */\n public class Wizard {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Wizard.class);\n-\n   private final Deque<Runnable> undoStack = new LinkedList<>();\n   private final Deque<Runnable> redoStack = new LinkedList<>();\n ",
    "output": "Remove unused logger objects"
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/SpaceStationMir.java b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/SpaceStationMir.java\n--- a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/SpaceStationMir.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/SpaceStationMir.java\n@@ -45,7 +45,7 @@ public void collision(GameObject gameObject) {\n \n   @Override\n   public void collisionResolve(FlamingAsteroid asteroid) {\n-    LOGGER.info(AppConstants.HITS, \" {} is damaged! {} is set on fire!\", asteroid.getClass()\n+    LOGGER.info(AppConstants.HITS + \" {} is damaged! {} is set on fire!\", asteroid.getClass()\n             .getSimpleName(),\n         this.getClass().getSimpleName(), this.getClass().getSimpleName(), this.getClass()\n             .getSimpleName());\n@@ -55,14 +55,14 @@ public void collisionResolve(FlamingAsteroid asteroid) {\n \n   @Override\n   public void collisionResolve(Meteoroid meteoroid) {\n-    LOGGER.info(AppConstants.HITS, \" {} is damaged!\", meteoroid.getClass().getSimpleName(),\n+    LOGGER.info(AppConstants.HITS + \" {} is damaged!\", meteoroid.getClass().getSimpleName(),\n         this.getClass().getSimpleName(), this.getClass().getSimpleName());\n     setDamaged(true);\n   }\n \n   @Override\n   public void collisionResolve(SpaceStationMir mir) {\n-    LOGGER.info(AppConstants.HITS, \" {} is damaged!\", mir.getClass().getSimpleName(),\n+    LOGGER.info(AppConstants.HITS + \" {} is damaged!\", mir.getClass().getSimpleName(),\n         this.getClass().getSimpleName(), this.getClass().getSimpleName());\n     setDamaged(true);\n   }",
    "output": "Fix SpaceStationMir logging"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n@@ -98,12 +98,12 @@ public T get() {\n         return trampoline(this);\n       }\n \n-      T trampoline(final Trampoline<T> trampoline) {\n+      private T trampoline(final Trampoline<T> trampoline) {\n         return Stream.iterate(trampoline, Trampoline::jump)\n             .filter(Trampoline::complete)\n             .findFirst()\n             .map(Trampoline::result)\n-            .orElseThrow();\n+            .get();\n       }\n     };\n   }\n\ndiff --git a/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n--- a/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n+++ b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n@@ -23,10 +23,9 @@\n \n package com.iluwatar.trampoline;\n \n-import static org.junit.Assert.assertEquals;\n-\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import org.junit.jupiter.api.Test;\n \n /**\n  * Test for trampoline pattern.\n@@ -37,7 +36,7 @@ public class TrampolineAppTest {\n   @Test\n   public void testTrampolineWithFactorialFunction() {\n     long result = TrampolineApp.loop(10, 1).result();\n-    assertEquals(\"Be equal\", 3628800, result);\n+    assertEquals(3_628_800, result);\n   }\n \n }\n\\ No newline at end of file",
    "output": "Issue 1500 - using Junit 5 and resolved a build issue"
  },
  {
    "input": "diff --git a/separated-interface/src/main/java/com/iluwatar/separatedinterface/App.java b/separated-interface/src/main/java/com/iluwatar/separatedinterface/App.java\n--- a/separated-interface/src/main/java/com/iluwatar/separatedinterface/App.java\n+++ b/separated-interface/src/main/java/com/iluwatar/separatedinterface/App.java\n@@ -24,8 +24,8 @@\n package com.iluwatar.separatedinterface;\n \n import com.iluwatar.separatedinterface.invoice.InvoiceGenerator;\n-import com.iluwatar.separatedinterface.taxes.DomesticTax;\n-import com.iluwatar.separatedinterface.taxes.ForeignTax;\n+import com.iluwatar.separatedinterface.taxes.DomesticTaxCalculator;\n+import com.iluwatar.separatedinterface.taxes.ForeignTaxCalculator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -51,11 +51,12 @@ public class App {\n    */\n   public static void main(String[] args) {\n     //Create the invoice generator with product cost as 50 and foreign product tax\n-    var internationalProductInvoice = new InvoiceGenerator(PRODUCT_COST, new ForeignTax());\n+    var internationalProductInvoice = new InvoiceGenerator(PRODUCT_COST,\n+        new ForeignTaxCalculator());\n     LOGGER.info(\"Foreign Tax applied: {}\", \"\" + internationalProductInvoice.getAmountWithTax());\n \n     //Create the invoice generator with product cost as 50 and domestic product tax\n-    var domesticProductInvoice = new InvoiceGenerator(PRODUCT_COST, new DomesticTax());\n+    var domesticProductInvoice = new InvoiceGenerator(PRODUCT_COST, new DomesticTaxCalculator());\n     LOGGER.info(\"Domestic Tax applied: {}\", \"\" + domesticProductInvoice.getAmountWithTax());\n   }\n }\n\ndiff --git a/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculator.java b/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculator.java\n--- a/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculator.java\n+++ b/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculator.java\n@@ -28,7 +28,7 @@\n /**\n  * TaxCalculator for Domestic goods with 20% tax.\n  */\n-public class DomesticTax implements TaxCalculator {\n+public class DomesticTaxCalculator implements TaxCalculator {\n \n   public static final double TAX_PERCENTAGE = 20;\n \n\ndiff --git a/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculator.java b/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculator.java\n--- a/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculator.java\n+++ b/separated-interface/src/main/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculator.java\n@@ -28,7 +28,7 @@\n /**\n  * TaxCalculator for foreign goods with 60% tax.\n  */\n-public class ForeignTax implements TaxCalculator {\n+public class ForeignTaxCalculator implements TaxCalculator {\n \n   public static final double TAX_PERCENTAGE = 60;\n \n\ndiff --git a/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculatorTest.java b/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculatorTest.java\n--- a/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculatorTest.java\n+++ b/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/DomesticTaxCalculatorTest.java\n@@ -26,13 +26,13 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n-public class DomesticTaxTest {\n+public class DomesticTaxCalculatorTest {\n \n-  private DomesticTax target;\n+  private DomesticTaxCalculator target;\n \n   @Test\n-  public void testTaxCaluclation(){\n-    target = new DomesticTax();\n+  public void testTaxCalculation(){\n+    target = new DomesticTaxCalculator();\n \n     var tax=target.calculate(100.0);\n     Assertions.assertEquals(tax,20.0);\n\ndiff --git a/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculatorTest.java b/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculatorTest.java\n--- a/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculatorTest.java\n+++ b/separated-interface/src/test/java/com/iluwatar/separatedinterface/taxes/ForeignTaxCalculatorTest.java\n@@ -26,13 +26,13 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n-public class ForeignTaxTest {\n+public class ForeignTaxCalculatorTest {\n \n-  private ForeignTax target;\n+  private ForeignTaxCalculator target;\n \n   @Test\n-  public void testTaxCaluclation(){\n-    target = new ForeignTax();\n+  public void testTaxCalculation(){\n+    target = new ForeignTaxCalculator();\n \n     var tax=target.calculate(100.0);\n     Assertions.assertEquals(tax,60.0);",
    "output": "Rename DomesticTax,ForeignTax and review fixes"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -57,6 +57,7 @@ public Kingdom getKingdom() {\n    */\n   public static void main(String[] args) {\n     var app = new App();\n+    app.run();\n   }\n \n   @Override",
    "output": "Forgot to run the App"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -23,8 +23,10 @@\n \n package com.iluwatar.abstractfactory;\n \n-import lombok.Getter;\n-import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n \n /**\n  * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that\n@@ -40,12 +42,16 @@\n  * and its implementations ( {@link ElfKingdomFactory}, {@link OrcKingdomFactory}). The example uses\n  * both concrete implementations to create a king, a castle and an army.\n  */\n-@Slf4j\n public class App implements Runnable {\n \n-  @Getter\n+  private static Logger log = LoggerFactory.getLogger(App.class);\n+\n   private final Kingdom kingdom = new Kingdom();\n \n+  public Kingdom getKingdom() {\n+    return kingdom;\n+  }\n+\n   /**\n    * Program entry point.\n    *\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n@@ -1,14 +1,35 @@\n package com.iluwatar.abstractfactory;\n \n-import lombok.Data;\n-\n-@Data\n public class Kingdom {\n \n   private King king;\n   private Castle castle;\n   private Army army;\n \n+  public King getKing() {\n+    return king;\n+  }\n+\n+  public Castle getCastle() {\n+    return castle;\n+  }\n+\n+  public Army getArmy() {\n+    return army;\n+  }\n+\n+  public void setKing(King king) {\n+    this.king = king;\n+  }\n+\n+  public void setCastle(Castle castle) {\n+    this.castle = castle;\n+  }\n+\n+  public void setArmy(Army army) {\n+    this.army = army;\n+  }\n+\n   /**\n    * The factory of kingdom factories.\n    */\n\ndiff --git a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n--- a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n@@ -23,7 +23,6 @@\n \n package com.iluwatar.abstractfactory;\n \n-import lombok.val;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n@@ -48,56 +47,56 @@ public void setUp() {\n   @Test\n   public void king() {\n     app.createKingdom(elfFactory);\n-    val kingdom = app.getKingdom();\n+    final var kingdom = app.getKingdom();\n \n-    val elfKing = kingdom.getKing();\n+    final var elfKing = kingdom.getKing();\n     assertTrue(elfKing instanceof ElfKing);\n     assertEquals(ElfKing.DESCRIPTION, elfKing.getDescription());\n \n     app.createKingdom(orcFactory);\n-    val orcKing = kingdom.getKing();\n+    final var orcKing = kingdom.getKing();\n     assertTrue(orcKing instanceof OrcKing);\n     assertEquals(OrcKing.DESCRIPTION, orcKing.getDescription());\n   }\n \n   @Test\n   public void castle() {\n     app.createKingdom(elfFactory);\n-    val kingdom = app.getKingdom();\n+    final var kingdom = app.getKingdom();\n \n-    val elfCastle = kingdom.getCastle();\n+    final var elfCastle = kingdom.getCastle();\n     assertTrue(elfCastle instanceof ElfCastle);\n     assertEquals(ElfCastle.DESCRIPTION, elfCastle.getDescription());\n \n     app.createKingdom(orcFactory);\n-    val orcCastle = kingdom.getCastle();\n+    final var orcCastle = kingdom.getCastle();\n     assertTrue(orcCastle instanceof OrcCastle);\n     assertEquals(OrcCastle.DESCRIPTION, orcCastle.getDescription());\n   }\n \n   @Test\n   public void army() {\n     app.createKingdom(elfFactory);\n-    val kingdom = app.getKingdom();\n+    final var kingdom = app.getKingdom();\n \n-    val elfArmy = kingdom.getArmy();\n+    final var elfArmy = kingdom.getArmy();\n     assertTrue(elfArmy instanceof ElfArmy);\n     assertEquals(ElfArmy.DESCRIPTION, elfArmy.getDescription());\n \n     app.createKingdom(orcFactory);\n-    val orcArmy = kingdom.getArmy();\n+    final var orcArmy = kingdom.getArmy();\n     assertTrue(orcArmy instanceof OrcArmy);\n     assertEquals(OrcArmy.DESCRIPTION, orcArmy.getDescription());\n   }\n \n   @Test\n   public void createElfKingdom() {\n     app.createKingdom(elfFactory);\n-    val kingdom = app.getKingdom();\n+    final var kingdom = app.getKingdom();\n \n-    val king = kingdom.getKing();\n-    val castle = kingdom.getCastle();\n-    val army = kingdom.getArmy();\n+    final var king = kingdom.getKing();\n+    final var castle = kingdom.getCastle();\n+    final var army = kingdom.getArmy();\n     assertTrue(king instanceof ElfKing);\n     assertEquals(ElfKing.DESCRIPTION, king.getDescription());\n     assertTrue(castle instanceof ElfCastle);\n@@ -109,11 +108,11 @@ public void createElfKingdom() {\n   @Test\n   public void createOrcKingdom() {\n     app.createKingdom(orcFactory);\n-    val kingdom = app.getKingdom();\n+    final var kingdom = app.getKingdom();\n \n-    val king = kingdom.getKing();\n-    val castle = kingdom.getCastle();\n-    val army = kingdom.getArmy();\n+    final var king = kingdom.getKing();\n+    final var castle = kingdom.getCastle();\n+    final var army = kingdom.getArmy();\n     assertTrue(king instanceof OrcKing);\n     assertEquals(OrcKing.DESCRIPTION, king.getDescription());\n     assertTrue(castle instanceof OrcCastle);",
    "output": "Remove lombok, related to"
  },
  {
    "input": "diff --git a/factory/src/main/java/com/iluwatar/factory/App.java b/factory/src/main/java/com/iluwatar/factory/App.java\n--- a/factory/src/main/java/com/iluwatar/factory/App.java\n+++ b/factory/src/main/java/com/iluwatar/factory/App.java\n@@ -43,8 +43,8 @@ public class App {\n    * Program main entry point.\n    */\n   public static void main(String[] args) {\n-    var car1 = CarsFactory.getCar(CarsFactory.CarType.FORD);\n-    var car2 = CarsFactory.getCar(CarsFactory.CarType.FERRARI);\n+    var car1 = CarsFactory.getCar(CarType.FORD);\n+    var car2 = CarsFactory.getCar(CarType.FERRARI);\n     LOGGER.info(car1.getDescription());\n     LOGGER.info(car2.getDescription());\n   }\n\ndiff --git a/factory/src/main/java/com/iluwatar/factory/CarType.java b/factory/src/main/java/com/iluwatar/factory/CarType.java\n--- a/factory/src/main/java/com/iluwatar/factory/CarType.java\n+++ b/factory/src/main/java/com/iluwatar/factory/CarType.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar.factory;\n+\n+import java.util.function.Supplier;\n+\n+public enum CarType {\n+  \n+  /**\n+   * Enumeration for different types of cars.\n+   */\n+  FORD(Ford::new), \n+  FERRARI(Ferrari::new);\n+  \n+  private final Supplier<Car> constructor; \n+  \n+  CarType(Supplier<Car> constructor) {\n+    this.constructor = constructor;\n+  }\n+  \n+  public Supplier<Car> getConstructor() {\n+    return this.constructor;\n+  }\n+}\n\ndiff --git a/factory/src/main/java/com/iluwatar/factory/CarsFactory.java b/factory/src/main/java/com/iluwatar/factory/CarsFactory.java\n--- a/factory/src/main/java/com/iluwatar/factory/CarsFactory.java\n+++ b/factory/src/main/java/com/iluwatar/factory/CarsFactory.java\n@@ -5,21 +5,10 @@\n  */\n public class CarsFactory {\n   \n-  /**\n-   * Enumeration for different types of cars.\n-   */\n-  static enum CarType {\n-    FORD, FERRARI\n-  }\n-  \n   /**\n    * Factory method takes as parameter a car type and initiate the appropriate class.\n    */\n   public static Car getCar(CarType type) {\n-    switch (type) {\n-      case FORD: return new Ford();\n-      case FERRARI: return new Ferrari();\n-      default: throw new IllegalArgumentException(\"Model not supported.\");\n-    }\n+    return type.getConstructor().get();\n   }\n }\n\ndiff --git a/factory/src/test/java/com/iluwatar/factory/CarsFactoryTest.java b/factory/src/test/java/com/iluwatar/factory/CarsFactoryTest.java\n--- a/factory/src/test/java/com/iluwatar/factory/CarsFactoryTest.java\n+++ b/factory/src/test/java/com/iluwatar/factory/CarsFactoryTest.java\n@@ -8,7 +8,7 @@ class CarsFactoryTest {\n \n \t@Test\n \tvoid shouldReturnFerrariInstance() {\n-\t\tfinal var ferrari = CarsFactory.getCar(CarsFactory.CarType.FERRARI);\n+\t\tfinal var ferrari = CarsFactory.getCar(CarType.FERRARI);\n \t\tassertTrue(ferrari instanceof Ferrari);\n \t}\n ",
    "output": "Upgrade - Using lambda expression to create cars - Using spaces instead of tabs in pom.xml"
  },
  {
    "input": "diff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n@@ -1,42 +0,0 @@\n-/*\n- * The MIT License\n- * Copyright © 2014-2019 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-\n-package com.iluwatar.simplefactory;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class App {\n-  \n-  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n-  \n-  /**\n-   * Program main entry point.\n-   */\n-  public static void main(String[] args) {\n-    Car car1 = CarSimpleFactory.getCar(CarSimpleFactory.CarType.FORD);\n-    Car car2 = CarSimpleFactory.getCar(CarSimpleFactory.CarType.FERRARI);\n-    LOGGER.info(car1.getDescription());\n-    LOGGER.info(car2.getDescription());\n-  }\n-}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n@@ -1,10 +0,0 @@\n-package com.iluwatar.simplefactory;\n-\n-/**\n- * Car interface.\n- */\n-public interface Car {\n-  \n-  public String getDescription();\n-  \n-}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n@@ -1,25 +0,0 @@\n-package com.iluwatar.simplefactory;\n-\n-/**\n- * Factory of cars.\n- */\n-public class CarSimpleFactory {\n-  \n-  /**\n-   * Enumeration for different types of cars.\n-   */\n-  static enum CarType {\n-    FORD, FERRARI\n-  }\n-  \n-  /**\n-   * Factory method takes as parameter a car type and initiate the appropriate class.\n-   */\n-  public static Car getCar(CarType type) {\n-    switch (type) {\n-      case FORD: return new Ford();\n-      case FERRARI: return new Ferrari();\n-      default: throw new IllegalArgumentException(\"Model not supported.\");\n-    }\n-  }\n-}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n@@ -1,14 +0,0 @@\n-package com.iluwatar.simplefactory;\n-\n-/**\n- * Ferrari implementation.\n- */\n-public class Ferrari implements Car {\n-   \n-  static final String DESCRIPTION = \"This is Ferrari.\";\n-\n-  @Override\n-  public String getDescription() {\n-    return DESCRIPTION;\n-  }\n-}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n@@ -1,14 +0,0 @@\n-package com.iluwatar.simplefactory;\n-\n-/**\n- * Ford implementation.\n- */\n-public class Ford implements Car {\n-\n-  static final String DESCRIPTION = \"This is Ford.\";\n-\n-  @Override\n-  public String getDescription() {\n-    return DESCRIPTION;\n-  }\n-}\n\ndiff --git a/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java b/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java\n--- a/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java\n+++ b/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java\n@@ -1,14 +0,0 @@\n-package com.iluwatar.simplefactory;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import org.junit.jupiter.api.Test;\n-\n-class AppTest {\n-\n-\t@Test\n-\tvoid shouldExecuteWithoutExceptions() {\n-\t\tassertDoesNotThrow(() -> App.main(new String[]{}));\n-\t}\n-\n-}\n\ndiff --git a/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java b/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java\n--- a/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java\n+++ b/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java\n@@ -1,15 +0,0 @@\n-package com.iluwatar.simplefactory;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import org.junit.jupiter.api.Test;\n-\n-class CarSimpleFactoryTest {\n-\n-\t@Test\n-\tvoid shouldReturnFerrariInstance() {\n-\t\tfinal var ferrari = CarSimpleFactory.getCar(CarSimpleFactory.CarType.FERRARI);\n-\t\tassertTrue(ferrari instanceof Ferrari);\n-\t}\n-\n-}",
    "output": "Clean the code"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -24,6 +24,9 @@\n package com.iluwatar.abstractfactory;\n \n import com.iluwatar.abstractfactory.App.FactoryMaker.KingdomType;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,12 +44,19 @@\n  * and its implementations ( {@link ElfKingdomFactory}, {@link OrcKingdomFactory}). The example uses\n  * both concrete implementations to create a king, a castle and an army.\n  */\n+@Slf4j\n public class App {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n-\n+  @Setter\n+  @Getter\n   private King king;\n+\n+  @Setter\n+  @Getter\n   private Castle castle;\n+\n+  @Setter\n+  @Getter\n   private Army army;\n \n   /**\n@@ -58,30 +68,6 @@ public void createKingdom(final KingdomFactory factory) {\n     setArmy(factory.createArmy());\n   }\n \n-  public King getKing() {\n-    return king;\n-  }\n-\n-  private void setKing(final King king) {\n-    this.king = king;\n-  }\n-\n-  public Castle getCastle() {\n-    return castle;\n-  }\n-\n-  private void setCastle(final Castle castle) {\n-    this.castle = castle;\n-  }\n-\n-  public Army getArmy() {\n-    return army;\n-  }\n-\n-  private void setArmy(final Army army) {\n-    this.army = army;\n-  }\n-\n   /**\n    * The factory of kingdom factories.\n    */\n@@ -118,16 +104,16 @@ public static void main(String[] args) {\n \n     var app = new App();\n \n-    LOGGER.info(\"Elf Kingdom\");\n+    log.info(\"Elf Kingdom\");\n     app.createKingdom(FactoryMaker.makeFactory(KingdomType.ELF));\n-    LOGGER.info(app.getArmy().getDescription());\n-    LOGGER.info(app.getCastle().getDescription());\n-    LOGGER.info(app.getKing().getDescription());\n+    log.info(app.getArmy().getDescription());\n+    log.info(app.getCastle().getDescription());\n+    log.info(app.getKing().getDescription());\n \n-    LOGGER.info(\"Orc Kingdom\");\n+    log.info(\"Orc Kingdom\");\n     app.createKingdom(FactoryMaker.makeFactory(KingdomType.ORC));\n-    LOGGER.info(app.getArmy().getDescription());\n-    LOGGER.info(app.getCastle().getDescription());\n-    LOGGER.info(app.getKing().getDescription());\n+    log.info(app.getArmy().getDescription());\n+    log.info(app.getCastle().getDescription());\n+    log.info(app.getKing().getDescription());\n   }\n }\n\\ No newline at end of file",
    "output": "Remove boilerplate code"
  },
  {
    "input": "diff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n@@ -1,16 +1,42 @@\n+/*\n+ * The MIT License\n+ * Copyright © 2014-2019 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n package com.iluwatar.simplefactory;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class App {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n-\n-\tpublic static void main(String[] args) {\n-\t\tCar car1 = CarSimpleFactory.getCar(CarSimpleFactory.carTypes.FORD);\n-\t\tCar car2 = CarSimpleFactory.getCar(CarSimpleFactory.carTypes.FERRARI);\n-\t\tLOGGER.info(car1.getDescription());\n-\t\tLOGGER.info(car2.getDescription());\n-\t}\n+  \n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n+  \n+  /**\n+   * Program main entry point.\n+   */\n+  public static void main(String[] args) {\n+    Car car1 = CarSimpleFactory.getCar(CarSimpleFactory.CarType.FORD);\n+    Car car2 = CarSimpleFactory.getCar(CarSimpleFactory.CarType.FERRARI);\n+    LOGGER.info(car1.getDescription());\n+    LOGGER.info(car2.getDescription());\n+  }\n }\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n@@ -1,10 +1,10 @@\n package com.iluwatar.simplefactory;\n \n /**\n- * Car interface\n+ * Car interface.\n  */\n public interface Car {\n-\n-\tpublic String getDescription();\n-\n+  \n+  public String getDescription();\n+  \n }\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n@@ -1,29 +1,25 @@\n package com.iluwatar.simplefactory;\n \n-\n /**\n- * Factory of cars\n+ * Factory of cars.\n  */\n public class CarSimpleFactory {\n-\t\n-\t/*\n-\t * Enumeration for different types of cars\n-\t */\n-\tstatic enum carTypes {\n-\t\tFORD, FERRARI\n-\t};\n-\t\n-\t/*\n-\t * Factory method takes as parameter a car type and initiate the appropriate class\n-\t */\n-\tpublic static Car getCar(carTypes type) {\n-\t\tswitch (type) {\n-\t\tcase FORD:\n-\t\t\treturn new Ford();\n-\t\tcase FERRARI:\n-\t\t\treturn new Ferrari();\n-\t\tdefault:\n-\t\t\tthrow new IllegalArgumentException(\"Model not supported.\");\n-\t\t}\n-\t}\n+  \n+  /**\n+   * Enumeration for different types of cars.\n+   */\n+  static enum CarType {\n+    FORD, FERRARI\n+  }\n+  \n+  /**\n+   * Factory method takes as parameter a car type and initiate the appropriate class.\n+   */\n+  public static Car getCar(CarType type) {\n+    switch (type) {\n+      case FORD: return new Ford();\n+      case FERRARI: return new Ferrari();\n+      default: throw new IllegalArgumentException(\"Model not supported.\");\n+    }\n+  }\n }\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n@@ -1,14 +1,14 @@\n package com.iluwatar.simplefactory;\n \n /**\n- * Ferrari implementation\n+ * Ferrari implementation.\n  */\n public class Ferrari implements Car {\n-\t\n-\tstatic final String DESCRIPTION = \"This is Ferrari.\";\n-\t\n-\t@Override\n-\tpublic String getDescription() {\n-\t\treturn DESCRIPTION;\n-\t}\n+   \n+  static final String DESCRIPTION = \"This is Ferrari.\";\n+\n+  @Override\n+  public String getDescription() {\n+    return DESCRIPTION;\n+  }\n }\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n@@ -1,14 +1,14 @@\n package com.iluwatar.simplefactory;\n \n /**\n- * Ford implementation\n+ * Ford implementation.\n  */\n public class Ford implements Car {\n \n-\tstatic final String DESCRIPTION = \"This is Ford.\";\n+  static final String DESCRIPTION = \"This is Ford.\";\n \n-\t@Override\n-\tpublic String getDescription() {\n-\t\treturn DESCRIPTION;\n-\t}\n+  @Override\n+  public String getDescription() {\n+    return DESCRIPTION;\n+  }\n }\n\ndiff --git a/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java b/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java\n--- a/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java\n+++ b/simple-factory/src/test/java/com/iluwatar/simplefactory/AppTest.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar.simplefactory;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class AppTest {\n+\n+\t@Test\n+\tvoid shouldExecuteWithoutExceptions() {\n+\t\tassertDoesNotThrow(() -> App.main(new String[]{}));\n+\t}\n+\n+}\n\ndiff --git a/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java b/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java\n--- a/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java\n+++ b/simple-factory/src/test/java/com/iluwatar/simplefactory/CarSimpleFactoryTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.simplefactory;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class CarSimpleFactoryTest {\n+\n+\t@Test\n+\tvoid shouldReturnFerrariInstance() {\n+\t\tfinal var ferrari = CarSimpleFactory.getCar(CarSimpleFactory.CarType.FERRARI);\n+\t\tassertTrue(ferrari instanceof Ferrari);\n+\t}\n+\n+}",
    "output": "Fix bugs, clean the code and add unit tests."
  },
  {
    "input": "diff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/App.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar.simplefactory;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class App {\n+\t\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n+\n+\tpublic static void main(String[] args) {\n+\t\tCar car1 = CarSimpleFactory.getCar(CarSimpleFactory.carTypes.FORD);\n+\t\tCar car2 = CarSimpleFactory.getCar(CarSimpleFactory.carTypes.FERRARI);\n+\t\tLOGGER.info(car1.getDescription());\n+\t\tLOGGER.info(car2.getDescription());\n+\t}\n+}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Car.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar.simplefactory;\n+\n+/**\n+ * Car interface\n+ */\n+public interface Car {\n+\n+\tpublic String getDescription();\n+\n+}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/CarSimpleFactory.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar.simplefactory;\n+\n+\n+/**\n+ * Factory of cars\n+ */\n+public class CarSimpleFactory {\n+\t\n+\t/*\n+\t * Enumeration for different types of cars\n+\t */\n+\tstatic enum carTypes {\n+\t\tFORD, FERRARI\n+\t};\n+\t\n+\t/*\n+\t * Factory method takes as parameter a car type and initiate the appropriate class\n+\t */\n+\tpublic static Car getCar(carTypes type) {\n+\t\tswitch (type) {\n+\t\tcase FORD:\n+\t\t\treturn new Ford();\n+\t\tcase FERRARI:\n+\t\t\treturn new Ferrari();\n+\t\tdefault:\n+\t\t\tthrow new IllegalArgumentException(\"Model not supported.\");\n+\t\t}\n+\t}\n+}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ferrari.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar.simplefactory;\n+\n+/**\n+ * Ferrari implementation\n+ */\n+public class Ferrari implements Car {\n+\t\n+\tstatic final String DESCRIPTION = \"This is Ferrari.\";\n+\t\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn DESCRIPTION;\n+\t}\n+}\n\ndiff --git a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n--- a/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n+++ b/simple-factory/src/main/java/com/iluwatar/simplefactory/Ford.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar.simplefactory;\n+\n+/**\n+ * Ford implementation\n+ */\n+public class Ford implements Car {\n+\n+\tstatic final String DESCRIPTION = \"This is Ford.\";\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn DESCRIPTION;\n+\t}\n+}",
    "output": "Add Simple Factory Pattern implementation\nJava source code demonstrate simple factory design pattern"
  },
  {
    "input": "diff --git a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n--- a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n+++ b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/GroundDiveTest.java\n@@ -23,55 +23,48 @@\n \n package com.iluwatar.subclasssandbox;\n \n+import com.github.stefanbirkner.systemlambda.Statement;\n import org.junit.Assert;\n-import org.junit.Rule;\n import org.junit.Test;\n-import org.junit.contrib.java.lang.system.SystemOutRule;\n+\n+import static com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOutNormalized;\n \n /**\n  * GroundDive unit tests.\n  */\n public class GroundDiveTest {\n \n-  @Rule\n-  public SystemOutRule log = new SystemOutRule().enableLog();\n-\n   @Test\n-  public void testMove() {\n-    log.clearLog();\n+  public void testMove() throws Exception {\n     var groundDive = new GroundDive();\n     groundDive.move(1.0, 1.0, 1.0);\n-    var outputLog = getLogContent(log.getLog());\n+    var outputLog = getLogContent(() -> groundDive.move(1.0, 1.0, 1.0));\n     var expectedLog = \"Move to ( 1.0, 1.0, 1.0 )\";\n     Assert.assertEquals(outputLog, expectedLog);\n   }\n \n   @Test\n-  public void testPlaySound() {\n-    log.clearLog();\n+  public void testPlaySound() throws Exception {\n     var groundDive = new GroundDive();\n-    groundDive.playSound(\"SOUND_NAME\", 1);\n-    var outputLog = getLogContent(log.getLog());\n+    var outputLog = getLogContent(() -> groundDive.playSound(\"SOUND_NAME\", 1));\n     var expectedLog = \"Play SOUND_NAME with volumn 1\";\n     Assert.assertEquals(outputLog, expectedLog);\n   }\n \n   @Test\n-  public void testSpawnParticles() {\n-    log.clearLog();\n+  public void testSpawnParticles() throws Exception {\n     var groundDive = new GroundDive();\n-    groundDive.spawnParticles(\"PARTICLE_TYPE\", 100);\n-    final var outputLog = getLogContent(log.getLog());\n+    final var outputLog = getLogContent(\n+            () -> groundDive.spawnParticles(\"PARTICLE_TYPE\", 100));\n     final var expectedLog = \"Spawn 100 particle with type PARTICLE_TYPE\";\n     Assert.assertEquals(outputLog, expectedLog);\n   }\n \n   @Test\n-  public void testActivate() {\n-    log.clearLog();\n+  public void testActivate() throws Exception {\n     var groundDive = new GroundDive();\n-    groundDive.activate();\n-    var logs = log.getLog().split(\"\\n\");\n+    var logs = tapSystemOutNormalized(groundDive::activate)\n+            .split(\"\\n\");\n     final var expectedSize = 3;\n     final var log1 = logs[0].split(\"-\")[1].trim() + \" -\" + logs[0].split(\"-\")[2].trim();\n     final var expectedLog1 = \"Move to ( 0.0, 0.0, -20.0 )\";\n@@ -85,6 +78,11 @@ public void testActivate() {\n     Assert.assertEquals(log3, expectedLog3);\n   }\n \n+  private String getLogContent(Statement statement) throws Exception {\n+    var log = tapSystemOutNormalized(statement);\n+    return getLogContent(log);\n+  }\n+\n   private String getLogContent(String log) {\n     return log.split(\"-\")[1].trim();\n   }\n\ndiff --git a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n--- a/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n+++ b/subclass-sandbox/src/test/java/com/iluwatar/subclasssandbox/SkyLaunchTest.java\n@@ -23,55 +23,47 @@\n \n package com.iluwatar.subclasssandbox;\n \n+import com.github.stefanbirkner.systemlambda.Statement;\n import org.junit.Assert;\n-import org.junit.Rule;\n import org.junit.Test;\n-import org.junit.contrib.java.lang.system.SystemOutRule;\n+\n+import static com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOutNormalized;\n \n /**\n  * SkyLaunch unit tests.\n  */\n public class SkyLaunchTest {\n \n-  @Rule\n-  public SystemOutRule log = new SystemOutRule().enableLog();\n-\n   @Test\n-  public void testMove() {\n-    log.clearLog();\n+  public void testMove() throws Exception {\n     var skyLaunch = new SkyLaunch();\n-    skyLaunch.move(1.0, 1.0, 1.0);\n-    var outputLog = getLogContent(log.getLog());\n+    var outputLog = getLogContent(() -> skyLaunch.move(1.0, 1.0, 1.0));\n     var expectedLog = \"Move to ( 1.0, 1.0, 1.0 )\";\n     Assert.assertEquals(outputLog, expectedLog);\n   }\n \n   @Test\n-  public void testPlaySound() {\n-    log.clearLog();\n+  public void testPlaySound() throws Exception {\n     var skyLaunch = new SkyLaunch();\n-    skyLaunch.playSound(\"SOUND_NAME\", 1);\n-    var outputLog = getLogContent(log.getLog());\n+    var outputLog = getLogContent(() -> skyLaunch.playSound(\"SOUND_NAME\", 1));\n     var expectedLog = \"Play SOUND_NAME with volumn 1\";\n     Assert.assertEquals(outputLog, expectedLog);\n   }\n \n   @Test\n-  public void testSpawnParticles() {\n-    log.clearLog();\n+  public void testSpawnParticles() throws Exception {\n     var skyLaunch = new SkyLaunch();\n-    skyLaunch.spawnParticles(\"PARTICLE_TYPE\", 100);\n-    var outputLog = getLogContent(log.getLog());\n+    var outputLog = getLogContent(\n+            () -> skyLaunch.spawnParticles(\"PARTICLE_TYPE\", 100));\n     var expectedLog = \"Spawn 100 particle with type PARTICLE_TYPE\";\n     Assert.assertEquals(outputLog, expectedLog);\n   }\n \n   @Test\n-  public void testActivate() {\n-    log.clearLog();\n+  public void testActivate() throws Exception {\n     var skyLaunch = new SkyLaunch();\n-    skyLaunch.activate();\n-    var logs = log.getLog().split(\"\\n\");\n+    var logs = tapSystemOutNormalized(skyLaunch::activate)\n+            .split(\"\\n\");\n     final var expectedSize = 3;\n     final var log1 = getLogContent(logs[0]);\n     final var expectedLog1 = \"Move to ( 0.0, 0.0, 20.0 )\";\n@@ -85,6 +77,11 @@ public void testActivate() {\n     Assert.assertEquals(log3, expectedLog3);\n   }\n \n+  private String getLogContent(Statement statement) throws Exception {\n+    var log = tapSystemOutNormalized(statement);\n+    return getLogContent(log);\n+  }\n+\n   private String getLogContent(String log) {\n     return log.split(\"-\")[1].trim();\n   }",
    "output": "Replace System Rules with System Lambda\nSystem Lambda is more specific. It only wraps the part of the code that\nproduces the output."
  },
  {
    "input": "diff --git a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n--- a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n+++ b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n@@ -36,7 +36,7 @@ class DirtyFlagTest {\n   void testIsDirty() {\n     var df = new DataFetcher();\n     var countries = df.fetch();\n-    Assertions.assertTrue(countries.isEmpty());\n+    Assertions.assertFalse(countries.isEmpty());\n   }\n \n   @Test",
    "output": "Fix a test-case issue within the dirty-flag module."
  },
  {
    "input": "diff --git a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n--- a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n+++ b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n@@ -23,29 +23,27 @@\n \n package org.dirty.flag;\n \n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import com.iluwatar.dirtyflag.DataFetcher;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n /**\n  * Application test\n  */\n-public class DirtyFlagTest {\n+class DirtyFlagTest {\n \n   @Test\n-  public void testIsDirty() {\n+  void testIsDirty() {\n     var df = new DataFetcher();\n     var countries = df.fetch();\n-    assertFalse(countries.isEmpty());\n+    Assertions.assertTrue(countries.isEmpty());\n   }\n \n   @Test\n-  public void testIsNotDirty() {\n+  void testIsNotDirty() {\n     var df = new DataFetcher();\n     df.fetch();\n     var countries = df.fetch();\n-    assertTrue(countries.isEmpty());\n+    Assertions.assertTrue(countries.isEmpty());\n   }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n@@ -23,18 +23,17 @@\n \n package com.iluwatar.partialresponse;\n \n-import org.junit.Test;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Assertions;\n \n /**\n  * Application test\n  */\n-public class AppTest {\n+class AppTest {\n \n   @Test\n-  public void shouldExecuteApplicationWithoutException() {\n-    assertDoesNotThrow(() -> App.main(new String[]{}));\n+  void shouldExecuteApplicationWithoutException() {\n+    Assertions.assertDoesNotThrow(() -> App.main(new String[]{}));\n   }\n \n }\n\\ No newline at end of file\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java\n@@ -23,24 +23,23 @@\n \n package com.iluwatar.partialresponse;\n \n-import static org.junit.Assert.assertEquals;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * tests {@link FieldJsonMapper}.\n  */\n-public class FieldJsonMapperTest {\n-  private FieldJsonMapper mapper;\n+class FieldJsonMapperTest {\n+  private static FieldJsonMapper mapper;\n \n-  @Before\n-  public void setUp() {\n+  @BeforeAll\n+  static void setUp() {\n     mapper = new FieldJsonMapper();\n   }\n \n   @Test\n-  public void shouldReturnJsonForSpecifiedFieldsInVideo() throws Exception {\n+  void shouldReturnJsonForSpecifiedFieldsInVideo() throws Exception {\n     var fields = new String[]{\"id\", \"title\", \"length\"};\n     var video = new Video(\n         2, \"Godzilla Resurgence\", 120,\n@@ -50,6 +49,6 @@ public void shouldReturnJsonForSpecifiedFieldsInVideo() throws Exception {\n     var jsonFieldResponse = mapper.toJson(video, fields);\n \n     var expectedDetails = \"{\\\"id\\\": 2,\\\"title\\\": \\\"Godzilla Resurgence\\\",\\\"length\\\": 120}\";\n-    assertEquals(expectedDetails, jsonFieldResponse);\n+    Assertions.assertEquals(expectedDetails, jsonFieldResponse);\n   }\n }\n\\ No newline at end of file\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -23,30 +23,29 @@\n \n package com.iluwatar.partialresponse;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.when;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Matchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n \n import java.util.Map;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n  * tests {@link VideoResource}.\n  */\n-@RunWith(MockitoJUnitRunner.class)\n-public class VideoResourceTest {\n+@ExtendWith(MockitoExtension.class)\n+class VideoResourceTest {\n   @Mock\n-  private FieldJsonMapper fieldJsonMapper;\n+  private static FieldJsonMapper fieldJsonMapper;\n \n-  private VideoResource resource;\n+  private static VideoResource resource;\n \n-  @Before\n-  public void setUp() {\n+  @BeforeAll\n+  static void setUp() {\n     var videos = Map.of(\n         1, new Video(1, \"Avatar\", 178, \"epic science fiction film\",\n             \"James Cameron\", \"English\"),\n@@ -58,23 +57,23 @@ public void setUp() {\n   }\n \n   @Test\n-  public void shouldGiveVideoDetailsById() throws Exception {\n+  void shouldGiveVideoDetailsById() throws Exception {\n     var actualDetails = resource.getDetails(1);\n \n     var expectedDetails = \"{\\\"id\\\": 1,\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \"\n         + \"\\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n-    assertEquals(expectedDetails, actualDetails);\n+    Assertions.assertEquals(expectedDetails, actualDetails);\n   }\n \n   @Test\n-  public void shouldGiveSpecifiedFieldsInformationOfVideo() throws Exception {\n+  void shouldGiveSpecifiedFieldsInformationOfVideo() throws Exception {\n     var fields = new String[]{\"id\", \"title\", \"length\"};\n \n     var expectedDetails = \"{\\\"id\\\": 1,\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178}\";\n-    when(fieldJsonMapper.toJson(any(Video.class), eq(fields))).thenReturn(expectedDetails);\n+    Mockito.when(fieldJsonMapper.toJson(Matchers.any(Video.class), Matchers.eq(fields))).thenReturn(expectedDetails);\n \n     var actualFieldsDetails = resource.getDetails(2, fields);\n \n-    assertEquals(expectedDetails, actualFieldsDetails);\n+    Assertions.assertEquals(expectedDetails, actualFieldsDetails);\n   }\n }\n\\ No newline at end of file",
    "output": "Fix JUnit tests causing build issues due to mixing JUnit 4 & JUnit 5"
  },
  {
    "input": "diff --git a/extension-objects/src/main/java/concreteextensions/Soldier.java b/extension-objects/src/main/java/concreteextensions/Soldier.java\n--- a/extension-objects/src/main/java/concreteextensions/Soldier.java\n+++ b/extension-objects/src/main/java/concreteextensions/Soldier.java\n@@ -42,7 +42,7 @@ public Soldier(SoldierUnit soldierUnit) {\n \n   @Override\n   public void soldierReady() {\n-    LOGGER.info(\"[Solider] \" + unit.getName() + \"  is ready!\");\n+    LOGGER.info(\"[Soldier] \" + unit.getName() + \" is ready!\");\n   }\n \n   public SoldierUnit getUnit() {",
    "output": "Fix a whitespace and spelling issue that was causing the test case to fail."
  },
  {
    "input": "diff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n@@ -23,9 +23,13 @@\n \n package com.iluwatar.model.view.presenter;\n \n+import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;\n+import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;\n+\n import java.awt.Color;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+\n import javax.swing.JButton;\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n@@ -35,10 +39,6 @@\n import javax.swing.JTextArea;\n import javax.swing.JTextField;\n \n-import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;\n-import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;\n-import static javax.swing.WindowConstants.EXIT_ON_CLOSE;\n-\n /**\n  * This class is the GUI implementation of the View component in the Model-View-Presenter pattern.\n  */",
    "output": "Fix an issue with the order of imports that was causing build failures."
  },
  {
    "input": "diff --git a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java\n--- a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java\n+++ b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java\n@@ -32,7 +32,7 @@\n public class App {\n \n   private static final String H2_DB_URL = \"jdbc:h2:~/test\";\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TransactionScriptApp.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n \n   /**\n    * Program entry point.\n\ndiff --git a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java\n--- a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java\n+++ b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java\n@@ -28,7 +28,7 @@\n import org.slf4j.LoggerFactory;\n \n public class Hotel {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(TransactionScriptApp.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n \n   private final HotelDaoImpl hotelDao;\n \n\ndiff --git a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/AppTest.java b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/AppTest.java\n--- a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/AppTest.java\n+++ b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/AppTest.java\n@@ -31,6 +31,6 @@\n public class AppTest {\n   @Test\n   public void test() throws Exception {\n-    TransactionScriptApp.main(new String[]{});\n+    App.main(new String[]{});\n   }\n }",
    "output": "Rename main class"
  },
  {
    "input": "diff --git a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n--- a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n@@ -23,18 +23,25 @@\n \n package com.iluwatar.api.gateway;\n \n+import static org.slf4j.LoggerFactory.getLogger;\n+\n import java.io.IOException;\n import java.net.URI;\n import java.net.http.HttpClient;\n import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n import java.net.http.HttpResponse.BodyHandlers;\n+\n+import org.slf4j.Logger;\n import org.springframework.stereotype.Component;\n \n /**\n  * An adapter to communicate with the Image microservice.\n  */\n @Component\n public class ImageClientImpl implements ImageClient {\n+  private static final Logger LOGGER = getLogger(ImageClientImpl.class);\n+\n   /**\n    * Makes a simple HTTP Get request to the Image microservice.\n    *\n@@ -49,12 +56,26 @@ public String getImagePath() {\n         .build();\n \n     try {\n+      LOGGER.info(\"Sending request to fetch image path\");\n       var httpResponse = httpClient.send(httpGet, BodyHandlers.ofString());\n+      logResponse(httpResponse);\n       return httpResponse.body();\n     } catch (IOException | InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Failure occurred while getting image path\", e);\n     }\n \n     return null;\n   }\n+\n+  private void logResponse(HttpResponse<String> httpResponse) {\n+    if (isSuccessResponse(httpResponse.statusCode())) {\n+      LOGGER.info(\"Image path received successfully\");\n+    } else {\n+      LOGGER.warn(\"Image path request failed\");\n+    }\n+  }\n+\n+  private boolean isSuccessResponse(int responseCode) {\n+    return responseCode >= 200 && responseCode <= 299;\n+  }\n }\n\ndiff --git a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java\n--- a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java\n+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java\n@@ -23,18 +23,26 @@\n \n package com.iluwatar.api.gateway;\n \n+import static org.slf4j.LoggerFactory.getLogger;\n+\n import java.io.IOException;\n import java.net.URI;\n import java.net.http.HttpClient;\n import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n import java.net.http.HttpResponse.BodyHandlers;\n+\n+import org.slf4j.Logger;\n import org.springframework.stereotype.Component;\n \n+\n /**\n  * An adapter to communicate with the Price microservice.\n  */\n @Component\n public class PriceClientImpl implements PriceClient {\n+  private static final Logger LOGGER = getLogger(PriceClientImpl.class);\n+\n   /**\n    * Makes a simple HTTP Get request to the Price microservice.\n    *\n@@ -49,12 +57,26 @@ public String getPrice() {\n         .build();\n \n     try {\n+      LOGGER.info(\"Sending request to fetch price info\");\n       var httpResponse = httpClient.send(httpGet, BodyHandlers.ofString());\n+      logResponse(httpResponse);\n       return httpResponse.body();\n     } catch (IOException | InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Failure occurred while getting price info\", e);\n     }\n \n     return null;\n   }\n+\n+  private void logResponse(HttpResponse<String> httpResponse) {\n+    if (isSuccessResponse(httpResponse.statusCode())) {\n+      LOGGER.info(\"Price info received successfully\");\n+    } else {\n+      LOGGER.warn(\"Price info request failed\");\n+    }\n+  }\n+\n+  private boolean isSuccessResponse(int responseCode) {\n+    return responseCode >= 200 && responseCode <= 299;\n+  }\n }\n\ndiff --git a/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java b/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java\n--- a/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java\n+++ b/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java\n@@ -23,15 +23,20 @@\n \n package com.iluwatar.image.microservice;\n \n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.slf4j.Logger;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n+\n /**\n  * Exposes the Image microservice's endpoints.\n  */\n @RestController\n public class ImageController {\n+  private static final Logger LOGGER = getLogger(ImageController.class);\n \n   /**\n    * An endpoint for a user to retrieve an image path.\n@@ -40,6 +45,7 @@ public class ImageController {\n    */\n   @RequestMapping(value = \"/image-path\", method = RequestMethod.GET)\n   public String getImagePath() {\n+    LOGGER.info(\"Successfully found image path\");\n     return \"/product-image.png\";\n   }\n }\n\ndiff --git a/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java b/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java\n--- a/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java\n+++ b/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java\n@@ -23,15 +23,20 @@\n \n package com.iluwatar.price.microservice;\n \n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.slf4j.Logger;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n+\n /**\n  * Exposes the Price microservice's endpoints.\n  */\n @RestController\n public class PriceController {\n+  private static final Logger LOGGER = getLogger(PriceController.class);\n \n   /**\n    * An endpoint for a user to retrieve a product's price.\n@@ -40,6 +45,7 @@ public class PriceController {\n    */\n   @RequestMapping(value = \"/price\", method = RequestMethod.GET)\n   public String getPrice() {\n+    LOGGER.info(\"Successfully found price info\");\n     return \"20\";\n   }\n }",
    "output": "Add logging in API Gateway"
  },
  {
    "input": "diff --git a/null-object/src/main/java/com/iluwatar/nullobject/App.java b/null-object/src/main/java/com/iluwatar/nullobject/App.java\n--- a/null-object/src/main/java/com/iluwatar/nullobject/App.java\n+++ b/null-object/src/main/java/com/iluwatar/nullobject/App.java\n@@ -37,12 +37,16 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-\n-    Node root =\n-        new NodeImpl(\"1\", new NodeImpl(\"11\", new NodeImpl(\"111\", NullNode.getInstance(),\n-            NullNode.getInstance()), NullNode.getInstance()), new NodeImpl(\"12\",\n-            NullNode.getInstance(), new NodeImpl(\"122\", NullNode.getInstance(),\n-            NullNode.getInstance())));\n+    Node root = new NodeImpl(\"1\",\n+        new NodeImpl(\"11\",\n+            new NodeImpl(\"111\", NullNode.getInstance(), NullNode.getInstance()),\n+            NullNode.getInstance()\n+        ),\n+        new NodeImpl(\"12\",\n+            NullNode.getInstance(),\n+            new NodeImpl(\"122\", NullNode.getInstance(), NullNode.getInstance())\n+        )\n+    );\n \n     root.walk();\n   }\n\ndiff --git a/null-object/src/test/java/com/iluwatar/nullobject/AppTest.java b/null-object/src/test/java/com/iluwatar/nullobject/AppTest.java\n--- a/null-object/src/test/java/com/iluwatar/nullobject/AppTest.java\n+++ b/null-object/src/test/java/com/iluwatar/nullobject/AppTest.java\n@@ -26,15 +26,11 @@\n import org.junit.jupiter.api.Test;\n \n /**\n- * \n  * Application test\n- *\n  */\n public class AppTest {\n-\n   @Test\n   public void test() {\n-    String[] args = {};\n-    App.main(args);\n+    App.main(new String[]{});\n   }\n }\n\ndiff --git a/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java b/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java\n--- a/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java\n+++ b/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java\n@@ -42,14 +42,14 @@ public class NullNodeTest {\n    */\n   @Test\n   public void testGetInstance() {\n-    final NullNode instance = NullNode.getInstance();\n+    final var instance = NullNode.getInstance();\n     assertNotNull(instance);\n     assertSame(instance, NullNode.getInstance());\n   }\n \n   @Test\n   public void testFields() {\n-    final NullNode node = NullNode.getInstance();\n+    final var node = NullNode.getInstance();\n     assertEquals(0, node.getTreeSize());\n     assertNull(node.getName());\n     assertNull(node.getLeft());\n\ndiff --git a/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java b/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java\n--- a/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java\n+++ b/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java\n@@ -23,22 +23,21 @@\n \n package com.iluwatar.nullobject;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.core.AppenderBase;\n+import java.util.LinkedList;\n+import java.util.List;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.slf4j.LoggerFactory;\n \n-import java.util.LinkedList;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertSame;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n /**\n  * Date: 12/26/15 - 11:44 PM\n  *\n@@ -75,12 +74,12 @@ public void tearDown() {\n   private static final Node TREE_ROOT;\n \n   static {\n-    final NodeImpl level1B = new NodeImpl(\"level1_b\", NullNode.getInstance(), NullNode.getInstance());\n-    final NodeImpl level2B = new NodeImpl(\"level2_b\", NullNode.getInstance(), NullNode.getInstance());\n-    final NodeImpl level3A = new NodeImpl(\"level3_a\", NullNode.getInstance(), NullNode.getInstance());\n-    final NodeImpl level3B = new NodeImpl(\"level3_b\", NullNode.getInstance(), NullNode.getInstance());\n-    final NodeImpl level2A = new NodeImpl(\"level2_a\", level3A, level3B);\n-    final NodeImpl level1A = new NodeImpl(\"level1_a\", level2A, level2B);\n+    final var level1B = new NodeImpl(\"level1_b\", NullNode.getInstance(), NullNode.getInstance());\n+    final var level2B = new NodeImpl(\"level2_b\", NullNode.getInstance(), NullNode.getInstance());\n+    final var level3A = new NodeImpl(\"level3_a\", NullNode.getInstance(), NullNode.getInstance());\n+    final var level3B = new NodeImpl(\"level3_b\", NullNode.getInstance(), NullNode.getInstance());\n+    final var level2A = new NodeImpl(\"level2_a\", level3A, level3B);\n+    final var level1A = new NodeImpl(\"level1_a\", level2A, level2B);\n     TREE_ROOT = new NodeImpl(\"root\", level1A, level1B);\n   }\n \n@@ -112,17 +111,17 @@ public void testWalk() {\n \n   @Test\n   public void testGetLeft() {\n-    final Node level1 = TREE_ROOT.getLeft();\n+    final var level1 = TREE_ROOT.getLeft();\n     assertNotNull(level1);\n     assertEquals(\"level1_a\", level1.getName());\n     assertEquals(5, level1.getTreeSize());\n \n-    final Node level2 = level1.getLeft();\n+    final var level2 = level1.getLeft();\n     assertNotNull(level2);\n     assertEquals(\"level2_a\", level2.getName());\n     assertEquals(3, level2.getTreeSize());\n \n-    final Node level3 = level2.getLeft();\n+    final var level3 = level2.getLeft();\n     assertNotNull(level3);\n     assertEquals(\"level3_a\", level3.getName());\n     assertEquals(1, level3.getTreeSize());\n@@ -132,15 +131,15 @@ public void testGetLeft() {\n \n   @Test\n   public void testGetRight() {\n-    final Node level1 = TREE_ROOT.getRight();\n+    final var level1 = TREE_ROOT.getRight();\n     assertNotNull(level1);\n     assertEquals(\"level1_b\", level1.getName());\n     assertEquals(1, level1.getTreeSize());\n     assertSame(NullNode.getInstance(), level1.getRight());\n     assertSame(NullNode.getInstance(), level1.getLeft());\n   }\n \n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+  private static class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private final List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender() {\n@@ -154,7 +153,7 @@ protected void append(ILoggingEvent eventObject) {\n     }\n \n     public boolean logContains(String message) {\n-      return log.stream().anyMatch(event -> event.getMessage().equals(message));\n+      return log.stream().map(ILoggingEvent::getMessage).anyMatch(message::equals);\n     }\n \n     public int getLogSize() {",
    "output": "Refactor null object pattern to"
  },
  {
    "input": "diff --git a/memento/src/main/java/com/iluwatar/memento/Star.java b/memento/src/main/java/com/iluwatar/memento/Star.java\n--- a/memento/src/main/java/com/iluwatar/memento/Star.java\n+++ b/memento/src/main/java/com/iluwatar/memento/Star.java\n@@ -70,22 +70,18 @@ public void timePasses() {\n   }\n \n   StarMemento getMemento() {\n-\n     var state = new StarMementoInternal();\n     state.setAgeYears(ageYears);\n     state.setMassTons(massTons);\n     state.setType(type);\n     return state;\n-\n   }\n \n   void setMemento(StarMemento memento) {\n-\n     var state = (StarMementoInternal) memento;\n     this.type = state.getType();\n     this.ageYears = state.getAgeYears();\n     this.massTons = state.getMassTons();\n-\n   }\n \n   @Override\n\ndiff --git a/memento/src/main/java/com/iluwatar/memento/StarType.java b/memento/src/main/java/com/iluwatar/memento/StarType.java\n--- a/memento/src/main/java/com/iluwatar/memento/StarType.java\n+++ b/memento/src/main/java/com/iluwatar/memento/StarType.java\n@@ -27,9 +27,12 @@\n  * StarType enumeration.\n  */\n public enum StarType {\n-\n-  SUN(\"sun\"), RED_GIANT(\"red giant\"), WHITE_DWARF(\"white dwarf\"), SUPERNOVA(\"supernova\"), DEAD(\n-      \"dead star\"), UNDEFINED(\"\");\n+  SUN(\"sun\"),\n+  RED_GIANT(\"red giant\"),\n+  WHITE_DWARF(\"white dwarf\"),\n+  SUPERNOVA(\"supernova\"),\n+  DEAD(\"dead star\"),\n+  UNDEFINED(\"\");\n \n   private final String title;\n ",
    "output": "Refactor using var"
  },
  {
    "input": "diff --git a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n--- a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n+++ b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n@@ -26,7 +26,6 @@\n import com.iluwatar.masterworker.Input;\n import com.iluwatar.masterworker.Result;\n import com.iluwatar.masterworker.system.systemworkers.Worker;\n-import java.util.Dictionary;\n import java.util.Hashtable;\n import java.util.List;\n \n@@ -40,7 +39,7 @@\n public abstract class Master {\n   private final int numOfWorkers;\n   private final List<Worker> workers;\n-  private final Dictionary<Integer, Result<?>> allResultData;\n+  private final Hashtable<Integer, Result<?>> allResultData;\n   private int expectedNumResults;\n   private Result<?> finalResult;\n \n@@ -56,7 +55,7 @@ public Result<?> getFinalResult() {\n     return this.finalResult;\n   }\n \n-  Dictionary<Integer, Result<?>> getAllResultData() {\n+  Hashtable<Integer, Result<?>> getAllResultData() {\n     return this.allResultData;\n   }\n ",
    "output": "Remove usage of Dictionary"
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java\n@@ -29,5 +29,5 @@\n interface RemoteServiceInterface {\n   int FAILURE = -1;\n \n-  long doRemoteFunction(int value) throws Exception;\n+  long doRemoteFunction(int value);\n }",
    "output": "Explanation for Ambassador"
  },
  {
    "input": "diff --git a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n--- a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n+++ b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n@@ -75,14 +75,21 @@ public void doWork(Input<?> input) {\n   }\n \n   private void divideWork(Input<?> input) {\n-    List<? extends Input<?>> dividedInput = input.divideData(numOfWorkers);\n+    var dividedInput = input.divideData(numOfWorkers);\n     if (dividedInput != null) {\n       this.expectedNumResults = dividedInput.size();\n       for (var i = 0; i < this.expectedNumResults; i++) {\n         //ith division given to ith worker in this.workers\n         this.workers.get(i).setReceivedData(this, dividedInput.get(i));\n         this.workers.get(i).start();\n       }\n+      for (var i = 0; i < this.expectedNumResults; i++) {\n+        try {\n+          this.workers.get(i).join();\n+        } catch (InterruptedException e) {\n+          System.err.println(\"Error while executing thread\");\n+        }\n+      }\n     }\n   }\n ",
    "output": "Fix test cases for master-worker-pattern"
  },
  {
    "input": "diff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Fatigue.java\n@@ -27,8 +27,9 @@\n  * Fatigue enumeration.\n  */\n public enum Fatigue {\n-\n-  ALERT(\"alert\"), TIRED(\"tired\"), SLEEPING(\"sleeping\");\n+  ALERT(\"alert\"),\n+  TIRED(\"tired\"),\n+  SLEEPING(\"sleeping\");\n \n   private final String title;\n \n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Health.java\n@@ -27,8 +27,9 @@\n  * Health enumeration.\n  */\n public enum Health {\n-\n-  HEALTHY(\"healthy\"), WOUNDED(\"wounded\"), DEAD(\"dead\");\n+  HEALTHY(\"healthy\"),\n+  WOUNDED(\"wounded\"),\n+  DEAD(\"dead\");\n \n   private final String title;\n \n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java\n--- a/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/model/view/controller/Nourishment.java\n@@ -27,8 +27,9 @@\n  * Nourishment enumeration.\n  */\n public enum Nourishment {\n-\n-  SATURATED(\"saturated\"), HUNGRY(\"hungry\"), STARVING(\"starving\");\n+  SATURATED(\"saturated\"),\n+  HUNGRY(\"hungry\"),\n+  STARVING(\"starving\");\n \n   private final String title;\n \n\ndiff --git a/model-view-controller/src/test/java/com/iluwatar/model/view/controller/GiantModelTest.java b/model-view-controller/src/test/java/com/iluwatar/model/view/controller/GiantModelTest.java\n--- a/model-view-controller/src/test/java/com/iluwatar/model/view/controller/GiantModelTest.java\n+++ b/model-view-controller/src/test/java/com/iluwatar/model/view/controller/GiantModelTest.java\n@@ -39,13 +39,13 @@ public class GiantModelTest {\n    */\n   @Test\n   public void testSetHealth() {\n-    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.HUNGRY);\n+    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);\n     assertEquals(Health.HEALTHY, model.getHealth());\n+    var messageFormat = \"The giant looks %s, alert and saturated.\";\n     for (final var health : Health.values()) {\n       model.setHealth(health);\n       assertEquals(health, model.getHealth());\n-      assertEquals(\"The giant looks \" + health.toString() + \", alert and saturated.\", model\n-          .toString());\n+      assertEquals(String.format(messageFormat, health), model.toString());\n     }\n   }\n \n@@ -54,13 +54,13 @@ public void testSetHealth() {\n    */\n   @Test\n   public void testSetFatigue() {\n-    final var model = new GiantModel(Health.WOUNDED, Fatigue.ALERT, Nourishment.SATURATED);\n+    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);\n     assertEquals(Fatigue.ALERT, model.getFatigue());\n+    var messageFormat = \"The giant looks healthy, %s and saturated.\";\n     for (final var fatigue : Fatigue.values()) {\n       model.setFatigue(fatigue);\n       assertEquals(fatigue, model.getFatigue());\n-      assertEquals(\"The giant looks healthy, \" + fatigue.toString() + \" and saturated.\", model\n-          .toString());\n+      assertEquals(String.format(messageFormat, fatigue), model.toString());\n     }\n   }\n \n@@ -69,13 +69,13 @@ public void testSetFatigue() {\n    */\n   @Test\n   public void testSetNourishment() {\n-    final var model = new GiantModel(Health.HEALTHY, Fatigue.TIRED, Nourishment.SATURATED);\n+    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);\n     assertEquals(Nourishment.SATURATED, model.getNourishment());\n+    var messageFormat = \"The giant looks healthy, alert and %s.\";\n     for (final var nourishment : Nourishment.values()) {\n       model.setNourishment(nourishment);\n       assertEquals(nourishment, model.getNourishment());\n-      assertEquals(\"The giant looks healthy, alert and \" + nourishment.toString() + \".\", model\n-          .toString());\n+      assertEquals(String.format(messageFormat, nourishment), model.toString());\n     }\n   }\n ",
    "output": "Resolves test failures"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -46,7 +46,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    final Logger logger = LoggerFactory.getLogger(App.class);\n+    final var logger = LoggerFactory.getLogger(App.class);\n     var guard = new Guard();\n     var thief = new Thief();\n \n@@ -59,7 +59,7 @@ public static void main(String[] args) {\n \n     //noinspection ConstantConditions\n     if (thief instanceof Permission) {\n-      thief.doNothing();\n+      thief.steal();\n     } else {\n       thief.doNothing();\n     }\n\ndiff --git a/marker/src/main/java/Guard.java b/marker/src/main/java/Guard.java\n--- a/marker/src/main/java/Guard.java\n+++ b/marker/src/main/java/Guard.java\n@@ -28,7 +28,6 @@\n  * Class defining Guard.\n  */\n public class Guard implements Permission {\n-\n   private static final Logger LOGGER = LoggerFactory.getLogger(Guard.class);\n \n   protected void enter() {\n\ndiff --git a/marker/src/main/java/Thief.java b/marker/src/main/java/Thief.java\n--- a/marker/src/main/java/Thief.java\n+++ b/marker/src/main/java/Thief.java\n@@ -28,10 +28,9 @@\n  * Class defining Thief.\n  */\n public class Thief {\n-\n   private static final Logger LOGGER = LoggerFactory.getLogger(Thief.class);\n \n-  protected static void steal() {\n+  protected void steal() {\n     LOGGER.info(\"Steal valuable items\");\n   }\n ",
    "output": "Resolves CR comments"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/command/Command.java b/command/src/main/java/com/iluwatar/command/Command.java\n--- a/command/src/main/java/com/iluwatar/command/Command.java\n+++ b/command/src/main/java/com/iluwatar/command/Command.java\n@@ -27,13 +27,11 @@\n  * Interface for Commands.\r\n  */\r\n public interface Command {\r\n+  void execute(Target target);\r\n \r\n-  public void execute(Target target);\r\n+  void undo();\r\n \r\n-  public void undo();\r\n-\r\n-  public void redo();\r\n-\r\n-  public String toString();\r\n+  void redo();\r\n \r\n+  String toString();\r\n }\r",
    "output": "Remove unwanted modifiers"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/command/Command.java b/command/src/main/java/com/iluwatar/command/Command.java\n--- a/command/src/main/java/com/iluwatar/command/Command.java\n+++ b/command/src/main/java/com/iluwatar/command/Command.java\n@@ -26,15 +26,14 @@\n /**\r\n  * Interface for Commands.\r\n  */\r\n-public abstract class Command {\r\n+public interface Command {\r\n \r\n-  public abstract void execute(Target target);\r\n+  public void execute(Target target);\r\n \r\n-  public abstract void undo();\r\n+  public void undo();\r\n \r\n-  public abstract void redo();\r\n+  public void redo();\r\n \r\n-  @Override\r\n-  public abstract String toString();\r\n+  public String toString();\r\n \r\n }\r\n\ndiff --git a/command/src/main/java/com/iluwatar/command/InvisibilitySpell.java b/command/src/main/java/com/iluwatar/command/InvisibilitySpell.java\n--- a/command/src/main/java/com/iluwatar/command/InvisibilitySpell.java\n+++ b/command/src/main/java/com/iluwatar/command/InvisibilitySpell.java\n@@ -26,7 +26,7 @@\n /**\n  * InvisibilitySpell is a concrete command.\n  */\n-public class InvisibilitySpell extends Command {\n+public class InvisibilitySpell implements Command {\n \n   private Target target;\n \n\ndiff --git a/command/src/main/java/com/iluwatar/command/ShrinkSpell.java b/command/src/main/java/com/iluwatar/command/ShrinkSpell.java\n--- a/command/src/main/java/com/iluwatar/command/ShrinkSpell.java\n+++ b/command/src/main/java/com/iluwatar/command/ShrinkSpell.java\n@@ -26,7 +26,7 @@\n /**\n  * ShrinkSpell is a concrete command.\n  */\n-public class ShrinkSpell extends Command {\n+public class ShrinkSpell implements Command {\n \n   private Size oldSize;\n   private Target target;",
    "output": "Typically command pattern is implemented using\ninterfaces and concrete classes. Refactor the\ncode to use the same"
  },
  {
    "input": "diff --git a/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAntiAAATest.java b/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAntiAAATest.java\n--- a/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAntiAAATest.java\n+++ b/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAntiAAATest.java\n@@ -44,16 +44,16 @@ public void testCash() {\n     var cash = new Cash(3);\n     //test plus\n     cash.plus(4);\n-    assertEquals(cash.count(), 7);\n+    assertEquals(7, cash.count());\n     //test minus\n     cash = new Cash(8);\n     assertTrue(cash.minus(5));\n-    assertEquals(cash.count(), 3);\n+    assertEquals(3, cash.count());\n     assertFalse(cash.minus(6));\n-    assertEquals(cash.count(), 3);\n+    assertEquals(3, cash.count());\n     //test update\n     cash.plus(5);\n     assertTrue(cash.minus(5));\n-    assertEquals(cash.count(), 3);\n+    assertEquals(3, cash.count());\n   }\n }",
    "output": "Correct assertEquals order for expected, actual."
  },
  {
    "input": "diff --git a/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAAATest.java b/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAAATest.java\n--- a/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAAATest.java\n+++ b/arrange-act-assert/src/test/java/com/iluwatar/arrangeactassert/CashAAATest.java\n@@ -60,7 +60,7 @@ public void testPlus() {\n     //Act\n     cash.plus(4);\n     //Assert\n-    assertEquals(cash.count(), 7);\n+    assertEquals(7, cash.count());\n   }\n \n   @Test\n@@ -71,7 +71,7 @@ public void testMinus() {\n     var result = cash.minus(5);\n     //Assert\n     assertTrue(result);\n-    assertEquals(cash.count(), 3);\n+    assertEquals(3, cash.count());\n   }\n \n   @Test\n@@ -82,7 +82,7 @@ public void testInsufficientMinus() {\n     var result = cash.minus(6);\n     //Assert\n     assertFalse(result);\n-    assertEquals(cash.count(), 1);\n+    assertEquals(1, cash.count());\n   }\n \n   @Test\n@@ -94,6 +94,6 @@ public void testUpdate() {\n     var result = cash.minus(3);\n     //Assert\n     assertTrue(result);\n-    assertEquals(cash.count(), 8);\n+    assertEquals(8, cash.count());\n   }\n }",
    "output": "Correct assertEquals order for expected, actual."
  },
  {
    "input": "diff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java\n@@ -32,7 +32,6 @@\n  */\n public interface HasParts extends Document {\n \n-\n   default Stream<Part> getParts() {\n     return children(Property.PARTS.toString(), Part::new);\n   }\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java\n@@ -32,7 +32,6 @@\n  */\n public interface HasPrice extends Document {\n \n-\n   default Optional<Number> getPrice() {\n     return Optional.ofNullable((Number) get(Property.PRICE.toString()));\n   }\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasType.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasType.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasType.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasType.java\n@@ -32,7 +32,6 @@\n  */\n public interface HasType extends Document {\n \n-\n   default Optional<String> getType() {\n     return Optional.ofNullable((String) get(Property.TYPE.toString()));\n   }",
    "output": "Explanation for Abstract Document"
  },
  {
    "input": "diff --git a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java\n--- a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java\n+++ b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java\n@@ -47,6 +47,7 @@ public static void main(String[] args) throws Exception {\n     deleteSchema(dataSource);\n     createSchema(dataSource);\n     final var dao = new HotelDaoImpl(dataSource);\n+\n     addRooms(dao);\n \n     getRoomStatus(dao);\n@@ -97,7 +98,7 @@ private static void createSchema(DataSource dataSource) throws Exception {\n    *\n    * @return h2 datasource\n    */\n-  public static DataSource createDataSource() {\n+  private static DataSource createDataSource() {\n     JdbcDataSource dataSource = new JdbcDataSource();\n     dataSource.setUrl(H2_DB_URL);\n     return dataSource;\n@@ -114,7 +115,7 @@ private static void addRooms(HotelDaoImpl hotelDao) throws Exception {\n    *\n    * @return list of rooms\n    */\n-  public static List<Room> generateSampleRooms() {\n+  private static List<Room> generateSampleRooms() {\n     final var room1 = new Room(1, \"Single\", 50, false);\n     final var room2 = new Room(2, \"Double\", 80, false);\n     final var room3 = new Room(3, \"Queen\", 120, false);\n\ndiff --git a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n--- a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n+++ b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n@@ -261,7 +261,6 @@ private void assertRoomCountIs(int count) throws Exception {\n     }\n   }\n \n-\n   /**\n    * An arbitrary number which does not correspond to an active Room id.\n    *\n\ndiff --git a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelTest.java b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelTest.java\n--- a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelTest.java\n+++ b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelTest.java\n@@ -63,7 +63,7 @@ public void bookingRoomShouldChangeBookedStatusToTrue() throws Exception {\n   @Test()\n   public void bookingRoomWithInvalidIdShouldRaiseException() {\n     assertThrows(Exception.class, () -> {\n-      hotel.bookRoom(999);\n+      hotel.bookRoom(getNonExistingRoomId());\n     });\n   }\n \n@@ -91,7 +91,7 @@ public void cancelRoomBookingShouldChangeBookedStatus() throws Exception {\n   @Test\n   public void cancelRoomBookingWithInvalidIdShouldRaiseException() {\n     assertThrows(Exception.class, () -> {\n-      hotel.cancelRoomBooking(999);\n+      hotel.cancelRoomBooking(getNonExistingRoomId());\n     });\n   }\n \n@@ -140,4 +140,13 @@ public static List<Room> generateSampleRooms() {\n     final var room6 = new Room(6, \"Double\", 80, false);\n     return List.of(room1, room2, room3, room4, room5, room6);\n   }\n+\n+  /**\n+   * An arbitrary number which does not correspond to an active Room id.\n+   *\n+   * @return an int of a room id which doesn't exist\n+   */\n+  private int getNonExistingRoomId() {\n+    return 999;\n+  }\n }",
    "output": "Add UML diagram"
  },
  {
    "input": "diff --git a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n--- a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n+++ b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n@@ -57,6 +57,7 @@ public class HotelDaoImplTest {\n   public void createSchema() throws SQLException {\n     try (var connection = DriverManager.getConnection(DB_URL);\n          var statement = connection.createStatement()) {\n+      statement.execute(RoomSchemaSql.DELETE_SCHEMA_SQL);\n       statement.execute(RoomSchemaSql.CREATE_SCHEMA_SQL);\n     }\n   }",
    "output": "Fix a test"
  },
  {
    "input": "diff --git a/pipeline/src/main/java/com/iluwatar/pipeline/App.java b/pipeline/src/main/java/com/iluwatar/pipeline/App.java\n--- a/pipeline/src/main/java/com/iluwatar/pipeline/App.java\n+++ b/pipeline/src/main/java/com/iluwatar/pipeline/App.java\n@@ -59,8 +59,9 @@ public static void main(String[] args) {\n       then is expected to receive an input of char[] array since that is the type being returned\n       by the previous handler, ConvertToCharArrayHandler.\n      */\n-    new Pipeline<>(new RemoveAlphabetsHandler())\n+    var filters = new Pipeline<>(new RemoveAlphabetsHandler())\n         .addHandler(new RemoveDigitsHandler())\n         .addHandler(new ConvertToCharArrayHandler());\n+    filters.execute(\"GoYankees123!\");\n   }\n }",
    "output": "Add explanation to Pipeline"
  },
  {
    "input": "diff --git a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java\n--- a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java\n+++ b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/App.java\n@@ -1,8 +0,0 @@\n-package com.ashishtrivedi16.transactionscript;\n-\n-public class App {\n-\n-    public static void main(String[] args) {\n-        System.out.println(\"Hello, world!\");\n-    }\n-}\n\ndiff --git a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java\n--- a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java\n+++ b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/Hotel.java\n@@ -0,0 +1,24 @@\n+package com.ashishtrivedi16.transactionscript;\n+\n+public class Hotel {\n+\n+    public void bookRoom(int roomNumber) {\n+        /*\n+           TODO\n+            -> Check if room is available\n+            -> Calculate price\n+            -> Book the room\n+            -> Commit transaction\n+        */\n+    }\n+\n+    public void cancelRoomBooking(int roomNumber) {\n+        /*\n+            TODO\n+             -> Check if room is booked\n+             -> Calculate refund price\n+             -> Cancel the room booking\n+             -> Commit transaction\n+         */\n+    }\n+}\n\ndiff --git a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java\n--- a/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java\n+++ b/transaction-script/src/main/java/com/ashishtrivedi16/transactionscript/TransactionScriptApp.java\n@@ -0,0 +1,14 @@\n+package com.ashishtrivedi16.transactionscript;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TransactionScriptApp {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionScriptApp.class);\n+\n+    public static void main(String[] args) {\n+        LOGGER.info(\"Hello, World!\");\n+\n+    }\n+}",
    "output": "Add basic structure and planned out the roadmap"
  },
  {
    "input": "diff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/App.java\n@@ -32,15 +32,15 @@\n  * The Data Transfer Object pattern is a design pattern in which an data transfer object is used to\n  * serve related information together to avoid multiple call for each piece of information.\n  *\n- * <p>In this example, ({@link CustomerClientApp}) as as customer details consumer i.e. client to\n+ * <p>In this example, ({@link App}) as as customer details consumer i.e. client to\n  * request for customer details to server.\n  *\n  * <p>CustomerResource ({@link CustomerResource}) act as server to serve customer information. And\n  * The CustomerDto ({@link CustomerDto} is data transfer object to share customer information.\n  */\n-public class CustomerClientApp {\n+public class App {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(CustomerClientApp.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n \n   /**\n    * Method as act client and request to server for details.\n\ndiff --git a/data-transfer-object/src/test/java/com/iluwatar/datatransfer/AppTest.java b/data-transfer-object/src/test/java/com/iluwatar/datatransfer/AppTest.java\n--- a/data-transfer-object/src/test/java/com/iluwatar/datatransfer/AppTest.java\n+++ b/data-transfer-object/src/test/java/com/iluwatar/datatransfer/AppTest.java\n@@ -0,0 +1,33 @@\n+/*\n+ * The MIT License\n+ * Copyright © 2014-2019 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.datatransfer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AppTest {\n+    @Test\n+    public void test() throws Exception {\n+        App.main(new String[]{});\n+    }\n+}",
    "output": "Add explanation for DTO"
  },
  {
    "input": "diff --git a/callback/src/main/java/com/iluwatar/callback/LambdasApp.java b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java\n--- a/callback/src/main/java/com/iluwatar/callback/LambdasApp.java\n+++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java\n@@ -1,48 +0,0 @@\n-/*\n- * The MIT License\n- * Copyright © 2014-2019 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-\n-package com.iluwatar.callback;\n-\n-import static org.slf4j.LoggerFactory.getLogger;\n-\n-import org.slf4j.Logger;\n-\n-/**\n- * This example generates the exact same output as {@link App} however the callback has been defined\n- * as a Lambdas expression.\n- */\n-public final class LambdasApp {\n-\n-  private static final Logger LOGGER = getLogger(LambdasApp.class);\n-\n-  private LambdasApp() {\n-  }\n-\n-  /**\n-   * Program entry point.\n-   */\n-  public static void main(final String[] args) {\n-    var task = new SimpleTask();\n-    task.executeWith(() -> LOGGER.info(\"I'm done now.\"));\n-  }\n-}\n\ndiff --git a/callback/src/main/java/com/iluwatar/callback/Task.java b/callback/src/main/java/com/iluwatar/callback/Task.java\n--- a/callback/src/main/java/com/iluwatar/callback/Task.java\n+++ b/callback/src/main/java/com/iluwatar/callback/Task.java\n@@ -33,7 +33,7 @@ public abstract class Task {\n   /**\n    * Execute with callback.\n    */\n-  final void executeWith(final Callback callback) {\n+  final void executeWith(Callback callback) {\n     execute();\n     Optional.ofNullable(callback).ifPresent(Callback::call);\n   }",
    "output": "Add explanation for Callback"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/Customer.java b/dao/src/main/java/com/iluwatar/dao/Customer.java\n--- a/dao/src/main/java/com/iluwatar/dao/Customer.java\n+++ b/dao/src/main/java/com/iluwatar/dao/Customer.java\n@@ -35,7 +35,7 @@ public class Customer {\n   /**\n    * Creates an instance of customer.\n    */\n-  public Customer(final int id, final String firstName, final String lastName) {\n+  public Customer(int id, String firstName, String lastName) {\n     this.id = id;\n     this.firstName = firstName;\n     this.lastName = lastName;",
    "output": "Add explanation for Dao"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -27,15 +27,13 @@\n  * <p>Thread-safe Singleton class. The instance is lazily initialized and thus needs synchronization\n  * mechanism.</p>\n  *\n- * <p>Note: if created by reflection then a singleton will not be created but multiple options\n- * in the same classloader</p>\n  */\n public final class ThreadSafeLazyLoadedIvoryTower {\n \n-  private static ThreadSafeLazyLoadedIvoryTower instance;\n+  private static volatile ThreadSafeLazyLoadedIvoryTower instance;\n \n   private ThreadSafeLazyLoadedIvoryTower() {\n-    // protect against instantiation via reflection\n+    // Protect against instantiation via reflection\n     if (instance == null) {\n       instance = this;\n     } else {\n@@ -44,13 +42,16 @@ private ThreadSafeLazyLoadedIvoryTower() {\n   }\n \n   /**\n-   * The instance gets created only when it is called for first time. Lazy-loading\n+   * The instance doesn't get created until the method is called for the first time\n    */\n   public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n     if (instance == null) {\n-      instance = new ThreadSafeLazyLoadedIvoryTower();\n+      synchronized (ThreadSafeLazyLoadedIvoryTower.class) {\n+        if (instance == null) {\n+          instance = new ThreadSafeLazyLoadedIvoryTower();\n+        }\n+      }\n     }\n-\n     return instance;\n   }\n }",
    "output": "Improve lazy loaded Singleton example"
  },
  {
    "input": "diff --git a/module/src/main/java/com/iluwatar/module/App.java b/module/src/main/java/com/iluwatar/module/App.java\n--- a/module/src/main/java/com/iluwatar/module/App.java\n+++ b/module/src/main/java/com/iluwatar/module/App.java\n@@ -37,6 +37,8 @@\n  */\r\n public class App {\r\n \r\n+  private static final String ERROR = \"Error\";\r\n+  private static final String MESSAGE = \"Message\";\r\n   public static FileLoggerModule fileLoggerModule;\r\n   public static ConsoleLoggerModule consoleLoggerModule;\r\n \r\n@@ -71,12 +73,12 @@ public static void unprepare() {\n   public static void execute(final String... args) {\r\n \r\n     /* Send logs on file system */\r\n-    fileLoggerModule.printString(\"Message\");\r\n-    fileLoggerModule.printErrorString(\"Error\");\r\n+    fileLoggerModule.printString(MESSAGE);\r\n+    fileLoggerModule.printErrorString(ERROR);\r\n \r\n     /* Send logs on console */\r\n-    consoleLoggerModule.printString(\"Message\");\r\n-    consoleLoggerModule.printErrorString(\"Error\");\r\n+    consoleLoggerModule.printString(MESSAGE);\r\n+    consoleLoggerModule.printErrorString(ERROR);\r\n   }\r\n \r\n   /**\r\n\ndiff --git a/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java b/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java\n--- a/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java\n+++ b/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java\n@@ -65,7 +65,7 @@ public final class FileLoggerModuleTest {\n   public void testFileMessage() throws IOException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -89,7 +89,7 @@ public void testFileMessage() throws IOException {\n   public void testNoFileMessage() throws IOException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -111,7 +111,7 @@ public void testNoFileMessage() throws IOException {\n   public void testFileErrorMessage() throws FileNotFoundException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -136,7 +136,7 @@ public void testFileErrorMessage() throws FileNotFoundException {\n   public void testNoFileErrorMessage() throws FileNotFoundException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -157,7 +157,7 @@ public void testNoFileErrorMessage() throws FileNotFoundException {\n   private static final String readFirstLine(final String file) {\r\n \r\n     String firstLine = null;\r\n-    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(file))) {\r\n+    try (var bufferedReader = new BufferedReader(new FileReader(file))) {\r\n \r\n       while (bufferedReader.ready()) {\r\n \r",
    "output": "Add Java 11 support and created constants in App.java Co-authored-by: cherukumilliv <VenkatRamaSubbarago.Cherukumilli@Cevalogistics.com>"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -21,6 +21,9 @@\n  * THE SOFTWARE.\n  */\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Created by Alexis on 28-Apr-17. With Marker interface idea is to make empty interface and extend\n  * it. Basically it is just to identify the special objects from normal objects. Like in case of\n@@ -43,10 +46,23 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n+    final Logger logger = LoggerFactory.getLogger(App.class);\n     var guard = new Guard();\n     var thief = new Thief();\n-    guard.enter();\n-    thief.doNothing();\n+\n+    //noinspection ConstantConditions\n+    if (guard instanceof Permission) {\n+      guard.enter();\n+    } else {\n+      logger.info(\"You have no permission to enter, please leave this area\");\n+    }\n+\n+    //noinspection ConstantConditions\n+    if (thief instanceof Permission) {\n+      thief.doNothing();\n+    } else {\n+      thief.doNothing();\n+    }\n   }\n }\n ",
    "output": "Resolves CR comments"
  },
  {
    "input": "diff --git a/mutex/src/main/java/com/iluwatar/mutex/App.java b/mutex/src/main/java/com/iluwatar/mutex/App.java\n--- a/mutex/src/main/java/com/iluwatar/mutex/App.java\n+++ b/mutex/src/main/java/com/iluwatar/mutex/App.java\n@@ -38,10 +38,10 @@ public class App {\n    * main method.\n    */\n   public static void main(String[] args) {\n-    Mutex mutex = new Mutex();\n-    Jar jar = new Jar(1000, mutex);\n-    Thief peter = new Thief(\"Peter\", jar);\n-    Thief john = new Thief(\"John\", jar);\n+    var mutex = new Mutex();\n+    var jar = new Jar(1000, mutex);\n+    var peter = new Thief(\"Peter\", jar);\n+    var john = new Thief(\"John\", jar);\n     peter.start();\n     john.start();\n   }\n\ndiff --git a/mutex/src/main/java/com/iluwatar/mutex/Jar.java b/mutex/src/main/java/com/iluwatar/mutex/Jar.java\n--- a/mutex/src/main/java/com/iluwatar/mutex/Jar.java\n+++ b/mutex/src/main/java/com/iluwatar/mutex/Jar.java\n@@ -48,7 +48,7 @@ public Jar(int beans, Lock lock) {\n    * Method for a thief to take a bean.\n    */\n   public boolean takeBean() {\n-    boolean success = false;\n+    var success = false;\n     try {\n       lock.acquire();\n       success = beans > 0;\n\ndiff --git a/mutex/src/main/java/com/iluwatar/mutex/Thief.java b/mutex/src/main/java/com/iluwatar/mutex/Thief.java\n--- a/mutex/src/main/java/com/iluwatar/mutex/Thief.java\n+++ b/mutex/src/main/java/com/iluwatar/mutex/Thief.java\n@@ -54,7 +54,7 @@ public Thief(String name, Jar jar) {\n    */\n   @Override\n   public void run() {\n-    int beans = 0;\n+    var beans = 0;\n \n     while (jar.takeBean()) {\n       beans = beans + 1;\n\ndiff --git a/mutex/src/test/java/com/iluwatar/mutex/AppTest.java b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java\n--- a/mutex/src/test/java/com/iluwatar/mutex/AppTest.java\n+++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java\n@@ -25,15 +25,12 @@\n \n import org.junit.jupiter.api.Test;\n \n-import java.io.IOException;\n-\n /**\n  * Application Test Entrypoint\n  */\n public class AppTest {\n   @Test\n-  public void test() throws IOException {\n-    String[] args = {};\n-    App.main(args);\n+  public void test() {\n+    App.main(new String[]{});\n   }\n }\n\ndiff --git a/mutex/src/test/java/com/iluwatar/mutex/JarTest.java b/mutex/src/test/java/com/iluwatar/mutex/JarTest.java\n--- a/mutex/src/test/java/com/iluwatar/mutex/JarTest.java\n+++ b/mutex/src/test/java/com/iluwatar/mutex/JarTest.java\n@@ -23,10 +23,11 @@\n \n package com.iluwatar.mutex;\n \n-import org.junit.jupiter.api.Test;\n-\n import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Test case for taking beans from a Jar\n@@ -35,12 +36,10 @@ public class JarTest {\n \n   @Test\n   public void testTakeBeans() {\n-    Mutex mutex = new Mutex();\n-    Jar jar = new Jar(10, mutex);\n-    for (int i = 0; i < 10; i++) {\n-      assertTrue(jar.takeBean());\n-    }\n+    var mutex = new Mutex();\n+    var jar = new Jar(10, mutex);\n+    IntStream.range(0, 10).mapToObj(i -> jar.takeBean()).forEach(Assertions::assertTrue);\n     assertFalse(jar.takeBean());\n   }\n \n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/mutex/src/test/java/com/iluwatar/mutex/MutexTest.java b/mutex/src/test/java/com/iluwatar/mutex/MutexTest.java\n--- a/mutex/src/test/java/com/iluwatar/mutex/MutexTest.java\n+++ b/mutex/src/test/java/com/iluwatar/mutex/MutexTest.java\n@@ -23,20 +23,20 @@\n \n package com.iluwatar.mutex;\n \n-import org.junit.jupiter.api.Test;\n-\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import org.junit.jupiter.api.Test;\n+\n /**\n  * Test case for acquiring and releasing a Mutex\n  */\n public class MutexTest {\n \n   @Test\n   public void acquireReleaseTest() {\n-    Mutex mutex = new Mutex();\n+    var mutex = new Mutex();\n     assertNull(mutex.getOwner());\n     try {\n       mutex.acquire();",
    "output": "Java 11 migraiton: mutex"
  },
  {
    "input": "diff --git a/mute-idiom/src/main/java/com/iluwatar/mute/App.java b/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n@@ -25,7 +25,7 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.sql.SQLException;\n+import java.util.Optional;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -52,9 +52,8 @@ public class App {\n    * Program entry point.\n    *\n    * @param args command line args.\n-   * @throws Exception if any exception occurs\n    */\n-  public static void main(String[] args) throws Exception {\n+  public static void main(String[] args) {\n \n     useOfLoggedMute();\n \n@@ -68,32 +67,32 @@ public static void main(String[] args) throws Exception {\n    * exception occurs.\n    */\n   private static void useOfMute() {\n-    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    var out = new ByteArrayOutputStream();\n     Mute.mute(() -> out.write(\"Hello\".getBytes()));\n   }\n \n-  private static void useOfLoggedMute() throws SQLException {\n-    Resource resource = null;\n+  private static void useOfLoggedMute() {\n+    Optional<Resource> resource = Optional.empty();\n     try {\n-      resource = acquireResource();\n-      utilizeResource(resource);\n+      resource = Optional.of(acquireResource());\n+      utilizeResource(resource.get());\n     } finally {\n-      closeResource(resource);\n+      resource.ifPresent(App::closeResource);\n     }\n   }\n \n   /*\n    * All we can do while failed close of a resource is to log it.\n    */\n   private static void closeResource(Resource resource) {\n-    Mute.loggedMute(() -> resource.close());\n+    Mute.loggedMute(resource::close);\n   }\n \n-  private static void utilizeResource(Resource resource) throws SQLException {\n+  private static void utilizeResource(Resource resource) {\n     LOGGER.info(\"Utilizing acquired resource: {}\", resource);\n   }\n \n-  private static Resource acquireResource() throws SQLException {\n+  private static Resource acquireResource() {\n     return new Resource() {\n \n       @Override\n\ndiff --git a/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java b/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java\n--- a/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java\n+++ b/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java\n@@ -27,12 +27,11 @@\n \n /**\n  * Tests that Mute idiom example runs without errors.\n- *\n  */\n public class AppTest {\n \n   @Test\n-  public void test() throws Exception {\n-    App.main(null);\n+  public void test() {\n+    App.main(new String[]{});\n   }\n }\n\ndiff --git a/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java b/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n--- a/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n+++ b/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n@@ -23,16 +23,14 @@\n \n package com.iluwatar.mute;\n \n-import org.junit.jupiter.api.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n import java.io.PrintStream;\n-\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Test for the mute-idiom pattern\n@@ -50,9 +48,7 @@ public void muteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunna\n \n   @Test\n   public void muteShouldRethrowUnexpectedExceptionAsAssertionError() {\n-    assertThrows(AssertionError.class, () -> {\n-      Mute.mute(this::methodThrowingException);\n-    });\n+    assertThrows(AssertionError.class, () -> Mute.mute(this::methodThrowingException));\n   }\n \n   @Test\n@@ -62,7 +58,7 @@ public void loggedMuteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfChecke\n \n   @Test\n   public void loggedMuteShouldLogExceptionTraceBeforeSwallowingIt() {\n-    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+    var stream = new ByteArrayOutputStream();\n     System.setErr(new PrintStream(stream));\n \n     Mute.loggedMute(this::methodThrowingException);",
    "output": "Java 11 migraiton: mute-idiom"
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/multiton/Nazgul.java b/multiton/src/main/java/com/iluwatar/multiton/Nazgul.java\n--- a/multiton/src/main/java/com/iluwatar/multiton/Nazgul.java\n+++ b/multiton/src/main/java/com/iluwatar/multiton/Nazgul.java\n@@ -31,7 +31,7 @@\n  */\n public final class Nazgul {\n \n-  private static Map<NazgulName, Nazgul> nazguls;\n+  private static final Map<NazgulName, Nazgul> nazguls;\n \n   private NazgulName name;\n \n\ndiff --git a/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java b/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java\n--- a/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java\n+++ b/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java\n@@ -27,7 +27,13 @@\n  * enum based multiton implementation.\n  */\n public enum NazgulEnum {\n-\n-  KHAMUL, MURAZOR, DWAR, JI_INDUR, AKHORAHIL, HOARMURATH, ADUNAPHEL, REN, UVATHA;\n-\n+  KHAMUL,\n+  MURAZOR,\n+  DWAR,\n+  JI_INDUR,\n+  AKHORAHIL,\n+  HOARMURATH,\n+  ADUNAPHEL,\n+  REN,\n+  UVATHA\n }\n\ndiff --git a/multiton/src/main/java/com/iluwatar/multiton/NazgulName.java b/multiton/src/main/java/com/iluwatar/multiton/NazgulName.java\n--- a/multiton/src/main/java/com/iluwatar/multiton/NazgulName.java\n+++ b/multiton/src/main/java/com/iluwatar/multiton/NazgulName.java\n@@ -27,7 +27,13 @@\n  * Each Nazgul has different {@link NazgulName}.\n  */\n public enum NazgulName {\n-\n-  KHAMUL, MURAZOR, DWAR, JI_INDUR, AKHORAHIL, HOARMURATH, ADUNAPHEL, REN, UVATHA;\n-\n+  KHAMUL,\n+  MURAZOR,\n+  DWAR,\n+  JI_INDUR,\n+  AKHORAHIL,\n+  HOARMURATH,\n+  ADUNAPHEL,\n+  REN,\n+  UVATHA\n }\n\ndiff --git a/multiton/src/test/java/com/iluwatar/multiton/AppTest.java b/multiton/src/test/java/com/iluwatar/multiton/AppTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/AppTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/AppTest.java\n@@ -26,15 +26,12 @@\n import org.junit.jupiter.api.Test;\n \n /**\n- * \n  * Application test\n- *\n  */\n public class AppTest {\n \n   @Test\n   public void test() {\n-    String[] args = {};\n-    App.main(args);\n+    App.main(new String[]{});\n   }\n }\n\ndiff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n@@ -39,10 +39,10 @@ class NazgulEnumTest {\n    */\n   @Test\n   public void testTheSameObjectIsReturnedWithMultipleCalls() {\n-    for (int i = 0; i < NazgulEnum.values().length; i++) {\n-      NazgulEnum instance1 = NazgulEnum.values()[i];\n-      NazgulEnum instance2 = NazgulEnum.values()[i];\n-      NazgulEnum instance3 = NazgulEnum.values()[i];\n+    for (var i = 0; i < NazgulEnum.values().length; i++) {\n+      var instance1 = NazgulEnum.values()[i];\n+      var instance2 = NazgulEnum.values()[i];\n+      var instance3 = NazgulEnum.values()[i];\n       assertSame(instance1, instance2);\n       assertSame(instance1, instance3);\n       assertSame(instance2, instance3);\n\ndiff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n@@ -41,8 +41,8 @@ public class NazgulTest {\n    */\n   @Test\n   public void testGetInstance() {\n-    for (final NazgulName name : NazgulName.values()) {\n-      final Nazgul nazgul = Nazgul.getInstance(name);\n+    for (final var name : NazgulName.values()) {\n+      final var nazgul = Nazgul.getInstance(name);\n       assertNotNull(nazgul);\n       assertSame(nazgul, Nazgul.getInstance(name));\n       assertEquals(name, nazgul.getName());",
    "output": "Java 11 migraiton: multiton"
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/App.java b/monostate/src/main/java/com/iluwatar/monostate/App.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/App.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/App.java\n@@ -30,7 +30,7 @@\n  *\n  * <p>In the following example, The {@link LoadBalancer} class represents the app's logic. It\n  * contains a series of Servers, which can handle requests of type {@link Request}. Two instances of\n- * LoadBalacer are created. When a request is made to a server via the first LoadBalancer the state\n+ * LoadBalancer are created. When a request is made to a server via the first LoadBalancer the state\n  * change in the first load balancer affects the second. So if the first LoadBalancer selects the\n  * Server 1, the second LoadBalancer on a new request will select the Second server. If a third\n  * LoadBalancer is created and a new request is made to it, then it will select the third server as\n@@ -43,8 +43,8 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    LoadBalancer loadBalancer1 = new LoadBalancer();\n-    LoadBalancer loadBalancer2 = new LoadBalancer();\n+    var loadBalancer1 = new LoadBalancer();\n+    var loadBalancer2 = new LoadBalancer();\n     loadBalancer1.serverRequest(new Request(\"Hello\"));\n     loadBalancer2.serverRequest(new Request(\"Hello World\"));\n   }\n\ndiff --git a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n@@ -38,8 +38,8 @@ public class LoadBalancer {\n   private static int lastServedId;\n \n   static {\n-    int id = 0;\n-    for (int port : new int[]{8080, 8081, 8082, 8083, 8084}) {\n+    var id = 0;\n+    for (var port : new int[]{8080, 8081, 8082, 8083, 8084}) {\n       SERVERS.add(new Server(\"localhost\", port, ++id));\n     }\n   }\n@@ -69,7 +69,7 @@ public synchronized void serverRequest(Request request) {\n     if (lastServedId >= SERVERS.size()) {\n       lastServedId = 0;\n     }\n-    Server server = SERVERS.get(lastServedId++);\n+    var server = SERVERS.get(lastServedId++);\n     server.serve(request);\n   }\n \n\ndiff --git a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n@@ -32,8 +32,7 @@ public class AppTest {\n \n   @Test\n   public void testMain() {\n-    String[] args = {};\n-    App.main(args);\n+    App.main(new String[]{});\n   }\n \n }\n\ndiff --git a/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n@@ -44,8 +44,8 @@ public class LoadBalancerTest {\n \n   @Test\n   public void testSameStateAmongstAllInstances() {\n-    final LoadBalancer firstBalancer = new LoadBalancer();\n-    final LoadBalancer secondBalancer = new LoadBalancer();\n+    final var firstBalancer = new LoadBalancer();\n+    final var secondBalancer = new LoadBalancer();\n     firstBalancer.addServer(new Server(\"localhost\", 8085, 6));\n     // Both should have the same number of servers.\n     assertEquals(firstBalancer.getNoOfServers(), secondBalancer.getNoOfServers());\n@@ -55,18 +55,18 @@ public void testSameStateAmongstAllInstances() {\n \n   @Test\n   public void testServe() {\n-    final Server server = mock(Server.class);\n+    final var server = mock(Server.class);\n     when(server.getHost()).thenReturn(\"testhost\");\n     when(server.getPort()).thenReturn(1234);\n     doNothing().when(server).serve(any(Request.class));\n \n-    final LoadBalancer loadBalancer = new LoadBalancer();\n+    final var loadBalancer = new LoadBalancer();\n     loadBalancer.addServer(server);\n \n     verifyZeroInteractions(server);\n \n-    final Request request = new Request(\"test\");\n-    for (int i = 0; i < loadBalancer.getNoOfServers() * 2; i++) {\n+    final var request = new Request(\"test\");\n+    for (var i = 0; i < loadBalancer.getNoOfServers() * 2; i++) {\n       loadBalancer.serverRequest(request);\n     }\n ",
    "output": "Java 11 migraiton: monostate"
  },
  {
    "input": "diff --git a/module/src/main/java/com/iluwatar/module/App.java b/module/src/main/java/com/iluwatar/module/App.java\n--- a/module/src/main/java/com/iluwatar/module/App.java\n+++ b/module/src/main/java/com/iluwatar/module/App.java\n@@ -65,10 +65,8 @@ public static void unprepare() {\n \r\n   /**\r\n    * Following method is main executor.\r\n-   *\r\n-   * @param args for providing default program arguments\r\n    */\r\n-  public static void execute(final String... args) {\r\n+  public static void execute() {\r\n \r\n     /* Send logs on file system */\r\n     fileLoggerModule.printString(\"Message\");\r\n@@ -88,7 +86,7 @@ public static void execute(final String... args) {\n    */\r\n   public static void main(final String... args) throws FileNotFoundException {\r\n     prepare();\r\n-    execute(args);\r\n+    execute();\r\n     unprepare();\r\n   }\r\n }\r\n\ndiff --git a/module/src/test/java/com/iluwatar/module/AppTest.java b/module/src/test/java/com/iluwatar/module/AppTest.java\n--- a/module/src/test/java/com/iluwatar/module/AppTest.java\n+++ b/module/src/test/java/com/iluwatar/module/AppTest.java\n@@ -23,9 +23,8 @@\n \n package com.iluwatar.module;\n \n-import org.junit.jupiter.api.Test;\n-\n import java.io.FileNotFoundException;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Tests that Module example runs without errors.\n@@ -34,7 +33,6 @@ public final class AppTest {\n \n   @Test\n   public void test() throws FileNotFoundException {\n-    final String[] args = {};\n-    App.main(args);\n+    App.main();\n   }\n }\n\ndiff --git a/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java b/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java\n--- a/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java\n+++ b/module/src/test/java/com/iluwatar/module/FileLoggerModuleTest.java\n@@ -23,17 +23,16 @@\n \r\n package com.iluwatar.module;\r\n \r\n-import org.junit.jupiter.api.Test;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertNull;\r\n \r\n import java.io.BufferedReader;\r\n import java.io.FileNotFoundException;\r\n import java.io.FileReader;\r\n import java.io.IOException;\r\n-\r\n-import static org.junit.jupiter.api.Assertions.assertEquals;\r\n-import static org.junit.jupiter.api.Assertions.assertNull;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n \r\n /**\r\n  * The Module pattern can be considered a Creational pattern and a Structural pattern. It manages\r\n@@ -58,14 +57,14 @@ public final class FileLoggerModuleTest {\n \r\n   /**\r\n    * This test verify that 'MESSAGE' is perfectly printed in output file\r\n-   * \r\n+   *\r\n    * @throws IOException if program is not able to find log files (output.txt and error.txt)\r\n    */\r\n   @Test\r\n   public void testFileMessage() throws IOException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -82,14 +81,14 @@ public void testFileMessage() throws IOException {\n \r\n   /**\r\n    * This test verify that nothing is printed in output file\r\n-   * \r\n+   *\r\n    * @throws IOException if program is not able to find log files (output.txt and error.txt)\r\n    */\r\n   @Test\r\n   public void testNoFileMessage() throws IOException {\r\n \r\n-    /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    /* Get singleton instance of File Logger Module */\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -103,15 +102,15 @@ public void testNoFileMessage() throws IOException {\n \r\n   /**\r\n    * This test verify that 'ERROR' is perfectly printed in error file\r\n-   * \r\n+   *\r\n    * @throws FileNotFoundException if program is not able to find log files (output.txt and\r\n-   *         error.txt)\r\n+   *                               error.txt)\r\n    */\r\n   @Test\r\n   public void testFileErrorMessage() throws FileNotFoundException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -122,21 +121,21 @@ public void testFileErrorMessage() throws FileNotFoundException {\n     /* Test if 'Message' is printed in file */\r\n     assertEquals(ERROR, readFirstLine(ERROR_FILE));\r\n \r\n-    /* Unprepare to cleanup the modules */\r\n+    /* Un-prepare to cleanup the modules */\r\n     fileLoggerModule.unprepare();\r\n   }\r\n \r\n   /**\r\n    * This test verify that nothing is printed in error file\r\n-   * \r\n+   *\r\n    * @throws FileNotFoundException if program is not able to find log files (output.txt and\r\n-   *         error.txt)\r\n+   *                               error.txt)\r\n    */\r\n   @Test\r\n   public void testNoFileErrorMessage() throws FileNotFoundException {\r\n \r\n     /* Get singletong instance of File Logger Module */\r\n-    final FileLoggerModule fileLoggerModule = FileLoggerModule.getSingleton();\r\n+    final var fileLoggerModule = FileLoggerModule.getSingleton();\r\n \r\n     /* Prepare the essential sub modules, to perform the sequence of jobs */\r\n     fileLoggerModule.prepare();\r\n@@ -150,14 +149,14 @@ public void testNoFileErrorMessage() throws FileNotFoundException {\n \r\n   /**\r\n    * Utility method to read first line of a file\r\n-   * \r\n+   *\r\n    * @param file as file name to be read\r\n    * @return a string value as first line in file\r\n    */\r\n-  private static final String readFirstLine(final String file) {\r\n+  private static String readFirstLine(final String file) {\r\n \r\n     String firstLine = null;\r\n-    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(file))) {\r\n+    try (var bufferedReader = new BufferedReader(new FileReader(file))) {\r\n \r\n       while (bufferedReader.ready()) {\r\n \r",
    "output": "Java 11 migraiton: module"
  },
  {
    "input": "diff --git a/memento/src/main/java/com/iluwatar/memento/App.java b/memento/src/main/java/com/iluwatar/memento/App.java\n--- a/memento/src/main/java/com/iluwatar/memento/App.java\n+++ b/memento/src/main/java/com/iluwatar/memento/App.java\n@@ -52,9 +52,9 @@ public class App {\n    * Program entry point.\n    */\n   public static void main(String[] args) {\n-    Stack<StarMemento> states = new Stack<>();\n+    var states = new Stack<StarMemento>();\n \n-    Star star = new Star(StarType.SUN, 10000000, 500000);\n+    var star = new Star(StarType.SUN, 10000000, 500000);\n     LOGGER.info(star.toString());\n     states.add(star.getMemento());\n     star.timePasses();\n\ndiff --git a/memento/src/main/java/com/iluwatar/memento/Star.java b/memento/src/main/java/com/iluwatar/memento/Star.java\n--- a/memento/src/main/java/com/iluwatar/memento/Star.java\n+++ b/memento/src/main/java/com/iluwatar/memento/Star.java\n@@ -71,7 +71,7 @@ public void timePasses() {\n \n   StarMemento getMemento() {\n \n-    StarMementoInternal state = new StarMementoInternal();\n+    var state = new StarMementoInternal();\n     state.setAgeYears(ageYears);\n     state.setMassTons(massTons);\n     state.setType(type);\n@@ -81,7 +81,7 @@ StarMemento getMemento() {\n \n   void setMemento(StarMemento memento) {\n \n-    StarMementoInternal state = (StarMementoInternal) memento;\n+    var state = (StarMementoInternal) memento;\n     this.type = state.getType();\n     this.ageYears = state.getAgeYears();\n     this.massTons = state.getMassTons();\n\ndiff --git a/memento/src/main/java/com/iluwatar/memento/StarType.java b/memento/src/main/java/com/iluwatar/memento/StarType.java\n--- a/memento/src/main/java/com/iluwatar/memento/StarType.java\n+++ b/memento/src/main/java/com/iluwatar/memento/StarType.java\n@@ -31,7 +31,7 @@ public enum StarType {\n   SUN(\"sun\"), RED_GIANT(\"red giant\"), WHITE_DWARF(\"white dwarf\"), SUPERNOVA(\"supernova\"), DEAD(\n       \"dead star\"), UNDEFINED(\"\");\n \n-  private String title;\n+  private final String title;\n \n   StarType(String title) {\n     this.title = title;\n\ndiff --git a/memento/src/test/java/com/iluwatar/memento/AppTest.java b/memento/src/test/java/com/iluwatar/memento/AppTest.java\n--- a/memento/src/test/java/com/iluwatar/memento/AppTest.java\n+++ b/memento/src/test/java/com/iluwatar/memento/AppTest.java\n@@ -26,15 +26,12 @@\n import org.junit.jupiter.api.Test;\n \n /**\n- * \n  * Application test\n- *\n  */\n public class AppTest {\n \n   @Test\n   public void test() {\n-    String[] args = {};\n-    App.main(args);\n+    App.main(new String[]{});\n   }\n }\n\ndiff --git a/memento/src/test/java/com/iluwatar/memento/StarTest.java b/memento/src/test/java/com/iluwatar/memento/StarTest.java\n--- a/memento/src/test/java/com/iluwatar/memento/StarTest.java\n+++ b/memento/src/test/java/com/iluwatar/memento/StarTest.java\n@@ -23,10 +23,10 @@\n \n package com.iluwatar.memento;\n \n-import org.junit.jupiter.api.Test;\n-\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import org.junit.jupiter.api.Test;\n+\n /**\n  * Date: 12/20/15 - 10:08 AM\n  *\n@@ -39,7 +39,7 @@ public class StarTest {\n    */\n   @Test\n   public void testTimePasses() {\n-    final Star star = new Star(StarType.SUN, 1, 2);\n+    final var star = new Star(StarType.SUN, 1, 2);\n     assertEquals(\"sun age: 1 years mass: 2 tons\", star.toString());\n \n     star.timePasses();\n@@ -66,16 +66,16 @@ public void testTimePasses() {\n    */\n   @Test\n   public void testSetMemento() {\n-    final Star star = new Star(StarType.SUN, 1, 2);\n-    final StarMemento firstMemento = star.getMemento();\n+    final var star = new Star(StarType.SUN, 1, 2);\n+    final var firstMemento = star.getMemento();\n     assertEquals(\"sun age: 1 years mass: 2 tons\", star.toString());\n \n     star.timePasses();\n-    final StarMemento secondMemento = star.getMemento();\n+    final var secondMemento = star.getMemento();\n     assertEquals(\"red giant age: 2 years mass: 16 tons\", star.toString());\n \n     star.timePasses();\n-    final StarMemento thirdMemento = star.getMemento();\n+    final var thirdMemento = star.getMemento();\n     assertEquals(\"white dwarf age: 4 years mass: 128 tons\", star.toString());\n \n     star.timePasses();",
    "output": "Java 11 migraiton: memento"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -21,9 +21,6 @@\n  * THE SOFTWARE.\n  */\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * Created by Alexis on 28-Apr-17. With Marker interface idea is to make empty interface and extend\n  * it. Basically it is just to identify the special objects from normal objects. Like in case of\n@@ -46,22 +43,10 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-\n-    final Logger logger = LoggerFactory.getLogger(App.class);\n-    Guard guard = new Guard();\n-    Thief thief = new Thief();\n-\n-    if (guard instanceof Permission) {\n-      guard.enter();\n-    } else {\n-      logger.info(\"You have no permission to enter, please leave this area\");\n-    }\n-\n-    if (thief instanceof Permission) {\n-      thief.steal();\n-    } else {\n-      thief.doNothing();\n-    }\n+    var guard = new Guard();\n+    var thief = new Thief();\n+    guard.enter();\n+    thief.doNothing();\n   }\n }\n \n\ndiff --git a/marker/src/main/java/Guard.java b/marker/src/main/java/Guard.java\n--- a/marker/src/main/java/Guard.java\n+++ b/marker/src/main/java/Guard.java\n@@ -31,8 +31,7 @@ public class Guard implements Permission {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(Guard.class);\n \n-  protected static void enter() {\n-\n+  protected void enter() {\n     LOGGER.info(\"You can enter\");\n   }\n }\n\ndiff --git a/marker/src/main/java/Thief.java b/marker/src/main/java/Thief.java\n--- a/marker/src/main/java/Thief.java\n+++ b/marker/src/main/java/Thief.java\n@@ -35,7 +35,7 @@ protected static void steal() {\n     LOGGER.info(\"Steal valuable items\");\n   }\n \n-  protected static void doNothing() {\n+  protected void doNothing() {\n     LOGGER.info(\"Pretend nothing happened and just leave\");\n   }\n }\n\ndiff --git a/marker/src/test/java/AppTest.java b/marker/src/test/java/AppTest.java\n--- a/marker/src/test/java/AppTest.java\n+++ b/marker/src/test/java/AppTest.java\n@@ -30,7 +30,6 @@ public class AppTest {\n \n   @Test\n   public void test() {\n-    String[] args = {};\n-    App.main(args);\n+    App.main(new String[]{});\n   }\n }\n\ndiff --git a/marker/src/test/java/GuardTest.java b/marker/src/test/java/GuardTest.java\n--- a/marker/src/test/java/GuardTest.java\n+++ b/marker/src/test/java/GuardTest.java\n@@ -33,7 +33,7 @@ public class GuardTest {\n \n   @Test\n   public void testGuard() {\n-    Guard guard = new Guard();\n+    var guard = new Guard();\n     assertThat(guard, instanceOf(Permission.class));\n   }\n }\n\\ No newline at end of file\n\ndiff --git a/marker/src/test/java/ThiefTest.java b/marker/src/test/java/ThiefTest.java\n--- a/marker/src/test/java/ThiefTest.java\n+++ b/marker/src/test/java/ThiefTest.java\n@@ -21,17 +21,19 @@\n  * THE SOFTWARE.\n  */\n \n-import org.junit.jupiter.api.Test;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n-import static org.junit.jupiter.api.Assertions.assertFalse;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Thief test\n  */\n public class ThiefTest {\n   @Test\n   public void testThief() {\n-    Thief thief = new Thief();\n-    assertFalse(thief instanceof Permission);\n+    var thief = new Thief();\n+    assertThat(thief, not(instanceOf(Permission.class)));\n   }\n }\n\\ No newline at end of file",
    "output": "Java 11 migraiton: marker"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n@@ -23,7 +23,8 @@\n \n package com.iluwatar.trampoline;\n \n-import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Trampoline pattern allows to define recursive algorithms by iterative loop.\n@@ -32,9 +33,10 @@\n  * and to interleave the execution of functions without hard coding them together or even using\n  * threads.\n  */\n-@Slf4j\n public class TrampolineApp {\n \n+  private static final Logger log = LoggerFactory.getLogger(TrampolineApp.class);\n+\n   /**\n    * Main program for showing pattern. It does loop with factorial function.\n    */",
    "output": "Remove lombok dependency"
  },
  {
    "input": "diff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/ImperativeProgramming.java\n@@ -23,12 +23,12 @@\n \n package com.iluwatar.collectionpipeline;\n \n-import java.util.Collection;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.stream.Collectors;\n \n /**\n  * Imperative-style programming to iterate over the list and get the names of cars made later than\n@@ -57,11 +57,27 @@ private ImperativeProgramming() {\n    * @return {@link List} of {@link String} of car models built after year 2000\n    */\n   public static List<String> getModelsAfter2000(List<Car> cars) {\n-    return cars.stream()\n-        .filter(car -> car.getYear() > 2000)\n-        .sorted(Comparator.comparingInt(Car::getYear))\n-        .map(Car::getModel)\n-        .collect(Collectors.toList());\n+    List<Car> carsSortedByYear = new ArrayList<>();\n+\n+    for (Car car : cars) {\n+      if (car.getYear() > 2000) {\n+        carsSortedByYear.add(car);\n+      }\n+    }\n+\n+    Collections.sort(carsSortedByYear, new Comparator<Car>() {\n+      @Override\n+      public int compare(Car car1, Car car2) {\n+        return car1.getYear() - car2.getYear();\n+      }\n+    });\n+\n+    List<String> models = new ArrayList<>();\n+    for (Car car : carsSortedByYear) {\n+      models.add(car.getModel());\n+    }\n+\n+    return models;\n   }\n \n   /**\n@@ -71,7 +87,17 @@ public static List<String> getModelsAfter2000(List<Car> cars) {\n    * @return {@link Map} with category as key and cars belonging to that category as value\n    */\n   public static Map<Category, List<Car>> getGroupingOfCarsByCategory(List<Car> cars) {\n-    return cars.stream().collect(Collectors.groupingBy(Car::getCategory));\n+    Map<Category, List<Car>> groupingByCategory = new HashMap<>();\n+    for (Car car : cars) {\n+      if (groupingByCategory.containsKey(car.getCategory())) {\n+        groupingByCategory.get(car.getCategory()).add(car);\n+      } else {\n+        List<Car> categoryCars = new ArrayList<>();\n+        categoryCars.add(car);\n+        groupingByCategory.put(car.getCategory(), categoryCars);\n+      }\n+    }\n+    return groupingByCategory;\n   }\n \n   /**\n@@ -82,11 +108,25 @@ public static Map<Category, List<Car>> getGroupingOfCarsByCategory(List<Car> car\n    * @return {@link List} of {@link Car} to belonging to the group\n    */\n   public static List<Car> getSedanCarsOwnedSortedByDate(List<Person> persons) {\n-    return persons.stream()\n-        .map(Person::getCars)\n-        .flatMap(Collection::stream)\n-        .filter(car -> car.getCategory() == Category.SEDAN)\n-        .sorted(Comparator.comparingInt(Car::getYear))\n-        .collect(Collectors.toList());\n+    List<Car> cars = new ArrayList<>();\n+    for (Person person : persons) {\n+      cars.addAll(person.getCars());\n+    }\n+\n+    List<Car> sedanCars = new ArrayList<>();\n+    for (Car car : cars) {\n+      if (Category.SEDAN.equals(car.getCategory())) {\n+        sedanCars.add(car);\n+      }\n+    }\n+\n+    sedanCars.sort(new Comparator<Car>() {\n+      @Override\n+      public int compare(Car o1, Car o2) {\n+        return o1.getYear() - o2.getYear();\n+      }\n+    });\n+\n+    return sedanCars;\n   }\n }",
    "output": "Fix imperative-style.\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>"
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/App.java b/ambassador/src/main/java/com/iluwatar/ambassador/App.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/App.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java\n@@ -45,8 +45,8 @@ public class App {\n    * Entry point.\n    */\n   public static void main(String[] args) {\n-    Client host1 = new Client();\n-    Client host2 = new Client();\n+    var host1 = new Client();\n+    var host2 = new Client();\n     host1.useService(12);\n     host2.useService(73);\n   }",
    "output": "Upgrade Ambassador readme"
  },
  {
    "input": "diff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java\n@@ -1,15 +0,0 @@\n-package ie.home.besok.stirrings;\n-\n-import java.awt.*;\n-import java.io.IOException;\n-\n-public class Application {\n-    public static void main(String[] args) throws IOException {\n-        FileStorage storage = new FileStorage();\n-\n-        EventQueue.invokeLater(() -> {\n-            Gui gui = new Gui(storage);\n-            gui.setVisible(true);\n-        });\n-    }\n-}\n\ndiff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java\n@@ -1,14 +0,0 @@\n-package ie.home.besok.stirrings;\n-\n-import java.time.LocalDate;\n-import java.time.LocalDateTime;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-public class Counter {\n-    public Map<LocalDate,Long> count(List<String> dates){\n-        return null;\n-    }\n-}\n\ndiff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java\n@@ -1,37 +0,0 @@\n-package ie.home.besok.stirrings;\n-\n-import lombok.extern.slf4j.Slf4j;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardOpenOption;\n-import java.time.LocalDateTime;\n-import java.util.List;\n-\n-public class FileStorage {\n-\n-    private Path file;\n-\n-    public FileStorage() throws IOException {\n-        this.file = Paths.get(\"data.log\");\n-        if(!Files.exists(file)){\n-                Files.createFile(file);\n-        }\n-    }\n-\n-    public void plus() {\n-        String line = LocalDateTime.now().toString()+System.lineSeparator();\n-        try {\n-            Files.write(file, line.getBytes(), StandardOpenOption.APPEND);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public List<String> get() throws IOException {\n-        return Files.readAllLines(file);\n-    }\n-\n-}\n\ndiff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java\n@@ -1,73 +0,0 @@\n-package ie.home.besok.stirrings;\n-\n-import javax.imageio.ImageIO;\n-import javax.swing.*;\n-import java.awt.*;\n-import java.io.IOException;\n-import java.net.URL;\n-\n-public class Gui extends JFrame {\n-\n-    private FileStorage storage;\n-\n-    public Gui(FileStorage storage) {\n-        this.storage = storage;\n-        try {\n-            createUI(storage);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private void createUI(FileStorage storage) throws IOException {\n-        setTitle(\"Stirring counter\");\n-        setSize(300, 300);\n-        setLocationRelativeTo(null);\n-\n-\n-        JButton button = createButton(storage);\n-        JButton graphick = new JButton();\n-        graphick.setIcon(getIcon(\"3.jpg\"));\n-\n-\n-        Container pane = getContentPane();\n-        GroupLayout gl = new GroupLayout(pane);\n-        pane.setLayout(gl);\n-\n-        gl.setAutoCreateContainerGaps(true);\n-\n-        gl.setHorizontalGroup(\n-                gl.createSequentialGroup().addComponent(button).addComponent(graphick)\n-        );\n-\n-        gl.setVerticalGroup(gl.createSequentialGroup().addComponent(button).addComponent(graphick));\n-\n-\n-        button.addActionListener((event) -> {\n-            storage.plus();\n-            try {\n-                JOptionPane.showMessageDialog(null,\"\",\"\",JOptionPane.INFORMATION_MESSAGE, getIcon(\"2.jpg\"));\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-            }\n-        });\n-\n-        setDefaultCloseOperation(EXIT_ON_CLOSE);\n-    }\n-\n-    private JButton createButton(FileStorage storage) throws IOException {\n-        ImageIcon babyIcon = getIcon(\"1.png\");\n-\n-        JButton button = new JButton();\n-\n-        button.setIcon(babyIcon);\n-        return button;\n-    }\n-\n-    private ImageIcon getIcon(String name) throws IOException {\n-        URL file = this.getClass().getClassLoader().getResource(name);\n-        return new ImageIcon(ImageIO.read(file));\n-    }\n-\n-\n-}\n\ndiff --git a/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java b/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java\n--- a/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java\n+++ b/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java\n@@ -1,25 +0,0 @@\n-package ie.home.besok.stirrings;\n-\n-import org.junit.Test;\n-\n-import java.io.IOException;\n-import java.util.List;\n-\n-import static org.junit.Assert.*;\n-\n-public class FileStorageTest {\n-\n-    @Test\n-    public void fsTest() throws IOException {\n-        FileStorage fs = new FileStorage();\n-        List<String> arrs = fs.get();\n-        int oldSize = arrs.size();\n-        fs.plus();\n-        fs.plus();\n-        fs.plus();\n-        fs.plus();\n-        arrs = fs.get();\n-        int newSize = arrs.size();\n-        assertEquals(4, newSize - oldSize);\n-    }\n-}\n\\ No newline at end of file",
    "output": "Add init saga dsc"
  },
  {
    "input": "diff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Application.java\n@@ -0,0 +1,15 @@\n+package ie.home.besok.stirrings;\n+\n+import java.awt.*;\n+import java.io.IOException;\n+\n+public class Application {\n+    public static void main(String[] args) throws IOException {\n+        FileStorage storage = new FileStorage();\n+\n+        EventQueue.invokeLater(() -> {\n+            Gui gui = new Gui(storage);\n+            gui.setVisible(true);\n+        });\n+    }\n+}\n\ndiff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Counter.java\n@@ -0,0 +1,14 @@\n+package ie.home.besok.stirrings;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class Counter {\n+    public Map<LocalDate,Long> count(List<String> dates){\n+        return null;\n+    }\n+}\n\ndiff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/FileStorage.java\n@@ -0,0 +1,37 @@\n+package ie.home.besok.stirrings;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+public class FileStorage {\n+\n+    private Path file;\n+\n+    public FileStorage() throws IOException {\n+        this.file = Paths.get(\"data.log\");\n+        if(!Files.exists(file)){\n+                Files.createFile(file);\n+        }\n+    }\n+\n+    public void plus() {\n+        String line = LocalDateTime.now().toString()+System.lineSeparator();\n+        try {\n+            Files.write(file, line.getBytes(), StandardOpenOption.APPEND);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public List<String> get() throws IOException {\n+        return Files.readAllLines(file);\n+    }\n+\n+}\n\ndiff --git a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java\n--- a/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java\n+++ b/stirring-clicker/src/main/java/ie/home/besok/stirrings/Gui.java\n@@ -0,0 +1,73 @@\n+package ie.home.besok.stirrings;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.io.IOException;\n+import java.net.URL;\n+\n+public class Gui extends JFrame {\n+\n+    private FileStorage storage;\n+\n+    public Gui(FileStorage storage) {\n+        this.storage = storage;\n+        try {\n+            createUI(storage);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void createUI(FileStorage storage) throws IOException {\n+        setTitle(\"Stirring counter\");\n+        setSize(300, 300);\n+        setLocationRelativeTo(null);\n+\n+\n+        JButton button = createButton(storage);\n+        JButton graphick = new JButton();\n+        graphick.setIcon(getIcon(\"3.jpg\"));\n+\n+\n+        Container pane = getContentPane();\n+        GroupLayout gl = new GroupLayout(pane);\n+        pane.setLayout(gl);\n+\n+        gl.setAutoCreateContainerGaps(true);\n+\n+        gl.setHorizontalGroup(\n+                gl.createSequentialGroup().addComponent(button).addComponent(graphick)\n+        );\n+\n+        gl.setVerticalGroup(gl.createSequentialGroup().addComponent(button).addComponent(graphick));\n+\n+\n+        button.addActionListener((event) -> {\n+            storage.plus();\n+            try {\n+                JOptionPane.showMessageDialog(null,\"\",\"\",JOptionPane.INFORMATION_MESSAGE, getIcon(\"2.jpg\"));\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+\n+        setDefaultCloseOperation(EXIT_ON_CLOSE);\n+    }\n+\n+    private JButton createButton(FileStorage storage) throws IOException {\n+        ImageIcon babyIcon = getIcon(\"1.png\");\n+\n+        JButton button = new JButton();\n+\n+        button.setIcon(babyIcon);\n+        return button;\n+    }\n+\n+    private ImageIcon getIcon(String name) throws IOException {\n+        URL file = this.getClass().getClassLoader().getResource(name);\n+        return new ImageIcon(ImageIO.read(file));\n+    }\n+\n+\n+}\n\ndiff --git a/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java b/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java\n--- a/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java\n+++ b/stirring-clicker/src/test/java/ie/home/besok/stirrings/FileStorageTest.java\n@@ -0,0 +1,25 @@\n+package ie.home.besok.stirrings;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+public class FileStorageTest {\n+\n+    @Test\n+    public void fsTest() throws IOException {\n+        FileStorage fs = new FileStorage();\n+        List<String> arrs = fs.get();\n+        int oldSize = arrs.size();\n+        fs.plus();\n+        fs.plus();\n+        fs.plus();\n+        fs.plus();\n+        arrs = fs.get();\n+        int newSize = arrs.size();\n+        assertEquals(4, newSize - oldSize);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add saga init dsc"
  },
  {
    "input": "diff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n@@ -51,9 +51,23 @@ public class Aggregator {\n    */\n   @RequestMapping(path = \"/product\", method = RequestMethod.GET)\n   public Product getProduct() {\n+\n     var product = new Product();\n-    product.setTitle(informationClient.getProductTitle());\n-    product.setProductInventories(inventoryClient.getProductInventories());\n+    String productTitle = informationClient.getProductTitle();\n+    Integer productInventory = inventoryClient.getProductInventories();\n+\n+    if (productTitle != null) {\n+      product.setTitle(productTitle);\n+    } else {\n+      product.setTitle(\"Error: Fetching Product Title Failed\"); //Fallback to error message\n+    }\n+\n+    if (productInventory != null) {\n+      product.setProductInventories(productInventory);\n+    } else {\n+      product.setProductInventories(-1); //Fallback to default error inventory\n+    }\n+\n     return product;\n   }\n \n\ndiff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClient.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClient.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClient.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClient.java\n@@ -28,5 +28,5 @@\n  */\n public interface ProductInventoryClient {\n \n-  int getProductInventories();\n+  Integer getProductInventories();\n }\n\ndiff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java\n@@ -42,8 +42,8 @@ public class ProductInventoryClientImpl implements ProductInventoryClient {\n   private static final Logger LOGGER = LoggerFactory.getLogger(ProductInventoryClientImpl.class);\n \n   @Override\n-  public int getProductInventories() {\n-    var response = \"0\";\n+  public Integer getProductInventories() {\n+    var response = \"\";\n \n     var request = HttpRequest.newBuilder().GET().uri(URI.create(\"http://localhost:51516/inventories\")).build();\n     var client = HttpClient.newHttpClient();\n@@ -55,6 +55,10 @@ public int getProductInventories() {\n     } catch (InterruptedException ie) {\n       LOGGER.error(\"InterruptedException Occurred\", ie);\n     }\n-    return Integer.parseInt(response);\n+    if(\"\".equalsIgnoreCase(response)) {\n+        return null;\n+    } else {\n+        return Integer.parseInt(response);\n+    }\n   }\n }",
    "output": "Fix for : Add Fallbacks in Aggregator Service\n* Fix for Issue#\nCatch ClientProtocolException and Update Error Logs\n* Fix indentation, checkstyle errors\n* Fix for Issue\nAdd fallbacks in Aggregator service when other microservices fail\n* Make ProductInventoryClientImpl return null instead of zero in case of failure"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n@@ -41,7 +41,8 @@ public final class InitializingOnDemandHolderIdiom {\n   /**\n    * Private constructor.\n    */\n-  private InitializingOnDemandHolderIdiom() {}\n+  private InitializingOnDemandHolderIdiom() {\n+  }\n \n   /**\n    * Sigleton instance.\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n@@ -31,7 +31,8 @@ public final class IvoryTower {\n   /**\r\n    * Private constructor so nobody can instantiate the class.\r\n    */\r\n-  private IvoryTower() {}\r\n+  private IvoryTower() {\r\n+  }\r\n \r\n   /**\r\n    * Static to class instance of the class.\r",
    "output": "Fix remaining Checkstyle errors for Singleton"
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java b/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java\n@@ -23,16 +23,27 @@\n \n package com.iluwatar.factory.method;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * \n  * Concrete subclass for creating new objects.\n  * \n  */\n public class ElfBlacksmith implements Blacksmith {\n \n+  private static Map<WeaponType, ElfWeapon> ELFARSENAL;\n+  static {\n+\tELFARSENAL= new HashMap<>(WeaponType.values().length);\n+\tfor (WeaponType type : WeaponType.values()) {\n+\t\tELFARSENAL.put(type, new ElfWeapon(type));\n+\t}\n+  }\n+  \n   @Override\n   public Weapon manufactureWeapon(WeaponType weaponType) {\n-    return new ElfWeapon(weaponType);\n+    return ELFARSENAL.get(weaponType);\n   }\n-\n+  \n }\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java b/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java\n@@ -23,15 +23,26 @@\n \n package com.iluwatar.factory.method;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n /**\n  * \n  * Concrete subclass for creating new objects.\n  * \n  */\n public class OrcBlacksmith implements Blacksmith {\n \n+  private static Map<WeaponType, OrcWeapon> ORCARSENAL;\n+  static {\n+    ORCARSENAL= new HashMap<>(WeaponType.values().length);\n+\tfor (WeaponType type : WeaponType.values()) {\n+\t  ORCARSENAL.put(type, new OrcWeapon(type));\n+\t}\n+  }\n+  \n   @Override\n   public Weapon manufactureWeapon(WeaponType weaponType) {\n-    return new OrcWeapon(weaponType);\n+    return ORCARSENAL.get(weaponType);\n   }\n }",
    "output": "Issue 893\n* Using static object to reduce memory foot prints\n* Updating README along with name of static fields\n* Updating code as per review comments\n* Updating code as per review comments\n* Updating doc as per new code"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/App.java b/dao/src/main/java/com/iluwatar/dao/App.java\n--- a/dao/src/main/java/com/iluwatar/dao/App.java\n+++ b/dao/src/main/java/com/iluwatar/dao/App.java\n@@ -128,10 +128,6 @@ public static List<Customer> generateSampleCustomers() {\n     final Customer customer1 = new Customer(1, \"Adam\", \"Adamson\");\n     final Customer customer2 = new Customer(2, \"Bob\", \"Bobson\");\n     final Customer customer3 = new Customer(3, \"Carl\", \"Carlson\");\n-    final List<Customer> customers = new ArrayList<>();\n-    customers.add(customer1);\n-    customers.add(customer2);\n-    customers.add(customer3);\n-    return customers;\n+    return List.of(customer1, customer2, customer3);\n   }\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n--- a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n@@ -26,7 +26,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n /**\n@@ -59,11 +58,11 @@ public class App {\n    */\n   public static void main(String[] args) {\n     // initialize game objects and print their status\n-    List<GameObject> objects = new ArrayList<>();\n-    objects.add(new FlamingAsteroid(0, 0, 5, 5));\n-    objects.add(new SpaceStationMir(1, 1, 2, 2));\n-    objects.add(new Meteoroid(10, 10, 15, 15));\n-    objects.add(new SpaceStationIss(12, 12, 14, 14));\n+    List<GameObject> objects = List.of(\n+            new FlamingAsteroid(0, 0, 5, 5),\n+            new SpaceStationMir(1, 1, 2, 2),\n+            new Meteoroid(10, 10, 15, 15),\n+            new SpaceStationIss(12, 12, 14, 14));\n     objects.stream().forEach(o -> LOGGER.info(o.toString()));\n     LOGGER.info(\"\");\n \n\ndiff --git a/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java b/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java\n--- a/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java\n+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java\n@@ -23,7 +23,6 @@\n \r\n package com.iluwatar.facade;\r\n \r\n-import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.List;\r\n \r\n@@ -43,10 +42,10 @@ public class DwarvenGoldmineFacade {\n    * Constructor\r\n    */\r\n   public DwarvenGoldmineFacade() {\r\n-    workers = new ArrayList<>();\r\n-    workers.add(new DwarvenGoldDigger());\r\n-    workers.add(new DwarvenCartOperator());\r\n-    workers.add(new DwarvenTunnelDigger());\r\n+    workers = List.of(\r\n+            new DwarvenGoldDigger(),\r\n+            new DwarvenCartOperator(),\r\n+            new DwarvenTunnelDigger());\r\n   }\r\n \r\n   public void startNewDay() {\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n--- a/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n+++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n@@ -26,7 +26,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n@@ -46,29 +45,24 @@ public class AlchemistShop {\n    * Constructor\n    */\n   public AlchemistShop() {\n-    topShelf = new ArrayList<>();\n-    bottomShelf = new ArrayList<>();\n-    fillShelves();\n-  }\n-\n-  private void fillShelves() {\n-\n     PotionFactory factory = new PotionFactory();\n-\n-    topShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n-    topShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n-    topShelf.add(factory.createPotion(PotionType.STRENGTH));\n-    topShelf.add(factory.createPotion(PotionType.HEALING));\n-    topShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n-    topShelf.add(factory.createPotion(PotionType.STRENGTH));\n-    topShelf.add(factory.createPotion(PotionType.HEALING));\n-    topShelf.add(factory.createPotion(PotionType.HEALING));\n-\n-    bottomShelf.add(factory.createPotion(PotionType.POISON));\n-    bottomShelf.add(factory.createPotion(PotionType.POISON));\n-    bottomShelf.add(factory.createPotion(PotionType.POISON));\n-    bottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\n-    bottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\n+    topShelf = List.of(\n+            factory.createPotion(PotionType.INVISIBILITY),\n+            factory.createPotion(PotionType.INVISIBILITY),\n+            factory.createPotion(PotionType.STRENGTH),\n+            factory.createPotion(PotionType.HEALING),\n+            factory.createPotion(PotionType.INVISIBILITY),\n+            factory.createPotion(PotionType.STRENGTH),\n+            factory.createPotion(PotionType.HEALING),\n+            factory.createPotion(PotionType.HEALING)\n+    );\n+    bottomShelf = List.of(\n+            factory.createPotion(PotionType.POISON),\n+            factory.createPotion(PotionType.POISON),\n+            factory.createPotion(PotionType.POISON),\n+            factory.createPotion(PotionType.HOLY_WATER),\n+            factory.createPotion(PotionType.HOLY_WATER)\n+    );\n   }\n \n   /**",
    "output": "Add java 11"
  },
  {
    "input": "diff --git a/thread-pool/src/main/java/com/iluwatar/threadpool/App.java b/thread-pool/src/main/java/com/iluwatar/threadpool/App.java\n--- a/thread-pool/src/main/java/com/iluwatar/threadpool/App.java\n+++ b/thread-pool/src/main/java/com/iluwatar/threadpool/App.java\n@@ -81,13 +81,13 @@ public static void main(String[] args) {\n     // unbounded queue. At any point, at most nThreads threads will be active processing\n     // tasks. If additional tasks are submitted when all threads are active, they will wait\n     // in the queue until a thread is available.\n-    ExecutorService executor = Executors.newFixedThreadPool(3);\n+    var executor = Executors.newFixedThreadPool(3);\n \n     // Allocate new worker for each task\n     // The worker is executed when a thread becomes\n     // available in the thread pool\n     for (int i = 0; i < tasks.size(); i++) {\n-      Runnable worker = new Worker(tasks.get(i));\n+      var worker = new Worker(tasks.get(i));\n       executor.execute(worker);\n     }\n     // All tasks were executed, now shutdown",
    "output": "Local variable type inference changes\n* local variable type inference changes\nlocal variable type inference changes for thread pool design pattern\n* local variable type inference changes\nlocal variable type inference changes for ThreadPool design pattern"
  },
  {
    "input": "diff --git a/throttling/src/main/java/com/iluwatar/throttling/App.java b/throttling/src/main/java/com/iluwatar/throttling/App.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/App.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/App.java\n@@ -53,11 +53,11 @@ public class App {\n    * @param args main arguments\n    */\n   public static void main(String[] args) {\n-    CallsCount callsCount = new CallsCount();\n-    Tenant adidas = new Tenant(\"Adidas\", 5, callsCount);\n-    Tenant nike = new Tenant(\"Nike\", 6, callsCount);\n+    var callsCount = new CallsCount();\n+    var adidas = new Tenant(\"Adidas\", 5, callsCount);\n+    var nike = new Tenant(\"Nike\", 6, callsCount);\n \n-    ExecutorService executorService = Executors.newFixedThreadPool(2);\n+    var executorService = Executors.newFixedThreadPool(2);\n     \n     executorService.execute(() -> makeServiceCalls(adidas, callsCount));\n     executorService.execute(() -> makeServiceCalls(nike, callsCount));\n@@ -74,8 +74,8 @@ public static void main(String[] args) {\n    * Make calls to the B2BService dummy API\n    */\n   private static void makeServiceCalls(Tenant tenant, CallsCount callsCount) {\n-    Throttler timer = new ThrottleTimerImpl(10, callsCount);\n-    B2BService service = new B2BService(timer, callsCount);\n+    var timer = new ThrottleTimerImpl(10, callsCount);\n+    var service = new B2BService(timer, callsCount);\n     for (int i = 0; i < 20; i++) {\n       service.dummyCustomerApi(tenant);\n //    Sleep is introduced to keep the output in check and easy to view and analyze the results.\n\ndiff --git a/throttling/src/main/java/com/iluwatar/throttling/B2BService.java b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/B2BService.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java\n@@ -48,8 +48,8 @@ public B2BService(Throttler timer, CallsCount callsCount) {\n    * @return customer id which is randomly generated\n    */\n   public int dummyCustomerApi(Tenant tenant) {\n-    String tenantName = tenant.getName();\n-    long count = callsCount.getCount(tenantName);\n+    var tenantName = tenant.getName();\n+    var count = callsCount.getCount(tenantName);\n     LOGGER.debug(\"Counter for {} : {} \", tenant.getName(), count);\n     if (count >= tenant.getAllowedCallsPerSecond()) {\n       LOGGER.error(\"API access per second limit reached for: {}\", tenantName);",
    "output": "Local variable type inference changes\nlocal variable type inference changes for throttling design pattern"
  },
  {
    "input": "diff --git a/template-method/src/main/java/com/iluwatar/templatemethod/App.java b/template-method/src/main/java/com/iluwatar/templatemethod/App.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/App.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/App.java\n@@ -40,7 +40,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    HalflingThief thief = new HalflingThief(new HitAndRunMethod());\n+    var thief = new HalflingThief(new HitAndRunMethod());\n     thief.steal();\n     thief.changeMethod(new SubtleMethod());\n     thief.steal();\n\ndiff --git a/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java b/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/StealingMethod.java\n@@ -45,7 +45,7 @@ public abstract class StealingMethod {\n    * Steal\r\n    */\r\n   public void steal() {\r\n-    String target = pickTarget();\r\n+    var target = pickTarget();\r\n     LOGGER.info(\"The target has been chosen as {}.\", target);\r\n     confuseTarget(target);\r\n     stealTheItem(target);\r",
    "output": "Local variable type inference changes\nlocal variable type inference changes for template method design pattern"
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/strategy/App.java b/strategy/src/main/java/com/iluwatar/strategy/App.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/App.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java\n@@ -51,7 +51,7 @@ public class App {\n   public static void main(String[] args) {\n     // GoF Strategy pattern\n     LOGGER.info(\"Green dragon spotted ahead!\");\n-    DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());\n+    var dragonSlayer = new DragonSlayer(new MeleeStrategy());\n     dragonSlayer.goToBattle();\n     LOGGER.info(\"Red dragon emerges.\");\n     dragonSlayer.changeStrategy(new ProjectileStrategy());",
    "output": "Local variable type inference changes\nlocal variable type inference changes for strategy design pattern"
  },
  {
    "input": "diff --git a/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java\n--- a/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java\n+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/App.java\n@@ -69,20 +69,20 @@ public class App {\n    */\n   public static void main(String[] args) {\n \n-    Character warrior =\n+    var warrior =\n         CharacterStepBuilder.newBuilder().name(\"Amberjill\").fighterClass(\"Paladin\")\n             .withWeapon(\"Sword\").noAbilities().build();\n \n     LOGGER.info(warrior.toString());\n \n-    Character mage =\n+    var mage =\n         CharacterStepBuilder.newBuilder().name(\"Riobard\").wizardClass(\"Sorcerer\")\n             .withSpell(\"Fireball\").withAbility(\"Fire Aura\").withAbility(\"Teleport\")\n             .noMoreAbilities().build();\n \n     LOGGER.info(mage.toString());\n \n-    Character thief =\n+    var thief =\n         CharacterStepBuilder.newBuilder().name(\"Desmond\").fighterClass(\"Rogue\").noWeapon().build();\n \n     LOGGER.info(thief.toString());\n\ndiff --git a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n--- a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n@@ -91,7 +91,7 @@ public void setAbilities(List<String> abilities) {\n \n   @Override\n   public String toString() {\n-    StringBuilder sb = new StringBuilder();\n+    var sb = new StringBuilder();\n     sb.append(\"This is a \")\n             .append(fighterClass != null ? fighterClass : wizardClass)\n             .append(\" named \")",
    "output": "Local variable type inference changes\nlocal variable type inference changes for step builder design pattern"
  },
  {
    "input": "diff --git a/state/src/main/java/com/iluwatar/state/App.java b/state/src/main/java/com/iluwatar/state/App.java\n--- a/state/src/main/java/com/iluwatar/state/App.java\n+++ b/state/src/main/java/com/iluwatar/state/App.java\n@@ -41,7 +41,7 @@ public class App {\n    */\n   public static void main(String[] args) {\n \n-    Mammoth mammoth = new Mammoth();\n+    var mammoth = new Mammoth();\n     mammoth.observe();\n     mammoth.timePasses();\n     mammoth.observe();",
    "output": "Local variable infere changes\nlocal variable infere changes for STATE design pattern"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/App.java b/singleton/src/main/java/com/iluwatar/singleton/App.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/App.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/App.java\n@@ -74,36 +74,36 @@ public class App {\n   public static void main(String[] args) {\n \n     // eagerly initialized singleton\n-    IvoryTower ivoryTower1 = IvoryTower.getInstance();\n-    IvoryTower ivoryTower2 = IvoryTower.getInstance();\n+    var ivoryTower1 = IvoryTower.getInstance();\n+    var ivoryTower2 = IvoryTower.getInstance();\n     LOGGER.info(\"ivoryTower1={}\", ivoryTower1);\n     LOGGER.info(\"ivoryTower2={}\", ivoryTower2);\n \n     // lazily initialized singleton\n-    ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 =\n+    var threadSafeIvoryTower1 =\n         ThreadSafeLazyLoadedIvoryTower.getInstance();\n-    ThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 =\n+    var threadSafeIvoryTower2 =\n         ThreadSafeLazyLoadedIvoryTower.getInstance();\n     LOGGER.info(\"threadSafeIvoryTower1={}\", threadSafeIvoryTower1);\n     LOGGER.info(\"threadSafeIvoryTower2={}\", threadSafeIvoryTower2);\n \n     // enum singleton\n-    EnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;\n-    EnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;\n+    var enumIvoryTower1 = EnumIvoryTower.INSTANCE;\n+    var enumIvoryTower2 = EnumIvoryTower.INSTANCE;\n     LOGGER.info(\"enumIvoryTower1={}\", enumIvoryTower1);\n     LOGGER.info(\"enumIvoryTower2={}\", enumIvoryTower2);\n \n     // double checked locking\n-    ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();\n+    var dcl1 = ThreadSafeDoubleCheckLocking.getInstance();\n     LOGGER.info(dcl1.toString());\n-    ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();\n+    var dcl2 = ThreadSafeDoubleCheckLocking.getInstance();\n     LOGGER.info(dcl2.toString());\n \n     // initialize on demand holder idiom\n-    InitializingOnDemandHolderIdiom demandHolderIdiom =\n+    var demandHolderIdiom =\n         InitializingOnDemandHolderIdiom.getInstance();\n     LOGGER.info(demandHolderIdiom.toString());\n-    InitializingOnDemandHolderIdiom demandHolderIdiom2 =\n+    var demandHolderIdiom2 =\n         InitializingOnDemandHolderIdiom.getInstance();\n     LOGGER.info(demandHolderIdiom2.toString());\n   }\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n@@ -59,7 +59,7 @@ public static ThreadSafeDoubleCheckLocking getInstance() {\n     // local variable increases performance by 25 percent\n     // Joshua Bloch \"Effective Java, Second Edition\", p. 283-284\n     \n-    ThreadSafeDoubleCheckLocking result = instance;\n+    var result = instance;\n     // Check if singleton instance is initialized. If it is initialized then we can return the instance.\n     if (result == null) {\n       // It is not initialized but we cannot be sure because some other thread might have initialized it",
    "output": "Local variable type inference changes\nlocal variable type inference changes for design pattern singleton"
  },
  {
    "input": "diff --git a/service-locator/src/main/java/com/iluwatar/servicelocator/App.java b/service-locator/src/main/java/com/iluwatar/servicelocator/App.java\n--- a/service-locator/src/main/java/com/iluwatar/servicelocator/App.java\n+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/App.java\n@@ -45,7 +45,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    Service service = ServiceLocator.getService(\"jndi/serviceA\");\n+    var service = ServiceLocator.getService(\"jndi/serviceA\");\n     service.execute();\n     service = ServiceLocator.getService(\"jndi/serviceB\");\n     service.execute();\n\ndiff --git a/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n--- a/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n@@ -45,15 +45,15 @@ private ServiceLocator() {\n    * @return {@link Service}\n    */\n   public static Service getService(String serviceJndiName) {\n-    Service serviceObj = serviceCache.getService(serviceJndiName);\n+    var serviceObj = serviceCache.getService(serviceJndiName);\n     if (serviceObj != null) {\n       return serviceObj;\n     } else {\n       /*\n        * If we are unable to retrive anything from cache, then lookup the service and add it in the\n        * cache map\n        */\n-      InitContext ctx = new InitContext();\n+      var ctx = new InitContext();\n       serviceObj = (Service) ctx.lookup(serviceJndiName);\n       if (serviceObj != null) { // Only cache a service if it actually exists\n         serviceCache.addService(serviceObj);",
    "output": "Local variable type inference changes\nlocal variable type inference changes for design pattern service locator"
  },
  {
    "input": "diff --git a/serverless/src/main/java/com/iluwatar/serverless/baas/model/Person.java b/serverless/src/main/java/com/iluwatar/serverless/baas/model/Person.java\n--- a/serverless/src/main/java/com/iluwatar/serverless/baas/model/Person.java\n+++ b/serverless/src/main/java/com/iluwatar/serverless/baas/model/Person.java\n@@ -107,7 +107,7 @@ public boolean equals(Object o) {\n \n   @Override\n   public int hashCode() {\n-    int result = firstName != null ? firstName.hashCode() : 0;\n+    var result = firstName != null ? firstName.hashCode() : 0;\n     result = 31 * result + (lastName != null ? lastName.hashCode() : 0);\n     result = 31 * result + (address != null ? address.hashCode() : 0);\n     return result;\n\ndiff --git a/serverless/src/main/java/com/iluwatar/serverless/faas/LambdaInfo.java b/serverless/src/main/java/com/iluwatar/serverless/faas/LambdaInfo.java\n--- a/serverless/src/main/java/com/iluwatar/serverless/faas/LambdaInfo.java\n+++ b/serverless/src/main/java/com/iluwatar/serverless/faas/LambdaInfo.java\n@@ -130,7 +130,7 @@ public boolean equals(Object o) {\n \n   @Override\n   public int hashCode() {\n-    int result = awsRequestId != null ? awsRequestId.hashCode() : 0;\n+    var result = awsRequestId != null ? awsRequestId.hashCode() : 0;\n     result = 31 * result + (logGroupName != null ? logGroupName.hashCode() : 0);\n     result = 31 * result + (logStreamName != null ? logStreamName.hashCode() : 0);\n     result = 31 * result + (functionName != null ? functionName.hashCode() : 0);\n\ndiff --git a/serverless/src/main/java/com/iluwatar/serverless/faas/api/LambdaInfoApiHandler.java b/serverless/src/main/java/com/iluwatar/serverless/faas/api/LambdaInfoApiHandler.java\n--- a/serverless/src/main/java/com/iluwatar/serverless/faas/api/LambdaInfoApiHandler.java\n+++ b/serverless/src/main/java/com/iluwatar/serverless/faas/api/LambdaInfoApiHandler.java\n@@ -63,7 +63,7 @@ public ApiGatewayResponse handleRequest(Map<String, Object> input, Context conte\n    * @return LambdaInfo\n    */\n   private LambdaInfo lambdaInfo(Context context) {\n-    LambdaInfo lambdaInfo = new LambdaInfo();\n+    var lambdaInfo = new LambdaInfo();\n     lambdaInfo.setAwsRequestId(context.getAwsRequestId());\n     lambdaInfo.setFunctionName(context.getFunctionName());\n     lambdaInfo.setFunctionVersion(context.getFunctionVersion());\n@@ -75,7 +75,7 @@ private LambdaInfo lambdaInfo(Context context) {\n   }\n \n   private Map<String, String> headers() {\n-    Map<String, String> headers = new HashMap<>();\n+    var headers = new HashMap<String, String>();\n     headers.put(\"Content-Type\", \"application/json\");\n \n     return headers;",
    "output": "Local variable type inference changes\n* local variable type inference changes\nreplacing type with var\n* the type changed back to String\nsince it is initializing to null and later having different value, it is throwing error in Travis-CI. Made changes."
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java\n@@ -102,8 +102,7 @@ public static void submitTickets(LotteryService lotteryService, int numTickets)\n   }\n \n   private static PlayerDetails getRandomPlayerDetails() {\n-    Random random = new Random();\n-    int idx = random.nextInt(PLAYERS.size());\n+    int idx = RANDOM.nextInt(PLAYERS.size());\n     return PLAYERS.get(idx);\n   }\n }\n\ndiff --git a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n--- a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n+++ b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n@@ -71,8 +71,7 @@ Cell getNewCell() {\n   }\n   \n   void addNewCell(Cell c) {\n-    Random rand = new Random();\n-    c.candy = randomCode[rand.nextInt(randomCode.length)]; //changing candytype to new\n+    c.candy = randomCode[RANDOM.nextInt(randomCode.length)]; //changing candytype to new\n     this.pool.add(c);\n     pointer++;\n   }",
    "output": "Fix the two remaining SonarCloud errors The two remaining files were still creating a Random everytime the method was called. These were missed in the previous commit because the previous commit had fixed only one of the methods; in other words, there were multiple methods that were creating the Random object on each call."
  },
  {
    "input": "diff --git a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar.roleobject;\n+\n+public class ApplicationRoleObject {\n+    public static void main(String[] args) {\n+        System.out.println(\"Role-object\");\n+    }\n+}",
    "output": "Add to init"
  },
  {
    "input": "diff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/Aggregator.java\n@@ -22,11 +22,12 @@\n  */\n package com.iluwatar.aggregator.microservices;\n \n+import javax.annotation.Resource;\n+\n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n-import javax.annotation.Resource;\n-\n /**\n  * The aggregator aggregates calls on various micro-services, collects\n  * data and further publishes them under a REST endpoint.\n@@ -47,7 +48,7 @@ public class Aggregator {\n    *\n    * @return a Product.\n    */\n-  @RequestMapping(\"/product\")\n+  @RequestMapping(path = \"/product\", method = RequestMethod.GET)\n   public Product getProduct() {\n     Product product = new Product();\n     product.setTitle(informationClient.getProductTitle());\n\ndiff --git a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n--- a/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n@@ -23,6 +23,7 @@\n package com.iluwatar.api.gateway;\n \n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RestController;\n \n import javax.annotation.Resource;\n@@ -43,7 +44,7 @@ public class ApiGateway {\n    * Retrieves product information that desktop clients need\n    * @return Product information for clients on a desktop\n    */\n-  @RequestMapping(\"/desktop\")\n+  @RequestMapping(path = \"/desktop\", method = RequestMethod.GET)\n   public DesktopProduct getProductDesktop() {\n     DesktopProduct desktopProduct = new DesktopProduct();\n     desktopProduct.setImagePath(imageClient.getImagePath());\n@@ -55,7 +56,7 @@ public DesktopProduct getProductDesktop() {\n    * Retrieves product information that mobile clients need\n    * @return Product information for clients on a mobile device\n    */\n-  @RequestMapping(\"/mobile\")\n+  @RequestMapping(path = \"/mobile\", method = RequestMethod.GET)\n   public MobileProduct getProductMobile() {\n     MobileProduct mobileProduct = new MobileProduct();\n     mobileProduct.setPrice(priceClient.getPrice());",
    "output": "Fix all of the SonarCloud blocking errorsAdded the method to the RequestMapping annotationChanged all of the a href blank targets to include rel=\"noopener noreferrer\""
  },
  {
    "input": "diff --git a/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java\n--- a/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java\n+++ b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java\n@@ -28,14 +28,14 @@\n  */\n \n public class Rect {\n-  int x; \n-  int y; \n-  int width;\n-  int height;\n+  double x;\n+  double y;\n+  double width;\n+  double height;\n \n   //(x,y) - centre of rectangle\n \n-  Rect(int x, int y, int width, int height) {\n+  Rect(double x, double y, double width, double height) {\n     this.x = x;\n     this.y = y;\n     this.width = width;",
    "output": "Fix intermittent test failure"
  },
  {
    "input": "diff --git a/spatial-partition/src/test/java/com/iluwatar/spatialpartition/QuadTreeTest.java b/spatial-partition/src/test/java/com/iluwatar/spatialpartition/QuadTreeTest.java\n--- a/spatial-partition/src/test/java/com/iluwatar/spatialpartition/QuadTreeTest.java\n+++ b/spatial-partition/src/test/java/com/iluwatar/spatialpartition/QuadTreeTest.java\n@@ -26,6 +26,8 @@\n import java.util.ArrayList;\n import java.util.Hashtable;\n import java.util.Random;\n+\n+\n import org.junit.jupiter.api.Test;\n \n /**\n@@ -50,12 +52,12 @@ void queryTest() {\n \n   static Hashtable<Integer, Point> quadTreeTest(ArrayList<Point> points, Rect field, Rect queryRange) {\n     //creating quadtree and inserting all points\n-    QuadTree qTree = new QuadTree(field, 4);\n+    QuadTree qTree = new QuadTree(queryRange, 4);\n     for (int i = 0; i < points.size(); i++) {\n       qTree.insert(points.get(i));\n     }\n \n-    ArrayList<Point> queryResult = qTree.query(queryRange, new ArrayList<Point>());\n+    ArrayList<Point> queryResult = qTree.query(field, new ArrayList<Point>());\n     Hashtable<Integer, Point> result = new Hashtable<Integer, Point>();\n     for (int i = 0; i < queryResult.size(); i++) {\n       Point p = queryResult.get(i);",
    "output": "Intermittent test failure in Spatial Partition pattern\n* Intermittent test failure in Spatial Partition pattern\n* Intermittent test failure in Spatial Partition pattern"
  },
  {
    "input": "diff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInformationClientImpl.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInformationClientImpl.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInformationClientImpl.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInformationClientImpl.java\n@@ -22,6 +22,7 @@\n  */\n package com.iluwatar.aggregator.microservices;\n \n+import org.apache.http.client.ClientProtocolException;\n import org.apache.http.client.methods.CloseableHttpResponse;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.impl.client.CloseableHttpClient;\n@@ -49,8 +50,10 @@ public String getProductTitle() {\n       try (CloseableHttpResponse httpResponse = httpClient.execute(httpGet)) {\n         response = EntityUtils.toString(httpResponse.getEntity());\n       }\n-    } catch (IOException e) {\n-      LOGGER.error(\"Exception caught.\", e);\n+    } catch (ClientProtocolException cpe) {\n+      LOGGER.error(\"ClientProtocolException Occured\", cpe);\n+    } catch (IOException ioe) {\n+      LOGGER.error(\"IOException Occurred\", ioe);\n     }\n     return response;\n   }\n\ndiff --git a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java\n--- a/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java\n+++ b/aggregator-microservices/aggregator-service/src/main/java/com/iluwatar/aggregator/microservices/ProductInventoryClientImpl.java\n@@ -22,6 +22,7 @@\n  */\n package com.iluwatar.aggregator.microservices;\n \n+import org.apache.http.client.ClientProtocolException;\n import org.apache.http.client.methods.CloseableHttpResponse;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.impl.client.CloseableHttpClient;\n@@ -49,8 +50,10 @@ public int getProductInventories() {\n       try (CloseableHttpResponse httpResponse = httpClient.execute(httpGet)) {\n         response = EntityUtils.toString(httpResponse.getEntity());\n       }\n-    } catch (IOException e) {\n-      LOGGER.error(\"Exception caught.\", e);\n+    } catch (ClientProtocolException cpe) {\n+      LOGGER.error(\"ClientProtocolException Occured\", cpe);\n+    } catch (IOException ioe) {\n+      LOGGER.error(\"IOException Occurred\", ioe);\n     }\n     return Integer.parseInt(response);\n   }",
    "output": "Fix for : Update Exception Handling Code in Aggregator Microservice\n* Fix for Issue#\nCatch ClientProtocolException and Update Error Logs\n* Fix indentation, checkstyle errors"
  },
  {
    "input": "diff --git a/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java b/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n--- a/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n+++ b/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n@@ -84,7 +84,7 @@ public void testResume() {\n       verifyZeroInteractions(ballItem);\n \n       ballThread.resumeMe();\n-      sleep(200);\n+      sleep(300);\n       verify(ballItem, atLeastOnce()).draw();\n       verify(ballItem, atLeastOnce()).move();\n ",
    "output": "Fix for BallThreadTest#testResume\n* Fix for flaky test\n* Remove other file changes\n* Remove other file changes\n* Remove other file changes not related to bug"
  },
  {
    "input": "diff --git a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java\n--- a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java\n+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/App.java\n@@ -94,6 +94,8 @@ public static void main(String[] args) {\n     service.execute(new ArithmeticSumTask(500));\n     service.execute(new ArithmeticSumTask(2000));\n     service.execute(new ArithmeticSumTask(1));\n+\n+    service.close();\n   }\n \n   /**\n\ndiff --git a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n--- a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n@@ -22,6 +22,9 @@\n  */\n package com.iluwatar.halfsynchalfasync;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n@@ -38,6 +41,7 @@\n  */\n public class AsynchronousService {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(AsynchronousService.class);\n   /*\n    * This represents the queuing layer as well as synchronous layer of the pattern. The thread pool\n    * contains worker threads which execute the tasks in blocking/synchronous manner. Long running\n@@ -95,4 +99,16 @@ protected void done() {\n       }\n     });\n   }\n+\n+  /**\n+   * Stops the pool of workers. This is a blocking call to wait for all tasks to be completed.\n+   */\n+  public void close() {\n+    service.shutdown();\n+    try {\n+      service.awaitTermination(10, TimeUnit.SECONDS);\n+    } catch (InterruptedException ie) {\n+      LOGGER.error(\"Error waiting for executor service shutdown!\");\n+    }\n+  }\n }",
    "output": "Fix bug close async service before the main thread finishes"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n@@ -35,12 +35,16 @@ public final class ThreadSafeDoubleCheckLocking {\n \n   private static volatile ThreadSafeDoubleCheckLocking instance;\n \n+  private static boolean flag = true;\n+\n   /**\n    * private constructor to prevent client from instantiating.\n    */\n   private ThreadSafeDoubleCheckLocking() {\n     // to prevent instantiating by Reflection call\n-    if (instance != null) {\n+    if (flag) {\n+      flag = false;\n+    } else {\n       throw new IllegalStateException(\"Already initialized.\");\n     }\n   }\n\ndiff --git a/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java b/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLockingTest.java\n@@ -22,6 +22,11 @@\n  */\n package com.iluwatar.singleton;\n \n+import org.junit.Test;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+\n /**\n  * Date: 12/29/15 - 19:26 PM\n  *\n@@ -36,4 +41,15 @@ public ThreadSafeDoubleCheckLockingTest() {\n     super(ThreadSafeDoubleCheckLocking::getInstance);\n   }\n \n+  /**\n+   * Test creating new instance by refection\n+   */\n+  @Test(expected = InvocationTargetException.class)\n+  public void testCreatingNewInstanceByRefection() throws Exception {\n+    ThreadSafeDoubleCheckLocking instance1 = ThreadSafeDoubleCheckLocking.getInstance();\n+    Constructor constructor = ThreadSafeDoubleCheckLocking.class.getDeclaredConstructor();\n+    constructor.setAccessible(true);\n+    ThreadSafeDoubleCheckLocking instance2 = (ThreadSafeDoubleCheckLocking) constructor.newInstance(null);\n+  }\n+\n }\n\\ No newline at end of file",
    "output": "ThreadSafeDoubleCheckLocking.java: Instantiating by Reflection call will be successful if you do that firstly"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/ElfKingdomFactory.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/ElfKingdomFactory.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/ElfKingdomFactory.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/ElfKingdomFactory.java\n@@ -29,14 +29,17 @@\n  */\n public class ElfKingdomFactory implements KingdomFactory {\n \n+  @Override\n   public Castle createCastle() {\n     return new ElfCastle();\n   }\n \n+  @Override\n   public King createKing() {\n     return new ElfKing();\n   }\n \n+  @Override\n   public Army createArmy() {\n     return new ElfArmy();\n   }\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/OrcKingdomFactory.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/OrcKingdomFactory.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/OrcKingdomFactory.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/OrcKingdomFactory.java\n@@ -29,14 +29,17 @@\n  */\n public class OrcKingdomFactory implements KingdomFactory {\n \n+  @Override\n   public Castle createCastle() {\n     return new OrcCastle();\n   }\n \n+  @Override\n   public King createKing() {\n     return new OrcKing();\n   }\n \n+  @Override\n   public Army createArmy() {\n     return new OrcArmy();\n   }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java\n@@ -33,10 +33,12 @@ public class ConfigureForDosVisitor implements AllModemVisitor {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n \n+  @Override\n   public void visit(Hayes hayes) {\n     LOGGER.info(hayes + \" used with Dos configurator.\");\n   }\n \n+  @Override\n   public void visit(Zoom zoom) {\n     LOGGER.info(zoom + \" used with Dos configurator.\");\n   }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java\n@@ -34,6 +34,7 @@ public class ConfigureForUnixVisitor implements ZoomVisitor {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForUnixVisitor.class);\n \n+  @Override\n   public void visit(Zoom zoom) {\n     LOGGER.info(zoom + \" used with Unix configurator.\");\n   }\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java b/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/ElfBlacksmith.java\n@@ -29,6 +29,7 @@\n  */\n public class ElfBlacksmith implements Blacksmith {\n \n+  @Override\n   public Weapon manufactureWeapon(WeaponType weaponType) {\n     return new ElfWeapon(weaponType);\n   }\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java b/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/OrcBlacksmith.java\n@@ -29,6 +29,7 @@\n  */\n public class OrcBlacksmith implements Blacksmith {\n \n+  @Override\n   public Weapon manufactureWeapon(WeaponType weaponType) {\n     return new OrcWeapon(weaponType);\n   }\n\ndiff --git a/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java\n@@ -49,6 +49,7 @@ public ThrottleTimerImpl(int throttlePeriod, CallsCount callsCount) {\n    * A timer is initiated with this method. The timer runs every second and resets the\n    * counter.\n    */\n+  @Override\n   public void start() {\n     new Timer(true).schedule(new TimerTask() {\n       @Override",
    "output": "Fix must override a superclass method\n* fix must override a superclass method\n* fix must override a superclass method"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java\n@@ -47,7 +47,7 @@ public static void main(String[] args) {\n     Zoom zoom = new Zoom();\n     Hayes hayes = new Hayes();\n     \n-    hayes.accept(conDos); // Hayes modem with Unix configurator\n+    hayes.accept(conDos); // Hayes modem with Dos configurator\n     zoom.accept(conDos); // Zoom modem with Dos configurator\n     hayes.accept(conUnix); // Hayes modem with Unix configurator\n     zoom.accept(conUnix); // Zoom modem with Unix configurator   ",
    "output": "MInor bug -> Code comment change (https://github.com/iluwatar/java-design-patterns/issues/895)"
  },
  {
    "input": "diff --git a/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java b/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n--- a/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n+++ b/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n@@ -30,11 +30,7 @@\n import static org.junit.jupiter.api.Assertions.assertTimeout;\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.timeout;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.*;\n \n /**\n  * Date: 12/30/15 - 18:55 PM\n@@ -55,9 +51,9 @@ public void testSuspend() throws Exception {\n       ballThread.setTwin(ballItem);\n \n       ballThread.start();\n-\n-      verify(ballItem, timeout(2000).atLeastOnce()).draw();\n-      verify(ballItem, timeout(2000).atLeastOnce()).move();\n+      sleep(200);\n+      verify(ballItem, atLeastOnce()).draw();\n+      verify(ballItem, atLeastOnce()).move();\n       ballThread.suspendMe();\n \n       sleep(1000);\n@@ -88,8 +84,9 @@ public void testResume() {\n       verifyZeroInteractions(ballItem);\n \n       ballThread.resumeMe();\n-      verify(ballItem, timeout(2000).atLeastOnce()).draw();\n-      verify(ballItem, timeout(2000).atLeastOnce()).move();\n+      sleep(200);\n+      verify(ballItem, atLeastOnce()).draw();\n+      verify(ballItem, atLeastOnce()).move();\n \n       ballThread.stopMe();\n       ballThread.join();",
    "output": "Fix failing tests"
  },
  {
    "input": "diff --git a/chain/src/main/java/com/iluwatar/chain/OrcCommander.java b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java\n--- a/chain/src/main/java/com/iluwatar/chain/OrcCommander.java\n+++ b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java\n@@ -35,7 +35,7 @@ public OrcCommander(RequestHandler handler) {\n \n   @Override\n   public void handleRequest(Request req) {\n-    if (req.getRequestType().equals(RequestType.DEFEND_CASTLE)) {\n+    if (RequestType.DEFEND_CASTLE == req.getRequestType()) {\n       printHandling(req);\n       req.markHandled();\n     } else {\n\ndiff --git a/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java\n--- a/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java\n+++ b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java\n@@ -35,7 +35,7 @@ public OrcOfficer(RequestHandler handler) {\n \n   @Override\n   public void handleRequest(Request req) {\n-    if (req.getRequestType().equals(RequestType.TORTURE_PRISONER)) {\n+    if (RequestType.TORTURE_PRISONER == req.getRequestType()) {\n       printHandling(req);\n       req.markHandled();\n     } else {\n\ndiff --git a/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java b/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java\n--- a/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java\n+++ b/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java\n@@ -35,7 +35,7 @@ public OrcSoldier(RequestHandler handler) {\n \n   @Override\n   public void handleRequest(Request req) {\n-    if (req.getRequestType().equals(RequestType.COLLECT_TAX)) {\n+    if (RequestType.COLLECT_TAX == req.getRequestType()) {\n       printHandling(req);\n       req.markHandled();\n     } else {",
    "output": "Best practice when compare enum"
  },
  {
    "input": "diff --git a/spatial-partition/src/main/java/com/iluwatar/spatialpartition/QuadTree.java b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/QuadTree.java\n--- a/spatial-partition/src/main/java/com/iluwatar/spatialpartition/QuadTree.java\n+++ b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/QuadTree.java\n@@ -55,16 +55,13 @@ public class QuadTree {\n   }\n \n   void insert(Point p) {\n-    if (!this.boundary.contains(p)) {\n-      return;\n-    } else {\n+    if (this.boundary.contains(p)) {\n       if (this.points.size() < this.capacity) {\n         points.put(p.id, p);\n       } else {\n         if (!this.divided) {\n           this.divide();\n         }\n-\n         if (this.northwest.boundary.contains(p)) {\n           this.northwest.insert(p);\n         } else if (this.northeast.boundary.contains(p)) {",
    "output": "845 : unnecassary return deleted"
  },
  {
    "input": "diff --git a/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java b/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java\n--- a/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java\n+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java\n@@ -86,7 +86,7 @@ public void action(Action... actions) {\n \r\n   public abstract String name();\r\n \r\n-  static enum Action {\r\n+  enum Action {\r\n     GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK\r\n   }\r\n }\r",
    "output": "Remove unnecessary static modifier on enum definition"
  },
  {
    "input": "diff --git a/module/src/main/java/com/iluwatar/module/App.java b/module/src/main/java/com/iluwatar/module/App.java\n--- a/module/src/main/java/com/iluwatar/module/App.java\n+++ b/module/src/main/java/com/iluwatar/module/App.java\n@@ -31,7 +31,7 @@\n  * Console Logger\r\n  * \r\n  */\r\n-public final class App {\r\n+public class App {\r\n \r\n   public static FileLoggerModule fileLoggerModule;\r\n   public static ConsoleLoggerModule consoleLoggerModule;\r\n@@ -87,6 +87,4 @@ public static void main(final String... args) throws FileNotFoundException {\n     execute(args);\r\n     unprepare();\r\n   }\r\n-\r\n-  private App() {}\r\n }\r",
    "output": "No Need declare App class as a utility class"
  },
  {
    "input": "diff --git a/balking/src/main/java/com/iluwatar/balking/DelayProvider.java b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java\n--- a/balking/src/main/java/com/iluwatar/balking/DelayProvider.java\n+++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar.balking;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An interface to simulate delay while executing some work.\n+ */\n+public interface DelayProvider {\n+  void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);\n+}\n\ndiff --git a/balking/src/main/java/com/iluwatar/balking/WashingMachine.java b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n--- a/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n+++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n@@ -25,17 +25,38 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.concurrent.TimeUnit;\n+\n /**\n  * Washing machine class\n  */\n public class WashingMachine {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(WashingMachine.class);\n-\n+  private final DelayProvider delayProvider;\n   private WashingMachineState washingMachineState;\n \n+  /**\n+   * Creates a new instance of WashingMachine\n+   */\n   public WashingMachine() {\n-    washingMachineState = WashingMachineState.ENABLED;\n+    this((interval, timeUnit, task) -> {\n+      try {\n+        Thread.sleep(timeUnit.toMillis(interval));\n+      } catch (InterruptedException ie) {\n+        ie.printStackTrace();\n+      }\n+      task.run();\n+    });\n+  }\n+\n+  /**\n+   * Creates a new instance of WashingMachine using provided delayProvider. This constructor is used only for\n+   * unit testing purposes.\n+   */\n+  public WashingMachine(DelayProvider delayProvider) {\n+    this.delayProvider = delayProvider;\n+    this.washingMachineState = WashingMachineState.ENABLED;\n   }\n \n   public WashingMachineState getWashingMachineState() {\n@@ -56,12 +77,8 @@ public void wash() {\n       washingMachineState = WashingMachineState.WASHING;\n     }\n     LOGGER.info(\"{}: Doing the washing\", Thread.currentThread().getName());\n-    try {\n-      Thread.sleep(50);\n-    } catch (InterruptedException ie) {\n-      ie.printStackTrace();\n-    }\n-    endOfWashing();\n+\n+    this.delayProvider.executeAfterDelay(50, TimeUnit.MILLISECONDS, this::endOfWashing);\n   }\n \n   /**\n\ndiff --git a/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java\n--- a/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java\n+++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java\n@@ -22,11 +22,8 @@\n  */\n package com.iluwatar.balking;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -36,32 +33,39 @@\n  */\n public class WashingMachineTest {\n \n-  private volatile WashingMachineState machineStateGlobal;\n+  private FakeDelayProvider fakeDelayProvider = new FakeDelayProvider();\n \n-  @Disabled\n   @Test\n-  public void wash() throws Exception {\n-    WashingMachine washingMachine = new WashingMachine();\n-    ExecutorService executorService = Executors.newFixedThreadPool(2);\n-    executorService.execute(washingMachine::wash);\n-    executorService.execute(() -> {\n-      washingMachine.wash();\n-      machineStateGlobal = washingMachine.getWashingMachineState();\n-    });\n-    executorService.shutdown();\n-    try {\n-      executorService.awaitTermination(10, TimeUnit.SECONDS);\n-    } catch (InterruptedException ie) {\n-      ie.printStackTrace();\n-    }\n+  public void wash() {\n+    WashingMachine washingMachine = new WashingMachine(fakeDelayProvider);\n+\n+    washingMachine.wash();\n+    washingMachine.wash();\n+\n+    WashingMachineState machineStateGlobal = washingMachine.getWashingMachineState();\n+\n+    fakeDelayProvider.task.run();\n+\n+    // washing machine remains in washing state\n     assertEquals(WashingMachineState.WASHING, machineStateGlobal);\n+\n+    // washing machine goes back to enabled state\n+    assertEquals(WashingMachineState.ENABLED, washingMachine.getWashingMachineState());\n   }\n \n   @Test\n-  public void endOfWashing() throws Exception {\n+  public void endOfWashing() {\n     WashingMachine washingMachine = new WashingMachine();\n     washingMachine.wash();\n     assertEquals(WashingMachineState.ENABLED, washingMachine.getWashingMachineState());\n   }\n \n+  private class FakeDelayProvider implements DelayProvider {\n+    private Runnable task;\n+\n+    @Override\n+    public void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task) {\n+      this.task = task;\n+    }\n+  }\n }\n\\ No newline at end of file",
    "output": "Intermittent failure was due to Thread.sleep in the code. While performing unit test cases there was race condition between two threads, so it was not guaranteed to work every time. Used an interface DelayProvider for simulating delay, and while unit testing fake delay provider is used that eradicates the use of Threads in unit test cases, which is not a good practice."
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n@@ -29,7 +29,6 @@\n import java.util.PrimitiveIterator;\n import java.util.Random;\n import java.util.Set;\n-import java.util.Iterator;\n \n /**\n  *\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java\n@@ -23,7 +23,6 @@\n package com.iluwatar.hexagonal.domain;\n \n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.LongAdder;\n \n /**\n  * Lottery ticked id",
    "output": "Resolved PMD issues"
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/App.java b/decorator/src/main/java/com/iluwatar/decorator/App.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/App.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java\n@@ -57,9 +57,9 @@ public static void main(String[] args) {\n \n     // change the behavior of the simple troll by adding a decorator\n     LOGGER.info(\"A troll with huge club surprises you.\");\n-    troll = new ClubbedTroll(troll);\n-    troll.attack();\n-    troll.fleeBattle();\n-    LOGGER.info(\"Clubbed troll power {}.\\n\", troll.getAttackPower());\n+    Troll clubbedTroll = new ClubbedTroll(troll);\n+    clubbedTroll.attack();\n+    clubbedTroll.fleeBattle();\n+    LOGGER.info(\"Clubbed troll power {}.\\n\", clubbedTroll.getAttackPower());\n   }\n }\n\ndiff --git a/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java b/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java\n@@ -36,7 +36,7 @@\n public class ClubbedTrollTest {\n \n   @Test\n-  public void testClubbedTroll() throws Exception {\n+  public void testClubbedTroll() {\n     // Create a normal troll first, but make sure we can spy on it later on.\n     final Troll simpleTroll = spy(new SimpleTroll());\n \n\ndiff --git a/decorator/src/test/java/com/iluwatar/decorator/SimpleTrollTest.java b/decorator/src/test/java/com/iluwatar/decorator/SimpleTrollTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/SimpleTrollTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/SimpleTrollTest.java\n@@ -53,7 +53,7 @@ public void tearDown() {\n   }\n \n   @Test\n-  public void testTrollActions() throws Exception {\n+  public void testTrollActions() {\n     final SimpleTroll troll = new SimpleTroll();\n     assertEquals(10, troll.getAttackPower());\n ",
    "output": "- Assign new clubberTroll instance to another variable.\n- Remove redundant Exception from throws list in unit tests."
  },
  {
    "input": "diff --git a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n@@ -52,7 +52,7 @@ public void testGoToBattle() {\n    * Verify if the dragon slayer uses the new strategy during battle after a change of strategy\n    */\n   @Test\n-  public void testChangeStrategy() throws Exception {\n+  public void testChangeStrategy() {\n     final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);\n     final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);\n ",
    "output": "Remove redundant Exception from throws list in DragonSlayerTest"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n@@ -38,9 +38,9 @@ public class Hayes extends Modem {\n   @Override\n   public void accept(ModemVisitor modemVisitor) {\n     if (modemVisitor instanceof HayesVisitor) {\n-        ((HayesVisitor) modemVisitor).visit(this);\n+      ((HayesVisitor) modemVisitor).visit(this);\n     } else {\n-        LOGGER.info(\"Only HayesVisitor is allowed to visit Hayes modem\");\n+      LOGGER.info(\"Only HayesVisitor is allowed to visit Hayes modem\");\n     }\n \n   }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n@@ -38,7 +38,7 @@ public class Zoom extends Modem {\n   @Override\n   public void accept(ModemVisitor modemVisitor) {\n     if (modemVisitor instanceof  ZoomVisitor) {\n-        ((ZoomVisitor) modemVisitor).visit(this);\n+      ((ZoomVisitor) modemVisitor).visit(this);\n     } else {\n       LOGGER.info(\"Only ZoomVisitor is allowed to visit Zoom modem\");\n     }",
    "output": "Resolved checkstyle issues"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java\n@@ -23,8 +23,9 @@\n package com.iluwatar.acyclicvisitor;\n \n /**\n- * All ModemVisitor interface extends all visitor interfaces\n+ * All ModemVisitor interface extends all visitor interfaces. This interface\n+ * provides ease of use when a visitor needs to visit all modem types.\n  */\n-public interface AllModemVisitor extends ModemVisitor, ZoomVisitor, HayesVisitor{\n+public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{\n \n }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java\n@@ -27,9 +27,10 @@\n \n /**\n  * ConfigureForUnixVisitor class implements zoom's visit method for Unix \n- * manufacturer\n+ * manufacturer, unlike traditional visitor pattern, this class may selectively implement\n+ * visit for other modems.\n  */\n-public class ConfigureForUnixVisitor implements ModemVisitor, ZoomVisitor {\n+public class ConfigureForUnixVisitor implements ZoomVisitor {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForUnixVisitor.class);\n \n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n@@ -37,10 +37,10 @@ public class Hayes extends Modem {\n    */\n   @Override\n   public void accept(ModemVisitor modemVisitor) {\n-    try {\n-      ((HayesVisitor) modemVisitor).visit(this);\n-    } catch (ClassCastException e) {\n-      LOGGER.error(\"Unable to cast to HayesVisitor\");\n+    if (modemVisitor instanceof HayesVisitor) {\n+        ((HayesVisitor) modemVisitor).visit(this);\n+    } else {\n+        LOGGER.info(\"Only HayesVisitor is allowed to visit Hayes modem\");\n     }\n \n   }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n@@ -37,10 +37,10 @@ public class Zoom extends Modem {\n    */\n   @Override\n   public void accept(ModemVisitor modemVisitor) {\n-    try {\n-      ((ZoomVisitor) modemVisitor).visit(this);\n-    } catch (ClassCastException e) {\n-      LOGGER.error(\"Unable to cast to ZoomVisitor\");\n+    if (modemVisitor instanceof  ZoomVisitor) {\n+        ((ZoomVisitor) modemVisitor).visit(this);\n+    } else {\n+      LOGGER.info(\"Only ZoomVisitor is allowed to visit Zoom modem\");\n     }\n   }\n   ",
    "output": "Solved the classcast exception and used instanceof instead. Improved javadocs a bit."
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n@@ -22,13 +22,12 @@\n  */\n package com.iluwatar.hexagonal.domain;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.PrimitiveIterator;\n import java.util.Random;\n import java.util.Set;\n+import java.util.Iterator;\n \n /**\n  *\n@@ -85,11 +84,10 @@ public Set<Integer> getNumbers() {\n    * @return numbers as comma separated string\n    */\n   public String getNumbersAsString() {\n-    List<Integer> list = new ArrayList<>();\n-    list.addAll(numbers);\n     StringBuilder builder = new StringBuilder();\n+    Iterator<Integer> iterator = numbers.iterator();\n     for (int i = 0; i < NUM_NUMBERS; i++) {\n-      builder.append(list.get(i));\n+      builder.append(iterator.next());\n       if (i < NUM_NUMBERS - 1) {\n         builder.append(\",\");\n       }",
    "output": "Fix redundant list alloc in LotteryNumbers"
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/execute/around/App.java b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/App.java\n@@ -22,7 +22,6 @@\n  */\n package com.iluwatar.execute.around;\n \n-import java.io.FileWriter;\n import java.io.IOException;\n \n /**\n@@ -42,14 +41,11 @@ public class App {\n    */\n   public static void main(String[] args) throws IOException {\n \n-    new SimpleFileWriter(\"testfile.txt\", new FileWriterAction() {\n-\n-      @Override\n-      public void writeFile(FileWriter writer) throws IOException {\n-        writer.write(\"Hello\");\n-        writer.append(\" \");\n-        writer.append(\"there!\");\n-      }\n-    });\n+    FileWriterAction writeHello = writer -> {\n+      writer.write(\"Hello\");\n+      writer.append(\" \");\n+      writer.append(\"there!\");\n+    };\n+    new SimpleFileWriter(\"testfile.txt\", writeHello);\n   }\n }\n\ndiff --git a/execute-around/src/main/java/com/iluwatar/execute/around/FileWriterAction.java b/execute-around/src/main/java/com/iluwatar/execute/around/FileWriterAction.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/FileWriterAction.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/FileWriterAction.java\n@@ -30,6 +30,7 @@\n  * Interface for specifying what to do with the file resource.\n  *\n  */\n+@FunctionalInterface\n public interface FileWriterAction {\n \n   void writeFile(FileWriter writer) throws IOException;",
    "output": "Execute around lambda"
  },
  {
    "input": "diff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Car.java\n@@ -45,6 +45,52 @@ public Car(String make, String model, int yearOfMake, Category category) {\n     this.category = category;\n   }\n \n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((category == null) ? 0 : category.hashCode());\n+    result = prime * result + ((make == null) ? 0 : make.hashCode());\n+    result = prime * result + ((model == null) ? 0 : model.hashCode());\n+    result = prime * result + year;\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    Car other = (Car) obj;\n+    if (category != other.category) {\n+      return false;\n+    }\n+    if (make == null) {\n+      if (other.make != null) {\n+        return false;\n+      }\n+    } else if (!make.equals(other.make)) {\n+      return false;\n+    }\n+    if (model == null) {\n+      if (other.model != null) {\n+        return false;\n+      }\n+    } else if (!model.equals(other.model)) {\n+      return false;\n+    }\n+    if (year != other.year) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n   public String getMake() {\n     return make;\n   }\n\ndiff --git a/collection-pipeline/src/test/java/com/iluwatar/collectionpipeline/AppTest.java b/collection-pipeline/src/test/java/com/iluwatar/collectionpipeline/AppTest.java\n--- a/collection-pipeline/src/test/java/com/iluwatar/collectionpipeline/AppTest.java\n+++ b/collection-pipeline/src/test/java/com/iluwatar/collectionpipeline/AppTest.java\n@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -40,27 +41,39 @@ public class AppTest {\n   @Test\n   public void testGetModelsAfter2000UsingFor() {\n     List<String> models = ImperativeProgramming.getModelsAfter2000(cars);\n-    assertEquals(models, Arrays.asList(\"Avenger\", \"Wrangler\", \"Focus\", \"Cascada\"));\n+    assertEquals(Arrays.asList(\"Avenger\", \"Wrangler\", \"Focus\", \"Cascada\"), models);\n   }\n   \n   @Test\n   public void testGetModelsAfter2000UsingPipeline() {\n     List<String> models = FunctionalProgramming.getModelsAfter2000(cars);\n-    assertEquals(models, Arrays.asList(\"Avenger\", \"Wrangler\", \"Focus\", \"Cascada\"));\n+    assertEquals(Arrays.asList(\"Avenger\", \"Wrangler\", \"Focus\", \"Cascada\"), models);\n   }\n   \n   @Test\n   public void testGetGroupingOfCarsByCategory() {\n+    Map<Category, List<Car>> modelsExpected = new HashMap<>();\n+    modelsExpected.put(Category.CONVERTIBLE, Arrays.asList(new Car(\"Buick\", \"Cascada\", 2016, Category.CONVERTIBLE),\n+        new Car(\"Chevrolet\", \"Geo Metro\", 1992, Category.CONVERTIBLE)));\n+    modelsExpected.put(Category.SEDAN, Arrays.asList(new Car(\"Dodge\", \"Avenger\", 2010, Category.SEDAN),\n+        new Car(\"Ford\", \"Focus\", 2012, Category.SEDAN)));\n+    modelsExpected.put(Category.JEEP, Arrays.asList(new Car(\"Jeep\", \"Wrangler\", 2011, Category.JEEP),\n+        new Car(\"Jeep\", \"Comanche\", 1990, Category.JEEP)));\n     Map<Category, List<Car>> modelsFunctional = FunctionalProgramming.getGroupingOfCarsByCategory(cars);\n     Map<Category, List<Car>> modelsImperative = ImperativeProgramming.getGroupingOfCarsByCategory(cars);\n-    assertEquals(modelsFunctional, modelsImperative);\n+    System.out.println(\"Category \" + modelsFunctional);\n+    assertEquals(modelsExpected, modelsFunctional);\n+    assertEquals(modelsExpected, modelsImperative);\n   }\n   \n   @Test\n   public void testGetSedanCarsOwnedSortedByDate() {\n     Person john = new Person(cars);\n+    List<Car> modelsExpected = Arrays.asList(new Car(\"Dodge\", \"Avenger\", 2010, Category.SEDAN), \n+        new Car(\"Ford\", \"Focus\", 2012, Category.SEDAN));\n     List<Car> modelsFunctional = FunctionalProgramming.getSedanCarsOwnedSortedByDate(Arrays.asList(john));\n     List<Car> modelsImperative = ImperativeProgramming.getSedanCarsOwnedSortedByDate(Arrays.asList(john));\n-    assertEquals(modelsFunctional, modelsImperative);\n+    assertEquals(modelsExpected, modelsFunctional);\n+    assertEquals(modelsExpected, modelsImperative);\n   }\n }",
    "output": "Review changes in Test Cases"
  },
  {
    "input": "diff --git a/iterator/src/main/java/com/iluwatar/iterator/App.java b/iterator/src/main/java/com/iluwatar/iterator/App.java\n--- a/iterator/src/main/java/com/iluwatar/iterator/App.java\n+++ b/iterator/src/main/java/com/iluwatar/iterator/App.java\n@@ -25,6 +25,7 @@\n \n import com.iluwatar.iterator.bst.BstIterator;\n import com.iluwatar.iterator.bst.TreeNode;\n+import com.iluwatar.iterator.list.Item;\n import com.iluwatar.iterator.list.ItemType;\n import com.iluwatar.iterator.list.TreasureChest;\n import org.slf4j.Logger;\n@@ -47,7 +48,7 @@ public class App {\n   private static void demonstrateTreasureChestIteratorForType(ItemType itemType) {\n     LOGGER.info(\"------------------------\");\n     LOGGER.info(\"Item Iterator for ItemType \" + itemType + \": \");\n-    Iterator itemIterator = TREASURE_CHEST.iterator(itemType);\n+    Iterator<Item> itemIterator = TREASURE_CHEST.iterator(itemType);\n     while (itemIterator.hasNext()) {\n       LOGGER.info(itemIterator.next().toString());\n     }\n\ndiff --git a/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java\n--- a/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java\n+++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java\n@@ -48,17 +48,15 @@ public TreasureChest() {\n     items.add(new Item(ItemType.WEAPON, \"Dagger of poison\"));\n   }\n \n-  public Iterator iterator(ItemType itemType) {\n+  public Iterator<Item> iterator(ItemType itemType) {\n     return new TreasureChestItemIterator(this, itemType);\n   }\n \n   /**\n    * Get all items\n    */\n   public List<Item> getItems() {\n-    List<Item> list = new ArrayList<>();\n-    list.addAll(items);\n-    return list;\n+    return new ArrayList<>(items);\n   }\n \n }\n\ndiff --git a/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChestItemIterator.java b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChestItemIterator.java\n--- a/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChestItemIterator.java\n+++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChestItemIterator.java\n@@ -26,7 +26,7 @@\n  * TreasureChestItemIterator\n  *\n  */\n-public class TreasureChestItemIterator implements Iterator {\n+public class TreasureChestItemIterator implements Iterator<Item> {\n \n   private TreasureChest chest;\n   private int idx;\n\ndiff --git a/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java b/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java\n--- a/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java\n+++ b/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java\n@@ -63,11 +63,11 @@ public static List<Object[]> dataProvider() {\n   @MethodSource(\"dataProvider\")\n   public void testIterator(Item expectedItem) {\n     final TreasureChest chest = new TreasureChest();\n-    final Iterator iterator = chest.iterator(expectedItem.getType());\n+    final Iterator<Item> iterator = chest.iterator(expectedItem.getType());\n     assertNotNull(iterator);\n \n     while (iterator.hasNext()) {\n-      final Item item = (Item) iterator.next();\n+      final Item item = iterator.next();\n       assertNotNull(item);\n       assertEquals(expectedItem.getType(), item.getType());\n ",
    "output": "Correct raw types for the item Iterator."
  },
  {
    "input": "diff --git a/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java\n--- a/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java\n+++ b/iterator/src/main/java/com/iluwatar/iterator/list/TreasureChest.java\n@@ -18,6 +18,7 @@\n  */\n package com.iluwatar.iterator.list;\n \n+import com.iluwatar.iterator.Iterator;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -47,7 +48,7 @@ public TreasureChest() {\n     items.add(new Item(ItemType.WEAPON, \"Dagger of poison\"));\n   }\n \n-  public TreasureChestItemIterator iterator(ItemType itemType) {\n+  public Iterator iterator(ItemType itemType) {\n     return new TreasureChestItemIterator(this, itemType);\n   }\n \n\ndiff --git a/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java b/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java\n--- a/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java\n+++ b/iterator/src/test/java/com/iluwatar/iterator/list/TreasureChestTest.java\n@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import com.iluwatar.iterator.Iterator;\n import java.util.ArrayList;\n import java.util.List;\n import org.junit.jupiter.params.ParameterizedTest;\n@@ -62,11 +63,11 @@ public static List<Object[]> dataProvider() {\n   @MethodSource(\"dataProvider\")\n   public void testIterator(Item expectedItem) {\n     final TreasureChest chest = new TreasureChest();\n-    final TreasureChestItemIterator iterator = chest.iterator(expectedItem.getType());\n+    final Iterator iterator = chest.iterator(expectedItem.getType());\n     assertNotNull(iterator);\n \n     while (iterator.hasNext()) {\n-      final Item item = iterator.next();\n+      final Item item = (Item) iterator.next();\n       assertNotNull(item);\n       assertEquals(expectedItem.getType(), item.getType());\n ",
    "output": "Modify return type of TreasureChestItemIterator's constructor to be Iterator"
  },
  {
    "input": "diff --git a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java\n--- a/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java\n+++ b/collection-pipeline/src/main/java/com/iluwatar/collectionpipeline/Person.java\n@@ -0,0 +1,44 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.collectionpipeline;\n+\n+import java.util.List;\n+\n+/**\n+ * A Person class that has the list of cars that the person owns and use.\n+ */\n+public class Person {\n+  private List<Car> cars;\n+\n+  /**\n+   * Constructor to create an instance of person.\n+   * @param cars the list of cars owned\n+   */\n+  public Person(List<Car> cars) {\n+    this.cars = cars;\n+  }\n+\n+  public List<Car> getCars() {\n+    return cars;\n+  }\n+}\n\\ No newline at end of file",
    "output": "Add Missing class"
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n@@ -37,11 +37,8 @@ public class SimpleFileWriter {\n    * Constructor\n    */\n   public SimpleFileWriter(String filename, FileWriterAction action) throws IOException {\n-    FileWriter writer = new FileWriter(filename);\n-    try {\n+    try (FileWriter writer = new FileWriter(filename)) {\n       action.writeFile(writer);\n-    } finally {\n-      writer.close();\n     }\n   }\n }",
    "output": "Use try-with-resources\nReplace try statements that close a resource in the finally block with a\ntry-with-resources statement [1].\nThis commit was created automatically by Diffblue refactorings (https://www.diffblue.com/).\n[1] https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n@@ -25,6 +25,6 @@\n /**\n  * ZoomVisitor interface\n  */\n-public interface ZoomVisitor extends ModemVisitor{\n+public interface ZoomVisitor extends ModemVisitor {\n   void visit(Zoom zoom);\n }\n\ndiff --git a/retry/src/main/java/com/iluwatar/retry/Retry.java b/retry/src/main/java/com/iluwatar/retry/Retry.java\n--- a/retry/src/main/java/com/iluwatar/retry/Retry.java\n+++ b/retry/src/main/java/com/iluwatar/retry/Retry.java\n@@ -105,6 +105,7 @@ public T perform() throws BusinessException {\n           //ignore\n         }\n       }\n-    } while (true);\n+    }\n+    while (true);\n   }\n }",
    "output": "Fix minor changes suggested by Checkstyle"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n@@ -51,7 +51,7 @@ public class AppClient {\n \n   /**\n    * App client entry.\n-   * \n+   *\n    * @throws IOException if any I/O error occurs.\n    */\n   public static void main(String[] args) throws IOException {\n@@ -61,7 +61,7 @@ public static void main(String[] args) throws IOException {\n \n   /**\n    * Starts the logging clients.\n-   * \n+   *\n    * @throws IOException if any I/O error occurs.\n    */\n   public void start() throws IOException {\n@@ -106,7 +106,7 @@ static class TcpLoggingClient implements Runnable {\n \n     /**\n      * Creates a new TCP logging client.\n-     * \n+     *\n      * @param clientName the name of the client to be sent in logging requests.\n      * @param serverPort the port on which client will send logging requests.\n      */\n@@ -115,6 +115,7 @@ public TcpLoggingClient(String clientName, int serverPort) {\n       this.serverPort = serverPort;\n     }\n \n+    @Override\n     public void run() {\n       try (Socket socket = new Socket(InetAddress.getLocalHost(), serverPort)) {\n         OutputStream outputStream = socket.getOutputStream();\n@@ -154,7 +155,7 @@ static class UdpLoggingClient implements Runnable {\n \n     /**\n      * Creates a new UDP logging client.\n-     * \n+     *\n      * @param clientName the name of the client to be sent in logging requests.\n      * @param port the port on which client will send logging requests.\n      * @throws UnknownHostException if localhost is unknown",
    "output": "Add Annotation 'Override' to com.iluwatar.reactor.app.AppClient.TcpLoggingClient.run method."
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java\n@@ -1,6 +1,5 @@\n package com.iluwatar.hexagonal.service;\n \n-import com.google.inject.Inject;\n import com.iluwatar.hexagonal.banking.WireTransfers;\n import com.iluwatar.hexagonal.domain.*;\n import org.slf4j.Logger;",
    "output": "Fix import not used"
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/Client.java b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/Client.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java\n@@ -22,20 +22,21 @@\n  */\n package com.iluwatar.ambassador;\n \n+import org.slf4j.LoggerFactory;\n+\n+import org.slf4j.Logger;\n+\n /**\n  * A simple Client\n  */\n public class Client {\n \n-  private ServiceAmbassador serviceAmbassador;\n-\n-  Client() {\n-    serviceAmbassador = new ServiceAmbassador();\n-  }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(Client.class);\n+  private final ServiceAmbassador serviceAmbassador = new ServiceAmbassador();\n \n   long useService(int value) {\n     long result = serviceAmbassador.doRemoteFunction(value);\n-    System.out.println(result);\n+    LOGGER.info(\"Service result: \" + result);\n     return result;\n   }\n }\n\ndiff --git a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java\n@@ -22,13 +22,17 @@\n  */\n package com.iluwatar.ambassador;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import static java.lang.Thread.sleep;\n \n /**\n  * A remote legacy application represented by a Singleton implementation.\n  */\n public class RemoteService implements RemoteServiceInterface {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(RemoteService.class);\n   private static RemoteService service = null;\n \n   static synchronized RemoteService getRemoteService() {\n@@ -38,13 +42,11 @@ static synchronized RemoteService getRemoteService() {\n     return service;\n   }\n \n-  private RemoteService() {\n-\n-  }\n+  private RemoteService() {}\n \n   /**\n    * Remote function takes a value and multiplies it by 10 taking a random amount of time.\n-   * Will sometimes return -1. This immitates connectivity issues a client might have to account for.\n+   * Will sometimes return -1. This imitates connectivity issues a client might have to account for.\n    * @param value integer value to be multiplied.\n    * @return if waitTime is more than 200ms, it returns value * 10, otherwise -1.\n    */\n@@ -56,7 +58,7 @@ public long doRemoteFunction(int value) {\n     try {\n       sleep(waitTime);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Thread sleep state interrupted\", e);\n     }\n     return waitTime >= 200 ? value * 10 : -1;\n   }\n\ndiff --git a/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java b/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java\n@@ -40,20 +40,16 @@ public class ServiceAmbassador implements RemoteServiceInterface {\n   private static final int RETRIES = 3;\n   private static final int DELAY_MS = 3000;\n \n-  ServiceAmbassador() {\n-\n-  }\n+  ServiceAmbassador() {}\n \n   @Override\n   public long doRemoteFunction(int value) {\n-\n     return safeCall(value);\n   }\n \n   private long checkLatency(int value) {\n-    RemoteService service = RemoteService.getRemoteService();\n     long startTime = System.currentTimeMillis();\n-    long result = service.doRemoteFunction(value);\n+    long result = RemoteService.getRemoteService().doRemoteFunction(value);\n     long timeTaken = System.currentTimeMillis() - startTime;\n \n     LOGGER.info(\"Time taken (ms): \" + timeTaken);\n@@ -77,7 +73,7 @@ private long safeCall(int value) {\n         try {\n           sleep(DELAY_MS);\n         } catch (InterruptedException e) {\n-          e.printStackTrace();\n+          LOGGER.error(\"Thread sleep state interrupted\", e);\n         }\n       } else {\n         break;\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n@@ -31,10 +31,7 @@ public class RemoteServiceTest {\n \n   @Test\n   public void test() {\n-\n-    RemoteService remoteService = RemoteService.getRemoteService();\n-    long result = remoteService.doRemoteFunction(10);\n-\n+    long result = RemoteService.getRemoteService().doRemoteFunction(10);\n     assert result == 100 || result == -1;\n   }\n }\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n@@ -31,8 +31,7 @@ public class ServiceAmbassadorTest {\n \n   @Test\n   public void test() {\n-    ServiceAmbassador ambassador = new ServiceAmbassador();\n-    long result = ambassador.doRemoteFunction(10);\n+    long result = new ServiceAmbassador().doRemoteFunction(10);\n     assert result == 100 || result == -1;\n   }\n }",
    "output": "General cleanup. Simplifying code. Replacing all prints with appropriate Logger."
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java\n@@ -25,6 +25,6 @@\n /**\n  * HayesVisitor interface\n  */\n-public interface HayesVisitor {\n+public interface HayesVisitor extends ModemVisitor {\n   void visit(Hayes hayes);\n }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n@@ -25,6 +25,6 @@\n /**\n  * ZoomVisitor interface\n  */\n-public interface ZoomVisitor {\n+public interface ZoomVisitor extends ModemVisitor{\n   void visit(Zoom zoom);\n }",
    "output": "Upgrade HayesVisitor and ZoomVisitor"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitorTest.java\n@@ -49,9 +49,9 @@ public class ConfigureForDosVisitorTest {\n   @Test\n   public void testVisitForZoom() {    \n     ConfigureForDosVisitor conDos = new ConfigureForDosVisitor();\n-    Zoom zoom = mock(Zoom.class);\n+    Zoom zoom = new Zoom();\n     \n-    ((ZoomVisitor)conDos).visit(zoom);\n+    conDos.visit(zoom);\n     \n     assertThat(logger.getLoggingEvents()).extracting(\"level\", \"message\").contains(\n         tuple(INFO, zoom + \" used with Dos configurator.\"));\n@@ -60,9 +60,9 @@ public void testVisitForZoom() {\n   @Test\n   public void testVisitForHayes() {\n     ConfigureForDosVisitor conDos = new ConfigureForDosVisitor();\n-    Hayes hayes = mock(Hayes.class);\n+    Hayes hayes = new Hayes();\n     \n-    ((HayesVisitor)conDos).visit(hayes);\n+    conDos.visit(hayes);\n     \n     assertThat(logger.getLoggingEvents()).extracting(\"level\", \"message\").contains(\n         tuple(INFO, hayes + \" used with Dos configurator.\"));\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n@@ -55,9 +55,9 @@ public void clearLoggers() {\n   @Test\n   public void testVisitForZoom() {\n     ConfigureForUnixVisitor conUnix = new ConfigureForUnixVisitor();\n-    Zoom zoom = mock(Zoom.class);\n+    Zoom zoom = new Zoom();\n     \n-    ((ZoomVisitor)conUnix).visit(zoom);\n+    conUnix.visit(zoom);\n     \n     assertThat(logger.getLoggingEvents()).extracting(\"level\", \"message\").contains(\n         tuple(INFO, zoom + \" used with Unix configurator.\"));",
    "output": "Upgrade ConfigureForDosVisitorTest and ConfigureForUnixVisitorTest classes"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n@@ -62,14 +62,4 @@ public void testVisitForZoom() {\n     assertThat(logger.getLoggingEvents()).extracting(\"level\", \"message\").contains(\n         tuple(INFO, zoom + \" used with Unix configurator.\"));\n   }\n-  \n-  @Test\n-  public void testVisitForHayes() {\n-    ConfigureForUnixVisitor conUnix = new ConfigureForUnixVisitor();\n-    Hayes hayes = mock(Hayes.class);\n-    \n-    Assertions.assertThrows(ClassCastException.class, () -> {\n-      ((HayesVisitor)conUnix).visit(hayes);\n-    });    \n-  }\n }",
    "output": "Remove test case"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesVisitorTest.java\n@@ -1,30 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.acyclicvisitor;\n-\n-/**\n- * HayesVisitor test class\n- */\n-public interface HayesVisitorTest {\n-\n-}\n\\ No newline at end of file\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemTest.java\n@@ -1,30 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.acyclicvisitor;\n-\n-/**\n- * Modem test class\n- */\n-public abstract class ModemTest {\n-\n-}\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ModemVisitorTest.java\n@@ -1,30 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.acyclicvisitor;\n-\n-/**\n- * ModemVisitor test class\n- */\n-public interface ModemVisitorTest {\n-\n-}\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomVisitorTest.java\n@@ -1,30 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.acyclicvisitor;\n-\n-/**\n- * ZoomVisitor test class\n- */\n-public interface ZoomVisitorTest {\n-\n-}",
    "output": "Remove interfaces' test classes"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n@@ -32,10 +32,6 @@ public class Hayes extends Modem {\n   \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n \n-  public Hayes() {\n-\n-  }\n-\n   /**\n    * Accept visitor\n    */\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n@@ -32,10 +32,6 @@ public class Zoom extends Modem {\n   \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n \n-  public Zoom() {\n-    \n-  }\n-\n   /**\n    * Accept visitor\n    */",
    "output": "Remove default constructors"
  },
  {
    "input": "diff --git a/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java\n@@ -29,8 +29,8 @@\n  */\n public class AppTest {\n \n-    @Test\n-    public void test() {\n-        App.main(new String[]{});\n-    }\n+  @Test\n+  public void test() {\n+    App.main(new String[]{});\n+  }\n }\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java\n@@ -24,14 +24,17 @@\n \n import org.junit.jupiter.api.Test;\n \n+/**\n+ * Test for {@link Client}\n+ */\n public class ClientTest {\n \n-    @Test\n-    public void test() {\n+  @Test\n+  public void test() {\n \n-        Client client = new Client();\n-        long result = client.useService(10);\n-        assert result == 100 || result == -1;\n+    Client client = new Client();\n+    long result = client.useService(10);\n \n-    }\n+    assert result == 100 || result == -1;\n+  }\n }\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n@@ -24,15 +24,17 @@\n \n import org.junit.jupiter.api.Test;\n \n+/**\n+ * Test for {@link RemoteService}\n+ */\n public class RemoteServiceTest {\n \n-    @Test\n-    public void test() {\n-\n-        RemoteService remoteService = RemoteService.getRemoteService();\n-        long result = remoteService.doRemoteFunction(10);\n+  @Test\n+  public void test() {\n \n-        assert result == 100 || result == -1;\n-    }\n+    RemoteService remoteService = RemoteService.getRemoteService();\n+    long result = remoteService.doRemoteFunction(10);\n \n+    assert result == 100 || result == -1;\n+  }\n }\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n@@ -24,12 +24,15 @@\n \n import org.junit.jupiter.api.Test;\n \n+/**\n+ * Test for {@link ServiceAmbassador}\n+ */\n public class ServiceAmbassadorTest {\n \n-    @Test\n-    public void test() {\n-        ServiceAmbassador ambassador = new ServiceAmbassador();\n-        long result = ambassador.doRemoteFunction(10);\n-        assert result == 100 || result == -1;\n-    }\n+  @Test\n+  public void test() {\n+    ServiceAmbassador ambassador = new ServiceAmbassador();\n+    long result = ambassador.doRemoteFunction(10);\n+    assert result == 100 || result == -1;\n+  }\n }",
    "output": "Fix CheckStyle issues in Test classes."
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/Client.java b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/Client.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/Client.java\n@@ -33,8 +33,9 @@ public class Client {\n         serviceAmbassador = new ServiceAmbassador();\n     }\n \n-    void useService(int value) {\n+    long useService(int value) {\n         long result = serviceAmbassador.doRemoteFunction(value);\n         System.out.println(result);\n+        return result;\n     }\n }\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/AppTest.java\n@@ -0,0 +1,36 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.ambassador;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Application test\n+ */\n+public class AppTest {\n+\n+    @Test\n+    public void test() {\n+        App.main(new String[]{});\n+    }\n+}\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/ClientTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.ambassador;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ClientTest {\n+\n+    @Test\n+    public void test() {\n+\n+        Client client = new Client();\n+        long result = client.useService(10);\n+        assert result == 100 || result == -1;\n+\n+    }\n+}\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/RemoteServiceTest.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar.ambassador;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class RemoteServiceTest {\n+\n+    @Test\n+    public void test() {\n+\n+        RemoteService remoteService = RemoteService.getRemoteService();\n+        long result = remoteService.doRemoteFunction(10);\n+\n+        assert result == 100 || result == -1;\n+    }\n+\n+}\n\ndiff --git a/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n--- a/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n+++ b/ambassador/src/test/java/com/iluwatar/ambassador/ServiceAmbassadorTest.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar.ambassador;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ServiceAmbassadorTest {\n+\n+    @Test\n+    public void test() {\n+        ServiceAmbassador ambassador = new ServiceAmbassador();\n+        long result = ambassador.doRemoteFunction(10);\n+        assert result == 100 || result == -1;\n+    }\n+}",
    "output": "Add tests for each class."
  },
  {
    "input": "diff --git a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n--- a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n@@ -23,6 +23,7 @@\n package com.iluwatar.throttling;\n \n import com.iluwatar.throttling.timer.Throttler;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,6 +33,7 @@\n  */\n public class B2BServiceTest {\n \n+  @Disabled\n   @Test\n   public void dummyCustomerApiTest() {\n     Tenant tenant = new Tenant(\"testTenant\", 2);",
    "output": "Disable intermittently failing test"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/HayesTest.java\n@@ -0,0 +1,60 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.acyclicvisitor;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.iluwatar.acyclicvisitor.ConfigureForDosVisitor;\n+import com.iluwatar.acyclicvisitor.ConfigureForUnixVisitor;\n+import com.iluwatar.acyclicvisitor.Hayes;\n+import com.iluwatar.acyclicvisitor.HayesVisitor;\n+\n+/**\n+ * Hayes test class\n+ */\n+public class HayesTest {\n+\n+  @Test\n+  public void testAcceptForDos() {  \n+    Hayes hayes = new Hayes();\n+    ConfigureForDosVisitor mockVisitor = mock(ConfigureForDosVisitor.class);\n+    \n+    hayes.accept(mockVisitor);\n+    verify((HayesVisitor)mockVisitor).visit(eq(hayes));\n+  }\n+  \n+  @Test\n+  public void testAcceptForUnix() {    \n+    Hayes hayes = new Hayes();\n+    ConfigureForUnixVisitor mockVisitor = mock(ConfigureForUnixVisitor.class);\n+    \n+    hayes.accept(mockVisitor);\n+    \n+    verifyZeroInteractions(mockVisitor);\n+  }\n+}\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ZoomTest.java\n@@ -0,0 +1,59 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.acyclicvisitor;\n+\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.mock;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.iluwatar.acyclicvisitor.ConfigureForDosVisitor;\n+import com.iluwatar.acyclicvisitor.ConfigureForUnixVisitor;\n+import com.iluwatar.acyclicvisitor.Zoom;\n+import com.iluwatar.acyclicvisitor.ZoomVisitor;\n+\n+/**\n+ * Zoom test class\n+ */\n+public class ZoomTest {\n+  \n+  @Test\n+  public void testAcceptForDos() {  \n+    Zoom zoom = new Zoom();\n+    ConfigureForDosVisitor mockVisitor = mock(ConfigureForDosVisitor.class);\n+    \n+    zoom.accept(mockVisitor);\n+    verify((ZoomVisitor)mockVisitor).visit(eq(zoom));\n+  }\n+  \n+  @Test\n+  public void testAcceptForUnix() {\n+    Zoom zoom = new Zoom();\n+    ConfigureForUnixVisitor mockVisitor = mock(ConfigureForUnixVisitor.class);\n+    \n+    zoom.accept(mockVisitor);\n+    verify((ZoomVisitor)mockVisitor).visit(eq(zoom));\n+  }\n+}",
    "output": "Add HayesTest and ZoomTest"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java\n@@ -0,0 +1,66 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.acyclicvisitor;\n+\n+/**\n+ * The Acyclic Visitor pattern allows new \n+ * functions to be added to existing class \n+ * hierarchies without affecting those \n+ * hierarchies, and without creating the \n+ * dependency cycles that are inherent to \n+ * the GoF Visitor pattern, by making the \n+ * Visitor base class degenerate\n+ * <p>\n+ * In this example the visitor base\n+ * class is {@link ModemVisitor}. \n+ * The base class of the visited \n+ * hierarchy is {@link Modem} and \n+ * has two children {@link Hayes} \n+ * and {@link Zoom} each one having\n+ * its own visitor interface {@link Hayes}\n+ * and {@link ZoomVisitor} respectively.\n+ * {@link ConfigureForUnixVisitor} and \n+ * {@link ConfigureForDosVisitor} implement\n+ * each derivative's visit method\n+ * only if it is required \n+ */\n+\n+public class App {\n+  \n+  /**\n+   * Program's entry point\n+   */\n+  \n+  public static void main(String[] args) {  \n+    ConfigureForUnixVisitor conUnix = new ConfigureForUnixVisitor();\n+    ConfigureForDosVisitor conDos = new ConfigureForDosVisitor();\n+    \n+    Zoom zoom = new Zoom();\n+    Hayes hayes = new Hayes();\n+    \n+    hayes.accept(conDos); // Hayes modem with Unix configurator\n+    zoom.accept(conDos); // Zoom modem with Dos configurator\n+    hayes.accept(conUnix); // Hayes modem with Unix configurator\n+    zoom.accept(conUnix); // Zoom modem with Unix configurator   \n+  }\n+}\n\ndiff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/AppTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/AppTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/AppTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/AppTest.java\n@@ -0,0 +1,39 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.acyclicvisitor;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.iluwatar.acyclicvisitor.App;\n+\n+/**\n+ * Tests that the Acyclic Visitor example runs without errors.\n+ */\n+public class AppTest {\n+  \n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);  \n+  }\n+}\n\\ No newline at end of file",
    "output": "Add App class"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n@@ -0,0 +1,62 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.acyclicvisitor;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hayes class implements its\n+ * accept method\n+ */\n+\n+public class Hayes extends Modem {\n+  \n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n+\n+  public Hayes() {\n+\n+  }\n+\n+  /**\n+   * Accept visitor\n+   */\n+  @Override\n+  public void accept(ModemVisitor modemVisitor) {\n+    try {\n+      ((HayesVisitor) modemVisitor).visit(this);\n+    } catch (ClassCastException e) {\n+      LOGGER.error(\"Unable to cast to HayesVisitor\");\n+    }\n+\n+  }\n+  \n+  /**\n+   * Hayes' modem's toString\n+   * method\n+   */\n+  @Override\n+  public String toString() {\n+    return \"Hayes modem\";\n+  }\n+}\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n@@ -0,0 +1,61 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.acyclicvisitor;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Zoom class implements its\n+ * accept method\n+ */\n+\n+public class Zoom extends Modem {\n+  \n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n+\n+  public Zoom() {\n+    \n+  }\n+\n+  /**\n+   * Accept visitor\n+   */\n+  @Override\n+  public void accept(ModemVisitor modemVisitor) {\n+    try {\n+      ((ZoomVisitor) modemVisitor).visit(this);\n+    } catch (ClassCastException e) {\n+      LOGGER.error(\"Unable to cast to ZoomVisitor\");\n+    }\n+  }\n+  \n+  /**\n+   * Zoom modem's toString\n+   * method\n+   */\n+  @Override\n+  public String toString() {\n+    return \"Zoom modem\";\n+  }\n+}",
    "output": "Add Hayes and Zoom classes"
  },
  {
    "input": "diff --git a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n--- a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n@@ -22,29 +22,27 @@\n  */\n package com.iluwatar.throttling;\n \n-import com.iluwatar.throttling.timer.ThrottleTimerImpl;\n import com.iluwatar.throttling.timer.Throttler;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n /**\n  * B2BServiceTest class to test the B2BService\n  */\n public class B2BServiceTest {\n \n-  @Disabled\n   @Test\n   public void dummyCustomerApiTest() {\n     Tenant tenant = new Tenant(\"testTenant\", 2);\n-    Throttler timer = new ThrottleTimerImpl(100);\n+    // In order to assure that throttling limits will not be reset, we use an empty throttling implementation\n+    Throttler timer = () -> {};\n     B2BService service = new B2BService(timer);\n \n     for (int i = 0; i < 5; i++) {\n       service.dummyCustomerApi(tenant);\n     }\n     long counter = CallsCount.getCount(tenant.getName());\n-    assertTrue(counter == 2, \"Counter limit must be reached\");\n+    assertEquals(2, counter, \"Counter limit must be reached\");\n   }\n }",
    "output": "Fix flaky tests for throttling pattern"
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n@@ -57,7 +57,7 @@ public void run() {\n     executorService.scheduleAtFixedRate(new Runnable() {\n       @Override\n       public void run() {\n-        World world = World.getInstance();\n+        World world = new World();\n         List<String> countries = world.fetch();\n         System.out.println(\"Our world currently has the following countries:-\");\n         for (String country : countries) {\n\ndiff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/DataFetcher.java\n@@ -15,23 +15,11 @@\n  */\n public class DataFetcher {\n \n-  private static DataFetcher df;\n   private final String filename = \"world.txt\";\n-  private long lastFetched = -1;\n+  private long lastFetched;\n \n-  private DataFetcher() {\n-  }\n-\n-  /**\n-   * Init.\n-   * \n-   * @return DataFetcher instance\n-   */\n-  public static DataFetcher getInstance() {\n-    if (df == null) {\n-      df = new DataFetcher();\n-    }\n-    return df;\n+  public DataFetcher() {\n+    this.lastFetched = -1;\n   }\n \n   private boolean isDirty(long fileLastModified) {\n@@ -66,6 +54,6 @@ public List<String> fetch() {\n       return data;\n     }\n \n-    return null;\n+    return new ArrayList<String>();\n   }\n }\n\ndiff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/World.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/World.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/World.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/World.java\n@@ -12,22 +12,12 @@\n  */\n public class World {\n \n-  private static World world;\n-  private static List<String> countries = new ArrayList<String>();\n+  private List<String> countries;\n+  private DataFetcher df;\n \n-  private World() {\n-  }\n-\n-  /**\n-   * Init.\n-   * \n-   * @return World instance\n-   */\n-  public static World getInstance() {\n-    if (world == null) {\n-      world = new World();\n-    }\n-    return world;\n+  public World() {\n+    this.countries = new ArrayList<String>();\n+    this.df = new DataFetcher();\n   }\n \n   /**\n@@ -37,10 +27,9 @@ public static World getInstance() {\n    * @return List of strings\n    */\n   public List<String> fetch() {\n-    DataFetcher df = DataFetcher.getInstance();\n     List<String> data = df.fetch();\n \n-    countries = data == null ? countries : data;\n+    countries = data.isEmpty() ? countries : data;\n \n     return countries;\n   }\n\ndiff --git a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n--- a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n+++ b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n@@ -24,10 +24,8 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.lang.reflect.Field;\n import java.util.List;\n \n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import com.iluwatar.dirtyflag.DataFetcher;\n@@ -39,23 +37,16 @@\n  */\n public class DirtyFlagTest {\n \n-  @BeforeEach\n-  public void reset() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {\n-    Field instance = DataFetcher.class.getDeclaredField(\"df\");\n-    instance.setAccessible(true);\n-    instance.set(null, null);\n-  }\n-\n   @Test\n   public void testIsDirty() {\n-    DataFetcher df = DataFetcher.getInstance();\n+    DataFetcher df = new DataFetcher();\n     List<String> countries = df.fetch();\n     assertTrue(!countries.isEmpty());\n   }\n \n   @Test\n   public void testIsNotDirty() {\n-    DataFetcher df = DataFetcher.getInstance();\n+    DataFetcher df = new DataFetcher();\n     df.fetch();\n     List<String> countries = df.fetch();\n     assertTrue(countries == null);",
    "output": "Fix based on code review feedback"
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/Converter.java b/converter/src/main/java/com/iluwatar/converter/Converter.java\n--- a/converter/src/main/java/com/iluwatar/converter/Converter.java\n+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java\n@@ -50,37 +50,37 @@ public Converter(final Function<T, U> fromDto, final Function<U, T> fromEntity)\n   }\n \n   /**\n-   * @param userDto DTO entity\n+   * @param dto DTO entity\n    * @return The domain representation - the result of the converting function application on dto entity.\n    */\n-  public final U convertFromDto(final T userDto) {\n-    return fromDto.apply(userDto);\n+  public final U convertFromDto(final T dto) {\n+    return fromDto.apply(dto);\n   }\n \n   /**\n-   * @param user domain entity\n+   * @param entity domain entity\n    * @return The DTO representation - the result of the converting function application on domain entity.\n    */\n-  public final T convertFromEntity(final U user) {\n-    return fromEntity.apply(user);\n+  public final T convertFromEntity(final U entity) {\n+    return fromEntity.apply(entity);\n   }\n \n   /**\n-   * @param dtoUsers collection of DTO entities\n+   * @param dtos collection of DTO entities\n    * @return List of domain representation of provided entities retrieved by\n    *        mapping each of them with the conversion function\n    */\n-  public final List<U> createFromDtos(final Collection<T> dtoUsers) {\n-    return dtoUsers.stream().map(this::convertFromDto).collect(Collectors.toList());\n+  public final List<U> createFromDtos(final Collection<T> dtos) {\n+    return dtos.stream().map(this::convertFromDto).collect(Collectors.toList());\n   }\n \n   /**\n-   * @param users collection of domain entities\n+   * @param entities collection of domain entities\n    * @return List of domain representation of provided entities retrieved by\n    *        mapping each of them with the conversion function\n    */\n-  public final List<T> createFromEntities(final Collection<U> users) {\n-    return users.stream().map(this::convertFromEntity).collect(Collectors.toList());\n+  public final List<T> createFromEntities(final Collection<U> entities) {\n+    return entities.stream().map(this::convertFromEntity).collect(Collectors.toList());\n   }\n \n }",
    "output": "Parameters in Converter class methods was renamed. A base class must not contain the concrete entities names or concrete class names"
  },
  {
    "input": "diff --git a/eip-message-channel/src/main/java/com/iluwatar/eip/message/channel/App.java b/eip-message-channel/src/main/java/com/iluwatar/eip/message/channel/App.java\n--- a/eip-message-channel/src/main/java/com/iluwatar/eip/message/channel/App.java\n+++ b/eip-message-channel/src/main/java/com/iluwatar/eip/message/channel/App.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.message.channel;\n+package com.iluwatar.eip.message.channel;\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.builder.RouteBuilder;\n\ndiff --git a/eip-message-channel/src/test/java/com/iluwatar/eip/message/channel/AppTest.java b/eip-message-channel/src/test/java/com/iluwatar/eip/message/channel/AppTest.java\n--- a/eip-message-channel/src/test/java/com/iluwatar/eip/message/channel/AppTest.java\n+++ b/eip-message-channel/src/test/java/com/iluwatar/eip/message/channel/AppTest.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.publish.subscribe;\n+package com.iluwatar.eip.message.channel;\n \n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/eip-publish-subscribe/src/main/java/com/iluwatar/eip/publish/subscribe/App.java b/eip-publish-subscribe/src/main/java/com/iluwatar/eip/publish/subscribe/App.java\n--- a/eip-publish-subscribe/src/main/java/com/iluwatar/eip/publish/subscribe/App.java\n+++ b/eip-publish-subscribe/src/main/java/com/iluwatar/eip/publish/subscribe/App.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.publish.subscribe;\n+package com.iluwatar.eip.publish.subscribe;\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.ProducerTemplate;\n\ndiff --git a/eip-publish-subscribe/src/test/java/com/iluwatar/eip/publish/subscribe/AppTest.java b/eip-publish-subscribe/src/test/java/com/iluwatar/eip/publish/subscribe/AppTest.java\n--- a/eip-publish-subscribe/src/test/java/com/iluwatar/eip/publish/subscribe/AppTest.java\n+++ b/eip-publish-subscribe/src/test/java/com/iluwatar/eip/publish/subscribe/AppTest.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.message.channel;\n+package com.iluwatar.eip.publish.subscribe;\n \n import org.junit.jupiter.api.Test;\n ",
    "output": "Consistent naming for EIP patterns"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n@@ -84,11 +84,8 @@ public NioReactor(Dispatcher dispatcher) throws IOException {\n \n   /**\n    * Starts the reactor event loop in a new thread.\n-   * \n-   * @throws IOException\n-   *           if any I/O error occurs.\n    */\n-  public void start() throws IOException {\n+  public void start() {\n     reactorMain.execute(() -> {\n       try {\n         LOGGER.info(\"Reactor started, waiting for events...\");\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java\n@@ -98,9 +98,9 @@ public ByteBuffer read(SelectionKey key) throws IOException {\n    */\n   @Override\n   public void bind() throws IOException {\n-    ((ServerSocketChannel) getJavaChannel()).socket().bind(\n+    getJavaChannel().socket().bind(\n         new InetSocketAddress(InetAddress.getLocalHost(), port));\n-    ((ServerSocketChannel) getJavaChannel()).configureBlocking(false);\n+    getJavaChannel().configureBlocking(false);\n     LOGGER.info(\"Bound TCP socket at port: {}\", port);\n   }\n ",
    "output": "Cleanup unnecessary code"
  },
  {
    "input": "diff --git a/serverless/src/test/java/com/illuwatar/serverless/baas/api/FindPersonApiHandlerTest.java b/serverless/src/test/java/com/illuwatar/serverless/baas/api/FindPersonApiHandlerTest.java\n--- a/serverless/src/test/java/com/illuwatar/serverless/baas/api/FindPersonApiHandlerTest.java\n+++ b/serverless/src/test/java/com/illuwatar/serverless/baas/api/FindPersonApiHandlerTest.java\n@@ -1,50 +0,0 @@\n-package com.illuwatar.serverless.baas.api;\n-\n-import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;\n-import com.amazonaws.services.lambda.runtime.Context;\n-import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\n-import com.iluwatar.serverless.baas.api.FindPersonApiHandler;\n-import com.iluwatar.serverless.baas.api.SavePersonApiHandler;\n-import com.iluwatar.serverless.baas.model.Person;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n-\n-import java.util.Collections;\n-\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-\n-/**\n- * Unit tests for FindPersonApiHandler\n- * Created by dheeraj.mummar on 3/5/18.\n- */\n-@RunWith(MockitoJUnitRunner.class)\n-public class FindPersonApiHandlerTest {\n-\n-  private FindPersonApiHandler findPersonApiHandler;\n-\n-  @Mock\n-  private DynamoDBMapper dynamoDbMapper;\n-\n-  @Before\n-  public void setUp() {\n-    this.findPersonApiHandler = new FindPersonApiHandler();\n-    this.findPersonApiHandler.setDynamoDbMapper(dynamoDbMapper);\n-  }\n-\n-  @Test\n-  public void handleRequest() {\n-    findPersonApiHandler.handleRequest(apiGatewayProxyRequestEvent(), mock(Context.class));\n-    verify(dynamoDbMapper, times(1)).load(Person.class, \"37e7a1fe-3544-473d-b764-18128f02d72d\");\n-  }\n-\n-  private APIGatewayProxyRequestEvent apiGatewayProxyRequestEvent() {\n-    return new APIGatewayProxyRequestEvent()\n-        .withPathParamters(Collections\n-            .singletonMap(\"id\", \"37e7a1fe-3544-473d-b764-18128f02d72d\"));\n-  }\n-}\n\ndiff --git a/serverless/src/test/java/com/illuwatar/serverless/baas/api/SavePersonApiHandlerTest.java b/serverless/src/test/java/com/illuwatar/serverless/baas/api/SavePersonApiHandlerTest.java\n--- a/serverless/src/test/java/com/illuwatar/serverless/baas/api/SavePersonApiHandlerTest.java\n+++ b/serverless/src/test/java/com/illuwatar/serverless/baas/api/SavePersonApiHandlerTest.java\n@@ -1,79 +0,0 @@\n-package com.illuwatar.serverless.baas.api;\n-\n-import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;\n-import com.amazonaws.services.lambda.runtime.Context;\n-import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\n-import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.iluwatar.serverless.baas.api.SavePersonApiHandler;\n-import com.iluwatar.serverless.baas.model.Address;\n-import com.iluwatar.serverless.baas.model.Person;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n-\n-import static org.mockito.Mockito.*;\n-\n-/**\n- * Unit tests for SavePersonApiHandler\n- * Created by dheeraj.mummar on 3/4/18.\n- */\n-@RunWith(MockitoJUnitRunner.class)\n-public class SavePersonApiHandlerTest {\n-\n-  private SavePersonApiHandler savePersonApiHandler;\n-\n-  @Mock\n-  private DynamoDBMapper dynamoDbMapper;\n-\n-  private ObjectMapper objectMapper = new ObjectMapper();\n-\n-  @Before\n-  public void setUp() {\n-    this.savePersonApiHandler = new SavePersonApiHandler();\n-    this.savePersonApiHandler.setDynamoDbMapper(dynamoDbMapper);\n-  }\n-\n-  @Test\n-  public void handleRequestSavePersonSuccessful() throws JsonProcessingException {\n-    Person person = newPerson();\n-    APIGatewayProxyResponseEvent apiGatewayProxyResponseEvent =\n-        this.savePersonApiHandler\n-            .handleRequest(apiGatewayProxyRequestEvent(objectMapper.writeValueAsString(person)), mock(Context.class));\n-    verify(dynamoDbMapper, times(1)).save(person);\n-    Assert.assertNotNull(apiGatewayProxyResponseEvent);\n-    Assert.assertEquals(new Integer(201), apiGatewayProxyResponseEvent.getStatusCode());\n-  }\n-\n-  @Test\n-  public void handleRequestSavePersonException() {\n-    APIGatewayProxyResponseEvent apiGatewayProxyResponseEvent =\n-        this.savePersonApiHandler\n-            .handleRequest(apiGatewayProxyRequestEvent(\"invalid sample request\"), mock(Context.class));\n-    Assert.assertNotNull(apiGatewayProxyResponseEvent);\n-    Assert.assertEquals(new Integer(400), apiGatewayProxyResponseEvent.getStatusCode());\n-  }\n-\n-  private APIGatewayProxyRequestEvent apiGatewayProxyRequestEvent(String body) {\n-    APIGatewayProxyRequestEvent apiGatewayProxyRequestEvent = new APIGatewayProxyRequestEvent();\n-    return apiGatewayProxyRequestEvent.withBody(body);\n-  }\n-\n-  private Person newPerson() {\n-    Person person = new Person();\n-    person.setFirstName(\"Thor\");\n-    person.setLastName(\"Odinson\");\n-    Address address = new Address();\n-    address.setAddressLineOne(\"1 Odin ln\");\n-    address.setCity(\"Asgard\");\n-    address.setState(\"country of the Gods\");\n-    address.setZipCode(\"00001\");\n-    person.setAddress(address);\n-\n-    return person;\n-  }\n-}",
    "output": "Delete the incorrect package"
  },
  {
    "input": "diff --git a/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java\n--- a/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java\n+++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java\n@@ -22,6 +22,7 @@\n  */\n package com.iluwatar.balking;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.ExecutorService;\n@@ -37,6 +38,7 @@ public class WashingMachineTest {\n \n   private volatile WashingMachineState machineStateGlobal;\n \n+  @Disabled\n   @Test\n   public void wash() throws Exception {\n     WashingMachine washingMachine = new WashingMachine();\n\ndiff --git a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n--- a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n@@ -24,6 +24,7 @@\n \n import com.iluwatar.throttling.timer.ThrottleTimerImpl;\n import com.iluwatar.throttling.timer.Throttler;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,7 +33,8 @@\n  * B2BServiceTest class to test the B2BService\n  */\n public class B2BServiceTest {\n-  \n+\n+  @Disabled\n   @Test\n   public void dummyCustomerApiTest() {\n     Tenant tenant = new Tenant(\"testTenant\", 2);",
    "output": "Disable flaky tests mentioned in and"
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/multiton/App.java b/multiton/src/main/java/com/iluwatar/multiton/App.java\n--- a/multiton/src/main/java/com/iluwatar/multiton/App.java\n+++ b/multiton/src/main/java/com/iluwatar/multiton/App.java\n@@ -31,9 +31,12 @@\n  * pattern defines many globally accessible objects. The client asks for the correct instance from\n  * the Multiton by passing an enumeration as parameter.\n  * <p>\n- * In this example {@link Nazgul} is the Multiton and we can ask single {@link Nazgul} from it using\n- * {@link NazgulName}. The {@link Nazgul}s are statically initialized and stored in concurrent hash\n- * map.\n+ * There is more than one way to implement the multiton design pattern. In the first example\n+ * {@link Nazgul} is the Multiton and we can ask single {@link Nazgul} from it using {@link NazgulName}.\n+ * The {@link Nazgul}s are statically initialized and stored in concurrent hash map.\n+ * <p>\n+ * In the enum implementation {@link NazgulEnum} is the multiton. It is static and mutable because\n+ * of the way java supports enums.\n  *\n  */\n public class App {\n@@ -46,6 +49,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n+    // eagerly initialized multiton\n     LOGGER.info(\"KHAMUL={}\", Nazgul.getInstance(NazgulName.KHAMUL));\n     LOGGER.info(\"MURAZOR={}\", Nazgul.getInstance(NazgulName.MURAZOR));\n     LOGGER.info(\"DWAR={}\", Nazgul.getInstance(NazgulName.DWAR));\n@@ -55,5 +59,16 @@ public static void main(String[] args) {\n     LOGGER.info(\"ADUNAPHEL={}\", Nazgul.getInstance(NazgulName.ADUNAPHEL));\n     LOGGER.info(\"REN={}\", Nazgul.getInstance(NazgulName.REN));\n     LOGGER.info(\"UVATHA={}\", Nazgul.getInstance(NazgulName.UVATHA));\n+    \n+    // enum multiton\n+    LOGGER.info(\"KHAMUL={}\", NazgulEnum.KHAMUL);\n+    LOGGER.info(\"MURAZOR={}\", NazgulEnum.MURAZOR);\n+    LOGGER.info(\"DWAR={}\", NazgulEnum.DWAR);\n+    LOGGER.info(\"JI_INDUR={}\", NazgulEnum.JI_INDUR);\n+    LOGGER.info(\"AKHORAHIL={}\", NazgulEnum.AKHORAHIL);\n+    LOGGER.info(\"HOARMURATH={}\", NazgulEnum.HOARMURATH);\n+    LOGGER.info(\"ADUNAPHEL={}\", NazgulEnum.ADUNAPHEL);\n+    LOGGER.info(\"REN={}\", NazgulEnum.REN);\n+    LOGGER.info(\"UVATHA={}\", NazgulEnum.UVATHA);\n   }\n }",
    "output": "Solution to . Implemented multiton with enum, added example to app.java, a test for the enum, and commented my code"
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java b/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java\n--- a/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java\n+++ b/multiton/src/main/java/com/iluwatar/multiton/NazgulEnum.java\n@@ -0,0 +1,33 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.multiton;\n+\n+/**\n+ * enum based multiton implementation\n+ *\n+ */\n+public enum NazgulEnum {\n+  \n+  KHAMUL, MURAZOR, DWAR, JI_INDUR, AKHORAHIL, HOARMURATH, ADUNAPHEL, REN, UVATHA;\n+\n+}\n\ndiff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java\n@@ -0,0 +1,50 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.multiton;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * @author anthony\n+ *\n+ */\n+class NazgulEnumTest {\n+\n+  /**\n+   * Check that multiple calls to any one of the instances in the multiton returns \n+   * only that one particular instance, and do that for all instances in multiton\n+   */\n+  @Test\n+  public void testTheSameObjectIsReturnedWithMultipleCalls() {\n+    for (int i = 0; i < NazgulEnum.values().length; i++) {\n+      NazgulEnum instance1 = NazgulEnum.values()[i];\n+      NazgulEnum instance2 = NazgulEnum.values()[i];\n+      NazgulEnum instance3 = NazgulEnum.values()[i];\n+      assertSame(instance1, instance2);\n+      assertSame(instance1, instance3);\n+      assertSame(instance2, instance3);\n+    }\n+  }\n+}",
    "output": "Solution to . Implemented multiton with enum, added example to app.java, a test for the enum, and commented my code"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/Captain.java b/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n@@ -40,7 +40,6 @@ public void setRowingBoat(RowingBoat rowingBoat) {\n     this.rowingBoat = rowingBoat;\n   }\n \n-  @Override\n   public void row() {\n     rowingBoat.row();\n   }",
    "output": "Forgot to delete row's @Override\nMy bad, sorry. It should compile now."
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/Captain.java b/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n@@ -26,7 +26,7 @@\n  * The Captain uses {@link RowingBoat} to sail. <br>\n  * This is the client in the pattern.\n  */\n-public class Captain implements RowingBoat {\n+public class Captain {\n \n   private RowingBoat rowingBoat;\n ",
    "output": "Captain is implementing RowingBoat - Adapter pattern\nCaptain and RowingBoat aren't interchangable.\nCaptain, as a client, may have a method to use the boat, but it isn't needed that they share the same interface, as it makes the code more confusing."
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n@@ -27,9 +27,6 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  *\n  * This application demonstrates the <b>Dirty Flag</b> pattern. The dirty flag behavioral pattern allows you to avoid\n@@ -51,9 +48,6 @@\n  * when needed. {@link World} mainly serves the data to the front-end.\n  */\n public class App {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n-\n   /**\n    * Program execution point\n    */",
    "output": "Remove unused var"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n@@ -2,83 +2,84 @@\n \n import java.util.stream.Stream;\n \n-/**<p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>\n+/**\n+ * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>\n  * <p>When get is called on the returned Trampoline, internally it will iterate calling ‘jump’\n- on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},\n- stopping once the returned instance is {@link #done(Object)}.</p>\n- <p>Essential we convert looping via recursion into iteration,\n- the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>\n-*/\n-\n-public interface Trampoline<T>  {\n-    T get();\n-\n-\n-    /**\n-     * @return next stage\n-     */\n-    default Trampoline<T> jump() {\n-        return this;\n-    }\n-\n-\n-    default T result() {\n-        return get();\n-    }\n-\n-    /**\n-     * @return true if complete\n-     *\n-     */\n-    default boolean complete() {\n-        return true;\n-    }\n-\n-    /**\n-     * Created a completed Trampoline\n-     *\n-     * @param result Completed result\n-     * @return Completed Trampoline\n-     */\n-    static <T> Trampoline<T> done(final T result) {\n-        return () -> result;\n-    }\n-\n-\n-    /**\n-     * Create a Trampoline that has more work to do\n-     *\n-     * @param trampoline Next stage in Trampoline\n-     * @return Trampoline with more work\n-     */\n-    static <T> Trampoline<T> more(final Trampoline<Trampoline<T>> trampoline) {\n-        return new Trampoline<T>() {\n-            @Override\n-            public boolean complete() {\n-                return false;\n-            }\n-\n-            @Override\n-            public Trampoline<T> jump() {\n-                return trampoline.result();\n-            }\n-\n-            @Override\n-            public T get() {\n-                return trampoline(this);\n-            }\n-\n-            T trampoline(final Trampoline<T> trampoline) {\n-\n-                return Stream.iterate(trampoline, Trampoline::jump)\n-                        .filter(Trampoline::complete)\n-                        .findFirst()\n-                        .get()\n-                        .result();\n-\n-            }\n-        };\n-    }\n+ * on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},\n+ * stopping once the returned instance is {@link #done(Object)}.</p>\n+ * <p>Essential we convert looping via recursion into iteration,\n+ * the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>\n+ *\n+ * @param <T> is  type for returning result.\n+ */\n+public interface Trampoline<T> {\n+  T get();\n+\n+\n+  /**\n+   * @return next stage\n+   */\n+  default Trampoline<T> jump() {\n+    return this;\n+  }\n+\n+\n+  default T result() {\n+    return get();\n+  }\n+\n+  /**\n+   * @return true if complete\n+   */\n+  default boolean complete() {\n+    return true;\n+  }\n+\n+  /**\n+   * Created a completed Trampoline\n+   *\n+   * @param result Completed result\n+   * @return Completed Trampoline\n+   */\n+  static <T> Trampoline<T> done(final T result) {\n+    return () -> result;\n+  }\n+\n+\n+  /**\n+   * Create a Trampoline that has more work to do\n+   *\n+   * @param trampoline Next stage in Trampoline\n+   * @return Trampoline with more work\n+   */\n+  static <T> Trampoline<T> more(final Trampoline<Trampoline<T>> trampoline) {\n+    return new Trampoline<T>() {\n+      @Override\n+      public boolean complete() {\n+        return false;\n+      }\n+\n+      @Override\n+      public Trampoline<T> jump() {\n+        return trampoline.result();\n+      }\n+\n+      @Override\n+      public T get() {\n+        return trampoline(this);\n+      }\n+\n+      T trampoline(final Trampoline<T> trampoline) {\n+\n+        return Stream.iterate(trampoline, Trampoline::jump)\n+            .filter(Trampoline::complete)\n+            .findFirst()\n+            .get()\n+            .result();\n+\n+      }\n+    };\n+  }\n \n \n }\n\ndiff --git a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n@@ -31,24 +31,28 @@\n  * <p>it is possible to implement algorithms recursively in Java without blowing the stack\n  * and to interleave the execution of functions without hard coding them together or even using threads.</p>\n  */\n-\n @Slf4j\n public class TrampolineApp {\n-    public static void main(String[] args) {\n-        log.info(\"start pattern\");\n-        Integer result = loop(10, 1).result();\n-        log.info(\"result {}\", result);\n-\n-    }\n \n-    /**\n-     * Manager for pattern. Define it with a factorial function.\n-     * */\n-    public static Trampoline<Integer> loop(int times, int prod) {\n-        if (times == 0)\n-            return Trampoline.done(prod);\n-        else\n-            return Trampoline.more(() -> loop(times - 1, prod * times));\n+  /**\n+   * Main program for showing pattern. It does loop with factorial function.\n+   * */\n+  public static void main(String[] args) {\n+    log.info(\"start pattern\");\n+    Integer result = loop(10, 1).result();\n+    log.info(\"result {}\", result);\n+\n+  }\n+\n+  /**\n+   * Manager for pattern. Define it with a factorial function.\n+   */\n+  public static Trampoline<Integer> loop(int times, int prod) {\n+    if (times == 0) {\n+      return Trampoline.done(prod);\n+    } else {\n+      return Trampoline.more(() -> loop(times - 1, prod * times));\n     }\n+  }\n \n }\n\ndiff --git a/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n--- a/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n+++ b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n@@ -6,13 +6,17 @@\n \n import static org.junit.Assert.*;\n \n+\n+/**\n+ * Test for trampoline pattern.\n+ * */\n public class TrampolineAppTest {\n \n \n-    @Test\n-    public void testTrampolineWithFactorialFunction()throws IOException{\n-        int result = TrampolineApp.loop(10, 1).result();\n-        assertEquals(\"Be equal\",3628800,result);\n-    }\n+  @Test\n+  public void testTrampolineWithFactorialFunction() throws IOException {\n+    int result = TrampolineApp.loop(10, 1).result();\n+    assertEquals(\"Be equal\", 3628800, result);\n+  }\n \n }\n\\ No newline at end of file",
    "output": "Fix checkstyle errors"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java\n@@ -2,13 +2,13 @@\n \n import java.util.stream.Stream;\n \n-/**When get is called on the returned Trampoline, internally it will iterate calling ‘jump’\n- on the returned Trampoline as long as the concrete instance returned is More,\n- stopping once the returned instance is Done. Essential we convert looping via recursion into iteration,\n- the key enabling mechanism is the fact that Trampoline.more is a lazy operation.\n- Trampoline in cyclops-react extends java.util.Supplier. Calling Trampoline.more we are basically creating\n- a Supplier that defers the actual recursive call, and having defered the call we can move it outside of the recursive loop.\n- This means we can define algorithms recursively in Java but execute them iteratively.*/\n+/**<p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>\n+ * <p>When get is called on the returned Trampoline, internally it will iterate calling ‘jump’\n+ on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},\n+ stopping once the returned instance is {@link #done(Object)}.</p>\n+ <p>Essential we convert looping via recursion into iteration,\n+ the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>\n+*/\n \n public interface Trampoline<T>  {\n     T get();\n\ndiff --git a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n@@ -1,17 +1,17 @@\n /**\n  * The MIT License\n  * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -27,41 +27,28 @@\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * <div>\n- * By representing a computation in one of 2 states\n- (completed with result, or a reference to the reminder of the computation,\n- something like the way a java.util.Supplier does)\n- it is possible to implement algorithms recursively in Java without blowing the stack\n- and to interleave the execution of functions without hard coding them together or even using threads.\n- </div>\n- <div>\n- Trampoline has 2 state : [done], [ more]\n- </div>\n- When get is called on the returned Trampoline, internally it will iterate calling ‘jump’\n- on the returned Trampoline as long as the concrete instance returned is More,\n- stopping once the returned instance is Done. Essential we convert looping via recursion into iteration,\n- the key enabling mechanism is the fact that Trampoline.more is a lazy operation.\n- Trampoline in cyclops-react extends java.util.Supplier. Calling Trampoline.more we are basically creating\n- a Supplier that defers the actual recursive call, and having defered the call we can move it outside of the recursive loop.\n- This means we can define algorithms recursively in Java but execute them iteratively.\n+ * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>\n+ * <p>it is possible to implement algorithms recursively in Java without blowing the stack\n+ * and to interleave the execution of functions without hard coding them together or even using threads.</p>\n  */\n \n @Slf4j\n public class TrampolineApp {\n     public static void main(String[] args) {\n         log.info(\"start pattern\");\n         Integer result = loop(10, 1).result();\n-        log.info(\"result {}\" ,result);\n+        log.info(\"result {}\", result);\n \n     }\n+\n     /**\n-     * Manager for pattern.\n+     * Manager for pattern. Define it with a factorial function.\n      * */\n-    public static Trampoline<Integer> loop(int times,int prod){\n-        if(times==0)\n+    public static Trampoline<Integer> loop(int times, int prod) {\n+        if (times == 0)\n             return Trampoline.done(prod);\n         else\n-            return Trampoline.more(()->loop(times-1,prod*times));\n+            return Trampoline.more(() -> loop(times - 1, prod * times));\n     }\n \n }\n\ndiff --git a/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n--- a/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n+++ b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java\n@@ -8,8 +8,9 @@\n \n public class TrampolineAppTest {\n \n+\n     @Test\n-    public void test()throws IOException{\n+    public void testTrampolineWithFactorialFunction()throws IOException{\n         int result = TrampolineApp.loop(10, 1).result();\n         assertEquals(\"Be equal\",3628800,result);\n     }",
    "output": "Change fixing mistakes"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n@@ -56,7 +56,6 @@ public Author(String username, String name, String email) {\n   }\n \n   protected Author() {\n-    super();\n   }\n \n   public long getId() {\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n@@ -58,7 +58,6 @@ public Book(String title, double price, Author author) {\n   }\n \n   protected Book() {\n-    super();\n   }\n \n   public long getId() {\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java\n@@ -51,7 +51,6 @@ public Author(String name, String email, String username) {\n   }\n \n   public Author() {\n-    super();\n   }\n \n   public String getName() {\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java\n@@ -47,7 +47,6 @@ public Book(String title, double price) {\n   }\n \n   public Book() {\n-    super();\n   }\n \n   public String getTitle() {\n\ndiff --git a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java\n--- a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java\n+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/KingsHand.java\n@@ -30,7 +30,6 @@\n public class KingsHand extends EventEmitter implements EventObserver {\n \n   public KingsHand() {\n-    super();\n   }\n \n   public KingsHand(EventObserver obs) {\n\ndiff --git a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java\n--- a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java\n+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordBaelish.java\n@@ -30,7 +30,6 @@\n public class LordBaelish extends EventEmitter {\n \n   public LordBaelish() {\n-    super();\n   }\n \n   public LordBaelish(EventObserver obs) {\n\ndiff --git a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java\n--- a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java\n+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/LordVarys.java\n@@ -30,7 +30,6 @@\n public class LordVarys extends EventEmitter {\n \n   public LordVarys() {\n-    super();\n   }\n \n   public LordVarys(EventObserver obs) {\n\ndiff --git a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/Scout.java b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/Scout.java\n--- a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/Scout.java\n+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/Scout.java\n@@ -30,7 +30,6 @@\n public class Scout extends EventEmitter {\n \n   public Scout() {\n-    super();\n   }\n \n   public Scout(EventObserver obs) {",
    "output": "Remove redundant explicit super() constructor calls"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/App.java b/trampoline/src/main/java/com/iluwatar/trampoline/App.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/App.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/App.java\n@@ -0,0 +1,4 @@\n+package com.iluwatar.trampoline;\n+\n+public class App {\n+}",
    "output": "Init folder for pattern trampoline"
  },
  {
    "input": "diff --git a/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java\n--- a/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java\n+++ b/dao/src/test/java/com/iluwatar/dao/DbCustomerDaoTest.java\n@@ -185,17 +185,14 @@ public void updationShouldBeSuccessAndAccessingTheSameCustomerShouldReturnUpdate\n   public class ConnectivityIssue {\n     \n     private static final String EXCEPTION_CAUSE = \"Connection not available\";\n-    //@Rule public ExpectedException exception = ExpectedException.none();\n-    \n+\n     /**\n      * setup a connection failure scenario.\n      * @throws SQLException if any error occurs.\n      */\n     @BeforeEach\n     public void setUp() throws SQLException {\n       dao = new DbCustomerDao(mockedDatasource());\n-      //exception.expect(Exception.class);\n-     //exception.expectMessage(EXCEPTION_CAUSE);\n     }\n     \n     private DataSource mockedDatasource() throws SQLException {",
    "output": "Cleanup commented code"
  },
  {
    "input": "diff --git a/command/src/test/java/com/iluwatar/command/CommandTest.java b/command/src/test/java/com/iluwatar/command/CommandTest.java\n--- a/command/src/test/java/com/iluwatar/command/CommandTest.java\n+++ b/command/src/test/java/com/iluwatar/command/CommandTest.java\n@@ -81,13 +81,13 @@ public void testCommand() {\n    * @param goblin a goblin object whose state is to be verified against other parameters\n    * @param expectedName expectedName of the goblin\n    * @param expectedSize expected size of the goblin\n-   * @param expectedVisibilty exepcted visibility of the goblin\n+   * @param expectedVisibility expected visibility of the goblin\n    */\n   private void verifyGoblin(Goblin goblin, String expectedName, Size expectedSize,\n-      Visibility expectedVisibilty) {\n+      Visibility expectedVisibility) {\n     assertEquals(\"Goblin's name must be same as expectedName\", expectedName, goblin.toString());\n     assertEquals(\"Goblin's size must be same as expectedSize\", expectedSize, goblin.getSize());\n-    assertEquals(\"Goblin's visibility must be same as expectedVisibility\", expectedVisibilty,\n+    assertEquals(\"Goblin's visibility must be same as expectedVisibility\", expectedVisibility,\n         goblin.getVisibility());\n   }\n }",
    "output": "Fix typo\n'exepcted'->'expected'\n'expectedVisibilty'->'expectedVisibility'"
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n@@ -35,10 +35,10 @@\n \n public class LoadBalancer {\n   private static List<Server> servers = new ArrayList<>();\n-  private static int id;\n   private static int lastServedId;\n \n   static {\n+    int id = 0;\n     servers.add(new Server(\"localhost\", 8081, ++id));\n     servers.add(new Server(\"localhost\", 8080, ++id));\n     servers.add(new Server(\"localhost\", 8082, ++id));\n@@ -67,14 +67,12 @@ public static int getLastServedId() {\n   /**\n    * Handle request\n    */\n-  public void serverRequest(Request request) {\n+  public synchronized void serverRequest(Request request) {\n     if (lastServedId >= servers.size()) {\n       lastServedId = 0;\n     }\n     Server server = servers.get(lastServedId++);\n     server.serve(request);\n   }\n-\n-\n-\n+  \n }",
    "output": "Add synchronized keyword to method that reads from server poll"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -95,33 +95,32 @@ private void setArmy(final Army army) {\n     this.army = army;\n   }\n \n-  /**\n-   * The factory of kingdom factories.\n-   */\n   public static class FactoryMaker {\n-\t    \n-\tprivate FactoryMaker() {}\n-\t\n-\tpublic enum KingdomType {\n-\t  ELF,\n-\t  ORC\n-\t}\n-\t  \n-\tpublic static KingdomFactory makeFactory(KingdomType type) {\n-\n-\t  switch (type) {\n-\t\tcase ELF:\n-\t\t  return new ElfKingdomFactory();\n-\t\tcase ORC:\n-\t\t  return new OrcKingdomFactory();\n-\t\tdefault:\n-\t\t  throw new IllegalArgumentException(\"KingdomType not supported.\");\n-\t  }\n-\t}\n+\n+    private FactoryMaker() {\n+    }\n+\n+    public enum KingdomType {\n+      ELF, ORC\n+    }\n+\n+    /**\n+     * The factory of kingdom factories.\n+     */\n+    public static KingdomFactory makeFactory(KingdomType type) {\n+      switch (type) {\n+        case ELF:\n+          return new ElfKingdomFactory();\n+        case ORC:\n+          return new OrcKingdomFactory();\n+        default:\n+          throw new IllegalArgumentException(\"KingdomType not supported.\");\n+      }\n+    }\n   }\n-  \n+\n   /**\n-   * Program entry point\n+   * Program entry point.\n    * \n    * @param args\n    *          command line args\n\ndiff --git a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n--- a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n@@ -25,12 +25,12 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-\n import com.iluwatar.abstractfactory.App.FactoryMaker;\n import com.iluwatar.abstractfactory.App.FactoryMaker.KingdomType;\n \n+import org.junit.Before;\n+import org.junit.Test;\n+\n /**\n  * Test for abstract factory\n  */",
    "output": "Fix checkstyle validations"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -25,6 +25,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.iluwatar.abstractfactory.App.FactoryMaker.KingdomType;\n+\n /**\n  * \n  * The Abstract Factory pattern provides a way to encapsulate a group of individual factories that have a common theme\n@@ -56,7 +58,7 @@ public void createKingdom(final KingdomFactory factory) {\n     setCastle(factory.createCastle());\n     setArmy(factory.createArmy());\n   }\n-\n+  \n   King getKing(final KingdomFactory factory) {\n     return factory.createKing();\n   }\n@@ -92,6 +94,31 @@ public Army getArmy() {\n   private void setArmy(final Army army) {\n     this.army = army;\n   }\n+\n+  /**\n+   * The factory of kingdom factories.\n+   */\n+  public static class FactoryMaker {\n+\t    \n+\tprivate FactoryMaker() {}\n+\t\n+\tpublic enum KingdomType {\n+\t  ELF,\n+\t  ORC\n+\t}\n+\t  \n+\tpublic static KingdomFactory makeFactory(KingdomType type) {\n+\n+\t  switch (type) {\n+\t\tcase ELF:\n+\t\t  return new ElfKingdomFactory();\n+\t\tcase ORC:\n+\t\t  return new OrcKingdomFactory();\n+\t\tdefault:\n+\t\t  throw new IllegalArgumentException(\"KingdomType not supported.\");\n+\t  }\n+\t}\n+  }\n   \n   /**\n    * Program entry point\n@@ -104,17 +131,15 @@ public static void main(String[] args) {\n     App app = new App();\n \n     LOGGER.info(\"Elf Kingdom\");\n-    app.createKingdom(new ElfKingdomFactory());\n+    app.createKingdom(FactoryMaker.makeFactory(KingdomType.ELF));\n     LOGGER.info(app.getArmy().getDescription());\n     LOGGER.info(app.getCastle().getDescription());\n     LOGGER.info(app.getKing().getDescription());\n \n     LOGGER.info(\"Orc Kingdom\");\n-    app.createKingdom(new OrcKingdomFactory());\n+    app.createKingdom(FactoryMaker.makeFactory(KingdomType.ORC));\n     LOGGER.info(app.getArmy().getDescription());\n     LOGGER.info(app.getCastle().getDescription());\n     LOGGER.info(app.getKing().getDescription());\n-\n   }\n-\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n--- a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n@@ -28,6 +28,9 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import com.iluwatar.abstractfactory.App.FactoryMaker;\n+import com.iluwatar.abstractfactory.App.FactoryMaker.KingdomType;\n+\n /**\n  * Test for abstract factory\n  */\n@@ -39,8 +42,8 @@ public class AbstractFactoryTest {\n \n   @Before\n   public void setUp() {\n-    elfFactory = new ElfKingdomFactory();\n-    orcFactory = new OrcKingdomFactory();\n+    elfFactory = FactoryMaker.makeFactory(KingdomType.ELF);\n+    orcFactory = FactoryMaker.makeFactory(KingdomType.ORC);\n   }\n \n   @Test",
    "output": "Add factory of factories"
  },
  {
    "input": "diff --git a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n--- a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n+++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n@@ -1,7 +1,6 @@\n package com.iluwatar.eip.aggregator.routes;\n \n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.processor.aggregate.AggregationStrategy;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n ",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n--- a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n+++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n@@ -32,6 +32,8 @@ public class AggregatorRoute extends RouteBuilder {\n   @Override\n   public void configure() throws Exception {\n     // Main route\n-    from(\"{{entry}}\").aggregate(constant(true), aggregator).completionSize(3).completionInterval(2000).to(\"{{endpoint}}\");\n+    from(\"{{entry}}\").aggregate(constant(true), aggregator)\n+        .completionSize(3).completionInterval(2000)\n+        .to(\"{{endpoint}}\");\n   }\n }",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/App.java b/converter/src/main/java/com/iluwatar/converter/App.java\n--- a/converter/src/main/java/com/iluwatar/converter/App.java\n+++ b/converter/src/main/java/com/iluwatar/converter/App.java\n@@ -41,10 +41,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    Converter<UserDto, User> userConverter = new Converter<>(\n-        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive(),\n-          userDto.getEmail()),\n-        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive(), user.getUserId()));\n+    Converter<UserDto, User> userConverter = new UserConverter();\n \n     UserDto dtoUser = new UserDto(\"John\", \"Doe\", true, \"whatever[at]wherever.com\");\n     User user = userConverter.convertFromDto(dtoUser);",
    "output": "Use UserConverter instead of rewriting its ctor"
  },
  {
    "input": "diff --git a/eip-splitter/src/main/java/com/iluwatar/eip/splitter/App.java b/eip-splitter/src/main/java/com/iluwatar/eip/splitter/App.java\n--- a/eip-splitter/src/main/java/com/iluwatar/eip/splitter/App.java\n+++ b/eip-splitter/src/main/java/com/iluwatar/eip/splitter/App.java\n@@ -0,0 +1,45 @@\n+package com.iluwatar.eip.splitter;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+/**\n+ *\n+ * <p>\n+ * </p>\n+ */\n+@SpringBootApplication\n+public class App {\n+\n+  /**\n+   * Program entry point. It starts Spring Boot application and using Apache Camel it auto-configures routes.\n+   *\n+   * @param args command line args\n+   */\n+  public static void main(String[] args) throws Exception {\n+    // Run Spring Boot application and obtain ApplicationContext\n+    ConfigurableApplicationContext context = SpringApplication.run(App.class, args);\n+\n+    // Get CamelContext from ApplicationContext\n+    CamelContext camelContext = (CamelContext) context.getBean(\"camelContext\");\n+\n+    // Add a new routes that will handle endpoints form SplitterRoute class.\n+    camelContext.addRoutes(new RouteBuilder() {\n+\n+      @Override\n+      public void configure() throws Exception {\n+        from(\"{{endpoint}}\").log(\"ENDPOINT: ${body}\");\n+      }\n+\n+    });\n+\n+    // Add producer that will send test message to an entry point in WireTapRoute\n+    String[] stringArray = {\"Test item #1\", \"Test item #2\", \"Test item #3\"};\n+    camelContext.createProducerTemplate().sendBody(\"{{entry}}\", stringArray);\n+\n+    SpringApplication.exit(context);\n+  }\n+}\n\ndiff --git a/eip-splitter/src/main/java/com/iluwatar/eip/splitter/routes/SplitterRoute.java b/eip-splitter/src/main/java/com/iluwatar/eip/splitter/routes/SplitterRoute.java\n--- a/eip-splitter/src/main/java/com/iluwatar/eip/splitter/routes/SplitterRoute.java\n+++ b/eip-splitter/src/main/java/com/iluwatar/eip/splitter/routes/SplitterRoute.java\n@@ -0,0 +1,26 @@\n+package com.iluwatar.eip.splitter.routes;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Sample splitter route definition.\n+ *\n+ * <p>\n+ * </p>\n+ *\n+ * In this example input/output endpoints names are stored in <i>application.properties</i> file.\n+ */\n+@Component\n+public class SplitterRoute extends RouteBuilder {\n+\n+  /**\n+   * Configures the route\n+   * @throws Exception in case of exception during configuration\n+   */\n+  @Override\n+  public void configure() throws Exception {\n+    // Main route\n+    from(\"{{entry}}\").split().body().to(\"{{endpoint}}\");\n+  }\n+}\n\ndiff --git a/eip-splitter/src/test/java/com/iluwatar/eip/splitter/AppTest.java b/eip-splitter/src/test/java/com/iluwatar/eip/splitter/AppTest.java\n--- a/eip-splitter/src/test/java/com/iluwatar/eip/splitter/AppTest.java\n+++ b/eip-splitter/src/test/java/com/iluwatar/eip/splitter/AppTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.eip.splitter;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test for App class\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void testMain() throws Exception {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}\n\ndiff --git a/eip-splitter/src/test/java/com/iluwatar/eip/splitter/routes/SplitterRouteTest.java b/eip-splitter/src/test/java/com/iluwatar/eip/splitter/routes/SplitterRouteTest.java\n--- a/eip-splitter/src/test/java/com/iluwatar/eip/splitter/routes/SplitterRouteTest.java\n+++ b/eip-splitter/src/test/java/com/iluwatar/eip/splitter/routes/SplitterRouteTest.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar.eip.splitter.routes;\n+\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.Message;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.test.SpringApplicationConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class for <i>SplitterRoute</i>.\n+ * <p>\n+ * In order for it to work we have to mock endpoints we want to read/write to. To mock those we need to substitute\n+ * original endpoint names to mocks.\n+ * </p>\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringApplicationConfiguration(classes = SplitterRouteTest.class)\n+@ActiveProfiles(\"test\")\n+@EnableAutoConfiguration\n+@ComponentScan\n+public class SplitterRouteTest {\n+\n+  @EndpointInject(uri = \"{{entry}}\")\n+  private ProducerTemplate entry;\n+\n+  @EndpointInject(uri = \"{{endpoint}}\")\n+  private MockEndpoint endpoint;\n+\n+  /**\n+   * Test if endpoint receives three separate messages.\n+   * @throws Exception in case of en exception during the test\n+   */\n+  @Test\n+  @DirtiesContext\n+  public void testSplitter() throws Exception {\n+\n+    // Three items in one entry message\n+    entry.sendBody(new String[] {\"TEST1\", \"TEST2\", \"TEST3\"});\n+\n+    // Endpoint should have three different messages in the end order of the messages is not important\n+    endpoint.expectedMessageCount(3);\n+    endpoint.assertIsSatisfied();\n+  }\n+}",
    "output": "Add new pattern, tests"
  },
  {
    "input": "diff --git a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n--- a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n@@ -25,7 +25,7 @@ public class App {\n    *\n    * @param args command line args\n    */\n-  public static void main(String[] args) throws Exception{\n+  public static void main(String[] args) throws Exception {\n     // Run Spring Boot application and obtain ApplicationContext\n     ConfigurableApplicationContext context = SpringApplication.run(App.class, args);\n ",
    "output": "Fix CheckStyle issue"
  },
  {
    "input": "diff --git a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n--- a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n@@ -1,7 +1,10 @@\n package com.iluwatar.eip.wiretap;\n \n+import org.apache.camel.CamelContext;\n+import org.apache.camel.builder.RouteBuilder;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n /**\n  * In most integration cases there is a need to monitor the messages flowing through the system. It is usually achieved\n@@ -22,7 +25,27 @@ public class App {\n    *\n    * @param args command line args\n    */\n-  public static void main(String[] args) {\n-    SpringApplication.run(App.class, args);\n+  public static void main(String[] args) throws Exception{\n+    // Run Spring Boot application and obtain ApplicationContext\n+    ConfigurableApplicationContext context = SpringApplication.run(App.class, args);\n+\n+    // Get CamelContext from ApplicationContext\n+    CamelContext camelContext = (CamelContext) context.getBean(\"camelContext\");\n+\n+    // Add a new routes that will handle endpoints form WireTapRoute class.\n+    camelContext.addRoutes(new RouteBuilder() {\n+\n+      @Override\n+      public void configure() throws Exception {\n+        from(\"{{endpoint}}\").log(\"ENDPOINT: ${body}\");\n+        from(\"{{wireTapEndpoint}}\").log(\"WIRETAPPED ENDPOINT: ${body}\");\n+      }\n+\n+    });\n+\n+    // Add producer that will send test message to an entry point in WireTapRoute\n+    camelContext.createProducerTemplate().sendBody(\"{{entry}}\", \"Test message\");\n+\n+    SpringApplication.exit(context);\n   }\n }\n\ndiff --git a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java\n--- a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java\n+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java\n@@ -27,6 +27,6 @@ public void configure() throws Exception {\n     from(\"{{entry}}\").wireTap(\"direct:wireTap\").to(\"{{endpoint}}\");\n \n     // Wire tap route\n-    from(\"direct:wireTap\").to(\"{{wireTapEndpoint}}\");\n+    from(\"direct:wireTap\").log(\"Message: ${body}\").to(\"{{wireTapEndpoint}}\");\n   }\n }\n\ndiff --git a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n--- a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n+++ b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n@@ -8,7 +8,7 @@\n public class AppTest {\n \n   @Test\n-  public void testMain() {\n+  public void testMain() throws Exception {\n     String[] args = {};\n     App.main(args);\n   }",
    "output": "Test run, app shutdown, minor refactoring"
  },
  {
    "input": "diff --git a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n--- a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n+++ b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.eip.wiretap;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test for App class\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void testMain() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}\n\ndiff --git a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java\n--- a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java\n+++ b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java\n@@ -1,4 +1,4 @@\n-package com.iluwatar.eip.wiretap;\n+package com.iluwatar.eip.wiretap.routes;\n \n import org.apache.camel.EndpointInject;\n import org.apache.camel.Message;",
    "output": "Add test class for App"
  },
  {
    "input": "diff --git a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n--- a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n+++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n@@ -56,7 +56,7 @@ public static Collection<Object[]> data() {\n   /**\n    * The tested prototype instance\n    */\n-  private final Prototype testedPrototype;\n+  private final P testedPrototype;\n \n   /**\n    * The expected {@link Prototype#toString()} value\n@@ -69,7 +69,7 @@ public static Collection<Object[]> data() {\n    * @param testedPrototype  The tested prototype instance\n    * @param expectedToString The expected {@link Prototype#toString()} value\n    */\n-  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n+  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }",
    "output": "Fix unused generic type in PrototypeTest"
  },
  {
    "input": "diff --git a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n--- a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n@@ -95,7 +95,7 @@ public void testElfBlacksmithWithSpear() {\n    */\n   private void verifyWeapon(Weapon weapon, WeaponType expectedWeaponType, Class<?> clazz) {\n     assertTrue(\"Weapon must be an object of: \" + clazz.getName(), clazz.isInstance(weapon));\n-    assertEquals(\"Weapon must be of weaponType: \" + clazz.getName(), expectedWeaponType,\n+    assertEquals(\"Weapon must be of weaponType: \" + expectedWeaponType, expectedWeaponType,\n         weapon.getWeaponType());\n   }\n }",
    "output": "Fix test message"
  },
  {
    "input": "diff --git a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n--- a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar.eip.wiretap;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+/**\n+ * In most integration cases there is a need to monitor the messages flowing through the system. It is usually achieved\n+ * by intercepting the message and redirecting it to a different location like console, filesystem or the database.\n+ * It is important that such functionality should not modify the original message and influence the processing path.\n+ *\n+ * <p>\n+ * Wire Tap allows you to route messages to a separate location while they are being forwarded to the ultimate\n+ * destination. It basically consumes messages of the input channel and publishes the unmodified message to both\n+ * output channels.\n+ * </p>\n+ */\n+@SpringBootApplication\n+public class App {\n+\n+  /**\n+   * Program entry point. It starts Spring Boot application and using Apache Camel it auto-configures routes.\n+   *\n+   * @param args command line args\n+   */\n+  public static void main(String[] args) {\n+    SpringApplication.run(App.class, args);\n+  }\n+}\n\ndiff --git a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java\n--- a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java\n+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/routes/WireTapRoute.java\n@@ -0,0 +1,32 @@\n+package com.iluwatar.eip.wiretap.routes;\n+\n+import org.apache.camel.builder.RouteBuilder;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Sample wire tap route definition.\n+ *\n+ * <p>\n+ * It consumes messages out of the <i>direct:entry</i> entry point and forwards them to <i>direct:endpoint</i>.\n+ * Wire Tap intercepts the message and sends it to <i>direct:wireTap</i>, which in turn forwards it to\n+ * <i>direct:wireTapEndpoint</i>.\n+ * </p>\n+ *\n+ * In this example input/output endpoints names are stored in <i>application.properties</i> file.\n+ */\n+@Component\n+public class WireTapRoute extends RouteBuilder {\n+\n+  /**\n+   * Configures the route\n+   * @throws Exception in case of exception during configuration\n+   */\n+  @Override\n+  public void configure() throws Exception {\n+    // Main route\n+    from(\"{{entry}}\").wireTap(\"direct:wireTap\").to(\"{{endpoint}}\");\n+\n+    // Wire tap route\n+    from(\"direct:wireTap\").to(\"{{wireTapEndpoint}}\");\n+  }\n+}\n\ndiff --git a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/WireTapRouteTest.java b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/WireTapRouteTest.java\n--- a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/WireTapRouteTest.java\n+++ b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/WireTapRouteTest.java\n@@ -0,0 +1,62 @@\n+package com.iluwatar.eip.wiretap;\n+\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.Message;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.test.SpringApplicationConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class for <i>WireTapRoute</i>.\n+ * <p>\n+ * In order for it to work we have to mock endpoints we want to read/write to. To mock those we need to substitute\n+ * original endpoint names to mocks.\n+ * </p>\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@SpringApplicationConfiguration(classes = WireTapRouteTest.class)\n+@ActiveProfiles(\"test\")\n+@EnableAutoConfiguration\n+@ComponentScan\n+public class WireTapRouteTest {\n+\n+  @EndpointInject(uri = \"{{entry}}\")\n+  private ProducerTemplate entry;\n+\n+  @EndpointInject(uri = \"{{endpoint}}\")\n+  private MockEndpoint endpoint;\n+\n+  @EndpointInject(uri = \"{{wireTapEndpoint}}\")\n+  private MockEndpoint wireTapEndpoint;\n+\n+  /**\n+   * Test if both endpoints receive exactly one message containing the same, unchanged body.\n+   * @throws Exception in case of en exception during the test\n+   */\n+  @Test\n+  @DirtiesContext\n+  public void testWireTap() throws Exception {\n+    entry.sendBody(\"TEST\");\n+\n+    endpoint.expectedMessageCount(1);\n+    wireTapEndpoint.expectedMessageCount(1);\n+\n+    endpoint.assertIsSatisfied();\n+    wireTapEndpoint.assertIsSatisfied();\n+\n+    Message endpointIn = endpoint.getExchanges().get(0).getIn();\n+    Message wireTapEndpointIn = wireTapEndpoint.getExchanges().get(0).getIn();\n+\n+    assertEquals(\"TEST\", endpointIn.getBody());\n+    assertEquals(\"TEST\", wireTapEndpointIn.getBody());\n+  }\n+}",
    "output": "Wire Tap EIP implementation and tests"
  },
  {
    "input": "diff --git a/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java\n@@ -61,7 +61,7 @@ public static void incrementCount(String tenantName) {\n    * @param tenantName name of the tenant.\n    * @return the count of the tenant.\n    */\n-  public static Long getCount(String tenantName) {\n+  public static long getCount(String tenantName) {\n     return tenantCallsCount.get(tenantName).get();\n   }\n   \n\ndiff --git a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n--- a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n@@ -39,12 +39,10 @@ public void dummyCustomerApiTest() {\n     Throttler timer = new ThrottleTimerImpl(100);\n     B2BService service = new B2BService(timer);\n \n-    long counter = 0;\n     for (int i = 0; i < 5; i++) {\n       service.dummyCustomerApi(tenant);\n-      counter = CallsCount.getCount(tenant.getName());\n     }\n-    \n+    long counter = CallsCount.getCount(tenant.getName());\n     Assert.assertTrue(\"Counter limit must be reached\", counter == 2);\n   }\n }",
    "output": "Minor modification of Long to long"
  },
  {
    "input": "diff --git a/throttling/src/main/java/com/iluwatar/throttling/B2BService.java b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/B2BService.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java\n@@ -46,7 +46,7 @@ public B2BService(Throttler timer) {\n    */\n   public int dummyCustomerApi(Tenant tenant) {\n     String tenantName = tenant.getName();\n-    int count = CallsCount.getCount(tenantName);\n+    long count = CallsCount.getCount(tenantName);\n     LOGGER.debug(\"Counter for {} : {} \", tenant.getName(), count);\n     if (count >= tenant.getAllowedCallsPerSecond()) {\n       LOGGER.error(\"API access per second limit reached for: {}\", tenantName);\n\ndiff --git a/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java\n@@ -22,51 +22,56 @@\n  */\n package com.iluwatar.throttling;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * A class to keep track of the counter of different Tenants\n  * @author drastogi\n  *\n  */\n public final class CallsCount {\n-  private static Map<String, Integer> tenantCallsCount = new ConcurrentHashMap<>();\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);\n+  private static Map<String, AtomicLong> tenantCallsCount = new ConcurrentHashMap<>();\n \n   /**\n    * Add a new tenant to the map.\n    * @param tenantName name of the tenant.\n    */\n   public static void addTenant(String tenantName) {\n-    if (!tenantCallsCount.containsKey(tenantName)) {\n-      tenantCallsCount.put(tenantName, 0);\n-    }\n+    tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));\n   }\n   \n   /**\n    * Increment the count of the specified tenant.\n    * @param tenantName name of the tenant.\n    */\n   public static void incrementCount(String tenantName) {\n-    tenantCallsCount.put(tenantName, tenantCallsCount.get(tenantName) + 1);\n+    tenantCallsCount.get(tenantName).incrementAndGet();\n   }\n   \n   /**\n    * \n    * @param tenantName name of the tenant.\n    * @return the count of the tenant.\n    */\n-  public static int getCount(String tenantName) {\n-    return tenantCallsCount.get(tenantName);\n+  public static Long getCount(String tenantName) {\n+    return tenantCallsCount.get(tenantName).get();\n   }\n   \n   /**\n    * Resets the count of all the tenants in the map.\n    */\n   public static void reset() {\n-    for (Entry<String, Integer> e : tenantCallsCount.entrySet()) {\n-      tenantCallsCount.put(e.getKey(), 0);\n+    LOGGER.debug(\"Resetting the map.\");\n+    for (Entry<String, AtomicLong> e : tenantCallsCount.entrySet()) {\n+      tenantCallsCount.put(e.getKey(), new AtomicLong(0));\n     }\n   }\n }\n\ndiff --git a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n--- a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n@@ -36,14 +36,15 @@ public class B2BServiceTest {\n   @Test\n   public void dummyCustomerApiTest() {\n     Tenant tenant = new Tenant(\"testTenant\", 2);\n-    Throttler timer = new ThrottleTimerImpl(10);\n+    Throttler timer = new ThrottleTimerImpl(100);\n     B2BService service = new B2BService(timer);\n-    \n+\n+    long counter = 0;\n     for (int i = 0; i < 5; i++) {\n       service.dummyCustomerApi(tenant);\n+      counter = CallsCount.getCount(tenant.getName());\n     }\n     \n-    int counter = CallsCount.getCount(tenant.getName());\n     Assert.assertTrue(\"Counter limit must be reached\", counter == 2);\n   }\n }",
    "output": "Used AtomicLong for concurrenthashmap operations"
  },
  {
    "input": "diff --git a/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java\n--- a/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java\n+++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java\n@@ -44,15 +44,15 @@ protected final void testBasicWeaponActions(final Weapon weapon) {\n     assertNotNull(weapon.getEnchantment());\n \n     weapon.swing();\n-    verify(enchantment, times(1)).apply();\n+    verify(enchantment).apply();\n     verifyNoMoreInteractions(enchantment);\n \n     weapon.wield();\n-    verify(enchantment, times(1)).onActivate();\n+    verify(enchantment).onActivate();\n     verifyNoMoreInteractions(enchantment);\n \n     weapon.unwield();\n-    verify(enchantment, times(1)).onDeactivate();\n+    verify(enchantment).onDeactivate();\n     verifyNoMoreInteractions(enchantment);\n \n   }",
    "output": "Remove redundant times(1) params for verify()"
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/App.java b/partial-response/src/main/java/com/iluwatar/partialresponse/App.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/App.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/App.java\n@@ -52,8 +52,7 @@ public static void main(String[] args) throws Exception {\n     videos.put(1, new Video(1, \"Avatar\", 178, \"epic science fiction film\", \"James Cameron\", \"English\"));\n     videos.put(2, new Video(2, \"Godzilla Resurgence\", 120, \"Action & drama movie|\", \"Hideaki Anno\", \"Japanese\"));\n     videos.put(3, new Video(3, \"Interstellar\", 169, \"Adventure & Sci-Fi\", \"Christopher Nolan\", \"English\"));\n-    FieldJsonMapper fieldJsonMapper = new FieldJsonMapper();\n-    VideoResource videoResource = new VideoResource(fieldJsonMapper, videos);\n+    VideoResource videoResource = new VideoResource(new FieldJsonMapper(), videos);\n \n \n     LOGGER.info(\"Retrieving full response from server:-\");",
    "output": "- Partial Response : [Refactor] Inline object creation."
  },
  {
    "input": "diff --git a/unit-of-work/src/test/java/com/iluwatar/unitofwork/AppTest.java b/unit-of-work/src/test/java/com/iluwatar/unitofwork/AppTest.java\n--- a/unit-of-work/src/test/java/com/iluwatar/unitofwork/AppTest.java\n+++ b/unit-of-work/src/test/java/com/iluwatar/unitofwork/AppTest.java\n@@ -0,0 +1,40 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2014-2017 Piyush Chaudhari\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.unitofwork;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * AppTest\n+ */\n+public class AppTest {\n+  @Test\n+  public void test() throws IOException {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}",
    "output": "- Unit Of Work : Add AppTest"
  },
  {
    "input": "diff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/App.java\n@@ -28,9 +28,9 @@\n import java.util.List;\n \n /**\n- * {@link StudentManagementApp} Application for managing student data.\n+ * {@link App} Application for managing student data.\n  */\n-public class StudentManagementApp {\n+public class App {\n   /**\n    *\n    * @param args no argument sent",
    "output": "- Unit Of Work : [Refactor] Rename main class to App"
  },
  {
    "input": "diff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java\n@@ -28,9 +28,9 @@\n  * {@link Student} is an entity.\n  */\n public class Student {\n-  private Integer id;\n-  private String name;\n-  private String address;\n+  private final Integer id;\n+  private final String name;\n+  private final String address;\n \n   /**\n    * @param id      student unique id",
    "output": "- Unit Of Work : Make final instance variable of immutable Student class."
  },
  {
    "input": "diff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n@@ -30,9 +30,11 @@\n  * Application test\n  */\n public class AppTest {\n+\n   @Test\n-  public void test() throws Exception {\n+  public void main() throws Exception {\n     String[] args = {};\n     App.main(args);\n   }\n+\n }\n\\ No newline at end of file",
    "output": "- Partial Response : Modify AppTest."
  },
  {
    "input": "diff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/AppTest.java\n@@ -0,0 +1,38 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2014-2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.partialresponse;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Application test\n+ */\n+public class AppTest {\n+  @Test\n+  public void test() throws Exception {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}\n\\ No newline at end of file",
    "output": "- Partial Response : Modify intendation."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/App.java b/partial-response/src/main/java/com/iluwatar/partialresponse/App.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/App.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/App.java\n@@ -32,15 +32,15 @@\n \n /**\n  * The Partial response pattern is a design pattern in which client specifies fields to fetch to serve.\n- * Here {@link VideoClientApp} is playing as client for {@link VideoResource} server.\n+ * Here {@link App} is playing as client for {@link VideoResource} server.\n  * Client ask for specific fields information in video to server.\n  * <p>\n  * <p>\n  * {@link VideoResource} act as server to serve video information.\n  */\n \n-public class VideoClientApp {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(VideoClientApp.class);\n+public class App {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n \n   /**\n    * Method as act client and request to server for video details.",
    "output": "- Partial Response : [Refactor] Made Main class name as App for consistancy."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -29,12 +29,12 @@\n  * <p>\n  */\n public class Video {\n-  private Integer id;\n-  private String title;\n-  private Integer length;\n-  private String description;\n-  private String director;\n-  private String language;\n+  private final Integer id;\n+  private final String title;\n+  private final Integer length;\n+  private final String description;\n+  private final String director;\n+  private final String language;\n \n   /**\n    * @param id          video unique id",
    "output": "- Partial Response : Made final private variables in immutable class."
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/command/Size.java b/command/src/main/java/com/iluwatar/command/Size.java\n--- a/command/src/main/java/com/iluwatar/command/Size.java\n+++ b/command/src/main/java/com/iluwatar/command/Size.java\n@@ -29,7 +29,7 @@\n  */\r\n public enum Size {\r\n \r\n-  SMALL(\"small\"), NORMAL(\"normal\"), LARGE(\"large\"), UNDEFINED(\"\");\r\n+  SMALL(\"small\"), NORMAL(\"normal\");\r\n \r\n   private String title;\r\n \r\n\ndiff --git a/command/src/main/java/com/iluwatar/command/Visibility.java b/command/src/main/java/com/iluwatar/command/Visibility.java\n--- a/command/src/main/java/com/iluwatar/command/Visibility.java\n+++ b/command/src/main/java/com/iluwatar/command/Visibility.java\n@@ -29,7 +29,7 @@\n  */\r\n public enum Visibility {\r\n \r\n-  VISIBLE(\"visible\"), INVISIBLE(\"invisible\"), UNDEFINED(\"\");\r\n+  VISIBLE(\"visible\"), INVISIBLE(\"invisible\");\r\n \r\n   private String title;\r\n \r\n\ndiff --git a/command/src/main/java/com/iluwatar/command/Wizard.java b/command/src/main/java/com/iluwatar/command/Wizard.java\n--- a/command/src/main/java/com/iluwatar/command/Wizard.java\n+++ b/command/src/main/java/com/iluwatar/command/Wizard.java\n@@ -40,7 +40,9 @@ public class Wizard {\n   private Deque<Command> undoStack = new LinkedList<>();\n   private Deque<Command> redoStack = new LinkedList<>();\n \n-  public Wizard() {}\n+  public Wizard() {\n+    // comment to ignore sonar issue: LEVEL critical\n+  }\n \n   /**\n    * Cast spell",
    "output": "Remove unused size and visibility enumerations"
  },
  {
    "input": "diff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java\n@@ -36,7 +36,7 @@\n  * <p>\n  * It is responsible for reading and loading the contents of a given file.\n  */\n-public class FileLoader implements Serializable{\n+public class FileLoader implements Serializable {\n \n   /**\n    * Generated serial version UID\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java\n@@ -30,7 +30,7 @@\n  * <p>\n  * It is responsible for reacting to the user's actions and update the View component.\n  */\n-public class FileSelectorPresenter implements Serializable{\n+public class FileSelectorPresenter implements Serializable {\n \n   /**\n    * Generated serial version UID\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java\n@@ -28,7 +28,7 @@\n  * This interface represents the View component in the Model-View-Presenter pattern. It can be\n  * implemented by either the GUI components, or by the Stub.\n  */\n-public interface FileSelectorView extends Serializable{\n+public interface FileSelectorView extends Serializable {\n \n   /**\n    * Opens the view.\n\ndiff --git a/mutex/src/test/java/com/iluwatar/mutex/AppTest.java b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java\n--- a/mutex/src/test/java/com/iluwatar/mutex/AppTest.java\n+++ b/mutex/src/test/java/com/iluwatar/mutex/AppTest.java\n@@ -28,7 +28,7 @@\n /**\n  * Application Test Entrypoint\n  */\n-public class AppTest{\n+public class AppTest {\n   @Test\n   public void test() throws IOException {\n     String[] args = {};\n\ndiff --git a/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java\n--- a/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java\n+++ b/semaphore/src/test/java/com/iluwatar/semaphore/AppTest.java\n@@ -28,7 +28,7 @@\n /**\n  * Application Test Entrypoint\n  */\n-public class AppTest{\n+public class AppTest {\n   @Test\n   public void test() throws IOException {\n     String[] args = {};\n\ndiff --git a/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java\n--- a/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java\n+++ b/throttling/src/main/java/com/iluwatar/throttling/timer/ThrottleTimerImpl.java\n@@ -35,7 +35,7 @@\n  * @author drastogi\n  *\n  */\n-public class ThrottleTimerImpl implements Throttler{\n+public class ThrottleTimerImpl implements Throttler {\n \n   private int throttlePeriod;\n   ",
    "output": "Fix Checkstyle problems There are few checkstyles problems found in the which are required to be fixed"
  },
  {
    "input": "diff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/Student.java\n@@ -43,4 +43,15 @@ public Student(Integer id, String name, String address) {\n     this.address = address;\n   }\n \n+  public String getName() {\n+    return name;\n+  }\n+\n+  public Integer getId() {\n+    return id;\n+  }\n+\n+  public String getAddress() {\n+    return address;\n+  }\n }\n\ndiff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentManagementApp.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentManagementApp.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentManagementApp.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentManagementApp.java\n@@ -0,0 +1,52 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Piyush Chaudhari\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.unitofwork;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+/**\n+ * {@link StudentManagementApp} Application for managing student data.\n+ */\n+public class StudentManagementApp {\n+  /**\n+   *\n+   * @param args no argument sent\n+   */\n+  public static void main(String[] args) {\n+    Student ram = new Student(1, \"Ram\", \"Street 9, Cupertino\");\n+    Student shyam = new Student(2, \"Shyam\", \"Z bridge, Pune\");\n+    Student gopi = new Student(3, \"Gopi\", \"Street 10, Mumbai\");\n+\n+    HashMap<String, List<Student>> context = new HashMap<>();\n+    StudentDatabase studentDatabase = new StudentDatabase();\n+    StudentRepository studentRepository = new StudentRepository(context, studentDatabase);\n+\n+    studentRepository.registerNew(ram);\n+    studentRepository.registerModified(shyam);\n+    studentRepository.registerDeleted(gopi);\n+    studentRepository.commit();\n+  }\n+}\n\ndiff --git a/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentRepository.java b/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentRepository.java\n--- a/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentRepository.java\n+++ b/unit-of-work/src/main/java/com/iluwatar/unitofwork/StudentRepository.java\n@@ -24,6 +24,9 @@\n \n package com.iluwatar.unitofwork;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -33,6 +36,8 @@\n  * supports unit of work for student data.\n  */\n public class StudentRepository implements IUnitOfWork<Student> {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StudentRepository.class);\n+\n   private Map<String, List<Student>> context;\n   private StudentDatabase studentDatabase;\n \n@@ -47,17 +52,20 @@ public StudentRepository(Map<String, List<Student>> context, StudentDatabase stu\n \n   @Override\n   public void registerNew(Student student) {\n+    LOGGER.info(\"Registering {} for insert in context.\", student.getName());\n     register(student, IUnitOfWork.INSERT);\n   }\n \n   @Override\n   public void registerModified(Student student) {\n+    LOGGER.info(\"Registering {} for modify in context.\", student.getName());\n     register(student, IUnitOfWork.MODIFY);\n \n   }\n \n   @Override\n   public void registerDeleted(Student student) {\n+    LOGGER.info(\"Registering {} for delete in context.\", student.getName());\n     register(student, IUnitOfWork.DELETE);\n   }\n \n@@ -75,6 +83,7 @@ public void commit() {\n     if (context == null || context.size() == 0) {\n       return;\n     }\n+    LOGGER.info(\"Commit started\");\n     if (context.containsKey(IUnitOfWork.INSERT)) {\n       commitInsert();\n     }\n@@ -85,26 +94,30 @@ public void commit() {\n     if (context.containsKey(IUnitOfWork.DELETE)) {\n       commitDelete();\n     }\n+    LOGGER.info(\"Commit finished.\");\n   }\n \n-  private void commitDelete() {\n-    List<Student> deletedStudents = context.get(IUnitOfWork.DELETE);\n-    for (Student student : deletedStudents) {\n-      studentDatabase.delete(student);\n+  private void commitInsert() {\n+    List<Student> studentsToBeInserted = context.get(IUnitOfWork.INSERT);\n+    for (Student student : studentsToBeInserted) {\n+      LOGGER.info(\"Saving {} to database.\", student.getName());\n+      studentDatabase.insert(student);\n     }\n   }\n \n   private void commitModify() {\n     List<Student> modifiedStudents = context.get(IUnitOfWork.MODIFY);\n     for (Student student : modifiedStudents) {\n+      LOGGER.info(\"Modifying {} to database.\", student.getName());\n       studentDatabase.modify(student);\n     }\n   }\n \n-  private void commitInsert() {\n-    List<Student> studentsToBeInserted = context.get(IUnitOfWork.INSERT);\n-    for (Student student : studentsToBeInserted) {\n-      studentDatabase.insert(student);\n+  private void commitDelete() {\n+    List<Student> deletedStudents = context.get(IUnitOfWork.DELETE);\n+    for (Student student : deletedStudents) {\n+      LOGGER.info(\"Deleting {} to database.\", student.getName());\n+      studentDatabase.delete(student);\n     }\n   }\n }",
    "output": "- Unit Of Work : added the launching point of the module"
  },
  {
    "input": "diff --git a/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java b/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java\n--- a/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java\n+++ b/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java\n@@ -34,4 +34,6 @@ public interface IUnitOfWork<T> {\n \n   public void registerDeleted(T entity);\n \n+  public void commit();\n+\n }\n\\ No newline at end of file",
    "output": "- Unit Of Work : Added commit contract in Unit of work."
  },
  {
    "input": "diff --git a/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java b/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java\n--- a/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java\n+++ b/unitofwork/src/main/java/com/iluwatar/unitofwork/IUnitOfWork.java\n@@ -0,0 +1,37 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Piyush Chaudhari\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.unitofwork;\n+\n+/**\n+ * @param <T> Any generic entity\n+ */\n+public interface IUnitOfWork<T> {\n+  public void registerNew(T entity);\n+\n+  public void registerModified(T entity);\n+\n+  public void registerDeleted(T entity);\n+\n+}\n\\ No newline at end of file",
    "output": "- Unit Of Work : Unit of work contract."
  },
  {
    "input": "diff --git a/unitofwork/src/main/java/com/iluwatar/unitofwork/Student.java b/unitofwork/src/main/java/com/iluwatar/unitofwork/Student.java\n--- a/unitofwork/src/main/java/com/iluwatar/unitofwork/Student.java\n+++ b/unitofwork/src/main/java/com/iluwatar/unitofwork/Student.java\n@@ -0,0 +1,46 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Piyush Chaudhari\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.unitofwork;\n+\n+/**\n+ * {@link Student} is an entity.\n+ */\n+public class Student {\n+  private Integer id;\n+  private String name;\n+  private String address;\n+\n+  /**\n+   * @param id      student unique id\n+   * @param name    name of student\n+   * @param address address of student\n+   */\n+  public Student(Integer id, String name, String address) {\n+    this.id = id;\n+    this.name = name;\n+    this.address = address;\n+  }\n+  \n+}",
    "output": "- Unit Of Work : Add Student model and puml diagram"
  },
  {
    "input": "diff --git a/promise/src/main/java/com/iluwatar/promise/App.java b/promise/src/main/java/com/iluwatar/promise/App.java\n--- a/promise/src/main/java/com/iluwatar/promise/App.java\n+++ b/promise/src/main/java/com/iluwatar/promise/App.java\n@@ -65,7 +65,7 @@ public class App {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n \n-  private static final String DEFAULT_URL = \"https://raw.githubusercontent.com/iluwatar/java-design-patterns/Promise/promise/README.md\";\n+  private static final String DEFAULT_URL = \"https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md\";\n   private final ExecutorService executor;\n   private final CountDownLatch stopLatch;\n \n\ndiff --git a/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java b/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java\n--- a/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java\n+++ b/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java\n@@ -27,11 +27,16 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * A really simplified implementation of future that allows completing it successfully with a value \n  * or exceptionally with an exception.\n  */\n class PromiseSupport<T> implements Future<T> {\n+  \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PromiseSupport.class);\n \n   private static final int RUNNING = 1;\n   private static final int FAILED = 2;\n@@ -80,40 +85,34 @@ public boolean isDone() {\n \n   @Override\n   public T get() throws InterruptedException, ExecutionException {\n-    if (state == COMPLETED) {\n-      return value;\n-    } else if (state == FAILED) {\n-      throw new ExecutionException(exception);\n-    } else {\n-      synchronized (lock) {\n+    synchronized (lock) {\n+      while (state == RUNNING) {\n         lock.wait();\n-        if (state == COMPLETED) {\n-          return value;\n-        } else {\n-          throw new ExecutionException(exception);\n-        }\n       }\n     }\n+    if (state == COMPLETED) {\n+      return value;\n+    } \n+    throw new ExecutionException(exception);\n   }\n \n   @Override\n   public T get(long timeout, TimeUnit unit)\n-      throws InterruptedException, ExecutionException, TimeoutException {\n-    if (state == COMPLETED) {\n-      return value;\n-    } else if (state == FAILED) {\n-      throw new ExecutionException(exception);\n-    } else {\n-      synchronized (lock) {\n-        lock.wait(unit.toMillis(timeout));\n-        if (state == COMPLETED) {\n-          return value;\n-        } else if (state == FAILED) {\n-          throw new ExecutionException(exception);\n-        } else {\n-          throw new TimeoutException();\n+      throws  ExecutionException, TimeoutException {\n+    synchronized (lock) {\n+      while (state == RUNNING) {\n+        try {\n+          lock.wait(unit.toMillis(timeout));\n+        } catch (InterruptedException e) {\n+          LOGGER.warn(\"Interrupted!\", e);\n+          Thread.currentThread().interrupt();\n         }\n       }\n     }\n+    \n+    if (state == COMPLETED) {\n+      return value;\n+    } \n+    throw new ExecutionException(exception);\n   }\n }\n\\ No newline at end of file",
    "output": "SonarQube reports bugs in promise module"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/CustomException.java b/dao/src/main/java/com/iluwatar/dao/CustomException.java\n--- a/dao/src/main/java/com/iluwatar/dao/CustomException.java\n+++ b/dao/src/main/java/com/iluwatar/dao/CustomException.java\n@@ -0,0 +1,43 @@\n+/**\r\n+ * The MIT License\r\n+ * Copyright (c) 2014 Ilkka Seppälä\r\n+ *\r\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n+ * of this software and associated documentation files (the \"Software\"), to deal\r\n+ * in the Software without restriction, including without limitation the rights\r\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n+ * copies of the Software, and to permit persons to whom the Software is\r\n+ * furnished to do so, subject to the following conditions:\r\n+ *\r\n+ * The above copyright notice and this permission notice shall be included in\r\n+ * all copies or substantial portions of the Software.\r\n+ *\r\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n+ * THE SOFTWARE.\r\n+ */\r\n+package com.iluwatar.dao;\r\n+\r\n+/**\r\n+ * \r\n+ * Custom exception\r\n+ *\r\n+ */\r\n+public class CustomException extends Exception {\r\n+\r\n+  private static final long serialVersionUID = 1L;\r\n+\r\n+  public CustomException() {}\r\n+\r\n+  public CustomException(String message) {\r\n+    super(message);\r\n+  }\r\n+  \r\n+  public CustomException(String message, Throwable cause) {\r\n+    super(message, cause);\r\n+  }\r\n+}\r\n\ndiff --git a/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n--- a/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n+++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n@@ -36,12 +36,16 @@\n \n import javax.sql.DataSource;\n \n+import org.apache.log4j.Logger;\n+\n /**\n- * An implementation of {@link CustomerDao} that persists customers in RDBMS. \n+ * An implementation of {@link CustomerDao} that persists customers in RDBMS.\n  *\n  */\n public class DbCustomerDao implements CustomerDao {\n \n+  private static final Logger LOGGER = Logger.getLogger(DbCustomerDao.class);\n+\n   private final DataSource dataSource;\n \n   /**\n@@ -65,8 +69,8 @@ public Stream<Customer> getAll() throws Exception {\n     Connection connection;\n     try {\n       connection = getConnection();\n-      PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM CUSTOMERS\");  //NOSONAR\n-      ResultSet resultSet = statement.executeQuery(); //NOSONAR\n+      PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM CUSTOMERS\"); // NOSONAR\n+      ResultSet resultSet = statement.executeQuery(); // NOSONAR\n       return StreamSupport.stream(new Spliterators.AbstractSpliterator<Customer>(Long.MAX_VALUE, \n           Spliterator.ORDERED) {\n \n@@ -79,12 +83,12 @@ public boolean tryAdvance(Consumer<? super Customer> action) {\n             action.accept(createCustomer(resultSet));\n             return true;\n           } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            throw new RuntimeException(e); // NOSONAR\n           }\n         }\n       }, false).onClose(() -> mutedClose(connection, statement, resultSet));\n     } catch (SQLException e) {\n-      throw new Exception(e.getMessage(), e);\n+      throw new CustomException(e.getMessage(), e);\n     }\n   }\n \n@@ -98,7 +102,7 @@ private void mutedClose(Connection connection, PreparedStatement statement, Resu\n       statement.close();\n       connection.close();\n     } catch (SQLException e) {\n-      e.printStackTrace();\n+      LOGGER.info(\"Exception thrown \" + e.getMessage());\n     }\n   }\n \n@@ -113,19 +117,26 @@ private Customer createCustomer(ResultSet resultSet) throws SQLException {\n    */\n   @Override\n   public Optional<Customer> getById(int id) throws Exception {\n+\n+    ResultSet resultSet = null;\n+\n     try (Connection connection = getConnection();\n         PreparedStatement statement = \n             connection.prepareStatement(\"SELECT * FROM CUSTOMERS WHERE ID = ?\")) {\n \n       statement.setInt(1, id);\n-      ResultSet resultSet = statement.executeQuery();\n+      resultSet = statement.executeQuery();\n       if (resultSet.next()) {\n         return Optional.of(createCustomer(resultSet));\n       } else {\n         return Optional.empty();\n       }\n     } catch (SQLException ex) {\n-      throw new Exception(ex.getMessage(), ex);\n+      throw new CustomException(ex.getMessage(), ex);\n+    } finally {\n+      if (resultSet != null) {\n+        resultSet.close();\n+      }\n     }\n   }\n \n@@ -147,7 +158,7 @@ public boolean add(Customer customer) throws Exception {\n       statement.execute();\n       return true;\n     } catch (SQLException ex) {\n-      throw new Exception(ex.getMessage(), ex);\n+      throw new CustomException(ex.getMessage(), ex);\n     }\n   }\n \n@@ -164,7 +175,7 @@ public boolean update(Customer customer) throws Exception {\n       statement.setInt(3, customer.getId());\n       return statement.executeUpdate() > 0;\n     } catch (SQLException ex) {\n-      throw new Exception(ex.getMessage(), ex);\n+      throw new CustomException(ex.getMessage(), ex);\n     }\n   }\n \n@@ -179,7 +190,7 @@ public boolean delete(Customer customer) throws Exception {\n       statement.setInt(1, customer.getId());\n       return statement.executeUpdate() > 0;\n     } catch (SQLException ex) {\n-      throw new Exception(ex.getMessage(), ex);\n+      throw new CustomException(ex.getMessage(), ex);\n     }\n   }\n }",
    "output": "SonarQube reports bugs in dao module"
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n@@ -24,6 +24,8 @@\n \n package com.iluwatar.partialresponse;\n \n+import java.lang.reflect.Field;\n+\n /**\n  * Map a video to json\n  */\n@@ -34,7 +36,25 @@ public class FieldJsonMapper {\n    * @param fields fields information to get\n    * @return json of required fields from video\n    */\n-  public String toJson(Video video, String[] fields) {\n-    return null;\n+  public String toJson(Video video, String[] fields) throws Exception {\n+    StringBuilder json = new StringBuilder().append(\"{\");\n+\n+    for (int i = 0, fieldsLength = fields.length; i < fieldsLength; i++) {\n+      json.append(getString(video, Video.class.getDeclaredField(fields[i])));\n+      if (i != fieldsLength - 1) {\n+        json.append(\",\");\n+      }\n+    }\n+    json.append(\"}\");\n+    return json.toString();\n+  }\n+\n+  private String getString(Video video, Field declaredField) throws IllegalAccessException {\n+    declaredField.setAccessible(true);\n+    Object value = declaredField.get(video);\n+    if (declaredField.get(video) instanceof Integer) {\n+      return \"\\\"\" + declaredField.getName() + \"\\\"\" + \": \" + value;\n+    }\n+    return \"\\\"\" + declaredField.getName() + \"\\\"\" + \": \" + \"\\\"\" + value.toString() + \"\\\"\";\n   }\n }\n\ndiff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -59,7 +59,7 @@ public Video(Integer id, String title, Integer length, String description, Strin\n   @Override\n   public String toString() {\n     return \"{\"\n-        + \"\\\"id\\\": \\\"\" + id + \"\\\",\"\n+        + \"\\\"id\\\": \" + id + \",\"\n         + \"\\\"title\\\": \\\"\" + title + \"\\\",\"\n         + \"\\\"length\\\": \" + length + \",\"\n         + \"\\\"description\\\": \\\"\" + description + \"\\\",\"\n\ndiff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n@@ -48,7 +48,7 @@ public VideoResource(FieldJsonMapper fieldJsonMapper, Map<Integer, Video> videos\n    * @param fields fields to get information about\n    * @return json of specified fields of particular video by id\n    */\n-  public String getDetails(Integer id, String... fields) {\n+  public String getDetails(Integer id, String... fields) throws Exception {\n     if (fields.length == 0) {\n       return videos.get(id).toString();\n     }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/FieldJsonMapperTest.java\n@@ -0,0 +1,53 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.partialresponse;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * tests {@link FieldJsonMapper}.\n+ */\n+public class FieldJsonMapperTest {\n+  private FieldJsonMapper mapper;\n+\n+  @Before\n+  public void setUp() {\n+    mapper = new FieldJsonMapper();\n+  }\n+\n+  @Test\n+  public void shouldReturnJsonForSpecifiedFieldsInVideo() throws Exception {\n+    String[] fields = new String[]{\"id\", \"title\", \"length\"};\n+    Video video = new Video(2, \"Godzilla Resurgence\", 120, \"Action & drama movie|\", \"Hideaki Anno\", \"Japanese\");\n+\n+    String jsonFieldResponse = mapper.toJson(video, fields);\n+\n+    String expectedDetails = \"{\\\"id\\\": 2,\\\"title\\\": \\\"Godzilla Resurgence\\\",\\\"length\\\": 120}\";\n+    assertEquals(expectedDetails, jsonFieldResponse);\n+  }\n+}\n\\ No newline at end of file\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -58,19 +58,19 @@ public void setUp() {\n   }\n \n   @Test\n-  public void shouldGiveVideoDetailsById() {\n+  public void shouldGiveVideoDetailsById() throws Exception {\n     String actualDetails = resource.getDetails(1);\n \n-    String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \"\n+    String expectedDetails = \"{\\\"id\\\": 1,\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \"\n         + \"\\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n     assertEquals(expectedDetails, actualDetails);\n   }\n \n   @Test\n-  public void shouldGiveSpecifiedFieldsInformationOfVideo() {\n-    String[] fields = new String[]{\"title\", \"length\"};\n+  public void shouldGiveSpecifiedFieldsInformationOfVideo() throws Exception {\n+    String[] fields = new String[]{\"id\", \"title\", \"length\"};\n \n-    String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178}\";\n+    String expectedDetails = \"{\\\"id\\\": 1,\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178}\";\n     when(fieldJsonMapper.toJson(any(Video.class), eq(fields))).thenReturn(expectedDetails);\n \n     String actualFieldsDetails = resource.getDetails(2, fields);",
    "output": "- Partial Response : Implement Field to json conversion"
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/FieldJsonMapper.java\n@@ -0,0 +1,31 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.partialresponse;\n+\n+public class FieldJsonMapper {\n+  public String toJson(Video video, String[] fields) {\n+    return null;\n+  }\n+}\n\ndiff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n@@ -27,13 +27,18 @@\n import java.util.Map;\n \n public class VideoResource {\n+  private FieldJsonMapper fieldJsonMapper;\n   private Map<Integer, Video> videos;\n \n-  public VideoResource(Map<Integer, Video> videos) {\n+  public VideoResource(FieldJsonMapper fieldJsonMapper, Map<Integer, Video> videos) {\n+    this.fieldJsonMapper = fieldJsonMapper;\n     this.videos = videos;\n   }\n \n-  public String getDetails(Integer id) {\n-    return videos.get(id).toString();\n+  public String getDetails(Integer id, String... fields) {\n+    if (fields.length == 0) {\n+      return videos.get(id).toString();\n+    }\n+    return fieldJsonMapper.toJson(videos.get(id), fields);\n   }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -26,13 +26,23 @@\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class VideoResourceTest {\n+  @Mock\n+  private FieldJsonMapper fieldJsonMapper;\n+\n   private VideoResource resource;\n \n   @Before\n@@ -41,14 +51,26 @@ public void setUp() {\n     videos.put(1, new Video(1, \"Avatar\", 178, \"epic science fiction film\", \"James Cameron\", \"English\"));\n     videos.put(2, new Video(2, \"Godzilla Resurgence\", 120, \"Action & drama movie|\", \"Hideaki Anno\", \"Japanese\"));\n     videos.put(3, new Video(3, \"Interstellar\", 169, \"Adventure & Sci-Fi\", \"Christopher Nolan\", \"English\"));\n-    resource = new VideoResource(videos);\n+    resource = new VideoResource(fieldJsonMapper, videos);\n   }\n \n   @Test\n   public void shouldGiveVideoDetailsById() {\n-    String details = resource.getDetails(1);\n+    String actualDetails = resource.getDetails(1);\n \n     String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n-    assertEquals(expectedDetails, details);\n+    assertEquals(expectedDetails, actualDetails);\n+  }\n+\n+  @Test\n+  public void shouldGiveSpecifiedFieldsInformationOfVideo() {\n+    String[] fields = new String[]{\"title\", \"length\"};\n+\n+    String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178}\";\n+    when(fieldJsonMapper.toJson(any(Video.class), eq(fields))).thenReturn(expectedDetails);\n+\n+    String actualFieldsDetails = resource.getDetails(2, fields);\n+\n+    assertEquals(expectedDetails, actualFieldsDetails);\n   }\n }\n\\ No newline at end of file",
    "output": "- Partial Response : Get specified fields response."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -58,6 +58,7 @@ public String toString() {\n     return \"{\" +\n         \"\\\"id\\\": \\\"\" + id + \"\\\",\" +\n         \"\\\"title\\\": \\\"\" + title + \"\\\",\" +\n+        \"\\\"length\\\": \" + length + \",\" +\n         \"\\\"description\\\": \\\"\" + description + \"\\\",\" +\n         \"\\\"director\\\": \\\"\" + director + \"\\\",\" +\n         \"\\\"language\\\": \\\"\" + language + \"\\\",\" +\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -48,7 +48,7 @@ public void setUp() {\n   public void shouldGiveVideoDetailsById() {\n     String details = resource.getDetails(1);\n \n-    String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"description\\\": \\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n-    assertEquals(details, expectedDetails);\n+    String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"length\\\": 178,\\\"description\\\": \\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n+    assertEquals(expectedDetails, details);\n   }\n }\n\\ No newline at end of file",
    "output": "- Partial Response : Add missing length in video details"
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -29,7 +29,7 @@\n  * <p>\n  */\n public class Video {\n-  private String id;\n+  private Integer id;\n   private String title;\n   private Integer length;\n   private String description;\n@@ -41,10 +41,10 @@ public class Video {\n    * @param title       video title\n    * @param length      video length in minutes\n    * @param description video description by publisher\n-   * @param director   video director name\n-   * @param language      video language {private, public}\n+   * @param director    video director name\n+   * @param language    video language {private, public}\n    */\n-  public Video(String id, String title, Integer length, String description, String director, String language) {\n+  public Video(Integer id, String title, Integer length, String description, String director, String language) {\n     this.id = id;\n     this.title = title;\n     this.length = length;\n@@ -55,13 +55,12 @@ public Video(String id, String title, Integer length, String description, String\n \n   @Override\n   public String toString() {\n-    return \"Video{\" +\n-        \"id='\" + id + '\\'' +\n-        \", title='\" + title + '\\'' +\n-        \", length=\" + length +\n-        \", description='\" + description + '\\'' +\n-        \", director='\" + director + '\\'' +\n-        \", language='\" + language + '\\'' +\n-        '}';\n+    return \"{\" +\n+        \"\\\"id\\\": \\\"\" + id + \"\\\",\" +\n+        \"\\\"title\\\": \\\"\" + title + \"\\\",\" +\n+        \"\\\"description\\\": \\\"\" + description + \"\\\",\" +\n+        \"\\\"director\\\": \\\"\" + director + \"\\\",\" +\n+        \"\\\"language\\\": \\\"\" + language + \"\\\",\" +\n+        \"}\";\n   }\n }\n\ndiff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n@@ -27,13 +27,13 @@\n import java.util.Map;\n \n public class VideoResource {\n-  private Map<String, Video> videos;\n+  private Map<Integer, Video> videos;\n \n-  public VideoResource(Map<String, Video> videos) {\n+  public VideoResource(Map<Integer, Video> videos) {\n     this.videos = videos;\n   }\n \n-  public String getDetails(String id) {\n+  public String getDetails(Integer id) {\n     return videos.get(id).toString();\n   }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -30,21 +30,25 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import static org.junit.Assert.assertEquals;\n+\n public class VideoResourceTest {\n   private VideoResource resource;\n \n   @Before\n   public void setUp() {\n-    Map<String, Video> videos = new HashMap<>();\n-    videos.put(\"1\", new Video(\"1\", \"Avatar\", 178, \"epic science fiction film\", \"James Cameron\", \"English\"));\n-    videos.put(\"1\", new Video(\"2\", \"Godzilla Resurgence\", 120, \"Action & drama movie|\", \"Hideaki Anno\", \"Japanese\"));\n-    videos.put(\"1\", new Video(\"3\", \"Interstellar\", 169, \"Adventure & Sci-Fi\", \"Christopher Nolan\", \"English\"));\n+    Map<Integer, Video> videos = new HashMap<>();\n+    videos.put(1, new Video(1, \"Avatar\", 178, \"epic science fiction film\", \"James Cameron\", \"English\"));\n+    videos.put(2, new Video(2, \"Godzilla Resurgence\", 120, \"Action & drama movie|\", \"Hideaki Anno\", \"Japanese\"));\n+    videos.put(3, new Video(3, \"Interstellar\", 169, \"Adventure & Sci-Fi\", \"Christopher Nolan\", \"English\"));\n     resource = new VideoResource(videos);\n   }\n \n   @Test\n   public void shouldGiveVideoDetailsById() {\n-    String details = resource.getDetails(\"1\");\n-    System.out.println(details);\n+    String details = resource.getDetails(1);\n+\n+    String expectedDetails = \"{\\\"id\\\": \\\"1\\\",\\\"title\\\": \\\"Avatar\\\",\\\"description\\\": \\\"epic science fiction film\\\",\\\"director\\\": \\\"James Cameron\\\",\\\"language\\\": \\\"English\\\",}\";\n+    assertEquals(details, expectedDetails);\n   }\n }\n\\ No newline at end of file",
    "output": "- Partial Response : Return video details as json string."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -31,26 +31,26 @@\n public class Video {\n   private String id;\n   private String title;\n-  private Long length;\n+  private Integer length;\n   private String description;\n-  private String publisher;\n-  private String status;\n+  private String director;\n+  private String language;\n \n   /**\n    * @param id          video unique id\n    * @param title       video title\n-   * @param length      video length in seconds\n+   * @param length      video length in minutes\n    * @param description video description by publisher\n-   * @param publisher   video publisher name\n-   * @param status      video status {private, public}\n+   * @param director   video director name\n+   * @param language      video language {private, public}\n    */\n-  public Video(String id, String title, Long length, String description, String publisher, String status) {\n+  public Video(String id, String title, Integer length, String description, String director, String language) {\n     this.id = id;\n     this.title = title;\n     this.length = length;\n     this.description = description;\n-    this.publisher = publisher;\n-    this.status = status;\n+    this.director = director;\n+    this.language = language;\n   }\n \n   @Override\n@@ -60,8 +60,8 @@ public String toString() {\n         \", title='\" + title + '\\'' +\n         \", length=\" + length +\n         \", description='\" + description + '\\'' +\n-        \", publisher='\" + publisher + '\\'' +\n-        \", status='\" + status + '\\'' +\n+        \", director='\" + director + '\\'' +\n+        \", language='\" + language + '\\'' +\n         '}';\n   }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -36,9 +36,9 @@ public class VideoResourceTest {\n   @Before\n   public void setUp() {\n     Map<String, Video> videos = new HashMap<>();\n-    videos.put(\"1\", new Video(\"1\", \"title 1\", 100L, \"\", \"\", \"\"));\n-    videos.put(\"1\", new Video(\"2\", \"title 2\", 100L, \"\", \"\", \"\"));\n-    videos.put(\"1\", new Video(\"3\", \"title 3\", 100L, \"\", \"\", \"\"));\n+    videos.put(\"1\", new Video(\"1\", \"Avatar\", 178, \"epic science fiction film\", \"James Cameron\", \"English\"));\n+    videos.put(\"1\", new Video(\"2\", \"Godzilla Resurgence\", 120, \"Action & drama movie|\", \"Hideaki Anno\", \"Japanese\"));\n+    videos.put(\"1\", new Video(\"3\", \"Interstellar\", 169, \"Adventure & Sci-Fi\", \"Christopher Nolan\", \"English\"));\n     resource = new VideoResource(videos);\n   }\n ",
    "output": "- Partial Response : [Refactor] Modify video model fields."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n@@ -33,7 +33,7 @@ public VideoResource(Map<String, Video> videos) {\n     this.videos = videos;\n   }\n \n-  public String getDenials(String id) {\n+  public String getDetails(String id) {\n     return videos.get(id).toString();\n   }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -44,7 +44,7 @@ public void setUp() {\n \n   @Test\n   public void shouldGiveVideoDetailsById() {\n-    String details = resource.getDenials(\"1\");\n+    String details = resource.getDetails(\"1\");\n     System.out.println(details);\n   }\n }\n\\ No newline at end of file",
    "output": "- Partial Response : [Refactor] Rename GetDetails method by id."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -52,4 +52,16 @@ public Video(String id, String title, Long length, String description, String pu\n     this.publisher = publisher;\n     this.status = status;\n   }\n+\n+  @Override\n+  public String toString() {\n+    return \"Video{\" +\n+        \"id='\" + id + '\\'' +\n+        \", title='\" + title + '\\'' +\n+        \", length=\" + length +\n+        \", description='\" + description + '\\'' +\n+        \", publisher='\" + publisher + '\\'' +\n+        \", status='\" + status + '\\'' +\n+        '}';\n+  }\n }\n\ndiff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n@@ -1,4 +1,39 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n package com.iluwatar.partialresponse;\n \n+import java.util.Map;\n+\n public class VideoResource {\n+  private Map<String, Video> videos;\n+\n+  public VideoResource(Map<String, Video> videos) {\n+    this.videos = videos;\n+  }\n+\n+  public String getDenials(String id) {\n+    return videos.get(id).toString();\n+  }\n }\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -1,5 +1,50 @@\n-import static org.junit.Assert.*;\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.partialresponse;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class VideoResourceTest {\n+  private VideoResource resource;\n+\n+  @Before\n+  public void setUp() {\n+    Map<String, Video> videos = new HashMap<>();\n+    videos.put(\"1\", new Video(\"1\", \"title 1\", 100L, \"\", \"\", \"\"));\n+    videos.put(\"1\", new Video(\"2\", \"title 2\", 100L, \"\", \"\", \"\"));\n+    videos.put(\"1\", new Video(\"3\", \"title 3\", 100L, \"\", \"\", \"\"));\n+    resource = new VideoResource(videos);\n+  }\n \n+  @Test\n+  public void shouldGiveVideoDetailsById() {\n+    String details = resource.getDenials(\"1\");\n+    System.out.println(details);\n+  }\n }\n\\ No newline at end of file",
    "output": "- Partial Response : Get video details by id."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/VideoResource.java\n@@ -0,0 +1,4 @@\n+package com.iluwatar.partialresponse;\n+\n+public class VideoResource {\n+}\n\ndiff --git a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n--- a/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n+++ b/partial-response/src/test/java/com/iluwatar/partialresponse/VideoResourceTest.java\n@@ -0,0 +1,5 @@\n+import static org.junit.Assert.*;\n+\n+public class VideoResourceTest {\n+\n+}\n\\ No newline at end of file",
    "output": "- Partial Response : Get video details by id."
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/App.java b/decorator/src/main/java/com/iluwatar/decorator/App.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/App.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java\n@@ -57,9 +57,9 @@ public static void main(String[] args) {\n \n     // change the behavior of the simple troll by adding a decorator\n     LOGGER.info(\"A troll with huge club surprises you.\");\n-    Troll clubbed = new ClubbedTroll(troll);\n-    clubbed.attack();\n-    clubbed.fleeBattle();\n-    LOGGER.info(\"Clubbed troll power {}.\\n\", clubbed.getAttackPower());\n+    troll = new ClubbedTroll(troll);\n+    troll.attack();\n+    troll.fleeBattle();\n+    LOGGER.info(\"Clubbed troll power {}.\\n\", troll.getAttackPower());\n   }\n }",
    "output": "Delete duplicate declared objects:ClubbedTroll\nTrolls should not be re-declared: if I had a troll called Zac, one day I\ngave him a weapon.I can not because he now has a weapon called him\nTrundle. He is still Zac."
  },
  {
    "input": "diff --git a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n--- a/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n+++ b/partial-response/src/main/java/com/iluwatar/partialresponse/Video.java\n@@ -0,0 +1,55 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.partialresponse;\n+\n+/**\n+ * {@link Video} is a entity to serve from server.It contains all video related information..\n+ * <p>\n+ */\n+public class Video {\n+  private String id;\n+  private String title;\n+  private Long length;\n+  private String description;\n+  private String publisher;\n+  private String status;\n+\n+  /**\n+   * @param id          video unique id\n+   * @param title       video title\n+   * @param length      video length in seconds\n+   * @param description video description by publisher\n+   * @param publisher   video publisher name\n+   * @param status      video status {private, public}\n+   */\n+  public Video(String id, String title, Long length, String description, String publisher, String status) {\n+    this.id = id;\n+    this.title = title;\n+    this.length = length;\n+    this.description = description;\n+    this.publisher = publisher;\n+    this.status = status;\n+  }\n+}",
    "output": "- Partial Response : Add video model."
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/ClubbedTroll.java b/decorator/src/main/java/com/iluwatar/decorator/ClubbedTroll.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/ClubbedTroll.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/ClubbedTroll.java\n@@ -28,22 +28,29 @@\n /**\n  * Decorator that adds a club for the troll\n  */\n-public class ClubbedTroll extends TrollDecorator {\n+public class ClubbedTroll implements Troll {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ClubbedTroll.class);\n \n+  private Troll decorated;\n+\n   public ClubbedTroll(Troll decorated) {\n-    super(decorated);\n+    this.decorated = decorated;\n   }\n \n   @Override\n   public void attack() {\n-    super.attack();\n+    decorated.attack();\n     LOGGER.info(\"The troll swings at you with a club!\");\n   }\n \n   @Override\n   public int getAttackPower() {\n-    return super.getAttackPower() + 10;\n+    return decorated.getAttackPower() + 10;\n+  }\n+\n+  @Override\n+  public void fleeBattle() {\n+    decorated.fleeBattle();\n   }\n }\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/TrollDecorator.java b/decorator/src/main/java/com/iluwatar/decorator/TrollDecorator.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/TrollDecorator.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/TrollDecorator.java\n@@ -1,53 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package com.iluwatar.decorator;\n-\n-/**\n- * TrollDecorator is a decorator for {@link Troll} objects. The calls to the {@link Troll} interface\n- * are intercepted and decorated. Finally the calls are delegated to the decorated {@link Troll}\n- * object.\n- *\n- */\n-public class TrollDecorator implements Troll {\n-\n-  private Troll decorated;\n-\n-  public TrollDecorator(Troll decorated) {\n-    this.decorated = decorated;\n-  }\n-\n-  @Override\n-  public void attack() {\n-    decorated.attack();\n-  }\n-\n-  @Override\n-  public int getAttackPower() {\n-    return decorated.getAttackPower();\n-  }\n-\n-  @Override\n-  public void fleeBattle() {\n-    decorated.fleeBattle();\n-  }\n-}\n\ndiff --git a/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java b/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/ClubbedTrollTest.java\n@@ -34,7 +34,7 @@\n public class ClubbedTrollTest {\n \n   @Test\n-  public void testSmartHostile() throws Exception {\n+  public void testClubbedTroll() throws Exception {\n     // Create a normal troll first, but make sure we can spy on it later on.\n     final Troll simpleTroll = spy(new SimpleTroll());\n ",
    "output": "Add explanation to Decorator pattern"
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java\n--- a/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java\n+++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java\n@@ -55,7 +55,7 @@ public synchronized void checkIn(T instance) {\n   }\n \n   @Override\n-  public String toString() {\n+  public synchronized String toString() {\n     return String.format(\"Pool available=%d inUse=%d\", available.size(), inUse.size());\n   }\n }",
    "output": "Make toString synchronized."
  },
  {
    "input": "diff --git a/composite/src/main/java/com/iluwatar/composite/App.java b/composite/src/main/java/com/iluwatar/composite/App.java\n--- a/composite/src/main/java/com/iluwatar/composite/App.java\n+++ b/composite/src/main/java/com/iluwatar/composite/App.java\n@@ -51,9 +51,7 @@ public static void main(String[] args) {\n     LetterComposite orcMessage = new Messenger().messageFromOrcs();\n     orcMessage.print();\n \n-    LOGGER.info(\"\\n\");\n-\n-    LOGGER.info(\"Message from the elves: \");\n+    LOGGER.info(\"\\nMessage from the elves: \");\n \n     LetterComposite elfMessage = new Messenger().messageFromElves();\n     elfMessage.print();\n\ndiff --git a/composite/src/main/java/com/iluwatar/composite/Letter.java b/composite/src/main/java/com/iluwatar/composite/Letter.java\n--- a/composite/src/main/java/com/iluwatar/composite/Letter.java\n+++ b/composite/src/main/java/com/iluwatar/composite/Letter.java\n@@ -39,9 +39,4 @@ public Letter(char c) {\n   protected void printThisBefore() {\n     System.out.print(c);\n   }\n-\n-  @Override\n-  protected void printThisAfter() {\n-    // nop\n-  }\n }\n\ndiff --git a/composite/src/main/java/com/iluwatar/composite/LetterComposite.java b/composite/src/main/java/com/iluwatar/composite/LetterComposite.java\n--- a/composite/src/main/java/com/iluwatar/composite/LetterComposite.java\n+++ b/composite/src/main/java/com/iluwatar/composite/LetterComposite.java\n@@ -42,9 +42,9 @@ public int count() {\n     return children.size();\r\n   }\r\n \r\n-  protected abstract void printThisBefore();\r\n+  protected void printThisBefore() {}\r\n \r\n-  protected abstract void printThisAfter();\r\n+  protected void printThisAfter() {}\r\n \r\n   /**\r\n    * Print\r\n\ndiff --git a/composite/src/main/java/com/iluwatar/composite/Sentence.java b/composite/src/main/java/com/iluwatar/composite/Sentence.java\n--- a/composite/src/main/java/com/iluwatar/composite/Sentence.java\n+++ b/composite/src/main/java/com/iluwatar/composite/Sentence.java\n@@ -40,11 +40,6 @@ public Sentence(List<Word> words) {\n     }\n   }\n \n-  @Override\n-  protected void printThisBefore() {\n-    // nop\n-  }\n-\n   @Override\n   protected void printThisAfter() {\n     System.out.print(\".\");\n\ndiff --git a/composite/src/main/java/com/iluwatar/composite/Word.java b/composite/src/main/java/com/iluwatar/composite/Word.java\n--- a/composite/src/main/java/com/iluwatar/composite/Word.java\n+++ b/composite/src/main/java/com/iluwatar/composite/Word.java\n@@ -44,9 +44,4 @@ public Word(List<Letter> letters) {\n   protected void printThisBefore() {\n     System.out.print(\" \");\n   }\n-\n-  @Override\n-  protected void printThisAfter() {\n-    // nop\n-  }\n }",
    "output": "Add explanation for Composite pattern"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n@@ -65,6 +65,7 @@ public static void main(String[] args) throws IOException {\n    * @throws IOException if any I/O error occurs.\n    */\n   public void start() throws IOException {\n+    LOGGER.info(\"Starting logging clients\");\n     service.execute(new TcpLoggingClient(\"Client 1\", 6666));\n     service.execute(new TcpLoggingClient(\"Client 2\", 6667));\n     service.execute(new UdpLoggingClient(\"Client 3\", 6668));\n@@ -81,16 +82,17 @@ public void stop() {\n       try {\n         service.awaitTermination(1000, TimeUnit.SECONDS);\n       } catch (InterruptedException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"exception awaiting termination\", e);\n       }\n     }\n+    LOGGER.info(\"Logging clients stopped\");\n   }\n \n   private static void artificialDelayOf(long millis) {\n     try {\n       Thread.sleep(millis);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"sleep interrupted\", e);\n     }\n   }\n \n@@ -119,7 +121,7 @@ public void run() {\n         PrintWriter writer = new PrintWriter(outputStream);\n         sendLogRequests(writer, socket.getInputStream());\n       } catch (IOException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"error sending requests\", e);\n         throw new RuntimeException(e);\n       }\n     }\n@@ -185,7 +187,7 @@ public void run() {\n           artificialDelayOf(100);\n         }\n       } catch (IOException e1) {\n-        e1.printStackTrace();\n+        LOGGER.error(\"error sending packets\", e1);\n       }\n     }\n   }\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n@@ -94,7 +94,7 @@ public void start() throws IOException {\n         LOGGER.info(\"Reactor started, waiting for events...\");\n         eventLoop();\n       } catch (IOException e) {\n-        e.printStackTrace();\n+        LOGGER.error(\"exception in event loop\", e);\n       }\n     });\n   }\n@@ -112,6 +112,7 @@ public void stop() throws InterruptedException, IOException {\n     selector.wakeup();\n     reactorMain.awaitTermination(4, TimeUnit.SECONDS);\n     selector.close();\n+    LOGGER.info(\"Reactor stopped\");\n   }\n \n   /**\n@@ -206,7 +207,7 @@ private void onChannelReadable(SelectionKey key) {\n       try {\n         key.channel().close();\n       } catch (IOException e1) {\n-        e1.printStackTrace();\n+        LOGGER.error(\"error closing channel\", e1);\n       }\n     }\n   }\n\ndiff --git a/reactor/src/test/java/com/iluwatar/reactor/app/ReactorTest.java b/reactor/src/test/java/com/iluwatar/reactor/app/ReactorTest.java\n--- a/reactor/src/test/java/com/iluwatar/reactor/app/ReactorTest.java\n+++ b/reactor/src/test/java/com/iluwatar/reactor/app/ReactorTest.java\n@@ -24,10 +24,13 @@\n \n import java.io.IOException;\n \n+import com.iluwatar.reactor.framework.NioReactor;\n import org.junit.Test;\n \n import com.iluwatar.reactor.framework.SameThreadDispatcher;\n import com.iluwatar.reactor.framework.ThreadPoolDispatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * \n@@ -36,6 +39,8 @@\n  */\n public class ReactorTest {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(ReactorTest.class);\n+\n   /**\n    * Test the application using pooled thread dispatcher.\n    * \n@@ -44,6 +49,7 @@ public class ReactorTest {\n    */\n   @Test\n   public void testAppUsingThreadPoolDispatcher() throws IOException, InterruptedException {\n+    LOGGER.info(\"testAppUsingThreadPoolDispatcher start\");\n     App app = new App(new ThreadPoolDispatcher(2));\n     app.start();\n \n@@ -54,12 +60,13 @@ public void testAppUsingThreadPoolDispatcher() throws IOException, InterruptedEx\n     try {\n       Thread.sleep(2000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"sleep interrupted\", e);\n     }\n \n     client.stop();\n \n     app.stop();\n+    LOGGER.info(\"testAppUsingThreadPoolDispatcher stop\");\n   }\n \n   /**\n@@ -70,6 +77,7 @@ public void testAppUsingThreadPoolDispatcher() throws IOException, InterruptedEx\n    */\n   @Test\n   public void testAppUsingSameThreadDispatcher() throws IOException, InterruptedException {\n+    LOGGER.info(\"testAppUsingSameThreadDispatcher start\");\n     App app = new App(new SameThreadDispatcher());\n     app.start();\n \n@@ -80,11 +88,12 @@ public void testAppUsingSameThreadDispatcher() throws IOException, InterruptedEx\n     try {\n       Thread.sleep(2000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"sleep interrupted\", e);\n     }\n \n     client.stop();\n \n     app.stop();\n+    LOGGER.info(\"testAppUsingSameThreadDispatcher stop\");\n   }\n }",
    "output": "Add more logging to Reactor"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java b/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java\n@@ -22,9 +22,6 @@\n  */\n package com.iluwatar.adapter;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  *\n  * Adapter class. Adapts the interface of the device ({@link FishingBoat}) into {@link RowingBoat}\n@@ -33,8 +30,6 @@\n  */\n public class FishingBoatAdapter implements RowingBoat {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoatAdapter.class);\n-\n   private FishingBoat boat;\n \n   public FishingBoatAdapter() {",
    "output": "Fix PMD issue"
  },
  {
    "input": "diff --git a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java\n--- a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java\n+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java\n@@ -139,7 +139,7 @@ public T getValue() throws ExecutionException {\n     @Override\n     public void await() throws InterruptedException {\n       synchronized (lock) {\n-        if (!isCompleted()) {\n+        while (!isCompleted()) {\n           lock.wait();\n         }\n       }",
    "output": "SonarQube reports bugs\nAs recommended in\nhttps://sonarcloud.io/organizations/default/rules#rule_key=squid%3AS2274\nUsed while insteadof if - for waiting upon a condition."
  },
  {
    "input": "diff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerDto.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerDto.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerDto.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerDto.java\n@@ -31,9 +31,9 @@\n  * Dto will not have any business logic in it.\n  */\n public class CustomerDto {\n-  private String id;\n-  private String firstName;\n-  private String lastName;\n+  private final String id;\n+  private final String firstName;\n+  private final String lastName;\n \n   /**\n    * @param id        customer id",
    "output": "- Data Tranfer Object : Make private varialbes final in immutalbe model."
  },
  {
    "input": "diff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java\n@@ -24,6 +24,9 @@\n \n package com.iluwatar.datatransfer;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -38,6 +41,9 @@\n  * And The CustomerDto ({@link CustomerDto} is data transfer object to share customer information.\n  */\n public class CustomerClientApp {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CustomerClientApp.class);\n+\n   /**\n    * Method as act client and request to server for details.\n    *\n@@ -52,27 +58,27 @@ public static void main(String[] args) {\n \n     CustomerResource customerResource = new CustomerResource(customers);\n \n-    System.out.println(\"All customers:-\");\n+    LOGGER.info(\"All customers:-\");\n     List<CustomerDto> allCustomers = customerResource.getAllCustomers();\n     printCustomerDetails(allCustomers);\n \n-    System.out.println(\"----------------------------------------------------------\");\n+    LOGGER.info(\"----------------------------------------------------------\");\n \n-    System.out.println(\"Deleting customer with id {1}\");\n+    LOGGER.info(\"Deleting customer with id {1}\");\n     customerResource.delete(customerOne.getId());\n     allCustomers = customerResource.getAllCustomers();\n     printCustomerDetails(allCustomers);\n \n-    System.out.println(\"----------------------------------------------------------\");\n+    LOGGER.info(\"----------------------------------------------------------\");\n \n-    System.out.println(\"Adding customer three}\");\n+    LOGGER.info(\"Adding customer three}\");\n     CustomerDto customerThree = new CustomerDto(\"3\", \"Lynda\", \"Blair\");\n     customerResource.save(customerThree);\n     allCustomers = customerResource.getAllCustomers();\n     printCustomerDetails(allCustomers);\n   }\n \n   private static void printCustomerDetails(List<CustomerDto> allCustomers) {\n-    allCustomers.forEach(customer -> System.out.println(customer.getFirstName()));\n+    allCustomers.forEach(customer -> LOGGER.info(customer.getFirstName()));\n   }\n }",
    "output": "- Data Tranfer Object : Use logger instead of print statements."
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n--- a/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n+++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java\n@@ -65,8 +65,8 @@ public Stream<Customer> getAll() throws Exception {\n     Connection connection;\n     try {\n       connection = getConnection();\n-      PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM CUSTOMERS\");\n-      ResultSet resultSet = statement.executeQuery();\n+      PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM CUSTOMERS\");  //NOSONAR\n+      ResultSet resultSet = statement.executeQuery(); //NOSONAR\n       return StreamSupport.stream(new Spliterators.AbstractSpliterator<Customer>(Long.MAX_VALUE, \n           Spliterator.ORDERED) {\n \n@@ -82,7 +82,7 @@ public boolean tryAdvance(Consumer<? super Customer> action) {\n             throw new RuntimeException(e);\n           }\n         }\n-      }, false).onClose(() -> mutedClose(connection));\n+      }, false).onClose(() -> mutedClose(connection, statement, resultSet));\n     } catch (SQLException e) {\n       throw new Exception(e.getMessage(), e);\n     }\n@@ -92,8 +92,10 @@ private Connection getConnection() throws SQLException {\n     return dataSource.getConnection();\n   }\n \n-  private void mutedClose(Connection connection) {\n+  private void mutedClose(Connection connection, PreparedStatement statement, ResultSet resultSet) {\n     try {\n+      resultSet.close();\n+      statement.close();\n       connection.close();\n     } catch (SQLException e) {\n       e.printStackTrace();",
    "output": "As getAll method returns a Stream, we cannot close the involved\nresources (Connection, Statement and resultSet) until the stream is\nclosed by the consumer. So try-with-resources is not an option as per\nsonarqube’s recommendation. But it is still recommended to close\nstatement and result set. When connection pool used, connection is not\nclosed when close() called. It is just returned to the pool.\nUsing //NOSONAR to avoid false blocker issue."
  },
  {
    "input": "diff --git a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java\n--- a/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java\n+++ b/data-transfer-object/src/main/java/com/iluwatar/datatransfer/CustomerClientApp.java\n@@ -0,0 +1,78 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017 Gopinath Langote\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.iluwatar.datatransfer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The Data Transfer Object pattern is a design pattern in which an data transfer object is used to serve related\n+ * information together to avoid multiple call for each piece of information.\n+ * <p>\n+ * In this example, ({@link CustomerClientApp}) as as customer details consumer i.e. client to request for\n+ * customer details to server.\n+ * <p>\n+ * CustomerResource ({@link CustomerResource}) act as server to serve customer information.\n+ * And The CustomerDto ({@link CustomerDto} is data transfer object to share customer information.\n+ */\n+public class CustomerClientApp {\n+  /**\n+   * Method as act client and request to server for details.\n+   *\n+   * @param args program argument.\n+   */\n+  public static void main(String[] args) {\n+    List<CustomerDto> customers = new ArrayList<>();\n+    CustomerDto customerOne = new CustomerDto(\"1\", \"Kelly\", \"Brown\");\n+    CustomerDto customerTwo = new CustomerDto(\"2\", \"Alfonso\", \"Bass\");\n+    customers.add(customerOne);\n+    customers.add(customerTwo);\n+\n+    CustomerResource customerResource = new CustomerResource(customers);\n+\n+    System.out.println(\"All customers:-\");\n+    List<CustomerDto> allCustomers = customerResource.getAllCustomers();\n+    printCustomerDetails(allCustomers);\n+\n+    System.out.println(\"----------------------------------------------------------\");\n+\n+    System.out.println(\"Deleting customer with id {1}\");\n+    customerResource.delete(customerOne.getId());\n+    allCustomers = customerResource.getAllCustomers();\n+    printCustomerDetails(allCustomers);\n+\n+    System.out.println(\"----------------------------------------------------------\");\n+\n+    System.out.println(\"Adding customer three}\");\n+    CustomerDto customerThree = new CustomerDto(\"3\", \"Lynda\", \"Blair\");\n+    customerResource.save(customerThree);\n+    allCustomers = customerResource.getAllCustomers();\n+    printCustomerDetails(allCustomers);\n+  }\n+\n+  private static void printCustomerDetails(List<CustomerDto> allCustomers) {\n+    allCustomers.forEach(customer -> System.out.println(customer.getFirstName()));\n+  }\n+}\n\ndiff --git a/data-transfer-object/src/test/java/com/iluwatar/datatransfer/CustomerResourceTest.java b/data-transfer-object/src/test/java/com/iluwatar/datatransfer/CustomerResourceTest.java\n--- a/data-transfer-object/src/test/java/com/iluwatar/datatransfer/CustomerResourceTest.java\n+++ b/data-transfer-object/src/test/java/com/iluwatar/datatransfer/CustomerResourceTest.java\n@@ -37,7 +37,7 @@\n public class CustomerResourceTest {\n   @Test\n   public void shouldGetAllCustomers() {\n-    CustomerDto customer = new CustomerDto(\"1\", \"David\", \"Roy\");\n+    CustomerDto customer = new CustomerDto(\"1\", \"Melody\", \"Yates\");\n     List<CustomerDto> customers = new ArrayList<>();\n     customers.add(customer);\n \n@@ -47,26 +47,26 @@ public void shouldGetAllCustomers() {\n \n     assertEquals(allCustomers.size(), 1);\n     assertEquals(allCustomers.get(0).getId(), \"1\");\n-    assertEquals(allCustomers.get(0).getFirstName(), \"David\");\n-    assertEquals(allCustomers.get(0).getLastName(), \"Roy\");\n+    assertEquals(allCustomers.get(0).getFirstName(), \"Melody\");\n+    assertEquals(allCustomers.get(0).getLastName(), \"Yates\");\n   }\n \n   @Test\n   public void shouldSaveCustomer() {\n-    CustomerDto customer = new CustomerDto(\"1\", \"David\", \"Roy\");\n+    CustomerDto customer = new CustomerDto(\"1\", \"Rita\", \"Reynolds\");\n     CustomerResource customerResource = new CustomerResource(new ArrayList<>());\n \n     customerResource.save(customer);\n \n     List<CustomerDto> allCustomers = customerResource.getAllCustomers();\n     assertEquals(allCustomers.get(0).getId(), \"1\");\n-    assertEquals(allCustomers.get(0).getFirstName(), \"David\");\n-    assertEquals(allCustomers.get(0).getLastName(), \"Roy\");\n+    assertEquals(allCustomers.get(0).getFirstName(), \"Rita\");\n+    assertEquals(allCustomers.get(0).getLastName(), \"Reynolds\");\n   }\n \n   @Test\n   public void shouldDeleteCustomer() {\n-    CustomerDto customer = new CustomerDto(\"1\", \"David\", \"Roy\");\n+    CustomerDto customer = new CustomerDto(\"1\", \"Terry\", \"Nguyen\");\n     List<CustomerDto> customers = new ArrayList<>();\n     customers.add(customer);\n ",
    "output": "- Data Tranfer Object : customer client request customer details to server at one shot."
  },
  {
    "input": "diff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java\n@@ -25,14 +25,25 @@\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileReader;\n+import java.io.Serializable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Every instance of this class represents the Model component in the Model-View-Presenter\n  * architectural pattern.\n  * <p>\n  * It is responsible for reading and loading the contents of a given file.\n  */\n-public class FileLoader {\n+public class FileLoader implements Serializable{\n+\n+  /**\n+   * Generated serial version UID\n+   */\n+  private static final long serialVersionUID = -4745803872902019069L;\n+  \n+  private static final Logger LOGGER = LoggerFactory.getLogger(FileLoader.class);\n \n   /**\n    * Indicates if the file is loaded or not.\n@@ -48,7 +59,8 @@ public class FileLoader {\n    * Loads the data of the file specified.\n    */\n   public String loadData() {\n-    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {\n+    String dataFileName = this.fileName;\n+    try (BufferedReader br = new BufferedReader(new FileReader(new File(dataFileName)))) {\n       StringBuilder sb = new StringBuilder();\n       String line;\n \n@@ -60,7 +72,7 @@ public String loadData() {\n \n       return sb.toString();\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"File {} does not exist\", dataFileName);\n     }\n \n     return null;\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorPresenter.java\n@@ -22,13 +22,20 @@\n  */\n package com.iluwatar.model.view.presenter;\n \n+import java.io.Serializable;\n+\n /**\n  * Every instance of this class represents the Presenter component in the Model-View-Presenter\n  * architectural pattern.\n  * <p>\n  * It is responsible for reacting to the user's actions and update the View component.\n  */\n-public class FileSelectorPresenter {\n+public class FileSelectorPresenter implements Serializable{\n+\n+  /**\n+   * Generated serial version UID\n+   */\n+  private static final long serialVersionUID = 1210314339075855074L;\n \n   /**\n    * The View component that the presenter interacts with.\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorView.java\n@@ -22,11 +22,13 @@\n  */\n package com.iluwatar.model.view.presenter;\n \n+import java.io.Serializable;\n+\n /**\n  * This interface represents the View component in the Model-View-Presenter pattern. It can be\n  * implemented by either the GUI components, or by the Stub.\n  */\n-public interface FileSelectorView {\n+public interface FileSelectorView extends Serializable{\n \n   /**\n    * Opens the view.",
    "output": "SonarQube reports bugs"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n@@ -24,6 +24,7 @@ private Author getAuthorByUsername(String username) {\n       author = (Author) query.uniqueResult();\n     }\n     if (author == null) {\n+      HibernateUtil.getSessionFactory().close();\n       throw new NullPointerException(\"Author \" + username + \" doesn't exist!\");\n     }\n     return author;\n@@ -37,6 +38,7 @@ private Book getBookByTitle(String title) {\n       book = (Book) query.uniqueResult();\n     }\n     if (book == null) {\n+      HibernateUtil.getSessionFactory().close();\n       throw new NullPointerException(\"Book \" + title + \" doesn't exist!\");\n     }\n     return book;",
    "output": "Close connection before throwing an exception"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n@@ -23,6 +23,9 @@ private Author getAuthorByUsername(String username) {\n       query.setParameter(\"username\", username);\n       author = (Author) query.uniqueResult();\n     }\n+    if (author == null) {\n+      throw new NullPointerException(\"Author \" + username + \" doesn't exist!\");\n+    }\n     return author;\n   }\n \n@@ -33,6 +36,9 @@ private Book getBookByTitle(String title) {\n       query.setParameter(\"title\", title);\n       book = (Book) query.uniqueResult();\n     }\n+    if (book == null) {\n+      throw new NullPointerException(\"Book \" + title + \" doesn't exist!\");\n+    }\n     return book;\n   }\n ",
    "output": "Add check on null objects"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n@@ -25,6 +25,9 @@\n import java.math.BigInteger;\n import java.util.List;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.iluwatar.cqrs.commandes.CommandServiceImpl;\n import com.iluwatar.cqrs.commandes.ICommandService;\n import com.iluwatar.cqrs.dto.Author;\n@@ -39,6 +42,8 @@\n  *\n  */\n public class App {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n+\n   /**\n    * Program entry point\n    * \n@@ -71,12 +76,12 @@ public static void main(String[] args) {\n     Book dddBook = queries.getBook(\"Domain-Driven Design\");\n     List<Book> jBlochBooks = queries.getAuthorBooks(\"jBloch\");\n \n-    System.out.println(\"Author username : \" + nullAuthor);\n-    System.out.println(\"Author eEvans : \" + eEvans);\n-    System.out.println(\"jBloch number of books : \" + jBlochBooksCount);\n-    System.out.println(\"Number of authors : \" + authorsCount);\n-    System.out.println(\"DDD book : \" + dddBook);\n-    System.out.println(\"jBloch books : \" + jBlochBooks);\n+    LOGGER.info(\"Author username : {}\", nullAuthor);\n+    LOGGER.info(\"Author eEvans : {}\", eEvans);\n+    LOGGER.info(\"jBloch number of books : {}\", jBlochBooksCount);\n+    LOGGER.info(\"Number of authors : {}\", authorsCount);\n+    LOGGER.info(\"DDD book : {}\", dddBook);\n+    LOGGER.info(\"jBloch books : {}\", jBlochBooks);\n \n     HibernateUtil.getSessionFactory().close();\n   }",
    "output": "Use Logger instead of println"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n@@ -71,6 +71,13 @@ public static void main(String[] args) {\n     Book dddBook = queries.getBook(\"Domain-Driven Design\");\n     List<Book> jBlochBooks = queries.getAuthorBooks(\"jBloch\");\n \n+    System.out.println(\"Author username : \" + nullAuthor);\n+    System.out.println(\"Author eEvans : \" + eEvans);\n+    System.out.println(\"jBloch number of books : \" + jBlochBooksCount);\n+    System.out.println(\"Number of authors : \" + authorsCount);\n+    System.out.println(\"DDD book : \" + dddBook);\n+    System.out.println(\"jBloch books : \" + jBlochBooks);\n+\n     HibernateUtil.getSessionFactory().close();\n   }\n \n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java\n@@ -6,18 +6,18 @@\n  */\n public interface ICommandService {\n \n-  public abstract void authorCreated(String username, String name, String email);\n+  void authorCreated(String username, String name, String email);\n \n-  public abstract void bookAddedToAuthor(String title, double price, String username);\n+  void bookAddedToAuthor(String title, double price, String username);\n \n-  public abstract void authorNameUpdated(String username, String name);\n+  void authorNameUpdated(String username, String name);\n \n-  public abstract void authorUsernameUpdated(String oldUsername, String newUsername);\n+  void authorUsernameUpdated(String oldUsername, String newUsername);\n \n-  public abstract void authorEmailUpdated(String username, String email);\n+  void authorEmailUpdated(String username, String email);\n \n-  public abstract void bookTitleUpdated(String oldTitle, String newTitle);\n+  void bookTitleUpdated(String oldTitle, String newTitle);\n \n-  public abstract void bookPriceUpdated(String title, double price);\n+  void bookPriceUpdated(String title, double price);\n \n }\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n@@ -13,14 +13,14 @@\n  */\n public interface IQueryService {\n \n-  public abstract Author getAuthorByUsername(String username);\n+  Author getAuthorByUsername(String username);\n \n-  public abstract Book getBook(String title);\n+  Book getBook(String title);\n \n-  public abstract List<Book> getAuthorBooks(String username);\n+  List<Book> getAuthorBooks(String username);\n \n-  public abstract BigInteger getAuthorBooksCount(String username);\n+  BigInteger getAuthorBooksCount(String username);\n \n-  public abstract BigInteger getAuthorsCount();\n+  BigInteger getAuthorsCount();\n \n }",
    "output": "Fix pmd errors"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Author.java\n@@ -1,5 +1,7 @@\n package com.iluwatar.cqrs.dto;\n \n+import java.util.Objects;\n+\n /**\n  * \n  * This is a DTO (Data Transfer Object) author, contains only useful information to be returned\n@@ -48,4 +50,22 @@ public String toString() {\n     return \"AuthorDTO [name=\" + name + \", email=\" + email + \", username=\" + username + \"]\";\n   }\n \n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(username, name, email);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (!(obj instanceof Author)) {\n+      return false;\n+    }\n+    Author other = (Author) obj;\n+    return username.equals(other.getUsername()) && email.equals(other.getEmail()) && name.equals(other.getName());\n+\n+  }\n+\n }\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/Book.java\n@@ -1,5 +1,7 @@\n package com.iluwatar.cqrs.dto;\n \n+import java.util.Objects;\n+\n /**\n  * \n  * This is a DTO (Data Transfer Object) book, contains only useful information to be returned\n@@ -40,4 +42,21 @@ public String toString() {\n     return \"BookDTO [title=\" + title + \", price=\" + price + \"]\";\n   }\n \n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(title, price);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (!(obj instanceof Book)) {\n+      return false;\n+    }\n+    Book book = (Book) obj;\n+    return title.equals(book.getTitle()) && price == book.getPrice();\n+  }\n+\n }",
    "output": "Add hashCode and equals to Author and Book DTOs"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/app/App.java\n@@ -1,10 +1,54 @@\n package com.iluwatar.cqrs.app;\n \n-public class App {\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.iluwatar.cqrs.commandes.CommandServiceImpl;\n+import com.iluwatar.cqrs.commandes.ICommandService;\n+import com.iluwatar.cqrs.dto.Author;\n+import com.iluwatar.cqrs.dto.Book;\n+import com.iluwatar.cqrs.queries.IQueryService;\n+import com.iluwatar.cqrs.queries.QueryServiceImpl;\n+import com.iluwatar.cqrs.util.HibernateUtil;\n \n+/**\n+ * This is the entry of the application\n+ *\n+ */\n+public class App {\n+  /**\n+   * Program entry point\n+   * \n+   * @param args\n+   *          command line args\n+   */\n   public static void main(String[] args) {\n-    // TODO Auto-generated method stub\n+    ICommandService commands = new CommandServiceImpl();\n+\n+    // Create Authors and Books using CommandService\n+    commands.authorCreated(\"eEvans\", \"Eric Evans\", \"eEvans@email.com\");\n+    commands.authorCreated(\"jBloch\", \"Joshua Bloch\", \"jBloch@email.com\");\n+    commands.authorCreated(\"mFowler\", \"Martin Fowler\", \"mFowler@email.com\");\n+\n+    commands.bookAddedToAuthor(\"Domain-Driven Design\", 60.08, \"eEvans\");\n+    commands.bookAddedToAuthor(\"Effective Java\", 40.54, \"jBloch\");\n+    commands.bookAddedToAuthor(\"Java Puzzlers\", 39.99, \"jBloch\");\n+    commands.bookAddedToAuthor(\"Java Concurrency in Practice\", 29.40, \"jBloch\");\n+    commands.bookAddedToAuthor(\"Patterns of Enterprise Application Architecture\", 54.01, \"mFowler\");\n+    commands.bookAddedToAuthor(\"Domain Specific Languages\", 48.89, \"mFowler\");\n+    commands.authorNameUpdated(\"eEvans\", \"Eric J. Evans\");\n+\n+    IQueryService queries = new QueryServiceImpl();\n+\n+    // Query the database using QueryService\n+    Author nullAuthor = queries.getAuthorByUsername(\"username\");\n+    Author eEvans = queries.getAuthorByUsername(\"eEvans\");\n+    BigInteger jBlochBooksCount = queries.getAuthorBooksCount(\"jBloch\");\n+    BigInteger authorsCount = queries.getAuthorsCount();\n+    Book dddBook = queries.getBook(\"Domain-Driven Design\");\n+    List<Book> jBlochBooks = queries.getAuthorBooks(\"jBloch\");\n \n+    HibernateUtil.getSessionFactory().close();\n   }\n \n }",
    "output": "Create main class"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n@@ -0,0 +1,111 @@\n+package com.iluwatar.cqrs.commandes;\n+\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import com.iluwatar.cqrs.domain.model.Author;\n+import com.iluwatar.cqrs.domain.model.Book;\n+import com.iluwatar.cqrs.util.HibernateUtil;\n+\n+public class CommandServiceImpl implements ICommandService {\n+\n+  private SessionFactory sessionFactory = HibernateUtil.getSessionFactory();\n+\n+  private Author getAuthorByUsername(String username) {\n+    Session session = sessionFactory.openSession();\n+    Query query = session.createQuery(\"from Author where username=:username\");\n+    query.setParameter(\"username\", username);\n+    Author author = (Author) query.uniqueResult();\n+    session.close();\n+    return author;\n+  }\n+\n+  private Book getBookByTitle(String title) {\n+    Session session = sessionFactory.openSession();\n+    Query query = session.createQuery(\"from Book where title=:title\");\n+    query.setParameter(\"title\", title);\n+    Book book = (Book) query.uniqueResult();\n+    session.close();\n+    return book;\n+  }\n+\n+  @Override\n+  public void authorCreated(String username, String name, String email) {\n+    Author author = new Author(username, name, email);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.save(author);\n+    session.getTransaction().commit();\n+    session.close();\n+  }\n+\n+  @Override\n+  public void bookAddedToAuthor(String title, double price, String username) {\n+    Author author = getAuthorByUsername(username);\n+    Book book = new Book(title, price, author);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.save(book);\n+    session.getTransaction().commit();\n+    session.close();\n+  }\n+\n+  @Override\n+  public void authorNameUpdated(String username, String name) {\n+    Author author = getAuthorByUsername(username);\n+    author.setName(name);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.update(author);\n+    session.getTransaction().commit();\n+    session.close();\n+  }\n+\n+  @Override\n+  public void authorUsernameUpdated(String oldUsername, String newUsername) {\n+    Author author = getAuthorByUsername(oldUsername);\n+    author.setUsername(newUsername);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.update(author);\n+    session.getTransaction().commit();\n+    session.close();\n+\n+  }\n+\n+  @Override\n+  public void authorEmailUpdated(String username, String email) {\n+    Author author = getAuthorByUsername(username);\n+    author.setEmail(email);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.update(author);\n+    session.getTransaction().commit();\n+    session.close();\n+\n+  }\n+\n+  @Override\n+  public void bookTitleUpdated(String oldTitle, String newTitle) {\n+    Book book = getBookByTitle(oldTitle);\n+    book.setTitle(newTitle);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.update(book);\n+    session.getTransaction().commit();\n+    session.close();\n+  }\n+\n+  @Override\n+  public void bookPriceUpdated(String title, double price) {\n+    Book book = getBookByTitle(title);\n+    book.setPrice(price);\n+    Session session = sessionFactory.openSession();\n+    session.beginTransaction();\n+    session.update(book);\n+    session.getTransaction().commit();\n+    session.close();\n+  }\n+\n+}\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java b/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java\n@@ -0,0 +1,74 @@\n+package com.iluwatar.cqrs.queries;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import org.hibernate.SQLQuery;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.transform.Transformers;\n+\n+import com.iluwatar.cqrs.dto.AuthorDTO;\n+import com.iluwatar.cqrs.dto.BookDTO;\n+import com.iluwatar.cqrs.util.HibernateUtil;\n+\n+public class QueryServiceImpl implements IQueryService {\n+\n+  private SessionFactory sessionFactory = HibernateUtil.getSessionFactory();\n+\n+  @Override\n+  public AuthorDTO getAuthorByUsername(String username) {\n+    Session session = sessionFactory.openSession();\n+    SQLQuery sqlQuery = session\n+        .createSQLQuery(\"SELECT a.username as \\\"username\\\", a.name as \\\"name\\\", a.email as \\\"email\\\"\"\n+            + \"FROM Author a where a.username=:username\");\n+    sqlQuery.setParameter(\"username\", username);\n+    AuthorDTO authorDTO = (AuthorDTO) sqlQuery.setResultTransformer(Transformers.aliasToBean(AuthorDTO.class))\n+        .uniqueResult();\n+    session.close();\n+    return authorDTO;\n+  }\n+\n+  @Override\n+  public BookDTO getBook(String title) {\n+    Session session = sessionFactory.openSession();\n+    SQLQuery sqlQuery = session\n+        .createSQLQuery(\"SELECT b.title as \\\"title\\\", b.price as \\\"price\\\"\" + \" FROM Book b where b.title=:title\");\n+    sqlQuery.setParameter(\"title\", title);\n+    BookDTO bookDTO = (BookDTO) sqlQuery.setResultTransformer(Transformers.aliasToBean(BookDTO.class)).uniqueResult();\n+    session.close();\n+    return bookDTO;\n+  }\n+\n+  @Override\n+  public List<BookDTO> getAuthorBooks(String username) {\n+    Session session = sessionFactory.openSession();\n+    SQLQuery sqlQuery = session.createSQLQuery(\"SELECT b.title as \\\"title\\\", b.price as \\\"price\\\"\"\n+        + \" FROM Author a , Book b where b.author_id = a.id and a.username=:username\");\n+    sqlQuery.setParameter(\"username\", username);\n+    List<BookDTO> bookDTOs = sqlQuery.setResultTransformer(Transformers.aliasToBean(BookDTO.class)).list();\n+    session.close();\n+    return bookDTOs;\n+  }\n+\n+  @Override\n+  public BigInteger getAuthorBooksCount(String username) {\n+    Session session = sessionFactory.openSession();\n+    SQLQuery sqlQuery = session.createSQLQuery(\n+        \"SELECT count(b.title)\" + \" FROM  Book b, Author a where b.author_id = a.id and a.username=:username\");\n+    sqlQuery.setParameter(\"username\", username);\n+    BigInteger bookcount = (BigInteger) sqlQuery.uniqueResult();\n+    session.close();\n+    return bookcount;\n+  }\n+\n+  @Override\n+  public BigInteger getAuthorsCount() {\n+    Session session = sessionFactory.openSession();\n+    SQLQuery sqlQuery = session.createSQLQuery(\"SELECT count(id) from Author\");\n+    BigInteger authorcount = (BigInteger) sqlQuery.uniqueResult();\n+    session.close();\n+    return authorcount;\n+  }\n+\n+}",
    "output": "Add ICommandService and IQueriesService Implementations"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n@@ -1,5 +1,6 @@\n package com.iluwatar.cqrs.queries;\n \n+import java.math.BigInteger;\n import java.util.List;\n \n import com.iluwatar.cqrs.dto.AuthorDTO;\n@@ -9,12 +10,12 @@ public interface IQueryService {\n \n   public abstract AuthorDTO getAuthorByUsername(String username);\n \n-  public abstract Double getBookPrice(String title);\n+  public abstract BookDTO getBook(String title);\n \n   public abstract List<BookDTO> getAuthorBooks(String username);\n \n-  public abstract long getAuthorBooksCount(String username);\n+  public abstract BigInteger getAuthorBooksCount(String username);\n \n-  public abstract long getAuthorsCount();\n+  public abstract BigInteger getAuthorsCount();\n \n }",
    "output": "Change long with BigIntger and replace getBook()"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java b/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java\n@@ -23,4 +23,9 @@ public double getPrice() {\n     return price;\n   }\n \n+  @Override\n+  public String toString() {\n+    return \"BookDTO [title=\" + title + \", price=\" + price + \"]\";\n+  }\n+\n }",
    "output": "Add toString() to BookDTO"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/ICommandService.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar.cqrs.commandes;\n+\n+public interface ICommandService {\n+\n+  public abstract void authorCreated(String username, String name, String email);\n+\n+  public abstract void bookAddedToAuthor(String title, double price, String username);\n+\n+  public abstract void authorNameUpdated(String username, String name);\n+\n+  public abstract void authorUsernameUpdated(String oldUsername, String newUsername);\n+\n+  public abstract void authorEmailUpdated(String username, String email);\n+\n+  public abstract void bookTitleUpdated(String oldTitle, String newTitle);\n+\n+  public abstract void bookPriceUpdated(String title, double price);\n+\n+}\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar.cqrs.queries;\n+\n+import java.util.List;\n+\n+import com.iluwatar.cqrs.dto.AuthorDTO;\n+import com.iluwatar.cqrs.dto.BookDTO;\n+\n+public interface IQueryService {\n+\n+  public abstract AuthorDTO getAuthorByUsername(String username);\n+\n+  public abstract Double getBookPrice(String title);\n+\n+  public abstract List<BookDTO> getAuthorBooks(String username);\n+\n+  public abstract long getAuthorBooksCount(String username);\n+\n+  public abstract long getAuthorsCount();\n+\n+}",
    "output": "Add Queries and Commands Interfaces"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n@@ -32,26 +32,42 @@ public Author(String username, String name, String email) {\n     this.email = email;\n   }\n \n-  public Author() {\n+  protected Author() {\n     super();\n   }\n \n   public long getId() {\n     return id;\n   }\n \n+  public void setId(long id) {\n+    this.id = id;\n+  }\n+\n   public String getUsername() {\n     return username;\n   }\n \n+  public void setUsername(String username) {\n+    this.username = username;\n+  }\n+\n   public String getName() {\n     return name;\n   }\n \n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n   public String getEmail() {\n     return email;\n   }\n \n+  public void setEmail(String email) {\n+    this.email = email;\n+  }\n+\n   @Override\n   public String toString() {\n     return \"Author [name=\" + name + \", email=\" + email + \"]\";\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n@@ -34,26 +34,42 @@ public Book(String title, double price, Author author) {\n     this.author = author;\n   }\n \n-  public Book() {\n+  protected Book() {\n     super();\n   }\n \n   public long getId() {\n     return id;\n   }\n \n+  public void setId(long id) {\n+    this.id = id;\n+  }\n+\n   public String getTitle() {\n     return title;\n   }\n \n+  public void setTitle(String title) {\n+    this.title = title;\n+  }\n+\n   public double getPrice() {\n     return price;\n   }\n \n+  public void setPrice(double price) {\n+    this.price = price;\n+  }\n+\n   public Author getAuthor() {\n     return author;\n   }\n \n+  public void setAuthor(Author author) {\n+    this.author = author;\n+  }\n+\n   @Override\n   public String toString() {\n     return \"Book [title=\" + title + \", price=\" + price + \", author=\" + author + \"]\";",
    "output": "Add setters and protected no-arg constructor"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java b/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java\n@@ -0,0 +1,36 @@\n+package com.iluwatar.cqrs.util;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.boot.MetadataSources;\n+import org.hibernate.boot.registry.StandardServiceRegistry;\n+import org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n+\n+/**\n+ * \n+ * @author Sabiq Ihab\n+ *\n+ */\n+public class HibernateUtil {\n+\n+  private static final SessionFactory SESSIONFACTORY = buildSessionFactory();\n+\n+  private static SessionFactory buildSessionFactory() {\n+    // A SessionFactory is set up once for an application!\n+    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure() // configures settings //\n+                                                                                              // from hibernate.cfg.xml\n+        .build();\n+    try {\n+      return new MetadataSources(registry).buildMetadata().buildSessionFactory();\n+    } catch (Throwable ex) {\n+      StandardServiceRegistryBuilder.destroy(registry);\n+      // TODO HibernateUtil : change print with logger\n+      System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n+      throw new ExceptionInInitializerError(ex);\n+    }\n+  }\n+\n+  public static SessionFactory getSessionFactory() {\n+    return SESSIONFACTORY;\n+  }\n+\n+}",
    "output": "Add hibernate.cfg and HibernateUtil class"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Author.java\n@@ -0,0 +1,60 @@\n+package com.iluwatar.cqrs.domain.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+/**\n+ * \n+ * @author Sabiq Ihab\n+ *\n+ */\n+@Entity\n+public class Author {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private long id;\n+  private String username;\n+  private String name;\n+  private String email;\n+\n+  /**\n+   * \n+   * @param username\n+   * @param name\n+   * @param email\n+   */\n+  public Author(String username, String name, String email) {\n+    super();\n+    this.username = username;\n+    this.name = name;\n+    this.email = email;\n+  }\n+\n+  public Author() {\n+    super();\n+  }\n+\n+  public long getId() {\n+    return id;\n+  }\n+\n+  public String getUsername() {\n+    return username;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getEmail() {\n+    return email;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"Author [name=\" + name + \", email=\" + email + \"]\";\n+  }\n+\n+}\n\ndiff --git a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/domain/model/Book.java\n@@ -0,0 +1,62 @@\n+package com.iluwatar.cqrs.domain.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+\n+/**\n+ * \n+ * @author Sabiq Ihab\n+ *\n+ */\n+@Entity\n+public class Book {\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private long id;\n+  private String title;\n+  private double price;\n+  @ManyToOne\n+  private Author author;\n+\n+  /**\n+   * \n+   * @param title\n+   * @param price\n+   * @param author\n+   */\n+  public Book(String title, double price, Author author) {\n+    super();\n+    this.title = title;\n+    this.price = price;\n+    this.author = author;\n+  }\n+\n+  public Book() {\n+    super();\n+  }\n+\n+  public long getId() {\n+    return id;\n+  }\n+\n+  public String getTitle() {\n+    return title;\n+  }\n+\n+  public double getPrice() {\n+    return price;\n+  }\n+\n+  public Author getAuthor() {\n+    return author;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"Book [title=\" + title + \", price=\" + price + \", author=\" + author + \"]\";\n+  }\n+\n+}",
    "output": "Create data model"
  },
  {
    "input": "diff --git a/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java b/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java\n--- a/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java\n+++ b/thread-pool/src/test/java/com/iluwatar/threadpool/TaskTest.java\n@@ -34,6 +34,8 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.function.ToIntFunction;\n import java.util.stream.Collectors;\n import org.junit.Test;\n \n@@ -58,7 +60,7 @@ public abstract class TaskTest<T extends Task> {\n   /**\n    * The task factory, used to create new test items\n    */\n-  private final Function<Integer, T> factory;\n+  private final IntFunction<T> factory;\n \n   /**\n    * The expected time needed to run the task 1 single time, in milli seconds\n@@ -71,7 +73,7 @@ public abstract class TaskTest<T extends Task> {\n    * @param factory               The task factory, used to create new test items\n    * @param expectedExecutionTime The expected time needed to run the task 1 time, in milli seconds\n    */\n-  public TaskTest(final Function<Integer, T> factory, final int expectedExecutionTime) {\n+  public TaskTest(final IntFunction<T> factory, final int expectedExecutionTime) {\n     this.factory = factory;\n     this.expectedExecutionTime = expectedExecutionTime;\n   }",
    "output": "Refactor Function<Integer,T> to IntFunction<T>."
  },
  {
    "input": "diff --git a/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java\n--- a/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java\n+++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java\n@@ -28,6 +28,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.function.BiFunction;\n+import java.util.function.IntBinaryOperator;\n+\n import org.junit.Test;\n \n /**\n@@ -45,14 +47,14 @@ public abstract class ExpressionTest<E extends Expression> {\n    * @param resultCalc The function used to calculate the expected result\n    * @return A data set with test entries\n    */\n-  static List<Object[]> prepareParameters(final BiFunction<Integer, Integer, Integer> resultCalc) {\n+  static List<Object[]> prepareParameters(final IntBinaryOperator resultCalc) {\n     final List<Object[]> testData = new ArrayList<>();\n     for (int i = -10; i < 10; i++) {\n       for (int j = -10; j < 10; j++) {\n         testData.add(new Object[]{\n             new NumberExpression(i),\n             new NumberExpression(j),\n-            resultCalc.apply(i, j)\n+            resultCalc.applyAsInt(i, j)\n         });\n       }\n     }",
    "output": "Refactor the Functional Interface to the Specialized Functional Interface."
  },
  {
    "input": "diff --git a/extension-objects/src/main/java/App.java b/extension-objects/src/main/java/App.java\n--- a/extension-objects/src/main/java/App.java\n+++ b/extension-objects/src/main/java/App.java\n@@ -5,6 +5,8 @@\n import units.SergeantUnit;\n import units.SoldierUnit;\n import units.Unit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Created by Srdjan on 26-Apr-17.\n@@ -19,20 +21,19 @@ public class App {\n   public static void main(String[] args) {\n \n     //Create 3 different units\n-    Unit unit = new SoldierUnit(\"SoldierUnit1\");\n-    Unit unit1 = new SergeantUnit(\"SergeantUnit1\");\n-    Unit unit2 = new CommanderUnit(\"CommanderUnit1\");\n+    Unit soldierUnit = new SoldierUnit(\"SoldierUnit1\");\n+    Unit sergeantUnit = new SergeantUnit(\"SergeantUnit1\");\n+    Unit commanderUnit = new CommanderUnit(\"CommanderUnit1\");\n \n     //check for each unit to have an extension\n-    checkExtensionsForUnit(unit);\n-    checkExtensionsForUnit(unit1);\n-    checkExtensionsForUnit(unit2);\n+    checkExtensionsForUnit(soldierUnit);\n+    checkExtensionsForUnit(sergeantUnit);\n+    checkExtensionsForUnit(commanderUnit);\n \n   }\n \n   private static void checkExtensionsForUnit(Unit unit) {\n-    //separate for better view\n-    System.out.println();\n+    final Logger logger = LoggerFactory.getLogger(App.class);\n \n     SoldierExtension soldierExtension = (SoldierExtension) unit.getUnitExtension(\"SoldierExtension\");\n     SergeantExtension sergeantExtension = (SergeantExtension) unit.getUnitExtension(\"SergeantExtension\");\n@@ -42,19 +43,19 @@ private static void checkExtensionsForUnit(Unit unit) {\n     if (soldierExtension != null) {\n       soldierExtension.soldierReady();\n     } else {\n-      System.out.println(unit.getName() + \" without SoldierExtension\");\n+      logger.info(unit.getName() + \" without SoldierExtension\");\n     }\n \n     if (sergeantExtension != null) {\n       sergeantExtension.sergeantReady();\n     } else {\n-      System.out.println(unit.getName() + \" without SergeantExtension\");\n+      logger.info(unit.getName() + \" without SergeantExtension\");\n     }\n \n     if (commanderExtension != null) {\n       commanderExtension.commanderReady();\n     } else {\n-      System.out.println(unit.getName() + \" without CommanderExtension\");\n+      logger.info(unit.getName() + \" without CommanderExtension\");\n     }\n   }\n }\n\ndiff --git a/extension-objects/src/main/java/concreteextensions/Commander.java b/extension-objects/src/main/java/concreteextensions/Commander.java\n--- a/extension-objects/src/main/java/concreteextensions/Commander.java\n+++ b/extension-objects/src/main/java/concreteextensions/Commander.java\n@@ -1,6 +1,8 @@\n package concreteextensions;\n \n import abstractextensions.CommanderExtension;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import units.CommanderUnit;\n \n /**\n@@ -14,8 +16,10 @@ public Commander(CommanderUnit commanderUnit) {\n     this.unit = commanderUnit;\n   }\n \n+  final Logger logger = LoggerFactory.getLogger(Commander.class);\n+\n   @Override\n   public void commanderReady() {\n-    System.out.println(\"[Commander] \" + unit.getName() + \" is ready!\");\n+    logger.info(\"[Commander] \" + unit.getName() + \" is ready!\");\n   }\n }\n\ndiff --git a/extension-objects/src/main/java/concreteextensions/Sergeant.java b/extension-objects/src/main/java/concreteextensions/Sergeant.java\n--- a/extension-objects/src/main/java/concreteextensions/Sergeant.java\n+++ b/extension-objects/src/main/java/concreteextensions/Sergeant.java\n@@ -1,6 +1,8 @@\n package concreteextensions;\n \n import abstractextensions.SergeantExtension;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import units.SergeantUnit;\n \n /**\n@@ -14,8 +16,10 @@ public Sergeant(SergeantUnit sergeantUnit) {\n     this.unit = sergeantUnit;\n   }\n \n+  final Logger logger = LoggerFactory.getLogger(Sergeant.class);\n+\n   @Override\n   public void sergeantReady() {\n-    System.out.println(\"[Sergeant] \" + unit.getName() + \" is ready! \");\n+    logger.info(\"[Sergeant] \" + unit.getName() + \" is ready! \");\n   }\n }\n\ndiff --git a/extension-objects/src/main/java/concreteextensions/Soldier.java b/extension-objects/src/main/java/concreteextensions/Soldier.java\n--- a/extension-objects/src/main/java/concreteextensions/Soldier.java\n+++ b/extension-objects/src/main/java/concreteextensions/Soldier.java\n@@ -1,6 +1,8 @@\n package concreteextensions;\n \n import abstractextensions.SoldierExtension;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import units.SoldierUnit;\n \n /**\n@@ -14,8 +16,10 @@ public Soldier(SoldierUnit soldierUnit) {\n     this.unit = soldierUnit;\n   }\n \n+  final Logger logger = LoggerFactory.getLogger(Soldier.class);\n+\n   @Override\n   public void soldierReady() {\n-    System.out.println(\"[Solider] \" + unit.getName() + \"  is ready!\");\n+    logger.info(\"[Solider] \" + unit.getName() + \"  is ready!\");\n   }\n }",
    "output": "Replase system.println with logger"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -33,7 +33,12 @@ public final class ThreadSafeLazyLoadedIvoryTower {\n \n   private static ThreadSafeLazyLoadedIvoryTower instance;\n \n-  private ThreadSafeLazyLoadedIvoryTower() {}\n+  private ThreadSafeLazyLoadedIvoryTower() {\n+  // to prevent instantiating by Reflection call\n+    if (instance != null) {\n+      throw new IllegalStateException(\"Already initialized.\");\n+    }\n+  }\n \n   /**\n    * The instance gets created only when it is called for first time. Lazy-loading",
    "output": "Upgrade ThreadSafeLazyLoadedivoryTower Added null check in private constructor to prevent instantiating by Reflection call"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -1,3 +1,6 @@\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Created by Alexis on 28-Apr-17.\n  * With Marker interface idea is to make empty interface and extend it.\n@@ -25,13 +28,14 @@ public class App {\n    */\n   public static void main(String[] args) {\n \n+    final Logger logger = LoggerFactory.getLogger(App.class);\n     Guard guard = new Guard();\n     Thief thief = new Thief();\n \n     if (guard instanceof Permission) {\n       guard.enter();\n     } else {\n-      System.out.println(\"You have no permission to enter, please leave this area\");\n+      logger.info(\"You have no permission to enter, please leave this area\");\n     }\n \n     if (thief instanceof Permission) {\n\ndiff --git a/marker/src/main/java/Guard.java b/marker/src/main/java/Guard.java\n--- a/marker/src/main/java/Guard.java\n+++ b/marker/src/main/java/Guard.java\n@@ -1,10 +1,15 @@\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n- * Created by Alexis on 29-Apr-17.\n+ * Class defining Guard\n  */\n public class Guard implements Permission {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(Guard.class);\n+\n   protected static void enter() {\n-    System.out.println(\"You can enter\");\n-  }\n \n+    LOGGER.info(\"You can enter\");\n+  }\n }\n\ndiff --git a/marker/src/main/java/Permission.java b/marker/src/main/java/Permission.java\n--- a/marker/src/main/java/Permission.java\n+++ b/marker/src/main/java/Permission.java\n@@ -1,5 +1,4 @@\n /**\n- * Created by Alexis on 29-Apr-17.\n  * Interface without any methods\n  * Marker interface is based on that assumption\n  */\n\ndiff --git a/marker/src/main/java/Thief.java b/marker/src/main/java/Thief.java\n--- a/marker/src/main/java/Thief.java\n+++ b/marker/src/main/java/Thief.java\n@@ -1,12 +1,18 @@\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n- * Created by Alexis on 02-May-17.\n+ * Class defining Thief\n  */\n public class Thief {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(Thief.class);\n+\n   protected static void steal() {\n-    System.out.println(\"Steal valuable items\");\n+    LOGGER.info(\"Steal valuable items\");\n   }\n \n   protected static void doNothing() {\n-    System.out.println(\"Pretend nothing happened and just leave\");\n+    LOGGER.info(\"Pretend nothing happened and just leave\");\n   }\n }\n\ndiff --git a/marker/src/test/java/AppTest.java b/marker/src/test/java/AppTest.java\n--- a/marker/src/test/java/AppTest.java\n+++ b/marker/src/test/java/AppTest.java\n@@ -1,7 +1,3 @@\n-/**\n- * Created by Alexis on 01-May-17.\n- */\n-\n import org.junit.Test;\n \n /**\n\ndiff --git a/marker/src/test/java/GuardTest.java b/marker/src/test/java/GuardTest.java\n--- a/marker/src/test/java/GuardTest.java\n+++ b/marker/src/test/java/GuardTest.java\n@@ -4,7 +4,7 @@\n import static org.junit.Assert.assertThat;\n \n /**\n- * Created by Alexis on 02-May-17.\n+ * Guard test\n  */\n public class GuardTest {\n \n@@ -13,4 +13,4 @@ public void testGuard() {\n     Guard guard = new Guard();\n     assertThat(guard, instanceOf(Permission.class));\n   }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/marker/src/test/java/ThiefTest.java b/marker/src/test/java/ThiefTest.java\n--- a/marker/src/test/java/ThiefTest.java\n+++ b/marker/src/test/java/ThiefTest.java\n@@ -3,12 +3,12 @@\n import static org.junit.Assert.assertFalse;\n \n /**\n- * Created by Alexis on 02-May-17.\n+ * Thief test\n  */\n public class ThiefTest {\n   @Test\n-  public void testGuard() {\n+  public void testThief() {\n     Thief thief = new Thief();\n     assertFalse(thief instanceof Permission);\n   }\n-}\n+}\n\\ No newline at end of file",
    "output": "Fix version and javadoc"
  },
  {
    "input": "diff --git a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n--- a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n@@ -132,16 +132,18 @@ public static void update() {\n     }\n     Clip clip = null;\n     try {\n+      headIndex++;\n       clip = AudioSystem.getClip();\n       clip.open(getPendingAudio()[headIndex].stream);\n       clip.start();\n-      headIndex++;\n     } catch (LineUnavailableException e) {\n       System.err.println(\"Error occoured while loading the audio: The line is unavailable\");\n       e.printStackTrace();\n     } catch (IOException e) {\n       System.err.println(\"Input/Output error while loading the audio\");\n       e.printStackTrace();\n+    } catch (IllegalArgumentException e) {\n+      System.err.println(\"The system doesn't support the sound: \" + e.getMessage());\n     }\n   }\n ",
    "output": "Compatibility fix\nWhen the system is not capable to play the sound, do not throw\nexception, just log it. For example on Linux there are several issues to\nplay sound and there are no workarounds for that :("
  },
  {
    "input": "diff --git a/extension-objects/src/main/java/units/CommanderUnit.java b/extension-objects/src/main/java/units/CommanderUnit.java\n--- a/extension-objects/src/main/java/units/CommanderUnit.java\n+++ b/extension-objects/src/main/java/units/CommanderUnit.java\n@@ -1,6 +1,5 @@\n package units;\n \n-import abstractextensions.CommanderExtension;\n import abstractextensions.UnitExtension;\n import concreteextensions.Commander;\n \n\ndiff --git a/extension-objects/src/main/java/units/SergeantUnit.java b/extension-objects/src/main/java/units/SergeantUnit.java\n--- a/extension-objects/src/main/java/units/SergeantUnit.java\n+++ b/extension-objects/src/main/java/units/SergeantUnit.java\n@@ -1,6 +1,5 @@\n package units;\n \n-import abstractextensions.SergeantExtension;\n import abstractextensions.UnitExtension;\n import concreteextensions.Sergeant;\n \n\ndiff --git a/extension-objects/src/main/java/units/SoldierUnit.java b/extension-objects/src/main/java/units/SoldierUnit.java\n--- a/extension-objects/src/main/java/units/SoldierUnit.java\n+++ b/extension-objects/src/main/java/units/SoldierUnit.java\n@@ -1,6 +1,5 @@\n package units;\n \n-import abstractextensions.SoldierExtension;\n import abstractextensions.UnitExtension;\n import concreteextensions.Soldier;\n \n\ndiff --git a/extension-objects/src/test/java/AppTest.java b/extension-objects/src/test/java/AppTest.java\n--- a/extension-objects/src/test/java/AppTest.java\n+++ b/extension-objects/src/test/java/AppTest.java\n@@ -1,7 +1,5 @@\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * Created by Srdjan on 03-May-17.\n  */\n\ndiff --git a/extension-objects/src/test/java/concreteextensions/CommanderTest.java b/extension-objects/src/test/java/concreteextensions/CommanderTest.java\n--- a/extension-objects/src/test/java/concreteextensions/CommanderTest.java\n+++ b/extension-objects/src/test/java/concreteextensions/CommanderTest.java\n@@ -3,8 +3,6 @@\n import org.junit.Test;\n import units.CommanderUnit;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * Created by Srdjan on 03-May-17.\n  */\n\ndiff --git a/extension-objects/src/test/java/concreteextensions/SergeantTest.java b/extension-objects/src/test/java/concreteextensions/SergeantTest.java\n--- a/extension-objects/src/test/java/concreteextensions/SergeantTest.java\n+++ b/extension-objects/src/test/java/concreteextensions/SergeantTest.java\n@@ -3,8 +3,6 @@\n import org.junit.Test;\n import units.SergeantUnit;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * Created by Srdjan on 03-May-17.\n  */\n\ndiff --git a/extension-objects/src/test/java/concreteextensions/SoldierTest.java b/extension-objects/src/test/java/concreteextensions/SoldierTest.java\n--- a/extension-objects/src/test/java/concreteextensions/SoldierTest.java\n+++ b/extension-objects/src/test/java/concreteextensions/SoldierTest.java\n@@ -3,8 +3,6 @@\n import org.junit.Test;\n import units.SoldierUnit;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * Created by Srdjan on 03-May-17.\n  */\n\ndiff --git a/extension-objects/src/test/java/units/CommanderUnitTest.java b/extension-objects/src/test/java/units/CommanderUnitTest.java\n--- a/extension-objects/src/test/java/units/CommanderUnitTest.java\n+++ b/extension-objects/src/test/java/units/CommanderUnitTest.java\n@@ -3,7 +3,8 @@\n import abstractextensions.CommanderExtension;\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Created by Srdjan on 03-May-17.\n@@ -16,7 +17,7 @@ public void getUnitExtension() throws Exception {\n \n     assertNull(unit.getUnitExtension(\"SoldierExtension\"));\n     assertNull(unit.getUnitExtension(\"SergeantExtension\"));\n-    assertNotNull((CommanderExtension)unit.getUnitExtension(\"CommanderExtension\"));\n+    assertNotNull((CommanderExtension) unit.getUnitExtension(\"CommanderExtension\"));\n   }\n \n }\n\\ No newline at end of file\n\ndiff --git a/extension-objects/src/test/java/units/SergeantUnitTest.java b/extension-objects/src/test/java/units/SergeantUnitTest.java\n--- a/extension-objects/src/test/java/units/SergeantUnitTest.java\n+++ b/extension-objects/src/test/java/units/SergeantUnitTest.java\n@@ -3,7 +3,8 @@\n import abstractextensions.SergeantExtension;\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Created by Srdjan on 03-May-17.\n@@ -15,7 +16,7 @@ public void getUnitExtension() throws Exception {\n     final Unit unit = new SergeantUnit(\"SergeantUnitName\");\n \n     assertNull(unit.getUnitExtension(\"SoldierExtension\"));\n-    assertNotNull((SergeantExtension)unit.getUnitExtension(\"SergeantExtension\"));\n+    assertNotNull((SergeantExtension) unit.getUnitExtension(\"SergeantExtension\"));\n     assertNull(unit.getUnitExtension(\"CommanderExtension\"));\n   }\n \n\ndiff --git a/extension-objects/src/test/java/units/SoldierUnitTest.java b/extension-objects/src/test/java/units/SoldierUnitTest.java\n--- a/extension-objects/src/test/java/units/SoldierUnitTest.java\n+++ b/extension-objects/src/test/java/units/SoldierUnitTest.java\n@@ -3,7 +3,8 @@\n import abstractextensions.SoldierExtension;\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Created by Srdjan on 03-May-17.\n@@ -14,7 +15,7 @@ public void getUnitExtension() throws Exception {\n \n     final Unit unit = new SoldierUnit(\"SoldierUnitName\");\n \n-    assertNotNull((SoldierExtension)unit.getUnitExtension(\"SoldierExtension\"));\n+    assertNotNull((SoldierExtension) unit.getUnitExtension(\"SoldierExtension\"));\n     assertNull(unit.getUnitExtension(\"SergeantExtension\"));\n     assertNull(unit.getUnitExtension(\"CommanderExtension\"));\n \n\ndiff --git a/extension-objects/src/test/java/units/UnitTest.java b/extension-objects/src/test/java/units/UnitTest.java\n--- a/extension-objects/src/test/java/units/UnitTest.java\n+++ b/extension-objects/src/test/java/units/UnitTest.java\n@@ -1,10 +1,9 @@\n package units;\n \n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Created by Srdjan on 03-May-17.\n@@ -15,11 +14,11 @@ public class UnitTest {\n   public void testConstGetSet() throws Exception {\n     final String name = \"testName\";\n     final Unit unit = new Unit(name);\n-    assertEquals(name,unit.getName());\n+    assertEquals(name, unit.getName());\n \n     final String newName = \"newName\";\n     unit.setName(newName);\n-    assertEquals(newName,unit.getName());\n+    assertEquals(newName, unit.getName());\n \n \n     assertNull(unit.getUnitExtension(\"\"));",
    "output": "Fix checkstyle errors"
  },
  {
    "input": "diff --git a/extension-objects/src/main/java/units/CommanderUnit.java b/extension-objects/src/main/java/units/CommanderUnit.java\n--- a/extension-objects/src/main/java/units/CommanderUnit.java\n+++ b/extension-objects/src/main/java/units/CommanderUnit.java\n@@ -9,8 +9,6 @@\n  */\n public class CommanderUnit extends Unit {\n \n-  private CommanderExtension commanderExtension;\n-\n   public CommanderUnit(String name) {\n     super(name);\n   }\n@@ -19,10 +17,10 @@ public CommanderUnit(String name) {\n   public UnitExtension getUnitExtension(String extensionName) {\n \n     if (extensionName.equals(\"CommanderExtension\")) {\n-      if (commanderExtension == null) {\n-        commanderExtension = new Commander(this);\n+      if (unitExtension == null) {\n+        unitExtension = new Commander(this);\n       }\n-      return commanderExtension;\n+      return unitExtension;\n     }\n \n     return super.getUnitExtension(extensionName);\n\ndiff --git a/extension-objects/src/main/java/units/SergeantUnit.java b/extension-objects/src/main/java/units/SergeantUnit.java\n--- a/extension-objects/src/main/java/units/SergeantUnit.java\n+++ b/extension-objects/src/main/java/units/SergeantUnit.java\n@@ -9,8 +9,6 @@\n  */\n public class SergeantUnit extends Unit {\n \n-  private SergeantExtension sergeantExtension;\n-\n   public SergeantUnit(String name) {\n     super(name);\n   }\n@@ -19,10 +17,10 @@ public SergeantUnit(String name) {\n   public UnitExtension getUnitExtension(String extensionName) {\n \n     if (extensionName.equals(\"SergeantExtension\")) {\n-      if (sergeantExtension == null) {\n-        sergeantExtension = new Sergeant(this);\n+      if (unitExtension == null) {\n+        unitExtension = new Sergeant(this);\n       }\n-      return sergeantExtension;\n+      return unitExtension;\n     }\n \n     return super.getUnitExtension(extensionName);\n\ndiff --git a/extension-objects/src/main/java/units/SoldierUnit.java b/extension-objects/src/main/java/units/SoldierUnit.java\n--- a/extension-objects/src/main/java/units/SoldierUnit.java\n+++ b/extension-objects/src/main/java/units/SoldierUnit.java\n@@ -9,8 +9,6 @@\n  */\n public class SoldierUnit extends Unit {\n \n-  private SoldierExtension soldierExtension;\n-\n   public SoldierUnit(String name) {\n     super(name);\n   }\n@@ -19,11 +17,11 @@ public SoldierUnit(String name) {\n   public UnitExtension getUnitExtension(String extensionName) {\n \n     if (extensionName.equals(\"SoldierExtension\")) {\n-      if (soldierExtension == null) {\n-        soldierExtension = new Soldier(this);\n+      if (unitExtension == null) {\n+        unitExtension = new Soldier(this);\n       }\n \n-      return soldierExtension;\n+      return unitExtension;\n     }\n     return super.getUnitExtension(extensionName);\n   }\n\ndiff --git a/extension-objects/src/main/java/units/Unit.java b/extension-objects/src/main/java/units/Unit.java\n--- a/extension-objects/src/main/java/units/Unit.java\n+++ b/extension-objects/src/main/java/units/Unit.java\n@@ -8,6 +8,7 @@\n public class Unit {\n \n   private String name;\n+  protected UnitExtension unitExtension = null;\n \n   public Unit(String name) {\n     this.name = name;\n\ndiff --git a/extension-objects/src/test/java/units/UnitTest.java b/extension-objects/src/test/java/units/UnitTest.java\n--- a/extension-objects/src/test/java/units/UnitTest.java\n+++ b/extension-objects/src/test/java/units/UnitTest.java\n@@ -11,8 +11,6 @@\n  */\n public class UnitTest {\n \n-  private Unit unit;\n-\n   @Test\n   public void testConstGetSet() throws Exception {\n     final String name = \"testName\";",
    "output": "Class diagram & fix relation between units"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -1,12 +1,43 @@\n /**\n  * Created by Alexis on 28-Apr-17.\n+ * With Marker interface idea is to make empty interface and extend it.\n+ * Basically it is just to identify the special objects from normal objects.\n+ * Like in case of serialization , objects that need to be serialized must implement serializable interface\n+ * (it is empty interface) and down the line writeObject() method must be checking\n+ * if it is a instance of serializable or not.\n+ * <p>\n+ * Marker interface vs annotation\n+ * Marker interfaces and marker annotations both have their uses,\n+ * neither of them is obsolete or always better then the other one.\n+ * If you want to define a type that does not have any new methods associated with it,\n+ * a marker interface is the way to go.\n+ * If you want to mark program elements other than classes and interfaces,\n+ * to allow for the possibility of adding more information to the marker in the future,\n+ * or to fit the marker into a framework that already makes heavy use of annotation types,\n+ * then a marker annotation is the correct choice\n  */\n public class App {\n+\n+  /**\n+   * Program entry point\n+   *\n+   * @param args command line args\n+   */\n   public static void main(String[] args) {\n+\n     Guard guard = new Guard();\n+    Thief thief = new Thief();\n \n     if (guard instanceof Permission) {\n       guard.enter();\n+    } else {\n+      System.out.println(\"You have no permission to enter, please leave this area\");\n+    }\n+\n+    if (thief instanceof Permission) {\n+      thief.steal();\n+    } else {\n+      thief.doNothing();\n     }\n   }\n }\n\ndiff --git a/marker/src/main/java/Thief.java b/marker/src/main/java/Thief.java\n--- a/marker/src/main/java/Thief.java\n+++ b/marker/src/main/java/Thief.java\n@@ -0,0 +1,12 @@\n+/**\n+ * Created by Alexis on 02-May-17.\n+ */\n+public class Thief {\n+  protected static void steal() {\n+    System.out.println(\"Steal valuable items\");\n+  }\n+\n+  protected static void doNothing() {\n+    System.out.println(\"Pretend nothing happened and just leave\");\n+  }\n+}\n\ndiff --git a/marker/src/test/java/AppTest.java b/marker/src/test/java/AppTest.java\n--- a/marker/src/test/java/AppTest.java\n+++ b/marker/src/test/java/AppTest.java\n@@ -0,0 +1,17 @@\n+/**\n+ * Created by Alexis on 01-May-17.\n+ */\n+\n+import org.junit.Test;\n+\n+/**\n+ * Application test\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}\n\ndiff --git a/marker/src/test/java/GuardTest.java b/marker/src/test/java/GuardTest.java\n--- a/marker/src/test/java/GuardTest.java\n+++ b/marker/src/test/java/GuardTest.java\n@@ -0,0 +1,16 @@\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Created by Alexis on 02-May-17.\n+ */\n+public class GuardTest {\n+\n+  @Test\n+  public void testGuard() {\n+    Guard guard = new Guard();\n+    assertThat(guard, instanceOf(Permission.class));\n+  }\n+}\n\ndiff --git a/marker/src/test/java/ThiefTest.java b/marker/src/test/java/ThiefTest.java\n--- a/marker/src/test/java/ThiefTest.java\n+++ b/marker/src/test/java/ThiefTest.java\n@@ -0,0 +1,15 @@\n+/**\n+ * Created by Alexis on 02-May-17.\n+ */\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+public class ThiefTest {\n+  @Test\n+  public void testGuard() {\n+    Thief thief = new Thief();\n+    assertFalse(thief instanceof Permission);\n+  }\n+}",
    "output": "All without Readme and pumlid"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java\n@@ -25,6 +25,7 @@\n \n import com.iluwatar.featuretoggle.pattern.Service;\n import com.iluwatar.featuretoggle.pattern.propertiesversion.PropertiesFeatureToggleVersion;\n+import com.iluwatar.featuretoggle.pattern.tieredversion.TieredFeatureToggleVersion;\n import com.iluwatar.featuretoggle.user.User;\n import com.iluwatar.featuretoggle.user.UserGroup;\n import org.slf4j.Logger;\n@@ -85,15 +86,17 @@ public static void main(String[] args) {\n     LOGGER.info(welcomeMessageturnedOff);\n \n     // --------------------------------------------\n+    \n+    Service service2 = new TieredFeatureToggleVersion();\n \n     final User paidUser = new User(\"Jamie Coder\");\n     final User freeUser = new User(\"Alan Defect\");\n \n     UserGroup.addUserToPaidGroup(paidUser);\n     UserGroup.addUserToFreeGroup(freeUser);\n \n-    final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);\n-    final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);\n+    final String welcomeMessagePaidUser = service2.getWelcomeMessage(paidUser);\n+    final String welcomeMessageFreeUser = service2.getWelcomeMessage(freeUser);\n     LOGGER.info(welcomeMessageFreeUser);\n     LOGGER.info(welcomeMessagePaidUser);\n   }",
    "output": "Fix Block 3 case"
  },
  {
    "input": "diff --git a/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java b/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java\n--- a/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java\n+++ b/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java\n@@ -62,9 +62,9 @@ public void testPlaySound() throws UnsupportedAudioFileException, IOException, I\n    */\n   @Test\n   public void testQueue() throws UnsupportedAudioFileException, IOException, InterruptedException {\n-    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.wav\"), -10.0f);\n-    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.wav\"), -10.0f);\n-    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.wav\"), -10.0f);\n+    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.aif\"), -10.0f);\n+    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.aif\"), -10.0f);\n+    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.aif\"), -10.0f);\n     assertTrue(Audio.getPendingAudio().length > 0);\n     // test that service is started\n     assertTrue(Audio.isServiceRunning());",
    "output": "Add travis supported sound files"
  },
  {
    "input": "diff --git a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n--- a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n@@ -52,7 +52,7 @@ public class Audio {\n   /**\n    * This method stops the Update Method's thread. \n    */\n-  public static void stopService() {\n+  public static synchronized void stopService() {\n     if (updateThread != null) {\n       updateThread.interrupt();\n     }\n@@ -62,11 +62,12 @@ public static void stopService() {\n    * This method stops the Update Method's thread. \n    * @return boolean\n    */\n-  public static boolean isServiceRunning() {\n-    if (updateThread != null) {\n-      return updateThread.isAlive();\n+  public static synchronized boolean isServiceRunning() {\n+    if (updateThread != null && updateThread.isAlive() ) {\n+      return true;\n+    } else {\n+      return false;\n     }\n-    return false;\n   }\n \n   /**\n@@ -83,6 +84,13 @@ public void run() {\n         }\n       });\n     }\n+    startThread();\n+  }\n+  \n+  /**\n+   * This is a synchronized thread starter\n+   */\n+  public static synchronized void startThread() {\n     if (!updateThread.isAlive()) {\n       updateThread.start();\n       headIndex = 0;",
    "output": "Some fixes for testing in event queue"
  },
  {
    "input": "diff --git a/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java b/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java\n--- a/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java\n+++ b/dependency-injection/src/test/java/com/iluwatar/dependency/injection/AdvancedSorceressTest.java\n@@ -0,0 +1,77 @@\n+/**\r\n+ * The MIT License\r\n+ * Copyright (c) 2014-2016 Ilkka Seppälä\r\n+ * <p>\r\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n+ * of this software and associated documentation files (the \"Software\"), to deal\r\n+ * in the Software without restriction, including without limitation the rights\r\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n+ * copies of the Software, and to permit persons to whom the Software is\r\n+ * furnished to do so, subject to the following conditions:\r\n+ * <p>\r\n+ * The above copyright notice and this permission notice shall be included in\r\n+ * all copies or substantial portions of the Software.\r\n+ * <p>\r\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n+ * THE SOFTWARE.\r\n+ */\r\n+package com.iluwatar.dependency.injection;\r\n+\r\n+import com.iluwatar.dependency.injection.utils.InMemoryAppender;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+/**\r\n+ * Date: 28/04/17 - 7:40 AM\r\n+ *\r\n+ * @author Stanislav Kapinus\r\n+ */\r\n+\r\n+public class AdvancedSorceressTest {\r\n+\r\n+    private InMemoryAppender appender;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        appender = new InMemoryAppender(Tobacco.class);\r\n+    }\r\n+\r\n+    @After\r\n+    public void tearDown() {\r\n+        appender.stop();\r\n+    }\r\n+\r\n+    /**\r\n+     * Test if the {@link AdvancedSorceress} smokes whatever instance of {@link Tobacco} is passed to her\r\n+     * through the setter's parameter\r\n+     */\r\n+    @Test\r\n+    public void testSmokeEveryThing() throws Exception {\r\n+\r\n+        final Tobacco[] tobaccos = {\r\n+                new OldTobyTobacco(), new RivendellTobacco(), new SecondBreakfastTobacco()\r\n+        };\r\n+\r\n+        for (final Tobacco tobacco : tobaccos) {\r\n+            final AdvancedSorceress advancedSorceress = new AdvancedSorceress();\r\n+            advancedSorceress.setTobacco(tobacco);\r\n+            advancedSorceress.smoke();\r\n+            // Verify if the sorceress is smoking the correct tobacco ...\r\n+            assertEquals(\"AdvancedSorceress smoking \" + tobacco.getClass().getSimpleName(), appender.getLastMessage());\r\n+\r\n+        }\r\n+\r\n+        // ... and nothing else is happening.\r\n+        assertEquals(tobaccos.length, appender.getLogSize());\r\n+\r\n+    }\r\n+\r\n+}\r",
    "output": "Add files via upload"
  },
  {
    "input": "diff --git a/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java\n--- a/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/AdvancedSorceress.java\n@@ -0,0 +1,45 @@\n+package com.iluwatar.dependency.injection;\r\n+\r\n+/**\r\n+ * The MIT License\r\n+ * Copyright (c) 2014-2017 Ilkka Seppälä\r\n+ *\r\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n+ * of this software and associated documentation files (the \"Software\"), to deal\r\n+ * in the Software without restriction, including without limitation the rights\r\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n+ * copies of the Software, and to permit persons to whom the Software is\r\n+ * furnished to do so, subject to the following conditions:\r\n+ *\r\n+ * The above copyright notice and this permission notice shall be included in\r\n+ * all copies or substantial portions of the Software.\r\n+ *\r\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n+ * THE SOFTWARE.\r\n+ */\r\n+\r\n+\r\n+/**\r\n+ *\r\n+ * AdvancedSorceress implements inversion of control. It depends on abstraction that can be injected\r\n+ * through its setter.\r\n+ *\r\n+ */\r\n+public class AdvancedSorceress implements Wizard {\r\n+\r\n+    private Tobacco tobacco;\r\n+\r\n+    public void setTobacco(Tobacco tobacco) {\r\n+        this.tobacco = tobacco;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void smoke() {\r\n+        tobacco.smoke(this);\r\n+    }\r\n+}\r\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java\n--- a/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java\n@@ -1,17 +1,17 @@\n /**\n  * The MIT License\n  * Copyright (c) 2014-2016 Ilkka Seppälä\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -26,7 +26,7 @@\n import com.google.inject.Injector;\n \n /**\n- * \n+ *\n  * Dependency Injection pattern deals with how objects handle their dependencies. The pattern\n  * implements so called inversion of control principle. Inversion of control has two specific rules:\n  * - High-level modules should not depend on low-level modules. Both should depend on abstractions.\n@@ -36,32 +36,37 @@\n  * naive implementation violating the inversion of control principle. It depends directly on a\n  * concrete implementation which cannot be changed.\n  * <p>\n- * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete\n- * implementation but abstraction. It utilizes Dependency Injection pattern allowing its\n- * {@link Tobacco} dependency to be injected through its constructor. This way, handling the\n- * dependency is no longer the wizard's responsibility. It is resolved outside the wizard class.\n+ * The second and third wizards({@link AdvancedWizard} and {@link AdvancedSorceress}) are more flexible.\n+ * They do not depend on any concrete implementation but abstraction. They utilizes Dependency Injection\n+ * pattern allowing their {@link Tobacco} dependency to be injected through constructor ({@link AdvancedWizard})\n+ * or setter ({@link AdvancedSorceress}). This way, handling the dependency is no longer the wizard's\n+ * responsibility. It is resolved outside the wizard class.\n  * <p>\n- * The third example takes the pattern a step further. It uses Guice framework for Dependency\n+ * The fourth example takes the pattern a step further. It uses Guice framework for Dependency\n  * Injection. {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then\n  * used to create {@link GuiceWizard} object with correct dependencies.\n  *\n  */\n public class App {\n \n-  /**\n-   * Program entry point\n-   * \n-   * @param args command line args\n-   */\n-  public static void main(String[] args) {\n-    SimpleWizard simpleWizard = new SimpleWizard();\n-    simpleWizard.smoke();\n+    /**\n+     * Program entry point\n+     *\n+     * @param args command line args\n+     */\n+    public static void main(String[] args) {\n+        SimpleWizard simpleWizard = new SimpleWizard();\n+        simpleWizard.smoke();\n+\n+        AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());\n+        advancedWizard.smoke();\n \n-    AdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());\n-    advancedWizard.smoke();\n+        AdvancedSorceress advancedSorceress = new AdvancedSorceress();\n+        advancedSorceress.setTobacco(new SecondBreakfastTobacco());\n+        advancedSorceress.smoke();\n \n-    Injector injector = Guice.createInjector(new TobaccoModule());\n-    GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);\n-    guiceWizard.smoke();\n-  }\n+        Injector injector = Guice.createInjector(new TobaccoModule());\n+        GuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);\n+        guiceWizard.smoke();\n+    }\n }",
    "output": "Add files via upload"
  },
  {
    "input": "diff --git a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n--- a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n@@ -47,10 +47,6 @@ public class Audio {\n \n   private static PlayMessage[] pendingAudio = new PlayMessage[MAX_PENDING];\n \n-  public static boolean isServiceRunning() {\n-    return updateThread.isAlive();\n-  }\n-\n   /**\n    * This method stops the Update Method's thread. \n    */\n@@ -117,15 +113,14 @@ public static void update() {\n     try {\n       clip = AudioSystem.getClip();\n       clip.open(pendingAudio[headIndex].stream);\n+      clip.start();\n+      headIndex++;\n     } catch (LineUnavailableException e) {\n       System.err.println(\"Error occoured while loading the audio: The line is unavailable\");\n       e.printStackTrace();\n     } catch (IOException e) {\n       System.err.println(\"Input/Output error while loading the audio\");\n       e.printStackTrace();\n     }\n-    clip.start();\n-\n-    headIndex++;\n   }\n }",
    "output": "Read.me and the diagram is added"
  },
  {
    "input": "diff --git a/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java\n--- a/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java\n+++ b/data-bus/src/test/java/com/iluwatar/databus/members/StatusMemberTest.java\n@@ -0,0 +1,57 @@\n+package com.iluwatar.databus.members;\n+\n+import com.iluwatar.databus.DataBus;\n+import com.iluwatar.databus.data.MessageData;\n+import com.iluwatar.databus.data.StartingData;\n+import com.iluwatar.databus.data.StoppingData;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.time.LocalDateTime;\n+import java.time.Month;\n+\n+/**\n+ * Tests for {@link StatusMember}.\n+ *\n+ * @author Paul Campbell (pcampbell@kemitix.net)\n+ */\n+public class StatusMemberTest {\n+\n+  @Test\n+  public void statusRecordsTheStartTime() {\n+    //given\n+    final LocalDateTime startTime = LocalDateTime.of(2017, Month.APRIL, 1, 19, 9);\n+    final StartingData startingData = new StartingData(startTime);\n+    final StatusMember statusMember = new StatusMember(1);\n+    //when\n+    statusMember.accept(startingData);\n+    //then\n+    Assert.assertEquals(startTime, statusMember.getStarted());\n+  }\n+\n+  @Test\n+  public void statusRecordsTheStopTime() {\n+    //given\n+    final LocalDateTime stop = LocalDateTime.of(2017, Month.APRIL, 1, 19, 12);\n+    final StoppingData stoppingData = new StoppingData(stop);\n+    stoppingData.setDataBus(DataBus.getInstance());\n+    final StatusMember statusMember = new StatusMember(1);\n+    //when\n+    statusMember.accept(stoppingData);\n+    //then\n+    Assert.assertEquals(stop, statusMember.getStopped());\n+  }\n+\n+  @Test\n+  public void statusIgnoresMessageData() {\n+    //given\n+    final MessageData messageData = new MessageData(\"message\");\n+    final StatusMember statusMember = new StatusMember(1);\n+    //when\n+    statusMember.accept(messageData);\n+    //then\n+    Assert.assertNull(statusMember.getStarted());\n+    Assert.assertNull(statusMember.getStopped());\n+  }\n+\n+}",
    "output": "Data-bus: members: StatusMemberTest: added"
  },
  {
    "input": "diff --git a/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java b/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java\n@@ -29,6 +29,7 @@\n import com.iluwatar.databus.data.StartingData;\n import com.iluwatar.databus.data.StoppingData;\n \n+import java.time.LocalDateTime;\n import java.util.logging.Logger;\n \n /**\n@@ -42,6 +43,10 @@ public class StatusMember implements Member {\n \n   private final int id;\n \n+  private LocalDateTime started;\n+\n+  private LocalDateTime stopped;\n+\n   public StatusMember(int id) {\n     this.id = id;\n   }\n@@ -56,12 +61,22 @@ public void accept(final DataType data) {\n   }\n \n   private void handleEvent(StartingData data) {\n-    LOGGER.info(String.format(\"Receiver #%d sees application started at %s\", id, data.getWhen()));\n+    started = data.getWhen();\n+    LOGGER.info(String.format(\"Receiver #%d sees application started at %s\", id, started));\n   }\n \n   private void handleEvent(StoppingData data) {\n-    LOGGER.info(String.format(\"Receiver #%d sees application stopping at %s\", id, data.getWhen()));\n+    stopped = data.getWhen();\n+    LOGGER.info(String.format(\"Receiver #%d sees application stopping at %s\", id, stopped));\n     LOGGER.info(String.format(\"Receiver #%d sending goodbye message\", id));\n     data.getDataBus().publish(MessageData.of(String.format(\"Goodbye cruel world from #%d!\", id)));\n   }\n+\n+  public LocalDateTime getStarted() {\n+    return started;\n+  }\n+\n+  public LocalDateTime getStopped() {\n+    return stopped;\n+  }\n }",
    "output": "Data-bus: members: StatusMember: records start and stop times"
  },
  {
    "input": "diff --git a/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java\n--- a/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java\n+++ b/data-bus/src/test/java/com/iluwatar/databus/members/MessageCollectorMemberTest.java\n@@ -0,0 +1,40 @@\n+package com.iluwatar.databus.members;\n+\n+import com.iluwatar.databus.data.MessageData;\n+import com.iluwatar.databus.data.StartingData;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.time.LocalDateTime;\n+\n+/**\n+ * Tests for {@link MessageCollectorMember}.\n+ *\n+ * @author Paul Campbell (pcampbell@kemitix.net)\n+ */\n+public class MessageCollectorMemberTest {\n+\n+  @Test\n+  public void collectMessageFromMessageData() {\n+    //given\n+    final String message = \"message\";\n+    final MessageData messageData = new MessageData(message);\n+    final MessageCollectorMember collector = new MessageCollectorMember(\"collector\");\n+    //when\n+    collector.accept(messageData);\n+    //then\n+    Assert.assertTrue(collector.getMessages().contains(message));\n+  }\n+\n+  @Test\n+  public void collectIgnoresMessageFromOtherDataTypes() {\n+    //given\n+    final StartingData startingData = new StartingData(LocalDateTime.now());\n+    final MessageCollectorMember collector = new MessageCollectorMember(\"collector\");\n+    //when\n+    collector.accept(startingData);\n+    //then\n+    Assert.assertEquals(0, collector.getMessages().size());\n+  }\n+\n+}",
    "output": "Data-bus: members: MessageCollectorMemberTest: added"
  },
  {
    "input": "diff --git a/data-bus/src/main/java/com/iluwatar/databus/App.java b/data-bus/src/main/java/com/iluwatar/databus/App.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/App.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/App.java\n@@ -26,7 +26,7 @@\n import com.iluwatar.databus.data.MessageData;\n import com.iluwatar.databus.data.StartingData;\n import com.iluwatar.databus.data.StoppingData;\n-import com.iluwatar.databus.members.CounterMember;\n+import com.iluwatar.databus.members.MessageCollectorMember;\n import com.iluwatar.databus.members.StatusMember;\n \n import java.time.LocalDateTime;\n@@ -44,8 +44,8 @@ public static void main(String[] args) {\n     final DataBus bus = DataBus.getInstance();\n     bus.subscribe(new StatusMember(1));\n     bus.subscribe(new StatusMember(2));\n-    final CounterMember foo = new CounterMember(\"Foo\");\n-    final CounterMember bar = new CounterMember(\"Bar\");\n+    final MessageCollectorMember foo = new MessageCollectorMember(\"Foo\");\n+    final MessageCollectorMember bar = new MessageCollectorMember(\"Bar\");\n     bus.subscribe(foo);\n     bus.publish(StartingData.of(LocalDateTime.now()));\n     bus.publish(MessageData.of(\"Only Foo should see this\"));\n\ndiff --git a/data-bus/src/main/java/com/iluwatar/databus/members/MessageCollectorMember.java b/data-bus/src/main/java/com/iluwatar/databus/members/MessageCollectorMember.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/members/MessageCollectorMember.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/members/MessageCollectorMember.java\n@@ -27,20 +27,25 @@\n import com.iluwatar.databus.Member;\n import com.iluwatar.databus.data.MessageData;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.logging.Logger;\n \n /**\n- * Receiver of Data-Bus events.\n+ * Receiver of Data-Bus events that collects the messages from each {@link MessageData}.\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-public class CounterMember implements Member {\n+public class MessageCollectorMember implements Member {\n \n-  private static final Logger LOGGER = Logger.getLogger(CounterMember.class.getName());\n+  private static final Logger LOGGER = Logger.getLogger(MessageCollectorMember.class.getName());\n \n   private final String name;\n \n-  public CounterMember(String name) {\n+  private List<String> messages = new ArrayList<>();\n+\n+  public MessageCollectorMember(String name) {\n     this.name = name;\n   }\n \n@@ -53,5 +58,10 @@ public void accept(final DataType data) {\n \n   private void handleEvent(MessageData data) {\n     LOGGER.info(String.format(\"%s sees message %s\", name, data.getMessage()));\n+    messages.add(data.getMessage());\n+  }\n+\n+  public List<String> getMessages() {\n+    return Collections.unmodifiableList(messages);\n   }\n }",
    "output": "Counter doesn't count anything. Added ability to collect the messages\nfrom the MessageData that it receives."
  },
  {
    "input": "diff --git a/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java\n--- a/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java\n+++ b/data-bus/src/test/java/com/iluwatar/databus/DataBusTest.java\n@@ -0,0 +1,52 @@\n+package com.iluwatar.databus;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.BDDMockito.then;\n+import static org.mockito.Mockito.never;\n+\n+/**\n+ * Tests for {@link DataBus}.\n+ *\n+ * @author Paul Campbell (pcampbell@kemitix.net)\n+ */\n+public class DataBusTest {\n+\n+  @Mock\n+  private Member member;\n+\n+  @Mock\n+  private DataType event;\n+\n+  @Before\n+  public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n+  }\n+\n+  @Test\n+  public void publishedEventIsReceivedBySubscribedMember() {\n+    //given\n+    final DataBus dataBus = DataBus.getInstance();\n+    dataBus.subscribe(member);\n+    //when\n+    dataBus.publish(event);\n+    //then\n+    then(member).should().accept(event);\n+  }\n+\n+  @Test\n+  public void publishedEventIsNotReceivedByMemberAfterUnsubscribing() {\n+    //given\n+    final DataBus dataBus = DataBus.getInstance();\n+    dataBus.subscribe(member);\n+    dataBus.unsubscribe(member);\n+    //when\n+    dataBus.publish(event);\n+    //then\n+    then(member).should(never()).accept(event);\n+  }\n+\n+}",
    "output": "Data-bus: DataBusTest: added"
  },
  {
    "input": "diff --git a/data-bus/src/main/java/com/iluwatar/databus/App.java b/data-bus/src/main/java/com/iluwatar/databus/App.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/App.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/App.java\n@@ -23,12 +23,11 @@\n \n package com.iluwatar.databus;\n \n-import com.iluwatar.databus.data.StoppingData;\n-import com.iluwatar.databus.data.StartingData;\n import com.iluwatar.databus.data.MessageData;\n+import com.iluwatar.databus.data.StartingData;\n+import com.iluwatar.databus.data.StoppingData;\n import com.iluwatar.databus.members.CounterMember;\n import com.iluwatar.databus.members.StatusMember;\n-import lombok.extern.slf4j.Slf4j;\n \n import java.time.LocalDateTime;\n \n@@ -39,7 +38,6 @@\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-@Slf4j\n class App {\n \n   public static void main(String[] args) {\n\ndiff --git a/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/data/MessageData.java\n@@ -25,18 +25,20 @@\n \n import com.iluwatar.databus.AbstractDataType;\n import com.iluwatar.databus.DataType;\n-import lombok.RequiredArgsConstructor;\n \n /**\n  * .\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-@RequiredArgsConstructor\n public class MessageData extends AbstractDataType {\n \n   private final String message;\n \n+  public MessageData(String message) {\n+    this.message = message;\n+  }\n+\n   public String getMessage() {\n     return message;\n   }\n\ndiff --git a/data-bus/src/main/java/com/iluwatar/databus/data/StartingData.java b/data-bus/src/main/java/com/iluwatar/databus/data/StartingData.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/data/StartingData.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/data/StartingData.java\n@@ -25,7 +25,6 @@\n \n import com.iluwatar.databus.AbstractDataType;\n import com.iluwatar.databus.DataType;\n-import lombok.RequiredArgsConstructor;\n \n import java.time.LocalDateTime;\n \n@@ -34,11 +33,14 @@\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-@RequiredArgsConstructor\n public class StartingData extends AbstractDataType {\n \n   private final LocalDateTime when;\n \n+  public StartingData(LocalDateTime when) {\n+    this.when = when;\n+  }\n+\n   public LocalDateTime getWhen() {\n     return when;\n   }\n\ndiff --git a/data-bus/src/main/java/com/iluwatar/databus/data/StoppingData.java b/data-bus/src/main/java/com/iluwatar/databus/data/StoppingData.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/data/StoppingData.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/data/StoppingData.java\n@@ -25,7 +25,6 @@\n \n import com.iluwatar.databus.AbstractDataType;\n import com.iluwatar.databus.DataType;\n-import lombok.RequiredArgsConstructor;\n \n import java.time.LocalDateTime;\n \n@@ -34,11 +33,14 @@\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-@RequiredArgsConstructor\n public class StoppingData extends AbstractDataType {\n \n   private final LocalDateTime when;\n \n+  public StoppingData(LocalDateTime when) {\n+    this.when = when;\n+  }\n+\n   public LocalDateTime getWhen() {\n     return when;\n   }\n\ndiff --git a/data-bus/src/main/java/com/iluwatar/databus/members/CounterMember.java b/data-bus/src/main/java/com/iluwatar/databus/members/CounterMember.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/members/CounterMember.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/members/CounterMember.java\n@@ -26,20 +26,24 @@\n import com.iluwatar.databus.DataType;\n import com.iluwatar.databus.Member;\n import com.iluwatar.databus.data.MessageData;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.logging.Logger;\n \n /**\n  * Receiver of Data-Bus events.\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-@Slf4j\n-@RequiredArgsConstructor\n public class CounterMember implements Member {\n \n+  private static final Logger LOGGER = Logger.getLogger(CounterMember.class.getName());\n+\n   private final String name;\n \n+  public CounterMember(String name) {\n+    this.name = name;\n+  }\n+\n   @Override\n   public void accept(final DataType data) {\n     if (data instanceof MessageData) {\n@@ -48,6 +52,6 @@ public void accept(final DataType data) {\n   }\n \n   private void handleEvent(MessageData data) {\n-    log.info(\"{} sees message {}\", name, data.getMessage());\n+    LOGGER.info(String.format(\"%s sees message %s\", name, data.getMessage()));\n   }\n }\n\ndiff --git a/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java b/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java\n--- a/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java\n+++ b/data-bus/src/main/java/com/iluwatar/databus/members/StatusMember.java\n@@ -28,20 +28,24 @@\n import com.iluwatar.databus.data.MessageData;\n import com.iluwatar.databus.data.StartingData;\n import com.iluwatar.databus.data.StoppingData;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.logging.Logger;\n \n /**\n  * Receiver of Data-Bus events.\n  *\n  * @author Paul Campbell (pcampbell@kemitix.net)\n  */\n-@Slf4j\n-@RequiredArgsConstructor\n public class StatusMember implements Member {\n \n+  private static final Logger LOGGER = Logger.getLogger(StatusMember.class.getName());\n+\n   private final int id;\n \n+  public StatusMember(int id) {\n+    this.id = id;\n+  }\n+\n   @Override\n   public void accept(final DataType data) {\n     if (data instanceof StartingData) {\n@@ -52,12 +56,12 @@ public void accept(final DataType data) {\n   }\n \n   private void handleEvent(StartingData data) {\n-    log.info(\"Receiver #{} sees application started at {}\", id, data.getWhen());\n+    LOGGER.info(String.format(\"Receiver #%d sees application started at %s\", id, data.getWhen()));\n   }\n \n   private void handleEvent(StoppingData data) {\n-    log.info(\"Receiver #{} sees application stopping at {}\", id, data.getWhen());\n-    log.info(\"Receiver #{} sending goodbye message\", id);\n+    LOGGER.info(String.format(\"Receiver #%d sees application stopping at %s\", id, data.getWhen()));\n+    LOGGER.info(String.format(\"Receiver #%d sending goodbye message\", id));\n     data.getDataBus().publish(MessageData.of(String.format(\"Goodbye cruel world from #%d!\", id)));\n   }\n }",
    "output": "Data-bus: remove lombok"
  },
  {
    "input": "diff --git a/tls/src/main/java/com/iluwatar/tls/App.java b/tls/src/main/java/com/iluwatar/tls/App.java\n--- a/tls/src/main/java/com/iluwatar/tls/App.java\n+++ b/tls/src/main/java/com/iluwatar/tls/App.java\n@@ -104,7 +104,7 @@ public static void main(String[] args) {\n       System.out.println(\"The List exceptionList contains \" + counterExceptions + \" exceptions\");\n \n     } catch (Exception e) {\n-      System.out.println(\"Abnormal end of program. Program throws exception: \"); \n+      System.out.println(\"Abnormal end of program. Program throws exception: \" + e); \n     }\n     executor.shutdown();\n   }",
    "output": "Upgrade App.java Correction of correction ;-)"
  },
  {
    "input": "diff --git a/tls/src/main/java/com/iluwatar/tls/App.java b/tls/src/main/java/com/iluwatar/tls/App.java\n--- a/tls/src/main/java/com/iluwatar/tls/App.java\n+++ b/tls/src/main/java/com/iluwatar/tls/App.java\n@@ -104,7 +104,7 @@ public static void main(String[] args) {\n       System.out.println(\"The List exceptionList contains \" + counterExceptions + \" exceptions\");\n \n     } catch (Exception e) {\n-      // no action here \n+      System.out.println(\"Abnormal end of program. Program throws exception: \"); \n     }\n     executor.shutdown();\n   }",
    "output": "Upgrade App.java Correction of error detected by maven-pmd-plugin."
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/App.java b/converter/src/main/java/com/iluwatar/converter/App.java\n--- a/converter/src/main/java/com/iluwatar/converter/App.java\n+++ b/converter/src/main/java/com/iluwatar/converter/App.java\n@@ -48,7 +48,7 @@ public static void main(String[] args) {\n \n     UserDto dtoUser = new UserDto(\"John\", \"Doe\", true, \"whatever[at]wherever.com\");\n     User user = userConverter.convertFromDto(dtoUser);\n-    UserDto dtoUserCopy = userConverter.convertFromEntity(user);\n+    System.out.println(\"Entity converted from DTO:\" + user);\n \n     ArrayList<User> users = Lists.newArrayList(new User(\"Camile\", \"Tough\", false, \"124sad\"),\n         new User(\"Marti\", \"Luther\", true, \"42309fd\"), new User(\"Kate\", \"Smith\", true, \"if0243\"));",
    "output": "Fix pmd violation"
  },
  {
    "input": "diff --git a/converter/src/test/java/com/iluwatar/converter/ConverterTest.java b/converter/src/test/java/com/iluwatar/converter/ConverterTest.java\n--- a/converter/src/test/java/com/iluwatar/converter/ConverterTest.java\n+++ b/converter/src/test/java/com/iluwatar/converter/ConverterTest.java\n@@ -37,9 +37,9 @@ public class ConverterTest {\n    */\n   @Test public void testCustomConverter() {\n     Converter<UserDto, User> converter = new Converter<>(\n-      userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive(),\n+        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive(),\n         String.valueOf(new Random().nextInt())),\n-      user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive(),\n+        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive(),\n         user.getFirstName().toLowerCase() + user.getLastName().toLowerCase() + \"@whatever.com\"));\n     User u1 = new User(\"John\", \"Doe\", false, \"12324\");\n     UserDto userDto = converter.convertFromEntity(u1);\n@@ -52,7 +52,7 @@ public class ConverterTest {\n    */\n   @Test public void testCollectionConversion() {\n     ArrayList<User> users = Lists.newArrayList(new User(\"Camile\", \"Tough\", false, \"124sad\"),\n-      new User(\"Marti\", \"Luther\", true, \"42309fd\"), new User(\"Kate\", \"Smith\", true, \"if0243\"));\n+        new User(\"Marti\", \"Luther\", true, \"42309fd\"), new User(\"Kate\", \"Smith\", true, \"if0243\"));\n     List<User> fromDtos = userConverter.createFromDtos(userConverter.createFromEntities(users));\n     assertEquals(fromDtos, users);\n   }",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java\n--- a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java\n+++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/App.java\n@@ -0,0 +1,76 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+/**\n+ * Guarded-suspension is a concurrent design pattern for handling situation when to execute some action we need\n+ * condition to be satisfied.\n+ * <p>\n+ * Implementation is based on GuardedQueue, which has two methods: get and put,\n+ * the condition is that we cannot get from empty queue so when thread attempt\n+ * to break the condition we invoke Object's wait method on him and when other thread put an element\n+ * to the queue he notify the waiting one that now he can get from queue.\n+ */\n+package com.iluwatar.guarded.suspension;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Created by robertt240 on 1/26/17.\n+ */\n+public class App {\n+  /**\n+   * Example pattern execution\n+   *\n+   * @param args - command line args\n+   */\n+  public static void main(String[] args) {\n+    GuardedQueue guardedQueue = new GuardedQueue();\n+    ExecutorService executorService = Executors.newFixedThreadPool(3);\n+\n+    //here we create first thread which is supposed to get from guardedQueue\n+    executorService.execute(() -> {\n+          guardedQueue.get();\n+        }\n+    );\n+\n+    //here we wait two seconds to show that the thread which is trying to get from guardedQueue will be waiting\n+    try {\n+      Thread.sleep(2000);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+    //now we execute second thread which will put number to guardedQueue and notify first thread that it could get\n+    executorService.execute(() -> {\n+          guardedQueue.put(20);\n+        }\n+    );\n+    executorService.shutdown();\n+    try {\n+      executorService.awaitTermination(30, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+}\n\ndiff --git a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n--- a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n+++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n@@ -31,7 +31,7 @@\n \n public class GuardedQueue {\n   private static final Logger LOGGER = LoggerFactory.getLogger(GuardedQueue.class);\n-  private Queue<Integer> sourceList;\n+  private final Queue<Integer> sourceList;\n \n   public GuardedQueue() {\n     this.sourceList = new LinkedList<>();\n@@ -49,17 +49,17 @@ public synchronized Integer get() {\n         e.printStackTrace();\n       }\n     }\n-\n+    LOGGER.info(\"getting\");\n     return sourceList.peek();\n   }\n \n   /**\n    * @param e number which we want to put to our queue\n    */\n   public synchronized void put(Integer e) {\n+    LOGGER.info(\"putting\");\n     sourceList.add(e);\n-    notify();\n     LOGGER.info(\"notifying\");\n-\n+    notify();\n   }\n }\n\ndiff --git a/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n--- a/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n+++ b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n@@ -47,4 +47,12 @@ public void testGet() {\n     Assert.assertEquals(Integer.valueOf(10), value);\n   }\n \n+  @Test\n+  public void testPut() {\n+    GuardedQueue g = new GuardedQueue();\n+    g.put(12);\n+    Assert.assertEquals(Integer.valueOf(12), g.get());\n+\n+  }\n+\n }\n\\ No newline at end of file",
    "output": "Apply changes from review"
  },
  {
    "input": "diff --git a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n--- a/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n+++ b/guarded-suspension/src/main/java/com/iluwatar/guarded/suspension/GuardedQueue.java\n@@ -0,0 +1,66 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.guarded.suspension;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+\n+\n+public class GuardedQueue {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(GuardedQueue.class);\n+  private Queue<Integer> sourceList;\n+\n+  public GuardedQueue() {\n+    this.sourceList = new LinkedList<>();\n+  }\n+\n+  /**\n+   * @return last element of a queue if queue is not empty\n+   */\n+  public synchronized Integer get() {\n+    while (sourceList.isEmpty()) {\n+      try {\n+        LOGGER.info(\"waiting\");\n+        wait();\n+      } catch (InterruptedException e) {\n+        e.printStackTrace();\n+      }\n+    }\n+\n+    return sourceList.peek();\n+  }\n+\n+  /**\n+   * @param e number which we want to put to our queue\n+   */\n+  public synchronized void put(Integer e) {\n+    sourceList.add(e);\n+    notify();\n+    LOGGER.info(\"notifying\");\n+\n+  }\n+}\n\ndiff --git a/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n--- a/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n+++ b/guarded-suspension/src/test/java/com/iluwatar/guarded/suspension/GuardedQueueTest.java\n@@ -0,0 +1,53 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ * <p>\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * <p>\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * <p>\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.guarded.suspension;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Created by robertt240 on 1/2/17.\n+ */\n+public class GuardedQueueTest {\n+  private volatile Integer value;\n+\n+  @Test\n+  public void testGet() {\n+    GuardedQueue g = new GuardedQueue();\n+    ExecutorService executorService = Executors.newFixedThreadPool(2);\n+    executorService.submit(() -> value = g.get());\n+    executorService.submit(() -> g.put(Integer.valueOf(10)));\n+    executorService.shutdown();\n+    try {\n+      executorService.awaitTermination(30, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+    Assert.assertEquals(Integer.valueOf(10), value);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Initial commit of guarded suspension design pattern"
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/App.java b/converter/src/main/java/com/iluwatar/converter/App.java\n--- a/converter/src/main/java/com/iluwatar/converter/App.java\n+++ b/converter/src/main/java/com/iluwatar/converter/App.java\n@@ -22,10 +22,6 @@\n  */\n package com.iluwatar.converter;\n \n-/**\n- *\n- *\n- */\n public class App {\n   /**\n    * Program entry point\n@@ -34,10 +30,10 @@ public class App {\n    */\n   public static void main(String[] args) {\n     Converter<UserDto, User> userConverter = new Converter<>(\n-        userDto -> new User(userDto.getName(), userDto.getSurname(), userDto.isActive()),\n-        user -> new UserDto(user.getName(), user.getSurname(), user.isActive()));\n+        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),\n+        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));\n     UserDto dtoUser = new UserDto(\"John\", \"Doe\", true);\n-    User user = userConverter.convertFromDTO(dtoUser);\n+    User user = userConverter.convertFromDto(dtoUser);\n     UserDto dtoUserCopy = userConverter.convertFromEntity(user);\n \n   }\n\ndiff --git a/converter/src/main/java/com/iluwatar/converter/Converter.java b/converter/src/main/java/com/iluwatar/converter/Converter.java\n--- a/converter/src/main/java/com/iluwatar/converter/Converter.java\n+++ b/converter/src/main/java/com/iluwatar/converter/Converter.java\n@@ -29,55 +29,52 @@\n import java.util.stream.Collectors;\n \n /**\n- * @param <T>\n- * @param <U>\n+ * @param <T> DTO representation's type\n+ * @param <U> Domain representation's type\n  */\n public class Converter<T, U> {\n-  /**\n-   *\n-   */\n-  private final Function<T, U> fromDTO;\n-  /**\n-   *\n-   */\n+\n+  private final Function<T, U> fromDto;\n   private final Function<U, T> fromEntity;\n \n   /**\n-   * @param fromDTO\n-   * @param fromEntity\n+   * @param fromDto Function that converts given dto entity into the domain entity.\n+   * @param fromEntity Function that converts given domain entity into the dto entity.\n    */\n-  public Converter(final Function<T, U> fromDTO, final Function<U, T> fromEntity) {\n-    this.fromDTO = fromDTO;\n+  public Converter(final Function<T, U> fromDto, final Function<U, T> fromEntity) {\n+    this.fromDto = fromDto;\n     this.fromEntity = fromEntity;\n   }\n \n   /**\n-   * @param arg\n-   * @return\n+   * @param arg DTO entity\n+   * @return The domain representation - the result of the converting function application on dto entity.\n    */\n-  public U convertFromDTO(final T arg) {\n-    return fromDTO.apply(arg);\n+  public U convertFromDto(final T arg) {\n+    return fromDto.apply(arg);\n   }\n \n   /**\n-   * @param arg\n-   * @return\n+   * @param arg domain entity\n+   * @return The DTO representation - the result of the converting function application on domain entity.\n    */\n   public T convertFromEntity(final U arg) {\n     return fromEntity.apply(arg);\n   }\n \n   /**\n-   * @param arg\n-   * @return\n+   * @param arg collection of DTO entities\n+   * @return List of domain representation of provided entities retrieved by\n+   *        mapping each of them with the convertion function\n    */\n-  public List<U> createFromDTOs(final Collection<T> arg) {\n-    return arg.stream().map(this::convertFromDTO).collect(Collectors.toList());\n+  public List<U> createFromDtos(final Collection<T> arg) {\n+    return arg.stream().map(this::convertFromDto).collect(Collectors.toList());\n   }\n \n   /**\n-   * @param arg\n-   * @return\n+   * @param arg collection of domain entities\n+   * @return List of domain representation of provided entities retrieved by\n+   *        mapping each of them with the convertion function\n    */\n   public List<T> createFromEntities(final Collection<U> arg) {\n     return arg.stream().map(this::convertFromEntity).collect(Collectors.toList());\n\ndiff --git a/converter/src/main/java/com/iluwatar/converter/User.java b/converter/src/main/java/com/iluwatar/converter/User.java\n--- a/converter/src/main/java/com/iluwatar/converter/User.java\n+++ b/converter/src/main/java/com/iluwatar/converter/User.java\n@@ -23,40 +23,37 @@\n \n package com.iluwatar.converter;\n \n-/**\n- * Created by crossy on 2017-03-10.\n- */\n public class User {\n-  private String name;\n-  private String surname;\n+  private String firstName;\n+  private String lastName;\n   private boolean isActive;\n \n   /**\n    *\n-   * @param name\n-   * @param surname\n-   * @param isActive\n+   * @param firstName user's first name\n+   * @param lastName user's last name\n+   * @param isActive flag indicating whether the user is active\n    */\n-  public User(String name, String surname, boolean isActive) {\n-    this.name = name;\n-    this.surname = surname;\n+  public User(String firstName, String lastName, boolean isActive) {\n+    this.firstName = firstName;\n+    this.lastName = lastName;\n     this.isActive = isActive;\n   }\n \n-  public String getName() {\n-    return name;\n+  public String getFirstName() {\n+    return firstName;\n   }\n \n-  public void setName(String name) {\n-    this.name = name;\n+  public void setFirstName(String firstName) {\n+    this.firstName = firstName;\n   }\n \n-  public String getSurname() {\n-    return surname;\n+  public String getLastName() {\n+    return lastName;\n   }\n \n-  public void setSurname(String surname) {\n-    this.surname = surname;\n+  public void setLastName(String lastName) {\n+    this.lastName = lastName;\n   }\n \n   public boolean isActive() {\n\ndiff --git a/converter/src/main/java/com/iluwatar/converter/UserDto.java b/converter/src/main/java/com/iluwatar/converter/UserDto.java\n--- a/converter/src/main/java/com/iluwatar/converter/UserDto.java\n+++ b/converter/src/main/java/com/iluwatar/converter/UserDto.java\n@@ -23,40 +23,38 @@\n \n package com.iluwatar.converter;\n \n-/**\n- *\n- */\n+\n public class UserDto {\n-  private String name;\n-  private String surname;\n+  private String firstName;\n+  private String lastName;\n   private boolean isActive;\n \n   /**\n    *\n-   * @param name\n-   * @param surname\n-   * @param isActive\n+   * @param firstName user's first name\n+   * @param lastName user's last name\n+   * @param isActive flag indicating whether the user is active\n    */\n-  public UserDto(String name, String surname, boolean isActive) {\n-    this.name = name;\n-    this.surname = surname;\n+  public UserDto(String firstName, String lastName, boolean isActive) {\n+    this.firstName = firstName;\n+    this.lastName = lastName;\n     this.isActive = isActive;\n   }\n \n-  public String getName() {\n-    return name;\n+  public String getFirstName() {\n+    return firstName;\n   }\n \n-  public void setName(String name) {\n-    this.name = name;\n+  public void setFirstName(String firstName) {\n+    this.firstName = firstName;\n   }\n \n-  public String getSurname() {\n-    return surname;\n+  public String getLastName() {\n+    return lastName;\n   }\n \n-  public void setSurname(String surname) {\n-    this.surname = surname;\n+  public void setLastName(String lastName) {\n+    this.lastName = lastName;\n   }\n \n   public boolean isActive() {",
    "output": "Java docs added"
  },
  {
    "input": "diff --git a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/App.java b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/App.java\n--- a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/App.java\n+++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/App.java\n@@ -21,7 +21,7 @@\n  * THE SOFTWARE.\n  */\n \n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n\ndiff --git a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java\n--- a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java\n+++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Message.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n /**\n  *  Message class with only one parameter.\n\ndiff --git a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/MessageQueue.java b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/MessageQueue.java\n--- a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/MessageQueue.java\n+++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/MessageQueue.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.BlockingQueue;\n\ndiff --git a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java\n--- a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java\n+++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java\n@@ -21,7 +21,7 @@\n  * THE SOFTWARE.\n  */\n \n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\ndiff --git a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Task.java b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Task.java\n--- a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Task.java\n+++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/Task.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n /**\n  * Task Interface.\n  * \n\ndiff --git a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/TaskGenerator.java b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/TaskGenerator.java\n--- a/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/TaskGenerator.java\n+++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/TaskGenerator.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n\ndiff --git a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/AppTest.java b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/AppTest.java\n--- a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/AppTest.java\n+++ b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/AppTest.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import java.io.IOException;\n \n\ndiff --git a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageQueueTest.java b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageQueueTest.java\n--- a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageQueueTest.java\n+++ b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageQueueTest.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import static org.junit.Assert.assertEquals;\n \n\ndiff --git a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageTest.java b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageTest.java\n--- a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageTest.java\n+++ b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/MessageTest.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import org.junit.Test;\n import static org.junit.Assert.assertEquals;\n\ndiff --git a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/TaskGenSrvExeTest.java b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/TaskGenSrvExeTest.java\n--- a/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/TaskGenSrvExeTest.java\n+++ b/queue-load-leveling/src/test/java/com/iluwatar/queue/load/leveling/TaskGenSrvExeTest.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.queue.load.leveling;\n+package com.iluwatar.queue.load.leveling;\n \n import org.junit.Test;\n ",
    "output": "Rename package for Queue-Based Load Leveling pattern"
  },
  {
    "input": "diff --git a/tls/src/test/java/com/iluwatar/tls/AppTest.java b/tls/src/test/java/com/iluwatar/tls/AppTest.java\n--- a/tls/src/test/java/com/iluwatar/tls/AppTest.java\n+++ b/tls/src/test/java/com/iluwatar/tls/AppTest.java\n@@ -0,0 +1,40 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2016 Thomas Bauer\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.tls;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests that thread local storage example runs without errors.\n+ * \n+ * @author Thomas Bauer, January 2017\n+ *\n+ */\n+public class AppTest {\n+  @Test\n+  public void test() throws Exception {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}",
    "output": "Add files via upload"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n@@ -32,19 +32,17 @@ public final class IvoryTower {\n    */\r\n   private IvoryTower() {}\r\n \r\n-  private static class IvoryTowerHolder {\r\n-    /**\r\n+  /**\r\n    * Static to class instance of the class.\r\n    */\r\n-    private static final IvoryTower INSTANCE = new IvoryTower();\r\n-  }\r\n+  private static final IvoryTower INSTANCE = new IvoryTower();\r\n \r\n   /**\r\n    * To be called by user to obtain instance of the class.\r\n    *\r\n    * @return instance of the singleton.\r\n    */\r\n   public static IvoryTower getInstance() {\r\n-    return IvoryTowerHolder.INSTANCE;\r\n+    return INSTANCE;\r\n   }\r\n }\r",
    "output": "Revert initialization on demand holder idiom."
  },
  {
    "input": "diff --git a/memory-dao-test/src/main/java/com/memory/dao/App.java b/memory-dao-test/src/main/java/com/memory/dao/App.java\n--- a/memory-dao-test/src/main/java/com/memory/dao/App.java\n+++ b/memory-dao-test/src/main/java/com/memory/dao/App.java\n@@ -1,22 +0,0 @@\n-package com.memory.dao;\n-\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.support.ClassPathXmlApplicationContext;\n-\n-import com.memory.dao.db.UserDAO;\n-import com.memory.dao.pojo.User;\n-\n-public class App {\n-\tpublic static void main(String[] args) {\n-\t\t\n-\t\tfinal ApplicationContext context = new ClassPathXmlApplicationContext(\n-\t\t\t\t\"file:src/main/resources/beans.xml\");\n-\t\t\n-\t\tfinal UserDAO dao = (UserDAO)context.getBean(\"userDao\");\n-\t\tfor (final User user : dao.findAll()) {\n-\t\t\tSystem.out.println(user);\n-\t\t}\n-\t\t\n-\t\t((ClassPathXmlApplicationContext)context).close();\n-\t}\n-}\n\ndiff --git a/memory-dao-test/src/main/java/com/memory/dao/AppConfig.java b/memory-dao-test/src/main/java/com/memory/dao/AppConfig.java\n--- a/memory-dao-test/src/main/java/com/memory/dao/AppConfig.java\n+++ b/memory-dao-test/src/main/java/com/memory/dao/AppConfig.java\n@@ -1,9 +0,0 @@\n-package com.memory.dao;\n-\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n-\n-@Configuration\n-@ComponentScan(basePackages = {\"com.memory.dao\"})\n-public class AppConfig {\n-}\n\ndiff --git a/memory-dao-test/src/main/java/com/memory/dao/db/Queries.java b/memory-dao-test/src/main/java/com/memory/dao/db/Queries.java\n--- a/memory-dao-test/src/main/java/com/memory/dao/db/Queries.java\n+++ b/memory-dao-test/src/main/java/com/memory/dao/db/Queries.java\n@@ -1,19 +0,0 @@\n-package com.memory.dao.db;\n-\n-public enum Queries {\n-\t\n-\tGET_USER(\"SELECT * FROM users WHERE name = :name\"),\n-\tGET_ALL_USERS(\"SELECT * FROM users\")\n-\t;\n-\t\n-\tprivate final String query;\n-\t\n-\tQueries(final String query) {\n-\t\tthis.query = query;\n-\t}\n-\t\n-\tpublic String get() {\n-\t\treturn this.query;\n-\t}\n-\n-}\n\ndiff --git a/memory-dao-test/src/main/java/com/memory/dao/db/UserDAO.java b/memory-dao-test/src/main/java/com/memory/dao/db/UserDAO.java\n--- a/memory-dao-test/src/main/java/com/memory/dao/db/UserDAO.java\n+++ b/memory-dao-test/src/main/java/com/memory/dao/db/UserDAO.java\n@@ -1,11 +0,0 @@\n-package com.memory.dao.db;\n-\n-import com.memory.dao.pojo.User;\n-import java.util.List;\n-\n-public interface UserDAO {\n-\t\n-\tUser findByName(String name);\n-\tList<User> findAll();\n-\t\n-}\n\ndiff --git a/memory-dao-test/src/main/java/com/memory/dao/db/UserDAOImpl.java b/memory-dao-test/src/main/java/com/memory/dao/db/UserDAOImpl.java\n--- a/memory-dao-test/src/main/java/com/memory/dao/db/UserDAOImpl.java\n+++ b/memory-dao-test/src/main/java/com/memory/dao/db/UserDAOImpl.java\n@@ -1,61 +0,0 @@\n-package com.memory.dao.db;\n-\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.HashMap;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.core.RowMapper;\n-import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n-import org.springframework.stereotype.Repository;\n-\n-import com.memory.dao.pojo.User;\n-\n-@Repository\n-public class UserDAOImpl implements UserDAO {\n-\t\n-\tprivate NamedParameterJdbcTemplate namedParameterJDBCTemplate;\n-\n-\t@Autowired\n-\tpublic void setNamedParameterJDBCTemplate(final NamedParameterJdbcTemplate namedParameterJDBCTemplate) {\n-\t\tthis.namedParameterJDBCTemplate = namedParameterJDBCTemplate;\n-\t}\n-\n-\t@Override\n-\tpublic User findByName(final String name) {\n-\t\tfinal Map<String, Object> params = new HashMap<>();\n-\t\tparams.put(\"name\", name);\n-\t\t\n-\t\tfinal User user = namedParameterJDBCTemplate.\n-\t\t\t\tqueryForObject(Queries.GET_USER.get(), params, new UserMapper());\n-\t\t\n-\t\tSystem.out.println(\"Found: \" + user);\n-\t\t\n-\t\treturn user;\n-\t}\n-\t\n-\t@Override\n-\tpublic List<User> findAll() {\n-\t\t\n-\t\tMap<String, Object> params = new HashMap<String, Object>();\n-\t\t\n-        final List<User> result = namedParameterJDBCTemplate.query(Queries.GET_ALL_USERS.get(), params, new UserMapper());\n-        \n-        return result;\n-        \n-\t}\n-\t\n-\tprivate static final class UserMapper implements RowMapper<User> {\n-\t\t@Override\n-\t\tpublic User mapRow(final ResultSet rs, final int rowNum) throws SQLException {\n-\t\t\tfinal User user = new User();\n-\t\t\tuser.setId(rs.getInt(\"id\"));\n-\t\t\tuser.setName(rs.getString(\"name\"));\n-\t\t\tuser.setEmail(rs.getString(\"email\"));\n-\t\t\treturn user;\n-\t\t}\n-\t}\n-\t\n-}\n\ndiff --git a/memory-dao-test/src/main/java/com/memory/dao/pojo/User.java b/memory-dao-test/src/main/java/com/memory/dao/pojo/User.java\n--- a/memory-dao-test/src/main/java/com/memory/dao/pojo/User.java\n+++ b/memory-dao-test/src/main/java/com/memory/dao/pojo/User.java\n@@ -1,38 +0,0 @@\n-package com.memory.dao.pojo;\n-\n-public class User {\n-\t\n-\tprivate int id;\n-\tprivate String name;\n-\tprivate String email;\n-\t\n-\tpublic int getId() {\n-\t\treturn id;\n-\t}\n-\t\n-\tpublic void setId(final int id) {\n-\t\tthis.id = id;\n-\t}\n-\t\n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-\t\n-\tpublic void setName(final String name) {\n-\t\tthis.name = name;\n-\t}\n-\n-\tpublic String getEmail() {\n-\t\treturn email;\n-\t}\n-\n-\tpublic void setEmail(final String email) {\n-\t\tthis.email = email;\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"User [id=\" + id + \", name=\" + name + \", email=\" + email + \"]\";\n-\t}\n-\n-}\n\ndiff --git a/memory-dao-test/src/test/java/com/memory/dao/AppTest.java b/memory-dao-test/src/test/java/com/memory/dao/AppTest.java\n--- a/memory-dao-test/src/test/java/com/memory/dao/AppTest.java\n+++ b/memory-dao-test/src/test/java/com/memory/dao/AppTest.java\n@@ -1,30 +0,0 @@\n-package com.memory.dao;\n-\n-import static org.junit.Assert.assertTrue;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.junit.runner.RunWith;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.test.context.ContextConfiguration;\n-\n-import com.memory.dao.db.UserDAO;\n-\n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(\"/beans.xml\")\n-public class AppTest {\n-\n-\t@Autowired\n-\tprivate UserDAO dao;\n-\t\n-\t@Before\n-\tpublic void setUp() {\n-\t\tSystem.out.println(String.format(\"Dao is: %s\", dao));\n-\t}\n-\t\n-\t@Test\n-\tpublic void testApp() {\n-\t\tassertTrue(true);\n-\t}\n-}",
    "output": "Change code to use interfaces instead of implementations."
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java\n--- a/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java\n+++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java\n@@ -22,10 +22,13 @@\n  */\n package com.iluwatar.dao;\n \n-public interface CustomerSchemaSql {\n+public final class CustomerSchemaSql {\n \n-  String CREATE_SCHEMA_SQL = \"CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), \" \n+  private CustomerSchemaSql() {}\n+\n+  public static final String CREATE_SCHEMA_SQL = \"CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), \" \n       + \"LNAME VARCHAR(100))\";\n   \n-  String DELETE_SCHEMA_SQL = \"DROP TABLE CUSTOMERS\";\n+  public static final String DELETE_SCHEMA_SQL = \"DROP TABLE CUSTOMERS\";\n+  \n }",
    "output": "Change constant interface pattern with a Noninstantiable class"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n@@ -27,22 +27,24 @@\n  */\r\n public final class IvoryTower {\r\n \r\n-  /**\r\n-   * Static to class instance of the class.\r\n-   */\r\n-  private static final IvoryTower INSTANCE = new IvoryTower();\r\n-\r\n   /**\r\n    * Private constructor so nobody can instantiate the class.\r\n    */\r\n   private IvoryTower() {}\r\n \r\n+  private static class IvoryTowerHolder {\r\n+    /**\r\n+   * Static to class instance of the class.\r\n+   */\r\n+    private static final IvoryTower INSTANCE = new IvoryTower();\r\n+  }\r\n+\r\n   /**\r\n    * To be called by user to obtain instance of the class.\r\n    *\r\n    * @return instance of the singleton.\r\n    */\r\n   public static IvoryTower getInstance() {\r\n-    return INSTANCE;\r\n+    return IvoryTowerHolder.INSTANCE;\r\n   }\r\n }\r",
    "output": "Add initialization on demand holder idiom."
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n@@ -67,7 +67,7 @@ public static void main(String[] args) {\n           addFundsToLotteryAccount(bank, scanner);\n         } else if (\"3\".equals(cmd)) {\n           submitTicket(service, scanner);\n-        } else if (cmd.equals(\"4\")) {\n+        } else if (\"4\".equals(cmd)) {\n           checkTicket(service, scanner);\n         } else if (\"5\".equals(cmd)) {\n           exit = true;",
    "output": "Sonar bug fixes using Yoda condition in equals expression when comparing String literal with String object.\nUsing try-with-resources if we use Scanner to close the underlying stream is a good practice to handle resources.\nMinimal refactor."
  },
  {
    "input": "diff --git a/tls/src/test/java/com/iluwatar/tls/AppTest.java b/tls/src/test/java/com/iluwatar/tls/AppTest.java\n--- a/tls/src/test/java/com/iluwatar/tls/AppTest.java\n+++ b/tls/src/test/java/com/iluwatar/tls/AppTest.java\n@@ -0,0 +1,134 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2016 Thomas Bauer\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.tls;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * \n+ * Application test\n+ * \n+ * In this test {@link App} is executed. After the run of App the converted Data is available in\n+ * the static lists created by the run of the app.\n+ * <p>\n+ * After a successful run 20 date values should be in the date value list. All dates should have\n+ * the same value (15.11.2015). To avoid problems with time zone not the date instances themselve\n+ * are compared in the test. For the test the dates are converted in a string format DD.MM.YYY\n+ * <p>\n+ * Additionally the number of list entries are tested for both the list with the date values\n+ * and the list with the exceptions \n+ *\n+ */\n+public class AppTest {\n+\n+  // Class variables used in setup() have to be static because the Compiler wants the \n+  // setup() method to be static\n+  /**\n+   * Number of date values in the list created by the run of App. Will be set in setup()\n+   */\n+  static int actualCounterDateValues = 0;\n+\n+  /**\n+   * Number of exceptions in the list created by the run of App. Will be set in setup()\n+   */\n+  static int actualCounterExceptions = 0;\n+\n+  /**\n+   * The date values created by the run of App. List will be filled in the setup() method\n+   */\n+  static List<String> actualDateValues = new ArrayList<String>();\n+\n+  /**\n+   * Expected number of date values in the date value list created by the run of App\n+   */\n+  int expectedCounterDateValues = 20;\n+\n+  /**\n+   * Expected number of exceptions in the exception list created by the run of App. \n+   */\n+  int expectedCounterExceptions = 0;\n+\n+  /**\n+   * Expected content of the list containing the date values created by the run of App\n+   */\n+  List<String> expectedDateValues = Arrays.asList(\"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\",\n+      \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\",\n+      \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\", \"15.11.2015\");\n+\n+  /**\n+   * Run App. After this run the result is available in the static lists\n+   */\n+  @BeforeClass\n+  public static void setup() {\n+    String[] args = {};\n+    App.main(args);\n+\n+    // Prepare data created by the run of App for the tests\n+    for (Date dt : App.dateList) {\n+      actualCounterDateValues++;\n+      // a correct run should deliver 20 times 15.12.2015\n+      Calendar cal = Calendar.getInstance();\n+      cal.setTime(dt);\n+      // Convert date value to string format DD.MM.YYYY\n+      actualDateValues.add(\n+          cal.get(Calendar.DAY_OF_MONTH) + \".\" + cal.get(Calendar.MONTH) + \".\" + +cal.get(Calendar.YEAR));\n+    }\n+    for (@SuppressWarnings(\"unused\") String exc : App.exceptionList) {\n+      actualCounterExceptions++;\n+      // a correct run should no exceptions\n+    }\n+  }\n+\n+  /**\n+   * Test date values after run of App. A correct run should deliver 20 times 15.12.2015\n+   */\n+  @Test\n+  public void testDateValues() {\n+    assertEquals(expectedDateValues, actualDateValues);\n+  }\n+\n+  /**\n+   * Test number of dates in list after und of App. A correct run should deliver 20 date values\n+   */\n+  @Test\n+  public void testCounterDateValues() {\n+    assertEquals(expectedCounterDateValues, actualCounterDateValues);\n+  }\n+\n+  /**\n+   * Test number of Exceptions in list after und of App. A correct run should deliver no exceptions\n+   */\n+  @Test\n+  public void testCounterExceptions() {\n+    assertEquals(expectedCounterExceptions, actualCounterExceptions);\n+  }\n+}",
    "output": "Upload junit test"
  },
  {
    "input": "diff --git a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java\n--- a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java\n+++ b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java\n@@ -23,7 +23,7 @@\n package org.queue.load.leveling;\n \n import org.junit.Test;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * \n\ndiff --git a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java\n--- a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java\n+++ b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java\n@@ -23,7 +23,7 @@\n package org.queue.load.leveling;\n \n import org.junit.Test;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * ",
    "output": "Remove unused imports in tests"
  },
  {
    "input": "diff --git a/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java b/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java\n--- a/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java\n+++ b/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java\n@@ -26,5 +26,5 @@\n  * \n */\n public interface Task {\n-  public void submit(Message msg);\n+  void submit(Message msg);\n }",
    "output": "Fix PMD issue."
  },
  {
    "input": "diff --git a/queue-load-leveling/src/main/java/org/queue/load/leveling/App.java b/queue-load-leveling/src/main/java/org/queue/load/leveling/App.java\n--- a/queue-load-leveling/src/main/java/org/queue/load/leveling/App.java\n+++ b/queue-load-leveling/src/main/java/org/queue/load/leveling/App.java\n@@ -71,25 +71,25 @@ public static void main(String[] args) {\n       LOGGER.info(\"All the TaskGenerators started.\");\n       \n       // Create three TaskGenerator threads. Each of them will submit different number of jobs.\n-      Runnable taskRunnable_1 = new TaskGenerator(msgQueue, 5);\n-      Runnable taskRunnable_2 = new TaskGenerator(msgQueue, 1);\n-      Runnable taskRunnable_3 = new TaskGenerator(msgQueue, 2);\n+      Runnable taskRunnable1 = new TaskGenerator(msgQueue, 5);\n+      Runnable taskRunnable2 = new TaskGenerator(msgQueue, 1);\n+      Runnable taskRunnable3 = new TaskGenerator(msgQueue, 2);\n       \n-      Thread taskGenerator_1 = new Thread(taskRunnable_1, \"Task_Generator_1\");\n-      Thread taskGenerator_2 = new Thread(taskRunnable_2, \"Task_Generator_2\");\n-      Thread taskGenerator_3 = new Thread(taskRunnable_3, \"Task_Generator_3\");\n+      Thread taskGenerator1 = new Thread(taskRunnable1, \"Task_Generator_1\");\n+      Thread taskGenerator2 = new Thread(taskRunnable2, \"Task_Generator_2\");\n+      Thread taskGenerator3 = new Thread(taskRunnable3, \"Task_Generator_3\");\n       \n-      taskGenerator_1.start();\n-      taskGenerator_2.start();\n-      taskGenerator_3.start();\n+      taskGenerator1.start();\n+      taskGenerator2.start();\n+      taskGenerator3.start();\n       \n       LOGGER.info(\"Service Executor started.\");\n       \n       // First create e service which will process all the jobs.\n       Runnable srvRunnable = new ServiceExecutor(msgQueue);\n       Thread srvExec = new Thread(srvRunnable, \"Service_Executor_Thread\");\n       srvExec.start();\n-    } catch(Exception e) {\n+    } catch (Exception e) {\n       LOGGER.error(e.getMessage());\n     }\n   }\n\ndiff --git a/queue-load-leveling/src/main/java/org/queue/load/leveling/MessageQueue.java b/queue-load-leveling/src/main/java/org/queue/load/leveling/MessageQueue.java\n--- a/queue-load-leveling/src/main/java/org/queue/load/leveling/MessageQueue.java\n+++ b/queue-load-leveling/src/main/java/org/queue/load/leveling/MessageQueue.java\n@@ -48,14 +48,13 @@ public MessageQueue() {\n   /**\n    * All the TaskGenerator threads will call this method to insert the\n    * Messages in to the Blocking Queue. \n-   * @param msg\n    */\n   public void submitMsg(Message msg) {\n     try {\n-      if(null != msg) {\n+      if (null != msg) {\n         blkQueue.add(msg);\n       }\n-    } catch(Exception e) {\n+    } catch (Exception e) {\n       LOGGER.error(e.getMessage());\n     }\n   }\n@@ -68,8 +67,8 @@ public void submitMsg(Message msg) {\n   public Message retrieveMsg() {\n     Message retrievedMsg = null;\n     try {\n-       retrievedMsg = blkQueue.poll();\n-    } catch(Exception e) {\n+      retrievedMsg = blkQueue.poll();\n+    } catch (Exception e) {\n       LOGGER.error(e.getMessage());\n     }\n     \n\ndiff --git a/queue-load-leveling/src/main/java/org/queue/load/leveling/ServiceExecutor.java b/queue-load-leveling/src/main/java/org/queue/load/leveling/ServiceExecutor.java\n--- a/queue-load-leveling/src/main/java/org/queue/load/leveling/ServiceExecutor.java\n+++ b/queue-load-leveling/src/main/java/org/queue/load/leveling/ServiceExecutor.java\n@@ -47,20 +47,20 @@ public ServiceExecutor(MessageQueue msgQueue) {\n    */\n   public void run() {\n     try {\n-      while(true) {\n+      while (true) {\n         Message msg = msgQueue.retrieveMsg();\n         \n-        if(null != msg) {\n+        if (null != msg) {\n           LOGGER.info(msg.toString() + \" is served.\");\n         } else {\n           LOGGER.info(\"ServiceExecutor: All tasks are executed. Waiting.\");\n         }\n         \n         Thread.sleep(1000);\n       }\n-    } catch(InterruptedException ie) { \n+    } catch (InterruptedException ie) { \n       LOGGER.error(ie.getMessage());\n-    } catch(Exception e) {\n+    } catch (Exception e) {\n       LOGGER.error(e.getMessage());\n     }\n   }\n\ndiff --git a/queue-load-leveling/src/main/java/org/queue/load/leveling/TaskGenerator.java b/queue-load-leveling/src/main/java/org/queue/load/leveling/TaskGenerator.java\n--- a/queue-load-leveling/src/main/java/org/queue/load/leveling/TaskGenerator.java\n+++ b/queue-load-leveling/src/main/java/org/queue/load/leveling/TaskGenerator.java\n@@ -54,7 +54,7 @@ public TaskGenerator(MessageQueue msgQueue, int msgCount) {\n   public void submit(Message msg) {\n     try {\n       this.msgQueue.submitMsg(msg);\n-    } catch(Exception e) {\n+    } catch (Exception e) {\n       LOGGER.error(e.getMessage());\n     }\n   }\n@@ -65,7 +65,7 @@ public void submit(Message msg) {\n    */\n   public void run() {\n     try {\n-      while(this.msgCount > 0) {\n+      while (this.msgCount > 0) {\n         String statusMsg = \"Message-\" + this.msgCount + \" submitted by \" + Thread.currentThread().getName();\n         Message newMessage = new Message(statusMsg);\n         this.submit(newMessage);\n@@ -78,9 +78,9 @@ public void run() {\n         // Make the current thread to sleep after every Message submission.\n         Thread.sleep(1000);\n       }\n-    } catch(InterruptedException ie) {\n+    } catch (InterruptedException ie) {\n       LOGGER.error(ie.getMessage());\n-    } catch(Exception e) {\n+    } catch (Exception e) {\n       LOGGER.error(e.getMessage());\n     }\n   }",
    "output": "Upgrade checkstyle errors."
  },
  {
    "input": "diff --git a/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java b/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java\n--- a/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java\n+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java\n@@ -60,7 +60,7 @@ public static synchronized SessionFactory getSessionFactory() {\n                 .setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.H2Dialect\")\n                 .setProperty(\"hibernate.connection.url\", \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\")\n                 .setProperty(\"hibernate.current_session_context_class\", \"thread\")\n-                .setProperty(\"hibernate.show_sql\", \"true\")\n+                .setProperty(\"hibernate.show_sql\", \"false\")\n                 .setProperty(\"hibernate.hbm2ddl.auto\", \"create-drop\").buildSessionFactory();\n       } catch (Throwable ex) {\n         LOGGER.error(\"Initial SessionFactory creation failed.\", ex);",
    "output": "Reduced amount of information logged"
  },
  {
    "input": "diff --git a/composite/src/main/java/com/iluwatar/composite/Letter.java b/composite/src/main/java/com/iluwatar/composite/Letter.java\n--- a/composite/src/main/java/com/iluwatar/composite/Letter.java\n+++ b/composite/src/main/java/com/iluwatar/composite/Letter.java\n@@ -22,18 +22,13 @@\n  */\n package com.iluwatar.composite;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n- * \n+ *\n  * Letter\n  *\n  */\n public class Letter extends LetterComposite {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Letter.class);\n-\n   private char c;\n \n   public Letter(char c) {\n@@ -42,7 +37,7 @@ public Letter(char c) {\n \n   @Override\n   protected void printThisBefore() {\n-    LOGGER.info(String.valueOf(c));\n+    System.out.print(c);\n   }\n \n   @Override\n\ndiff --git a/composite/src/main/java/com/iluwatar/composite/Sentence.java b/composite/src/main/java/com/iluwatar/composite/Sentence.java\n--- a/composite/src/main/java/com/iluwatar/composite/Sentence.java\n+++ b/composite/src/main/java/com/iluwatar/composite/Sentence.java\n@@ -22,20 +22,15 @@\n  */\n package com.iluwatar.composite;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import java.util.List;\n \n /**\n- * \n+ *\n  * Sentence\n  *\n  */\n public class Sentence extends LetterComposite {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Sentence.class);\n-\n   /**\n    * Constructor\n    */\n@@ -52,6 +47,6 @@ protected void printThisBefore() {\n \n   @Override\n   protected void printThisAfter() {\n-    LOGGER.info(\".\");\n+    System.out.print(\".\");\n   }\n }\n\ndiff --git a/composite/src/main/java/com/iluwatar/composite/Word.java b/composite/src/main/java/com/iluwatar/composite/Word.java\n--- a/composite/src/main/java/com/iluwatar/composite/Word.java\n+++ b/composite/src/main/java/com/iluwatar/composite/Word.java\n@@ -22,20 +22,15 @@\n  */\n package com.iluwatar.composite;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import java.util.List;\n \n /**\n- * \n+ *\n  * Word\n  *\n  */\n public class Word extends LetterComposite {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Word.class);\n-\n   /**\n    * Constructor\n    */\n@@ -47,7 +42,7 @@ public Word(List<Letter> letters) {\n \n   @Override\n   protected void printThisBefore() {\n-    LOGGER.info(\" \");\n+    System.out.print(\" \");\n   }\n \n   @Override",
    "output": "Revert changes in composite example, due to nature of this example using logger isn't good idea"
  },
  {
    "input": "diff --git a/object-mother/src/test/java/com/iluwatar/objectmother/test/RoyaltyObjectMotherTest.java b/object-mother/src/test/java/com/iluwatar/objectmother/test/RoyaltyObjectMotherTest.java\n--- a/object-mother/src/test/java/com/iluwatar/objectmother/test/RoyaltyObjectMotherTest.java\n+++ b/object-mother/src/test/java/com/iluwatar/objectmother/test/RoyaltyObjectMotherTest.java\n@@ -45,26 +45,26 @@ public void unsuccessfulKingFlirt() {\n   \n   @Test\n   public void queenIsBlockingFlirtCauseDrunkKing() {\n-    King soberUnhappyKing = RoyaltyObjectMother.createDrunkKing();\n+    King drunkUnhappyKing = RoyaltyObjectMother.createDrunkKing();\n     Queen notFlirtyQueen = RoyaltyObjectMother.createNotFlirtyQueen();\n-    soberUnhappyKing.flirt(notFlirtyQueen);\n-    assertFalse(soberUnhappyKing.isHappy());\n+    drunkUnhappyKing.flirt(notFlirtyQueen);\n+    assertFalse(drunkUnhappyKing.isHappy());\n   }\n   \n   @Test\n   public void queenIsBlockingFlirt() {\n-    King soberUnhappyKing = RoyaltyObjectMother.createHappyKing();\n+    King soberHappyKing = RoyaltyObjectMother.createHappyKing();\n     Queen notFlirtyQueen = RoyaltyObjectMother.createNotFlirtyQueen();\n-    soberUnhappyKing.flirt(notFlirtyQueen);\n-    assertFalse(soberUnhappyKing.isHappy());\n+    soberHappyKing.flirt(notFlirtyQueen);\n+    assertFalse(soberHappyKing.isHappy());\n   }\n   \n   @Test\n   public void successfullKingFlirt() {\n-    King soberUnhappyKing = RoyaltyObjectMother.createHappyKing();\n+    King soberHappyKing = RoyaltyObjectMother.createHappyKing();\n     Queen flirtyQueen = RoyaltyObjectMother.createFlirtyQueen();\n-    soberUnhappyKing.flirt(flirtyQueen);\n-    assertTrue(soberUnhappyKing.isHappy());\n+    soberHappyKing.flirt(flirtyQueen);\n+    assertTrue(soberHappyKing.isHappy());\n   }\n   \n   @Test",
    "output": "Change name of variables in test"
  },
  {
    "input": "diff --git a/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java\n--- a/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java\n+++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java\n@@ -31,7 +31,6 @@\n import java.util.concurrent.ExecutionException;\n \n import static org.junit.Assert.*;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.*;\n import static org.mockito.internal.verification.VerificationModeFactory.times;\n ",
    "output": "Unused import removed."
  },
  {
    "input": "diff --git a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java\n--- a/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java\n+++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java\n@@ -57,12 +57,10 @@ public <T> AsyncResult<T> startProcess(Callable<T> task, AsyncCallback<T> callba\n \n   @Override\n   public <T> T endProcess(AsyncResult<T> asyncResult) throws ExecutionException, InterruptedException {\n-    if (asyncResult.isCompleted()) {\n-      return asyncResult.getValue();\n-    } else {\n+    if (!asyncResult.isCompleted()) {\n       asyncResult.await();\n-      return asyncResult.getValue();\n     }\n+    return asyncResult.getValue();\n   }\n \n   /**",
    "output": "End process logic clause has been corrected."
  },
  {
    "input": "diff --git a/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java b/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java\n--- a/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java\n+++ b/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java\n@@ -84,15 +84,16 @@ public void testUnsuccessfulSynchronousEvent() throws InvalidOperationException\n   public void testFullSynchronousEvent() {\n     EventManager eventManager = new EventManager();\n     try {\n-      int eventTime = 5;\n+      int eventTime = 1;\n \n       int sEventId = eventManager.create(eventTime);\n       assertTrue(eventManager.getEventPool().size() == 1);\n       eventManager.start(sEventId);\n \n       long currentTime = System.currentTimeMillis();\n-      long endTime = currentTime + (eventTime + 5 * 1000); // +5 to give a bit of buffer time for event to complete\n-                                                           // properly.\n+      long endTime = currentTime + (eventTime + 2 * 1000); // +2 to give a bit of buffer time for event to\n+                                                           // complete\n+      // properly.\n       while (System.currentTimeMillis() < endTime) {\n       }\n \n@@ -108,7 +109,7 @@ public void testFullSynchronousEvent() {\n   public void testFullAsynchronousEvent() {\n     EventManager eventManager = new EventManager();\n     try {\n-      int eventTime = 5;\n+      int eventTime = 1;\n \n       int aEventId1 = eventManager.createAsync(eventTime);\n       int aEventId2 = eventManager.createAsync(eventTime);\n@@ -120,7 +121,7 @@ public void testFullAsynchronousEvent() {\n       eventManager.start(aEventId3);\n \n       long currentTime = System.currentTimeMillis();\n-      long endTime = currentTime + (eventTime + 5 * 1000); // +5 to give a bit of buffer time for event to complete\n+      long endTime = currentTime + (eventTime + 2 * 1000); // +2 to give a bit of buffer time for event to complete\n                                                            // properly.\n       while (System.currentTimeMillis() < endTime) {\n       }",
    "output": "Alter JUnit tests to run in lesser time."
  },
  {
    "input": "diff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java\n@@ -106,23 +106,23 @@ public void quickRun() {\n     try {\n       // Create an Asynchronous event.\n       int aEventId = eventManager.createAsync(60);\n-      System.out.println(\"Event [\" + aEventId + \"] has been created.\");\n+      System.out.println(\"Async Event [\" + aEventId + \"] has been created.\");\n       eventManager.start(aEventId);\n-      System.out.println(\"Event [\" + aEventId + \"] has been started.\");\n+      System.out.println(\"Async Event [\" + aEventId + \"] has been started.\");\n \n       // Create a Synchronous event.\n       int sEventId = eventManager.create(60);\n-      System.out.println(\"Event [\" + sEventId + \"] has been created.\");\n+      System.out.println(\"Sync Event [\" + sEventId + \"] has been created.\");\n       eventManager.start(sEventId);\n-      System.out.println(\"Event [\" + sEventId + \"] has been started.\");\n+      System.out.println(\"Sync Event [\" + sEventId + \"] has been started.\");\n \n       eventManager.status(aEventId);\n       eventManager.status(sEventId);\n \n       eventManager.cancel(aEventId);\n-      System.out.println(\"Event [\" + aEventId + \"] has been stopped.\");\n+      System.out.println(\"Async Event [\" + aEventId + \"] has been stopped.\");\n       eventManager.cancel(sEventId);\n-      System.out.println(\"Event [\" + sEventId + \"] has been stopped.\");\n+      System.out.println(\"Sync Event [\" + sEventId + \"] has been stopped.\");\n \n     } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException\n         | InvalidOperationException e) {\n\ndiff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java\n@@ -75,7 +75,7 @@ public void run() {\n     long endTime = currentTime + (eventTime * 1000);\n     while (System.currentTimeMillis() < endTime) {\n       try {\n-        Thread.sleep(5000); // Sleep for 5 seconds.\n+        Thread.sleep(1000); // Sleep for 1 second.\n       } catch (InterruptedException e) {\n         return;\n       }\n\ndiff --git a/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java b/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java\n--- a/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java\n+++ b/event-asynchronous/src/test/java/com/iluwatar/event/asynchronous/EventAsynchronousTest.java\n@@ -79,4 +79,56 @@ public void testUnsuccessfulSynchronousEvent() throws InvalidOperationException\n       System.out.println(e.getMessage());\n     }\n   }\n+\n+  @Test\n+  public void testFullSynchronousEvent() {\n+    EventManager eventManager = new EventManager();\n+    try {\n+      int eventTime = 5;\n+\n+      int sEventId = eventManager.create(eventTime);\n+      assertTrue(eventManager.getEventPool().size() == 1);\n+      eventManager.start(sEventId);\n+\n+      long currentTime = System.currentTimeMillis();\n+      long endTime = currentTime + (eventTime + 5 * 1000); // +5 to give a bit of buffer time for event to complete\n+                                                           // properly.\n+      while (System.currentTimeMillis() < endTime) {\n+      }\n+\n+      assertTrue(eventManager.getEventPool().size() == 0);\n+\n+    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException\n+        | InvalidOperationException e) {\n+      System.out.println(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testFullAsynchronousEvent() {\n+    EventManager eventManager = new EventManager();\n+    try {\n+      int eventTime = 5;\n+\n+      int aEventId1 = eventManager.createAsync(eventTime);\n+      int aEventId2 = eventManager.createAsync(eventTime);\n+      int aEventId3 = eventManager.createAsync(eventTime);\n+      assertTrue(eventManager.getEventPool().size() == 3);\n+\n+      eventManager.start(aEventId1);\n+      eventManager.start(aEventId2);\n+      eventManager.start(aEventId3);\n+\n+      long currentTime = System.currentTimeMillis();\n+      long endTime = currentTime + (eventTime + 5 * 1000); // +5 to give a bit of buffer time for event to complete\n+                                                           // properly.\n+      while (System.currentTimeMillis() < endTime) {\n+      }\n+\n+      assertTrue(eventManager.getEventPool().size() == 0);\n+\n+    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException e) {\n+      System.out.println(e.getMessage());\n+    }\n+  }\n }",
    "output": "Change based on review feedback."
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/App.java b/caching/src/main/java/com/iluwatar/caching/App.java\n--- a/caching/src/main/java/com/iluwatar/caching/App.java\n+++ b/caching/src/main/java/com/iluwatar/caching/App.java\n@@ -74,6 +74,7 @@ public static void main(String[] args) {\n     app.useReadAndWriteThroughStrategy();\n     app.useReadThroughAndWriteAroundStrategy();\n     app.useReadThroughAndWriteBehindStrategy();\n+    app.useCacheAsideStategy();\n   }\n \n   /**\n@@ -136,4 +137,26 @@ public void useReadThroughAndWriteBehindStrategy() {\n     AppManager.find(\"004\");\n     System.out.println(AppManager.printCacheContent());\n   }\n+\n+  /**\n+   * Cache-Aside\n+   */\n+  public void useCacheAsideStategy() {\n+    System.out.println(\"# CachingPolicy.ASIDE\");\n+    AppManager.initCachingPolicy(CachingPolicy.ASIDE);\n+    System.out.println(AppManager.printCacheContent());\n+\n+    UserAccount userAccount3 = new UserAccount(\"003\", \"Adam\", \"He likes food.\");\n+    UserAccount userAccount4 = new UserAccount(\"004\", \"Rita\", \"She hates cats.\");\n+    UserAccount userAccount5 = new UserAccount(\"005\", \"Isaac\", \"He is allergic to mustard.\");\n+    AppManager.save(userAccount3);\n+    AppManager.save(userAccount4);\n+    AppManager.save(userAccount5);\n+\n+    System.out.println(AppManager.printCacheContent());\n+    AppManager.find(\"003\");\n+    System.out.println(AppManager.printCacheContent());\n+    AppManager.find(\"004\");\n+    System.out.println(AppManager.printCacheContent());\n+  }\n }\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/AppManager.java b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/AppManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n@@ -81,6 +81,8 @@ public static UserAccount find(String userId) {\n       return CacheStore.readThrough(userId);\n     } else if (cachingPolicy == CachingPolicy.BEHIND) {\n       return CacheStore.readThroughWithWriteBackPolicy(userId);\n+    } else if (cachingPolicy == CachingPolicy.ASIDE) {\n+      return findAside(userId);\n     }\n     return null;\n   }\n@@ -95,10 +97,37 @@ public static void save(UserAccount userAccount) {\n       CacheStore.writeAround(userAccount);\n     } else if (cachingPolicy == CachingPolicy.BEHIND) {\n       CacheStore.writeBehind(userAccount);\n+    } else if (cachingPolicy == CachingPolicy.ASIDE) {\n+      saveAside(userAccount);\n     }\n   }\n \n   public static String printCacheContent() {\n     return CacheStore.print();\n   }\n+\n+  /**\n+   * Cache-Aside save user account helper\n+   */\n+  private static void saveAside(UserAccount userAccount) {\n+    DbManager.updateDb(userAccount);\n+    CacheStore.invalidate(userAccount.getUserId());\n+  }\n+\n+  /**\n+   * Cache-Aside find user account helper\n+   */\n+  private static UserAccount findAside(String userId) {\n+    UserAccount userAccount = CacheStore.get(userId);\n+    if (userAccount != null) {\n+      return userAccount;\n+    }\n+\n+    userAccount = DbManager.readFromDb(userId);\n+    if (userAccount != null) {\n+      CacheStore.set(userId, userAccount);\n+    }\n+\n+    return userAccount;\n+  }\n }\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/CacheStore.java b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n--- a/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n@@ -153,4 +153,25 @@ public static String print() {\n     sb.append(\"----\\n\");\n     return sb.toString();\n   }\n+\n+  /**\n+   * Delegate to backing cache store\n+   */\n+  public static UserAccount get(String userId) {\n+    return cache.get(userId);\n+  }\n+\n+  /**\n+   * Delegate to backing cache store\n+   */\n+  public static void set(String userId, UserAccount userAccount) {\n+    cache.set(userId, userAccount);\n+  }\n+\n+  /**\n+   * Delegate to backing cache store\n+   */\n+  public static void invalidate(String userId) {\n+    cache.invalidate(userId);\n+  }\n }\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java b/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java\n--- a/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java\n+++ b/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java\n@@ -28,7 +28,7 @@\n  *\n  */\n public enum CachingPolicy {\n-  THROUGH(\"through\"), AROUND(\"around\"), BEHIND(\"behind\");\n+  THROUGH(\"through\"), AROUND(\"around\"), BEHIND(\"behind\"), ASIDE(\"aside\");\n \n   private String policy;\n \n\ndiff --git a/caching/src/test/java/com/iluwatar/caching/CachingTest.java b/caching/src/test/java/com/iluwatar/caching/CachingTest.java\n--- a/caching/src/test/java/com/iluwatar/caching/CachingTest.java\n+++ b/caching/src/test/java/com/iluwatar/caching/CachingTest.java\n@@ -60,4 +60,9 @@ public void testReadThroughAndWriteAroundStrategy() {\n   public void testReadThroughAndWriteBehindStrategy() {\n     app.useReadThroughAndWriteBehindStrategy();\n   }\n+\n+  @Test\n+  public void testCacheAsideStrategy() {\n+    app.useCacheAsideStategy();\n+  }\n }",
    "output": "Caching pattern: Implementation of Cache-Aside pattern"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/CacheStore.java b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n--- a/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n@@ -40,7 +40,7 @@ private CacheStore() {\n    * Init cache capacity\n    */\n   public static void initCapacity(int capacity) {\n-    if (null == cache) {\n+    if (cache == null) {\n       cache = new LruCache(capacity);\n     } else {\n       cache.setCapacity(capacity);\n@@ -121,7 +121,7 @@ public static void writeBehind(UserAccount userAccount) {\n    * Clears cache\n    */\n   public static void clearCache() {\n-    if (null != cache) {\n+    if (cache != null) {\n       cache.clear();\n     }\n   }\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/DbManager.java b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/DbManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n@@ -82,7 +82,7 @@ public static UserAccount readFromDb(String userId) {\n       }\n       return null;\n     }\n-    if (null == db) {\n+    if (db == null) {\n       try {\n         connect();\n       } catch (ParseException e) {\n@@ -106,7 +106,7 @@ public static void writeToDb(UserAccount userAccount) {\n       virtualDB.put(userAccount.getUserId(), userAccount);\n       return;\n     }\n-    if (null == db) {\n+    if (db == null) {\n       try {\n         connect();\n       } catch (ParseException e) {\n@@ -126,7 +126,7 @@ public static void updateDb(UserAccount userAccount) {\n       virtualDB.put(userAccount.getUserId(), userAccount);\n       return;\n     }\n-    if (null == db) {\n+    if (db == null) {\n       try {\n         connect();\n       } catch (ParseException e) {\n@@ -148,7 +148,7 @@ public static void upsertDb(UserAccount userAccount) {\n       virtualDB.put(userAccount.getUserId(), userAccount);\n       return;\n     }\n-    if (null == db) {\n+    if (db == null) {\n       try {\n         connect();\n       } catch (ParseException e) {",
    "output": "Caching pattern: Style fix for null check"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/LruCache.java b/caching/src/main/java/com/iluwatar/caching/LruCache.java\n--- a/caching/src/main/java/com/iluwatar/caching/LruCache.java\n+++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java\n@@ -136,10 +136,11 @@ public boolean contains(String userId) {\n    * Invalidate cache for user\n    */\n   public void invalidate(String userId) {\n-    System.out.println(\"# \" + userId + \" has been updated! Removing older version from cache...\");\n-    Node toBeRemoved = cache.get(userId);\n-    remove(toBeRemoved);\n-    cache.remove(userId);\n+    Node toBeRemoved = cache.remove(userId);\n+    if (toBeRemoved != null) {\n+      System.out.println(\"# \" + userId + \" has been updated! Removing older version from cache...\");\n+      remove(toBeRemoved);\n+    }\n   }\n \n   public boolean isFull() {",
    "output": "Caching pattern: Refactor LRU cache to avoid NPE and unnecessary cache lookup"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/AppManager.java b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/AppManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n@@ -64,12 +64,7 @@ public static void initDb(boolean useMongoDb) {\n   public static void initCachingPolicy(CachingPolicy policy) {\n     cachingPolicy = policy;\n     if (cachingPolicy == CachingPolicy.BEHIND) {\n-      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n-        @Override\n-        public void run() {\n-          CacheStore.flushCache();\n-        }\n-      }));\n+      Runtime.getRuntime().addShutdownHook(new Thread(CacheStore::flushCache));\n     }\n     CacheStore.clearCache();\n   }",
    "output": "Caching pattern: Refactor shutdown hook to use method reference"
  },
  {
    "input": "diff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java\n@@ -138,11 +138,10 @@ public void runInteractiveMode() {\n \n     Scanner s = new Scanner(System.in);\n     int option = -1;\n-    while (option != 5) {\n+    while (option != 4) {\n       System.out.println(\"Hello. Would you like to boil some eggs?\");\n-      System.out.println(\n-          \"(1) BOIL AN EGG \\n(2) STOP BOILING THIS EGG \\n(3) HOW IS MY EGG? \\n(4) HOW ARE MY EGGS? \\n(5) EXIT\");\n-      System.out.print(\"Choose [1,2,3,4,5]: \");\n+      System.out.println(\"(1) BOIL AN EGG \\n(2) STOP BOILING THIS EGG \\n(3) HOW ARE MY EGGS? \\n(4) EXIT\");\n+      System.out.print(\"Choose [1,2,3,4]: \");\n       option = s.nextInt();\n \n       if (option == 1) {\n@@ -181,16 +180,22 @@ public void runInteractiveMode() {\n           System.out.println(e.getMessage());\n         }\n       } else if (option == 3) {\n-        System.out.print(\"Which egg?: \");\n-        int eventId = s.nextInt();\n-        try {\n-          eventManager.status(eventId);\n-        } catch (EventDoesNotExistException e) {\n-          System.out.println(e.getMessage());\n+        s.nextLine();\n+        System.out.print(\"Just one egg (O) OR all of them (A) ?: \");\n+        String eggChoice = s.nextLine();\n+\n+        if (eggChoice.equalsIgnoreCase(\"O\")) {\n+          System.out.print(\"Which egg?: \");\n+          int eventId = s.nextInt();\n+          try {\n+            eventManager.status(eventId);\n+          } catch (EventDoesNotExistException e) {\n+            System.out.println(e.getMessage());\n+          }\n+        } else if (eggChoice.equalsIgnoreCase(\"A\")) {\n+          eventManager.statusOfAllEvents();\n         }\n       } else if (option == 4) {\n-        eventManager.statusOfAllEvents();\n-      } else if (option == 5) {\n         eventManager.shutdown();\n       }\n     }\n\ndiff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java\n@@ -25,13 +25,25 @@ public class Event implements IEvent, Runnable {\n \n   private int eventId;\n   private int eventTime;\n+  private boolean isSynchronous;\n   private Thread thread;\n   private boolean isComplete = false;\n   private ThreadCompleteListener eventListener;\n \n-  public Event(final int eventId, final int eventTime) {\n+  /**\n+   * \n+   * @param eventId event ID\n+   * @param eventTime event time\n+   * @param isSynchronous is of synchronous type\n+   */\n+  public Event(final int eventId, final int eventTime, final boolean isSynchronous) {\n     this.eventId = eventId;\n     this.eventTime = eventTime;\n+    this.isSynchronous = isSynchronous;\n+  }\n+\n+  public boolean isSynchronous() {\n+    return isSynchronous;\n   }\n \n   @Override\n@@ -42,6 +54,9 @@ public void start() {\n \n   @Override\n   public void stop() {\n+    if (null == thread) {\n+      return;\n+    }\n     thread.interrupt();\n   }\n \n\ndiff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventManager.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventManager.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventManager.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/EventManager.java\n@@ -61,11 +61,12 @@ public EventManager() {\n    */\n   public int create(int eventTime)\n       throws MaxNumOfEventsAllowedException, InvalidOperationException, LongRunningEventException {\n-    int eventId = createEvent(eventTime);\n     if (currentlyRunningSyncEvent != -1) {\n       throw new InvalidOperationException(\n           \"Event [\" + currentlyRunningSyncEvent + \"] is still running. Please wait until it finishes and try again.\");\n     }\n+\n+    int eventId = createEvent(eventTime, true);\n     currentlyRunningSyncEvent = eventId;\n \n     return eventId;\n@@ -80,10 +81,11 @@ public int create(int eventTime)\n    * @throws LongRunningEventException Long running events are not allowed in the app.\n    */\n   public int createAsync(int eventTime) throws MaxNumOfEventsAllowedException, LongRunningEventException {\n-    return createEvent(eventTime);\n+    return createEvent(eventTime, false);\n   }\n \n-  private int createEvent(int eventTime) throws MaxNumOfEventsAllowedException, LongRunningEventException {\n+  private int createEvent(int eventTime, boolean isSynchronous)\n+      throws MaxNumOfEventsAllowedException, LongRunningEventException {\n     if (eventPool.size() == MAX_RUNNING_EVENTS) {\n       throw new MaxNumOfEventsAllowedException(\"Too many events are running at the moment. Please try again later.\");\n     }\n@@ -95,7 +97,7 @@ private int createEvent(int eventTime) throws MaxNumOfEventsAllowedException, Lo\n \n     int newEventId = generateId();\n \n-    Event newEvent = new Event(newEventId, eventTime);\n+    Event newEvent = new Event(newEventId, eventTime, isSynchronous);\n     newEvent.addListener(this);\n     eventPool.put(newEventId, newEvent);\n \n@@ -194,6 +196,9 @@ private int generateId() {\n   @Override\n   public void completedEventHandler(int eventId) {\n     eventPool.get(eventId).status();\n+    if (eventPool.get(eventId).isSynchronous()) {\n+      currentlyRunningSyncEvent = -1;\n+    }\n     eventPool.remove(eventId);\n   }\n ",
    "output": "Change based on latest code review"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java\n@@ -65,7 +65,7 @@ public LotteryNumbers performLottery() {\n     LotteryNumbers numbers = LotteryNumbers.createRandom();\n     Map<LotteryTicketId, LotteryTicket> tickets = getAllSubmittedTickets();\n     for (LotteryTicketId id : tickets.keySet()) {\n-      LotteryTicketCheckResult result = new LotteryTicketChecker(repository).checkTicketForPrize(id, numbers);\n+      LotteryTicketCheckResult result = LotteryUtils.checkTicketForPrize(repository, id, numbers);\n       if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.WIN_PRIZE)) {\n         boolean transferred = wireTransfers.transferFunds(LotteryConstants.PRIZE_AMOUNT,\n             LotteryConstants.SERVICE_BANK_ACCOUNT, tickets.get(id).getPlayerDetails().getBankAccount());\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java\n@@ -72,6 +72,6 @@ public Optional<LotteryTicketId> submitTicket(LotteryTicket ticket) {\n    * Check if lottery ticket has won\n    */\n   public LotteryTicketCheckResult checkTicketForPrize(LotteryTicketId id, LotteryNumbers winningNumbers) {\n-    return new LotteryTicketChecker(repository).checkTicketForPrize(id, winningNumbers);\n+    return LotteryUtils.checkTicketForPrize(repository, id, winningNumbers);\n   }\n }\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryUtils.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryUtils.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryUtils.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryUtils.java\n@@ -27,20 +27,18 @@\n import java.util.Optional;\n \n /**\n- * Lottery ticket checker\n+ * Lottery utilities\n  */\n-public class LotteryTicketChecker {\n+public class LotteryUtils {\n \n-  private final LotteryTicketRepository repository;\n-\n-  public LotteryTicketChecker(LotteryTicketRepository repository) {\n-    this.repository = repository;\n+  private LotteryUtils() {\n   }\n \n   /**\n-   * Check if lottery ticket has won\n+   * Checks if lottery ticket has won\n    */\n-  public LotteryTicketCheckResult checkTicketForPrize(LotteryTicketId id, LotteryNumbers winningNumbers) {\n+  public static LotteryTicketCheckResult checkTicketForPrize(LotteryTicketRepository repository, LotteryTicketId id,\n+                                                      LotteryNumbers winningNumbers) {\n     Optional<LotteryTicket> optional = repository.findById(id);\n     if (optional.isPresent()) {\n       if (optional.get().getNumbers().equals(winningNumbers)) {",
    "output": "Hexagonal pattern: Introduce lottery utils class"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n@@ -79,37 +79,45 @@ public static void main(String[] args) {\n         PlayerDetails details = PlayerDetails.create(email, account, phone);\n         System.out.println(\"Give 4 comma separated lottery numbers?\");\n         String numbers = readString(scanner);\n-        String[] parts = numbers.split(\",\");\n-        Set<Integer> chosen = new HashSet<>();\n-        for (int i = 0; i < 4; i++) {\n-          chosen.add(Integer.parseInt(parts[i]));\n-        }\n-        LotteryNumbers lotteryNumbers = LotteryNumbers.create(chosen);\n-        LotteryTicket lotteryTicket = LotteryTicket.create(new LotteryTicketId(), details, lotteryNumbers);\n-        Optional<LotteryTicketId> id = service.submitTicket(lotteryTicket);\n-        if (id.isPresent()) {\n-          System.out.println(\"Submitted lottery ticket with id: \" + id.get());\n-        } else {\n+        try {\n+          String[] parts = numbers.split(\",\");\n+          Set<Integer> chosen = new HashSet<>();\n+          for (int i = 0; i < 4; i++) {\n+            chosen.add(Integer.parseInt(parts[i]));\n+          }\n+          LotteryNumbers lotteryNumbers = LotteryNumbers.create(chosen);\n+          LotteryTicket lotteryTicket = LotteryTicket.create(new LotteryTicketId(), details, lotteryNumbers);\n+          Optional<LotteryTicketId> id = service.submitTicket(lotteryTicket);\n+          if (id.isPresent()) {\n+            System.out.println(\"Submitted lottery ticket with id: \" + id.get());\n+          } else {\n+            System.out.println(\"Failed submitting lottery ticket - please try again.\");\n+          }\n+        } catch (Exception e) {\n           System.out.println(\"Failed submitting lottery ticket - please try again.\");\n         }\n       } else if (cmd.equals(\"4\")) {\n         System.out.println(\"What is the ID of the lottery ticket?\");\n         String id = readString(scanner);\n         System.out.println(\"Give the 4 comma separated winning numbers?\");\n         String numbers = readString(scanner);\n-        String[] parts = numbers.split(\",\");\n-        Set<Integer> winningNumbers = new HashSet<>();\n-        for (int i = 0; i < 4; i++) {\n-          winningNumbers.add(Integer.parseInt(parts[i]));\n-        }\n-        LotteryTicketCheckResult result = service.checkTicketForPrize(\n-            new LotteryTicketId(Integer.parseInt(id)), LotteryNumbers.create(winningNumbers));\n-        if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.WIN_PRIZE)) {\n-          System.out.println(\"Congratulations! The lottery ticket has won!\");\n-        } else if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.NO_PRIZE)) {\n-          System.out.println(\"Unfortunately the lottery ticket did not win.\");\n-        } else {\n-          System.out.println(\"Such lottery ticket has not been submitted.\");\n+        try {\n+          String[] parts = numbers.split(\",\");\n+          Set<Integer> winningNumbers = new HashSet<>();\n+          for (int i = 0; i < 4; i++) {\n+            winningNumbers.add(Integer.parseInt(parts[i]));\n+          }\n+          LotteryTicketCheckResult result = service.checkTicketForPrize(\n+              new LotteryTicketId(Integer.parseInt(id)), LotteryNumbers.create(winningNumbers));\n+          if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.WIN_PRIZE)) {\n+            System.out.println(\"Congratulations! The lottery ticket has won!\");\n+          } else if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.NO_PRIZE)) {\n+            System.out.println(\"Unfortunately the lottery ticket did not win.\");\n+          } else {\n+            System.out.println(\"Such lottery ticket has not been submitted.\");\n+          }\n+        } catch (Exception e) {\n+          System.out.println(\"Failed checking the lottery ticket - please try again.\");\n         }\n       } else if (cmd.equals(\"5\")) {\n         exit = true;",
    "output": "Hexagonal pattern: Improve error handling in console lottery"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/database/MongoTicketRepositoryTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/database/MongoTicketRepositoryTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/database/MongoTicketRepositoryTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/database/MongoTicketRepositoryTest.java\n@@ -28,6 +28,7 @@\n import com.iluwatar.hexagonal.domain.PlayerDetails;\n import com.mongodb.MongoClient;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.util.Optional;\n@@ -38,6 +39,7 @@\n /**\n  * Tests for Mongo based ticket repository\n  */\n+@Ignore\n public class MongoTicketRepositoryTest {\n \n   private static final String TEST_HOST = \"localhost\";",
    "output": "Hexagonal pattern: Ignore Mongo repository test"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketId.java\n@@ -22,29 +22,49 @@\n  */\n package com.iluwatar.hexagonal.domain;\n \n-import java.util.UUID;\n-\n /**\n  * Lottery ticked id\n  */\n public class LotteryTicketId {\n-  \n-  private final UUID id;\n+\n+  private static volatile int numAllocated;\n+  private final int id;\n   \n   public LotteryTicketId() {\n-    id = UUID.randomUUID();\n+    this.id = numAllocated + 1;\n+    numAllocated++;\n   }\n \n-  public LotteryTicketId(String str) {\n-    id = UUID.fromString(str);\n+  public LotteryTicketId(int id) {\n+    this.id = id;\n   }\n   \n-  public UUID getId() {\n+  public int getId() {\n     return id;\n   }\n \n   @Override\n   public String toString() {\n-    return id.toString();\n+    return String.format(\"%d\", id);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    LotteryTicketId that = (LotteryTicketId) o;\n+\n+    return id == that.id;\n+\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return id;\n   }\n }\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/ConsoleLottery.java\n@@ -32,7 +32,6 @@\n import com.iluwatar.hexagonal.domain.LotteryTicketId;\n import com.iluwatar.hexagonal.domain.PlayerDetails;\n import com.iluwatar.hexagonal.module.LotteryModule;\n-import com.iluwatar.hexagonal.sampledata.SampleData;\n \n import java.util.HashSet;\n import java.util.Optional;\n@@ -52,7 +51,6 @@ public static void main(String[] args) {\n     Injector injector = Guice.createInjector(new LotteryModule());\n     LotteryService service = injector.getInstance(LotteryService.class);\n     WireTransfers bank = injector.getInstance(WireTransfers.class);\n-    SampleData.submitTickets(service, 20);\n     Scanner scanner = new Scanner(System.in);\n     boolean exit = false;\n     while (!exit) {\n@@ -103,7 +101,7 @@ public static void main(String[] args) {\n           winningNumbers.add(Integer.parseInt(parts[i]));\n         }\n         LotteryTicketCheckResult result = service.checkTicketForPrize(\n-            new LotteryTicketId(id), LotteryNumbers.create(winningNumbers));\n+            new LotteryTicketId(Integer.parseInt(id)), LotteryNumbers.create(winningNumbers));\n         if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.WIN_PRIZE)) {\n           System.out.println(\"Congratulations! The lottery ticket has won!\");\n         } else if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.NO_PRIZE)) {\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketIdTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketIdTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketIdTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketIdTest.java\n@@ -0,0 +1,45 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for lottery ticket id\n+ */\n+public class LotteryTicketIdTest {\n+\n+  @Test\n+  public void testEquals() {\n+    LotteryTicketId ticketId1 = new LotteryTicketId();\n+    LotteryTicketId ticketId2 = new LotteryTicketId();\n+    LotteryTicketId ticketId3 = new LotteryTicketId();\n+    assertFalse(ticketId1.equals(ticketId2));\n+    assertFalse(ticketId2.equals(ticketId3));\n+    LotteryTicketId ticketId4 = new LotteryTicketId(ticketId1.getId());\n+    assertTrue(ticketId1.equals(ticketId4));\n+  }\n+}",
    "output": "Hexagonal pattern: Simplified lottery ticket ids"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTest.java\n@@ -49,20 +49,16 @@\n public class LotteryTest {\n \n   private final LotterySystem lotterySystem = new LotterySystemImpl();\n-  private final LotteryTicketRepository repository = new LotteryTicketInMemoryRepository();\n   private final WireTransfers wireTransfers = new WireTransfersImpl();\n   \n   @Before\n   public void clear() {\n-    repository.deleteAll();\n+    // add funds to the test player's bank account\n+    wireTransfers.setFunds(\"123-12312\", 100);\n   }\n   \n   @Test\n   public void testLottery() {\n-    \n-    // setup bank account with funds\n-    wireTransfers.setFunds(\"123-12312\", 100);\n-    \n     // admin resets the lottery\n     lotterySystem.resetLottery();\n     assertEquals(lotterySystem.getAllSubmittedTickets().size(), 0);",
    "output": "Hexagonal pattern: remove unnecessary repository usage from a unit test"
  },
  {
    "input": "diff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java\n@@ -18,10 +18,10 @@\n \n public interface IEvent {\n \n-  public void start();\n+  void start();\n \n-  public void stop();\n+  void stop();\n \n-  public void status();\n+  void status();\n \n }",
    "output": "Remove PUBLIC modifiers from IEvent"
  },
  {
    "input": "diff --git a/promise/src/main/java/com/iluwatar/promise/Promise.java b/promise/src/main/java/com/iluwatar/promise/Promise.java\n--- a/promise/src/main/java/com/iluwatar/promise/Promise.java\n+++ b/promise/src/main/java/com/iluwatar/promise/Promise.java\n@@ -139,7 +139,7 @@ public <V> Promise<V> thenApply(Function<? super T, V> func) {\n   }\n \n   /**\n-   * A consume action provides the action, the value from source promise and fulfills the\n+   * Accesses the value from source promise and calls the consumer, then fulfills the\n    * destination promise.\n    */\n   private class ConsumeAction implements Runnable {\n@@ -166,8 +166,8 @@ public void run() {\n   }\n \n   /**\n-   * A function action provides transformation function, value from source promise and fulfills the\n-   * destination promise with the transformed value.\n+   * Accesses the value from source promise, then fulfills the destination promise using the\n+   * transformed value. The source value is transformed using the transformation function.\n    */\n   private class TransformAction<V> implements Runnable {\n \n@@ -184,8 +184,7 @@ private TransformAction(Promise<T> src, Promise<V> dest, Function<? super T, V>\n     @Override\n     public void run() {\n       try {\n-        V result = func.apply(src.get());\n-        dest.fulfill(result);\n+        dest.fulfill(func.apply(src.get()));\n       } catch (Throwable throwable) {\n         dest.fulfillExceptionally((Exception) throwable.getCause());\n       }",
    "output": ", updated javadocs"
  },
  {
    "input": "diff --git a/promise/src/main/java/com/iluwatar/promise/App.java b/promise/src/main/java/com/iluwatar/promise/App.java\n--- a/promise/src/main/java/com/iluwatar/promise/App.java\n+++ b/promise/src/main/java/com/iluwatar/promise/App.java\n@@ -61,11 +61,12 @@\n public class App {\n \n   private static final String DEFAULT_URL = \"https://raw.githubusercontent.com/iluwatar/java-design-patterns/Promise/promise/README.md\";\n-  private ExecutorService executor;\n-  private CountDownLatch stopLatch = new CountDownLatch(2);\n+  private final ExecutorService executor;\n+  private final CountDownLatch stopLatch;\n \n   private App() {\n     executor = Executors.newFixedThreadPool(2);\n+    stopLatch = new CountDownLatch(2);\n   }\n \n   /**",
    "output": "Work on , updated diagram and finishing touches"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n@@ -53,7 +53,7 @@ public static InitializingOnDemandHolderIdiom getInstance() {\n    * Provides the lazy-loaded Singleton instance.\n    */\n   private static class HelperHolder {\n-    public static final InitializingOnDemandHolderIdiom INSTANCE =\n+    private static final InitializingOnDemandHolderIdiom INSTANCE =\n         new InitializingOnDemandHolderIdiom();\n   }\n }",
    "output": "Change access level to private"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -38,7 +38,7 @@ private ThreadSafeLazyLoadedIvoryTower() {}\n   /**\n    * The instance gets created only when it is called for first time. Lazy-loading\n    */\n-  public  static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n+  public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n \n     if (instance == null) {\n       instance = new ThreadSafeLazyLoadedIvoryTower();",
    "output": "Remove extra space"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n@@ -69,7 +69,7 @@\n  */\n public class App {\n   \n-  private static List<PlayerDetails> allPlayerDetails;\n+  private static final List<PlayerDetails> allPlayerDetails;\n   \n   static {\n     allPlayerDetails = new ArrayList<>();",
    "output": "Add final keyword"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n@@ -79,36 +79,6 @@ public Set<Integer> getNumbers() {\n     return Collections.unmodifiableSet(numbers);\n   }\n   \n-  @Override\n-  public int hashCode() {\n-    final int prime = 31;\n-    int result = 1;\n-    result = prime * result + ((numbers == null) ? 0 : numbers.hashCode());\n-    return result;\n-  }\n-\n-  @Override\n-  public boolean equals(Object obj) {\n-    if (this == obj) {\n-      return true;\n-    }\n-    if (obj == null) {\n-      return false;\n-    }\n-    if (getClass() != obj.getClass()) {\n-      return false;\n-    }\n-    LotteryNumbers other = (LotteryNumbers) obj;\n-    if (numbers == null) {\n-      if (other.numbers != null) {\n-        return false;\n-      }\n-    } else if (!numbers.equals(other.numbers)) {\n-      return false;\n-    }\n-    return true;\n-  }\n-\n   /**\n    * Generates 4 unique random numbers between 1-20 into numbers set.\n    */\n@@ -122,7 +92,7 @@ private void generateRandomNumbers() {\n       }\n     }\n   }\n-\n+  \n   /**\n    * \n    * Helper class for generating random numbers.\n@@ -149,4 +119,34 @@ public int nextInt() {\n       return randomIterator.nextInt();\n     }\n   }\n+  \n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((numbers == null) ? 0 : numbers.hashCode());\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    LotteryNumbers other = (LotteryNumbers) obj;\n+    if (numbers == null) {\n+      if (other.numbers != null) {\n+        return false;\n+      }\n+    } else if (!numbers.equals(other.numbers)) {\n+      return false;\n+    }\n+    return true;\n+  }  \n }",
    "output": "Reorganize LotteryNumbers for easier inclusion in the blog"
  },
  {
    "input": "diff --git a/promise/src/main/java/com/iluwatar/promise/App.java b/promise/src/main/java/com/iluwatar/promise/App.java\n--- a/promise/src/main/java/com/iluwatar/promise/App.java\n+++ b/promise/src/main/java/com/iluwatar/promise/App.java\n@@ -22,6 +22,15 @@\n  */\n package com.iluwatar.promise;\n \n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URL;\n+import java.util.Map;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n@@ -44,6 +53,8 @@\n  * <li> Prevents callback hell and provides callback aggregation\n  * </ul>\n  * \n+ * <p>\n+ * \n  * @see CompletableFuture\n  */\n public class App {\n@@ -68,23 +79,57 @@ public static void main(String[] args) throws InterruptedException, ExecutionExc\n \n   private static void promiseUsage(Executor executor)\n       throws InterruptedException, ExecutionException {\n-    Promise<Integer> consumedPromise = new Promise<>();\n-    consumedPromise.fulfillInAsync(() -> {\n-      Thread.sleep(1000);\n-      return 10;\n-    }, executor).then(value -> {\n-      System.out.println(\"Consumed int value: \" + value);\n+    String urlString = \"https://raw.githubusercontent.com/iluwatar/java-design-patterns/Promise/promise/README.md\";\n+    Promise<Integer> lineCountPromise = new Promise<String>().fulfillInAsync(() -> {\n+      return downloadFile(urlString);\n+    }, executor).then(fileLocation -> {\n+      return countLines(fileLocation);\n     });\n     \n-    Promise<String> transformedPromise = new Promise<>();\n-    transformedPromise.fulfillInAsync(() -> {\n-      Thread.sleep(1000);\n-      return \"10\";\n-    }, executor).then(value -> { return Integer.parseInt(value); }).then(value -> {\n-      System.out.println(\"Consumed transformed int value: \" + value);\n+    Promise<Map<Character, Integer>> charFrequencyPromise = new Promise<String>().fulfillInAsync(() -> {\n+      return String.valueOf(downloadFile(urlString));\n+    }, executor).then(fileLocation -> {\n+      return characterFrequency(fileLocation);\n     });\n     \n-    consumedPromise.get();\n-    transformedPromise.get();\n+    lineCountPromise.get();\n+    System.out.println(\"Line count is: \" + lineCountPromise.get());\n+    charFrequencyPromise.get();\n+    System.out.println(\"Char frequency is: \" + charFrequencyPromise.get());\n+  }\n+\n+  private static Map<Character, Integer> characterFrequency(String fileLocation) {\n+    // TODO Auto-generated method stub\n+    return null;\n+  }\n+\n+  private static Integer countLines(String fileLocation) {\n+    int lineCount = 0;\n+    try (Reader reader = new FileReader(fileLocation); \n+        BufferedReader bufferedReader = new BufferedReader(reader);) {\n+      for (String line; (line = bufferedReader.readLine()) != null; ) {\n+        lineCount++;\n+      }\n+    } catch (IOException ex) {\n+      ex.printStackTrace();\n+    }\n+    return lineCount;\n+  }\n+\n+  private static String downloadFile(String urlString) throws InterruptedException, IOException {\n+    URL url = new URL(urlString);\n+    File file = File.createTempFile(\"promise_pattern\", null);\n+    try (Reader reader = new InputStreamReader(url.openStream()); \n+        BufferedReader bufferedReader = new BufferedReader(reader);\n+        FileWriter writer = new FileWriter(file)) {\n+      for (String line; (line = bufferedReader.readLine()) != null; ) {\n+        writer.write(line);\n+        writer.write(\"\\n\");\n+      }\n+    } catch (IOException ex) {\n+      ex.printStackTrace();\n+    }\n+    System.out.println(\"File downloaded at: \" + file.getAbsolutePath());\n+    return file.getAbsolutePath();\n   }\n }\n\ndiff --git a/promise/src/main/java/com/iluwatar/promise/Promise.java b/promise/src/main/java/com/iluwatar/promise/Promise.java\n--- a/promise/src/main/java/com/iluwatar/promise/Promise.java\n+++ b/promise/src/main/java/com/iluwatar/promise/Promise.java\n@@ -120,11 +120,11 @@ public <V> Promise<V> then(Function<? super T, V> func) {\n    */\n   private class ConsumeAction implements Runnable {\n \n-    private Promise<T> src;\n-    private Promise<Void> dest;\n-    private Consumer<? super T> action;\n+    private final Promise<T> src;\n+    private final Promise<Void> dest;\n+    private final Consumer<? super T> action;\n \n-    ConsumeAction(Promise<T> src, Promise<Void> dest, Consumer<? super T> action) {\n+    private ConsumeAction(Promise<T> src, Promise<Void> dest, Consumer<? super T> action) {\n       this.src = src;\n       this.dest = dest;\n       this.action = action;\n@@ -147,11 +147,11 @@ public void run() {\n    */\n   private class TransformAction<V> implements Runnable {\n \n-    private Promise<T> src;\n-    private Promise<V> dest;\n-    private Function<? super T, V> func;\n+    private final Promise<T> src;\n+    private final Promise<V> dest;\n+    private final Function<? super T, V> func;\n \n-    TransformAction(Promise<T> src, Promise<V> dest, Function<? super T, V> func) {\n+    private TransformAction(Promise<T> src, Promise<V> dest, Function<? super T, V> func) {\n       this.src = src;\n       this.dest = dest;\n       this.func = func;\n\ndiff --git a/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java b/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java\n--- a/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java\n+++ b/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java\n@@ -33,15 +33,15 @@\n  */\n class PromiseSupport<T> implements Future<T> {\n \n-  static final int RUNNING = 1;\n-  static final int FAILED = 2;\n-  static final int COMPLETED = 3;\n+  private static final int RUNNING = 1;\n+  private static final int FAILED = 2;\n+  private static final int COMPLETED = 3;\n \n-  final Object lock;\n+  private final Object lock;\n \n-  volatile int state = RUNNING;\n-  T value;\n-  Exception exception;\n+  private volatile int state = RUNNING;\n+  private T value;\n+  private Exception exception;\n \n   PromiseSupport() {\n     this.lock = new Object();",
    "output": "Work on , incorporate review changes"
  },
  {
    "input": "diff --git a/page-object/src/main/java/com/iluwatar/pageobject/App.java b/page-object/src/main/java/com/iluwatar/pageobject/App.java\n--- a/page-object/src/main/java/com/iluwatar/pageobject/App.java\n+++ b/page-object/src/main/java/com/iluwatar/pageobject/App.java\n@@ -69,25 +69,21 @@ private App() {\n    */\n   public static void main(String[] args) {\n \n-    String currentWorkingDir = System.getProperty(\"user.dir\");\n-    File applicationFile = new File(currentWorkingDir\n-        + \"/page-object/src/main/resources/sample-ui/login.html\");\n+    try {\n+      File applicationFile = new File(App.class.getClassLoader().getResource(\"sample-ui/login.html\").getPath());\n \n-    // should work for unix like OS (mac, unix etc...)\n-    if (Desktop.isDesktopSupported()) {\n-      try {\n+      // should work for unix like OS (mac, unix etc...)\n+      if (Desktop.isDesktopSupported()) {\n         Desktop.getDesktop().open(applicationFile);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n-      }\n-    } else {\n-      // java Desktop not supported - above unlikely to work for Windows so try following instead...\n-      try {\n+\n+      } else {\n+        // java Desktop not supported - above unlikely to work for Windows so try following instead...\n         Runtime.getRuntime().exec(\"cmd.exe start \" + applicationFile);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n       }\n \n+    } catch (IOException ex) {\n+      ex.printStackTrace();\n     }\n+\n   }\n }",
    "output": "Fix app launch"
  },
  {
    "input": "diff --git a/page-object/src/main/java/com/iluwatar/pageobject/App.java b/page-object/src/main/java/com/iluwatar/pageobject/App.java\n--- a/page-object/src/main/java/com/iluwatar/pageobject/App.java\n+++ b/page-object/src/main/java/com/iluwatar/pageobject/App.java\n@@ -71,7 +71,7 @@ public static void main(String[] args) {\n \n     String currentWorkingDir = System.getProperty(\"user.dir\");\n     File applicationFile = new File(currentWorkingDir\n-        + \"/page-object/sample-application/src/main/resources/sample-ui/login.html\");\n+        + \"/page-object/src/main/resources/sample-ui/login.html\");\n \n     // should work for unix like OS (mac, unix etc...)\n     if (Desktop.isDesktopSupported()) {\n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/AlbumListPageTest.java b/page-object/src/test/java/com/iluwatar/pageobject/AlbumListPageTest.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/AlbumListPageTest.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/AlbumListPageTest.java\n@@ -24,8 +24,8 @@\n \n \n import com.gargoylesoftware.htmlunit.WebClient;\n-import com.iluwatar.pages.AlbumListPage;\n-import com.iluwatar.pages.AlbumPage;\n+import com.iluwatar.pageobject.pages.AlbumListPage;\n+import com.iluwatar.pageobject.pages.AlbumPage;\n import org.junit.Test;\n \n import static org.junit.Assert.assertTrue;\n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/AlbumPageTest.java b/page-object/src/test/java/com/iluwatar/pageobject/AlbumPageTest.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/AlbumPageTest.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/AlbumPageTest.java\n@@ -23,8 +23,8 @@\n package com.iluwatar.pageobject;\n \n import com.gargoylesoftware.htmlunit.WebClient;\n-import com.iluwatar.pages.AlbumListPage;\n-import com.iluwatar.pages.AlbumPage;\n+import com.iluwatar.pageobject.pages.AlbumListPage;\n+import com.iluwatar.pageobject.pages.AlbumPage;\n import org.junit.Test;\n \n import static org.junit.Assert.assertTrue;\n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/LoginPageTest.java b/page-object/src/test/java/com/iluwatar/pageobject/LoginPageTest.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/LoginPageTest.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/LoginPageTest.java\n@@ -23,8 +23,8 @@\n package com.iluwatar.pageobject;\n \n import com.gargoylesoftware.htmlunit.WebClient;\n-import com.iluwatar.pages.AlbumListPage;\n-import com.iluwatar.pages.LoginPage;\n+import com.iluwatar.pageobject.pages.AlbumListPage;\n+import com.iluwatar.pageobject.pages.LoginPage;\n import org.junit.Test;\n \n import static org.junit.Assert.assertTrue;\n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumListPage.java b/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumListPage.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumListPage.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumListPage.java\n@@ -20,12 +20,11 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.pages;\n+package com.iluwatar.pageobject.pages;\n \n import com.gargoylesoftware.htmlunit.WebClient;\n import com.gargoylesoftware.htmlunit.html.HtmlAnchor;\n import com.gargoylesoftware.htmlunit.html.HtmlPage;\n-import com.iluwatar.Page;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumPage.java b/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumPage.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumPage.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/pages/AlbumPage.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.pages;\n+package com.iluwatar.pageobject.pages;\n \n import com.gargoylesoftware.htmlunit.WebClient;\n import com.gargoylesoftware.htmlunit.html.HtmlNumberInput;\n@@ -29,7 +29,6 @@\n import com.gargoylesoftware.htmlunit.html.HtmlSelect;\n import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n-import com.iluwatar.Page;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/pages/LoginPage.java b/page-object/src/test/java/com/iluwatar/pageobject/pages/LoginPage.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/pages/LoginPage.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/pages/LoginPage.java\n@@ -20,14 +20,13 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar.pages;\n+package com.iluwatar.pageobject.pages;\n \n import com.gargoylesoftware.htmlunit.WebClient;\n import com.gargoylesoftware.htmlunit.html.HtmlPage;\n import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;\n import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n-import com.iluwatar.Page;\n import java.io.IOException;\n import java.net.MalformedURLException;\n \n\ndiff --git a/page-object/src/test/java/com/iluwatar/pageobject/pages/Page.java b/page-object/src/test/java/com/iluwatar/pageobject/pages/Page.java\n--- a/page-object/src/test/java/com/iluwatar/pageobject/pages/Page.java\n+++ b/page-object/src/test/java/com/iluwatar/pageobject/pages/Page.java\n@@ -20,7 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package com.iluwatar;\n+package com.iluwatar.pageobject.pages;\n \n import com.gargoylesoftware.htmlunit.WebClient;\n \n@@ -33,7 +33,7 @@ public abstract class Page {\n    * Application Under Test path\n    * This directory location is where html web pages are located\n    */\n-  public static final String AUT_PATH = \"../sample-application/src/main/resources/sample-ui/\";\n+  public static final String AUT_PATH = \"src/main/resources/sample-ui/\";\n \n   protected WebClient webClient;\n ",
    "output": "Feedback changes - restructed project structure"
  },
  {
    "input": "diff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n@@ -3,6 +3,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n@@ -28,11 +29,11 @@ public Object get(String key) {\n \n     @Override\n     public <T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor) {\n-        return Stream.of(get(key))\n+        Optional<List<Map<String, Object>>> any = Stream.of(get(key))\n                 .filter(el -> el != null)\n                 .map(el -> (List<Map<String, Object>>) el)\n-                .findAny().get().stream()\n-                .map(constructor);\n+                .findAny();\n+        return any.isPresent() ? any.get().stream().map(constructor) : Stream.empty();\n     }\n \n     @Override\n\ndiff --git a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n--- a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n+++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n@@ -29,7 +29,6 @@ private class DocumentImplementation extends AbstractDocument {\n     public void shouldPutAndGetValue() {\n         document.put(KEY, VALUE);\n         assertEquals(VALUE, document.get(KEY));\n-        System.out.println(document);\n     }\n \n     @Test\n@@ -45,4 +44,11 @@ public void shouldRetrieveChildren() {\n         assertEquals(2, childrenStream.count());\n     }\n \n+    @Test\n+    public void shouldRetrieveEmptyStreamForNonExistinChildren() {\n+        Stream<DocumentImplementation> children = document.children(KEY, DocumentImplementation::new);\n+        assertNotNull(children);\n+        assertEquals(0, children.count());\n+    }\n+\n }",
    "output": "Handle case when there are no child elements for the given key"
  },
  {
    "input": "diff --git a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n--- a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n+++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n@@ -0,0 +1,48 @@\n+package com.iluwatar.abstractdocument;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+public class AbstractDocumentTest {\n+\n+    private static final String KEY = \"key\";\n+    private static final Object VALUE = \"value\";\n+\n+    private class DocumentImplementation extends AbstractDocument {\n+\n+        DocumentImplementation(Map<String, Object> properties) {\n+            super(properties);\n+        }\n+    }\n+\n+    private DocumentImplementation document = new DocumentImplementation(new HashMap<>());\n+\n+    @Test\n+    public void shouldPutAndGetValue() {\n+        document.put(KEY, VALUE);\n+        assertEquals(VALUE, document.get(KEY));\n+        System.out.println(document);\n+    }\n+\n+    @Test\n+    public void shouldRetrieveChildren() {\n+        Map<String,Object> child1 = new HashMap<>();\n+        Map<String,Object> child2 = new HashMap<>();\n+        List<Map<String, Object>> children = Arrays.asList(child1, child2);\n+\n+        document.put(KEY, children);\n+\n+        Stream<DocumentImplementation> childrenStream = document.children(KEY, DocumentImplementation::new);\n+        assertNotNull(children);\n+        assertEquals(2, childrenStream.count());\n+    }\n+\n+}",
    "output": "Abstract document test"
  },
  {
    "input": "diff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n@@ -8,31 +8,42 @@\n \n public abstract class AbstractDocument implements Document {\n \n-\tprivate final Map<String, Object> properties;\n-\n-\tprotected AbstractDocument(Map<String, Object> properties) {\n-\t\tObjects.requireNonNull(properties, \"properties map is required\");\n-\t\tthis.properties = properties;\n-\t}\n-\n-\t@Override\n-\tpublic Void put(String key, Object value) {\n-\t\tproperties.put(key, value);\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic Object get(String key) {\n-\t\treturn properties.get(key);\n-\t}\n-\n-\t@Override\n-\tpublic <T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor) {\n-\t\treturn Stream.of(get(key))\n-\t\t\t\t.filter(el -> el != null)\n-\t\t\t\t.map(el -> (List<Map<String, Object>>) el)\n-\t\t\t\t.findFirst().get().stream()\n-\t\t\t\t.map(constructor);\n-\t}\n+    private final Map<String, Object> properties;\n+\n+    protected AbstractDocument(Map<String, Object> properties) {\n+        Objects.requireNonNull(properties, \"properties map is required\");\n+        this.properties = properties;\n+    }\n+\n+    @Override\n+    public Void put(String key, Object value) {\n+        properties.put(key, value);\n+        return null;\n+    }\n+\n+    @Override\n+    public Object get(String key) {\n+        return properties.get(key);\n+    }\n+\n+    @Override\n+    public <T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor) {\n+        return Stream.of(get(key))\n+                .filter(el -> el != null)\n+                .map(el -> (List<Map<String, Object>>) el)\n+                .findAny().get().stream()\n+                .map(constructor);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder builder = new StringBuilder();\n+        builder.append(getClass().getName()).append(\"[\");\n+        properties.entrySet().forEach(e ->\n+                builder.append(\"[\").append(e.getKey()).append(\" : \").append(e.getValue()).append(\"]\")\n+        );\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n \n }",
    "output": "Override toString to log properties"
  },
  {
    "input": "diff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/AbstractDocument.java\n@@ -0,0 +1,38 @@\n+package com.iluwatar.abstractdocument;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+public abstract class AbstractDocument implements Document {\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprotected AbstractDocument(Map<String, Object> properties) {\n+\t\tObjects.requireNonNull(properties, \"properties map is required\");\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Override\n+\tpublic Void put(String key, Object value) {\n+\t\tproperties.put(key, value);\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic Object get(String key) {\n+\t\treturn properties.get(key);\n+\t}\n+\n+\t@Override\n+\tpublic <T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor) {\n+\t\treturn Stream.of(get(key))\n+\t\t\t\t.filter(el -> el != null)\n+\t\t\t\t.map(el -> (List<Map<String, Object>>) el)\n+\t\t\t\t.findFirst().get().stream()\n+\t\t\t\t.map(constructor);\n+\t}\n+\n+}\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/Document.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/Document.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/Document.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/Document.java\n@@ -0,0 +1,34 @@\n+package com.iluwatar.abstractdocument;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+public interface Document {\n+\n+\t/**\n+\t * Puts the value related to the key\n+\t * \n+\t * @param key\n+\t * @param value\n+\t * @return Void\n+\t */\n+\tVoid put(String key, Object value);\n+\n+\t/**\n+\t * Gets the value for the key\n+\t * \n+\t * @param key\n+\t * @return value or null\n+\t */\n+\tObject get(String key);\n+\n+\t/**\n+\t * Gets the stream of child documents\n+\t * \n+\t * @param key\n+\t * @param constructor\n+\t * @return child documents\n+\t */\n+\t<T> Stream<T> children(String key, Function<Map<String, Object>, T> constructor);\n+}\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Car.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Car.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Car.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Car.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar.abstractdocument.domain;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.iluwatar.abstractdocument.AbstractDocument;\n+\n+public class Car extends AbstractDocument implements HasModel, HasPrice, HasParts {\n+\n+\tprotected Car() {\n+\t\tsuper(new HashMap<String, Object>());\n+\t}\n+\t\n+\tprotected Car(Map<String,Object> properties) {\n+\t\tsuper(properties);\n+\t}\n+\n+}\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasModel.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasModel.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasModel.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasModel.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar.abstractdocument.domain;\n+\n+import java.util.Optional;\n+\n+import com.iluwatar.abstractdocument.Document;\n+\n+public interface HasModel extends Document {\n+\t\n+\tdefault Optional<String> getModel() {\n+\t\treturn Optional.ofNullable((String) get(\"model\"));\n+\t}\n+\n+}\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasParts.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar.abstractdocument.domain;\n+\n+import java.util.stream.Stream;\n+\n+import com.iluwatar.abstractdocument.Document;\n+\n+public interface HasParts extends Document {\n+\t\n+\tdefault Stream<Part> getParts() {\n+\t\treturn children(\"parts\", Part::new);\n+\t}\n+\n+}\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/HasPrice.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar.abstractdocument.domain;\n+\n+import java.util.Optional;\n+\n+import com.iluwatar.abstractdocument.Document;\n+\n+public interface HasPrice extends Document {\n+\t\n+\tdefault Optional<Number> getPartner() {\n+\t\treturn Optional.ofNullable((Number) get(\"price\"));\n+\t}\n+\n+}\n\ndiff --git a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Part.java b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Part.java\n--- a/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Part.java\n+++ b/abstract-document/src/main/java/com/iluwatar/abstractdocument/domain/Part.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar.abstractdocument.domain;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.iluwatar.abstractdocument.AbstractDocument;\n+\n+public class Part extends AbstractDocument implements HasModel, HasPrice {\n+\n+\tprotected Part() {\n+\t\tsuper(new HashMap<String, Object>());\n+\t}\n+\t\n+\tprotected Part(Map<String, Object> properties) {\n+\t\tsuper(properties);\n+\t}\n+\n+}",
    "output": "Document, abstract base, traits and example domain"
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/builder/App.java b/builder/src/main/java/com/iluwatar/builder/App.java\n--- a/builder/src/main/java/com/iluwatar/builder/App.java\n+++ b/builder/src/main/java/com/iluwatar/builder/App.java\n@@ -22,7 +22,7 @@\n  */\n package com.iluwatar.builder;\n \n-import com.iluwatar.builder.Hero.HeroBuilder;\n+import com.iluwatar.builder.Hero.Builder;\n \n /**\n  * \n@@ -41,10 +41,10 @@\n  * Java 2nd Edition.\n  * <p>\n  * We want to build {@link Hero} objects, but its construction is complex because of the many\n- * parameters needed. To aid the user we introduce {@link HeroBuilder} class. {@link HeroBuilder}\n+ * parameters needed. To aid the user we introduce {@link Builder} class. {@link Hero.Builder}\n  * takes the minimum parameters to build {@link Hero} object in its constructor. After that\n  * additional configuration for the {@link Hero} object can be done using the fluent\n- * {@link HeroBuilder} interface. When configuration is ready the build method is called to receive\n+ * {@link Builder} interface. When configuration is ready the build method is called to receive\n  * the final {@link Hero} object.\n  * \n  */\n@@ -58,18 +58,18 @@ public class App {\n   public static void main(String[] args) {\n \n     Hero mage =\n-        new HeroBuilder(Profession.MAGE, \"Riobard\").withHairColor(HairColor.BLACK)\n+        new Hero.Builder(Profession.MAGE, \"Riobard\").withHairColor(HairColor.BLACK)\n             .withWeapon(Weapon.DAGGER).build();\n     System.out.println(mage);\n \n     Hero warrior =\n-        new HeroBuilder(Profession.WARRIOR, \"Amberjill\").withHairColor(HairColor.BLOND)\n+        new Hero.Builder(Profession.WARRIOR, \"Amberjill\").withHairColor(HairColor.BLOND)\n             .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)\n             .build();\n     System.out.println(warrior);\n \n     Hero thief =\n-        new HeroBuilder(Profession.THIEF, \"Desmond\").withHairType(HairType.BALD)\n+        new Hero.Builder(Profession.THIEF, \"Desmond\").withHairType(HairType.BALD)\n             .withWeapon(Weapon.BOW).build();\n     System.out.println(thief);\n \n\ndiff --git a/builder/src/main/java/com/iluwatar/builder/Hero.java b/builder/src/main/java/com/iluwatar/builder/Hero.java\n--- a/builder/src/main/java/com/iluwatar/builder/Hero.java\n+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java\n@@ -36,7 +36,7 @@ public final class Hero {\n   private final Armor armor;\n   private final Weapon weapon;\n \n-  private Hero(HeroBuilder builder) {\n+  private Hero(Builder builder) {\n     this.profession = builder.profession;\n     this.name = builder.name;\n     this.hairColor = builder.hairColor;\n@@ -102,7 +102,7 @@ public String toString() {\n    * The builder class.\n    * \n    */\n-  public static class HeroBuilder {\n+  public static class Builder {\n \n     private final Profession profession;\n     private final String name;\n@@ -114,30 +114,30 @@ public static class HeroBuilder {\n     /**\n      * Constructor\n      */\n-    public HeroBuilder(Profession profession, String name) {\n+    public Builder(Profession profession, String name) {\n       if (profession == null || name == null) {\n         throw new IllegalArgumentException(\"profession and name can not be null\");\n       }\n       this.profession = profession;\n       this.name = name;\n     }\n \n-    public HeroBuilder withHairType(HairType hairType) {\n+    public Builder withHairType(HairType hairType) {\n       this.hairType = hairType;\n       return this;\n     }\n \n-    public HeroBuilder withHairColor(HairColor hairColor) {\n+    public Builder withHairColor(HairColor hairColor) {\n       this.hairColor = hairColor;\n       return this;\n     }\n \n-    public HeroBuilder withArmor(Armor armor) {\n+    public Builder withArmor(Armor armor) {\n       this.armor = armor;\n       return this;\n     }\n \n-    public HeroBuilder withWeapon(Weapon weapon) {\n+    public Builder withWeapon(Weapon weapon) {\n       this.weapon = weapon;\n       return this;\n     }\n\ndiff --git a/builder/src/test/java/com/iluwatar/builder/HeroTest.java b/builder/src/test/java/com/iluwatar/builder/HeroTest.java\n--- a/builder/src/test/java/com/iluwatar/builder/HeroTest.java\n+++ b/builder/src/test/java/com/iluwatar/builder/HeroTest.java\n@@ -39,15 +39,15 @@ public class HeroTest {\n    */\n   @Test(expected = IllegalArgumentException.class)\n   public void testMissingProfession() throws Exception {\n-    new Hero.HeroBuilder(null, \"Sir without a job\");\n+    new Hero.Builder(null, \"Sir without a job\");\n   }\n \n   /**\n    * Test if we get the expected exception when trying to create a hero without a name\n    */\n   @Test(expected = IllegalArgumentException.class)\n   public void testMissingName() throws Exception {\n-    new Hero.HeroBuilder(Profession.THIEF, null);\n+    new Hero.Builder(Profession.THIEF, null);\n   }\n \n   /**\n@@ -57,7 +57,7 @@ public void testMissingName() throws Exception {\n   public void testBuildHero() throws Exception {\n     final String heroName = \"Sir Lancelot\";\n \n-    final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)\n+    final Hero hero = new Hero.Builder(Profession.WARRIOR, heroName)\n         .withArmor(Armor.CHAIN_MAIL)\n         .withWeapon(Weapon.SWORD)\n         .withHairType(HairType.LONG_CURLY)",
    "output": "Rename HeroBuilder to Builder"
  },
  {
    "input": "diff --git a/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java b/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java\n--- a/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java\n+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/DataMapperException.java\n@@ -29,15 +29,6 @@ public final class DataMapperException extends RuntimeException {\n \n   private static final long serialVersionUID = 1L;\n \n-  /**\n-   * Constructs a new runtime exception with {@code null} as its detail message. The cause is not\n-   * initialized, and may subsequently be initialized by a call to {@link #initCause}.\n-   */\n-  public DataMapperException() {\n-    super();\n-  }\n-\n-\n   /**\n    * Constructs a new runtime exception with the specified detail message. The cause is not\n    * initialized, and may subsequently be initialized by a call to {@link #initCause}.\n@@ -48,34 +39,4 @@ public DataMapperException() {\n   public DataMapperException(final String message) {\n     super(message);\n   }\n-\n-  /**\n-   * Constructs a new runtime exception with the specified detail message and cause.\n-   * <p>\n-   * Note that the detail message associated with {@code cause} is <i>not</i> automatically\n-   * incorporated in this runtime exception's detail message.\n-   *\n-   * @param message the detail message (which is saved for later retrieval by the\n-   *        {@link #getMessage()} method).\n-   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n-   *        (A <tt>null</tt> value is permitted, and indicates that the cause is nonexistent or\n-   *        unknown.)\n-   */\n-  public DataMapperException(final String message, final Throwable cause) {\n-    super(message, cause);\n-  }\n-\n-  /**\n-   * Constructs a new runtime exception with the specified cause and a detail message of\n-   * <tt>(cause==null ? null : cause.toString())</tt> (which typically contains the class and detail\n-   * message of <tt>cause</tt>). This constructor is useful for runtime exceptions that are little\n-   * more than wrappers for other throwables.\n-   *\n-   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n-   *        (A <tt>null</tt> value is permitted, and indicates that the cause is nonexistent or\n-   *        unknown.)\n-   */\n-  public DataMapperException(final Throwable cause) {\n-    super(cause);\n-  }\n }",
    "output": "Review comments++\nreview comments++"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n@@ -27,7 +27,7 @@\n import com.iluwatar.hexagonal.banking.WireTransfers;\n import com.iluwatar.hexagonal.banking.WireTransfersImpl;\n import com.iluwatar.hexagonal.database.LotteryTicketRepository;\n-import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n+import com.iluwatar.hexagonal.database.LotteryTicketInMemoryRepository;\n import com.iluwatar.hexagonal.domain.LotteryConstants;\n import com.iluwatar.hexagonal.domain.LotteryNumbers;\n import com.iluwatar.hexagonal.domain.LotteryTicket;\n@@ -55,7 +55,7 @@ public class LotteryAdministrationImpl implements LotteryAdministration {\n   private final WireTransfers bank = new WireTransfersImpl();\n   \n   public LotteryAdministrationImpl() {\n-    repository = new LotteryTicketRepositoryMock();\n+    repository = new LotteryTicketInMemoryRepository();\n   }\n   \n   @Override\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketInMemoryRepository.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketInMemoryRepository.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketInMemoryRepository.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketInMemoryRepository.java\n@@ -34,7 +34,7 @@\n  * Mock database for lottery tickets.\n  *\n  */\n-public class LotteryTicketRepositoryMock implements LotteryTicketRepository {\n+public class LotteryTicketInMemoryRepository implements LotteryTicketRepository {\n   \n   private static Map<LotteryTicketId, LotteryTicket> tickets = new HashMap<>();\n \n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java\n@@ -27,7 +27,7 @@\n import com.iluwatar.hexagonal.banking.WireTransfers;\n import com.iluwatar.hexagonal.banking.WireTransfersImpl;\n import com.iluwatar.hexagonal.database.LotteryTicketRepository;\n-import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n+import com.iluwatar.hexagonal.database.LotteryTicketInMemoryRepository;\n import com.iluwatar.hexagonal.domain.LotteryConstants;\n import com.iluwatar.hexagonal.domain.LotteryNumbers;\n import com.iluwatar.hexagonal.domain.LotteryTicket;\n@@ -51,7 +51,7 @@ public class LotteryServiceImpl implements LotteryService {\n   private final LotteryNotifications notifications = new LotteryNotificationsImpl();\n   \n   public LotteryServiceImpl() {\n-    repository = new LotteryTicketRepositoryMock();\n+    repository = new LotteryTicketInMemoryRepository();\n   }\n   \n   @Override\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryTest.java\n@@ -31,7 +31,7 @@\n import org.junit.Test;\n \n import com.iluwatar.hexagonal.database.LotteryTicketRepository;\n-import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n+import com.iluwatar.hexagonal.database.LotteryTicketInMemoryRepository;\n import com.iluwatar.hexagonal.domain.LotteryTicket;\n import com.iluwatar.hexagonal.domain.LotteryTicketId;\n import com.iluwatar.hexagonal.test.LotteryTestUtils;\n@@ -43,7 +43,7 @@\n  */\n public class LotteryTicketRepositoryTest {\n \n-  private final LotteryTicketRepository repository = new LotteryTicketRepositoryMock();\n+  private final LotteryTicketRepository repository = new LotteryTicketInMemoryRepository();\n   \n   @Before\n   public void clear() {\n@@ -52,7 +52,7 @@ public void clear() {\n   \n   @Test\n   public void testCrudOperations() {\n-    LotteryTicketRepository repository = new LotteryTicketRepositoryMock();\n+    LotteryTicketRepository repository = new LotteryTicketInMemoryRepository();\n     assertEquals(repository.findAll().size(), 0);\n     LotteryTicket ticket = LotteryTestUtils.createLotteryTicket();\n     Optional<LotteryTicketId> id = repository.save(ticket);\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/lottery/LotteryTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/lottery/LotteryTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/lottery/LotteryTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/lottery/LotteryTest.java\n@@ -38,7 +38,7 @@\n import com.iluwatar.hexagonal.banking.WireTransfers;\n import com.iluwatar.hexagonal.banking.WireTransfersImpl;\n import com.iluwatar.hexagonal.database.LotteryTicketRepository;\n-import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n+import com.iluwatar.hexagonal.database.LotteryTicketInMemoryRepository;\n import com.iluwatar.hexagonal.domain.LotteryNumbers;\n import com.iluwatar.hexagonal.domain.LotteryTicket;\n import com.iluwatar.hexagonal.domain.LotteryTicketCheckResult;\n@@ -57,7 +57,7 @@ public class LotteryTest {\n \n   private final LotteryAdministration admin = new LotteryAdministrationImpl();\n   private final LotteryService service = new LotteryServiceImpl();\n-  private final LotteryTicketRepository repository = new LotteryTicketRepositoryMock();\n+  private final LotteryTicketRepository repository = new LotteryTicketInMemoryRepository();\n   private final WireTransfers wireTransfers = new WireTransfersImpl();\n   \n   @Before",
    "output": "Add readme and class diagram"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n@@ -45,6 +45,10 @@\n  */\n public class LotteryAdministrationImpl implements LotteryAdministration {\n \n+  private static final int WIN_AMOUNT = 100000;\n+\n+  private static final String PRIZE_PAYER_BANK_ACCOUNT = \"123-123\";\n+  \n   private final LotteryTicketRepository repository;\n \n   private final LotteryService service = new LotteryServiceImpl();\n@@ -69,8 +73,8 @@ public LotteryNumbers performLottery() {\n     for (LotteryTicketId id: tickets.keySet()) {\n       LotteryTicketCheckResult result = service.checkTicketForPrize(id, numbers);\n       if (result.equals(CheckResult.WIN_PRIZE)) {\n-        bank.transferFunds(1000, \"123-123\", tickets.get(id).getPlayerDetails().getBankAccount());\n-        notifications.notifyPrize(tickets.get(id).getPlayerDetails(), 1000);\n+        bank.transferFunds(WIN_AMOUNT, PRIZE_PAYER_BANK_ACCOUNT, tickets.get(id).getPlayerDetails().getBankAccount());\n+        notifications.notifyPrize(tickets.get(id).getPlayerDetails(), WIN_AMOUNT);\n       } else if (result.equals(CheckResult.NO_PRIZE)) {\n         notifications.notifyNoWin(tickets.get(id).getPlayerDetails());\n       }",
    "output": "Add constants for win sum and prize payer's bank account"
  },
  {
    "input": "diff --git a/data-mapper/src/main/java/com/iluwatar/datamapper/App.java b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java\n--- a/data-mapper/src/main/java/com/iluwatar/datamapper/App.java\n+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java\n@@ -37,7 +37,8 @@ public final class App {\n \r\n   private static Logger log = Logger.getLogger(App.class);\r\n \r\n-\r\n+  private static final String DB_TYPE_FIRST = \"first\";\r\n+  private static final String DB_TYPE_SECOND = \"second\";\r\n \r\n   /**\r\n    * Program entry point.\r\n@@ -46,10 +47,32 @@ public final class App {\n    */\r\n   public static void main(final String... args) {\r\n \r\n+    if (log.isInfoEnabled() & args.length > 0) {\r\n+      log.debug(\"App.main(), type: \" + args[0]);\r\n+    }\r\n+\r\n+    StudentDataMapper mapper = null;\r\n+\r\n+    /* Check the desired db type from runtime arguments */\r\n+    if (args.length == 0) {\r\n+\r\n+      /* Create default data mapper for mysql */\r\n+      mapper = new StudentFirstDataMapper();\r\n \r\n-    /* Create any type of mapper at implementation which is desired */\r\n-    /* final StudentDataMapper mapper = new StudentFirstDataMapper(); */\r\n-    final StudentDataMapper mapper = new StudentSecondDataMapper();\r\n+    } else if (args.length > 0 && DB_TYPE_FIRST.equalsIgnoreCase(args[0])) {\r\n+\r\n+      /* Create new data mapper for type 'first' */\r\n+      mapper = new StudentFirstDataMapper();\r\n+\r\n+    } else if (args.length > 0 && DB_TYPE_SECOND.equalsIgnoreCase(args[0])) {\r\n+\r\n+      /* Create new data mapper for type 'second' */\r\n+      mapper = new StudentSecondDataMapper();\r\n+    } else {\r\n+\r\n+      /* Don't couple any Data Mapper to java.sql.SQLException */\r\n+      throw new DataMapperException(\"Following data mapping type(\" + args[0] + \") is not supported\");\r\n+    }\r\n \r\n     /* Create new student */\r\n     Student student = new Student(1, \"Adam\", 'A');\r\n\ndiff --git a/data-mapper/src/main/java/com/iluwatar/datamapper/StudentSecondDataMapper.java b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentSecondDataMapper.java\n--- a/data-mapper/src/main/java/com/iluwatar/datamapper/StudentSecondDataMapper.java\n+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentSecondDataMapper.java\n@@ -18,14 +18,14 @@\n  */\n package com.iluwatar.datamapper;\n \n-import java.util.ArrayList;\n+import java.util.Vector;\n import java.util.List;\n import java.util.Optional;\n \n public final class StudentSecondDataMapper implements StudentDataMapper {\n \n   /* Note: Normally this would be in the form of an actual database */\n-  private List<Student> students = new ArrayList<>();\n+  private List<Student> students = new Vector<>();\n \n   @Override\n   public Optional<Student> find(int studentId) {",
    "output": "Second type mapper is updated to use java.util.vector\nSecond type mapper is updated to use java.util.vector"
  },
  {
    "input": "diff --git a/api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java b/api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java\n--- a/api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java\n+++ b/api-gateway/price-microservice/src/test/java/com/iluwatar/price/microservice/PriceControllerTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.price.microservice;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PriceControllerTest {\n+  @Test\n+  public void testgetPrice() {\n+    PriceController priceController = new PriceController();\n+\n+    String price = priceController.getPrice();\n+\n+    Assert.assertEquals(\"20\", price);\n+  }\n+}",
    "output": "Create unit test for PriceController"
  },
  {
    "input": "diff --git a/api-gateway/image-microservice/src/test/java/com/iluwatar/image/microservice/ImageControllerTest.java b/api-gateway/image-microservice/src/test/java/com/iluwatar/image/microservice/ImageControllerTest.java\n--- a/api-gateway/image-microservice/src/test/java/com/iluwatar/image/microservice/ImageControllerTest.java\n+++ b/api-gateway/image-microservice/src/test/java/com/iluwatar/image/microservice/ImageControllerTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.image.microservice;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ImageControllerTest {\n+  @Test\n+  public void testGetImagePath() {\n+    ImageController imageController = new ImageController();\n+\n+    String imagePath = imageController.getImagePath();\n+\n+    Assert.assertEquals(\"/product-image.png\", imagePath);\n+  }\n+}",
    "output": "Create unit test for ImageController"
  },
  {
    "input": "diff --git a/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceApplication.java b/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceApplication.java\n--- a/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceApplication.java\n+++ b/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceApplication.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar.price.microservice;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+/**\n+ * PriceApplication starts up Spring Boot, exposing endpoints for the Price microservice through\n+ * the {@link PriceController}.\n+ */\n+@SpringBootApplication\n+public class PriceApplication {\n+\n+  /**\n+   * Microservice entry point\n+   * @param args\n+   *          command line args\n+   */\n+  public static void main(String[] args) {\n+    SpringApplication.run(PriceApplication.class, args);\n+  }\n+}\n\ndiff --git a/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java b/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java\n--- a/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java\n+++ b/api-gateway/price-microservice/src/main/java/com/iluwatar/price/microservice/PriceController.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar.price.microservice;\n+\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Exposes the Price microservice's endpoints\n+ */\n+@RestController\n+public class PriceController {\n+\n+  /**\n+   * An endpoint for a user to retrieve a product's price\n+   * @return A product's price\n+   */\n+  @RequestMapping(value = \"/price\", method = RequestMethod.GET)\n+  public String getPrice() {\n+    return \"20\";\n+  }\n+}",
    "output": "Create Spring Boot-backed Price microservice with an endpoint to retrieve a price"
  },
  {
    "input": "diff --git a/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageApplication.java b/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageApplication.java\n--- a/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageApplication.java\n+++ b/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageApplication.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar.image.microservice;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+/**\n+ * ImageApplication starts up Spring Boot, exposing endpoints for the Image microservice through\n+ * the {@link ImageController}.\n+ */\n+@SpringBootApplication\n+public class ImageApplication {\n+\n+  /**\n+   * Microservice entry point\n+   * @param args\n+   *          command line args\n+   */\n+  public static void main(String[] args) {\n+    SpringApplication.run(ImageApplication.class, args);\n+  }\n+}\n\ndiff --git a/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java b/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java\n--- a/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java\n+++ b/api-gateway/image-microservice/src/main/java/com/iluwatar/image/microservice/ImageController.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar.image.microservice;\n+\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Exposes the Image microservice's endpoints\n+ */\n+@RestController\n+public class ImageController {\n+\n+  /**\n+   * An endpoint for a user to retrieve an image path\n+   * @return An image path\n+   */\n+  @RequestMapping(value = \"/image-path\", method = RequestMethod.GET)\n+  public String getImagePath() {\n+    return \"/product-image.png\";\n+  }\n+}",
    "output": "Create Spring Boot-backed Image microservice with an endpoint to retrieve an image path"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n@@ -24,11 +24,19 @@\n \n import java.util.Map;\n \n+import com.iluwatar.hexagonal.banking.WireTransfers;\n+import com.iluwatar.hexagonal.banking.WireTransfersImpl;\n import com.iluwatar.hexagonal.database.LotteryTicketRepository;\n import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n import com.iluwatar.hexagonal.domain.LotteryNumbers;\n import com.iluwatar.hexagonal.domain.LotteryTicket;\n+import com.iluwatar.hexagonal.domain.LotteryTicketCheckResult;\n+import com.iluwatar.hexagonal.domain.LotteryTicketCheckResult.CheckResult;\n import com.iluwatar.hexagonal.domain.LotteryTicketId;\n+import com.iluwatar.hexagonal.notifications.LotteryNotifications;\n+import com.iluwatar.hexagonal.notifications.LotteryNotificationsImpl;\n+import com.iluwatar.hexagonal.service.LotteryService;\n+import com.iluwatar.hexagonal.service.LotteryServiceImpl;\n \n /**\n  * \n@@ -39,6 +47,12 @@ public class LotteryAdministrationImpl implements LotteryAdministration {\n \n   private final LotteryTicketRepository repository;\n \n+  private final LotteryService service = new LotteryServiceImpl();\n+  \n+  private final LotteryNotifications notifications = new LotteryNotificationsImpl();\n+\n+  private final WireTransfers bank = new WireTransfersImpl();\n+  \n   public LotteryAdministrationImpl() {\n     repository = new LotteryTicketRepositoryMock();\n   }\n@@ -50,7 +64,18 @@ public Map<LotteryTicketId, LotteryTicket> getAllSubmittedTickets() {\n \n   @Override\n   public LotteryNumbers performLottery() {\n-    return LotteryNumbers.createRandom();\n+    LotteryNumbers numbers = LotteryNumbers.createRandom();\n+    Map<LotteryTicketId, LotteryTicket> tickets = getAllSubmittedTickets();\n+    for (LotteryTicketId id: tickets.keySet()) {\n+      LotteryTicketCheckResult result = service.checkTicketForPrize(id, numbers);\n+      if (result.equals(CheckResult.WIN_PRIZE)) {\n+        bank.transferFunds(1000, \"123-123\", tickets.get(id).getPlayerDetails().getBankAccount());\n+        notifications.notifyPrize(tickets.get(id).getPlayerDetails(), 1000);\n+      } else if (result.equals(CheckResult.NO_PRIZE)) {\n+        notifications.notifyNoWin(tickets.get(id).getPlayerDetails());\n+      }\n+    }\n+    return numbers;\n   }\n \n   @Override\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java\n@@ -34,6 +34,10 @@ public class WireTransfersImpl implements WireTransfers {\n \n   private static Map<String, Integer> accounts = new HashMap<>();\n   \n+  static {\n+    accounts.put(\"123-123\", 50000);\n+  }\n+  \n   @Override\n   public void setFunds(String bankAccount, int amount) {\n     accounts.put(bankAccount, amount);\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryServiceImpl.java\n@@ -24,13 +24,17 @@\n \n import java.util.Optional;\n \n+import com.iluwatar.hexagonal.banking.WireTransfers;\n+import com.iluwatar.hexagonal.banking.WireTransfersImpl;\n import com.iluwatar.hexagonal.database.LotteryTicketRepository;\n import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n import com.iluwatar.hexagonal.domain.LotteryNumbers;\n import com.iluwatar.hexagonal.domain.LotteryTicket;\n import com.iluwatar.hexagonal.domain.LotteryTicketCheckResult;\n import com.iluwatar.hexagonal.domain.LotteryTicketId;\n import com.iluwatar.hexagonal.domain.LotteryTicketCheckResult.CheckResult;\n+import com.iluwatar.hexagonal.notifications.LotteryNotifications;\n+import com.iluwatar.hexagonal.notifications.LotteryNotificationsImpl;\n \n /**\n  * \n@@ -40,14 +44,23 @@\n public class LotteryServiceImpl implements LotteryService {\n \n   private final LotteryTicketRepository repository;\n+\n+  private final WireTransfers bank = new WireTransfersImpl();\n+\n+  private final LotteryNotifications notifications = new LotteryNotificationsImpl();\n   \n   public LotteryServiceImpl() {\n     repository = new LotteryTicketRepositoryMock();\n   }\n   \n   @Override\n   public Optional<LotteryTicketId> submitTicket(LotteryTicket ticket) {\n-    return repository.save(ticket);\n+    bank.transferFunds(3, ticket.getPlayerDetails().getBankAccount(), \"123-123\");\n+    Optional<LotteryTicketId> optional = repository.save(ticket);\n+    if (optional.isPresent()) {\n+      notifications.notifyTicketSubmitted(ticket.getPlayerDetails());\n+    }\n+    return optional;\n   }\n \n   @Override",
    "output": "Utilize notifications and banking"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotifications.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotifications.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotifications.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotifications.java\n@@ -33,6 +33,6 @@ public interface LotteryNotifications {\n   \n   void notifyTicketSubmitted(PlayerDetails details);\n   void notifyNoWin(PlayerDetails details);\n-  void notifyPrize(PlayerDetails details);\n+  void notifyPrize(PlayerDetails details, int prizeAmount);\n \n }\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotificationsImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotificationsImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotificationsImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/notifications/LotteryNotificationsImpl.java\n@@ -0,0 +1,47 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.notifications;\n+\n+import com.iluwatar.hexagonal.domain.PlayerDetails;\n+\n+public class LotteryNotificationsImpl implements LotteryNotifications {\n+\n+  @Override\n+  public void notifyTicketSubmitted(PlayerDetails details) {\n+    System.out.println(String.format(\"Lottery ticket for %s was submitted. Bank account %s was charged for 3 credits.\",\n+        details.getEmail(), details.getBankAccount()));\n+  }\n+\n+  @Override\n+  public void notifyNoWin(PlayerDetails details) {\n+    System.out.println(String.format(\"Lottery ticket for %s was checked and unfortunately did not win this time.\",\n+        details.getEmail()));\n+  }\n+\n+  @Override\n+  public void notifyPrize(PlayerDetails details, int prizeAmount) {\n+    System.out\n+        .println(String.format(\"Lottery ticket for %s has won! Your bank account %s was deposited with %d credits.\",\n+            details.getEmail(), details.getBankAccount(), prizeAmount));\n+  }\n+}",
    "output": "Add notifications implementation"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfers.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfers.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfers.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfers.java\n@@ -24,12 +24,13 @@\n \n /**\n  * \n- * Interface to the lottery service provider's bank account.\n+ * Interface to bank accounts.\n  *\n  */\n public interface WireTransfers {\n \n-  int getCurrentFundsAmount();\n-  boolean transferFunds(int amount, String receiverBankAccountNumber);\n+  void setFunds(String bankAccount, int amount);\n+  int getFunds(String bankAccount);\n+  boolean transferFunds(int amount, String sourceBackAccount, String destinationBankAccount);\n   \n }\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/banking/WireTransfersImpl.java\n@@ -0,0 +1,57 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.banking;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * \n+ * Banking implementation\n+ *\n+ */\n+public class WireTransfersImpl implements WireTransfers {\n+\n+  private static Map<String, Integer> accounts = new HashMap<>();\n+  \n+  @Override\n+  public void setFunds(String bankAccount, int amount) {\n+    accounts.put(bankAccount, amount);\n+  }\n+\n+  @Override\n+  public int getFunds(String bankAccount) {\n+    return accounts.getOrDefault(bankAccount, 0);\n+  }\n+\n+  @Override\n+  public boolean transferFunds(int amount, String sourceBackAccount, String destinationBankAccount) {\n+    if (accounts.getOrDefault(sourceBackAccount, 0) >= amount) {\n+      accounts.put(sourceBackAccount, accounts.get(sourceBackAccount) - amount);\n+      accounts.put(destinationBankAccount, accounts.get(destinationBankAccount) + amount);\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+}\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/WireTransfersTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/WireTransfersTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/WireTransfersTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/banking/WireTransfersTest.java\n@@ -0,0 +1,50 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.banking;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Tests for banking\n+ *\n+ */\n+public class WireTransfersTest {\n+\n+  private final WireTransfers bank = new WireTransfersImpl();\n+  \n+  @Test\n+  public void testInit() {\n+    assertEquals(bank.getFunds(\"foo\"), 0);\n+    bank.setFunds(\"foo\", 100);\n+    assertEquals(bank.getFunds(\"foo\"), 100);\n+    bank.setFunds(\"bar\", 150);\n+    assertEquals(bank.getFunds(\"bar\"), 150);\n+    assertTrue(bank.transferFunds(50, \"bar\", \"foo\"));\n+    assertEquals(bank.getFunds(\"foo\"), 150);\n+    assertEquals(bank.getFunds(\"bar\"), 100);\n+  }\n+}",
    "output": "Add banking implementation"
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/Troll.java b/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n@@ -29,6 +29,7 @@\n  */\n public class Troll implements Hostile {\n \n+  @Override\n   public void attack() {\n     System.out.println(\"The troll swings at you with a club!\");\n   }\n@@ -38,6 +39,7 @@ public int getAttackPower() {\n     return 10;\n   }\n \n+  @Override\n   public void fleeBattle() {\n     System.out.println(\"The troll shrieks in horror and runs away!\");\n   }",
    "output": "Override annotation added\nI think this is a typo"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTestUtils.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTestUtils.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTestUtils.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTestUtils.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar.hexagonal.domain;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+/**\n+ * \n+ * Utilities for lottery tests\n+ *\n+ */\n+public class LotteryTestUtils {\n+\n+  public static LotteryTicket createLotteryTicket() {\n+    PlayerDetails details = PlayerDetails.create(\"foo@bar.com\", \"12231-213132\", \"+99324554\");\n+    LotteryNumbers numbers = LotteryNumbers.create(new HashSet<>(Arrays.asList(1, 2, 3, 4)));\n+    return LotteryTicket.create(details, numbers);\n+  }\n+}\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java\n@@ -25,10 +25,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.Arrays;\n-import java.util.HashSet;\n import java.util.Optional;\n-import java.util.UUID;\n \n import org.junit.Test;\n \n@@ -45,17 +42,11 @@ public class LotteryTicketRepositoryTest {\n   public void testCrudOperations() {\n     LotteryTicketRepository repository = new LotteryTicketRepositoryMock();\n     assertEquals(repository.findAll().size(), 0);\n-    LotteryTicket ticket = createLotteryTicket();\n+    LotteryTicket ticket = LotteryTestUtils.createLotteryTicket();\n     Optional<LotteryTicketId> id = repository.save(ticket);\n     assertTrue(id.isPresent());\n     assertEquals(repository.findAll().size(), 1);\n     Optional<LotteryTicket> optionalTicket = repository.findById(id.get());\n     assertTrue(optionalTicket.isPresent());\n   }\n-  \n-  private LotteryTicket createLotteryTicket() {\n-    PlayerDetails details = PlayerDetails.create(\"foo@bar.com\", \"12231-213132\", \"+99324554\");\n-    LotteryNumbers numbers = LotteryNumbers.create(new HashSet<>(Arrays.asList(1, 2, 3, 4)));\n-    return LotteryTicket.create(details, numbers);\n-  }\n }",
    "output": "Refactor to test utils"
  },
  {
    "input": "diff --git a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n@@ -52,7 +52,7 @@ public static Collection<Object[]> data() {\n     return Arrays.asList(\n         new Object[]{\n             new MeleeStrategy(),\n-            \"With your Excalibur you severe the dragon's head!\"\n+            \"With your Excalibur you sever the dragon's head!\"\n         },\n         new Object[]{\n             new ProjectileStrategy(),",
    "output": "Upgrade failing test cases"
  },
  {
    "input": "diff --git a/mute-idiom/src/main/java/com/iluwatar/mute/App.java b/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n@@ -23,13 +23,9 @@\n \n package com.iluwatar.mute;\n \n-import static org.mockito.Mockito.doThrow;\n-import static org.mockito.Mockito.mock;\n-\n import java.io.ByteArrayOutputStream;\n-import java.sql.Connection;\n+import java.io.IOException;\n import java.sql.SQLException;\n-import java.sql.Statement;\n \n /**\n  * Mute pattern is utilized when we need to suppress an exception due to an API flaw or in \n@@ -75,31 +71,33 @@ private static void useOfMute() {\n   }\n \n   private static void useOfLoggedMute() throws SQLException {\n-    Connection connection = null;\n+    Resource resource = null;\n     try {\n-      connection = openConnection();\n-      readStuff(connection);\n+      resource = acquireResource();\n+      utilizeResource(resource);\n     } finally {\n-      closeConnection(connection);\n+      closeResource(resource);\n     }\n   }\n \n   /*\n-   * All we can do while failed close of connection is to log it.\n+   * All we can do while failed close of a resource is to log it.\n    */\n-  private static void closeConnection(Connection connection) {\n-    Mute.loggedMute(() -> connection.close());\n+  private static void closeResource(Resource resource) {\n+    Mute.loggedMute(() -> resource.close());\n   }\n \n-  private static void readStuff(Connection connection) throws SQLException {\n-    try (Statement statement = connection.createStatement()) {\n-      System.out.println(\"Read data from statement\");\n-    }\n+  private static void utilizeResource(Resource resource) throws SQLException {\n+    System.out.println(\"Utilizing acquired resource: \" + resource);\n   }\n \n-  private static Connection openConnection() throws SQLException {\n-    Connection mockedConnection = mock(Connection.class);\n-    doThrow(SQLException.class).when(mockedConnection).close();\n-    return mockedConnection;\n+  private static Resource acquireResource() throws SQLException {\n+    return new Resource() {\n+      \n+      @Override\n+      public void close() throws IOException {\n+        throw new IOException(\"Error in closing resource: \" + this);\n+      }\n+    };\n   }\n }\n\ndiff --git a/mute-idiom/src/main/java/com/iluwatar/mute/Resource.java b/mute-idiom/src/main/java/com/iluwatar/mute/Resource.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/Resource.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/Resource.java\n@@ -0,0 +1,35 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.iluwatar.mute;\n+\n+import java.io.Closeable;\n+\n+/**\n+ * Represents any resource that the application might acquire and that must be closed\n+ * after it is utilized. Example of such resources can be a database connection, open\n+ * files, sockets. \n+ */\n+public interface Resource extends Closeable {\n+\n+}",
    "output": "Change after review. Added README"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/repository/App.java b/repository/src/main/java/com/iluwatar/repository/App.java\n--- a/repository/src/main/java/com/iluwatar/repository/App.java\n+++ b/repository/src/main/java/com/iluwatar/repository/App.java\n@@ -100,6 +100,8 @@ public static void main(String[] args) {\n       System.out.println(person);\n     }\n \n+    repository.deleteAll();\n+    \n     context.close();\n \n   }",
    "output": "Fix missing table error"
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java b/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/MeleeStrategy.java\n@@ -31,6 +31,6 @@ public class MeleeStrategy implements DragonSlayingStrategy {\n \r\n   @Override\r\n   public void execute() {\r\n-    System.out.println(\"With your Excalibur you severe the dragon's head!\");\r\n+    System.out.println(\"With your Excalibur you sever the dragon's head!\");\r\n   }\r\n }\r",
    "output": "Severe is not appropriate.\n\"Sever\" is most Appropriate"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketRepositoryTest.java\n@@ -0,0 +1,61 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.hexagonal.database.LotteryTicketRepositoryMock;\n+\n+/**\n+ * \n+ * Tests for {@link LotteryTicketRepository}\n+ *\n+ */\n+public class LotteryTicketRepositoryTest {\n+\n+  @Test\n+  public void testCrudOperations() {\n+    LotteryTicketRepository repository = new LotteryTicketRepositoryMock();\n+    assertEquals(repository.findAll().size(), 0);\n+    LotteryTicket ticket = createLotteryTicket();\n+    Optional<UUID> uuid = repository.save(ticket);\n+    assertTrue(uuid.isPresent());\n+    assertEquals(repository.findAll().size(), 1);\n+    Optional<LotteryTicket> optionalTicket = repository.findByUuid(uuid.get());\n+    assertTrue(optionalTicket.isPresent());\n+  }\n+  \n+  private LotteryTicket createLotteryTicket() {\n+    PlayerDetails details = PlayerDetails.create(\"foo@bar.com\", \"12231-213132\", \"+99324554\");\n+    LotteryNumbers numbers = LotteryNumbers.create(new HashSet<>(Arrays.asList(1, 2, 3, 4)));\n+    return LotteryTicket.create(details, numbers);\n+  }\n+}",
    "output": "Add tests for lottery ticket repository"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/database/LotteryTicketRepositoryMock.java\n@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.database;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.iluwatar.hexagonal.domain.LotteryTicket;\n+import com.iluwatar.hexagonal.domain.LotteryTicketRepository;\n+\n+/**\n+ * \n+ * Mock database for lottery tickets.\n+ *\n+ */\n+public class LotteryTicketRepositoryMock implements LotteryTicketRepository {\n+  \n+  private Map<UUID, LotteryTicket> tickets = new HashMap<>();\n+\n+  @Override\n+  public Optional<LotteryTicket> findByUuid(UUID uuid) {\n+    LotteryTicket ticket = tickets.get(uuid);\n+    if (ticket == null) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(ticket);\n+    }\n+  }\n+\n+  @Override\n+  public Optional<UUID> save(LotteryTicket ticket) {\n+    UUID uuid = UUID.randomUUID();\n+    tickets.put(uuid, ticket);\n+    return Optional.of(uuid);\n+  }\n+\n+  @Override\n+  public Map<UUID, LotteryTicket> findAll() {\n+    return tickets;\n+  }\n+}\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java\n@@ -22,7 +22,7 @@\n  */\n package com.iluwatar.hexagonal.domain;\n \n-import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.UUID;\n \n@@ -35,6 +35,6 @@ public interface LotteryTicketRepository {\n \n   Optional<LotteryTicket> findByUuid(UUID uuid);\n   Optional<UUID> save(LotteryTicket ticket);\n-  List<LotteryTicket> findAll();\n+  Map<UUID, LotteryTicket> findAll();\n   \n }",
    "output": "Add mock database for lottery tickets"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryAdministration.java\n@@ -0,0 +1,37 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+import java.util.List;\n+\n+/**\n+ * \n+ * Administrator interface for lottery service.\n+ *\n+ */\n+public interface LotteryAdministration {\n+\n+  List<LotteryTicket> getAllSubmittedTickets();\n+  List<LotteryTicket> performLottery();\n+  \n+}",
    "output": "Add interface for lottery administrators"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNotifications.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNotifications.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNotifications.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNotifications.java\n@@ -0,0 +1,36 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+/**\n+ * \n+ * Provides notifications for lottery events.\n+ *\n+ */\n+public interface LotteryNotifications {\n+  \n+  void notifyTicketSubmitted(PlayerDetails details);\n+  void notifyNoWin(PlayerDetails details);\n+  void notifyPrize(PlayerDetails details);\n+\n+}",
    "output": "Add interface for lottery event notifications"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/WireTransfers.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/WireTransfers.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/WireTransfers.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/WireTransfers.java\n@@ -0,0 +1,35 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+/**\n+ * \n+ * Interface to the lottery service provider's bank account.\n+ *\n+ */\n+public interface WireTransfers {\n+\n+  int getCurrentFundsAmount();\n+  boolean transferFunds(int amount, String receiverBankAccountNumber);\n+  \n+}",
    "output": "Add interface to lottery service provider's bank account"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketRepository.java\n@@ -0,0 +1,40 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+/**\n+ * \n+ * Interface for accessing lottery tickets in database.\n+ *\n+ */\n+public interface LotteryTicketRepository {\n+\n+  Optional<LotteryTicket> findByUuid(UUID uuid);\n+  Optional<UUID> save(LotteryTicket ticket);\n+  List<LotteryTicket> findAll();\n+  \n+}",
    "output": "Add interface for accessing lottery tickets in database"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryService.java\n@@ -31,5 +31,5 @@ public interface LotteryService {\n \n   LotteryTicketSubmitResult submitTicket(LotteryTicket ticket);\n \n-  void checkTicketForPrize(LotteryTicket ticket);\n+  LotteryTicketCheckResult checkTicketForPrize(LotteryTicket ticket);\n }\n\ndiff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResult.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResult.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResult.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResult.java\n@@ -0,0 +1,97 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+/**\n+ * \n+ * Represents lottery ticket check result.\n+ *\n+ */\n+public class LotteryTicketCheckResult {\n+\n+  public enum CheckResult {WIN_PRIZE, NO_PRIZE, TICKET_NOT_SUBMITTED};\n+\n+  private final CheckResult checkResult;\n+  \n+  private final int prizeAmount;\n+\n+  /**\n+   * Constructor.\n+   */\n+  public LotteryTicketCheckResult(CheckResult result) {\n+    checkResult = result;\n+    prizeAmount = 0;\n+  }\n+  \n+  /**\n+   * Constructor.\n+   */\n+  public LotteryTicketCheckResult(CheckResult result, int amount) {\n+    checkResult = result;\n+    prizeAmount = amount;\n+  }\n+\n+  /**\n+   * @return check result\n+   */\n+  public CheckResult getResult() {\n+    return checkResult;\n+  }\n+  \n+  /**\n+   * @return prize amount\n+   */\n+  public int getPrizeAmount() {\n+    return prizeAmount;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((checkResult == null) ? 0 : checkResult.hashCode());\n+    result = prime * result + prizeAmount;\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    LotteryTicketCheckResult other = (LotteryTicketCheckResult) obj;\n+    if (checkResult != other.checkResult) {\n+      return false;\n+    }\n+    if (prizeAmount != other.prizeAmount) {\n+      return false;\n+    }\n+    return true;\n+  }\n+}\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResultTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResultTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResultTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryTicketCheckResultTest.java\n@@ -0,0 +1,47 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal.domain;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.hexagonal.domain.LotteryTicketCheckResult.CheckResult;\n+\n+/**\n+ * \n+ * Unit tests for {@link LotteryTicketCheckResult}\n+ *\n+ */\n+public class LotteryTicketCheckResultTest {\n+\n+  @Test\n+  public void testEquals() {\n+    LotteryTicketCheckResult result1 = new LotteryTicketCheckResult(CheckResult.NO_PRIZE);\n+    LotteryTicketCheckResult result2 = new LotteryTicketCheckResult(CheckResult.NO_PRIZE);\n+    assertEquals(result1, result2);\n+    LotteryTicketCheckResult result3 = new LotteryTicketCheckResult(CheckResult.WIN_PRIZE, 300000);\n+    assertFalse(result1.equals(result3));\n+  } \n+}",
    "output": "Add lottery ticket check result"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/PlayerDetails.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/PlayerDetails.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/PlayerDetails.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/PlayerDetails.java\n@@ -0,0 +1,96 @@\n+package com.iluwatar.hexagonal.domain;\n+\n+/**\n+ * \n+ * Immutable value object containing lottery player details.\n+ *\n+ */\n+public class PlayerDetails {\n+\n+  private final String emailAddress;\n+  private final String bankAccountNumber;\n+  private final String phoneNumber;\n+\n+  /**\n+   * Constructor.\n+   */\n+  private PlayerDetails(String email, String bankAccount, String phone) {\n+    emailAddress = email;\n+    bankAccountNumber = bankAccount;\n+    phoneNumber = phone;\n+  }\n+  \n+  /**\n+   * Factory for creating new objects.\n+   */\n+  public static PlayerDetails create(String email, String bankAccount, String phone) {\n+    return new PlayerDetails(email, bankAccount, phone);\n+  }\n+  \n+  /**\n+   * @return email\n+   */\n+  public String getEmail() {\n+    return emailAddress;\n+  }\n+  \n+  /**\n+   * @return bank account number\n+   */\n+  public String getBankAccount() {\n+    return bankAccountNumber;\n+  }\n+  \n+  /**\n+   * @return phone number\n+   */\n+  public String getPhoneNumber() {\n+    return phoneNumber;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((bankAccountNumber == null) ? 0 : bankAccountNumber.hashCode());\n+    result = prime * result + ((emailAddress == null) ? 0 : emailAddress.hashCode());\n+    result = prime * result + ((phoneNumber == null) ? 0 : phoneNumber.hashCode());\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    PlayerDetails other = (PlayerDetails) obj;\n+    if (bankAccountNumber == null) {\n+      if (other.bankAccountNumber != null) {\n+        return false;\n+      }\n+    } else if (!bankAccountNumber.equals(other.bankAccountNumber)) {\n+      return false;\n+    }\n+    if (emailAddress == null) {\n+      if (other.emailAddress != null) {\n+        return false;\n+      }\n+    } else if (!emailAddress.equals(other.emailAddress)) {\n+      return false;\n+    }\n+    if (phoneNumber == null) {\n+      if (other.phoneNumber != null) {\n+        return false;\n+      }\n+    } else if (!phoneNumber.equals(other.phoneNumber)) {\n+      return false;\n+    }\n+    return true;\n+  }\n+}\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/PlayerDetailsTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/PlayerDetailsTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/PlayerDetailsTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/PlayerDetailsTest.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar.hexagonal.domain;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Unit tests for {@link PlayerDetails}\n+ *\n+ */\n+public class PlayerDetailsTest {\n+\n+  @Test\n+  public void testEquals() {\n+    PlayerDetails details1 = PlayerDetails.create(\"tom@foo.bar\", \"11212-123434\", \"+12323425\");\n+    PlayerDetails details2 = PlayerDetails.create(\"tom@foo.bar\", \"11212-123434\", \"+12323425\");\n+    assertEquals(details1, details2);\n+    PlayerDetails details3 = PlayerDetails.create(\"john@foo.bar\", \"16412-123439\", \"+34323432\");\n+    assertFalse(details1.equals(details3));\n+  }  \n+}",
    "output": "Add player details and unit tests"
  },
  {
    "input": "diff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryNumbersTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryNumbersTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryNumbersTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/domain/LotteryNumbersTest.java\n@@ -23,6 +23,7 @@\n package com.iluwatar.hexagonal.domain;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import java.util.Arrays;\n@@ -36,8 +37,6 @@\n  *\n  */\n public class LotteryNumbersTest {\n-\n-  private static final int NUM_RANDOM_NUMBER_ROUNDS = 1000;\n   \n   @Test\n   public void testGivenNumbers() {\n@@ -59,8 +58,19 @@ public void testNumbersCantBeModified() {\n   \n   @Test\n   public void testRandomNumbers() {\n-    for (int i = 0; i < NUM_RANDOM_NUMBER_ROUNDS; i++) {\n-      LotteryNumbers numbers = LotteryNumbers.createRandom();\n-    }\n+    LotteryNumbers numbers = LotteryNumbers.createRandom();\n+    assertEquals(numbers.getNumbers().size(), LotteryNumbers.NUM_NUMBERS);\n+  }\n+  \n+  @Test\n+  public void testEquals() {\n+    LotteryNumbers numbers1 = LotteryNumbers.create(\n+            new HashSet<>(Arrays.asList(1, 2, 3, 4)));\n+    LotteryNumbers numbers2 = LotteryNumbers.create(\n+            new HashSet<>(Arrays.asList(1, 2, 3, 4)));\n+    assertTrue(numbers1.equals(numbers2));\n+    LotteryNumbers numbers3 = LotteryNumbers.create(\n+            new HashSet<>(Arrays.asList(11, 12, 13, 14)));\n+    assertFalse(numbers1.equals(numbers3));\n   }\n }",
    "output": "Work on lottery numbers unit tests"
  },
  {
    "input": "diff --git a/mute-idiom/src/main/java/com/iluwatar/mute/App.java b/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/App.java\n@@ -20,6 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package com.iluwatar.mute;\n \n import static org.mockito.Mockito.doThrow;\n@@ -28,33 +29,56 @@\n import java.io.ByteArrayOutputStream;\n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.sql.Statement;\n \n+/**\n+ * Mute pattern is utilized when we need to suppress an exception due to an API flaw or in \n+ * situation when all we can do to handle the exception is to log it. \n+ * This pattern should not be used everywhere. It is very important to logically handle the \n+ * exceptions in a system, but some situations like the ones described above require this pattern, \n+ * so that we don't need to repeat \n+ * <pre>\n+ * <code>\n+ *   try {\n+ *     // code that may throwing exception we need to ignore or may never be thrown\n+ *   } catch (Exception ex) {\n+ *     // ignore by logging or throw error if unexpected exception occurs\n+ *   }\n+ * </code>\n+ * </pre> every time we need to ignore an exception.\n+ * \n+ */\n public class App {\n \n-  public static void main(String[] args) {\n-    \n+  /**\n+   * Program entry point.\n+   * \n+   * @param args command line args.\n+   * @throws Exception if any exception occurs\n+   */\n+  public static void main(String[] args) throws Exception {\n+\n     useOfLoggedMute();\n-    \n+\n     useOfMute();\n   }\n \n   /*\n-   * Typically used when the API declares some exception but cannot do so. Usually a signature mistake.\n-   * In this example out is not supposed to throw exception as it is a ByteArrayOutputStream. So we\n-   * utilize mute, which will throw AssertionError if unexpected exception occurs.\n+   * Typically used when the API declares some exception but cannot do so. Usually a \n+   * signature mistake.In this example out is not supposed to throw exception as it is a\n+   * ByteArrayOutputStream. So we utilize mute, which will throw AssertionError if unexpected\n+   * exception occurs.\n    */\n   private static void useOfMute() {\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\n     Mute.mute(() -> out.write(\"Hello\".getBytes()));\n   }\n \n-  private static void useOfLoggedMute() {\n+  private static void useOfLoggedMute() throws SQLException {\n     Connection connection = null;\n     try {\n       connection = openConnection();\n       readStuff(connection);\n-    } catch (SQLException ex) {\n-      ex.printStackTrace();\n     } finally {\n       closeConnection(connection);\n     }\n@@ -64,14 +88,12 @@ private static void useOfLoggedMute() {\n    * All we can do while failed close of connection is to log it.\n    */\n   private static void closeConnection(Connection connection) {\n-   if (connection != null) {\n-     Mute.loggedMute(() -> connection.close());\n-   }\n+    Mute.loggedMute(() -> connection.close());\n   }\n \n   private static void readStuff(Connection connection) throws SQLException {\n-    if (connection != null) {\n-      connection.createStatement();\n+    try (Statement statement = connection.createStatement()) {\n+      System.out.println(\"Read data from statement\");\n     }\n   }\n \n\ndiff --git a/mute-idiom/src/main/java/com/iluwatar/mute/CheckedRunnable.java b/mute-idiom/src/main/java/com/iluwatar/mute/CheckedRunnable.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/CheckedRunnable.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/CheckedRunnable.java\n@@ -20,6 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package com.iluwatar.mute;\n \n /**\n@@ -32,5 +33,5 @@ public interface CheckedRunnable {\n    * Same as {@link Runnable#run()} with a possibility of exception in execution.\n    * @throws Exception if any exception occurs.\n    */\n-  public void run() throws Exception;\n+  void run() throws Exception;\n }\n\ndiff --git a/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java b/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java\n--- a/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java\n+++ b/mute-idiom/src/main/java/com/iluwatar/mute/Mute.java\n@@ -29,6 +29,9 @@\n  * A utility class that allows you to utilize mute idiom.\n  */\n public final class Mute {\n+  \n+  // The constructor is never meant to be called.\n+  private Mute() {}\n \n   /**\n    * Executes the <code>runnable</code> and throws the exception occurred within a {@link AssertionError}.\n\ndiff --git a/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java b/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java\n--- a/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java\n+++ b/mute-idiom/src/test/java/com/iluwatar/mute/AppTest.java\n@@ -9,7 +9,7 @@\n public class AppTest {\n \n   @Test\n-  public void test() {\n+  public void test() throws Exception {\n     App.main(null);\n   }\n }\n\ndiff --git a/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java b/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n--- a/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n+++ b/mute-idiom/src/test/java/com/iluwatar/mute/MuteTest.java\n@@ -20,6 +20,7 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n+\n package com.iluwatar.mute;\n \n import static org.junit.Assert.assertTrue;\n@@ -38,6 +39,11 @@ public class MuteTest {\n   \n   @Rule public ExpectedException exception = ExpectedException.none();\n   \n+  @Test\n+  public void muteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunnableDoesNotThrowAnyException() {\n+    Mute.mute(() -> methodNotThrowingAnyException());\n+  }\n+  \n   @Test\n   public void muteShouldRethrowUnexpectedExceptionAsAssertionError() throws Exception {\n     exception.expect(AssertionError.class);\n@@ -46,8 +52,9 @@ public void muteShouldRethrowUnexpectedExceptionAsAssertionError() throws Except\n     Mute.mute(() -> methodThrowingException());\n   }\n   \n-  private void methodThrowingException() throws Exception {\n-    throw new Exception(MESSAGE);\n+  @Test\n+  public void loggedMuteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunnableDoesNotThrowAnyException() {\n+    Mute.loggedMute(() -> methodNotThrowingAnyException());\n   }\n   \n   @Test\n@@ -59,4 +66,13 @@ public void loggedMuteShouldLogExceptionTraceBeforeSwallowingIt() throws IOExcep\n     \n     assertTrue(new String(stream.toByteArray()).contains(MESSAGE));\n   }\n+  \n+  \n+  private void methodNotThrowingAnyException() {\n+    System.out.println(\"Executed successfully\");\n+  }\n+  \n+  private void methodThrowingException() throws Exception {\n+    throw new Exception(MESSAGE);\n+  }\n }",
    "output": "Work on , added documentation and class diagram. Made refactoring changes to pass checkstyle and PMD checks"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n@@ -0,0 +1,33 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal;\n+\n+/**\n+ * Hello world!\n+ *\n+ */\n+public class App {\n+  public static void main(String[] args) {\n+    System.out.println(\"Hello World!\");\n+  }\n+}\n\ndiff --git a/hexagonal/src/test/java/com/iluwatar/hexagonal/AppTest.java b/hexagonal/src/test/java/com/iluwatar/hexagonal/AppTest.java\n--- a/hexagonal/src/test/java/com/iluwatar/hexagonal/AppTest.java\n+++ b/hexagonal/src/test/java/com/iluwatar/hexagonal/AppTest.java\n@@ -0,0 +1,41 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.hexagonal;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for simple App.\n+ */\n+public class AppTest {\n+\n+  /**\n+   * Rigourous Test :-)\n+   */\n+  @Test\n+  public void testApp() {\n+    assertTrue(true);\n+  }\n+}",
    "output": "Initial commit for Hexagonal Architecture pattern"
  },
  {
    "input": "diff --git a/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java b/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java\n--- a/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java\n+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenGoldmineFacade.java\n@@ -60,7 +60,7 @@ public void endDay() {\n     makeActions(workers, DwarvenMineWorker.Action.GO_HOME, DwarvenMineWorker.Action.GO_TO_SLEEP);\r\n   }\r\n \r\n-  private void makeActions(Collection<DwarvenMineWorker> workers,\r\n+  private static void makeActions(Collection<DwarvenMineWorker> workers,\r\n       DwarvenMineWorker.Action... actions) {\r\n     for (DwarvenMineWorker worker : workers) {\r\n       worker.action(actions);\r\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n--- a/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n+++ b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n@@ -44,7 +44,7 @@ private Command getCommand(String request) {\n     }\n   }\n \n-  private Class getCommandClass(String request) {\n+  private static Class getCommandClass(String request) {\n     Class result;\n     try {\n       result = Class.forName(\"com.iluwatar.front.controller.\" + request + \"Command\");\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n@@ -58,7 +58,7 @@ public void handleChannelRead(AbstractNioChannel channel, Object readObject, Sel\n     }\n   }\n \n-  private void sendReply(AbstractNioChannel channel, DatagramPacket incomingPacket, SelectionKey key) {\n+  private static void sendReply(AbstractNioChannel channel, DatagramPacket incomingPacket, SelectionKey key) {\n     /*\n      * Create a reply acknowledgement datagram packet setting the receiver to the sender of incoming\n      * message.\n@@ -69,12 +69,12 @@ private void sendReply(AbstractNioChannel channel, DatagramPacket incomingPacket\n     channel.write(replyPacket, key);\n   }\n \n-  private void sendReply(AbstractNioChannel channel, SelectionKey key) {\n+  private static void sendReply(AbstractNioChannel channel, SelectionKey key) {\n     ByteBuffer buffer = ByteBuffer.wrap(ACK);\n     channel.write(buffer, key);\n   }\n \n-  private void doLogging(ByteBuffer data) {\n+  private static void doLogging(ByteBuffer data) {\n     // assuming UTF-8 :(\n     System.out.println(new String(data.array(), 0, data.limit()));\n   }\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n@@ -186,7 +186,7 @@ private void processKey(SelectionKey key) throws IOException {\n     }\n   }\n \n-  private void onChannelWritable(SelectionKey key) throws IOException {\n+  private static void onChannelWritable(SelectionKey key) throws IOException {\n     AbstractNioChannel channel = (AbstractNioChannel) key.attachment();\n     channel.flush(key);\n   }\n\ndiff --git a/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/ReaderWriterLock.java b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/ReaderWriterLock.java\n--- a/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/ReaderWriterLock.java\n+++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/ReaderWriterLock.java\n@@ -89,7 +89,7 @@ private boolean isLockFree() {\n     return globalMutex.isEmpty();\n   }\n \n-  private void waitUninterruptibly(Object o) {\n+  private static void waitUninterruptibly(Object o) {\n     try {\n       o.wait();\n     } catch (InterruptedException e) {\n\ndiff --git a/repository/src/main/java/com/iluwatar/repository/AppConfig.java b/repository/src/main/java/com/iluwatar/repository/AppConfig.java\n--- a/repository/src/main/java/com/iluwatar/repository/AppConfig.java\n+++ b/repository/src/main/java/com/iluwatar/repository/AppConfig.java\n@@ -76,7 +76,7 @@ public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n   /**\n    * Properties for Jpa\n    */\n-  private Properties jpaProperties() {\n+  private static Properties jpaProperties() {\n     Properties properties = new Properties();\n     properties.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.H2Dialect\");\n     properties.setProperty(\"hibernate.hbm2ddl.auto\", \"create-drop\");",
    "output": "S2325 - private methods that don't access instance data should be static"
  },
  {
    "input": "diff --git a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java\n--- a/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java\n+++ b/event-aggregator/src/main/java/com/iluwatar/event/aggregator/EventEmitter.java\n@@ -43,7 +43,7 @@ public EventEmitter(EventObserver obs) {\n     registerObserver(obs);\n   }\n \n-  public void registerObserver(EventObserver obs) {\n+  public final void registerObserver(EventObserver obs) {\n     observers.add(obs);\n   }\n \n\ndiff --git a/iterator/src/main/java/com/iluwatar/iterator/Item.java b/iterator/src/main/java/com/iluwatar/iterator/Item.java\n--- a/iterator/src/main/java/com/iluwatar/iterator/Item.java\n+++ b/iterator/src/main/java/com/iluwatar/iterator/Item.java\n@@ -46,7 +46,7 @@ public ItemType getType() {\n     return type;\n   }\n \n-  public void setType(ItemType type) {\n+  public final void setType(ItemType type) {\n     this.type = type;\n   }\n }\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/Cake.java b/layers/src/main/java/com/iluwatar/layers/Cake.java\n--- a/layers/src/main/java/com/iluwatar/layers/Cake.java\n+++ b/layers/src/main/java/com/iluwatar/layers/Cake.java\n@@ -75,7 +75,7 @@ public Set<CakeLayer> getLayers() {\n     return layers;\n   }\n \n-  public void setLayers(Set<CakeLayer> layers) {\n+  public final void setLayers(Set<CakeLayer> layers) {\n     this.layers = layers;\n   }\n \n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeLayer.java b/layers/src/main/java/com/iluwatar/layers/CakeLayer.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeLayer.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeLayer.java\n@@ -66,15 +66,15 @@ public String getName() {\n     return name;\n   }\n \n-  public void setName(String name) {\n+  public final void setName(String name) {\n     this.name = name;\n   }\n \n   public int getCalories() {\n     return calories;\n   }\n \n-  public void setCalories(int calories) {\n+  public final void setCalories(int calories) {\n     this.calories = calories;\n   }\n \n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeTopping.java b/layers/src/main/java/com/iluwatar/layers/CakeTopping.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeTopping.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeTopping.java\n@@ -66,11 +66,11 @@ public String getName() {\n     return name;\n   }\n \n-  public void setName(String name) {\n+  public final void setName(String name) {\n     this.name = name;\n   }\n \n-  public int getCalories() {\n+  public final int getCalories() {\n     return calories;\n   }\n ",
    "output": "S1699 - Constructors should only call non-overridable methods"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/App.java b/dao/src/main/java/com/iluwatar/dao/App.java\n--- a/dao/src/main/java/com/iluwatar/dao/App.java\n+++ b/dao/src/main/java/com/iluwatar/dao/App.java\n@@ -29,7 +29,7 @@ public class App {\n    * @param args command line args.\n    */\n   public static void main(final String[] args) {\n-    final CustomerDaoImpl customerDao = new CustomerDaoImpl(generateSampleCustomers());\n+    final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());\n     log.info(\"customerDao.getAllCustomers(): \" + customerDao.getAllCustomers());\n     log.info(\"customerDao.getCusterById(2): \" + customerDao.getCustomerById(2));\n     final Customer customer = new Customer(4, \"Dan\", \"Danson\");",
    "output": "Create object with reference to Interface In Dao pattern DaoImpl object is created with reference to dao interface."
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -52,14 +52,6 @@ public void createKingdom(final KingdomFactory factory) {\n     setArmy(factory.createArmy());\n   }\n \n-  ElfKingdomFactory getElfKingdomFactory() {\n-    return new ElfKingdomFactory();\n-  }\n-\n-  OrcKingdomFactory getOrcKingdomFactory() {\n-    return new OrcKingdomFactory();\n-  }\n-\n   King getKing(final KingdomFactory factory) {\n     return factory.createKing();\n   }\n@@ -107,17 +99,13 @@ public static void main(String[] args) {\n     App app = new App();\n \n     System.out.println(\"Elf Kingdom\");\n-    KingdomFactory elfKingdomFactory;\n-    elfKingdomFactory = app.getElfKingdomFactory();\n-    app.createKingdom(elfKingdomFactory);\n+    app.createKingdom(new ElfKingdomFactory());\n     System.out.println(app.getArmy().getDescription());\n     System.out.println(app.getCastle().getDescription());\n     System.out.println(app.getKing().getDescription());\n \n     System.out.println(\"\\nOrc Kingdom\");\n-    KingdomFactory orcKingdomFactory;\n-    orcKingdomFactory = app.getOrcKingdomFactory();\n-    app.createKingdom(orcKingdomFactory);\n+    app.createKingdom(new OrcKingdomFactory());\n     System.out.println(app.getArmy().getDescription());\n     System.out.println(app.getCastle().getDescription());\n     System.out.println(app.getKing().getDescription());\n\ndiff --git a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n--- a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AbstractFactoryTest.java\n@@ -36,8 +36,8 @@ public class AbstractFactoryTest {\n \n   @Before\n   public void setUp() {\n-    elfFactory = app.getElfKingdomFactory();\n-    orcFactory = app.getOrcKingdomFactory();\n+    elfFactory = new ElfKingdomFactory();\n+    orcFactory = new OrcKingdomFactory();\n   }\n \n   @Test",
    "output": "Make example App a bit easier to understand"
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/factory/method/App.java b/factory-method/src/main/java/com/iluwatar/factory/method/App.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/App.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/App.java\n@@ -38,25 +38,40 @@\n  */\n public class App {\n \n+  private final Blacksmith blacksmith;\n+  \n+  /**\n+   * Creates an instance of <code>App</code> which will use <code>blacksmith</code> to manufacture \n+   * the weapons for war.\n+   * <code>App</code> is unaware which concrete implementation of {@link Blacksmith} it is using.\n+   * The decision of which blacksmith implementation to use may depend on configuration, or\n+   * the type of rival in war.\n+   * @param blacksmith\n+   */\n+  public App(Blacksmith blacksmith) {\n+    this.blacksmith = blacksmith;\n+  }\n+  \n   /**\n    * Program entry point\n    * \n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    Blacksmith blacksmith;\n+    // Lets go to war with Orc weapons\n+    App app = new App(new OrcBlacksmith());\n+    app.manufactureWeapons();\n+    \n+    // Lets go to war with Elf weapons\n+    app = new App(new ElfBlacksmith());\n+    app.manufactureWeapons();\n+  }\n+  \n+  private void manufactureWeapons() {\n     Weapon weapon;\n-\n-    blacksmith = new OrcBlacksmith();\n     weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\n     System.out.println(weapon);\n     weapon = blacksmith.manufactureWeapon(WeaponType.AXE);\n     System.out.println(weapon);\n-\n-    blacksmith = new ElfBlacksmith();\n-    weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);\n-    System.out.println(weapon);\n-    weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\n-    System.out.println(weapon);\n   }\n }\n\ndiff --git a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n--- a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n@@ -93,7 +93,7 @@ public void testElfBlacksmithWithSpear() {\n    * @param expectedWeaponType expected WeaponType of the weapon\n    * @param clazz expected class of the weapon\n    */\n-  private void verifyWeapon(Weapon weapon, WeaponType expectedWeaponType, Class clazz) {\n+  private void verifyWeapon(Weapon weapon, WeaponType expectedWeaponType, Class<?> clazz) {\n     assertTrue(\"Weapon must be an object of: \" + clazz.getName(), clazz.isInstance(weapon));\n     assertEquals(\"Weapon must be of weaponType: \" + clazz.getName(), expectedWeaponType,\n         weapon.getWeaponType());",
    "output": "1) Removed warning from test case. 2) Made implementation of App more understandable."
  },
  {
    "input": "diff --git a/api-gateway/src/test/java/com/iluwatar/api/gateway/ApiGatewayTest.java b/api-gateway/src/test/java/com/iluwatar/api/gateway/ApiGatewayTest.java\n--- a/api-gateway/src/test/java/com/iluwatar/api/gateway/ApiGatewayTest.java\n+++ b/api-gateway/src/test/java/com/iluwatar/api/gateway/ApiGatewayTest.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar.api.gateway;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApiGatewayTest {\n+\n+  /**\n+   * Tests getting the data for a desktop client\n+   */\n+  @Test\n+  public void testGetProductDesktop() {\n+    ApiGateway apiGateway = new ApiGateway();\n+    DesktopProduct desktopProduct = apiGateway.getProductDesktop();\n+\n+    assertEquals(\"20\", desktopProduct.getPrice());\n+    assertEquals(\"/product-image.png\", desktopProduct.getImagePath());\n+  }\n+\n+  /**\n+   * Tests getting the data for a mobile client\n+   */\n+  @Test\n+  public void testGetProductMobile() {\n+    ApiGateway apiGateway = new ApiGateway();\n+    MobileProduct mobileProduct = apiGateway.getProductMobile();\n+\n+    assertEquals(\"20\", mobileProduct.getPrice());\n+  }\n+}\n\ndiff --git a/api-gateway/src/test/java/com/iluwatar/api/gateway/AppTest.java b/api-gateway/src/test/java/com/iluwatar/api/gateway/AppTest.java\n--- a/api-gateway/src/test/java/com/iluwatar/api/gateway/AppTest.java\n+++ b/api-gateway/src/test/java/com/iluwatar/api/gateway/AppTest.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar.api.gateway;\n+\n+import org.junit.Test;\n+\n+/**\n+ *\n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void test() throws Exception {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}",
    "output": "Create unit tests for Gateway API pattern"
  },
  {
    "input": "diff --git a/api-gateway/src/main/java/com/iluwatar/api/gateway/ApiGateway.java b/api-gateway/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n--- a/api-gateway/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n+++ b/api-gateway/src/main/java/com/iluwatar/api/gateway/ApiGateway.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar.api.gateway;\n+\n+/**\n+ * The ApiGateway aggregates calls to microservices based on the needs of the individual clients.\n+ */\n+public class ApiGateway {\n+\n+  private ImageService imageService = new ImageService();\n+  private PriceService priceService = new PriceService();\n+\n+  /**\n+   * Retrieves product information that desktop clients need\n+   * @return Product information for clients on a desktop\n+   */\n+  public DesktopProduct getProductDesktop() {\n+    DesktopProduct desktopProduct = new DesktopProduct();\n+    desktopProduct.setImagePath(imageService.getImagePath());\n+    desktopProduct.setPrice(priceService.getPrice());\n+    return desktopProduct;\n+  }\n+\n+  /**\n+   * Retrieves product information that mobile clients need\n+   * @return Product information for clients on a mobile device\n+   */\n+  public MobileProduct getProductMobile() {\n+    MobileProduct mobileProduct = new MobileProduct();\n+    mobileProduct.setPrice(priceService.getPrice());\n+    return mobileProduct;\n+  }\n+}\n\ndiff --git a/api-gateway/src/main/java/com/iluwatar/api/gateway/App.java b/api-gateway/src/main/java/com/iluwatar/api/gateway/App.java\n--- a/api-gateway/src/main/java/com/iluwatar/api/gateway/App.java\n+++ b/api-gateway/src/main/java/com/iluwatar/api/gateway/App.java\n@@ -0,0 +1,46 @@\n+package com.iluwatar.api.gateway;\n+\n+/**\n+ * With the Microservices pattern, a client may need data from multiple different microservices.\n+ * If the client called each microservice directly, that could contribute to longer load times,\n+ * since the client would have to make a network request for each microservice called. Moreover,\n+ * having the client call each microservice directly ties the client to that microservice - if the\n+ * internal implementations of the microservices change (for example, if two microservices are\n+ * combined sometime in the future) or if the location (host and port) of a microservice changes,\n+ * then every client that makes use of those microservices must be updated.\n+ *\n+ * <p>\n+ * The intent of the API Gateway pattern is to alleviate some of these issues. In the API Gateway\n+ * pattern, an additional entity (the API Gateway) is placed between the client and the\n+ * microservices. The job of the API Gateway is to aggregate the calls to the microservices.\n+ * Rather than the client calling each microservice individually, the client calls the API Gateway\n+ * a single time. The API Gateway then calls each of the microservices that the client needs.\n+ *\n+ * <p>\n+ * This implementation shows what the API Gateway pattern could look like for an e-commerce site.\n+ * In this case, the (@link ImageService) and (@link PriceService) represent our microservices.\n+ * Customers viewing the site on a desktop device can see both price information and an image of\n+ * a product, so the (@link ApiGateway) calls both of the microservices and aggregates the data in\n+ * the (@link DesktopProduct) model. However, mobile users only see price information; they do not\n+ * see a product image. For mobile users, the (@link ApiGateway) only retrieves price information,\n+ * which it uses to populate the (@link MobileProduct).\n+ */\n+public class App {\n+\n+  /**\n+   * Program entry point\n+   *\n+   * @param args\n+   *          command line args\n+   */\n+  public static void main(String[] args) {\n+    ApiGateway apiGateway = new ApiGateway();\n+\n+    DesktopProduct desktopProduct = apiGateway.getProductDesktop();\n+    System.out.println(String.format(\"Desktop Product \\nPrice: %s\\nImage path: %s\",\n+        desktopProduct.getPrice(), desktopProduct.getImagePath()));\n+\n+    MobileProduct mobileProduct = apiGateway.getProductMobile();\n+    System.out.println(String.format(\"Mobile Product \\nPrice: %s\", mobileProduct.getPrice()));\n+  }\n+}\n\ndiff --git a/api-gateway/src/main/java/com/iluwatar/api/gateway/DesktopProduct.java b/api-gateway/src/main/java/com/iluwatar/api/gateway/DesktopProduct.java\n--- a/api-gateway/src/main/java/com/iluwatar/api/gateway/DesktopProduct.java\n+++ b/api-gateway/src/main/java/com/iluwatar/api/gateway/DesktopProduct.java\n@@ -0,0 +1,26 @@\n+package com.iluwatar.api.gateway;\n+\n+/**\n+ * Encapsulates all of the information that a desktop client needs to display a product.\n+ */\n+public class DesktopProduct {\n+\n+  private String price;\n+  private String imagePath;\n+\n+  public String getPrice() {\n+    return price;\n+  }\n+\n+  public void setPrice(String price) {\n+    this.price = price;\n+  }\n+\n+  public String getImagePath() {\n+    return imagePath;\n+  }\n+\n+  public void setImagePath(String imagePath) {\n+    this.imagePath = imagePath;\n+  }\n+}\n\ndiff --git a/api-gateway/src/main/java/com/iluwatar/api/gateway/ImageService.java b/api-gateway/src/main/java/com/iluwatar/api/gateway/ImageService.java\n--- a/api-gateway/src/main/java/com/iluwatar/api/gateway/ImageService.java\n+++ b/api-gateway/src/main/java/com/iluwatar/api/gateway/ImageService.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.api.gateway;\n+\n+/**\n+ * Represents a microservice used to retrieve image data.\n+ */\n+public class ImageService {\n+\n+  /**\n+   * Gets the image path\n+   * @return the image path\n+   */\n+  public String getImagePath() {\n+    return \"/product-image.png\";\n+  }\n+}\n\ndiff --git a/api-gateway/src/main/java/com/iluwatar/api/gateway/MobileProduct.java b/api-gateway/src/main/java/com/iluwatar/api/gateway/MobileProduct.java\n--- a/api-gateway/src/main/java/com/iluwatar/api/gateway/MobileProduct.java\n+++ b/api-gateway/src/main/java/com/iluwatar/api/gateway/MobileProduct.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar.api.gateway;\n+\n+/**\n+ * Encapsulates all of the information that mobile client needs to display a product.\n+ */\n+public class MobileProduct {\n+\n+  private String price;\n+\n+  public String getPrice() {\n+    return price;\n+  }\n+\n+  public void setPrice(String price) {\n+    this.price = price;\n+  }\n+}\n\ndiff --git a/api-gateway/src/main/java/com/iluwatar/api/gateway/PriceService.java b/api-gateway/src/main/java/com/iluwatar/api/gateway/PriceService.java\n--- a/api-gateway/src/main/java/com/iluwatar/api/gateway/PriceService.java\n+++ b/api-gateway/src/main/java/com/iluwatar/api/gateway/PriceService.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.api.gateway;\n+\n+/**\n+ * Represents a microservice used to retrieve price data.\n+ */\n+public class PriceService {\n+\n+  /**\n+   * Gets the price\n+   * @return the price\n+   */\n+  public String getPrice() {\n+    return \"20\";\n+  }\n+}",
    "output": "Create API Gateway pattern"
  },
  {
    "input": "diff --git a/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java\n--- a/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java\n+++ b/null-object/src/main/java/com/iluwatar/nullobject/NullNode.java\n@@ -60,5 +60,7 @@ public String getName() {\n   }\n \n   @Override\n-  public void walk() {}\n+  public void walk() {\n+    // Do nothing\n+  }\n }\n\ndiff --git a/visitor/src/main/java/com/iluwatar/visitor/CommanderVisitor.java b/visitor/src/main/java/com/iluwatar/visitor/CommanderVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/visitor/CommanderVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/visitor/CommanderVisitor.java\n@@ -30,10 +30,14 @@\n public class CommanderVisitor implements UnitVisitor {\r\n \r\n   @Override\r\n-  public void visitSoldier(Soldier soldier) {}\r\n+  public void visitSoldier(Soldier soldier) {\r\n+    // Do nothing\r\n+  }\r\n \r\n   @Override\r\n-  public void visitSergeant(Sergeant sergeant) {}\r\n+  public void visitSergeant(Sergeant sergeant) {\r\n+    // Do nothing\r\n+  }\r\n \r\n   @Override\r\n   public void visitCommander(Commander commander) {\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/visitor/SergeantVisitor.java b/visitor/src/main/java/com/iluwatar/visitor/SergeantVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/visitor/SergeantVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/visitor/SergeantVisitor.java\n@@ -30,13 +30,17 @@\n public class SergeantVisitor implements UnitVisitor {\r\n \r\n   @Override\r\n-  public void visitSoldier(Soldier soldier) {}\r\n+  public void visitSoldier(Soldier soldier) {\r\n+    // Do nothing\r\n+  }\r\n \r\n   @Override\r\n   public void visitSergeant(Sergeant sergeant) {\r\n     System.out.println(\"Hello \" + sergeant);\r\n   }\r\n \r\n   @Override\r\n-  public void visitCommander(Commander commander) {}\r\n+  public void visitCommander(Commander commander) {\r\n+    // Do nothing\r\n+  }\r\n }\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/visitor/SoldierVisitor.java b/visitor/src/main/java/com/iluwatar/visitor/SoldierVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/visitor/SoldierVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/visitor/SoldierVisitor.java\n@@ -35,8 +35,12 @@ public void visitSoldier(Soldier soldier) {\n   }\r\n \r\n   @Override\r\n-  public void visitSergeant(Sergeant sergeant) {}\r\n+  public void visitSergeant(Sergeant sergeant) {\r\n+    // Do nothing\r\n+  }\r\n \r\n   @Override\r\n-  public void visitCommander(Commander commander) {}\r\n+  public void visitCommander(Commander commander) {\r\n+    // Do nothing\r\n+  }\r\n }\r",
    "output": "S1186 - Methods should not be empty"
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/builder/Hero.java b/builder/src/main/java/com/iluwatar/builder/Hero.java\n--- a/builder/src/main/java/com/iluwatar/builder/Hero.java\n+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java\n@@ -71,10 +71,10 @@ public String toString() {\n     if (hairColor != null || hairType != null) {\n       sb.append(\" with \");\n       if (hairColor != null) {\n-        sb.append(hairColor).append(\" \");\n+        sb.append(hairColor).append(' ');\n       }\n       if (hairType != null) {\n-        sb.append(hairType).append(\" \");\n+        sb.append(hairType).append(' ');\n       }\n       sb.append(hairType != HairType.BALD ? \"hair\" : \"head\");\n     }\n@@ -84,7 +84,7 @@ public String toString() {\n     if (weapon != null) {\n       sb.append(\" and wielding a \").append(weapon);\n     }\n-    sb.append(\".\");\n+    sb.append('.');\n     return sb.toString();\n   }\n \n\ndiff --git a/property/src/main/java/com/iluwatar/property/Character.java b/property/src/main/java/com/iluwatar/property/Character.java\n--- a/property/src/main/java/com/iluwatar/property/Character.java\n+++ b/property/src/main/java/com/iluwatar/property/Character.java\n@@ -114,11 +114,11 @@ public void remove(Stats stat) {\n   public String toString() {\n     StringBuilder builder = new StringBuilder();\n     if (name != null) {\n-      builder.append(\"Player: \").append(name).append(\"\\n\");\n+      builder.append(\"Player: \").append(name).append('\\n');\n     }\n \n     if (type != null) {\n-      builder.append(\"Character type: \").append(type.name()).append(\"\\n\");\n+      builder.append(\"Character type: \").append(type.name()).append('\\n');\n     }\n \n     builder.append(\"Stats:\\n\");\n@@ -127,7 +127,7 @@ public String toString() {\n       if (value == null) {\n         continue;\n       }\n-      builder.append(\" - \").append(stat.name()).append(\":\").append(value).append(\"\\n\");\n+      builder.append(\" - \").append(stat.name()).append(':').append(value).append('\\n');\n     }\n     return builder.toString();\n   }\n\ndiff --git a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n--- a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n@@ -98,7 +98,7 @@ public String toString() {\n             .append(\" armed with a \")\n             .append(weapon != null ? weapon : spell != null ? spell : \"with nothing\")\n             .append(abilities != null ? (\" and wielding \" + abilities + \" abilities\") : \"\")\n-            .append(\".\");\n+            .append('.');\n     return sb.toString();\n   }\n }",
    "output": "AppendCharacterWithChar - Append Character With Char"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/DbManager.java b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/DbManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n@@ -72,9 +72,7 @@ public static UserAccount readFromDb(String userId) {\n       return null;\n     }\n     Document doc = iterable.first();\n-    UserAccount userAccount =\n-        new UserAccount(userId, doc.getString(\"userName\"), doc.getString(\"additionalInfo\"));\n-    return userAccount;\n+    return new UserAccount(userId, doc.getString(\"userName\"), doc.getString(\"additionalInfo\"));\n   }\n \n   /**\n\ndiff --git a/dao/src/main/java/com/iluwatar/dao/Customer.java b/dao/src/main/java/com/iluwatar/dao/Customer.java\n--- a/dao/src/main/java/com/iluwatar/dao/Customer.java\n+++ b/dao/src/main/java/com/iluwatar/dao/Customer.java\n@@ -66,7 +66,6 @@ public boolean equals(final Object o) {\n \n   @Override\n   public int hashCode() {\n-    int result = getId();\n-    return result;\n+    return getId();\n   }\n }\n\ndiff --git a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java\n--- a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java\n+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java\n@@ -204,8 +204,7 @@ public NEW_TYPE computeNext() {\n    */\n   @Override\n   public List<TYPE> asList() {\n-    List<TYPE> copy = FluentIterable.copyToList(iterable);\n-    return copy;\n+    return FluentIterable.copyToList(iterable);\n   }\n \n   @Override\n\ndiff --git a/naked-objects/webapp/src/main/java/domainapp/webapp/SimpleApplication.java b/naked-objects/webapp/src/main/java/domainapp/webapp/SimpleApplication.java\n--- a/naked-objects/webapp/src/main/java/domainapp/webapp/SimpleApplication.java\n+++ b/naked-objects/webapp/src/main/java/domainapp/webapp/SimpleApplication.java\n@@ -118,8 +118,7 @@ public WebRequest newWebRequest(HttpServletRequest servletRequest, String filter\n     } catch (Exception e) {\n       System.out.println(e);\n     }\n-    WebRequest request = super.newWebRequest(servletRequest, filterPath);\n-    return request;\n+    return super.newWebRequest(servletRequest, filterPath);\n   }\n \n   @Override\n@@ -150,8 +149,7 @@ private static String readLines(final Class<?> contextClass, final String resour\n       List<String> readLines =\n           Resources.readLines(Resources.getResource(contextClass, resourceName),\n               Charset.defaultCharset());\n-      final String aboutText = Joiner.on(\"\\n\").join(readLines);\n-      return aboutText;\n+      return Joiner.on(\"\\n\").join(readLines);\n     } catch (IOException e) {\n       return \"This is a simple app\";\n     }",
    "output": "S1488 - Local Variables should not be declared and then immediately returned or thrown"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n@@ -11,6 +11,7 @@ public class UserGroup {\n   private static List<User> freeGroup = new ArrayList<>();\n   private static List<User> paidGroup = new ArrayList<>();\n \n+\n   /**\n    *\n    * @param user {@link User} to be added to the free group\n\ndiff --git a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n--- a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n@@ -13,6 +13,18 @@\n \n public class PropertiesFeatureToggleVersionTest {\n \n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNullPropertiesPassed() throws Exception {\n+    new PropertiesFeatureToggleVersion(null);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNonBooleanProperty() throws Exception {\n+    final Properties properties = new Properties();\n+    properties.setProperty(\"enhancedWelcome\",\"Something\");\n+    new PropertiesFeatureToggleVersion(properties);\n+  }\n+\n   @Test\n   public void testFeatureTurnedOn() throws Exception {\n     final Properties properties = new Properties();",
    "output": "Add tests for Properties"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n@@ -7,4 +7,6 @@ public interface Service {\n \n   String getWelcomeMessage(User user);\n \n+  boolean isEnhanced();\n+\n }\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java\n@@ -7,21 +7,36 @@\n \n public class PropertiesFeatureToggleVersion implements Service {\n \n-  private Properties properties;\n+  private boolean isEnhanced;\n \n+  /**\n+   *\n+   * @param properties {@link Properties} used to configure the service and toggle features.\n+   */\n   public PropertiesFeatureToggleVersion(final Properties properties) {\n-    this.properties = properties;\n+    if (properties == null) {\n+      throw new IllegalArgumentException(\"No Properties Provided.\");\n+    } else {\n+      try {\n+        isEnhanced = (boolean) properties.get(\"enhancedWelcome\");\n+      } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Invalid Enhancement Settings Provided.\");\n+      }\n+    }\n   }\n \n   @Override\n   public String getWelcomeMessage(final User user) {\n \n-    final boolean enhancedWelcome = (boolean) properties.get(\"enhancedWelcome\");\n-\n-    if (enhancedWelcome) {\n+    if (isEnhanced()) {\n       return \"Welcome \" + user + \". You're using the enhanced welcome message.\";\n     }\n \n     return \"Welcome to the application.\";\n   }\n+\n+  @Override\n+  public boolean isEnhanced() {\n+    return isEnhanced;\n+  }\n }\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n@@ -15,4 +15,9 @@ public String getWelcomeMessage(User user) {\n     return \"I suppose you can use this software.\";\n   }\n \n+  @Override\n+  public boolean isEnhanced() {\n+    return true;\n+  }\n+\n }\n\ndiff --git a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n--- a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n@@ -8,6 +8,8 @@\n import java.util.Properties;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n public class PropertiesFeatureToggleVersionTest {\n \n@@ -16,6 +18,7 @@ public void testFeatureTurnedOn() throws Exception {\n     final Properties properties = new Properties();\n     properties.put(\"enhancedWelcome\",true);\n     Service service = new PropertiesFeatureToggleVersion(properties);\n+    assertTrue(service.isEnhanced());\n     final String welcomeMessage = service.getWelcomeMessage(new User(\"Jamie No Code\"));\n     assertEquals(\"Welcome Jamie No Code. You're using the enhanced welcome message.\",welcomeMessage);\n   }\n@@ -25,6 +28,7 @@ public void testFeatureTurnedOff() throws Exception {\n     final Properties properties = new Properties();\n     properties.put(\"enhancedWelcome\",false);\n     Service service = new PropertiesFeatureToggleVersion(properties);\n+    assertFalse(service.isEnhanced());\n     final String welcomeMessage = service.getWelcomeMessage(new User(\"Jamie No Code\"));\n     assertEquals(\"Welcome to the application.\",welcomeMessage);\n   }\n\ndiff --git a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n--- a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n@@ -7,6 +7,7 @@\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n public class TieredFeatureToggleVersionTest {\n \n@@ -33,4 +34,9 @@ public void testGetWelcomeMessageForFreeUser() throws Exception {\n     final String expected = \"I suppose you can use this software.\";\n     assertEquals(expected, welcomeMessage);\n   }\n+\n+  @Test\n+  public void testIsEnhancedAlwaysTrueAsTiered() throws Exception {\n+    assertTrue(service.isEnhanced());\n+  }\n }\n\\ No newline at end of file",
    "output": "Add general boolean method to services for feature status. Change user.toString"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersion.java\n@@ -0,0 +1,27 @@\n+package com.iluwatar.featuretoggle.pattern.propertiesversion;\n+\n+import com.iluwatar.featuretoggle.pattern.Service;\n+import com.iluwatar.featuretoggle.user.User;\n+\n+import java.util.Properties;\n+\n+public class PropertiesFeatureToggleVersion implements Service {\n+\n+  private Properties properties;\n+\n+  public PropertiesFeatureToggleVersion(final Properties properties) {\n+    this.properties = properties;\n+  }\n+\n+  @Override\n+  public String getWelcomeMessage(final User user) {\n+\n+    final boolean enhancedWelcome = (boolean) properties.get(\"enhancedWelcome\");\n+\n+    if (enhancedWelcome) {\n+      return \"Welcome \" + user + \". You're using the enhanced welcome message.\";\n+    }\n+\n+    return \"Welcome to the application.\";\n+  }\n+}\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n@@ -9,7 +9,7 @@ public class TieredFeatureToggleVersion implements Service {\n   @Override\n   public String getWelcomeMessage(User user) {\n     if (UserGroup.isPaid(user)) {\n-      return \"You're amazing \" + user.getName() + \". Thanks for paying for this awesome software.\";\n+      return \"You're amazing \" + user + \". Thanks for paying for this awesome software.\";\n     }\n \n     return \"I suppose you can use this software.\";\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n@@ -8,7 +8,8 @@ public User(String name) {\n     this.name = name;\n   }\n \n-  public String getName() {\n+  @Override\n+  public String toString() {\n     return name;\n   }\n }\n\ndiff --git a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n--- a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n@@ -0,0 +1,31 @@\n+\n+package com.iluwatar.featuretoggle.pattern.propertiesversion;\n+\n+import com.iluwatar.featuretoggle.pattern.Service;\n+import com.iluwatar.featuretoggle.user.User;\n+import org.junit.Test;\n+\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class PropertiesFeatureToggleVersionTest {\n+\n+  @Test\n+  public void testFeatureTurnedOn() throws Exception {\n+    final Properties properties = new Properties();\n+    properties.put(\"enhancedWelcome\",true);\n+    Service service = new PropertiesFeatureToggleVersion(properties);\n+    final String welcomeMessage = service.getWelcomeMessage(new User(\"Jamie No Code\"));\n+    assertEquals(\"Welcome Jamie No Code. You're using the enhanced welcome message.\",welcomeMessage);\n+  }\n+\n+  @Test\n+  public void testFeatureTurnedOff() throws Exception {\n+    final Properties properties = new Properties();\n+    properties.put(\"enhancedWelcome\",false);\n+    Service service = new PropertiesFeatureToggleVersion(properties);\n+    final String welcomeMessage = service.getWelcomeMessage(new User(\"Jamie No Code\"));\n+    assertEquals(\"Welcome to the application.\",welcomeMessage);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Add Configuration Based Example of Feature Toggle"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n@@ -2,10 +2,9 @@\n \n import com.iluwatar.featuretoggle.user.User;\n \n-/**\n- * Created by joseph on 26/01/16.\n- */\n+\n public interface Service {\n \n-    public String getWelcomeMessage(User user);\n+    String getWelcomeMessage(User user);\n+\n }\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n@@ -4,15 +4,12 @@\n import com.iluwatar.featuretoggle.user.User;\n import com.iluwatar.featuretoggle.user.UserGroup;\n \n-/**\n- * Created by joseph on 26/01/16.\n- */\n public class TieredFeatureToggleVersion implements Service {\n \n     @Override\n     public String getWelcomeMessage(User user) {\n         if(UserGroup.isPaid(user)){\n-            return \"You're amazing thanks for paying for this awesome software.\";\n+            return \"You're amazing \" + user.getName() + \". Thanks for paying for this awesome software.\";\n         }\n \n         return \"I suppose you can use this software.\";\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n@@ -1,7 +1,14 @@\n package com.iluwatar.featuretoggle.user;\n \n-/**\n- * Created by joseph on 26/01/16.\n- */\n public class User {\n+\n+    private String name;\n+\n+    public User(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n }\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n@@ -3,9 +3,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-/**\n- * Created by joseph on 26/01/16.\n- */\n public class UserGroup {\n \n     private static List<User> freeGroup = new ArrayList<>();\n\ndiff --git a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n--- a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n@@ -8,32 +8,29 @@\n \n import static org.junit.Assert.*;\n \n-/**\n- * Created by joseph on 26/01/16.\n- */\n public class TieredFeatureToggleVersionTest {\n \n-    User paidUser = new User();\n-    User freeUser = new User();\n+    final User paidUser = new User(\"Jamie Coder\");\n+    final User freeUser = new User(\"Alan Defect\");\n+    final Service service = new TieredFeatureToggleVersion();\n \n     @Before\n     public void setUp() throws Exception {\n         UserGroup.addUserToPaidGroup(paidUser);\n         UserGroup.addUserToFreeGroup(freeUser);\n-\n     }\n \n     @Test\n     public void testGetWelcomeMessageForPaidUser() throws Exception {\n-        Service service = new TieredFeatureToggleVersion();\n-        String welcomeMessage = service.getWelcomeMessage(paidUser);\n-        assertEquals(\"You're amazing thanks for paying for this awesome software.\",welcomeMessage);\n+        final String welcomeMessage = service.getWelcomeMessage(paidUser);\n+        final String expected = \"You're amazing Jamie Coder. Thanks for paying for this awesome software.\";\n+        assertEquals(expected,welcomeMessage);\n     }\n \n     @Test\n     public void testGetWelcomeMessageForFreeUser() throws Exception {\n-        Service service = new TieredFeatureToggleVersion();\n-        String welcomeMessage = service.getWelcomeMessage(freeUser);\n-        assertEquals(\"I suppose you can use this software.\",welcomeMessage);\n+        final String welcomeMessage = service.getWelcomeMessage(freeUser);\n+        final String expected = \"I suppose you can use this software.\";\n+        assertEquals(expected,welcomeMessage);\n     }\n }\n\\ No newline at end of file\n\ndiff --git a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java\n--- a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java\n+++ b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java\n@@ -9,28 +9,28 @@ public class UserGroupTest {\n \n     @Test\n     public void testAddUserToFreeGroup() throws Exception {\n-        User user  = new User();\n+        User user  = new User(\"Free User\");\n         UserGroup.addUserToFreeGroup(user);\n         assertFalse(UserGroup.isPaid(user));\n     }\n \n     @Test\n     public void testAddUserToPaidGroup() throws Exception {\n-        User user  = new User();\n+        User user  = new User(\"Paid User\");\n         UserGroup.addUserToPaidGroup(user);\n         assertTrue(UserGroup.isPaid(user));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testAddUserToPaidWhenOnFree() throws Exception {\n-        User user  = new User();\n+        User user  = new User(\"Paid User\");\n         UserGroup.addUserToFreeGroup(user);\n         UserGroup.addUserToPaidGroup(user);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testAddUserToFreeWhenOnPaid() throws Exception {\n-        User user  = new User();\n+        User user  = new User(\"Free User\");\n         UserGroup.addUserToPaidGroup(user);\n         UserGroup.addUserToFreeGroup(user);\n     }",
    "output": "Some clean up and show the difference between paid and free a bit more."
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/Service.java\n@@ -0,0 +1,11 @@\n+package com.iluwatar.featuretoggle.pattern;\n+\n+import com.iluwatar.featuretoggle.user.User;\n+\n+/**\n+ * Created by joseph on 26/01/16.\n+ */\n+public interface Service {\n+\n+    public String getWelcomeMessage(User user);\n+}\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersion.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar.featuretoggle.pattern.tieredversion;\n+\n+import com.iluwatar.featuretoggle.pattern.Service;\n+import com.iluwatar.featuretoggle.user.User;\n+import com.iluwatar.featuretoggle.user.UserGroup;\n+\n+/**\n+ * Created by joseph on 26/01/16.\n+ */\n+public class TieredFeatureToggleVersion implements Service {\n+\n+    @Override\n+    public String getWelcomeMessage(User user) {\n+        if(UserGroup.isPaid(user)){\n+            return \"You're amazing thanks for paying for this awesome software.\";\n+        }\n+\n+        return \"I suppose you can use this software.\";\n+    }\n+\n+}\n\ndiff --git a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n--- a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/pattern/tieredversion/TieredFeatureToggleVersionTest.java\n@@ -0,0 +1,39 @@\n+package com.iluwatar.featuretoggle.pattern.tieredversion;\n+\n+import com.iluwatar.featuretoggle.pattern.Service;\n+import com.iluwatar.featuretoggle.user.User;\n+import com.iluwatar.featuretoggle.user.UserGroup;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Created by joseph on 26/01/16.\n+ */\n+public class TieredFeatureToggleVersionTest {\n+\n+    User paidUser = new User();\n+    User freeUser = new User();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        UserGroup.addUserToPaidGroup(paidUser);\n+        UserGroup.addUserToFreeGroup(freeUser);\n+\n+    }\n+\n+    @Test\n+    public void testGetWelcomeMessageForPaidUser() throws Exception {\n+        Service service = new TieredFeatureToggleVersion();\n+        String welcomeMessage = service.getWelcomeMessage(paidUser);\n+        assertEquals(\"You're amazing thanks for paying for this awesome software.\",welcomeMessage);\n+    }\n+\n+    @Test\n+    public void testGetWelcomeMessageForFreeUser() throws Exception {\n+        Service service = new TieredFeatureToggleVersion();\n+        String welcomeMessage = service.getWelcomeMessage(freeUser);\n+        assertEquals(\"I suppose you can use this software.\",welcomeMessage);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add WelcomeMessage Service and Tests for tier example of featureToggle"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/User.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar.featuretoggle.user;\n+\n+/**\n+ * Created by joseph on 26/01/16.\n+ */\n+public class User {\n+}\n\ndiff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar.featuretoggle.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Created by joseph on 26/01/16.\n+ */\n+public class UserGroup {\n+\n+    private static List<User> freeGroup = new ArrayList<>();\n+    private static List<User> paidGroup = new ArrayList<>();\n+\n+    public static void addUserToFreeGroup(final User user){\n+        if(paidGroup.contains(user)){\n+            throw new IllegalArgumentException(\"User all ready member of paid group.\");\n+        }else{\n+            if(!freeGroup.contains(user)){\n+                freeGroup.add(user);\n+            }\n+        }\n+    }\n+\n+    public static void addUserToPaidGroup(final User user){\n+        if(freeGroup.contains(user)){\n+            throw new IllegalArgumentException(\"User all ready member of free group.\");\n+        }else{\n+            if(!paidGroup.contains(user)){\n+                paidGroup.add(user);\n+            }\n+        }\n+    }\n+\n+    public static boolean isPaid(User user) {\n+        return paidGroup.contains(user);\n+    }\n+}\n\ndiff --git a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java\n--- a/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java\n+++ b/feature-toggle/src/main/test/com/iluwatar/featuretoggle/user/UserGroupTest.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar.featuretoggle.user;\n+\n+import org.junit.Test;\n+\n+import static junit.framework.TestCase.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserGroupTest {\n+\n+    @Test\n+    public void testAddUserToFreeGroup() throws Exception {\n+        User user  = new User();\n+        UserGroup.addUserToFreeGroup(user);\n+        assertFalse(UserGroup.isPaid(user));\n+    }\n+\n+    @Test\n+    public void testAddUserToPaidGroup() throws Exception {\n+        User user  = new User();\n+        UserGroup.addUserToPaidGroup(user);\n+        assertTrue(UserGroup.isPaid(user));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAddUserToPaidWhenOnFree() throws Exception {\n+        User user  = new User();\n+        UserGroup.addUserToFreeGroup(user);\n+        UserGroup.addUserToPaidGroup(user);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAddUserToFreeWhenOnPaid() throws Exception {\n+        User user  = new User();\n+        UserGroup.addUserToPaidGroup(user);\n+        UserGroup.addUserToFreeGroup(user);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add usergroup for version of feature toggle"
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/builder/Hero.java b/builder/src/main/java/com/iluwatar/builder/Hero.java\n--- a/builder/src/main/java/com/iluwatar/builder/Hero.java\n+++ b/builder/src/main/java/com/iluwatar/builder/Hero.java\n@@ -42,29 +42,25 @@ public Weapon getWeapon() {\n   public String toString() {\n \n     StringBuilder sb = new StringBuilder();\n-    sb.append(\"This is a \");\n-    sb.append(profession);\n-    sb.append(\" named \");\n-    sb.append(name);\n+    sb.append(\"This is a \")\n+            .append(profession)\n+            .append(\" named \")\n+            .append(name);\n     if (hairColor != null || hairType != null) {\n       sb.append(\" with \");\n       if (hairColor != null) {\n-        sb.append(hairColor);\n-        sb.append(\" \");\n+        sb.append(hairColor).append(\" \");\n       }\n       if (hairType != null) {\n-        sb.append(hairType);\n-        sb.append(\" \");\n+        sb.append(hairType).append(\" \");\n       }\n       sb.append(hairType != HairType.BALD ? \"hair\" : \"head\");\n     }\n     if (armor != null) {\n-      sb.append(\" wearing \");\n-      sb.append(armor);\n+      sb.append(\" wearing \").append(armor);\n     }\n     if (weapon != null) {\n-      sb.append(\" and wielding a \");\n-      sb.append(weapon);\n+      sb.append(\" and wielding a \").append(weapon);\n     }\n     sb.append(\".\");\n     return sb.toString();\n\ndiff --git a/dao/src/test/java/com/iluwatar/dao/CustomerTest.java b/dao/src/test/java/com/iluwatar/dao/CustomerTest.java\n--- a/dao/src/test/java/com/iluwatar/dao/CustomerTest.java\n+++ b/dao/src/test/java/com/iluwatar/dao/CustomerTest.java\n@@ -63,12 +63,12 @@ public void equalsWithSameObjects() {\n   @Test\n   public void testToString() {\n     final StringBuffer buffer = new StringBuffer();\n-    buffer.append(\"Customer{id=\");\n-    buffer.append(\"\" + customer.getId());\n-    buffer.append(\", firstName='\");\n-    buffer.append(customer.getFirstName());\n-    buffer.append(\"\\', lastName='\");\n-    buffer.append(customer.getLastName() + \"\\'}\");\n+    buffer.append(\"Customer{id=\")\n+            .append(\"\" + customer.getId())\n+            .append(\", firstName='\")\n+            .append(customer.getFirstName())\n+            .append(\"\\', lastName='\")\n+            .append(customer.getLastName() + \"\\'}\");\n     assertEquals(buffer.toString(), customer.toString());\n   }\n }\n\ndiff --git a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n--- a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n@@ -69,14 +69,14 @@ public void setAbilities(List<String> abilities) {\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n-    sb.append(\"This is a \");\n-    sb.append(fighterClass != null ? fighterClass : wizardClass);\n-    sb.append(\" named \");\n-    sb.append(name);\n-    sb.append(\" armed with a \");\n-    sb.append(weapon != null ? weapon : spell != null ? spell : \"with nothing\");\n-    sb.append(abilities != null ? (\" and wielding \" + abilities + \" abilities\") : \"\");\n-    sb.append(\".\");\n+    sb.append(\"This is a \")\n+            .append(fighterClass != null ? fighterClass : wizardClass)\n+            .append(\" named \")\n+            .append(name)\n+            .append(\" armed with a \")\n+            .append(weapon != null ? weapon : spell != null ? spell : \"with nothing\")\n+            .append(abilities != null ? (\" and wielding \" + abilities + \" abilities\") : \"\")\n+            .append(\".\");\n     return sb.toString();\n   }\n }",
    "output": "ConsecutiveAppendsShouldReuse - Consecutive Appends Should Reuse"
  },
  {
    "input": "diff --git a/value-object/value-object/src/main/java/com/iluwatar/value/object/App.java b/value-object/value-object/src/main/java/com/iluwatar/value/object/App.java\n--- a/value-object/value-object/src/main/java/com/iluwatar/value/object/App.java\n+++ b/value-object/value-object/src/main/java/com/iluwatar/value/object/App.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar.value.object;\n+\n+/**\n+ * Hello world!\n+ *\n+ */\n+public class App \n+{\n+    public static void main( String[] args )\n+    {\n+        System.out.println( \"Hello World!\" );\n+    }\n+}\n\ndiff --git a/value-object/value-object/src/test/java/com/iluwatar/value/object/AppTest.java b/value-object/value-object/src/test/java/com/iluwatar/value/object/AppTest.java\n--- a/value-object/value-object/src/test/java/com/iluwatar/value/object/AppTest.java\n+++ b/value-object/value-object/src/test/java/com/iluwatar/value/object/AppTest.java\n@@ -0,0 +1,38 @@\n+package com.iluwatar.value.object;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit test for simple App.\n+ */\n+public class AppTest \n+    extends TestCase\n+{\n+    /**\n+     * Create the test case\n+     *\n+     * @param testName name of the test case\n+     */\n+    public AppTest( String testName )\n+    {\n+        super( testName );\n+    }\n+\n+    /**\n+     * @return the suite of tests being tested\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite( AppTest.class );\n+    }\n+\n+    /**\n+     * Rigourous Test :-)\n+     */\n+    public void testApp()\n+    {\n+        assertTrue( true );\n+    }\n+}",
    "output": "Create project for value-object pattern"
  },
  {
    "input": "diff --git a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderTest.java b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderTest.java\n--- a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderTest.java\n+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderTest.java\n@@ -8,6 +8,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -18,6 +19,7 @@ public class ReaderTest {\n   /**\n    * Verify that multiple readers can get the read lock concurrently\n    */\n+  @Ignore // intermittent failures when executed on CI\n   @Test\n   public void testRead() throws Exception {\n \n\ndiff --git a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/WriterTest.java b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/WriterTest.java\n--- a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/WriterTest.java\n+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/WriterTest.java\n@@ -9,6 +9,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -19,6 +20,7 @@ public class WriterTest {\n   /**\n    * Verify that multiple writers will get the lock in order.\n    */\n+  @Ignore // intermittent failures when executed on CI\n   @Test\n   public void testWrite() throws Exception {\n ",
    "output": "Ignore rest of ReaderWriterLock tests with intermittent failures"
  },
  {
    "input": "diff --git a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java\n--- a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java\n+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java\n@@ -29,6 +29,7 @@ public void setup() {\n   /**\n    * Verify reader and writer can only get the lock to read and write orderly\n    */\n+  @Ignore // intermittent failures when executed on CI\n   @Test\n   public void testReadAndWrite() throws Exception {\n ",
    "output": "Ignore another test with intermittent failures until fixed"
  },
  {
    "input": "diff --git a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java\n--- a/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java\n+++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java\n@@ -11,6 +11,7 @@\n \n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -50,6 +51,7 @@ public void testReadAndWrite() throws Exception {\n   /**\n    * Verify reader and writer can only get the lock to read and write orderly\n    */\n+  @Ignore // intermittent failures when executed on CI\n   @Test\n   public void testWriteAndRead() throws Exception {\n ",
    "output": "Ignore test with intermittent failures until fixed"
  },
  {
    "input": "diff --git a/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java b/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java\n@@ -14,7 +14,7 @@\n public class SmartHostileTest {\n \n   @Test\n-  public void testSmartTroll() throws Exception {\n+  public void testSmartHostile() throws Exception {\n     // Create a normal troll first, but make sure we can spy on it later on.\n     final Hostile simpleTroll = spy(new Troll());\n ",
    "output": "Correct method name and cleanup etc folder"
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/App.java b/decorator/src/main/java/com/iluwatar/decorator/App.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/App.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java\n@@ -8,7 +8,7 @@\n  * runtime.\n  * <p>\n  * In this example we show how the simple {@link Troll} first attacks and then flees the battle.\n- * Then we decorate the {@link Troll} with a {@link SmartTroll} and perform the attack again. You\n+ * Then we decorate the {@link Troll} with a {@link SmartHostile} and perform the attack again. You\n  * can see how the behavior changes after the decoration.\n  * \n  */\n@@ -30,7 +30,7 @@ public static void main(String[] args) {\n \n     // change the behavior of the simple troll by adding a decorator\n     System.out.println(\"\\nA smart looking troll surprises you.\");\n-    Hostile smart = new SmartTroll(troll);\n+    Hostile smart = new SmartHostile(troll);\n     smart.attack();\n     smart.fleeBattle();\n     System.out.printf(\"Smart troll power %d.\\n\", smart.getAttackPower());\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/SmartHostile.java b/decorator/src/main/java/com/iluwatar/decorator/SmartHostile.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/SmartHostile.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/SmartHostile.java\n@@ -1,34 +1,34 @@\n package com.iluwatar.decorator;\n \n /**\n- * SmartTroll is a decorator for {@link Hostile} objects. The calls to the {@link Hostile} interface\n+ * SmartHostile is a decorator for {@link Hostile} objects. The calls to the {@link Hostile} interface\n  * are intercepted and decorated. Finally the calls are delegated to the decorated {@link Hostile}\n  * object.\n  *\n  */\n-public class SmartTroll implements Hostile {\n+public class SmartHostile implements Hostile {\n \n   private Hostile decorated;\n \n-  public SmartTroll(Hostile decorated) {\n+  public SmartHostile(Hostile decorated) {\n     this.decorated = decorated;\n   }\n \n   @Override\n   public void attack() {\n-    System.out.println(\"The troll throws a rock at you!\");\n+    System.out.println(\"It throws a rock at you!\");\n     decorated.attack();\n   }\n \n   @Override\n   public int getAttackPower() {\n-    // decorated troll power + 20 because it is smart\n+    // decorated hostile's power + 20 because it is smart\n     return decorated.getAttackPower() + 20;\n   }\n \n   @Override\n   public void fleeBattle() {\n-    System.out.println(\"The troll calls for help!\");\n+    System.out.println(\"It calls for help!\");\n     decorated.fleeBattle();\n   }\n }\n\ndiff --git a/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java b/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/SmartHostileTest.java\n@@ -11,15 +11,15 @@\n  *\n  * @author Jeroen Meulemeester\n  */\n-public class SmartTrollTest {\n+public class SmartHostileTest {\n \n   @Test\n   public void testSmartTroll() throws Exception {\n     // Create a normal troll first, but make sure we can spy on it later on.\n     final Hostile simpleTroll = spy(new Troll());\n \n     // Now we want to decorate the troll to make it smarter ...\n-    final Hostile smartTroll = new SmartTroll(simpleTroll);\n+    final Hostile smartTroll = new SmartHostile(simpleTroll);\n     assertEquals(30, smartTroll.getAttackPower());\n     verify(simpleTroll, times(1)).getAttackPower();\n ",
    "output": "Decorator pattern: SmartTroll should be SmartHostile"
  },
  {
    "input": "diff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/EventDispatcher.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/EventDispatcher.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/EventDispatcher.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/framework/EventDispatcher.java\n@@ -1,7 +1,6 @@\n package com.iluwatar.eda.framework;\n \n import com.iluwatar.eda.event.Event;\n-import com.iluwatar.eda.framework.Handler;\n \n import java.util.HashMap;\n import java.util.Map;",
    "output": "Event Driven Architecture\nFixed PMD errors"
  },
  {
    "input": "diff --git a/callback/src/main/java/com/iluwatar/callback/LambdasApp.java b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java\n--- a/callback/src/main/java/com/iluwatar/callback/LambdasApp.java\n+++ b/callback/src/main/java/com/iluwatar/callback/LambdasApp.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar.callback;\n+\n+/**\n+ *\n+ * This example generates the exact same output as {@link App} however the callback has been\n+ * defined as a Lambdas expression.\n+ *\n+ */\n+public class LambdasApp {\n+\n+  /**\n+   * Program entry point\n+   */\n+  public static void main(String[] args){\n+    Task task = new SimpleTask();\n+    Callback c = () -> System.out.println(\"I'm done now.\");\n+    task.executeWith(c);\n+  }\n+}\n\ndiff --git a/callback/src/test/java/com/iluwatar/callback/AppTest.java b/callback/src/test/java/com/iluwatar/callback/AppTest.java\n--- a/callback/src/test/java/com/iluwatar/callback/AppTest.java\n+++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java\n@@ -36,4 +36,22 @@ public void call() {\n     assertEquals(\"Callback called twice\", new Integer(2), callingCount);\n \n   }\n+\n+  @Test\n+  public void testWithLambdasExample() {\n+    Callback callback = () -> callingCount++;\n+\n+    Task task = new SimpleTask();\n+\n+    assertEquals(\"Initial calling count of 0\", new Integer(0), callingCount);\n+\n+    task.executeWith(callback);\n+\n+    assertEquals(\"Callback called once\", new Integer(1), callingCount);\n+\n+    task.executeWith(callback);\n+\n+    assertEquals(\"Callback called twice\", new Integer(2), callingCount);\n+\n+  }\n }",
    "output": "Create a Lambdas example for the callback pattern, using the same output of the traditional version. Have also added another unit test for issue"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java\n@@ -1,12 +1,14 @@\n package com.iluwatar.delegation.simple;\n \n+import com.iluwatar.delegation.simple.printers.CanonPrinter;\n+import com.iluwatar.delegation.simple.printers.EpsonPrinter;\n import com.iluwatar.delegation.simple.printers.HpPrinter;\n \n /**\n  * Interface that both the Controller and the Delegate will implement.\n  *\n- * @see com.iluwatar.delegation.simple.printers.CanonPrinter\n- * @see com.iluwatar.delegation.simple.printers.EpsonPrinter\n+ * @see CanonPrinter\n+ * @see EpsonPrinter\n  * @see HpPrinter\n  */\n public interface Printer {",
    "output": "Clean up javaDocs on Printer.java"
  },
  {
    "input": "diff --git a/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishSerializerTest.java b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishSerializerTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishSerializerTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishSerializerTest.java\n@@ -0,0 +1,68 @@\n+package com.iluwatar.tolerantreader;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+\n+/**\n+ * Date: 12/30/15 - 18:39 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class RainbowFishSerializerTest {\n+\n+  /**\n+   * Create a temporary folder, used to generate files in during this test\n+   */\n+  @Rule\n+  public final TemporaryFolder testFolder = new TemporaryFolder();\n+\n+  /**\n+   * Rainbow fish version 1 used during the tests\n+   */\n+  private static final RainbowFish V1 = new RainbowFish(\"version1\", 1, 2, 3);\n+\n+  /**\n+   * Rainbow fish version 2 used during the tests\n+   */\n+  private static final RainbowFishV2 V2 = new RainbowFishV2(\"version2\", 4, 5, 6, true, false, true);\n+\n+  /**\n+   * Verify if a fish, written as version 1 can be read back as version 1\n+   */\n+  @Test\n+  public void testWriteV1ReadV1() throws Exception {\n+    final File outputFile = this.testFolder.newFile();\n+    RainbowFishSerializer.writeV1(V1, outputFile.getPath());\n+\n+    final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());\n+    assertNotSame(V1, fish);\n+    assertEquals(V1.getName(), fish.getName());\n+    assertEquals(V1.getAge(), fish.getAge());\n+    assertEquals(V1.getLengthMeters(), fish.getLengthMeters());\n+    assertEquals(V1.getWeightTons(), fish.getWeightTons());\n+\n+  }\n+\n+  /**\n+   * Verify if a fish, written as version 2 can be read back as version 1\n+   */\n+  @Test\n+  public void testWriteV2ReadV1() throws Exception {\n+    final File outputFile = this.testFolder.newFile();\n+    RainbowFishSerializer.writeV2(V2, outputFile.getPath());\n+\n+    final RainbowFish fish = RainbowFishSerializer.readV1(outputFile.getPath());\n+    assertNotSame(V2, fish);\n+    assertEquals(V2.getName(), fish.getName());\n+    assertEquals(V2.getAge(), fish.getAge());\n+    assertEquals(V2.getLengthMeters(), fish.getLengthMeters());\n+    assertEquals(V2.getWeightTons(), fish.getWeightTons());\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishTest.java b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishTest.java\n@@ -0,0 +1,26 @@\n+package com.iluwatar.tolerantreader;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Date: 12/30/15 - 18:34 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class RainbowFishTest {\n+\n+  /**\n+   * Verify if the getters of a {@link RainbowFish} return the expected values\n+   */\n+  @Test\n+  public void testValues() {\n+    final RainbowFish fish = new RainbowFish(\"name\", 1, 2, 3);\n+    assertEquals(\"name\", fish.getName());\n+    assertEquals(1, fish.getAge());\n+    assertEquals(2, fish.getLengthMeters());\n+    assertEquals(3, fish.getWeightTons());\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishV2Test.java b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishV2Test.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishV2Test.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/tolerantreader/RainbowFishV2Test.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar.tolerantreader;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Date: 12/30/15 - 18:35 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class RainbowFishV2Test {\n+\n+  /**\n+   * Verify if the getters of a {@link RainbowFish} return the expected values\n+   */\n+  @Test\n+  public void testValues() {\n+    final RainbowFishV2 fish = new RainbowFishV2(\"name\", 1, 2, 3, false, true, false);\n+    assertEquals(\"name\", fish.getName());\n+    assertEquals(1, fish.getAge());\n+    assertEquals(2, fish.getLengthMeters());\n+    assertEquals(3, fish.getWeightTons());\n+    assertEquals(false, fish.getSleeping());\n+    assertEquals(true, fish.getHungry());\n+    assertEquals(false, fish.getAngry());\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for tolerant-reader pattern"
  },
  {
    "input": "diff --git a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n@@ -0,0 +1,48 @@\n+package com.iluwatar.strategy;\n+\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+/**\n+ * Date: 12/29/15 - 10:50 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class DragonSlayerTest {\n+\n+  /**\n+   * Verify if the dragon slayer uses the strategy during battle\n+   */\n+  @Test\n+  public void testGoToBattle() {\n+    final DragonSlayingStrategy strategy = mock(DragonSlayingStrategy.class);\n+    final DragonSlayer dragonSlayer = new DragonSlayer(strategy);\n+\n+    dragonSlayer.goToBattle();\n+    verify(strategy).execute();\n+    verifyNoMoreInteractions(strategy);\n+  }\n+\n+  /**\n+   * Verify if the dragon slayer uses the new strategy during battle after a change of strategy\n+   */\n+  @Test\n+  public void testChangeStrategy() throws Exception {\n+    final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);\n+    final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);\n+\n+    dragonSlayer.goToBattle();\n+    verify(initialStrategy).execute();\n+\n+    final DragonSlayingStrategy newStrategy = mock(DragonSlayingStrategy.class);\n+    dragonSlayer.changeStrategy(newStrategy);\n+\n+    dragonSlayer.goToBattle();\n+    verify(newStrategy).execute();\n+\n+    verifyNoMoreInteractions(initialStrategy, newStrategy);\n+  }\n+}\n\\ No newline at end of file\n\ndiff --git a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n@@ -0,0 +1,104 @@\n+package com.iluwatar.strategy;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.PrintStream;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+/**\n+ * Date: 12/29/15 - 10:58 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+@RunWith(Parameterized.class)\n+public class DragonSlayingStrategyTest {\n+\n+  /**\n+   * @return The test parameters for each cycle\n+   */\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[]{\n+            new MeleeStrategy(),\n+            \"With your Excalibur you severe the dragon's head!\"\n+        },\n+        new Object[]{\n+            new ProjectileStrategy(),\n+            \"You shoot the dragon with the magical crossbow and it falls dead on the ground!\"\n+        },\n+        new Object[]{\n+            new SpellStrategy(),\n+            \"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!\"\n+        }\n+    );\n+  }\n+\n+  /**\n+   * The tested strategy\n+   */\n+  private final DragonSlayingStrategy strategy;\n+\n+  /**\n+   * The expected action on the std-out\n+   */\n+  private final String expectedResult;\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions don't have any\n+   * influence on accessible objects, except for writing to std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Create a new test instance for the given strategy\n+   *\n+   * @param strategy       The tested strategy\n+   * @param expectedResult The expected result\n+   */\n+  public DragonSlayingStrategyTest(final DragonSlayingStrategy strategy, final String expectedResult) {\n+    this.strategy = strategy;\n+    this.expectedResult = expectedResult;\n+  }\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Test if executing the strategy gives the correct response\n+   */\n+  @Test\n+  public void testExecute() {\n+    this.strategy.execute();\n+    verify(this.stdOutMock).println(this.expectedResult);\n+    verifyNoMoreInteractions(this.stdOutMock);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for strategy pattern"
  },
  {
    "input": "diff --git a/step-builder/src/test/java/com/iluwatar/stepbuilder/CharacterStepBuilderTest.java b/step-builder/src/test/java/com/iluwatar/stepbuilder/CharacterStepBuilderTest.java\n--- a/step-builder/src/test/java/com/iluwatar/stepbuilder/CharacterStepBuilderTest.java\n+++ b/step-builder/src/test/java/com/iluwatar/stepbuilder/CharacterStepBuilderTest.java\n@@ -0,0 +1,155 @@\n+package com.iluwatar.stepbuilder;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Date: 12/29/15 - 9:21 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class CharacterStepBuilderTest {\n+\n+  /**\n+   * Build a new wizard {@link Character} and verify if it has the expected attributes\n+   */\n+  @Test\n+  public void testBuildWizard() {\n+    final Character character = CharacterStepBuilder.newBuilder()\n+        .name(\"Merlin\")\n+        .wizardClass(\"alchemist\")\n+        .withSpell(\"poison\")\n+        .withAbility(\"invisibility\")\n+        .withAbility(\"wisdom\")\n+        .noMoreAbilities()\n+        .build();\n+\n+    assertEquals(\"Merlin\", character.getName());\n+    assertEquals(\"alchemist\", character.getWizardClass());\n+    assertEquals(\"poison\", character.getSpell());\n+    assertNotNull(character.toString());\n+\n+    final List<String> abilities = character.getAbilities();\n+    assertNotNull(abilities);\n+    assertEquals(2, abilities.size());\n+    assertTrue(abilities.contains(\"invisibility\"));\n+    assertTrue(abilities.contains(\"wisdom\"));\n+\n+  }\n+\n+  /**\n+   * Build a new wizard {@link Character} without spell or abilities and verify if it has the\n+   * expected attributes\n+   */\n+  @Test\n+  public void testBuildPoorWizard() {\n+    final Character character = CharacterStepBuilder.newBuilder()\n+        .name(\"Merlin\")\n+        .wizardClass(\"alchemist\")\n+        .noSpell()\n+        .build();\n+\n+    assertEquals(\"Merlin\", character.getName());\n+    assertEquals(\"alchemist\", character.getWizardClass());\n+    assertNull(character.getSpell());\n+    assertNull(character.getAbilities());\n+    assertNotNull(character.toString());\n+\n+  }\n+\n+  /**\n+   * Build a new wizard {@link Character} and verify if it has the expected attributes\n+   */\n+  @Test\n+  public void testBuildWeakWizard() {\n+    final Character character = CharacterStepBuilder.newBuilder()\n+        .name(\"Merlin\")\n+        .wizardClass(\"alchemist\")\n+        .withSpell(\"poison\")\n+        .noAbilities()\n+        .build();\n+\n+    assertEquals(\"Merlin\", character.getName());\n+    assertEquals(\"alchemist\", character.getWizardClass());\n+    assertEquals(\"poison\", character.getSpell());\n+    assertNull(character.getAbilities());\n+    assertNotNull(character.toString());\n+\n+  }\n+\n+\n+  /**\n+   * Build a new warrior {@link Character} and verify if it has the expected attributes\n+   */\n+  @Test\n+  public void testBuildWarrior() {\n+    final Character character = CharacterStepBuilder.newBuilder()\n+        .name(\"Cuauhtemoc\")\n+        .fighterClass(\"aztec\")\n+        .withWeapon(\"spear\")\n+        .withAbility(\"speed\")\n+        .withAbility(\"strength\")\n+        .noMoreAbilities()\n+        .build();\n+\n+    assertEquals(\"Cuauhtemoc\", character.getName());\n+    assertEquals(\"aztec\", character.getFighterClass());\n+    assertEquals(\"spear\", character.getWeapon());\n+    assertNotNull(character.toString());\n+\n+    final List<String> abilities = character.getAbilities();\n+    assertNotNull(abilities);\n+    assertEquals(2, abilities.size());\n+    assertTrue(abilities.contains(\"speed\"));\n+    assertTrue(abilities.contains(\"strength\"));\n+\n+  }\n+\n+  /**\n+   * Build a new wizard {@link Character} without weapon and abilities and verify if it has the\n+   * expected attributes\n+   */\n+  @Test\n+  public void testBuildPoorWarrior() {\n+    final Character character = CharacterStepBuilder.newBuilder()\n+        .name(\"Poor warrior\")\n+        .fighterClass(\"none\")\n+        .noWeapon()\n+        .build();\n+\n+    assertEquals(\"Poor warrior\", character.getName());\n+    assertEquals(\"none\", character.getFighterClass());\n+    assertNull(character.getWeapon());\n+    assertNull(character.getAbilities());\n+    assertNotNull(character.toString());\n+\n+  }\n+\n+  /**\n+   * Build a new warrior {@link Character} without any abilities, but with a weapon and verify if it\n+   * has the expected attributes\n+   */\n+  @Test\n+  public void testBuildWeakWarrior() {\n+    final Character character = CharacterStepBuilder.newBuilder()\n+        .name(\"Weak warrior\")\n+        .fighterClass(\"none\")\n+        .withWeapon(\"Slingshot\")\n+        .noAbilities()\n+        .build();\n+\n+    assertEquals(\"Weak warrior\", character.getName());\n+    assertEquals(\"none\", character.getFighterClass());\n+    assertEquals(\"Slingshot\", character.getWeapon());\n+    assertNull(character.getAbilities());\n+    assertNotNull(character.toString());\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for step-builder pattern"
  },
  {
    "input": "diff --git a/state/src/test/java/com/iluwatar/state/AppTest.java b/state/src/test/java/com/iluwatar/state/AppTest.java\n--- a/state/src/test/java/com/iluwatar/state/AppTest.java\n+++ b/state/src/test/java/com/iluwatar/state/AppTest.java\n@@ -1,5 +1,6 @@\n package com.iluwatar.state;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -10,6 +11,7 @@\n public class AppTest {\n \n   @Test\n+  @Ignore\n   public void test() {\n     String[] args = {};\n     App.main(args);\n\ndiff --git a/state/src/test/java/com/iluwatar/state/MammothTest.java b/state/src/test/java/com/iluwatar/state/MammothTest.java\n--- a/state/src/test/java/com/iluwatar/state/MammothTest.java\n+++ b/state/src/test/java/com/iluwatar/state/MammothTest.java\n@@ -0,0 +1,90 @@\n+package com.iluwatar.state;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import java.io.PrintStream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Date: 12/29/15 - 8:27 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class MammothTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions don't have any\n+   * influence on accessible objects, except for writing to std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Switch to a complete mammoth 'mood'-cycle and verify if the observed mood matches the expected\n+   * value.\n+   */\n+  @Test\n+  public void testTimePasses() {\n+    final InOrder inOrder = Mockito.inOrder(this.stdOutMock);\n+    final Mammoth mammoth = new Mammoth();\n+\n+    mammoth.observe();\n+    inOrder.verify(this.stdOutMock).println(\"The mammoth is calm and peaceful.\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+    mammoth.timePasses();\n+    inOrder.verify(this.stdOutMock).println(\"The mammoth gets angry!\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+    mammoth.observe();\n+    inOrder.verify(this.stdOutMock).println(\"The mammoth is furious!\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+    mammoth.timePasses();\n+    inOrder.verify(this.stdOutMock).println(\"The mammoth calms down.\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+    mammoth.observe();\n+    inOrder.verify(this.stdOutMock).println(\"The mammoth is calm and peaceful.\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+  }\n+\n+  /**\n+   * Verify if {@link Mammoth#toString()} gives the expected value\n+   */\n+  @Test\n+  public void testToString() {\n+    final String toString = new Mammoth().toString();\n+    assertNotNull(toString);\n+    assertEquals(\"The mammoth\", toString);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for state pattern"
  },
  {
    "input": "diff --git a/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n--- a/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n@@ -32,7 +32,9 @@ public static Service getService(String serviceJndiName) {\n        */\n       InitContext ctx = new InitContext();\n       serviceObj = (Service) ctx.lookup(serviceJndiName);\n-      serviceCache.addService(serviceObj);\n+      if (serviceObj != null) { // Only cache a service if it actually exists\n+        serviceCache.addService(serviceObj);\n+      }\n       return serviceObj;\n     }\n   }\n\ndiff --git a/service-locator/src/test/java/com/iluwatar/servicelocator/ServiceLocatorTest.java b/service-locator/src/test/java/com/iluwatar/servicelocator/ServiceLocatorTest.java\n--- a/service-locator/src/test/java/com/iluwatar/servicelocator/ServiceLocatorTest.java\n+++ b/service-locator/src/test/java/com/iluwatar/servicelocator/ServiceLocatorTest.java\n@@ -0,0 +1,42 @@\n+package com.iluwatar.servicelocator;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Date: 12/29/15 - 19:07 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class ServiceLocatorTest {\n+\n+  /**\n+   * Verify if we just receive 'null' when requesting a non-existing service\n+   */\n+  @Test\n+  public void testGetNonExistentService() {\n+    assertNull(ServiceLocator.getService(\"fantastic/unicorn/service\"));\n+    assertNull(ServiceLocator.getService(\"another/fantastic/unicorn/service\"));\n+  }\n+\n+  /**\n+   * Verify if we get the same cached instance when requesting the same service twice\n+   */\n+  @Test\n+  public void testServiceCache() {\n+    final String[] serviceNames = new String[]{\n+            \"jndi/serviceA\", \"jndi/serviceB\"\n+    };\n+\n+    for (final String serviceName : serviceNames) {\n+      final Service service = ServiceLocator.getService(serviceName);\n+      assertNotNull(service);\n+      assertEquals(serviceName, service.getName());\n+      assertTrue(service.getId() > 0); // The id is generated randomly, but the minimum value is '1'\n+      assertSame(service, ServiceLocator.getService(serviceName));\n+    }\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for service-locator pattern Fix NPE when requested service is unknown"
  },
  {
    "input": "diff --git a/servant/src/test/java/com/iluwatar/servant/KingTest.java b/servant/src/test/java/com/iluwatar/servant/KingTest.java\n--- a/servant/src/test/java/com/iluwatar/servant/KingTest.java\n+++ b/servant/src/test/java/com/iluwatar/servant/KingTest.java\n@@ -0,0 +1,82 @@\n+package com.iluwatar.servant;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Date: 12/28/15 - 9:40 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class KingTest {\n+\n+  @Test\n+  public void testHungrySoberUncomplimentedKing() {\n+    final King king = new King();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+  @Test\n+  public void testFedSoberUncomplimentedKing() {\n+    final King king = new King();\n+    king.getFed();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+  @Test\n+  public void testHungryDrunkUncomplimentedKing() {\n+    final King king = new King();\n+    king.getDrink();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+  @Test\n+  public void testHungrySoberComplimentedKing() {\n+    final King king = new King();\n+    king.receiveCompliments();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+  @Test\n+  public void testFedDrunkUncomplimentedKing() {\n+    final King king = new King();\n+    king.getFed();\n+    king.getDrink();\n+    king.changeMood();\n+    assertTrue(king.getMood());\n+  }\n+\n+  @Test\n+  public void testFedSoberComplimentedKing() {\n+    final King king = new King();\n+    king.getFed();\n+    king.receiveCompliments();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+  @Test\n+  public void testFedDrunkComplimentedKing() {\n+    final King king = new King();\n+    king.getFed();\n+    king.getDrink();\n+    king.receiveCompliments();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+  @Test\n+  public void testHungryDrunkComplimentedKing() {\n+    final King king = new King();\n+    king.getDrink();\n+    king.receiveCompliments();\n+    king.changeMood();\n+    assertFalse(king.getMood());\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/servant/src/test/java/com/iluwatar/servant/QueenTest.java b/servant/src/test/java/com/iluwatar/servant/QueenTest.java\n--- a/servant/src/test/java/com/iluwatar/servant/QueenTest.java\n+++ b/servant/src/test/java/com/iluwatar/servant/QueenTest.java\n@@ -0,0 +1,46 @@\n+package com.iluwatar.servant;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Date: 12/28/15 - 9:52 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class QueenTest {\n+\n+  @Test\n+  public void testNotFlirtyUncomplemented() throws Exception {\n+    final Queen queen = new Queen();\n+    queen.setFlirtiness(false);\n+    queen.changeMood();\n+    assertFalse(queen.getMood());\n+  }\n+  \n+  @Test\n+  public void testNotFlirtyComplemented() throws Exception {\n+    final Queen queen = new Queen();\n+    queen.setFlirtiness(false);\n+    queen.receiveCompliments();\n+    queen.changeMood();\n+    assertFalse(queen.getMood());\n+  }\n+  \n+  @Test\n+  public void testFlirtyUncomplemented() throws Exception {\n+    final Queen queen = new Queen();\n+    queen.changeMood();\n+    assertFalse(queen.getMood());\n+  }\n+  \n+  @Test\n+  public void testFlirtyComplemented() throws Exception {\n+    final Queen queen = new Queen();\n+    queen.receiveCompliments();\n+    queen.changeMood();\n+    assertTrue(queen.getMood());\n+  }\n+  \n+}\n\\ No newline at end of file\n\ndiff --git a/servant/src/test/java/com/iluwatar/servant/ServantTest.java b/servant/src/test/java/com/iluwatar/servant/ServantTest.java\n--- a/servant/src/test/java/com/iluwatar/servant/ServantTest.java\n+++ b/servant/src/test/java/com/iluwatar/servant/ServantTest.java\n@@ -0,0 +1,70 @@\n+package com.iluwatar.servant;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Date: 12/28/15 - 10:02 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class ServantTest {\n+\n+  @Test\n+  public void testFeed() throws Exception {\n+    final Royalty royalty = mock(Royalty.class);\n+    final Servant servant = new Servant(\"test\");\n+    servant.feed(royalty);\n+    verify(royalty).getFed();\n+    verifyNoMoreInteractions(royalty);\n+  }\n+\n+  @Test\n+  public void testGiveWine() throws Exception {\n+    final Royalty royalty = mock(Royalty.class);\n+    final Servant servant = new Servant(\"test\");\n+    servant.giveWine(royalty);\n+    verify(royalty).getDrink();\n+    verifyNoMoreInteractions(royalty);\n+  }\n+\n+  @Test\n+  public void testGiveCompliments() throws Exception {\n+    final Royalty royalty = mock(Royalty.class);\n+    final Servant servant = new Servant(\"test\");\n+    servant.giveCompliments(royalty);\n+    verify(royalty).receiveCompliments();\n+    verifyNoMoreInteractions(royalty);\n+  }\n+\n+  @Test\n+  public void testCheckIfYouWillBeHanged() throws Exception {\n+    final Royalty goodMoodRoyalty = mock(Royalty.class);\n+    when(goodMoodRoyalty.getMood()).thenReturn(true);\n+\n+    final Royalty badMoodRoyalty = mock(Royalty.class);\n+    when(badMoodRoyalty.getMood()).thenReturn(true);\n+\n+    final ArrayList<Royalty> goodCompany = new ArrayList<>();\n+    goodCompany.add(goodMoodRoyalty);\n+    goodCompany.add(goodMoodRoyalty);\n+    goodCompany.add(goodMoodRoyalty);\n+\n+    final ArrayList<Royalty> badCompany = new ArrayList<>();\n+    goodCompany.add(goodMoodRoyalty);\n+    goodCompany.add(goodMoodRoyalty);\n+    goodCompany.add(badMoodRoyalty);\n+\n+    assertTrue(new Servant(\"test\").checkIfYouWillBeHanged(goodCompany));\n+    assertTrue(new Servant(\"test\").checkIfYouWillBeHanged(badCompany));\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for servant pattern"
  },
  {
    "input": "diff --git a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/ClosableTest.java b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/ClosableTest.java\n--- a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/ClosableTest.java\n+++ b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/ClosableTest.java\n@@ -0,0 +1,27 @@\n+package com.iluwatar.resource.acquisition.is.initialization;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import static org.mockito.Mockito.inOrder;\n+\n+/**\n+ * Date: 12/28/15 - 9:31 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class ClosableTest extends StdOutTest {\n+\n+  @Test\n+  public void testOpenClose() throws Exception {\n+    final InOrder inOrder = inOrder(getStdOutMock());\n+    try (final SlidingDoor door = new SlidingDoor(); final TreasureChest chest = new TreasureChest()) {\n+      inOrder.verify(getStdOutMock()).println(\"Sliding door opens.\");\n+      inOrder.verify(getStdOutMock()).println(\"Treasure chest opens.\");\n+    }\n+    inOrder.verify(getStdOutMock()).println(\"Treasure chest closes.\");\n+    inOrder.verify(getStdOutMock()).println(\"Sliding door closes.\");\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/StdOutTest.java b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/StdOutTest.java\n--- a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/StdOutTest.java\n+++ b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/resource/acquisition/is/initialization/StdOutTest.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar.resource.acquisition.is.initialization;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.PrintStream;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Date: 12/10/15 - 8:37 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class StdOutTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions don't have any\n+   * influence on accessible objects, except for writing to std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Get the mocked stdOut {@link PrintStream}\n+   *\n+   * @return The stdOut print stream mock, renewed before each test\n+   */\n+  final PrintStream getStdOutMock() {\n+    return this.stdOutMock;\n+  }\n+\n+}",
    "output": "Add tests for resource-acquisition-is-initialization pattern"
  },
  {
    "input": "diff --git a/proxy/src/test/java/com/iluwatar/proxy/StdOutTest.java b/proxy/src/test/java/com/iluwatar/proxy/StdOutTest.java\n--- a/proxy/src/test/java/com/iluwatar/proxy/StdOutTest.java\n+++ b/proxy/src/test/java/com/iluwatar/proxy/StdOutTest.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar.proxy;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.PrintStream;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Date: 12/10/15 - 8:37 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class StdOutTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions don't have any\n+   * influence on accessible objects, except for writing to std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Get the mocked stdOut {@link PrintStream}\n+   *\n+   * @return The stdOut print stream mock, renewed before each test\n+   */\n+  final PrintStream getStdOutMock() {\n+    return this.stdOutMock;\n+  }\n+\n+}\n\ndiff --git a/proxy/src/test/java/com/iluwatar/proxy/WizardTest.java b/proxy/src/test/java/com/iluwatar/proxy/WizardTest.java\n--- a/proxy/src/test/java/com/iluwatar/proxy/WizardTest.java\n+++ b/proxy/src/test/java/com/iluwatar/proxy/WizardTest.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar.proxy;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Date: 12/28/15 - 9:02 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class WizardTest {\n+\n+  @Test\n+  public void testToString() throws Exception {\n+    final String[] wizardNames = {\"Gandalf\", \"Dumbledore\", \"Oz\", \"Merlin\"};\n+    for (final String name : wizardNames) {\n+      assertEquals(name, new Wizard(name).toString());\n+    }\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/proxy/src/test/java/com/iluwatar/proxy/WizardTowerProxyTest.java b/proxy/src/test/java/com/iluwatar/proxy/WizardTowerProxyTest.java\n--- a/proxy/src/test/java/com/iluwatar/proxy/WizardTowerProxyTest.java\n+++ b/proxy/src/test/java/com/iluwatar/proxy/WizardTowerProxyTest.java\n@@ -0,0 +1,38 @@\n+package com.iluwatar.proxy;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import static org.mockito.Mockito.inOrder;\n+\n+/**\n+ * Date: 12/28/15 - 9:18 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class WizardTowerProxyTest extends StdOutTest {\n+\n+  @Test\n+  public void testEnter() throws Exception {\n+    final Wizard[] wizards = new Wizard[]{\n+            new Wizard(\"Gandalf\"),\n+            new Wizard(\"Dumbledore\"),\n+            new Wizard(\"Oz\"),\n+            new Wizard(\"Merlin\")\n+    };\n+\n+    final WizardTowerProxy tower = new WizardTowerProxy();\n+    for (final Wizard wizard : wizards) {\n+      tower.enter(wizard);\n+    }\n+\n+    final InOrder inOrder = inOrder(getStdOutMock());\n+    inOrder.verify(getStdOutMock()).println(\"Gandalf enters the tower.\");\n+    inOrder.verify(getStdOutMock()).println(\"Dumbledore enters the tower.\");\n+    inOrder.verify(getStdOutMock()).println(\"Oz enters the tower.\");\n+    inOrder.verify(getStdOutMock()).println(\"Merlin is not allowed to enter!\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/proxy/src/test/java/com/iluwatar/proxy/WizardTowerTest.java b/proxy/src/test/java/com/iluwatar/proxy/WizardTowerTest.java\n--- a/proxy/src/test/java/com/iluwatar/proxy/WizardTowerTest.java\n+++ b/proxy/src/test/java/com/iluwatar/proxy/WizardTowerTest.java\n@@ -0,0 +1,38 @@\n+package com.iluwatar.proxy;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import static org.mockito.Mockito.inOrder;\n+\n+/**\n+ * Date: 12/28/15 - 9:18 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class WizardTowerTest extends StdOutTest {\n+\n+  @Test\n+  public void testEnter() throws Exception {\n+    final Wizard[] wizards = new Wizard[]{\n+            new Wizard(\"Gandalf\"),\n+            new Wizard(\"Dumbledore\"),\n+            new Wizard(\"Oz\"),\n+            new Wizard(\"Merlin\")\n+    };\n+\n+    final WizardTower tower = new WizardTower();\n+    for (final Wizard wizard : wizards) {\n+      tower.enter(wizard);\n+    }\n+\n+    final InOrder inOrder = inOrder(getStdOutMock());\n+    inOrder.verify(getStdOutMock()).println(\"Gandalf enters the tower.\");\n+    inOrder.verify(getStdOutMock()).println(\"Dumbledore enters the tower.\");\n+    inOrder.verify(getStdOutMock()).println(\"Oz enters the tower.\");\n+    inOrder.verify(getStdOutMock()).println(\"Merlin enters the tower.\");\n+    inOrder.verifyNoMoreInteractions();\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for proxy pattern"
  },
  {
    "input": "diff --git a/prototype/src/test/java/com/iluwatar/prototype/HeroFactoryImplTest.java b/prototype/src/test/java/com/iluwatar/prototype/HeroFactoryImplTest.java\n--- a/prototype/src/test/java/com/iluwatar/prototype/HeroFactoryImplTest.java\n+++ b/prototype/src/test/java/com/iluwatar/prototype/HeroFactoryImplTest.java\n@@ -0,0 +1,39 @@\n+package com.iluwatar.prototype;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Date: 12/28/15 - 8:34 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class HeroFactoryImplTest {\n+\n+  @Test\n+  public void testFactory() throws Exception {\n+    final Mage mage = mock(Mage.class);\n+    final Warlord warlord = mock(Warlord.class);\n+    final Beast beast = mock(Beast.class);\n+\n+    when(mage.clone()).thenThrow(CloneNotSupportedException.class);\n+    when(warlord.clone()).thenThrow(CloneNotSupportedException.class);\n+    when(beast.clone()).thenThrow(CloneNotSupportedException.class);\n+\n+    final HeroFactoryImpl factory = new HeroFactoryImpl(mage, warlord, beast);\n+    assertNull(factory.createMage());\n+    assertNull(factory.createWarlord());\n+    assertNull(factory.createBeast());\n+\n+    verify(mage).clone();\n+    verify(warlord).clone();\n+    verify(beast).clone();\n+    verifyNoMoreInteractions(mage, warlord, beast);\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n--- a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n+++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n@@ -0,0 +1,66 @@\n+package com.iluwatar.prototype;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertSame;\n+\n+/**\n+ * Date: 12/28/15 - 8:45 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+@RunWith(Parameterized.class)\n+public class PrototypeTest<P extends Prototype> {\n+\n+  @Parameterized.Parameters\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+            new Object[]{new OrcBeast(), \"Orcish wolf\"},\n+            new Object[]{new OrcMage(), \"Orcish mage\"},\n+            new Object[]{new OrcWarlord(), \"Orcish warlord\"},\n+            new Object[]{new ElfBeast(), \"Elven eagle\"},\n+            new Object[]{new ElfMage(), \"Elven mage\"},\n+            new Object[]{new ElfWarlord(), \"Elven warlord\"}\n+    );\n+  }\n+\n+  /**\n+   * The tested prototype instance\n+   */\n+  private final Prototype testedPrototype;\n+\n+  /**\n+   * The expected {@link Prototype#toString()} value\n+   */\n+  private final String expectedToString;\n+\n+  /**\n+   * Create a new test instance, using the given test object and expected value\n+   *\n+   * @param testedPrototype  The tested prototype instance\n+   * @param expectedToString The expected {@link Prototype#toString()} value\n+   */\n+  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n+    this.expectedToString = expectedToString;\n+    this.testedPrototype = testedPrototype;\n+  }\n+\n+  @Test\n+  public void testPrototype() throws Exception {\n+    assertEquals(this.expectedToString, this.testedPrototype.toString());\n+\n+    final Object clone = this.testedPrototype.clone();\n+    assertNotNull(clone);\n+    assertNotSame(clone, this.testedPrototype);\n+    assertSame(this.testedPrototype.getClass(), clone.getClass());\n+  }\n+\n+}",
    "output": "Add tests for prototype pattern"
  },
  {
    "input": "diff --git a/property/src/test/java/com/iluwatar/property/CharacterTest.java b/property/src/test/java/com/iluwatar/property/CharacterTest.java\n--- a/property/src/test/java/com/iluwatar/property/CharacterTest.java\n+++ b/property/src/test/java/com/iluwatar/property/CharacterTest.java\n@@ -0,0 +1,103 @@\n+package com.iluwatar.property;\n+\n+import org.junit.Test;\n+\n+import static com.iluwatar.property.Character.Type;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Date: 12/28/15 - 7:46 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class CharacterTest {\n+\n+  @Test\n+  public void testPrototypeStats() throws Exception {\n+    final Character prototype = new Character();\n+\n+    for (final Stats stat : Stats.values()) {\n+      assertFalse(prototype.has(stat));\n+      assertNull(prototype.get(stat));\n+\n+      final Integer expectedValue = stat.ordinal();\n+      prototype.set(stat, expectedValue);\n+      assertTrue(prototype.has(stat));\n+      assertEquals(expectedValue, prototype.get(stat));\n+\n+      prototype.remove(stat);\n+      assertFalse(prototype.has(stat));\n+      assertNull(prototype.get(stat));\n+    }\n+\n+  }\n+\n+  @Test\n+  public void testCharacterStats() throws Exception {\n+    final Character prototype = new Character();\n+    for (final Stats stat : Stats.values()) {\n+      prototype.set(stat, stat.ordinal());\n+    }\n+\n+    final Character mage = new Character(Type.MAGE, prototype);\n+    for (final Stats stat : Stats.values()) {\n+      final Integer expectedValue = stat.ordinal();\n+      assertTrue(mage.has(stat));\n+      assertEquals(expectedValue, mage.get(stat));\n+    }\n+  }\n+\n+  @Test\n+  public void testToString() throws Exception {\n+    final Character prototype = new Character();\n+    prototype.set(Stats.ARMOR, 1);\n+    prototype.set(Stats.AGILITY, 2);\n+    prototype.set(Stats.INTELLECT, 3);\n+    assertEquals(\"Stats:\\n - AGILITY:2\\n - ARMOR:1\\n - INTELLECT:3\\n\", prototype.toString());\n+\n+    final Character stupid = new Character(Type.ROGUE, prototype);\n+    stupid.remove(Stats.INTELLECT);\n+    assertEquals(\"Character type: ROGUE\\nStats:\\n - AGILITY:2\\n - ARMOR:1\\n\", stupid.toString());\n+\n+    final Character weak = new Character(\"weak\", prototype);\n+    weak.remove(Stats.ARMOR);\n+    assertEquals(\"Player: weak\\nStats:\\n - AGILITY:2\\n - INTELLECT:3\\n\", weak.toString());\n+\n+  }\n+\n+  @Test\n+  public void testName() throws Exception {\n+    final Character prototype = new Character();\n+    prototype.set(Stats.ARMOR, 1);\n+    prototype.set(Stats.INTELLECT, 2);\n+    assertNull(prototype.name());\n+\n+    final Character stupid = new Character(Type.ROGUE, prototype);\n+    stupid.remove(Stats.INTELLECT);\n+    assertNull(stupid.name());\n+\n+    final Character weak = new Character(\"weak\", prototype);\n+    weak.remove(Stats.ARMOR);\n+    assertEquals(\"weak\", weak.name());\n+  }\n+\n+  @Test\n+  public void testType() throws Exception {\n+    final Character prototype = new Character();\n+    prototype.set(Stats.ARMOR, 1);\n+    prototype.set(Stats.INTELLECT, 2);\n+    assertNull(prototype.type());\n+\n+    final Character stupid = new Character(Type.ROGUE, prototype);\n+    stupid.remove(Stats.INTELLECT);\n+    assertEquals(Type.ROGUE, stupid.type());\n+\n+    final Character weak = new Character(\"weak\", prototype);\n+    weak.remove(Stats.ARMOR);\n+    assertNull(weak.type());\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for property pattern"
  },
  {
    "input": "diff --git a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ConsumerTest.java b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ConsumerTest.java\n--- a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ConsumerTest.java\n+++ b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ConsumerTest.java\n@@ -0,0 +1,39 @@\n+package com.iluwatar.producer.consumer;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.spy;\n+\n+/**\n+ * Date: 12/27/15 - 11:01 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class ConsumerTest extends StdOutTest {\n+\n+  private static final int ITEM_COUNT = 5;\n+\n+  @Test\n+  public void testConsume() throws Exception {\n+    final ItemQueue queue = spy(new ItemQueue());\n+    for (int id = 0; id < ITEM_COUNT; id++) {\n+      queue.put(new Item(\"producer\", id));\n+    }\n+\n+    reset(queue); // Don't count the preparation above as interactions with the queue\n+    final Consumer consumer = new Consumer(\"consumer\", queue);\n+\n+    final InOrder inOrder = inOrder(getStdOutMock());\n+    for (int id = 0; id < ITEM_COUNT; id++) {\n+      consumer.consume();\n+      inOrder.verify(getStdOutMock())\n+              .println(\"Consumer [consumer] consume item [\" + id + \"] produced by [producer]\");\n+    }\n+\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+}\n\ndiff --git a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ProducerTest.java b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ProducerTest.java\n--- a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ProducerTest.java\n+++ b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/ProducerTest.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar.producer.consumer;\n+\n+import org.junit.Test;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+/**\n+ * Date: 12/28/15 - 12:12 AM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class ProducerTest {\n+\n+  @Test(timeout = 6000)\n+  public void testProduce() throws Exception {\n+    final ItemQueue queue = mock(ItemQueue.class);\n+    final Producer producer = new Producer(\"producer\", queue);\n+\n+    producer.produce();\n+    verify(queue).put(any(Item.class));\n+\n+    verifyNoMoreInteractions(queue);\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/StdOutTest.java b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/StdOutTest.java\n--- a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/StdOutTest.java\n+++ b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/StdOutTest.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar.producer.consumer;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.PrintStream;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Date: 12/10/15 - 8:37 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class StdOutTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions don't have any\n+   * influence on accessible objects, except for writing to std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Get the mocked stdOut {@link PrintStream}\n+   *\n+   * @return The stdOut print stream mock, renewed before each test\n+   */\n+  final PrintStream getStdOutMock() {\n+    return this.stdOutMock;\n+  }\n+\n+}",
    "output": "Add tests for producer-consumer pattern"
  },
  {
    "input": "diff --git a/private-class-data/src/test/java/com/iluwatar/privateclassdata/ImmutableStewTest.java b/private-class-data/src/test/java/com/iluwatar/privateclassdata/ImmutableStewTest.java\n--- a/private-class-data/src/test/java/com/iluwatar/privateclassdata/ImmutableStewTest.java\n+++ b/private-class-data/src/test/java/com/iluwatar/privateclassdata/ImmutableStewTest.java\n@@ -0,0 +1,52 @@\n+package com.iluwatar.privateclassdata;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Date: 12/27/15 - 10:46 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class ImmutableStewTest extends StdOutTest {\n+\n+  /**\n+   * Verify if mixing the stew doesn't change the internal state\n+   */\n+  @Test\n+  public void testMix() {\n+    final Stew stew = new Stew(1, 2, 3, 4);\n+    final String message = \"Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers\";\n+\n+    final InOrder inOrder = inOrder(getStdOutMock());\n+    for (int i = 0; i < 20; i++) {\n+      stew.mix();\n+      inOrder.verify(getStdOutMock()).println(message);\n+    }\n+\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+  /**\n+   * Verify if tasting the stew actually removes one of each ingredient\n+   */\n+  @Test\n+  public void testDrink() {\n+    final Stew stew = new Stew(1, 2, 3, 4);\n+    stew.mix();\n+\n+    verify(getStdOutMock())\n+            .println(\"Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers\");\n+\n+    stew.taste();\n+    verify(getStdOutMock()).println(\"Tasting the stew\");\n+\n+    stew.mix();\n+    verify(getStdOutMock())\n+            .println(\"Mixing the stew we find: 0 potatoes, 1 carrots, 2 meat and 3 peppers\");\n+\n+  }\n+}\n\\ No newline at end of file\n\ndiff --git a/private-class-data/src/test/java/com/iluwatar/privateclassdata/StdOutTest.java b/private-class-data/src/test/java/com/iluwatar/privateclassdata/StdOutTest.java\n--- a/private-class-data/src/test/java/com/iluwatar/privateclassdata/StdOutTest.java\n+++ b/private-class-data/src/test/java/com/iluwatar/privateclassdata/StdOutTest.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar.privateclassdata;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.PrintStream;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Date: 12/10/15 - 8:37 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class StdOutTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions don't have any\n+   * influence on accessible objects, except for writing to std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Get the mocked stdOut {@link PrintStream}\n+   *\n+   * @return The stdOut print stream mock, renewed before each test\n+   */\n+  final PrintStream getStdOutMock() {\n+    return this.stdOutMock;\n+  }\n+\n+}\n\ndiff --git a/private-class-data/src/test/java/com/iluwatar/privateclassdata/StewTest.java b/private-class-data/src/test/java/com/iluwatar/privateclassdata/StewTest.java\n--- a/private-class-data/src/test/java/com/iluwatar/privateclassdata/StewTest.java\n+++ b/private-class-data/src/test/java/com/iluwatar/privateclassdata/StewTest.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar.privateclassdata;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import static org.mockito.Mockito.inOrder;\n+\n+/**\n+ * Date: 12/27/15 - 10:46 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class StewTest extends StdOutTest {\n+\n+  /**\n+   * Verify if mixing the stew doesn't change the internal state\n+   */\n+  @Test\n+  public void testMix() {\n+    final ImmutableStew stew = new ImmutableStew(1, 2, 3, 4);\n+    final String expectedMessage = \"Mixing the immutable stew we find: 1 potatoes, \" +\n+            \"2 carrots, 3 meat and 4 peppers\";\n+\n+    final InOrder inOrder = inOrder(getStdOutMock());\n+    for (int i = 0; i < 20; i++) {\n+      stew.mix();\n+      inOrder.verify(getStdOutMock()).println(expectedMessage);\n+    }\n+\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for private-class-data pattern"
  },
  {
    "input": "diff --git a/object-pool/src/test/java/com/iluwatar/object/pool/OliphauntPoolTest.java b/object-pool/src/test/java/com/iluwatar/object/pool/OliphauntPoolTest.java\n--- a/object-pool/src/test/java/com/iluwatar/object/pool/OliphauntPoolTest.java\n+++ b/object-pool/src/test/java/com/iluwatar/object/pool/OliphauntPoolTest.java\n@@ -0,0 +1,99 @@\n+package com.iluwatar.object.pool;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Date: 12/27/15 - 1:05 AM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class OliphauntPoolTest {\n+\n+  /**\n+   * Use the same object 100 times subsequently. This should not take much time since the heavy\n+   * object instantiation is done only once. Verify if we get the same object each time.\n+   */\n+  @Test(timeout = 5000)\n+  public void testSubsequentCheckinCheckout() {\n+    final OliphauntPool pool = new OliphauntPool();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=0\");\n+\n+    final Oliphaunt expectedOliphaunt = pool.checkOut();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=1\");\n+\n+    pool.checkIn(expectedOliphaunt);\n+    assertEquals(pool.toString(), \"Pool available=1 inUse=0\");\n+\n+    for (int i = 0; i < 100; i++) {\n+      final Oliphaunt oliphaunt = pool.checkOut();\n+      assertEquals(pool.toString(), \"Pool available=0 inUse=1\");\n+      assertSame(expectedOliphaunt, oliphaunt);\n+      assertEquals(expectedOliphaunt.getId(), oliphaunt.getId());\n+      assertEquals(expectedOliphaunt.toString(), oliphaunt.toString());\n+\n+      pool.checkIn(oliphaunt);\n+      assertEquals(pool.toString(), \"Pool available=1 inUse=0\");\n+    }\n+\n+  }\n+\n+  /**\n+   * Use the same object 100 times subsequently. This should not take much time since the heavy\n+   * object instantiation is done only once. Verify if we get the same object each time.\n+   */\n+  @Test(timeout = 5000)\n+  public void testConcurrentCheckinCheckout() {\n+    final OliphauntPool pool = new OliphauntPool();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=0\");\n+\n+    final Oliphaunt firstOliphaunt = pool.checkOut();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=1\");\n+\n+    final Oliphaunt secondOliphaunt = pool.checkOut();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=2\");\n+\n+    assertNotSame(firstOliphaunt, secondOliphaunt);\n+    assertEquals(firstOliphaunt.getId() + 1, secondOliphaunt.getId());\n+\n+    // After checking in the second, we should get the same when checking out a new oliphaunt ...\n+    pool.checkIn(secondOliphaunt);\n+    assertEquals(pool.toString(), \"Pool available=1 inUse=1\");\n+\n+    final Oliphaunt oliphaunt3 = pool.checkOut();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=2\");\n+    assertSame(secondOliphaunt, oliphaunt3);\n+\n+    // ... and the same applies for the first one\n+    pool.checkIn(firstOliphaunt);\n+    assertEquals(pool.toString(), \"Pool available=1 inUse=1\");\n+\n+    final Oliphaunt oliphaunt4 = pool.checkOut();\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=2\");\n+    assertSame(firstOliphaunt, oliphaunt4);\n+\n+    // When both oliphaunt return to the pool, we should still get the same instances\n+    pool.checkIn(firstOliphaunt);\n+    assertEquals(pool.toString(), \"Pool available=1 inUse=1\");\n+\n+    pool.checkIn(secondOliphaunt);\n+    assertEquals(pool.toString(), \"Pool available=2 inUse=0\");\n+\n+    // The order of the returned instances is not determined, so just put them in a list\n+    // and verify if both expected instances are in there.\n+    final List<Oliphaunt> oliphaunts = Arrays.asList(pool.checkOut(), pool.checkOut());\n+    assertEquals(pool.toString(), \"Pool available=0 inUse=2\");\n+    assertTrue(oliphaunts.contains(firstOliphaunt));\n+    assertTrue(oliphaunts.contains(secondOliphaunt));\n+\n+  }\n+\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for object-pool pattern"
  },
  {
    "input": "diff --git a/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java b/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java\n--- a/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java\n+++ b/null-object/src/test/java/com/iluwatar/nullobject/NullNodeTest.java\n@@ -0,0 +1,43 @@\n+package com.iluwatar.nullobject;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+\n+/**\n+ * Date: 12/26/15 - 11:47 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class NullNodeTest extends StdOutTest {\n+\n+  /**\n+   * Verify if {@link NullNode#getInstance()} actually returns the same object instance\n+   */\n+  @Test\n+  public void testGetInstance() {\n+    final NullNode instance = NullNode.getInstance();\n+    assertNotNull(instance);\n+    assertSame(instance, NullNode.getInstance());\n+  }\n+\n+  @Test\n+  public void testFields() {\n+    final NullNode node = NullNode.getInstance();\n+    assertEquals(0, node.getTreeSize());\n+    assertNull(node.getName());\n+    assertNull(node.getLeft());\n+    assertNull(node.getRight());\n+  }\n+\n+  @Test\n+  public void testWalk() throws Exception {\n+    NullNode.getInstance().walk();\n+    Mockito.verifyZeroInteractions(getStdOutMock());\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/null-object/src/test/java/com/iluwatar/nullobject/StdOutTest.java b/null-object/src/test/java/com/iluwatar/nullobject/StdOutTest.java\n--- a/null-object/src/test/java/com/iluwatar/nullobject/StdOutTest.java\n+++ b/null-object/src/test/java/com/iluwatar/nullobject/StdOutTest.java\n@@ -0,0 +1,54 @@\n+package com.iluwatar.nullobject;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import java.io.PrintStream;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Date: 12/10/15 - 8:37 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class StdOutTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since walking through the tree has no\n+   * influence on any other accessible object, except for writing to std-out using {@link\n+   * System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Get the mocked stdOut {@link PrintStream}\n+   *\n+   * @return The stdOut print stream mock, renewed before each test\n+   */\n+  final PrintStream getStdOutMock() {\n+    return this.stdOutMock;\n+  }\n+\n+}\n\ndiff --git a/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java b/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java\n--- a/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java\n+++ b/null-object/src/test/java/com/iluwatar/nullobject/TreeTest.java\n@@ -0,0 +1,101 @@\n+package com.iluwatar.nullobject;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+/**\n+ * Date: 12/26/15 - 11:44 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class TreeTest extends StdOutTest {\n+\n+  /**\n+   * During the tests, the same tree structure will be used, shown below. End points will be\n+   * terminated with the {@link NullNode} instance.\n+   *\n+   * <pre>\n+   * root\n+   * ├── level1_a\n+   * │   ├── level2_a\n+   * │   │   ├── level3_a\n+   * │   │   └── level3_b\n+   * │   └── level2_b\n+   * └── level1_b\n+   * </pre>\n+   */\n+  private static final Node TREE_ROOT;\n+\n+  static {\n+    final NodeImpl level1_b = new NodeImpl(\"level1_b\", NullNode.getInstance(), NullNode.getInstance());\n+    final NodeImpl level2_b = new NodeImpl(\"level2_b\", NullNode.getInstance(), NullNode.getInstance());\n+    final NodeImpl level3_a = new NodeImpl(\"level3_a\", NullNode.getInstance(), NullNode.getInstance());\n+    final NodeImpl level3_b = new NodeImpl(\"level3_b\", NullNode.getInstance(), NullNode.getInstance());\n+    final NodeImpl level2_a = new NodeImpl(\"level2_a\", level3_a, level3_b);\n+    final NodeImpl level1_a = new NodeImpl(\"level1_a\", level2_a, level2_b);\n+    TREE_ROOT = new NodeImpl(\"root\", level1_a, level1_b);\n+  }\n+\n+  /**\n+   * Verify the number of items in the tree. The root has 6 children so we expect a {@link\n+   * Node#getTreeSize()} of 7 {@link Node}s in total.\n+   */\n+  @Test\n+  public void testTreeSize() {\n+    assertEquals(7, TREE_ROOT.getTreeSize());\n+  }\n+\n+  /**\n+   * Walk through the tree and verify if every item is handled\n+   */\n+  @Test\n+  public void testWalk() {\n+    TREE_ROOT.walk();\n+\n+    final InOrder inOrder = Mockito.inOrder(getStdOutMock());\n+    inOrder.verify(getStdOutMock()).println(\"root\");\n+    inOrder.verify(getStdOutMock()).println(\"level1_a\");\n+    inOrder.verify(getStdOutMock()).println(\"level2_a\");\n+    inOrder.verify(getStdOutMock()).println(\"level3_a\");\n+    inOrder.verify(getStdOutMock()).println(\"level3_b\");\n+    inOrder.verify(getStdOutMock()).println(\"level2_b\");\n+    inOrder.verify(getStdOutMock()).println(\"level1_b\");\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+  @Test\n+  public void testGetLeft() throws Exception {\n+    final Node level1 = TREE_ROOT.getLeft();\n+    assertNotNull(level1);\n+    assertEquals(\"level1_a\", level1.getName());\n+    assertEquals(5, level1.getTreeSize());\n+\n+    final Node level2 = level1.getLeft();\n+    assertNotNull(level2);\n+    assertEquals(\"level2_a\", level2.getName());\n+    assertEquals(3, level2.getTreeSize());\n+\n+    final Node level3 = level2.getLeft();\n+    assertNotNull(level3);\n+    assertEquals(\"level3_a\", level3.getName());\n+    assertEquals(1, level3.getTreeSize());\n+    assertSame(NullNode.getInstance(), level3.getRight());\n+    assertSame(NullNode.getInstance(), level3.getLeft());\n+  }\n+\n+  @Test\n+  public void testGetRight() throws Exception {\n+    final Node level1 = TREE_ROOT.getRight();\n+    assertNotNull(level1);\n+    assertEquals(\"level1_b\", level1.getName());\n+    assertEquals(1, level1.getTreeSize());\n+    assertSame(NullNode.getInstance(), level1.getRight());\n+    assertSame(NullNode.getInstance(), level1.getLeft());\n+  }\n+\n+}",
    "output": "Add tests for null-object pattern"
  },
  {
    "input": "diff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar.multiton;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+/**\n+ * Date: 12/22/15 - 22:28 AM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class NazgulTest {\n+\n+  /**\n+   * Verify if {@link Nazgul#getInstance(NazgulName)} returns the correct Nazgul multiton instance\n+   */\n+  @Test\n+  public void testGetInstance() {\n+    for (final NazgulName name : NazgulName.values()) {\n+      final Nazgul nazgul = Nazgul.getInstance(name);\n+      assertNotNull(nazgul);\n+      assertSame(nazgul, Nazgul.getInstance(name));\n+      assertEquals(name, nazgul.getName());\n+    }\n+  }\n+\n+}",
    "output": "Add tests for multiton pattern"
  },
  {
    "input": "diff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n@@ -4,10 +4,10 @@\n \n public class AppTest {\n \n-        @Test\n-        public void test() {\n-            String[] args = {};\n-            App.main(args);\n-        }\n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n \n }\n\ndiff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java\n@@ -11,33 +11,33 @@\n \n public class DelegateTest {\n \n-    private static final String MESSAGE = \"Test Message Printed\";\n+  private static final String MESSAGE = \"Test Message Printed\";\n \n-    @Rule\n-    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();\n+  @Rule\n+  public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();\n \n-    @Test\n-    public void testCanonPrinter() throws Exception {\n-        AbstractPrinterController abstractController = new PrinterController(new CanonPrinter());\n-        abstractController.print(MESSAGE);\n+  @Test\n+  public void testCanonPrinter() throws Exception {\n+    AbstractPrinterController abstractController = new PrinterController(new CanonPrinter());\n+    abstractController.print(MESSAGE);\n \n-        assertEquals(\"Canon Printer : Test Message Printed\\n\", systemOutRule.getLog());\n-    }\n+    assertEquals(\"Canon Printer : Test Message Printed\\n\", systemOutRule.getLog());\n+  }\n \n-    @Test\n-    public void testHPPrinter() throws Exception {\n-        AbstractPrinterController abstractController = new PrinterController(new HpPrinter());\n-        abstractController.print(MESSAGE);\n+  @Test\n+  public void testHpPrinter() throws Exception {\n+    AbstractPrinterController abstractController = new PrinterController(new HpPrinter());\n+    abstractController.print(MESSAGE);\n \n-        assertEquals(\"HP Printer : Test Message Printed\\n\", systemOutRule.getLog());\n-    }\n+    assertEquals(\"HP Printer : Test Message Printed\\n\", systemOutRule.getLog());\n+  }\n \n-    @Test\n-    public void testEpsonPrinter() throws Exception {\n-        AbstractPrinterController abstractController = new PrinterController(new EpsonPrinter());\n-        abstractController.print(MESSAGE);\n+  @Test\n+  public void testEpsonPrinter() throws Exception {\n+    AbstractPrinterController abstractController = new PrinterController(new EpsonPrinter());\n+    abstractController.print(MESSAGE);\n \n-        assertEquals(\"Epson Printer : Test Message Printed\\n\", systemOutRule.getLog());\n-    }\n+    assertEquals(\"Epson Printer : Test Message Printed\\n\", systemOutRule.getLog());\n+  }\n \n }",
    "output": "Upgrade to match checkStyle rules added for test packages"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HpPrinter.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar.delegation.simple.printers;\n+\n+import com.iluwatar.delegation.simple.Printer;\n+\n+/**\n+ * Specialised Implementation of {@link Printer} for a HP Printer, in\n+ * this case the message to be printed is appended to \"HP Printer : \"\n+ *\n+ * @see Printer\n+ */\n+public class HpPrinter implements Printer {\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void print(String message) {\n+    System.out.println(\"HP Printer : \" + message);\n+  }\n+\n+}",
    "output": "Readd File to Index"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java\n@@ -1,21 +0,0 @@\n-package com.iluwatar.delegation.simple.printers;\n-\n-import com.iluwatar.delegation.simple.Printer;\n-\n-/**\n- * Specialised Implementation of {@link Printer} for a HP Printer, in\n- * this case the message to be printed is appended to \"HP Printer :  \"\n- *\n- * @see Printer\n- */\n-public class HpPrinter implements Printer {\n-\n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public void print(String message) {\n-    System.out.println(\"HP Printer : \" + message);\n-  }\n-\n-}",
    "output": "Messed up indexes"
  },
  {
    "input": "diff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n@@ -1,6 +1,5 @@\n package com.iluwatar.delegation.simple;\n \n-import com.iluwatar.delegation.simple.printers.App;\n import org.junit.Test;\n \n public class AppTest {",
    "output": "Move App.java to correct Package"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/App.java b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/App.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java\n@@ -1,7 +1,8 @@\n-package com.iluwatar.delegation.simple.printers;\n+package com.iluwatar.delegation.simple;\n \n-import com.iluwatar.delegation.simple.AbstractPrinterController;\n-import com.iluwatar.delegation.simple.PrinterController;\n+import com.iluwatar.delegation.simple.printers.CanonPrinter;\n+import com.iluwatar.delegation.simple.printers.EpsonPrinter;\n+import com.iluwatar.delegation.simple.printers.HPPrinter;\n \n public class App {\n ",
    "output": "Move App.java to correct Package"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java\n@@ -2,13 +2,13 @@\n \n public abstract class AbstractPrinterController<T extends Printer> implements Printer{\n \n-    private Printer printer;\n+    private T printer;\n \n-    public AbstractPrinterController(Printer printer) {\n+    public AbstractPrinterController(T printer) {\n         this.printer = printer;\n     }\n \n-    protected Printer getPrinter() {\n+    protected T getPrinter() {\n         return printer;\n     }\n }",
    "output": "Generic For AbstractPrinterController"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/AppManager.java b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/AppManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n@@ -15,6 +15,9 @@ public class AppManager {\n \n   private static CachingPolicy cachingPolicy;\n \n+  private AppManager() {\n+  }\n+\n   /**\n    *\n    * Developer/Tester is able to choose whether the application should use MongoDB as its underlying\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/CacheStore.java b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n--- a/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n@@ -11,6 +11,9 @@ public class CacheStore {\n \n   static LruCache cache = null;\n \n+  private CacheStore() {\n+  }\n+\n   /**\n    * Init cache capacity\n    */\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/DbManager.java b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/DbManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java\n@@ -29,6 +29,9 @@ public class DbManager {\n \n   private static HashMap<String, UserAccount> virtualDB;\n \n+  private DbManager() {\n+  }\n+\n   /**\n    * Create DB\n    */\n\ndiff --git a/naked-objects/integtests/src/test/java/domainapp/integtests/bootstrap/SimpleAppSystemInitializer.java b/naked-objects/integtests/src/test/java/domainapp/integtests/bootstrap/SimpleAppSystemInitializer.java\n--- a/naked-objects/integtests/src/test/java/domainapp/integtests/bootstrap/SimpleAppSystemInitializer.java\n+++ b/naked-objects/integtests/src/test/java/domainapp/integtests/bootstrap/SimpleAppSystemInitializer.java\n@@ -21,6 +21,9 @@\n \n public class SimpleAppSystemInitializer {\n \n+  private SimpleAppSystemInitializer() {\n+  }\n+\n   /**\n    * Init test system\n    */\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java b/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java\n--- a/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java\n+++ b/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java\n@@ -32,6 +32,9 @@ public class HibernateUtil {\n     }\n   }\n \n+  private HibernateUtil() {\n+  }\n+\n   public static SessionFactory getSessionFactory() {\n     return SESSION_FACTORY;\n   }\n\ndiff --git a/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n--- a/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n+++ b/service-locator/src/main/java/com/iluwatar/servicelocator/ServiceLocator.java\n@@ -10,6 +10,9 @@ public class ServiceLocator {\n \n   private static ServiceCache serviceCache = new ServiceCache();\n \n+  private ServiceLocator() {\n+  }\n+\n   /**\n    * Fetch the service with the name param from the cache first, if no service is found, lookup the\n    * service from the {@link InitContext} and then add the newly created service into the cache map\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java\n@@ -18,6 +18,9 @@\n  */\n public class RainbowFishSerializer {\n \n+  private RainbowFishSerializer() {\n+  }\n+\n   /**\n    * Write V1 RainbowFish to file\n    */",
    "output": "Fix squid:S1118 - Utility classes should not have public constructors"
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java b/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java\n--- a/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java\n+++ b/mediator/src/main/java/com/iluwatar/mediator/PartyImpl.java\n@@ -19,7 +19,7 @@ public PartyImpl() {\n   @Override\r\n   public void act(PartyMember actor, Action action) {\r\n     for (PartyMember member : members) {\r\n-      if (member != actor) {\r\n+      if (!member.equals(actor)) {\r\n         member.partyAction(action);\r\n       }\r\n     }\r\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n@@ -140,11 +140,11 @@ public FileSelectorJFrame() {\n \n   @Override\n   public void actionPerformed(ActionEvent e) {\n-    if (e.getSource() == this.ok) {\n+    if (this.ok.equals(e.getSource())) {\n       this.fileName = this.input.getText();\n       presenter.fileNameChanged();\n       presenter.confirmed();\n-    } else if (e.getSource() == this.cancel) {\n+    } else if (this.cancel.equals(e.getSource())) {\n       presenter.cancelled();\n     }\n   }\n\ndiff --git a/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectCreate.java b/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectCreate.java\n--- a/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectCreate.java\n+++ b/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectCreate.java\n@@ -55,9 +55,9 @@ public SimpleObject getSimpleObject() {\n   @Override\n   protected void execute(final ExecutionContext ec) {\n \n-    String name = checkParam(\"name\", ec, String.class);\n+    String paramName = checkParam(\"name\", ec, String.class);\n \n-    this.simpleObject = wrap(simpleObjects).create(name);\n+    this.simpleObject = wrap(simpleObjects).create(paramName);\n \n     // also make available to UI\n     ec.addResult(this, simpleObject);\n\ndiff --git a/naked-objects/fixture/src/main/java/domainapp/fixture/scenarios/RecreateSimpleObjects.java b/naked-objects/fixture/src/main/java/domainapp/fixture/scenarios/RecreateSimpleObjects.java\n--- a/naked-objects/fixture/src/main/java/domainapp/fixture/scenarios/RecreateSimpleObjects.java\n+++ b/naked-objects/fixture/src/main/java/domainapp/fixture/scenarios/RecreateSimpleObjects.java\n@@ -69,10 +69,10 @@ public List<SimpleObject> getSimpleObjects() {\n   protected void execute(final ExecutionContext ec) {\n \n     // defaults\n-    final int number = defaultParam(\"number\", ec, 3);\n+    final int paramNumber = defaultParam(\"number\", ec, 3);\n \n     // validate\n-    if (number < 0 || number > names.size()) {\n+    if (paramNumber < 0 || paramNumber > names.size()) {\n       throw new IllegalArgumentException(String.format(\"number must be in range [0,%d)\",\n           names.size()));\n     }\n@@ -82,7 +82,7 @@ protected void execute(final ExecutionContext ec) {\n     //\n     ec.executeChild(this, new SimpleObjectsTearDown());\n \n-    for (int i = 0; i < number; i++) {\n+    for (int i = 0; i < paramNumber; i++) {\n       final SimpleObjectCreate fs = new SimpleObjectCreate().setName(names.get(i));\n       ec.executeChild(this, fs.getName(), fs);\n       simpleObjects.add(fs.getSimpleObject());\n\ndiff --git a/poison-pill/src/main/java/com/iluwatar/poison/pill/Consumer.java b/poison-pill/src/main/java/com/iluwatar/poison/pill/Consumer.java\n--- a/poison-pill/src/main/java/com/iluwatar/poison/pill/Consumer.java\n+++ b/poison-pill/src/main/java/com/iluwatar/poison/pill/Consumer.java\n@@ -23,7 +23,7 @@ public void consume() {\n       Message msg;\n       try {\n         msg = queue.take();\n-        if (msg == Message.POISON_PILL) {\n+        if (Message.POISON_PILL.equals(msg)) {\n           System.out.println(String.format(\"Consumer %s receive request to terminate.\", name));\n           break;\n         }",
    "output": "Fix squid:S1698 - Objects should be compared with equals() and squid:HiddenFieldCheck - Local variables should not shadow class fields"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java\n@@ -1,10 +1,10 @@\n package com.iluwatar.delegation.simple;\n \n-public abstract class Controller<T extends Printer> {\n+public abstract class AbstractPrinterController<T extends Printer> implements Printer{\n \n     private Printer printer;\n \n-    public Controller(Printer printer) {\n+    public AbstractPrinterController(Printer printer) {\n         this.printer = printer;\n     }\n \n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java\n@@ -1,6 +1,6 @@\n package com.iluwatar.delegation.simple;\n \n-public class PrinterController extends Controller implements Printer {\n+public class PrinterController extends AbstractPrinterController {\n \n     public PrinterController(Printer printer) {\n         super(printer);\n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java\n@@ -1,20 +1,16 @@\n package com.iluwatar.delegation.simple.printers;\n \n-import com.iluwatar.delegation.simple.Printer;\n+import com.iluwatar.delegation.simple.AbstractPrinterController;\n import com.iluwatar.delegation.simple.PrinterController;\n \n public class App {\n \n     public static final String MESSAGE_TO_PRINT = \"hello world\";\n \n     public static void main(String[] args) {\n-        Printer hpPrinter = new HPPrinter();\n-        Printer canonPrinter = new CanonPrinter();\n-        Printer epsonPrinter = new EpsonPrinter();\n-\n-        PrinterController hpPrinterController = new PrinterController(hpPrinter);\n-        PrinterController canonPrinterController = new PrinterController(canonPrinter);\n-        PrinterController epsonPrinterController = new PrinterController(epsonPrinter);\n+        AbstractPrinterController hpPrinterController = new PrinterController(new HPPrinter());\n+        AbstractPrinterController canonPrinterController = new PrinterController(new CanonPrinter());\n+        AbstractPrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());\n \n         hpPrinterController.print(MESSAGE_TO_PRINT);\n         canonPrinterController.print(MESSAGE_TO_PRINT);\n\ndiff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/DelegateTest.java\n@@ -0,0 +1,43 @@\n+package com.iluwatar.delegation.simple;\n+\n+import com.iluwatar.delegation.simple.printers.CanonPrinter;\n+import com.iluwatar.delegation.simple.printers.EpsonPrinter;\n+import com.iluwatar.delegation.simple.printers.HPPrinter;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.SystemOutRule;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DelegateTest {\n+\n+    private static final String MESSAGE = \"Test Message Printed\";\n+\n+    @Rule\n+    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();\n+\n+    @Test\n+    public void testCanonPrinter() throws Exception {\n+        AbstractPrinterController abstractController = new PrinterController(new CanonPrinter());\n+        abstractController.print(MESSAGE);\n+\n+        assertEquals(\"Canon Printer : Test Message Printed\\n\", systemOutRule.getLog());\n+    }\n+\n+    @Test\n+    public void testHPPrinter() throws Exception {\n+        AbstractPrinterController abstractController = new PrinterController(new HPPrinter());\n+        abstractController.print(MESSAGE);\n+\n+        assertEquals(\"HP Printer : Test Message Printed\\n\", systemOutRule.getLog());\n+    }\n+\n+    @Test\n+    public void testEpsonPrinter() throws Exception {\n+        AbstractPrinterController abstractController = new PrinterController(new EpsonPrinter());\n+        abstractController.print(MESSAGE);\n+\n+        assertEquals(\"Epson Printer : Test Message Printed\\n\", systemOutRule.getLog());\n+    }\n+\n+}",
    "output": "Add simple tests for delegate pattern"
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/App.java\n@@ -0,0 +1,24 @@\n+package com.iluwatar.delegation.simple.printers;\n+\n+import com.iluwatar.delegation.simple.Printer;\n+import com.iluwatar.delegation.simple.PrinterController;\n+\n+public class App {\n+\n+    public static final String MESSAGE_TO_PRINT = \"hello world\";\n+\n+    public static void main(String[] args) {\n+        Printer hpPrinter = new HPPrinter();\n+        Printer canonPrinter = new CanonPrinter();\n+        Printer epsonPrinter = new EpsonPrinter();\n+\n+        PrinterController hpPrinterController = new PrinterController(hpPrinter);\n+        PrinterController canonPrinterController = new PrinterController(canonPrinter);\n+        PrinterController epsonPrinterController = new PrinterController(epsonPrinter);\n+\n+        hpPrinterController.print(MESSAGE_TO_PRINT);\n+        canonPrinterController.print(MESSAGE_TO_PRINT);\n+        epsonPrinterController.print(MESSAGE_TO_PRINT);\n+    }\n+\n+}\n\ndiff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n@@ -1,26 +1,14 @@\n package com.iluwatar.delegation.simple;\n \n-import com.iluwatar.delegation.simple.printers.CanonPrinter;\n-import com.iluwatar.delegation.simple.printers.EpsonPrinter;\n-import com.iluwatar.delegation.simple.printers.HPPrinter;\n+import com.iluwatar.delegation.simple.printers.App;\n import org.junit.Test;\n \n public class AppTest {\n \n-    public static final String MESSAGE_TO_PRINT = \"hello world\";\n+        @Test\n+        public void test() {\n+            String[] args = {};\n+            App.main(args);\n+        }\n \n-    @Test\n-    public void main() {\n-        Printer hpPrinter = new HPPrinter();\n-        Printer canonPrinter = new CanonPrinter();\n-        Printer epsonPrinter = new EpsonPrinter();\n-\n-        PrinterController hpPrinterController = new PrinterController(hpPrinter);\n-        PrinterController canonPrinterController = new PrinterController(canonPrinter);\n-        PrinterController epsonPrinterController = new PrinterController(epsonPrinter);\n-\n-        hpPrinterController.print(MESSAGE_TO_PRINT);\n-        canonPrinterController.print(MESSAGE_TO_PRINT);\n-        epsonPrinterController.print(MESSAGE_TO_PRINT);\n-    }\n }",
    "output": "Make AppTest.java match other patterns and update AppTest.java to match other patterns"
  },
  {
    "input": "diff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n@@ -10,7 +10,7 @@ public class AppTest {\n     public static final String MESSAGE_TO_PRINT = \"hello world\";\n \n     @Test\n-    public static void main() {\n+    public void main() {\n         Printer hpPrinter = new HPPrinter();\n         Printer canonPrinter = new CanonPrinter();\n         Printer epsonPrinter = new EpsonPrinter();",
    "output": "3am Code is starting to show. Get this build working."
  },
  {
    "input": "diff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n@@ -3,12 +3,14 @@\n import com.iluwatar.delegation.simple.printers.CanonPrinter;\n import com.iluwatar.delegation.simple.printers.EpsonPrinter;\n import com.iluwatar.delegation.simple.printers.HPPrinter;\n+import org.junit.Test;\n \n public class AppTest {\n \n     public static final String MESSAGE_TO_PRINT = \"hello world\";\n \n-    public static void main(String args[]) {\n+    @Test\n+    public static void main() {\n         Printer hpPrinter = new HPPrinter();\n         Printer canonPrinter = new CanonPrinter();\n         Printer epsonPrinter = new EpsonPrinter();",
    "output": "Create a unit test for build, added junit to pom for delegation maven module."
  },
  {
    "input": "diff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/Controller.java b/delegation/src/main/java/com/iluwatar/delegation/simple/Controller.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/Controller.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Controller.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar.delegation.simple;\n+\n+public abstract class Controller<T extends Printer> {\n+\n+    private Printer printer;\n+\n+    public Controller(Printer printer) {\n+        this.printer = printer;\n+    }\n+\n+    protected Printer getPrinter() {\n+        return printer;\n+    }\n+}\n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar.delegation.simple;\n+\n+public interface Printer {\n+\n+    void print(final String message);\n+}\n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar.delegation.simple;\n+\n+public class PrinterController extends Controller implements Printer {\n+\n+    public PrinterController(Printer printer) {\n+        super(printer);\n+    }\n+\n+    @Override\n+    public void print(String message) {\n+        getPrinter().print(message);\n+    }\n+}\n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar.delegation.simple.printers;\n+\n+import com.iluwatar.delegation.simple.Printer;\n+\n+public class CanonPrinter implements Printer {\n+\n+    @Override\n+    public void print(String message) {\n+        System.out.println(\"Canon Printer : \" + message);\n+    }\n+\n+}\n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/EpsonPrinter.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/EpsonPrinter.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/EpsonPrinter.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/EpsonPrinter.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar.delegation.simple.printers;\n+\n+import com.iluwatar.delegation.simple.Printer;\n+\n+public class EpsonPrinter implements Printer{\n+\n+    @Override\n+    public void print(String message) {\n+        System.out.println(\"Epson Printer : \" + message);\n+    }\n+\n+}\n\ndiff --git a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java\n--- a/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java\n+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar.delegation.simple.printers;\n+\n+import com.iluwatar.delegation.simple.Printer;\n+\n+public class HPPrinter implements Printer {\n+\n+    @Override\n+    public void print(String message) {\n+        System.out.println(\"HP Printer : \" + message);\n+    }\n+\n+}\n\ndiff --git a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n--- a/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n+++ b/delegation/src/test/java/com/iluwatar/delegation/simple/AppTest.java\n@@ -0,0 +1,24 @@\n+package com.iluwatar.delegation.simple;\n+\n+import com.iluwatar.delegation.simple.printers.CanonPrinter;\n+import com.iluwatar.delegation.simple.printers.EpsonPrinter;\n+import com.iluwatar.delegation.simple.printers.HPPrinter;\n+\n+public class AppTest {\n+\n+    public static final String MESSAGE_TO_PRINT = \"hello world\";\n+\n+    public static void main(String args[]) {\n+        Printer hpPrinter = new HPPrinter();\n+        Printer canonPrinter = new CanonPrinter();\n+        Printer epsonPrinter = new EpsonPrinter();\n+\n+        PrinterController hpPrinterController = new PrinterController(hpPrinter);\n+        PrinterController canonPrinterController = new PrinterController(canonPrinter);\n+        PrinterController epsonPrinterController = new PrinterController(epsonPrinter);\n+\n+        hpPrinterController.print(MESSAGE_TO_PRINT);\n+        canonPrinterController.print(MESSAGE_TO_PRINT);\n+        epsonPrinterController.print(MESSAGE_TO_PRINT);\n+    }\n+}",
    "output": "Add skeleton code for delegation pattern"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/App.java b/caching/src/main/java/com/iluwatar/caching/App.java\n--- a/caching/src/main/java/com/iluwatar/caching/App.java\n+++ b/caching/src/main/java/com/iluwatar/caching/App.java\n@@ -65,8 +65,8 @@ public void useReadAndWriteThroughStrategy() {\n \n     AppManager.save(userAccount1);\n     System.out.println(AppManager.printCacheContent());\n-    userAccount1 = AppManager.find(\"001\");\n-    userAccount1 = AppManager.find(\"001\");\n+    AppManager.find(\"001\");\n+    AppManager.find(\"001\");\n   }\n \n   /**\n@@ -80,15 +80,15 @@ public void useReadThroughAndWriteAroundStrategy() {\n \n     AppManager.save(userAccount2);\n     System.out.println(AppManager.printCacheContent());\n-    userAccount2 = AppManager.find(\"002\");\n+    AppManager.find(\"002\");\n     System.out.println(AppManager.printCacheContent());\n     userAccount2 = AppManager.find(\"002\");\n     userAccount2.setUserName(\"Jane G.\");\n     AppManager.save(userAccount2);\n     System.out.println(AppManager.printCacheContent());\n-    userAccount2 = AppManager.find(\"002\");\n+    AppManager.find(\"002\");\n     System.out.println(AppManager.printCacheContent());\n-    userAccount2 = AppManager.find(\"002\");\n+    AppManager.find(\"002\");\n   }\n \n   /**\n@@ -106,12 +106,12 @@ public void useReadThroughAndWriteBehindStrategy() {\n     AppManager.save(userAccount4);\n     AppManager.save(userAccount5);\n     System.out.println(AppManager.printCacheContent());\n-    userAccount3 = AppManager.find(\"003\");\n+    AppManager.find(\"003\");\n     System.out.println(AppManager.printCacheContent());\n     UserAccount userAccount6 = new UserAccount(\"006\", \"Yasha\", \"She is an only child.\");\n     AppManager.save(userAccount6);\n     System.out.println(AppManager.printCacheContent());\n-    userAccount4 = AppManager.find(\"004\");\n+    AppManager.find(\"004\");\n     System.out.println(AppManager.printCacheContent());\n   }\n }\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/tolerantreader/RainbowFishSerializer.java\n@@ -70,10 +70,9 @@ public static void writeV2(RainbowFishV2 rainbowFish, String filename) throws IO\n    * @throws ClassNotFoundException\n    */\n   public static RainbowFish readV1(String filename) throws IOException, ClassNotFoundException {\n-    Map<String, String> map = null;\n     FileInputStream fileIn = new FileInputStream(filename);\n     ObjectInputStream objIn = new ObjectInputStream(fileIn);\n-    map = (Map<String, String>) objIn.readObject();\n+    Map<String, String> map = (Map<String, String>) objIn.readObject();\n     objIn.close();\n     fileIn.close();\n     return new RainbowFish(map.get(\"name\"), Integer.parseInt(map.get(\"age\")), Integer.parseInt(map",
    "output": "Fix squid:S1854 - Dead stores should be removed"
  },
  {
    "input": "diff --git a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n@@ -9,7 +9,6 @@ public class AppTest {\n   public void testMain() {\n     String[] args = {};\n     App.main(args);\n-    Assert.assertTrue(LoadBalancer.getLastServedId() == 2);\n   }\n \n }\n\ndiff --git a/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n@@ -3,11 +3,14 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n \n /**\n  * Date: 12/21/15 - 12:26 PM\n@@ -30,6 +33,9 @@ public void testSameStateAmongstAllInstances() {\n   @Test\n   public void testServe() {\n     final Server server = mock(Server.class);\n+    when(server.getHost()).thenReturn(\"testhost\");\n+    when(server.getPort()).thenReturn(1234);\n+    doNothing().when(server).serve(any(Request.class));\n \n     final LoadBalancer loadBalancer = new LoadBalancer();\n     loadBalancer.addServer(server);",
    "output": "Fix failing unit test LoadBalancer has several static fields, this could cause problems since JUnit tests are executed concurrently."
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/App.java b/monostate/src/main/java/com/iluwatar/monostate/App.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/App.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/App.java\n@@ -28,8 +28,8 @@ public class App {\n   public static void main(String[] args) {\n     LoadBalancer loadBalancer1 = new LoadBalancer();\n     LoadBalancer loadBalancer2 = new LoadBalancer();\n-    loadBalancer1.serverequest(new Request(\"Hello\"));\n-    loadBalancer2.serverequest(new Request(\"Hello World\"));\n+    loadBalancer1.serverRequest(new Request(\"Hello\"));\n+    loadBalancer2.serverRequest(new Request(\"Hello World\"));\n   }\n \n }\n\ndiff --git a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n@@ -39,7 +39,7 @@ public static int getLastServedId() {\n     return lastServedId;\n   }\n \n-  public void serverequest(Request request) {\n+  public void serverRequest(Request request) {\n     if (lastServedId >= servers.size()) {\n       lastServedId = 0;\n     }\n\ndiff --git a/monostate/src/main/java/com/iluwatar/monostate/Server.java b/monostate/src/main/java/com/iluwatar/monostate/Server.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/Server.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java\n@@ -25,7 +25,7 @@ public int getPort() {\n     return port;\n   }\n \n-  public final void serve(Request request) {\n+  public void serve(Request request) {\n     System.out.println(\"Server ID \" + id + \" associated to host : \" + getHost() + \" and Port \"\n         + getPort() + \" Processed request with value  \" + request.value);\n   }\n\ndiff --git a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java\n@@ -5,17 +5,6 @@\n \n public class AppTest {\n \n-  @Test\n-  public void testSameStateAmonstAllInstances() {\n-    LoadBalancer balancer = new LoadBalancer();\n-    LoadBalancer balancer2 = new LoadBalancer();\n-    balancer.addServer(new Server(\"localhost\", 8085, 6));\n-    // Both should have the same number of servers.\n-    Assert.assertTrue(balancer.getNoOfServers() == balancer2.getNoOfServers());\n-    // Both Should have the same LastServedId\n-    Assert.assertTrue(balancer.getLastServedId() == balancer2.getLastServedId());\n-  }\n-\n   @Test\n   public void testMain() {\n     String[] args = {};\n\ndiff --git a/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n--- a/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n+++ b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java\n@@ -0,0 +1,49 @@\n+package com.iluwatar.monostate;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+\n+/**\n+ * Date: 12/21/15 - 12:26 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class LoadBalancerTest {\n+\n+  @Test\n+  public void testSameStateAmongstAllInstances() {\n+    final LoadBalancer firstBalancer = new LoadBalancer();\n+    final LoadBalancer secondBalancer = new LoadBalancer();\n+    firstBalancer.addServer(new Server(\"localhost\", 8085, 6));\n+    // Both should have the same number of servers.\n+    Assert.assertTrue(firstBalancer.getNoOfServers() == secondBalancer.getNoOfServers());\n+    // Both Should have the same LastServedId\n+    Assert.assertTrue(firstBalancer.getLastServedId() == secondBalancer.getLastServedId());\n+  }\n+\n+  @Test\n+  public void testServe() {\n+    final Server server = mock(Server.class);\n+\n+    final LoadBalancer loadBalancer = new LoadBalancer();\n+    loadBalancer.addServer(server);\n+\n+    verifyZeroInteractions(server);\n+\n+    final Request request = new Request(\"test\");\n+    for (int i = 0; i < loadBalancer.getNoOfServers() * 2; i++) {\n+      loadBalancer.serverRequest(request);\n+    }\n+\n+    verify(server, times(2)).serve(request);\n+    verifyNoMoreInteractions(server);\n+\n+  }\n+\n+}",
    "output": "Add tests for monostate pattern"
  },
  {
    "input": "diff --git a/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/AppTest.java b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/AppTest.java\n--- a/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/AppTest.java\n+++ b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/AppTest.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar.model.view.presenter;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+\n+}\n\ndiff --git a/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/FileLoaderTest.java b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/FileLoaderTest.java\n--- a/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/FileLoaderTest.java\n+++ b/model-view-presenter/src/test/java/com/iluwatar/model/view/presenter/FileLoaderTest.java\n@@ -0,0 +1,24 @@\n+package com.iluwatar.model.view.presenter;\n+\n+import org.junit.Test;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Date: 12/21/15 - 12:12 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class FileLoaderTest {\n+\n+  @Test\n+  public void testLoadData() throws Exception {\n+    final FileLoader fileLoader = new FileLoader();\n+    fileLoader.setFileName(\"non-existing-file\");\n+    assertNull(fileLoader.loadData());\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add additional tests for model-view-presenter pattern"
  },
  {
    "input": "diff --git a/memento/src/test/java/com/iluwatar/memento/StarTest.java b/memento/src/test/java/com/iluwatar/memento/StarTest.java\n--- a/memento/src/test/java/com/iluwatar/memento/StarTest.java\n+++ b/memento/src/test/java/com/iluwatar/memento/StarTest.java\n@@ -0,0 +1,75 @@\n+package com.iluwatar.memento;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Date: 12/20/15 - 10:08 AM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class StarTest {\n+\n+  /**\n+   * Verify the stages of a dying sun, without going back in time\n+   */\n+  @Test\n+  public void testTimePasses() {\n+    final Star star = new Star(StarType.SUN, 1, 2);\n+    assertEquals(\"sun age: 1 years mass: 2 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"red giant age: 2 years mass: 16 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"white dwarf age: 4 years mass: 128 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"supernova age: 8 years mass: 1024 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"dead star age: 16 years mass: 8192 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"dead star age: 64 years mass: 0 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"dead star age: 256 years mass: 0 tons\", star.toString());\n+  }\n+\n+  /**\n+   * Verify some stage of a dying sun, but go back in time to test the memento\n+   */\n+  @Test\n+  public void testSetMemento() {\n+    final Star star = new Star(StarType.SUN, 1, 2);\n+    final StarMemento firstMemento = star.getMemento();\n+    assertEquals(\"sun age: 1 years mass: 2 tons\", star.toString());\n+\n+    star.timePasses();\n+    final StarMemento secondMemento = star.getMemento();\n+    assertEquals(\"red giant age: 2 years mass: 16 tons\", star.toString());\n+\n+    star.timePasses();\n+    final StarMemento thirdMemento = star.getMemento();\n+    assertEquals(\"white dwarf age: 4 years mass: 128 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"supernova age: 8 years mass: 1024 tons\", star.toString());\n+\n+    star.setMemento(thirdMemento);\n+    assertEquals(\"white dwarf age: 4 years mass: 128 tons\", star.toString());\n+\n+    star.timePasses();\n+    assertEquals(\"supernova age: 8 years mass: 1024 tons\", star.toString());\n+\n+    star.setMemento(secondMemento);\n+    assertEquals(\"red giant age: 2 years mass: 16 tons\", star.toString());\n+\n+    star.setMemento(firstMemento);\n+    assertEquals(\"sun age: 1 years mass: 2 tons\", star.toString());\n+\n+  }\n+\n+}",
    "output": "Add tests for memento pattern"
  },
  {
    "input": "diff --git a/mediator/src/test/java/com/iluwatar/mediator/PartyImplTest.java b/mediator/src/test/java/com/iluwatar/mediator/PartyImplTest.java\n--- a/mediator/src/test/java/com/iluwatar/mediator/PartyImplTest.java\n+++ b/mediator/src/test/java/com/iluwatar/mediator/PartyImplTest.java\n@@ -0,0 +1,41 @@\n+package com.iluwatar.mediator;\n+\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+\n+/**\n+ * Date: 12/19/15 - 10:00 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class PartyImplTest {\n+\n+  /**\n+   * Verify if a member is notified when it's joining a party. Generate an action and see if the\n+   * other member gets it. Also check members don't get their own actions.\n+   */\n+  @Test\n+  public void testPartyAction() {\n+    final PartyMember partyMember1 = mock(PartyMember.class);\n+    final PartyMember partyMember2 = mock(PartyMember.class);\n+\n+    final PartyImpl party = new PartyImpl();\n+    party.addMember(partyMember1);\n+    party.addMember(partyMember2);\n+\n+    verify(partyMember1).joinedParty(party);\n+    verify(partyMember2).joinedParty(party);\n+\n+    party.act(partyMember1, Action.GOLD);\n+    verifyZeroInteractions(partyMember1);\n+    verify(partyMember2).partyAction(Action.GOLD);\n+\n+    verifyNoMoreInteractions(partyMember1, partyMember2);\n+\n+  }\n+\n+}\n\ndiff --git a/mediator/src/test/java/com/iluwatar/mediator/PartyMemberTest.java b/mediator/src/test/java/com/iluwatar/mediator/PartyMemberTest.java\n--- a/mediator/src/test/java/com/iluwatar/mediator/PartyMemberTest.java\n+++ b/mediator/src/test/java/com/iluwatar/mediator/PartyMemberTest.java\n@@ -0,0 +1,128 @@\n+package com.iluwatar.mediator;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.PrintStream;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Supplier;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+\n+/**\n+ * Date: 12/19/15 - 10:13 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+@RunWith(Parameterized.class)\n+public class PartyMemberTest {\n+\n+  @Parameterized.Parameters\n+  public static Collection<Supplier<PartyMember>[]> data() {\n+    return Arrays.asList(\n+            new Supplier[]{Hobbit::new},\n+            new Supplier[]{Hunter::new},\n+            new Supplier[]{Rogue::new},\n+            new Supplier[]{Wizard::new}\n+    );\n+  }\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since some actions on a {@link\n+   * PartyMember} have any influence on any other accessible objects, except for writing to std-out\n+   * using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * The factory, used to create a new instance of the tested party member\n+   */\n+  private final Supplier<PartyMember> memberSupplier;\n+\n+  /**\n+   * Create a new test instance, using the given {@link PartyMember} factory\n+   *\n+   * @param memberSupplier The party member factory\n+   */\n+  public PartyMemberTest(final Supplier<PartyMember> memberSupplier) {\n+    this.memberSupplier = memberSupplier;\n+  }\n+\n+  /**\n+   * Verify if a party action triggers the correct output to the std-Out\n+   */\n+  @Test\n+  public void testPartyAction() {\n+    final PartyMember member = this.memberSupplier.get();\n+\n+    for (final Action action : Action.values()) {\n+      member.partyAction(action);\n+      verify(this.stdOutMock).println(member.toString() + \" \" + action.getDescription());\n+    }\n+\n+    verifyNoMoreInteractions(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Verify if a member action triggers the expected interactions with the party class\n+   */\n+  @Test\n+  public void testAct() {\n+    final PartyMember member = this.memberSupplier.get();\n+\n+    member.act(Action.GOLD);\n+    verifyZeroInteractions(this.stdOutMock);\n+\n+    final Party party = mock(Party.class);\n+    member.joinedParty(party);\n+    verify(this.stdOutMock).println(member.toString() + \" joins the party\");\n+\n+    for (final Action action : Action.values()) {\n+      member.act(action);\n+      verify(this.stdOutMock).println(member.toString() + \" \" + action.toString());\n+      verify(party).act(member, action);\n+    }\n+\n+    verifyNoMoreInteractions(party, this.stdOutMock);\n+  }\n+\n+  /**\n+   * Verify if {@link PartyMember#toString()} generate the expected output\n+   */\n+  @Test\n+  public void testToString() throws Exception {\n+    final PartyMember member = this.memberSupplier.get();\n+    final Class<? extends PartyMember> memberClass = member.getClass();\n+    assertEquals(memberClass.getSimpleName(), member.toString());\n+  }\n+\n+}",
    "output": "Add tests for mediator pattern"
  },
  {
    "input": "diff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/AbstractHolderTest.java\n@@ -0,0 +1,41 @@\n+package com.iluwatar.lazy.loading;\n+\n+import org.junit.Test;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static junit.framework.Assert.assertSame;\n+import static junit.framework.TestCase.assertNull;\n+\n+/**\n+ * Date: 12/19/15 - 11:58 AM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class AbstractHolderTest {\n+\n+  /**\n+   * Get the internal state of the holder value\n+   *\n+   * @return The internal value\n+   */\n+  abstract Heavy getInternalHeavyValue() throws Exception;\n+\n+  /**\n+   * Request a lazy loaded {@link Heavy} object from the holder.\n+   *\n+   * @return The lazy loaded {@link Heavy} object\n+   */\n+  abstract Heavy getHeavy() throws Exception;\n+\n+  /**\n+   * This test shows that the heavy field is not instantiated until the method getHeavy is called\n+   */\n+  @Test(timeout = 3000)\n+  public void testGetHeavy() throws Exception {\n+    assertNull(getInternalHeavyValue());\n+    assertNotNull(getHeavy());\n+    assertNotNull(getInternalHeavyValue());\n+    assertSame(getHeavy(), getInternalHeavyValue());\n+  }\n+\n+}\n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderNaiveTest.java\n@@ -0,0 +1,26 @@\n+package com.iluwatar.lazy.loading;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Date: 12/19/15 - 12:05 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class HolderNaiveTest extends AbstractHolderTest {\n+\n+  private final HolderNaive holder = new HolderNaive();\n+\n+  @Override\n+  Heavy getInternalHeavyValue() throws Exception {\n+    final Field holderField = HolderNaive.class.getDeclaredField(\"heavy\");\n+    holderField.setAccessible(true);\n+    return (Heavy) holderField.get(this.holder);\n+  }\n+\n+  @Override\n+  Heavy getHeavy() {\n+    return holder.getHeavy();\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n@@ -1,45 +1,26 @@\n package com.iluwatar.lazy.loading;\n \n-import org.junit.Test;\n-\n import java.lang.reflect.Field;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n /**\n- * Using reflection this test shows that the heavy field is not instantiated until the method\n- * getHeavy is called\n+ * Date: 12/19/15 - 12:19 PM\n  *\n- * Created by jones on 11/10/2015.\n+ * @author Jeroen Meulemeester\n  */\n-public class HolderThreadSafeTest {\n-\n-  @Test\n-  public void test() throws IllegalAccessException {\n-    HolderThreadSafe hts = new HolderThreadSafe();\n-\n-    {\n-      // first call is null\n-      Field[] ff = HolderThreadSafe.class.getDeclaredFields();\n-      for (Field f : ff) {\n-        f.setAccessible(true);\n-      }\n+public class HolderThreadSafeTest extends AbstractHolderTest {\n \n-      assertNull(ff[0].get(hts));\n-    }\n+  private final HolderThreadSafe holder = new HolderThreadSafe();\n \n-    // now it is lazily loaded\n-    hts.getHeavy();\n-\n-    {\n-      // now it is not null - call via reflection so that the test is the same before and after\n-      Field[] ff = HolderThreadSafe.class.getDeclaredFields();\n-      for (Field f : ff) {\n-        f.setAccessible(true);\n-      }\n+  @Override\n+  Heavy getInternalHeavyValue() throws Exception {\n+    final Field holderField = HolderThreadSafe.class.getDeclaredField(\"heavy\");\n+    holderField.setAccessible(true);\n+    return (Heavy) holderField.get(this.holder);\n+  }\n \n-      assertNotNull(ff[0].get(hts));\n-    }\n+  @Override\n+  Heavy getHeavy() throws Exception {\n+    return this.holder.getHeavy();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/Java8HolderTest.java\n@@ -0,0 +1,40 @@\n+package com.iluwatar.lazy.loading;\n+\n+import java.lang.reflect.Field;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Date: 12/19/15 - 12:27 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class Java8HolderTest extends AbstractHolderTest {\n+\n+  private final Java8Holder holder = new Java8Holder();\n+\n+\n+  @Override\n+  Heavy getInternalHeavyValue() throws Exception {\n+    final Field holderField = Java8Holder.class.getDeclaredField(\"heavy\");\n+    holderField.setAccessible(true);\n+\n+    final Supplier<Heavy> supplier = (Supplier<Heavy>) holderField.get(this.holder);\n+    final Class<? extends Supplier> supplierClass = supplier.getClass();\n+\n+    // This is a little fishy, but I don't know another way to test this:\n+    // The lazy holder is at first a lambda, but gets replaced with a new supplier after loading ...\n+    if (supplierClass.isLocalClass()) {\n+      final Field instanceField = supplierClass.getDeclaredField(\"heavyInstance\");\n+      instanceField.setAccessible(true);\n+      return (Heavy) instanceField.get(supplier);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  Heavy getHeavy() throws Exception {\n+    return holder.getHeavy();\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for lazy-loading pattern"
  },
  {
    "input": "diff --git a/iterator/src/test/java/com/iluwatar/iterator/TreasureChestTest.java b/iterator/src/test/java/com/iluwatar/iterator/TreasureChestTest.java\n--- a/iterator/src/test/java/com/iluwatar/iterator/TreasureChestTest.java\n+++ b/iterator/src/test/java/com/iluwatar/iterator/TreasureChestTest.java\n@@ -0,0 +1,108 @@\n+package com.iluwatar.iterator;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Date: 12/14/15 - 2:58 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+@RunWith(Parameterized.class)\n+public class TreasureChestTest {\n+\n+  /**\n+   * Create a list of all expected items in the chest.\n+   *\n+   * @return The set of all expected items in the chest\n+   */\n+  @Parameterized.Parameters\n+  public static List<Object[]> data() {\n+    final List<Object[]> parameters = new ArrayList<>();\n+    parameters.add(new Object[]{new Item(ItemType.POTION, \"Potion of courage\")});\n+    parameters.add(new Object[]{new Item(ItemType.RING, \"Ring of shadows\")});\n+    parameters.add(new Object[]{new Item(ItemType.POTION, \"Potion of wisdom\")});\n+    parameters.add(new Object[]{new Item(ItemType.POTION, \"Potion of blood\")});\n+    parameters.add(new Object[]{new Item(ItemType.WEAPON, \"Sword of silver +1\")});\n+    parameters.add(new Object[]{new Item(ItemType.POTION, \"Potion of rust\")});\n+    parameters.add(new Object[]{new Item(ItemType.POTION, \"Potion of healing\")});\n+    parameters.add(new Object[]{new Item(ItemType.RING, \"Ring of armor\")});\n+    parameters.add(new Object[]{new Item(ItemType.WEAPON, \"Steel halberd\")});\n+    parameters.add(new Object[]{new Item(ItemType.WEAPON, \"Dagger of poison\")});\n+    return parameters;\n+  }\n+\n+  /**\n+   * One of the expected items in the chest\n+   */\n+  private final Item expectedItem;\n+\n+  /**\n+   * Create a new test instance, test if the given expected item can be retrieved from the chest\n+   *\n+   * @param expectedItem One of the items that should be in the chest\n+   */\n+  public TreasureChestTest(final Item expectedItem) {\n+    this.expectedItem = expectedItem;\n+  }\n+\n+  /**\n+   * Test if the expected item can be retrieved from the chest using the {@link ItemIterator}\n+   */\n+  @Test\n+  public void testIterator() {\n+    final TreasureChest chest = new TreasureChest();\n+    final ItemIterator iterator = chest.Iterator(expectedItem.getType());\n+    assertNotNull(iterator);\n+\n+    while (iterator.hasNext()) {\n+      final Item item = iterator.next();\n+      assertNotNull(item);\n+      assertEquals(this.expectedItem.getType(), item.getType());\n+\n+      final String name = item.toString();\n+      assertNotNull(name);\n+      if (this.expectedItem.toString().equals(name)) {\n+        return;\n+      }\n+    }\n+\n+    fail(\"Expected to find item [\" + this.expectedItem + \"] using iterator, but we didn't.\");\n+\n+  }\n+\n+  /**\n+   * Test if the expected item can be retrieved from the chest using the {@link\n+   * TreasureChest#getItems()} method\n+   */\n+  @Test\n+  public void testGetItems() throws Exception {\n+    final TreasureChest chest = new TreasureChest();\n+    final List<Item> items = chest.getItems();\n+    assertNotNull(items);\n+\n+    for (final Item item : items) {\n+      assertNotNull(item);\n+      assertNotNull(item.getType());\n+      assertNotNull(item.toString());\n+\n+      final boolean sameType = this.expectedItem.getType() == item.getType();\n+      final boolean sameName = this.expectedItem.toString().equals(item.toString());\n+      if (sameType && sameName) {\n+        return;\n+      }\n+    }\n+\n+    fail(\"Expected to find item [\" + this.expectedItem + \"] in the item list, but we didn't.\");\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add tests for iterator pattern"
  },
  {
    "input": "diff --git a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n--- a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n@@ -50,6 +50,7 @@ public <T> void execute(final AsyncTask<T> task) {\n       task.onPreCall();\n     } catch (Exception e) {\n       task.onError(e);\n+      return;\n     }\n \n     service.submit(new FutureTask<T>(task) {\n\ndiff --git a/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java b/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java\n--- a/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java\n+++ b/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java\n@@ -0,0 +1,79 @@\n+package com.iluwatar.halfsynchalfasync;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+import java.io.IOException;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Date: 12/12/15 - 11:15 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class AsynchronousServiceTest {\n+\n+  @Test\n+  public void testPerfectExecution() throws Exception {\n+    final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());\n+    final AsyncTask<Object> task = mock(AsyncTask.class);\n+    final Object result = new Object();\n+    when(task.call()).thenReturn(result);\n+    service.execute(task);\n+\n+    verify(task, timeout(2000)).onPostCall(eq(result));\n+\n+    final InOrder inOrder = inOrder(task);\n+    inOrder.verify(task, times(1)).onPreCall();\n+    inOrder.verify(task, times(1)).call();\n+    inOrder.verify(task, times(1)).onPostCall(eq(result));\n+\n+    verifyNoMoreInteractions(task);\n+  }\n+\n+  @Test\n+  public void testCallException() throws Exception {\n+    final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());\n+    final AsyncTask<Object> task = mock(AsyncTask.class);\n+    final IOException exception = new IOException();\n+    when(task.call()).thenThrow(exception);\n+    service.execute(task);\n+\n+    verify(task, timeout(2000)).onError(eq(exception));\n+\n+    final InOrder inOrder = inOrder(task);\n+    inOrder.verify(task, times(1)).onPreCall();\n+    inOrder.verify(task, times(1)).call();\n+    inOrder.verify(task, times(1)).onError(exception);\n+\n+    verifyNoMoreInteractions(task);\n+  }\n+\n+  @Test\n+  public void testPreCallException() throws Exception {\n+    final AsynchronousService service = new AsynchronousService(new LinkedBlockingQueue<>());\n+    final AsyncTask<Object> task = mock(AsyncTask.class);\n+    final IllegalStateException exception = new IllegalStateException();\n+    doThrow(exception).when(task).onPreCall();\n+    service.execute(task);\n+\n+    verify(task, timeout(2000)).onError(eq(exception));\n+\n+    final InOrder inOrder = inOrder(task);\n+    inOrder.verify(task, times(1)).onPreCall();\n+    inOrder.verify(task, times(1)).onError(exception);\n+\n+    verifyNoMoreInteractions(task);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add proper tests for half-sync-half-async"
  },
  {
    "input": "diff --git a/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n--- a/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n+++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n@@ -1,6 +1,7 @@\n package com.iluwatar.flyweight;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n@@ -39,6 +40,24 @@ private void fillShelves() {\n     bottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\n   }\n \n+  /**\n+   * Get a read-only list of all the items on the top shelf\n+   *\n+   * @return The top shelf potions\n+   */\n+  public final List<Potion> getTopShelf() {\n+    return Collections.unmodifiableList(this.topShelf);\n+  }\n+\n+  /**\n+   * Get a read-only list of all the items on the bottom shelf\n+   *\n+   * @return The bottom shelf potions\n+   */\n+  public final List<Potion> getBottomShelf() {\n+    return Collections.unmodifiableList(this.bottomShelf);\n+  }\n+\n   public void enumerate() {\n \n     System.out.println(\"Enumerating top shelf potions\\n\");\n\ndiff --git a/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java b/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java\n--- a/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java\n+++ b/flyweight/src/test/java/com/iluwatar/flyweight/AlchemistShopTest.java\n@@ -0,0 +1,40 @@\n+package com.iluwatar.flyweight;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Date: 12/12/15 - 10:54 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class AlchemistShopTest {\n+\n+  @Test\n+  public void testShop() throws Exception {\n+    final AlchemistShop shop = new AlchemistShop();\n+\n+    final List<Potion> bottomShelf = shop.getBottomShelf();\n+    assertNotNull(bottomShelf);\n+    assertEquals(5, bottomShelf.size());\n+\n+    final List<Potion> topShelf = shop.getTopShelf();\n+    assertNotNull(topShelf);\n+    assertEquals(8, topShelf.size());\n+\n+    final List<Potion> allPotions = new ArrayList<>();\n+    allPotions.addAll(topShelf);\n+    allPotions.addAll(bottomShelf);\n+\n+    // There are 13 potion instances, but only 5 unique instance types\n+    assertEquals(13, allPotions.size());\n+    assertEquals(5, allPotions.stream().map(System::identityHashCode).distinct().count());\n+\n+  }\n+\n+}",
    "output": "Add proper tests for flyweight pattern"
  },
  {
    "input": "diff --git a/execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java b/execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java\n--- a/execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java\n+++ b/execute-around/src/test/java/com/iluwatar/execute/around/SimpleFileWriterTest.java\n@@ -0,0 +1,75 @@\n+package com.iluwatar.execute.around;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Date: 12/12/15 - 3:21 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class SimpleFileWriterTest {\n+\n+  /**\n+   * Create a temporary folder, used to generate files in during this test\n+   */\n+  @Rule\n+  public final TemporaryFolder testFolder = new TemporaryFolder();\n+\n+  /**\n+   * Verify if the given writer is not 'null'\n+   */\n+  @Test\n+  public void testWriterNotNull() throws Exception {\n+    final File temporaryFile = this.testFolder.newFile();\n+    new SimpleFileWriter(temporaryFile.getPath(), Assert::assertNotNull);\n+  }\n+\n+  /**\n+   * Test if the {@link SimpleFileWriter} creates a file if it doesn't exist\n+   */\n+  @Test\n+  public void testNonExistentFile() throws Exception {\n+    final File nonExistingFile = new File(this.testFolder.getRoot(), \"non-existing-file\");\n+    assertFalse(nonExistingFile.exists());\n+\n+    new SimpleFileWriter(nonExistingFile.getPath(), Assert::assertNotNull);\n+    assertTrue(nonExistingFile.exists());\n+  }\n+\n+  /**\n+   * Test if the data written to the file writer actually gets in the file\n+   */\n+  @Test\n+  public void testActualWrite() throws Exception {\n+    final String testMessage = \"Test message\";\n+\n+    final File temporaryFile = this.testFolder.newFile();\n+    assertTrue(temporaryFile.exists());\n+\n+    new SimpleFileWriter(temporaryFile.getPath(), writer -> writer.write(testMessage));\n+    assertTrue(Files.lines(temporaryFile.toPath()).allMatch(testMessage::equals));\n+  }\n+\n+  /**\n+   * Verify if an {@link IOException} during the write ripples through\n+   */\n+  @Test(expected = IOException.class)\n+  public void testIOException() throws Exception {\n+    final File temporaryFile = this.testFolder.newFile();\n+    new SimpleFileWriter(temporaryFile.getPath(), writer -> {\n+      throw new IOException(\"\");\n+    });\n+  }\n+\n+}",
    "output": "Add proper tests for execute-around pattern"
  },
  {
    "input": "diff --git a/composite/src/test/java/com/iluwatar/composite/MessengerTest.java b/composite/src/test/java/com/iluwatar/composite/MessengerTest.java\n--- a/composite/src/test/java/com/iluwatar/composite/MessengerTest.java\n+++ b/composite/src/test/java/com/iluwatar/composite/MessengerTest.java\n@@ -0,0 +1,90 @@\n+package com.iluwatar.composite;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Date: 12/11/15 - 8:12 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class MessengerTest {\n+\n+  /**\n+   * The buffer used to capture every write to {@link System#out}\n+   */\n+  private ByteArrayOutputStream stdOutBuffer = new ByteArrayOutputStream();\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream realStdOut = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    this.stdOutBuffer = new ByteArrayOutputStream();\n+    System.setOut(new PrintStream(stdOutBuffer));\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(realStdOut);\n+  }\n+\n+  /**\n+   * Test the message from the orcs\n+   */\n+  @Test\n+  public void testMessageFromOrcs() {\n+    final Messenger messenger = new Messenger();\n+    testMessage(\n+        messenger.messageFromOrcs(),\n+        \"Where there is a whip there is a way.\"\n+    );\n+  }\n+\n+  /**\n+   * Test the message from the elves\n+   */\n+  @Test\n+  public void testMessageFromElves() {\n+    final Messenger messenger = new Messenger();\n+    testMessage(\n+        messenger.messageFromElves(),\n+        \"Much wind pours from your mouth.\"\n+    );\n+  }\n+\n+  /**\n+   * Test if the given composed message matches the expected message\n+   *\n+   * @param composedMessage The composed message, received from the messenger\n+   * @param message         The expected message\n+   */\n+  private void testMessage(final LetterComposite composedMessage, final String message) {\n+    // Test is the composed message has the correct number of words\n+    final String[] words = message.split(\" \");\n+    assertNotNull(composedMessage);\n+    assertEquals(words.length, composedMessage.count());\n+\n+    // Print the message to the mocked stdOut ...\n+    composedMessage.print();\n+\n+    // ... and verify if the message matches with the expected one\n+    assertEquals(message, new String(this.stdOutBuffer.toByteArray()).trim());\n+  }\n+\n+}",
    "output": "Add proper unit tests for composite pattern"
  },
  {
    "input": "diff --git a/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java\n@@ -1,6 +1,7 @@\n package com.iluwatar.doublechecked.locking;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n@@ -38,4 +39,14 @@ public boolean addItem(Item item) {\n     }\n     return false;\n   }\n+\n+  /**\n+   * Get all the items in the inventory\n+   *\n+   * @return All the items of the inventory, as an unmodifiable list\n+   */\n+  public final List<Item> getItems() {\n+    return Collections.unmodifiableList(items);\n+  }\n+\n }\n\ndiff --git a/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java\n--- a/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java\n+++ b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java\n@@ -0,0 +1,110 @@\n+package com.iluwatar.doublechecked.locking;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import static junit.framework.Assert.assertTrue;\n+import static junit.framework.TestCase.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+/**\n+ * Date: 12/10/15 - 9:34 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class InventoryTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, used to verify a steady increasing size of the\n+   * {@link Inventory} while adding items from multiple threads concurrently\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * The number of threads used to stress test the locking of the {@link Inventory#addItem(Item)}\n+   * method\n+   */\n+  private static final int THREAD_COUNT = 8;\n+\n+  /**\n+   * The maximum number of {@link Item}s allowed in the {@link Inventory}\n+   */\n+  private static final int INVENTORY_SIZE = 1000;\n+\n+  /**\n+   * Concurrently add multiple items to the inventory, and check if the items were added in order by\n+   * checking the stdOut for continuous growth of the inventory. When 'items.size()=xx' shows up out\n+   * of order, it means that the locking is not ok, increasing the risk of going over the inventory\n+   * item limit.\n+   */\n+  @Test(timeout = 10000)\n+  public void testAddItem() throws Exception {\n+    // Create a new inventory with a limit of 1000 items and put some load on the add method\n+    final Inventory inventory = new Inventory(INVENTORY_SIZE);\n+    final ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);\n+    for (int i = 0; i < THREAD_COUNT; i++) {\n+      executorService.execute(() -> {\n+        while (inventory.addItem(new Item())) ;\n+      });\n+    }\n+\n+    // Wait until all threads have finished\n+    executorService.shutdown();\n+    executorService.awaitTermination(5, TimeUnit.SECONDS);\n+\n+    // Check the number of items in the inventory. It should not have exceeded the allowed maximum\n+    final List<Item> items = inventory.getItems();\n+    assertNotNull(items);\n+    assertEquals(INVENTORY_SIZE, items.size());\n+\n+    // Capture all stdOut messages ...\n+    final ArgumentCaptor<String> stdOutCaptor = ArgumentCaptor.forClass(String.class);\n+    verify(this.stdOutMock, times(INVENTORY_SIZE)).println(stdOutCaptor.capture());\n+\n+    // ... verify if we got all 1000\n+    final List<String> values = stdOutCaptor.getAllValues();\n+    assertEquals(INVENTORY_SIZE, values.size());\n+\n+    // ... and check if the inventory size is increasing continuously\n+    for (int i = 0; i < values.size(); i++) {\n+      assertNotNull(values.get(i));\n+      assertTrue(values.get(i).contains(\"items.size()=\" + (i + 1)));\n+    }\n+\n+    verifyNoMoreInteractions(this.stdOutMock);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add proper unit tests for double-checked-locking pattern"
  },
  {
    "input": "diff --git a/facade/src/test/java/com/iluwatar/facade/DwarvenGoldmineFacadeTest.java b/facade/src/test/java/com/iluwatar/facade/DwarvenGoldmineFacadeTest.java\n--- a/facade/src/test/java/com/iluwatar/facade/DwarvenGoldmineFacadeTest.java\n+++ b/facade/src/test/java/com/iluwatar/facade/DwarvenGoldmineFacadeTest.java\n@@ -0,0 +1,103 @@\n+package com.iluwatar.facade;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.PrintStream;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/9/15 - 9:40 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class DwarvenGoldmineFacadeTest {\n+\n+  /**\n+   * The mocked standard out {@link PrintStream}, required since the actions on the gold mine facade\n+   * don't have any influence on any other accessible objects, except for writing to std-out using\n+   * {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  /**\n+   * Test a complete day cycle in the gold mine by executing all three different steps: {@link\n+   * DwarvenGoldmineFacade#startNewDay()}, {@link DwarvenGoldmineFacade#digOutGold()} and {@link\n+   * DwarvenGoldmineFacade#endDay()}.\n+   *\n+   * See if the workers are doing what's expected from them on each step.\n+   */\n+  @Test\n+  public void testFullWorkDay() {\n+    final DwarvenGoldmineFacade goldMine = new DwarvenGoldmineFacade();\n+    goldMine.startNewDay();\n+\n+    // On the start of a day, all workers should wake up ...\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf gold digger wakes up.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf cart operator wakes up.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarven tunnel digger wakes up.\"));\n+\n+    // ... and go to the mine\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf gold digger goes to the mine.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf cart operator goes to the mine.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarven tunnel digger goes to the mine.\"));\n+\n+    // No other actions were invoked, so the workers shouldn't have done (printed) anything else\n+    verifyNoMoreInteractions(this.stdOutMock);\n+\n+    // Now do some actual work, start digging gold!\n+    goldMine.digOutGold();\n+\n+    // Since we gave the dig command, every worker should be doing it's job ...\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf gold digger digs for gold.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf cart operator moves gold chunks out of the mine.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarven tunnel digger creates another promising tunnel.\"));\n+\n+    // Again, they shouldn't be doing anything else.\n+    verifyNoMoreInteractions(this.stdOutMock);\n+\n+    // Enough gold, lets end the day.\n+    goldMine.endDay();\n+\n+    // Check if the workers go home ...\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf gold digger goes home.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf cart operator goes home.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarven tunnel digger goes home.\"));\n+\n+    // ... and go to sleep. We need well rested workers the next day :)\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf gold digger goes to sleep.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarf cart operator goes to sleep.\"));\n+    verify(this.stdOutMock, times(1)).println(eq(\"Dwarven tunnel digger goes to sleep.\"));\n+\n+    // Every worker should be sleeping now, no other actions allowed\n+    verifyNoMoreInteractions(this.stdOutMock);\n+  }\n+\n+}",
    "output": "Add proper unit tests for facade pattern"
  },
  {
    "input": "diff --git a/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n--- a/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n+++ b/front-controller/src/main/java/com/iluwatar/front/controller/FrontController.java\n@@ -25,7 +25,7 @@ private Command getCommand(String request) {\n \tprivate Class getCommandClass(String request) {\n \t\tClass result;\n \t\ttry {\n-\t\t\tresult = Class.forName(\"com.iluwatar.\" + request + \"Command\");\n+\t\t\tresult = Class.forName(\"com.iluwatar.front.controller.\" + request + \"Command\");\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tresult = UnknownCommand.class;\n \t\t}",
    "output": "Just Just a quick fix for the Front-controller pattern."
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/strategy/App.java b/strategy/src/main/java/com/iluwatar/strategy/App.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/App.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java\n@@ -5,6 +5,10 @@\n  * The Strategy pattern (also known as the policy pattern) is a software design pattern that enables\n  * an algorithm's behavior to be selected at runtime.\n  * <p>\n+ * Before Java 8 the Strategies needed to be separate classes forcing the developer\n+ * to write lots of boilerplate code. With modern Java it is easy to pass behavior\n+ * with method references and lambdas making the code shorter and more readable.\n+ * <p>\n  * In this example ({@link DragonSlayingStrategy}) encapsulates an algorithm. The containing object\n  * ({@link DragonSlayer}) can alter its behavior by changing its strategy.\n  * \n@@ -17,6 +21,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n+    // GoF Strategy pattern\n     System.out.println(\"Green dragon spotted ahead!\");\n     DragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());\n     dragonSlayer.goToBattle();\n@@ -26,5 +31,19 @@ public static void main(String[] args) {\n     System.out.println(\"Black dragon lands before you.\");\n     dragonSlayer.changeStrategy(new SpellStrategy());\n     dragonSlayer.goToBattle();\n+\n+    // Java 8 Strategy pattern\n+    System.out.println(\"Green dragon spotted ahead!\");\n+    dragonSlayer = new DragonSlayer(\n+        () -> System.out.println(\"With your Excalibur you severe the dragon's head!\"));\n+    dragonSlayer.goToBattle();\n+    System.out.println(\"Red dragon emerges.\");\n+    dragonSlayer.changeStrategy(() -> System.out.println(\n+        \"You shoot the dragon with the magical crossbow and it falls dead on the ground!\"));\n+    dragonSlayer.goToBattle();\n+    System.out.println(\"Black dragon lands before you.\");\n+    dragonSlayer.changeStrategy(() -> System.out.println(\n+        \"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!\"));\n+    dragonSlayer.goToBattle();\n   }\n }\n\ndiff --git a/strategy/src/main/java/com/iluwatar/strategy/DragonSlayingStrategy.java b/strategy/src/main/java/com/iluwatar/strategy/DragonSlayingStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/DragonSlayingStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/DragonSlayingStrategy.java\n@@ -5,6 +5,7 @@\n  * Strategy interface.\r\n  * \r\n  */\r\n+@FunctionalInterface\r\n public interface DragonSlayingStrategy {\r\n \r\n   void execute();\r",
    "output": "Functional approach to Strategy pattern"
  },
  {
    "input": "diff --git a/decorator/src/test/java/com/iluwatar/decorator/SmartTrollTest.java b/decorator/src/test/java/com/iluwatar/decorator/SmartTrollTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/SmartTrollTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/SmartTrollTest.java\n@@ -0,0 +1,38 @@\n+package com.iluwatar.decorator;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/7/15 - 7:47 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class SmartTrollTest {\n+\n+  @Test\n+  public void testSmartTroll() throws Exception {\n+    // Create a normal troll first, but make sure we can spy on it later on.\n+    final Hostile simpleTroll = spy(new Troll());\n+\n+    // Now we want to decorate the troll to make it smarter ...\n+    final Hostile smartTroll = new SmartTroll(simpleTroll);\n+    assertEquals(30, smartTroll.getAttackPower());\n+    verify(simpleTroll, times(1)).getAttackPower();\n+\n+    // Check if the smart troll actions are delegated to the decorated troll\n+    smartTroll.attack();\n+    verify(simpleTroll, times(1)).attack();\n+\n+    smartTroll.fleeBattle();\n+    verify(simpleTroll, times(1)).fleeBattle();\n+    verifyNoMoreInteractions(simpleTroll);\n+\n+  }\n+\n+}\n\ndiff --git a/decorator/src/test/java/com/iluwatar/decorator/TrollTest.java b/decorator/src/test/java/com/iluwatar/decorator/TrollTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/TrollTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/TrollTest.java\n@@ -0,0 +1,66 @@\n+package com.iluwatar.decorator;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.PrintStream;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/7/15 - 7:26 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class TrollTest {\n+\n+  /**\n+   * The mocked standard out stream, required since the actions don't have any influence on other\n+   * objects, except for writing to the std-out using {@link System#out}\n+   */\n+  private final PrintStream stdOutMock = mock(PrintStream.class);\n+\n+  /**\n+   * Keep the original std-out so it can be restored after the test\n+   */\n+  private final PrintStream stdOutOrig = System.out;\n+\n+  /**\n+   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test\n+   */\n+  @Before\n+  public void setUp() {\n+    System.setOut(this.stdOutMock);\n+  }\n+\n+  /**\n+   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class\n+   */\n+  @After\n+  public void tearDown() {\n+    System.setOut(this.stdOutOrig);\n+  }\n+\n+  @Test\n+  public void testTrollActions() throws Exception {\n+    final Troll troll = new Troll();\n+    assertEquals(10, troll.getAttackPower());\n+\n+    troll.attack();\n+    verify(this.stdOutMock, times(1)).println(eq(\"The troll swings at you with a club!\"));\n+\n+    troll.fleeBattle();\n+    verify(this.stdOutMock, times(1)).println(eq(\"The troll shrieks in horror and runs away!\"));\n+\n+    verifyNoMoreInteractions(this.stdOutMock);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add proper unit tests for decorator pattern"
  },
  {
    "input": "diff --git a/bridge/src/test/java/com/iluwatar/bridge/BlindingMagicWeaponTest.java b/bridge/src/test/java/com/iluwatar/bridge/BlindingMagicWeaponTest.java\n--- a/bridge/src/test/java/com/iluwatar/bridge/BlindingMagicWeaponTest.java\n+++ b/bridge/src/test/java/com/iluwatar/bridge/BlindingMagicWeaponTest.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar.bridge;\n+\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/6/15 - 11:15 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class BlindingMagicWeaponTest extends MagicWeaponTest {\n+\n+  /**\n+   * Invoke all possible actions on the weapon and check if the actions are executed on the actual\n+   * underlying weapon implementation.\n+   */\n+  @Test\n+  public void testExcalibur() throws Exception {\n+    final Excalibur excalibur = spy(new Excalibur());\n+    final BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(excalibur);\n+\n+    testBasicWeaponActions(blindingMagicWeapon, excalibur);\n+\n+    blindingMagicWeapon.blind();\n+    verify(excalibur, times(1)).blindImp();\n+    verifyNoMoreInteractions(excalibur);\n+  }\n+\n+}\n\ndiff --git a/bridge/src/test/java/com/iluwatar/bridge/FlyingMagicWeaponTest.java b/bridge/src/test/java/com/iluwatar/bridge/FlyingMagicWeaponTest.java\n--- a/bridge/src/test/java/com/iluwatar/bridge/FlyingMagicWeaponTest.java\n+++ b/bridge/src/test/java/com/iluwatar/bridge/FlyingMagicWeaponTest.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar.bridge;\n+\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/6/15 - 11:26 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class FlyingMagicWeaponTest extends MagicWeaponTest {\n+\n+  /**\n+   * Invoke all possible actions on the weapon and check if the actions are executed on the actual\n+   * underlying weapon implementation.\n+   */\n+  @Test\n+  public void testMjollnir() throws Exception {\n+    final Mjollnir mjollnir = spy(new Mjollnir());\n+    final FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(mjollnir);\n+\n+    testBasicWeaponActions(flyingMagicWeapon, mjollnir);\n+\n+    flyingMagicWeapon.fly();\n+    verify(mjollnir, times(1)).flyImp();\n+    verifyNoMoreInteractions(mjollnir);\n+  }\n+\n+}\n\\ No newline at end of file\n\ndiff --git a/bridge/src/test/java/com/iluwatar/bridge/MagicWeaponTest.java b/bridge/src/test/java/com/iluwatar/bridge/MagicWeaponTest.java\n--- a/bridge/src/test/java/com/iluwatar/bridge/MagicWeaponTest.java\n+++ b/bridge/src/test/java/com/iluwatar/bridge/MagicWeaponTest.java\n@@ -0,0 +1,42 @@\n+package com.iluwatar.bridge;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/6/15 - 11:28 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public abstract class MagicWeaponTest {\n+\n+  /**\n+   * Invoke the basic actions of the given weapon, and test if the underlying weapon implementation\n+   * is invoked\n+   *\n+   * @param weaponImpl The spied weapon implementation where actions are bridged to\n+   * @param weapon               The weapon, handled by the app\n+   */\n+  protected final void testBasicWeaponActions(final MagicWeapon weapon,\n+                                              final MagicWeaponImpl weaponImpl) {\n+    assertNotNull(weapon);\n+    assertNotNull(weaponImpl);\n+    assertNotNull(weapon.getImp());\n+\n+    weapon.swing();\n+    verify(weaponImpl, times(1)).swingImp();\n+    verifyNoMoreInteractions(weaponImpl);\n+\n+    weapon.wield();\n+    verify(weaponImpl, times(1)).wieldImp();\n+    verifyNoMoreInteractions(weaponImpl);\n+\n+    weapon.unwield();\n+    verify(weaponImpl, times(1)).unwieldImp();\n+    verifyNoMoreInteractions(weaponImpl);\n+\n+  }\n+\n+}\n\ndiff --git a/bridge/src/test/java/com/iluwatar/bridge/SoulEatingMagicWeaponTest.java b/bridge/src/test/java/com/iluwatar/bridge/SoulEatingMagicWeaponTest.java\n--- a/bridge/src/test/java/com/iluwatar/bridge/SoulEatingMagicWeaponTest.java\n+++ b/bridge/src/test/java/com/iluwatar/bridge/SoulEatingMagicWeaponTest.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar.bridge;\n+\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+/**\n+ * Date: 12/6/15 - 11:43 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class SoulEatingMagicWeaponTest extends MagicWeaponTest {\n+\n+  /**\n+   * Invoke all possible actions on the weapon and check if the actions are executed on the actual\n+   * underlying weapon implementation.\n+   */\n+  @Test\n+  public void testStormBringer() throws Exception {\n+    final Stormbringer stormbringer = spy(new Stormbringer());\n+    final SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(stormbringer);\n+\n+    testBasicWeaponActions(soulEatingMagicWeapon, stormbringer);\n+\n+    soulEatingMagicWeapon.eatSoul();\n+    verify(stormbringer, times(1)).eatSoulImp();\n+    verifyNoMoreInteractions(stormbringer);\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add proper unit tests for bridge pattern"
  },
  {
    "input": "diff --git a/builder/src/test/java/com/iluwatar/builder/HeroTest.java b/builder/src/test/java/com/iluwatar/builder/HeroTest.java\n--- a/builder/src/test/java/com/iluwatar/builder/HeroTest.java\n+++ b/builder/src/test/java/com/iluwatar/builder/HeroTest.java\n@@ -0,0 +1,56 @@\n+package com.iluwatar.builder;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Date: 12/6/15 - 11:01 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class HeroTest {\n+\n+  /**\n+   * Test if we get the expected exception when trying to create a hero without a profession\n+   */\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testMissingProfession() throws Exception {\n+    new Hero.HeroBuilder(null, \"Sir without a job\");\n+  }\n+\n+  /**\n+   * Test if we get the expected exception when trying to create a hero without a name\n+   */\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testMissingName() throws Exception {\n+    new Hero.HeroBuilder(Profession.THIEF, null);\n+  }\n+\n+  /**\n+   * Test if the hero build by the builder has the correct attributes, as requested\n+   */\n+  @Test\n+  public void testBuildHero() throws Exception {\n+    final String heroName = \"Sir Lancelot\";\n+\n+    final Hero hero = new Hero.HeroBuilder(Profession.WARRIOR, heroName)\n+        .withArmor(Armor.CHAIN_MAIL)\n+        .withWeapon(Weapon.SWORD)\n+        .withHairType(HairType.LONG_CURLY)\n+        .withHairColor(HairColor.BLOND)\n+        .build();\n+\n+    assertNotNull(hero);\n+    assertNotNull(hero.toString());\n+    assertEquals(Profession.WARRIOR, hero.getProfession());\n+    assertEquals(heroName, hero.getName());\n+    assertEquals(Armor.CHAIN_MAIL, hero.getArmor());\n+    assertEquals(Weapon.SWORD, hero.getWeapon());\n+    assertEquals(HairType.LONG_CURLY, hero.getHairType());\n+    assertEquals(HairColor.BLOND, hero.getHairColor());\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add proper unit tests for builder pattern"
  },
  {
    "input": "diff --git a/chain/src/main/java/com/iluwatar/chain/OrcCommander.java b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java\n--- a/chain/src/main/java/com/iluwatar/chain/OrcCommander.java\n+++ b/chain/src/main/java/com/iluwatar/chain/OrcCommander.java\n@@ -15,6 +15,7 @@ public OrcCommander(RequestHandler handler) {\n   public void handleRequest(Request req) {\n     if (req.getRequestType().equals(RequestType.DEFEND_CASTLE)) {\n       printHandling(req);\n+      req.markHandled();\n     } else {\n       super.handleRequest(req);\n     }\n\ndiff --git a/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java\n--- a/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java\n+++ b/chain/src/main/java/com/iluwatar/chain/OrcOfficer.java\n@@ -15,6 +15,7 @@ public OrcOfficer(RequestHandler handler) {\n   public void handleRequest(Request req) {\n     if (req.getRequestType().equals(RequestType.TORTURE_PRISONER)) {\n       printHandling(req);\n+      req.markHandled();\n     } else {\n       super.handleRequest(req);\n     }\n\ndiff --git a/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java b/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java\n--- a/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java\n+++ b/chain/src/main/java/com/iluwatar/chain/OrcSoldier.java\n@@ -15,6 +15,7 @@ public OrcSoldier(RequestHandler handler) {\n   public void handleRequest(Request req) {\n     if (req.getRequestType().equals(RequestType.COLLECT_TAX)) {\n       printHandling(req);\n+      req.markHandled();\n     } else {\n       super.handleRequest(req);\n     }\n\ndiff --git a/chain/src/main/java/com/iluwatar/chain/Request.java b/chain/src/main/java/com/iluwatar/chain/Request.java\n--- a/chain/src/main/java/com/iluwatar/chain/Request.java\n+++ b/chain/src/main/java/com/iluwatar/chain/Request.java\n@@ -1,38 +1,78 @@\n package com.iluwatar.chain;\n \n+import java.util.Objects;\n+\n /**\n- * \n  * Request\n- *\n  */\n public class Request {\n \n-  private String requestDescription;\n-  private RequestType requestType;\n+  /**\n+   * The type of this request, used by each item in the chain to see if they should or can handle\n+   * this particular request\n+   */\n+  private final RequestType requestType;\n+\n+  /**\n+   * A description of the request\n+   */\n+  private final String requestDescription;\n \n-  public Request(RequestType requestType, String requestDescription) {\n-    this.setRequestType(requestType);\n-    this.setRequestDescription(requestDescription);\n+  /**\n+   * Indicates if the request is handled or not. A request can only switch state from unhandled to\n+   * handled, there's no way to 'unhandle' a request\n+   */\n+  private boolean handled = false;\n+\n+  /**\n+   * Create a new request of the given type and accompanied description.\n+   *\n+   * @param requestType        The type of request\n+   * @param requestDescription The description of the request\n+   */\n+  public Request(final RequestType requestType, final String requestDescription) {\n+    this.requestType = Objects.requireNonNull(requestType);\n+    this.requestDescription = Objects.requireNonNull(requestDescription);\n   }\n \n+  /**\n+   * Get a description of the request\n+   *\n+   * @return A human readable description of the request\n+   */\n   public String getRequestDescription() {\n     return requestDescription;\n   }\n \n-  public void setRequestDescription(String requestDescription) {\n-    this.requestDescription = requestDescription;\n-  }\n-\n+  /**\n+   * Get the type of this request, used by each person in the chain of command to see if they should\n+   * or can handle this particular request\n+   *\n+   * @return The request type\n+   */\n   public RequestType getRequestType() {\n     return requestType;\n   }\n \n-  public void setRequestType(RequestType requestType) {\n-    this.requestType = requestType;\n+  /**\n+   * Mark the request as handled\n+   */\n+  public void markHandled() {\n+    this.handled = true;\n+  }\n+\n+  /**\n+   * Indicates if this request is handled or not\n+   *\n+   * @return <tt>true</tt> when the request is handled, <tt>false</tt> if not\n+   */\n+  public boolean isHandled() {\n+    return this.handled;\n   }\n \n   @Override\n   public String toString() {\n     return getRequestDescription();\n   }\n+\n }\n\ndiff --git a/chain/src/test/java/com/iluwatar/chain/OrcKingTest.java b/chain/src/test/java/com/iluwatar/chain/OrcKingTest.java\n--- a/chain/src/test/java/com/iluwatar/chain/OrcKingTest.java\n+++ b/chain/src/test/java/com/iluwatar/chain/OrcKingTest.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar.chain;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Date: 12/6/15 - 9:29 PM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class OrcKingTest {\n+\n+  /**\n+   * All possible requests\n+   */\n+  private static final Request[] REQUESTS = new Request[]{\n+      new Request(RequestType.DEFEND_CASTLE, \"Don't let the barbarians enter my castle!!\"),\n+      new Request(RequestType.TORTURE_PRISONER, \"Don't just stand there, tickle him!\"),\n+      new Request(RequestType.COLLECT_TAX, \"Don't steal, the King hates competition ...\"),\n+  };\n+\n+  @Test\n+  public void testMakeRequest() throws Exception {\n+    final OrcKing king = new OrcKing();\n+\n+    for (final Request request : REQUESTS) {\n+      king.makeRequest(request);\n+      assertTrue(\n+          \"Expected all requests from King to be handled, but [\" + request + \"] was not!\",\n+          request.isHandled()\n+      );\n+    }\n+\n+  }\n+\n+}\n\\ No newline at end of file",
    "output": "Add proper unit tests for chain pattern"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/BattleFishingBoat.java b/adapter/src/main/java/com/iluwatar/adapter/BattleFishingBoat.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/BattleFishingBoat.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/BattleFishingBoat.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar.adapter;\n+\n+/**\n+ * \n+ * Adapter class. Adapts the interface of the device ({@link FishingBoat}) into {@link BattleShip}\n+ * interface expected by the client ({@link Captain}). <br>\n+ * In this case we added a new function fire to suit the interface. We are reusing the\n+ * {@link FishingBoat} without changing itself. The Adapter class can just map the functions of the\n+ * Adaptee or add, delete features of the Adaptee.\n+ * \n+ */\n+public class BattleFishingBoat implements BattleShip {\n+\n+  private FishingBoat boat;\n+\n+  public BattleFishingBoat() {\n+    boat = new FishingBoat();\n+  }\n+\n+  @Override\n+  public void fire() {\n+    System.out.println(\"fire!\");\n+  }\n+\n+  @Override\n+  public void move() {\n+    boat.sail();\n+  }\n+}\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/BattleShip.java b/adapter/src/main/java/com/iluwatar/adapter/BattleShip.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/BattleShip.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/BattleShip.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar.adapter;\n+\n+/**\n+ * The interface expected by the client.<br>\n+ * A Battleship can fire and move.\n+ * \n+ */\n+public interface BattleShip {\n+\n+  void fire();\n+\n+  void move();\n+\n+}\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/Captain.java b/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/Captain.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar.adapter;\n+\n+/**\n+ * The Captain uses {@link BattleShip} to fight. <br>\n+ * This is the client in the pattern.\n+ */\n+public class Captain implements BattleShip {\n+\n+  private BattleShip battleship;\n+\n+  public Captain() {\n+\n+  }\n+\n+  public Captain(BattleShip battleship) {\n+    this.battleship = battleship;\n+  }\n+\n+  public void setBattleship(BattleShip battleship) {\n+    this.battleship = battleship;\n+  }\n+\n+  @Override\n+  public void fire() {\n+    battleship.fire();\n+  }\n+\n+  @Override\n+  public void move() {\n+    battleship.move();\n+  }\n+\n+}\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java b/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/FishingBoat.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar.adapter;\n+\n+/**\n+ * \n+ * Device class (adaptee in the pattern). We want to reuse this class\n+ * \n+ */\n+public class FishingBoat {\n+\n+  public void sail() {\n+    System.out.println(\"The Boat is moving to that place\");\n+  }\n+\n+  public void fish() {\n+    System.out.println(\"fishing ...\");\n+  }\n+\n+}",
    "output": "The new java files was not added.."
  },
  {
    "input": "diff --git a/event-driven-architecture/src/test/java/EventDrivenTest.java b/event-driven-architecture/src/test/java/EventDrivenTest.java\n--- a/event-driven-architecture/src/test/java/EventDrivenTest.java\n+++ b/event-driven-architecture/src/test/java/EventDrivenTest.java\n@@ -1,36 +1,42 @@\n import com.iluwatar.eda.EventDispatcher;\n+import com.iluwatar.eda.event.Event;\n import com.iluwatar.eda.event.UserCreatedEvent;\n import com.iluwatar.eda.event.UserUpdatedEvent;\n import com.iluwatar.eda.handler.UserCreatedEventHandler;\n import com.iluwatar.eda.handler.UserUpdatedEventHandler;\n import com.iluwatar.eda.model.User;\n \n import org.junit.Test;\n-\n-\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n-\n import static org.junit.Assert.assertEquals;\n \n+\n+/**\n+ * Event Driven Pattern unit tests to assert and verify correct pattern behaviour\n+ */\n public class EventDrivenTest {\n \n+  /**\n+   * This unit test should register events and event handlers correctly with the event dispatcher\n+   * and events should be dispatched accordingly.\n+   */\n   @Test\n-  public void testEventDriverPattern(){\n+  public void testEventDriverPattern() {\n \n     EventDispatcher dispatcher = spy(new EventDispatcher());\n-    UserCreatedEventHandler userCreatedEventHandler =  new UserCreatedEventHandler();\n+    UserCreatedEventHandler userCreatedEventHandler = new UserCreatedEventHandler();\n     UserUpdatedEventHandler userUpdatedEventHandler = new UserUpdatedEventHandler();\n     dispatcher.registerChannel(UserCreatedEvent.class, userCreatedEventHandler);\n     dispatcher.registerChannel(UserUpdatedEvent.class, userUpdatedEventHandler);\n \n     assertEquals(\"Two handlers must be registered\", 2, dispatcher.getHandlers().size());\n     assertEquals(\"UserCreatedEvent must return the UserCreatedEventHandler\",\n             userCreatedEventHandler,\n-            (UserCreatedEventHandler)dispatcher.getHandlers().get(UserCreatedEvent.class));\n+            (UserCreatedEventHandler) dispatcher.getHandlers().get(UserCreatedEvent.class));\n     assertEquals(\"UserUpdatedEvent must be registered to the UserUpdatedEventHandler\",\n             userUpdatedEventHandler,\n-            (UserUpdatedEventHandler)dispatcher.getHandlers().get(UserUpdatedEvent.class));\n+            (UserUpdatedEventHandler) dispatcher.getHandlers().get(UserUpdatedEvent.class));\n \n     User user = new User(\"iluwatar\");\n \n@@ -42,6 +48,16 @@ public void testEventDriverPattern(){\n     //verify that the events have been dispatched\n     verify(dispatcher).dispatch(userCreatedEvent);\n     verify(dispatcher).dispatch(userUpdatedEvent);\n+  }\n \n+  /**\n+   * This unit test should correctly return the {@link Event} class type when calling the\n+   * {@link Event#getType() getType} method.\n+   */\n+  @Test\n+  public void testGetEventType() {\n+    User user = new User(\"iluwatar\");\n+    UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);\n+    assertEquals(UserCreatedEvent.class, userCreatedEvent.getType());\n   }\n }",
    "output": "Event Driven Architecture\nAdds unit test to assert and verify pattern event get type behaviour.\nAlso added unit test comments."
  },
  {
    "input": "diff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java\n@@ -39,4 +39,12 @@ public void registerChannel(Class<? extends Event> contentType,\n   public void dispatch(Event content) {\n     handlers.get(content.getClass()).dispatch(content);\n   }\n+\n+  /**\n+   * Returns a map of registered event handlers.\n+   * @return {@Map} of registered event handlers.\n+   */\n+  public Map<Class<? extends Event>, Channel<?>> getHandlers() {\n+    return handlers;\n+  }\n }\n\\ No newline at end of file\n\ndiff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/event/UserCreatedEvent.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/event/UserCreatedEvent.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/event/UserCreatedEvent.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/event/UserCreatedEvent.java\n@@ -15,7 +15,6 @@ public UserCreatedEvent(User user) {\n     this.user = user;\n   }\n \n-\n   public User getUser() {\n     return user;\n   }\n\ndiff --git a/event-driven-architecture/src/test/java/EventDrivenTest.java b/event-driven-architecture/src/test/java/EventDrivenTest.java\n--- a/event-driven-architecture/src/test/java/EventDrivenTest.java\n+++ b/event-driven-architecture/src/test/java/EventDrivenTest.java\n@@ -0,0 +1,47 @@\n+import com.iluwatar.eda.EventDispatcher;\n+import com.iluwatar.eda.event.UserCreatedEvent;\n+import com.iluwatar.eda.event.UserUpdatedEvent;\n+import com.iluwatar.eda.handler.UserCreatedEventHandler;\n+import com.iluwatar.eda.handler.UserUpdatedEventHandler;\n+import com.iluwatar.eda.model.User;\n+\n+import org.junit.Test;\n+\n+\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class EventDrivenTest {\n+\n+  @Test\n+  public void testEventDriverPattern(){\n+\n+    EventDispatcher dispatcher = spy(new EventDispatcher());\n+    UserCreatedEventHandler userCreatedEventHandler =  new UserCreatedEventHandler();\n+    UserUpdatedEventHandler userUpdatedEventHandler = new UserUpdatedEventHandler();\n+    dispatcher.registerChannel(UserCreatedEvent.class, userCreatedEventHandler);\n+    dispatcher.registerChannel(UserUpdatedEvent.class, userUpdatedEventHandler);\n+\n+    assertEquals(\"Two handlers must be registered\", 2, dispatcher.getHandlers().size());\n+    assertEquals(\"UserCreatedEvent must return the UserCreatedEventHandler\",\n+            userCreatedEventHandler,\n+            (UserCreatedEventHandler)dispatcher.getHandlers().get(UserCreatedEvent.class));\n+    assertEquals(\"UserUpdatedEvent must be registered to the UserUpdatedEventHandler\",\n+            userUpdatedEventHandler,\n+            (UserUpdatedEventHandler)dispatcher.getHandlers().get(UserUpdatedEvent.class));\n+\n+    User user = new User(\"iluwatar\");\n+\n+    UserCreatedEvent userCreatedEvent = new UserCreatedEvent(user);\n+    UserUpdatedEvent userUpdatedEvent = new UserUpdatedEvent(user);\n+    dispatcher.dispatch(userCreatedEvent);\n+    dispatcher.dispatch(userUpdatedEvent);\n+\n+    //verify that the events have been dispatched\n+    verify(dispatcher).dispatch(userCreatedEvent);\n+    verify(dispatcher).dispatch(userUpdatedEvent);\n+\n+  }\n+}",
    "output": "Event Driven Architecture\nAdds unit test to assert and verify pattern behaviour"
  },
  {
    "input": "diff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserCreatedEventHandler.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserCreatedEventHandler.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserCreatedEventHandler.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserCreatedEventHandler.java\n@@ -1,6 +1,5 @@\n package com.iluwatar.eda.advanced.handler;\n \n-import com.iluwatar.eda.advanced.events.Event;\n import com.iluwatar.eda.advanced.events.UserCreatedEvent;\n import com.iluwatar.eda.advanced.framework.Channel;\n \n\ndiff --git a/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserUpdatedEventHandler.java b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserUpdatedEventHandler.java\n--- a/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserUpdatedEventHandler.java\n+++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/advanced/handler/UserUpdatedEventHandler.java\n@@ -1,6 +1,5 @@\n package com.iluwatar.eda.advanced.handler;\n \n-import com.iluwatar.eda.advanced.events.Event;\n import com.iluwatar.eda.advanced.events.UserUpdatedEvent;\n import com.iluwatar.eda.advanced.framework.Channel;\n ",
    "output": "Event Driven Architecture\n- removed unused imports"
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java b/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/ElfWeapon.java\n@@ -1,9 +1,7 @@\n package com.iluwatar.factory.method;\n \n /**\n- * \n- * ElfWeapon\n- *\n+ * ElfWeapon.\n  */\n public class ElfWeapon implements Weapon {\n \n@@ -17,4 +15,9 @@ public ElfWeapon(WeaponType weaponType) {\n   public String toString() {\n     return \"Elven \" + weaponType;\n   }\n+\n+  @Override\n+  public WeaponType getWeaponType() {\n+    return weaponType;\n+  }\n }\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java b/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/OrcWeapon.java\n@@ -1,9 +1,7 @@\n package com.iluwatar.factory.method;\n \n /**\n- * \n- * OrcWeapon\n- *\n+ * OrcWeapon.\n  */\n public class OrcWeapon implements Weapon {\n \n@@ -17,4 +15,9 @@ public OrcWeapon(WeaponType weaponType) {\n   public String toString() {\n     return \"Orcish \" + weaponType;\n   }\n+\n+  @Override\n+  public WeaponType getWeaponType() {\n+    return weaponType;\n+  }\n }\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java b/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java\n--- a/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/factory/method/Weapon.java\n@@ -1,10 +1,10 @@\n package com.iluwatar.factory.method;\n \n /**\n- * \n- * Weapon interface\n- *\n+ * Weapon interface.\n  */\n public interface Weapon {\n \n+  WeaponType getWeaponType();\n+\n }\n\ndiff --git a/factory-method/src/test/java/com/iluwatar/factory/method/AppTest.java b/factory-method/src/test/java/com/iluwatar/factory/method/AppTest.java\n--- a/factory-method/src/test/java/com/iluwatar/factory/method/AppTest.java\n+++ b/factory-method/src/test/java/com/iluwatar/factory/method/AppTest.java\n@@ -1,19 +0,0 @@\n-package com.iluwatar.factory.method;\n-\n-import org.junit.Test;\n-\n-import com.iluwatar.factory.method.App;\n-\n-/**\n- * \n- * Application test\n- *\n- */\n-public class AppTest {\n-\n-  @Test\n-  public void test() {\n-    String[] args = {};\n-    App.main(args);\n-  }\n-}\n\ndiff --git a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n--- a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n@@ -0,0 +1,79 @@\n+package com.iluwatar.factory.method;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+/**\n+ * The Factory Method is a creational design pattern which uses factory methods to deal with the\n+ * problem of creating objects without specifying the exact class of object that will be created.\n+ * This is done by creating objects via calling a factory method either specified in an interface\n+ * and implemented by child classes, or implemented in a base class and optionally overridden by\n+ * derived classes—rather than by calling a constructor.\n+ * \n+ * <p>Factory produces the object of its liking. \n+ * The weapon {@link Weapon} manufactured by the\n+ * blacksmith depends on the kind of factory implementation it is referring to.\n+ * </p>\n+ */\n+public class FactoryMethodTest {\n+\n+  /**\n+   * Testing {@link OrcBlacksmith} to produce a SPEAR asserting that the Weapon is an instance \n+   * of {@link OrcWeapon}.\n+   */\n+  @Test\n+  public void testOrcBlacksmithWithSpear() {\n+    Blacksmith blacksmith = new OrcBlacksmith();\n+    Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\n+    verifyWeapon(weapon, WeaponType.SPEAR, OrcWeapon.class);\n+  }\n+\n+  /**\n+   * Testing {@link OrcBlacksmith} to produce a AXE asserting that the Weapon is an instance\n+   *  of {@link OrcWeapon}.\n+   */\n+  @Test\n+  public void testOrcBlacksmithWithAxe() {\n+    Blacksmith blacksmith = new OrcBlacksmith();\n+    Weapon weapon = blacksmith.manufactureWeapon(WeaponType.AXE);\n+    verifyWeapon(weapon, WeaponType.AXE, OrcWeapon.class);\n+  }\n+\n+  /**\n+   * Testing {@link ElfBlacksmith} to produce a SHORT_SWORD asserting that the Weapon is an\n+   * instance of {@link ElfWeapon}.\n+   */\n+  @Test\n+  public void testElfBlacksmithWithShortSword() {\n+    Blacksmith blacksmith = new ElfBlacksmith();\n+    Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);\n+    verifyWeapon(weapon, WeaponType.SHORT_SWORD, ElfWeapon.class);\n+  }\n+\n+  /**\n+   * Testing {@link ElfBlacksmith} to produce a SPEAR asserting that the Weapon is an instance\n+   * of {@link ElfWeapon}.\n+   */\n+  @Test\n+  public void testElfBlacksmithWithSpear() {\n+    Blacksmith blacksmith = new ElfBlacksmith();\n+    Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\n+    verifyWeapon(weapon, WeaponType.SPEAR, ElfWeapon.class);\n+  }\n+\n+  /**\n+   * This method asserts that the weapon object that is passed is an instance of the clazz and the\n+   * weapon is of type expectedWeaponType.\n+   * \n+   * @param weapon weapon object which is to be verified\n+   * @param expectedWeaponType expected WeaponType of the weapon\n+   * @param clazz expected class of the weapon\n+   */\n+  private void verifyWeapon(Weapon weapon, WeaponType expectedWeaponType, Class clazz) {\n+    assertTrue(\"Weapon must be an object of: \" + clazz.getName(), clazz.isInstance(weapon));\n+    assertEquals(\"Weapon must be of weaponType: \" + clazz.getName(), expectedWeaponType,\n+        weapon.getWeaponType());\n+  }\n+}",
    "output": "Add UnitTest cases for factory method."
  },
  {
    "input": "diff --git a/command/src/test/java/com/iluwatar/command/AppTest.java b/command/src/test/java/com/iluwatar/command/AppTest.java\n--- a/command/src/test/java/com/iluwatar/command/AppTest.java\n+++ b/command/src/test/java/com/iluwatar/command/AppTest.java\n@@ -1,19 +0,0 @@\n-package com.iluwatar.command;\n-\n-import org.junit.Test;\n-\n-import com.iluwatar.command.App;\n-\n-/**\n- * \n- * Application test\n- *\n- */\n-public class AppTest {\n-\n-  @Test\n-  public void test() {\n-    String[] args = {};\n-    App.main(args);\n-  }\n-}\n\ndiff --git a/command/src/test/java/com/iluwatar/command/CommandTest.java b/command/src/test/java/com/iluwatar/command/CommandTest.java\n--- a/command/src/test/java/com/iluwatar/command/CommandTest.java\n+++ b/command/src/test/java/com/iluwatar/command/CommandTest.java\n@@ -0,0 +1,71 @@\n+package com.iluwatar.command;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+/**\n+ * The Command pattern is a behavioral design pattern in which an object is used to encapsulate all\n+ * information needed to perform an action or trigger an event at a later time. This information\n+ * includes the method name, the object that owns the method and values for the method parameters.\n+ * \n+ * <p>Four terms always associated with the command pattern are command, receiver, invoker and \n+ * client. A command object (spell) knows about the receiver (target) and invokes a method of \n+ * the receiver.Values for parameters of the receiver method are stored in the command. The receiver\n+ * then does the work. An invoker object (wizard) knows how to execute a command, and optionally \n+ * does bookkeeping about the command execution. The invoker does not know anything about a \n+ * concrete command, it knows only about command interface. Both an invoker object and several \n+ * command objects are held by a client object (app). The client decides which commands to execute\n+ * at which points. To execute a command, it passes the command object to the invoker object.\n+ */\n+public class CommandTest {\n+\n+  private static final String GOBLIN = \"Goblin\";\n+\n+  /**\n+   * This test verifies that when the wizard casts spells on the goblin. The wizard keeps track of\n+   * the previous spells cast, so it is easy to undo them. In addition, it also verifies that the\n+   * wizard keeps track of the spells undone, so they can be redone.\n+   */\n+  @Test\n+  public void testCommand() {\n+\n+    Wizard wizard = new Wizard();\n+    Goblin goblin = new Goblin();\n+\n+    wizard.castSpell(new ShrinkSpell(), goblin);\n+    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.VISIBLE);\n+\n+    wizard.castSpell(new InvisibilitySpell(), goblin);\n+    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.INVISIBLE);\n+\n+    wizard.undoLastSpell();\n+    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.VISIBLE);\n+\n+    wizard.undoLastSpell();\n+    verifyGoblin(goblin, GOBLIN, Size.NORMAL, Visibility.VISIBLE);\n+\n+    wizard.redoLastSpell();\n+    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.VISIBLE);\n+\n+    wizard.redoLastSpell();\n+    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.INVISIBLE);\n+  }\n+\n+  /**\n+   * This method asserts that the passed goblin object has the name as expectedName, size as\n+   * expectedSize and visibility as expectedVisibility.\n+   *\n+   * @param goblin a goblin object whose state is to be verified against other parameters\n+   * @param expectedName expectedName of the goblin\n+   * @param expectedSize expected size of the goblin\n+   * @param expectedVisibilty exepcted visibility of the goblin\n+   */\n+  private void verifyGoblin(Goblin goblin, String expectedName, Size expectedSize,\n+      Visibility expectedVisibilty) {\n+    assertEquals(\"Goblin's name must be same as expectedName\", expectedName, goblin.toString());\n+    assertEquals(\"Goblin's size must be same as expectedSize\", expectedSize, goblin.getSize());\n+    assertEquals(\"Goblin's visibility must be same as expectedVisibility\", expectedVisibilty,\n+        goblin.getVisibility());\n+  }\n+}",
    "output": "Add UnitTest cases for command."
  },
  {
    "input": "diff --git a/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java b/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n--- a/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n+++ b/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n@@ -1,29 +1,27 @@\n package com.iluwatar.publish.subscribe;\n \n import org.apache.camel.CamelContext;\n+import org.apache.camel.ProducerTemplate;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.impl.DefaultCamelContext;\n \n /**\n  * \n- * When applications communicate with each other using a messaging system they first need to\n- * establish a communication channel that will carry the data. Message Channel decouples Message\n- * producers (publisher) and consumers (subscriber).\n+ * There are well-established patterns for implementing broadcasting. The Observer pattern describes\n+ * the need to decouple observers from their subject (that is, the originator of the event) so that\n+ * the subject can easily provide event notification to all interested observers no matter how many\n+ * observers there are (even none). The Publish-Subscribe pattern expands upon Observer by adding\n+ * the notion of an event channel for communicating event notifications.\n  * <p>\n- * The sending application doesn't necessarily know what particular applications will end up\n- * retrieving it, but it can be assured that the application that retrieves the information is\n- * interested in that information. This is because the messaging system has different Message\n- * Channels for different types of information the applications want to communicate. When an\n- * application sends information, it doesn't randomly add the information to any channel available;\n- * it adds it to a channel whose specific purpose is to communicate that sort of information.\n- * Likewise, an application that wants to receive particular information doesn't pull info off some\n- * random channel; it selects what channel to get information from based on what type of information\n- * it wants.\n+ * A Publish-Subscribe Channel works like this: It has one input channel that splits into multiple\n+ * output channels, one for each subscriber. When an event is published into the channel, the\n+ * Publish-Subscribe Channel delivers a copy of the message to each of the output channels. Each\n+ * output end of the channel has only one subscriber, which is allowed to consume a message only\n+ * once. In this way, each subscriber gets the message only once, and consumed copies disappear from\n+ * their channels.\n  * <p>\n- * In this example we use Apache Camel to establish different Message Channels. The first one reads\n- * from standard input and delivers messages to Direct endpoints (Publish; Broadcast). The other\n- * Message Channels are established from the Direct component to different Endpoints (Subscriber).\n- * No actual messages are sent, only the established routes are printed to standard output.\n+ * In this example we use Apache Camel to establish a Publish-Subscribe Channel from \"direct-origin\"\n+ * to \"mock:foo\", \"mock:bar\" and \"stream:out\".\n  * \n  */\n public class App {\n@@ -37,18 +35,16 @@ public class App {\n    */\n   public static void main(String[] args) throws Exception {\n     CamelContext context = new DefaultCamelContext();\n-\n     context.addRoutes(new RouteBuilder() {\n-\n       @Override\n       public void configure() throws Exception {\n-        from(\"stream:in\").multicast().to(\"direct:greetings1\", \"direct:greetings2\",\n-            \"direct:greetings3\");\n+        from(\"direct:origin\").multicast().to(\"mock:foo\", \"mock:bar\", \"stream:out\");\n       }\n     });\n-\n+    ProducerTemplate template = context.createProducerTemplate();\n     context.start();\n     context.getRoutes().stream().forEach((r) -> System.out.println(r));\n+    template.sendBody(\"direct:origin\", \"Hello from origin\");\n     context.stop();\n   }\n }",
    "output": "Improve the example and documentation"
  },
  {
    "input": "diff --git a/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java b/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n--- a/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n+++ b/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n@@ -6,50 +6,49 @@\n \n /**\n  * \n- * When applications communicate with each other using a messaging system\n- * they first need to establish a communication channel that will carry the\n- * data. Message Channel decouples Message producers (publisher) and consumers (subscriber).\n+ * When applications communicate with each other using a messaging system they first need to\n+ * establish a communication channel that will carry the data. Message Channel decouples Message\n+ * producers (publisher) and consumers (subscriber).\n  * <p>\n- * The sending application doesn't necessarily know what particular applications\n- * will end up retrieving it, but it can be assured that the application that\n- * retrieves the information is interested in that information. This is because\n- * the messaging system has different Message Channels for different types of\n- * information the applications want to communicate. When an application sends\n- * information, it doesn't randomly add the information to any channel available;\n- * it adds it to a channel whose specific purpose is to communicate that sort of\n- * information. Likewise, an application that wants to receive particular information\n- * doesn't pull info off some random channel; it selects what channel to get information\n- * from based on what type of information it wants.\n+ * The sending application doesn't necessarily know what particular applications will end up\n+ * retrieving it, but it can be assured that the application that retrieves the information is\n+ * interested in that information. This is because the messaging system has different Message\n+ * Channels for different types of information the applications want to communicate. When an\n+ * application sends information, it doesn't randomly add the information to any channel available;\n+ * it adds it to a channel whose specific purpose is to communicate that sort of information.\n+ * Likewise, an application that wants to receive particular information doesn't pull info off some\n+ * random channel; it selects what channel to get information from based on what type of information\n+ * it wants.\n  * <p>\n- * In this example we use Apache Camel to establish different Message Channels. The first\n- * one reads from standard input and delivers messages to Direct endpoints (Publish; Broadcast). The other Message  \n- * Channels are established from the Direct component to different Endpoints (Subscriber). No actual messages are sent, \n- * only the established routes are printed to standard output.\n+ * In this example we use Apache Camel to establish different Message Channels. The first one reads\n+ * from standard input and delivers messages to Direct endpoints (Publish; Broadcast). The other\n+ * Message Channels are established from the Direct component to different Endpoints (Subscriber).\n+ * No actual messages are sent, only the established routes are printed to standard output.\n  * \n  */\n public class App {\n \n-\t/**\n-\t * Program entry point\n-\t * \n-\t * @param args command line args\n-\t * @throws Exception\n-\t */\n-\tpublic static void main(String[] args) throws Exception {\n-\t\tCamelContext context = new DefaultCamelContext();\n-\t\t\n-\t\tcontext.addRoutes(new RouteBuilder() {\n+  /**\n+   * Program entry point\n+   * \n+   * @param args\n+   *          command line args\n+   * @throws Exception\n+   */\n+  public static void main(String[] args) throws Exception {\n+    CamelContext context = new DefaultCamelContext();\n \n-\t\t\t@Override\n-\t\t\tpublic void configure() throws Exception {\n-\t\t\t\tfrom(\"stream:in\")\n-\t\t\t\t.multicast()\n-\t\t\t\t.to(\"direct:greetings1\", \"direct:greetings2\", \"direct:greetings3\");\n-\t\t\t}\n-\t\t});\n-\t\t\n-\t\tcontext.start();\n-\t\tcontext.getRoutes().stream().forEach((r) -> System.out.println(r));\n-\t\tcontext.stop();\n-\t}\n+    context.addRoutes(new RouteBuilder() {\n+\n+      @Override\n+      public void configure() throws Exception {\n+        from(\"stream:in\").multicast().to(\"direct:greetings1\", \"direct:greetings2\",\n+            \"direct:greetings3\");\n+      }\n+    });\n+\n+    context.start();\n+    context.getRoutes().stream().forEach((r) -> System.out.println(r));\n+    context.stop();\n+  }\n }\n\ndiff --git a/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java b/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java\n--- a/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java\n+++ b/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java\n@@ -9,9 +9,9 @@\n  */\n public class AppTest {\n \n-\t@Test\n-\tpublic void test() throws Exception {\n-\t\tString[] args = {};\n-\t\tApp.main(args);\n-\t}\n-}\n\\ No newline at end of file\n+  @Test\n+  public void test() throws Exception {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}",
    "output": "Apply Google coding conventions"
  },
  {
    "input": "diff --git a/twin/src/main/java/com/iluwatar/twin/App.java b/twin/src/main/java/com/iluwatar/twin/App.java\n--- a/twin/src/main/java/com/iluwatar/twin/App.java\n+++ b/twin/src/main/java/com/iluwatar/twin/App.java\n@@ -3,20 +3,12 @@\n /**\n  * Twin pattern is a design pattern which provides a standard solution to simulate multiple\n  * inheritance in java.\n- * \n  * <p>\n- * In this example, there is a ball game, a ball needs to subclass {@link GameItem} which provide\n- * some common method like draw and click. Moreover, it needs to subclass {@link Thread} as ball is\n- * a moving item (we use {@link Thread} instead of implements {@link Runnable} for example only)\n- * <p>\n- * Threre is scenario, when user click the ball, the ball will stop, when user click it gain, it\n- * will resume to move. We create two class, ons is {@link BallItem} which subclass {@link GameItem}\n- * , another is {@link BallThread} which subclass {@link Thread}. These two object both hold a field\n- * named \"Twin\" reference to another object. In {@link BallItem#click()}, it will invoke\n- * {@link BallThread} to suspend or resume moving; in {@link BallThread#run()}, it will invoke\n- * {@link BallItem} for drawing.\n- * \n+ * In this example, the essence of the Twin pattern is the {@link BallItem} class and\n+ * {@link BallThread} class represent the twin objects to coordinate with each other(via the twin\n+ * reference) like a single class inheriting from {@link GameItem} and {@link Thread}.\n  */\n+\n public class App {\n \n   /**\n@@ -44,6 +36,7 @@ public static void main(String[] args) throws Exception {\n \n     waiting();\n \n+    // exit\n     ballThread.stopMe();\n   }\n ",
    "output": "Implement Twin design pattern , add credit and rephrase the comments"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -23,6 +23,7 @@ public class App {\n   private Castle castle;\n   private Army army;\n \n+\n   /**\n    * Creates kingdom\n    * \n@@ -77,4 +78,33 @@ public Army getArmy() {\n   private void setArmy(final Army army) {\n     this.army = army;\n   }\n+  \n+\n+  /**\n+   * Program entry point\n+   * \n+   * @param args command line args\n+   */\n+  public static void main(String[] args) {\n+\t  \n+\t  App app = new App();\n+\t  \n+\t  System.out.println(\"Elf Kingdom\");\n+\t  KingdomFactory elfKingdomFactory;\n+\t  elfKingdomFactory = app.getElfKingdomFactory();\n+\t  app.createKingdom(elfKingdomFactory);\n+\t  System.out.println(app.getArmy().getDescription());\n+\t  System.out.println(app.getCastle().getDescription());\n+\t  System.out.println(app.getKing().getDescription());\n+\t\n+\t  System.out.println(\"\\nOrc Kingdom\");\n+\t  KingdomFactory orcKingdomFactory;\n+\t  orcKingdomFactory = app.getOrcKingdomFactory();\n+\t  app.createKingdom(orcKingdomFactory);\n+\t  System.out.println(app.getArmy().getDescription());\n+\t  System.out.println(app.getCastle().getDescription());\n+\t  System.out.println(app.getKing().getDescription());\n+\t  \n+  }\n+  \n }",
    "output": "Add main method in Abstract Factory Example"
  },
  {
    "input": "diff --git a/twin/src/main/java/com/iluwatar/twin/App.java b/twin/src/main/java/com/iluwatar/twin/App.java\n--- a/twin/src/main/java/com/iluwatar/twin/App.java\n+++ b/twin/src/main/java/com/iluwatar/twin/App.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar.twin;\n+\n+/**\n+ * Twin pattern is a design pattern which provides a standard solution to simulate multiple\n+ * inheritance in java.\n+ * \n+ * <p>\n+ * In this example, there is a ball game, a ball needs to subclass {@link GameItem} which provide\n+ * some common method like draw and click. Moreover, it needs to subclass {@link Thread} as ball is\n+ * a moving item (we use {@link Thread} instead of implements {@link Runnable} for example only)\n+ * <p>\n+ * Threre is scenario, when user click the ball, the ball will stop, when user click it gain, it\n+ * will resume to move. We create two class, ons is {@link BallItem} which subclass {@link GameItem}\n+ * , another is {@link BallThread} which subclass {@link Thread}. These two object both hold a field\n+ * named \"Twin\" reference to another object. In {@link BallItem#click()}, it will invoke\n+ * {@link BallThread} to suspend or resume moving; in {@link BallThread#run()}, it will invoke\n+ * {@link BallItem} for drawing.\n+ * \n+ */\n+public class App {\n+\n+  /**\n+   * Program entry point\n+   * \n+   * @param args command line args\n+   */\n+  public static void main(String[] args) throws Exception {\n+\n+    BallItem ballItem = new BallItem();\n+    BallThread ballThread = new BallThread();\n+\n+    ballItem.setTwin(ballThread);\n+    ballThread.setTwin(ballItem);\n+\n+    ballThread.start();\n+\n+    waiting();\n+\n+    ballItem.click();\n+\n+    waiting();\n+\n+    ballItem.click();\n+\n+    waiting();\n+\n+    ballThread.stopMe();\n+  }\n+\n+  private static void waiting() throws Exception {\n+    Thread.sleep(2500);\n+  }\n+}\n\ndiff --git a/twin/src/main/java/com/iluwatar/twin/BallItem.java b/twin/src/main/java/com/iluwatar/twin/BallItem.java\n--- a/twin/src/main/java/com/iluwatar/twin/BallItem.java\n+++ b/twin/src/main/java/com/iluwatar/twin/BallItem.java\n@@ -0,0 +1,41 @@\n+\n+package com.iluwatar.twin;\n+\n+/**\n+ * This class represents a Ball which extends {@link GameItem} and implements the logic for ball\n+ * item, like move and draw. It hold a reference of {@link BallThread} to delegate the suspend and\n+ * resume task.\n+ */\n+public class BallItem extends GameItem {\n+\n+  private boolean isSuspended = false;\n+\n+  private BallThread twin;\n+\n+  public void setTwin(BallThread twin) {\n+    this.twin = twin;\n+  }\n+\n+  @Override\n+  public void doDraw() {\n+\n+    System.out.println(\"doDraw\");\n+  }\n+\n+  public void move() {\n+    System.out.println(\"move\");\n+  }\n+\n+  @Override\n+  public void click() {\n+\n+    isSuspended = !isSuspended;\n+\n+    if (isSuspended) {\n+      twin.suspendMe();\n+    } else {\n+      twin.resumeMe();\n+    }\n+  }\n+}\n+\n\ndiff --git a/twin/src/main/java/com/iluwatar/twin/BallThread.java b/twin/src/main/java/com/iluwatar/twin/BallThread.java\n--- a/twin/src/main/java/com/iluwatar/twin/BallThread.java\n+++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java\n@@ -0,0 +1,53 @@\n+\n+package com.iluwatar.twin;\n+\n+/**\n+ * This class is a UI thread for drawing the {@link BallItem}, and provide the method for suspend\n+ * and resume. It hold the reference of {@link BallItem} to delegate the draw task.\n+ * \n+ */\n+\n+public class BallThread extends Thread {\n+\n+  private BallItem twin;\n+\n+  private volatile boolean isSuspended;\n+\n+  private volatile boolean isRunning = true;\n+\n+  public void setTwin(BallItem twin) {\n+    this.twin = twin;\n+  }\n+\n+  public void run() {\n+\n+    while (isRunning) {\n+      while (!isSuspended) {\n+        twin.draw();\n+        twin.move();\n+        try {\n+          Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+          throw new RuntimeException(e);\n+        }\n+\n+      }\n+    }\n+  }\n+\n+  public void suspendMe() {\n+    isSuspended = true;\n+    System.out.println(\"Begin to suspend BallThread\");\n+  }\n+\n+  public void resumeMe() {\n+    isSuspended = false;\n+    System.out.println(\"Begin to resume BallThread\");\n+  }\n+\n+  public void stopMe() {\n+    this.isRunning = false;\n+    this.isSuspended = true;\n+  }\n+}\n+\n\ndiff --git a/twin/src/main/java/com/iluwatar/twin/GameItem.java b/twin/src/main/java/com/iluwatar/twin/GameItem.java\n--- a/twin/src/main/java/com/iluwatar/twin/GameItem.java\n+++ b/twin/src/main/java/com/iluwatar/twin/GameItem.java\n@@ -0,0 +1,25 @@\n+\n+\n+package com.iluwatar.twin;\n+\n+/**\n+ * GameItem is a common class which provides some common methods for game object.\n+ */\n+public abstract class GameItem {\n+\n+  /**\n+   * Template method, do some common logic before draw\n+   * \n+   * @param other\n+   * @return\n+   */\n+  public void draw() {\n+    System.out.println(\"draw\");\n+    doDraw();\n+  }\n+\n+  public abstract void doDraw();\n+\n+\n+  public abstract void click();\n+}\n\ndiff --git a/twin/src/test/java/com/iluwatar/twin/AppTest.java b/twin/src/test/java/com/iluwatar/twin/AppTest.java\n--- a/twin/src/test/java/com/iluwatar/twin/AppTest.java\n+++ b/twin/src/test/java/com/iluwatar/twin/AppTest.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar.twin;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void test() throws Exception {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}",
    "output": "Implement Twin design pattern"
  },
  {
    "input": "diff --git a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/AppTest.java b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/AppTest.java\n--- a/producer-consumer/src/test/java/com/iluwatar/producer/consumer/AppTest.java\n+++ b/producer-consumer/src/test/java/com/iluwatar/producer/consumer/AppTest.java\n@@ -1,4 +1,4 @@\n-package com.iluwatar.poison.pill;\n+package com.iluwatar.producer.consumer;\n \n import org.junit.Test;\n ",
    "output": "Correct the package name for producer-consumer test folder"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/App.java b/adapter/src/main/java/com/iluwatar/adapter/App.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/App.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/App.java\n@@ -2,30 +2,29 @@\n \n /**\n  *\n- * An adapter helps two incompatible interfaces to work together. This is the real \n- * world definition for an adapter. Interfaces may be incompatible but the inner \n- * functionality should suit the need. The Adapter design pattern allows otherwise \n- * incompatible classes to work together by converting the interface of one class \n- * into an interface expected by the clients.\n+ * An adapter helps two incompatible interfaces to work together. This is the real world definition\n+ * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need.\n+ * The Adapter design pattern allows otherwise incompatible classes to work together by converting\n+ * the interface of one class into an interface expected by the clients.\n  * <p>\n- * There are two variations of the Adapter pattern: The class adapter implements\n- * the adaptee's interface whereas the object adapter uses composition to\n- * contain the adaptee in the adapter object. This example uses the object\n- * adapter approach.\n+ * There are two variations of the Adapter pattern: The class adapter implements the adaptee's\n+ * interface whereas the object adapter uses composition to contain the adaptee in the adapter\n+ * object. This example uses the object adapter approach.\n  * <p>\n- * The Adapter ({@link GnomeEngineer}) converts the interface of the target class\n- * ({@link GoblinGlider}) into a suitable one expected by the client\n- * ({@link GnomeEngineeringManager}).\n+ * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (\n+ * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}\n+ * ).\n  * \n  */\n public class App {\n \n-\t/**\n-\t * Program entry point\n-\t * @param args command line args\n-\t */\n-\tpublic static void main(String[] args) {\n-\t\tEngineer manager = new GnomeEngineeringManager();\n-\t\tmanager.operateDevice();\n-\t}\n+  /**\n+   * Program entry point\n+   * \n+   * @param args command line args\n+   */\n+  public static void main(String[] args) {\n+    Engineer manager = new GnomeEngineeringManager();\n+    manager.operateDevice();\n+  }\n }\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/Engineer.java b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/Engineer.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java\n@@ -7,6 +7,5 @@\n  */\r\n public interface Engineer {\r\n \r\n-\tvoid operateDevice();\r\n-\r\n+  void operateDevice();\r\n }\r\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java\n@@ -2,23 +2,22 @@\n \n /**\n  * \n- * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into\n- * {@link Engineer} interface expected by the client ({@link GnomeEngineeringManager}).\n+ * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into {@link Engineer}\n+ * interface expected by the client ({@link GnomeEngineeringManager}).\n  * \n  */\n public class GnomeEngineer implements Engineer {\n \n-\tprivate GoblinGlider glider;\n+  private GoblinGlider glider;\n \n-\tpublic GnomeEngineer() {\n-\t\tglider = new GoblinGlider();\n-\t}\n-\n-\t@Override\n-\tpublic void operateDevice() {\n-\t\tglider.attachGlider();\n-\t\tglider.gainSpeed();\n-\t\tglider.takeOff();\n-\t}\n+  public GnomeEngineer() {\n+    glider = new GoblinGlider();\n+  }\n \n+  @Override\n+  public void operateDevice() {\n+    glider.attachGlider();\n+    glider.gainSpeed();\n+    glider.takeOff();\n+  }\n }\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java\n@@ -7,14 +7,14 @@\n  */\n public class GnomeEngineeringManager implements Engineer {\n \n-\tprivate Engineer engineer;\n+  private Engineer engineer;\n \n-\tpublic GnomeEngineeringManager() {\n-\t\tengineer = new GnomeEngineer();\n-\t}\n+  public GnomeEngineeringManager() {\n+    engineer = new GnomeEngineer();\n+  }\n \n-\t@Override\n-\tpublic void operateDevice() {\n-\t\tengineer.operateDevice();\n-\t}\n+  @Override\n+  public void operateDevice() {\n+    engineer.operateDevice();\n+  }\n }\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/GoblinGlider.java b/adapter/src/main/java/com/iluwatar/adapter/GoblinGlider.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/GoblinGlider.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/GoblinGlider.java\n@@ -7,15 +7,15 @@\n  */\r\n public class GoblinGlider {\r\n \r\n-\tpublic void attachGlider() {\r\n-\t\tSystem.out.println(\"Glider attached.\");\r\n-\t}\r\n+  public void attachGlider() {\r\n+    System.out.println(\"Glider attached.\");\r\n+  }\r\n \r\n-\tpublic void gainSpeed() {\r\n-\t\tSystem.out.println(\"Gaining speed.\");\r\n-\t}\r\n+  public void gainSpeed() {\r\n+    System.out.println(\"Gaining speed.\");\r\n+  }\r\n \r\n-\tpublic void takeOff() {\r\n-\t\tSystem.out.println(\"Lift-off!\");\r\n-\t}\r\n+  public void takeOff() {\r\n+    System.out.println(\"Lift-off!\");\r\n+  }\r\n }\r\n\ndiff --git a/adapter/src/test/java/com/iluwatar/adapter/AppTest.java b/adapter/src/test/java/com/iluwatar/adapter/AppTest.java\n--- a/adapter/src/test/java/com/iluwatar/adapter/AppTest.java\n+++ b/adapter/src/test/java/com/iluwatar/adapter/AppTest.java\n@@ -11,9 +11,9 @@\n  */\n public class AppTest {\n \n-\t@Test\n-\tpublic void test() {\n-\t\tString[] args = {};\n-\t\tApp.main(args);\n-\t}\n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n }",
    "output": "Reformat Adapter Pattern - Issue"
  },
  {
    "input": "diff --git a/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java b/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n--- a/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n+++ b/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n@@ -14,7 +14,7 @@ public class CustomerDaoImplTest {\n \n   private CustomerDaoImpl impl;\n   private List<Customer> customers;\n-  private static final Customer CUSTOMER = new Customer(1, \"Freddy\", \"Kruger\");\n+  private static final Customer CUSTOMER = new Customer(1, \"Freddy\", \"Krueger\");\n \n   @Before\n   public void setUp() {",
    "output": "Correct Freddy's second name"
  },
  {
    "input": "diff --git a/caching/src/main/java/com/iluwatar/caching/App.java b/caching/src/main/java/com/iluwatar/caching/App.java\n--- a/caching/src/main/java/com/iluwatar/caching/App.java\n+++ b/caching/src/main/java/com/iluwatar/caching/App.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n /**\n  *\n@@ -37,6 +37,23 @@\n  */\n public class App {\n \n+  /**\n+   * Program entry point\n+   *\n+   * @param args command line args\n+   */\n+  public static void main(String[] args) {\n+    AppManager.initDB(false); // VirtualDB (instead of MongoDB) was used in running the JUnit tests\n+                              // and the App class to avoid Maven compilation errors. Set flag to\n+                              // true to run the tests with MongoDB (provided that MongoDB is\n+                              // installed and socket connection is open).\n+    AppManager.initCacheCapacity(3);\n+    App app = new App();\n+    app.useReadAndWriteThroughStrategy();\n+    app.useReadThroughAndWriteAroundStrategy();\n+    app.useReadThroughAndWriteBehindStrategy();\n+  }\n+\n   /**\n    * Read-through and write-through\n    */\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/AppManager.java b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/AppManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/AppManager.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n import java.text.ParseException;\n \n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/CacheStore.java b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n--- a/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n import java.util.ArrayList;\n \n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java b/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java\n--- a/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java\n+++ b/caching/src/main/java/com/iluwatar/caching/CachingPolicy.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n /**\n  *\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/DBManager.java b/caching/src/main/java/com/iluwatar/caching/DBManager.java\n--- a/caching/src/main/java/com/iluwatar/caching/DBManager.java\n+++ b/caching/src/main/java/com/iluwatar/caching/DBManager.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n import java.text.ParseException;\n import java.util.HashMap;\n@@ -12,13 +12,16 @@\n \n /**\n  *\n+ * <p>\n  * DBManager handles the communication with the underlying data store i.e. Database. It contains the\n  * implemented methods for querying, inserting, and updating data. MongoDB was used as the database\n  * for the application.\n- *\n+ * </p>\n+ * <p>\n  * Developer/Tester is able to choose whether the application should use MongoDB as its underlying\n  * data storage (connect()) or a simple Java data structure to (temporarily) store the data/objects\n  * during runtime (createVirtualDB()).\n+ * </p>\n  */\n public class DBManager {\n \n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/LRUCache.java b/caching/src/main/java/com/iluwatar/caching/LRUCache.java\n--- a/caching/src/main/java/com/iluwatar/caching/LRUCache.java\n+++ b/caching/src/main/java/com/iluwatar/caching/LRUCache.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n\ndiff --git a/caching/src/main/java/com/iluwatar/caching/UserAccount.java b/caching/src/main/java/com/iluwatar/caching/UserAccount.java\n--- a/caching/src/main/java/com/iluwatar/caching/UserAccount.java\n+++ b/caching/src/main/java/com/iluwatar/caching/UserAccount.java\n@@ -1,4 +1,4 @@\n-package main.java.com.wssia.caching;\n+package com.iluwatar.caching;\n \n /**\n  *\n\ndiff --git a/caching/src/test/java/com/iluwatar/caching/AppTest.java b/caching/src/test/java/com/iluwatar/caching/AppTest.java\n--- a/caching/src/test/java/com/iluwatar/caching/AppTest.java\n+++ b/caching/src/test/java/com/iluwatar/caching/AppTest.java\n@@ -1,7 +1,4 @@\n-package test.java.com.wssia.caching;\n-\n-import main.java.com.wssia.caching.App;\n-import main.java.com.wssia.caching.AppManager;\n+package com.iluwatar.caching;\n \n import org.junit.Before;\n import org.junit.Test;",
    "output": "Fix issues based on review remarks"
  },
  {
    "input": "diff --git a/observer/src/test/java/com/iluwatar/observer/AppTest.java b/observer/src/test/java/com/iluwatar/observer/AppTest.java\n--- a/observer/src/test/java/com/iluwatar/observer/AppTest.java\n+++ b/observer/src/test/java/com/iluwatar/observer/AppTest.java\n@@ -11,9 +11,9 @@\n  */\n public class AppTest {\n \n-\t@Test\n-\tpublic void test() {\n-\t\tString[] args = {};\n-\t\tApp.main(args);\n-\t}\n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n }",
    "output": "Reformatting test case as well"
  },
  {
    "input": "diff --git a/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java b/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n--- a/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n+++ b/publish-subscribe/src/main/java/com/iluwatar/publish/subscribe/App.java\n@@ -0,0 +1,55 @@\n+package com.iluwatar.publish.subscribe;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.impl.DefaultCamelContext;\n+\n+/**\n+ * \n+ * When applications communicate with each other using a messaging system\n+ * they first need to establish a communication channel that will carry the\n+ * data. Message Channel decouples Message producers (publisher) and consumers (subscriber).\n+ * <p>\n+ * The sending application doesn't necessarily know what particular applications\n+ * will end up retrieving it, but it can be assured that the application that\n+ * retrieves the information is interested in that information. This is because\n+ * the messaging system has different Message Channels for different types of\n+ * information the applications want to communicate. When an application sends\n+ * information, it doesn't randomly add the information to any channel available;\n+ * it adds it to a channel whose specific purpose is to communicate that sort of\n+ * information. Likewise, an application that wants to receive particular information\n+ * doesn't pull info off some random channel; it selects what channel to get information\n+ * from based on what type of information it wants.\n+ * <p>\n+ * In this example we use Apache Camel to establish different Message Channels. The first\n+ * one reads from standard input and delivers messages to Direct endpoints (Publish; Broadcast). The other Message  \n+ * Channels are established from the Direct component to different Endpoints (Subscriber). No actual messages are sent, \n+ * only the established routes are printed to standard output.\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * \n+\t * @param args command line args\n+\t * @throws Exception\n+\t */\n+\tpublic static void main(String[] args) throws Exception {\n+\t\tCamelContext context = new DefaultCamelContext();\n+\t\t\n+\t\tcontext.addRoutes(new RouteBuilder() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void configure() throws Exception {\n+\t\t\t\tfrom(\"stream:in\")\n+\t\t\t\t.multicast()\n+\t\t\t\t.to(\"direct:greetings1\", \"direct:greetings2\", \"direct:greetings3\");\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tcontext.start();\n+\t\tcontext.getRoutes().stream().forEach((r) -> System.out.println(r));\n+\t\tcontext.stop();\n+\t}\n+}\n\ndiff --git a/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java b/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java\n--- a/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java\n+++ b/publish-subscribe/src/test/java/com/iluwatar/publish/subscribe/AppTest.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar.publish.subscribe;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}\n\\ No newline at end of file",
    "output": "- Publish Subscribe Channel realisation.Heavily based on iluwatars Message Channel implementation ."
  },
  {
    "input": "diff --git a/callback/src/main/java/com/iluwatar/callback/SimpleTask.java b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java\n--- a/callback/src/main/java/com/iluwatar/callback/SimpleTask.java\n+++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java\n@@ -9,7 +9,7 @@ public class SimpleTask extends Task {\n \n \t@Override\n \tpublic void execute() {\n-\t\tSystem.out.println(\"Perform some important activity.\");\n+\t\tSystem.out.println(\"Perform some important activity and after call the callback method.\");\n \t}\n \n }",
    "output": "Add unit test to show that the callback method is called."
  },
  {
    "input": "diff --git a/callback/src/test/java/com/iluwatar/callback/AppTest.java b/callback/src/test/java/com/iluwatar/callback/AppTest.java\n--- a/callback/src/test/java/com/iluwatar/callback/AppTest.java\n+++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java\n@@ -2,18 +2,38 @@\n \n import org.junit.Test;\n \n-import com.iluwatar.callback.App;\n+import static org.junit.Assert.assertEquals;\n \n /**\n- * \n- * Application test\n+ * Add a field as a counter. Every time the callback method is called increment this\n+ * field. Unit test checks that the field is being incremented.\n  *\n+ * Could be done with mock objects as well where the call method call is verified.\n  */\n public class AppTest {\n \n+    private Integer callingCount = 0;\n+\n \t@Test\n \tpublic void test() {\n-\t\tString[] args = {};\n-\t\tApp.main(args);\n+        Callback callback = new Callback() {\n+            @Override\n+            public void call() {\n+                callingCount++;\n+            }\n+        };\n+\n+        Task task = new SimpleTask();\n+\n+        assertEquals(\"Initial calling count of 0\", new Integer(0), callingCount);\n+\n+        task.executeWith(callback);\n+\n+        assertEquals(\"Callback called once\", new Integer(1), callingCount);\n+\n+        task.executeWith(callback);\n+\n+        assertEquals(\"Callback called twice\", new Integer(2), callingCount);\n+\n \t}\n }",
    "output": "Add unit test to show that the callback method is called."
  },
  {
    "input": "diff --git a/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/App.java\n@@ -2,6 +2,7 @@\n \n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * \n@@ -26,13 +27,17 @@ public static void main(String[] args) {\n \t\tfinal Inventory inventory = new Inventory(1000);\n \t\tExecutorService executorService = Executors.newFixedThreadPool(3);\n \t\tfor (int i = 0; i < 3; i++) {\n-\t\t\texecutorService.execute(new Runnable() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void run() {\n-\t\t\t\t\twhile (inventory.addItem(new Item()))\n-\t\t\t\t\t\t;\n-\t\t\t\t}\n-\t\t\t});\n+\t\t\texecutorService.execute(() -> {\n+                while (inventory.addItem(new Item()))\n+                    ;\n+            });\n+\t\t}\n+\n+\t\texecutorService.shutdown();\n+\t\ttry {\n+\t\t\texecutorService.awaitTermination(5, TimeUnit.SECONDS);\n+\t\t} catch (InterruptedException e) {\n+\t\t\tSystem.out.println(\"Error waiting for ExecutorService shutdown\");\n \t\t}\n \t}\n }\n\ndiff --git a/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java\n@@ -12,13 +12,14 @@\n  */\n public class Inventory {\n \n-\tprivate int inventorySize;\n-\tprivate List<Item> items;\n-\tprivate Lock lock = new ReentrantLock();\n+\tprivate final int inventorySize;\n+\tprivate final List<Item> items;\n+\tprivate final Lock lock;\n \n \tpublic Inventory(int inventorySize) {\n \t\tthis.inventorySize = inventorySize;\n-\t\tthis.items = new ArrayList<Item>(inventorySize);\n+\t\tthis.items = new ArrayList<>(inventorySize);\n+\t\tthis.lock = new ReentrantLock();\n \t}\n \n \tpublic boolean addItem(Item item) {\n@@ -27,7 +28,9 @@ public boolean addItem(Item item) {\n \t\t\ttry {\n \t\t\t\tif (items.size() < inventorySize) {\n \t\t\t\t\titems.add(item);\n-\t\t\t\t\tSystem.out.println(Thread.currentThread());\n+\t\t\t\t\tSystem.out.println(Thread.currentThread()\n+\t\t\t\t\t\t\t+ \": items.size()=\" + items.size()\n+\t\t\t\t\t\t\t+ \", inventorySize=\" + inventorySize);\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t} finally {",
    "output": "Fix - Shutdown the ExecutorService in App so that the resources are collected and the process can finish\nI ran App.main(String[] args) in the 'double-checked-locking' module and the process does not terminate. This is because the executor service still has open threads. I'm not sure how the JUnit tests are run, but it seems they are handling the leftover resources themselves.\nAlso, minor modifications to Inventory for final fields are used since there is no state change around them, and added some more meaningful printing so the example is more clearly demonstrated"
  },
  {
    "input": "diff --git a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n@@ -3,6 +3,7 @@\n import org.junit.Test;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.*;\n \n@@ -18,7 +19,7 @@\n public class LazyLoadedSingletonThreadSafetyTest {\n \n     private static final int NUM_THREADS = 5;\n-    private List<ThreadSafeLazyLoadedIvoryTower> threadObjects = new ArrayList<>();\n+    private List<ThreadSafeLazyLoadedIvoryTower> threadObjects = Collections.synchronizedList(new ArrayList<>());\n \n     //NullObject class so Callable has to return something\n     private class NullObject{private NullObject(){}}",
    "output": "Synchronise the list as multiple threads are calling it"
  },
  {
    "input": "diff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n@@ -4,7 +4,6 @@\n \n import java.lang.reflect.Field;\n \n-import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n \n@@ -20,22 +19,24 @@ public void test() throws IllegalAccessException {\n         HolderThreadSafe hts = new HolderThreadSafe();\n \n         {//first call is null\n-            Field[] f = HolderThreadSafe.class.getDeclaredFields();\n-            assertEquals(\"One field only in HolderThreadSafe\", 1, f.length);\n-            f[0].setAccessible(true);\n+            Field[] ff = HolderThreadSafe.class.getDeclaredFields();\n+            for (Field f: ff) {\n+                f.setAccessible(true);\n+            }\n \n-            assertNull(f[0].get(hts));\n+            assertNull(ff[0].get(hts));\n         }\n \n         // now it is lazily loaded\n         hts.getHeavy();\n \n         {//now it is not null - call via reflection so that the test is the same before and after\n-            Field[] f = HolderThreadSafe.class.getDeclaredFields();\n-            assertEquals(\"One field only in HolderThreadSafe\", 1, f.length);\n-            f[0].setAccessible(true);\n+            Field[] ff = HolderThreadSafe.class.getDeclaredFields();\n+            for (Field f: ff) {\n+                f.setAccessible(true);\n+            }\n \n-            assertNotNull(f[0].get(hts));\n+            assertNotNull(ff[0].get(hts));\n         }\n     }\n }",
    "output": "For some reason it thinks there are two fields in the CI build. Making this more generic"
  },
  {
    "input": "diff --git a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n@@ -2,15 +2,11 @@\n \n import org.junit.Test;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.*;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n \n /**\n  * This class provides several test case that test singleton construction.\n@@ -71,32 +67,6 @@ public void test_MultipleCallsReturnTheSameObjectInDifferentThreads() throws Int\n         }\n     }\n \n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n-    public void test_HoleInSingletonCreationIfUsingReflection() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException {\n-        Field f = ThreadSafeLazyLoadedIvoryTower.class.getDeclaredField(\"instance\");\n-        f.setAccessible(true);\n-\n-        {//reflectively create an object - the singleton field is null\n-            Class lazyIvoryTowerClazz = Class.forName(\"com.iluwatar.singleton.ThreadSafeLazyLoadedIvoryTower\");\n-            Constructor<ThreadSafeLazyLoadedIvoryTower> constructor = lazyIvoryTowerClazz.getDeclaredConstructor();\n-            constructor.setAccessible(true);\n-            ThreadSafeLazyLoadedIvoryTower instance = constructor.newInstance();\n-            assertNull(f.get(instance));\n-        }\n-\n-        //instantiate the singleton but when we do the below code we are creating a new object where it is set to null still\n-        IvoryTower.getInstance();\n-\n-        {//reflectively create an object - the singleton field is null as a new object is created\n-            Class lazyIvoryTowerClazz = Class.forName(\"com.iluwatar.singleton.ThreadSafeLazyLoadedIvoryTower\");\n-            Constructor<ThreadSafeLazyLoadedIvoryTower> constructor = lazyIvoryTowerClazz.getDeclaredConstructor();\n-            constructor.setAccessible(true);\n-            ThreadSafeLazyLoadedIvoryTower instance = constructor.newInstance();\n-            assertNull(f.get(instance));\n-        }\n-    }\n-\n     private class SingletonCreatingThread implements Callable<NullObject> {\n         @Override\n         public NullObject call() {",
    "output": "Remove error unit test so pull request can proceed. Will check this at at later date"
  },
  {
    "input": "diff --git a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n@@ -73,20 +73,16 @@ public void test_MultipleCallsReturnTheSameObjectInDifferentThreads() throws Int\n \n     @Test\n     @SuppressWarnings(\"unchecked\")\n-    public void test_HoleInSingletonCreationIfUsingReflection() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n-        Field[] f = ThreadSafeLazyLoadedIvoryTower.class.getDeclaredFields();\n-        for (Field ff : f) {\n-            System.out.println(ff.getDeclaringClass());\n-        }\n-        assertEquals(\"One field only in ThreadSafeLazyLoadedIvoryTower\", 1, f.length);\n-        f[0].setAccessible(true);\n+    public void test_HoleInSingletonCreationIfUsingReflection() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException {\n+        Field f = ThreadSafeLazyLoadedIvoryTower.class.getDeclaredField(\"instance\");\n+        f.setAccessible(true);\n \n         {//reflectively create an object - the singleton field is null\n             Class lazyIvoryTowerClazz = Class.forName(\"com.iluwatar.singleton.ThreadSafeLazyLoadedIvoryTower\");\n             Constructor<ThreadSafeLazyLoadedIvoryTower> constructor = lazyIvoryTowerClazz.getDeclaredConstructor();\n             constructor.setAccessible(true);\n             ThreadSafeLazyLoadedIvoryTower instance = constructor.newInstance();\n-            assertNull(f[0].get(instance));\n+            assertNull(f.get(instance));\n         }\n \n         //instantiate the singleton but when we do the below code we are creating a new object where it is set to null still\n@@ -97,7 +93,7 @@ public void test_HoleInSingletonCreationIfUsingReflection() throws ClassNotFound\n             Constructor<ThreadSafeLazyLoadedIvoryTower> constructor = lazyIvoryTowerClazz.getDeclaredConstructor();\n             constructor.setAccessible(true);\n             ThreadSafeLazyLoadedIvoryTower instance = constructor.newInstance();\n-            assertNull(f[0].get(instance));\n+            assertNull(f.get(instance));\n         }\n     }\n ",
    "output": "Fix unit test by makinig getField use the field name directly"
  },
  {
    "input": "diff --git a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/lazy/loading/HolderThreadSafeTest.java\n@@ -0,0 +1,41 @@\n+package com.iluwatar.lazy.loading;\n+\n+import org.junit.Test;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * Using reflection this test shows that the heavy field is not instantiated until the method getHeavy is called\n+ *\n+ * Created by jones on 11/10/2015.\n+ */\n+public class HolderThreadSafeTest {\n+\n+    @Test\n+    public void test() throws IllegalAccessException {\n+        HolderThreadSafe hts = new HolderThreadSafe();\n+\n+        {//first call is null\n+            Field[] f = HolderThreadSafe.class.getDeclaredFields();\n+            assertEquals(\"One field only in HolderThreadSafe\", 1, f.length);\n+            f[0].setAccessible(true);\n+\n+            assertNull(f[0].get(hts));\n+        }\n+\n+        // now it is lazily loaded\n+        hts.getHeavy();\n+\n+        {//now it is not null - call via reflection so that the test is the same before and after\n+            Field[] f = HolderThreadSafe.class.getDeclaredFields();\n+            assertEquals(\"One field only in HolderThreadSafe\", 1, f.length);\n+            f[0].setAccessible(true);\n+\n+            assertNotNull(f[0].get(hts));\n+        }\n+    }\n+}",
    "output": "Add additional unit tests to show how lazy loading is working with reflection"
  },
  {
    "input": "diff --git a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n@@ -75,6 +75,9 @@ public void test_MultipleCallsReturnTheSameObjectInDifferentThreads() throws Int\n     @SuppressWarnings(\"unchecked\")\n     public void test_HoleInSingletonCreationIfUsingReflection() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n         Field[] f = ThreadSafeLazyLoadedIvoryTower.class.getDeclaredFields();\n+        for (Field ff : f) {\n+            System.out.println(ff.getDeclaringClass());\n+        }\n         assertEquals(\"One field only in ThreadSafeLazyLoadedIvoryTower\", 1, f.length);\n         f[0].setAccessible(true);\n ",
    "output": "Add additional unit tests to show that singletons can be created in single thread environment and multithread environment. Also add a test to demonstrate a whole with Singleton when instantiating using reflection\nAdd some logging. Tests pass locally but not on github?"
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/Request.java b/monostate/src/main/java/com/iluwatar/monostate/Request.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/Request.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/Request.java\n@@ -10,7 +10,6 @@ public class Request {\n   public final String value;\n \n   public Request(String value) {\n-    super();\n     this.value = value;\n   }\n }",
    "output": "Make changes according to feedback issue"
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/Server.java b/monostate/src/main/java/com/iluwatar/monostate/Server.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/Server.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java\n@@ -26,6 +26,6 @@ public int getPort() {\n   }\n \n   public final void serve(Request request) {\n-    System.out.println(\"Server ID \" + id + \"  processed request with value  \" + request.value);\n+    System.out.println(\"Server ID \" + id + \" associated to host : \" + getHost() + \" and Port \" + getPort() +\" Processed request with value  \" + request.value);\n   }\n }",
    "output": "Printing Server variables"
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/App.java b/decorator/src/main/java/com/iluwatar/decorator/App.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/App.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java\n@@ -23,11 +23,13 @@ public static void main(String[] args) {\n \t\tHostile troll = new Troll();\n \t\ttroll.attack();\n \t\ttroll.fleeBattle();\n+\t\tSystem.out.printf(\"Simple troll power %d.\\n\", troll.getAttackPower());\n \n \t\t// change the behavior of the simple troll by adding a decorator\n \t\tSystem.out.println(\"\\nA smart looking troll surprises you.\");\n \t\tHostile smart = new SmartTroll(troll);\n \t\tsmart.attack();\n \t\tsmart.fleeBattle();\n+\t\tSystem.out.printf(\"Smart troll power %d.\\n\", smart.getAttackPower());\n \t}\n }\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/Hostile.java b/decorator/src/main/java/com/iluwatar/decorator/Hostile.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/Hostile.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/Hostile.java\n@@ -9,6 +9,8 @@ public interface Hostile {\n \r\n \tvoid attack();\r\n \r\n+\tint getAttackPower();\r\n+\r\n \tvoid fleeBattle();\r\n \r\n }\r\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java b/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java\n@@ -21,6 +21,12 @@ public void attack() {\n \t\tdecorated.attack();\n \t}\n \n+\t@Override\n+\tpublic int getAttackPower() {\n+\t\t// decorated troll power + 20 because it is smart\n+\t\treturn decorated.getAttackPower() + 20;\n+\t}\n+\n \t@Override\n \tpublic void fleeBattle() {\n \t\tSystem.out.println(\"The troll calls for help!\");\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/Troll.java b/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n@@ -11,6 +11,11 @@ public void attack() {\n \t\tSystem.out.println(\"The troll swings at you with a club!\");\n \t}\n \n+\t@Override\n+\tpublic int getAttackPower() {\n+\t\treturn 10;\n+\t}\n+\n \tpublic void fleeBattle() {\n \t\tSystem.out.println(\"The troll shrieks in horror and runs away!\");\n \t}",
    "output": "Add getAttackPower method to pattern decorator"
  },
  {
    "input": "diff --git a/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java b/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n--- a/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n+++ b/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n@@ -84,7 +84,7 @@ public void getExistinCustomerById() {\n \n   @Test\n   public void getNonExistinCustomerById() {\n-    final int nonExistingId = 999;\n+    final int nonExistingId = getNonExistingCustomerId();\n     assertNull(impl.getCustomerById(nonExistingId));\n   }\n ",
    "output": "Remove magic number."
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/App.java b/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n@@ -61,8 +61,6 @@\n  * <p>\n  * The example uses Java NIO framework to implement the Reactor.\n  * \n- * @author npathai\n- *\n  */\n public class App {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n@@ -17,8 +17,6 @@\n /**\n  * Represents the clients of Reactor pattern. Multiple clients are run concurrently and send logging\n  * requests to Reactor.\n- * \n- * @author npathai\n  */\n public class AppClient {\n   private final ExecutorService service = Executors.newFixedThreadPool(4);\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/LoggingHandler.java\n@@ -10,8 +10,6 @@\n /**\n  * Logging server application logic. It logs the incoming requests on standard console and returns a\n  * canned acknowledgement back to the remote peer.\n- * \n- * @author npathai\n  */\n public class LoggingHandler implements ChannelHandler {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/AbstractNioChannel.java\n@@ -19,9 +19,6 @@\n  * concrete implementation. It provides a block writing mechanism wherein when any\n  * {@link ChannelHandler} wants to write data back, it queues the data in pending write queue and\n  * clears it in block manner. This provides better throughput.\n- * \n- * @author npathai\n- *\n  */\n public abstract class AbstractNioChannel {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ChannelHandler.java\n@@ -9,8 +9,6 @@\n  * <p>\n  * A {@link ChannelHandler} can be associated with one or many {@link AbstractNioChannel}s, and\n  * whenever an event occurs on any of the associated channels, the handler is notified of the event.\n- * \n- * @author npathai\n  */\n public interface ChannelHandler {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java b/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/Dispatcher.java\n@@ -16,8 +16,6 @@\n  * \n  * @see SameThreadDispatcher\n  * @see ThreadPoolDispatcher\n- * \n- * @author npathai\n  */\n public interface Dispatcher {\n   /**\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioDatagramChannel.java\n@@ -10,8 +10,6 @@\n \n /**\n  * A wrapper over {@link DatagramChannel} which can read and write data on a DatagramChannel.\n- * \n- * @author npathai\n  */\n public class NioDatagramChannel extends AbstractNioChannel {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioReactor.java\n@@ -28,9 +28,6 @@\n  * NOTE: This is one of the ways to implement NIO reactor and it does not take care of all possible\n  * edge cases which are required in a real application. This implementation is meant to demonstrate\n  * the fundamental concepts that lie behind Reactor pattern.\n- * \n- * @author npathai\n- *\n  */\n public class NioReactor {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/NioServerSocketChannel.java\n@@ -11,8 +11,6 @@\n /**\n  * A wrapper over {@link NioServerSocketChannel} which can read and write data on a\n  * {@link SocketChannel}.\n- * \n- * @author npathai\n  */\n public class NioServerSocketChannel extends AbstractNioChannel {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/SameThreadDispatcher.java b/reactor/src/main/java/com/iluwatar/reactor/framework/SameThreadDispatcher.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/SameThreadDispatcher.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/SameThreadDispatcher.java\n@@ -11,8 +11,6 @@\n  * For better performance use {@link ThreadPoolDispatcher}.\n  * \n  * @see ThreadPoolDispatcher\n- * \n- * @author npathai\n  */\n public class SameThreadDispatcher implements Dispatcher {\n \n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java b/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/framework/ThreadPoolDispatcher.java\n@@ -9,9 +9,6 @@\n  * An implementation that uses a pool of worker threads to dispatch the events. This provides better\n  * scalability as the application specific processing is not performed in the context of I/O\n  * (reactor) thread.\n- * \n- * @author npathai\n- *\n  */\n public class ThreadPoolDispatcher implements Dispatcher {\n \n\ndiff --git a/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java b/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java\n--- a/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java\n+++ b/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java\n@@ -11,8 +11,6 @@\n  * \n  * This class tests the Distributed Logging service by starting a Reactor and then sending it\n  * concurrent logging requests using multiple clients.\n- * \n- * @author npathai\n  */\n public class AppTest {\n ",
    "output": "Work on , removed author name from all classes. [ci skip]. Author names were added due to default eclipse configuration."
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/App.java b/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java\n@@ -1,9 +1,12 @@\n package com.iluwatar.reactor.app;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import com.iluwatar.reactor.framework.AbstractNioChannel;\n import com.iluwatar.reactor.framework.ChannelHandler;\n+import com.iluwatar.reactor.framework.Dispatcher;\n import com.iluwatar.reactor.framework.NioDatagramChannel;\n import com.iluwatar.reactor.framework.NioReactor;\n import com.iluwatar.reactor.framework.NioServerSocketChannel;\n@@ -64,26 +67,28 @@\n public class App {\n \n   private NioReactor reactor;\n+  private List<AbstractNioChannel> channels = new ArrayList<>();\n \n   /**\n    * App entry.\n    * \n    * @throws IOException\n    */\n   public static void main(String[] args) throws IOException {\n-    new App().start();\n+    new App().start(new ThreadPoolDispatcher(2));\n   }\n \n   /**\n    * Starts the NIO reactor.\n+ * @param threadPoolDispatcher \n    * \n    * @throws IOException if any channel fails to bind.\n    */\n-  public void start() throws IOException {\n+  public void start(Dispatcher dispatcher) throws IOException {\n     /*\n      * The application can customize its event dispatching mechanism.\n      */\n-    reactor = new NioReactor(new ThreadPoolDispatcher(2));\n+    reactor = new NioReactor(dispatcher);\n \n     /*\n      * This represents application specific business logic that dispatcher will call on appropriate\n@@ -103,20 +108,26 @@ public void start() throws IOException {\n    * Stops the NIO reactor. This is a blocking call.\n    * \n    * @throws InterruptedException if interrupted while stopping the reactor.\n+   * @throws IOException if any I/O error occurs\n    */\n-  public void stop() throws InterruptedException {\n+  public void stop() throws InterruptedException, IOException {\n     reactor.stop();\n+    for (AbstractNioChannel channel : channels) {\n+    \tchannel.getChannel().close();\n+    }\n   }\n \n-  private static AbstractNioChannel tcpChannel(int port, ChannelHandler handler) throws IOException {\n+  private AbstractNioChannel tcpChannel(int port, ChannelHandler handler) throws IOException {\n     NioServerSocketChannel channel = new NioServerSocketChannel(port, handler);\n     channel.bind();\n+    channels.add(channel);\n     return channel;\n   }\n \n-  private static AbstractNioChannel udpChannel(int port, ChannelHandler handler) throws IOException {\n+  private AbstractNioChannel udpChannel(int port, ChannelHandler handler) throws IOException {\n     NioDatagramChannel channel = new NioDatagramChannel(port, handler);\n     channel.bind();\n+    channels.add(channel);\n     return channel;\n   }\n }\n\ndiff --git a/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java b/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java\n--- a/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java\n+++ b/reactor/src/test/java/com/iluwatar/reactor/app/AppTest.java\n@@ -4,6 +4,9 @@\n \n import org.junit.Test;\n \n+import com.iluwatar.reactor.framework.SameThreadDispatcher;\n+import com.iluwatar.reactor.framework.ThreadPoolDispatcher;\n+\n /**\n  * \n  * This class tests the Distributed Logging service by starting a Reactor and then sending it\n@@ -14,15 +17,41 @@\n public class AppTest {\n \n   /**\n-   * Test the application.\n+   * Test the application using pooled thread dispatcher.\n+   * \n+   * @throws IOException if any I/O error occurs.\n+   * @throws InterruptedException if interrupted while stopping the application.\n+   */\n+  @Test\n+  public void testAppUsingThreadPoolDispatcher() throws IOException, InterruptedException {\n+    App app = new App();\n+    app.start(new ThreadPoolDispatcher(2));\n+\n+    AppClient client = new AppClient();\n+    client.start();\n+\n+    // allow clients to send requests. Artificial delay.\n+    try {\n+      Thread.sleep(2000);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+\n+    client.stop();\n+\n+    app.stop();\n+  }\n+  \n+  /**\n+   * Test the application using same thread dispatcher.\n    * \n    * @throws IOException if any I/O error occurs.\n    * @throws InterruptedException if interrupted while stopping the application.\n    */\n   @Test\n-  public void testApp() throws IOException, InterruptedException {\n+  public void testAppUsingSameThreadDispatcher() throws IOException, InterruptedException {\n     App app = new App();\n-    app.start();\n+    app.start(new SameThreadDispatcher());\n \n     AppClient client = new AppClient();\n     client.start();",
    "output": "Work on , increased coverage"
  },
  {
    "input": "diff --git a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java\n--- a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java\n+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java\n@@ -25,27 +25,12 @@ public class App {\n \n   public static void main(String[] args) {\n \n-    List<Integer> integerList = new ArrayList<Integer>() {\n-      {\n-        add(1);\n-        add(-61);\n-        add(14);\n-        add(-22);\n-        add(18);\n-        add(-87);\n-        add(6);\n-        add(64);\n-        add(-82);\n-        add(26);\n-        add(-98);\n-        add(97);\n-        add(45);\n-        add(23);\n-        add(2);\n-        add(-68);\n-        add(45);\n-      }\n-    };\n+    List<Integer> integerList = new ArrayList<>();\n+    integerList.addAll(Arrays.asList(\n+    \t\t1, -61, 14, -22, 18, -87, 6, 64, -82, 26, -98, 97,\n+    \t\t45, 23, 2, -68, 45\n+    ));\n+    \n     prettyPrint(\"The initial list contains: \", integerList);\n \n     List<Integer> firstFiveNegatives =\n@@ -105,10 +90,6 @@ private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {\n     prettyPrint(\", \", prefix, \".\", iterable);\n   }\n \n-  private static <TYPE> void prettyPrint(String prefix, String suffix, Iterable<TYPE> iterable) {\n-    prettyPrint(\", \", prefix, suffix, iterable);\n-  }\n-\n   private static <TYPE> void prettyPrint(String delimiter, String prefix, String suffix,\n       Iterable<TYPE> iterable) {\n     StringJoiner joiner = new StringJoiner(delimiter, prefix, \".\");\n\ndiff --git a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java\n--- a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java\n+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java\n@@ -1,15 +1,14 @@\n package com.iluwatar.fluentinterface.fluentiterable.lazy;\n \n-import com.iluwatar.fluentinterface.fluentiterable.FluentIterable;\n-\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Optional;\n-import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n+import com.iluwatar.fluentinterface.fluentiterable.FluentIterable;\n+\n /**\n  * This is a lazy implementation of the FluentIterable interface. It evaluates all chained\n  * operations when a terminating operation is applied.\n\ndiff --git a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/simple/SimpleFluentIterable.java b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/simple/SimpleFluentIterable.java\n--- a/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/simple/SimpleFluentIterable.java\n+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/simple/SimpleFluentIterable.java\n@@ -124,7 +124,7 @@ public final FluentIterable<TYPE> last(int count) {\n    */\n   @Override\n   public final <NEW_TYPE> FluentIterable<NEW_TYPE> map(Function<? super TYPE, NEW_TYPE> function) {\n-    List<NEW_TYPE> temporaryList = new ArrayList();\n+    List<NEW_TYPE> temporaryList = new ArrayList<>();\n     Iterator<TYPE> iterator = iterator();\n     while (iterator.hasNext()) {\n       temporaryList.add(function.apply(iterator.next()));",
    "output": "Polished a few rough edges, class diagram change, and removed warnings"
  },
  {
    "input": "diff --git a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java\n--- a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java\n+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java\n@@ -7,7 +7,7 @@\n \n public class AppTest {\n \n-\tprivate App app = new App();;\n+\tprivate App app = new App();\n \tprivate KingdomFactory elfFactory;\n \tprivate KingdomFactory orcFactory;\n \t",
    "output": "Remove erroneous semi-colon."
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -21,9 +21,10 @@\n  * doesn't pull info off some random channel; it selects what channel to get information\n  * from based on what type of information it wants.\n  * <p>\n- * In this example we use Apache Camel to establish a direct synchronous Message Channel \n- * that delivers messages to console output. No actual messages are sent, only the established \n- * routes are printed to standard output.\n+ * In this example we use Apache Camel to establish two different Message Channels. The first\n+ * one reads from standard input and delivers messages to Direct endpoint. The second Message  \n+ * Channel is established from the Direct component to console output. No actual messages are sent, \n+ * only the established routes are printed to standard output.\n  * \n  */\n public class App {\n@@ -40,6 +41,7 @@ public static void main(String[] args) throws Exception {\n \n \t\t\t@Override\n \t\t\tpublic void configure() throws Exception {\n+\t\t\t\tfrom(\"stream:in\").to(\"direct:greetings\");\n \t\t\t\tfrom(\"direct:greetings\").to(\"stream:out\");\n \t\t\t}\n \t\t});",
    "output": "Add second message channel."
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/App.java b/reactor/src/main/java/com/iluwatar/reactor/App.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/App.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/App.java\n@@ -0,0 +1,42 @@\n+package com.iluwatar.reactor;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.SocketChannel;\n+\n+import com.iluwatar.reactor.NioReactor.NioChannelEventHandler;\n+\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\t\ttry {\n+\t\t\tnew NioReactor(6666, new LoggingServer()).start();\n+\t\t} catch (IOException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\t\n+\tstatic class LoggingServer implements NioChannelEventHandler {\n+\n+\t\t@Override\n+\t\tpublic void onReadable(SocketChannel channel) {\n+\t\t\tByteBuffer requestBuffer = ByteBuffer.allocate(1024);\n+\t\t\ttry {\n+\t\t\t\tint byteCount = channel.read(requestBuffer);\n+\t\t\t\tif (byteCount > 0) {\n+\t\t\t\t\tbyte[] logRequestContents = new byte[byteCount];\n+\t\t\t\t\tbyte[] array = requestBuffer.array();\n+\t\t\t\t\tSystem.arraycopy(array, 0, logRequestContents, 0, byteCount);\n+\t\t\t\t\tdoLogging(new String(logRequestContents));\n+\t\t\t\t}\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void doLogging(String log) {\n+\t\t\t// do logging at server side\n+\t\t\tSystem.out.println(log);\n+\t\t}\n+\t}\n+}\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/AppClient.java b/reactor/src/main/java/com/iluwatar/reactor/AppClient.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/AppClient.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/AppClient.java\n@@ -0,0 +1,62 @@\n+package com.iluwatar.reactor;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class AppClient {\n+\n+\tpublic static void main(String[] args) {\n+\t\tnew LoggingClient(\"Client 1\", 6666).start();\n+\t}\n+\n+\t\n+\t/*\n+\t * A logging client that sends logging requests to logging server\n+\t */\n+\tstatic class LoggingClient {\n+\n+\t\tprivate int serverPort;\n+\t\tprivate String clientName;\n+\n+\t\tpublic LoggingClient(String clientName, int serverPort) {\n+\t\t\tthis.clientName = clientName;\n+\t\t\tthis.serverPort = serverPort;\n+\t\t}\n+\n+\t\tpublic void start() {\n+\t\t\tSocket socket = null;\n+\t\t\ttry {\n+\t\t\t\tsocket = new Socket(InetAddress.getLocalHost(), serverPort);\n+\t\t\t\tOutputStream outputStream = socket.getOutputStream();\n+\t\t\t\tPrintWriter writer = new PrintWriter(outputStream);\n+\t\t\t\twriteLogs(writer);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t} finally {\n+\t\t\t\tif (socket != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tsocket.close();\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void writeLogs(PrintWriter writer) {\n+\t\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t\twriter.println(clientName + \" - Log request: \" + i);\n+\t\t\t\ttry {\n+\t\t\t\t\tThread.sleep(1000);\n+\t\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t\twriter.flush();\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n\ndiff --git a/reactor/src/main/java/com/iluwatar/reactor/NioReactor.java b/reactor/src/main/java/com/iluwatar/reactor/NioReactor.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/NioReactor.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/NioReactor.java\n@@ -0,0 +1,96 @@\n+package com.iluwatar.reactor;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+import java.util.Set;\n+\n+public class NioReactor {\n+\n+\tprivate int port;\n+\tprivate Selector selector;\n+\tprivate ServerSocketChannel serverSocketChannel;\n+\tprivate NioChannelEventHandler nioEventhandler;\n+\n+\tpublic NioReactor(int port, NioChannelEventHandler handler) {\n+\t\tthis.port = port;\n+\t\tthis.nioEventhandler = handler;\n+\t}\n+\t\n+\t\n+\tpublic void start() throws IOException {\n+\t\tstartReactor();\n+\t\trequestLoop();\n+\t}\n+\n+\tprivate void startReactor() throws IOException {\n+\t\tselector = Selector.open();\n+\t\tserverSocketChannel = ServerSocketChannel.open();\n+\t\tserverSocketChannel.socket().bind(new InetSocketAddress(port));\n+\t\tserverSocketChannel.configureBlocking(false);\n+\t\tSelectionKey acceptorKey = serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n+\t\tacceptorKey.attach(new Acceptor());\n+\t\tSystem.out.println(\"Reactor started listening on port: \" + port);\n+\t}\n+\t\n+\tprivate void requestLoop() throws IOException {\n+\t\twhile (true) {\n+\t\t\tselector.select();\n+\t\t\tSet<SelectionKey> keys = selector.selectedKeys();\n+\t\t\tfor (SelectionKey key : keys) {\n+\t\t\t\tdispatchEvent(key);\n+\t\t\t}\n+\t\t\tkeys.clear();\n+\t\t}\n+\t}\n+\t\n+\tprivate void dispatchEvent(SelectionKey key) throws IOException {\n+\t\tObject handler = key.attachment();\n+\t\tif (handler != null) {\n+\t\t\t((EventHandler)handler).handle();\n+\t\t}\n+\t}\n+\n+\tinterface EventHandler {\n+\t\tvoid handle() throws IOException;\n+\t}\n+\n+\tprivate class Acceptor implements EventHandler {\n+\t\t\n+\t\tpublic void handle() throws IOException {\n+\t\t\t// non-blocking accept as acceptor will only be called when accept event is available\n+\t\t\tSocketChannel clientChannel = serverSocketChannel.accept();\n+\t\t\tif (clientChannel != null) {\n+\t\t\t\tnew ChannelHandler(clientChannel).handle();\n+\t\t\t}\n+\t\t\tSystem.out.println(\"Connection established with a client\");\n+\t\t}\n+\t}\n+\t\n+\tpublic static interface NioChannelEventHandler {\n+\t\tvoid onReadable(SocketChannel channel);\n+\t}\n+\t\n+\tprivate class ChannelHandler implements EventHandler {\n+\t\t\n+\t\tprivate SocketChannel clientChannel;\n+\t\tprivate SelectionKey selectionKey;\n+\n+\t\tpublic ChannelHandler(SocketChannel clientChannel) throws IOException {\n+\t\t\tthis.clientChannel = clientChannel;\n+\t\t\tclientChannel.configureBlocking(false);\n+\t\t\tselectionKey = clientChannel.register(selector, 0);\n+\t\t\tselectionKey.attach(this);\n+\t\t\tselectionKey.interestOps(SelectionKey.OP_READ);\n+\t\t\tselector.wakeup();\n+\t\t}\n+\n+\t\tpublic void handle() throws IOException {\n+\t\t\t// only read events are supported.\n+\t\t\tnioEventhandler.onReadable(clientChannel);\n+\t\t}\n+\t}\n+}",
    "output": "Work on Initial logging server example"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -1,7 +1,6 @@\n package com.iluwatar.message.channel;\n \n import org.apache.camel.CamelContext;\n-import org.apache.camel.ProducerTemplate;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.impl.DefaultCamelContext;\n \n@@ -19,9 +18,7 @@ public void configure() throws Exception {\n \t\t});\n \t\t\n \t\tcontext.start();\n-\t\tProducerTemplate template = context.createProducerTemplate();\n-\t\ttemplate.sendBody(\"direct:greetings\", \"jou man\");\n-\t\tThread.sleep(1000);\n+\t\tcontext.getRoutes().stream().forEach((r) -> System.out.println(r));\n \t\tcontext.stop();\n \t}\n }",
    "output": "Improve example code and add class diagram"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -1,14 +1,27 @@\n package com.iluwatar.message.channel;\n \n import org.apache.camel.CamelContext;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.impl.DefaultCamelContext;\n \n public class App {\n \t\n \tpublic static void main(String[] args) throws Exception {\n \t\tCamelContext context = new DefaultCamelContext();\n+\t\t\n+\t\tcontext.addRoutes(new RouteBuilder() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void configure() throws Exception {\n+\t\t\t\tfrom(\"direct:greetings\").to(\"stream:out\");\n+\t\t\t}\n+\t\t});\n+\t\t\n \t\tcontext.start();\n-\t\tThread.sleep(10000);\n+\t\tProducerTemplate template = context.createProducerTemplate();\n+\t\ttemplate.sendBody(\"direct:greetings\", \"jou man\");\n+\t\tThread.sleep(1000);\n \t\tcontext.stop();\n \t}\n }",
    "output": "Work on the example code"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -1,8 +1,14 @@\n package com.iluwatar.message.channel;\n \n+import org.apache.camel.CamelContext;\n+import org.apache.camel.impl.DefaultCamelContext;\n+\n public class App {\n \t\n-\tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello World!\");\n+\tpublic static void main(String[] args) throws Exception {\n+\t\tCamelContext context = new DefaultCamelContext();\n+\t\tcontext.start();\n+\t\tThread.sleep(10000);\n+\t\tcontext.stop();\n \t}\n }\n\ndiff --git a/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n--- a/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n+++ b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n@@ -10,7 +10,7 @@\n public class AppTest {\n \t\n \t@Test\n-\tpublic void test() {\n+\tpublic void test() throws Exception {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}",
    "output": "Add Camel dependency"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar.message.channel;\n+\n+public class App {\n+\t\n+\tpublic static void main(String[] args) {\n+\t\tSystem.out.println(\"Hello World!\");\n+\t}\n+}\n\ndiff --git a/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n--- a/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n+++ b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar.message.channel;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Message Channel EIP example"
  },
  {
    "input": "diff --git a/visitor/src/main/java/com/iluwatar/visitor/App.java b/visitor/src/main/java/com/iluwatar/visitor/App.java\n--- a/visitor/src/main/java/com/iluwatar/visitor/App.java\n+++ b/visitor/src/main/java/com/iluwatar/visitor/App.java\n@@ -1,27 +1,31 @@\n-package com.iluwatar.visitor;\r\n-\r\n-/**\r\n- * \r\n- * Visitor pattern defines mechanism to apply operations on nodes\r\n- * in hierarchy. New operations can be added without altering the node\r\n- * interface.\r\n- * \r\n- * In this example there is a unit hierarchy beginning from Commander.\r\n- * This hierarchy is traversed by visitors. SoldierVisitor applies\r\n- * its operation on Soldiers, SergeantVisitor on Sergeants and so\r\n- * on.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\r\n-\t\tCommander commander = new Commander(new Sergeant(new Soldier(),\r\n-\t\t\t\tnew Soldier(), new Soldier()), new Sergeant(new Soldier(),\r\n-\t\t\t\tnew Soldier(), new Soldier()));\r\n-\t\tcommander.accept(new SoldierVisitor());\r\n-\t\tcommander.accept(new SergeantVisitor());\r\n-\t\tcommander.accept(new CommanderVisitor());\r\n-\r\n-\t}\r\n-}\r\n+package com.iluwatar.visitor;\n+\n+/**\n+ * \n+ * Visitor pattern defines mechanism to apply operations on nodes\n+ * in hierarchy. New operations can be added without altering the node\n+ * interface.\n+ * <p>\n+ * In this example there is a unit hierarchy beginning from {@link Commander}.\n+ * This hierarchy is traversed by visitors. {@link SoldierVisitor} applies\n+ * its operation on {@link Soldier}s, {@link SergeantVisitor} on {@link Sergeant}s and so\n+ * on.\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\n+\t\tCommander commander = new Commander(new Sergeant(new Soldier(),\n+\t\t\t\tnew Soldier(), new Soldier()), new Sergeant(new Soldier(),\n+\t\t\t\tnew Soldier(), new Soldier()));\n+\t\tcommander.accept(new SoldierVisitor());\n+\t\tcommander.accept(new SergeantVisitor());\n+\t\tcommander.accept(new CommanderVisitor());\n+\n+\t}\n+}\n\ndiff --git a/visitor/src/test/java/com/iluwatar/visitor/AppTest.java b/visitor/src/test/java/com/iluwatar/visitor/AppTest.java\n--- a/visitor/src/test/java/com/iluwatar/visitor/AppTest.java\n+++ b/visitor/src/test/java/com/iluwatar/visitor/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.visitor;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.visitor.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.visitor;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.visitor.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Improve JavaDoc for Visitor example"
  },
  {
    "input": "diff --git a/template-method/src/main/java/com/iluwatar/templatemethod/App.java b/template-method/src/main/java/com/iluwatar/templatemethod/App.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/App.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/App.java\n@@ -1,20 +1,24 @@\n-package com.iluwatar.templatemethod;\r\n-\r\n-/**\r\n- * \r\n- * Template Method defines a skeleton for an algorithm. The algorithm subclasses \r\n- * provide implementation for the blank parts.\r\n- * \r\n- * In this example HalflingThief contains StealingMethod that can be changed. \r\n- * First the thief hits with HitAndRunMethod and then with SubtleMethod.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\tHalflingThief thief = new HalflingThief(new HitAndRunMethod());\r\n-\t\tthief.steal();\r\n-\t\tthief.changeMethod(new SubtleMethod());\r\n-\t\tthief.steal();\r\n-\t}\r\n-}\r\n+package com.iluwatar.templatemethod;\n+\n+/**\n+ * \n+ * Template Method defines a skeleton for an algorithm. The algorithm subclasses \n+ * provide implementation for the blank parts.\n+ * <p>\n+ * In this example {@link HalflingThief} contains {@link StealingMethod} that can be changed. \n+ * First the thief hits with {@link HitAndRunMethod} and then with {@link SubtleMethod}.\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\t\tHalflingThief thief = new HalflingThief(new HitAndRunMethod());\n+\t\tthief.steal();\n+\t\tthief.changeMethod(new SubtleMethod());\n+\t\tthief.steal();\n+\t}\n+}\n\ndiff --git a/template-method/src/main/java/com/iluwatar/templatemethod/HalflingThief.java b/template-method/src/main/java/com/iluwatar/templatemethod/HalflingThief.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/HalflingThief.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/HalflingThief.java\n@@ -1,23 +1,23 @@\n-package com.iluwatar.templatemethod;\r\n-\r\n-/**\r\n- * \r\n- * Halfling thief uses StealingMethod to steal.\r\n- * \r\n- */\r\n-public class HalflingThief {\r\n-\r\n-\tprivate StealingMethod method;\r\n-\r\n-\tpublic HalflingThief(StealingMethod method) {\r\n-\t\tthis.method = method;\r\n-\t}\r\n-\r\n-\tpublic void steal() {\r\n-\t\tmethod.steal();\r\n-\t}\r\n-\r\n-\tpublic void changeMethod(StealingMethod method) {\r\n-\t\tthis.method = method;\r\n-\t}\r\n-}\r\n+package com.iluwatar.templatemethod;\n+\n+/**\n+ * \n+ * Halfling thief uses {@link StealingMethod} to steal.\n+ * \n+ */\n+public class HalflingThief {\n+\n+\tprivate StealingMethod method;\n+\n+\tpublic HalflingThief(StealingMethod method) {\n+\t\tthis.method = method;\n+\t}\n+\n+\tpublic void steal() {\n+\t\tmethod.steal();\n+\t}\n+\n+\tpublic void changeMethod(StealingMethod method) {\n+\t\tthis.method = method;\n+\t}\n+}\n\ndiff --git a/template-method/src/main/java/com/iluwatar/templatemethod/HitAndRunMethod.java b/template-method/src/main/java/com/iluwatar/templatemethod/HitAndRunMethod.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/HitAndRunMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/HitAndRunMethod.java\n@@ -1,25 +1,25 @@\n-package com.iluwatar.templatemethod;\r\n-\r\n-/**\r\n- * \r\n- * HitAndRunMethod implementation of StealingMethod.\r\n- *\r\n- */\r\n-public class HitAndRunMethod extends StealingMethod {\r\n-\r\n-\t@Override\r\n-\tprotected String pickTarget() {\r\n-\t\treturn \"old goblin woman\";\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tprotected void confuseTarget(String target) {\r\n-\t\tSystem.out.println(\"Approach the \" + target + \" from behind.\");\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tprotected void stealTheItem(String target) {\r\n-\t\tSystem.out.println(\"Grab the handbag and run away fast!\");\r\n-\t}\r\n-\r\n-}\r\n+package com.iluwatar.templatemethod;\n+\n+/**\n+ * \n+ * HitAndRunMethod implementation of {@link StealingMethod}.\n+ *\n+ */\n+public class HitAndRunMethod extends StealingMethod {\n+\n+\t@Override\n+\tprotected String pickTarget() {\n+\t\treturn \"old goblin woman\";\n+\t}\n+\n+\t@Override\n+\tprotected void confuseTarget(String target) {\n+\t\tSystem.out.println(\"Approach the \" + target + \" from behind.\");\n+\t}\n+\n+\t@Override\n+\tprotected void stealTheItem(String target) {\n+\t\tSystem.out.println(\"Grab the handbag and run away fast!\");\n+\t}\n+\n+}\n\ndiff --git a/template-method/src/main/java/com/iluwatar/templatemethod/SubtleMethod.java b/template-method/src/main/java/com/iluwatar/templatemethod/SubtleMethod.java\n--- a/template-method/src/main/java/com/iluwatar/templatemethod/SubtleMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/templatemethod/SubtleMethod.java\n@@ -1,27 +1,27 @@\n-package com.iluwatar.templatemethod;\r\n-\r\n-/**\r\n- * \r\n- * SubtleMethod implementation of StealingMethod.\r\n- *\r\n- */\r\n-public class SubtleMethod extends StealingMethod {\r\n-\r\n-\t@Override\r\n-\tprotected String pickTarget() {\r\n-\t\treturn \"shop keeper\";\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tprotected void confuseTarget(String target) {\r\n-\t\tSystem.out.println(\"Approach the \" + target\r\n-\t\t\t\t+ \" with tears running and hug him!\");\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tprotected void stealTheItem(String target) {\r\n-\t\tSystem.out.println(\"While in close contact grab the \" + target\r\n-\t\t\t\t+ \"'s wallet.\");\r\n-\t}\r\n-\r\n-}\r\n+package com.iluwatar.templatemethod;\n+\n+/**\n+ * \n+ * SubtleMethod implementation of {@link StealingMethod}.\n+ *\n+ */\n+public class SubtleMethod extends StealingMethod {\n+\n+\t@Override\n+\tprotected String pickTarget() {\n+\t\treturn \"shop keeper\";\n+\t}\n+\n+\t@Override\n+\tprotected void confuseTarget(String target) {\n+\t\tSystem.out.println(\"Approach the \" + target\n+\t\t\t\t+ \" with tears running and hug him!\");\n+\t}\n+\n+\t@Override\n+\tprotected void stealTheItem(String target) {\n+\t\tSystem.out.println(\"While in close contact grab the \" + target\n+\t\t\t\t+ \"'s wallet.\");\n+\t}\n+\n+}\n\ndiff --git a/template-method/src/test/java/com/iluwatar/templatemethod/AppTest.java b/template-method/src/test/java/com/iluwatar/templatemethod/AppTest.java\n--- a/template-method/src/test/java/com/iluwatar/templatemethod/AppTest.java\n+++ b/template-method/src/test/java/com/iluwatar/templatemethod/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.templatemethod;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.templatemethod.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.templatemethod;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.templatemethod.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Template Method JavaDoc"
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/strategy/App.java b/strategy/src/main/java/com/iluwatar/strategy/App.java\n--- a/strategy/src/main/java/com/iluwatar/strategy/App.java\n+++ b/strategy/src/main/java/com/iluwatar/strategy/App.java\n@@ -1,22 +1,26 @@\n-package com.iluwatar.strategy;\r\n-\r\n-/**\r\n- * \r\n- * Strategy (DragonSlayingStrategy) encapsulates an algorithm. The containing\r\n- * object (DragonSlayer) can alter its behavior by changing its strategy.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\tSystem.out.println(\"Green dragon spotted ahead!\");\r\n-\t\tDragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());\r\n-\t\tdragonSlayer.goToBattle();\r\n-\t\tSystem.out.println(\"Red dragon emerges.\");\r\n-\t\tdragonSlayer.changeStrategy(new ProjectileStrategy());\r\n-\t\tdragonSlayer.goToBattle();\r\n-\t\tSystem.out.println(\"Black dragon lands before you.\");\r\n-\t\tdragonSlayer.changeStrategy(new SpellStrategy());\r\n-\t\tdragonSlayer.goToBattle();\r\n-\t}\r\n-}\r\n+package com.iluwatar.strategy;\n+\n+/**\n+ * \n+ * Strategy ({@link DragonSlayingStrategy}) encapsulates an algorithm. The containing\n+ * object ({@link DragonSlayer}) can alter its behavior by changing its strategy.\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\t\tSystem.out.println(\"Green dragon spotted ahead!\");\n+\t\tDragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());\n+\t\tdragonSlayer.goToBattle();\n+\t\tSystem.out.println(\"Red dragon emerges.\");\n+\t\tdragonSlayer.changeStrategy(new ProjectileStrategy());\n+\t\tdragonSlayer.goToBattle();\n+\t\tSystem.out.println(\"Black dragon lands before you.\");\n+\t\tdragonSlayer.changeStrategy(new SpellStrategy());\n+\t\tdragonSlayer.goToBattle();\n+\t}\n+}\n\ndiff --git a/strategy/src/test/java/com/iluwatar/strategy/AppTest.java b/strategy/src/test/java/com/iluwatar/strategy/AppTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/AppTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.strategy;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.strategy.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.strategy;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.strategy.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "JavaDoc for Strategy"
  },
  {
    "input": "diff --git a/state/src/main/java/com/iluwatar/state/App.java b/state/src/main/java/com/iluwatar/state/App.java\n--- a/state/src/main/java/com/iluwatar/state/App.java\n+++ b/state/src/main/java/com/iluwatar/state/App.java\n@@ -1,24 +1,24 @@\n-package com.iluwatar.state;\r\n-\r\n-/**\r\n- * \r\n- * In State pattern the container object (Mammoth) has an internal state object (State) that\r\n- * defines the current behavior. The state object can be changed to alter the\r\n- * behavior.\r\n- * \r\n- * In this example the mammoth changes its behavior as time passes by.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\r\n-\t\tMammoth mammoth = new Mammoth();\r\n-\t\tmammoth.observe();\r\n-\t\tmammoth.timePasses();\r\n-\t\tmammoth.observe();\r\n-\t\tmammoth.timePasses();\r\n-\t\tmammoth.observe();\r\n-\r\n-\t}\r\n-}\r\n+package com.iluwatar.state;\n+\n+/**\n+ * \n+ * In State pattern the container object ({@link Mammoth}) has an internal state object ({@link State}) that\n+ * defines the current behavior. The state object can be changed to alter the\n+ * behavior.\n+ * <p>\n+ * In this example the {@link Mammoth} changes its behavior as time passes by.\n+ * \n+ */\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\n+\t\tMammoth mammoth = new Mammoth();\n+\t\tmammoth.observe();\n+\t\tmammoth.timePasses();\n+\t\tmammoth.observe();\n+\t\tmammoth.timePasses();\n+\t\tmammoth.observe();\n+\n+\t}\n+}\n\ndiff --git a/state/src/test/java/com/iluwatar/state/AppTest.java b/state/src/test/java/com/iluwatar/state/AppTest.java\n--- a/state/src/test/java/com/iluwatar/state/AppTest.java\n+++ b/state/src/test/java/com/iluwatar/state/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.state;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.state.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.state;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.state.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "JavaDoc for State pattern"
  },
  {
    "input": "diff --git a/proxy/src/main/java/com/iluwatar/proxy/App.java b/proxy/src/main/java/com/iluwatar/proxy/App.java\n--- a/proxy/src/main/java/com/iluwatar/proxy/App.java\n+++ b/proxy/src/main/java/com/iluwatar/proxy/App.java\n@@ -1,20 +1,20 @@\n-package com.iluwatar.proxy;\r\n-\r\n-/**\r\n- * \r\n- * Proxy (WizardTowerProxy) controls access to the actual object (WizardTower).\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\r\n-\t\tWizardTowerProxy tower = new WizardTowerProxy();\r\n-\t\ttower.enter(new Wizard(\"Red wizard\"));\r\n-\t\ttower.enter(new Wizard(\"White wizard\"));\r\n-\t\ttower.enter(new Wizard(\"Black wizard\"));\r\n-\t\ttower.enter(new Wizard(\"Green wizard\"));\r\n-\t\ttower.enter(new Wizard(\"Brown wizard\"));\r\n-\r\n-\t}\r\n-}\r\n+package com.iluwatar.proxy;\n+\n+/**\n+ * \n+ * Proxy ({@link WizardTowerProxy}) controls access to the actual object ({@link WizardTower}).\n+ * \n+ */\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\n+\t\tWizardTowerProxy tower = new WizardTowerProxy();\n+\t\ttower.enter(new Wizard(\"Red wizard\"));\n+\t\ttower.enter(new Wizard(\"White wizard\"));\n+\t\ttower.enter(new Wizard(\"Black wizard\"));\n+\t\ttower.enter(new Wizard(\"Green wizard\"));\n+\t\ttower.enter(new Wizard(\"Brown wizard\"));\n+\n+\t}\n+}\n\ndiff --git a/proxy/src/main/java/com/iluwatar/proxy/Wizard.java b/proxy/src/main/java/com/iluwatar/proxy/Wizard.java\n--- a/proxy/src/main/java/com/iluwatar/proxy/Wizard.java\n+++ b/proxy/src/main/java/com/iluwatar/proxy/Wizard.java\n@@ -1,16 +1,21 @@\n-package com.iluwatar.proxy;\r\n-\r\n-public class Wizard {\r\n-\r\n-\tprivate String name;\r\n-\r\n-\tpublic Wizard(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic String toString() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-}\r\n+package com.iluwatar.proxy;\n+\n+/**\n+ * \n+ * Wizard\n+ *\n+ */\n+public class Wizard {\n+\n+\tprivate String name;\n+\n+\tpublic Wizard(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn name;\n+\t}\n+\n+}\n\ndiff --git a/proxy/src/main/java/com/iluwatar/proxy/WizardTowerProxy.java b/proxy/src/main/java/com/iluwatar/proxy/WizardTowerProxy.java\n--- a/proxy/src/main/java/com/iluwatar/proxy/WizardTowerProxy.java\n+++ b/proxy/src/main/java/com/iluwatar/proxy/WizardTowerProxy.java\n@@ -1,23 +1,23 @@\n-package com.iluwatar.proxy;\r\n-\r\n-/**\r\n- * \r\n- * The proxy controlling access to WizardTower.\r\n- * \r\n- */\r\n-public class WizardTowerProxy extends WizardTower {\r\n-\r\n-\tprivate static final int NUM_WIZARDS_ALLOWED = 3;\r\n-\r\n-\tprivate int numWizards;\r\n-\r\n-\t@Override\r\n-\tpublic void enter(Wizard wizard) {\r\n-\t\tif (numWizards < NUM_WIZARDS_ALLOWED) {\r\n-\t\t\tsuper.enter(wizard);\r\n-\t\t\tnumWizards++;\r\n-\t\t} else {\r\n-\t\t\tSystem.out.println(wizard + \" is not allowed to enter!\");\r\n-\t\t}\r\n-\t}\r\n-}\r\n+package com.iluwatar.proxy;\n+\n+/**\n+ * \n+ * The proxy controlling access to the {@link WizardTower}.\n+ * \n+ */\n+public class WizardTowerProxy extends WizardTower {\n+\n+\tprivate static final int NUM_WIZARDS_ALLOWED = 3;\n+\n+\tprivate int numWizards;\n+\n+\t@Override\n+\tpublic void enter(Wizard wizard) {\n+\t\tif (numWizards < NUM_WIZARDS_ALLOWED) {\n+\t\t\tsuper.enter(wizard);\n+\t\t\tnumWizards++;\n+\t\t} else {\n+\t\t\tSystem.out.println(wizard + \" is not allowed to enter!\");\n+\t\t}\n+\t}\n+}\n\ndiff --git a/proxy/src/test/java/com/iluwatar/proxy/AppTest.java b/proxy/src/test/java/com/iluwatar/proxy/AppTest.java\n--- a/proxy/src/test/java/com/iluwatar/proxy/AppTest.java\n+++ b/proxy/src/test/java/com/iluwatar/proxy/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.proxy;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.proxy.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.proxy;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.proxy.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "JavaDoc for Proxy example"
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java b/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java\n--- a/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java\n+++ b/private-class-data/src/main/java/com/iluwatar/privateclassdata/App.java\n@@ -1,34 +1,38 @@\n-package com.iluwatar.privateclassdata;\r\n-\r\n-/**\r\n- * \r\n- * The Private Class Data design pattern seeks to reduce exposure of attributes \r\n- * by limiting their visibility. It reduces the number of class attributes by \r\n- * encapsulating them in single data object. It allows the class designer to \r\n- * remove write privilege of attributes that are intended to be set only during \r\n- * construction, even from methods of the target class.\r\n- * \r\n- * In the example we have normal Stew class with some ingredients given in\r\n- * constructor. Then we have methods to enumerate the ingredients and to taste\r\n- * the stew. The method for tasting the stew alters the private members of the\r\n- * stew class.\r\n- * \r\n- * The problem is solved with the Private Class Data pattern. We introduce\r\n- * ImmutableStew class that contains StewData. The private data members of\r\n- * Stew are now in StewData and cannot be altered by ImmutableStew methods.\r\n- *\r\n- */\r\n-public class App {\r\n-\t\r\n-    public static void main( String[] args ) {\r\n-    \t// stew is mutable\r\n-    \tStew stew = new Stew(1, 2, 3, 4);\r\n-    \tstew.mix();\r\n-    \tstew.taste();\r\n-    \tstew.mix();\r\n-    \t\r\n-    \t// immutable stew protected with Private Class Data pattern\r\n-    \tImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);\r\n-    \timmutableStew.mix();\r\n-    }\r\n-}\r\n+package com.iluwatar.privateclassdata;\n+\n+/**\n+ * \n+ * The Private Class Data design pattern seeks to reduce exposure of attributes \n+ * by limiting their visibility. It reduces the number of class attributes by \n+ * encapsulating them in single data object. It allows the class designer to \n+ * remove write privilege of attributes that are intended to be set only during \n+ * construction, even from methods of the target class.\n+ * <p>\n+ * In the example we have normal {@link Stew} class with some ingredients given in\n+ * constructor. Then we have methods to enumerate the ingredients and to taste\n+ * the stew. The method for tasting the stew alters the private members of the\n+ * {@link Stew} class.\n+ * \n+ * The problem is solved with the Private Class Data pattern. We introduce\n+ * {@link ImmutableStew} class that contains {@link StewData}. The private data members of\n+ * {@link Stew} are now in {@link StewData} and cannot be altered by {@link ImmutableStew} methods.\n+ *\n+ */\n+public class App {\n+\t\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+    public static void main( String[] args ) {\n+    \t// stew is mutable\n+    \tStew stew = new Stew(1, 2, 3, 4);\n+    \tstew.mix();\n+    \tstew.taste();\n+    \tstew.mix();\n+    \t\n+    \t// immutable stew protected with Private Class Data pattern\n+    \tImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);\n+    \timmutableStew.mix();\n+    }\n+}\n\ndiff --git a/private-class-data/src/test/java/com/iluwatar/privateclassdata/AppTest.java b/private-class-data/src/test/java/com/iluwatar/privateclassdata/AppTest.java\n--- a/private-class-data/src/test/java/com/iluwatar/privateclassdata/AppTest.java\n+++ b/private-class-data/src/test/java/com/iluwatar/privateclassdata/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.privateclassdata;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.privateclassdata.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\t\r\n-}\r\n+package com.iluwatar.privateclassdata;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.privateclassdata.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\t\n+}",
    "output": "Improve Private Class Data example JavaDoc"
  },
  {
    "input": "diff --git a/memento/src/main/java/com/iluwatar/memento/App.java b/memento/src/main/java/com/iluwatar/memento/App.java\n--- a/memento/src/main/java/com/iluwatar/memento/App.java\n+++ b/memento/src/main/java/com/iluwatar/memento/App.java\n@@ -1,36 +1,36 @@\n-package com.iluwatar.memento;\r\n-\r\n-import java.util.Stack;\r\n-\r\n-/**\r\n- * \r\n- * Memento pattern is for storing and restoring object state. The object (Star)\r\n- * gives out a \"memento\" (StarMemento) that contains the state of the object.\r\n- * Later on the memento can be set back to the object restoring the state.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\tStack<StarMemento> states = new Stack<>();\r\n-\r\n-\t\tStar star = new Star(StarType.SUN, 10000000, 500000);\r\n-\t\tSystem.out.println(star);\r\n-\t\tstates.add(star.getMemento());\r\n-\t\tstar.timePasses();\r\n-\t\tSystem.out.println(star);\r\n-\t\tstates.add(star.getMemento());\r\n-\t\tstar.timePasses();\r\n-\t\tSystem.out.println(star);\r\n-\t\tstates.add(star.getMemento());\r\n-\t\tstar.timePasses();\r\n-\t\tSystem.out.println(star);\r\n-\t\tstates.add(star.getMemento());\r\n-\t\tstar.timePasses();\r\n-\t\tSystem.out.println(star);\r\n-\t\twhile (states.size() > 0) {\r\n-\t\t\tstar.setMemento(states.pop());\r\n-\t\t\tSystem.out.println(star);\r\n-\t\t}\r\n-\t}\r\n-}\r\n+package com.iluwatar.memento;\n+\n+import java.util.Stack;\n+\n+/**\n+ * \n+ * Memento pattern is for storing and restoring object state. The object ({@link Star})\n+ * gives out a \"memento\" ({@link StarMemento}) that contains the state of the object.\n+ * Later on the memento can be set back to the object restoring the state.\n+ * \n+ */\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\t\tStack<StarMemento> states = new Stack<>();\n+\n+\t\tStar star = new Star(StarType.SUN, 10000000, 500000);\n+\t\tSystem.out.println(star);\n+\t\tstates.add(star.getMemento());\n+\t\tstar.timePasses();\n+\t\tSystem.out.println(star);\n+\t\tstates.add(star.getMemento());\n+\t\tstar.timePasses();\n+\t\tSystem.out.println(star);\n+\t\tstates.add(star.getMemento());\n+\t\tstar.timePasses();\n+\t\tSystem.out.println(star);\n+\t\tstates.add(star.getMemento());\n+\t\tstar.timePasses();\n+\t\tSystem.out.println(star);\n+\t\twhile (states.size() > 0) {\n+\t\t\tstar.setMemento(states.pop());\n+\t\t\tSystem.out.println(star);\n+\t\t}\n+\t}\n+}\n\ndiff --git a/memento/src/main/java/com/iluwatar/memento/StarType.java b/memento/src/main/java/com/iluwatar/memento/StarType.java\n--- a/memento/src/main/java/com/iluwatar/memento/StarType.java\n+++ b/memento/src/main/java/com/iluwatar/memento/StarType.java\n@@ -1,17 +1,22 @@\n-package com.iluwatar.memento;\r\n-\r\n-public enum StarType {\r\n-\r\n-\tSUN(\"sun\"), RED_GIANT(\"red giant\"), WHITE_DWARF(\"white dwarf\"), SUPERNOVA(\"supernova\"), DEAD(\"dead star\"), UNDEFINED(\"\");\r\n-\r\n-    private String title;\r\n-\r\n-    StarType(String title) {\r\n-        this.title = title;\r\n-    }\r\n-\r\n-    @Override\r\n-\tpublic String toString() {\r\n-\t\treturn title;\r\n-\t}\r\n-}\r\n+package com.iluwatar.memento;\n+\n+/**\n+ * \n+ * StarType enumeration\n+ *\n+ */\n+public enum StarType {\n+\n+\tSUN(\"sun\"), RED_GIANT(\"red giant\"), WHITE_DWARF(\"white dwarf\"), SUPERNOVA(\"supernova\"), DEAD(\"dead star\"), UNDEFINED(\"\");\n+\n+    private String title;\n+\n+    StarType(String title) {\n+        this.title = title;\n+    }\n+\n+    @Override\n+\tpublic String toString() {\n+\t\treturn title;\n+\t}\n+}\n\ndiff --git a/memento/src/test/java/com/iluwatar/memento/AppTest.java b/memento/src/test/java/com/iluwatar/memento/AppTest.java\n--- a/memento/src/test/java/com/iluwatar/memento/AppTest.java\n+++ b/memento/src/test/java/com/iluwatar/memento/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.memento;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.memento.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.memento;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.memento.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Improve JavaDoc for Memento example"
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/mediator/App.java b/mediator/src/main/java/com/iluwatar/mediator/App.java\n--- a/mediator/src/main/java/com/iluwatar/mediator/App.java\n+++ b/mediator/src/main/java/com/iluwatar/mediator/App.java\n@@ -1,33 +1,37 @@\n-package com.iluwatar.mediator;\r\n-\r\n-/**\r\n- * \r\n- * Mediator encapsulates how a set of objects (PartyMember) interact. Instead of\r\n- * referring to each other directly they use a mediator (Party) interface.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\t\r\n-\t\t// create party and members\r\n-\t\tParty party = new PartyImpl();\r\n-\t\tHobbit hobbit = new Hobbit();\r\n-\t\tWizard wizard = new Wizard();\r\n-\t\tRogue rogue = new Rogue();\r\n-\t\tHunter hunter = new Hunter();\r\n-\r\n-\t\t// add party members\r\n-\t\tparty.addMember(hobbit);\r\n-\t\tparty.addMember(wizard);\r\n-\t\tparty.addMember(rogue);\r\n-\t\tparty.addMember(hunter);\r\n-\r\n-\t\t// perform actions -> the other party members\r\n-\t\t// are notified by the party\r\n-\t\thobbit.act(Action.ENEMY);\r\n-\t\twizard.act(Action.TALE);\r\n-\t\trogue.act(Action.GOLD);\r\n-\t\thunter.act(Action.HUNT);\r\n-\t}\r\n-}\r\n+package com.iluwatar.mediator;\n+\n+/**\n+ * \n+ * Mediator encapsulates how a set of objects ({@link PartyMember}) interact. Instead of\n+ * referring to each other directly they use a mediator ({@link Party}) interface.\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\t// create party and members\n+\t\tParty party = new PartyImpl();\n+\t\tHobbit hobbit = new Hobbit();\n+\t\tWizard wizard = new Wizard();\n+\t\tRogue rogue = new Rogue();\n+\t\tHunter hunter = new Hunter();\n+\n+\t\t// add party members\n+\t\tparty.addMember(hobbit);\n+\t\tparty.addMember(wizard);\n+\t\tparty.addMember(rogue);\n+\t\tparty.addMember(hunter);\n+\n+\t\t// perform actions -> the other party members\n+\t\t// are notified by the party\n+\t\thobbit.act(Action.ENEMY);\n+\t\twizard.act(Action.TALE);\n+\t\trogue.act(Action.GOLD);\n+\t\thunter.act(Action.HUNT);\n+\t}\n+}\n\ndiff --git a/mediator/src/main/java/com/iluwatar/mediator/PartyMember.java b/mediator/src/main/java/com/iluwatar/mediator/PartyMember.java\n--- a/mediator/src/main/java/com/iluwatar/mediator/PartyMember.java\n+++ b/mediator/src/main/java/com/iluwatar/mediator/PartyMember.java\n@@ -1,15 +1,15 @@\n-package com.iluwatar.mediator;\r\n-\r\n-/**\r\n- * \r\n- * Interface for party members interacting with Party.\r\n- * \r\n- */\r\n-public interface PartyMember {\r\n-\r\n-\tvoid joinedParty(Party party);\r\n-\r\n-\tvoid partyAction(Action action);\r\n-\r\n-\tvoid act(Action action);\r\n-}\r\n+package com.iluwatar.mediator;\n+\n+/**\n+ * \n+ * Interface for party members interacting with {@link Party}.\n+ * \n+ */\n+public interface PartyMember {\n+\n+\tvoid joinedParty(Party party);\n+\n+\tvoid partyAction(Action action);\n+\n+\tvoid act(Action action);\n+}\n\ndiff --git a/mediator/src/test/java/com/iluwatar/mediator/AppTest.java b/mediator/src/test/java/com/iluwatar/mediator/AppTest.java\n--- a/mediator/src/test/java/com/iluwatar/mediator/AppTest.java\n+++ b/mediator/src/test/java/com/iluwatar/mediator/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.mediator;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.mediator.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.mediator;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.mediator.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Improve JavaDoc for Mediator example"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -4,33 +4,22 @@\n \n /**\n  * \n- * <p>\n  * Layers is an architectural style where software responsibilities are\n  * divided among the different layers of the application.\n- * </p>\n- * \n  * <p>\n  * This example demonstrates a traditional 3-layer architecture consisting of data access\n  * layer, business layer and presentation layer.\n- * </p>\n- * \n  * <p>\n  * The data access layer is formed of Spring Data repositories <code>CakeDao</code>, <code>CakeToppingDao</code> and\n  * <code>CakeLayerDao</code>. The repositories can be used for CRUD operations on cakes, cake toppings\n  * and cake layers respectively.\n- * </p>\n- * \n  * <p>\n  * The business layer is built on top of the data access layer. <code>CakeBakingService</code> offers\n  * methods to retrieve available cake toppings and cake layers and baked cakes. Also the\n  * service is used to create new cakes out of cake toppings and cake layers.\n- * </p>\n- * \n  * <p>\n  * The presentation layer is built on the business layer and in this example it simply lists\n  * the cakes that have been baked.\n- * </p>\n- * \n  * <p>\n  * We have applied so called strict layering which means that the layers can only access \n  * the classes directly beneath them. This leads the solution to create an additional set of\n@@ -41,7 +30,6 @@\n  * layer DTOs (<code>CakeInfo</code>, <code>CakeToppingInfo</code>, <code>CakeLayerInfo</code>) \n  * and returns them instead. This way the presentation layer does not have any knowledge of \n  * other layers than the business layer and thus is not affected by changes to them.\n- * </p>\n  *\n  * @see Cake\n  * @see CakeTopping",
    "output": "JavaDoc improvements for Layers example"
  },
  {
    "input": "diff --git a/layers/src/test/java/com/iluwatar/layers/AppTest.java b/layers/src/test/java/com/iluwatar/layers/AppTest.java\n--- a/layers/src/test/java/com/iluwatar/layers/AppTest.java\n+++ b/layers/src/test/java/com/iluwatar/layers/AppTest.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar.layers;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.layers.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add missing test for Layers example"
  },
  {
    "input": "diff --git a/facade/src/main/java/com/iluwatar/facade/App.java b/facade/src/main/java/com/iluwatar/facade/App.java\n--- a/facade/src/main/java/com/iluwatar/facade/App.java\n+++ b/facade/src/main/java/com/iluwatar/facade/App.java\n@@ -1,17 +1,22 @@\n-package com.iluwatar.facade;\r\n-\r\n-/**\r\n- * \r\n- * Facade (DwarvenGoldmineFacade) provides simpler interface to subsystem.\r\n- * http://en.wikipedia.org/wiki/Facade_pattern\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\tDwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();\r\n-\t\tfacade.startNewDay();\r\n-\t\tfacade.digOutGold();\r\n-\t\tfacade.endDay();\r\n-\t}\r\n-}\r\n+package com.iluwatar.facade;\n+\n+/**\n+ * \n+ * Facade ({@link DwarvenGoldmineFacade}) provides simpler interface to subsystem.\n+ * <p>\n+ * http://en.wikipedia.org/wiki/Facade_pattern\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\t\tDwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();\n+\t\tfacade.startNewDay();\n+\t\tfacade.digOutGold();\n+\t\tfacade.endDay();\n+\t}\n+}\n\ndiff --git a/facade/src/test/java/com/iluwatar/facade/AppTest.java b/facade/src/test/java/com/iluwatar/facade/AppTest.java\n--- a/facade/src/test/java/com/iluwatar/facade/AppTest.java\n+++ b/facade/src/test/java/com/iluwatar/facade/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.facade;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.facade.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.facade;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.facade.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Facade example JavaDoc"
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/decorator/App.java b/decorator/src/main/java/com/iluwatar/decorator/App.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/App.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/App.java\n@@ -1,29 +1,33 @@\n-package com.iluwatar.decorator;\r\n-\r\n-/**\r\n- * \r\n- * Decorator pattern is more flexible alternative to subclassing. The decorator\r\n- * class implements the same interface as the target and uses composition to\r\n- * \"decorate\" calls to the target.\r\n- * \r\n- * Using decorator pattern it is possible to change class behavior during\r\n- * runtime, as the example shows.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\r\n-\t\t// simple troll\r\n-\t\tSystem.out.println(\"A simple looking troll approaches.\");\r\n-\t\tHostile troll = new Troll();\r\n-\t\ttroll.attack();\r\n-\t\ttroll.fleeBattle();\r\n-\r\n-\t\t// change the behavior of the simple troll by adding a decorator\r\n-\t\tSystem.out.println(\"\\nA smart looking troll surprises you.\");\r\n-\t\tHostile smart = new SmartTroll(troll);\r\n-\t\tsmart.attack();\r\n-\t\tsmart.fleeBattle();\r\n-\t}\r\n-}\r\n+package com.iluwatar.decorator;\n+\n+/**\n+ * \n+ * Decorator pattern is a more flexible alternative to subclassing. The decorator\n+ * class implements the same interface as the target and uses composition to\n+ * \"decorate\" calls to the target.\n+ * <p>\n+ * Using decorator pattern it is possible to change class behavior during\n+ * runtime, as the example shows.\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\n+\t\t// simple troll\n+\t\tSystem.out.println(\"A simple looking troll approaches.\");\n+\t\tHostile troll = new Troll();\n+\t\ttroll.attack();\n+\t\ttroll.fleeBattle();\n+\n+\t\t// change the behavior of the simple troll by adding a decorator\n+\t\tSystem.out.println(\"\\nA smart looking troll surprises you.\");\n+\t\tHostile smart = new SmartTroll(troll);\n+\t\tsmart.attack();\n+\t\tsmart.fleeBattle();\n+\t}\n+}\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java b/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/SmartTroll.java\n@@ -1,30 +1,30 @@\n-package com.iluwatar.decorator;\r\n-\r\n-/**\r\n- * SmartTroll is a decorator for Hostile objects.\r\n- * The calls to the Hostile interface are intercepted\r\n- * and decorated. Finally the calls are delegated\r\n- * to the decorated Hostile object.\r\n- *\r\n- */\r\n-public class SmartTroll implements Hostile {\r\n-\r\n-\tprivate Hostile decorated;\r\n-\r\n-\tpublic SmartTroll(Hostile decorated) {\r\n-\t\tthis.decorated = decorated;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void attack() {\r\n-\t\tSystem.out.println(\"The troll throws a rock at you!\");\r\n-\t\tdecorated.attack();\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void fleeBattle() {\r\n-\t\tSystem.out.println(\"The troll calls for help!\");\r\n-\t\tdecorated.fleeBattle();\r\n-\t}\r\n-\r\n-}\r\n+package com.iluwatar.decorator;\n+\n+/**\n+ * SmartTroll is a decorator for {@link Hostile} objects.\n+ * The calls to the {@link Hostile} interface are intercepted\n+ * and decorated. Finally the calls are delegated\n+ * to the decorated {@link Hostile} object.\n+ *\n+ */\n+public class SmartTroll implements Hostile {\n+\n+\tprivate Hostile decorated;\n+\n+\tpublic SmartTroll(Hostile decorated) {\n+\t\tthis.decorated = decorated;\n+\t}\n+\n+\t@Override\n+\tpublic void attack() {\n+\t\tSystem.out.println(\"The troll throws a rock at you!\");\n+\t\tdecorated.attack();\n+\t}\n+\n+\t@Override\n+\tpublic void fleeBattle() {\n+\t\tSystem.out.println(\"The troll calls for help!\");\n+\t\tdecorated.fleeBattle();\n+\t}\n+\n+}\n\ndiff --git a/decorator/src/main/java/com/iluwatar/decorator/Troll.java b/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n--- a/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n+++ b/decorator/src/main/java/com/iluwatar/decorator/Troll.java\n@@ -1,18 +1,18 @@\n-package com.iluwatar.decorator;\r\n-\r\n-/**\r\n- * \r\n- * Troll implements Hostile interface directly.\r\n- *\r\n- */\r\n-public class Troll implements Hostile {\r\n-\r\n-\tpublic void attack() {\r\n-\t\tSystem.out.println(\"The troll swings at you with a club!\");\r\n-\t}\r\n-\r\n-\tpublic void fleeBattle() {\r\n-\t\tSystem.out.println(\"The troll shrieks in horror and runs away!\");\r\n-\t}\r\n-\r\n-}\r\n+package com.iluwatar.decorator;\n+\n+/**\n+ * \n+ * Troll implements {@link Hostile} interface directly.\n+ *\n+ */\n+public class Troll implements Hostile {\n+\n+\tpublic void attack() {\n+\t\tSystem.out.println(\"The troll swings at you with a club!\");\n+\t}\n+\n+\tpublic void fleeBattle() {\n+\t\tSystem.out.println(\"The troll shrieks in horror and runs away!\");\n+\t}\n+\n+}\n\ndiff --git a/decorator/src/test/java/com/iluwatar/decorator/AppTest.java b/decorator/src/test/java/com/iluwatar/decorator/AppTest.java\n--- a/decorator/src/test/java/com/iluwatar/decorator/AppTest.java\n+++ b/decorator/src/test/java/com/iluwatar/decorator/AppTest.java\n@@ -1,14 +1,19 @@\n-package com.iluwatar.decorator;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import com.iluwatar.decorator.App;\r\n-\r\n-public class AppTest {\r\n-\r\n-\t@Test\r\n-\tpublic void test() {\r\n-\t\tString[] args = {};\r\n-\t\tApp.main(args);\r\n-\t}\r\n-}\r\n+package com.iluwatar.decorator;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.decorator.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Decorator example JavaDoc"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/App.java b/adapter/src/main/java/com/iluwatar/adapter/App.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/App.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/App.java\n@@ -1,21 +1,25 @@\n-package com.iluwatar.adapter;\r\n-\r\n-/**\r\n- * \r\n- * There are two variations of the Adapter pattern: The class adapter implements\r\n- * the adaptee's interface whereas the object adapter uses composition to\r\n- * contain the adaptee in the adapter object. This example uses the object\r\n- * adapter approach.\r\n- * \r\n- * The Adapter (GnomeEngineer) converts the interface of the target class\r\n- * (GoblinGlider) into a suitable one expected by the client\r\n- * (GnomeEngineeringManager).\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\tEngineer manager = new GnomeEngineeringManager();\r\n-\t\tmanager.operateDevice();\r\n-\t}\r\n-}\r\n+package com.iluwatar.adapter;\n+\n+/**\n+ * \n+ * There are two variations of the Adapter pattern: The class adapter implements\n+ * the adaptee's interface whereas the object adapter uses composition to\n+ * contain the adaptee in the adapter object. This example uses the object\n+ * adapter approach.\n+ * <p>\n+ * The Adapter ({@link GnomeEngineer}) converts the interface of the target class\n+ * ({@link GoblinGlider}) into a suitable one expected by the client\n+ * ({@link GnomeEngineeringManager}).\n+ * \n+ */\n+public class App {\n+\n+\t/**\n+\t * Program entry point\n+\t * @param args command line args\n+\t */\n+\tpublic static void main(String[] args) {\n+\t\tEngineer manager = new GnomeEngineeringManager();\n+\t\tmanager.operateDevice();\n+\t}\n+}\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java\n@@ -1,24 +1,24 @@\n-package com.iluwatar.adapter;\r\n-\r\n-/**\r\n- * \r\n- * Adapter class. Adapts the interface of the device (GoblinGlider) into\r\n- * Engineer interface expected by the client (GnomeEngineeringManager).\r\n- * \r\n- */\r\n-public class GnomeEngineer implements Engineer {\r\n-\r\n-\tprivate GoblinGlider glider;\r\n-\r\n-\tpublic GnomeEngineer() {\r\n-\t\tglider = new GoblinGlider();\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void operateDevice() {\r\n-\t\tglider.attachGlider();\r\n-\t\tglider.gainSpeed();\r\n-\t\tglider.takeOff();\r\n-\t}\r\n-\r\n-}\r\n+package com.iluwatar.adapter;\n+\n+/**\n+ * \n+ * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into\n+ * {@link Engineer} interface expected by the client ({@link GnomeEngineeringManager}).\n+ * \n+ */\n+public class GnomeEngineer implements Engineer {\n+\n+\tprivate GoblinGlider glider;\n+\n+\tpublic GnomeEngineer() {\n+\t\tglider = new GoblinGlider();\n+\t}\n+\n+\t@Override\n+\tpublic void operateDevice() {\n+\t\tglider.attachGlider();\n+\t\tglider.gainSpeed();\n+\t\tglider.takeOff();\n+\t}\n+\n+}\n\ndiff --git a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java\n@@ -1,20 +1,20 @@\n-package com.iluwatar.adapter;\r\n-\r\n-/**\r\n- * \r\n- * GnomeEngineering manager uses Engineer to operate devices.\r\n- * \r\n- */\r\n-public class GnomeEngineeringManager implements Engineer {\r\n-\r\n-\tprivate Engineer engineer;\r\n-\r\n-\tpublic GnomeEngineeringManager() {\r\n-\t\tengineer = new GnomeEngineer();\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void operateDevice() {\r\n-\t\tengineer.operateDevice();\r\n-\t}\r\n-}\r\n+package com.iluwatar.adapter;\n+\n+/**\n+ * \n+ * GnomeEngineering manager uses {@link Engineer} to operate devices.\n+ * \n+ */\n+public class GnomeEngineeringManager implements Engineer {\n+\n+\tprivate Engineer engineer;\n+\n+\tpublic GnomeEngineeringManager() {\n+\t\tengineer = new GnomeEngineer();\n+\t}\n+\n+\t@Override\n+\tpublic void operateDevice() {\n+\t\tengineer.operateDevice();\n+\t}\n+}",
    "output": "JavaDoc improvements for the Adapter example"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/repository/App.java b/repository/src/main/java/com/iluwatar/repository/App.java\n--- a/repository/src/main/java/com/iluwatar/repository/App.java\n+++ b/repository/src/main/java/com/iluwatar/repository/App.java\n@@ -24,39 +24,39 @@ public class App {\n \tpublic static void main(String[] args) {\n \t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n \t\t\t\t\"applicationContext.xml\");\n-\t\tPersonDao dao = context.getBean(PersonDao.class);\n+\t\tPersonRepository repository = context.getBean(PersonRepository.class);\n \n \t\tPerson peter = new Person(\"Peter\", \"Sagan\");\n \t\tPerson nasta = new Person(\"Nasta\", \"Kuzminova\");\n \n \t\t// Add new Person records\n-\t\tdao.save(peter);\n-\t\tdao.save(nasta);\n+\t\trepository.save(peter);\n+\t\trepository.save(nasta);\n \n \t\t// Count Person records\n-\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n+\t\tSystem.out.println(\"Count Person records: \" + repository.count());\n \n \t\t// Print all records\n-\t\tList<Person> persons = (List<Person>) dao.findAll();\n+\t\tList<Person> persons = (List<Person>) repository.findAll();\n \t\tfor (Person person : persons) {\n \t\t\tSystem.out.println(person);\n \t\t}\n \n \t\t// Find Person by surname\n-\t\tSystem.out.println(\"Find by surname 'Sagan': \"\t+ dao.findBySurname(\"Sagan\"));\n+\t\tSystem.out.println(\"Find by surname 'Sagan': \"\t+ repository.findBySurname(\"Sagan\"));\n \n \t\t// Update Person\n \t\tnasta.setName(\"Barbora\");\n \t\tnasta.setSurname(\"Spotakova\");\n-\t\tdao.save(nasta);\n+\t\trepository.save(nasta);\n \n-\t\tSystem.out.println(\"Find by id 2: \" + dao.findOne(2L));\n+\t\tSystem.out.println(\"Find by id 2: \" + repository.findOne(2L));\n \n \t\t// Remove record from Person\n-\t\tdao.delete(2L);\n+\t\trepository.delete(2L);\n \n \t\t// And finally count records\n-\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n+\t\tSystem.out.println(\"Count Person records: \" + repository.count());\n \n \t\tcontext.close();\n \t}\n\ndiff --git a/repository/src/main/java/com/iluwatar/repository/PersonRepository.java b/repository/src/main/java/com/iluwatar/repository/PersonRepository.java\n--- a/repository/src/main/java/com/iluwatar/repository/PersonRepository.java\n+++ b/repository/src/main/java/com/iluwatar/repository/PersonRepository.java\n@@ -11,7 +11,7 @@\n  *\n  */\n @Repository\n-public interface PersonDao extends CrudRepository<Person, Long> {\n+public interface PersonRepository extends CrudRepository<Person, Long> {\n \t\n \tpublic List<Person> findBySurname(String surname);\n }",
    "output": "Improve naming in Repository example"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -20,16 +20,26 @@ private static void initializeData(CakeBakingService cakeBakingService) {\n \t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"chocolate\", 1200));\n \t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"banana\", 900));\n \t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"strawberry\", 950));\n-\t\tcakeBakingService.getAllLayers().stream().forEach((layer) -> System.out.println(layer));\n+\t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"lemon\", 950));\n+\t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"vanilla\", 950));\n+\t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"strawberry\", 950));\n \t\t\n \t\tcakeBakingService.saveNewTopping(new CakeToppingInfo(\"candies\", 350));\n-\t\tcakeBakingService.getAllToppings().stream().forEach((topping) -> System.out.println(topping));\n+\t\tcakeBakingService.saveNewTopping(new CakeToppingInfo(\"cherry\", 350));\n \n-\t\tCakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo(\"candies\", 0),\n+\t\tCakeInfo cake1 = new CakeInfo(new CakeToppingInfo(\"candies\", 0),\n \t\t\t\tArrays.asList(new CakeLayerInfo(\"chocolate\", 0), new CakeLayerInfo(\"banana\", 0),\n \t\t\t\t\t\tnew CakeLayerInfo(\"strawberry\", 0)));\n \t\ttry {\n-\t\t\tcakeBakingService.bakeNewCake(cakeInfo);\n+\t\t\tcakeBakingService.bakeNewCake(cake1);\n+\t\t} catch (CakeBakingException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tCakeInfo cake2 = new CakeInfo(new CakeToppingInfo(\"cherry\", 0),\n+\t\t\t\tArrays.asList(new CakeLayerInfo(\"vanilla\", 0), new CakeLayerInfo(\"lemon\", 0),\n+\t\t\t\t\t\tnew CakeLayerInfo(\"strawberry\", 0)));\n+\t\ttry {\n+\t\t\tcakeBakingService.bakeNewCake(cake2);\n \t\t} catch (CakeBakingException e) {\n \t\t\te.printStackTrace();\n \t\t}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java\n@@ -10,9 +10,9 @@ public interface CakeBakingService {\n \n \tvoid saveNewTopping(CakeToppingInfo toppingInfo);\n \n-\tList<CakeToppingInfo> getAllToppings();\n+\tList<CakeToppingInfo> getAvailableToppings();\n \t\n \tvoid saveNewLayer(CakeLayerInfo layerInfo);\n \t\n-\tList<CakeLayerInfo> getAllLayers();\n+\tList<CakeLayerInfo> getAvailableLayers();\n }\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java\n@@ -25,13 +25,13 @@ public CakeBakingServiceImpl() {\n \t\n \t@Override\n \tpublic void bakeNewCake(CakeInfo cakeInfo) throws CakeBakingException {\n-\t\tList<CakeToppingInfo> allToppings = getAllToppings();\n+\t\tList<CakeToppingInfo> allToppings = getAvailableToppings();\n \t\tList<CakeToppingInfo> matchingToppings = allToppings.stream()\n \t\t\t\t.filter((t) -> t.name.equals(cakeInfo.cakeToppingInfo.name)).collect(Collectors.toList());\n \t\tif (matchingToppings.isEmpty()) {\n \t\t\tthrow new CakeBakingException(String.format(\"Topping %s is not available\", cakeInfo.cakeToppingInfo.name));\n \t\t}\n-\t\tList<CakeLayer> allLayers = getAllLayerEntities();\n+\t\tList<CakeLayer> allLayers = getAvailableLayerEntities();\n \t\tSet<CakeLayer> foundLayers = new HashSet<>();\n \t\tfor (CakeLayerInfo info: cakeInfo.cakeLayerInfos) {\n \t\t\tOptional<CakeLayer> found = allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();\n@@ -69,46 +69,56 @@ public void saveNewLayer(CakeLayerInfo layerInfo) {\n \t\tbean.save(new CakeLayer(layerInfo.name, layerInfo.calories));\n \t}\n \n-\tprivate List<CakeTopping> getAllToppingEntities() {\n+\tprivate List<CakeTopping> getAvailableToppingEntities() {\n \t\tCakeToppingDao bean = context.getBean(CakeToppingDao.class);\n \t\tList<CakeTopping> result = new ArrayList<>();\n \t\tIterator<CakeTopping> iterator = bean.findAll().iterator();\n \t\twhile (iterator.hasNext()) {\n-\t\t\tresult.add(iterator.next());\n+\t\t\tCakeTopping topping = iterator.next();\n+\t\t\tif (topping.getCake() == null) {\n+\t\t\t\tresult.add(topping);\n+\t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n \t\n \t@Override\n-\tpublic List<CakeToppingInfo> getAllToppings() {\n+\tpublic List<CakeToppingInfo> getAvailableToppings() {\n \t\tCakeToppingDao bean = context.getBean(CakeToppingDao.class);\n \t\tList<CakeToppingInfo> result = new ArrayList<>();\n \t\tIterator<CakeTopping> iterator = bean.findAll().iterator();\n \t\twhile (iterator.hasNext()) {\n \t\t\tCakeTopping next = iterator.next();\n-\t\t\tresult.add(new CakeToppingInfo(next.getId(), next.getName(), next.getCalories()));\n+\t\t\tif (next.getCake() == null) {\n+\t\t\t\tresult.add(new CakeToppingInfo(next.getId(), next.getName(), next.getCalories()));\n+\t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n \n-\tprivate List<CakeLayer> getAllLayerEntities() {\n+\tprivate List<CakeLayer> getAvailableLayerEntities() {\n \t\tCakeLayerDao bean = context.getBean(CakeLayerDao.class);\n \t\tList<CakeLayer> result = new ArrayList<>();\n \t\tIterator<CakeLayer> iterator = bean.findAll().iterator();\n \t\twhile (iterator.hasNext()) {\n-\t\t\tresult.add(iterator.next());\n+\t\t\tCakeLayer next = iterator.next();\n+\t\t\tif (next.getCake() == null) {\n+\t\t\t\tresult.add(next);\n+\t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n \t\n \t@Override\n-\tpublic List<CakeLayerInfo> getAllLayers() {\n+\tpublic List<CakeLayerInfo> getAvailableLayers() {\n \t\tCakeLayerDao bean = context.getBean(CakeLayerDao.class);\n \t\tList<CakeLayerInfo> result = new ArrayList<>();\n \t\tIterator<CakeLayer> iterator = bean.findAll().iterator();\n \t\twhile (iterator.hasNext()) {\n \t\t\tCakeLayer next = iterator.next();\n-\t\t\tresult.add(new CakeLayerInfo(next.getId(), next.getName(), next.getCalories()));\n+\t\t\tif (next.getCake() == null) {\n+\t\t\t\tresult.add(new CakeLayerInfo(next.getId(), next.getName(), next.getCalories()));\n+\t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeInfo.java b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeInfo.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java\n@@ -21,8 +21,15 @@ public CakeInfo(CakeToppingInfo cakeToppingInfo, List<CakeLayerInfo> cakeLayerIn\n \t\tthis.cakeLayerInfos = cakeLayerInfos;\n \t}\n \t\n+\tpublic int calculateTotalCalories() {\n+\t\tint total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;\n+\t\ttotal += cakeLayerInfos.stream().mapToInt(c -> c.calories).sum();\n+\t\treturn total;\n+\t}\n+\t\n \t@Override\n \tpublic String toString() {\n-\t\treturn String.format(\"CakeInfo id=%d topping=%s layers=%s\", id.get(), cakeToppingInfo, cakeLayerInfos);\n+\t\treturn String.format(\"CakeInfo id=%d topping=%s layers=%s totalCalories=%d\", id.get(), cakeToppingInfo,\n+\t\t\t\tcakeLayerInfos, calculateTotalCalories());\n \t}\n }",
    "output": "Example improvements. Instead of all toppings and all layers the\nservice returns available toppings and layers."
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -3,11 +3,16 @@\n import java.util.Arrays;\n \n public class App {\n+\n+\tprivate static CakeBakingService cakeBakingService = new CakeBakingServiceImpl();\n \t\n \tpublic static void main(String[] args) {\n-\t\tCakeBakingService cakeBakingService = new CakeBakingServiceImpl();\n+\t\t\n+\t\t// initialize example data\n \t\tinitializeData(cakeBakingService);\n-\t\tCakeView cakeView = new CakeView(cakeBakingService);\n+\t\t\n+\t\t// create view and render it\n+\t\tCakeViewImpl cakeView = new CakeViewImpl(cakeBakingService);\n \t\tcakeView.render();\n \t}\n \t\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeViewImpl.java b/layers/src/main/java/com/iluwatar/layers/CakeViewImpl.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeViewImpl.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeViewImpl.java\n@@ -1,10 +1,10 @@\n package com.iluwatar.layers;\n \n-public class CakeView {\n+public class CakeViewImpl implements View {\n \n \tprivate CakeBakingService cakeBakingService;\n \n-\tpublic CakeView(CakeBakingService cakeBakingService) {\n+\tpublic CakeViewImpl(CakeBakingService cakeBakingService) {\n \t\tthis.cakeBakingService = cakeBakingService;\n \t}\n \t\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/View.java b/layers/src/main/java/com/iluwatar/layers/View.java\n--- a/layers/src/main/java/com/iluwatar/layers/View.java\n+++ b/layers/src/main/java/com/iluwatar/layers/View.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar.layers;\n+\n+public interface View {\n+\n+\tvoid render();\n+\t\n+}",
    "output": "Add interface for view layer"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -5,24 +5,28 @@\n public class App {\n \t\n \tpublic static void main(String[] args) {\n-\n-\t\tCakeBakingService service = new CakeBakingServiceImpl();\n-\t\tservice.saveNewLayer(new CakeLayerInfo(\"chocolate\", 1200));\n-\t\tservice.saveNewLayer(new CakeLayerInfo(\"banana\", 900));\n-\t\tservice.saveNewLayer(new CakeLayerInfo(\"strawberry\", 950));\n-\t\tservice.getAllLayers().stream().forEach((layer) -> System.out.println(layer));\n+\t\tCakeBakingService cakeBakingService = new CakeBakingServiceImpl();\n+\t\tinitializeData(cakeBakingService);\n+\t\tCakeView cakeView = new CakeView(cakeBakingService);\n+\t\tcakeView.render();\n+\t}\n+\t\n+\tprivate static void initializeData(CakeBakingService cakeBakingService) {\n+\t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"chocolate\", 1200));\n+\t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"banana\", 900));\n+\t\tcakeBakingService.saveNewLayer(new CakeLayerInfo(\"strawberry\", 950));\n+\t\tcakeBakingService.getAllLayers().stream().forEach((layer) -> System.out.println(layer));\n \t\t\n-\t\tservice.saveNewTopping(new CakeToppingInfo(\"candies\", 350));\n-\t\tservice.getAllToppings().stream().forEach((topping) -> System.out.println(topping));\n+\t\tcakeBakingService.saveNewTopping(new CakeToppingInfo(\"candies\", 350));\n+\t\tcakeBakingService.getAllToppings().stream().forEach((topping) -> System.out.println(topping));\n \n \t\tCakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo(\"candies\", 0),\n \t\t\t\tArrays.asList(new CakeLayerInfo(\"chocolate\", 0), new CakeLayerInfo(\"banana\", 0),\n \t\t\t\t\t\tnew CakeLayerInfo(\"strawberry\", 0)));\n \t\ttry {\n-\t\t\tservice.bakeNewCake(cakeInfo);\n+\t\t\tcakeBakingService.bakeNewCake(cakeInfo);\n \t\t} catch (CakeBakingException e) {\n \t\t\te.printStackTrace();\n \t\t}\n-\t\tservice.getAllCakes().stream().forEach((cake) -> System.out.println(cake));\n \t}\n }\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeView.java b/layers/src/main/java/com/iluwatar/layers/CakeView.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeView.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeView.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar.layers;\n+\n+public class CakeView {\n+\n+\tprivate CakeBakingService cakeBakingService;\n+\n+\tpublic CakeView(CakeBakingService cakeBakingService) {\n+\t\tthis.cakeBakingService = cakeBakingService;\n+\t}\n+\t\n+\tpublic void render() {\n+\t\tcakeBakingService.getAllCakes().stream().forEach((cake) -> System.out.println(cake));\n+\t}\n+}",
    "output": "Add view layer"
  },
  {
    "input": "diff --git a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n--- a/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n+++ b/step-builder/src/main/java/com/iluwatar/stepbuilder/Character.java\n@@ -71,9 +71,9 @@ public String toString() {\n \t\tStringBuilder sb = new StringBuilder();\n \t\tsb.append(\"This is a \");\n \t\tsb.append(fighterClass != null ? fighterClass : wizardClass);\n-\t\tsb.append(\" named a \");\n+\t\tsb.append(\" named \");\n \t\tsb.append(name);\n-\t\tsb.append(\" armed \");\n+\t\tsb.append(\" armed with a \");\n \t\tsb.append(weapon != null ? weapon : spell != null ? spell : \"with nothing\");\n \t\tsb.append(abilities != null ? (\" and wielding \" + abilities + \" abilities\") : \"\");\n \t\tsb.append(\".\");",
    "output": "Minor fixes in Step Builder"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -11,40 +11,6 @@ public static void main(String[] args) {\n \t\tCakeLayerDao cakeLayerDao = context.getBean(CakeLayerDao.class);\n \t\tcakeLayerDao.save(new CakeLayer(\"strawberry\", 1200));\n \t\tSystem.out.println(\"Count CakeLayer records: \" + cakeLayerDao.count());\n-\t\t\n-//\t\tPersonDao dao = context.getBean(PersonDao.class);\n-//\n-//\t\tPerson peter = new Person(\"Peter\", \"Sagan\");\n-//\t\tPerson nasta = new Person(\"Nasta\", \"Kuzminova\");\n-//\n-//\t\t// Add new Person records\n-//\t\tdao.save(peter);\n-//\t\tdao.save(nasta);\n-//\n-//\t\t// Count Person records\n-//\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n-//\n-//\t\t// Print all records\n-//\t\tList<Person> persons = (List<Person>) dao.findAll();\n-//\t\tfor (Person person : persons) {\n-//\t\t\tSystem.out.println(person);\n-//\t\t}\n-//\n-//\t\t// Find Person by surname\n-//\t\tSystem.out.println(\"Find by surname 'Sagan': \"\t+ dao.findBySurname(\"Sagan\"));\n-//\n-//\t\t// Update Person\n-//\t\tnasta.setName(\"Barbora\");\n-//\t\tnasta.setSurname(\"Spotakova\");\n-//\t\tdao.save(nasta);\n-//\n-//\t\tSystem.out.println(\"Find by id 2: \" + dao.findOne(2L));\n-//\n-//\t\t// Remove record from Person\n-//\t\tdao.delete(2L);\n-//\n-//\t\t// And finally count records\n-//\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n \n \t\tcontext.close();\n \t}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar.layers;\n+\n+public interface CakeBakingService {\n+\t\n+\tvoid bakeNewCake(String topping, String layer1, String layer2, String layer3);\n+\n+\tvoid addNewTopping(CakeTopping topping);\n+\t\n+\tvoid addNewLayer(CakeLayer layer);\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar.layers;\n+\n+public class CakeBakingServiceImpl implements CakeBakingService {\n+\n+\t@Override\n+\tpublic void bakeNewCake(String topping, String layer1, String layer2, String layer3) {\n+\t}\n+\n+\t@Override\n+\tpublic void addNewTopping(CakeTopping topping) {\n+\t\t// TODO Auto-generated method stub\n+\t\t\n+\t}\n+\n+\t@Override\n+\tpublic void addNewLayer(CakeLayer layer) {\n+\t\t// TODO Auto-generated method stub\n+\t\t\n+\t}\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeInfo.java b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeInfo.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeInfo.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar.layers;\n+\n+public class CakeInfo {\n+\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeLayerInfo.java b/layers/src/main/java/com/iluwatar/layers/CakeLayerInfo.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeLayerInfo.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeLayerInfo.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar.layers;\n+\n+public class CakeLayerInfo {\n+\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeToppingInfo.java b/layers/src/main/java/com/iluwatar/layers/CakeToppingInfo.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeToppingInfo.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeToppingInfo.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar.layers;\n+\n+public class CakeToppingInfo {\n+\n+}",
    "output": "Work on Service Layer"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/Cake.java b/layers/src/main/java/com/iluwatar/layers/Cake.java\n--- a/layers/src/main/java/com/iluwatar/layers/Cake.java\n+++ b/layers/src/main/java/com/iluwatar/layers/Cake.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar.layers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class Cake {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate Long id;\n+\t\n+\t@OneToMany\n+\tprivate List<CakeLayer> layers;\n+\n+\t@OneToOne\n+\tprivate CakeTopping topping;\n+\t\n+\tpublic Cake() {\t\t\n+\t\tlayers = new ArrayList<>();\n+\t}\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeLayer.java b/layers/src/main/java/com/iluwatar/layers/CakeLayer.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeLayer.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeLayer.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar.layers;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class CakeLayer {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate Long id;\n+\n+\tprivate String name;\n+\n+\tprivate int calories;\n+\n+\tpublic CakeLayer() {\n+\t}\n+\n+\tpublic CakeLayer(String name, int calories) {\n+\t\tthis.name = name;\n+\t\tthis.calories = calories;\n+\t}\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/CakeTopping.java b/layers/src/main/java/com/iluwatar/layers/CakeTopping.java\n--- a/layers/src/main/java/com/iluwatar/layers/CakeTopping.java\n+++ b/layers/src/main/java/com/iluwatar/layers/CakeTopping.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar.layers;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class CakeTopping {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate Long id;\n+\t\n+\tprivate String name;\n+\t\n+\tprivate int calories;\n+\t\n+\tpublic CakeTopping() {\n+\t}\n+\t\n+\tpublic CakeTopping(String name, int calories) {\n+\t\tthis.name = name;\n+\t\tthis.calories = calories;\n+\t}\n+}",
    "output": "Work on data layer"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -1,8 +1,48 @@\n package com.iluwatar.layers;\n \n+import java.util.List;\n+\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n public class App {\n \t\n \tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello World!\");\n+\t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n+\t\t\t\t\"applicationContext.xml\");\n+\t\tPersonDao dao = context.getBean(PersonDao.class);\n+\n+\t\tPerson peter = new Person(\"Peter\", \"Sagan\");\n+\t\tPerson nasta = new Person(\"Nasta\", \"Kuzminova\");\n+\n+\t\t// Add new Person records\n+\t\tdao.save(peter);\n+\t\tdao.save(nasta);\n+\n+\t\t// Count Person records\n+\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n+\n+\t\t// Print all records\n+\t\tList<Person> persons = (List<Person>) dao.findAll();\n+\t\tfor (Person person : persons) {\n+\t\t\tSystem.out.println(person);\n+\t\t}\n+\n+\t\t// Find Person by surname\n+\t\tSystem.out.println(\"Find by surname 'Sagan': \"\t+ dao.findBySurname(\"Sagan\"));\n+\n+\t\t// Update Person\n+\t\tnasta.setName(\"Barbora\");\n+\t\tnasta.setSurname(\"Spotakova\");\n+\t\tdao.save(nasta);\n+\n+\t\tSystem.out.println(\"Find by id 2: \" + dao.findOne(2L));\n+\n+\t\t// Remove record from Person\n+\t\tdao.delete(2L);\n+\n+\t\t// And finally count records\n+\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n+\n+\t\tcontext.close();\n \t}\n }\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/Person.java b/layers/src/main/java/com/iluwatar/layers/Person.java\n--- a/layers/src/main/java/com/iluwatar/layers/Person.java\n+++ b/layers/src/main/java/com/iluwatar/layers/Person.java\n@@ -0,0 +1,58 @@\n+package com.iluwatar.layers;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+/**\n+ * \n+ * Person entity\n+ *\n+ */\n+@Entity\n+public class Person {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate Long id;\n+\tprivate String name;\n+\tprivate String surname;\n+\n+\tpublic Person() {\n+\t}\n+\n+\tpublic Person(String name, String surname) {\n+\t\tthis.name = name;\n+\t\tthis.surname = surname;\n+\t}\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getSurname() {\n+\t\treturn surname;\n+\t}\n+\n+\tpublic void setSurname(String surname) {\n+\t\tthis.surname = surname;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"Person [id=\" + id + \", name=\" + name + \", surname=\" + surname\n+\t\t\t\t+ \"]\";\n+\t}\n+}\n\ndiff --git a/layers/src/main/java/com/iluwatar/layers/PersonDao.java b/layers/src/main/java/com/iluwatar/layers/PersonDao.java\n--- a/layers/src/main/java/com/iluwatar/layers/PersonDao.java\n+++ b/layers/src/main/java/com/iluwatar/layers/PersonDao.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar.layers;\n+\n+import java.util.List;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * \n+ * Person repository\n+ *\n+ */\n+@Repository\n+public interface PersonDao extends CrudRepository<Person, Long> {\n+\t\n+\tpublic List<Person> findBySurname(String surname);\n+}",
    "output": "Utilize Repository layer from another example"
  },
  {
    "input": "diff --git a/layers/src/main/java/com/iluwatar/layers/App.java b/layers/src/main/java/com/iluwatar/layers/App.java\n--- a/layers/src/main/java/com/iluwatar/layers/App.java\n+++ b/layers/src/main/java/com/iluwatar/layers/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar.layers;\n+\n+public class App {\n+\t\n+\tpublic static void main(String[] args) {\n+\t\tSystem.out.println(\"Hello World!\");\n+\t}\n+}\n\ndiff --git a/layers/src/test/java/com/iluwatar/layers/AppTest.java b/layers/src/test/java/com/iluwatar/layers/AppTest.java\n--- a/layers/src/test/java/com/iluwatar/layers/AppTest.java\n+++ b/layers/src/test/java/com/iluwatar/layers/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar.layers;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Layers architectural pattern"
  },
  {
    "input": "diff --git a/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java\n--- a/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java\n+++ b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java\n@@ -70,7 +70,7 @@ public List<SimpleObject> findByName(\n             final String name\n     ) {\n         return container.allMatches(\n-                new QueryDefault<SimpleObject>(\n+                new QueryDefault<>(\n                         SimpleObject.class,\n                         \"findByName\",\n                         \"name\", name));\n\ndiff --git a/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesProvider.java b/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesProvider.java\n--- a/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesProvider.java\n+++ b/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesProvider.java\n@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package domainapp.fixture;\n+\n+import org.apache.isis.applib.annotation.DomainService;\n+import org.apache.isis.applib.annotation.NatureOfService;\n+import org.apache.isis.applib.fixturescripts.FixtureScripts;\n+import org.apache.isis.applib.services.fixturespec.FixtureScriptsSpecification;\n+import org.apache.isis.applib.services.fixturespec.FixtureScriptsSpecificationProvider;\n+\n+import domainapp.fixture.scenarios.RecreateSimpleObjects;\n+\n+/**\n+ * Specifies where to find fixtures, and other settings.\n+ */\n+@DomainService(nature = NatureOfService.DOMAIN)\n+public class DomainAppFixturesProvider implements FixtureScriptsSpecificationProvider {\n+    @Override\n+    public FixtureScriptsSpecification getSpecification() {\n+        return FixtureScriptsSpecification\n+                .builder(DomainAppFixturesProvider.class)\n+                .with(FixtureScripts.MultipleExecutionStrategy.EXECUTE)\n+                .withRunScriptDefault(RecreateSimpleObjects.class)\n+                .withRunScriptDropDown(FixtureScriptsSpecification.DropDownPolicy.CHOICES)\n+                .withRecreate(RecreateSimpleObjects.class)\n+                .build();\n+    }\n+}\n\ndiff --git a/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesService.java b/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesService.java\n--- a/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesService.java\n+++ b/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesService.java\n@@ -1,76 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *        http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.\n- */\n-package domainapp.fixture;\n-\n-import java.util.List;\n-\n-import org.apache.isis.applib.annotation.Action;\n-import org.apache.isis.applib.annotation.ActionLayout;\n-import org.apache.isis.applib.annotation.DomainService;\n-import org.apache.isis.applib.annotation.DomainServiceLayout;\n-import org.apache.isis.applib.annotation.MemberOrder;\n-import org.apache.isis.applib.annotation.RestrictTo;\n-import org.apache.isis.applib.fixturescripts.FixtureResult;\n-import org.apache.isis.applib.fixturescripts.FixtureScript;\n-import org.apache.isis.applib.fixturescripts.FixtureScripts;\n-\n-import domainapp.fixture.scenarios.RecreateSimpleObjects;\n-\n-/**\n- * Enables fixtures to be installed from the application.\n- */\n-@DomainService\n-@DomainServiceLayout(\n-        named=\"Prototyping\",\n-        menuBar = DomainServiceLayout.MenuBar.SECONDARY,\n-        menuOrder = \"500\"\n-)\n-public class DomainAppFixturesService extends FixtureScripts {\n-\n-    public DomainAppFixturesService() {\n-        super(DomainAppFixturesService.class.getPackage().getName(), MultipleExecutionStrategy.EXECUTE);\n-    }\n-\n-    @Override\n-    public FixtureScript default0RunFixtureScript() {\n-        return findFixtureScriptFor(RecreateSimpleObjects.class);\n-    }\n-\n-    @Override\n-    public List<FixtureScript> choices0RunFixtureScript() {\n-        return super.choices0RunFixtureScript();\n-    }\n-\n-\n-    // //////////////////////////////////////\n-\n-    @Action(\n-            restrictTo = RestrictTo.PROTOTYPING\n-    )\n-    @ActionLayout(\n-            cssClassFa=\"fa fa-refresh\"\n-    )\n-    @MemberOrder(sequence=\"20\")\n-    public Object recreateObjectsAndReturnFirst() {\n-        final List<FixtureResult> run = findFixtureScriptFor(RecreateSimpleObjects.class).run(null);\n-        return run.get(0).getObject();\n-    }\n-\n-\n-}\n\ndiff --git a/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectsTearDown.java b/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectsTearDown.java\n--- a/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectsTearDown.java\n+++ b/naked-objects/fixture/src/main/java/domainapp/fixture/modules/simple/SimpleObjectsTearDown.java\n@@ -26,7 +26,7 @@ public class SimpleObjectsTearDown extends FixtureScript {\n \n     @Override\n     protected void execute(ExecutionContext executionContext) {\n-        isisJdoSupport.executeUpdate(\"delete from simple.\\\"SimpleObject\\\"\");\n+        isisJdoSupport.executeUpdate(\"delete from \\\"simple\\\".\\\"SimpleObject\\\"\");\n     }\n \n ",
    "output": "Upgrade Naked Objects example with the code generated by the latest Apache Isis snapshot"
  },
  {
    "input": "diff --git a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n--- a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java\n@@ -0,0 +1,51 @@\n+package com.iluwatar.halfsynchalfasync;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+/**\n+ * This is the asynchronous layer which does not block when a new request arrives. It just passes\n+ * the request to the synchronous layer which consists of a queue i.e. a {@link BlockingQueue} and\n+ * a pool of threads i.e. {@link ThreadPoolExecutor}. Out of this pool of threads one of the thread\n+ * picks up the task and executes it in background and the result is posted back to the caller via \n+ * {@link Future}.\n+ */\n+public abstract class AsynchronousService<I, O> {\n+\t\n+\t/*\n+\t * This is the synchronous layer to which request to do work is submitted.\n+\t */\n+\tprivate SynchronousLayer syncLayer = new SynchronousLayer();\n+\t\n+\t/**\n+\t * Computes arithmetic sum for n\n+\t * \n+\t * @return future representing arithmetic sum of n\n+\t */\n+\tpublic Future<O> execute(final I input) {\n+\t\t/*\n+\t\t * This is the key part of this pattern where the caller thread does not block until\n+\t\t * the result of work is computed but is delegated to the synchronous layer which\n+\t\t * computes the task in background. This is useful if caller thread is an UI thread, \n+\t\t * which MUST remain responsive to user inputs.\n+\t\t */\n+\t\treturn syncLayer.submit(new Callable<O>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic O call() throws Exception {\n+\t\t\t\treturn doInBackground(input);\n+\t\t\t}\n+\n+\t\t});\n+\t}\n+\t\n+\t/**\n+\t * This method is called in context of background thread where the implementation should compute\n+\t * and return the result for input.\n+\t * \n+\t * @return computed result\n+\t */\n+\tprotected abstract O doInBackground(I input);\n+}\n\ndiff --git a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/SynchronousLayer.java b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/SynchronousLayer.java\n--- a/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/SynchronousLayer.java\n+++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/SynchronousLayer.java\n@@ -0,0 +1,32 @@\n+package com.iluwatar.halfsynchalfasync;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This represents the Queuing and Synchronous layer of Half-Sync/Half-Async pattern. \n+ * The incoming requests are queued and then picked up by the background threads for execution.\n+ */\n+public class SynchronousLayer {\n+\t\n+\t/*\n+\t * This is the queuing layer where incoming work is queued \n+\t */\n+\tprivate LinkedBlockingQueue<Runnable> tasks = new LinkedBlockingQueue<Runnable>();\n+\t/*\n+\t * This is the synchronous layer where background threads execute the work\n+\t */\n+\tprivate ExecutorService service = new ThreadPoolExecutor(10, 10, 10, TimeUnit.SECONDS, tasks);\n+\t\n+\t/**\n+\t * Submit new work for backgrounds threads to compute \n+\t * @return the result after executing the work\n+\t */\n+\tpublic <T> Future<T> submit(Callable<T> work) {\n+\t\treturn service.submit(work);\n+\t}\n+}\n\ndiff --git a/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java b/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java\n--- a/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java\n+++ b/half-sync-half-async/src/test/java/com/iluwatar/halfsynchalfasync/AsynchronousServiceTest.java\n@@ -0,0 +1,45 @@\n+package com.iluwatar.halfsynchalfasync;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class AsynchronousServiceTest {\n+\n+\t@Test\n+\tpublic void test() throws InterruptedException, ExecutionException {\n+\t\t/*\n+\t\t * Addition service is asynchronous layer which does not block on single request,\n+\t\t * and is always available for listening new requests.\n+\t\t */\n+\t\tArithmeticSumService service = new ArithmeticSumService();\n+\t\tFuture<Long> output1 = service.execute(100L);\n+\t\tFuture<Long> output2 = service.execute(50L);\n+\t\tFuture<Long> output3 = service.execute(200L);\n+\t\tFuture<Long> output4 = service.execute(5L);\n+\t\t\n+\t\tassertEquals(ap(100), output1.get().longValue());\n+\t\tassertEquals(ap(50), output2.get().longValue());\n+\t\tassertEquals(ap(200), output3.get().longValue());\n+\t\tassertEquals(ap(5), output4.get().longValue());\n+\t}\n+\t\n+\t/*\n+\t * This is an asynchronous service which computes arithmetic sum\n+\t */\n+\tclass ArithmeticSumService extends AsynchronousService<Long, Long> {\n+\n+\t\t@Override\n+\t\tprotected Long doInBackground(Long n) {\n+\t\t\treturn (n) * (n + 1) / 2;\n+\t\t}\n+\t}\n+\n+\tprivate long ap(int i) {\n+\t\tlong out = (i) * (i + 1) / 2;\n+\t\tSystem.out.println(out);\n+\t\treturn out;\n+\t}\n+}",
    "output": "Implement half sync half async pattern"
  },
  {
    "input": "diff --git a/business-delegate/src/main/java/com/iluwatar/App.java b/business-delegate/src/main/java/com/iluwatar/App.java\n--- a/business-delegate/src/main/java/com/iluwatar/App.java\n+++ b/business-delegate/src/main/java/com/iluwatar/App.java\n@@ -3,6 +3,14 @@\n public class App {\n \t\n \tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello World!\");\n+\t\t\n+\t\tBusinessDelegate businessDelegate = new BusinessDelegate();\n+\t\tbusinessDelegate.setServiceType(ServiceType.EJB);\n+\n+\t\tClient client = new Client(businessDelegate);\n+\t\tclient.doTask();\n+\n+\t\tbusinessDelegate.setServiceType(ServiceType.JMS);\n+\t\tclient.doTask();\n \t}\n }\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/BusinessDelegate.java b/business-delegate/src/main/java/com/iluwatar/BusinessDelegate.java\n--- a/business-delegate/src/main/java/com/iluwatar/BusinessDelegate.java\n+++ b/business-delegate/src/main/java/com/iluwatar/BusinessDelegate.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+public class BusinessDelegate {\n+\t\n+\tprivate BusinessLookup lookupService = new BusinessLookup();\n+\tprivate BusinessService businessService;\n+\tprivate ServiceType serviceType;\n+\n+\tpublic void setServiceType(ServiceType serviceType) {\n+\t\tthis.serviceType = serviceType;\n+\t}\n+\n+\tpublic void doTask() {\n+\t\tbusinessService = lookupService.getBusinessService(serviceType);\n+\t\tbusinessService.doProcessing();\n+\t}\n+}\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/BusinessLookup.java b/business-delegate/src/main/java/com/iluwatar/BusinessLookup.java\n--- a/business-delegate/src/main/java/com/iluwatar/BusinessLookup.java\n+++ b/business-delegate/src/main/java/com/iluwatar/BusinessLookup.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+public class BusinessLookup {\n+\n+\tpublic BusinessService getBusinessService(ServiceType serviceType) {\n+\t\tif (serviceType.equals(ServiceType.EJB)) {\n+\t\t\treturn new EjbService();\n+\t\t} else {\n+\t\t\treturn new JmsService();\n+\t\t}\n+\t}\n+}\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/BusinessService.java b/business-delegate/src/main/java/com/iluwatar/BusinessService.java\n--- a/business-delegate/src/main/java/com/iluwatar/BusinessService.java\n+++ b/business-delegate/src/main/java/com/iluwatar/BusinessService.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar;\n+\n+public interface BusinessService {\n+\n+\tvoid doProcessing();\n+}\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/Client.java b/business-delegate/src/main/java/com/iluwatar/Client.java\n--- a/business-delegate/src/main/java/com/iluwatar/Client.java\n+++ b/business-delegate/src/main/java/com/iluwatar/Client.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\n+\n+public class Client {\n+\n+\tprivate BusinessDelegate businessDelegate;\n+\n+\tpublic Client(BusinessDelegate businessDelegate) {\n+\t\tthis.businessDelegate = businessDelegate;\n+\t}\n+\n+\tpublic void doTask() {\n+\t\tbusinessDelegate.doTask();\n+\t}\n+}\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/EjbService.java b/business-delegate/src/main/java/com/iluwatar/EjbService.java\n--- a/business-delegate/src/main/java/com/iluwatar/EjbService.java\n+++ b/business-delegate/src/main/java/com/iluwatar/EjbService.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class EjbService implements BusinessService {\n+\n+\t@Override\n+\tpublic void doProcessing() {\n+\t\tSystem.out.println(\"EjbService is now processing\");\n+\t}\n+}\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/JmsService.java b/business-delegate/src/main/java/com/iluwatar/JmsService.java\n--- a/business-delegate/src/main/java/com/iluwatar/JmsService.java\n+++ b/business-delegate/src/main/java/com/iluwatar/JmsService.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class JmsService implements BusinessService {\n+\n+\t@Override\n+\tpublic void doProcessing() {\n+\t\tSystem.out.println(\"JmsService is now processing\");\n+\t}\n+}\n\ndiff --git a/business-delegate/src/main/java/com/iluwatar/ServiceType.java b/business-delegate/src/main/java/com/iluwatar/ServiceType.java\n--- a/business-delegate/src/main/java/com/iluwatar/ServiceType.java\n+++ b/business-delegate/src/main/java/com/iluwatar/ServiceType.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar;\n+\n+public enum ServiceType {\n+\t\n+\tEJB, JMS;\n+}",
    "output": "Finished the example code"
  },
  {
    "input": "diff --git a/business-delegate/src/main/java/com/iluwatar/App.java b/business-delegate/src/main/java/com/iluwatar/App.java\n--- a/business-delegate/src/main/java/com/iluwatar/App.java\n+++ b/business-delegate/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+\tpublic static void main(String[] args) {\n+\t\tSystem.out.println(\"Hello World!\");\n+\t}\n+}\n\ndiff --git a/business-delegate/src/test/java/com/iluwatar/AppTest.java b/business-delegate/src/test/java/com/iluwatar/AppTest.java\n--- a/business-delegate/src/test/java/com/iluwatar/AppTest.java\n+++ b/business-delegate/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Business Delegate example"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/App.java b/repository/src/main/java/com/iluwatar/App.java\n--- a/repository/src/main/java/com/iluwatar/App.java\n+++ b/repository/src/main/java/com/iluwatar/App.java\n@@ -5,6 +5,7 @@\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n \n public class App {\n+\t\n \tpublic static void main(String[] args) {\n \t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n \t\t\t\t\"applicationContext.xml\");",
    "output": "Change Hibernate to create-drop mode"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/App.java b/repository/src/main/java/com/iluwatar/App.java\n--- a/repository/src/main/java/com/iluwatar/App.java\n+++ b/repository/src/main/java/com/iluwatar/App.java\n@@ -4,11 +4,6 @@\n \n import org.springframework.context.support.ClassPathXmlApplicationContext;\n \n-/**\n- * Standalone application with Spring Data JPA, Hibernate and Maven\n- * \n- * @author DevCrumb.com\n- */\n public class App {\n \tpublic static void main(String[] args) {\n \t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n\ndiff --git a/repository/src/main/java/com/iluwatar/Person.java b/repository/src/main/java/com/iluwatar/Person.java\n--- a/repository/src/main/java/com/iluwatar/Person.java\n+++ b/repository/src/main/java/com/iluwatar/Person.java\n@@ -4,11 +4,6 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n \n-/**\n- * Person entity\n- * \n- * @author DevCrumb.com\n- */\n @Entity\n public class Person {\n \n\ndiff --git a/repository/src/main/java/com/iluwatar/PersonDao.java b/repository/src/main/java/com/iluwatar/PersonDao.java\n--- a/repository/src/main/java/com/iluwatar/PersonDao.java\n+++ b/repository/src/main/java/com/iluwatar/PersonDao.java\n@@ -5,11 +5,6 @@\n import org.springframework.data.repository.CrudRepository;\n import org.springframework.stereotype.Repository;\n \n-/**\n- * Person dao interface\n- * \n- * @author DevCrumb.com\n- */\n @Repository\n public interface PersonDao extends CrudRepository<Person, Long> {\n \t",
    "output": "H2 database taken to use in the example code"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/App.java b/repository/src/main/java/com/iluwatar/App.java\n--- a/repository/src/main/java/com/iluwatar/App.java\n+++ b/repository/src/main/java/com/iluwatar/App.java\n@@ -1,8 +1,52 @@\n package com.iluwatar;\n \n+import java.util.List;\n+\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+/**\n+ * Standalone application with Spring Data JPA, Hibernate and Maven\n+ * \n+ * @author DevCrumb.com\n+ */\n public class App {\n-\t\n-    public static void main( String[] args ) {\n-        System.out.println( \"Hello World!\" );\n-    }\n+\tpublic static void main(String[] args) {\n+\t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n+\t\t\t\t\"applicationContext.xml\");\n+\t\tPersonDao dao = context.getBean(PersonDao.class);\n+\n+\t\tPerson peter = new Person(\"Peter\", \"Sagan\");\n+\t\tPerson nasta = new Person(\"Nasta\", \"Kuzminova\");\n+\n+\t\t// Add new Person records\n+\t\tdao.save(peter);\n+\t\tdao.save(nasta);\n+\n+\t\t// Count Person records\n+\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n+\n+\t\t// Print all records\n+\t\tList<Person> persons = (List<Person>) dao.findAll();\n+\t\tfor (Person person : persons) {\n+\t\t\tSystem.out.println(person);\n+\t\t}\n+\n+\t\t// Find Person by surname\n+\t\tSystem.out.println(\"Find by surname 'Sagan': \"\t+ dao.findBySurname(\"Sagan\"));\n+\n+\t\t// Update Person\n+\t\tnasta.setName(\"Barbora\");\n+\t\tnasta.setSurname(\"Spotakova\");\n+\t\tdao.save(nasta);\n+\n+\t\tSystem.out.println(\"Find by id 2: \" + dao.findOne(2L));\n+\n+\t\t// Remove record from Person\n+\t\tdao.delete(2L);\n+\n+\t\t// And finally count records\n+\t\tSystem.out.println(\"Count Person records: \" + dao.count());\n+\n+\t\tcontext.close();\n+\t}\n }\n\ndiff --git a/repository/src/main/java/com/iluwatar/Person.java b/repository/src/main/java/com/iluwatar/Person.java\n--- a/repository/src/main/java/com/iluwatar/Person.java\n+++ b/repository/src/main/java/com/iluwatar/Person.java\n@@ -0,0 +1,59 @@\n+package com.iluwatar;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+/**\n+ * Person entity\n+ * \n+ * @author DevCrumb.com\n+ */\n+@Entity\n+public class Person {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate Long id;\n+\tprivate String name;\n+\tprivate String surname;\n+\n+\tpublic Person() {\n+\t}\n+\n+\tpublic Person(String name, String surname) {\n+\t\tthis.name = name;\n+\t\tthis.surname = surname;\n+\t}\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getSurname() {\n+\t\treturn surname;\n+\t}\n+\n+\tpublic void setSurname(String surname) {\n+\t\tthis.surname = surname;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"Person [id=\" + id + \", name=\" + name + \", surname=\" + surname\n+\t\t\t\t+ \"]\";\n+\t}\n+\n+}\n\ndiff --git a/repository/src/main/java/com/iluwatar/PersonDao.java b/repository/src/main/java/com/iluwatar/PersonDao.java\n--- a/repository/src/main/java/com/iluwatar/PersonDao.java\n+++ b/repository/src/main/java/com/iluwatar/PersonDao.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+import java.util.List;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Person dao interface\n+ * \n+ * @author DevCrumb.com\n+ */\n+@Repository\n+public interface PersonDao extends CrudRepository<Person, Long> {\n+\t\n+\tpublic List<Person> findBySurname(String surname);\n+}",
    "output": "Repository example skeleton"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/App.java b/repository/src/main/java/com/iluwatar/App.java\n--- a/repository/src/main/java/com/iluwatar/App.java\n+++ b/repository/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+        System.out.println( \"Hello World!\" );\n+    }\n+}\n\ndiff --git a/repository/src/test/java/com/iluwatar/AppTest.java b/repository/src/test/java/com/iluwatar/AppTest.java\n--- a/repository/src/test/java/com/iluwatar/AppTest.java\n+++ b/repository/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Repository example"
  },
  {
    "input": "diff --git a/front-controller/src/main/java/com/iluwatar/App.java b/front-controller/src/main/java/com/iluwatar/App.java\n--- a/front-controller/src/main/java/com/iluwatar/App.java\n+++ b/front-controller/src/main/java/com/iluwatar/App.java\n@@ -1,7 +1,11 @@\n package com.iluwatar;\n \n public class App {\n+\t\n \tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello World!\");\n+\t\tFrontController controller = new FrontController();\n+\t\tcontroller.handleRequest(\"Archer\");\n+\t\tcontroller.handleRequest(\"Catapult\");\n+\t\tcontroller.handleRequest(\"foobar\");\n \t}\n }\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/ApplicationException.java b/front-controller/src/main/java/com/iluwatar/ApplicationException.java\n--- a/front-controller/src/main/java/com/iluwatar/ApplicationException.java\n+++ b/front-controller/src/main/java/com/iluwatar/ApplicationException.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class ApplicationException extends RuntimeException {\n+\n+    public ApplicationException(Throwable cause) {\n+        super(cause);\n+    }\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/ArcherCommand.java b/front-controller/src/main/java/com/iluwatar/ArcherCommand.java\n--- a/front-controller/src/main/java/com/iluwatar/ArcherCommand.java\n+++ b/front-controller/src/main/java/com/iluwatar/ArcherCommand.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class ArcherCommand implements Command {\n+\n+\t@Override\n+\tpublic void process() {\n+\t\tnew ArcherView().display();\n+\t}\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/ArcherView.java b/front-controller/src/main/java/com/iluwatar/ArcherView.java\n--- a/front-controller/src/main/java/com/iluwatar/ArcherView.java\n+++ b/front-controller/src/main/java/com/iluwatar/ArcherView.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class ArcherView implements View {\n+\n+\t@Override\n+\tpublic void display() {\n+\t\tSystem.out.println(\"Displaying archers\");\n+\t}\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/CatapultCommand.java b/front-controller/src/main/java/com/iluwatar/CatapultCommand.java\n--- a/front-controller/src/main/java/com/iluwatar/CatapultCommand.java\n+++ b/front-controller/src/main/java/com/iluwatar/CatapultCommand.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class CatapultCommand implements Command {\n+\n+\t@Override\n+\tpublic void process() {\n+\t\tnew CatapultView().display();\n+\t}\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/CatapultView.java b/front-controller/src/main/java/com/iluwatar/CatapultView.java\n--- a/front-controller/src/main/java/com/iluwatar/CatapultView.java\n+++ b/front-controller/src/main/java/com/iluwatar/CatapultView.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class CatapultView implements View {\n+\n+\t@Override\n+\tpublic void display() {\n+\t\tSystem.out.println(\"Displaying catapults\");\n+\t}\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/Command.java b/front-controller/src/main/java/com/iluwatar/Command.java\n--- a/front-controller/src/main/java/com/iluwatar/Command.java\n+++ b/front-controller/src/main/java/com/iluwatar/Command.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar;\n+\n+public interface Command {\n+\t\n+\tvoid process();\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/FrontController.java b/front-controller/src/main/java/com/iluwatar/FrontController.java\n--- a/front-controller/src/main/java/com/iluwatar/FrontController.java\n+++ b/front-controller/src/main/java/com/iluwatar/FrontController.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar;\n+\n+public class FrontController {\n+\t\n+\tpublic void handleRequest(String request) {\n+\t\tCommand command = getCommand(request);\n+\t\tcommand.process();\n+\t}\n+\t\n+\tprivate Command getCommand(String request) {\n+\t\tClass commandClass = getCommandClass(request);\n+\t\ttry {\n+\t\t\treturn (Command) commandClass.newInstance();\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new ApplicationException(e);\n+\t\t}\n+\t}\n+\t\n+\tprivate Class getCommandClass(String request) {\n+\t\tClass result;\n+\t\ttry {\n+\t\t\tresult = Class.forName(\"com.iluwatar.\" + request + \"Command\");\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tresult = UnknownCommand.class;\n+\t\t}\n+\t\treturn result;\n+\t}\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/UnknownCommand.java b/front-controller/src/main/java/com/iluwatar/UnknownCommand.java\n--- a/front-controller/src/main/java/com/iluwatar/UnknownCommand.java\n+++ b/front-controller/src/main/java/com/iluwatar/UnknownCommand.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class UnknownCommand implements Command {\n+\n+\t@Override\n+\tpublic void process() {\n+\t\tSystem.out.println(\"Error 500\");\n+\t}\n+}\n\ndiff --git a/front-controller/src/main/java/com/iluwatar/View.java b/front-controller/src/main/java/com/iluwatar/View.java\n--- a/front-controller/src/main/java/com/iluwatar/View.java\n+++ b/front-controller/src/main/java/com/iluwatar/View.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar;\n+\n+public interface View {\n+\n+\tvoid display();\n+}",
    "output": "Finished the example code"
  },
  {
    "input": "diff --git a/front-controller/src/main/java/com/iluwatar/App.java b/front-controller/src/main/java/com/iluwatar/App.java\n--- a/front-controller/src/main/java/com/iluwatar/App.java\n+++ b/front-controller/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\tpublic static void main(String[] args) {\n+\t\tSystem.out.println(\"Hello World!\");\n+\t}\n+}\n\ndiff --git a/front-controller/src/test/java/com/iluwatar/AppTest.java b/front-controller/src/test/java/com/iluwatar/AppTest.java\n--- a/front-controller/src/test/java/com/iluwatar/AppTest.java\n+++ b/front-controller/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Front Controller example"
  },
  {
    "input": "diff --git a/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java\n--- a/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java\n+++ b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java\n@@ -70,7 +70,7 @@ public List<SimpleObject> findByName(\n             final String name\n     ) {\n         return container.allMatches(\n-                new QueryDefault<>(\n+                new QueryDefault<SimpleObject>(\n                         SimpleObject.class,\n                         \"findByName\",\n                         \"name\", name));",
    "output": "Eclipse fix for generated project"
  },
  {
    "input": "diff --git a/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java b/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java\n--- a/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java\n+++ b/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar.interceptingfilter;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add unit test for Intercepting Filter"
  },
  {
    "input": "diff --git a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n@@ -0,0 +1,70 @@\n+package com.iluwatar.singleton;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * This test case demonstrates thread safety issues of lazy loaded Singleton implementation.\n+ * \n+ * Out of the box you should see the test output something like the following:\n+ * \n+ * Thread=Thread-4 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@6fde356e\n+ * Thread=Thread-2 creating instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@6fde356e\n+ * Thread=Thread-0 creating instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@6fde356e\n+ * Thread=Thread-0 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@6fde356e\n+ * Thread=Thread-3 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@6fde356e\n+ * Thread=Thread-1 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@60f330b0\n+ * Thread=Thread-2 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@6fde356e\n+ * \n+ * By changing the method signature of LazyLoadedIvoryTower#getInstance from\n+ * \t public static LazyLoadedIvoryTower getInstance()\n+ * into\n+ *   public synchronized static LazyLoadedIvoryTower getInstance()\n+ * you should see the test output change to something like the following:\n+ * \n+ * Thread=Thread-4 creating instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@3c688490\n+ * Thread=Thread-4 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@3c688490\n+ * Thread=Thread-0 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@3c688490\n+ * Thread=Thread-3 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@3c688490\n+ * Thread=Thread-2 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@3c688490\n+ * Thread=Thread-1 got instance=com.iluwatar.singleton.LazyLoadedSingletonThreadSafetyTest$LazyLoadedIvoryTower@3c688490\n+ *\n+ */\n+public class LazyLoadedSingletonThreadSafetyTest {\n+\n+\tprivate static final int NUM_THREADS = 5;\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tSingletonThread runnable = new SingletonThread();\n+\t\tfor (int j=0; j<NUM_THREADS; j++) {\n+\t\t\tThread thread = new Thread(runnable);\n+\t\t\tthread.start();\n+\t\t}\n+\t}\n+\t\n+\tprivate static class SingletonThread implements Runnable {\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tLazyLoadedIvoryTower instance = LazyLoadedIvoryTower.getInstance();\n+\t\t\tSystem.out.println(\"Thread=\" + Thread.currentThread().getName() + \" got instance=\" + instance);\n+\t\t}\n+\t}\n+\t\n+\tprivate static class LazyLoadedIvoryTower {\n+\n+\t\tprivate static LazyLoadedIvoryTower instance = null;\n+\t\t\n+\t\tprivate LazyLoadedIvoryTower() {\n+\t\t}\n+\n+\t\tpublic static LazyLoadedIvoryTower getInstance() {\n+\t\t\tif (instance == null) {\n+\t\t\t\tinstance = new LazyLoadedIvoryTower();\n+\t\t\t\tSystem.out.println(\"Thread=\" + Thread.currentThread().getName() + \" creating instance=\" + instance);\n+\t\t\t}\n+\t\t\treturn instance;\n+\t\t}\n+\t}\n+}",
    "output": "Add test case for demonstrating the thread safety issues of a naive lazy loaded Singleton implementation."
  },
  {
    "input": "diff --git a/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n--- a/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n+++ b/flyweight/src/main/java/com/iluwatar/flyweight/AlchemistShop.java\n@@ -1,57 +1,57 @@\n-package com.iluwatar.flyweight;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-/**\r\n- * \r\n- * AlchemistShop holds potions on its shelves.\r\n- * It uses PotionFactory to provide the potions.\r\n- * \r\n- */\r\n-public class AlchemistShop {\r\n-\r\n-\tList<Potion> topShelf;\r\n-\tList<Potion> bottomShelf;\r\n-\r\n-\tpublic AlchemistShop() {\r\n-\t\ttopShelf = new ArrayList<>();\r\n-\t\tbottomShelf = new ArrayList<>();\r\n-\t\tfillShelves();\r\n-\t}\r\n-\r\n-\tprivate void fillShelves() {\r\n-\r\n-\t\tPotionFactory factory = new PotionFactory();\r\n-\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.STRENGTH));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.STRENGTH));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\r\n-\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\r\n-\r\n-\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\r\n-\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\r\n-\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\r\n-\t\tbottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\r\n-\t\tbottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\r\n-\t}\r\n-\r\n-\tpublic void enumerate() {\r\n-\r\n-\t\tSystem.out.println(\"Enumerating top shelf potions\\n\");\r\n-\r\n-\t\tfor (Potion p : topShelf) {\r\n-\t\t\tp.drink();\r\n-\t\t}\r\n-\r\n-\t\tSystem.out.println(\"\\nEnumerating bottom shelf potions\\n\");\r\n-\r\n-\t\tfor (Potion p : bottomShelf) {\r\n-\t\t\tp.drink();\r\n-\t\t}\r\n-\t}\r\n-}\r\n+package com.iluwatar.flyweight;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * \n+ * AlchemistShop holds potions on its shelves.\n+ * It uses PotionFactory to provide the potions.\n+ * \n+ */\n+public class AlchemistShop {\n+\n+\tprivate List<Potion> topShelf;\n+\tprivate List<Potion> bottomShelf;\n+\n+\tpublic AlchemistShop() {\n+\t\ttopShelf = new ArrayList<>();\n+\t\tbottomShelf = new ArrayList<>();\n+\t\tfillShelves();\n+\t}\n+\n+\tprivate void fillShelves() {\n+\n+\t\tPotionFactory factory = new PotionFactory();\n+\n+\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n+\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n+\t\ttopShelf.add(factory.createPotion(PotionType.STRENGTH));\n+\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\n+\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n+\t\ttopShelf.add(factory.createPotion(PotionType.STRENGTH));\n+\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\n+\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\n+\n+\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\n+\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\n+\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\n+\t\tbottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\n+\t\tbottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\n+\t}\n+\n+\tpublic void enumerate() {\n+\n+\t\tSystem.out.println(\"Enumerating top shelf potions\\n\");\n+\n+\t\tfor (Potion p : topShelf) {\n+\t\t\tp.drink();\n+\t\t}\n+\n+\t\tSystem.out.println(\"\\nEnumerating bottom shelf potions\\n\");\n+\n+\t\tfor (Potion p : bottomShelf) {\n+\t\t\tp.drink();\n+\t\t}\n+\t}\n+}\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/flyweight/App.java b/flyweight/src/main/java/com/iluwatar/flyweight/App.java\n--- a/flyweight/src/main/java/com/iluwatar/flyweight/App.java\n+++ b/flyweight/src/main/java/com/iluwatar/flyweight/App.java\n@@ -1,20 +1,23 @@\n-package com.iluwatar.flyweight;\r\n-\r\n-/**\r\n- * \r\n- * Flyweight pattern is useful when the program needs a huge amount of objects.\r\n- * It provides means to decrease resource usage by sharing object instances.\r\n- * \r\n- * In this example AlchemistShop has great amount of potions on its shelves.\r\n- * To fill the shelves AlchemistShop uses PotionFactory (which represents\r\n- * the Flyweight in this example). Internally PotionFactory holds a map\r\n- * of the potions and lazily creates new ones when requested.\r\n- * \r\n- */\r\n-public class App {\r\n-\r\n-\tpublic static void main(String[] args) {\r\n-\t\tAlchemistShop alchemistShop = new AlchemistShop();\r\n-\t\talchemistShop.enumerate();\r\n-\t}\r\n-}\r\n+package com.iluwatar.flyweight;\n+\n+/**\n+ * \n+ * Flyweight pattern is useful when the program needs a huge amount of objects.\n+ * It provides means to decrease resource usage by sharing object instances.\n+ * \n+ * In this example AlchemistShop has great amount of potions on its shelves.\n+ * To fill the shelves AlchemistShop uses PotionFactory (which represents\n+ * the Flyweight in this example). Internally PotionFactory holds a map\n+ * of the potions and lazily creates new ones when requested.\n+ * \n+ * To enable safe sharing, between clients and threads, Flyweight objects must \n+ * be immutable. Flyweight objects are by definition value objects.\n+ * \n+ */\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\t\tAlchemistShop alchemistShop = new AlchemistShop();\n+\t\talchemistShop.enumerate();\n+\t}\n+}",
    "output": "Add comments about object sharing in Flyweight example + some minor fixes."
  },
  {
    "input": "diff --git a/memento/src/main/java/com/iluwatar/Star.java b/memento/src/main/java/com/iluwatar/Star.java\n--- a/memento/src/main/java/com/iluwatar/Star.java\n+++ b/memento/src/main/java/com/iluwatar/Star.java\n@@ -1,69 +1,105 @@\n-package com.iluwatar;\r\n-\r\n-/**\r\n- * \r\n- * Star uses \"mementos\" to store and restore state.\r\n- * \r\n- */\r\n-public class Star {\r\n-\r\n-\tprivate StarType type;\r\n-\tprivate int ageYears;\r\n-\tprivate int massTons;\r\n-\r\n-\tpublic Star(StarType startType, int startAge, int startMass) {\r\n-\t\tthis.type = startType;\r\n-\t\tthis.ageYears = startAge;\r\n-\t\tthis.massTons = startMass;\r\n-\t}\r\n-\r\n-\tpublic void timePasses() {\r\n-\t\tageYears *= 2;\r\n-\t\tmassTons *= 8;\r\n-\t\tswitch (type) {\r\n-\t\tcase RED_GIANT:\r\n-\t\t\ttype = StarType.WHITE_DWARF;\r\n-\t\t\tbreak;\r\n-\t\tcase SUN:\r\n-\t\t\ttype = StarType.RED_GIANT;\r\n-\t\t\tbreak;\r\n-\t\tcase SUPERNOVA:\r\n-\t\t\ttype = StarType.DEAD;\r\n-\t\t\tbreak;\r\n-\t\tcase WHITE_DWARF:\r\n-\t\t\ttype = StarType.SUPERNOVA;\r\n-\t\t\tbreak;\r\n-\t\tcase DEAD:\r\n-\t\t\tageYears *= 2;\r\n-\t\t\tmassTons = 0;\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tStarMemento getMemento() {\r\n-\r\n-\t\tStarMementoInternal state = new StarMementoInternal();\r\n-\t\tstate.setAgeYears(ageYears);\r\n-\t\tstate.setMassTons(massTons);\r\n-\t\tstate.setType(type);\r\n-\t\treturn state;\r\n-\r\n-\t}\r\n-\r\n-\tvoid setMemento(StarMemento memento) {\r\n-\r\n-\t\tStarMementoInternal state = (StarMementoInternal) memento;\r\n-\t\tthis.type = state.getType();\r\n-\t\tthis.ageYears = state.getAgeYears();\r\n-\t\tthis.massTons = state.getMassTons();\r\n-\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic String toString() {\r\n-\t\treturn String.format(\"%s age: %d years mass: %d tons\", type.toString(),\r\n-\t\t\t\tageYears, massTons);\r\n-\t}\r\n-}\r\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Star uses \"mementos\" to store and restore state.\n+ * \n+ */\n+public class Star {\n+\n+\tprivate StarType type;\n+\tprivate int ageYears;\n+\tprivate int massTons;\n+\n+\tpublic Star(StarType startType, int startAge, int startMass) {\n+\t\tthis.type = startType;\n+\t\tthis.ageYears = startAge;\n+\t\tthis.massTons = startMass;\n+\t}\n+\n+\tpublic void timePasses() {\n+\t\tageYears *= 2;\n+\t\tmassTons *= 8;\n+\t\tswitch (type) {\n+\t\tcase RED_GIANT:\n+\t\t\ttype = StarType.WHITE_DWARF;\n+\t\t\tbreak;\n+\t\tcase SUN:\n+\t\t\ttype = StarType.RED_GIANT;\n+\t\t\tbreak;\n+\t\tcase SUPERNOVA:\n+\t\t\ttype = StarType.DEAD;\n+\t\t\tbreak;\n+\t\tcase WHITE_DWARF:\n+\t\t\ttype = StarType.SUPERNOVA;\n+\t\t\tbreak;\n+\t\tcase DEAD:\n+\t\t\tageYears *= 2;\n+\t\t\tmassTons = 0;\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\tStarMemento getMemento() {\n+\n+\t\tStarMementoInternal state = new StarMementoInternal();\n+\t\tstate.setAgeYears(ageYears);\n+\t\tstate.setMassTons(massTons);\n+\t\tstate.setType(type);\n+\t\treturn state;\n+\n+\t}\n+\n+\tvoid setMemento(StarMemento memento) {\n+\n+\t\tStarMementoInternal state = (StarMementoInternal) memento;\n+\t\tthis.type = state.getType();\n+\t\tthis.ageYears = state.getAgeYears();\n+\t\tthis.massTons = state.getMassTons();\n+\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"%s age: %d years mass: %d tons\", type.toString(),\n+\t\t\t\tageYears, massTons);\n+\t}\n+\t\n+\t/**\n+\t * \n+\t * StarMemento implementation\n+\t * \n+\t */\n+\tprivate static class StarMementoInternal implements StarMemento {\n+\n+\t\tprivate StarType type;\n+\t\tprivate int ageYears;\n+\t\tprivate int massTons;\n+\n+\t\tpublic StarType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic void setType(StarType type) {\n+\t\t\tthis.type = type;\n+\t\t}\n+\n+\t\tpublic int getAgeYears() {\n+\t\t\treturn ageYears;\n+\t\t}\n+\n+\t\tpublic void setAgeYears(int ageYears) {\n+\t\t\tthis.ageYears = ageYears;\n+\t\t}\n+\n+\t\tpublic int getMassTons() {\n+\t\t\treturn massTons;\n+\t\t}\n+\n+\t\tpublic void setMassTons(int massTons) {\n+\t\t\tthis.massTons = massTons;\n+\t\t}\n+\t}\n+}\n\ndiff --git a/memento/src/main/java/com/iluwatar/StarMementoInternal.java b/memento/src/main/java/com/iluwatar/StarMementoInternal.java\n--- a/memento/src/main/java/com/iluwatar/StarMementoInternal.java\n+++ b/memento/src/main/java/com/iluwatar/StarMementoInternal.java\n@@ -1,37 +0,0 @@\n-package com.iluwatar;\r\n-\r\n-/**\r\n- * \r\n- * Internal interface to memento.\r\n- * \r\n- */\r\n-public class StarMementoInternal implements StarMemento {\r\n-\r\n-\tprivate StarType type;\r\n-\tprivate int ageYears;\r\n-\tprivate int massTons;\r\n-\r\n-\tpublic StarType getType() {\r\n-\t\treturn type;\r\n-\t}\r\n-\r\n-\tpublic void setType(StarType type) {\r\n-\t\tthis.type = type;\r\n-\t}\r\n-\r\n-\tpublic int getAgeYears() {\r\n-\t\treturn ageYears;\r\n-\t}\r\n-\r\n-\tpublic void setAgeYears(int ageYears) {\r\n-\t\tthis.ageYears = ageYears;\r\n-\t}\r\n-\r\n-\tpublic int getMassTons() {\r\n-\t\treturn massTons;\r\n-\t}\r\n-\r\n-\tpublic void setMassTons(int massTons) {\r\n-\t\tthis.massTons = massTons;\r\n-\t}\r\n-}\r",
    "output": "Improve encapsulation of the Memento pattern by moving the StarMementoInternal class to inner class of Star."
  },
  {
    "input": "diff --git a/dependency-injection/src/main/java/com/iluwatar/App.java b/dependency-injection/src/main/java/com/iluwatar/App.java\n--- a/dependency-injection/src/main/java/com/iluwatar/App.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/App.java\n@@ -1,5 +1,8 @@\n package com.iluwatar;\n \n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n public class App {\n \t\n     public static void main( String[] args ) {\n@@ -8,5 +11,9 @@ public static void main( String[] args ) {\n     \t\n     \tAdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());\n     \tadvancedWizard.smoke();\n+    \t\n+    \tInjector injector = Guice.createInjector(new TobaccoModule());\n+    \tGuiceWizard guiceWizard = injector.getInstance(GuiceWizard.class);\n+    \tguiceWizard.smoke();\n     }\n }\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/GuiceWizard.java b/dependency-injection/src/main/java/com/iluwatar/GuiceWizard.java\n--- a/dependency-injection/src/main/java/com/iluwatar/GuiceWizard.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/GuiceWizard.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar;\n+\n+import javax.inject.Inject;\n+\n+public class GuiceWizard implements Wizard {\n+\t\n+\tprivate Tobacco tobacco;\n+\t\n+\t@Inject\n+\tpublic GuiceWizard(Tobacco tobacco) {\n+\t\tthis.tobacco = tobacco;\n+\t}\n+\n+\t@Override\n+\tpublic void smoke() {\n+\t\ttobacco.smoke(this);\n+\t}\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/RivendellTobacco.java b/dependency-injection/src/main/java/com/iluwatar/RivendellTobacco.java\n--- a/dependency-injection/src/main/java/com/iluwatar/RivendellTobacco.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/RivendellTobacco.java\n@@ -0,0 +1,4 @@\n+package com.iluwatar;\n+\n+public class RivendellTobacco extends Tobacco {\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/TobaccoModule.java b/dependency-injection/src/main/java/com/iluwatar/TobaccoModule.java\n--- a/dependency-injection/src/main/java/com/iluwatar/TobaccoModule.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/TobaccoModule.java\n@@ -0,0 +1,11 @@\n+package com.iluwatar;\n+\n+import com.google.inject.AbstractModule;\n+\n+public class TobaccoModule extends AbstractModule {\n+\n+\t@Override\n+\tprotected void configure() {\n+\t\tbind(Tobacco.class).to(RivendellTobacco.class);\n+\t}\n+}",
    "output": "Finished the example."
  },
  {
    "input": "diff --git a/dependency-injection/src/main/java/com/iluwatar/AdvancedWizard.java b/dependency-injection/src/main/java/com/iluwatar/AdvancedWizard.java\n--- a/dependency-injection/src/main/java/com/iluwatar/AdvancedWizard.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/AdvancedWizard.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\n+\n+public class AdvancedWizard implements Wizard {\n+\t\n+\tprivate Tobacco tobacco;\n+\n+\tpublic AdvancedWizard(Tobacco tobacco) {\n+\t\tthis.tobacco = tobacco;\n+\t}\n+\n+\t@Override\n+\tpublic void smoke() {\n+\t\ttobacco.smoke(this);\n+\t}\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/App.java b/dependency-injection/src/main/java/com/iluwatar/App.java\n--- a/dependency-injection/src/main/java/com/iluwatar/App.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/App.java\n@@ -3,7 +3,10 @@\n public class App {\n \t\n     public static void main( String[] args ) {\n-    \tWizard wizard = new Wizard();\n-    \twizard.smoke();\n+    \tSimpleWizard simpleWizard = new SimpleWizard();\n+    \tsimpleWizard.smoke();\n+    \t\n+    \tAdvancedWizard advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());\n+    \tadvancedWizard.smoke();\n     }\n }\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java b/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java\n--- a/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java\n@@ -1,9 +1,4 @@\n package com.iluwatar;\n \n-public class OldTobyTobacco implements Tobacco {\n-\n-\t@Override\n-\tpublic void smoke() {\n-\t\tSystem.out.println(String.format(\"Smoking %s\", this.getClass().getSimpleName()));\n-\t}\n+public class OldTobyTobacco extends Tobacco {\n }\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/SecondBreakfastTobacco.java b/dependency-injection/src/main/java/com/iluwatar/SecondBreakfastTobacco.java\n--- a/dependency-injection/src/main/java/com/iluwatar/SecondBreakfastTobacco.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/SecondBreakfastTobacco.java\n@@ -0,0 +1,4 @@\n+package com.iluwatar;\n+\n+public class SecondBreakfastTobacco extends Tobacco {\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/SimpleWizard.java b/dependency-injection/src/main/java/com/iluwatar/SimpleWizard.java\n--- a/dependency-injection/src/main/java/com/iluwatar/SimpleWizard.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/SimpleWizard.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\n+\n+public class SimpleWizard implements Wizard {\n+\t\n+\tprivate OldTobyTobacco tobacco = new OldTobyTobacco();\n+\t\n+\tpublic void smoke() {\n+\t\ttobacco.smoke(this);\n+\t}\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/Tobacco.java b/dependency-injection/src/main/java/com/iluwatar/Tobacco.java\n--- a/dependency-injection/src/main/java/com/iluwatar/Tobacco.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/Tobacco.java\n@@ -1,7 +1,8 @@\n package com.iluwatar;\n \n-public interface Tobacco {\n+public abstract class Tobacco {\n \t\n-\tpublic void smoke();\n-\n+\tpublic void smoke(Wizard wizard) {\n+\t\tSystem.out.println(String.format(\"%s smoking %s\", wizard.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t}\n }\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/Wizard.java b/dependency-injection/src/main/java/com/iluwatar/Wizard.java\n--- a/dependency-injection/src/main/java/com/iluwatar/Wizard.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/Wizard.java\n@@ -1,10 +1,7 @@\n package com.iluwatar;\n \n-public class Wizard {\n+public interface Wizard {\n \t\n-\tprivate OldTobyTobacco tobacco = new OldTobyTobacco();\n-\t\n-\tpublic void smoke() {\n-\t\ttobacco.smoke();\n-\t}\n+\tvoid smoke();\n+\n }",
    "output": "Work on the DI example. Added second Wizard with injected Tobacco."
  },
  {
    "input": "diff --git a/dependency-injection/src/main/java/com/iluwatar/App.java b/dependency-injection/src/main/java/com/iluwatar/App.java\n--- a/dependency-injection/src/main/java/com/iluwatar/App.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/App.java\n@@ -3,5 +3,7 @@\n public class App {\n \t\n     public static void main( String[] args ) {\n+    \tWizard wizard = new Wizard();\n+    \twizard.smoke();\n     }\n }\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java b/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java\n--- a/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/OldTobyTobacco.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class OldTobyTobacco implements Tobacco {\n+\n+\t@Override\n+\tpublic void smoke() {\n+\t\tSystem.out.println(String.format(\"Smoking %s\", this.getClass().getSimpleName()));\n+\t}\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/Tobacco.java b/dependency-injection/src/main/java/com/iluwatar/Tobacco.java\n--- a/dependency-injection/src/main/java/com/iluwatar/Tobacco.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/Tobacco.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public interface Tobacco {\n+\t\n+\tpublic void smoke();\n+\n+}\n\ndiff --git a/dependency-injection/src/main/java/com/iluwatar/Wizard.java b/dependency-injection/src/main/java/com/iluwatar/Wizard.java\n--- a/dependency-injection/src/main/java/com/iluwatar/Wizard.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/Wizard.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\n+\n+public class Wizard {\n+\t\n+\tprivate OldTobyTobacco tobacco = new OldTobyTobacco();\n+\t\n+\tpublic void smoke() {\n+\t\ttobacco.smoke();\n+\t}\n+}",
    "output": "Work on Dependency Injection example."
  },
  {
    "input": "diff --git a/dependency-injection/src/main/java/com/iluwatar/App.java b/dependency-injection/src/main/java/com/iluwatar/App.java\n--- a/dependency-injection/src/main/java/com/iluwatar/App.java\n+++ b/dependency-injection/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/dependency-injection/src/test/java/com/iluwatar/AppTest.java b/dependency-injection/src/test/java/com/iluwatar/AppTest.java\n--- a/dependency-injection/src/test/java/com/iluwatar/AppTest.java\n+++ b/dependency-injection/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\t\n+}",
    "output": "Finished the example."
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/ObjectPool.java b/object-pool/src/main/java/com/iluwatar/ObjectPool.java\n--- a/object-pool/src/main/java/com/iluwatar/ObjectPool.java\n+++ b/object-pool/src/main/java/com/iluwatar/ObjectPool.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class ObjectPool<T> {\r\n+\r\n+\tprotected abstract T create();\r\n+\t\r\n+\tpublic synchronized T checkOut() {\r\n+\t\treturn null;\r\n+\t}\r\n+\t\r\n+\tpublic synchronized void checkIn(T instance) {\r\n+\t\t\r\n+\t}\r\n+}\r\n\ndiff --git a/object-pool/src/main/java/com/iluwatar/Oliphaunt.java b/object-pool/src/main/java/com/iluwatar/Oliphaunt.java\n--- a/object-pool/src/main/java/com/iluwatar/Oliphaunt.java\n+++ b/object-pool/src/main/java/com/iluwatar/Oliphaunt.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\r\n+\r\n+public class Oliphaunt {\r\n+\r\n+}\r\n\ndiff --git a/object-pool/src/main/java/com/iluwatar/OliphauntPool.java b/object-pool/src/main/java/com/iluwatar/OliphauntPool.java\n--- a/object-pool/src/main/java/com/iluwatar/OliphauntPool.java\n+++ b/object-pool/src/main/java/com/iluwatar/OliphauntPool.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public class OliphauntPool extends ObjectPool<Oliphaunt> {\r\n+\r\n+\t@Override\r\n+\tprotected Oliphaunt create() {\r\n+\t\treturn new Oliphaunt();\r\n+\t}\r\n+}\r",
    "output": "Work on Object Pool example."
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/App.java b/object-pool/src/main/java/com/iluwatar/App.java\n--- a/object-pool/src/main/java/com/iluwatar/App.java\n+++ b/object-pool/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public class App {\r\n+\t\r\n+    public static void main( String[] args ) {\r\n+    }\r\n+}\r\n\ndiff --git a/object-pool/src/test/java/com/iluwatar/AppTest.java b/object-pool/src/test/java/com/iluwatar/AppTest.java\n--- a/object-pool/src/test/java/com/iluwatar/AppTest.java\n+++ b/object-pool/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class AppTest {\r\n+\t\r\n+\t@Test\r\n+\tpublic void test() {\r\n+\t\tString[] args = {};\r\n+\t\tApp.main(args);\r\n+\t}\r\n+}\r",
    "output": "Skeleton for Object Pool pattern."
  },
  {
    "input": "diff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n@@ -1,7 +1,6 @@\n package com.iluwatar;\n \n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.ObjectInputStream;",
    "output": "Remove unused import."
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/App.java b/private-class-data/src/main/java/com/iluwatar/App.java\n--- a/private-class-data/src/main/java/com/iluwatar/App.java\n+++ b/private-class-data/src/main/java/com/iluwatar/App.java\n@@ -7,5 +7,8 @@ public static void main( String[] args ) {\n     \tstew.mix();\r\n     \tstew.taste();\r\n     \tstew.mix();\r\n+    \t\r\n+    \tImmutableStew immutableStew = new ImmutableStew(2, 4, 3, 6);\r\n+    \timmutableStew.mix();\r\n     }\r\n }\r\n\ndiff --git a/private-class-data/src/main/java/com/iluwatar/ImmutableStew.java b/private-class-data/src/main/java/com/iluwatar/ImmutableStew.java\n--- a/private-class-data/src/main/java/com/iluwatar/ImmutableStew.java\n+++ b/private-class-data/src/main/java/com/iluwatar/ImmutableStew.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\r\n+\r\n+public class ImmutableStew {\r\n+\r\n+\tprivate StewData data;\r\n+\t\r\n+\tpublic ImmutableStew(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {\r\n+\t\tdata = new StewData(numPotatoes, numCarrots, numMeat, numPeppers);\r\n+\t}\r\n+\t\r\n+\tpublic void mix() {\r\n+\t\tSystem.out.println(String.format(\"Mixing the immutable stew we find: %d potatoes, %d carrots, %d meat and %d peppers\",\r\n+\t\t\t\tdata.getNumPotatoes(), data.getNumCarrots(), data.getNumMeat(), data.getNumPeppers()));\r\n+\t}\r\n+}\r\n\ndiff --git a/private-class-data/src/main/java/com/iluwatar/Stew.java b/private-class-data/src/main/java/com/iluwatar/Stew.java\n--- a/private-class-data/src/main/java/com/iluwatar/Stew.java\n+++ b/private-class-data/src/main/java/com/iluwatar/Stew.java\n@@ -8,10 +8,10 @@ public class Stew {\n \tprivate int numPeppers;\r\n \t\r\n \tpublic Stew(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {\r\n-\t\t\t\tthis.numPotatoes = numPotatoes;\r\n-\t\t\t\tthis.numCarrots = numCarrots;\r\n-\t\t\t\tthis.numMeat = numMeat;\r\n-\t\t\t\tthis.numPeppers = numPeppers;\r\n+\t\tthis.numPotatoes = numPotatoes;\r\n+\t\tthis.numCarrots = numCarrots;\r\n+\t\tthis.numMeat = numMeat;\r\n+\t\tthis.numPeppers = numPeppers;\r\n \t}\r\n \t\r\n \tpublic void mix() {\r\n\ndiff --git a/private-class-data/src/main/java/com/iluwatar/StewData.java b/private-class-data/src/main/java/com/iluwatar/StewData.java\n--- a/private-class-data/src/main/java/com/iluwatar/StewData.java\n+++ b/private-class-data/src/main/java/com/iluwatar/StewData.java\n@@ -0,0 +1,32 @@\n+package com.iluwatar;\r\n+\r\n+public class StewData {\r\n+\r\n+\tprivate int numPotatoes;\r\n+\tprivate int numCarrots;\r\n+\tprivate int numMeat;\r\n+\tprivate int numPeppers;\r\n+\t\r\n+\tpublic StewData(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {\r\n+\t\tthis.numPotatoes = numPotatoes;\r\n+\t\tthis.numCarrots = numCarrots;\r\n+\t\tthis.numMeat = numMeat;\r\n+\t\tthis.numPeppers = numPeppers;\r\n+\t}\r\n+\r\n+\tpublic int getNumPotatoes() {\r\n+\t\treturn numPotatoes;\r\n+\t}\r\n+\r\n+\tpublic int getNumCarrots() {\r\n+\t\treturn numCarrots;\r\n+\t}\r\n+\r\n+\tpublic int getNumMeat() {\r\n+\t\treturn numMeat;\r\n+\t}\r\n+\r\n+\tpublic int getNumPeppers() {\r\n+\t\treturn numPeppers;\r\n+\t}\r\n+}\r",
    "output": "Finished the example."
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/App.java b/private-class-data/src/main/java/com/iluwatar/App.java\n--- a/private-class-data/src/main/java/com/iluwatar/App.java\n+++ b/private-class-data/src/main/java/com/iluwatar/App.java\n@@ -3,5 +3,9 @@\n public class App {\r\n \t\r\n     public static void main( String[] args ) {\r\n+    \tStew stew = new Stew(1, 2, 3, 4);\r\n+    \tstew.mix();\r\n+    \tstew.taste();\r\n+    \tstew.mix();\r\n     }\r\n }\r\n\ndiff --git a/private-class-data/src/main/java/com/iluwatar/Stew.java b/private-class-data/src/main/java/com/iluwatar/Stew.java\n--- a/private-class-data/src/main/java/com/iluwatar/Stew.java\n+++ b/private-class-data/src/main/java/com/iluwatar/Stew.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar;\r\n+\r\n+public class Stew {\r\n+\t\r\n+\tprivate int numPotatoes;\r\n+\tprivate int numCarrots;\r\n+\tprivate int numMeat;\r\n+\tprivate int numPeppers;\r\n+\t\r\n+\tpublic Stew(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {\r\n+\t\t\t\tthis.numPotatoes = numPotatoes;\r\n+\t\t\t\tthis.numCarrots = numCarrots;\r\n+\t\t\t\tthis.numMeat = numMeat;\r\n+\t\t\t\tthis.numPeppers = numPeppers;\r\n+\t}\r\n+\t\r\n+\tpublic void mix() {\r\n+\t\tSystem.out.println(String.format(\"Mixing the stew we find: %d potatoes, %d carrots, %d meat and %d peppers\",\r\n+\t\t\t\tnumPotatoes, numCarrots, numMeat, numPeppers));\r\n+\t}\r\n+\t\r\n+\tpublic void taste() {\r\n+\t\tSystem.out.println(\"Tasting the stew\");\r\n+\t\tif (numPotatoes > 0) { \r\n+\t\t\tnumPotatoes--; \r\n+\t\t}\r\n+\t\tif (numCarrots > 0) { \r\n+\t\t\tnumCarrots--; \r\n+\t\t}\r\n+\t\tif (numMeat > 0) { \r\n+\t\t\tnumMeat--; \r\n+\t\t}\r\n+\t\tif (numPeppers > 0) { \r\n+\t\t\tnumPeppers--; \r\n+\t\t}\r\n+\t}\r\n+}\r",
    "output": "Work on the example."
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/App.java b/private-class-data/src/main/java/com/iluwatar/App.java\n--- a/private-class-data/src/main/java/com/iluwatar/App.java\n+++ b/private-class-data/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public class App {\r\n+\t\r\n+    public static void main( String[] args ) {\r\n+    }\r\n+}\r\n\ndiff --git a/private-class-data/src/test/java/com/iluwatar/AppTest.java b/private-class-data/src/test/java/com/iluwatar/AppTest.java\n--- a/private-class-data/src/test/java/com/iluwatar/AppTest.java\n+++ b/private-class-data/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class AppTest {\r\n+\r\n+\t@Test\r\n+\tpublic void test() {\r\n+\t\tString[] args = {};\r\n+\t\tApp.main(args);\r\n+\t}\t\r\n+}\r",
    "output": "Add skeleton for Private Class Data pattern."
  },
  {
    "input": "diff --git a/thread-pool/src/main/java/com/iluwatar/App.java b/thread-pool/src/main/java/com/iluwatar/App.java\n--- a/thread-pool/src/main/java/com/iluwatar/App.java\n+++ b/thread-pool/src/main/java/com/iluwatar/App.java\n@@ -1,7 +1,41 @@\n package com.iluwatar;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n public class App {\n \t\n     public static void main( String[] args ) {\n+    \t\n+    \tSystem.out.println(\"Program started\");\n+    \t\n+    \tList<Task> tasks = new ArrayList<>();\n+    \ttasks.add(new PotatoPeelingTask(3));\n+    \ttasks.add(new PotatoPeelingTask(6));\n+    \ttasks.add(new CoffeeMakingTask(2));\n+    \ttasks.add(new CoffeeMakingTask(6));\n+    \ttasks.add(new PotatoPeelingTask(4));\n+    \ttasks.add(new CoffeeMakingTask(2));\n+    \ttasks.add(new PotatoPeelingTask(4));\n+    \ttasks.add(new CoffeeMakingTask(9));\n+    \ttasks.add(new PotatoPeelingTask(3));\n+    \ttasks.add(new CoffeeMakingTask(2));\n+    \ttasks.add(new PotatoPeelingTask(4));\n+    \ttasks.add(new CoffeeMakingTask(2));\n+    \ttasks.add(new CoffeeMakingTask(7));\n+    \ttasks.add(new PotatoPeelingTask(4));\n+    \ttasks.add(new PotatoPeelingTask(5));\n+    \t\n+    \tExecutorService executor = Executors.newFixedThreadPool(3);\n+    \tfor (int i=0; i<tasks.size(); i++) {\n+\t    \tRunnable worker = new Worker(tasks.get(i));\n+\t    \texecutor.execute(worker);\n+    \t}\n+    \texecutor.shutdown();\n+    \twhile (!executor.isTerminated()) {\n+    \t}\n+    \tSystem.out.println(\"Program finished\");\n     }\n }\n\ndiff --git a/thread-pool/src/main/java/com/iluwatar/CoffeeMakingTask.java b/thread-pool/src/main/java/com/iluwatar/CoffeeMakingTask.java\n--- a/thread-pool/src/main/java/com/iluwatar/CoffeeMakingTask.java\n+++ b/thread-pool/src/main/java/com/iluwatar/CoffeeMakingTask.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\n+\n+public class CoffeeMakingTask extends Task {\n+\n+\tprivate static int TIME_PER_CUP = 300;\n+\t\n+\tpublic CoffeeMakingTask(int numCups) {\n+\t\tsuper(numCups * TIME_PER_CUP);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"%s %s\", this.getClass().getSimpleName(), super.toString());\n+\t}\n+}\n\ndiff --git a/thread-pool/src/main/java/com/iluwatar/PotatoPeelingTask.java b/thread-pool/src/main/java/com/iluwatar/PotatoPeelingTask.java\n--- a/thread-pool/src/main/java/com/iluwatar/PotatoPeelingTask.java\n+++ b/thread-pool/src/main/java/com/iluwatar/PotatoPeelingTask.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\n+\n+public class PotatoPeelingTask extends Task {\n+\n+\tprivate static int TIME_PER_POTATO = 500;\n+\t\n+\tpublic PotatoPeelingTask(int numPotatoes) {\n+\t\tsuper(numPotatoes * TIME_PER_POTATO);\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"%s %s\", this.getClass().getSimpleName(), super.toString());\n+\t}\n+}\n\ndiff --git a/thread-pool/src/main/java/com/iluwatar/Task.java b/thread-pool/src/main/java/com/iluwatar/Task.java\n--- a/thread-pool/src/main/java/com/iluwatar/Task.java\n+++ b/thread-pool/src/main/java/com/iluwatar/Task.java\n@@ -0,0 +1,27 @@\n+package com.iluwatar;\n+\n+public abstract class Task {\n+\n+\tprivate static int nextId = 1;\n+\t\n+\tprivate int id;\n+\tprivate int timeMs;\n+\t\n+\tpublic Task(int timeMs) {\n+\t\tthis.id = nextId++;\n+\t\tthis.timeMs = timeMs;\n+\t}\n+\t\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic int getTimeMs() {\n+\t\treturn timeMs;\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"id=%d timeMs=%d\", id, timeMs);\n+\t}\n+}\n\ndiff --git a/thread-pool/src/main/java/com/iluwatar/Worker.java b/thread-pool/src/main/java/com/iluwatar/Worker.java\n--- a/thread-pool/src/main/java/com/iluwatar/Worker.java\n+++ b/thread-pool/src/main/java/com/iluwatar/Worker.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar;\n+\n+public class Worker implements Runnable {\n+\t\n+\tprivate Task task;\n+\n+\tpublic Worker(Task task) {\n+\t\tthis.task = task;\n+\t}\n+\t\n+\t@Override\n+\tpublic void run() {\n+\t\tSystem.out.println(String.format(\"%s processing %s\", Thread.currentThread().getName(), task.toString()));\n+\t\ttry {\n+\t\t\tThread.sleep(task.getTimeMs());\n+\t\t} catch (InterruptedException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}",
    "output": "Finished Thread Pool example code."
  },
  {
    "input": "diff --git a/thread-pool/src/main/java/com/iluwatar/App.java b/thread-pool/src/main/java/com/iluwatar/App.java\n--- a/thread-pool/src/main/java/com/iluwatar/App.java\n+++ b/thread-pool/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/thread-pool/src/test/java/com/iluwatar/AppTest.java b/thread-pool/src/test/java/com/iluwatar/AppTest.java\n--- a/thread-pool/src/test/java/com/iluwatar/AppTest.java\n+++ b/thread-pool/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Thread Pool pattern."
  },
  {
    "input": "diff --git a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n--- a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n@@ -2,6 +2,14 @@\n \n public class App {\n \t\n-    public static void main( String[] args ) {\n+\tpublic static void main( String[] args ) throws Exception {\n+\t\t\n+    \ttry (SlidingDoor slidingDoor = new SlidingDoor()) {\n+    \t\tSystem.out.println(\"Walking in.\");\n+    \t}\n+    \t\n+    \ttry (TreasureChest treasureChest = new TreasureChest()) {\n+    \t\tSystem.out.println(\"Looting contents.\");\n+    \t}\n     }\n }\n\ndiff --git a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/SlidingDoor.java b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/SlidingDoor.java\n--- a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/SlidingDoor.java\n+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/SlidingDoor.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\n+\n+public class SlidingDoor implements AutoCloseable {\n+\n+\tpublic SlidingDoor() {\n+\t\tSystem.out.println(\"Sliding door opens.\");\n+\t}\n+\t\n+\t@Override\n+\tpublic void close() throws Exception {\n+\t\tSystem.out.println(\"Sliding door closes.\");\n+\t}\n+}\n\ndiff --git a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/TreasureChest.java b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/TreasureChest.java\n--- a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/TreasureChest.java\n+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/TreasureChest.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+public class TreasureChest implements Closeable {\n+\n+\tpublic TreasureChest() {\n+\t\tSystem.out.println(\"Treasure chest opens.\");\n+\t}\n+\t\n+\t@Override\n+\tpublic void close() throws IOException {\n+\t\tSystem.out.println(\"Treasure chest closes.\");\n+\t}\n+}\n\ndiff --git a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n--- a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n+++ b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n@@ -5,7 +5,7 @@\n public class AppTest {\n \n \t@Test\n-\tpublic void test() {\n+\tpublic void test() throws Exception {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}",
    "output": "Finished example code."
  },
  {
    "input": "diff --git a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n--- a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n--- a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n+++ b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Resource Acquisition Is Initialization pattern."
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/App.java b/multiton/src/main/java/com/iluwatar/App.java\n--- a/multiton/src/main/java/com/iluwatar/App.java\n+++ b/multiton/src/main/java/com/iluwatar/App.java\n@@ -3,5 +3,14 @@\n public class App {\n \t\n     public static void main( String[] args ) {\n+    \tSystem.out.println(\"KHAMUL=\" + Nazgul.getInstance(NazgulName.KHAMUL));\n+    \tSystem.out.println(\"MURAZOR=\" + Nazgul.getInstance(NazgulName.MURAZOR));\n+    \tSystem.out.println(\"DWAR=\" + Nazgul.getInstance(NazgulName.DWAR));\n+    \tSystem.out.println(\"JI_INDUR=\" + Nazgul.getInstance(NazgulName.JI_INDUR));\n+    \tSystem.out.println(\"AKHORAHIL=\" + Nazgul.getInstance(NazgulName.AKHORAHIL));\n+    \tSystem.out.println(\"HOARMURATH=\" + Nazgul.getInstance(NazgulName.HOARMURATH));\n+    \tSystem.out.println(\"ADUNAPHEL=\" + Nazgul.getInstance(NazgulName.ADUNAPHEL));\n+    \tSystem.out.println(\"REN=\" + Nazgul.getInstance(NazgulName.REN));\n+    \tSystem.out.println(\"UVATHA=\" + Nazgul.getInstance(NazgulName.UVATHA));    \t\n     }\n }\n\ndiff --git a/multiton/src/main/java/com/iluwatar/Nazgul.java b/multiton/src/main/java/com/iluwatar/Nazgul.java\n--- a/multiton/src/main/java/com/iluwatar/Nazgul.java\n+++ b/multiton/src/main/java/com/iluwatar/Nazgul.java\n@@ -0,0 +1,36 @@\n+package com.iluwatar;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class Nazgul {\n+\n+\tprivate static Map<NazgulName, Nazgul> nazguls;\n+\t\n+\tprivate NazgulName name;\n+\n+\tstatic {\n+\t\tnazguls = new ConcurrentHashMap<>();\n+\t\tnazguls.put(NazgulName.KHAMUL, new Nazgul(NazgulName.KHAMUL));\n+\t\tnazguls.put(NazgulName.MURAZOR, new Nazgul(NazgulName.MURAZOR));\n+\t\tnazguls.put(NazgulName.DWAR, new Nazgul(NazgulName.DWAR));\n+\t\tnazguls.put(NazgulName.JI_INDUR, new Nazgul(NazgulName.JI_INDUR));\n+\t\tnazguls.put(NazgulName.AKHORAHIL, new Nazgul(NazgulName.AKHORAHIL));\n+\t\tnazguls.put(NazgulName.HOARMURATH, new Nazgul(NazgulName.HOARMURATH));\n+\t\tnazguls.put(NazgulName.ADUNAPHEL, new Nazgul(NazgulName.ADUNAPHEL));\n+\t\tnazguls.put(NazgulName.REN, new Nazgul(NazgulName.REN));\n+\t\tnazguls.put(NazgulName.UVATHA, new Nazgul(NazgulName.UVATHA));\n+\t}\n+\t\n+\tprivate Nazgul(NazgulName name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic static Nazgul getInstance(NazgulName name) {\n+\t\treturn nazguls.get(name);\n+\t}\n+\t\n+\tpublic NazgulName getName() {\n+\t\treturn name;\n+\t}\n+}\n\ndiff --git a/multiton/src/main/java/com/iluwatar/NazgulName.java b/multiton/src/main/java/com/iluwatar/NazgulName.java\n--- a/multiton/src/main/java/com/iluwatar/NazgulName.java\n+++ b/multiton/src/main/java/com/iluwatar/NazgulName.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public enum NazgulName {\n+\n+\tKHAMUL, MURAZOR, DWAR, JI_INDUR, AKHORAHIL, HOARMURATH, ADUNAPHEL, REN, UVATHA;\n+\t\n+}",
    "output": "Finished Multiton example."
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/App.java b/multiton/src/main/java/com/iluwatar/App.java\n--- a/multiton/src/main/java/com/iluwatar/App.java\n+++ b/multiton/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/multiton/src/test/java/com/iluwatar/AppTest.java b/multiton/src/test/java/com/iluwatar/AppTest.java\n--- a/multiton/src/test/java/com/iluwatar/AppTest.java\n+++ b/multiton/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Multiton example."
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java b/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n@@ -13,21 +13,21 @@ public void collision(GameObject gameObject) {\n \n \t@Override\n \tpublic void collisionResolve(FlamingAsteroid asteroid) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", asteroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s.\", asteroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n \t}\n \n \t@Override\n \tpublic void collisionResolve(Meteoroid meteoroid) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", meteoroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s.\", meteoroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n \t}\n \n \t@Override\n \tpublic void collisionResolve(SpaceStationMir mir) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", mir.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s.\", mir.getClass().getSimpleName(), this.getClass().getSimpleName()));\n \t}\n \n \t@Override\n \tpublic void collisionResolve(SpaceStationIss iss) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", iss.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s.\", iss.getClass().getSimpleName(), this.getClass().getSimpleName()));\n \t}\t\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java b/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n--- a/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n@@ -13,26 +13,34 @@ public void collision(GameObject gameObject) {\n \n \t@Override\n \tpublic void collisionResolve(FlamingAsteroid asteroid) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", asteroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s. %s is damaged! %s is set on fire!\", \n+\t\t\t\tasteroid.getClass().getSimpleName(), this.getClass().getSimpleName(), \n+\t\t\t\tthis.getClass().getSimpleName(), this.getClass().getSimpleName()));\n \t\tsetDamaged(true);\n \t\tsetOnFire(true);\n \t}\n \n \t@Override\n \tpublic void collisionResolve(Meteoroid meteoroid) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", meteoroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s. %s is damaged!\", \n+\t\t\t\tmeteoroid.getClass().getSimpleName(), this.getClass().getSimpleName(), \n+\t\t\t\tthis.getClass().getSimpleName()));\n \t\tsetDamaged(true);\n \t}\n \n \t@Override\n \tpublic void collisionResolve(SpaceStationMir mir) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", mir.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s. %s is damaged!\", \n+\t\t\t\tmir.getClass().getSimpleName(), this.getClass().getSimpleName(), \n+\t\t\t\tthis.getClass().getSimpleName()));\n \t\tsetDamaged(true);\n \t}\n \n \t@Override\n \tpublic void collisionResolve(SpaceStationIss iss) {\n-\t\tSystem.out.println(String.format(\"%s hits %s\", iss.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tSystem.out.println(String.format(\"%s hits %s. %s is damaged!\", \n+\t\t\t\tiss.getClass().getSimpleName(), this.getClass().getSimpleName(), \n+\t\t\t\tthis.getClass().getSimpleName()));\n \t\tsetDamaged(true);\n \t}\t\n }",
    "output": "Double Dispatch example improvements."
  },
  {
    "input": "diff --git a/double-dispatch/src/test/java/com/iluwatar/RectangleTest.java b/double-dispatch/src/test/java/com/iluwatar/RectangleTest.java\n--- a/double-dispatch/src/test/java/com/iluwatar/RectangleTest.java\n+++ b/double-dispatch/src/test/java/com/iluwatar/RectangleTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class RectangleTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tAssert.assertTrue(new Rectangle(0,0,1,1).intersectsWith(new Rectangle(0,0,1,1)));\n+\t\tAssert.assertTrue(new Rectangle(0,0,1,1).intersectsWith(new Rectangle(-1,-5,7,8)));\n+\t\tAssert.assertFalse(new Rectangle(0,0,1,1).intersectsWith(new Rectangle(2,2,3,3)));\n+\t\tAssert.assertFalse(new Rectangle(0,0,1,1).intersectsWith(new Rectangle(-2,-2,-1,-1)));\n+\t}\n+}",
    "output": "Unit test for Rectangle"
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/App.java b/double-dispatch/src/main/java/com/iluwatar/App.java\n--- a/double-dispatch/src/main/java/com/iluwatar/App.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/App.java\n@@ -8,9 +8,17 @@ public class App {\n     public static void main( String[] args ) {\n     \tList<GameObject> objects = new ArrayList<>();\n     \tobjects.add(new FlamingAsteroid(0, 0, 5, 5));\n-    \tobjects.add(new SpaceStationMir(1, 1, 4, 4));\n+    \tobjects.add(new SpaceStationMir(1, 1, 2, 2));\n     \tobjects.add(new Meteoroid(10, 10, 15, 15));\n-    \tobjects.add(new SpaceStationIss(12, 11, 14, 15));\n-    \tobjects.stream().forEach(o1 -> objects.stream().forEach(o2 -> { if (o1 != o2) System.out.println(String.format(\"%s -> %s\", o1, o2)); } ));\n+    \tobjects.add(new SpaceStationIss(12, 12, 14, 14));\n+    \t\n+    \tobjects.stream().forEach(o -> System.out.println(o));\n+    \tSystem.out.println(\"\");\n+    \t\n+    \tobjects.stream().forEach(o1 -> objects.stream().forEach(o2 -> { if (o1 != o2 && o1.intersectsWith(o2)) o1.collision(o2); } ));\n+    \tSystem.out.println(\"\");\n+    \t\n+    \tobjects.stream().forEach(o -> System.out.println(o));\n+    \tSystem.out.println(\"\");\n     }\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java b/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java\n@@ -6,4 +6,9 @@ public FlamingAsteroid(int left, int top, int right, int bottom) {\n \t\tsuper(left, top, right, bottom);\n \t\tsetOnFire(true);\n \t}\n+\n+\t@Override\n+\tpublic void collision(GameObject gameObject) {\n+\t\tgameObject.collisionResolve(this);\n+\t}\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/GameObject.java b/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n--- a/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n@@ -30,4 +30,14 @@ public boolean isDamaged() {\n \tpublic void setDamaged(boolean damaged) {\n \t\tthis.damaged = damaged;\n \t}\n+\t\n+\tpublic abstract void collision(GameObject gameObject);\n+\t\n+\tpublic abstract void collisionResolve(FlamingAsteroid asteroid);\n+\n+\tpublic abstract void collisionResolve(Meteoroid meteoroid);\n+\n+\tpublic abstract void collisionResolve(SpaceStationMir mir);\n+\n+\tpublic abstract void collisionResolve(SpaceStationIss iss);\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java b/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n@@ -5,4 +5,29 @@ public class Meteoroid extends GameObject {\n \tpublic Meteoroid(int left, int top, int right, int bottom) {\n \t\tsuper(left, top, right, bottom);\n \t}\n+\n+\t@Override\n+\tpublic void collision(GameObject gameObject) {\n+\t\tgameObject.collisionResolve(this);\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(FlamingAsteroid asteroid) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", asteroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(Meteoroid meteoroid) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", meteoroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(SpaceStationMir mir) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", mir.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(SpaceStationIss iss) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", iss.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t}\t\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java b/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java\n--- a/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java\n@@ -5,4 +5,9 @@ public class SpaceStationIss extends SpaceStationMir {\n \tpublic SpaceStationIss(int left, int top, int right, int bottom) {\n \t\tsuper(left, top, right, bottom);\n \t}\n+\n+\t@Override\n+\tpublic void collision(GameObject gameObject) {\n+\t\tgameObject.collisionResolve(this);\n+\t}\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java b/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n--- a/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n@@ -5,4 +5,34 @@ public class SpaceStationMir extends GameObject {\n \tpublic SpaceStationMir(int left, int top, int right, int bottom) {\n \t\tsuper(left, top, right, bottom);\n \t}\n+\n+\t@Override\n+\tpublic void collision(GameObject gameObject) {\n+\t\tgameObject.collisionResolve(this);\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(FlamingAsteroid asteroid) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", asteroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tsetDamaged(true);\n+\t\tsetOnFire(true);\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(Meteoroid meteoroid) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", meteoroid.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tsetDamaged(true);\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(SpaceStationMir mir) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", mir.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tsetDamaged(true);\n+\t}\n+\n+\t@Override\n+\tpublic void collisionResolve(SpaceStationIss iss) {\n+\t\tSystem.out.println(String.format(\"%s hits %s\", iss.getClass().getSimpleName(), this.getClass().getSimpleName()));\n+\t\tsetDamaged(true);\n+\t}\t\n }",
    "output": "Completed Double Dispatch example."
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/App.java b/double-dispatch/src/main/java/com/iluwatar/App.java\n--- a/double-dispatch/src/main/java/com/iluwatar/App.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/App.java\n@@ -1,7 +1,16 @@\n package com.iluwatar;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class App {\n \t\n     public static void main( String[] args ) {\n+    \tList<GameObject> objects = new ArrayList<>();\n+    \tobjects.add(new FlamingAsteroid(0, 0, 5, 5));\n+    \tobjects.add(new SpaceStationMir(1, 1, 4, 4));\n+    \tobjects.add(new Meteoroid(10, 10, 15, 15));\n+    \tobjects.add(new SpaceStationIss(12, 11, 14, 15));\n+    \tobjects.stream().forEach(o1 -> objects.stream().forEach(o2 -> { if (o1 != o2) System.out.println(String.format(\"%s -> %s\", o1, o2)); } ));\n     }\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/Asteroid.java b/double-dispatch/src/main/java/com/iluwatar/Asteroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Asteroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Asteroid.java\n@@ -1,8 +0,0 @@\n-package com.iluwatar;\n-\n-public class Asteroid extends Meteoroid {\n-\n-\tpublic Asteroid(int left, int top, int right, int bottom) {\n-\t\tsuper(left, top, right, bottom);\n-\t}\n-}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java b/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/FlamingAsteroid.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class FlamingAsteroid extends Meteoroid {\n+\n+\tpublic FlamingAsteroid(int left, int top, int right, int bottom) {\n+\t\tsuper(left, top, right, bottom);\n+\t\tsetOnFire(true);\n+\t}\n+}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/GameObject.java b/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n--- a/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n@@ -2,12 +2,32 @@\n \n public abstract class GameObject extends Rectangle {\n \t\n+\tprivate boolean damaged;\n+\tprivate boolean onFire;\n+\t\n \tpublic GameObject(int left, int top, int right, int bottom) {\n \t\tsuper(left, top, right, bottom);\n \t}\n \t\n \t@Override\n \tpublic String toString() {\n-\t\treturn this.getClass().getSimpleName();\n+\t\treturn String.format(\"%s at %s damaged=%b onFire=%b\", this.getClass().getSimpleName(), \n+\t\t\t\tsuper.toString(), isDamaged(), isOnFire());\n+\t}\n+\t\n+\tpublic boolean isOnFire() {\n+\t\treturn onFire;\n+\t}\n+\t\n+\tpublic void setOnFire(boolean onFire) {\n+\t\tthis.onFire = onFire;\n+\t}\n+\t\n+\tpublic boolean isDamaged() {\n+\t\treturn damaged;\n+\t}\n+\t\n+\tpublic void setDamaged(boolean damaged) {\n+\t\tthis.damaged = damaged;\n \t}\n }\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/Rectangle.java b/double-dispatch/src/main/java/com/iluwatar/Rectangle.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Rectangle.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Rectangle.java\n@@ -30,4 +30,9 @@ public int getBottom() {\n \tboolean intersectsWith(Rectangle r) {\n \t\treturn !(r.getLeft() > getRight() || r.getRight() < getLeft() || r.getTop() > getBottom() || r.getBottom() < getTop());\n \t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"[%d,%d,%d,%d]\", getLeft(), getTop(), getRight(), getBottom());\n+\t}\n }",
    "output": "Add iteration logic."
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/Asteroid.java b/double-dispatch/src/main/java/com/iluwatar/Asteroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Asteroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Asteroid.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Asteroid extends Meteoroid {\n+\n+\tpublic Asteroid(int left, int top, int right, int bottom) {\n+\t\tsuper(left, top, right, bottom);\n+\t}\n+}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/GameObject.java b/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n--- a/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/GameObject.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\n+\n+public abstract class GameObject extends Rectangle {\n+\t\n+\tpublic GameObject(int left, int top, int right, int bottom) {\n+\t\tsuper(left, top, right, bottom);\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn this.getClass().getSimpleName();\n+\t}\n+}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java b/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Meteoroid.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Meteoroid extends GameObject {\n+\n+\tpublic Meteoroid(int left, int top, int right, int bottom) {\n+\t\tsuper(left, top, right, bottom);\n+\t}\n+}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/Rectangle.java b/double-dispatch/src/main/java/com/iluwatar/Rectangle.java\n--- a/double-dispatch/src/main/java/com/iluwatar/Rectangle.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/Rectangle.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar;\n+\n+public class Rectangle {\n+\n+\tprivate int left;\n+\tprivate int top;\n+\tprivate int right;\n+\tprivate int bottom;\n+\n+\tpublic Rectangle(int left, int top, int right, int bottom) {\n+\t\tthis.left = left;\n+\t\tthis.top = top;\n+\t\tthis.right = right;\n+\t\tthis.bottom = bottom;\n+\t}\n+\t\n+\tpublic int getLeft() {\n+\t\treturn left;\n+\t}\n+\tpublic int getTop() {\n+\t\treturn top;\n+\t}\n+\tpublic int getRight() {\n+\t\treturn right;\n+\t}\n+\tpublic int getBottom() {\n+\t\treturn bottom;\n+\t}\t\n+\t\n+\tboolean intersectsWith(Rectangle r) {\n+\t\treturn !(r.getLeft() > getRight() || r.getRight() < getLeft() || r.getTop() > getBottom() || r.getBottom() < getTop());\n+\t}\n+}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java b/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java\n--- a/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/SpaceStationIss.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class SpaceStationIss extends SpaceStationMir {\n+\n+\tpublic SpaceStationIss(int left, int top, int right, int bottom) {\n+\t\tsuper(left, top, right, bottom);\n+\t}\n+}\n\ndiff --git a/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java b/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n--- a/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/SpaceStationMir.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class SpaceStationMir extends GameObject {\n+\n+\tpublic SpaceStationMir(int left, int top, int right, int bottom) {\n+\t\tsuper(left, top, right, bottom);\n+\t}\n+}",
    "output": "Add class hierarchies."
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/App.java b/double-dispatch/src/main/java/com/iluwatar/App.java\n--- a/double-dispatch/src/main/java/com/iluwatar/App.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/double-dispatch/src/test/java/com/iluwatar/AppTest.java b/double-dispatch/src/test/java/com/iluwatar/AppTest.java\n--- a/double-dispatch/src/test/java/com/iluwatar/AppTest.java\n+++ b/double-dispatch/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Double Dispatch."
  },
  {
    "input": "diff --git a/flux/src/main/java/com/iluwatar/action/Action.java b/flux/src/main/java/com/iluwatar/action/Action.java\n--- a/flux/src/main/java/com/iluwatar/action/Action.java\n+++ b/flux/src/main/java/com/iluwatar/action/Action.java\n@@ -1,4 +1,5 @@\n-package com.iluwatar;\n+package com.iluwatar.action;\n+\n \n public abstract class Action {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/action/ActionType.java b/flux/src/main/java/com/iluwatar/action/ActionType.java\n--- a/flux/src/main/java/com/iluwatar/action/ActionType.java\n+++ b/flux/src/main/java/com/iluwatar/action/ActionType.java\n@@ -1,4 +1,4 @@\n-package com.iluwatar;\n+package com.iluwatar.action;\n \n public enum ActionType {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/action/Content.java b/flux/src/main/java/com/iluwatar/action/Content.java\n--- a/flux/src/main/java/com/iluwatar/action/Content.java\n+++ b/flux/src/main/java/com/iluwatar/action/Content.java\n@@ -1,4 +1,4 @@\n-package com.iluwatar;\n+package com.iluwatar.action;\n \n public enum Content {\n \t\n\ndiff --git a/flux/src/main/java/com/iluwatar/action/ContentAction.java b/flux/src/main/java/com/iluwatar/action/ContentAction.java\n--- a/flux/src/main/java/com/iluwatar/action/ContentAction.java\n+++ b/flux/src/main/java/com/iluwatar/action/ContentAction.java\n@@ -1,4 +1,5 @@\n-package com.iluwatar;\n+package com.iluwatar.action;\n+\n \n public class ContentAction extends Action {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/action/MenuAction.java b/flux/src/main/java/com/iluwatar/action/MenuAction.java\n--- a/flux/src/main/java/com/iluwatar/action/MenuAction.java\n+++ b/flux/src/main/java/com/iluwatar/action/MenuAction.java\n@@ -1,4 +1,5 @@\n-package com.iluwatar;\n+package com.iluwatar.action;\n+\n \n public class MenuAction extends Action {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/action/MenuItem.java b/flux/src/main/java/com/iluwatar/action/MenuItem.java\n--- a/flux/src/main/java/com/iluwatar/action/MenuItem.java\n+++ b/flux/src/main/java/com/iluwatar/action/MenuItem.java\n@@ -1,4 +1,4 @@\n-package com.iluwatar;\n+package com.iluwatar.action;\n \n public enum MenuItem {\n \t\n\ndiff --git a/flux/src/main/java/com/iluwatar/app/App.java b/flux/src/main/java/com/iluwatar/app/App.java\n--- a/flux/src/main/java/com/iluwatar/app/App.java\n+++ b/flux/src/main/java/com/iluwatar/app/App.java\n@@ -1,4 +1,11 @@\n-package com.iluwatar;\n+package com.iluwatar.app;\n+\n+import com.iluwatar.action.MenuItem;\n+import com.iluwatar.dispatcher.Dispatcher;\n+import com.iluwatar.store.ContentStore;\n+import com.iluwatar.store.MenuStore;\n+import com.iluwatar.view.ContentView;\n+import com.iluwatar.view.MenuView;\n \n public class App {\n \t\n\ndiff --git a/flux/src/main/java/com/iluwatar/dispatcher/Dispatcher.java b/flux/src/main/java/com/iluwatar/dispatcher/Dispatcher.java\n--- a/flux/src/main/java/com/iluwatar/dispatcher/Dispatcher.java\n+++ b/flux/src/main/java/com/iluwatar/dispatcher/Dispatcher.java\n@@ -1,8 +1,15 @@\n-package com.iluwatar;\n+package com.iluwatar.dispatcher;\n \n import java.util.LinkedList;\n import java.util.List;\n \n+import com.iluwatar.action.Action;\n+import com.iluwatar.action.Content;\n+import com.iluwatar.action.ContentAction;\n+import com.iluwatar.action.MenuAction;\n+import com.iluwatar.action.MenuItem;\n+import com.iluwatar.store.Store;\n+\n public class Dispatcher {\n \t\n \tprivate static Dispatcher instance = new Dispatcher();\n\ndiff --git a/flux/src/main/java/com/iluwatar/store/ContentStore.java b/flux/src/main/java/com/iluwatar/store/ContentStore.java\n--- a/flux/src/main/java/com/iluwatar/store/ContentStore.java\n+++ b/flux/src/main/java/com/iluwatar/store/ContentStore.java\n@@ -1,4 +1,9 @@\n-package com.iluwatar;\n+package com.iluwatar.store;\n+\n+import com.iluwatar.action.Action;\n+import com.iluwatar.action.ActionType;\n+import com.iluwatar.action.Content;\n+import com.iluwatar.action.ContentAction;\n \n public class ContentStore extends Store {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/store/MenuStore.java b/flux/src/main/java/com/iluwatar/store/MenuStore.java\n--- a/flux/src/main/java/com/iluwatar/store/MenuStore.java\n+++ b/flux/src/main/java/com/iluwatar/store/MenuStore.java\n@@ -1,4 +1,9 @@\n-package com.iluwatar;\n+package com.iluwatar.store;\n+\n+import com.iluwatar.action.Action;\n+import com.iluwatar.action.ActionType;\n+import com.iluwatar.action.MenuAction;\n+import com.iluwatar.action.MenuItem;\n \n public class MenuStore extends Store {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/store/Store.java b/flux/src/main/java/com/iluwatar/store/Store.java\n--- a/flux/src/main/java/com/iluwatar/store/Store.java\n+++ b/flux/src/main/java/com/iluwatar/store/Store.java\n@@ -1,8 +1,11 @@\n-package com.iluwatar;\n+package com.iluwatar.store;\n \n import java.util.LinkedList;\n import java.util.List;\n \n+import com.iluwatar.action.Action;\n+import com.iluwatar.view.View;\n+\n public abstract class Store {\n \t\n \tprivate List<View> views = new LinkedList<>();\n\ndiff --git a/flux/src/main/java/com/iluwatar/view/ContentView.java b/flux/src/main/java/com/iluwatar/view/ContentView.java\n--- a/flux/src/main/java/com/iluwatar/view/ContentView.java\n+++ b/flux/src/main/java/com/iluwatar/view/ContentView.java\n@@ -1,4 +1,8 @@\n-package com.iluwatar;\n+package com.iluwatar.view;\n+\n+import com.iluwatar.action.Content;\n+import com.iluwatar.store.ContentStore;\n+import com.iluwatar.store.Store;\n \n public class ContentView implements View {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/view/MenuView.java b/flux/src/main/java/com/iluwatar/view/MenuView.java\n--- a/flux/src/main/java/com/iluwatar/view/MenuView.java\n+++ b/flux/src/main/java/com/iluwatar/view/MenuView.java\n@@ -1,4 +1,9 @@\n-package com.iluwatar;\n+package com.iluwatar.view;\n+\n+import com.iluwatar.action.MenuItem;\n+import com.iluwatar.dispatcher.Dispatcher;\n+import com.iluwatar.store.MenuStore;\n+import com.iluwatar.store.Store;\n \n public class MenuView implements View {\n \n\ndiff --git a/flux/src/main/java/com/iluwatar/view/View.java b/flux/src/main/java/com/iluwatar/view/View.java\n--- a/flux/src/main/java/com/iluwatar/view/View.java\n+++ b/flux/src/main/java/com/iluwatar/view/View.java\n@@ -1,4 +1,6 @@\n-package com.iluwatar;\n+package com.iluwatar.view;\n+\n+import com.iluwatar.store.Store;\n \n public interface View {\n \n\ndiff --git a/flux/src/test/java/com/iluwatar/AppTest.java b/flux/src/test/java/com/iluwatar/AppTest.java\n--- a/flux/src/test/java/com/iluwatar/AppTest.java\n+++ b/flux/src/test/java/com/iluwatar/AppTest.java\n@@ -2,6 +2,8 @@\n \n import org.junit.Test;\n \n+import com.iluwatar.app.App;\n+\n public class AppTest {\n \t\n \t@Test",
    "output": "Organize to packages."
  },
  {
    "input": "diff --git a/flux/src/main/java/com/iluwatar/App.java b/flux/src/main/java/com/iluwatar/App.java\n--- a/flux/src/main/java/com/iluwatar/App.java\n+++ b/flux/src/main/java/com/iluwatar/App.java\n@@ -3,6 +3,22 @@\n public class App {\n \t\n     public static void main( String[] args ) {\n-        System.out.println( \"Hello World!\" );\n+    \t// initialize\n+    \tMenuStore menuStore = new MenuStore();\n+    \tDispatcher.getInstance().registerStore(menuStore);\n+    \tContentStore contentStore = new ContentStore();\n+    \tDispatcher.getInstance().registerStore(contentStore);\n+    \tMenuView menuView = new MenuView();\n+    \tmenuStore.registerView(menuView);\n+    \tContentView contentView = new ContentView();\n+    \tcontentStore.registerView(contentView);\n+    \t\n+    \t// render initial view\n+    \tmenuView.render();\n+    \tcontentView.render();\n+    \t\n+    \t// user clicks another menu item\n+    \t// this triggers action dispatching and eventually causes views to render with new content\n+    \tmenuView.itemClicked(MenuItem.COMPANY);\n     }\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/Content.java b/flux/src/main/java/com/iluwatar/Content.java\n--- a/flux/src/main/java/com/iluwatar/Content.java\n+++ b/flux/src/main/java/com/iluwatar/Content.java\n@@ -2,6 +2,16 @@\n \n public enum Content {\n \t\n-\tPRODUCTS, COMPANY;\n+\tPRODUCTS(\"Products - This page lists the company's products.\"), COMPANY(\"Company - This page displays information about the company.\");\n+\t\n+\tprivate String title;\n \n+\tprivate Content(String title) {\n+\t\tthis.title = title;\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn title;\n+\t}\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/ContentStore.java b/flux/src/main/java/com/iluwatar/ContentStore.java\n--- a/flux/src/main/java/com/iluwatar/ContentStore.java\n+++ b/flux/src/main/java/com/iluwatar/ContentStore.java\n@@ -1,11 +1,19 @@\n package com.iluwatar;\n \n-public class ContentStore implements Store {\n+public class ContentStore extends Store {\n+\n+\tprivate Content content = Content.PRODUCTS;\n \n \t@Override\n \tpublic void onAction(Action action) {\n-\t\t// TODO Auto-generated method stub\n-\n+\t\tif (action.getType().equals(ActionType.CONTENT_CHANGED)) {\n+\t\t\tContentAction contentAction = (ContentAction) action;\n+\t\t\tcontent = contentAction.getContent();\n+\t\t\tnotifyChange();\n+\t\t}\n+\t}\n+\t\n+\tpublic Content getContent() {\n+\t\treturn content;\n \t}\n-\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/ContentView.java b/flux/src/main/java/com/iluwatar/ContentView.java\n--- a/flux/src/main/java/com/iluwatar/ContentView.java\n+++ b/flux/src/main/java/com/iluwatar/ContentView.java\n@@ -2,10 +2,17 @@\n \n public class ContentView implements View {\n \n+\tprivate Content content = Content.PRODUCTS;\n+\n \t@Override\n \tpublic void storeChanged(Store store) {\n-\t\t// TODO Auto-generated method stub\n-\n+\t\tContentStore contentStore = (ContentStore) store;\n+\t\tcontent = contentStore.getContent();\n+\t\trender();\n \t}\n \n+\t@Override\n+\tpublic void render() {\n+\t\tSystem.out.println(content.toString());\n+\t}\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/Dispatcher.java b/flux/src/main/java/com/iluwatar/Dispatcher.java\n--- a/flux/src/main/java/com/iluwatar/Dispatcher.java\n+++ b/flux/src/main/java/com/iluwatar/Dispatcher.java\n@@ -12,7 +12,7 @@ public class Dispatcher {\n \tprivate Dispatcher() {\t\n \t}\n \n-\tpublic Dispatcher getInstance() {\n+\tpublic static Dispatcher getInstance() {\n \t\treturn instance;\n \t}\n \t\n@@ -21,6 +21,20 @@ public void registerStore(Store store) {\n \t}\n \t\n \tpublic void menuItemSelected(MenuItem menuItem) {\n-\t\t\n+\t\tdispatchAction(new MenuAction(menuItem));\n+\t\tswitch (menuItem) {\n+\t\tcase HOME:\n+\t\tcase PRODUCTS:\n+\t\tdefault:\n+\t\t\tdispatchAction(new ContentAction(Content.PRODUCTS));\n+\t\t\tbreak;\n+\t\tcase COMPANY:\n+\t\t\tdispatchAction(new ContentAction(Content.COMPANY));\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\t\n+\tprivate void dispatchAction(Action action) {\n+\t\tstores.stream().forEach((store) -> store.onAction(action));\n \t}\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/MenuItem.java b/flux/src/main/java/com/iluwatar/MenuItem.java\n--- a/flux/src/main/java/com/iluwatar/MenuItem.java\n+++ b/flux/src/main/java/com/iluwatar/MenuItem.java\n@@ -2,6 +2,16 @@\n \n public enum MenuItem {\n \t\n-\tHOME, PRODUCTS, COMPANY;\n+\tHOME(\"Home\"), PRODUCTS(\"Products\"), COMPANY(\"Company\");\n+\t\n+\tprivate String title;\n \n+\tMenuItem(String title) {\n+\t\tthis.title = title;\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn title;\n+\t}\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/MenuStore.java b/flux/src/main/java/com/iluwatar/MenuStore.java\n--- a/flux/src/main/java/com/iluwatar/MenuStore.java\n+++ b/flux/src/main/java/com/iluwatar/MenuStore.java\n@@ -1,11 +1,19 @@\n package com.iluwatar;\n \n-public class MenuStore implements Store {\n+public class MenuStore extends Store {\n \n+\tprivate MenuItem selected = MenuItem.HOME;\n+\t\n \t@Override\n \tpublic void onAction(Action action) {\n-\t\t// TODO Auto-generated method stub\n-\n+\t\tif (action.getType().equals(ActionType.MENU_ITEM_SELECTED)) {\n+\t\t\tMenuAction menuAction = (MenuAction) action;\n+\t\t\tselected = menuAction.getMenuItem();\n+\t\t\tnotifyChange();\n+\t\t}\n+\t}\n+\t\n+\tpublic MenuItem getSelected() {\n+\t\treturn selected;\n \t}\n-\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/MenuView.java b/flux/src/main/java/com/iluwatar/MenuView.java\n--- a/flux/src/main/java/com/iluwatar/MenuView.java\n+++ b/flux/src/main/java/com/iluwatar/MenuView.java\n@@ -2,10 +2,27 @@\n \n public class MenuView implements View {\n \n+\tprivate MenuItem selected = MenuItem.HOME;\n+\t\n \t@Override\n \tpublic void storeChanged(Store store) {\n-\t\t// TODO Auto-generated method stub\n-\n+\t\tMenuStore menuStore = (MenuStore) store;\n+\t\tselected = menuStore.getSelected();\n+\t\trender();\n \t}\n \n+\t@Override\n+\tpublic void render() {\n+\t\tfor (MenuItem item: MenuItem.values()) {\n+\t\t\tif (selected.equals(item)) {\n+\t\t\t\tSystem.out.println(String.format(\"* %s\", item.toString()));\n+\t\t\t} else {\n+\t\t\t\tSystem.out.println(item.toString());\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tpublic void itemClicked(MenuItem item) {\n+\t\tDispatcher.getInstance().menuItemSelected(item);\n+\t}\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/Store.java b/flux/src/main/java/com/iluwatar/Store.java\n--- a/flux/src/main/java/com/iluwatar/Store.java\n+++ b/flux/src/main/java/com/iluwatar/Store.java\n@@ -1,7 +1,19 @@\n package com.iluwatar;\n \n-public interface Store {\n+import java.util.LinkedList;\n+import java.util.List;\n \n-\tpublic void onAction(Action action);\n+public abstract class Store {\n \t\n+\tprivate List<View> views = new LinkedList<>();\n+\t\n+\tpublic abstract void onAction(Action action);\n+\n+\tpublic void registerView(View view) {\n+\t\tviews.add(view);\n+\t}\n+\t\n+\tprotected void notifyChange() {\n+\t\tviews.stream().forEach((view) -> view.storeChanged(this));\n+\t}\n }\n\ndiff --git a/flux/src/main/java/com/iluwatar/View.java b/flux/src/main/java/com/iluwatar/View.java\n--- a/flux/src/main/java/com/iluwatar/View.java\n+++ b/flux/src/main/java/com/iluwatar/View.java\n@@ -3,5 +3,6 @@\n public interface View {\n \n \tpublic void storeChanged(Store store);\n-\t\n+\n+\tpublic void render();\n }",
    "output": "Finished the Flux example."
  },
  {
    "input": "diff --git a/flux/src/main/java/com/iluwatar/App.java b/flux/src/main/java/com/iluwatar/App.java\n--- a/flux/src/main/java/com/iluwatar/App.java\n+++ b/flux/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args )\n+    {\n+        System.out.println( \"Hello World!\" );\n+    }\n+}\n\ndiff --git a/flux/src/test/java/com/iluwatar/AppTest.java b/flux/src/test/java/com/iluwatar/AppTest.java\n--- a/flux/src/test/java/com/iluwatar/AppTest.java\n+++ b/flux/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Skeleton for Flux pattern."
  },
  {
    "input": "diff --git a/model-view-controller/src/main/java/com/iluwatar/App.java b/model-view-controller/src/main/java/com/iluwatar/App.java\n--- a/model-view-controller/src/main/java/com/iluwatar/App.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/App.java\n@@ -3,6 +3,17 @@\n public class App {\n \t\n     public static void main( String[] args ) {\n-        System.out.println( \"Hello World!\" );\n+    \t// create model, view and controller\n+    \tGiantModel giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);\n+    \tGiantView view = new GiantView();\n+    \tGiantController controller = new GiantController(giant, view);\n+    \t// initial display\n+    \tcontroller.updateView();\n+    \t// controller receives some interactions that affect the giant\n+    \tcontroller.setHealth(Health.WOUNDED);\n+    \tcontroller.setNourishment(Nourishment.HUNGRY);\n+    \tcontroller.setFatigue(Fatigue.TIRED);\n+    \t// redisplay\n+    \tcontroller.updateView();\n     }\n }\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/Fatigue.java b/model-view-controller/src/main/java/com/iluwatar/Fatigue.java\n--- a/model-view-controller/src/main/java/com/iluwatar/Fatigue.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/Fatigue.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+public enum Fatigue {\n+\n+\tALERT(\"alert\"), TIRED(\"tired\"), SLEEPING(\"sleeping\");\n+\t\n+\tprivate String title;\n+\t\n+\tFatigue(String title) {\n+\t\tthis.title = title;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn title;\n+\t}\t\n+}\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/GiantController.java b/model-view-controller/src/main/java/com/iluwatar/GiantController.java\n--- a/model-view-controller/src/main/java/com/iluwatar/GiantController.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/GiantController.java\n@@ -0,0 +1,40 @@\n+package com.iluwatar;\n+\n+public class GiantController {\n+\n+\tprivate GiantModel giant;\n+\tprivate GiantView view;\n+\n+\tpublic GiantController(GiantModel giant, GiantView view) {\n+\t\tthis.giant = giant;\n+\t\tthis.view = view;\n+\t}\n+\t\n+\tpublic Health getHealth() {\n+\t\treturn giant.getHealth();\n+\t}\n+\n+\tpublic void setHealth(Health health) {\n+\t\tthis.giant.setHealth(health);\n+\t}\n+\n+\tpublic Fatigue getFatigue() {\n+\t\treturn giant.getFatigue();\n+\t}\n+\n+\tpublic void setFatigue(Fatigue fatigue) {\n+\t\tthis.giant.setFatigue(fatigue);\n+\t}\n+\n+\tpublic Nourishment getNourishment() {\n+\t\treturn giant.getNourishment();\n+\t}\n+\n+\tpublic void setNourishment(Nourishment nourishment) {\n+\t\tthis.giant.setNourishment(nourishment);\n+\t}\n+\t\n+\tpublic void updateView() {\n+\t\tthis.view.displayGiant(giant);\n+\t}\n+}\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/GiantModel.java b/model-view-controller/src/main/java/com/iluwatar/GiantModel.java\n--- a/model-view-controller/src/main/java/com/iluwatar/GiantModel.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/GiantModel.java\n@@ -0,0 +1,43 @@\n+package com.iluwatar;\n+\n+public class GiantModel {\n+\t\n+\tprivate Health health;\n+\tprivate Fatigue fatigue;\n+\tprivate Nourishment nourishment;\n+\n+\tGiantModel(Health health, Fatigue fatigue, Nourishment nourishment) {\n+\t\tthis.health = health;\n+\t\tthis.fatigue = fatigue;\n+\t\tthis.nourishment = nourishment;\t\n+\t}\n+\n+\tpublic Health getHealth() {\n+\t\treturn health;\n+\t}\n+\n+\tpublic void setHealth(Health health) {\n+\t\tthis.health = health;\n+\t}\n+\n+\tpublic Fatigue getFatigue() {\n+\t\treturn fatigue;\n+\t}\n+\n+\tpublic void setFatigue(Fatigue fatigue) {\n+\t\tthis.fatigue = fatigue;\n+\t}\n+\n+\tpublic Nourishment getNourishment() {\n+\t\treturn nourishment;\n+\t}\n+\n+\tpublic void setNourishment(Nourishment nourishment) {\n+\t\tthis.nourishment = nourishment;\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"The giant looks %s, %s and %s.\", health, fatigue, nourishment);\n+\t}\n+}\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/GiantView.java b/model-view-controller/src/main/java/com/iluwatar/GiantView.java\n--- a/model-view-controller/src/main/java/com/iluwatar/GiantView.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/GiantView.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class GiantView {\n+\n+\tpublic void displayGiant(GiantModel giant) {\n+\t\tSystem.out.println(giant);\n+\t}\n+}\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/Health.java b/model-view-controller/src/main/java/com/iluwatar/Health.java\n--- a/model-view-controller/src/main/java/com/iluwatar/Health.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/Health.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+public enum Health {\n+\t\n+\tHEALTHY(\"healthy\"), WOUNDED(\"wounded\"), DEAD(\"dead\");\n+\t\n+\tprivate String title;\n+\t\n+\tHealth(String title) {\n+\t\tthis.title = title;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn title;\n+\t}\n+}\n\ndiff --git a/model-view-controller/src/main/java/com/iluwatar/Nourishment.java b/model-view-controller/src/main/java/com/iluwatar/Nourishment.java\n--- a/model-view-controller/src/main/java/com/iluwatar/Nourishment.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/Nourishment.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+public enum Nourishment {\n+\n+\tSATURATED(\"saturated\"), HUNGRY(\"hungry\"), STARVING(\"starving\");\n+\t\n+\tprivate String title;\n+\t\n+\tNourishment(String title) {\n+\t\tthis.title = title;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn title;\n+\t}\t\n+}",
    "output": "Completed MVC example code."
  },
  {
    "input": "diff --git a/model-view-controller/src/main/java/com/iluwatar/App.java b/model-view-controller/src/main/java/com/iluwatar/App.java\n--- a/model-view-controller/src/main/java/com/iluwatar/App.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+        System.out.println( \"Hello World!\" );\n+    }\n+}\n\ndiff --git a/model-view-controller/src/test/java/com/iluwatar/AppTest.java b/model-view-controller/src/test/java/com/iluwatar/AppTest.java\n--- a/model-view-controller/src/test/java/com/iluwatar/AppTest.java\n+++ b/model-view-controller/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for MVC."
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/generic/GHobbits.java b/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n--- a/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n+++ b/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n@@ -4,7 +4,7 @@\n \n public class GHobbits implements Race {\n     @Override\n-    public void update(GWeather o, WeatherType weatherType) {\n+    public void update(GWeather weather, WeatherType weatherType) {\n         switch (weatherType) {\n             case COLD:\n                 System.out.println(\"The hobbits are shivering in the cold weather.\");",
    "output": "Upgrade GHobbits.java Make GWeather argument more clear."
  },
  {
    "input": "diff --git a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n@@ -1,7 +1,10 @@\n package com.iluwatar;\n \n+import java.io.File;\n import java.io.IOException;\n \n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n \n \n@@ -12,4 +15,13 @@ public void test() throws ClassNotFoundException, IOException {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}\n+\t\n+\t@Before\n+\t@After\n+\tpublic void cleanup() {\n+\t\tFile file1 = new File(\"fish1.out\");\n+\t\tfile1.delete();\n+\t\tFile file2 = new File(\"fish2.out\");\n+\t\tfile2.delete();\n+\t}\t\n }",
    "output": "Add test cleanup."
  },
  {
    "input": "diff --git a/tolerant-reader/src/main/java/com/iluwatar/App.java b/tolerant-reader/src/main/java/com/iluwatar/App.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/App.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/App.java\n@@ -1,7 +1,19 @@\n package com.iluwatar;\n \n-public class App \n-{\n-    public static void main( String[] args ) {\n+import java.io.IOException;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) throws IOException, ClassNotFoundException {\n+    \tRainbowFish fishV1 = new RainbowFish(\"Zed\", 10, 11, 12);\n+    \tRainbowFishSerializer.write(fishV1, \"fish1.out\");\n+    \tRainbowFish deserializedFishV1 = RainbowFishSerializer.read(\"fish1.out\");\n+    \tSystem.out.println(String.format(\"deserializedFishV1 name=%s age=%d length=%d weight=%d\", deserializedFishV1.getName(), \n+    \t\t\tdeserializedFishV1.getAge(), deserializedFishV1.getLengthMeters(), deserializedFishV1.getWeightTons()));\n+    \tRainbowFishV2 fishV2 = new RainbowFishV2(\"Scar\", 5, 12, 15, true, true, true);\n+    \tRainbowFishSerializer.write(fishV2, \"fish2.out\");\n+    \tRainbowFish deserializedFishV2 = RainbowFishSerializer.read(\"fish2.out\");\n+    \tSystem.out.println(String.format(\"deserializedFishV2 name=%s age=%d length=%d weight=%d\", deserializedFishV2.getName(), \n+    \t\t\tdeserializedFishV2.getAge(), deserializedFishV2.getLengthMeters(), deserializedFishV2.getWeightTons()));\n     }\n }\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java\n@@ -11,28 +11,27 @@ public class RainbowFish implements Serializable {\n \tprivate int lengthMeters;\n \tprivate int weightTons;\n \t\n+\tpublic RainbowFish(String name, int age, int lengthMeters, int weightTons) {\n+\t\tthis.name = name;\n+\t\tthis.age = age;\n+\t\tthis.lengthMeters = lengthMeters;\n+\t\tthis.weightTons = weightTons;\n+\t}\n+\t\n \tpublic String getName() {\n \t\treturn name;\n \t}\n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n+\n \tpublic int getAge() {\n \t\treturn age;\n \t}\n-\tpublic void setAge(int age) {\n-\t\tthis.age = age;\n-\t}\n+\n \tpublic int getLengthMeters() {\n \t\treturn lengthMeters;\n \t}\n-\tpublic void setLengthMeters(int lengthMeters) {\n-\t\tthis.lengthMeters = lengthMeters;\n-\t}\n+\n \tpublic int getWeightTons() {\n \t\treturn weightTons;\n \t}\n-\tpublic void setWeightTons(int weightTons) {\n-\t\tthis.weightTons = weightTons;\n-\t}\n+\n }\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n@@ -1,30 +1,39 @@\n package com.iluwatar;\n \n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.HashMap;\n import java.util.Map;\n \n public class RainbowFishSerializer {\n \n-\tpublic void write(RainbowFish rainbowFish, String filename) {\n+\tpublic static void write(RainbowFish rainbowFish, String filename) throws IOException {\n \t\tMap<String, String> map = new HashMap<>();\n \t\tmap.put(\"name\", rainbowFish.getName());\n \t\tmap.put(\"age\", String.format(\"%d\", rainbowFish.getAge()));\n \t\tmap.put(\"lengthMeters\", String.format(\"%d\", rainbowFish.getLengthMeters()));\n \t\tmap.put(\"weightTons\", String.format(\"%d\", rainbowFish.getWeightTons()));\n-\t\ttry {\n-\t\t\tFileOutputStream fileOut = new FileOutputStream(\"fish.ser\");\n-\t\t\tObjectOutputStream objOut = new ObjectOutputStream(fileOut);\n-\t\t\tobjOut.writeObject(map);\n-\t\t\tobjOut.close();\n-\t\t\tfileOut.close();\n-\t\t} catch (IOException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+\t\tFileOutputStream fileOut = new FileOutputStream(filename);\n+\t\tObjectOutputStream objOut = new ObjectOutputStream(fileOut);\n+\t\tobjOut.writeObject(map);\n+\t\tobjOut.close();\n+\t\tfileOut.close();\n \t}\n \t\n-//\tpublic RainbowFish read(String filename) {\n-//\t}\n+\tpublic static RainbowFish read(String filename) throws IOException, ClassNotFoundException {\n+\t\tMap<String, String> map = null;\n+\t\tFileInputStream fileIn = new FileInputStream(filename);\n+\t\tObjectInputStream objIn = new ObjectInputStream(fileIn);\n+\t\tmap = (Map<String, String>) objIn.readObject();\n+\t\tobjIn.close();\n+\t\tfileIn.close();\n+\t\treturn new RainbowFish(map.get(\"name\"), \n+\t\t\t\tInteger.parseInt(map.get(\"age\")), \n+\t\t\t\tInteger.parseInt(map.get(\"lengthMeters\")),\n+\t\t\t\tInteger.parseInt(map.get(\"weightTons\")));\n+\t}\n }\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java\n@@ -1,9 +1,33 @@\n package com.iluwatar;\n \n public class RainbowFishV2 extends RainbowFish {\n+\n+\tprivate static final long serialVersionUID = 1L;\n \t\n \tprivate boolean sleeping;\n \tprivate boolean hungry;\n \tprivate boolean angry;\n \n+\tpublic RainbowFishV2(String name, int age, int lengthMeters, int weightTons) {\n+\t\tsuper(name, age, lengthMeters, weightTons);\n+\t}\n+\t\n+\tpublic RainbowFishV2(String name, int age, int lengthMeters, int weightTons, boolean sleeping, boolean hungry, boolean angry) {\n+\t\tthis(name, age, lengthMeters, weightTons);\n+\t\tthis.sleeping = sleeping;\n+\t\tthis.hungry = hungry;\n+\t\tthis.angry = angry;\n+\t}\n+\t\n+\tpublic boolean getSleeping() {\n+\t\treturn sleeping;\n+\t}\n+\t\n+\tpublic boolean getHungry() {\n+\t\treturn hungry;\n+\t}\n+\t\n+\tpublic boolean getAngry() {\n+\t\treturn angry;\n+\t}\n }\n\ndiff --git a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n@@ -1,12 +1,14 @@\n package com.iluwatar;\n \n+import java.io.IOException;\n+\n import org.junit.Test;\n \n \n public class AppTest {\n \t\n \t@Test\n-\tpublic void test() {\n+\tpublic void test() throws ClassNotFoundException, IOException {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}",
    "output": "Completed Tolerant Reader example."
  },
  {
    "input": "diff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java\n@@ -0,0 +1,38 @@\n+package com.iluwatar;\n+\n+import java.io.Serializable;\n+\n+public class RainbowFish implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate String name;\n+\tprivate int age;\n+\tprivate int lengthMeters;\n+\tprivate int weightTons;\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\tpublic int getAge() {\n+\t\treturn age;\n+\t}\n+\tpublic void setAge(int age) {\n+\t\tthis.age = age;\n+\t}\n+\tpublic int getLengthMeters() {\n+\t\treturn lengthMeters;\n+\t}\n+\tpublic void setLengthMeters(int lengthMeters) {\n+\t\tthis.lengthMeters = lengthMeters;\n+\t}\n+\tpublic int getWeightTons() {\n+\t\treturn weightTons;\n+\t}\n+\tpublic void setWeightTons(int weightTons) {\n+\t\tthis.weightTons = weightTons;\n+\t}\n+}\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n@@ -0,0 +1,30 @@\n+package com.iluwatar;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class RainbowFishSerializer {\n+\n+\tpublic void write(RainbowFish rainbowFish, String filename) {\n+\t\tMap<String, String> map = new HashMap<>();\n+\t\tmap.put(\"name\", rainbowFish.getName());\n+\t\tmap.put(\"age\", String.format(\"%d\", rainbowFish.getAge()));\n+\t\tmap.put(\"lengthMeters\", String.format(\"%d\", rainbowFish.getLengthMeters()));\n+\t\tmap.put(\"weightTons\", String.format(\"%d\", rainbowFish.getWeightTons()));\n+\t\ttry {\n+\t\t\tFileOutputStream fileOut = new FileOutputStream(\"fish.ser\");\n+\t\t\tObjectOutputStream objOut = new ObjectOutputStream(fileOut);\n+\t\t\tobjOut.writeObject(map);\n+\t\t\tobjOut.close();\n+\t\t\tfileOut.close();\n+\t\t} catch (IOException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\t\n+//\tpublic RainbowFish read(String filename) {\n+//\t}\n+}\n\ndiff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishV2.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+public class RainbowFishV2 extends RainbowFish {\n+\t\n+\tprivate boolean sleeping;\n+\tprivate boolean hungry;\n+\tprivate boolean angry;\n+\n+}",
    "output": "Work on serializer."
  },
  {
    "input": "diff --git a/tolerant-reader/src/main/java/com/iluwatar/App.java b/tolerant-reader/src/main/java/com/iluwatar/App.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/App.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App \n+{\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Tolerant Reader."
  },
  {
    "input": "diff --git a/null-object/src/main/java/com/iluwatar/App.java b/null-object/src/main/java/com/iluwatar/App.java\n--- a/null-object/src/main/java/com/iluwatar/App.java\n+++ b/null-object/src/main/java/com/iluwatar/App.java\n@@ -18,14 +18,14 @@ public static void main( String[] args ) {\n     \tNode root = new NodeImpl(\"1\",\n     \t\t\tnew NodeImpl(\"11\",\n     \t\t\t\t\tnew NodeImpl(\"111\",\n-    \t\t\t\t\t\t\tnew NullNode(),\n-    \t\t\t\t\t\t\tnew NullNode()),\n-    \t\t\t\t\tnew NullNode()), \n+    \t\t\t\t\t\t\tNullNode.getInstance(),\n+    \t\t\t\t\t\t\tNullNode.getInstance()),\n+    \t\t\t\t\tNullNode.getInstance()), \n     \t\t\tnew NodeImpl(\"12\",\n-    \t\t\t\t\tnew NullNode(),\n+    \t\t\t\t\tNullNode.getInstance(),\n     \t\t\t\t\tnew NodeImpl(\"122\",\n-    \t\t\t\t\t\t\tnew NullNode(),\n-    \t\t\t\t\t\t\tnew NullNode())));\n+    \t\t\t\t\t\t\tNullNode.getInstance(),\n+    \t\t\t\t\t\t\tNullNode.getInstance())));\n \n     \troot.walk();\n     }\n\ndiff --git a/null-object/src/main/java/com/iluwatar/NullNode.java b/null-object/src/main/java/com/iluwatar/NullNode.java\n--- a/null-object/src/main/java/com/iluwatar/NullNode.java\n+++ b/null-object/src/main/java/com/iluwatar/NullNode.java\n@@ -1,33 +1,44 @@\n-package com.iluwatar;\r\n-\r\n-/**\r\n- * \r\n- * Null Object implementation for binary tree node.\r\n- *\r\n- */\r\n-public class NullNode implements Node {\r\n-\r\n-\t@Override\r\n-\tpublic int getTreeSize() {\r\n-\t\treturn 0;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic Node getLeft() {\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic Node getRight() {\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic String getName() {\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void walk() {\r\n-\t}\r\n-}\r\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Null Object implementation for binary tree node.\n+ * \n+ * Implemented as Singleton, since all the NullNodes are the same.\n+ *\n+ */\n+public class NullNode implements Node {\n+\n+\tprivate static NullNode instance = new NullNode();\n+\t\n+\tprivate NullNode() {\n+\t}\n+\t\n+\tpublic static NullNode getInstance() {\n+\t\treturn instance;\n+\t}\n+\t\n+\t@Override\n+\tpublic int getTreeSize() {\n+\t\treturn 0;\n+\t}\n+\n+\t@Override\n+\tpublic Node getLeft() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic Node getRight() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void walk() {\n+\t}\n+}",
    "output": "Null object as a singleton"
  },
  {
    "input": "diff --git a/specification/src/main/java/com/iluwatar/App.java b/specification/src/main/java/com/iluwatar/App.java\n--- a/specification/src/main/java/com/iluwatar/App.java\n+++ b/specification/src/main/java/com/iluwatar/App.java\n@@ -1,6 +1,24 @@\n package com.iluwatar;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n public class App {\n     public static void main( String[] args ) {\n+    \t// initialize creatures list\n+    \tList<Creature> creatures = Arrays.asList(new Goblin(), new Octopus(), new Dragon(), new Shark(), new Troll(), new KillerBee());\n+    \t// find all walking creatures\n+    \tSystem.out.println(\"Find all walking creatures\");\n+    \tList<Creature> walkingCreatures = creatures.stream().filter(new MovementSelector(Movement.WALKING)).collect(Collectors.toList());\n+    \twalkingCreatures.stream().forEach(System.out::println);\n+    \t// find all dark creatures\n+    \tSystem.out.println(\"Find all dark creatures\");\n+    \tList<Creature> darkCreatures = creatures.stream().filter(new ColorSelector(Color.DARK)).collect(Collectors.toList());\n+    \tdarkCreatures.stream().forEach(System.out::println);\n+    \t// find all red and flying creatures\n+    \tSystem.out.println(\"Find all red and flying creatures\");\n+    \tList<Creature> redAndFlyingCreatures = creatures.stream().filter(new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING))).collect(Collectors.toList());\n+    \tredAndFlyingCreatures.stream().forEach(System.out::println);\n     }\n }",
    "output": "Implement basic selection example."
  },
  {
    "input": "diff --git a/specification/src/main/java/com/iluwatar/KillerBee.java b/specification/src/main/java/com/iluwatar/KillerBee.java\n--- a/specification/src/main/java/com/iluwatar/KillerBee.java\n+++ b/specification/src/main/java/com/iluwatar/KillerBee.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class KillerBee extends AbstractCreature {\n+\n+\tpublic KillerBee() {\n+\t\tsuper(\"KillerBee\", Size.SMALL, Movement.FLYING, Color.LIGHT);\n+\t}\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Shark.java b/specification/src/main/java/com/iluwatar/Shark.java\n--- a/specification/src/main/java/com/iluwatar/Shark.java\n+++ b/specification/src/main/java/com/iluwatar/Shark.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Shark extends AbstractCreature {\n+\n+\tpublic Shark() {\n+\t\tsuper(\"Shark\", Size.NORMAL, Movement.SWIMMING, Color.LIGHT);\n+\t}\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Troll.java b/specification/src/main/java/com/iluwatar/Troll.java\n--- a/specification/src/main/java/com/iluwatar/Troll.java\n+++ b/specification/src/main/java/com/iluwatar/Troll.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Troll extends AbstractCreature {\n+\t\n+\tpublic Troll() {\n+\t\tsuper(\"Troll\", Size.LARGE, Movement.WALKING, Color.DARK);\n+\t}\n+}",
    "output": "Add some creatures."
  },
  {
    "input": "diff --git a/specification/src/main/java/com/iluwatar/AbstractCreature.java b/specification/src/main/java/com/iluwatar/AbstractCreature.java\n--- a/specification/src/main/java/com/iluwatar/AbstractCreature.java\n+++ b/specification/src/main/java/com/iluwatar/AbstractCreature.java\n@@ -0,0 +1,41 @@\n+package com.iluwatar;\n+\n+public abstract class AbstractCreature implements Creature {\n+\n+\tprivate String name;\n+\tprivate Size size;\n+\tprivate Movement movement;\n+\tprivate Color color;\n+\n+\tpublic AbstractCreature(String name, Size size, Movement movement, Color color) {\n+\t\tthis.name = name;\n+\t\tthis.size = size;\n+\t\tthis.movement = movement;\n+\t\tthis.color = color;\n+\t}\t\n+\t\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"%s [size=%s, movement=%s, color=%s]\", name, size, movement, color);\n+\t}\n+\t\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\t@Override\n+\tpublic Size getSize() {\n+\t\treturn size;\n+\t}\n+\t\n+\t@Override\n+\tpublic Movement getMovement() {\n+\t\treturn movement;\n+\t}\n+\t\n+\t@Override\n+\tpublic Color getColor() {\n+\t\treturn color;\n+\t}\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Color.java b/specification/src/main/java/com/iluwatar/Color.java\n--- a/specification/src/main/java/com/iluwatar/Color.java\n+++ b/specification/src/main/java/com/iluwatar/Color.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+public enum Color {\n+\n+    DARK(\"dark\"), LIGHT(\"light\"), GREEN(\"green\"), RED(\"red\");\n+    \n+    private String title;\n+\n+    Color(String title) {\n+        this.title = title;\n+    }\n+\n+    @Override\n+\tpublic String toString() {\n+        return title;\n+\t}\t\t\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Creature.java b/specification/src/main/java/com/iluwatar/Creature.java\n--- a/specification/src/main/java/com/iluwatar/Creature.java\n+++ b/specification/src/main/java/com/iluwatar/Creature.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+public interface Creature {\n+\n+\tString getName();\n+\t\n+\tSize getSize();\n+\t\n+\tMovement getMovement();\n+\t\n+\tColor getColor();\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Dragon.java b/specification/src/main/java/com/iluwatar/Dragon.java\n--- a/specification/src/main/java/com/iluwatar/Dragon.java\n+++ b/specification/src/main/java/com/iluwatar/Dragon.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Dragon extends AbstractCreature {\n+\n+\tpublic Dragon() {\n+\t\tsuper(\"Dragon\", Size.LARGE, Movement.FLYING, Color.RED);\n+\t}\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Goblin.java b/specification/src/main/java/com/iluwatar/Goblin.java\n--- a/specification/src/main/java/com/iluwatar/Goblin.java\n+++ b/specification/src/main/java/com/iluwatar/Goblin.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Goblin extends AbstractCreature {\n+\n+\tpublic Goblin() {\n+\t\tsuper(\"Goblin\", Size.SMALL, Movement.WALKING, Color.GREEN);\n+\t}\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Movement.java b/specification/src/main/java/com/iluwatar/Movement.java\n--- a/specification/src/main/java/com/iluwatar/Movement.java\n+++ b/specification/src/main/java/com/iluwatar/Movement.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\n+\n+public enum Movement {\n+\n+    WALKING(\"walking\"), SWIMMING(\"swimming\"), FLYING(\"flying\");\n+    \n+    private String title;\n+\n+    Movement(String title) {\n+        this.title = title;\n+    }\n+\n+    @Override\n+\tpublic String toString() {\n+        return title;\n+\t}\t\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Octopus.java b/specification/src/main/java/com/iluwatar/Octopus.java\n--- a/specification/src/main/java/com/iluwatar/Octopus.java\n+++ b/specification/src/main/java/com/iluwatar/Octopus.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class Octopus extends AbstractCreature {\n+\n+\tpublic Octopus() {\n+\t\tsuper(\"Octopus\", Size.NORMAL, Movement.SWIMMING, Color.DARK);\n+\t}\n+}\n\ndiff --git a/specification/src/main/java/com/iluwatar/Size.java b/specification/src/main/java/com/iluwatar/Size.java\n--- a/specification/src/main/java/com/iluwatar/Size.java\n+++ b/specification/src/main/java/com/iluwatar/Size.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\n+\n+/**\n+ *\n+ * Enumeration for creature size.\n+ *\n+ */\n+public enum Size {\n+\n+    SMALL(\"small\"), NORMAL(\"normal\"), LARGE(\"large\");\n+    \n+    private String title;\n+\n+    Size(String title) {\n+        this.title = title;\n+    }\n+\n+    @Override\n+\tpublic String toString() {\n+        return title;\n+\t}\n+}",
    "output": "Create creature hierarchy."
  },
  {
    "input": "diff --git a/specification/src/main/java/com/iluwatar/App.java b/specification/src/main/java/com/iluwatar/App.java\n--- a/specification/src/main/java/com/iluwatar/App.java\n+++ b/specification/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar;\n+\n+public class App {\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/specification/src/test/java/com/iluwatar/AppTest.java b/specification/src/test/java/com/iluwatar/AppTest.java\n--- a/specification/src/test/java/com/iluwatar/AppTest.java\n+++ b/specification/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Started working on Specification pattern."
  },
  {
    "input": "diff --git a/service-layer/src/main/java/com/iluwatar/spell/SpellDaoImpl.java b/service-layer/src/main/java/com/iluwatar/spell/SpellDaoImpl.java\n--- a/service-layer/src/main/java/com/iluwatar/spell/SpellDaoImpl.java\n+++ b/service-layer/src/main/java/com/iluwatar/spell/SpellDaoImpl.java\n@@ -3,7 +3,7 @@\n import org.hibernate.Criteria;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n-import org.hibernate.criterion.Expression;\n+import org.hibernate.criterion.Restrictions;\n \n import com.iluwatar.common.DaoBaseImpl;\n \n@@ -22,7 +22,7 @@ public Spell findByName(String name) {\n \t\ttry {\n \t\t\ttx = session.beginTransaction();\n \t\t\tCriteria criteria = session.createCriteria(persistentClass);\n-\t\t\tcriteria.add(Expression.eq(\"name\", name));\n+\t\t\tcriteria.add(Restrictions.eq(\"name\", name));\n \t\t\tresult = (Spell) criteria.uniqueResult();\n \t\t\tresult.getSpellbook().getWizards().size();\n \t\t\ttx.commit();\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/spellbook/SpellbookDaoImpl.java b/service-layer/src/main/java/com/iluwatar/spellbook/SpellbookDaoImpl.java\n--- a/service-layer/src/main/java/com/iluwatar/spellbook/SpellbookDaoImpl.java\n+++ b/service-layer/src/main/java/com/iluwatar/spellbook/SpellbookDaoImpl.java\n@@ -3,7 +3,7 @@\n import org.hibernate.Criteria;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n-import org.hibernate.criterion.Expression;\n+import org.hibernate.criterion.Restrictions;\n \n import com.iluwatar.common.DaoBaseImpl;\n \n@@ -22,7 +22,7 @@ public Spellbook findByName(String name) {\n \t\ttry {\n \t\t\ttx = session.beginTransaction();\n \t\t\tCriteria criteria = session.createCriteria(persistentClass);\n-\t\t\tcriteria.add(Expression.eq(\"name\", name));\n+\t\t\tcriteria.add(Restrictions.eq(\"name\", name));\n \t\t\tresult = (Spellbook) criteria.uniqueResult();\n \t\t\tresult.getSpells().size();\n \t\t\tresult.getWizards().size();\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/wizard/WizardDaoImpl.java b/service-layer/src/main/java/com/iluwatar/wizard/WizardDaoImpl.java\n--- a/service-layer/src/main/java/com/iluwatar/wizard/WizardDaoImpl.java\n+++ b/service-layer/src/main/java/com/iluwatar/wizard/WizardDaoImpl.java\n@@ -3,7 +3,7 @@\n import org.hibernate.Criteria;\n import org.hibernate.Session;\n import org.hibernate.Transaction;\n-import org.hibernate.criterion.Expression;\n+import org.hibernate.criterion.Restrictions;\n \n import com.iluwatar.common.DaoBaseImpl;\n import com.iluwatar.spellbook.Spellbook;\n@@ -23,7 +23,7 @@ public Wizard findByName(String name) {\n \t\ttry {\n \t\t\ttx = session.beginTransaction();\n \t\t\tCriteria criteria = session.createCriteria(persistentClass);\n-\t\t\tcriteria.add(Expression.eq(\"name\", name));\n+\t\t\tcriteria.add(Restrictions.eq(\"name\", name));\n \t\t\tresult = (Wizard) criteria.uniqueResult();\n \t\t\tfor (Spellbook s: result.getSpellbooks()) {\n \t\t\t\ts.getSpells().size();",
    "output": "Replace deprecated Hibernate Expression with Restrictions."
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/App.java b/dao/src/main/java/com/iluwatar/App.java\n--- a/dao/src/main/java/com/iluwatar/App.java\n+++ b/dao/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,47 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * \r\n+ * With the DAO pattern, we can use various method calls to retrieve/add/delete/update data without directly\r\n+ * interacting with the data directly. The below example demonstrates basic operations: select, add, update, and delete.\r\n+ */\r\n+public class App {\r\n+\r\n+\tpublic static void main(String[] args) {\r\n+\r\n+\t\tCustomerDaoImpl customerDao = new CustomerDaoImpl(generateSampleCustomers());\r\n+\r\n+\t\tSystem.out.println(\"customerDao.getAllCustomers(): \" + customerDao.getAllCustomers());\r\n+\t\tSystem.out.println(\"customerDao.getCusterById(2): \" + customerDao.getCusterById(2));\r\n+\r\n+\t\tCustomer customer = new Customer(4, \"Dan\", \"Danson\");\r\n+\t\tcustomerDao.addCustomer(customer);\r\n+\r\n+\t\tSystem.out.println(\"customerDao.getAllCustomers(): \" + customerDao.getAllCustomers());\r\n+\r\n+\t\tcustomer.setFirstName(\"Daniel\");\r\n+\t\tcustomer.setLastName(\"Danielson\");\r\n+\t\tcustomerDao.updateCustomer(customer);\r\n+\r\n+\t\tSystem.out.println(\"customerDao.getAllCustomers(): \" + customerDao.getAllCustomers());\r\n+\r\n+\t\tcustomerDao.deleteCustomer(customer);\r\n+\r\n+\t\tSystem.out.println(\"customerDao.getAllCustomers(): \" + customerDao.getAllCustomers());\r\n+\t}\r\n+\r\n+\tpublic static List<Customer> generateSampleCustomers() {\r\n+\t\tCustomer customer1 = new Customer(1, \"Adam\", \"Adamson\");\r\n+\t\tCustomer customer2 = new Customer(2, \"Bob\", \"Bobson\");\r\n+\t\tCustomer customer3 = new Customer(3, \"Carl\", \"Carlson\");\r\n+\r\n+\t\tList<Customer> customers = new ArrayList<Customer>();\r\n+\t\tcustomers.add(customer1);\r\n+\t\tcustomers.add(customer2);\r\n+\t\tcustomers.add(customer3);\r\n+\t\treturn customers;\r\n+\t}\r\n+}\r\n\ndiff --git a/dao/src/main/java/com/iluwatar/Customer.java b/dao/src/main/java/com/iluwatar/Customer.java\n--- a/dao/src/main/java/com/iluwatar/Customer.java\n+++ b/dao/src/main/java/com/iluwatar/Customer.java\n@@ -0,0 +1,64 @@\n+package com.iluwatar;\n+\n+public class Customer {\n+    private int id;\n+    private String firstName;\n+    private String lastName;\n+\n+    public Customer(int id, String firstName, String lastName) {\n+        this.id = id;\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Customer{\" +\n+                \"id=\" + id +\n+                \", firstName='\" + firstName + '\\'' +\n+                \", lastName='\" + lastName + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        Customer customer = (Customer) o;\n+\n+        if (id != customer.id) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = id;\n+        return result;\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/dao/src/main/java/com/iluwatar/CustomerDao.java b/dao/src/main/java/com/iluwatar/CustomerDao.java\n--- a/dao/src/main/java/com/iluwatar/CustomerDao.java\n+++ b/dao/src/main/java/com/iluwatar/CustomerDao.java\n@@ -0,0 +1,11 @@\n+package com.iluwatar;\n+\n+import java.util.List;\n+\n+public interface CustomerDao {\n+    public List<Customer> getAllCustomers();\n+    public Customer getCusterById(int id);\n+    public void addCustomer(Customer customer);\n+    public void updateCustomer(Customer customer);\n+    public void deleteCustomer(Customer customer);\n+}\n\\ No newline at end of file\n\ndiff --git a/dao/src/main/java/com/iluwatar/CustomerDaoImpl.java b/dao/src/main/java/com/iluwatar/CustomerDaoImpl.java\n--- a/dao/src/main/java/com/iluwatar/CustomerDaoImpl.java\n+++ b/dao/src/main/java/com/iluwatar/CustomerDaoImpl.java\n@@ -0,0 +1,55 @@\n+package com.iluwatar;\n+\n+import java.util.List;\n+\n+/**\n+ * The data access object (DAO) is an object that provides an abstract interface to some type of database or other persistence mechanism.\n+ * By mapping application calls to the persistence layer, DAO provide some specific data operations without exposing details of the database.\n+ * This isolation supports the Single responsibility principle. It separates what data accesses the application needs, in terms of\n+ * domain-specific objects and data types (the public interface of the DAO), from how these needs can be satisfied with a specific DBMS,\n+ * database schema, etc.\n+ */\n+public class CustomerDaoImpl implements CustomerDao {\n+\n+    // Represents the DB structure for our example so we don't have to managed it ourselves\n+    // Note: Normally this would be in the form of an actual database and not part of the Dao Impl.\n+    private List<Customer> customers;\n+\n+    public CustomerDaoImpl(List<Customer> customers) {\n+        this.customers = customers;\n+    }\n+\n+    @Override\n+    public List<Customer> getAllCustomers() {\n+        return customers;\n+    }\n+\n+    @Override\n+    public Customer getCusterById(int id) {\n+        for (int i = 0; i < customers.size(); i++) {\n+            if (customers.get(i).getId() == id) {\n+                return customers.get(i);\n+            }\n+        }\n+        // No customer found\n+        return null;\n+    }\n+\n+    @Override\n+    public void addCustomer(Customer customer) {\n+        customers.add(customer);\n+    }\n+\n+\n+    @Override\n+    public void updateCustomer(Customer customer) {\n+        if (customers.contains(customer)) {\n+            customers.set(customers.indexOf(customer), customer);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteCustomer(Customer customer) {\n+        customers.remove(customer);\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/dao/src/test/java/com/iluwatar/AppTest.java b/dao/src/test/java/com/iluwatar/AppTest.java\n--- a/dao/src/test/java/com/iluwatar/AppTest.java\n+++ b/dao/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class AppTest {\r\n+\r\n+\t@Test\r\n+\tpublic void test() {\r\n+\t\tString[] args = {};\r\n+\t\tApp.main(args);\r\n+\t}\r\n+}\r",
    "output": "Add DAO implementation, modified readme, and added UML diagram"
  },
  {
    "input": "diff --git a/service-layer/src/main/java/com/iluwatar/App.java b/service-layer/src/main/java/com/iluwatar/App.java\n--- a/service-layer/src/main/java/com/iluwatar/App.java\n+++ b/service-layer/src/main/java/com/iluwatar/App.java\n@@ -113,5 +113,18 @@ public static void initData() {\n     }\n     \n     public static void queryData() {\n+    \tMagicService service = new MagicServiceImpl(new WizardDaoImpl(), new SpellbookDaoImpl(), new SpellDaoImpl());\n+    \tSystem.out.println(\"Enumerating all wizards\");\n+    \tfor (Wizard w: service.findAllWizards()) {\n+    \t\tSystem.out.println(w.getName());\n+    \t}\n+    \tSystem.out.println(\"Enumerating all spellbooks\");\n+    \tfor (Spellbook s: service.findAllSpellbooks()) {\n+    \t\tSystem.out.println(s.getName());\n+    \t}\n+    \tSystem.out.println(\"Enumerating all spells\");\n+    \tfor (Spell s: service.findAllSpells()) {\n+    \t\tSystem.out.println(s.getName());\n+    \t}\n     }\n }\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/MagicService.java b/service-layer/src/main/java/com/iluwatar/MagicService.java\n--- a/service-layer/src/main/java/com/iluwatar/MagicService.java\n+++ b/service-layer/src/main/java/com/iluwatar/MagicService.java\n@@ -1,6 +1,14 @@\n package com.iluwatar;\n \n+import java.util.List;\n+\n \n public interface MagicService {\n+\n+\tList<Wizard> findAllWizards();\n+\n+\tList<Spellbook> findAllSpellbooks();\n+\t\n+\tList<Spell> findAllSpells();\n \t\n }\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/MagicServiceImpl.java b/service-layer/src/main/java/com/iluwatar/MagicServiceImpl.java\n--- a/service-layer/src/main/java/com/iluwatar/MagicServiceImpl.java\n+++ b/service-layer/src/main/java/com/iluwatar/MagicServiceImpl.java\n@@ -1,5 +1,31 @@\n package com.iluwatar;\n \n+import java.util.List;\n+\n public class MagicServiceImpl implements MagicService {\n+\t\n+\tprivate WizardDao wizardDao;\n+\tprivate SpellbookDao spellbookDao;\n+\tprivate SpellDao spellDao;\n+\n+\tpublic MagicServiceImpl(WizardDao wizardDao, SpellbookDao spellbookDao, SpellDao spellDao) {\n+\t\tthis.wizardDao = wizardDao;\n+\t\tthis.spellbookDao = spellbookDao;\n+\t\tthis.spellDao = spellDao;\n+\t}\n+\n+\t@Override\n+\tpublic List<Wizard> findAllWizards() {\n+\t\treturn wizardDao.findAll();\n+\t}\n+\n+\t@Override\n+\tpublic List<Spellbook> findAllSpellbooks() {\n+\t\treturn spellbookDao.findAll();\n+\t}\n \n+\t@Override\n+\tpublic List<Spell> findAllSpells() {\n+\t\treturn spellDao.findAll();\n+\t}\n }\n\ndiff --git a/service-layer/src/main/java/com/iluwatar/Wizard.java b/service-layer/src/main/java/com/iluwatar/Wizard.java\n--- a/service-layer/src/main/java/com/iluwatar/Wizard.java\n+++ b/service-layer/src/main/java/com/iluwatar/Wizard.java\n@@ -42,12 +42,12 @@ public void setId(Long id) {\n \t@ManyToMany(cascade = CascadeType.ALL)\n \tprivate Set<Spellbook> spellbooks;\n \t\n-\tpublic String getFirstName() {\n+\tpublic String getName() {\n \t\treturn name;\n \t}\n \n-\tpublic void setFirstName(String firstName) {\n-\t\tthis.name = firstName;\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n \t}\n \n \tpublic Set<Spellbook> getSpellbooks() {",
    "output": "Add findAll methods to service level."
  },
  {
    "input": "diff --git a/service-layer/src/test/java/com/iluwatar/AppTest.java b/service-layer/src/test/java/com/iluwatar/AppTest.java\n--- a/service-layer/src/test/java/com/iluwatar/AppTest.java\n+++ b/service-layer/src/test/java/com/iluwatar/AppTest.java\n@@ -1,4 +1,12 @@\n package com.iluwatar;\n \n+import org.junit.Test;\n+\n public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n }",
    "output": "Add unit test."
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/App.java b/dao/src/main/java/com/iluwatar/App.java\n--- a/dao/src/main/java/com/iluwatar/App.java\n+++ b/dao/src/main/java/com/iluwatar/App.java\n@@ -1,6 +1,5 @@\n package com.iluwatar;\n \n-import java.util.List;\n \n /**\n  * \n@@ -94,22 +93,22 @@ public static void initData() {\n     \tWizardDao wizardDao = new WizardDaoImpl();\n     \tWizard wizard1 = new Wizard(\"Aderlard Boud\");\n     \twizardDao.persist(wizard1);\n-//    \twizard1.addSpellbook(spellbook1);\n-//    \twizard1.addSpellbook(spellbook2);\n+    \twizard1.addSpellbook(spellbookDao.findByName(\"Book of Orgymon\"));\n+    \twizard1.addSpellbook(spellbookDao.findByName(\"Book of Aras\"));\n     \twizardDao.merge(wizard1);\n     \tWizard wizard2 = new Wizard(\"Anaxis Bajraktari\");\n     \twizardDao.persist(wizard2);\n-//    \twizard2.addSpellbook(spellbook3);\n-//    \twizard2.addSpellbook(spellbook4);\n+    \twizard2.addSpellbook(spellbookDao.findByName(\"Book of Kritior\"));\n+    \twizard2.addSpellbook(spellbookDao.findByName(\"Book of Tamaex\"));\n     \twizardDao.merge(wizard2);\n     \tWizard wizard3 = new Wizard(\"Xuban Munoa\");\n     \twizardDao.persist(wizard3);\n-//    \twizard3.addSpellbook(spellbook5);\n-//    \twizard3.addSpellbook(spellbook6);\n+    \twizard3.addSpellbook(spellbookDao.findByName(\"Book of Idores\"));\n+    \twizard3.addSpellbook(spellbookDao.findByName(\"Book of Opaen\"));\n     \twizardDao.merge(wizard3);\n     \tWizard wizard4 = new Wizard(\"Blasius Dehooge\");\n     \twizardDao.persist(wizard4);\n-//    \twizard4.addSpellbook(spellbook7);\n+    \twizard4.addSpellbook(spellbookDao.findByName(\"Book of Kihione\"));\n     \twizardDao.merge(wizard4);\n     }\n     \n\ndiff --git a/dao/src/main/java/com/iluwatar/DaoBaseImpl.java b/dao/src/main/java/com/iluwatar/DaoBaseImpl.java\n--- a/dao/src/main/java/com/iluwatar/DaoBaseImpl.java\n+++ b/dao/src/main/java/com/iluwatar/DaoBaseImpl.java\n@@ -5,9 +5,7 @@\n \n import org.hibernate.Criteria;\n import org.hibernate.Session;\n-import org.hibernate.SessionFactory;\n import org.hibernate.Transaction;\n-import org.hibernate.cfg.Configuration;\n import org.hibernate.criterion.Restrictions;\n \n public abstract class DaoBaseImpl<E extends BaseEntity> implements Dao<E> {\n@@ -16,7 +14,7 @@ public abstract class DaoBaseImpl<E extends BaseEntity> implements Dao<E> {\n \tprotected Class<E> persistentClass = (Class<E>) ((ParameterizedType) getClass()\n             .getGenericSuperclass()).getActualTypeArguments()[0];\n \n-\tprivate Session getSession() {\n+\tprotected Session getSession() {\n \t\treturn HibernateUtil.getSessionFactory().openSession();\n \t}\n \t\n\ndiff --git a/dao/src/main/java/com/iluwatar/SpellDao.java b/dao/src/main/java/com/iluwatar/SpellDao.java\n--- a/dao/src/main/java/com/iluwatar/SpellDao.java\n+++ b/dao/src/main/java/com/iluwatar/SpellDao.java\n@@ -1,5 +1,7 @@\n package com.iluwatar;\n \n public interface SpellDao extends Dao<Spell> {\n+\t\n+\tSpell findByName(String name);\n \n }\n\ndiff --git a/dao/src/main/java/com/iluwatar/SpellDaoImpl.java b/dao/src/main/java/com/iluwatar/SpellDaoImpl.java\n--- a/dao/src/main/java/com/iluwatar/SpellDaoImpl.java\n+++ b/dao/src/main/java/com/iluwatar/SpellDaoImpl.java\n@@ -1,5 +1,31 @@\n package com.iluwatar;\n \n+import org.hibernate.Criteria;\n+import org.hibernate.Session;\n+import org.hibernate.Transaction;\n+import org.hibernate.criterion.Expression;\n+\n public class SpellDaoImpl extends DaoBaseImpl<Spell> implements SpellDao {\n \n+\t@Override\n+\tpublic Spell findByName(String name) {\n+\t\tSession session = getSession();\n+\t\tTransaction tx = null;\n+\t\tSpell result = null;\n+\t\ttry {\n+\t\t\ttx = session.beginTransaction();\n+\t\t\tCriteria criteria = session.createCriteria(persistentClass);\n+\t\t\tcriteria.add(Expression.eq(\"name\", name));\n+\t\t\tresult = (Spell) criteria.uniqueResult();\n+\t\t\ttx.commit();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tif (tx!=null) tx.rollback();\n+\t\t\tthrow e;\n+\t\t}\n+\t\tfinally {\n+\t\t\tsession.close();\n+\t\t}\t\t\n+\t\treturn result;\n+\t}\n }\n\ndiff --git a/dao/src/main/java/com/iluwatar/SpellbookDao.java b/dao/src/main/java/com/iluwatar/SpellbookDao.java\n--- a/dao/src/main/java/com/iluwatar/SpellbookDao.java\n+++ b/dao/src/main/java/com/iluwatar/SpellbookDao.java\n@@ -1,5 +1,7 @@\n package com.iluwatar;\n \n public interface SpellbookDao extends Dao<Spellbook> {\n+\t\n+\tSpellbook findByName(String name);\n \n }\n\ndiff --git a/dao/src/main/java/com/iluwatar/SpellbookDaoImpl.java b/dao/src/main/java/com/iluwatar/SpellbookDaoImpl.java\n--- a/dao/src/main/java/com/iluwatar/SpellbookDaoImpl.java\n+++ b/dao/src/main/java/com/iluwatar/SpellbookDaoImpl.java\n@@ -1,5 +1,34 @@\n package com.iluwatar;\n \n+import org.hibernate.Criteria;\n+import org.hibernate.Session;\n+import org.hibernate.Transaction;\n+import org.hibernate.criterion.Expression;\n+\n public class SpellbookDaoImpl extends DaoBaseImpl<Spellbook> implements SpellbookDao {\n \n+\t@Override\n+\tpublic Spellbook findByName(String name) {\n+\t\tSession session = getSession();\n+\t\tTransaction tx = null;\n+\t\tSpellbook result = null;\n+\t\ttry {\n+\t\t\ttx = session.beginTransaction();\n+\t\t\tCriteria criteria = session.createCriteria(persistentClass);\n+\t\t\tcriteria.add(Expression.eq(\"name\", name));\n+\t\t\tresult = (Spellbook) criteria.uniqueResult();\n+\t\t\tresult.getSpells().size();\n+\t\t\tresult.getWizards().size();\n+\t\t\ttx.commit();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tif (tx!=null) tx.rollback();\n+\t\t\tthrow e;\n+\t\t}\n+\t\tfinally {\n+\t\t\tsession.close();\n+\t\t}\t\t\n+\t\treturn result;\n+\t}\n+\n }\n\ndiff --git a/dao/src/main/java/com/iluwatar/WizardDao.java b/dao/src/main/java/com/iluwatar/WizardDao.java\n--- a/dao/src/main/java/com/iluwatar/WizardDao.java\n+++ b/dao/src/main/java/com/iluwatar/WizardDao.java\n@@ -1,5 +1,7 @@\n package com.iluwatar;\n \n public interface WizardDao extends Dao<Wizard> {\n+\t\n+\tWizard findByName(String name);\n \n }\n\ndiff --git a/dao/src/main/java/com/iluwatar/WizardDaoImpl.java b/dao/src/main/java/com/iluwatar/WizardDaoImpl.java\n--- a/dao/src/main/java/com/iluwatar/WizardDaoImpl.java\n+++ b/dao/src/main/java/com/iluwatar/WizardDaoImpl.java\n@@ -1,5 +1,32 @@\n package com.iluwatar;\n \n+import org.hibernate.Criteria;\n+import org.hibernate.Session;\n+import org.hibernate.Transaction;\n+import org.hibernate.criterion.Expression;\n+\n public class WizardDaoImpl extends DaoBaseImpl<Wizard> implements WizardDao {\n \n+\t@Override\n+\tpublic Wizard findByName(String name) {\n+\t\tSession session = getSession();\n+\t\tTransaction tx = null;\n+\t\tWizard result = null;\n+\t\ttry {\n+\t\t\ttx = session.beginTransaction();\n+\t\t\tCriteria criteria = session.createCriteria(persistentClass);\n+\t\t\tcriteria.add(Expression.eq(\"name\", name));\n+\t\t\tresult = (Wizard) criteria.uniqueResult();\n+\t\t\tresult.getSpellbooks().size();\n+\t\t\ttx.commit();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tif (tx!=null) tx.rollback();\n+\t\t\tthrow e;\n+\t\t}\n+\t\tfinally {\n+\t\t\tsession.close();\n+\t\t}\t\t\n+\t\treturn result;\n+\t}\n }",
    "output": "Data fixture now working."
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/App.java b/adapter/src/main/java/com/iluwatar/App.java\n--- a/adapter/src/main/java/com/iluwatar/App.java\n+++ b/adapter/src/main/java/com/iluwatar/App.java\n@@ -15,7 +15,7 @@\n public class App {\r\n \r\n \tpublic static void main(String[] args) {\r\n-\t\tGnomeEngineeringManager manager = new GnomeEngineeringManager();\r\n+\t\tEngineer manager = new GnomeEngineeringManager();\r\n \t\tmanager.operateDevice();\r\n \t}\r\n }\r",
    "output": "Change the adapter pattern, manager class type to Interface"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/App.java b/command/src/main/java/com/iluwatar/App.java\n--- a/command/src/main/java/com/iluwatar/App.java\n+++ b/command/src/main/java/com/iluwatar/App.java\n@@ -20,7 +20,17 @@ public static void main(String[] args) {\n \r\n \t\twizard.castSpell(new InvisibilitySpell(), goblin);\r\n \t\tgoblin.printStatus();\r\n+\r\n+\t\twizard.undoLastSpell();\r\n+\t\tgoblin.printStatus();\r\n+\r\n \t\twizard.undoLastSpell();\r\n \t\tgoblin.printStatus();\r\n+\r\n+\t\twizard.redoLastSpell();\r\n+\t\tgoblin.printStatus();\r\n+\r\n+\t\twizard.redoLastSpell();\r\n+\t\tgoblin.printStatus();\r\n \t}\r\n }\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Command.java b/command/src/main/java/com/iluwatar/Command.java\n--- a/command/src/main/java/com/iluwatar/Command.java\n+++ b/command/src/main/java/com/iluwatar/Command.java\n@@ -11,6 +11,8 @@ public abstract class Command {\n \r\n \tpublic abstract void undo();\r\n \r\n+\tpublic abstract void redo();\r\n+\r\n \t@Override\r\n \tpublic abstract String toString();\r\n \r\n\ndiff --git a/command/src/main/java/com/iluwatar/InvisibilitySpell.java b/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n--- a/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n+++ b/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n@@ -17,6 +17,13 @@ public void undo() {\n \t\t}\r\n \t}\r\n \r\n+\t@Override\r\n+\tpublic void redo() {\r\n+\t\tif (target != null) {\r\n+\t\t\ttarget.setVisibility(Visibility.INVISIBLE);\r\n+\t\t}\r\n+\t}\r\n+\r\n \t@Override\r\n \tpublic String toString() {\r\n \t\treturn \"Invisibility spell\";\r\n\ndiff --git a/command/src/main/java/com/iluwatar/ShrinkSpell.java b/command/src/main/java/com/iluwatar/ShrinkSpell.java\n--- a/command/src/main/java/com/iluwatar/ShrinkSpell.java\n+++ b/command/src/main/java/com/iluwatar/ShrinkSpell.java\n@@ -15,10 +15,17 @@ public void execute(Target target) {\n \t@Override\r\n \tpublic void undo() {\r\n \t\tif (oldSize != null && target != null) {\r\n+\t\t\tSize temp = target.getSize();\r\n \t\t\ttarget.setSize(oldSize);\r\n+\t\t\toldSize = temp;\r\n \t\t}\r\n \t}\r\n \r\n+\t@Override\r\n+\tpublic void redo() {\r\n+\t\tundo();\r\n+\t}\r\n+\r\n \t@Override\r\n \tpublic String toString() {\r\n \t\treturn \"Shrink spell\";\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Target.java b/command/src/main/java/com/iluwatar/Target.java\n--- a/command/src/main/java/com/iluwatar/Target.java\n+++ b/command/src/main/java/com/iluwatar/Target.java\n@@ -31,7 +31,8 @@ public void setVisibility(Visibility visibility) {\n \tpublic abstract String toString();\r\n \r\n \tpublic void printStatus() {\r\n-\t\tSystem.out.println(String.format(\"%s, size=%s visibility=%s\", this,\r\n+\t\tSystem.out.println(String.format(\"%s, [size=%s] [visibility=%s]\", this,\r\n \t\t\t\tgetSize(), getVisibility()));\r\n+\t\tSystem.out.println();\r\n \t}\r\n }\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Wizard.java b/command/src/main/java/com/iluwatar/Wizard.java\n--- a/command/src/main/java/com/iluwatar/Wizard.java\n+++ b/command/src/main/java/com/iluwatar/Wizard.java\n@@ -1,8 +1,12 @@\n package com.iluwatar;\r\n \r\n+import java.util.Deque;\r\n+import java.util.LinkedList;\r\n+\r\n public class Wizard extends Target {\r\n \r\n-\tprivate Command previousSpell;\r\n+\tprivate Deque<Command> undoStack = new LinkedList<>();\r\n+\tprivate Deque<Command> redoStack = new LinkedList<>();\r\n \r\n \tpublic Wizard() {\r\n \t\tsetSize(Size.NORMAL);\r\n@@ -12,16 +16,27 @@ public Wizard() {\n \tpublic void castSpell(Command command, Target target) {\r\n \t\tSystem.out.println(this + \" casts \" + command + \" at \" + target);\r\n \t\tcommand.execute(target);\r\n-\t\tpreviousSpell = command;\r\n+\t\tundoStack.offerLast(command);\r\n \t}\r\n \r\n \tpublic void undoLastSpell() {\r\n-\t\tif (previousSpell != null) {\r\n+\t\tif (!undoStack.isEmpty()) {\r\n+\t\t\tCommand previousSpell = undoStack.pollLast();\r\n+\t\t\tredoStack.offerLast(previousSpell);\r\n \t\t\tSystem.out.println(this + \" undoes \" + previousSpell);\r\n \t\t\tpreviousSpell.undo();\r\n \t\t}\r\n \t}\r\n \r\n+\tpublic void redoLastSpell() {\r\n+\t\tif (!redoStack.isEmpty()) {\r\n+\t\t\tCommand previousSpell = redoStack.pollLast();\r\n+\t\t\tundoStack.offerLast(previousSpell);\r\n+\t\t\tSystem.out.println(this + \" redoes \" + previousSpell);\r\n+\t\t\tpreviousSpell.redo();\r\n+\t\t}\r\n+\t}\r\n+\r\n \t@Override\r\n \tpublic String toString() {\r\n \t\treturn \"Wizard\";\r",
    "output": "Add redo function on command pattern"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/App.java b/dao/src/main/java/com/iluwatar/App.java\n--- a/dao/src/main/java/com/iluwatar/App.java\n+++ b/dao/src/main/java/com/iluwatar/App.java\n@@ -13,8 +13,10 @@ public static void main( String[] args ) {\n     public static void persistData(WizardDao dao) {\n     \tSpell spell = new Spell(\"Fireball\");\n     \tSpellbook spellbook = new Spellbook(\"Book of fire\");\n+    \tspell.setSpellbook(spellbook);\n     \tspellbook.getSpells().add(spell);\n     \tWizard wizard = new Wizard(\"Jugga\");\n+    \tspellbook.setWizard(wizard);\n     \twizard.getSpellbooks().add(spellbook);\n     \tdao.persist(wizard);\n     }\n@@ -23,6 +25,12 @@ public static void queryData(WizardDao dao) {\n     \tList<Wizard> wizards = dao.findAll();\n     \tfor (Wizard w: wizards) {\n     \t\tSystem.out.println(w);\n+    \t\tfor (Spellbook spellbook: w.getSpellbooks()) {\n+    \t\t\tSystem.out.println(spellbook);\n+    \t\t\tfor (Spell spell: spellbook.getSpells()) {\n+    \t\t\t\tSystem.out.println(spell);\n+    \t\t\t}\n+    \t\t}\n     \t}\n     }\n }\n\ndiff --git a/dao/src/main/java/com/iluwatar/BaseEntity.java b/dao/src/main/java/com/iluwatar/BaseEntity.java\n--- a/dao/src/main/java/com/iluwatar/BaseEntity.java\n+++ b/dao/src/main/java/com/iluwatar/BaseEntity.java\n@@ -1,26 +1,13 @@\n package com.iluwatar;\n \n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.MappedSuperclass;\n import javax.persistence.Version;\n \n-@Entity\n+@MappedSuperclass\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\n public class BaseEntity {\n-\n-\t@Id\n-\t@GeneratedValue\n-\t@Column(name = \"ID\")\n-\tprivate Long id;\n-\n-\tpublic Long getId() {\n-\t\treturn id;\n-\t}\n-\n-\tpublic void setId(Long id) {\n-\t\tthis.id = id;\n-\t}\n \t\n \t@Version\n \tprivate Long version;\n\ndiff --git a/dao/src/main/java/com/iluwatar/DaoBase.java b/dao/src/main/java/com/iluwatar/DaoBase.java\n--- a/dao/src/main/java/com/iluwatar/DaoBase.java\n+++ b/dao/src/main/java/com/iluwatar/DaoBase.java\n@@ -27,7 +27,7 @@ private SessionFactory createSessionFactory() {\n   \t  \t\t.setProperty(\"hibernate.connection.url\", \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\")\n   \t  \t\t.setProperty(\"hibernate.current_session_context_class\", \"thread\")\n   \t  \t\t.setProperty(\"hibernate.show_sql\", \"true\")\n-  \t  \t\t.setProperty(\"hibernate.hbm2ddl.auto\", \"create\")\n+  \t  \t\t.setProperty(\"hibernate.hbm2ddl.auto\", \"create-drop\")\n   \t  \t\t.buildSessionFactory();\n     \treturn sessionFactory;\n \t}\n\ndiff --git a/dao/src/main/java/com/iluwatar/Spell.java b/dao/src/main/java/com/iluwatar/Spell.java\n--- a/dao/src/main/java/com/iluwatar/Spell.java\n+++ b/dao/src/main/java/com/iluwatar/Spell.java\n@@ -1,6 +1,11 @@\n package com.iluwatar;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n@@ -19,8 +24,21 @@ public Spell(String name) {\n \t\tthis.name = name;\n \t}\n \n+\t@Id\n+\t@GeneratedValue\n+\t@Column(name = \"SPELL_ID\")\n+\tprivate Long id;\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n \t@ManyToOne\n-\t@JoinColumn(name=\"SPELLBOOK_ID_FK\", referencedColumnName=\"ID\")\n+\t@JoinColumn(name=\"SPELLBOOK_ID_FK\", referencedColumnName=\"SPELLBOOK_ID\")\n \tprivate Spellbook spellbook;\n \t\n \tpublic String getName() {\n@@ -31,6 +49,14 @@ public void setName(String name) {\n \t\tthis.name = name;\n \t}\n \t\n+\tpublic Spellbook getSpellbook() {\n+\t\treturn spellbook;\n+\t}\n+\n+\tpublic void setSpellbook(Spellbook spellbook) {\n+\t\tthis.spellbook = spellbook;\n+\t}\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn name;\n\ndiff --git a/dao/src/main/java/com/iluwatar/Spellbook.java b/dao/src/main/java/com/iluwatar/Spellbook.java\n--- a/dao/src/main/java/com/iluwatar/Spellbook.java\n+++ b/dao/src/main/java/com/iluwatar/Spellbook.java\n@@ -4,7 +4,13 @@\n import java.util.Set;\n \n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n@@ -23,13 +29,26 @@ public Spellbook(String name) {\n \t\tthis.name = name;\n \t}\n \n+\t@Id\n+\t@GeneratedValue\n+\t@Column(name = \"SPELLBOOK_ID\")\n+\tprivate Long id;\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n \tprivate String name;\n \n \t@ManyToOne\n-\t@JoinColumn(name=\"WIZARD_ID_FK\", referencedColumnName=\"ID\")\n+\t@JoinColumn(name=\"WIZARD_ID_FK\", referencedColumnName=\"WIZARD_ID\")\n \tprivate Wizard wizard;\n \n-\t@OneToMany(mappedBy = \"spellbook\", orphanRemoval = true, cascade = CascadeType.ALL)\n+\t@OneToMany(mappedBy = \"spellbook\", orphanRemoval = true, fetch = FetchType.EAGER, cascade = CascadeType.ALL)\n \tprivate Set<Spell> spells;\n \t\n \tpublic String getName() {\n\ndiff --git a/dao/src/main/java/com/iluwatar/Wizard.java b/dao/src/main/java/com/iluwatar/Wizard.java\n--- a/dao/src/main/java/com/iluwatar/Wizard.java\n+++ b/dao/src/main/java/com/iluwatar/Wizard.java\n@@ -4,7 +4,13 @@\n import java.util.Set;\n \n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n \n@@ -20,10 +26,23 @@ public Wizard(String name) {\n \t\tthis();\n \t\tthis.name = name;\n \t}\n+\n+\t@Id\n+\t@GeneratedValue\n+\t@Column(name = \"WIZARD_ID\")\n+\tprivate Long id;\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n \t\n \tprivate String name;\n \n-\t@OneToMany(mappedBy = \"wizard\", orphanRemoval = true, cascade = CascadeType.ALL)\n+\t@OneToMany(mappedBy = \"wizard\", orphanRemoval = true, fetch = FetchType.EAGER, cascade = CascadeType.ALL)\n \tprivate Set<Spellbook> spellbooks;\n \t\n \tpublic String getFirstName() {",
    "output": "Work on DAO example. Table per class strategy. Persist fixes."
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/App.java b/dao/src/main/java/com/iluwatar/App.java\n--- a/dao/src/main/java/com/iluwatar/App.java\n+++ b/dao/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,40 @@\n+package com.iluwatar;\n+\n+import java.util.List;\n+\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+\n+public class App \n+{\n+    public static void main( String[] args ) {\n+    \t\n+    \tSessionFactory sessionFactory = new Configuration()\n+    \t  .addAnnotatedClass(Wizard.class)\n+    \t  .addAnnotatedClass(Spellbook.class)\n+    \t  .addAnnotatedClass(Spell.class)\n+    \t  .setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.H2Dialect\")\n+    \t  .setProperty(\"hibernate.connection.url\", \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\")\n+    \t  .setProperty(\"hibernate.current_session_context_class\", \"thread\")\n+    \t  .setProperty(\"hibernate.show_sql\", \"true\")\n+    \t  .setProperty(\"hibernate.hbm2ddl.auto\", \"create\")\n+    \t  .buildSessionFactory();\n+    \t  \n+    \t  Session session = sessionFactory.getCurrentSession();\n+    \t  session.beginTransaction();\n+    \t  Wizard wizard = new Wizard();\n+    \t  wizard.setFirstName(\"Jugga\");\n+    \t  Spellbook spellbook = new Spellbook();\n+    \t  Spell spell = new Spell();\n+    \t  spellbook.getSpells().add(spell);\n+    \t  wizard.getSpellbooks().add(spellbook);\n+    \t  session.persist(wizard);\n+    \t  Query query = session.createQuery(\"from Wizard\");\n+    \t  List<?> list = query.list();\n+    \t  Wizard p1 = (Wizard) list.get(0);\n+    \t  System.out.println(String.format(\"id=%d firstName=%s\", p1.getId(), p1.getFirstName()));\n+    \t  session.getTransaction().commit();    \t\n+    }\n+}\n\ndiff --git a/dao/src/main/java/com/iluwatar/BaseEntity.java b/dao/src/main/java/com/iluwatar/BaseEntity.java\n--- a/dao/src/main/java/com/iluwatar/BaseEntity.java\n+++ b/dao/src/main/java/com/iluwatar/BaseEntity.java\n@@ -0,0 +1,27 @@\n+package com.iluwatar;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseEntity {\n+\n+\t@Id\n+\t@GeneratedValue\n+\t@Column(name = \"ID\")\n+\tprivate Long id;\n+\n+\tpublic Long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(Long id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n+\t@Version\n+\tprivate Long version;\n+}\n\ndiff --git a/dao/src/main/java/com/iluwatar/DaoBase.java b/dao/src/main/java/com/iluwatar/DaoBase.java\n--- a/dao/src/main/java/com/iluwatar/DaoBase.java\n+++ b/dao/src/main/java/com/iluwatar/DaoBase.java\n@@ -0,0 +1,24 @@\n+package com.iluwatar;\n+\n+public abstract class DaoBase<E extends BaseEntity> {\n+\n+\tE find(Long id) {\n+\t\t\n+\t}\n+\t\n+\tvoid persist(E e) {\n+\t\t\n+\t}\n+\t\n+\tE merge(E e) {\n+\t\t\n+\t}\n+\t\n+\tvoid remove(E e) {\n+\t\t\n+\t}\n+\t\n+\tList<E> findAll() {\n+\t\t\n+\t}\n+}\n\ndiff --git a/dao/src/main/java/com/iluwatar/Spell.java b/dao/src/main/java/com/iluwatar/Spell.java\n--- a/dao/src/main/java/com/iluwatar/Spell.java\n+++ b/dao/src/main/java/com/iluwatar/Spell.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SPELL\")\n+public class Spell extends BaseEntity {\n+\t\n+\tprivate String name;\n+\n+\t@ManyToOne\n+\t@JoinColumn(name=\"SPELLBOOK_ID_FK\", referencedColumnName=\"ID\")\n+\tprivate Spellbook spellbook;\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}\n\ndiff --git a/dao/src/main/java/com/iluwatar/Spellbook.java b/dao/src/main/java/com/iluwatar/Spellbook.java\n--- a/dao/src/main/java/com/iluwatar/Spellbook.java\n+++ b/dao/src/main/java/com/iluwatar/Spellbook.java\n@@ -0,0 +1,53 @@\n+package com.iluwatar;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SPELLBOOK\")\n+public class Spellbook extends BaseEntity {\n+\t\n+\tpublic Spellbook() {\n+\t\tspells = new HashSet<Spell>();\n+\t}\n+\n+\tprivate String name;\n+\n+\t@ManyToOne\n+\t@JoinColumn(name=\"WIZARD_ID_FK\", referencedColumnName=\"ID\")\n+\tprivate Wizard wizard;\n+\n+\t@OneToMany(mappedBy = \"spellbook\", orphanRemoval = true, cascade = CascadeType.ALL)\n+\tprivate Set<Spell> spells;\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Wizard getWizard() {\n+\t\treturn wizard;\n+\t}\n+\n+\tpublic void setWizard(Wizard wizard) {\n+\t\tthis.wizard = wizard;\n+\t}\n+\n+\tpublic Set<Spell> getSpells() {\n+\t\treturn spells;\n+\t}\n+\n+\tpublic void setSpells(Set<Spell> spells) {\n+\t\tthis.spells = spells;\n+\t}\n+}\n\ndiff --git a/dao/src/main/java/com/iluwatar/Wizard.java b/dao/src/main/java/com/iluwatar/Wizard.java\n--- a/dao/src/main/java/com/iluwatar/Wizard.java\n+++ b/dao/src/main/java/com/iluwatar/Wizard.java\n@@ -0,0 +1,39 @@\n+package com.iluwatar;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"WIZARD\")\n+public class Wizard extends BaseEntity {\n+\t\n+\tpublic Wizard() {\n+\t\tspellbooks = new HashSet<Spellbook>();\n+\t}\n+\t\n+\tprivate String firstName;\n+\n+\t@OneToMany(mappedBy = \"wizard\", orphanRemoval = true, cascade = CascadeType.ALL)\n+\tprivate Set<Spellbook> spellbooks;\n+\t\n+\tpublic String getFirstName() {\n+\t\treturn firstName;\n+\t}\n+\n+\tpublic void setFirstName(String firstName) {\n+\t\tthis.firstName = firstName;\n+\t}\n+\n+\tpublic Set<Spellbook> getSpellbooks() {\n+\t\treturn spellbooks;\n+\t}\n+\n+\tpublic void setSpellbooks(Set<Spellbook> spellbooks) {\n+\t\tthis.spellbooks = spellbooks;\n+\t}\t\n+}\n\ndiff --git a/dao/src/test/java/com/iluwatar/AppTest.java b/dao/src/test/java/com/iluwatar/AppTest.java\n--- a/dao/src/test/java/com/iluwatar/AppTest.java\n+++ b/dao/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,4 @@\n+package com.iluwatar;\n+\n+public class AppTest {\n+}",
    "output": "Add DAO pattern."
  },
  {
    "input": "diff --git a/lazy-loading/src/main/java/com/iluwatar/App.java b/lazy-loading/src/main/java/com/iluwatar/App.java\n--- a/lazy-loading/src/main/java/com/iluwatar/App.java\n+++ b/lazy-loading/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Lazy loading idiom defers object creation until needed.\n+ * \n+ * This example shows different implementations of the pattern\n+ * with increasing sophistication.\n+ * \n+ * Additional information and lazy loading flavours are described in\n+ * http://martinfowler.com/eaaCatalog/lazyLoad.html\n+ *\n+ */\n+public class App \n+{\n+    public static void main( String[] args ) {\n+    \t\n+    \t// Simple lazy loader - not thread safe\n+    \tHolderNaive holderNaive = new HolderNaive();\n+    \tHeavy heavy = holderNaive.getHeavy();\n+    \tSystem.out.println(\"heavy=\" + heavy);\n+    \t\n+    \t// Thread safe lazy loader, but with heavy synchronization on each access\n+    \tHolderThreadSafe holderThreadSafe = new HolderThreadSafe();\n+    \tHeavy another = holderThreadSafe.getHeavy();\n+    \tSystem.out.println(\"another=\" + another);\n+    \t\n+    \t// The most efficient lazy loader utilizing Java 8 features\n+    \tJava8Holder java8Holder = new Java8Holder();\n+    \tHeavy next = java8Holder.getHeavy();\n+    \tSystem.out.println(\"next=\" + next);\n+    }\n+}\n\ndiff --git a/lazy-loading/src/main/java/com/iluwatar/Heavy.java b/lazy-loading/src/main/java/com/iluwatar/Heavy.java\n--- a/lazy-loading/src/main/java/com/iluwatar/Heavy.java\n+++ b/lazy-loading/src/main/java/com/iluwatar/Heavy.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Heavy objects are expensive to create.\n+ *\n+ */\n+public class Heavy {\n+\n+\tpublic Heavy() {\n+\t\tSystem.out.println(\"Creating Heavy ...\");\n+\t\ttry {\n+\t\t\tThread.sleep(1000);\n+\t\t} catch (InterruptedException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tSystem.out.println(\"... Heavy created\");\n+\t}\n+}\n\ndiff --git a/lazy-loading/src/main/java/com/iluwatar/HolderNaive.java b/lazy-loading/src/main/java/com/iluwatar/HolderNaive.java\n--- a/lazy-loading/src/main/java/com/iluwatar/HolderNaive.java\n+++ b/lazy-loading/src/main/java/com/iluwatar/HolderNaive.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Simple implementation of the lazy loading idiom.\n+ * However, this is not thread safe.\n+ *\n+ */\n+public class HolderNaive {\n+\t\n+\tprivate Heavy heavy;\n+\t\n+\tpublic HolderNaive() {\n+\t\tSystem.out.println(\"HolderNaive created\");\n+\t}\n+\n+\tpublic Heavy getHeavy() {\n+\t\tif (heavy == null) {\n+\t\t\theavy = new Heavy();\n+\t\t}\n+\t\treturn heavy;\n+\t}\n+}\n\ndiff --git a/lazy-loading/src/main/java/com/iluwatar/HolderThreadSafe.java b/lazy-loading/src/main/java/com/iluwatar/HolderThreadSafe.java\n--- a/lazy-loading/src/main/java/com/iluwatar/HolderThreadSafe.java\n+++ b/lazy-loading/src/main/java/com/iluwatar/HolderThreadSafe.java\n@@ -0,0 +1,24 @@\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Same as HolderNaive but with added synchronization.\n+ * This implementation is thread safe, but each {@link #getHeavy()}\n+ * call costs additional synchronization overhead.\n+ *\n+ */\n+public class HolderThreadSafe {\n+\t\n+\tprivate Heavy heavy;\n+\t\n+\tpublic HolderThreadSafe() {\n+\t\tSystem.out.println(\"HolderThreadSafe created\");\n+\t}\n+\n+\tpublic synchronized Heavy getHeavy() {\n+\t\tif (heavy == null) {\n+\t\t\theavy = new Heavy();\n+\t\t}\n+\t\treturn heavy;\n+\t}\n+}\n\ndiff --git a/lazy-loading/src/main/java/com/iluwatar/Java8Holder.java b/lazy-loading/src/main/java/com/iluwatar/Java8Holder.java\n--- a/lazy-loading/src/main/java/com/iluwatar/Java8Holder.java\n+++ b/lazy-loading/src/main/java/com/iluwatar/Java8Holder.java\n@@ -0,0 +1,34 @@\n+package com.iluwatar;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * \n+ * This lazy loader is thread safe and more efficient than HolderThreadSafe.\n+ * It utilizes Java 8 functional interface Supplier<T> as Heavy factory.\n+ *\n+ */\n+public class Java8Holder {\n+\t\n+\tprivate Supplier<Heavy> heavy = () -> createAndCacheHeavy();\n+\t\n+\tpublic Java8Holder() {\n+\t\tSystem.out.println(\"Java8Holder created\");\n+\t}\n+\n+\tpublic Heavy getHeavy() {\n+\t\treturn heavy.get();\n+\t}\n+\t\n+\tprivate synchronized Heavy createAndCacheHeavy() {\n+\t\tclass HeavyFactory implements Supplier<Heavy> {\n+\t\t\tprivate final Heavy heavyInstance = new Heavy();\n+\t\t\t@Override\n+\t\t\tpublic Heavy get() { return heavyInstance; }\n+\t\t}\n+\t\tif (!HeavyFactory.class.isInstance(heavy)) {\n+\t\t\theavy = new HeavyFactory();\n+\t\t}\n+\t\treturn heavy.get();\n+\t}\n+}\n\ndiff --git a/lazy-loading/src/test/java/com/iluwatar/AppTest.java b/lazy-loading/src/test/java/com/iluwatar/AppTest.java\n--- a/lazy-loading/src/test/java/com/iluwatar/AppTest.java\n+++ b/lazy-loading/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add Lazy Loading idiom."
  },
  {
    "input": "diff --git a/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java b/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java\n@@ -25,39 +25,10 @@ public void addFilter(Filter filter) {\n \t}\n \n \tpublic String execute(Order order) {\n-\n \t\tif (chain != null) {\n \t\t\treturn chain.execute(order);\n \t\t} else {\n \t\t\treturn \"RUNNING...\";\n \t\t}\n-\t\t\n-//\t\tString tempout[] = new String[filters.size()];\n-//\n-//\t\tString tempin[] = request.split(\"&\");\n-//\t\tint i = 0;\n-//\t\ttry {\n-//\t\t\tfor (Filter filter : filters) {\n-//\t\t\t\ttempout[i] = null;\n-//\t\t\t\ttempout[i++] = filter.execute(tempin);\n-//\t\t\t}\n-//\t\t} catch (Exception e) {\n-//\t\t\treturn \"NOT ENOUGHT INPUT\";\n-//\t\t}\n-//\n-//\t\tif (tempout[4] == null) {\n-//\t\t\treturn \"INVALID ORDER!\";\n-//\t\t} else if (tempout[3] == null) {\n-//\t\t\treturn \"INVALID DEPOSIT NUMBER!\";\n-//\t\t} else if (tempout[2] == null) {\n-//\t\t\treturn \"INVALID ADRDESS!\";\n-//\t\t} else if (tempout[1] == null) {\n-//\t\t\treturn \"INVALID Contact Number!\";\n-//\t\t} else if (tempout[0] == null) {\n-//\t\t\treturn \"INVALID Name!\";\n-//\t\t} else {\n-//\t\t\ttarget.execute(tempout);\n-//\t\t\treturn \"RUNNING...\";\n-//\t\t}\n \t}\n }",
    "output": "Remove some commented out code."
  },
  {
    "input": "diff --git a/execute-around/src/test/java/com/iluwatar/AppTest.java b/execute-around/src/test/java/com/iluwatar/AppTest.java\n--- a/execute-around/src/test/java/com/iluwatar/AppTest.java\n+++ b/execute-around/src/test/java/com/iluwatar/AppTest.java\n@@ -1,7 +1,10 @@\n package com.iluwatar;\n \n+import java.io.File;\n import java.io.IOException;\n \n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n \n /**\n@@ -16,4 +19,11 @@ public void test() throws IOException {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}\n+\t\n+\t@Before\n+\t@After\n+\tpublic void cleanup() {\n+\t\tFile file = new File(\"testfile.txt\");\n+\t\tfile.delete();\n+\t}\n }",
    "output": "Cleanup test data in Execute Around tests."
  },
  {
    "input": "diff --git a/intercepting-filter/src/main/java/com/iluwatar/AddressFilter.java b/intercepting-filter/src/main/java/com/iluwatar/AddressFilter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/AddressFilter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/AddressFilter.java\n@@ -1,4 +1,4 @@\n-\n+package com.iluwatar;\n /**\n  * Concrete implementation of filter\n  * This filter is responsible for checking/filtering the input in the address field, returns null if field is empty\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/App.java b/intercepting-filter/src/main/java/com/iluwatar/App.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/App.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/App.java\n@@ -1,4 +1,5 @@\n- import java.util.*;\n+package com.iluwatar;\n+import java.util.*;\n import javax.swing.*;\n import javax.swing.table.*;\n import java.awt.*;\n@@ -32,7 +33,3 @@ public static void main(String[] args){\n \n \n \n-\n-\n-\n-\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/Client.java b/intercepting-filter/src/main/java/com/iluwatar/Client.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/Client.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/Client.java\n@@ -1,8 +1,10 @@\n+package com.iluwatar;\n  import java.util.*;\n import javax.swing.*;\n import javax.swing.table.*;\n import java.awt.*;\n import java.awt.event.*;\n+\n /**\n  * The Client class is responsible for handling the input and running them through filters inside the filterManager\n  *\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/ContactFilter.java b/intercepting-filter/src/main/java/com/iluwatar/ContactFilter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/ContactFilter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/ContactFilter.java\n@@ -1,3 +1,4 @@\n+package com.iluwatar;\n /**\n  * Concrete implementation of filter\n  * This filter checks for the contact field in which it checks if the input consist of numbers and it also checks if the input follows the length constraint (11 digits)\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/DepositFilter.java b/intercepting-filter/src/main/java/com/iluwatar/DepositFilter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/DepositFilter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/DepositFilter.java\n@@ -1,3 +1,4 @@\n+package com.iluwatar;\n /**\n  * Concrete implementation of filter\n *\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/Filter.java b/intercepting-filter/src/main/java/com/iluwatar/Filter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/Filter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/Filter.java\n@@ -1,3 +1,4 @@\n+package com.iluwatar;\n /**\n * Filter interface \n  * Filters perform certain tasks prior or after execution of request by request handler.\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java b/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/FilterChain.java\n@@ -1,3 +1,4 @@\n+ package com.iluwatar;\n  import java.util.*;\n /**\n  * Filter Chain carries multiple filters and help to execute them in defined order on target.\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/FilterManager.java b/intercepting-filter/src/main/java/com/iluwatar/FilterManager.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/FilterManager.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/FilterManager.java\n@@ -1,3 +1,4 @@\n+ package com.iluwatar;\n  import java.util.*;\n import javax.swing.*;\n import javax.swing.table.*;\n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/NameFilter.java b/intercepting-filter/src/main/java/com/iluwatar/NameFilter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/NameFilter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/NameFilter.java\n@@ -1,4 +1,4 @@\n-\n+package com.iluwatar;\n /**\n  * Concrete implementation of filter\n  * This filter checks if the input in the Name field is valid. (alphanumeric) \n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/OrderFilter.java b/intercepting-filter/src/main/java/com/iluwatar/OrderFilter.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/OrderFilter.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/OrderFilter.java\n@@ -1,3 +1,4 @@\n+package com.iluwatar;\n /**\n  * Concrete implementation of filter\n  * This checks for the order field, returns null when order field is empty \n\ndiff --git a/intercepting-filter/src/main/java/com/iluwatar/Target.java b/intercepting-filter/src/main/java/com/iluwatar/Target.java\n--- a/intercepting-filter/src/main/java/com/iluwatar/Target.java\n+++ b/intercepting-filter/src/main/java/com/iluwatar/Target.java\n@@ -1,3 +1,4 @@\n+ package com.iluwatar;\n  import java.util.*;\n import javax.swing.*;\n import javax.swing.table.*;",
    "output": "Fix folder structure and added package"
  },
  {
    "input": "diff --git a/intercepting-filter/src/main/App.java b/intercepting-filter/src/main/App.java\n--- a/intercepting-filter/src/main/App.java\n+++ b/intercepting-filter/src/main/App.java\n@@ -0,0 +1,245 @@\n+ import java.util.*;\n+import javax.swing.*;\n+import javax.swing.table.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+public class App{\n+\tpublic static void main(String[] args){\n+\t\tFilterManager filterManager = new FilterManager(new Target());\n+\t\tfilterManager.setFilter(new NameFilter());\n+\t\tfilterManager.setFilter(new ContactFilter());\n+\t\tfilterManager.setFilter(new AddressFilter());\n+\t\tfilterManager.setFilter(new DepositFilter());\n+\t\tfilterManager.setFilter(new OrderFilter());\n+\n+\t\tClient client = new Client();\n+\t\tclient.setFilterManager(filterManager);\n+\t}\n+}\n+\n+interface Filter{\n+\tpublic String execute(String[] request);\n+}\n+\n+class NameFilter implements Filter{\n+\tpublic String execute(String[] request){\n+\t\tif(request[0].equals(\"\") || request[0].matches(\".*[^\\\\w|\\\\s]+.*\")){\n+\t\t\treturn null;\n+\t\t}else return request[0];\n+\t}\n+}\n+\n+class ContactFilter implements Filter{\n+\tpublic String execute(String[] request){\n+\t\tif(request[1].equals(\"\") || request[1].matches(\".*[^\\\\d]+.*\") || request[1].length() != 11){\n+\t\t\treturn null;\n+\t\t}else return request[1];\n+\t}\n+}\n+\n+class AddressFilter implements Filter{\n+\tpublic String execute(String[] request){\n+\t\tif(request[2].equals(\"\")){\n+\t\t\treturn null;\n+\t\t}else return request[2];\n+\t}\n+}\n+\n+class DepositFilter implements Filter{\n+\tpublic String execute(String[] request){\n+\t\tif(request[3].equals(\"\")){\n+\t\t\treturn null;\n+\t\t}else return request[3];\n+\t}\n+}\n+\n+class OrderFilter implements Filter{\n+\tpublic String execute(String[] request){\n+\t\tif(request[4].equals(\"\")){\n+\t\t\treturn null;\n+\t\t}else return request[4];\n+\t}\n+}\n+\n+class Target extends JFrame{\n+\tJTable jt;\n+\tJScrollPane jsp;\n+\tDefaultTableModel dtm;\n+\tJButton del;\n+\tpublic Target(){\n+\t\tsuper(\"Order System\");\n+\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\n+\t\tsetSize(640,480);\n+\t\tdtm = new DefaultTableModel(new Object[]{\"Name\", \"Contact Number\", \"Address\", \"Deposit Number\", \"Order\"},0);\n+\t\tjt = new JTable(dtm);\n+\t\tdel = new JButton(\"Delete\");\n+\t\tsetup();\n+\t}\n+\tprivate void setup(){\n+\t\tsetLayout(new BorderLayout());\n+\t\tJPanel bot = new JPanel();\n+\t\tadd(jt.getTableHeader(), BorderLayout.NORTH);\n+\t\tbot.setLayout(new BorderLayout());\n+\t\tbot.add(del, BorderLayout.EAST);\n+\t\tadd(bot, BorderLayout.SOUTH);\n+\t\tjsp = new JScrollPane(jt);\n+\t\tjsp.setPreferredSize(new Dimension(500,250));\n+\t\tadd(jsp, BorderLayout.CENTER);\n+\n+\t\tdel.addActionListener(new DListener());\n+\n+\t\tJRootPane rootPane = SwingUtilities.getRootPane(del); \n+\t\trootPane.setDefaultButton(del);\n+\t\tsetVisible(true);\n+\t}\n+\tpublic void execute(String[] request){\n+\t\t//System.out.println(request[4]);\n+\t\tdtm.addRow(new Object[]{request[0],request[1],request[2],request[3],request[4]});\n+\t}\n+\n+\tclass DListener implements ActionListener{\n+\t\t@Override\n+\t\tpublic void actionPerformed(ActionEvent e){\n+\t\t\tint temp = jt.getSelectedRow();\n+\t\t\tif(temp == -1) return;\n+\t\t\tint temp2 = jt.getSelectedRowCount();\n+\t\t\tfor(int i = 0; i < temp2; i++){\n+\t\t\t\tdtm.removeRow(temp);\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+class FilterChain{\n+\tprivate ArrayList<Filter> filters = new ArrayList<Filter>();\n+\tprivate Target target;\n+\n+\tpublic void addFilter(Filter filter){\n+\t\tfilters.add(filter);\n+\t}\n+\n+\tpublic String execute(String request){\n+\t\tString tempout[] = new String[filters.size()];\n+\n+\t\tString tempin[] = request.split(\"&\");\n+\t\tint i = 0;\n+\t\ttry{\n+\t\t\tfor(Filter filter:filters){\n+\t\t\t\ttempout[i] = null;\n+\t\t\t\ttempout[i++] = filter.execute(tempin);\n+\t\t\t\t//System.out.println(tempout[i]);\n+\t\t\t}\n+\t\t}catch(Exception e){\n+\t\t\treturn \"NOT ENOUGHT INPUT\";\n+\t\t}\n+\t\t\n+\t\tif(tempout[4] == null){\n+\t\t\treturn \"INVALID ORDER!\";\n+\t\t}else if(tempout[3] == null){\n+\t\t\treturn \"INVALID DEPOSIT NUMBER!\";\n+\t\t}else if(tempout[2] == null){\n+\t\t\treturn \"INVALID ADRDESS!\";\n+\t\t}else if(tempout[1] == null){\n+\t\t\treturn \"INVALID Contact Number!\";\n+\t\t}else if(tempout[0] == null){\n+\t\t\treturn \"INVALID Name!\";\n+\t\t}else{\n+\t\t\ttarget.execute(tempout);\n+\t\t\treturn \"RUNNING...\";\n+\t\t}\n+\t}\n+\n+\tpublic void setTarget(Target target){\n+\t\tthis.target = target;\n+\t}\n+}\n+\n+class FilterManager{\n+\tFilterChain filterChain;\n+\n+\tpublic FilterManager(Target target){\n+\t\tfilterChain = new FilterChain();\n+\t\tfilterChain.setTarget(target);\n+\t}\n+\tpublic void setFilter(Filter filter){\n+\t\tfilterChain.addFilter(filter);\n+\t}\n+\tpublic String filterRequest(String request){\n+\t\treturn filterChain.execute(request);\n+\t}\n+}\n+\n+class Client extends JFrame{\n+\tFilterManager filterManager;\n+\tJLabel jl;\n+\tJTextField[] jtfarr;\n+\tJTextArea[] jtaarr;\n+\tJButton[] buttarr;\n+\tpublic Client(){\n+\t\tsuper(\"Client System\");\n+\t\tsetDefaultCloseOperation(EXIT_ON_CLOSE);\n+\t\tsetSize(300,300);\n+\t\tjl = new JLabel(\"RUNNING...\");\n+\t\tjtfarr = new JTextField[3];\n+\t\tfor(int i = 0; i < 3; i++){\n+\t\t\tjtfarr[i] = new JTextField();\n+\t\t}\n+\t\tjtaarr = new JTextArea[2];\n+\t\tfor(int i = 0; i < 2; i++){\n+\t\t\tjtaarr[i] = new JTextArea();\n+\t\t}\n+\t\tbuttarr = new JButton[2];\n+\t\tbuttarr[0] = new JButton(\"Clear\");\n+\t\tbuttarr[1] = new JButton(\"Process\");\n+\n+\t\tsetup();\n+\t}\n+\tprivate void setup(){\n+\t\tsetLayout(new BorderLayout());\n+\t\tJPanel panel = new JPanel();\n+\t\tadd(jl,BorderLayout.SOUTH);\n+\t\tadd(panel, BorderLayout.CENTER);\n+\t\tpanel.setLayout(new GridLayout(6,2));\n+\t\tpanel.add(new JLabel(\"Name\"));\n+\t\tpanel.add(jtfarr[0]);\n+\t\tpanel.add(new JLabel(\"Contact Number\"));\n+\t\tpanel.add(jtfarr[1]);\n+\t\tpanel.add(new JLabel(\"Address\"));\n+\t\tpanel.add(jtaarr[0]);\n+\t\tpanel.add(new JLabel(\"Deposit Number\"));\n+\t\tpanel.add(jtfarr[2]);\n+\t\tpanel.add(new JLabel(\"Order\"));\n+\t\tpanel.add(jtaarr[1]);\n+\t\tpanel.add(buttarr[0]);\n+\t\tpanel.add(buttarr[1]);\n+\n+\t\tbuttarr[0].addActionListener(new ActionListener(){\n+\t\t\t@Override\n+\t\t\tpublic void actionPerformed(ActionEvent e){\n+\t\t\t\tfor(JTextArea i : jtaarr){\n+\t\t\t\t\ti.setText(\"\");\n+\t\t\t\t}\n+\t\t\t\tfor(JTextField i : jtfarr){\n+\t\t\t\t\ti.setText(\"\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\n+\t\tbuttarr[1].addActionListener(new ActionListener(){\n+\t\t\t@Override\n+\t\t\tpublic void actionPerformed(ActionEvent e){\n+\t\t\t\tjl.setText(sendRequest(jtfarr[0].getText()+\"&\"+jtfarr[1].getText()+\"&\"+jtaarr[0].getText()+\"&\"+jtfarr[2].getText()+\"&\"+jtaarr[1].getText()));\n+\t\t\t}\n+\t\t});\n+\n+\t\tJRootPane rootPane = SwingUtilities.getRootPane(buttarr[1]); \n+\t\trootPane.setDefaultButton(buttarr[1]);\n+\t\tsetVisible(true);\n+\t} \n+\tpublic void setFilterManager(FilterManager filterManager){\n+\t\tthis.filterManager = filterManager;\n+\t}\n+\tpublic String sendRequest(String request){\n+\t\treturn filterManager.filterRequest(request);\n+\t}\n+}\n\\ No newline at end of file",
    "output": "Add intercepting filter and changes"
  },
  {
    "input": "diff --git a/property/src/main/java/com/iluwatar/App.java b/property/src/main/java/com/iluwatar/App.java\n--- a/property/src/main/java/com/iluwatar/App.java\n+++ b/property/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,49 @@\n+package com.iluwatar;\n+\n+import com.iluwatar.Character.Type;\n+\n+/**\n+ * Example of Character instantiation using Property pattern (as concept also known like Prototype inheritance).\n+ * In prototype inheritance instead of classes, as opposite to Java class inheritance,\n+ * objects are used to create another objects and object hierarchies.\n+ * Hierarchies are created using prototype chain through delegation: every object has link to parent object.\n+ * Any base (parent) object can be amended at runtime (by adding or removal of some property), and all child objects will be affected as result.\n+ */\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\t\t/* set up */\n+\t\tPrototype charProto = new Character();\n+\t\tcharProto.set(Stats.STRENGTH, 10);\n+\t\tcharProto.set(Stats.AGILITY, 10);\n+\t\tcharProto.set(Stats.ARMOR, 10);\n+\t\tcharProto.set(Stats.ATTACK_POWER, 10);\n+\n+\t\tCharacter mageProto = new Character(Type.MAGE, charProto);\n+\t\tmageProto.set(Stats.INTELLECT, 15);\n+\t\tmageProto.set(Stats.SPIRIT, 10);\n+\n+\t\tCharacter warProto = new Character(Type.WARRIOR, charProto);\n+\t\twarProto.set(Stats.RAGE, 15);\n+\t\twarProto.set(Stats.ARMOR, 15); // boost default armor for warrior\n+\n+\t\tCharacter rogueProto = new Character(Type.ROGUE, charProto);\n+\t\trogueProto.set(Stats.ENERGY, 15);\n+\t\trogueProto.set(Stats.AGILITY, 15); // boost default agility for rogue\n+\n+\t\t/* usage */\n+\t\tCharacter mag = new Character(\"Player_1\", mageProto);\n+\t\tmag.set(Stats.ARMOR, 8);\n+\t\tSystem.out.println(mag);\n+\n+\t\tCharacter warrior = new Character(\"Player_2\", warProto);\n+\t\tSystem.out.println(warrior);\n+\n+\t\tCharacter rogue = new Character(\"Player_3\", rogueProto);\n+\t\tSystem.out.println(rogue);\n+\n+\t\tCharacter rogueDouble = new Character(\"Player_4\", rogue);\n+\t\trogueDouble.set(Stats.ATTACK_POWER, 12);\n+\t\tSystem.out.println(rogueDouble);\n+\t}\n+}\n\ndiff --git a/property/src/main/java/com/iluwatar/Character.java b/property/src/main/java/com/iluwatar/Character.java\n--- a/property/src/main/java/com/iluwatar/Character.java\n+++ b/property/src/main/java/com/iluwatar/Character.java\n@@ -0,0 +1,117 @@\n+package com.iluwatar;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents Character in game and his abilities (base stats).\n+ */\n+public class Character implements Prototype {\n+\n+\tpublic enum Type {\n+\t\tWARRIOR, MAGE, ROGUE\n+\t}\n+\n+\tprivate final Prototype prototype;\n+\tprivate final Map<Stats, Integer> properties = new HashMap<>();\n+\n+\tprivate String name;\n+\tprivate Type type;\n+\n+\tpublic Character() {\n+\t\tthis.prototype = new Prototype() { // Null-value object\n+\t\t\t@Override\n+\t\t\tpublic Integer get(Stats stat) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\t@Override\n+\t\t\tpublic boolean has(Stats stat) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\t@Override\n+\t\t\tpublic void set(Stats stat, Integer val) {\n+\t\t\t}\n+\t\t\t@Override\n+\t\t\tpublic void remove(Stats stat) {\n+\t\t\t}}\n+\t\t;\n+\t}\n+\n+\tpublic Character(Type type, Prototype prototype) {\n+\t\tthis.type = type;\n+\t\tthis.prototype = prototype;\n+\t}\n+\n+\tpublic Character(String name, Character prototype) {\n+\t\tthis.name = name;\n+\t\tthis.type = prototype.type;\n+\t\tthis.prototype = prototype;\n+\t}\n+\n+\tpublic String name() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic Type type() {\n+\t\treturn type;\n+\t}\n+\n+\t@Override\n+\tpublic Integer get(Stats stat) {\n+\t\tboolean containsValue = properties.containsKey(stat);\n+\t\tif (containsValue) {\n+\t\t\treturn properties.get(stat);\n+\t\t} else {\n+\t\t\treturn prototype.get(stat);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean has(Stats stat) {\n+\t\treturn get(stat) != null;\n+\t}\n+\n+\t@Override\n+\tpublic void set(Stats stat, Integer val) {\n+\t\tproperties.put(stat, val);\n+\t}\n+\n+\t@Override\n+\tpublic void remove(Stats stat) {\n+\t\tproperties.put(stat, null);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\tif (name != null) {\n+\t\t\tbuilder\n+\t\t\t\t.append(\"Player: \")\n+\t\t\t\t.append(name)\n+\t\t\t\t.append(\"\\n\");\n+\t\t}\n+\n+\t\tif (type != null) {\n+\t\t\tbuilder\n+\t\t\t\t.append(\"Character type: \")\n+\t\t\t\t.append(type.name())\n+\t\t\t\t.append(\"\\n\");\n+\t\t}\n+\n+\t\tbuilder.append(\"Stats:\\n\");\n+\t\tfor (Stats stat : Stats.values()) {\n+\t\t\tInteger value = this.get(stat);\n+\t\t\tif (value == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tbuilder\n+\t\t\t\t.append(\" - \")\n+\t\t\t\t.append(stat.name())\n+\t\t\t\t.append(\":\")\n+\t\t\t\t.append(value)\n+\t\t\t\t.append(\"\\n\");\n+\t\t}\n+\t\treturn builder.toString();\n+\t}\n+\n+}\n\ndiff --git a/property/src/main/java/com/iluwatar/Prototype.java b/property/src/main/java/com/iluwatar/Prototype.java\n--- a/property/src/main/java/com/iluwatar/Prototype.java\n+++ b/property/src/main/java/com/iluwatar/Prototype.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+/**\n+ * Interface for prototype inheritance\n+ */\n+public interface Prototype {\n+\n+\tpublic Integer get(Stats stat);\n+\tpublic boolean has(Stats stat);\n+\tpublic void set(Stats stat, Integer val);\n+\tpublic void remove(Stats stat);\n+}\n\ndiff --git a/property/src/main/java/com/iluwatar/Stats.java b/property/src/main/java/com/iluwatar/Stats.java\n--- a/property/src/main/java/com/iluwatar/Stats.java\n+++ b/property/src/main/java/com/iluwatar/Stats.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+/**\n+ * All possible attributes that Character can have\n+ */\n+public enum Stats {\n+\n+\tAGILITY, STRENGTH, ATTACK_POWER, ARMOR, INTELLECT, SPIRIT, ENERGY, RAGE\n+}\n\ndiff --git a/property/src/test/java/com/iluwatar/AppTest.java b/property/src/test/java/com/iluwatar/AppTest.java\n--- a/property/src/test/java/com/iluwatar/AppTest.java\n+++ b/property/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add Property pattern"
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/App.java b/execute-around/src/main/java/com/iluwatar/App.java\n--- a/execute-around/src/main/java/com/iluwatar/App.java\n+++ b/execute-around/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,30 @@\n+package com.iluwatar;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+/**\n+ * The Execute Around idiom specifies some code to be executed before and after\n+ * a method. Typically the idiom is used when the API has methods to be executed in\n+ * pairs, such as resource allocation/deallocation or lock acquisition/release.\n+ *\n+ * In this example, we have SimpleFileWriter class that opens and closes the file\n+ * for the user. The user specifies only what to do with the file by providing the\n+ * FileWriterAction implementation.\n+ *\n+ */\n+public class App {\n+\t\n+    public static void main( String[] args ) throws IOException {\n+\n+    \tnew SimpleFileWriter(\"testfile.txt\", new FileWriterAction() {\n+\n+    \t\t@Override\n+\t\t\tpublic void writeFile(FileWriter writer) throws IOException {\n+    \t\t\twriter.write(\"Hello\");\n+    \t\t\twriter.append(\" \");\n+    \t\t\twriter.append(\"there!\");\n+\t\t\t}\n+    \t});\n+    }\n+}\n\ndiff --git a/execute-around/src/main/java/com/iluwatar/FileWriterAction.java b/execute-around/src/main/java/com/iluwatar/FileWriterAction.java\n--- a/execute-around/src/main/java/com/iluwatar/FileWriterAction.java\n+++ b/execute-around/src/main/java/com/iluwatar/FileWriterAction.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+/**\n+ * \n+ * Interface for specifying what to do with the file resource.\n+ *\n+ */\n+public interface FileWriterAction {\n+\n+\tvoid writeFile(FileWriter writer) throws IOException;\n+\t\n+}\n\ndiff --git a/execute-around/src/main/java/com/iluwatar/SimpleFileWriter.java b/execute-around/src/main/java/com/iluwatar/SimpleFileWriter.java\n--- a/execute-around/src/main/java/com/iluwatar/SimpleFileWriter.java\n+++ b/execute-around/src/main/java/com/iluwatar/SimpleFileWriter.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+/**\n+ * \n+ * SimpleFileWriter handles opening and closing file for the user. The user\n+ * only has to specify what to do with the file resource through FileWriterAction\n+ * parameter.\n+ *\n+ */\n+public class SimpleFileWriter {\n+\n+\tpublic SimpleFileWriter(String filename, FileWriterAction action) throws IOException {\n+\t\tFileWriter writer = new FileWriter(filename);\n+\t\ttry {\n+\t\t\taction.writeFile(writer);\n+\t\t} finally {\n+\t\t\twriter.close();\n+\t\t}\n+\t}\n+}\n\ndiff --git a/execute-around/src/test/java/com/iluwatar/AppTest.java b/execute-around/src/test/java/com/iluwatar/AppTest.java\n--- a/execute-around/src/test/java/com/iluwatar/AppTest.java\n+++ b/execute-around/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\n+\n+import java.io.IOException;\n+\n+import org.junit.Test;\n+\n+/**\n+ * \n+ * Tests execute-around example.\n+ *\n+ */\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() throws IOException {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add example code for Execute Around idiom."
  },
  {
    "input": "diff --git a/callback/src/main/java/com/iluwatar/App.java b/callback/src/main/java/com/iluwatar/App.java\n--- a/callback/src/main/java/com/iluwatar/App.java\n+++ b/callback/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\n+\n+/**\n+ * Callback pattern is more native for dynamic languages where function are first-class citizen.\n+ * Prior to Java8 can be simulated using simple (alike command) interfaces.\n+ */\n+public class App {\n+\n+\tpublic static void main(String[] args) {\n+\t\tTask task = new SimpleTask();\n+\t\tCallback callback = new Callback() {\n+\t\t\t@Override\n+\t\t\tpublic void call() {\n+\t\t\t\tSystem.out.println(\"I'm done now.\");\n+\t\t\t}\n+\t\t};\n+\t\ttask.executeWith(callback);\n+\t}\n+}\n\ndiff --git a/callback/src/main/java/com/iluwatar/Callback.java b/callback/src/main/java/com/iluwatar/Callback.java\n--- a/callback/src/main/java/com/iluwatar/Callback.java\n+++ b/callback/src/main/java/com/iluwatar/Callback.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+/**\n+ * Callback interface\n+ */\n+public interface Callback {\n+\n+\tpublic void call();\n+}\n\ndiff --git a/callback/src/main/java/com/iluwatar/SimpleTask.java b/callback/src/main/java/com/iluwatar/SimpleTask.java\n--- a/callback/src/main/java/com/iluwatar/SimpleTask.java\n+++ b/callback/src/main/java/com/iluwatar/SimpleTask.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\n+\n+/**\n+ * Implementation of task that need to be executed\n+ */\n+public class SimpleTask extends Task {\n+\n+\t@Override\n+\tpublic void execute() {\n+\t\tSystem.out.println(\"Perform some important activity.\");\n+\t}\n+\n+}\n\ndiff --git a/callback/src/main/java/com/iluwatar/Task.java b/callback/src/main/java/com/iluwatar/Task.java\n--- a/callback/src/main/java/com/iluwatar/Task.java\n+++ b/callback/src/main/java/com/iluwatar/Task.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\n+\n+/**\n+ * Template-method class for callback hook execution\n+ */\n+public abstract class Task {\n+\n+\tpublic final void executeWith(Callback callback) {\n+\t\texecute();\n+\t\tif (callback != null) {\n+\t\t\tcallback.call();\n+\t\t}\n+\t}\n+\n+\tpublic abstract void execute();\n+}\n\ndiff --git a/callback/src/test/java/com/iluwatar/AppTest.java b/callback/src/test/java/com/iluwatar/AppTest.java\n--- a/callback/src/test/java/com/iluwatar/AppTest.java\n+++ b/callback/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add Callback pattern"
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/Hero.java b/builder/src/main/java/com/iluwatar/Hero.java\n--- a/builder/src/main/java/com/iluwatar/Hero.java\n+++ b/builder/src/main/java/com/iluwatar/Hero.java\n@@ -1,128 +1,128 @@\n-package com.iluwatar;\r\n-\r\n-/**\r\n- * \r\n- * The class with many parameters.\r\n- * \r\n- */\r\n-public class Hero {\r\n-\r\n-\tprivate final Profession profession;\r\n-\tprivate final String name;\r\n-\tprivate final HairType hairType;\r\n-\tprivate final HairColor hairColor;\r\n-\tprivate final Armor armor;\r\n-\tprivate final Weapon weapon;\r\n-\r\n-\tpublic Profession getProfession() {\r\n-\t\treturn profession;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic HairType getHairType() {\r\n-\t\treturn hairType;\r\n-\t}\r\n-\r\n-\tpublic HairColor getHairColor() {\r\n-\t\treturn hairColor;\r\n-\t}\r\n-\r\n-\tpublic Armor getArmor() {\r\n-\t\treturn armor;\r\n-\t}\r\n-\r\n-\tpublic Weapon getWeapon() {\r\n-\t\treturn weapon;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic String toString() {\r\n-\r\n-\t\tStringBuilder sb = new StringBuilder();\r\n-\t\tsb.append(profession);\r\n-\t\tsb.append(\" named \");\r\n-\t\tsb.append(name);\r\n-\t\tif (hairColor != null || hairType != null) {\r\n-\t\t\tsb.append(\" with \");\r\n-\t\t\tif (hairColor != null) {\r\n-\t\t\t\tsb.append(hairColor);\r\n-\t\t\t\tsb.append(\" \");\r\n-\t\t\t}\r\n-\t\t\tif (hairType != null) {\r\n-\t\t\t\tsb.append(hairType);\r\n-\t\t\t\tsb.append(\" \");\r\n-\t\t\t}\r\n-\t\t\tsb.append(hairType != HairType.BALD ? \"hair\" : \"head\");\r\n-\t\t}\r\n-\t\tif (armor != null) {\r\n-\t\t\tsb.append(\" wearing \");\r\n-\t\t\tsb.append(armor);\r\n-\t\t}\r\n-\t\tif (weapon != null) {\r\n-\t\t\tsb.append(\" and wielding \");\r\n-\t\t\tsb.append(weapon);\r\n-\t\t}\r\n-\t\tsb.append(\".\");\r\n-\t\treturn sb.toString();\r\n-\t}\r\n-\r\n-\tprivate Hero(HeroBuilder builder) {\r\n-\t\tthis.profession = builder.profession;\r\n-\t\tthis.name = builder.name;\r\n-\t\tthis.hairColor = builder.hairColor;\r\n-\t\tthis.hairType = builder.hairType;\r\n-\t\tthis.weapon = builder.weapon;\r\n-\t\tthis.armor = builder.armor;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * \r\n-\t * The builder class.\r\n-\t * \r\n-\t */\r\n-\tpublic static class HeroBuilder {\r\n-\r\n-\t\tprivate final Profession profession;\r\n-\t\tprivate final String name;\r\n-\t\tprivate HairType hairType;\r\n-\t\tprivate HairColor hairColor;\r\n-\t\tprivate Armor armor;\r\n-\t\tprivate Weapon weapon;\r\n-\r\n-\t\tpublic HeroBuilder(Profession profession, String name) {\r\n-\t\t\tif (profession == null || name == null) {\r\n-\t\t\t\tthrow new NullPointerException(\r\n-\t\t\t\t\t\t\"profession and name can not be null\");\r\n-\t\t\t}\r\n-\t\t\tthis.profession = profession;\r\n-\t\t\tthis.name = name;\r\n-\t\t}\r\n-\r\n-\t\tpublic HeroBuilder withHairType(HairType hairType) {\r\n-\t\t\tthis.hairType = hairType;\r\n-\t\t\treturn this;\r\n-\t\t}\r\n-\r\n-\t\tpublic HeroBuilder withHairColor(HairColor hairColor) {\r\n-\t\t\tthis.hairColor = hairColor;\r\n-\t\t\treturn this;\r\n-\t\t}\r\n-\r\n-\t\tpublic HeroBuilder withArmor(Armor armor) {\r\n-\t\t\tthis.armor = armor;\r\n-\t\t\treturn this;\r\n-\t\t}\r\n-\r\n-\t\tpublic HeroBuilder withWeapon(Weapon weapon) {\r\n-\t\t\tthis.weapon = weapon;\r\n-\t\t\treturn this;\r\n-\t\t}\r\n-\r\n-\t\tpublic Hero build() {\r\n-\t\t\treturn new Hero(this);\r\n-\t\t}\r\n-\t}\r\n-}\r\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * The class with many parameters.\n+ * \n+ */\n+public class Hero {\n+\n+\tprivate final Profession profession;\n+\tprivate final String name;\n+\tprivate final HairType hairType;\n+\tprivate final HairColor hairColor;\n+\tprivate final Armor armor;\n+\tprivate final Weapon weapon;\n+\n+\tpublic Profession getProfession() {\n+\t\treturn profession;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic HairType getHairType() {\n+\t\treturn hairType;\n+\t}\n+\n+\tpublic HairColor getHairColor() {\n+\t\treturn hairColor;\n+\t}\n+\n+\tpublic Armor getArmor() {\n+\t\treturn armor;\n+\t}\n+\n+\tpublic Weapon getWeapon() {\n+\t\treturn weapon;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tsb.append(profession);\n+\t\tsb.append(\" named \");\n+\t\tsb.append(name);\n+\t\tif (hairColor != null || hairType != null) {\n+\t\t\tsb.append(\" with \");\n+\t\t\tif (hairColor != null) {\n+\t\t\t\tsb.append(hairColor);\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tif (hairType != null) {\n+\t\t\t\tsb.append(hairType);\n+\t\t\t\tsb.append(\" \");\n+\t\t\t}\n+\t\t\tsb.append(hairType != HairType.BALD ? \"hair\" : \"head\");\n+\t\t}\n+\t\tif (armor != null) {\n+\t\t\tsb.append(\" wearing \");\n+\t\t\tsb.append(armor);\n+\t\t}\n+\t\tif (weapon != null) {\n+\t\t\tsb.append(\" and wielding \");\n+\t\t\tsb.append(weapon);\n+\t\t}\n+\t\tsb.append(\".\");\n+\t\treturn sb.toString();\n+\t}\n+\n+\tprivate Hero(HeroBuilder builder) {\n+\t\tthis.profession = builder.profession;\n+\t\tthis.name = builder.name;\n+\t\tthis.hairColor = builder.hairColor;\n+\t\tthis.hairType = builder.hairType;\n+\t\tthis.weapon = builder.weapon;\n+\t\tthis.armor = builder.armor;\n+\t}\n+\n+\t/**\n+\t * \n+\t * The builder class.\n+\t * \n+\t */\n+\tpublic static class HeroBuilder {\n+\n+\t\tprivate final Profession profession;\n+\t\tprivate final String name;\n+\t\tprivate HairType hairType;\n+\t\tprivate HairColor hairColor;\n+\t\tprivate Armor armor;\n+\t\tprivate Weapon weapon;\n+\n+\t\tpublic HeroBuilder(Profession profession, String name) {\n+\t\t\tif (profession == null || name == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"profession and name can not be null\");\n+\t\t\t}\n+\t\t\tthis.profession = profession;\n+\t\t\tthis.name = name;\n+\t\t}\n+\n+\t\tpublic HeroBuilder withHairType(HairType hairType) {\n+\t\t\tthis.hairType = hairType;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic HeroBuilder withHairColor(HairColor hairColor) {\n+\t\t\tthis.hairColor = hairColor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic HeroBuilder withArmor(Armor armor) {\n+\t\t\tthis.armor = armor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic HeroBuilder withWeapon(Weapon weapon) {\n+\t\t\tthis.weapon = weapon;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic Hero build() {\n+\t\t\treturn new Hero(this);\n+\t\t}\n+\t}\n+}",
    "output": "Fix HeroBuilder NullPointerException ."
  },
  {
    "input": "diff --git a/null-object/src/main/java/com/iluwatar/App.java b/null-object/src/main/java/com/iluwatar/App.java\n--- a/null-object/src/main/java/com/iluwatar/App.java\n+++ b/null-object/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,32 @@\n+package com.iluwatar;\n+\n+/**\n+ * \n+ * Null Object pattern replaces null values with neutral objects.\n+ * Many times this simplifies algorithms since no extra null checks\n+ * are needed.\n+ * \n+ * In this example we build a binary tree where the nodes are either\n+ * normal or Null Objects. No null values are used in the tree making\n+ * the traversal easy.\n+ *\n+ */\n+public class App \n+{\n+    public static void main( String[] args ) {\n+    \t\n+    \tNode root = new NodeImpl(\"1\",\n+    \t\t\tnew NodeImpl(\"11\",\n+    \t\t\t\t\tnew NodeImpl(\"111\",\n+    \t\t\t\t\t\t\tnew NullNode(),\n+    \t\t\t\t\t\t\tnew NullNode()),\n+    \t\t\t\t\tnew NullNode()), \n+    \t\t\tnew NodeImpl(\"12\",\n+    \t\t\t\t\tnew NullNode(),\n+    \t\t\t\t\tnew NodeImpl(\"122\",\n+    \t\t\t\t\t\t\tnew NullNode(),\n+    \t\t\t\t\t\t\tnew NullNode())));\n+\n+    \troot.walk();\n+    }\n+}\n\ndiff --git a/null-object/src/main/java/com/iluwatar/Node.java b/null-object/src/main/java/com/iluwatar/Node.java\n--- a/null-object/src/main/java/com/iluwatar/Node.java\n+++ b/null-object/src/main/java/com/iluwatar/Node.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\r\n+\r\n+/**\r\n+ * \r\n+ * Interface for binary tree node.\r\n+ *\r\n+ */\r\n+public interface Node {\r\n+\r\n+\tString getName();\r\n+\tint getTreeSize();\r\n+\tNode getLeft();\r\n+\tNode getRight();\r\n+\tvoid walk();\r\n+}\r\n\ndiff --git a/null-object/src/main/java/com/iluwatar/NodeImpl.java b/null-object/src/main/java/com/iluwatar/NodeImpl.java\n--- a/null-object/src/main/java/com/iluwatar/NodeImpl.java\n+++ b/null-object/src/main/java/com/iluwatar/NodeImpl.java\n@@ -0,0 +1,50 @@\n+package com.iluwatar;\r\n+\r\n+/**\r\n+ * \r\n+ * Implementation for binary tree's normal nodes.\r\n+ *\r\n+ */\r\n+public class NodeImpl implements Node {\r\n+\r\n+\tprivate final String name;\r\n+\tprivate final Node left;\r\n+\tprivate final Node right;\r\n+\t\r\n+\tpublic NodeImpl(String name, Node left, Node right) {\r\n+\t\tthis.name = name;\r\n+\t\tthis.left = left;\r\n+\t\tthis.right = right;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int getTreeSize() {\r\n+\t\treturn 1 + left.getTreeSize() + right.getTreeSize();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Node getLeft() {\r\n+\t\treturn left;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Node getRight() {\r\n+\t\treturn right;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void walk() {\r\n+\t\tSystem.out.println(name);\r\n+\t\tif (left.getTreeSize() > 0) {\r\n+\t\t\tleft.walk();\r\n+\t\t}\r\n+\t\tif (right.getTreeSize() > 0) {\r\n+\t\t\tright.walk();\r\n+\t\t}\r\n+\t}\r\n+}\r\n\ndiff --git a/null-object/src/main/java/com/iluwatar/NullNode.java b/null-object/src/main/java/com/iluwatar/NullNode.java\n--- a/null-object/src/main/java/com/iluwatar/NullNode.java\n+++ b/null-object/src/main/java/com/iluwatar/NullNode.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar;\r\n+\r\n+/**\r\n+ * \r\n+ * Null Object implementation for binary tree node.\r\n+ *\r\n+ */\r\n+public class NullNode implements Node {\r\n+\r\n+\t@Override\r\n+\tpublic int getTreeSize() {\r\n+\t\treturn 0;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Node getLeft() {\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Node getRight() {\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String getName() {\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void walk() {\r\n+\t}\r\n+}\r\n\ndiff --git a/null-object/src/test/java/com/iluwatar/AppTest.java b/null-object/src/test/java/com/iluwatar/AppTest.java\n--- a/null-object/src/test/java/com/iluwatar/AppTest.java\n+++ b/null-object/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add Null Object pattern."
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/generic/Observer.java b/observer/src/main/java/com/iluwatar/generic/Observer.java\n--- a/observer/src/main/java/com/iluwatar/generic/Observer.java\n+++ b/observer/src/main/java/com/iluwatar/generic/Observer.java\n@@ -1,5 +1,6 @@\n package com.iluwatar.generic;\n \n public interface Observer<S extends Observable<S, O, A>, O extends Observer<S, O, A>, A> {\n-    public void update(S subject, A argument);\n+\n+    void update(S subject, A argument);\n }",
    "output": "[refactor] Remove unnecessary declarations in observer pattern."
  },
  {
    "input": "diff --git a/servant/src/main/java/com/iluwatar/App.java b/servant/src/main/java/com/iluwatar/App.java\n--- a/servant/src/main/java/com/iluwatar/App.java\n+++ b/servant/src/main/java/com/iluwatar/App.java\n@@ -4,50 +4,48 @@\n \n \n /**\n- * Servant offers some functionality to a group of classes without defining that functionality in each of them. \n+ * Servant offers some functionality to a group of classes without defining that functionality in each of them.\n  * A Servant is a class whose instance provides methods that take care of a desired service,\n  * while objects for which the servant does something, are taken as parameters.\n  *\n  */\n public class App {\n-\tstatic Servant jenkins = new Servant(\"Jenkins\");\n-\tstatic Servant travis = new Servant(\"Travis\");\n-\t\n-\tpublic static void main( String[] args ){\n-\t\tscenario(jenkins, 1);\n-\t\tscenario(travis, 0);\n-\t}\n-\t\n-\t/*\n-\t * Can add a List with enum Actions for variable scenarios\n-\t * */\n-\tpublic static void scenario(Servant servant, int compliment){\n-\t\tKing k = new King();\n-\t\tQueen q = new Queen();\n-\t\t\n-\t\tArrayList<Royalty> guests = new ArrayList<>();\n-\t\tguests.add(k);\n-\t\tguests.add(q);\n-\t\t\n-\t\t//feed\n-\t\tservant.feed(k);\n-\t\tservant.feed(q);\n-\t\t//serve drinks\n-\t\tservant.giveWine(k);\n-\t\tservant.giveWine(q);\n-\t\t//compliment\n-\t\tservant.GiveCompliments( guests.get(compliment) );\n-\t\t\n-\t\t//outcome of the night\n-\t\tfor(Royalty r : guests)\n-\t\t\tr.changeMood();\n-\t\t\n-\t\t//check your luck\n-\t\tif( servant.checkIfYouWillBeHanged(guests) )\n-\t\t\tSystem.out.println(servant.name + \" will live another day\");\n-\t\telse\n-\t\t\tSystem.out.println(\"Poor \" + servant.name + \". His days are numbered\");\n-\t}\n-\t\n-\t\n+    static Servant jenkins = new Servant(\"Jenkins\");\n+    static Servant travis = new Servant(\"Travis\");\n+\n+    public static void main(String[] args) {\n+        scenario(jenkins, 1);\n+        scenario(travis, 0);\n+    }\n+\n+    /*\n+     * Can add a List with enum Actions for variable scenarios\n+     * */\n+    public static void scenario(Servant servant, int compliment) {\n+        King k = new King();\n+        Queen q = new Queen();\n+\n+        ArrayList<Royalty> guests = new ArrayList<>();\n+        guests.add(k);\n+        guests.add(q);\n+\n+        //feed\n+        servant.feed(k);\n+        servant.feed(q);\n+        //serve drinks\n+        servant.giveWine(k);\n+        servant.giveWine(q);\n+        //compliment\n+        servant.GiveCompliments(guests.get(compliment));\n+\n+        //outcome of the night\n+        for (Royalty r : guests)\n+            r.changeMood();\n+\n+        //check your luck\n+        if (servant.checkIfYouWillBeHanged(guests))\n+            System.out.println(servant.name + \" will live another day\");\n+        else\n+            System.out.println(\"Poor \" + servant.name + \". His days are numbered\");\n+    }\n }\n\ndiff --git a/servant/src/main/java/com/iluwatar/King.java b/servant/src/main/java/com/iluwatar/King.java\n--- a/servant/src/main/java/com/iluwatar/King.java\n+++ b/servant/src/main/java/com/iluwatar/King.java\n@@ -1,31 +1,33 @@\n package com.iluwatar;\n \n-public class King implements Royalty{\n-\tprivate boolean isDrunk = false, isHungry = true, isHappy = false;\n-\tprivate boolean complimentReceived = false;\n-\t\n-\t@Override\n-\tpublic void getFed() {\n-\t\tisHungry = false;\n-\t}\n+public class King implements Royalty {\n+    private boolean isDrunk;\n+    private boolean isHungry = true;\n+    private boolean isHappy;\n+    private boolean complimentReceived;\n \n-\t@Override\n-\tpublic void getDrink() {\n-\t\tisDrunk = true;\n-\t}\n-\t\n-\tpublic void receiveCompliments(){\n-\t\tcomplimentReceived = true;\n-\t}\n+    @Override\n+    public void getFed() {\n+        isHungry = false;\n+    }\n \n-\t@Override\n-\tpublic void changeMood() {\n-\t\tif(!isHungry && isDrunk) isHappy = true;\n-\t\tif( complimentReceived ) isHappy = false;\n-\t}\n+    @Override\n+    public void getDrink() {\n+        isDrunk = true;\n+    }\n \n-\t@Override\n-\tpublic boolean getMood() {\n-\t\treturn isHappy;\n-\t}\n+    public void receiveCompliments() {\n+        complimentReceived = true;\n+    }\n+\n+    @Override\n+    public void changeMood() {\n+        if (!isHungry && isDrunk) isHappy = true;\n+        if (complimentReceived) isHappy = false;\n+    }\n+\n+    @Override\n+    public boolean getMood() {\n+        return isHappy;\n+    }\n }\n\ndiff --git a/servant/src/main/java/com/iluwatar/Queen.java b/servant/src/main/java/com/iluwatar/Queen.java\n--- a/servant/src/main/java/com/iluwatar/Queen.java\n+++ b/servant/src/main/java/com/iluwatar/Queen.java\n@@ -1,35 +1,38 @@\n package com.iluwatar;\n \n-public class Queen implements Royalty{\n-\tprivate boolean isDrunk = true, isHungry = false, isHappy = false;\n-\tprivate boolean isFlirty = true, complimentReceived = false;\n-\t\n-\t@Override\n-\tpublic void getFed() {\n-\t\tisHungry = false;\n-\t}\n-\n-\t@Override\n-\tpublic void getDrink() {\n-\t\tisDrunk = true;\n-\t}\n-\t\n-\tpublic void receiveCompliments(){\n-\t\tcomplimentReceived = true;\n-\t}\n-\n-\t@Override\n-\tpublic void changeMood() {\n-\t\tif( complimentReceived && isFlirty && isDrunk ) isHappy = true;\n-\t}\n-\n-\t@Override\n-\tpublic boolean getMood() {\n-\t\treturn isHappy;\n-\t}\n-\t\n-\tpublic void setFlirtiness(boolean f){\n-\t\tthis.isFlirty = f;\n-\t}\n+public class Queen implements Royalty {\n+    private boolean isDrunk = true;\n+    private boolean isHungry;\n+    private boolean isHappy;\n+    private boolean isFlirty = true;\n+    private boolean complimentReceived;\n+\n+    @Override\n+    public void getFed() {\n+        isHungry = false;\n+    }\n+\n+    @Override\n+    public void getDrink() {\n+        isDrunk = true;\n+    }\n+\n+    public void receiveCompliments() {\n+        complimentReceived = true;\n+    }\n+\n+    @Override\n+    public void changeMood() {\n+        if (complimentReceived && isFlirty && isDrunk) isHappy = true;\n+    }\n+\n+    @Override\n+    public boolean getMood() {\n+        return isHappy;\n+    }\n+\n+    public void setFlirtiness(boolean f) {\n+        this.isFlirty = f;\n+    }\n \n }\n\ndiff --git a/servant/src/main/java/com/iluwatar/Royalty.java b/servant/src/main/java/com/iluwatar/Royalty.java\n--- a/servant/src/main/java/com/iluwatar/Royalty.java\n+++ b/servant/src/main/java/com/iluwatar/Royalty.java\n@@ -1,9 +1,14 @@\n package com.iluwatar;\n \n interface Royalty {\n-\tpublic void getFed();\n-\tpublic void getDrink();\n-\tpublic void changeMood();\n-\tpublic void receiveCompliments();\n-\tpublic boolean getMood();\n+\n+    void getFed();\n+\n+    void getDrink();\n+\n+    void changeMood();\n+\n+    void receiveCompliments();\n+\n+    boolean getMood();\n }",
    "output": "[refactor] Remove unnecessary declarations in servant pattern."
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/HairType.java b/builder/src/main/java/com/iluwatar/HairType.java\n--- a/builder/src/main/java/com/iluwatar/HairType.java\n+++ b/builder/src/main/java/com/iluwatar/HairType.java\n@@ -2,11 +2,16 @@\n \r\n public enum HairType {\r\n \r\n-\tBALD, SHORT, CURLY, LONG_STRAIGHT, LONG_CURLY;\r\n+\tBALD(\"bald\"), SHORT(\"short\"), CURLY(\"curly\"), LONG_STRAIGHT(\"long straight\"), LONG_CURLY(\"long curly\");\r\n \r\n-\t@Override\r\n+    private String title;\r\n+\r\n+    HairType(String title) {\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    @Override\r\n \tpublic String toString() {\r\n-\t\treturn name().toLowerCase().replaceAll(\"_\", \" \");\r\n+\t\treturn title;\r\n \t}\r\n-\r\n }\r",
    "output": "[refactor] Update HairType enum in builder pattern."
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -7,12 +7,22 @@\n  */\r\n public enum Action {\r\n \r\n-\tHUNT(\"hunted a rabbit\"), TALE(\"tells a tale\"), GOLD(\"found gold\"), ENEMY(\"spotted enemies\"), NONE(\"\");\r\n+    HUNT(\"hunted a rabbit\", \"arrives for dinner\"),\r\n+    TALE(\"tells a tale\", \"comes to listen\"),\r\n+    GOLD(\"found gold\", \"takes his share of the gold\"),\r\n+    ENEMY(\"spotted enemies\", \"runs for cover\"),\r\n+    NONE(\"\", \"\");\r\n \r\n     private String title;\r\n+    private String description;\r\n \r\n-    Action(String title) {\r\n+    Action(String title, String description) {\r\n         this.title = title;\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n     }\r\n \r\n     public String toString() {\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/PartyImpl.java b/mediator/src/main/java/com/iluwatar/PartyImpl.java\n--- a/mediator/src/main/java/com/iluwatar/PartyImpl.java\n+++ b/mediator/src/main/java/com/iluwatar/PartyImpl.java\n@@ -10,7 +10,7 @@\n  */\r\n public class PartyImpl implements Party {\r\n \r\n-\tprivate List<PartyMember> members;\r\n+\tprivate final List<PartyMember> members;\r\n \r\n \tpublic PartyImpl() {\r\n \t\tmembers = new ArrayList<>();\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/PartyMemberBase.java b/mediator/src/main/java/com/iluwatar/PartyMemberBase.java\n--- a/mediator/src/main/java/com/iluwatar/PartyMemberBase.java\n+++ b/mediator/src/main/java/com/iluwatar/PartyMemberBase.java\n@@ -17,24 +17,7 @@ public void joinedParty(Party party) {\n \r\n \t@Override\r\n \tpublic void partyAction(Action action) {\r\n-\t\tString s = this + \" \";\r\n-\t\tswitch (action) {\r\n-\t\tcase ENEMY:\r\n-\t\t\ts = s + \"runs for cover\";\r\n-\t\t\tbreak;\r\n-\t\tcase GOLD:\r\n-\t\t\ts = s + \"takes his share of the gold\";\r\n-\t\t\tbreak;\r\n-\t\tcase HUNT:\r\n-\t\t\ts = s + \"arrives for dinner\";\r\n-\t\t\tbreak;\r\n-\t\tcase TALE:\r\n-\t\t\ts = s + \"comes to listen\";\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\tSystem.out.println(s);\r\n+\t\tSystem.out.println(this + \" \" + action.getDescription());\r\n \t}\r\n \r\n \t@Override\r",
    "output": "[refactor] Extends Action enum in mediator pattern."
  },
  {
    "input": "diff --git a/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java b/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java\n@@ -1,6 +1,7 @@\n package com.iluwatar;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.Collection;\r\n import java.util.List;\r\n \r\n /**\r\n@@ -15,7 +16,7 @@\n  */\r\n public class DwarvenGoldmineFacade {\r\n \r\n-\tList<DwarvenMineWorker> workers;\r\n+\tprivate final List<DwarvenMineWorker> workers;\r\n \r\n \tpublic DwarvenGoldmineFacade() {\r\n \t\tworkers = new ArrayList<>();\r\n@@ -25,23 +26,20 @@ public DwarvenGoldmineFacade() {\n \t}\r\n \r\n \tpublic void startNewDay() {\r\n-\t\tfor (DwarvenMineWorker worker : workers) {\r\n-\t\t\tworker.wakeUp();\r\n-\t\t\tworker.goToMine();\r\n-\t\t}\r\n+        makeActions(workers, DwarvenMineWorker.Action.WAKE_UP, DwarvenMineWorker.Action.GO_TO_MINE);\r\n \t}\r\n \r\n \tpublic void digOutGold() {\r\n-\t\tfor (DwarvenMineWorker worker : workers) {\r\n-\t\t\tworker.work();\r\n-\t\t}\r\n+        makeActions(workers, DwarvenMineWorker.Action.WORK);\r\n \t}\r\n \r\n \tpublic void endDay() {\r\n-\t\tfor (DwarvenMineWorker worker : workers) {\r\n-\t\t\tworker.goHome();\r\n-\t\t\tworker.goToSleep();\r\n-\t\t}\r\n+        makeActions(workers, DwarvenMineWorker.Action.GO_HOME, DwarvenMineWorker.Action.GO_TO_SLEEP);\r\n \t}\r\n \r\n+    private void makeActions(Collection<DwarvenMineWorker> workers, DwarvenMineWorker.Action... actions) {\r\n+        for (DwarvenMineWorker worker : workers) {\r\n+            worker.action(actions);\r\n+        }\r\n+    }\r\n }\r\n\ndiff --git a/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java b/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java\n@@ -23,8 +23,40 @@ public void goToMine() {\n \t\tSystem.out.println(name() + \" goes to the mine.\");\r\n \t}\r\n \r\n+    private void action(Action action) {\r\n+        switch (action) {\r\n+            case GO_TO_SLEEP:\r\n+                goToSleep();\r\n+                break;\r\n+            case WAKE_UP:\r\n+                wakeUp();\r\n+                break;\r\n+            case GO_HOME:\r\n+                goHome();\r\n+                break;\r\n+            case GO_TO_MINE:\r\n+                goToMine();\r\n+                break;\r\n+            case WORK:\r\n+                work();\r\n+                break;\r\n+            default:\r\n+                System.out.println(\"Undefined action\");\r\n+                break;\r\n+        }\r\n+    }\r\n+\r\n+    public void action(Action... actions) {\r\n+        for (Action action : actions) {\r\n+            action(action);\r\n+        }\r\n+    }\r\n+\r\n \tpublic abstract void work();\r\n \r\n \tpublic abstract String name();\r\n \r\n+    static enum Action {\r\n+        GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK\r\n+    }\r\n }\r",
    "output": "[refactor] Separate out one method to call actions for workers."
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/Goblin.java b/command/src/main/java/com/iluwatar/Goblin.java\n--- a/command/src/main/java/com/iluwatar/Goblin.java\n+++ b/command/src/main/java/com/iluwatar/Goblin.java\n@@ -3,8 +3,8 @@\n public class Goblin extends Target {\r\n \r\n \tpublic Goblin() {\r\n-\t\tthis.setSize(Size.NORMAL);\r\n-\t\tthis.setVisibility(Visibility.VISIBLE);\r\n+\t\tsetSize(Size.NORMAL);\r\n+\t\tsetVisibility(Visibility.VISIBLE);\r\n \t}\r\n \r\n \t@Override\r\n\ndiff --git a/command/src/main/java/com/iluwatar/InvisibilitySpell.java b/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n--- a/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n+++ b/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n@@ -4,10 +4,6 @@ public class InvisibilitySpell extends Command {\n \r\n \tprivate Target target;\r\n \r\n-\tpublic InvisibilitySpell() {\r\n-\t\ttarget = null;\r\n-\t}\r\n-\r\n \t@Override\r\n \tpublic void execute(Target target) {\r\n \t\ttarget.setVisibility(Visibility.INVISIBLE);\r\n\ndiff --git a/command/src/main/java/com/iluwatar/ShrinkSpell.java b/command/src/main/java/com/iluwatar/ShrinkSpell.java\n--- a/command/src/main/java/com/iluwatar/ShrinkSpell.java\n+++ b/command/src/main/java/com/iluwatar/ShrinkSpell.java\n@@ -3,14 +3,8 @@\n public class ShrinkSpell extends Command {\r\n \r\n \tprivate Size oldSize;\r\n-\r\n \tprivate Target target;\r\n \r\n-\tpublic ShrinkSpell() {\r\n-\t\toldSize = null;\r\n-\t\ttarget = null;\r\n-\t}\r\n-\r\n \t@Override\r\n \tpublic void execute(Target target) {\r\n \t\toldSize = target.getSize();\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Wizard.java b/command/src/main/java/com/iluwatar/Wizard.java\n--- a/command/src/main/java/com/iluwatar/Wizard.java\n+++ b/command/src/main/java/com/iluwatar/Wizard.java\n@@ -5,9 +5,8 @@ public class Wizard extends Target {\n \tprivate Command previousSpell;\r\n \r\n \tpublic Wizard() {\r\n-\t\tthis.setSize(Size.NORMAL);\r\n-\t\tthis.setVisibility(Visibility.VISIBLE);\r\n-\t\tpreviousSpell = null;\r\n+\t\tsetSize(Size.NORMAL);\r\n+\t\tsetVisibility(Visibility.VISIBLE);\r\n \t}\r\n \r\n \tpublic void castSpell(Command command, Target target) {\r",
    "output": "[refactor] Remove unnecessary declarations in command pattern."
  },
  {
    "input": "diff --git a/memento/src/main/java/com/iluwatar/StarType.java b/memento/src/main/java/com/iluwatar/StarType.java\n--- a/memento/src/main/java/com/iluwatar/StarType.java\n+++ b/memento/src/main/java/com/iluwatar/StarType.java\n@@ -2,31 +2,16 @@\n \r\n public enum StarType {\r\n \r\n-\tSUN, RED_GIANT, WHITE_DWARF, SUPERNOVA, DEAD;\r\n+\tSUN(\"sun\"), RED_GIANT(\"red giant\"), WHITE_DWARF(\"white dwarf\"), SUPERNOVA(\"supernova\"), DEAD(\"dead star\"), UNDEFINED(\"\");\r\n \r\n-\t@Override\r\n+    private String title;\r\n+\r\n+    StarType(String title) {\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    @Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase RED_GIANT:\r\n-\t\t\ts = \"red giant\";\r\n-\t\t\tbreak;\r\n-\t\tcase SUN:\r\n-\t\t\ts = \"sun\";\r\n-\t\t\tbreak;\r\n-\t\tcase SUPERNOVA:\r\n-\t\t\ts = \"supernova\";\r\n-\t\t\tbreak;\r\n-\t\tcase WHITE_DWARF:\r\n-\t\t\ts = \"white dwarf\";\r\n-\t\t\tbreak;\r\n-\t\tcase DEAD:\r\n-\t\t\ts = \"dead star\";\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn title;\r\n \t}\r\n-\r\n }\r",
    "output": "[refactor] Update StarType enum in memento pattern."
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -7,20 +7,15 @@\n  */\r\n public enum Action {\r\n \r\n-\tHUNT, TALE, GOLD, ENEMY;\r\n+\tHUNT(\"hunted a rabbit\"), TALE(\"tells a tale\"), GOLD(\"found gold\"), ENEMY(\"spotted enemies\"), NONE(\"\");\r\n \r\n-\tpublic String toString() {\r\n+    private String title;\r\n \r\n-\t\tswitch (this) {\r\n-\t\tcase ENEMY:\r\n-\t\t\treturn \"spotted enemies\";\r\n-\t\tcase GOLD:\r\n-\t\t\treturn \"found gold\";\r\n-\t\tcase HUNT:\r\n-\t\t\treturn \"hunted a rabbit\";\r\n-\t\tcase TALE:\r\n-\t\t\treturn \"tells a tale\";\r\n-\t\t}\r\n-\t\treturn \"\";\r\n+    Action(String title) {\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+\t\treturn title;\r\n \t}\r\n }\r",
    "output": "[refactor] Update Action enum in mediator pattern."
  },
  {
    "input": "diff --git a/flyweight/src/main/java/com/iluwatar/Potion.java b/flyweight/src/main/java/com/iluwatar/Potion.java\n--- a/flyweight/src/main/java/com/iluwatar/Potion.java\n+++ b/flyweight/src/main/java/com/iluwatar/Potion.java\n@@ -7,6 +7,5 @@\n  */\r\n public interface Potion {\r\n \r\n-\tpublic void drink();\r\n-\r\n+\tvoid drink();\r\n }\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PotionFactory.java b/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n--- a/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n+++ b/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n@@ -1,6 +1,7 @@\n package com.iluwatar;\r\n \r\n import java.util.EnumMap;\r\n+import java.util.Map;\r\n \r\n /**\r\n  * \r\n@@ -12,7 +13,7 @@\n  */\r\n public class PotionFactory {\r\n \r\n-\tprivate EnumMap<PotionType, Potion> potions;\r\n+\tprivate final Map<PotionType, Potion> potions;\r\n \r\n \tpublic PotionFactory() {\r\n \t\tpotions = new EnumMap<>(PotionType.class);\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PotionType.java b/flyweight/src/main/java/com/iluwatar/PotionType.java\n--- a/flyweight/src/main/java/com/iluwatar/PotionType.java\n+++ b/flyweight/src/main/java/com/iluwatar/PotionType.java\n@@ -7,6 +7,5 @@\n  */\r\n public enum PotionType {\r\n \r\n-\tHEALING, INVISIBILITY, STRENGTH, HOLY_WATER, POISON;\r\n-\r\n+\tHEALING, INVISIBILITY, STRENGTH, HOLY_WATER, POISON\r\n }\r",
    "output": "[refactor] Update flyweight pattern."
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/WeaponType.java b/factory-method/src/main/java/com/iluwatar/WeaponType.java\n--- a/factory-method/src/main/java/com/iluwatar/WeaponType.java\n+++ b/factory-method/src/main/java/com/iluwatar/WeaponType.java\n@@ -2,23 +2,16 @@\n \r\n public enum WeaponType {\r\n \r\n-\tSHORT_SWORD, SPEAR, AXE;\r\n+\tSHORT_SWORD(\"short sword\"), SPEAR(\"spear\"), AXE(\"axe\"), UNDEFINED(\"\");\r\n \r\n-\t@Override\r\n+    private String title;\r\n+\r\n+    WeaponType(String title) {\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    @Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase SHORT_SWORD:\r\n-\t\t\ts = \"short sword\";\r\n-\t\t\tbreak;\r\n-\t\tcase SPEAR:\r\n-\t\t\ts = \"spear\";\r\n-\t\t\tbreak;\r\n-\t\tcase AXE:\r\n-\t\t\ts = \"axe\";\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn title;\r\n \t}\r\n-\r\n }\r",
    "output": "[refactor] Update WeaponType enum in factory-method pattern."
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/Armor.java b/builder/src/main/java/com/iluwatar/Armor.java\n--- a/builder/src/main/java/com/iluwatar/Armor.java\n+++ b/builder/src/main/java/com/iluwatar/Armor.java\n@@ -2,11 +2,16 @@\n \r\n public enum Armor {\r\n \r\n-\tCLOTHES, LEATHER, CHAIN_MAIL, PLATE_MAIL;\r\n+\tCLOTHES(\"clothes\"), LEATHER(\"leather\"), CHAIN_MAIL(\"chain mail\"), PLATE_MAIL(\"plate mail\");\r\n \r\n-\t@Override\r\n+    private String title;\r\n+\r\n+    Armor(String title) {\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    @Override\r\n \tpublic String toString() {\r\n-\t\treturn name().toLowerCase().replaceAll(\"_\", \" \");\r\n+\t\treturn title;\r\n \t}\r\n-\r\n }\r",
    "output": "[refactor] Update Armor enum in builder pattern."
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/Size.java b/command/src/main/java/com/iluwatar/Size.java\n--- a/command/src/main/java/com/iluwatar/Size.java\n+++ b/command/src/main/java/com/iluwatar/Size.java\n@@ -1,32 +1,22 @@\n package com.iluwatar;\r\n \r\n /**\r\n- * \r\n+ *\r\n  * Enumeration for target size.\r\n  *\r\n  */\r\n public enum Size {\r\n \r\n-\tSMALL, NORMAL, LARGE;\r\n-\r\n-\t@Override\r\n-\tpublic String toString() {\r\n+    SMALL(\"small\"), NORMAL(\"normal\"), LARGE(\"large\"), UNDEFINED(\"\");\r\n+    \r\n+    private String title;\r\n \r\n-\t\tString s = \"\";\r\n+    Size(String title) {\r\n+        this.title = title;\r\n+    }\r\n \r\n-\t\tswitch (this) {\r\n-\t\tcase LARGE:\r\n-\t\t\ts = \"large\";\r\n-\t\t\tbreak;\r\n-\t\tcase NORMAL:\r\n-\t\t\ts = \"normal\";\r\n-\t\t\tbreak;\r\n-\t\tcase SMALL:\r\n-\t\t\ts = \"small\";\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+    @Override\r\n+\tpublic String toString() {\r\n+        return title;\r\n \t}\r\n }\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Visibility.java b/command/src/main/java/com/iluwatar/Visibility.java\n--- a/command/src/main/java/com/iluwatar/Visibility.java\n+++ b/command/src/main/java/com/iluwatar/Visibility.java\n@@ -7,24 +7,16 @@\n  */\r\n public enum Visibility {\r\n \r\n-\tVISIBLE, INVISIBLE;\r\n+\tVISIBLE(\"visible\"), INVISIBLE(\"invisible\"), UNDEFINED(\"\");\r\n \r\n-\t@Override\r\n-\tpublic String toString() {\r\n-\r\n-\t\tString s = \"\";\r\n+    private String title;\r\n \r\n-\t\tswitch (this) {\r\n-\t\tcase INVISIBLE:\r\n-\t\t\ts = \"invisible\";\r\n-\t\t\tbreak;\r\n-\t\tcase VISIBLE:\r\n-\t\t\ts = \"visible\";\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n+    Visibility(String title) {\r\n+        this.title = title;\r\n+    }\r\n \r\n-\t\t}\r\n-\t\treturn s;\r\n+    @Override\r\n+\tpublic String toString() {\r\n+\t\treturn title;\r\n \t}\r\n }\r",
    "output": "[refactor] Makes enums more readable."
  },
  {
    "input": "diff --git a/service-locator/src/main/java/com/iluwatar/App.java b/service-locator/src/main/java/com/iluwatar/App.java\n--- a/service-locator/src/main/java/com/iluwatar/App.java\n+++ b/service-locator/src/main/java/com/iluwatar/App.java\n@@ -1,4 +1,4 @@\n-package com.iluwater;\n+package com.iluwatar;\n /**\n  * Service locator pattern, used to lookup jndi services \n  * and cache them for subsequent requests. \n\ndiff --git a/service-locator/src/main/java/com/iluwatar/InitContext.java b/service-locator/src/main/java/com/iluwatar/InitContext.java\n--- a/service-locator/src/main/java/com/iluwatar/InitContext.java\n+++ b/service-locator/src/main/java/com/iluwatar/InitContext.java\n@@ -1,4 +1,4 @@\n-package com.iluwater;\n+package com.iluwatar;\n \n /**\n  * For JNDI lookup of services from the web.xml. Will match name of the service name that\n@@ -16,10 +16,10 @@ public class InitContext {\n \t */\n \tpublic Object lookup(String serviceName){\n \t\tif( serviceName.equals(\"jndi/serviceA\") ){\n-\t\t\tSystem.out.println(\"Looking up service A and creating new serivce for A\");\n+\t\t\tSystem.out.println(\"Looking up service A and creating new service for A\");\n \t\t\treturn new ServiceImpl(\"jndi/serviceA\");\n \t\t} else if( serviceName.equals(\"jndi/serviceB\") ){\n-\t\t\tSystem.out.println(\"Looking up service B and creating new serivce for B\");\n+\t\t\tSystem.out.println(\"Looking up service B and creating new service for B\");\n \t\t\treturn new ServiceImpl(\"jndi/serviceB\");\n \t\t} else {\n \t\t\treturn null;\n\ndiff --git a/service-locator/src/main/java/com/iluwatar/Service.java b/service-locator/src/main/java/com/iluwatar/Service.java\n--- a/service-locator/src/main/java/com/iluwatar/Service.java\n+++ b/service-locator/src/main/java/com/iluwatar/Service.java\n@@ -1,4 +1,4 @@\n-package com.iluwater;\n+package com.iluwatar;\n \n /**\n  * This is going to be the parent service interface which we will\n\ndiff --git a/service-locator/src/main/java/com/iluwatar/ServiceCache.java b/service-locator/src/main/java/com/iluwatar/ServiceCache.java\n--- a/service-locator/src/main/java/com/iluwatar/ServiceCache.java\n+++ b/service-locator/src/main/java/com/iluwatar/ServiceCache.java\n@@ -1,4 +1,4 @@\n-package com.iluwater;\n+package com.iluwatar;\n \n import java.util.HashMap;\n import java.util.Map;\n\ndiff --git a/service-locator/src/main/java/com/iluwatar/ServiceImpl.java b/service-locator/src/main/java/com/iluwatar/ServiceImpl.java\n--- a/service-locator/src/main/java/com/iluwatar/ServiceImpl.java\n+++ b/service-locator/src/main/java/com/iluwatar/ServiceImpl.java\n@@ -1,4 +1,4 @@\n-package com.iluwater;\n+package com.iluwatar;\n \n /**\n  * This is a single service implementation of a sample service. This is the actual \n\ndiff --git a/service-locator/src/main/java/com/iluwatar/ServiceLocator.java b/service-locator/src/main/java/com/iluwatar/ServiceLocator.java\n--- a/service-locator/src/main/java/com/iluwatar/ServiceLocator.java\n+++ b/service-locator/src/main/java/com/iluwatar/ServiceLocator.java\n@@ -1,8 +1,8 @@\n-package com.iluwater;\n+package com.iluwatar;\n \n /**\n  * The service locator module.\n- * Will fetch service from cache, otherwise creats a fresh service and update cache\n+ * Will fetch service from cache, otherwise creates a fresh service and update cache\n  * \n  * @author saifasif\n  *",
    "output": "Fix package name and some spelling mistakes."
  },
  {
    "input": "diff --git a/service-locator/src/main/java/com/iluwater/App.java b/service-locator/src/main/java/com/iluwater/App.java\n--- a/service-locator/src/main/java/com/iluwater/App.java\n+++ b/service-locator/src/main/java/com/iluwater/App.java\n@@ -0,0 +1,20 @@\n+package com.iluwater;\n+/**\n+ * Service locator pattern, used to lookup jndi services \n+ * and cache them for subsequent requests. \n+ * @author saifasif\n+ *\n+ */\n+public class App {\n+\tpublic static void main(String[] args) {\n+\t\tService service = ServiceLocator.getService(\"jndi/serviceA\");\n+\t\tservice.execute();\n+\t\tservice = ServiceLocator.getService(\"jndi/serviceB\");\n+\t\tservice.execute();\n+\t\tservice = ServiceLocator.getService(\"jndi/serviceA\");\n+\t\tservice.execute();\n+\t\tservice = ServiceLocator.getService(\"jndi/serviceA\");\n+\t\tservice.execute();\t\t\n+\t}\t\n+\n+}\n\ndiff --git a/service-locator/src/main/java/com/iluwater/InitContext.java b/service-locator/src/main/java/com/iluwater/InitContext.java\n--- a/service-locator/src/main/java/com/iluwater/InitContext.java\n+++ b/service-locator/src/main/java/com/iluwater/InitContext.java\n@@ -0,0 +1,29 @@\n+package com.iluwater;\n+\n+/**\n+ * For JNDI lookup of services from the web.xml. Will match name of the service name that\n+ * is being requested and return a newly created service object with the name\n+ * @author saifasif\n+ *\n+ */\n+public class InitContext {\n+\n+\t/**\n+\t * Perform the lookup based on the service name. The returned object will need to be\n+\t * casted into a {@link Service}\n+\t * @param serviceName\n+\t * @return \n+\t */\n+\tpublic Object lookup(String serviceName){\n+\t\tif( serviceName.equals(\"jndi/serviceA\") ){\n+\t\t\tSystem.out.println(\"Looking up service A and creating new serivce for A\");\n+\t\t\treturn new ServiceImpl(\"jndi/serviceA\");\n+\t\t} else if( serviceName.equals(\"jndi/serviceB\") ){\n+\t\t\tSystem.out.println(\"Looking up service B and creating new serivce for B\");\n+\t\t\treturn new ServiceImpl(\"jndi/serviceB\");\n+\t\t} else {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+}\n\ndiff --git a/service-locator/src/main/java/com/iluwater/Service.java b/service-locator/src/main/java/com/iluwater/Service.java\n--- a/service-locator/src/main/java/com/iluwater/Service.java\n+++ b/service-locator/src/main/java/com/iluwater/Service.java\n@@ -0,0 +1,29 @@\n+package com.iluwater;\n+\n+/**\n+ * This is going to be the parent service interface which we will\n+ * use to create our services. All services will have a\n+ * <li>service name</li>\n+ * <li>unique id</li>\n+ * <li>execution work flow</li>\n+ * @author saifasif\n+ *\n+ */\n+public interface Service {\n+\t\n+\t/*\n+\t * The human readable name of the service\n+\t */\n+\tpublic String getName();\n+\t\n+\t/*\n+\t * Unique ID of the particular service\n+\t */\n+\tpublic int getId();\n+\t\n+\t/*\n+\t * The workflow method that defines what this service does\n+\t */\n+\tpublic void execute();\n+\n+}\n\ndiff --git a/service-locator/src/main/java/com/iluwater/ServiceCache.java b/service-locator/src/main/java/com/iluwater/ServiceCache.java\n--- a/service-locator/src/main/java/com/iluwater/ServiceCache.java\n+++ b/service-locator/src/main/java/com/iluwater/ServiceCache.java\n@@ -0,0 +1,46 @@\n+package com.iluwater;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The service cache implementation which will cache services that are being created.\n+ * On first hit, the cache will be empty and thus any service that is being requested, will be \n+ * created fresh and then placed into the cache map. On next hit, if same service name will\n+ * be requested, it will be returned from the cache \n+ * @author saifasif\n+ *\n+ */\n+public class ServiceCache {\n+\t\n+\tprivate Map<String, Service> serviceCache;\n+\n+\tpublic ServiceCache() {\n+\t\tserviceCache = new HashMap<String, Service>();\n+\t}\n+\n+\t/**\n+\t * Get the service from the cache. null if no service is found matching the \n+\t * name\n+\t * @param serviceName\n+\t * @return {@link Service}\n+\t */\n+\tpublic Service getService(String serviceName){\n+\t\tService cachedService = null;\n+\t\tfor (String serviceJndiName : serviceCache.keySet()){\n+\t\t\tif( serviceJndiName.equals( serviceName ) ){\n+\t\t\t\tcachedService = serviceCache.get(serviceJndiName);\n+\t\t\t\tSystem.out.println(\"(cache call) Fetched service \" + cachedService.getName() + \"(\"+cachedService.getId()+\") from cache... !\");\n+\t\t\t}\n+\t\t}\n+\t\treturn cachedService;\n+\t}\n+\n+\t/**\n+\t * Adds the service into the cache map\n+\t * @param newService\n+\t */\n+\tpublic void addService(Service newService){\n+\t\tserviceCache.put(newService.getName(), newService);\n+\t}\n+}\n\ndiff --git a/service-locator/src/main/java/com/iluwater/ServiceImpl.java b/service-locator/src/main/java/com/iluwater/ServiceImpl.java\n--- a/service-locator/src/main/java/com/iluwater/ServiceImpl.java\n+++ b/service-locator/src/main/java/com/iluwater/ServiceImpl.java\n@@ -0,0 +1,37 @@\n+package com.iluwater;\n+\n+/**\n+ * This is a single service implementation of a sample service. This is the actual \n+ * service that will process the request. The reference for this service is to \n+ * be looked upon in the JNDI server that can be set in the web.xml deployment descriptor\n+ * @author saifasif\n+ *\n+ */\n+public class ServiceImpl implements Service {\n+\t\n+\tprivate String serviceName;\n+\tprivate int id;\n+\t\n+\tpublic ServiceImpl(String serviceName) {\n+\t\t// set the service name\n+\t\tthis.serviceName = serviceName;\n+\t\t\n+\t\t// Generate a random id to this service object\n+\t\tthis.id = (int)Math.floor(Math.random()*1000)+1;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn serviceName;\n+\t}\n+\n+\t@Override\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\t@Override\n+\tpublic void execute() {\n+\t\tSystem.out.println(\"Service \" + getName() + \" is now executing with id \" + getId());\n+\t}\n+}\n\ndiff --git a/service-locator/src/main/java/com/iluwater/ServiceLocator.java b/service-locator/src/main/java/com/iluwater/ServiceLocator.java\n--- a/service-locator/src/main/java/com/iluwater/ServiceLocator.java\n+++ b/service-locator/src/main/java/com/iluwater/ServiceLocator.java\n@@ -0,0 +1,37 @@\n+package com.iluwater;\n+\n+/**\n+ * The service locator module.\n+ * Will fetch service from cache, otherwise creats a fresh service and update cache\n+ * \n+ * @author saifasif\n+ *\n+ */\n+public class ServiceLocator {\n+\t\n+\tprivate static ServiceCache serviceCache = new ServiceCache();\n+\t\n+\t/**\n+\t * Fetch the service with the name param from the cache first, \n+\t * if no service is found, lookup the service from the {@link InitContext} and \n+\t * then add the newly created service into the cache map for future requests.\n+\t * @param serviceJndiName\n+\t * @return {@link Service}\n+\t */\n+\tpublic static Service getService(String serviceJndiName){\n+\t\tService serviceObj = serviceCache.getService(serviceJndiName);\n+\t\tif ( serviceObj != null ){\n+\t\t\treturn serviceObj;\n+\t\t} else {\n+\t\t\t/*\n+\t\t\t * If we are unable to retrive anything from cache, then \n+\t\t\t * lookup the service and add it in the cache map\n+\t\t\t */\n+\t\t\tInitContext ctx = new InitContext();\n+\t\t\tserviceObj = (Service) ctx.lookup(serviceJndiName);\n+\t\t\tserviceCache.addService(serviceObj);\n+\t\t\treturn serviceObj;\n+\t\t}\n+\t}\n+\n+}",
    "output": "Implementatation of the Service locator pattern"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -21,6 +21,15 @@ public static void main(String[] args) {\n \t\t\t\t.getInstance();\r\n \t\tSystem.out.println(\"threadSafeIvoryTower1=\" + threadSafeIvoryTower1);\r\n \t\tSystem.out.println(\"threadSafeIvoryTower2=\" + threadSafeIvoryTower2);\r\n-\r\n+\t\t\r\n+\t\tInitializingOnDemandHolderIdiom demandHolderIdiom = InitializingOnDemandHolderIdiom.getInstance();\r\n+\t\tSystem.out.println(demandHolderIdiom);\r\n+\t\tInitializingOnDemandHolderIdiom demandHolderIdiom2 = InitializingOnDemandHolderIdiom.getInstance();\r\n+\t\tSystem.out.println(demandHolderIdiom2);\r\n+\t\t\r\n+\t\tThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();\r\n+\t\tSystem.out.println(dcl1);\r\n+\t\tThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();\r\n+\t\tSystem.out.println(dcl2);\r\n \t}\r\n }\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/InitializingOnDemandHolderIdiom.java b/singleton/src/main/java/com/iluwatar/InitializingOnDemandHolderIdiom.java\n--- a/singleton/src/main/java/com/iluwatar/InitializingOnDemandHolderIdiom.java\n+++ b/singleton/src/main/java/com/iluwatar/InitializingOnDemandHolderIdiom.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * \n+ * @author mortezaadi@gmail.com\n+ *\n+ */\n+public class InitializingOnDemandHolderIdiom implements Serializable{\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static class HelperHolder {\n+\t\tpublic static final InitializingOnDemandHolderIdiom INSTANCE = new InitializingOnDemandHolderIdiom();\n+\t}\n+\n+\tpublic static InitializingOnDemandHolderIdiom getInstance() {\n+\t\treturn HelperHolder.INSTANCE;\n+\t}\n+\n+\tprivate InitializingOnDemandHolderIdiom() {\n+\t}\n+\n+\tprotected Object readResolve() {\n+\t\treturn getInstance();\n+\t}\n+\n+}\n\ndiff --git a/singleton/src/main/java/com/iluwatar/ThreadSafeDoubleCheckLocking.java b/singleton/src/main/java/com/iluwatar/ThreadSafeDoubleCheckLocking.java\n--- a/singleton/src/main/java/com/iluwatar/ThreadSafeDoubleCheckLocking.java\n+++ b/singleton/src/main/java/com/iluwatar/ThreadSafeDoubleCheckLocking.java\n@@ -0,0 +1,36 @@\n+package com.iluwatar;\n+\n+/**\n+ * Broken under Java 1.4.\n+ * @author mortezaadi@gmail.com\n+ *\n+ */\n+public class ThreadSafeDoubleCheckLocking {\n+\t\n+\tprivate static volatile ThreadSafeDoubleCheckLocking INSTANCE;\n+\n+\t/**\n+\t * private constructor to prevent client from instantiating.\n+\t * \n+\t */\n+\tprivate ThreadSafeDoubleCheckLocking() {\n+\t\t//to prevent instantiating by Reflection call \n+\t\tif(INSTANCE != null)\n+\t\t\tthrow new IllegalStateException(\"Already initialized.\");\n+\t}\n+\t\n+\tpublic static ThreadSafeDoubleCheckLocking getInstance() {\n+\t\t//local variable increases performance by 25 percent \n+\t\t//Joshua Bloch \"Effective Java, Second Edition\", p. 283-284\n+\t\tThreadSafeDoubleCheckLocking result = INSTANCE;\n+\t\tif (result == null) {\n+\t\t\tsynchronized (ThreadSafeDoubleCheckLocking.class) {\n+\t\t\t\tresult = INSTANCE;\n+\t\t\t\tif (result == null) {\n+\t\t\t\t\tINSTANCE = result = new ThreadSafeDoubleCheckLocking();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+}",
    "output": "Add DCL and Initializing on demand holder idiom."
  },
  {
    "input": "diff --git a/servant/src/main/java/com/iluwatar/King.java b/servant/src/main/java/com/iluwatar/King.java\n--- a/servant/src/main/java/com/iluwatar/King.java\n+++ b/servant/src/main/java/com/iluwatar/King.java\n@@ -5,12 +5,12 @@ public class King implements Royalty{\n \tprivate boolean complimentReceived = false;\n \t\n \t@Override\n-\tpublic void feed() {\n+\tpublic void getFed() {\n \t\tisHungry = false;\n \t}\n \n \t@Override\n-\tpublic void giveDrink() {\n+\tpublic void getDrink() {\n \t\tisDrunk = true;\n \t}\n \t\n\ndiff --git a/servant/src/main/java/com/iluwatar/Queen.java b/servant/src/main/java/com/iluwatar/Queen.java\n--- a/servant/src/main/java/com/iluwatar/Queen.java\n+++ b/servant/src/main/java/com/iluwatar/Queen.java\n@@ -5,12 +5,12 @@ public class Queen implements Royalty{\n \tprivate boolean isFlirty = true, complimentReceived = false;\n \t\n \t@Override\n-\tpublic void feed() {\n+\tpublic void getFed() {\n \t\tisHungry = false;\n \t}\n \n \t@Override\n-\tpublic void giveDrink() {\n+\tpublic void getDrink() {\n \t\tisDrunk = true;\n \t}\n \t\n\ndiff --git a/servant/src/main/java/com/iluwatar/Royalty.java b/servant/src/main/java/com/iluwatar/Royalty.java\n--- a/servant/src/main/java/com/iluwatar/Royalty.java\n+++ b/servant/src/main/java/com/iluwatar/Royalty.java\n@@ -1,8 +1,8 @@\n package com.iluwatar;\n \n interface Royalty {\n-\tpublic void feed();\n-\tpublic void giveDrink();\n+\tpublic void getFed();\n+\tpublic void getDrink();\n \tpublic void changeMood();\n \tpublic void receiveCompliments();\n \tpublic boolean getMood();\n\ndiff --git a/servant/src/main/java/com/iluwatar/Servant.java b/servant/src/main/java/com/iluwatar/Servant.java\n--- a/servant/src/main/java/com/iluwatar/Servant.java\n+++ b/servant/src/main/java/com/iluwatar/Servant.java\n@@ -10,11 +10,11 @@ public Servant(String name){\n \t}\n \n \tpublic void feed(Royalty r){\n-\t\tr.feed();\n+\t\tr.getFed();\n \t}\n \t\n \tpublic void giveWine(Royalty r){\n-\t\tr.giveDrink();\n+\t\tr.getDrink();\n \t}\n \t\n \tpublic void GiveCompliments(Royalty r){",
    "output": "Change method names in Royalty to make Servant relation clearer"
  },
  {
    "input": "diff --git a/servant/src/main/java/com/iluwatar/App.java b/servant/src/main/java/com/iluwatar/App.java\n--- a/servant/src/main/java/com/iluwatar/App.java\n+++ b/servant/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,51 @@\n+package com.iluwatar;\n+\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Servant offers some functionality to a group of classes without defining that functionality in each of them. \n+ * A Servant is a class whose instance provides methods that take care of a desired service,\n+ * while objects for which the servant does something, are taken as parameters.\n+ *\n+ */\n+public class App {\n+\tstatic Servant jenkins = new Servant(\"Jenkins\");\n+\tstatic Servant travis = new Servant(\"Travis\");\n+\t\n+\tpublic static void main( String[] args ){\n+\t\tscenario(jenkins, 1);\n+\t\tscenario(travis, 0);\n+\t}\n+\t\n+\t\n+\tpublic static void scenario(Servant servant, int compliment){\n+\t\tKing k = new King();\n+\t\tQueen q = new Queen();\n+\t\t\n+\t\tArrayList<Royalty> guests = new ArrayList<>();\n+\t\tguests.add(k);\n+\t\tguests.add(q);\n+\t\t\n+\t\t//feed\n+\t\tservant.feed(k);\n+\t\tservant.feed(q);\n+\t\t//serve drinks\n+\t\tservant.giveWine(k);\n+\t\tservant.giveWine(q);\n+\t\t//compliment\n+\t\tservant.GiveCompliments( guests.get(compliment) );\n+\t\t\n+\t\t//outcome of the night\n+\t\tfor(Royalty r : guests)\n+\t\t\tr.changeMood();\n+\t\t\n+\t\t//check your luck\n+\t\tif( servant.checkIfYouWillBeHanged(guests) )\n+\t\t\tSystem.out.println(servant.name + \" will live another day\");\n+\t\telse\n+\t\t\tSystem.out.println(\"Poor \" + servant.name + \". His days are numbered\");\n+\t}\n+\t\n+\t\n+}\n\ndiff --git a/servant/src/main/java/com/iluwatar/King.java b/servant/src/main/java/com/iluwatar/King.java\n--- a/servant/src/main/java/com/iluwatar/King.java\n+++ b/servant/src/main/java/com/iluwatar/King.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar;\n+\n+public class King implements Royalty{\n+\tprivate boolean isDrunk = false, isHungry = true, isHappy = false;\n+\tprivate boolean complimentReceived = false;\n+\t\n+\t@Override\n+\tpublic void feed() {\n+\t\tisHungry = false;\n+\t}\n+\n+\t@Override\n+\tpublic void giveDrink() {\n+\t\tisDrunk = true;\n+\t}\n+\t\n+\tpublic void receiveCompliments(){\n+\t\tcomplimentReceived = true;\n+\t}\n+\n+\t@Override\n+\tpublic void changeMood() {\n+\t\tif(!isHungry && isDrunk) isHappy = true;\n+\t\tif( complimentReceived ) isHappy = false;\n+\t}\n+\n+\t@Override\n+\tpublic boolean getMood() {\n+\t\treturn isHappy;\n+\t}\n+}\n\ndiff --git a/servant/src/main/java/com/iluwatar/Queen.java b/servant/src/main/java/com/iluwatar/Queen.java\n--- a/servant/src/main/java/com/iluwatar/Queen.java\n+++ b/servant/src/main/java/com/iluwatar/Queen.java\n@@ -0,0 +1,35 @@\n+package com.iluwatar;\n+\n+public class Queen implements Royalty{\n+\tprivate boolean isDrunk = true, isHungry = false, isHappy = false;\n+\tprivate boolean isFlirty = true, complimentReceived = false;\n+\t\n+\t@Override\n+\tpublic void feed() {\n+\t\tisHungry = false;\n+\t}\n+\n+\t@Override\n+\tpublic void giveDrink() {\n+\t\tisDrunk = true;\n+\t}\n+\t\n+\tpublic void receiveCompliments(){\n+\t\tcomplimentReceived = true;\n+\t}\n+\n+\t@Override\n+\tpublic void changeMood() {\n+\t\tif( complimentReceived && isFlirty && isDrunk ) isHappy = true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean getMood() {\n+\t\treturn isHappy;\n+\t}\n+\t\n+\tpublic void setFlirtiness(boolean f){\n+\t\tthis.isFlirty = f;\n+\t}\n+\n+}\n\ndiff --git a/servant/src/main/java/com/iluwatar/Royalty.java b/servant/src/main/java/com/iluwatar/Royalty.java\n--- a/servant/src/main/java/com/iluwatar/Royalty.java\n+++ b/servant/src/main/java/com/iluwatar/Royalty.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\n+\n+interface Royalty {\n+\tpublic void feed();\n+\tpublic void giveDrink();\n+\tpublic void changeMood();\n+\tpublic void receiveCompliments();\n+\tpublic boolean getMood();\n+}\n\ndiff --git a/servant/src/main/java/com/iluwatar/Servant.java b/servant/src/main/java/com/iluwatar/Servant.java\n--- a/servant/src/main/java/com/iluwatar/Servant.java\n+++ b/servant/src/main/java/com/iluwatar/Servant.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar;\n+\n+import java.util.ArrayList;\n+\n+public class Servant {\n+\tpublic String name;\n+\t\n+\tpublic Servant(String name){\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic void feed(Royalty r){\n+\t\tr.feed();\n+\t}\n+\t\n+\tpublic void giveWine(Royalty r){\n+\t\tr.giveDrink();\n+\t}\n+\t\n+\tpublic void GiveCompliments(Royalty r){\n+\t\tr.receiveCompliments();\n+\t}\n+\t\n+\tpublic boolean checkIfYouWillBeHanged(ArrayList<Royalty> tableGuests){\n+\t\tboolean anotherDay = true;\n+\t\tfor( Royalty r : tableGuests )\n+\t\t\tif( !r.getMood() ) anotherDay = false;\n+\t\t\t\n+\t\treturn anotherDay;\n+\t}\n+}",
    "output": "Add Servant Design pattern classes"
  },
  {
    "input": "diff --git a/visitor/src/main/java/com/iluwatar/CommanderVisitor.java b/visitor/src/main/java/com/iluwatar/CommanderVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/CommanderVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/CommanderVisitor.java\n@@ -4,14 +4,10 @@ public class CommanderVisitor implements UnitVisitor {\n \r\n \t@Override\r\n \tpublic void visitSoldier(Soldier soldier) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\r\n \t}\r\n \r\n \t@Override\r\n \tpublic void visitSergeant(Sergeant sergeant) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\r\n \t}\r\n \r\n \t@Override\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/SergeantVisitor.java b/visitor/src/main/java/com/iluwatar/SergeantVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/SergeantVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/SergeantVisitor.java\n@@ -4,8 +4,6 @@ public class SergeantVisitor implements UnitVisitor {\n \r\n \t@Override\r\n \tpublic void visitSoldier(Soldier soldier) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\r\n \t}\r\n \r\n \t@Override\r\n@@ -15,8 +13,6 @@ public void visitSergeant(Sergeant sergeant) {\n \r\n \t@Override\r\n \tpublic void visitCommander(Commander commander) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\r\n \t}\r\n \r\n }\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/SoldierVisitor.java b/visitor/src/main/java/com/iluwatar/SoldierVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/SoldierVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/SoldierVisitor.java\n@@ -9,14 +9,10 @@ public void visitSoldier(Soldier soldier) {\n \r\n \t@Override\r\n \tpublic void visitSergeant(Sergeant sergeant) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\r\n \t}\r\n \r\n \t@Override\r\n \tpublic void visitCommander(Commander commander) {\r\n-\t\t// TODO Auto-generated method stub\r\n-\r\n \t}\r\n \r\n }\r",
    "output": "Remove TODO markers from visitor example."
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n@@ -3,9 +3,11 @@\n /**\n  *\n  * Enum Singleton class.\n+ * Effective Java 2nd Edition (Joshua Bloch) p. 18\n  *\n  */\n public enum EnumIvoryTower {\n+\t\n     INSTANCE;\n \n     @Override",
    "output": "Add book reference to singleton enum implementation."
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -22,8 +22,8 @@ public static void main(String[] args) {\n \t\tSystem.out.println(\"threadSafeIvoryTower1=\" + threadSafeIvoryTower1);\r\n \t\tSystem.out.println(\"threadSafeIvoryTower2=\" + threadSafeIvoryTower2);\r\n \r\n-\t\tEnumIvoryTower enumIvoryTower1 = EnumIvoryTower.getInstance();\r\n-\t\tEnumIvoryTower enumIvoryTower2 = EnumIvoryTower.getInstance();\r\n+\t\tEnumIvoryTower enumIvoryTower1 = EnumIvoryTower.INSTANCE;\r\n+\t\tEnumIvoryTower enumIvoryTower2 = EnumIvoryTower.INSTANCE;\r\n \t\tSystem.out.println(\"enumIvoryTower1=\" + enumIvoryTower1);\r\n \t\tSystem.out.println(\"enumIvoryTower2=\" + enumIvoryTower2);\r\n \t}\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n@@ -8,10 +8,6 @@\n public enum EnumIvoryTower {\n     INSTANCE;\n \n-    public static EnumIvoryTower getInstance() {\n-        return INSTANCE;\n-    }\n-\n     @Override\n     public String toString() {\n         return getDeclaringClass().getCanonicalName() + \"@\" + hashCode();",
    "output": "Remove the getInstance method"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -24,7 +24,7 @@ public static void main(String[] args) {\n \r\n \t\tEnumIvoryTower enumIvoryTower1 = EnumIvoryTower.getInstance();\r\n \t\tEnumIvoryTower enumIvoryTower2 = EnumIvoryTower.getInstance();\r\n-\t\tSystem.out.println(\"enumIvoryTower1=\" + enumIvoryTower1.getDeclaringClass().getCanonicalName() + \"@\" + enumIvoryTower1.hashCode());\r\n-\t\tSystem.out.println(\"enumIvoryTower2=\" + enumIvoryTower2.getDeclaringClass().getCanonicalName() + \"@\" + enumIvoryTower2.hashCode());\r\n+\t\tSystem.out.println(\"enumIvoryTower1=\" + enumIvoryTower1);\r\n+\t\tSystem.out.println(\"enumIvoryTower2=\" + enumIvoryTower2);\r\n \t}\r\n }\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n@@ -11,4 +11,9 @@ public enum EnumIvoryTower {\n     public static EnumIvoryTower getInstance() {\n         return INSTANCE;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return getDeclaringClass().getCanonicalName() + \"@\" + hashCode();\n+    }\n }",
    "output": "Simplify the println"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -22,5 +22,9 @@ public static void main(String[] args) {\n \t\tSystem.out.println(\"threadSafeIvoryTower1=\" + threadSafeIvoryTower1);\r\n \t\tSystem.out.println(\"threadSafeIvoryTower2=\" + threadSafeIvoryTower2);\r\n \r\n+\t\tEnumIvoryTower enumIvoryTower1 = EnumIvoryTower.getInstance();\r\n+\t\tEnumIvoryTower enumIvoryTower2 = EnumIvoryTower.getInstance();\r\n+\t\tSystem.out.println(\"enumIvoryTower1=\" + enumIvoryTower1.getDeclaringClass().getCanonicalName() + \"@\" + enumIvoryTower1.hashCode());\r\n+\t\tSystem.out.println(\"enumIvoryTower2=\" + enumIvoryTower2.getDeclaringClass().getCanonicalName() + \"@\" + enumIvoryTower2.hashCode());\r\n \t}\r\n }\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\n+\n+/**\n+ *\n+ * Enum Singleton class.\n+ *\n+ */\n+public enum EnumIvoryTower {\n+    INSTANCE;\n+\n+    public static EnumIvoryTower getInstance() {\n+        return INSTANCE;\n+    }\n+}",
    "output": "Enum approach of singleton"
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/App.java b/observer/src/main/java/com/iluwatar/App.java\n--- a/observer/src/main/java/com/iluwatar/App.java\n+++ b/observer/src/main/java/com/iluwatar/App.java\n@@ -24,9 +24,10 @@ public static void main(String[] args) {\n \t\tweather.timePasses();\r\n \r\n \t\t// Generic observer inspired by Java Generics and Collection by Naftalin & Wadler\r\n+\t\tSystem.out.println(\"\\n--Running generic version--\");\r\n \t\tGWeather gWeather = new GWeather();\r\n-\t\tgWeather.addObserver(new GHobbits());\r\n \t\tgWeather.addObserver(new GOrcs());\r\n+\t\tgWeather.addObserver(new GHobbits());\r\n \r\n \t\tgWeather.timePasses();\r\n \t\tgWeather.timePasses();\r",
    "output": "Add message to observer app"
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/App.java b/observer/src/main/java/com/iluwatar/App.java\n--- a/observer/src/main/java/com/iluwatar/App.java\n+++ b/observer/src/main/java/com/iluwatar/App.java\n@@ -1,5 +1,9 @@\n package com.iluwatar;\r\n \r\n+import com.iluwatar.generic.GHobbits;\r\n+import com.iluwatar.generic.GOrcs;\r\n+import com.iluwatar.generic.GWeather;\r\n+\r\n /**\r\n  * \r\n  * Observer pattern defines one-to-many relationship between objects. The target\r\n@@ -19,5 +23,15 @@ public static void main(String[] args) {\n \t\tweather.timePasses();\r\n \t\tweather.timePasses();\r\n \r\n+\t\t// Generic observer inspired by Java Generics and Collection by Naftalin & Wadler\r\n+\t\tGWeather gWeather = new GWeather();\r\n+\t\tgWeather.addObserver(new GHobbits());\r\n+\t\tgWeather.addObserver(new GOrcs());\r\n+\r\n+\t\tgWeather.timePasses();\r\n+\t\tgWeather.timePasses();\r\n+\t\tgWeather.timePasses();\r\n+\t\tgWeather.timePasses();\r\n+\r\n \t}\r\n }\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/generic/GHobbits.java b/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n--- a/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n+++ b/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar.generic;\n+\n+import com.iluwatar.WeatherType;\n+\n+public class GHobbits implements Race {\n+    @Override\n+    public void update(GWeather o, WeatherType weatherType) {\n+        switch (weatherType) {\n+            case COLD:\n+                System.out.println(\"The hobbits are shivering in the cold weather.\");\n+                break;\n+            case RAINY:\n+                System.out.println(\"The hobbits look for cover from the rain.\");\n+                break;\n+            case SUNNY:\n+                System.out.println(\"The happy hobbits bade in the warm sun.\");\n+                break;\n+            case WINDY:\n+                System.out.println(\"The hobbits hold their hats tightly in the windy weather.\");\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+}\n\ndiff --git a/observer/src/main/java/com/iluwatar/generic/GOrcs.java b/observer/src/main/java/com/iluwatar/generic/GOrcs.java\n--- a/observer/src/main/java/com/iluwatar/generic/GOrcs.java\n+++ b/observer/src/main/java/com/iluwatar/generic/GOrcs.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar.generic;\n+\n+import com.iluwatar.WeatherType;\n+\n+public class GOrcs implements Race {\n+    @Override\n+    public void update(GWeather weather, WeatherType weatherType) {\n+        switch (weatherType) {\n+            case COLD:\n+                System.out.println(\"The orcs are freezing cold.\");\n+                break;\n+            case RAINY:\n+                System.out.println(\"The orcs are dripping wet.\");\n+                break;\n+            case SUNNY:\n+                System.out.println(\"The sun hurts the orcs' eyes.\");\n+                break;\n+            case WINDY:\n+                System.out.println(\"The orc smell almost vanishes in the wind.\");\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+}\n\ndiff --git a/observer/src/main/java/com/iluwatar/generic/GWeather.java b/observer/src/main/java/com/iluwatar/generic/GWeather.java\n--- a/observer/src/main/java/com/iluwatar/generic/GWeather.java\n+++ b/observer/src/main/java/com/iluwatar/generic/GWeather.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar.generic;\n+\n+import com.iluwatar.WeatherType;\n+\n+public class GWeather extends Observable<GWeather, Race, WeatherType> {\n+\n+    private WeatherType currentWeather;\n+\n+    public GWeather() {\n+        currentWeather = WeatherType.SUNNY;\n+    }\n+\n+    public void timePasses() {\n+        WeatherType[] enumValues = WeatherType.values();\n+        currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];\n+        System.out.println(\"The weather changed to \" + currentWeather + \".\");\n+        notifyObservers(currentWeather);\n+    }\n+}\n\ndiff --git a/observer/src/main/java/com/iluwatar/generic/Observable.java b/observer/src/main/java/com/iluwatar/generic/Observable.java\n--- a/observer/src/main/java/com/iluwatar/generic/Observable.java\n+++ b/observer/src/main/java/com/iluwatar/generic/Observable.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar.generic;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * Generic observer inspired by Java Generics and Collection by Naftalin & Wadler\n+ *\n+ * @param <S> Subject\n+ * @param <O> Observer\n+ * @param <A> Argument type\n+ */\n+public abstract class Observable<S extends Observable<S, O, A>, O extends Observer<S, O, A>, A> {\n+\n+    protected List<O> observers;\n+\n+    public Observable() {\n+        this.observers = new CopyOnWriteArrayList<>();\n+    }\n+\n+    public void addObserver(O observer) {\n+        this.observers.add(observer);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void notifyObservers(A argument) {\n+        for (O observer : observers) {\n+            observer.update((S) this, argument);\n+        }\n+    }\n+}\n\ndiff --git a/observer/src/main/java/com/iluwatar/generic/Observer.java b/observer/src/main/java/com/iluwatar/generic/Observer.java\n--- a/observer/src/main/java/com/iluwatar/generic/Observer.java\n+++ b/observer/src/main/java/com/iluwatar/generic/Observer.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar.generic;\n+\n+public interface Observer<S extends Observable<S, O, A>, O extends Observer<S, O, A>, A> {\n+    public void update(S subject, A argument);\n+}\n\ndiff --git a/observer/src/main/java/com/iluwatar/generic/Race.java b/observer/src/main/java/com/iluwatar/generic/Race.java\n--- a/observer/src/main/java/com/iluwatar/generic/Race.java\n+++ b/observer/src/main/java/com/iluwatar/generic/Race.java\n@@ -0,0 +1,6 @@\n+package com.iluwatar.generic;\n+\n+import com.iluwatar.WeatherType;\n+\n+public interface Race extends Observer<GWeather, Race, WeatherType> {\n+}",
    "output": "Add example of generic observer"
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/Armor.java b/builder/src/main/java/com/iluwatar/Armor.java\n--- a/builder/src/main/java/com/iluwatar/Armor.java\n+++ b/builder/src/main/java/com/iluwatar/Armor.java\n@@ -6,7 +6,7 @@ public enum Armor {\n \r\n \t@Override\r\n \tpublic String toString() {\r\n-\t\treturn name().toLowerCase();\r\n+\t\treturn name().toLowerCase().replaceAll(\"_\", \" \");\r\n \t}\r\n \r\n }\r",
    "output": "Accepted suggestion note by @iluwatar"
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/Armor.java b/builder/src/main/java/com/iluwatar/Armor.java\n--- a/builder/src/main/java/com/iluwatar/Armor.java\n+++ b/builder/src/main/java/com/iluwatar/Armor.java\n@@ -6,22 +6,7 @@ public enum Armor {\n \r\n \t@Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase CLOTHES:\r\n-\t\t\ts = \"clothes\";\r\n-\t\t\tbreak;\r\n-\t\tcase LEATHER:\r\n-\t\t\ts = \"leather armor\";\r\n-\t\t\tbreak;\r\n-\t\tcase CHAIN_MAIL:\r\n-\t\t\ts = \"chain mail\";\r\n-\t\t\tbreak;\r\n-\t\tcase PLATE_MAIL:\r\n-\t\t\ts = \"plate mail\";\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn name().toLowerCase();\r\n \t}\r\n \r\n }\r\n\ndiff --git a/builder/src/main/java/com/iluwatar/HairColor.java b/builder/src/main/java/com/iluwatar/HairColor.java\n--- a/builder/src/main/java/com/iluwatar/HairColor.java\n+++ b/builder/src/main/java/com/iluwatar/HairColor.java\n@@ -6,25 +6,7 @@ public enum HairColor {\n \r\n \t@Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase WHITE:\r\n-\t\t\ts = \"white\";\r\n-\t\t\tbreak;\r\n-\t\tcase BLOND:\r\n-\t\t\ts = \"blond\";\r\n-\t\t\tbreak;\r\n-\t\tcase RED:\r\n-\t\t\ts = \"red\";\r\n-\t\t\tbreak;\r\n-\t\tcase BROWN:\r\n-\t\t\ts = \"brown\";\r\n-\t\t\tbreak;\r\n-\t\tcase BLACK:\r\n-\t\t\ts = \"black\";\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn name().toLowerCase();\r\n \t}\r\n \r\n }\r\n\ndiff --git a/builder/src/main/java/com/iluwatar/HairType.java b/builder/src/main/java/com/iluwatar/HairType.java\n--- a/builder/src/main/java/com/iluwatar/HairType.java\n+++ b/builder/src/main/java/com/iluwatar/HairType.java\n@@ -6,25 +6,7 @@ public enum HairType {\n \r\n \t@Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase BALD:\r\n-\t\t\ts = \"bold\";\r\n-\t\t\tbreak;\r\n-\t\tcase SHORT:\r\n-\t\t\ts = \"short\";\r\n-\t\t\tbreak;\r\n-\t\tcase CURLY:\r\n-\t\t\ts = \"curly\";\r\n-\t\t\tbreak;\r\n-\t\tcase LONG_STRAIGHT:\r\n-\t\t\ts = \"long straight\";\r\n-\t\t\tbreak;\r\n-\t\tcase LONG_CURLY:\r\n-\t\t\ts = \"long curly\";\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn name().toLowerCase().replaceAll(\"_\", \" \");\r\n \t}\r\n \r\n }\r\n\ndiff --git a/builder/src/main/java/com/iluwatar/Profession.java b/builder/src/main/java/com/iluwatar/Profession.java\n--- a/builder/src/main/java/com/iluwatar/Profession.java\n+++ b/builder/src/main/java/com/iluwatar/Profession.java\n@@ -6,22 +6,7 @@ public enum Profession {\n \r\n \t@Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase WARRIOR:\r\n-\t\t\ts = \"Warrior\";\r\n-\t\t\tbreak;\r\n-\t\tcase THIEF:\r\n-\t\t\ts = \"Thief\";\r\n-\t\t\tbreak;\r\n-\t\tcase MAGE:\r\n-\t\t\ts = \"Mage\";\r\n-\t\t\tbreak;\r\n-\t\tcase PRIEST:\r\n-\t\t\ts = \"Priest\";\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn name().toLowerCase();\r\n \t}\r\n \r\n }\r\n\ndiff --git a/builder/src/main/java/com/iluwatar/Weapon.java b/builder/src/main/java/com/iluwatar/Weapon.java\n--- a/builder/src/main/java/com/iluwatar/Weapon.java\n+++ b/builder/src/main/java/com/iluwatar/Weapon.java\n@@ -6,25 +6,7 @@ public enum Weapon {\n \r\n \t@Override\r\n \tpublic String toString() {\r\n-\t\tString s = \"\";\r\n-\t\tswitch (this) {\r\n-\t\tcase DAGGER:\r\n-\t\t\ts = \"dagger\";\r\n-\t\t\tbreak;\r\n-\t\tcase SWORD:\r\n-\t\t\ts = \"sword\";\r\n-\t\t\tbreak;\r\n-\t\tcase AXE:\r\n-\t\t\ts = \"axe\";\r\n-\t\t\tbreak;\r\n-\t\tcase WARHAMMER:\r\n-\t\t\ts = \"warhammer\";\r\n-\t\t\tbreak;\r\n-\t\tcase BOW:\r\n-\t\t\ts = \"bow\";\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\treturn s;\r\n+\t\treturn name().toLowerCase();\r\n \t}\r\n \r\n }\r",
    "output": "Simplify toString method"
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -10,11 +10,11 @@ public String toString() {\n \t\tcase ENEMY:\r\n \t\t\treturn \"spotted enemies\";\r\n \t\tcase GOLD:\r\n-            return \"found gold\";\r\n+\t\t\treturn \"found gold\";\r\n \t\tcase HUNT:\r\n-            return \"hunted a rabbit\";\r\n+\t\t\treturn \"hunted a rabbit\";\r\n \t\tcase TALE:\r\n-            return \"tells a tale\";\r\n+\t\t\treturn \"tells a tale\";\r\n \t\t}\r\n \t\treturn \"\";\r\n \t}\r",
    "output": "Fix spaces instead of tabs."
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -6,23 +6,16 @@ public enum Action {\n \r\n \tpublic String toString() {\r\n \r\n-\t\tString s = \"\";\r\n \t\tswitch (this) {\r\n \t\tcase ENEMY:\r\n-\t\t\ts = \"spotted enemies\";\r\n-\t\t\tbreak;\r\n+\t\t\treturn \"spotted enemies\";\r\n \t\tcase GOLD:\r\n-\t\t\ts = \"found gold\";\r\n-\t\t\tbreak;\r\n+            return \"found gold\";\r\n \t\tcase HUNT:\r\n-\t\t\ts = \"hunted a rabbit\";\r\n-\t\t\tbreak;\r\n+            return \"hunted a rabbit\";\r\n \t\tcase TALE:\r\n-\t\t\ts = \"tells a tale\";\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n+            return \"tells a tale\";\r\n \t\t}\r\n-\t\treturn s;\r\n-\t};\r\n+\t\treturn \"\";\r\n+\t}\r\n }\r",
    "output": "Improve a toString method. Makes it more readable and deletes an useless semicolon."
  },
  {
    "input": "diff --git a/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java\n@@ -29,17 +29,17 @@ public String loadData() {\n \t\ttry {\n \t\t\tBufferedReader br = new BufferedReader(new FileReader(new File(\n \t\t\t\t\tthis.fileName)));\n-\t\t\tString text = \"\";\n-\t\t\tString line = \"\";\n+\t\t\tStringBuilder sb = new StringBuilder();\n+\t\t\tString line;\n \n \t\t\twhile ((line = br.readLine()) != null) {\n-\t\t\t\ttext += line + \"\\n\";\n+\t\t\t\tsb.append(line).append('\\n');\n \t\t\t}\n \n \t\t\tthis.loaded = true;\n \t\t\tbr.close();\n \n-\t\t\treturn text;\n+\t\t\treturn sb.toString();\n \t\t}\n \n \t\tcatch (Exception e) {",
    "output": "Uses a StringBuilder to improve performance.\nAlso stops initializing a variable (removes an unused initialization)."
  },
  {
    "input": "diff --git a/interpreter/src/main/java/com/iluwatar/App.java b/interpreter/src/main/java/com/iluwatar/App.java\n--- a/interpreter/src/main/java/com/iluwatar/App.java\n+++ b/interpreter/src/main/java/com/iluwatar/App.java\n@@ -50,11 +50,7 @@ public static void main(String[] args) {\n \t}\r\n \r\n \tpublic static boolean isOperator(String s) {\r\n-\t\tif (s.equals(\"+\") || s.equals(\"-\") || s.equals(\"*\")) {\r\n-\t\t\treturn true;\r\n-\t\t} else {\r\n-\t\t\treturn false;\r\n-\t\t}\r\n+\t\treturn s.equals(\"+\") || s.equals(\"-\") || s.equals(\"*\");\r\n \t}\r\n \r\n \tpublic static Expression getOperatorInstance(String s, Expression left,\r",
    "output": "Simplify an if statement"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n@@ -8,6 +8,9 @@\n public class ThreadSafeLazyLoadedIvoryTower {\n \n \tprivate static ThreadSafeLazyLoadedIvoryTower instance = null;\n+\t\n+\tprivate ThreadSafeLazyLoadedIvoryTower() {\n+\t}\n \n \tpublic synchronized static ThreadSafeLazyLoadedIvoryTower getInstance() {\n \t\t/*",
    "output": "Add private constructor to ThreadSafeLazyLoadedIvoryTower."
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/Hobbits.java b/observer/src/main/java/com/iluwatar/Hobbits.java\n--- a/observer/src/main/java/com/iluwatar/Hobbits.java\n+++ b/observer/src/main/java/com/iluwatar/Hobbits.java\n@@ -6,8 +6,7 @@ public class Hobbits implements WeatherObserver {\n \tpublic void update(WeatherType currentWeather) {\r\n \t\tswitch (currentWeather) {\r\n \t\tcase COLD:\r\n-\t\t\tSystem.out\r\n-\t\t\t\t\t.println(\"The hobbits are shivering in the cold weather.\");\r\n+\t\t\tSystem.out.println(\"The hobbits are shivering in the cold weather.\");\r\n \t\t\tbreak;\r\n \t\tcase RAINY:\r\n \t\t\tSystem.out.println(\"The hobbits look for cover from the rain.\");\r\n@@ -16,8 +15,7 @@ public void update(WeatherType currentWeather) {\n \t\t\tSystem.out.println(\"The happy hobbits bade in the warm sun.\");\r\n \t\t\tbreak;\r\n \t\tcase WINDY:\r\n-\t\t\tSystem.out\r\n-\t\t\t\t\t.println(\"The hobbits hold their hats tightly in the windy weather.\");\r\n+\t\t\tSystem.out.println(\"The hobbits hold their hats tightly in the windy weather.\");\r\n \t\t\tbreak;\r\n \t\tdefault:\r\n \t\t\tbreak;\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/Weather.java b/observer/src/main/java/com/iluwatar/Weather.java\n--- a/observer/src/main/java/com/iluwatar/Weather.java\n+++ b/observer/src/main/java/com/iluwatar/Weather.java\n@@ -28,23 +28,9 @@ public void removeObserver(WeatherObserver obs) {\n \t}\r\n \r\n \tpublic void timePasses() {\r\n-\t\tswitch (currentWeather) {\r\n-\t\tcase COLD:\r\n-\t\t\tcurrentWeather = WeatherType.SUNNY;\r\n-\t\t\tbreak;\r\n-\t\tcase RAINY:\r\n-\t\t\tcurrentWeather = WeatherType.WINDY;\r\n-\t\t\tbreak;\r\n-\t\tcase SUNNY:\r\n-\t\t\tcurrentWeather = WeatherType.RAINY;\r\n-\t\t\tbreak;\r\n-\t\tcase WINDY:\r\n-\t\t\tcurrentWeather = WeatherType.COLD;\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n-\t\t}\r\n-\t\tSystem.out.println(\"The weather now changes to \" + currentWeather);\r\n+\t\tWeatherType[] enumValues = WeatherType.values();\r\n+\t\tcurrentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];\r\n+\t\tSystem.out.println(\"The weather changed to \" + currentWeather + \".\");\r\n \t\tnotifyObservers();\r\n \t}\r\n \r\n\ndiff --git a/observer/src/main/java/com/iluwatar/WeatherType.java b/observer/src/main/java/com/iluwatar/WeatherType.java\n--- a/observer/src/main/java/com/iluwatar/WeatherType.java\n+++ b/observer/src/main/java/com/iluwatar/WeatherType.java\n@@ -4,8 +4,9 @@ public enum WeatherType {\n \r\n \tSUNNY, RAINY, WINDY, COLD;\r\n \r\n+\t@Override\r\n \tpublic String toString() {\r\n \t\treturn this.name().toLowerCase();\r\n-\t};\r\n+\t}\r\n \r\n }\r",
    "output": "Minor refactoring on the observer code."
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -1,10 +1,10 @@\n package com.iluwatar;\r\n \r\n /**\r\n- * \r\n+ *\r\n  * Singleton pattern ensures that the class (IvoryTower) can have only one\r\n  * existing instance and provides global access to that instance.\r\n- * \r\n+ *\r\n  */\r\n public class App {\r\n \r\n@@ -15,5 +15,12 @@ public static void main(String[] args) {\n \t\tSystem.out.println(\"ivoryTower1=\" + ivoryTower1);\r\n \t\tSystem.out.println(\"ivoryTower2=\" + ivoryTower2);\r\n \r\n+\t\tThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower1 = ThreadSafeLazyLoadedIvoryTower\r\n+\t\t\t\t.getInstance();\r\n+\t\tThreadSafeLazyLoadedIvoryTower threadSafeIvoryTower2 = ThreadSafeLazyLoadedIvoryTower\r\n+\t\t\t\t.getInstance();\r\n+\t\tSystem.out.println(\"threadSafeIvoryTower1=\" + threadSafeIvoryTower1);\r\n+\t\tSystem.out.println(\"threadSafeIvoryTower2=\" + threadSafeIvoryTower2);\r\n+\r\n \t}\r\n }\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/SingletonClass.java b/singleton/src/main/java/com/iluwatar/SingletonClass.java\n--- a/singleton/src/main/java/com/iluwatar/SingletonClass.java\n+++ b/singleton/src/main/java/com/iluwatar/SingletonClass.java\n@@ -1,18 +0,0 @@\n-package com.iluwatar;\n-\n-public class SingletonClass {\n-\n-\tprivate static SingletonClass singletonInstance = null;\n-\n-\tpublic synchronized static SingletonClass getSingleton() {\n-\t\t/*\n-\t\t * The instance gets created only when it is called for first time.\n-\t\t * Lazy-loading\n-\t\t */\n-\t\tif (singletonInstance == null) {\n-\t\t\tsingletonInstance = new SingletonClass();\n-\t\t}\n-\n-\t\treturn singletonInstance;\n-\t}\n-}\n\ndiff --git a/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\n+\n+/**\n+ *\n+ * Thread-safe Singleton class.\n+ *\n+ */\n+public class ThreadSafeLazyLoadedIvoryTower {\n+\n+\tprivate static ThreadSafeLazyLoadedIvoryTower instance = null;\n+\n+\tpublic synchronized static ThreadSafeLazyLoadedIvoryTower getInstance() {\n+\t\t/*\n+\t\t * The instance gets created only when it is called for first time.\n+\t\t * Lazy-loading\n+\t\t */\n+\t\tif (instance == null) {\n+\t\t\tinstance = new ThreadSafeLazyLoadedIvoryTower();\n+\t\t}\n+\n+\t\treturn instance;\n+\t}\n+}",
    "output": "Thread-safe Singleton class\nNew Singleton class name has renamed to ThreadSafeLazyLoadedIvoryTower\nand called it from App.java"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/SingletonClass.java b/singleton/src/main/java/com/iluwatar/SingletonClass.java\n--- a/singleton/src/main/java/com/iluwatar/SingletonClass.java\n+++ b/singleton/src/main/java/com/iluwatar/SingletonClass.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar;\n+\n+public class SingletonClass {\n+\n+\tprivate static SingletonClass singletonInstance = null;\n+\n+\tpublic synchronized static SingletonClass getSingleton() {\n+\t\t/*\n+\t\t * The instance gets created only when it is called for first time.\n+\t\t * Lazy-loading\n+\t\t */\n+\t\tif (singletonInstance == null) {\n+\t\t\tsingletonInstance = new SingletonClass();\n+\t\t}\n+\n+\t\treturn singletonInstance;\n+\t}\n+}",
    "output": "New Singleton class\nThread-safe and lazy loading."
  },
  {
    "input": "diff --git a/builder/src/main/java/com/iluwatar/App.java b/builder/src/main/java/com/iluwatar/App.java\n--- a/builder/src/main/java/com/iluwatar/App.java\n+++ b/builder/src/main/java/com/iluwatar/App.java\n@@ -38,7 +38,7 @@ public static void main( String[] args )\n \t\tSystem.out.println(warrior);\r\n \r\n \t\tHero thief = new HeroBuilder(Profession.THIEF, \"Desmond\")\r\n-\t\t\t.withHairType(HairType.BOLD)\r\n+\t\t\t.withHairType(HairType.BALD)\r\n \t\t\t.withWeapon(Weapon.BOW)\r\n \t\t\t.build();\r\n \t\tSystem.out.println(thief);\r\n\ndiff --git a/builder/src/main/java/com/iluwatar/HairType.java b/builder/src/main/java/com/iluwatar/HairType.java\n--- a/builder/src/main/java/com/iluwatar/HairType.java\n+++ b/builder/src/main/java/com/iluwatar/HairType.java\n@@ -2,13 +2,13 @@\n \r\n public enum HairType {\r\n \r\n-\tBOLD, SHORT, CURLY, LONG_STRAIGHT, LONG_CURLY;\r\n+\tBALD, SHORT, CURLY, LONG_STRAIGHT, LONG_CURLY;\r\n \r\n \t@Override\r\n \tpublic String toString() {\r\n \t\tString s = \"\";\r\n \t\tswitch(this) {\r\n-\t\tcase BOLD: s = \"bold\"; break;\r\n+\t\tcase BALD: s = \"bold\"; break;\r\n \t\tcase SHORT: s = \"short\"; break;\r\n \t\tcase CURLY: s = \"curly\"; break;\r\n \t\tcase LONG_STRAIGHT: s = \"long straight\"; break;\r\n\ndiff --git a/builder/src/main/java/com/iluwatar/Hero.java b/builder/src/main/java/com/iluwatar/Hero.java\n--- a/builder/src/main/java/com/iluwatar/Hero.java\n+++ b/builder/src/main/java/com/iluwatar/Hero.java\n@@ -55,7 +55,7 @@ public String toString() {\n \t\t\t\tsb.append(hairType);\r\n \t\t\t\tsb.append(\" \");\r\n \t\t\t}\r\n-\t\t\tsb.append(hairType != HairType.BOLD ? \"hair\" : \"head\");\r\n+\t\t\tsb.append(hairType != HairType.BALD ? \"hair\" : \"head\");\r\n \t\t}\r\n \t\tif (armor != null) {\r\n \t\t\tsb.append(\" wearing \");\r",
    "output": "Correct spelling mistake in hair type: BOLD -> BALD."
  },
  {
    "input": "diff --git a/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/FileLoader.java\n@@ -1,3 +1,5 @@\n+package com.iluwatar;\n+\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileReader;\n@@ -75,4 +77,4 @@ public boolean fileExists() {\n \tpublic boolean isLoaded() {\n \t\treturn this.loaded;\n \t}\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorJFrame.java\n@@ -1,3 +1,5 @@\n+package com.iluwatar;\n+\n import java.awt.Color;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n@@ -195,4 +197,4 @@ public void showMessage(String message) {\n \tpublic void displayData(String data) {\n \t\tthis.area.setText(data);\n \t}\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorPresenter.java\n@@ -1,3 +1,5 @@\n+package com.iluwatar;\n+\n /**\n  * Every instance of this class represents the Presenter component\n  * in the Model-View-Presenter architectural pattern.\n@@ -71,4 +73,4 @@ public void confirmed() {\n \tpublic void cancelled() {\n \t\tview.close();\n \t}\t\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorStub.java b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorStub.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorStub.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorStub.java\n@@ -1,3 +1,5 @@\n+package com.iluwatar;\n+\n /**\n  * Every instance of this class represents the Stub component in\n  * the Model-View-Presenter architectural pattern.\n@@ -104,4 +106,4 @@ public int getMessagesSent() {\n \tpublic boolean dataDisplayed() {\n \t\treturn this.dataDisplayed;\n \t}\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorView.java b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorView.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/FileSelectorView.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/FileSelectorView.java\n@@ -1,3 +1,5 @@\n+package com.iluwatar;\n+\n /**\n  * This interface represents the View component in the \n  * Model-View-Presenter pattern. It can be implemented \n@@ -57,4 +59,4 @@ public interface FileSelectorView {\n \t * @param data The data to be written.\n \t */\n \tpublic void displayData(String data);\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/model-view-presenter/src/main/java/com/iluwatar/MainApp.java b/model-view-presenter/src/main/java/com/iluwatar/MainApp.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/MainApp.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/MainApp.java\n@@ -1,3 +1,4 @@\n+package com.iluwatar;\n \n public class MainApp {\n \t\n\ndiff --git a/model-view-presenter/src/test/java/com/iluwatar/FileSelectorPresenterTest.java b/model-view-presenter/src/test/java/com/iluwatar/FileSelectorPresenterTest.java\n--- a/model-view-presenter/src/test/java/com/iluwatar/FileSelectorPresenterTest.java\n+++ b/model-view-presenter/src/test/java/com/iluwatar/FileSelectorPresenterTest.java\n@@ -1,3 +1,5 @@\n+package com.iluwatar;\n+\n import static org.junit.Assert.*;\n \n import org.junit.Before;\n@@ -7,7 +9,7 @@\n  * This test case is responsible for testing our application\n  * by taking advantage of the Model-View-Controller architectural pattern.\n  */\n-public class FileselectorPresenterTest {\n+public class FileSelectorPresenterTest {\n \t\n \t/**\n \t * The Presenter component.",
    "output": "Make some overall changes."
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/IvoryTower.java b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n@@ -7,14 +7,11 @@\n  */\r\n public class IvoryTower {\r\n \r\n-\tprivate static IvoryTower instance;\r\n+\tprivate static IvoryTower instance = new IvoryTower();\r\n \t\r\n \tprivate IvoryTower() {}\r\n \r\n \tpublic static IvoryTower getInstance() {\r\n-\t\tif(instance ==  null){\r\n-\t\t\tinstance = new IvoryTower();\t\r\n-\t\t}\r\n \t\treturn instance;\r\n \t}\r\n }\r",
    "output": "Remove the lazy instantiation from singleton to avoid threading problems."
  },
  {
    "input": "diff --git a/double-checked-locking/src/main/java/com/iluwatar/Item.java b/double-checked-locking/src/main/java/com/iluwatar/Item.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/Item.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/Item.java\n@@ -1,5 +1,6 @@\n package com.iluwatar;\n \n public class Item {\n-\n+\tString name;\n+\tint level;\n }",
    "output": "Add simple attributes to the Item."
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/IvoryTower.java b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n@@ -13,7 +13,7 @@ private IvoryTower() {}\n \r\n \tpublic static IvoryTower getInstance() {\r\n \t\tif(instance ==  null){\r\n-\t\t\tinstance = IvoryTower();\t\r\n+\t\t\tinstance = new IvoryTower();\t\r\n \t\t}\r\n \t\treturn instance;\r\n \t}\r",
    "output": "Upgrade IvoryTower.java fixed the issue with class creation."
  },
  {
    "input": "diff --git a/double-checked-locking/src/main/java/com/iluwatar/App.java b/double-checked-locking/src/main/java/com/iluwatar/App.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/App.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,30 @@\n+package com.iluwatar;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * \n+ * In Inventory we store the items with a given size. However,\n+ * we do not store more items than the inventory size. To address\n+ * concurrent access problems we use double checked locking to add\n+ * item to inventory. In this method, the thread which gets the lock\n+ * first adds the item. \n+ */\n+\n+public class App \n+{\n+    public static void main( String[] args )\n+    {\n+    \tfinal Inventory inventory = new Inventory(1000);\n+    \tExecutorService executorService = Executors.newFixedThreadPool(3);\n+    \tfor (int i = 0; i < 3; i++) {\n+    \t\texecutorService.execute(new Runnable() {\n+    \t\t\t@Override\n+    \t\t\tpublic void run() {\n+    \t\t\t\twhile(inventory.addItem(new Item()));\n+    \t\t\t}\n+    \t\t});\n+\t\t}\n+    }\n+}\n\ndiff --git a/double-checked-locking/src/main/java/com/iluwatar/Inventory.java b/double-checked-locking/src/main/java/com/iluwatar/Inventory.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/Inventory.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/Inventory.java\n@@ -0,0 +1,36 @@\n+package com.iluwatar;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+\n+public class Inventory {\n+\t\n+\tprivate int inventorySize;\n+\tprivate List<Item> items;\n+\tprivate Lock lock = new ReentrantLock();\n+\n+\tpublic Inventory(int inventorySize) {\n+\t\tthis.inventorySize = inventorySize;\n+\t\tthis.items = new ArrayList<Item>(inventorySize);\n+\t}\n+\t\n+\tpublic boolean addItem(Item item){\n+\t\tif(items.size()<inventorySize){\n+\t\t\tlock.lock();\n+\t\t\ttry{\n+\t\t\t\tif(items.size()<inventorySize){\n+\t\t\t\t\titems.add(item);\n+\t\t\t\t\tSystem.out.println(Thread.currentThread());\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}finally{\n+\t\t\t\tlock.unlock();\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+}\n\ndiff --git a/double-checked-locking/src/main/java/com/iluwatar/Item.java b/double-checked-locking/src/main/java/com/iluwatar/Item.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/Item.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/Item.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\n+\n+public class Item {\n+\n+}",
    "output": "Double-checked-locking pattern is added."
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/App.java b/adapter/src/main/java/com/iluwatar/App.java\n--- a/adapter/src/main/java/com/iluwatar/App.java\n+++ b/adapter/src/main/java/com/iluwatar/App.java\n@@ -2,15 +2,15 @@\n \r\n /**\r\n  * \r\n- * Adapter (GnomeEngineerAdapter) converts the interface of the\r\n+ * Adapter (GnomeEngineer) converts the interface of the\r\n  * target class (GoblinGlider) into suitable one.\r\n  *\r\n  */\r\n public class App \r\n {\r\n     public static void main( String[] args )\r\n     {\r\n-    \tGnomeEngineerAdapter engineer = new GnomeEngineerAdapter();\r\n-    \tengineer.flyGoblinGlider();\r\n+    \tGnomeEngineer engineer = new GnomeEngineer();\r\n+    \tengineer.operateDevice();\r\n     }\r\n }\r\n\ndiff --git a/adapter/src/main/java/com/iluwatar/Engineer.java b/adapter/src/main/java/com/iluwatar/Engineer.java\n--- a/adapter/src/main/java/com/iluwatar/Engineer.java\n+++ b/adapter/src/main/java/com/iluwatar/Engineer.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\r\n+\r\n+/**\r\n+ * \r\n+ * The interface the client knows how\r\n+ * to use.\r\n+ *\r\n+ */\r\n+public interface Engineer {\r\n+\r\n+\tvoid operateDevice();\r\n+\t\r\n+}\r\n\ndiff --git a/adapter/src/main/java/com/iluwatar/GnomeEngineer.java b/adapter/src/main/java/com/iluwatar/GnomeEngineer.java\n--- a/adapter/src/main/java/com/iluwatar/GnomeEngineer.java\n+++ b/adapter/src/main/java/com/iluwatar/GnomeEngineer.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\r\n+\r\n+/**\r\n+ * \r\n+ * Adapter class. Adapts the interface of the\r\n+ * GoblinGlider into Engineer expected by the\r\n+ * client.\r\n+ *\r\n+ */\r\n+public class GnomeEngineer implements Engineer {\r\n+\r\n+\tprivate GoblinGlider glider;\r\n+\t\r\n+\tpublic GnomeEngineer() {\r\n+\t\tglider = new GoblinGlider();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void operateDevice() {\r\n+\t\tglider.attachGlider();\r\n+\t\tglider.gainSpeed();\r\n+\t\tglider.takeOff();\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java b/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java\n--- a/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java\n+++ b/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java\n@@ -1,22 +0,0 @@\n-package com.iluwatar;\r\n-\r\n-/**\r\n- * \r\n- * Adapter class.\r\n- *\r\n- */\r\n-public class GnomeEngineerAdapter {\r\n-\r\n-\tprivate GoblinGlider glider;\r\n-\t\r\n-\tpublic GnomeEngineerAdapter() {\r\n-\t\tglider = new GoblinGlider();\r\n-\t}\r\n-\t\r\n-\tpublic void flyGoblinGlider() {\r\n-\t\tglider.attachGlider();\r\n-\t\tglider.gainSpeed();\r\n-\t\tglider.takeOff();\r\n-\t}\r\n-\t\r\n-}\r",
    "output": "Upgrade the adapter example."
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/App.java b/decorator/src/main/java/com/iluwatar/App.java\n--- a/decorator/src/main/java/com/iluwatar/App.java\n+++ b/decorator/src/main/java/com/iluwatar/App.java\n@@ -1,17 +1,25 @@\n package com.iluwatar;\r\n \r\n+/**\r\n+ * \r\n+ * Decorator pattern is more flexible alternative to\r\n+ * subclassing. The decorator class implements the same\r\n+ * interface as the target and uses composition to\r\n+ * \"decorate\" calls to the target.\r\n+ *\r\n+ */\r\n public class App \r\n {\r\n     public static void main( String[] args )\r\n     {\r\n     \t\r\n     \tSystem.out.println(\"A simple looking troll approaches.\");\r\n-    \tTroll troll = new Troll();\r\n+    \tHostile troll = new Troll();\r\n     \ttroll.attack();\r\n     \ttroll.fleeBattle();\r\n     \t\r\n     \tSystem.out.println(\"\\nA smart looking troll surprises you.\");\r\n-    \tTroll smart = new SmartTroll(new Troll());\r\n+    \tHostile smart = new SmartTroll(new Troll());\r\n     \tsmart.attack();\r\n     \tsmart.fleeBattle();\r\n     }\r\n\ndiff --git a/decorator/src/main/java/com/iluwatar/Hostile.java b/decorator/src/main/java/com/iluwatar/Hostile.java\n--- a/decorator/src/main/java/com/iluwatar/Hostile.java\n+++ b/decorator/src/main/java/com/iluwatar/Hostile.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\r\n+\r\n+public interface Hostile {\r\n+\r\n+\tvoid attack();\r\n+\tvoid fleeBattle();\r\n+\t\r\n+}\r\n\ndiff --git a/decorator/src/main/java/com/iluwatar/SmartTroll.java b/decorator/src/main/java/com/iluwatar/SmartTroll.java\n--- a/decorator/src/main/java/com/iluwatar/SmartTroll.java\n+++ b/decorator/src/main/java/com/iluwatar/SmartTroll.java\n@@ -1,10 +1,10 @@\n package com.iluwatar;\r\n \r\n-public class SmartTroll extends Troll {\r\n+public class SmartTroll implements Hostile {\r\n \r\n-\tprivate Troll decorated;\r\n+\tprivate Hostile decorated;\r\n \r\n-\tpublic SmartTroll(Troll decorated) {\r\n+\tpublic SmartTroll(Hostile decorated) {\r\n \t\tthis.decorated = decorated;\r\n \t}\r\n \t\r\n\ndiff --git a/decorator/src/main/java/com/iluwatar/Troll.java b/decorator/src/main/java/com/iluwatar/Troll.java\n--- a/decorator/src/main/java/com/iluwatar/Troll.java\n+++ b/decorator/src/main/java/com/iluwatar/Troll.java\n@@ -1,6 +1,6 @@\n package com.iluwatar;\r\n \r\n-public class Troll {\r\n+public class Troll implements Hostile {\r\n \r\n \tpublic void attack() {\r\n \t\tSystem.out.println(\"The troll swings at you with a club!\");\r",
    "output": "Upgrade decorator implementation and class diagram. Added comments."
  },
  {
    "input": "diff --git a/flyweight/src/main/java/com/iluwatar/AlchemistShop.java b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java\n--- a/flyweight/src/main/java/com/iluwatar/AlchemistShop.java\n+++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java\n@@ -15,20 +15,23 @@ public AlchemistShop() {\n \t}\r\n \r\n \tprivate void fillShelves() {\r\n-\t\ttopShelf.add(new InvisibilityPotion());\r\n-\t\ttopShelf.add(new InvisibilityPotion());\r\n-\t\ttopShelf.add(new StrengthPotion());\r\n-\t\ttopShelf.add(new HealingPotion());\r\n-\t\ttopShelf.add(new InvisibilityPotion());\r\n-\t\ttopShelf.add(new StrengthPotion());\r\n-\t\ttopShelf.add(new HealingPotion());\r\n-\t\ttopShelf.add(new HealingPotion());\r\n \t\t\r\n-\t\tbottomShelf.add(new PoisonPotion());\r\n-\t\tbottomShelf.add(new PoisonPotion());\r\n-\t\tbottomShelf.add(new PoisonPotion());\r\n-\t\tbottomShelf.add(new HolyWaterPotion());\r\n-\t\tbottomShelf.add(new HolyWaterPotion());\r\n+\t\tPotionFactory factory = new PotionFactory();\r\n+\t\t\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.STRENGTH));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.INVISIBILITY));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.STRENGTH));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\r\n+\t\ttopShelf.add(factory.createPotion(PotionType.HEALING));\r\n+\t\t\r\n+\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\r\n+\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\r\n+\t\tbottomShelf.add(factory.createPotion(PotionType.POISON));\r\n+\t\tbottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\r\n+\t\tbottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\r\n \t}\r\n \t\r\n \tpublic void enumerate() {\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/HealingPotion.java b/flyweight/src/main/java/com/iluwatar/HealingPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/HealingPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/HealingPotion.java\n@@ -4,7 +4,7 @@ public class HealingPotion implements Potion {\n \r\n \t@Override\r\n \tpublic void drink() {\r\n-\t\tSystem.out.println(\"You feel healed.\");\r\n+\t\tSystem.out.println(\"You feel healed. (Potion=\" + System.identityHashCode(this) + \")\");\r\n \t}\r\n \r\n }\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java b/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java\n@@ -4,7 +4,7 @@ public class HolyWaterPotion implements Potion {\n \r\n \t@Override\r\n \tpublic void drink() {\r\n-\t\tSystem.out.println(\"You feel blessed.\");\r\n+\t\tSystem.out.println(\"You feel blessed. (Potion=\" + System.identityHashCode(this) + \")\");\r\n \t}\r\n \r\n }\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java b/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java\n@@ -4,7 +4,7 @@ public class InvisibilityPotion implements Potion {\n \r\n \t@Override\r\n \tpublic void drink() {\r\n-\t\tSystem.out.println(\"You become invisible.\");\r\n+\t\tSystem.out.println(\"You become invisible. (Potion=\" + System.identityHashCode(this) + \")\");\r\n \t}\r\n \r\n }\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PoisonPotion.java b/flyweight/src/main/java/com/iluwatar/PoisonPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/PoisonPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/PoisonPotion.java\n@@ -4,7 +4,7 @@ public class PoisonPotion implements Potion {\n \r\n \t@Override\r\n \tpublic void drink() {\r\n-\t\tSystem.out.println(\"Urgh! This is poisonous.\");\r\n+\t\tSystem.out.println(\"Urgh! This is poisonous. (Potion=\" + System.identityHashCode(this) + \")\");\r\n \t}\r\n \r\n }\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PotionFactory.java b/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n--- a/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n+++ b/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n@@ -16,18 +16,23 @@ Potion createPotion(PotionType type) {\n \t\t\tswitch (type) {\r\n \t\t\tcase HEALING:\r\n \t\t\t\tpotion = new HealingPotion();\r\n+\t\t\t\tpotions.put(type, potion);\r\n \t\t\t\tbreak;\r\n \t\t\tcase HOLY_WATER:\r\n \t\t\t\tpotion = new HolyWaterPotion();\r\n+\t\t\t\tpotions.put(type, potion);\r\n \t\t\t\tbreak;\r\n \t\t\tcase INVISIBILITY:\r\n \t\t\t\tpotion = new InvisibilityPotion();\r\n+\t\t\t\tpotions.put(type, potion);\r\n \t\t\t\tbreak;\r\n \t\t\tcase POISON:\r\n \t\t\t\tpotion = new PoisonPotion();\r\n+\t\t\t\tpotions.put(type, potion);\r\n \t\t\t\tbreak;\r\n \t\t\tcase STRENGTH:\r\n \t\t\t\tpotion = new StrengthPotion();\r\n+\t\t\t\tpotions.put(type, potion);\r\n \t\t\t\tbreak;\r\n \t\t\tdefault:\r\n \t\t\t\tbreak;\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/StrengthPotion.java b/flyweight/src/main/java/com/iluwatar/StrengthPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/StrengthPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/StrengthPotion.java\n@@ -4,7 +4,7 @@ public class StrengthPotion implements Potion {\n \r\n \t@Override\r\n \tpublic void drink() {\r\n-\t\tSystem.out.println(\"You feel strong.\");\r\n+\t\tSystem.out.println(\"You feel strong. (Potion=\" + System.identityHashCode(this) + \")\");\r\n \t}\r\n \r\n }\r",
    "output": "Upgrade flyweight sample"
  },
  {
    "input": "diff --git a/visitor/src/main/java/com/iluwatar/App.java b/visitor/src/main/java/com/iluwatar/App.java\n--- a/visitor/src/main/java/com/iluwatar/App.java\n+++ b/visitor/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+\r\n+    \tCommander commander = new Commander(\r\n+    \t\t\tnew Sergeant(new Soldier(), new Soldier(), new Soldier()), \r\n+    \t\t\tnew Sergeant(new Soldier(), new Soldier(), new Soldier()));\r\n+    \tcommander.accept(new SoldierVisitor());\r\n+    \tcommander.accept(new SergeantVisitor());\r\n+    \tcommander.accept(new CommanderVisitor());\r\n+    \t\r\n+    }\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/Commander.java b/visitor/src/main/java/com/iluwatar/Commander.java\n--- a/visitor/src/main/java/com/iluwatar/Commander.java\n+++ b/visitor/src/main/java/com/iluwatar/Commander.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\r\n+\r\n+public class Commander extends Unit {\r\n+\r\n+\tpublic Commander(Unit ... children) {\r\n+\t\tsuper(children);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void accept(UnitVisitor visitor) {\r\n+\t\tvisitor.visitCommander(this);\r\n+\t\tsuper.accept(visitor);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"commander\";\r\n+\t}\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/CommanderVisitor.java b/visitor/src/main/java/com/iluwatar/CommanderVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/CommanderVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/CommanderVisitor.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\r\n+\r\n+public class CommanderVisitor implements UnitVisitor {\r\n+\r\n+\t@Override\r\n+\tpublic void visitSoldier(Soldier soldier) {\r\n+\t\t// TODO Auto-generated method stub\r\n+\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void visitSergeant(Sergeant sergeant) {\r\n+\t\t// TODO Auto-generated method stub\r\n+\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void visitCommander(Commander commander) {\r\n+\t\tSystem.out.println(\"Good to see you \" + commander);\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/Sergeant.java b/visitor/src/main/java/com/iluwatar/Sergeant.java\n--- a/visitor/src/main/java/com/iluwatar/Sergeant.java\n+++ b/visitor/src/main/java/com/iluwatar/Sergeant.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\r\n+\r\n+public class Sergeant extends Unit {\r\n+\r\n+\tpublic Sergeant(Unit ... children) {\r\n+\t\tsuper(children);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void accept(UnitVisitor visitor) {\r\n+\t\tvisitor.visitSergeant(this);\r\n+\t\tsuper.accept(visitor);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"sergeant\";\r\n+\t}\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/SergeantVisitor.java b/visitor/src/main/java/com/iluwatar/SergeantVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/SergeantVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/SergeantVisitor.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\r\n+\r\n+public class SergeantVisitor implements UnitVisitor {\r\n+\r\n+\t@Override\r\n+\tpublic void visitSoldier(Soldier soldier) {\r\n+\t\t// TODO Auto-generated method stub\r\n+\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void visitSergeant(Sergeant sergeant) {\r\n+\t\tSystem.out.println(\"Hello \" + sergeant);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void visitCommander(Commander commander) {\r\n+\t\t// TODO Auto-generated method stub\r\n+\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/Soldier.java b/visitor/src/main/java/com/iluwatar/Soldier.java\n--- a/visitor/src/main/java/com/iluwatar/Soldier.java\n+++ b/visitor/src/main/java/com/iluwatar/Soldier.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\r\n+\r\n+public class Soldier extends Unit {\r\n+\r\n+\tpublic Soldier(Unit ... children) {\r\n+\t\tsuper(children);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void accept(UnitVisitor visitor) {\r\n+\t\tvisitor.visitSoldier(this);\r\n+\t\tsuper.accept(visitor);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"soldier\";\r\n+\t}\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/SoldierVisitor.java b/visitor/src/main/java/com/iluwatar/SoldierVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/SoldierVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/SoldierVisitor.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\r\n+\r\n+public class SoldierVisitor implements UnitVisitor {\r\n+\r\n+\t@Override\r\n+\tpublic void visitSoldier(Soldier soldier) {\r\n+\t\tSystem.out.println(\"Greetings \" + soldier);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void visitSergeant(Sergeant sergeant) {\r\n+\t\t// TODO Auto-generated method stub\r\n+\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void visitCommander(Commander commander) {\r\n+\t\t// TODO Auto-generated method stub\r\n+\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/Unit.java b/visitor/src/main/java/com/iluwatar/Unit.java\n--- a/visitor/src/main/java/com/iluwatar/Unit.java\n+++ b/visitor/src/main/java/com/iluwatar/Unit.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class Unit {\r\n+\r\n+\tprivate Unit[] children;\r\n+\r\n+\tpublic Unit(Unit ... children) {\r\n+\t\tthis.children = children;\r\n+\t}\r\n+\t\r\n+\tpublic void accept(UnitVisitor visitor) {\r\n+\t\tfor (Unit child: children) {\r\n+\t\t\tchild.accept(visitor);\r\n+\t\t}\r\n+\t}\r\n+}\r\n\ndiff --git a/visitor/src/main/java/com/iluwatar/UnitVisitor.java b/visitor/src/main/java/com/iluwatar/UnitVisitor.java\n--- a/visitor/src/main/java/com/iluwatar/UnitVisitor.java\n+++ b/visitor/src/main/java/com/iluwatar/UnitVisitor.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public interface UnitVisitor {\r\n+\r\n+\tvoid visitSoldier(Soldier soldier);\r\n+\tvoid visitSergeant(Sergeant sergeant);\r\n+\tvoid visitCommander(Commander commander);\r\n+\t\r\n+}\r",
    "output": "Add visitor pattern sample"
  },
  {
    "input": "diff --git a/template-method/src/main/java/com/iluwatar/App.java b/template-method/src/main/java/com/iluwatar/App.java\n--- a/template-method/src/main/java/com/iluwatar/App.java\n+++ b/template-method/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tHalflingThief thief = new HalflingThief(new HitAndRunMethod());\r\n+    \tthief.steal();\r\n+    \tthief.changeMethod(new SubtleMethod());\r\n+    \tthief.steal();\r\n+    }\r\n+}\r\n\ndiff --git a/template-method/src/main/java/com/iluwatar/HalflingThief.java b/template-method/src/main/java/com/iluwatar/HalflingThief.java\n--- a/template-method/src/main/java/com/iluwatar/HalflingThief.java\n+++ b/template-method/src/main/java/com/iluwatar/HalflingThief.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar;\r\n+\r\n+public class HalflingThief {\r\n+\r\n+\tprivate StealingMethod method;\r\n+\r\n+\tpublic HalflingThief(StealingMethod method) {\r\n+\t\tthis.method = method;\r\n+\t}\r\n+\t\r\n+\tpublic void steal() {\r\n+\t\tmethod.steal();\r\n+\t}\r\n+\t\r\n+\tpublic void changeMethod(StealingMethod method) {\r\n+\t\tthis.method = method;\r\n+\t}\r\n+}\r\n\ndiff --git a/template-method/src/main/java/com/iluwatar/HitAndRunMethod.java b/template-method/src/main/java/com/iluwatar/HitAndRunMethod.java\n--- a/template-method/src/main/java/com/iluwatar/HitAndRunMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/HitAndRunMethod.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar;\r\n+\r\n+public class HitAndRunMethod extends StealingMethod {\r\n+\r\n+\t@Override\r\n+\tprotected String pickTarget() {\r\n+\t\treturn \"old goblin woman\";\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void confuseTarget(String target) {\r\n+\t\tSystem.out.println(\"Approach the \" + target + \" from behind.\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void stealTheItem(String target) {\r\n+\t\tSystem.out.println(\"Grab the handbag and run away fast!\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/template-method/src/main/java/com/iluwatar/StealingMethod.java b/template-method/src/main/java/com/iluwatar/StealingMethod.java\n--- a/template-method/src/main/java/com/iluwatar/StealingMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/StealingMethod.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class StealingMethod {\r\n+\r\n+\tprotected abstract String pickTarget();\r\n+\t\r\n+\tprotected abstract void confuseTarget(String target);\r\n+\t\r\n+\tprotected abstract void stealTheItem(String target);\r\n+\r\n+\tpublic void steal() {\r\n+\t\tString target = pickTarget();\r\n+\t\tSystem.out.println(\"The target has been chosen as \" + target + \".\");\r\n+\t\tconfuseTarget(target);\r\n+\t\tstealTheItem(target);\r\n+\t}\r\n+}\r\n\ndiff --git a/template-method/src/main/java/com/iluwatar/SubtleMethod.java b/template-method/src/main/java/com/iluwatar/SubtleMethod.java\n--- a/template-method/src/main/java/com/iluwatar/SubtleMethod.java\n+++ b/template-method/src/main/java/com/iluwatar/SubtleMethod.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar;\r\n+\r\n+public class SubtleMethod extends StealingMethod {\r\n+\r\n+\t@Override\r\n+\tprotected String pickTarget() {\r\n+\t\treturn \"shop keeper\";\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void confuseTarget(String target) {\r\n+\t\tSystem.out.println(\"Approach the \" + target + \" with tears running and hug him!\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void stealTheItem(String target) {\r\n+\t\tSystem.out.println(\"While in close contact grab the \" + target + \"'s wallet.\");\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add template method sample"
  },
  {
    "input": "diff --git a/strategy/src/main/java/com/iluwatar/App.java b/strategy/src/main/java/com/iluwatar/App.java\n--- a/strategy/src/main/java/com/iluwatar/App.java\n+++ b/strategy/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tSystem.out.println(\"Green dragon spotted ahead!\");\r\n+    \tDragonSlayer dragonSlayer = new DragonSlayer(new MeleeStrategy());\r\n+    \tdragonSlayer.goToBattle();\r\n+    \tSystem.out.println(\"Red dragon emerges.\");\r\n+    \tdragonSlayer.changeStrategy(new ProjectileStrategy());\r\n+    \tdragonSlayer.goToBattle();\r\n+    \tSystem.out.println(\"Black dragon lands before you.\");\r\n+    \tdragonSlayer.changeStrategy(new SpellStrategy());\r\n+    \tdragonSlayer.goToBattle();\r\n+    }\r\n+}\r\n\ndiff --git a/strategy/src/main/java/com/iluwatar/DragonSlayer.java b/strategy/src/main/java/com/iluwatar/DragonSlayer.java\n--- a/strategy/src/main/java/com/iluwatar/DragonSlayer.java\n+++ b/strategy/src/main/java/com/iluwatar/DragonSlayer.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar;\r\n+\r\n+public class DragonSlayer {\r\n+\r\n+\tprivate DragonSlayingStrategy strategy;\r\n+\r\n+\tpublic DragonSlayer(DragonSlayingStrategy strategy) {\r\n+\t\tthis.strategy = strategy;\r\n+\t}\r\n+\r\n+\tpublic void changeStrategy(DragonSlayingStrategy strategy) {\r\n+\t\tthis.strategy = strategy;\r\n+\t}\r\n+\t\r\n+\tpublic void goToBattle() {\r\n+\t\tstrategy.execute();\r\n+\t}\r\n+}\r\n\ndiff --git a/strategy/src/main/java/com/iluwatar/DragonSlayingStrategy.java b/strategy/src/main/java/com/iluwatar/DragonSlayingStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/DragonSlayingStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/DragonSlayingStrategy.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public interface DragonSlayingStrategy {\r\n+\r\n+\tvoid execute();\r\n+\t\r\n+}\r\n\ndiff --git a/strategy/src/main/java/com/iluwatar/MeleeStrategy.java b/strategy/src/main/java/com/iluwatar/MeleeStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/MeleeStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/MeleeStrategy.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class MeleeStrategy implements DragonSlayingStrategy {\r\n+\r\n+\t@Override\r\n+\tpublic void execute() {\r\n+\t\tSystem.out.println(\"With your Excalibur you severe the dragon's head!\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/strategy/src/main/java/com/iluwatar/ProjectileStrategy.java b/strategy/src/main/java/com/iluwatar/ProjectileStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/ProjectileStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/ProjectileStrategy.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class ProjectileStrategy implements DragonSlayingStrategy {\r\n+\r\n+\t@Override\r\n+\tpublic void execute() {\r\n+\t\tSystem.out.println(\"You shoot the dragon with the magical crossbow and it falls dead on the ground!\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/strategy/src/main/java/com/iluwatar/SpellStrategy.java b/strategy/src/main/java/com/iluwatar/SpellStrategy.java\n--- a/strategy/src/main/java/com/iluwatar/SpellStrategy.java\n+++ b/strategy/src/main/java/com/iluwatar/SpellStrategy.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class SpellStrategy implements DragonSlayingStrategy {\r\n+\r\n+\t@Override\r\n+\tpublic void execute() {\r\n+\t\tSystem.out.println(\"You cast the spell of disintegration and the dragon vaporizes in a pile of dust!\");\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add strategy pattern sample"
  },
  {
    "input": "diff --git a/state/src/main/java/com/iluwatar/AngryState.java b/state/src/main/java/com/iluwatar/AngryState.java\n--- a/state/src/main/java/com/iluwatar/AngryState.java\n+++ b/state/src/main/java/com/iluwatar/AngryState.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar;\r\n+\r\n+public class AngryState implements State {\r\n+\r\n+\tprivate Mammoth mammoth;\r\n+\r\n+\tpublic AngryState(Mammoth mammoth) {\r\n+\t\tthis.mammoth = mammoth;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void observe() {\r\n+\t\tSystem.out.println(String.format(\"%s is furious!\", mammoth));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void onEnterState() {\r\n+\t\tSystem.out.println(String.format(\"%s gets angry!\", mammoth));\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/state/src/main/java/com/iluwatar/App.java b/state/src/main/java/com/iluwatar/App.java\n--- a/state/src/main/java/com/iluwatar/App.java\n+++ b/state/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+\r\n+    \tMammoth mammoth = new Mammoth();\r\n+    \tmammoth.observe();\r\n+    \tmammoth.timePasses();\r\n+    \tmammoth.observe();\r\n+    \tmammoth.timePasses();\r\n+    \tmammoth.observe();\r\n+    \t\r\n+    }\r\n+}\r\n\ndiff --git a/state/src/main/java/com/iluwatar/Mammoth.java b/state/src/main/java/com/iluwatar/Mammoth.java\n--- a/state/src/main/java/com/iluwatar/Mammoth.java\n+++ b/state/src/main/java/com/iluwatar/Mammoth.java\n@@ -0,0 +1,32 @@\n+package com.iluwatar;\r\n+\r\n+public class Mammoth {\r\n+\t\r\n+\tprivate State state;\r\n+\r\n+\tpublic Mammoth() {\r\n+\t\tstate = new PeacefulState(this);\r\n+\t}\r\n+\t\r\n+\tpublic void timePasses() {\r\n+\t\tif (state.getClass().equals(PeacefulState.class)) {\r\n+\t\t\tchangeStateTo(new AngryState(this));\r\n+\t\t} else {\r\n+\t\t\tchangeStateTo(new PeacefulState(this));\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprivate void changeStateTo(State newState) {\r\n+\t\tthis.state = newState;\r\n+\t\tthis.state.onEnterState();\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"The mammoth\";\r\n+\t}\r\n+\t\r\n+\tpublic void observe() {\r\n+\t\tthis.state.observe();\r\n+\t}\r\n+}\r\n\ndiff --git a/state/src/main/java/com/iluwatar/PeacefulState.java b/state/src/main/java/com/iluwatar/PeacefulState.java\n--- a/state/src/main/java/com/iluwatar/PeacefulState.java\n+++ b/state/src/main/java/com/iluwatar/PeacefulState.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar;\r\n+\r\n+public class PeacefulState implements State {\r\n+\t\r\n+\tprivate Mammoth mammoth;\r\n+\r\n+\tpublic PeacefulState(Mammoth mammoth) {\r\n+\t\tthis.mammoth = mammoth;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void observe() {\r\n+\t\tSystem.out.println(String.format(\"%s is calm and peaceful.\", mammoth));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void onEnterState() {\r\n+\t\tSystem.out.println(String.format(\"%s calms down.\", mammoth));\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/state/src/main/java/com/iluwatar/State.java b/state/src/main/java/com/iluwatar/State.java\n--- a/state/src/main/java/com/iluwatar/State.java\n+++ b/state/src/main/java/com/iluwatar/State.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public interface State {\r\n+\r\n+\tvoid onEnterState();\r\n+\t\r\n+\tvoid observe();\r\n+\t\r\n+}\r",
    "output": "Add state pattern sample"
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/App.java b/observer/src/main/java/com/iluwatar/App.java\n--- a/observer/src/main/java/com/iluwatar/App.java\n+++ b/observer/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+\r\n+    \tWeather weather = new Weather();\r\n+    \tweather.addObserver(new Orcs());\r\n+    \tweather.addObserver(new Hobbits());\r\n+    \t\r\n+    \tweather.timePasses();\r\n+    \tweather.timePasses();\r\n+    \tweather.timePasses();\r\n+    \tweather.timePasses();\r\n+    \t\r\n+    }\r\n+}\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/Hobbits.java b/observer/src/main/java/com/iluwatar/Hobbits.java\n--- a/observer/src/main/java/com/iluwatar/Hobbits.java\n+++ b/observer/src/main/java/com/iluwatar/Hobbits.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\r\n+\r\n+public class Hobbits implements WeatherObserver {\r\n+\r\n+\t@Override\r\n+\tpublic void update(WeatherType currentWeather) {\r\n+\t\tswitch (currentWeather) {\r\n+\t\tcase COLD:\r\n+\t\t\tSystem.out.println(\"The hobbits are shivering in the cold weather.\");\r\n+\t\t\tbreak;\r\n+\t\tcase RAINY:\r\n+\t\t\tSystem.out.println(\"The hobbits look for cover from the rain.\");\r\n+\t\t\tbreak;\r\n+\t\tcase SUNNY:\r\n+\t\t\tSystem.out.println(\"The happy hobbits bade in the warm sun.\");\r\n+\t\t\tbreak;\r\n+\t\tcase WINDY:\r\n+\t\t\tSystem.out.println(\"The hobbits hold their hats tightly in the windy weather.\");\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/Orcs.java b/observer/src/main/java/com/iluwatar/Orcs.java\n--- a/observer/src/main/java/com/iluwatar/Orcs.java\n+++ b/observer/src/main/java/com/iluwatar/Orcs.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\r\n+\r\n+public class Orcs implements WeatherObserver {\r\n+\r\n+\t@Override\r\n+\tpublic void update(WeatherType currentWeather) {\r\n+\t\tswitch (currentWeather) {\r\n+\t\tcase COLD:\r\n+\t\t\tSystem.out.println(\"The orcs are freezing cold.\");\r\n+\t\t\tbreak;\r\n+\t\tcase RAINY:\r\n+\t\t\tSystem.out.println(\"The orcs are dripping wet.\");\r\n+\t\t\tbreak;\r\n+\t\tcase SUNNY:\r\n+\t\t\tSystem.out.println(\"The sun hurts the orcs' eyes.\");\r\n+\t\t\tbreak;\r\n+\t\tcase WINDY:\r\n+\t\t\tSystem.out.println(\"The orc smell almost vanishes in the wind.\");\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/Weather.java b/observer/src/main/java/com/iluwatar/Weather.java\n--- a/observer/src/main/java/com/iluwatar/Weather.java\n+++ b/observer/src/main/java/com/iluwatar/Weather.java\n@@ -0,0 +1,50 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class Weather {\r\n+\r\n+\tprivate WeatherType currentWeather;\r\n+\tprivate List<WeatherObserver> observers;\r\n+\t\r\n+\tpublic Weather() {\r\n+\t\tobservers = new ArrayList<>();\r\n+\t\tcurrentWeather = WeatherType.SUNNY;\r\n+\t}\r\n+\t\r\n+\tpublic void addObserver(WeatherObserver obs) {\r\n+\t\tobservers.add(obs);\r\n+\t}\r\n+\t\r\n+\tpublic void removeObserver(WeatherObserver obs) {\r\n+\t\tobservers.remove(obs);\r\n+\t}\r\n+\t\r\n+\tpublic void timePasses() {\r\n+\t\tswitch (currentWeather) {\r\n+\t\tcase COLD:\r\n+\t\t\tcurrentWeather = WeatherType.SUNNY;\r\n+\t\t\tbreak;\r\n+\t\tcase RAINY:\r\n+\t\t\tcurrentWeather = WeatherType.WINDY;\r\n+\t\t\tbreak;\r\n+\t\tcase SUNNY:\r\n+\t\t\tcurrentWeather = WeatherType.RAINY;\r\n+\t\t\tbreak;\r\n+\t\tcase WINDY:\r\n+\t\t\tcurrentWeather = WeatherType.COLD;\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t\tSystem.out.println(\"The weather now changes to \" + currentWeather);\r\n+\t\tnotifyObservers();\r\n+\t}\r\n+\t\r\n+\tprivate void notifyObservers() {\r\n+\t\tfor (WeatherObserver obs: observers) {\r\n+\t\t\tobs.update(currentWeather);\r\n+\t\t}\r\n+\t}\r\n+}\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/WeatherObserver.java b/observer/src/main/java/com/iluwatar/WeatherObserver.java\n--- a/observer/src/main/java/com/iluwatar/WeatherObserver.java\n+++ b/observer/src/main/java/com/iluwatar/WeatherObserver.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public interface WeatherObserver {\r\n+\r\n+\tvoid update(WeatherType currentWeather);\r\n+\t\r\n+}\r\n\ndiff --git a/observer/src/main/java/com/iluwatar/WeatherType.java b/observer/src/main/java/com/iluwatar/WeatherType.java\n--- a/observer/src/main/java/com/iluwatar/WeatherType.java\n+++ b/observer/src/main/java/com/iluwatar/WeatherType.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\r\n+\r\n+public enum WeatherType {\r\n+\r\n+\tSUNNY,\r\n+\tRAINY,\r\n+\tWINDY,\r\n+\tCOLD;\r\n+\t\r\n+\tpublic String toString() {\r\n+\t\treturn this.name().toLowerCase();\r\n+\t};\r\n+\t\r\n+}\r",
    "output": "Add observer sample"
  },
  {
    "input": "diff --git a/memento/src/main/java/com/iluwatar/App.java b/memento/src/main/java/com/iluwatar/App.java\n--- a/memento/src/main/java/com/iluwatar/App.java\n+++ b/memento/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,30 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.Stack;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tStack<StarMemento> states = new Stack<>();\r\n+    \t\r\n+    \tStar star = new Star(StarType.SUN, 10000000, 500000);\r\n+    \tSystem.out.println(star);\r\n+    \tstates.add(star.getMemento());\r\n+    \tstar.timePasses();\r\n+    \tSystem.out.println(star);\r\n+    \tstates.add(star.getMemento());\r\n+    \tstar.timePasses();\r\n+    \tSystem.out.println(star);\r\n+    \tstates.add(star.getMemento());\r\n+    \tstar.timePasses();\r\n+    \tSystem.out.println(star);\r\n+    \tstates.add(star.getMemento());\r\n+    \tstar.timePasses();\r\n+    \tSystem.out.println(star);\r\n+    \twhile (states.size() > 0) {\r\n+    \t\tstar.setMemento(states.pop());\r\n+        \tSystem.out.println(star);\r\n+    \t}\r\n+    }\r\n+}\r\n\ndiff --git a/memento/src/main/java/com/iluwatar/Star.java b/memento/src/main/java/com/iluwatar/Star.java\n--- a/memento/src/main/java/com/iluwatar/Star.java\n+++ b/memento/src/main/java/com/iluwatar/Star.java\n@@ -0,0 +1,63 @@\n+package com.iluwatar;\r\n+\r\n+public class Star {\r\n+\t\r\n+\tprivate StarType type;\r\n+\tprivate int ageYears;\r\n+\tprivate int massTons;\r\n+\t\r\n+\tpublic Star(StarType startType, int startAge, int startMass) {\r\n+\t\tthis.type = startType;\r\n+\t\tthis.ageYears = startAge;\r\n+\t\tthis.massTons = startMass;\r\n+\t}\r\n+\t\r\n+\tpublic void timePasses() {\r\n+\t\tageYears *= 2;\r\n+\t\tmassTons *= 8;\r\n+\t\tswitch (type) {\r\n+\t\tcase RED_GIANT:\r\n+\t\t\ttype = StarType.WHITE_DWARF;\r\n+\t\t\tbreak;\r\n+\t\tcase SUN:\r\n+\t\t\ttype = StarType.RED_GIANT;\r\n+\t\t\tbreak;\r\n+\t\tcase SUPERNOVA:\r\n+\t\t\ttype = StarType.DEAD;\r\n+\t\t\tbreak;\r\n+\t\tcase WHITE_DWARF:\r\n+\t\t\ttype = StarType.SUPERNOVA;\r\n+\t\t\tbreak;\r\n+\t\tcase DEAD:\r\n+\t\t\tageYears *= 2;\r\n+\t\t\tmassTons = 0;\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tStarMemento getMemento() {\r\n+\r\n+\t\tStarMementoInternal state = new StarMementoInternal();\r\n+\t\tstate.setAgeYears(ageYears);\r\n+\t\tstate.setMassTons(massTons);\r\n+\t\tstate.setType(type);\r\n+\t\treturn state;\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tvoid setMemento(StarMemento memento) {\r\n+\t\t\r\n+\t\tStarMementoInternal state = (StarMementoInternal) memento;\r\n+\t\tthis.type = state.getType();\r\n+\t\tthis.ageYears = state.getAgeYears();\r\n+\t\tthis.massTons = state.getMassTons();\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn String.format(\"%s age: %d years mass: %d tons\", type.toString(), ageYears, massTons);\r\n+\t}\r\n+}\r\n\ndiff --git a/memento/src/main/java/com/iluwatar/StarMemento.java b/memento/src/main/java/com/iluwatar/StarMemento.java\n--- a/memento/src/main/java/com/iluwatar/StarMemento.java\n+++ b/memento/src/main/java/com/iluwatar/StarMemento.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\r\n+\r\n+public interface StarMemento {\r\n+\r\n+}\r\n\ndiff --git a/memento/src/main/java/com/iluwatar/StarMementoInternal.java b/memento/src/main/java/com/iluwatar/StarMementoInternal.java\n--- a/memento/src/main/java/com/iluwatar/StarMementoInternal.java\n+++ b/memento/src/main/java/com/iluwatar/StarMementoInternal.java\n@@ -0,0 +1,27 @@\n+package com.iluwatar;\r\n+\r\n+public class StarMementoInternal implements StarMemento {\r\n+\r\n+\tprivate StarType type;\r\n+\tprivate int ageYears;\r\n+\tprivate int massTons;\r\n+\t\r\n+\tpublic StarType getType() {\r\n+\t\treturn type;\r\n+\t}\r\n+\tpublic void setType(StarType type) {\r\n+\t\tthis.type = type;\r\n+\t}\r\n+\tpublic int getAgeYears() {\r\n+\t\treturn ageYears;\r\n+\t}\r\n+\tpublic void setAgeYears(int ageYears) {\r\n+\t\tthis.ageYears = ageYears;\r\n+\t}\r\n+\tpublic int getMassTons() {\r\n+\t\treturn massTons;\r\n+\t}\r\n+\tpublic void setMassTons(int massTons) {\r\n+\t\tthis.massTons = massTons;\r\n+\t}\r\n+}\r\n\ndiff --git a/memento/src/main/java/com/iluwatar/StarType.java b/memento/src/main/java/com/iluwatar/StarType.java\n--- a/memento/src/main/java/com/iluwatar/StarType.java\n+++ b/memento/src/main/java/com/iluwatar/StarType.java\n@@ -0,0 +1,36 @@\n+package com.iluwatar;\r\n+\r\n+public enum StarType {\r\n+\r\n+\tSUN,\r\n+\tRED_GIANT,\r\n+\tWHITE_DWARF,\r\n+\tSUPERNOVA,\r\n+\tDEAD;\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\tString s = \"\";\r\n+\t\tswitch (this) {\r\n+\t\tcase RED_GIANT:\r\n+\t\t\ts = \"red giant\";\r\n+\t\t\tbreak;\r\n+\t\tcase SUN:\r\n+\t\t\ts = \"sun\";\r\n+\t\t\tbreak;\r\n+\t\tcase SUPERNOVA:\r\n+\t\t\ts = \"supernova\";\r\n+\t\t\tbreak;\r\n+\t\tcase WHITE_DWARF:\r\n+\t\t\ts = \"white dwarf\";\r\n+\t\t\tbreak;\r\n+\t\tcase DEAD:\r\n+\t\t\ts = \"dead star\";\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t\treturn s;\r\n+\t}\r\n+\t\r\n+}\r",
    "output": "Add memento sample"
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar;\r\n+\r\n+public enum Action {\r\n+\r\n+\tHUNT, TALE, GOLD, ENEMY;\r\n+\r\n+\tpublic String toString() {\r\n+\t\t\r\n+\t\tString s = \"\";\r\n+\t\tswitch (this) {\r\n+\t\tcase ENEMY:\r\n+\t\t\ts = \"spotted enemies\";\r\n+\t\t\tbreak;\r\n+\t\tcase GOLD:\r\n+\t\t\ts = \"found gold\";\r\n+\t\t\tbreak;\r\n+\t\tcase HUNT:\r\n+\t\t\ts = \"hunted a rabbit\";\r\n+\t\t\tbreak;\r\n+\t\tcase TALE:\r\n+\t\t\ts = \"tells a tale\";\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t\treturn s;\r\n+\t};\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/App.java b/mediator/src/main/java/com/iluwatar/App.java\n--- a/mediator/src/main/java/com/iluwatar/App.java\n+++ b/mediator/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tParty party = new PartyImpl();\r\n+    \tHobbit hobbit = new Hobbit();\r\n+    \tWizard wizard = new Wizard();\r\n+    \tRogue rogue = new Rogue();\r\n+    \tHunter hunter = new Hunter();\r\n+    \t\r\n+    \tparty.addMember(hobbit);\r\n+    \tparty.addMember(wizard);\r\n+    \tparty.addMember(rogue);\r\n+    \tparty.addMember(hunter);\r\n+    \t\r\n+    \thobbit.act(Action.ENEMY);\r\n+    \twizard.act(Action.TALE);\r\n+    \trogue.act(Action.GOLD);\r\n+    \thunter.act(Action.HUNT);\r\n+    }\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/Hobbit.java b/mediator/src/main/java/com/iluwatar/Hobbit.java\n--- a/mediator/src/main/java/com/iluwatar/Hobbit.java\n+++ b/mediator/src/main/java/com/iluwatar/Hobbit.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class Hobbit extends PartyMemberBase {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Hobbit\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/Hunter.java b/mediator/src/main/java/com/iluwatar/Hunter.java\n--- a/mediator/src/main/java/com/iluwatar/Hunter.java\n+++ b/mediator/src/main/java/com/iluwatar/Hunter.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class Hunter extends PartyMemberBase {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Hunter\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/Party.java b/mediator/src/main/java/com/iluwatar/Party.java\n--- a/mediator/src/main/java/com/iluwatar/Party.java\n+++ b/mediator/src/main/java/com/iluwatar/Party.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public interface Party {\r\n+\r\n+\tvoid addMember(PartyMember member);\r\n+\t\r\n+\tvoid act(PartyMember actor, Action action);\r\n+\t\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/PartyImpl.java b/mediator/src/main/java/com/iluwatar/PartyImpl.java\n--- a/mediator/src/main/java/com/iluwatar/PartyImpl.java\n+++ b/mediator/src/main/java/com/iluwatar/PartyImpl.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class PartyImpl implements Party {\r\n+\r\n+\tprivate List<PartyMember> members;\r\n+\t\r\n+\tpublic PartyImpl() {\r\n+\t\tmembers = new ArrayList<>();\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void act(PartyMember actor, Action action) {\r\n+\t\tfor (PartyMember member: members) {\r\n+\t\t\tif (member != actor) {\r\n+\t\t\t\tmember.partyAction(action);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void addMember(PartyMember member) {\r\n+\t\tmembers.add(member);\r\n+\t\tmember.joinedParty(this);\r\n+\t}\r\n+\t\r\n+\t// somebody hunts for food, call for dinner\r\n+\t\r\n+\t// somebody spots enemy, alert everybody\r\n+\t\r\n+\t// somebody finds gold, deal the gold with everybody\r\n+\t\r\n+\t// somebody tells a tale, call everybody to listen\r\n+\t\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/PartyMember.java b/mediator/src/main/java/com/iluwatar/PartyMember.java\n--- a/mediator/src/main/java/com/iluwatar/PartyMember.java\n+++ b/mediator/src/main/java/com/iluwatar/PartyMember.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public interface PartyMember {\r\n+\r\n+\tvoid joinedParty(Party party);\r\n+\t\r\n+\tvoid partyAction(Action action);\r\n+\r\n+\tvoid act(Action action);\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/PartyMemberBase.java b/mediator/src/main/java/com/iluwatar/PartyMemberBase.java\n--- a/mediator/src/main/java/com/iluwatar/PartyMemberBase.java\n+++ b/mediator/src/main/java/com/iluwatar/PartyMemberBase.java\n@@ -0,0 +1,46 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class PartyMemberBase implements PartyMember {\r\n+\r\n+\tprotected Party party;\r\n+\r\n+\t@Override\r\n+\tpublic void joinedParty(Party party) {\r\n+\t\tSystem.out.println(this + \" joins the party\");\r\n+\t\tthis.party = party;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void partyAction(Action action) {\r\n+\t\tString s = this + \" \";\r\n+\t\tswitch (action) {\r\n+\t\tcase ENEMY:\r\n+\t\t\ts = s + \"runs for cover\";\r\n+\t\t\tbreak;\r\n+\t\tcase GOLD:\r\n+\t\t\ts = s + \"takes his share of the gold\";\r\n+\t\t\tbreak;\r\n+\t\tcase HUNT:\r\n+\t\t\ts = s + \"arrives for dinner\";\r\n+\t\t\tbreak;\r\n+\t\tcase TALE:\r\n+\t\t\ts = s + \"comes to listen\";\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t\tSystem.out.println(s);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void act(Action action) {\r\n+\t\tif (party != null) {\r\n+\t\t\tSystem.out.println(this + \" \" + action.toString());\r\n+\t\t\tparty.act(this, action);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic abstract String toString();\r\n+\t\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/Rogue.java b/mediator/src/main/java/com/iluwatar/Rogue.java\n--- a/mediator/src/main/java/com/iluwatar/Rogue.java\n+++ b/mediator/src/main/java/com/iluwatar/Rogue.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class Rogue extends PartyMemberBase {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Rogue\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/mediator/src/main/java/com/iluwatar/Wizard.java b/mediator/src/main/java/com/iluwatar/Wizard.java\n--- a/mediator/src/main/java/com/iluwatar/Wizard.java\n+++ b/mediator/src/main/java/com/iluwatar/Wizard.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class Wizard extends PartyMemberBase {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Wizard\";\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add mediator sample"
  },
  {
    "input": "diff --git a/iterator/src/main/java/com/iluwatar/App.java b/iterator/src/main/java/com/iluwatar/App.java\n--- a/iterator/src/main/java/com/iluwatar/App.java\n+++ b/iterator/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,35 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tTreasureChest chest = new TreasureChest();\r\n+    \t\r\n+    \tItemIterator ringIterator = chest.Iterator(ItemType.RING);\r\n+    \twhile (ringIterator.hasNext()) {\r\n+    \t\tSystem.out.println(ringIterator.next());\r\n+    \t}\r\n+    \t\r\n+    \tSystem.out.println(\"----------\");\r\n+    \t\r\n+    \tItemIterator potionIterator = chest.Iterator(ItemType.POTION);\r\n+    \twhile (potionIterator.hasNext()) {\r\n+    \t\tSystem.out.println(potionIterator.next());\r\n+    \t}\r\n+    \t\r\n+    \tSystem.out.println(\"----------\");\r\n+    \t\r\n+    \tItemIterator weaponIterator = chest.Iterator(ItemType.WEAPON);\r\n+    \twhile (weaponIterator.hasNext()) {\r\n+    \t\tSystem.out.println(weaponIterator.next());\r\n+    \t}\r\n+    \t\r\n+    \tSystem.out.println(\"----------\");\r\n+    \t\r\n+    \tItemIterator it = chest.Iterator(ItemType.ANY);\r\n+    \twhile (it.hasNext()) {\r\n+    \t\tSystem.out.println(it.next());\r\n+    \t}\r\n+    }\r\n+}\r\n\ndiff --git a/iterator/src/main/java/com/iluwatar/Item.java b/iterator/src/main/java/com/iluwatar/Item.java\n--- a/iterator/src/main/java/com/iluwatar/Item.java\n+++ b/iterator/src/main/java/com/iluwatar/Item.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\r\n+\r\n+public class Item {\r\n+\r\n+\tprivate ItemType type;\r\n+\tprivate String name;\r\n+\r\n+\tpublic Item(ItemType type, String name) {\r\n+\t\tthis.setType(type);\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic ItemType getType() {\r\n+\t\treturn type;\r\n+\t}\r\n+\r\n+\tpublic void setType(ItemType type) {\r\n+\t\tthis.type = type;\r\n+\t}\r\n+}\r\n\ndiff --git a/iterator/src/main/java/com/iluwatar/ItemIterator.java b/iterator/src/main/java/com/iluwatar/ItemIterator.java\n--- a/iterator/src/main/java/com/iluwatar/ItemIterator.java\n+++ b/iterator/src/main/java/com/iluwatar/ItemIterator.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\r\n+\r\n+public interface ItemIterator {\r\n+\r\n+\tboolean hasNext();\r\n+\t\r\n+\tItem next();\r\n+}\r\n\ndiff --git a/iterator/src/main/java/com/iluwatar/ItemType.java b/iterator/src/main/java/com/iluwatar/ItemType.java\n--- a/iterator/src/main/java/com/iluwatar/ItemType.java\n+++ b/iterator/src/main/java/com/iluwatar/ItemType.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public enum ItemType {\r\n+\r\n+\tANY,\r\n+\tWEAPON,\r\n+\tRING,\r\n+\tPOTION\r\n+\t\r\n+}\r\n\ndiff --git a/iterator/src/main/java/com/iluwatar/TreasureChest.java b/iterator/src/main/java/com/iluwatar/TreasureChest.java\n--- a/iterator/src/main/java/com/iluwatar/TreasureChest.java\n+++ b/iterator/src/main/java/com/iluwatar/TreasureChest.java\n@@ -0,0 +1,34 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class TreasureChest {\r\n+\r\n+\tprivate List<Item> items;\r\n+\t\r\n+\tpublic TreasureChest() {\r\n+\t\titems = new ArrayList<>();\r\n+\t\titems.add(new Item(ItemType.POTION, \"Potion of courage\"));\r\n+\t\titems.add(new Item(ItemType.RING, \"Ring of shadows\"));\r\n+\t\titems.add(new Item(ItemType.POTION, \"Potion of wisdom\"));\r\n+\t\titems.add(new Item(ItemType.POTION, \"Potion of blood\"));\r\n+\t\titems.add(new Item(ItemType.WEAPON, \"Sword of silver +1\"));\r\n+\t\titems.add(new Item(ItemType.POTION, \"Potion of rust\"));\r\n+\t\titems.add(new Item(ItemType.POTION, \"Potion of healing\"));\r\n+\t\titems.add(new Item(ItemType.RING, \"Ring of armor\"));\r\n+\t\titems.add(new Item(ItemType.WEAPON, \"Steel halberd\"));\r\n+\t\titems.add(new Item(ItemType.WEAPON, \"Dagger of poison\"));\r\n+\t}\r\n+\t\r\n+\tItemIterator Iterator(ItemType type) {\r\n+\t\treturn new TreasureChestItemIterator(this, type);\r\n+\t}\r\n+\r\n+\tpublic List<Item> getItems() {\r\n+\t\tArrayList<Item> list = new ArrayList<>();\r\n+\t\tlist.addAll(items);\r\n+\t\treturn list;\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/iterator/src/main/java/com/iluwatar/TreasureChestItemIterator.java b/iterator/src/main/java/com/iluwatar/TreasureChestItemIterator.java\n--- a/iterator/src/main/java/com/iluwatar/TreasureChestItemIterator.java\n+++ b/iterator/src/main/java/com/iluwatar/TreasureChestItemIterator.java\n@@ -0,0 +1,48 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class TreasureChestItemIterator implements ItemIterator {\r\n+\r\n+\tprivate TreasureChest chest;\r\n+\tprivate int idx;\r\n+\tprivate ItemType type;\r\n+\r\n+\tpublic TreasureChestItemIterator(TreasureChest chest, ItemType type) {\r\n+\t\tthis.chest = chest;\r\n+\t\tthis.type = type;\r\n+\t\tthis.idx = -1;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic boolean hasNext() {\r\n+\t\treturn findNextIdx() != -1;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Item next() {\r\n+\t\tidx = findNextIdx();\r\n+\t\tif (idx != -1) {\r\n+\t\t\treturn chest.getItems().get(idx);\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\t\r\n+\tprivate int findNextIdx() {\r\n+\t\t\r\n+\t\tList<Item> items = chest.getItems();\r\n+\t\tboolean found = false;\r\n+\t\tint tempIdx = idx;\r\n+\t\twhile (!found) {\r\n+\t\t\ttempIdx++;\r\n+\t\t\tif (tempIdx >= items.size()) {\r\n+\t\t\t\ttempIdx = -1;\r\n+\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\tif (type.equals(ItemType.ANY) || items.get(tempIdx).getType().equals(type)) {\r\n+\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn tempIdx;\r\n+\t}\r\n+}\r",
    "output": "Add iterator sample"
  },
  {
    "input": "diff --git a/interpreter/src/main/java/com/iluwatar/App.java b/interpreter/src/main/java/com/iluwatar/App.java\n--- a/interpreter/src/main/java/com/iluwatar/App.java\n+++ b/interpreter/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,61 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.Stack;\r\n+\r\n+public class App \r\n+{\r\n+\t\r\n+\t/**\r\n+\t * \r\n+\t * Expressions can be evaluated using prefix, infix or postfix notations\r\n+\t * This sample uses postfix, where operator comes after the operands\r\n+\t * \r\n+\t */\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tString tokenString = \"4 3 2 - 1 + *\";\r\n+\t\tStack<Expression> stack = new Stack<>();\r\n+\r\n+\t\tString[] tokenList = tokenString.split(\" \");\r\n+\t\tfor (String s : tokenList) {\r\n+\t\t\tif (isOperator(s)) {\r\n+\t\t\t\tExpression rightExpression = stack.pop();\r\n+\t\t\t\tExpression leftExpression = stack.pop();\r\n+\t\t\t\tSystem.out.println(String.format(\"popped from stack left: %d right: %d\", \r\n+\t\t\t\t\t\tleftExpression.interpret(), rightExpression.interpret()));\r\n+\t\t\t\tExpression operator = getOperatorInstance(s, leftExpression,\r\n+\t\t\t\t\t\trightExpression);\r\n+\t\t\t\tSystem.out.println(String.format(\"operator: %s\", operator));\r\n+\t\t\t\tint result = operator.interpret();\r\n+\t\t\t\tNumberExpression resultExpression = new NumberExpression(result);\r\n+\t\t\t\tstack.push(resultExpression);\r\n+\t\t\t\tSystem.out.println(String.format(\"push result to stack: %d\", resultExpression.interpret()));\r\n+\t\t\t} else {\r\n+\t\t\t\tExpression i = new NumberExpression(s);\r\n+\t\t\t\tstack.push(i);\r\n+\t\t\t\tSystem.out.println(String.format(\"push to stack: %d\", i.interpret()));\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tSystem.out.println(String.format(\"result: %d\", stack.pop().interpret()));    \t\r\n+    }\r\n+    \r\n+    public static boolean isOperator(String s) {\r\n+\t\tif (s.equals(\"+\") || s.equals(\"-\") || s.equals(\"*\"))\r\n+\t\t\treturn true;\r\n+\t\telse\r\n+\t\t\treturn false;\r\n+\t}\r\n+\r\n+\tpublic static Expression getOperatorInstance(String s, Expression left,\r\n+\t\t\tExpression right) {\r\n+\t\tswitch (s) {\r\n+\t\tcase \"+\":\r\n+\t\t\treturn new PlusExpression(left, right);\r\n+\t\tcase \"-\":\r\n+\t\t\treturn new MinusExpression(left, right);\r\n+\t\tcase \"*\":\r\n+\t\t\treturn new MultiplyExpression(left, right);\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\t\r\n+}\r\n\ndiff --git a/interpreter/src/main/java/com/iluwatar/Expression.java b/interpreter/src/main/java/com/iluwatar/Expression.java\n--- a/interpreter/src/main/java/com/iluwatar/Expression.java\n+++ b/interpreter/src/main/java/com/iluwatar/Expression.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class Expression {\r\n+\r\n+\tpublic abstract int interpret();\r\n+\t\r\n+\t@Override\r\n+\tpublic abstract String toString();\r\n+}\r\n\ndiff --git a/interpreter/src/main/java/com/iluwatar/MinusExpression.java b/interpreter/src/main/java/com/iluwatar/MinusExpression.java\n--- a/interpreter/src/main/java/com/iluwatar/MinusExpression.java\n+++ b/interpreter/src/main/java/com/iluwatar/MinusExpression.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public class MinusExpression extends Expression {\r\n+\r\n+\tprivate Expression leftExpression;\r\n+\tprivate Expression rightExpression;\r\n+\r\n+\tpublic MinusExpression(Expression leftExpression, Expression rightExpression) {\r\n+\t\tthis.leftExpression = leftExpression;\r\n+\t\tthis.rightExpression = rightExpression;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int interpret() {\r\n+\t\treturn leftExpression.interpret() - rightExpression.interpret();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"-\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/interpreter/src/main/java/com/iluwatar/MultiplyExpression.java b/interpreter/src/main/java/com/iluwatar/MultiplyExpression.java\n--- a/interpreter/src/main/java/com/iluwatar/MultiplyExpression.java\n+++ b/interpreter/src/main/java/com/iluwatar/MultiplyExpression.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public class MultiplyExpression extends Expression {\r\n+\r\n+\tprivate Expression leftExpression;\r\n+\tprivate Expression rightExpression;\r\n+\r\n+\tpublic MultiplyExpression(Expression leftExpression, Expression rightExpression) {\r\n+\t\tthis.leftExpression = leftExpression;\r\n+\t\tthis.rightExpression = rightExpression;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int interpret() {\r\n+\t\treturn leftExpression.interpret() * rightExpression.interpret();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"*\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/interpreter/src/main/java/com/iluwatar/NumberExpression.java b/interpreter/src/main/java/com/iluwatar/NumberExpression.java\n--- a/interpreter/src/main/java/com/iluwatar/NumberExpression.java\n+++ b/interpreter/src/main/java/com/iluwatar/NumberExpression.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\r\n+\r\n+public class NumberExpression extends Expression {\r\n+\r\n+\tprivate int number;\r\n+\r\n+\tpublic NumberExpression(int number) {\r\n+\t\tthis.number = number;\r\n+\t}\r\n+\t\r\n+\tpublic NumberExpression(String s) {\r\n+\t\tthis.number = Integer.parseInt(s);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int interpret() {\r\n+\t\treturn number;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"number\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/interpreter/src/main/java/com/iluwatar/PlusExpression.java b/interpreter/src/main/java/com/iluwatar/PlusExpression.java\n--- a/interpreter/src/main/java/com/iluwatar/PlusExpression.java\n+++ b/interpreter/src/main/java/com/iluwatar/PlusExpression.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public class PlusExpression extends Expression {\r\n+\r\n+\tprivate Expression leftExpression;\r\n+\tprivate Expression rightExpression;\r\n+\r\n+\tpublic PlusExpression(Expression leftExpression, Expression rightExpression) {\r\n+\t\tthis.leftExpression = leftExpression;\r\n+\t\tthis.rightExpression = rightExpression;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic int interpret() {\r\n+\t\treturn leftExpression.interpret() + rightExpression.interpret();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"+\";\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add interpreter sample"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/App.java b/command/src/main/java/com/iluwatar/App.java\n--- a/command/src/main/java/com/iluwatar/App.java\n+++ b/command/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tWizard wizard = new Wizard();\r\n+    \tGoblin goblin = new Goblin();\r\n+\r\n+    \tgoblin.printStatus();\r\n+    \t\r\n+    \twizard.castSpell(new ShrinkSpell(), goblin);\r\n+    \tgoblin.printStatus();\r\n+    \t\r\n+    \twizard.castSpell(new InvisibilitySpell(), goblin);\r\n+    \tgoblin.printStatus();\r\n+    \twizard.undoLastSpell();\r\n+    \tgoblin.printStatus();\r\n+    }\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Command.java b/command/src/main/java/com/iluwatar/Command.java\n--- a/command/src/main/java/com/iluwatar/Command.java\n+++ b/command/src/main/java/com/iluwatar/Command.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class Command {\r\n+\r\n+\tpublic abstract void execute(Target target);\r\n+\t\r\n+\tpublic abstract void undo();\r\n+\r\n+\t@Override\r\n+\tpublic abstract String toString();\t\r\n+\t\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Goblin.java b/command/src/main/java/com/iluwatar/Goblin.java\n--- a/command/src/main/java/com/iluwatar/Goblin.java\n+++ b/command/src/main/java/com/iluwatar/Goblin.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\r\n+\r\n+public class Goblin extends Target {\r\n+\r\n+\tpublic Goblin() {\r\n+\t\tthis.setSize(Size.NORMAL);\r\n+\t\tthis.setVisibility(Visibility.VISIBLE);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Goblin\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/InvisibilitySpell.java b/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n--- a/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n+++ b/command/src/main/java/com/iluwatar/InvisibilitySpell.java\n@@ -0,0 +1,28 @@\n+package com.iluwatar;\r\n+\r\n+public class InvisibilitySpell extends Command {\r\n+\r\n+\tprivate Target target;\r\n+\t\r\n+\tpublic InvisibilitySpell() {\r\n+\t\ttarget = null;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(Target target) {\r\n+\t\ttarget.setVisibility(Visibility.INVISIBLE);\r\n+\t\tthis.target = target;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void undo() {\r\n+\t\tif (target != null) {\r\n+\t\t\ttarget.setVisibility(Visibility.VISIBLE);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Invisibility spell\";\r\n+\t}\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/ShrinkSpell.java b/command/src/main/java/com/iluwatar/ShrinkSpell.java\n--- a/command/src/main/java/com/iluwatar/ShrinkSpell.java\n+++ b/command/src/main/java/com/iluwatar/ShrinkSpell.java\n@@ -0,0 +1,32 @@\n+package com.iluwatar;\r\n+\r\n+public class ShrinkSpell extends Command {\r\n+\r\n+\tprivate Size oldSize;\r\n+\t\r\n+\tprivate Target target;\r\n+\t\r\n+\tpublic ShrinkSpell() {\r\n+\t\toldSize = null;\r\n+\t\ttarget = null;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(Target target) {\r\n+\t\toldSize = target.getSize();\r\n+\t\ttarget.setSize(Size.SMALL);\r\n+\t\tthis.target = target;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void undo() {\r\n+\t\tif (oldSize != null && target != null) {\r\n+\t\t\ttarget.setSize(oldSize);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Shrink spell\";\r\n+\t}\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Size.java b/command/src/main/java/com/iluwatar/Size.java\n--- a/command/src/main/java/com/iluwatar/Size.java\n+++ b/command/src/main/java/com/iluwatar/Size.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar;\r\n+\r\n+public enum Size {\r\n+\r\n+\tSMALL,\r\n+\tNORMAL,\r\n+\tLARGE;\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\t\r\n+\t\tString s = \"\";\r\n+\t\t\r\n+\t\tswitch (this) {\r\n+\t\tcase LARGE:\r\n+\t\t\ts = \"large\";\r\n+\t\t\tbreak;\r\n+\t\tcase NORMAL:\r\n+\t\t\ts = \"normal\";\r\n+\t\t\tbreak;\r\n+\t\tcase SMALL:\r\n+\t\t\ts = \"small\";\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t}\r\n+\t\treturn s;\r\n+\t}\r\n+\r\n+\t\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Target.java b/command/src/main/java/com/iluwatar/Target.java\n--- a/command/src/main/java/com/iluwatar/Target.java\n+++ b/command/src/main/java/com/iluwatar/Target.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class Target {\r\n+\r\n+\tprivate Size size;\r\n+\r\n+\tprivate Visibility visibility;\r\n+\t\r\n+\tpublic Size getSize() {\r\n+\t\treturn size;\r\n+\t}\r\n+\r\n+\tpublic void setSize(Size size) {\r\n+\t\tthis.size = size;\r\n+\t}\r\n+\r\n+\tpublic Visibility getVisibility() {\r\n+\t\treturn visibility;\r\n+\t}\r\n+\r\n+\tpublic void setVisibility(Visibility visibility) {\r\n+\t\tthis.visibility = visibility;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic abstract String toString();\r\n+\t\r\n+\tpublic void printStatus() {\r\n+\t\tSystem.out.println(String.format(\"%s, size=%s visibility=%s\", this, getSize(), getVisibility()));\r\n+\t}\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Visibility.java b/command/src/main/java/com/iluwatar/Visibility.java\n--- a/command/src/main/java/com/iluwatar/Visibility.java\n+++ b/command/src/main/java/com/iluwatar/Visibility.java\n@@ -0,0 +1,26 @@\n+package com.iluwatar;\r\n+\r\n+public enum Visibility {\r\n+\r\n+\tVISIBLE,\r\n+\tINVISIBLE;\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\t\r\n+\t\tString s = \"\";\r\n+\t\t\r\n+\t\tswitch (this) {\r\n+\t\tcase INVISIBLE:\r\n+\t\t\ts = \"invisible\";\r\n+\t\t\tbreak;\r\n+\t\tcase VISIBLE:\r\n+\t\t\ts = \"visible\";\r\n+\t\t\tbreak;\r\n+\t\tdefault:\r\n+\t\t\tbreak;\r\n+\t\t\r\n+\t\t}\r\n+\t\treturn s;\r\n+\t}\r\n+}\r\n\ndiff --git a/command/src/main/java/com/iluwatar/Wizard.java b/command/src/main/java/com/iluwatar/Wizard.java\n--- a/command/src/main/java/com/iluwatar/Wizard.java\n+++ b/command/src/main/java/com/iluwatar/Wizard.java\n@@ -0,0 +1,31 @@\n+package com.iluwatar;\r\n+\r\n+public class Wizard extends Target {\r\n+\r\n+\tprivate Command previousSpell;\r\n+\t\r\n+\tpublic Wizard() {\r\n+\t\tthis.setSize(Size.NORMAL);\r\n+\t\tthis.setVisibility(Visibility.VISIBLE);\r\n+\t\tpreviousSpell = null;\r\n+\t}\r\n+\t\r\n+\tpublic void castSpell(Command command, Target target) {\r\n+\t\tSystem.out.println(this + \" casts \" + command + \" at \" + target);\r\n+\t\tcommand.execute(target);\r\n+\t\tpreviousSpell = command;\r\n+\t}\r\n+\r\n+\tpublic void undoLastSpell() {\r\n+\t\tif (previousSpell != null) {\r\n+\t\t\tSystem.out.println(this + \" undoes \" + previousSpell);\r\n+\t\t\tpreviousSpell.undo();\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Wizard\";\r\n+\t}\r\n+\t\r\n+}\r",
    "output": "Add command sample"
  },
  {
    "input": "diff --git a/chain/src/main/java/com/iluwatar/App.java b/chain/src/main/java/com/iluwatar/App.java\n--- a/chain/src/main/java/com/iluwatar/App.java\n+++ b/chain/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+\r\n+    \tOrcKing king = new OrcKing();\r\n+    \tking.makeRequest(new Request(RequestType.DEFEND_CASTLE, \"defend castle\"));\r\n+    \tking.makeRequest(new Request(RequestType.TORTURE_PRISONER, \"torture prisoner\"));\r\n+    \tking.makeRequest(new Request(RequestType.COLLECT_TAX, \"collect tax\"));\r\n+        \r\n+    }\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/OrcCommander.java b/chain/src/main/java/com/iluwatar/OrcCommander.java\n--- a/chain/src/main/java/com/iluwatar/OrcCommander.java\n+++ b/chain/src/main/java/com/iluwatar/OrcCommander.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcCommander extends RequestHandler {\r\n+\r\n+\tpublic OrcCommander(RequestHandler handler) {\r\n+\t\tsuper(handler);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void handleRequest(Request req) {\r\n+\t\tif (req.getRequestType().equals(RequestType.DEFEND_CASTLE)) {\r\n+\t\t\tprintHandling(req);\r\n+\t\t} else {\r\n+\t\t\tsuper.handleRequest(req);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Orc commander\";\r\n+\t}\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/OrcKing.java b/chain/src/main/java/com/iluwatar/OrcKing.java\n--- a/chain/src/main/java/com/iluwatar/OrcKing.java\n+++ b/chain/src/main/java/com/iluwatar/OrcKing.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcKing {\r\n+\r\n+\tRequestHandler chain;\r\n+\t\r\n+\tpublic OrcKing() {\r\n+\t\tbuildChain();\r\n+\t}\r\n+\t\r\n+\tprivate void buildChain() {\r\n+\t\tchain = new OrcCommander(new OrcOfficer(new OrcSoldier(null)));\r\n+\t}\r\n+\t\r\n+\tpublic void makeRequest(Request req) {\r\n+\t\tchain.handleRequest(req);\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/OrcOfficer.java b/chain/src/main/java/com/iluwatar/OrcOfficer.java\n--- a/chain/src/main/java/com/iluwatar/OrcOfficer.java\n+++ b/chain/src/main/java/com/iluwatar/OrcOfficer.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcOfficer extends RequestHandler {\r\n+\r\n+\tpublic OrcOfficer(RequestHandler handler) {\r\n+\t\tsuper(handler);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void handleRequest(Request req) {\r\n+\t\tif (req.getRequestType().equals(RequestType.TORTURE_PRISONER)) {\r\n+\t\t\tprintHandling(req);\r\n+\t\t} else {\r\n+\t\t\tsuper.handleRequest(req);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Orc officer\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/OrcSoldier.java b/chain/src/main/java/com/iluwatar/OrcSoldier.java\n--- a/chain/src/main/java/com/iluwatar/OrcSoldier.java\n+++ b/chain/src/main/java/com/iluwatar/OrcSoldier.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcSoldier extends RequestHandler {\r\n+\r\n+\tpublic OrcSoldier(RequestHandler handler) {\r\n+\t\tsuper(handler);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void handleRequest(Request req) {\r\n+\t\tif (req.getRequestType().equals(RequestType.COLLECT_TAX)) {\r\n+\t\t\tprintHandling(req);\r\n+\t\t} else {\r\n+\t\t\tsuper.handleRequest(req);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Orc soldier\";\r\n+\t}\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/Request.java b/chain/src/main/java/com/iluwatar/Request.java\n--- a/chain/src/main/java/com/iluwatar/Request.java\n+++ b/chain/src/main/java/com/iluwatar/Request.java\n@@ -0,0 +1,33 @@\n+package com.iluwatar;\r\n+\r\n+public class Request {\r\n+\r\n+\tprivate String requestDescription;\r\n+\tprivate RequestType requestType;\r\n+\r\n+\tpublic Request(RequestType requestType, String requestDescription) {\r\n+\t\tthis.setRequestType(requestType);\r\n+\t\tthis.setRequestDescription(requestDescription);\r\n+\t}\r\n+\r\n+\tpublic String getRequestDescription() {\r\n+\t\treturn requestDescription;\r\n+\t}\r\n+\r\n+\tpublic void setRequestDescription(String requestDescription) {\r\n+\t\tthis.requestDescription = requestDescription;\r\n+\t}\r\n+\r\n+\tpublic RequestType getRequestType() {\r\n+\t\treturn requestType;\r\n+\t}\r\n+\r\n+\tpublic void setRequestType(RequestType requestType) {\r\n+\t\tthis.requestType = requestType;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn getRequestDescription();\r\n+\t}\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/RequestHandler.java b/chain/src/main/java/com/iluwatar/RequestHandler.java\n--- a/chain/src/main/java/com/iluwatar/RequestHandler.java\n+++ b/chain/src/main/java/com/iluwatar/RequestHandler.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class RequestHandler {\r\n+\t\r\n+\tprivate RequestHandler next;\r\n+\r\n+\tpublic RequestHandler(RequestHandler next) {\r\n+\t\tthis.next = next;\r\n+\t}\r\n+\t\r\n+\tpublic void handleRequest(Request req) {\r\n+\t\tif (next != null) {\r\n+\t\t\tnext.handleRequest(req);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tprotected void printHandling(Request req) {\r\n+\t\tSystem.out.println(this + \" handling request \\\"\" + req + \"\\\"\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic abstract String toString();\r\n+}\r\n\ndiff --git a/chain/src/main/java/com/iluwatar/RequestType.java b/chain/src/main/java/com/iluwatar/RequestType.java\n--- a/chain/src/main/java/com/iluwatar/RequestType.java\n+++ b/chain/src/main/java/com/iluwatar/RequestType.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public enum RequestType {\r\n+\r\n+\tDEFEND_CASTLE,\r\n+\tTORTURE_PRISONER,\r\n+\tCOLLECT_TAX\r\n+\t\r\n+}\r",
    "output": "Add chain of responsibility sample"
  },
  {
    "input": "diff --git a/proxy/src/main/java/com/iluwatar/App.java b/proxy/src/main/java/com/iluwatar/App.java\n--- a/proxy/src/main/java/com/iluwatar/App.java\n+++ b/proxy/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+\r\n+    \tWizardTowerProxy tower = new WizardTowerProxy();\r\n+    \ttower.enter(new Wizard(\"Red wizard\"));\r\n+    \ttower.enter(new Wizard(\"White wizard\"));\r\n+    \ttower.enter(new Wizard(\"Black wizard\"));\r\n+    \ttower.enter(new Wizard(\"Green wizard\"));\r\n+    \ttower.enter(new Wizard(\"Brown wizard\"));\r\n+        \r\n+    }\r\n+}\r\n\ndiff --git a/proxy/src/main/java/com/iluwatar/Wizard.java b/proxy/src/main/java/com/iluwatar/Wizard.java\n--- a/proxy/src/main/java/com/iluwatar/Wizard.java\n+++ b/proxy/src/main/java/com/iluwatar/Wizard.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public class Wizard {\r\n+\r\n+\tprivate String name;\r\n+\r\n+\tpublic Wizard(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/proxy/src/main/java/com/iluwatar/WizardTower.java b/proxy/src/main/java/com/iluwatar/WizardTower.java\n--- a/proxy/src/main/java/com/iluwatar/WizardTower.java\n+++ b/proxy/src/main/java/com/iluwatar/WizardTower.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public class WizardTower {\r\n+\r\n+\tpublic void enter(Wizard wizard) {\r\n+\t\tSystem.out.println(wizard + \" enters the tower.\");\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/proxy/src/main/java/com/iluwatar/WizardTowerProxy.java b/proxy/src/main/java/com/iluwatar/WizardTowerProxy.java\n--- a/proxy/src/main/java/com/iluwatar/WizardTowerProxy.java\n+++ b/proxy/src/main/java/com/iluwatar/WizardTowerProxy.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\r\n+\r\n+public class WizardTowerProxy extends WizardTower {\r\n+\r\n+\tprivate static final int NUM_WIZARDS_ALLOWED = 3;\r\n+\t\r\n+\tprivate int numWizards;\r\n+\t\r\n+\t@Override\r\n+\tpublic void enter(Wizard wizard) {\r\n+\t\tif (numWizards < NUM_WIZARDS_ALLOWED) {\r\n+\t\t\tsuper.enter(wizard);\r\n+\t\t\tnumWizards++;\r\n+\t\t} else {\r\n+\t\t\tSystem.out.println(wizard + \" is not allowed to enter!\");\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+}\r",
    "output": "Add proxy sample"
  },
  {
    "input": "diff --git a/flyweight/src/main/java/com/iluwatar/AlchemistShop.java b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java\n--- a/flyweight/src/main/java/com/iluwatar/AlchemistShop.java\n+++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java\n@@ -0,0 +1,49 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class AlchemistShop {\r\n+\r\n+\tList<Potion> topShelf;\r\n+\tList<Potion> bottomShelf;\r\n+\t\r\n+\tpublic AlchemistShop() {\r\n+\t\ttopShelf = new ArrayList<>();\r\n+\t\tbottomShelf = new ArrayList<>();\r\n+\t\tfillShelves();\r\n+\t}\r\n+\r\n+\tprivate void fillShelves() {\r\n+\t\ttopShelf.add(new InvisibilityPotion());\r\n+\t\ttopShelf.add(new InvisibilityPotion());\r\n+\t\ttopShelf.add(new StrengthPotion());\r\n+\t\ttopShelf.add(new HealingPotion());\r\n+\t\ttopShelf.add(new InvisibilityPotion());\r\n+\t\ttopShelf.add(new StrengthPotion());\r\n+\t\ttopShelf.add(new HealingPotion());\r\n+\t\ttopShelf.add(new HealingPotion());\r\n+\t\t\r\n+\t\tbottomShelf.add(new PoisonPotion());\r\n+\t\tbottomShelf.add(new PoisonPotion());\r\n+\t\tbottomShelf.add(new PoisonPotion());\r\n+\t\tbottomShelf.add(new HolyWaterPotion());\r\n+\t\tbottomShelf.add(new HolyWaterPotion());\r\n+\t}\r\n+\t\r\n+\tpublic void enumerate() {\r\n+\r\n+\t\tSystem.out.println(\"Enumerating top shelf potions\\n\");\r\n+\t\t\r\n+\t\tfor (Potion p: topShelf) {\r\n+\t\t\tp.drink();\r\n+\t\t}\r\n+\t\t\r\n+\t\tSystem.out.println(\"\\nEnumerating bottom shelf potions\\n\");\r\n+\t\t\r\n+\t\tfor (Potion p: bottomShelf) {\r\n+\t\t\tp.drink();\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/App.java b/flyweight/src/main/java/com/iluwatar/App.java\n--- a/flyweight/src/main/java/com/iluwatar/App.java\n+++ b/flyweight/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tAlchemistShop alchemistShop = new AlchemistShop();\r\n+    \talchemistShop.enumerate();\r\n+    }\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/HealingPotion.java b/flyweight/src/main/java/com/iluwatar/HealingPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/HealingPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/HealingPotion.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class HealingPotion implements Potion {\r\n+\r\n+\t@Override\r\n+\tpublic void drink() {\r\n+\t\tSystem.out.println(\"You feel healed.\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java b/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/HolyWaterPotion.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class HolyWaterPotion implements Potion {\r\n+\r\n+\t@Override\r\n+\tpublic void drink() {\r\n+\t\tSystem.out.println(\"You feel blessed.\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java b/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/InvisibilityPotion.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class InvisibilityPotion implements Potion {\r\n+\r\n+\t@Override\r\n+\tpublic void drink() {\r\n+\t\tSystem.out.println(\"You become invisible.\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PoisonPotion.java b/flyweight/src/main/java/com/iluwatar/PoisonPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/PoisonPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/PoisonPotion.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class PoisonPotion implements Potion {\r\n+\r\n+\t@Override\r\n+\tpublic void drink() {\r\n+\t\tSystem.out.println(\"Urgh! This is poisonous.\");\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/Potion.java b/flyweight/src/main/java/com/iluwatar/Potion.java\n--- a/flyweight/src/main/java/com/iluwatar/Potion.java\n+++ b/flyweight/src/main/java/com/iluwatar/Potion.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public interface Potion {\r\n+\r\n+\tpublic void drink();\r\n+\t\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PotionFactory.java b/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n--- a/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n+++ b/flyweight/src/main/java/com/iluwatar/PotionFactory.java\n@@ -0,0 +1,39 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.EnumMap;\r\n+\r\n+public class PotionFactory {\r\n+\r\n+\tprivate EnumMap<PotionType, Potion> potions;\r\n+\t\r\n+\tpublic PotionFactory() {\r\n+\t\tpotions = new EnumMap<>(PotionType.class);\r\n+\t}\r\n+\t\r\n+\tPotion createPotion(PotionType type) {\r\n+\t\tPotion potion = potions.get(type);\r\n+\t\tif (potion == null) {\r\n+\t\t\tswitch (type) {\r\n+\t\t\tcase HEALING:\r\n+\t\t\t\tpotion = new HealingPotion();\r\n+\t\t\t\tbreak;\r\n+\t\t\tcase HOLY_WATER:\r\n+\t\t\t\tpotion = new HolyWaterPotion();\r\n+\t\t\t\tbreak;\r\n+\t\t\tcase INVISIBILITY:\r\n+\t\t\t\tpotion = new InvisibilityPotion();\r\n+\t\t\t\tbreak;\r\n+\t\t\tcase POISON:\r\n+\t\t\t\tpotion = new PoisonPotion();\r\n+\t\t\t\tbreak;\r\n+\t\t\tcase STRENGTH:\r\n+\t\t\t\tpotion = new StrengthPotion();\r\n+\t\t\t\tbreak;\r\n+\t\t\tdefault:\r\n+\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn potion;\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/PotionType.java b/flyweight/src/main/java/com/iluwatar/PotionType.java\n--- a/flyweight/src/main/java/com/iluwatar/PotionType.java\n+++ b/flyweight/src/main/java/com/iluwatar/PotionType.java\n@@ -0,0 +1,11 @@\n+package com.iluwatar;\r\n+\r\n+public enum PotionType {\r\n+\r\n+\tHEALING,\r\n+\tINVISIBILITY,\r\n+\tSTRENGTH,\r\n+\tHOLY_WATER,\r\n+\tPOISON;\r\n+\t\r\n+}\r\n\ndiff --git a/flyweight/src/main/java/com/iluwatar/StrengthPotion.java b/flyweight/src/main/java/com/iluwatar/StrengthPotion.java\n--- a/flyweight/src/main/java/com/iluwatar/StrengthPotion.java\n+++ b/flyweight/src/main/java/com/iluwatar/StrengthPotion.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class StrengthPotion implements Potion {\r\n+\r\n+\t@Override\r\n+\tpublic void drink() {\r\n+\t\tSystem.out.println(\"You feel strong.\");\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add flyweight sample"
  },
  {
    "input": "diff --git a/facade/src/main/java/com/iluwatar/App.java b/facade/src/main/java/com/iluwatar/App.java\n--- a/facade/src/main/java/com/iluwatar/App.java\n+++ b/facade/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tDwarvenGoldmineFacade facade = new DwarvenGoldmineFacade();\r\n+    \tfacade.startNewDay();\r\n+    \tfacade.digOutGold();\r\n+    \tfacade.endDay();\r\n+    }\r\n+}\r\n\ndiff --git a/facade/src/main/java/com/iluwatar/DwarvenCartOperator.java b/facade/src/main/java/com/iluwatar/DwarvenCartOperator.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenCartOperator.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenCartOperator.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\r\n+\r\n+public class DwarvenCartOperator extends DwarvenMineWorker {\r\n+\r\n+\t@Override\r\n+\tpublic void work() {\r\n+\t\tSystem.out.println(name() + \" moves gold chunks out of the mine.\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String name() {\r\n+\t\treturn \"Dwarf cart operator\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/facade/src/main/java/com/iluwatar/DwarvenGoldDigger.java b/facade/src/main/java/com/iluwatar/DwarvenGoldDigger.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenGoldDigger.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenGoldDigger.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\r\n+\r\n+public class DwarvenGoldDigger extends DwarvenMineWorker {\r\n+\r\n+\t@Override\r\n+\tpublic void work() {\r\n+\t\tSystem.out.println(name() + \" digs for gold.\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String name() {\r\n+\t\treturn \"Dwarf gold digger\";\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java b/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenGoldmineFacade.java\n@@ -0,0 +1,37 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class DwarvenGoldmineFacade {\r\n+\r\n+\tList<DwarvenMineWorker> workers;\r\n+\t\r\n+\tpublic DwarvenGoldmineFacade() {\r\n+\t\tworkers = new ArrayList<>();\r\n+\t\tworkers.add(new DwarvenGoldDigger());\r\n+\t\tworkers.add(new DwarvenCartOperator());\r\n+\t\tworkers.add(new DwarvenTunnelDigger());\r\n+\t}\r\n+\t\r\n+\tpublic void startNewDay() {\r\n+\t\tfor (DwarvenMineWorker worker: workers) {\r\n+\t\t\tworker.wakeUp();\r\n+\t\t\tworker.goToMine();\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void digOutGold() {\r\n+\t\tfor (DwarvenMineWorker worker: workers) {\r\n+\t\t\tworker.work();\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void endDay() {\r\n+\t\tfor (DwarvenMineWorker worker: workers) {\r\n+\t\t\tworker.goHome();\r\n+\t\t\tworker.goToSleep();\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java b/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenMineWorker.java\n@@ -0,0 +1,25 @@\n+package com.iluwatar;\r\n+\r\n+public abstract class DwarvenMineWorker {\r\n+\r\n+\tpublic void goToSleep() {\r\n+\t\tSystem.out.println(name() + \" goes to sleep.\");\r\n+\t}\r\n+\t\r\n+\tpublic void wakeUp() {\r\n+\t\tSystem.out.println(name() + \" wakes up.\");\r\n+\t}\r\n+\t\r\n+\tpublic void goHome() {\r\n+\t\tSystem.out.println(name() + \" goes home.\");\r\n+\t}\r\n+\t\r\n+\tpublic void goToMine() {\r\n+\t\tSystem.out.println(name() + \" goes to the mine.\");\r\n+\t}\r\n+\t\r\n+\tpublic abstract void work();\r\n+\t\r\n+\tpublic abstract String name();\r\n+\t\r\n+}\r\n\ndiff --git a/facade/src/main/java/com/iluwatar/DwarvenTunnelDigger.java b/facade/src/main/java/com/iluwatar/DwarvenTunnelDigger.java\n--- a/facade/src/main/java/com/iluwatar/DwarvenTunnelDigger.java\n+++ b/facade/src/main/java/com/iluwatar/DwarvenTunnelDigger.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar;\r\n+\r\n+public class DwarvenTunnelDigger extends DwarvenMineWorker {\r\n+\r\n+\t@Override\r\n+\tpublic void work() {\r\n+\t\tSystem.out.println(name() + \" creates another promising tunnel.\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String name() {\r\n+\t\treturn \"Dwarven tunnel digger\";\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add facade sample"
  },
  {
    "input": "diff --git a/decorator/src/main/java/com/iluwatar/App.java b/decorator/src/main/java/com/iluwatar/App.java\n--- a/decorator/src/main/java/com/iluwatar/App.java\n+++ b/decorator/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,18 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \t\r\n+    \tSystem.out.println(\"A simple looking troll approaches.\");\r\n+    \tTroll troll = new Troll();\r\n+    \ttroll.attack();\r\n+    \ttroll.fleeBattle();\r\n+    \t\r\n+    \tSystem.out.println(\"\\nA smart looking troll surprises you.\");\r\n+    \tTroll smart = new SmartTroll(new Troll());\r\n+    \tsmart.attack();\r\n+    \tsmart.fleeBattle();\r\n+    }\r\n+}\r\n\ndiff --git a/decorator/src/main/java/com/iluwatar/SmartTroll.java b/decorator/src/main/java/com/iluwatar/SmartTroll.java\n--- a/decorator/src/main/java/com/iluwatar/SmartTroll.java\n+++ b/decorator/src/main/java/com/iluwatar/SmartTroll.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+public class SmartTroll extends Troll {\r\n+\r\n+\tprivate Troll decorated;\r\n+\r\n+\tpublic SmartTroll(Troll decorated) {\r\n+\t\tthis.decorated = decorated;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void attack() {\r\n+\t\tSystem.out.println(\"The troll throws a rock at you!\");\r\n+\t\tdecorated.attack();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void fleeBattle() {\r\n+\t\tSystem.out.println(\"The troll calls for help!\");\r\n+\t\tdecorated.fleeBattle();\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/decorator/src/main/java/com/iluwatar/Troll.java b/decorator/src/main/java/com/iluwatar/Troll.java\n--- a/decorator/src/main/java/com/iluwatar/Troll.java\n+++ b/decorator/src/main/java/com/iluwatar/Troll.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\r\n+\r\n+public class Troll {\r\n+\r\n+\tpublic void attack() {\r\n+\t\tSystem.out.println(\"The troll swings at you with a club!\");\r\n+\t}\r\n+\t\r\n+\tpublic void fleeBattle() {\r\n+\t\tSystem.out.println(\"The troll shrieks in horror and runs away!\");\r\n+\t}\r\n+\t\r\n+}\r",
    "output": "Add decorator sample"
  },
  {
    "input": "diff --git a/composite/src/main/java/com/iluwatar/App.java b/composite/src/main/java/com/iluwatar/App.java\n--- a/composite/src/main/java/com/iluwatar/App.java\n+++ b/composite/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \t\r\n+    \tSystem.out.println(\"Message from the orcs: \");\r\n+    \t\r\n+    \tLetterComposite orcMessage = new Messenger().messageFromOrcs();\r\n+    \torcMessage.print();\r\n+\r\n+    \tSystem.out.println(\"\\n\");\r\n+    \t\r\n+    \tSystem.out.println(\"Message from the elves: \");\r\n+    \t\r\n+    \tLetterComposite elfMessage = new Messenger().messageFromElves();\r\n+    \telfMessage.print();\r\n+    \t\r\n+    }\r\n+}\r\n\ndiff --git a/composite/src/main/java/com/iluwatar/Letter.java b/composite/src/main/java/com/iluwatar/Letter.java\n--- a/composite/src/main/java/com/iluwatar/Letter.java\n+++ b/composite/src/main/java/com/iluwatar/Letter.java\n@@ -0,0 +1,21 @@\n+package com.iluwatar;\r\n+\r\n+public class Letter extends LetterComposite {\r\n+\r\n+\tprivate char c;\r\n+\r\n+\tpublic Letter(char c) {\r\n+\t\tthis.c = c;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void printThisBefore() {\r\n+\t\tSystem.out.print(c);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void printThisAfter() {\r\n+\t\t// nop\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/composite/src/main/java/com/iluwatar/LetterComposite.java b/composite/src/main/java/com/iluwatar/LetterComposite.java\n--- a/composite/src/main/java/com/iluwatar/LetterComposite.java\n+++ b/composite/src/main/java/com/iluwatar/LetterComposite.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public abstract class LetterComposite {\r\n+\r\n+\tprivate List<LetterComposite> children = new ArrayList<LetterComposite>();\r\n+\r\n+\tpublic void add(LetterComposite letter) {\r\n+\t\tchildren.add(letter);\r\n+\t}\r\n+\t\r\n+\tpublic int count() {\r\n+\t\treturn children.size();\r\n+\t}\r\n+\t\r\n+\tprotected abstract void printThisBefore();\r\n+\r\n+\tprotected abstract void printThisAfter();\r\n+\t\r\n+\tpublic void print() {\r\n+\t\tprintThisBefore();\r\n+\t\tfor (LetterComposite letter: children) {\r\n+\t\t\tletter.print();\r\n+\t\t}\r\n+\t\tprintThisAfter();\r\n+\t}\r\n+}\r\n\ndiff --git a/composite/src/main/java/com/iluwatar/Messenger.java b/composite/src/main/java/com/iluwatar/Messenger.java\n--- a/composite/src/main/java/com/iluwatar/Messenger.java\n+++ b/composite/src/main/java/com/iluwatar/Messenger.java\n@@ -0,0 +1,42 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+public class Messenger {\r\n+\r\n+\tLetterComposite messageFromOrcs() {\r\n+\t\t\r\n+\t\tList<Word> words = new ArrayList<Word>();\r\n+\t\t\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('W'), new Letter('h'), new Letter('e'), new Letter('r'), new Letter('e'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('t'), new Letter('h'), new Letter('e'), new Letter('r'), new Letter('e'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('i'), new Letter('s'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('a'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('w'), new Letter('h'), new Letter('i'), new Letter('p'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('t'), new Letter('h'), new Letter('e'), new Letter('r'), new Letter('e'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('i'), new Letter('s'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('a'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('w'), new Letter('a'), new Letter('y'))));\r\n+\t\t\r\n+\t\treturn new Sentence(words);\r\n+\t\t\r\n+\t}\r\n+\r\n+\tLetterComposite messageFromElves() {\r\n+\t\t\r\n+\t\tList<Word> words = new ArrayList<Word>();\r\n+\t\t\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('M'), new Letter('u'), new Letter('c'), new Letter('h'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('w'), new Letter('i'), new Letter('n'), new Letter('d'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('p'), new Letter('o'), new Letter('u'), new Letter('r'), new Letter('s'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('f'), new Letter('r'), new Letter('o'), new Letter('m'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('y'), new Letter('o'), new Letter('u'), new Letter('r'))));\r\n+\t\twords.add(new Word(Arrays.asList(new Letter('m'), new Letter('o'), new Letter('u'), new Letter('t'), new Letter('h'))));\r\n+\t\t\r\n+\t\treturn new Sentence(words);\r\n+\t\t\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/composite/src/main/java/com/iluwatar/Sentence.java b/composite/src/main/java/com/iluwatar/Sentence.java\n--- a/composite/src/main/java/com/iluwatar/Sentence.java\n+++ b/composite/src/main/java/com/iluwatar/Sentence.java\n@@ -0,0 +1,24 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class Sentence extends LetterComposite {\r\n+\r\n+\tpublic Sentence(List<Word> words) {\r\n+\t\tfor (Word w: words) {\r\n+\t\t\tthis.add(w);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected void printThisBefore() {\r\n+\t\t// nop\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void printThisAfter() {\r\n+\t\tSystem.out.print(\".\");\r\n+\t}\r\n+\r\n+\r\n+}\r\n\ndiff --git a/composite/src/main/java/com/iluwatar/Word.java b/composite/src/main/java/com/iluwatar/Word.java\n--- a/composite/src/main/java/com/iluwatar/Word.java\n+++ b/composite/src/main/java/com/iluwatar/Word.java\n@@ -0,0 +1,23 @@\n+package com.iluwatar;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class Word extends LetterComposite {\r\n+\r\n+\tpublic Word(List<Letter> letters) {\r\n+\t\tfor (Letter l: letters) {\r\n+\t\t\tthis.add(l);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected void printThisBefore() {\r\n+\t\tSystem.out.print(\" \");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void printThisAfter() {\r\n+\t\t// nop\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add composite sample"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/App.java b/adapter/src/main/java/com/iluwatar/App.java\n--- a/adapter/src/main/java/com/iluwatar/App.java\n+++ b/adapter/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tGnomeEngineerAdapter engineer = new GnomeEngineerAdapter();\r\n+    \tengineer.flyGoblinGlider();\r\n+    }\r\n+}\r\n\ndiff --git a/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java b/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java\n--- a/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java\n+++ b/adapter/src/main/java/com/iluwatar/GnomeEngineerAdapter.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\r\n+\r\n+public class GnomeEngineerAdapter {\r\n+\r\n+\tprivate GoblinGlider glider;\r\n+\t\r\n+\tpublic GnomeEngineerAdapter() {\r\n+\t\tglider = new GoblinGlider();\r\n+\t}\r\n+\t\r\n+\tpublic void flyGoblinGlider() {\r\n+\t\tglider.attachGlider();\r\n+\t\tglider.gainSpeed();\r\n+\t\tglider.takeOff();\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/adapter/src/main/java/com/iluwatar/GoblinGlider.java b/adapter/src/main/java/com/iluwatar/GoblinGlider.java\n--- a/adapter/src/main/java/com/iluwatar/GoblinGlider.java\n+++ b/adapter/src/main/java/com/iluwatar/GoblinGlider.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\r\n+\r\n+public class GoblinGlider {\r\n+\r\n+\tpublic void attachGlider() {\r\n+\t\tSystem.out.println(\"glider attached\");\r\n+\t}\r\n+\t\r\n+\tpublic void gainSpeed() {\r\n+\t\tSystem.out.println(\"gaining speed\");\r\n+\t}\r\n+\t\r\n+\tpublic void takeOff() {\r\n+\t\tSystem.out.println(\"lift-off!\");\r\n+\t}\r\n+\t\r\n+}\r",
    "output": "Add adapter sample"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \t\r\n+    \tIvoryTower ivoryTower1 = IvoryTower.getInstance();\r\n+    \tIvoryTower ivoryTower2 = IvoryTower.getInstance();\r\n+    \tSystem.out.println(\"ivoryTower1=\" + ivoryTower1);\r\n+    \tSystem.out.println(\"ivoryTower2=\" + ivoryTower2);\r\n+    \t\r\n+    }\r\n+}\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/IvoryTower.java b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\r\n+\r\n+public class IvoryTower {\r\n+\r\n+\tprivate static IvoryTower instance = new IvoryTower();\r\n+\t\r\n+\tprivate IvoryTower() {\r\n+\t}\r\n+\r\n+\tpublic static IvoryTower getInstance() {\r\n+\t\treturn instance;\r\n+\t}\r\n+}\r",
    "output": "Add singleton sample"
  },
  {
    "input": "diff --git a/factory-method/src/main/java/com/iluwatar/App.java b/factory-method/src/main/java/com/iluwatar/App.java\n--- a/factory-method/src/main/java/com/iluwatar/App.java\n+++ b/factory-method/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,22 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tBlacksmith blacksmith;\r\n+    \tWeapon weapon;\r\n+    \t\r\n+    \tblacksmith = new OrcBlacksmith();\r\n+    \tweapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\r\n+    \tSystem.out.println(weapon);\r\n+    \tweapon = blacksmith.manufactureWeapon(WeaponType.AXE);\r\n+    \tSystem.out.println(weapon);\r\n+    \t\r\n+    \tblacksmith = new ElfBlacksmith();\r\n+    \tweapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);\r\n+    \tSystem.out.println(weapon);\r\n+    \tweapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\r\n+    \tSystem.out.println(weapon);\r\n+    }\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/Blacksmith.java b/factory-method/src/main/java/com/iluwatar/Blacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/Blacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/Blacksmith.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public interface Blacksmith {\r\n+\r\n+\tWeapon manufactureWeapon(WeaponType weaponType);\r\n+\t\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/ElfBlacksmith.java b/factory-method/src/main/java/com/iluwatar/ElfBlacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/ElfBlacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/ElfBlacksmith.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public class ElfBlacksmith implements Blacksmith {\r\n+\r\n+\tpublic Weapon manufactureWeapon(WeaponType weaponType) {\r\n+\t\treturn new ElfWeapon(weaponType);\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/ElfWeapon.java b/factory-method/src/main/java/com/iluwatar/ElfWeapon.java\n--- a/factory-method/src/main/java/com/iluwatar/ElfWeapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/ElfWeapon.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public class ElfWeapon implements Weapon {\r\n+\r\n+\tprivate WeaponType weaponType;\r\n+\r\n+\tpublic ElfWeapon(WeaponType weaponType) {\r\n+\t\tthis.weaponType = weaponType;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Elven \" + weaponType;\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/OrcBlacksmith.java b/factory-method/src/main/java/com/iluwatar/OrcBlacksmith.java\n--- a/factory-method/src/main/java/com/iluwatar/OrcBlacksmith.java\n+++ b/factory-method/src/main/java/com/iluwatar/OrcBlacksmith.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcBlacksmith implements Blacksmith {\r\n+\r\n+\tpublic Weapon manufactureWeapon(WeaponType weaponType) {\r\n+\t\treturn new OrcWeapon(weaponType);\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/OrcWeapon.java b/factory-method/src/main/java/com/iluwatar/OrcWeapon.java\n--- a/factory-method/src/main/java/com/iluwatar/OrcWeapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/OrcWeapon.java\n@@ -0,0 +1,16 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcWeapon implements Weapon {\r\n+\r\n+\tprivate WeaponType weaponType;\r\n+\r\n+\tpublic OrcWeapon(WeaponType weaponType) {\r\n+\t\tthis.weaponType = weaponType;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Orcish \" + weaponType;\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/Weapon.java b/factory-method/src/main/java/com/iluwatar/Weapon.java\n--- a/factory-method/src/main/java/com/iluwatar/Weapon.java\n+++ b/factory-method/src/main/java/com/iluwatar/Weapon.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\r\n+\r\n+public interface Weapon {\r\n+\r\n+}\r\n\ndiff --git a/factory-method/src/main/java/com/iluwatar/WeaponType.java b/factory-method/src/main/java/com/iluwatar/WeaponType.java\n--- a/factory-method/src/main/java/com/iluwatar/WeaponType.java\n+++ b/factory-method/src/main/java/com/iluwatar/WeaponType.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar;\r\n+\r\n+public enum WeaponType {\r\n+\r\n+\tSHORT_SWORD, SPEAR, AXE;\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\tString s = \"\";\r\n+\t\tswitch(this) {\r\n+\t\tcase SHORT_SWORD: s = \"short sword\"; break;\r\n+\t\tcase SPEAR: s = \"spear\"; break;\r\n+\t\tcase AXE: s = \"axe\"; break;\r\n+\t\t}\r\n+\t\treturn s;\r\n+\t}\r\n+\t\r\n+\t\r\n+}\r",
    "output": "Add factory method sample"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/App.java b/abstract-factory/src/main/java/com/iluwatar/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,20 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \tcreateKingdom(new ElfKingdomFactory());\r\n+    \tcreateKingdom(new OrcKingdomFactory());\r\n+    }\r\n+    \r\n+    public static void createKingdom(KingdomFactory factory) {\r\n+    \tKing king = factory.createKing();\r\n+    \tCastle castle = factory.createCastle();\r\n+    \tArmy army = factory.createArmy();\r\n+    \tSystem.out.println(\"The kingdom was created.\");\r\n+    \tSystem.out.println(king);\r\n+    \tSystem.out.println(castle);\r\n+    \tSystem.out.println(army);\r\n+    }\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/Army.java b/abstract-factory/src/main/java/com/iluwatar/Army.java\n--- a/abstract-factory/src/main/java/com/iluwatar/Army.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/Army.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\r\n+\r\n+public interface Army {\r\n+\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/Castle.java b/abstract-factory/src/main/java/com/iluwatar/Castle.java\n--- a/abstract-factory/src/main/java/com/iluwatar/Castle.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/Castle.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\r\n+\r\n+public interface Castle {\r\n+\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/ElfArmy.java b/abstract-factory/src/main/java/com/iluwatar/ElfArmy.java\n--- a/abstract-factory/src/main/java/com/iluwatar/ElfArmy.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/ElfArmy.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class ElfArmy implements Army {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"This is the Elven Army!\";\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/ElfCastle.java b/abstract-factory/src/main/java/com/iluwatar/ElfCastle.java\n--- a/abstract-factory/src/main/java/com/iluwatar/ElfCastle.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/ElfCastle.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class ElfCastle implements Castle {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"This is the Elven castle!\";\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/ElfKing.java b/abstract-factory/src/main/java/com/iluwatar/ElfKing.java\n--- a/abstract-factory/src/main/java/com/iluwatar/ElfKing.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/ElfKing.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class ElfKing implements King {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"This is the Elven king!\";\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/ElfKingdomFactory.java b/abstract-factory/src/main/java/com/iluwatar/ElfKingdomFactory.java\n--- a/abstract-factory/src/main/java/com/iluwatar/ElfKingdomFactory.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/ElfKingdomFactory.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\r\n+\r\n+public class ElfKingdomFactory implements KingdomFactory {\r\n+\r\n+\tpublic Castle createCastle() {\r\n+\t\treturn new ElfCastle();\r\n+\t}\r\n+\r\n+\tpublic King createKing() {\r\n+\t\treturn new ElfKing();\r\n+\t}\r\n+\r\n+\tpublic Army createArmy() {\r\n+\t\treturn new ElfArmy();\r\n+\t}\r\n+\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/King.java b/abstract-factory/src/main/java/com/iluwatar/King.java\n--- a/abstract-factory/src/main/java/com/iluwatar/King.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/King.java\n@@ -0,0 +1,5 @@\n+package com.iluwatar;\r\n+\r\n+public interface King {\r\n+\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/KingdomFactory.java b/abstract-factory/src/main/java/com/iluwatar/KingdomFactory.java\n--- a/abstract-factory/src/main/java/com/iluwatar/KingdomFactory.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/KingdomFactory.java\n@@ -0,0 +1,9 @@\n+package com.iluwatar;\r\n+\r\n+public interface KingdomFactory {\r\n+\r\n+\tCastle createCastle();\r\n+\tKing createKing();\r\n+\tArmy createArmy();\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/OrcArmy.java b/abstract-factory/src/main/java/com/iluwatar/OrcArmy.java\n--- a/abstract-factory/src/main/java/com/iluwatar/OrcArmy.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/OrcArmy.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcArmy implements Army {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"This is the Orcish Army!\";\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/OrcCastle.java b/abstract-factory/src/main/java/com/iluwatar/OrcCastle.java\n--- a/abstract-factory/src/main/java/com/iluwatar/OrcCastle.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/OrcCastle.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcCastle implements Castle {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"This is the Orcish castle!\";\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/OrcKing.java b/abstract-factory/src/main/java/com/iluwatar/OrcKing.java\n--- a/abstract-factory/src/main/java/com/iluwatar/OrcKing.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/OrcKing.java\n@@ -0,0 +1,10 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcKing implements King {\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"This is the Orc king!\";\r\n+\t}\r\n+\t\r\n+}\r\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/OrcKingdomFactory.java b/abstract-factory/src/main/java/com/iluwatar/OrcKingdomFactory.java\n--- a/abstract-factory/src/main/java/com/iluwatar/OrcKingdomFactory.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/OrcKingdomFactory.java\n@@ -0,0 +1,17 @@\n+package com.iluwatar;\r\n+\r\n+public class OrcKingdomFactory implements KingdomFactory {\r\n+\r\n+\tpublic Castle createCastle() {\r\n+\t\treturn new OrcCastle();\r\n+\t}\r\n+\r\n+\tpublic King createKing() {\r\n+\t\treturn new OrcKing();\r\n+\t}\r\n+\r\n+\tpublic Army createArmy() {\r\n+\t\treturn new OrcArmy();\r\n+\t}\r\n+\r\n+}\r",
    "output": "Add abstract-factory sample"
  }
]