[
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -485,6 +485,10 @@ private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final Strin\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t});\n \t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t// Don't wait for beans that aren't pauseable...\n+\t\t\t\t\t\t\tlatch.countDown();\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse if (!pauseableOnly) {\n \t\t\t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "Upgrade CountDownLatch for non-pauseable beans"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java\n@@ -48,7 +48,7 @@ class CacheEvaluationContext extends MethodBasedEvaluationContext {\n \tprivate final Set<String> unavailableVariables = new HashSet<>(1);\n \n \n-\tCacheEvaluationContext(Object rootObject, Method method, @Nullable Object[] arguments,\n+\tCacheEvaluationContext(@Nullable Object rootObject, Method method, @Nullable Object[] arguments,\n \t\t\tParameterNameDiscoverer parameterNameDiscoverer) {\n \n \t\tsuper(rootObject, method, arguments, parameterNameDiscoverer);\n\ndiff --git a/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java b/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java\n@@ -53,7 +53,7 @@ public class MethodBasedEvaluationContext extends StandardEvaluationContext {\n \tprivate boolean argumentsLoaded = false;\n \n \n-\tpublic MethodBasedEvaluationContext(Object rootObject, Method method, @Nullable Object[] arguments,\n+\tpublic MethodBasedEvaluationContext(@Nullable Object rootObject, Method method, @Nullable Object[] arguments,\n \t\t\tParameterNameDiscoverer parameterNameDiscoverer) {\n \n \t\tsuper(rootObject);",
    "output": "Make rootObject parameter consistently nullable MethodBasedEvaluationContext and CacheEvaluationContext should allow a nullable rootObject constructor parameter like StandardEvaluationContext does"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java b/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java\n@@ -78,7 +78,7 @@\n  * @see JmsMessagingTemplate\n  * @see org.springframework.messaging.support.MessageBuilder\n  */\n-interface JmsClient {\n+public interface JmsClient {\n \n \t/**\n \t * Provide an operation handle for the given JMS destination.",
    "output": "Fix JmsClient visibility"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java\n--- a/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java\n@@ -107,9 +107,8 @@ public Mono<Void> filter(ServerWebExchange exchange) {\n \t\t\t\t\t\tthis.handler.handle(exchange));\n \t}\n \n-\tprivate Mono<Void> invokeFilter(WebFilter current, DefaultWebFilterChain chain, ServerWebExchange exchange) {\n-\t\tString currentName = current.getClass().getName();\n-\t\treturn current.filter(exchange, chain).checkpoint(currentName + \" [DefaultWebFilterChain]\");\n+\tprivate Mono<Void> invokeFilter(WebFilter filter, DefaultWebFilterChain chain, ServerWebExchange exchange) {\n+\t\treturn filter.filter(exchange, chain).checkpoint(filter.toString());\n \t}\n \n }",
    "output": "Use toString for WebFilter checkpoint"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n--- a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n+++ b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.core.retry;\n \n-import java.time.Duration;\n import java.util.ArrayDeque;\n import java.util.Deque;\n \n@@ -84,7 +83,6 @@ public RetryTemplate(RetryPolicy retryPolicy) {\n \t * @param retryPolicy the retry policy to use\n \t * @see RetryPolicy#withDefaults()\n \t * @see RetryPolicy#withMaxAttempts(long)\n-\t * @see RetryPolicy#withMaxElapsedTime(Duration)\n \t * @see RetryPolicy#builder()\n \t */\n \tpublic void setRetryPolicy(RetryPolicy retryPolicy) {",
    "output": "Remove obsolete Javadoc reference"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.26.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.26.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.26.1"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n@@ -224,7 +224,6 @@ void contentNegotiationManager() {\n \t\tassertThat(mediaTypeMappings)\n \t\t\t\t.containsEntry(\"atom\", MediaType.APPLICATION_ATOM_XML)\n \t\t\t\t.containsEntry(\"rss\", MediaType.APPLICATION_RSS_XML)\n-\t\t\t\t.containsEntry(\"rss\", MediaType.APPLICATION_RSS_XML)\n \t\t\t\t.containsEntry(\"xml\", MediaType.APPLICATION_XML)\n \t\t\t\t.containsEntry(\"json\", MediaType.APPLICATION_JSON)\n \t\t\t\t.containsEntry(\"smile\", MediaType.valueOf(\"application/x-jackson-smile\"))",
    "output": "Remove the duplicated “rss” assertion"
  },
  {
    "input": "diff --git a/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java b/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java\n--- a/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java\n+++ b/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java\n@@ -103,7 +103,7 @@ private static String fromTypeDescriptor(String descriptor) {\n \t\tclassDesc.packageName() + \".\" + classDesc.displayName();\n \t}\n \n-\tprivate static Object parseArrayValue(String className, @org.jetbrains.annotations.Nullable ClassLoader classLoader, AnnotationValue.OfArray arrayValue) {\n+\tprivate static Object parseArrayValue(String className, @Nullable ClassLoader classLoader, AnnotationValue.OfArray arrayValue) {\n \t\tif (arrayValue.values().isEmpty()) {\n \t\t\treturn new Object[0];\n \t\t}",
    "output": "Fix Nullable import in ClassFileAnnotationMetadata"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.25.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.26.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.26"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java\n@@ -51,7 +51,7 @@ public void queryParameter() throws Exception {\n \t\tDefaultApiVersionStrategy versionStrategy = new DefaultApiVersionStrategy(\n \t\t\t\tList.of(request -> request.getHeader(header)),\n \t\t\t\tnew SemanticApiVersionParser(),\n-\t\t\t\ttrue, null);\n+\t\t\t\ttrue, null, null);\n \n \t\tMockMvc mockMvc = standaloneSetup(new PersonController())\n \t\t\t\t.setApiVersionStrategy(versionStrategy)",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n@@ -34,16 +34,17 @@ void apply(Project project) {\n \n \tprivate void configure(KotlinCompile compile) {\n \t\tcompile.compilerOptions(options -> {\n-\t\t\toptions.getApiVersion().set(KotlinVersion.KOTLIN_2_1);\n-\t\t\toptions.getLanguageVersion().set(KotlinVersion.KOTLIN_2_1);\n+\t\t\toptions.getApiVersion().set(KotlinVersion.KOTLIN_2_2);\n+\t\t\toptions.getLanguageVersion().set(KotlinVersion.KOTLIN_2_2);\n \t\t\toptions.getJvmTarget().set(JvmTarget.JVM_17);\n \t\t\toptions.getJavaParameters().set(true);\n \t\t\toptions.getAllWarningsAsErrors().set(true);\n \t\t\toptions.getFreeCompilerArgs().addAll(\n \t\t\t\t\t\"-Xsuppress-version-warnings\",\n \t\t\t\t\t\"-Xjsr305=strict\", // For dependencies using JSR 305\n \t\t\t\t\t\"-opt-in=kotlin.RequiresOptIn\",\n-\t\t\t\t\t\"-Xjdk-release=17\" // Needed due to https://youtrack.jetbrains.com/issue/KT-49746\n+\t\t\t\t\t\"-Xjdk-release=17\", // Needed due to https://youtrack.jetbrains.com/issue/KT-49746\n+\t\t\t\t\t\"-Xannotation-default-target=param-property\" // Upcoming default, see https://youtrack.jetbrains.com/issue/KT-73255\n \t\t\t);\n \t\t});\n \t}",
    "output": "Upgrade to Kotlin 2.2.0 Kotlin 2.2 is the new baseline for Spring Framework 7.0. -Xannotation-default-target=param-property is specified to avoid warnings when compiling tests or documentation snippets. It is expected to become the default behavior in an upcoming version of Kotlin, see https://youtrack.jetbrains.com/issue/for more details"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java\n@@ -89,7 +89,7 @@ public Mono<Void> execute(URI url, WebSocketHandler handler) {\n \t@Override\n \tpublic Mono<Void> execute(URI url, @Nullable HttpHeaders headers, WebSocketHandler handler) {\n \n-\t\tClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest();\n+\t\tClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest(url);\n \t\tupgradeRequest.setSubProtocols(handler.getSubProtocols());\n \t\tif (headers != null) {\n \t\t\theaders.headerNames().forEach(header -> upgradeRequest.setHeader(header, headers.getValuesAsList(header)));\n@@ -110,7 +110,7 @@ public void onHandshakeResponse(Request request, Response response) {\n \t\tJettyWebSocketHandlerAdapter handlerAdapter = new JettyWebSocketHandlerAdapter(handler, session ->\n \t\t\t\tnew JettyWebSocketSession(session, Objects.requireNonNull(handshakeInfo.get()), DefaultDataBufferFactory.sharedInstance, completion));\n \t\ttry {\n-\t\t\tthis.client.connect(handlerAdapter, url, upgradeRequest, jettyUpgradeListener)\n+\t\t\tthis.client.connect(handlerAdapter, upgradeRequest, jettyUpgradeListener)\n \t\t\t\t\t.exceptionally(throwable -> {\n \t\t\t\t\t\t// Only fail the completion if we have an error\n \t\t\t\t\t\t// as the JettyWebSocketSession will never be opened.",
    "output": "Upgrade to Jetty 12.1.0.beta1"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java\n@@ -64,7 +64,7 @@ void canRead() {\n \tvoid canWrite() {\n \t\tassertThat(this.converter.canWrite(Msg.class, null)).isTrue();\n \t\tassertThat(this.converter.canWrite(Msg.class, ProtobufHttpMessageConverter.PROTOBUF)).isTrue();\n-\t\tassertThat(this.converter.canRead(Msg.class, this.testPlusProtoMediaType)).isTrue();\n+\t\tassertThat(this.converter.canWrite(Msg.class, this.testPlusProtoMediaType)).isTrue();\n \t\tassertThat(this.converter.canWrite(Msg.class, MediaType.APPLICATION_JSON)).isTrue();\n \t\tassertThat(this.converter.canWrite(Msg.class, MediaType.TEXT_PLAIN)).isTrue();\n \t}",
    "output": "Fix typo in ProtobufHttpMessageConverterTests.canWrite"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java\n@@ -106,8 +106,7 @@ private static String expand(String route, Object... routeVars) {\n \t\tMatcher matcher = VARS_PATTERN.matcher(route);\n \t\twhile (matcher.find()) {\n \t\t\tAssert.isTrue(index < routeVars.length, () -> \"No value for variable '\" + matcher.group(1) + \"'\");\n-\t\t\tString value = routeVars[index].toString();\n-\t\t\tvalue = value.contains(\".\") ? value.replaceAll(\"\\\\.\", \"%2E\") : value;\n+\t\t\tString value = routeVars[index].toString().replace(\".\", \"%2E\");\n \t\t\tmatcher.appendReplacement(sb, value);\n \t\t\tindex++;\n \t\t}",
    "output": "Use String.replace in MetadataEncoder Use String.replace instead of replaceAll in MetadataEncoder; since Java 9, String.replace no longer uses a regex, while replaceAll does. The use case here of replacing a single character does not require a regex"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java b/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java\n--- a/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java\n+++ b/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java\n@@ -41,6 +41,6 @@ public interface RetryOperations {\n \t * encountered during retry attempts should be made available as suppressed\n \t * exceptions\n \t */\n-\t<R extends @Nullable Object> R execute(Retryable<R> retryable) throws RetryException;\n+\t<R> @Nullable R execute(Retryable<? extends @Nullable R> retryable) throws RetryException;\n \n }\n\ndiff --git a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n--- a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n+++ b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n@@ -142,7 +142,7 @@ public void setRetryListener(RetryListener retryListener) {\n \t * encountered during retry attempts are available as suppressed exceptions\n \t */\n \t@Override\n-\tpublic <R extends @Nullable Object> R execute(Retryable<R> retryable) throws RetryException {\n+\tpublic <R> @Nullable R execute(Retryable<? extends @Nullable R> retryable) throws RetryException {\n \t\tString retryableName = retryable.getName();\n \t\t// Initial attempt\n \t\ttry {",
    "output": "Change signature of RetryOperations.executeregarding nullability Due to lacking support in NullAway for the current arrangement, we are (perhaps temporarily) changing the signature of the executemethod in RetryOperations (and thus also in RetryTemplate)... from: <R extends @Nullable Object> R execute(Retryable<R> retryable); to: <R> @Nullable R execute(Retryable<? extends @Nullable R> retryable); Once https://github.com/uber/NullAway/issues/1075 has been resolved, we will consider switching back to the original signature"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n@@ -19,7 +19,6 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.Serializable;\n-import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n import java.util.Map;\n import java.util.Optional;\n@@ -167,20 +166,6 @@ public boolean isRequired() {\n \t\t}\n \t}\n \n-\t/**\n-\t * Check whether the underlying field is annotated with any variant of a\n-\t * {@code Nullable} annotation, for example, {@code jakarta.annotation.Nullable} or\n-\t * {@code edu.umd.cs.findbugs.annotations.Nullable}.\n-\t */\n-\tprivate boolean hasNullableAnnotation() {\n-\t\tfor (Annotation ann : getAnnotations()) {\n-\t\t\tif (\"Nullable\".equals(ann.annotationType().getSimpleName())) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n \t/**\n \t * Return whether this dependency is 'eager' in the sense of\n \t * eagerly resolving potential target beans for type matching.",
    "output": "Remove obsolete code The hasNullableAnnotationmethod was made obsolete in commit b5d153febf7395658a53c2fac08f342781b6cc8f"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.23.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.25.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Groovy 4.0.27, Mockito 5.18, Checkstyle 10.25"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -25,7 +25,6 @@\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.core.convert.ConversionService;\n-import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.ConfigurablePropertyResolver;\n import org.springframework.core.env.Environment;\n@@ -270,11 +269,7 @@ private String convertToString(Object value) {\n \t\t\tif (value instanceof String string) {\n \t\t\t\treturn string;\n \t\t\t}\n-\t\t\tConversionService conversionService = super.source.getConversionService();\n-\t\t\tif (conversionService == null) {\n-\t\t\t\tconversionService = DefaultConversionService.getSharedInstance();\n-\t\t\t}\n-\t\t\treturn conversionService.convert(value, String.class);\n+\t\t\treturn super.source.getConversionService().convert(value, String.class);\n \t\t}\n \n \t\t@Override",
    "output": "Remove unnecessary fallback to DefaultConversionService"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java\n@@ -20,6 +20,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -76,6 +77,11 @@ protected AbstractKotlinSerializationHttpMessageConverter(T format, MediaType...\n \t\tthis.format = format;\n \t}\n \n+\t@Override\n+\tpublic List<MediaType> getSupportedMediaTypes(Class<?> clazz) {\n+\t\treturn getSupportedMediaTypes();\n+\t}\n+\n \t@Override\n \tprotected boolean supports(Class<?> clazz) {\n \t\treturn serializer(ResolvableType.forClass(clazz)) != null;",
    "output": "Fix collection support in AbstractKotlinSerializationHttpMessageConverter AbstractKotlinSerializationHttpMessageConverter#getSupportedMediaTypes(Class<?>) currently invokes transitively supports(Class<?>) which always return false with generic types. This commit adds an override that just invokes getSupportedMediaTypes"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n@@ -219,7 +219,7 @@ protected Mono<Void> doBegin(TransactionSynchronizationManager synchronizationMa\n \t\t\t\t\t\tif (txObject.isNewConnectionHolder()) {\n \t\t\t\t\t\t\tsynchronizationManager.bindResource(obtainConnectionFactory(), txObject.getConnectionHolder());\n \t\t\t\t\t\t}\n-\t\t\t\t\t}).thenReturn(con).onErrorResume(ex -> {\n+\t\t\t\t\t}).onErrorResume(ex -> {\n \t\t\t\t\t\tif (txObject.isNewConnectionHolder()) {\n \t\t\t\t\t\t\treturn ConnectionFactoryUtils.releaseConnection(con, obtainConnectionFactory())\n \t\t\t\t\t\t\t\t\t.doOnTerminate(() -> txObject.setConnectionHolder(null, false))",
    "output": "Remove thenReturn that fetches unused values"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java\n@@ -17,6 +17,7 @@\n package org.springframework.beans.propertyeditors;\n \n import java.beans.PropertyEditorSupport;\n+import java.util.HexFormat;\n \n import org.jspecify.annotations.Nullable;\n \n@@ -97,13 +98,12 @@ public String getAsText() {\n \t\treturn (value != null ? value.toString() : \"\");\n \t}\n \n-\n-\tprivate boolean isUnicodeCharacterSequence(String sequence) {\n+\tprivate static boolean isUnicodeCharacterSequence(String sequence) {\n \t\treturn (sequence.startsWith(UNICODE_PREFIX) && sequence.length() == UNICODE_LENGTH);\n \t}\n \n \tprivate void setAsUnicode(String text) {\n-\t\tint code = Integer.parseInt(text.substring(UNICODE_PREFIX.length()), 16);\n+\t\tint code = HexFormat.fromHexDigits(text, UNICODE_PREFIX.length(), text.length());\n \t\tsetValue((char) code);\n \t}\n ",
    "output": "Use HexFormat in CharacterEditor Use HexFormat to perform conversion for unicode-prefixed Strings in CharacterEditor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n@@ -37,7 +37,7 @@ public abstract class SupplierUtils {\n \t * @param supplier the supplier to resolve\n \t * @return the supplier's result, or {@code null} if none\n \t */\n-\t@Contract(\"null -> null; !null -> !null\")\n+\t@Contract(\"null -> null\")\n \tpublic static <T> @Nullable T resolve(@Nullable Supplier<T> supplier) {\n \t\treturn (supplier != null ? supplier.get() : null);\n \t}",
    "output": "Fix nullability @⁠Contract for SupplierUtils.resolve(Supplier)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java b/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java\n--- a/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java\n+++ b/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java\n@@ -50,14 +50,6 @@ public void setProperty(String name, Object value) {\n \t\tthis.propertySource.setProperty(name, value);\n \t}\n \n-\t/**\n-\t * Set a property on the underlying {@link MockPropertySource} for this environment.\n-\t * @see #setProperty(String, Object)\n-\t */\n-\tpublic void setProperty(String name, String value) {\n-\t\tthis.propertySource.setProperty(name, value);\n-\t}\n-\n \t/**\n \t * Convenient synonym for {@link #setProperty(String, Object)} that returns\n \t * the current instance.\n@@ -71,16 +63,4 @@ public MockEnvironment withProperty(String name, Object value) {\n \t\treturn this;\n \t}\n \n-\t/**\n-\t * Convenient synonym for {@link #setProperty(String, String)} that returns\n-\t * the current instance.\n-\t * <p>Useful for method chaining and fluent-style use.\n-\t * @return this {@link MockEnvironment} instance\n-\t * @see #withProperty(String, Object)\n-\t */\n-\tpublic MockEnvironment withProperty(String name, String value) {\n-\t\tsetProperty(name, value);\n-\t\treturn this;\n-\t}\n-\n }",
    "output": "Remove [set|with]Property(String, String) variants from MockEnvironment Since setProperty(String, Object) and withProperty(String, Object) methods were introduced in MockEnvironment in 6.2.8, this commit removes the obsolete variants with (String, String) signatures"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.HttpURLConnection;\n+import java.util.Objects;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatusCode;\n@@ -103,6 +104,7 @@ public void close() {\n \t\t\tif (this.responseStream == null) {\n \t\t\t\tgetBody();\n \t\t\t}\n+\t\t\tObjects.requireNonNull(this.responseStream);\n \t\t\tStreamUtils.drain(this.responseStream);\n \t\t\tthis.responseStream.close();\n \t\t}",
    "output": "Upgrade code due to change in nullability contract"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.23.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.23.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Micrometer 1.14.7 Includes Jackson 2.18.4, Jetty 12.0.21, Netty 4.1.121, Apache HttpClient 5.4.4, Checkstyle 10.23.1"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java\n@@ -49,7 +49,9 @@ public class ReactorClientHttpRequestFactory implements ClientHttpRequestFactory\n \tprivate static final Log logger = LogFactory.getLog(ReactorClientHttpRequestFactory.class);\n \n \tprivate static final Function<HttpClient, HttpClient> defaultInitializer =\n-\t\t\tclient -> client.compress(true).responseTimeout(Duration.ofSeconds(10));\n+\t\t\tclient -> client.compress(true)\n+\t\t\t\t\t.responseTimeout(Duration.ofSeconds(10))\n+\t\t\t\t\t.proxyWithSystemProperties();\n \n \n \tprivate final @Nullable ReactorResourceFactory resourceFactory;\n@@ -69,7 +71,8 @@ public class ReactorClientHttpRequestFactory implements ClientHttpRequestFactory\n \n \t/**\n \t * Constructor with default client, created via {@link HttpClient#create()},\n-\t * and with {@link HttpClient#compress compression} enabled.\n+\t * and with {@link HttpClient#compress compression} and\n+\t * {@link HttpClient#proxyWithSystemProperties() proxyWithSystemProperties} enabled.\n \t */\n \tpublic ReactorClientHttpRequestFactory() {\n \t\tthis(defaultInitializer.apply(HttpClient.create()));",
    "output": "Use system properties in ReactorClientHttpRequestFactory"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -164,8 +164,8 @@ public void setValueSeparator(@Nullable String valueSeparator) {\n \t * <p>Default is {@link #DEFAULT_ESCAPE_CHARACTER}.\n \t * @since 6.2\n \t */\n-\tpublic void setEscapeCharacter(@Nullable Character escsEscapeCharacter) {\n-\t\tthis.escapeCharacter = escsEscapeCharacter;\n+\tpublic void setEscapeCharacter(@Nullable Character escapeCharacter) {\n+\t\tthis.escapeCharacter = escapeCharacter;\n \t}\n \n \t/**",
    "output": "Fix typo in parameter name"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java b/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java\n@@ -131,7 +131,7 @@ void mutateEmptyInstanceHeaders() {\n \t\tHttpHeaders headers = new HttpHeaders(HttpEntity.EMPTY.getHeaders());\n \t\theaders.add(\"Authorization\", \"Bearer some-token\");\n \n-\t\tassertThat(HttpEntity.EMPTY.getHeaders())\n+\t\tassertThat(HttpEntity.EMPTY.getHeaders().headerNames())\n \t\t\t\t.as(\"Headers of HttpEntity.EMPTY should remain empty\")\n \t\t\t\t.isEmpty();\n \t}",
    "output": "Add remaining change from merge"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n@@ -126,7 +126,7 @@ public static boolean simpleMatch(String @Nullable [] patterns, @Nullable String\n \t/**\n \t * Variant of {@link #simpleMatch(String[], String)}  that ignores upper/lower case.\n \t */\n-\tpublic static boolean simpleMatchIgnoreCase(@Nullable String[] patterns, @Nullable String str) {\n+\tpublic static boolean simpleMatchIgnoreCase(String @Nullable [] patterns, @Nullable String str) {\n \t\tif (patterns != null) {\n \t\t\tfor (String pattern : patterns) {\n \t\t\t\tif (simpleMatch(pattern, str, true)) {",
    "output": "Fix Nullable declaration in PatternMatchUtils"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1048,7 +1048,7 @@ protected void checkMergedBeanDefinition(RootBeanDefinition mbd, String beanName\n \t@Override\n \tprotected @Nullable Boolean isCurrentThreadAllowedToHoldSingletonLock() {\n \t\tString mainThreadPrefix = this.mainThreadPrefix;\n-\t\tif (this.mainThreadPrefix != null) {\n+\t\tif (mainThreadPrefix != null) {\n \t\t\t// We only differentiate in the preInstantiateSingletons phase.\n \n \t\t\tPreInstantiation preInstantiation = this.preInstantiationThread.get();\n@@ -1069,7 +1069,7 @@ protected void checkMergedBeanDefinition(RootBeanDefinition mbd, String beanName\n \t\t\t}\n \t\t\telse if (this.strictLocking == null) {\n \t\t\t\t// No explicit locking configuration -> infer appropriate locking.\n-\t\t\t\tif (mainThreadPrefix != null && !getThreadNamePrefix().equals(mainThreadPrefix)) {\n+\t\t\t\tif (!getThreadNamePrefix().equals(mainThreadPrefix)) {\n \t\t\t\t\t// An unmanaged thread (assumed to be application-internal) with lenient locking,\n \t\t\t\t\t// and not part of the same thread pool that provided the main bootstrap thread\n \t\t\t\t\t// (excluding scenarios where we are hit by multiple external bootstrap threads).",
    "output": "Improve handling of `mainThreadPrefix` and remove redundant null check"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n@@ -361,16 +361,12 @@ private static boolean isOverride(Method rootMethod, Method candidateMethod) {\n \t}\n \n \tprivate static boolean hasSameParameterTypes(Method rootMethod, Method candidateMethod) {\n-\t\tif (candidateMethod.getParameterCount() != rootMethod.getParameterCount()) {\n-\t\t\treturn false;\n-\t\t}\n \t\tClass<?>[] rootParameterTypes = rootMethod.getParameterTypes();\n \t\tClass<?>[] candidateParameterTypes = candidateMethod.getParameterTypes();\n \t\tif (Arrays.equals(candidateParameterTypes, rootParameterTypes)) {\n \t\t\treturn true;\n \t\t}\n-\t\treturn hasSameGenericTypeParameters(rootMethod, candidateMethod,\n-\t\t\t\trootParameterTypes);\n+\t\treturn hasSameGenericTypeParameters(rootMethod, candidateMethod, rootParameterTypes);\n \t}\n \n \tprivate static boolean hasSameGenericTypeParameters(",
    "output": "Remove redundant parameter count check in AnnotationsScanner.hasSameParameterTypesThe redundancy was reported by @TAKETODAY"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.22.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.23.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Mockito 5.17 and Checkstyle 10.23"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java b/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -39,6 +39,6 @@\n @Documented\n public @interface ManagedOperationParameters {\n \n-\tManagedOperationParameter[] value() default {};\n+\tManagedOperationParameter[] value();\n \n }",
    "output": "Remove default value for @⁠ManagedOperationParameters container"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java b/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java\n--- a/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java\n@@ -108,7 +108,7 @@\n \t@Import(AnnotationHttpServiceRegistrar.class)\n \t@interface Container {\n \n-\t\tImportHttpServices[] value() default {};\n+\t\tImportHttpServices[] value();\n \t}\n \n }",
    "output": "Remove default value for Container annotation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java b/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java\n--- a/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java\n@@ -180,10 +180,6 @@ public ClientType clientType() {\n \t\t\treturn this.declaredGroup.clientType();\n \t\t}\n \n-\t\tpublic Class<? extends HttpServiceGroupConfigurer<?>> getConfigurerType() {\n-\t\t\treturn this.groupAdapter.getConfigurerType();\n-\t\t}\n-\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tpublic <CB> void apply(\n \t\t\t\tBiConsumer<HttpServiceGroup, CB> clientConfigurer,",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.21.4\");\n+\t\t\tcheckstyle.setToolVersion(\"10.22.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Jetty 12.0.18, Apache HttpClient 5.4.3, Protobuf 4.30.2, Checkstyle 10.22"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java b/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java\n--- a/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java\n+++ b/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,11 @@\n  * @author Sam Brannen\n  */\n @Suite\n-@SelectPackages({\"org.springframework.core\", \"org.springframework.util\"})\n+@SelectPackages({\n+\t\"org.springframework.aot\",\n+\t\"org.springframework.core\",\n+\t\"org.springframework.util\"\n+})\n @IncludeClassNamePatterns(\".*Tests?$\")\n class SpringCoreTestSuite {\n }",
    "output": "Upgrade SpringCoreTestSuite to include AOT"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -259,6 +259,12 @@ public B getBeanInstance() {\n \t\t\treturn this.beanInstance;\n \t\t}\n \n+\t\t@Override\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tpublic Class<B> getBeanClass() {\n+\t\t\treturn (Class<B>) this.beanInstance.getClass();\n+\t\t}\n+\n \t\tpublic void destroyIfNecessary() {\n \t\t\tif (this.destructionCallback != null) {\n \t\t\t\tthis.destructionCallback.accept(this.beanInstance);",
    "output": "Upgrade to Hibernate ORM 7.0.0.Beta4 Includes Hamcrest 3.0"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -39,6 +39,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.jspecify.annotations.Nullable;\n \n+import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.BeanDefinitionStoreException;\n import org.springframework.beans.factory.BeanRegistrar;\n import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n@@ -600,9 +601,7 @@ private void processImports(ConfigurationClass configClass, SourceClass currentS\n \t\t\t\t\t}\n \t\t\t\t\telse if (candidate.isAssignable(BeanRegistrar.class)) {\n \t\t\t\t\t\tClass<?> candidateClass = candidate.loadClass();\n-\t\t\t\t\t\tBeanRegistrar registrar =\n-\t\t\t\t\t\t\t\tParserStrategyUtils.instantiateClass(candidateClass, BeanRegistrar.class,\n-\t\t\t\t\t\t\t\t\t\tthis.environment, this.resourceLoader, this.registry);\n+\t\t\t\t\t\tBeanRegistrar registrar = (BeanRegistrar) BeanUtils.instantiateClass(candidateClass);\n \t\t\t\t\t\tconfigClass.addBeanRegistrar(registrar);\n \t\t\t\t\t}\n \t\t\t\t\telse if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) {",
    "output": "Remove support for Aware interfaces in BeanRegistrar"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.21.2\");\n+\t\t\tcheckstyle.setToolVersion(\"10.21.4\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.21.4"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java\n@@ -88,7 +88,7 @@ public class MockitoResetTestExecutionListener extends AbstractTestExecutionList\n \t */\n \t@Override\n \tpublic int getOrder() {\n-\t\treturn Ordered.LOWEST_PRECEDENCE - 100;\n+\t\treturn ORDER;\n \t}\n \n \t@Override",
    "output": "Use ORDER constant in MockitoResetTestExecutionListener"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java b/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java\n--- a/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java\n@@ -29,7 +29,7 @@\n public class CustomHttpServiceArgumentResolver {\n \n \t// tag::httpinterface[]\n-\tinterface RepositoryService {\n+\tpublic interface RepositoryService {\n \n \t\t@GetExchange(\"/repos/search\")\n \t\tList<Repository> searchRepository(Search search);",
    "output": "Use public interface for HTTP Interface documentation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n--- a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n+++ b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.http;\n \n+import java.io.Serializable;\n import java.net.URI;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -49,7 +50,9 @@\n  * @see org.springframework.web.ErrorResponse\n  * @see org.springframework.web.ErrorResponseException\n  */\n-public class ProblemDetail {\n+public class ProblemDetail implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 3307761915842206538L;\n \n \tprivate static final URI BLANK_TYPE = URI.create(\"about:blank\");\n ",
    "output": "Make ProblemDetail Serializable This commit makes the `ProblemDetail` type implement `Serializable` in order to be serialized and shared in distributed systems"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.21.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.21.2\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Netty 4.1.118 and Checkstyle 10.21.2"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java\n--- a/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java\n@@ -162,11 +162,10 @@ void startCallableProcessingDisconnectedClient() throws Exception {\n \t\tAsyncEvent event = new AsyncEvent(new MockAsyncContext(this.servletRequest, this.servletResponse), ex);\n \t\tthis.asyncWebRequest.onError(event);\n \n-\t\tMockAsyncContext asyncContext = (MockAsyncContext) this.servletRequest.getAsyncContext();\n \t\tassertThat(this.asyncManager.hasConcurrentResult()).isTrue();\n \t\tassertThat(this.asyncManager.getConcurrentResult())\n-\t\t\t\t.as(\"Disconnected client error not wrapped AsyncRequestNotUsableException\")\n-\t\t\t\t.isOfAnyClassIn(AsyncRequestNotUsableException.class);\n+\t\t\t\t.as(\"Disconnected client error not wrapped in AsyncRequestNotUsableException\")\n+\t\t\t\t.isExactlyInstanceOf(AsyncRequestNotUsableException.class);\n \t}\n \n \t@Test\n@@ -287,8 +286,8 @@ void startDeferredResultProcessingDisconnectedClient() throws Exception {\n \n \t\tassertThat(this.asyncManager.hasConcurrentResult()).isTrue();\n \t\tassertThat(deferredResult.getResult())\n-\t\t\t\t.as(\"Disconnected client error not wrapped AsyncRequestNotUsableException\")\n-\t\t\t\t.isOfAnyClassIn(AsyncRequestNotUsableException.class);\n+\t\t\t\t.as(\"Disconnected client error not wrapped in AsyncRequestNotUsableException\")\n+\t\t\t\t.isExactlyInstanceOf(AsyncRequestNotUsableException.class);\n \t}\n \n ",
    "output": "Remove unused code and improve assertion"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/DataBinder.java b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n--- a/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n@@ -1137,7 +1137,8 @@ private static SortedSet<Integer> getIndexes(String paramPath, ValueResolver val\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tprivate <V> @Nullable V createIndexedValue(\n+\t@Nullable\n+\tprivate <V> V createIndexedValue(\n \t\t\tString paramPath, Class<?> paramType, ResolvableType elementType,\n \t\t\tString indexedPath, ValueResolver valueResolver) {\n ",
    "output": "Fix @⁠Nullable declaration in DataBinder on 6.2.x"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java b/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java\n--- a/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java\n+++ b/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java\n@@ -42,7 +42,7 @@ public static void assertIsNotMock(Object obj) {\n \t}\n \n \tpublic static void assertIsNotMock(Object obj, String message) {\n-\t\tassertThat(isSpy(obj)).as(\"%s is a Mockito mock\", message).isFalse();\n+\t\tassertThat(isMock(obj)).as(\"%s is a Mockito mock\", message).isFalse();\n \t}\n \n \tpublic static void assertIsSpy(Object obj) {",
    "output": "Fix copy-n-paste error"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java\n@@ -47,6 +47,12 @@ public class ServerResponseResultHandler implements HandlerResultHandler, Initia\n \n \tprivate int order = 0;\n \n+\t/**\n+\t * Return the configured {@link HttpMessageWriter}'s.\n+\t */\n+\tpublic List<HttpMessageWriter<?>> getMessageWriters() {\n+\t\treturn this.messageWriters;\n+\t}\n \n \t/**\n \t * Configure HTTP message writers to serialize the request body with.\n@@ -56,6 +62,16 @@ public void setMessageWriters(List<HttpMessageWriter<?>> configurer) {\n \t\tthis.messageWriters = configurer;\n \t}\n \n+\t/**\n+\t * Return the configured {@link ViewResolver}'s.\n+\t */\n+\tpublic List<ViewResolver> getViewResolvers() {\n+\t\treturn this.viewResolvers;\n+\t}\n+\n+\t/**\n+\t * Set the current view resolvers.\n+\t */\n \tpublic void setViewResolvers(List<ViewResolver> viewResolvers) {\n \t\tthis.viewResolvers = viewResolvers;\n \t}",
    "output": "Add getters ServerResponseResultHandler"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java\n@@ -16,10 +16,8 @@\n \n package org.springframework.web.socket.client.standard;\n \n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.URI;\n-import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -186,15 +184,6 @@ private static List<Extension> adaptExtensions(List<WebSocketExtension> extensio\n \t\treturn result;\n \t}\n \n-\tprivate static InetAddress getLocalHost() {\n-\t\ttry {\n-\t\t\treturn InetAddress.getLocalHost();\n-\t\t}\n-\t\tcatch (UnknownHostException ex) {\n-\t\t\treturn InetAddress.getLoopbackAddress();\n-\t\t}\n-\t}\n-\n \tprivate static int getPort(URI uri) {\n \t\tif (uri.getPort() == -1) {\n \t\t\tString scheme = uri.getScheme().toLowerCase(Locale.ROOT);",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java\n@@ -39,7 +39,7 @@ abstract class AbstractMockitoBeanOverrideHandler extends BeanOverrideHandler {\n \n \n \tprotected AbstractMockitoBeanOverrideHandler(@Nullable Field field, ResolvableType beanType,\n-\t\t\t@Nullable String beanName, BeanOverrideStrategy strategy, @Nullable MockReset reset) {\n+\t\t\t@Nullable String beanName, BeanOverrideStrategy strategy, MockReset reset) {\n \n \t\tsuper(field, beanType, beanName, strategy);\n \t\tthis.reset = (reset != null ? reset : MockReset.AFTER);",
    "output": "Remove unnecessary @⁠Nullable declaration"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java b/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java\n--- a/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java\n+++ b/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.build.architecture;\n \n+import com.tngtech.archunit.base.DescribedPredicate;\n import com.tngtech.archunit.core.domain.JavaClass;\n import com.tngtech.archunit.lang.ArchRule;\n import com.tngtech.archunit.lang.syntax.ArchRuleDefinition;\n@@ -66,8 +67,14 @@ static ArchRule classesShouldNotImportForbiddenTypes() {\n \n \tstatic ArchRule javaClassesShouldNotImportKotlinAnnotations() {\n \t\treturn ArchRuleDefinition.noClasses()\n-\t\t\t\t.that().haveSimpleNameNotEndingWith(\"Kt\")\n-\t\t\t\t.and().haveSimpleNameNotEndingWith(\"Dsl\")\n+\t\t\t\t.that(new DescribedPredicate<JavaClass>(\"is not a Kotlin class\") {\n+\t\t\t\t\t\t  @Override\n+\t\t\t\t\t\t  public boolean test(JavaClass javaClass) {\n+\t\t\t\t\t\t\t  return javaClass.getSourceCodeLocation()\n+\t\t\t\t\t\t\t\t\t  .getSourceFileName().endsWith(\".java\");\n+\t\t\t\t\t\t  }\n+\t\t\t\t\t  }\n+\t\t\t\t)\n \t\t\t\t.should().dependOnClassesThat()\n \t\t\t\t.resideInAnyPackage(\"org.jetbrains.annotations..\")\n \t\t\t\t.allowEmptyShould(true);",
    "output": "Fix Kotlin annotations architecture rule"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java b/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java\n@@ -546,7 +546,7 @@ void fromHttpRequestXForwardedHeaderForIpv6Formatting() {\n \t\theaders.add(\"X-Forwarded-For\", \"fd00:fefe:1::4, 192.168.0.1\");\n \n \t\tInetSocketAddress address =\n-\t\t\t\tForwardedHeaderUtils.parseForwardedFor(URI.create(\"http://example.com\"), headers, null);\n+\t\t\t\tForwardedHeaderUtils.parseForwardedFor(URI.create(\"https://example.com\"), headers, null);\n \n \t\tassertThat(address.getHostName()).isEqualTo(\"[fd00:fefe:1::4]\");\n \t}",
    "output": "Fix checkstyle warning"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -1784,8 +1784,6 @@ public class MySimpleSuperclassType extends MySuperclassType<String> {\n \tpublic class MyCollectionSuperclassType extends MySuperclassType<Collection<String>> {\n \t}\n \n-\tpublic interface Consumer<T> {\n-\t}\n \n \tpublic interface Consumer<T> {\n \t}",
    "output": "Fix merge result"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.20.2\");\n+\t\t\tcheckstyle.setToolVersion(\"10.21.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Jetty 12.0.16, Netty 4.1.117, Protobuf 4.29.3, Checkstyle 10.21.1"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -41,7 +41,6 @@\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.concurrent.Callable;\n-import java.util.function.Consumer;\n \n import org.assertj.core.api.AbstractAssert;\n import org.junit.jupiter.api.Test;\n@@ -1785,6 +1784,8 @@ public class MySimpleSuperclassType extends MySuperclassType<String> {\n \tpublic class MyCollectionSuperclassType extends MySuperclassType<Collection<String>> {\n \t}\n \n+\tpublic interface Consumer<T> {\n+\t}\n \n \tpublic class Wildcard<T extends CharSequence> {\n \t}",
    "output": "Fix compilation error in ResolvableTypeTests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -41,6 +41,7 @@\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.concurrent.Callable;\n+import java.util.function.Consumer;\n \n import org.assertj.core.api.AbstractAssert;\n import org.junit.jupiter.api.Test;",
    "output": "Fix compilation error in ResolvableTypeTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java b/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java\n--- a/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java\n+++ b/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -51,10 +51,11 @@ public FlightRecorderApplicationStartup() {\n \n \t@Override\n \tpublic StartupStep start(String name) {\n+\t\tLong parentId = this.currentSteps.getFirst();\n \t\tlong sequenceId = this.currentSequenceId.incrementAndGet();\n \t\tthis.currentSteps.offerFirst(sequenceId);\n \t\treturn new FlightRecorderStartupStep(sequenceId, name,\n-\t\t\t\tthis.currentSteps.getFirst(), committedStep -> this.currentSteps.removeFirstOccurrence(sequenceId));\n+\t\t\t\tparentId, committedStep -> this.currentSteps.removeFirstOccurrence(sequenceId));\n \t}\n \n }",
    "output": "Fix Wrong parentId tracking in JFR application startup This commit fixes the tracking of the main event parentId for the Java Flight Recorder implementation variant"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n@@ -183,13 +183,7 @@ public void initializeNativeSession(Session session) {\n \t\tthis.extensions = getExtensions(session);\n \n \t\tif (this.user == null) {\n-\t\t\ttry {\n-\t\t\t\tthis.user = session.getUpgradeRequest().getUserPrincipal();\n-\t\t\t}\n-\t\t\tcatch (NullPointerException ex) {\n-\t\t\t\t// Necessary until https://github.com/eclipse/jetty.project/issues/10498 is resolved\n-\t\t\t\tlogger.error(\"Failure from UpgradeRequest while getting Principal\", ex);\n-\t\t\t}\n+\t\t\tthis.user = session.getUpgradeRequest().getUserPrincipal();\n \t\t}\n \t}\n ",
    "output": "Remove the catch of NPE because this issue had resolved at Jetty 12.0.2"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java\n@@ -101,7 +101,6 @@ protected void extendAdvisors(List<Advisor> candidateAdvisors) {\n \n \t@Override\n \tprotected boolean shouldSkip(Class<?> beanClass, String beanName) {\n-\t\t// TODO: Consider optimization by caching the list of the aspect names\n \t\tList<Advisor> candidateAdvisors = findCandidateAdvisors();\n \t\tfor (Advisor advisor : candidateAdvisors) {\n \t\t\tif (advisor instanceof AspectJPointcutAdvisor pointcutAdvisor &&",
    "output": "Remove outdated TODO task"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java b/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java\n@@ -99,7 +99,7 @@ void targetThrowsUndeclaredCheckedException() throws DeclaredCheckedException {\n \t\t\tassertThat(throwableSeenByInterceptor).isSameAs(undeclaredCheckedException);\n \t\t\tassertThat(throwableSeenByCaller)\n \t\t\t\t\t.isInstanceOf(UndeclaredThrowableException.class)\n-\t\t\t\t\t.hasCauseReference(undeclaredCheckedException);\n+\t\t\t\t\t.cause().isSameAs(undeclaredCheckedException);\n \t\t}\n \n \t\t@Test\n@@ -147,7 +147,7 @@ void targetThrowsUndeclaredCheckedException() throws DeclaredCheckedException {\n \t\t\tinvokeProxy();\n \t\t\tassertThat(throwableSeenByCaller)\n \t\t\t\t\t.isInstanceOf(UndeclaredThrowableException.class)\n-\t\t\t\t\t.hasCauseReference(undeclaredCheckedException);\n+\t\t\t\t\t.cause().isSameAs(undeclaredCheckedException);\n \t\t}\n \n \t\t@Test",
    "output": "Upgrade to AssertJ 3.27.1"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java\n@@ -41,7 +41,7 @@\n import jakarta.validation.constraints.Size;\n import jakarta.validation.executable.ExecutableValidator;\n import jakarta.validation.metadata.BeanDescriptor;\n-import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorFactoryImpl;\n+import org.hibernate.validator.constraintvalidation.spi.DefaultConstraintValidatorFactory;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -557,7 +557,7 @@ private static class TestConstraintValidatorFactory implements ConstraintValidat\n \n \t\tprivate final Map<Class<?>, ConstraintValidator<?, ?>> validators;\n \n-\t\tprivate final ConstraintValidatorFactory delegate = new ConstraintValidatorFactoryImpl();\n+\t\tprivate final ConstraintValidatorFactory delegate = new DefaultConstraintValidatorFactory();\n \n \t\tprivate TestConstraintValidatorFactory(ConstraintValidator<?, ?>... validators) {\n \t\t\tthis.validators = new LinkedHashMap<>(validators.length);",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -19,7 +19,6 @@\n import java.io.ByteArrayOutputStream;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n-import java.time.ZonedDateTime;\n import java.util.ArrayList;\n import java.util.Base64;\n import java.util.BitSet;\n@@ -256,10 +255,6 @@ public static ContentDisposition parse(String contentDisposition) {\n \t\tString name = null;\n \t\tString filename = null;\n \t\tCharset charset = null;\n-\t\tLong size = null;\n-\t\tZonedDateTime creationDate = null;\n-\t\tZonedDateTime modificationDate = null;\n-\t\tZonedDateTime readDate = null;\n \t\tfor (int i = 1; i < parts.size(); i++) {\n \t\t\tString part = parts.get(i);\n \t\t\tint eqIndex = part.indexOf('=');",
    "output": "Remove unused code from ContentDisposition"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n@@ -285,18 +285,6 @@ public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeF\n \t\treturn this;\n \t}\n \n-\t/**\n-\t * Add the given annotated classes in a batch.\n-\t * @see #addAnnotatedClass\n-\t * @see #scanPackages\n-\t */\n-\tpublic LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {\n-\t\tfor (Class<?> annotatedClass : annotatedClasses) {\n-\t\t\taddAnnotatedClass(annotatedClass);\n-\t\t}\n-\t\treturn this;\n-\t}\n-\n \t/**\n \t * Add the given annotated packages in a batch.\n \t * @see #addPackage",
    "output": "Upgrade to Hibernate ORM 7.0.0.Beta3 and Validator 9.0.0.CR1 Using relocated Maven coordinates"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.20.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.20.2\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Jackson 2.18.2, RxJava 3.1.10, Checkstyle 10.20.2"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n@@ -138,6 +138,7 @@ public static boolean isEmpty(@Nullable Object[] array) {\n \t * @see CollectionUtils#isEmpty(java.util.Collection)\n \t * @see CollectionUtils#isEmpty(java.util.Map)\n \t */\n+\t@Contract(\"null -> true\")\n \tpublic static boolean isEmpty(@Nullable Object obj) {\n \t\tif (obj == null) {\n \t\t\treturn true;",
    "output": "Add missing `@Contract` annotation to ObjectUtils#isEmpty"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -978,8 +978,8 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t}\n \n \t\tif (!Files.exists(rootPath)) {\n-\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\tlogger.info(\"Skipping search for files matching pattern [%s]: directory [%s] does not exist\"\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Skipping search for files matching pattern [%s]: directory [%s] does not exist\"\n \t\t\t\t\t\t.formatted(subPattern, rootPath.toAbsolutePath()));\n \t\t\t}\n \t\t\treturn result;",
    "output": "Fix log level in PathMatchingResourcePatternResolver"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.18.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.20.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Micrometer 1.12.12 and Reactor 2023.0.12 Includes Netty 4.1.114, Jetty 12.0.15, Jetty Reactive HttpClient 4.0.8, RxJava 3.1.9, RSocket 1.1.4, Groovy 4.0.24, JRuby 9.4.9, Checkstyle 10.20.1"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.18.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.20.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Micrometer 1.14.0 and Reactor 2024.0.0 Includes Netty 4.1.114, Jetty 12.0.15, Jetty Reactive HttpClient 4.0.8, RxJava 3.1.9, RSocket 1.1.4, HSQLDB 2.7.4, H2 2.3.232, SnakeYAML 2.3, Groovy 4.0.24, JRuby 9.4.9, Jackson 2.18.1, Gson 2.11, Protobuf 4.28.3, XStream 1.4.21, Woodstox 6.7, TestNG 7.10.2, Selenium 4.26, HtmlUnit 4.6, XMLUnit 2.10, Checkstyle 10.20.1"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Contract.java b/spring-core/src/main/java/org/springframework/lang/Contract.java\n--- a/spring-core/src/main/java/org/springframework/lang/Contract.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Contract.java\n@@ -72,10 +72,4 @@\n \t * Contains the contract clauses describing causal relations between call arguments and the returned value.\n \t */\n \tString value() default \"\";\n-\n-\t/**\n-\t * Specifies if this method is pure, i.e. has no visible side effects. This may be used for more precise data flow analysis, and\n-\t * to check that the method's return value is actually used in the call place.\n-\t */\n-\tboolean pure() default false;\n }",
    "output": "Remove the pure attribute from `@Contract`"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java b/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java\n@@ -824,13 +824,14 @@ void retrieveDefaultCookiesAsCookieHeader(ClientHttpRequestFactory requestFactor\n \t\t\t\t.build();\n \n \t\trestClientWithCookies.get()\n-\t\t\t.uri(\"/greeting\")\n-\t\t\t.header(\"X-Test-Header\", \"testvalue\")\n-\t\t\t.retrieve();\n+\t\t\t\t.uri(\"/greeting\")\n+\t\t\t\t.header(\"X-Test-Header\", \"testvalue\")\n+\t\t\t\t.retrieve()\n+\t\t\t\t.body(String.class);\n \n \t\texpectRequest(request ->\n-\t\t\tassertThat(request.getHeader(HttpHeaders.COOKIE))\n-\t\t\t\t\t.isEqualTo(\"testCookie=firstValue; testCookie=secondValue\")\n+\t\t\t\tassertThat(request.getHeader(HttpHeaders.COOKIE))\n+\t\t\t\t\t\t.isEqualTo(\"testCookie=firstValue; testCookie=secondValue\")\n \t\t);\n \t}\n ",
    "output": "Fix test causing failure in RestClientObservationTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -116,13 +116,10 @@ public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request)\n \tpublic void cleanupMultipart(MultipartHttpServletRequest request) {\n \t\tif (!(request instanceof AbstractMultipartHttpServletRequest abstractMultipartHttpServletRequest) ||\n \t\t\t\tabstractMultipartHttpServletRequest.isResolved()) {\n-\t\t\t// To be on the safe side: explicitly delete the parts,\n-\t\t\t// but only actual file parts (for Resin compatibility)\n+\n \t\t\ttry {\n \t\t\t\tfor (Part part : request.getParts()) {\n-\t\t\t\t\tif (request.getFile(part.getName()) != null) {\n-\t\t\t\t\t\tpart.delete();\n-\t\t\t\t\t}\n+\t\t\t\t\tpart.delete();\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable ex) {",
    "output": "Remove HTTP parts workaround for Resin A workaround was added for the Resin Servlet container in . This avoids attempting to delete parts that are not named, because the `part.delete` call would fail for non-file entries. This can be problematic for files that are unnamed as they might not be removed by the Framework. This commit removes this workaround as Resin is not supported anymore"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -1136,7 +1136,7 @@ public void setHost(@Nullable InetSocketAddress host) {\n \t\t\tset(HOST, value);\n \t\t}\n \t\telse {\n-\t\t\tremove(HOST, null);\n+\t\t\tremove(HOST);\n \t\t}\n \t}\n \n\ndiff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -213,6 +213,15 @@ void ipv6Host() {\n \t\tassertThat(headers.getFirst(\"Host\")).as(\"Invalid Host header\").isEqualTo(\"[::1]\");\n \t}\n \n+\t@Test\n+\tvoid hostDeletion() {\n+\t\tInetSocketAddress host = InetSocketAddress.createUnresolved(\"localhost\", 8080);\n+\t\theaders.setHost(host);\n+\t\theaders.setHost(null);\n+\t\tassertThat(headers.getHost()).as(\"Host is not deleted\").isEqualTo(null);\n+\t\tassertThat(headers.getFirst(\"Host\")).as(\"Host is not deleted\").isEqualTo(null);\n+\t}\n+\n \t@Test\n \tvoid eTagWithoutQuotes() {\n \t\theaders.setETag(\"v2.6\");",
    "output": "Fix HttpHeaders.setHostto remove the header"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -243,15 +243,6 @@ public static UriComponentsBuilder fromHttpUrl(String httpUrl) throws InvalidUrl\n \t\treturn fromUriString(httpUrl);\n \t}\n \n-\tprivate static void checkSchemeAndHost(String uri, @Nullable String scheme, @Nullable String host) {\n-\t\tif (StringUtils.hasLength(scheme) && scheme.startsWith(\"http\") && !StringUtils.hasLength(host)) {\n-\t\t\tthrow new IllegalArgumentException(\"[\" + uri + \"] is not a valid HTTP URL\");\n-\t\t}\n-\t\tif (StringUtils.hasLength(host) && host.startsWith(\"[\") && !host.endsWith(\"]\")) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid IPV6 host in [\" + uri + \"]\");\n-\t\t}\n-\t}\n-\n \t/**\n \t * Create a new {@code UriComponents} object from the URI associated with\n \t * the given HttpRequest while also overlaying with values from the headers",
    "output": "Remove unused method in UriComponentsBuilder This commit removes HierarchicalUriComponents#checkSchemeAndHost unused private method"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -322,7 +322,7 @@ private void addConventionMappings() {\n \t\t\t\tlogger.isWarnEnabled()) {\n \t\t\tlogger.warn(\"\"\"\n \t\t\t\t\tSupport for convention-based annotation attribute overrides is deprecated \\\n-\t\t\t\t\tand will be removed in Spring Framework 6.2. Please annotate the following \\\n+\t\t\t\t\tand will be removed in Spring Framework 7.0. Please annotate the following \\\n \t\t\t\t\tattributes in @%s with appropriate @AliasFor declarations: %s\"\"\"\n \t\t\t\t\t\t.formatted(rootAnnotationTypeName, conventionMappedAttributes));\n \t\t}",
    "output": "Upgrade warning for use of convention-based annotation attribute overrides"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java b/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java\n--- a/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java\n@@ -142,10 +142,11 @@ public void handleNext(InternalParser parser, char c, int i) {\n \t\t\t\t\tcase ';':\n \t\t\t\t\tcase '?':\n \t\t\t\t\tcase '#':\n+\t\t\t\t\tcase '.':\n+\t\t\t\t\t\tparser.index(--i);\n+\t\t\t\t\t\tparser.advanceTo(PATH);\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n-\t\t\t\t\t\tif (c == '.') {\n-\t\t\t\t\t\t\tparser.index(--i);\n-\t\t\t\t\t\t}\n \t\t\t\t\t\tparser.advanceTo(PATH);\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix failing tests in spring-test after recent changes"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n@@ -238,10 +238,6 @@ void fromUriStringIPv6Host() {\n \t\tUriComponents result = UriComponentsBuilder\n \t\t\t\t.fromUriString(\"http://[1abc:2abc:3abc::5ABC:6abc]:8080/resource\").build().encode();\n \t\tassertThat(result.getHost()).isEqualToIgnoringCase(\"[1abc:2abc:3abc::5ABC:6abc]\");\n-\n-\t\tUriComponents resultIPv4compatible = UriComponentsBuilder\n-\t\t\t\t.fromUriString(\"http://[::192.168.1.1]:8080/resource\").build().encode();\n-\t\tassertThat(resultIPv4compatible.getHost()).isEqualTo(\"[::c0a8:101]\");\n \t}\n \n \t@Test",
    "output": "Remove test for IPv4 compatible IPv6 address An example of this can be found in RFC 2732, but it is obsoleted by RFC 3986 whose syntax for IPv6address does not allow dots. Also, Appendix D of RFC 3986 As [RFC2732] defers to [RFC3513] for definition of an IPv6 literal address, which, unfortunately, lacks an ABNF description of IPv6address, we created a new ABNF rule for IPv6address that matches the text representations defined by Section 2.2 of [RFC3513]"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java\n@@ -83,9 +83,6 @@ public AotContribution(Class<?> beanClass) {\n \t\tpublic void applyTo(GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode) {\n \t\t\tRuntimeHints runtimeHints = generationContext.getRuntimeHints();\n \t\t\tClass<?>[] proxyInterfaces = ClassUtils.getAllInterfacesForClass(this.beanClass);\n-\t\t\tif (proxyInterfaces.length == 0) {\n-\t\t\t\treturn;\n-\t\t\t}\n \t\t\tfor (Class<?> proxyInterface : proxyInterfaces) {\n \t\t\t\truntimeHints.reflection().registerType(proxyInterface, MemberCategory.INVOKE_DECLARED_METHODS);\n \t\t\t}",
    "output": "Remove redundant array length check"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -36,6 +36,23 @@\n  */\n class StringUtilsTests {\n \n+\t@Test\n+\tvoid hasLengthBlank() {\n+\t\tString blank = \"          \";\n+\t\tassertThat(StringUtils.hasLength(blank)).isTrue();\n+\t}\n+\n+\t@Test\n+\tvoid hasLengthNullEmpty() {\n+\t\tassertThat(StringUtils.hasLength(null)).isFalse();\n+\t\tassertThat(StringUtils.hasLength(\"\")).isFalse();\n+\t}\n+\n+\t@Test\n+\tvoid hasLengthValid() {\n+\t\tassertThat(StringUtils.hasLength(\"t\")).isTrue();\n+\t}\n+\n \t@Test\n \tvoid hasTextBlank() {\n \t\tString blank = \"          \";",
    "output": "Add unit tests for StringUtils.hasLength"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java b/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java\n--- a/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java\n@@ -43,7 +43,6 @@ public class MapAccessor implements CompilablePropertyAccessor {\n \n \t/**\n \t * Create a new {@code MapAccessor} for reading as well as writing.\n-\t * @since 6.2\n \t * @see #MapAccessor(boolean)\n \t */\n \tpublic MapAccessor() {",
    "output": "Remove Javadoc @⁠since tag from MapAccessor default constructor"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n@@ -119,8 +119,7 @@ private void replaceDefinition(ConfigurableListableBeanFactory beanFactory, Over\n \t\tString beanNameIncludingFactory;\n \t\tBeanDefinition existingBeanDefinition = null;\n \t\tif (beanName == null) {\n-\t\t\tbeanNameIncludingFactory = getBeanNameForType(\n-\t\t\t\t\tbeanFactory, overrideMetadata, pseudoBeanDefinition, enforceExistingDefinition);\n+\t\t\tbeanNameIncludingFactory = getBeanNameForType(beanFactory, overrideMetadata, enforceExistingDefinition);\n \t\t\tif (beanNameIncludingFactory == null) {\n \t\t\t\tbeanNameIncludingFactory = beanNameGenerator.generateBeanName(pseudoBeanDefinition, registry);\n \t\t\t}\n@@ -200,7 +199,7 @@ private void wrapBean(ConfigurableListableBeanFactory beanFactory, OverrideMetad\n \n \t@Nullable\n \tprivate String getBeanNameForType(ConfigurableListableBeanFactory beanFactory, OverrideMetadata overrideMetadata,\n-\t\t\tRootBeanDefinition beanDefinition, boolean enforceExistingDefinition) {\n+\t\t\tboolean enforceExistingDefinition) {\n \n \t\tSet<String> candidateNames = getExistingBeanNamesByType(beanFactory, overrideMetadata, true);\n \t\tint candidateCount = candidateNames.size();",
    "output": "Remove obsolete method parameter"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java\n@@ -22,6 +22,7 @@\n import org.springframework.context.Lifecycle;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n import org.springframework.lang.Nullable;\n import org.springframework.web.context.ServletContextAware;\n import org.springframework.web.servlet.HandlerExecutionChain;\n@@ -126,7 +127,7 @@ private boolean matchWebSocketUpgrade(@Nullable Object handler, HttpServletReque\n \t\thandler = (handler instanceof HandlerExecutionChain chain ? chain.getHandler() : handler);\n \t\tif (this.webSocketUpgradeMatch && handler instanceof WebSocketHttpRequestHandler) {\n \t\t\tString header = request.getHeader(HttpHeaders.UPGRADE);\n-\t\t\treturn (request.getMethod().equals(\"GET\") &&\n+\t\t\treturn (HttpMethod.GET.matches(request.getMethod()) &&\n \t\t\t\t\theader != null && header.equalsIgnoreCase(\"websocket\"));\n \t\t}\n \t\treturn true;",
    "output": "Use HttpMethod.GET for better readability"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -206,7 +206,10 @@ private Object buildProxy(@Nullable ClassLoader classLoader, boolean classOnly)\n \t\t\tenhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));\n \t\t\tenhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);\n \t\t\tenhancer.setAttemptLoad(true);\n-\t\t\tenhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(classLoader, undeclaredThrowableStrategy));\n+\t\t\tenhancer.setStrategy(KotlinDetector.isKotlinType(proxySuperClass) ?\n+\t\t\t\t\tnew ClassLoaderAwareGeneratorStrategy(classLoader) :\n+\t\t\t\t\tnew ClassLoaderAwareGeneratorStrategy(classLoader, undeclaredThrowableStrategy)\n+\t\t\t);\n \n \t\t\tCallback[] callbacks = getCallbacks(rootClass);\n \t\t\tClass<?>[] types = new Class<?>[callbacks.length];",
    "output": "Fix a regression in Cglib Kotlin proxies The commit skips using UndeclaredThrowableStrategy for Kotlin classes in CglibAopProxy in order to fix a related regression caused by"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,6 +18,7 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n+import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -72,7 +73,7 @@ public abstract class AbstractSockJsService implements SockJsService, CorsConfig\n \tprivate static final long ONE_YEAR = TimeUnit.DAYS.toSeconds(365);\n \n \n-\tprivate static final Random random = new Random();\n+\tprivate static final Random random = new SecureRandom();\n \n \tprotected final Log logger = LogFactory.getLog(getClass());\n ",
    "output": "Improve random source in SockJS server support Prior to this commit, the SockJs server support would use `java.util.Random` to send a random value to clients when they request the `/info` endpoint. Per protocol, clients can use this value as a source of entropy for generating a random session id. In practice, this is not used by clients. For example, the SockJS javascript client is using a cryptographically safe API to generate session ids. While this has no concrete effect on known clients, this commit improves the random source in the server support by switching to `java.security.SecureRandom`"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -1119,6 +1119,7 @@ private static String prefix(Class<?> clazz) {\n \tvoid unwrapOptional() {\n \n \t\tassertThat(ObjectUtils.unwrapOptional(null)).isNull();\n+\t\tassertThat(ObjectUtils.unwrapOptional(\"some value\")).isEqualTo(\"some value\");\n \t\tassertThat(ObjectUtils.unwrapOptional(Optional.empty())).isNull();\n \t\tassertThat(ObjectUtils.unwrapOptional(Optional.of(\"some value\"))).isEqualTo(\"some value\");\n ",
    "output": "Add a missing test case for ObjectUtils#unwrapOptional"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -62,6 +62,7 @@\n  * @author Rick Evans\n  * @author Sam Brannen\n  * @author Hyunjin Choi\n+ * @author Ngoc Nhan\n  */\n class ObjectUtilsTests {\n \n@@ -1114,4 +1115,22 @@ private static String prefix(Class<?> clazz) {\n \t\t}\n \t}\n \n+\t@Test\n+\tvoid unwrapOptional() {\n+\n+\t\tassertThat(ObjectUtils.unwrapOptional(null)).isNull();\n+\t\tassertThat(ObjectUtils.unwrapOptional(Optional.empty())).isNull();\n+\t\tassertThat(ObjectUtils.unwrapOptional(Optional.of(\"some value\"))).isEqualTo(\"some value\");\n+\n+\t\tOptional<Optional<Object>> nestedEmptyOptional = Optional.of(Optional.empty());\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t.isThrownBy(() -> ObjectUtils.unwrapOptional(nestedEmptyOptional))\n+\t\t\t.withMessage(\"Multi-level Optional usage not supported\");\n+\n+\t\tOptional<Optional<String>> nestedStringOptional = Optional.of(Optional.of(\"some value\"));\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t.isThrownBy(() -> ObjectUtils.unwrapOptional(nestedStringOptional))\n+\t\t\t.withMessage(\"Multi-level Optional usage not supported\");\n+\t}\n+\n }",
    "output": "Add test cases for ObjectUtils#unwrapOptional"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java\n@@ -122,7 +122,7 @@ public final ResolvableType getBeanType() {\n \t * matching bean of type {@link #getBeanType()}.\n \t */\n \t@Nullable\n-\tpublic String getBeanName() {\n+\tpublic final String getBeanName() {\n \t\treturn this.beanName;\n \t}\n ",
    "output": "Add missing final declaration to OverrideMetadata.getBeanName"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -890,7 +890,7 @@ public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {\n \t\t\t\t\t\tqualifier.addMetadataAttribute(attribute);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n-\t\t\t\t\t\terror(\"Qualifier 'attribute' tag must have a 'name' and 'value'\", attributeEle);\n+\t\t\t\t\t\terror(\"Qualifier 'attribute' tag must have a 'key' and 'value'\", attributeEle);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Fix error message for XML qualifier 'attribute' tag"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.IOException;\n import java.io.OutputStream;\n import java.lang.reflect.Type;\n+import java.nio.charset.Charset;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpOutputMessage;\n@@ -60,6 +61,17 @@ protected AbstractGenericHttpMessageConverter(MediaType... supportedMediaTypes)\n \t\tsuper(supportedMediaTypes);\n \t}\n \n+\t/**\n+\t * Construct an {@code AbstractGenericHttpMessageConverter} with a default charset and\n+\t * multiple supported media types.\n+\t * @param defaultCharset the default character set\n+\t * @param supportedMediaTypes the supported media types\n+\t * @since 6.2\n+\t */\n+\tprotected AbstractGenericHttpMessageConverter(Charset defaultCharset, MediaType... supportedMediaTypes) {\n+\t\tsuper(defaultCharset, supportedMediaTypes);\n+\t}\n+\n \n \t@Override\n \tprotected boolean supports(Class<?> clazz) {",
    "output": "Add an AbstractGenericHttpMessageConverter constructor This commit adds a new AbstractGenericHttpMessageConverter(Charset, MediaType...) constructor, similar to the one present in AbstractHttpMessageConverter"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n@@ -205,6 +205,7 @@ public void setHttpContextFactory(BiFunction<HttpMethod, URI, HttpContext> httpC\n \n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {\n \t\tHttpClient client = getHttpClient();\n ",
    "output": "Upgrade to Apache HttpClient 5.4 This commit also updates the external Javadoc link to avoid the following warning in the build. URL https://hc.apache.org/httpcomponents-.2.x/current/httpclient5/apidocs/package-list was redirected to https://hc.apache.org/httpcomponents-.4.x/current/httpclient5/apidocs/package-list"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java\n@@ -212,7 +212,7 @@ else if (resource instanceof ClassPathResource classPathResource) {\n \t\t\treturn true;\n \t\t}\n \t\tlocationPath = (locationPath.endsWith(\"/\") || locationPath.isEmpty() ? locationPath : locationPath + \"/\");\n-\t\treturn (resourcePath.startsWith(locationPath) && !isInvalidEncodedInputPath(resourcePath));\n+\t\treturn (resourcePath.startsWith(locationPath) && !isInvalidEncodedResourcePath(resourcePath));\n \t}\n \n \tprivate boolean isInvalidEncodedResourcePath(String resourcePath) {",
    "output": "Use correct method to check encoded resource path Closes"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -442,10 +442,13 @@ public static class SpringCoreBlockHoundIntegration implements BlockHoundIntegra\n \t\tpublic void applyTo(BlockHound.Builder builder) {\n \t\t\t// Avoid hard references potentially anywhere in spring-core (no need for structural dependency)\n \n-\t\t\tString className = \"org.springframework.util.ConcurrentReferenceHashMap$Segment\";\n-\t\t\tbuilder.allowBlockingCallsInside(className, \"doTask\");\n-\t\t\tbuilder.allowBlockingCallsInside(className, \"clear\");\n-\t\t\tbuilder.allowBlockingCallsInside(className, \"restructure\");\n+\t\t\tString segmentClassName = \"org.springframework.util.ConcurrentReferenceHashMap$Segment\";\n+\t\t\tbuilder.allowBlockingCallsInside(segmentClassName, \"doTask\");\n+\t\t\tbuilder.allowBlockingCallsInside(segmentClassName, \"clear\");\n+\t\t\tbuilder.allowBlockingCallsInside(segmentClassName, \"restructure\");\n+\n+\t\t\tString referenceManagerClassName = \"org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager\";\n+\t\t\tbuilder.allowBlockingCallsInside(referenceManagerClassName, \"pollForPurge\");\n \t\t}\n \t}\n ",
    "output": "Add BlockHound exception for ConcurrentReferenceHashMap$ReferenceManager This commit adds a SpringCoreBlockHoundIntegration configuration to allows `pollForPurge` method to block"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.17.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.18.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to SLF4J 2.0.16, Tomcat 10.1.29, Jetty 12.0.13, Netty 4.1.113, Undertow 2.3.17, AssertJ 3.26.3, Checkstyle 10.18.1"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java\n@@ -32,7 +32,6 @@\n \n import org.springframework.core.codec.Hints;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n@@ -46,7 +46,6 @@\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourceRegion;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpRange;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java\n@@ -37,7 +37,6 @@\n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.codec.Hints;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatusCode;\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java\n@@ -31,7 +31,6 @@\n \n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatusCode;",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java b/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java\n@@ -24,6 +24,7 @@\n \n /**\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  */\n class MediaTypeFactoryTests {\n \n@@ -32,6 +33,7 @@ void getMediaType() {\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.xml\")).contains(MediaType.APPLICATION_XML);\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.js\")).contains(MediaType.parseMediaType(\"text/javascript\"));\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.css\")).contains(MediaType.parseMediaType(\"text/css\"));\n+\t\tassertThat(MediaTypeFactory.getMediaType(\"file.wasm\")).contains(MediaType.parseMediaType(\"application/wasm\"));\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.foobar\")).isNotPresent();\n \t}\n ",
    "output": "Upgrade mime.types This commit updates mime.types based on revision 1918129 of https://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java b/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java\n@@ -609,7 +609,7 @@ SupplierAdvice supplierAdvice() {\n \t@Aspect\n \tstatic class SupplierAdvice {\n \n-\t\t@Around(\"execution(public * org.springframework.aop.aspectj.autoproxy..*.*(..))\")\n+\t\t@Around(\"execution(* java.util.function.Supplier+.get())\")\n \t\tObject aroundSupplier(ProceedingJoinPoint joinPoint) throws Throwable {\n \t\t\treturn \"advised: \" + joinPoint.proceed();\n \t\t}",
    "output": "Make AspectJ pointcut in test more robust The previous pointcut attempted to match against a local lambda type; however, that pointcut was unreliable and failed sporadically. This commit therefore changes the pointcut so that it specifically targets the getmethod of a subtype of Supplier, which seems to result in reliable pointcut matching"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java\n@@ -25,11 +25,13 @@\n import org.springframework.aot.hint.ExecutableMode;\n import org.springframework.aot.hint.ReflectionHints;\n import org.springframework.aot.hint.annotation.ReflectiveProcessor;\n+import org.springframework.core.KotlinDetector;\n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.http.HttpEntity;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Controller;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * {@link ReflectiveProcessor} implementation for {@link Controller} and\n@@ -71,6 +73,11 @@ protected void registerTypeHints(ReflectionHints hints, Class<?> type) {\n \n \tprotected void registerMethodHints(ReflectionHints hints, Method method) {\n \t\thints.registerMethod(method, ExecutableMode.INVOKE);\n+\t\tClass<?> declaringClass = method.getDeclaringClass();\n+\t\tif (KotlinDetector.isKotlinType(declaringClass)) {\n+\t\t\tReflectionUtils.doWithMethods(declaringClass, m -> hints.registerMethod(m, ExecutableMode.INVOKE),\n+\t\t\t\t\tm -> m.getName().equals(method.getName() + \"$default\"));\n+\t\t}\n \t\tfor (Parameter parameter : method.getParameters()) {\n \t\t\tregisterParameterTypeHints(hints, MethodParameter.forParameter(parameter));\n \t\t}",
    "output": "Add native support for Kotlin default values in controllers"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java\n@@ -86,9 +86,9 @@ void createWithExplicitDatabaseName() {\n \n \t@Test\n \tvoid createWithGeneratedDatabaseName() {\n-\t\tPredicate<String> urlPredicate = url -> url.startsWith(\"jdbc:hsqldb:mem:\");\n-\t\turlPredicate.and(url -> !url.endsWith(\"dataSource\"));\n-\t\turlPredicate.and(url -> !url.endsWith(\"shouldBeOverriddenByGeneratedName\"));\n+\t\tPredicate<String> urlPredicate = ((Predicate<String>) url -> url.startsWith(\"jdbc:hsqldb:mem:\"))\n+\t\t\t\t.and(url -> !url.endsWith(\"dataSource\"))\n+\t\t\t\t.and(url -> !url.endsWith(\"shouldBeOverriddenByGeneratedName\"));\n \t\tassertCorrectSetupForSingleDataSource(\"jdbc-config-db-name-generated.xml\", urlPredicate);\n \t}\n ",
    "output": "Fix predicate setup in test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n--- a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n@@ -220,13 +220,10 @@ private <T> T readWithMessageConverters(ClientHttpResponse clientResponse, Runna\n \t\t\t\t\treturn (T) messageConverter.read((Class)bodyClass, responseWrapper);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tUnknownContentTypeException unknownContentTypeException = new UnknownContentTypeException(bodyType, contentType,\n+\n+\t\t\tthrow new UnknownContentTypeException(bodyType, contentType,\n \t\t\t\t\tresponseWrapper.getStatusCode(), responseWrapper.getStatusText(),\n \t\t\t\t\tresponseWrapper.getHeaders(), RestClientUtils.getBody(responseWrapper));\n-\t\t\tif (observation != null) {\n-\t\t\t\tobservation.error(unknownContentTypeException);\n-\t\t\t}\n-\t\t\tthrow unknownContentTypeException;\n \t\t}\n \t\tcatch (UncheckedIOException | IOException | HttpMessageNotReadableException exc) {\n \t\t\tThrowable cause;",
    "output": "Remove unnecessary error signal from DefaultRestClient Before UnknownContentTypeException is thrown, it is added to the current Observation but since UnknownContentTypeException is a RestClientException, the exception is added again in one of the catch blocks later on"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n--- a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n@@ -196,7 +196,7 @@ private <T> T readWithMessageConverters(ClientHttpResponse clientResponse, Runna\n \n \t\tMediaType contentType = getContentType(clientResponse);\n \n-\t\ttry (clientResponse) {\n+\t\ttry {\n \t\t\tcallback.run();\n \n \t\t\tIntrospectingClientHttpResponse responseWrapper = new IntrospectingClientHttpResponse(clientResponse);\n@@ -240,17 +240,18 @@ private <T> T readWithMessageConverters(ClientHttpResponse clientResponse, Runna\n \t\t\t\t\tResolvableType.forType(bodyType) + \"] and content type [\" + contentType + \"]\", cause);\n \t\t\tif (observation != null) {\n \t\t\t\tobservation.error(restClientException);\n-\t\t\t\tobservation.stop();\n \t\t\t}\n \t\t\tthrow restClientException;\n \t\t}\n \t\tcatch (RestClientException restClientException) {\n \t\t\tif (observation != null) {\n \t\t\t\tobservation.error(restClientException);\n-\t\t\t\tobservation.stop();\n \t\t\t}\n \t\t\tthrow restClientException;\n \t\t}\n+\t\tfinally {\n+\t\t\tclientResponse.close();\n+\t\t}\n \t}\n \n \tprivate static MediaType getContentType(ClientHttpResponse clientResponse) {",
    "output": "Fix RestClient instrumentation ClientHttpResponse implements Closeable and the close method of DefaultConvertibleClientHttpResponse also stops the current Observation. Before this change exiting the try-with-resource block stopped the Observation since it called close on ClientHttpResponse. After this, there were multiple error and stop calls on the Observation in the catch blocks after the Observation was already stopped which is invalid. This change reorders the flow by stopping the Observation in the finally block (closing ClientHttpResponse) and not stopping the Observation in any of the catch blocks"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n@@ -557,6 +557,7 @@ else if (len < 0) {\n \t\t\t\t}\n \t\t\t\telse /* if (len == 0) */ {\n \t\t\t\t\t// buffer starts with complete delimiter, flush out the previous buffers\n+\t\t\t\t\tDataBufferUtils.release(boundaryBuffer);\n \t\t\t\t\tflush();\n \t\t\t\t}\n ",
    "output": "Fix buffer leak in MultipartParser This change fixes a buffer leak when the MultipartParser is encountering a body DataBuffer that only contains a boundary"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java\n@@ -111,19 +111,18 @@ private static Function<ServletContext, FilterConfig> getFilterConfigInitializer\n \t\tString className = delegate.getClass().getName();\n \n \t\treturn servletContext -> {\n-\t\t\tMockServletContext mockServletContext = (MockServletContext) servletContext;\n-\t\t\tMockFilterConfig filterConfig;\n-\t\t\tif (filterName != null) {\n-\t\t\t\tfilterConfig = new MockFilterConfig(servletContext, filterName);\n-\t\t\t\tmockServletContext.addFilterRegistration(new MockFilterRegistration(className, filterName));\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tfilterConfig = new MockFilterConfig(servletContext);\n-\t\t\t\tmockServletContext.addFilterRegistration(new MockFilterRegistration(className));\n-\t\t\t}\n+\t\t\tMockFilterConfig filterConfig = (filterName != null ?\n+\t\t\t\t\tnew MockFilterConfig(servletContext, filterName) : new MockFilterConfig(servletContext));\n+\n \t\t\tif (initParams != null) {\n \t\t\t\tinitParams.forEach(filterConfig::addInitParameter);\n \t\t\t}\n+\n+\t\t\tif (servletContext instanceof MockServletContext mockServletContext) {\n+\t\t\t\tmockServletContext.addFilterRegistration(filterName != null ?\n+\t\t\t\t\t\tnew MockFilterRegistration(className, filterName) : new MockFilterRegistration(className));\n+\t\t\t}\n+\n \t\t\treturn filterConfig;\n \t\t};\n \t}",
    "output": "Add FilterRegistration's defensively Follow-up to d2225c, which broke Boot tests because the ServletContext can be the one of the embedded Servlet container if initializing a live server and as well as MockMvc (e.g. via `@AutoConfigureMockMvc`)"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java\n@@ -111,10 +111,11 @@ public void configureViewResolvers(ViewResolverRegistry registry) {\n \n \t\t@Bean\n \t\tpublic FreeMarkerConfigurer freeMarkerConfig() {\n-\t\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n-\t\t\tconfigurer.setPreferFileSystemAccess(false);\n-\t\t\tconfigurer.setTemplateLoaderPath(\"classpath*:org/springframework/web/reactive/view/freemarker/\");\n-\t\t\treturn configurer;\n+\t\t\t// No need to configure a custom template loader path via setTemplateLoaderPath(),\n+\t\t\t// since FreeMarkerConfigurer already registers a\n+\t\t\t// new ClassTemplateLoader(FreeMarkerConfigurer.class, \"\"), which automatically\n+\t\t\t// finds template files in the same package as this test class.\n+\t\t\treturn new FreeMarkerConfigurer();\n \t\t}\n \t}\n ",
    "output": "Remove invalid configuration in RequestMappingViewResolutionIntegrationTests Prior to this commit, RequestMappingViewResolutionIntegrationTests invoked the following configurer.setTemplateLoaderPath( \"classpath*:org/springframework/web/reactive/view/freemarker/\"); However, that configuration is invalid since `classpath*:` is not supported for a `templateLoaderPath`. Despite that, the tests still passed since FreeMarkerConfigurer already registers a new ClassTemplateLoader(FreeMarkerConfigurer.class, \"\"), which automatically finds template files in the same package as FreeMarkerConfigurer (for the \"spring.ftl\" macro library support) and coincidentally RequestMappingViewResolutionIntegrationTests as well (which resides in the same package). This commit therefore removes the invalid configuration and adds a comment to explain what's going on"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -495,7 +495,7 @@ public String toString() {\n \t}\n \n \tprotected String formatViewName() {\n-\t\treturn (getBeanName() != null ? \"name '\" + getBeanName() + \"'\" : \"[\" + getClass().getSimpleName() + \"]\");\n+\t\treturn (getBeanName() != null ? \"name [\" + getBeanName() + \"]\" : \"[\" + getClass().getSimpleName() + \"]\");\n \t}\n \n }",
    "output": "Use consistent formatting for view name in AbstractView"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -875,7 +875,7 @@ private Object[] resolveMethodArguments(Method method, Object bean, @Nullable St\n \t\t\tint argumentCount = method.getParameterCount();\n \t\t\tObject[] arguments = new Object[argumentCount];\n \t\t\tDependencyDescriptor[] descriptors = new DependencyDescriptor[argumentCount];\n-\t\t\tSet<String> autowiredBeanNames = new LinkedHashSet<>(argumentCount * 2);\n+\t\t\tSet<String> autowiredBeanNames = CollectionUtils.newLinkedHashSet(argumentCount);\n \t\t\tAssert.state(beanFactory != null, \"No BeanFactory available\");\n \t\t\tTypeConverter typeConverter = beanFactory.getTypeConverter();\n \t\t\tfor (int i = 0; i < arguments.length; i++) {",
    "output": "Use CollectionFactory#newLinkedHashSet for method arguments"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n@@ -88,7 +88,7 @@ public InputStream getBody() throws IOException {\n \t\t}\n \n \t\tif (body == null) {\n-\t\t\tthrow new IOException(\"Could not receive body\");\n+\t\t\tbody = InputStream.nullInputStream();\n \t\t}\n \t\tthis.body = body;\n \t\treturn body;",
    "output": "Use null stream in ReactorNettyClientResponse if no body is available"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -60,10 +60,6 @@\n  * groups for specific phases, on startup/shutdown as well as for explicit start/stop\n  * interactions on a {@link org.springframework.context.ConfigurableApplicationContext}.\n  *\n- * <p>Provides interaction with {@link Lifecycle} and {@link SmartLifecycle} beans in\n- * groups for specific phases, on startup/shutdown as well as for explicit start/stop\n- * interactions on a {@link org.springframework.context.ConfigurableApplicationContext}.\n- *\n  * <p>As of 6.1, this also includes support for JVM checkpoint/restore (Project CRaC)\n  * when the {@code org.crac:crac} dependency on the classpath.\n  *",
    "output": "Remove duplicated javadoc paragraph"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n@@ -219,6 +219,14 @@ private void contributeHibernateHints(RuntimeHints hints, @Nullable ClassLoader\n \t\t\t\tReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,\n \t\t\t\t\t\tAnnotationUtils.findAnnotation(method, idGeneratorTypeClass), \"value\"));\n \t\t\t}\n+\n+\t\t\tClass<? extends Annotation> attributeBinderTypeClass = loadClass(\"org.hibernate.annotations.AttributeBinderType\", classLoader);\n+\t\t\tif (attributeBinderTypeClass != null) {\n+\t\t\t\tReflectionUtils.doWithFields(managedClass, field -> registerForReflection(reflection,\n+\t\t\t\t\t\tAnnotationUtils.findAnnotation(field, attributeBinderTypeClass), \"binder\"));\n+\t\t\t\tReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,\n+\t\t\t\t\t\tAnnotationUtils.findAnnotation(method, attributeBinderTypeClass), \"binder\"));\n+\t\t\t}\n \t\t}\n \n \t\t@Nullable",
    "output": "Add missing hints for Hibernate `@TenantId`"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java\n@@ -85,7 +85,7 @@ void fieldWithMethodNameHasOverride(ApplicationContext ctx) {\n \n \t@Nested\n \t@DisplayName(\"With @TestBean in enclosing class\")\n-\tpublic class TestBeanNestedTests {\n+\tpublic class TestBeanFieldInEnclosingClassTests {\n \n \t\t@Test\n \t\tvoid fieldHasOverride(ApplicationContext ctx) {\n@@ -108,7 +108,7 @@ void fieldWithMethodNameHasOverride(ApplicationContext ctx) {\n \n \t@Nested\n \t@DisplayName(\"With factory method in enclosing class\")\n-\tpublic class TestBeanNested2Tests {\n+\tpublic class TestBeanFactoryMethodInEnclosingClassTests {\n \n \t\t@TestBean(methodName = \"nestedFieldTestOverride\", name = \"nestedField\")\n \t\tString nestedField2;",
    "output": "Improve class names"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.16.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.17.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.17"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -561,9 +561,8 @@ private List<Class<?>> getClassHierarchy(Class<?> type) {\n \t\t\t}\n \n \t\t\tif (Enum.class.isAssignableFrom(type)) {\n-\t\t\t\taddToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited);\n \t\t\t\taddToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited);\n-\t\t\t\taddInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited);\n+\t\t\t\taddInterfacesToClassHierarchy(Enum.class, false, hierarchy, visited);\n \t\t\t}\n \n \t\t\taddToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited);",
    "output": "Remove superfluous addToClassHierarchy call for Enum types"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -74,8 +74,6 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \n \tprivate static final String SCHEME_PATTERN = \"([^:/?#\\\\\\\\]+):\";\n \n-\tprivate static final String HTTP_PATTERN = \"(?i)(http|https):\";\n-\n \tprivate static final String USERINFO_PATTERN = \"([^/?#\\\\\\\\]*)\";\n \n \tprivate static final String HOST_IPV4_PATTERN = \"[^/?#:\\\\\\\\]*\";",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java\n@@ -37,6 +37,7 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.util.Assert;\n+import org.springframework.util.MultiValueMap;\n \n /**\n  * {@link ClientHttpRequest} for the Java {@link HttpClient}.\n@@ -108,8 +109,11 @@ protected void applyHeaders() {\n \n \t@Override\n \tprotected void applyCookies() {\n-\t\tthis.builder.header(HttpHeaders.COOKIE, getCookies().values().stream()\n-\t\t\t\t.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining(\";\")));\n+\t\tMultiValueMap<String, HttpCookie> cookies = getCookies();\n+\t\tif (!cookies.isEmpty()) {\n+\t\t\tthis.builder.header(HttpHeaders.COOKIE, cookies.values().stream()\n+\t\t\t\t\t.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining(\";\")));\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Fix cookie management in reactive JdkClientHttpRequest Prevent cookies to be set to empty in the HTTP request if no cookie is present"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n@@ -58,7 +58,8 @@ class PathMatchingResourcePatternResolverTests {\n \n \tprivate static final String[] TEST_CLASSES_IN_CORE_IO_SUPPORT = {\"PathMatchingResourcePatternResolverTests.class\"};\n \n-\tprivate static final String[] CLASSES_IN_REACTOR_UTIL_ANNOTATION = {\"NonNull.class\", \"NonNullApi.class\", \"Nullable.class\"};\n+\tprivate static final String[] CLASSES_IN_REACTOR_UTIL_ANNOTATION =\n+\t\t\t{\"Incubating.class\", \"NonNull.class\", \"NonNullApi.class\", \"Nullable.class\"};\n \n \n \tprivate PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();",
    "output": "Upgrade reactor.util.annotation content"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n@@ -99,14 +99,23 @@ public ResultSetWrappingSqlRowSet(ResultSet resultSet) throws InvalidResultSetAc\n \t\t\tResultSetMetaData rsmd = resultSet.getMetaData();\n \t\t\tif (rsmd != null) {\n \t\t\t\tint columnCount = rsmd.getColumnCount();\n-\t\t\t\tthis.columnLabelMap = CollectionUtils.newHashMap(columnCount);\n+\t\t\t\tthis.columnLabelMap = CollectionUtils.newHashMap(columnCount * 2);\n \t\t\t\tfor (int i = 1; i <= columnCount; i++) {\n \t\t\t\t\tString key = rsmd.getColumnLabel(i);\n \t\t\t\t\t// Make sure to preserve first matching column for any given name,\n \t\t\t\t\t// as defined in ResultSet's type-level javadoc (lines 81 to 83).\n \t\t\t\t\tif (!this.columnLabelMap.containsKey(key)) {\n \t\t\t\t\t\tthis.columnLabelMap.put(key, i);\n \t\t\t\t\t}\n+\t\t\t\t\t// Also support column names prefixed with table name\n+\t\t\t\t\t// as in {table_name}.{column.name}.\n+\t\t\t\t\tString table = rsmd.getTableName(i);\n+\t\t\t\t\tif (table != null && !table.isEmpty()) {\n+\t\t\t\t\t\tkey = table + \".\" + rsmd.getColumnName(i);\n+\t\t\t\t\t\tif (!this.columnLabelMap.containsKey(key)) {\n+\t\t\t\t\t\t\tthis.columnLabelMap.put(key, i);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Add support for qualifying columns with table. Adds support common in other ResultSet implemenatations for qualifying column names with table name to distinguish potentially duplicate column names in a join of two or more tables from one another. The expected format is {table_name}.{column_namne}, where column_name is the actuall designated column name and not the column label"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.15.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.16.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Groovy 4.0.21, Tomcat 10.1.23, Jetty 12.0.8, Netty 4.1.109, Undertow 2.3.13, Checkstyle 10.16"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java b/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java\n@@ -227,7 +227,7 @@ public final int getIsolationLevel() {\n \t */\n \tpublic final void setTimeout(int timeout) {\n \t\tif (timeout < TIMEOUT_DEFAULT) {\n-\t\t\tthrow new IllegalArgumentException(\"Timeout must be a positive integer or TIMEOUT_DEFAULT\");\n+\t\t\tthrow new IllegalArgumentException(\"Timeout must be a non-negative integer or TIMEOUT_DEFAULT\");\n \t\t}\n \t\tthis.timeout = timeout;\n \t}",
    "output": "Fix transaction definition setTimeout error message since zero is valid This commit rephrases the `DefaultTransactionDefinition#setTimeout` exception message to better reflect the fact that 0 is a valid input value. Even though this often leads to a transaction immediately timing out after opening, there is one notable case where this has another meaningful effect: in Jakarta transactions (`UserTransaction`), when passing 0 \"the transaction service restores the default value\""
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java b/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -66,6 +66,10 @@ private void registerHints(Class<?> type, RuntimeHints runtimeHints) {\n \t\t\tif (superClass != null) {\n \t\t\t\tregisterHints(superClass, runtimeHints);\n \t\t\t}\n+\t\t\tClass<?> enclosingClass = type.getEnclosingClass();\n+\t\t\tif (enclosingClass != null) {\n+\t\t\t\truntimeHints.reflection().registerType(enclosingClass);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Add Kotlin hints for enclosing class This is needed by Kotlin reflection in order to be able to list class members on native"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java b/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n--- a/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n@@ -74,12 +74,9 @@ public static void closeConnection(@Nullable Connection con, boolean stop) {\n \t\tif (con != null) {\n \t\t\ttry {\n \t\t\t\tif (stop) {\n-\t\t\t\t\ttry {\n+\t\t\t\t\ttry (con) {\n \t\t\t\t\t\tcon.stop();\n \t\t\t\t\t}\n-\t\t\t\t\tfinally {\n-\t\t\t\t\t\tcon.close();\n-\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tcon.close();",
    "output": "Use try-with-resources when applicable"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n@@ -575,14 +575,11 @@ protected void closeConnection(Connection con) {\n \t\t\tlogger.debug(\"Closing shared JMS Connection: \" + con);\n \t\t}\n \t\ttry {\n-\t\t\ttry {\n+\t\t\ttry (con) {\n \t\t\t\tif (this.startedCount > 0) {\n \t\t\t\t\tcon.stop();\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfinally {\n-\t\t\t\tcon.close();\n-\t\t\t}\n \t\t}\n \t\tcatch (jakarta.jms.IllegalStateException ex) {\n \t\t\tlogger.debug(\"Ignoring Connection state exception - assuming already closed: \" + ex);",
    "output": "Use try-with-resources when applicable"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.14.2\");\n+\t\t\tcheckstyle.setToolVersion(\"10.15.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to AspectJ 1.9.22, Groovy 4.0.20, Tomcat 10.1.20, Netty 4.1.108, OpenPDF 1.3.43, Woodstox 6.6.2, Checkstyle 10.15"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java\n@@ -94,7 +94,7 @@ private void parseField(Field field, Class<?> source) {\n \t\tAtomicBoolean overrideAnnotationFound = new AtomicBoolean();\n \n \t\tMergedAnnotations.from(field, DIRECT).stream(BeanOverride.class).forEach(mergedAnnotation -> {\n-\t\t\tAssert.notNull(mergedAnnotation.isMetaPresent(), \"@BeanOverride annotation must be meta-present\");\n+\t\t\tAssert.isTrue(mergedAnnotation.isMetaPresent(), \"@BeanOverride annotation must be meta-present\");\n \n \t\t\tBeanOverride beanOverride = mergedAnnotation.synthesize();\n \t\t\tBeanOverrideProcessor processor = BeanUtils.instantiateClass(beanOverride.value());",
    "output": "Fix logic error hidden by auto-boxing"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.14.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.14.2\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.14.2"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n@@ -50,7 +50,7 @@ public class SimpleAliasRegistry implements AliasRegistry {\n \tprivate final Map<String, String> aliasMap = new ConcurrentHashMap<>(16);\n \n \t/** List of alias names, in registration order. */\n-\tprivate volatile List<String> aliasNames = new ArrayList<>(16);\n+\tprivate final List<String> aliasNames = new ArrayList<>(16);\n \n \n \t@Override",
    "output": "Make SimpleAliasRegistry.aliasNames final"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java\n@@ -105,6 +105,17 @@ void valueMatches() {\n \t\t\t\t\t\t\"[.*ISO-8859-1.*]\"));\n \t}\n \n+\t@Test\n+\tvoid valueMatchesWithNonexistentHeader() {\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\theaders.setContentType(MediaType.parseMediaType(\"application/json;charset=UTF-8\"));\n+\t\tHeaderAssertions assertions = headerAssertions(headers);\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)\n+\t\t\t\t.isThrownBy(() -> assertions.valueMatches(\"Content-XYZ\", \".*ISO-8859-1.*\"))\n+\t\t\t\t.withMessage(\"Response header 'Content-XYZ' not found\");\n+\t}\n+\n \t@Test\n \tvoid valuesMatch() {\n \t\tHttpHeaders headers = new HttpHeaders();",
    "output": "Add missing test"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.13.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.14.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Reactor 2023.0.4 and Micrometer 1.12.4 Includes AspectJ 1.9.21.1, Groovy 4.0.19, Tomcat 10.1.19, Jetty 12.0.7, Jackson 2.15.4, OpenPDF 1.3.42, Mockito 5.11, Checkstyle 10.14.1"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java b/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java\n--- a/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java\n@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2002-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.docs.web.webmvc.mvccontroller.mvcanncontroller;\n+\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+\n+// tag::snippet[]\n+@Configuration\n+@ComponentScan(\"org.example.web\")\n+public class WebConfiguration {\n+\n+\t// ...\n+}\n+// end::snippet[]",
    "output": "Use code includes and tabs in mvc-controller/ann.adoc"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java\n@@ -33,7 +33,6 @@\n import jakarta.annotation.PostConstruct;\n import jakarta.inject.Inject;\n import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n@@ -659,14 +658,6 @@ void publicSubclassWithInheritedEventListener() {\n \t\tthis.eventCollector.assertTotalEventsCount(1);\n \t}\n \n-\t@Test @Disabled  // SPR-15122\n-\tvoid listenersReceiveEarlyEvents() {\n-\t\tload(EventOnPostConstruct.class, OrderedTestListener.class);\n-\t\tOrderedTestListener listener = this.context.getBean(OrderedTestListener.class);\n-\n-\t\tassertThat(listener.order).contains(\"first\", \"second\", \"third\");\n-\t}\n-\n \t@Test\n \tvoid missingListenerBeanIgnored() {\n \t\tload(MissingEventListener.class);",
    "output": "Remove disabled test of declined issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n@@ -512,7 +512,6 @@ protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutExc\n \t * @param handler the executed handler, or {@code null} if none chosen\n \t * at the time of the exception (for example, if multipart resolution failed)\n \t * @return an empty ModelAndView indicating the exception was handled\n-\t * @throws IOException potentially thrown from {@link HttpServletResponse#sendError}\n \t * @since 5.3.33\n \t */\n \tprotected ModelAndView handleAsyncRequestNotUsableException(AsyncRequestNotUsableException ex,",
    "output": "Remove IOException that's not thrown from Javadoc"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n@@ -162,7 +162,7 @@ public String getFirst(String headerName) {\n \t\t\tif (headerName.equalsIgnoreCase(CONTENT_TYPE)) {\n \t\t\t\t// Content-Type is written as an override so check super first\n \t\t\t\tString value = super.getFirst(headerName);\n-\t\t\t\treturn (value != null ? value : servletResponse.getHeader(headerName));\n+\t\t\t\treturn (value != null ? value : servletResponse.getContentType());\n \t\t\t}\n \t\t\telse {\n \t\t\t\tString value = servletResponse.getHeader(headerName);",
    "output": "Use ServletResponse#getContentType in ServletServerHttpResponse This commit updates ServletServerHttpResponse.ServletResponseHttpHeaders in order to use ServletResponse#getContentType instead of ServletResponse#getHeader. It allows to have a consistent behavior between Tomcat (which sets only the former) and Undertow/Jetty (which set both)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java b/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java\n--- a/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java\n+++ b/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java\n@@ -31,7 +31,7 @@\n  * @since 6.2\n  */\n @SuppressWarnings(\"serial\")\n-public class PlaceholderResolutionException extends RuntimeException {\n+public class PlaceholderResolutionException extends IllegalArgumentException {\n \n \tprivate final String reason;\n ",
    "output": "Make PlaceholderResolutionException extend from IllegalArgumentException To smooth upgrade from 6.1.x, this commit makes sure that code that used to catch an IAE to ignore a faulty placeholder resolution still works"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java\n@@ -116,6 +116,19 @@ void primaryVersusFallback(Class<?> configClass) {\n \t\tctx.close();\n \t}\n \n+\t/**\n+\t * One regular bean along with fallback beans is considered effective primary\n+\t */\n+\t@Test\n+\tvoid effectivePrimary() {\n+\t\tAnnotationConfigApplicationContext ctx = context(EffectivePrimaryConfig.class);\n+\n+\t\tTestBean testBean = ctx.getBean(TestBean.class);\n+\t\tassertThat(testBean.getName()).isEqualTo(\"effective-primary\");\n+\n+\t\tctx.close();\n+\t}\n+\n \t@Test\n \tvoid customWithLazyResolution() {\n \t\tAnnotationConfigApplicationContext ctx = context(CustomConfig.class, CustomPojo.class);\n@@ -314,6 +327,24 @@ public TestBean testBean2x() {\n \t\t}\n \t}\n \n+\t@Configuration\n+\tstatic class EffectivePrimaryConfig {\n+\n+\t\t@Bean\n+\t\tpublic TestBean effectivePrimary() {\n+\t\t\treturn new TestBean(\"effective-primary\");\n+\t\t}\n+\n+\t\t@Bean @Fallback\n+\t\tpublic TestBean fallback1() {\n+\t\t\treturn new TestBean(\"fallback1\");\n+\t\t}\n+\n+\t\t@Bean @Fallback\n+\t\tpublic TestBean fallback2() {\n+\t\t\treturn new TestBean(\"fallback2\");\n+\t\t}\n+\t}\n \n \t@Component @Lazy\n \tstatic class StandardPojo {",
    "output": "Add test for @Fallback with BeanFactory.getBean(Class)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java\n@@ -30,6 +30,7 @@\n \n import org.junit.jupiter.api.Test;\n \n+import org.springframework.core.testfixture.ide.IdeUtils;\n import org.springframework.util.ReflectionUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -120,7 +121,14 @@ void findBridgedMethodInHierarchyWithBoundedGenerics() throws Exception {\n \tvoid isBridgeMethodFor() throws Exception {\n \t\tMethod bridged = MyBar.class.getDeclaredMethod(\"someMethod\", String.class, Object.class);\n \t\tMethod other = MyBar.class.getDeclaredMethod(\"someMethod\", Integer.class, Object.class);\n-\t\tMethod bridge = MyBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\n+\t\tMethod bridge;\n+\n+\t\tif (IdeUtils.runningInEclipse()) {\n+\t\t\tbridge = InterBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\n+\t\t}\n+\t\telse {\n+\t\t\tbridge = MyBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\n+\t\t}\n \n \t\tassertThat(BridgeMethodResolver.isBridgeMethodFor(bridge, bridged, MyBar.class)).as(\"Should be bridge method\").isTrue();\n \t\tassertThat(BridgeMethodResolver.isBridgeMethodFor(bridge, other, MyBar.class)).as(\"Should not be bridge method\").isFalse();",
    "output": "Fix BridgeMethodResolverTests.isBridgeMethodForin Eclipse IDE"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n@@ -744,13 +744,15 @@ public boolean isPrimary() {\n \t * {@inheritDoc}\n \t * <p>Default is {@code false}.\n \t */\n+\t@Override\n \tpublic void setFallback(boolean fallback) {\n \t\tthis.fallback = fallback;\n \t}\n \n \t/**\n \t * {@inheritDoc}\n \t */\n+\t@Override\n \tpublic boolean isFallback() {\n \t\treturn this.fallback;\n \t}",
    "output": "Add missing @Override annotations"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -313,8 +313,7 @@ protected final SourceClass doProcessConfigurationClass(\n \t\t\t\t\tComponentScan.class, ComponentScans.class, MergedAnnotation::isMetaPresent);\n \t\t}\n \n-\t\tif (!componentScans.isEmpty() &&\n-\t\t\t\t!this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n+\t\tif (!componentScans.isEmpty()) {\n \t\t\tfor (AnnotationAttributes componentScan : componentScans) {\n \t\t\t\t// The config class is annotated with @ComponentScan -> perform the scan immediately\n \t\t\t\tSet<BeanDefinitionHolder> scannedBeanDefinitions =",
    "output": "Remove ComponentScan duplicate condition"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java\n@@ -268,7 +268,7 @@ public static Builder forReadWriteDataBinding() {\n \t/**\n \t * Builder for {@code SimpleEvaluationContext}.\n \t */\n-\tpublic static class Builder {\n+\tpublic static final class Builder {\n \n \t\tprivate final List<PropertyAccessor> accessors;\n \n@@ -280,7 +280,7 @@ public static class Builder {\n \t\t@Nullable\n \t\tprivate TypedValue rootObject;\n \n-\t\tpublic Builder(PropertyAccessor... accessors) {\n+\t\tprivate Builder(PropertyAccessor... accessors) {\n \t\t\tthis.accessors = Arrays.asList(accessors);\n \t\t}\n ",
    "output": "Make SimpleEvaluationContext.Builder final and its constructor private"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -76,7 +76,7 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \n \tprivate static final String HTTP_PATTERN = \"(?i)(http|https):\";\n \n-\tprivate static final String USERINFO_PATTERN = \"([^@\\\\[/?#]*)\";\n+\tprivate static final String USERINFO_PATTERN = \"([^@/?#]*)\";\n \n \tprivate static final String HOST_IPV4_PATTERN = \"[^\\\\[/?#:]*\";\n ",
    "output": "Upgrade user info pattern"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java b/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java\n--- a/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java\n@@ -55,7 +55,7 @@ private RestClientAdapter(RestClient restClient) {\n \n \t@Override\n \tpublic boolean supportsRequestAttributes() {\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Override",
    "output": "Fix supportsRequestAttributes for RestClientAdapter Previously, RestClientAdapter claimed that it supports request attributes when, in fact, it does not. This commit updates the implementation accordingly"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.7\");\n+\t\t\tcheckstyle.setToolVersion(\"10.13.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to SLF4J 2.0.12, Jetty 12.0.6, Apache HttpClient 5.3.1, OpenPDF 1.3.39, Mockito 5.10, Checkstyle 10.13"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n@@ -457,7 +457,7 @@ void overloadingOperators() {\n \t\t\tcontext.setOperatorOverloader(new ListConcatenation());\n \n \t\t\t// evaluates to [1, 2, 3, 4, 5]\n-\t\t\tList list = parser.parseExpression(\"{1, 2, 3} + {4, 5}\").getValue(context, List.class);\n+\t\t\tList list = parser.parseExpression(\"{1, 2, 3} + {2 + 2, 5}\").getValue(context, List.class);\n \t\t\tassertThat(list).containsExactly(1, 2, 3, 4, 5);\n \t\t}\n \n@@ -706,7 +706,7 @@ public Object operate(Operation operation, Object left, Object right) {\n \t\t\t}\n \t\t\tthrow new UnsupportedOperationException(\n \t\t\t\t\"No overload for operation %s and operands [%s] and [%s]\"\n-\t\t\t\t\t.formatted(operation.name(), left, right));\n+\t\t\t\t\t.formatted(operation, left, right));\n \t\t}\n \t}\n ",
    "output": "Improve documentation for overloaded operators in SpEL"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java\n@@ -196,7 +196,7 @@ void setPropertyValueAutoGrowNestedMapWithinMap() {\n \t@Test @Disabled  // gh-32154\n \tvoid setPropertyValueAutoGrowNestedNestedMapWithinMap() {\n \t\twrapper.setPropertyValue(\"nestedNestedMap[A][B][C]\", new Bean());\n-\t\tassertThat(bean.getNestedNestedMap().get(\"A\").get(\"B\").get(\"C)\")).isInstanceOf(Bean.class);\n+\t\tassertThat(bean.getNestedNestedMap().get(\"A\").get(\"B\").get(\"C\")).isInstanceOf(Bean.class);\n \t}\n \n ",
    "output": "Fix assertion in BeanWrapperAutoGrowingTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n@@ -49,7 +49,7 @@ public static <T> T resolve(@Nullable Supplier<T> supplier) {\n \t */\n \t@Nullable\n \tpublic static Object resolve(@Nullable Object candidate) {\n-\t\treturn (candidate instanceof Supplier<?> supplier ? supplier.get() : null);\n+\t\treturn (candidate instanceof Supplier<?> supplier ? supplier.get() : candidate);\n \t}\n \n }",
    "output": "Fix logic in SupplierUtils"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -93,8 +93,8 @@ public List<Token> process() {\n \t\t\t\t\t\t\tpushCharToken(TokenKind.PLUS);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase '_': // the other way to start an identifier\n-\t\t\t\t\t\tlexIdentifier();\n+\t\t\t\t\tcase '_':\n+\t\t\t\t\t\tlexIdentifier();  // '_' is another way to start an identifier\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase '-':\n \t\t\t\t\t\tif (isTwoCharToken(TokenKind.DEC)) {\n@@ -206,7 +206,7 @@ else if (isTwoCharToken(TokenKind.SAFE_NAVI)) {\n \t\t\t\t\t\t\tpushPairToken(TokenKind.SELECT_LAST);\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse {\n-\t\t\t\t\t\t\tlexIdentifier();\n+\t\t\t\t\t\t\tlexIdentifier();  // '$' is another way to start an identifier\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase '>':",
    "output": "Upgrade documentation for supported letters in variable names in SpEL"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n@@ -137,13 +137,9 @@ public int compareTo(ParamsRequestCondition other, HttpServletRequest request) {\n \t}\n \n \tprivate long getValueMatchCount(Set<ParamExpression> expressions) {\n-\t\tlong count = 0;\n-\t\tfor (ParamExpression e : expressions) {\n-\t\t\tif (e.getValue() != null && !e.isNegated()) {\n-\t\t\t\tcount++;\n-\t\t\t}\n-\t\t}\n-\t\treturn count;\n+\t\treturn expressions.stream()\n+\t\t\t\t.filter(e -> e.getValue() != null && !e.isNegated())\n+\t\t\t\t.count();\n \t}\n \n ",
    "output": "Use count in ParamsRequestCondition#getValueMatchCount"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n@@ -375,7 +375,7 @@ private static class StubStringValueResolver implements StringValueResolver {\n \n \t\t@Override\n \t\tpublic String resolveStringValue(String str) {\n-\t\t\treturn (this.placeholders.containsKey(str) ? this.placeholders.get(str) : str);\n+\t\t\treturn (this.placeholders.getOrDefault(str, str));\n \t\t}\n \n \t}",
    "output": "Use 'Map.getOrDefault' rather than explicit check with fallback"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n@@ -261,7 +261,7 @@ public SafeWriter(Writer writer) {\n \n \t\tpublic SafeWriter append(String value) throws JspException {\n \t\t\ttry {\n-\t\t\t\tgetWriterToUse().write(String.valueOf(value));\n+\t\t\t\tgetWriterToUse().write(value);\n \t\t\t\treturn this;\n \t\t\t}\n \t\t\tcatch (IOException ex) {",
    "output": "Remove unnecessary conversion to 'String'"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -138,8 +138,7 @@ private void applyArguments(HttpRequestValues.Builder requestValues, Object[] ar\n \t\t\tint index = i;\n \t\t\tAssert.state(resolved, () ->\n \t\t\t\t\t\"Could not resolve parameter [\" + this.parameters[index].getParameterIndex() + \"] in \" +\n-\t\t\t\t\t\t\tthis.parameters[index].getExecutable().toGenericString() +\n-\t\t\t\t\t\t\t(StringUtils.hasText(\"No suitable resolver\") ? \": \" + \"No suitable resolver\" : \"\"));\n+\t\t\t\t\t\t\tthis.parameters[index].getExecutable().toGenericString() + \": No suitable resolver\");\n \t\t}\n \t}\n ",
    "output": "Remove tautological ternary statement"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -571,7 +571,7 @@ private DefaultTransactionStatus newTransactionStatus(\n \t/**\n \t * Initialize transaction synchronization as appropriate.\n \t */\n-\tprivate void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) {\n+\tprotected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) {\n \t\tif (status.isNewSynchronization()) {\n \t\t\tTransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());\n \t\t\tTransactionSynchronizationManager.setCurrentTransactionIsolationLevel(",
    "output": "Make prepareSynchronization overridable again"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,12 +50,12 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.5\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.7\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();\n-\t\t\tcheckstyleDependencies\n-\t\t\t\t.add(project.getDependencies().create(\"io.spring.javaformat:spring-javaformat-checkstyle:\" + version));\n+\t\t\tcheckstyleDependencies.add(\n+\t\t\t\t\tproject.getDependencies().create(\"io.spring.javaformat:spring-javaformat-checkstyle:\" + version));\n \t\t});\n \t}\n ",
    "output": "Upgrade to Checkstyle 10.12.7"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -162,7 +162,8 @@ public void decodeSplitChunks() {\n \t@SuppressWarnings(\"deprecation\")\n \tpublic void decodeSplitMessageSize() {\n \t\tthis.decoder.setMaxMessageSize(100009);\n-\t\tMsg bigMessage = Msg.newBuilder().setFoo(\"azertyuiop\".repeat(10000)).setBlah(secondMsg2).build();\n+\t\tMsg bigMessage = Msg.newBuilder().setFoo(\"azertyuiop\".repeat(10000))\n+\t\t\t\t.setBlah(secondMsg2).build();\n \n \t\tFlux<DataBuffer> input = Flux.just(bigMessage, bigMessage)\n \t\t\t\t.flatMap(msg -> Mono.defer(() -> {",
    "output": "Use String.repeatwhere feasible"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java b/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java\n--- a/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java\n@@ -121,6 +121,7 @@ public final void testHashCode() {\n \t\tassertThat(message2.hashCode()).isEqualTo(message1.hashCode());\n \t}\n \n+\t@Test\n \tpublic final void testEqualsObject() {\n \t\tSimpleMailMessage message1;\n \t\tSimpleMailMessage message2;",
    "output": "Add missing @Test"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java b/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java\n@@ -488,7 +488,7 @@ void processAheadOfTimeWhenHasCglibProxyWithArgumentsRegisterIntrospectionHintsO\n \t}\n \n \t@Nested\n-\tstatic class ActiveProfile {\n+\tclass ActiveProfile {\n \n \t\t@ParameterizedTest\n \t\t@MethodSource(\"activeProfilesParameters\")",
    "output": "Fix @Nested class not be executed"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -39,6 +39,7 @@\n import org.hibernate.dialect.OracleDialect;\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n+import org.hibernate.dialect.SQLServerDialect;\n import org.hibernate.dialect.SybaseDialect;\n import org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode;\n \n@@ -205,7 +206,7 @@ protected Class<?> determineDatabaseDialectClass(Database database) {\n \t\t\t\tcase MYSQL -> MySQLDialect.class;\n \t\t\t\tcase ORACLE -> OracleDialect.class;\n \t\t\t\tcase POSTGRESQL -> org.hibernate.dialect.PostgreSQLDialect.class;\n-\t\t\t\tcase SQL_SERVER -> SQLServer2012Dialect.class;\n+\t\t\t\tcase SQL_SERVER -> SQLServerDialect.class;\n \t\t\t\tcase SYBASE -> SybaseDialect.class;\n \t\t\t\tdefault -> null;\n \t\t\t};",
    "output": "Use proper SQLServer dialect for Hibernate 6+ This commit fixes the Hibernate dialect lookup for SQLServer as it was previously using a dialect that has been deprecated. In recent versions, the standard SQLServerDialect is the one we should be using"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n@@ -58,6 +58,7 @@\n  * @author Juergen Hoeller\n  * @author Stephane Nicoll\n  * @author He Bo\n+ * @author Sebastien Deleuze\n  * @since 3.1.2\n  */\n public abstract class AsyncExecutionAspectSupport implements BeanFactoryAware {\n@@ -292,7 +293,7 @@ else if (org.springframework.util.concurrent.ListenableFuture.class.isAssignable\n \t\telse if (Future.class.isAssignableFrom(returnType)) {\n \t\t\treturn executor.submit(task);\n \t\t}\n-\t\telse if (void.class == returnType) {\n+\t\telse if (void.class == returnType || \"kotlin.Unit\".equals(returnType.getName())) {\n \t\t\texecutor.submit(task);\n \t\t\treturn null;\n \t\t}",
    "output": "Add support for `@Async` Kotlin function returning `Unit?`"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -36,6 +36,7 @@\n import org.hibernate.dialect.MySQL57Dialect;\n import org.hibernate.dialect.MySQLDialect;\n import org.hibernate.dialect.Oracle12cDialect;\n+import org.hibernate.dialect.OracleDialect;\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n import org.hibernate.dialect.SybaseDialect;\n@@ -202,7 +203,7 @@ protected Class<?> determineDatabaseDialectClass(Database database) {\n \t\t\t\tcase HANA -> HANAColumnStoreDialect.class;\n \t\t\t\tcase HSQL -> HSQLDialect.class;\n \t\t\t\tcase MYSQL -> MySQLDialect.class;\n-\t\t\t\tcase ORACLE -> Oracle12cDialect.class;\n+\t\t\t\tcase ORACLE -> OracleDialect.class;\n \t\t\t\tcase POSTGRESQL -> org.hibernate.dialect.PostgreSQLDialect.class;\n \t\t\t\tcase SQL_SERVER -> SQLServer2012Dialect.class;\n \t\t\t\tcase SYBASE -> SybaseDialect.class;",
    "output": "Use proper Oracle dialect for Hibernate 6+ This commit fixes the Hibernate dialect lookup for Oracle as it was previously using a dialect that has been moved and deprecated to a separate project. In recent versions, the standard OracleDialect is the one we should be using"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -34,6 +34,7 @@\n import org.hibernate.dialect.HSQLDialect;\n import org.hibernate.dialect.Informix10Dialect;\n import org.hibernate.dialect.MySQL57Dialect;\n+import org.hibernate.dialect.MySQLDialect;\n import org.hibernate.dialect.Oracle12cDialect;\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n@@ -193,14 +194,14 @@ protected Class<?> determineDatabaseDialectClass(Database database) {\n \t\t\t\tdefault -> null;\n \t\t\t};\n \t\t}\n-\t\telse {  // Hibernate 6.2 aligned\n+\t\telse {  // Hibernate 6.2+ aligned\n \t\t\treturn switch (database) {\n \t\t\t\tcase DB2 -> DB2Dialect.class;\n \t\t\t\tcase DERBY -> org.hibernate.dialect.DerbyDialect.class;\n \t\t\t\tcase H2 -> H2Dialect.class;\n \t\t\t\tcase HANA -> HANAColumnStoreDialect.class;\n \t\t\t\tcase HSQL -> HSQLDialect.class;\n-\t\t\t\tcase MYSQL -> MySQL57Dialect.class;\n+\t\t\t\tcase MYSQL -> MySQLDialect.class;\n \t\t\t\tcase ORACLE -> Oracle12cDialect.class;\n \t\t\t\tcase POSTGRESQL -> org.hibernate.dialect.PostgreSQLDialect.class;\n \t\t\t\tcase SQL_SERVER -> SQLServer2012Dialect.class;",
    "output": "Use non deprecated MySQL dialect for Hibernate 6+ This commit fixes the Hibernate dialect lookup for MySQL as it was previously using a deprecated dialect that has been removed in the most recent Hibernate version"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java b/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java\n--- a/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java\n+++ b/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java\n@@ -43,7 +43,7 @@\n  * @author Juergen Hoeller\n  * @since 6.1\n  */\n-public class ReactiveCachingTests {\n+class ReactiveCachingTests {\n \n \t@ParameterizedTest\n \t@ValueSource(classes = {EarlyCacheHitDeterminationConfig.class,\n@@ -174,7 +174,7 @@ public CompletableFuture<?> retrieve(Object key) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void put(Object key, @Nullable Object value) {\n-\t\t\t\t\t\t\tassertThat(get(key) == null).as(\"Double put\");\n+\t\t\t\t\t\t\tassertThat(get(key)).as(\"Double put\").isNull();\n \t\t\t\t\t\t\tsuper.put(key, value);\n \t\t\t\t\t\t}\n \t\t\t\t\t};\n@@ -201,7 +201,7 @@ public CompletableFuture<?> retrieve(Object key) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void put(Object key, @Nullable Object value) {\n-\t\t\t\t\t\t\tassertThat(get(key) == null).as(\"Double put\");\n+\t\t\t\t\t\t\tassertThat(get(key)).as(\"Double put\").isNull();\n \t\t\t\t\t\t\tsuper.put(key, value);\n \t\t\t\t\t\t}\n \t\t\t\t\t};",
    "output": "Fix assertions in ReactiveCachingTests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -524,20 +524,7 @@ static class PropertyDescriptorComparator implements Comparator<PropertyDescript\n \n \t\t@Override\n \t\tpublic int compare(PropertyDescriptor desc1, PropertyDescriptor desc2) {\n-\t\t\tString left = desc1.getName();\n-\t\t\tString right = desc2.getName();\n-\t\t\tbyte[] leftBytes = left.getBytes();\n-\t\t\tbyte[] rightBytes = right.getBytes();\n-\t\t\tfor (int i = 0; i < left.length(); i++) {\n-\t\t\t\tif (right.length() == i) {\n-\t\t\t\t\treturn 1;\n-\t\t\t\t}\n-\t\t\t\tint result = leftBytes[i] - rightBytes[i];\n-\t\t\t\tif (result != 0) {\n-\t\t\t\t\treturn result;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn left.length() - right.length();\n+\t\t\treturn desc1.getName().compareTo(desc2.getName());\n \t\t}\n \t}\n ",
    "output": "Use standard String comparison in PropertyDescriptorComparator"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java b/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java\n@@ -31,8 +31,8 @@\n import org.springframework.web.testfixture.servlet.MockHttpServletRequest;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.BDDMockito.mock;\n+import static org.mockito.BDDMockito.when;\n \n /**\n  * Unit tests for {@link DefaultDataBinderFactory}.",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n@@ -18,7 +18,8 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n-import java.util.List;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.StringJoiner;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n@@ -402,7 +403,8 @@ public static boolean checkArguments(Class<?> beanType, MethodParameter[] parame\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tClass<?> type = parameter.getParameterType();\n-\t\t\t\t\t\tif (merged.stream().anyMatch(VALID_PREDICATE) && List.class.isAssignableFrom(type)) {\n+\t\t\t\t\t\tif (merged.stream().anyMatch(VALID_PREDICATE) &&\n+\t\t\t\t\t\t\t\t(Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type))) {\n \t\t\t\t\t\t\treturn true;\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Improve HandlerMethod check when method validation applies Method validation needs to be used for a container such as a List or Map, but until now we were only checking for a List container. Moreover, in we improved method validation to also cover any Collection. This change aligns with HandlerMethod check for when method validation applies with the underlying ability of method validation"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n@@ -118,8 +118,9 @@ public void onWebSocketFrame(Frame frame, Callback callback) {\n \t}\n \n \tprivate static ByteBuffer copyByteBuffer(ByteBuffer src) {\n-\t\tByteBuffer dest = ByteBuffer.allocate(src.capacity());\n-\t\tdest.put(0, src, 0, src.remaining());\n+\t\tByteBuffer dest = ByteBuffer.allocate(src.remaining());\n+\t\tdest.put(src);\n+\t\tdest.flip();\n \t\treturn dest;\n \t}\n ",
    "output": "Improve ByteBuffer copy method This commit improves JettyWebSocketHandlerAdapter::copyByteBuffer so that it allocates a buffer large enough for the remaining bytes contained in the source, instead of allocating one with the capacity of the source"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -294,19 +294,6 @@ private static void traceMatch(String prefix, Object desired, @Nullable Object a\n \t\t}\n \t}\n \n-\tprivate static Map<String, String> mergePathVariables(Map<String, String> oldVariables,\n-\t\t\tMap<String, String> newVariables) {\n-\n-\t\tif (!newVariables.isEmpty()) {\n-\t\t\tMap<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);\n-\t\t\tmergedVariables.putAll(newVariables);\n-\t\t\treturn mergedVariables;\n-\t\t}\n-\t\telse {\n-\t\t\treturn oldVariables;\n-\t\t}\n-\t}\n-\n \tprivate static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {\n \t\tif (oldPattern != null) {\n \t\t\treturn oldPattern.combine(newPattern);",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -159,6 +159,7 @@ public void putAll(Map<? extends String, ? extends List<String>> map) {\n \t\tmap.forEach(this::put);\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")  // on Tomcat 10.1.16+\n \t@Override\n \tpublic void clear() {\n \t\tthis.headers.clear();",
    "output": "Upgrade to Tomcat 10.1.16 and Jetty 12.0.4"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java b/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java\n@@ -38,8 +38,8 @@ static Object asFlow(Object publisher) {\n \n \t@Nullable\n \t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-\tstatic Object awaitSingleOrNull(Object value, Object continuation) {\n-\t\treturn MonoKt.awaitSingleOrNull(value instanceof Mono mono ? mono : Mono.just(value),\n+\tstatic Object awaitSingleOrNull(@Nullable Object value, Object continuation) {\n+\t\treturn MonoKt.awaitSingleOrNull(value instanceof Mono mono ? mono : Mono.justOrEmpty(value),\n \t\t\t\t(Continuation<Object>) continuation);\n \t}\n ",
    "output": "Fix a NPE in proxied suspending functions"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java\n@@ -455,11 +455,6 @@ public TestBean testBean() {\n \t}\n }\n \n-@Configuration\n-@ComponentScan\n-class ComponentScanWithNoPackagesConfig {\n-}\n-\n @Configuration\n @ComponentScan(basePackages = \"example.scannable\", nameGenerator = MyBeanNameGenerator.class)\n class ComponentScanWithBeanNameGenerator {",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -362,7 +362,7 @@ public static String toString(Collection<? extends MimeType> mimeTypes) {\n \t */\n \tpublic static <T extends MimeType> void sortBySpecificity(List<T> mimeTypes) {\n \t\tAssert.notNull(mimeTypes, \"'mimeTypes' must not be null\");\n-\t\tif (mimeTypes.size() >= 50) {\n+\t\tif (mimeTypes.size() > 50) {\n \t\t\tthrow new InvalidMimeTypeException(mimeTypes.toString(), \"Too many elements\");\n \t\t}\n ",
    "output": "Fix condition for \"Too many elements\" in MimeTypeUtils.sortBySpecificity"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.4\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.5\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Reactor 2023.0.0 Includes Protobuf 3.25.0, Artemis 2.31.2, Checkstyle 10.12.5"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java\n@@ -201,7 +201,7 @@ public static <T> MessageBuilder<T> withPayload(T payload) {\n \t * @since 4.1\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tpublic static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders) {\n+\tpublic static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {\n \t\tAssert.notNull(payload, \"Payload must not be null\");\n \t\tAssert.notNull(messageHeaders, \"MessageHeaders must not be null\");\n \t\tif (payload instanceof Throwable throwable) {",
    "output": "Fix wrong nullability requirement"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java\n@@ -332,7 +332,8 @@ private static CachedResult getAttribute(HttpServletRequest request) {\n \t * for a given request identified by dispatcher type and requestURI.\n \t * @since 6.0.14\n \t */\n-\tpublic final static class CachedResult {\n+\t@SuppressWarnings(\"serial\")\n+\tpublic static final class CachedResult {\n \n \t\tprivate final DispatcherType dispatcherType;\n ",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -238,11 +238,18 @@ protected void processConfigurationClass(ConfigurationClass configClass, Predica\n \t\t}\n \n \t\t// Recursively process the configuration class and its superclass hierarchy.\n-\t\tSourceClass sourceClass = asSourceClass(configClass, filter);\n-\t\tdo {\n-\t\t\tsourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);\n+\t\tSourceClass sourceClass = null;\n+\t\ttry {\n+\t\t\tsourceClass = asSourceClass(configClass, filter);\n+\t\t\tdo {\n+\t\t\t\tsourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);\n+\t\t\t}\n+\t\t\twhile (sourceClass != null);\n+\t\t}\n+\t\tcatch (IOException ex) {\n+\t\t\tthrow new BeanDefinitionStoreException(\n+\t\t\t\t\t\"I/O failure while processing configuration class [\" + sourceClass + \"]\", ex);\n \t\t}\n-\t\twhile (sourceClass != null);\n \n \t\tthis.configurationClasses.put(configClass, configClass);\n \t}",
    "output": "Improve exception message when configuration class parsing fails This commit improves the exception that is thrown when a particular source class cannot be parsed. Previously, the message would include the root configuration class, which may not be the class that actually failed as parsing can trigger component scan. There's now a dedicated catch that generates an exception message that includes the class that is currently parsed"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -1198,23 +1198,6 @@ void exchangeResponseCookies(ClientHttpConnector connector) {\n \t\texpectRequestCount(1);\n \t}\n \n-\t@ParameterizedWebClientTest\n-\tvoid invalidDomain(ClientHttpConnector connector) {\n-\t\tstartServer(connector);\n-\n-\t\tString url = \"http://example.invalid\";\n-\t\tMono<Void> result = this.webClient.get().uri(url).retrieve().bodyToMono(Void.class);\n-\n-\t\tStepVerifier.create(result)\n-\t\t\t\t.expectErrorSatisfies(throwable -> {\n-\t\t\t\t\tassertThat(throwable).isInstanceOf(WebClientRequestException.class);\n-\t\t\t\t\tWebClientRequestException ex = (WebClientRequestException) throwable;\n-\t\t\t\t\tassertThat(ex.getMethod()).isEqualTo(HttpMethod.GET);\n-\t\t\t\t\tassertThat(ex.getUri()).isEqualTo(URI.create(url));\n-\t\t\t\t})\n-\t\t\t\t.verify();\n-\t}\n-\n \t@ParameterizedWebClientTest\n \tvoid malformedResponseChunksOnBodilessEntity(ClientHttpConnector connector) {\n \t\tMono<?> result = doMalformedChunkedResponseTest(connector, ResponseSpec::toBodilessEntity);",
    "output": "Remove invalid domain integration tests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java\n@@ -132,7 +132,7 @@ public void writeTo(BufferedSink sink) throws IOException {\n \n \t\t@Override\n \t\tpublic boolean isOneShot() {\n-\t\t\treturn true;\n+\t\t\treturn !this.body.repeatable();\n \t\t}\n \t}\n ",
    "output": "Use StreamingHttpOutputMessage.Body.repeatable in OkHttp3ClientHttpRequest"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,8 +16,8 @@\n \n package org.springframework.http.server.reactive;\n \n-import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n@@ -69,7 +69,7 @@ private enum State {NEW, COMMITTING, COMMIT_ACTION_FAILED, COMMITTED}\n \n \tprivate final AtomicReference<State> state = new AtomicReference<>(State.NEW);\n \n-\tprivate final List<Supplier<? extends Mono<Void>>> commitActions = new ArrayList<>(4);\n+\tprivate final List<Supplier<? extends Mono<Void>>> commitActions = new CopyOnWriteArrayList<>();\n \n \t@Nullable\n \tprivate HttpHeaders readOnlyHeaders;",
    "output": "Use CopyOnWriteArrayList for beforeCommit actions"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n--- a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n+++ b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n@@ -216,6 +216,18 @@ public void setProperty(String name, @Nullable Object value) {\n \t\tthis.properties.put(name, value);\n \t}\n \n+\t/**\n+\t * Setter for the {@link #getProperties() properties map}.\n+\t * <p>By default, this is not set.\n+\t * <p>When Jackson JSON is present on the classpath, any properties set here\n+\t * are rendered as top level key-value pairs in the output JSON. Otherwise,\n+\t * they are rendered as a {@code \"properties\"} sub-map.\n+\t * @param properties the properties map\n+\t */\n+\tpublic void setProperties(@Nullable Map<String, Object> properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n \t/**\n \t * Return a generic map of properties that are not known ahead of time,\n \t * possibly {@code null} if no properties have been added. To add a property,",
    "output": "Add a properties setter to ProblemDetail Mainly to allow Kotlin idiomatic properties assignment"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n@@ -258,13 +258,15 @@ private MultiValueMap<ClassName, Class<?>> processAheadOfTime(\n \t\t\t\tif (numDisabled != testClasses.size()) {\n \t\t\t\t\tif (this.failOnError) {\n \t\t\t\t\t\tthrow new TestContextAotException(\"\"\"\n-\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated\n-\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \"\"\" + classNames(testClasses));\n+\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated \\\n+\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \\\n+\t\t\t\t\t\t\t\t\"\"\" + classNames(testClasses));\n \t\t\t\t\t}\n \t\t\t\t\telse if (logger.isWarnEnabled()) {\n \t\t\t\t\t\tlogger.warn(\"\"\"\n-\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated\n-\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \"\"\" + classNames(testClasses));\n+\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated \\\n+\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \\\n+\t\t\t\t\t\t\t\t\"\"\" + classNames(testClasses));\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (logger.isInfoEnabled()) {",
    "output": "Fix formatting for @⁠DisabledInAotMode error messages"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java\n@@ -507,7 +507,7 @@ static Search search(SearchStrategy searchStrategy) {\n \t *\n \t * @since 6.0\n \t */\n-\tstatic final class Search {\n+\tfinal class Search {\n \n \t\tstatic final Predicate<Class<?>> always = clazz -> true;\n ",
    "output": "Remove redundant static declaration on Search class"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.3\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.4\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Reactor 2023.0.0-RC1 Includes Jetty 12.0.2 and Checkstyle 10.12.4"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -29,7 +29,6 @@\n import reactor.netty.resources.ConnectionProvider;\n import reactor.netty.resources.LoopResources;\n \n-import org.springframework.context.Lifecycle;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.http.HttpMethod;\n import org.springframework.lang.Nullable;",
    "output": "Fix unused import error in ReactorClientHttpConnector"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n@@ -93,7 +93,7 @@ public ExpressionState(EvaluationContext context, TypedValue rootObject) {\n \n \tpublic ExpressionState(EvaluationContext context, TypedValue rootObject, SpelParserConfiguration configuration) {\n \t\tAssert.notNull(context, \"EvaluationContext must not be null\");\n-\t\tAssert.notNull(context, \"'rootObject' must not be null\");\n+\t\tAssert.notNull(rootObject, \"'rootObject' must not be null\");\n \t\tAssert.notNull(configuration, \"SpelParserConfiguration must not be null\");\n \t\tthis.relatedContext = context;\n \t\tthis.rootObject = rootObject;",
    "output": "Fix copy-n-paste error"
  },
  {
    "input": "diff --git a/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java b/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java\n--- a/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java\n+++ b/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java\n@@ -109,7 +109,10 @@ void setSessionAcknowledgeMode() {\n \n \t\taccessor.setSessionAcknowledgeMode(Session.SESSION_TRANSACTED);\n \t\tassertThat(accessor.getSessionAcknowledgeMode()).isEqualTo(Session.SESSION_TRANSACTED);\n+\t}\n \n+\t@Test\n+\tvoid setCustomSessionAcknowledgeMode() {\n \t\taccessor.setSessionAcknowledgeMode(999);\n \t\tassertThat(accessor.getSessionAcknowledgeMode()).isEqualTo(999);\n \t}",
    "output": "Fix regression in JmsAccessor#setSessionAcknowledgeMode"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java b/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java\n--- a/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,8 +36,8 @@ public class UnknownContentTypeException extends RestClientException {\n \n \tprivate static final long serialVersionUID = 2759516676367274084L;\n \n-\t@SuppressWarnings(\"serial\")\n-\tprivate final Type targetType;\n+\n+\tprivate transient final Type targetType;\n \n \tprivate final MediaType contentType;\n ",
    "output": "Make targetType in UknownContentTypeException transient"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -108,7 +108,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\tHttpClient.RequestSender requestSender = this.httpClient\n \t\t\t\t.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name()));\n \n-\t\trequestSender = (uri.isAbsolute() ? requestSender.uri(uri) : requestSender.uri(uri.toString()));\n+\t\trequestSender = setUri(requestSender, uri);\n \n \t\treturn requestSender\n \t\t\t\t.send((request, outbound) -> requestCallback.apply(adaptRequest(method, uri, request, outbound)))\n@@ -125,6 +125,18 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\t\t});\n \t}\n \n+\tprivate static HttpClient.RequestSender setUri(HttpClient.RequestSender requestSender, URI uri) {\n+\t\tif (uri.isAbsolute()) {\n+\t\t\ttry {\n+\t\t\t\treturn requestSender.uri(uri);\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Fall back on passing it in as a String\n+\t\t\t}\n+\t\t}\n+\t\treturn requestSender.uri(uri.toString());\n+\t}\n+\n \tprivate ReactorClientHttpRequest adaptRequest(HttpMethod method, URI uri, HttpClientRequest request,\n \t\t\tNettyOutbound nettyOutbound) {\n ",
    "output": "Use URI String as fallback in ReactorClientHttpConnector"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n@@ -61,7 +61,7 @@ class DefaultFetchSpec<T> implements FetchSpec<T> {\n \tpublic Mono<T> one() {\n \t\treturn all().singleOrEmpty()\n \t\t\t.onErrorMap(IndexOutOfBoundsException.class, ex -> {\n-\t\t\t\tString message = String.format(\"Query [%s] returned non unique result.\", resultFunction.getSql());\n+\t\t\t\tString message = String.format(\"Query [%s] returned non unique result.\", this.resultFunction.getSql());\n \t\t\t\treturn new IncorrectResultSizeDataAccessException(message, 1);\n \t\t\t});\n \t}",
    "output": "Use `singleOrEmpty` instead of `buffer`"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n@@ -59,18 +59,11 @@ class DefaultFetchSpec<T> implements FetchSpec<T> {\n \n \t@Override\n \tpublic Mono<T> one() {\n-\t\treturn all().buffer(2)\n-\t\t\t\t.flatMap(list -> {\n-\t\t\t\t\tif (list.isEmpty()) {\n-\t\t\t\t\t\treturn Mono.empty();\n-\t\t\t\t\t}\n-\t\t\t\t\tif (list.size() > 1) {\n-\t\t\t\t\t\treturn Mono.error(new IncorrectResultSizeDataAccessException(\n-\t\t\t\t\t\t\t\tString.format(\"Query [%s] returned non unique result.\", this.resultFunction.getSql()),\n-\t\t\t\t\t\t\t\t1));\n-\t\t\t\t\t}\n-\t\t\t\t\treturn Mono.just(list.get(0));\n-\t\t\t\t}).next();\n+\t\treturn all().singleOrEmpty()\n+\t\t\t.onErrorMap(IndexOutOfBoundsException.class, ex -> {\n+\t\t\t\tString message = String.format(\"Query [%s] returned non unique result.\", resultFunction.getSql());\n+\t\t\t\treturn new IncorrectResultSizeDataAccessException(message, 1);\n+\t\t\t});\n \t}\n \n \t@Override",
    "output": "Use `singleOrEmpty` instead of `buffer` This commit avoids fetching and buffering results in temporary `List` buffers"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1244,7 +1244,7 @@ else if (hasMultipartException(request)) {\n \t/**\n \t * Check \"jakarta.servlet.error.exception\" attribute for a multipart exception.\n \t */\n-\tprivate boolean hasMultipartException(HttpServletRequest request) {\n+\tprivate static boolean hasMultipartException(HttpServletRequest request) {\n \t\tThrowable error = (Throwable) request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE);\n \t\twhile (error != null) {\n \t\t\tif (error instanceof MultipartException) {\n@@ -1478,7 +1478,7 @@ protected View resolveViewName(String viewName, @Nullable Map<String, Object> mo\n \t\treturn null;\n \t}\n \n-\tprivate void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response,\n+\tprivate static void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response,\n \t\t\t@Nullable HandlerExecutionChain mappedHandler, Exception ex) throws Exception {\n \n \t\tif (mappedHandler != null) {",
    "output": "Make utility methods consistently static in DispatcherServlet"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1018,7 +1018,7 @@ else if (isEnableLoggingRequestDetails()) {\n \n \t\t\tif (traceOn) {\n \t\t\t\tList<String> values = Collections.list(request.getHeaderNames());\n-\t\t\t\tString headers = values.size() > 0 ? \"masked\" : \"\";\n+\t\t\t\tString headers = values.isEmpty() ? \"\" : \"masked\";\n \t\t\t\tif (isEnableLoggingRequestDetails()) {\n \t\t\t\t\theaders = values.stream().map(name -> name + \":\" + Collections.list(request.getHeaders(name)))\n \t\t\t\t\t\t\t.collect(Collectors.joining(\", \"));",
    "output": "Use List#isEmptyin DispatcherServlet This commit uses !isEmptyinstead of size> 0"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -49,7 +49,6 @@\n import org.springframework.web.method.HandlerMethod;\n import org.springframework.web.reactive.BindingContext;\n import org.springframework.web.reactive.HandlerResult;\n-import org.springframework.web.server.CoWebFilter;\n import org.springframework.web.server.ServerWebExchange;\n \n /**\n@@ -292,13 +291,16 @@ private boolean isResponseHandled(Object[] args, ServerWebExchange exchange) {\n \t */\n \tprivate static class KotlinDelegate {\n \n+\t\t// Copy of CoWebFilter.COROUTINE_CONTEXT_ATTRIBUTE value to avoid compilation errors in Eclipse\n+\t\tprivate static final String COROUTINE_CONTEXT_ATTRIBUTE = \"org.springframework.web.server.CoWebFilter.context\";\n+\n \t\t@Nullable\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic static Object invokeFunction(Method method, Object target, Object[] args, boolean isSuspendingFunction,\n \t\t\t\tServerWebExchange exchange) {\n \n \t\t\tif (isSuspendingFunction) {\n-\t\t\t\tObject coroutineContext = exchange.getAttribute(CoWebFilter.COROUTINE_CONTEXT_ATTRIBUTE);\n+\t\t\t\tObject coroutineContext = exchange.getAttribute(COROUTINE_CONTEXT_ATTRIBUTE);\n \t\t\t\tif (coroutineContext == null) {\n \t\t\t\t\treturn CoroutinesUtils.invokeSuspendingFunction(method, target, args);\n \t\t\t\t}",
    "output": "Remove Java code dependency on CoWebFilter To avoid compilation errors in Eclipse which does not support Java code dependency on Kotlin code"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java\n@@ -192,15 +192,15 @@ private String getExplicitBeanName(AnnotationMetadata metadata) {\n \t * @return whether the annotation qualifies as a stereotype with component name\n \t */\n \tprotected boolean isStereotypeWithNameValue(String annotationType,\n-\t\t\tSet<String> metaAnnotationTypes, @Nullable Map<String, Object> attributes) {\n+\t\t\tSet<String> metaAnnotationTypes, Map<String, Object> attributes) {\n \n \t\tboolean isStereotype = metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME) ||\n \t\t\t\tannotationType.equals(\"jakarta.annotation.ManagedBean\") ||\n \t\t\t\tannotationType.equals(\"javax.annotation.ManagedBean\") ||\n \t\t\t\tannotationType.equals(\"jakarta.inject.Named\") ||\n \t\t\t\tannotationType.equals(\"javax.inject.Named\");\n \n-\t\treturn (isStereotype && attributes != null && attributes.containsKey(\"value\"));\n+\t\treturn (isStereotype && attributes.containsKey(\"value\"));\n \t}\n \n \t/**",
    "output": "Remove @Nullable on attributes parameter in isStereotypeWithNameValue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -491,7 +491,7 @@ private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {\n \t\tList<Method> result = null;\n \t\tfor (Class<?> ifc : clazz.getInterfaces()) {\n \t\t\tfor (Method ifcMethod : ifc.getMethods()) {\n-\t\t\t\tif (!Modifier.isAbstract(ifcMethod.getModifiers())) {\n+\t\t\t\tif (ifcMethod.isDefault()) {\n \t\t\t\t\tif (result == null) {\n \t\t\t\t\t\tresult = new ArrayList<>();\n \t\t\t\t\t}",
    "output": "Use Method#isDefault to find default methods in interfaces"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -126,7 +126,7 @@ private static class GetterPointcut extends StaticMethodMatcherPointcut implemen\n \t\t@Override\n \t\tpublic boolean matches(Method method, Class<?> targetClass) {\n \t\t\treturn (method.getName().startsWith(\"get\") &&\n-\t\t\t\t\tmethod.getParameterCount() == 0 && \n+\t\t\t\t\tmethod.getParameterCount() == 0 &&\n \t\t\t\t\tmethod.getReturnType() != Void.TYPE);\n \t\t}\n ",
    "output": "Add return type check on GetterPointcut"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n@@ -126,7 +126,8 @@ private static class GetterPointcut extends StaticMethodMatcherPointcut implemen\n \t\t@Override\n \t\tpublic boolean matches(Method method, Class<?> targetClass) {\n \t\t\treturn (method.getName().startsWith(\"get\") &&\n-\t\t\t\t\tmethod.getParameterCount() == 0);\n+\t\t\t\t\tmethod.getParameterCount() == 0 && \n+\t\t\t\t\tmethod.getReturnType() != Void.TYPE);\n \t\t}\n \n \t\tprivate Object readResolve() {",
    "output": "Add return type check on GetterPointcut"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java\n@@ -258,7 +258,7 @@ public String schemaNameToUse(@Nullable String schemaName) {\n \t\treturn identifierNameToUse(schemaName);\n \t}\n \n-\tprivate String identifierNameToUse(String identifierName) {\n+\tprivate String identifierNameToUse(@Nullable String identifierName) {\n \t\tif (identifierName == null) {\n \t\t\treturn null;\n \t\t}",
    "output": "Add missing @Nullable declaration"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n@@ -372,6 +372,7 @@ private static class KotlinDelegate {\n \n \t\tpublic static Publisher<?> invokeSuspendingFunction(Method method, Object target, Object... args) {\n \t\t\tContinuation<?> continuation = (Continuation<?>) args[args.length -1];\n+\t\t\tAssert.state(continuation != null, \"No Continuation available\");\n \t\t\tCoroutineContext context = continuation.getContext().minusKey(Job.Key);\n \t\t\treturn CoroutinesUtils.invokeSuspendingFunction(context, method, target, args);\n \t\t}",
    "output": "Add an assertion to AopUtils.KotlinDelegate#invokeSuspendingFunction"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.3\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.12.3"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n@@ -86,7 +86,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n \n /**\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java\n@@ -44,7 +44,6 @@\n \n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.http.MediaType;\n-import org.springframework.http.converter.HttpMessageConversionException;\n import org.springframework.http.converter.HttpMessageNotReadableException;\n import org.springframework.lang.Nullable;\n import org.springframework.web.testfixture.http.MockHttpInputMessage;",
    "output": "Fix formatting errors"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,7 +58,7 @@ final class AnnotationTypeMapping {\n \t/**\n \t * Set used to track which convention-based annotation attribute overrides\n \t * have already been checked. Each key is the combination of the fully\n-\t * qualified class names of a composed annotation and a meta-annotation\n+\t * qualified class name of a composed annotation and a meta-annotation\n \t * that it is either present or meta-present on the composed annotation,\n \t * separated by a dash.\n \t * @since 6.0\n@@ -319,7 +319,7 @@ private void addConventionMappings() {\n \t\t\t\tlogger.isWarnEnabled()) {\n \t\t\tlogger.warn(\"\"\"\n \t\t\t\t\tSupport for convention-based annotation attribute overrides is deprecated \\\n-\t\t\t\t\tand will be removed in Spring Framework 6.1. Please annotate the following \\\n+\t\t\t\t\tand will be removed in Spring Framework 6.2. Please annotate the following \\\n \t\t\t\t\tattributes in @%s with appropriate @AliasFor declarations: %s\"\"\"\n \t\t\t\t\t\t.formatted(rootAnnotationTypeName, conventionMappedAttributes));\n \t\t}",
    "output": "Upgrade warning for use of convention-based annotation attribute overrides"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java\n@@ -23,7 +23,6 @@\n \n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n-import org.springframework.util.StringUtils;\n \n /**\n  * A simple key as returned from the {@link SimpleKeyGenerator}.\n@@ -73,7 +72,7 @@ public final int hashCode() {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn getClass().getSimpleName() + \" [\" + StringUtils.arrayToCommaDelimitedString(this.params) + \"]\";\n+\t\treturn getClass().getSimpleName() + \" \" + Arrays.deepToString(this.params);\n \t}\n \n \tprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {",
    "output": "Use Arrays.deepToString for toString in SimpleKey"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java b/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java\n@@ -89,7 +89,7 @@ protected Mono<Void> doCommit(TransactionSynchronizationManager synchronizationM\n \t\treturn Mono.fromRunnable(() -> {\n \t\t\tthis.commit = true;\n \t\t\tif (this.forceFailOnCommit) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Forced failure on commit\");\n+\t\t\t\tthrow new IllegalStateException(\"Forced failure on commit\");\n \t\t\t}\n \t\t});\n \t}",
    "output": "Use IllegalStateException in ReactiveTestTransactionManager.doCommit"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -31,6 +31,7 @@\n \n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.Base64Utils;\n import org.springframework.util.ResourceUtils;\n import org.springframework.util.StringUtils;\n \n@@ -41,6 +42,7 @@\n  *\n  * @author Juergen Hoeller\n  * @author Sam Brannen\n+ * @author Denis Kostin\n  * @since 28.12.2003\n  * @see java.net.URL\n  */\n@@ -225,6 +227,11 @@ private String getCleanedUrl() {\n \tpublic InputStream getInputStream() throws IOException {\n \t\tURLConnection con = this.url.openConnection();\n \t\tcustomizeConnection(con);\n+\n+\t\tif (this.url.getUserInfo() != null) {\n+\t\t\tString basicAuth = \"Basic \" + Base64Utils.encodeToString(url.getUserInfo().getBytes());\n+\t\t\tcon.setRequestProperty(\"Authorization\", basicAuth);\n+\t\t}\n \t\ttry {\n \t\t\treturn con.getInputStream();\n \t\t}",
    "output": "Add Basic Authorization for UrlResource"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java\n@@ -62,7 +62,9 @@ public void setValues(PreparedStatement ps) throws SQLException {\n \t * @param argValue the value to set\n \t * @throws SQLException if thrown by PreparedStatement methods\n \t */\n-\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException {\n+\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, @Nullable Object argValue)\n+\t\t\tthrows SQLException {\n+\n \t\tif (argValue instanceof SqlParameterValue paramValue) {\n \t\t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue());\n \t\t}\n\ndiff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java\n@@ -94,7 +94,7 @@ public void setValues(PreparedStatement ps) throws SQLException {\n \t * @param argValue the argument value\n \t * @throws SQLException if thrown by PreparedStatement methods\n \t */\n-\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)\n+\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, @Nullable Object argValue)\n \t\t\tthrows SQLException {\n \n \t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue);",
    "output": "Add @Nullable in doSetValuein Argument[Type]PreparedStatementSetter This commit adds @Nullable to the argValue parameters in the doSetValuemethods in ArgumentPreparedStatementSetter and ArgumentTypePreparedStatementSetter"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n@@ -39,6 +39,8 @@ class EntityManagerRuntimeHints implements RuntimeHintsRegistrar {\n \n \tprivate static final String QUERY_SQM_IMPL_CLASS_NAME = \"org.hibernate.query.sqm.internal.QuerySqmImpl\";\n \n+\tprivate static final String NATIVE_QUERY_IMPL_CLASS_NAME = \"org.hibernate.query.sql.internal.NativeQueryImpl\";\n+\n \t@Override\n \tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\tif (ClassUtils.isPresent(HIBERNATE_SESSION_FACTORY_CLASS_NAME, classLoader)) {\n@@ -61,5 +63,11 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\t}\n \t\tcatch (ClassNotFoundException ignored) {\n \t\t}\n+\t\ttry {\n+\t\t\tClass<?> clazz = ClassUtils.forName(NATIVE_QUERY_IMPL_CLASS_NAME, classLoader);\n+\t\t\thints.proxies().registerJdkProxy(ClassUtils.getAllInterfacesForClass(clazz, classLoader));\n+\t\t}\n+\t\tcatch (ClassNotFoundException ignored) {\n+\t\t}\n \t}\n }",
    "output": "Add missing proxy hints for Hibernate native query This commit contributes proxy hints needed by SharedEntityManagerCreator for org.hibernate.query.sql.internal.NativeQueryImpl interfaces. A related smoke test has been contributed via spring-projects/spring-aot-smoke-tests"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n@@ -37,6 +37,8 @@ class EntityManagerRuntimeHints implements RuntimeHintsRegistrar {\n \n \tprivate static final String ENTITY_MANAGER_FACTORY_CLASS_NAME = \"jakarta.persistence.EntityManagerFactory\";\n \n+\tprivate static final String QUERY_SQM_IMPL_CLASS_NAME = \"org.hibernate.query.sqm.internal.QuerySqmImpl\";\n+\n \t@Override\n \tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\tif (ClassUtils.isPresent(HIBERNATE_SESSION_FACTORY_CLASS_NAME, classLoader)) {\n@@ -53,5 +55,11 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\t\t\t\t\tCollections.emptyList(), ExecutableMode.INVOKE);\n \t\t\t});\n \t\t}\n+\t\ttry {\n+\t\t\tClass<?> clazz = ClassUtils.forName(QUERY_SQM_IMPL_CLASS_NAME, classLoader);\n+\t\t\thints.proxies().registerJdkProxy(ClassUtils.getAllInterfacesForClass(clazz, classLoader));\n+\t\t}\n+\t\tcatch (ClassNotFoundException ignored) {\n+\t\t}\n \t}\n }",
    "output": "Add missing Hibernate 6.2 proxy hints This commit contributes proxy hints needed by SharedEntityManagerCreator for org.hibernate.query.sqm.internal.QuerySqmImpl interfaces. Until Hibernate 6.1, those hints were erroneously provided at GraalVM reachability metadata level. As of Hibernate 6.2, they are not, hence the need to contribute them at Spring Framework level. A related smoke test has been contributed via spring-projects/spring-aot-smoke-tests"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java\n@@ -48,10 +48,10 @@\n public class TransactionalApplicationListenerMethodAdapter extends ApplicationListenerMethodAdapter\n \t\timplements TransactionalApplicationListener<ApplicationEvent> {\n \n-\tprivate final TransactionalEventListener annotation;\n-\n \tprivate final TransactionPhase transactionPhase;\n \n+\tprivate final boolean fallbackExecution;\n+\n \tprivate final List<SynchronizationCallback> callbacks = new CopyOnWriteArrayList<>();\n \n \n@@ -68,8 +68,8 @@ public TransactionalApplicationListenerMethodAdapter(String beanName, Class<?> t\n \t\tif (eventAnn == null) {\n \t\t\tthrow new IllegalStateException(\"No TransactionalEventListener annotation found on method: \" + method);\n \t\t}\n-\t\tthis.annotation = eventAnn;\n \t\tthis.transactionPhase = eventAnn.phase();\n+\t\tthis.fallbackExecution = eventAnn.fallbackExecution();\n \t}\n \n \n@@ -92,8 +92,8 @@ public void onApplicationEvent(ApplicationEvent event) {\n \t\t\tTransactionSynchronizationManager.registerSynchronization(\n \t\t\t\t\tnew TransactionalApplicationListenerSynchronization<>(event, this, this.callbacks));\n \t\t}\n-\t\telse if (this.annotation.fallbackExecution()) {\n-\t\t\tif (this.annotation.phase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {\n+\t\telse if (this.fallbackExecution) {\n+\t\t\tif (getTransactionPhase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {\n \t\t\t\tlogger.warn(\"Processing \" + event + \" as a fallback execution on AFTER_ROLLBACK phase\");\n \t\t\t}\n \t\t\tprocessEvent(event);",
    "output": "Use extracted attributes instead of annotation access"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n@@ -245,8 +245,10 @@ public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment envir\n \t * descriptors and registering property sources\n \t * @since 6.1\n \t * @see TestPropertySource#locations\n+\t * @see TestPropertySource#encoding\n \t * @see TestPropertySource#factory\n \t * @see PropertySourceFactory\n+\t * @see #addPropertySourcesToEnvironment(ConfigurableEnvironment, ResourceLoader, List)\n \t */\n \tpublic static void addPropertySourcesToEnvironment(ConfigurableApplicationContext context,\n \t\t\tList<PropertySourceDescriptor> descriptors) {\n@@ -276,10 +278,11 @@ public static void addPropertySourcesToEnvironment(ConfigurableApplicationContex\n \t * descriptors and registering property sources\n \t * @since 6.1\n \t * @see TestPropertySource#locations\n+\t * @see TestPropertySource#encoding\n \t * @see TestPropertySource#factory\n \t * @see PropertySourceFactory\n \t */\n-\tprivate static void addPropertySourcesToEnvironment(ConfigurableEnvironment environment,\n+\tpublic static void addPropertySourcesToEnvironment(ConfigurableEnvironment environment,\n \t\t\tResourceLoader resourceLoader, List<PropertySourceDescriptor> descriptors) {\n \n \t\tAssert.notNull(environment, \"'environment' must not be null\");",
    "output": "Make addPropertySourcesToEnvironmentpublic This commit makes the recently introduced addPropertySourcesToEnvironment(ConfigurableEnvironment, ResourceLoader, List<PropertySourceDescriptor>) method in TestPropertySourceUtils public so that it can be used by third parties (for example, Spring Boot)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java b/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n@@ -115,8 +115,8 @@ public boolean requiresDestruction(Object bean) {\n \t@Override\n \tpublic boolean equals(@Nullable Object other) {\n \t\treturn (this == other ||\n-\t\t\t\t(other instanceof ApplicationListenerDetector applicationListenerDectector &&\n-\t\t\t\tthis.applicationContext == applicationListenerDectector.applicationContext));\n+\t\t\t\t(other instanceof ApplicationListenerDetector applicationListenerDetector &&\n+\t\t\t\tthis.applicationContext == applicationListenerDetector.applicationContext));\n \t}\n \n \t@Override",
    "output": "Fix misspelling of applicationListenerDectector variable"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,7 +21,6 @@\n import org.springframework.aot.hint.RuntimeHintsRegistrar;\n import org.springframework.aot.hint.TypeHint;\n import org.springframework.aot.hint.TypeReference;\n-import org.springframework.transaction.TransactionDefinition;\n \n /**\n  * {@link RuntimeHintsRegistrar} implementation that registers runtime hints for\n@@ -35,8 +34,7 @@ class TransactionRuntimeHints implements RuntimeHintsRegistrar {\n \n \t@Override\n \tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n-\t\thints.reflection().registerTypes(TypeReference.listOf(\n-\t\t\t\t\tIsolation.class, Propagation.class, TransactionDefinition.class),\n+\t\thints.reflection().registerTypes(TypeReference.listOf(Isolation.class, Propagation.class),\n \t\t\t\tTypeHint.builtWith(MemberCategory.DECLARED_FIELDS));\n \t}\n ",
    "output": "Remove native image hints for TransactionDefinition constants"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java b/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n--- a/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n+++ b/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n@@ -132,6 +132,7 @@ public Object getFieldValue(String field) {\n \n \t\tPropertyDescriptor pd = BeanUtils.getPropertyDescriptor(this.target.getClass(), field);\n \t\tif (pd != null && pd.getReadMethod() != null) {\n+\t\t\tReflectionUtils.makeAccessible(pd.getReadMethod());\n \t\t\treturn ReflectionUtils.invokeMethod(pd.getReadMethod(), this.target);\n \t\t}\n ",
    "output": "Make bean property method accessible as well (for non-public types)"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -1048,7 +1048,7 @@ private ModelAndView getModelAndView(ModelAndViewContainer mavContainer,\n \t@SuppressWarnings(\"serial\")\n \tprivate class MvcSimpleAsyncTaskExecutor extends SimpleAsyncTaskExecutor {\n \n-\t\tprivate static Boolean taskExecutorWarning = true;\n+\t\tprivate static boolean taskExecutorWarning = true;\n \n \t\tpublic MvcSimpleAsyncTaskExecutor() {\n \t\t\tsuper(\"MvcAsync\");",
    "output": "Change MvcSimpleAsyncTaskExecutor.taskExecutorWarning to primitive boolean"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n--- a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n+++ b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,7 +78,7 @@ public DefaultGenerationContext(ClassNameGenerator classNameGenerator, Generated\n \t * @param generatedFiles the generated files\n \t * @param runtimeHints the runtime hints\n \t */\n-\tDefaultGenerationContext(GeneratedClasses generatedClasses,\n+\tprotected DefaultGenerationContext(GeneratedClasses generatedClasses,\n \t\t\tGeneratedFiles generatedFiles, RuntimeHints runtimeHints) {\n \n \t\tAssert.notNull(generatedClasses, \"'generatedClasses' must not be null\");",
    "output": "Make DefaultGenerationContext(<classes>,<files>,<hints>) constructor protected"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n@@ -662,4 +662,15 @@ protected void sendServerError(Exception ex, HttpServletRequest request, HttpSer\n \t\tresponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n \t}\n \n+\t@Override\n+\tprotected void logException(Exception ex, HttpServletRequest request) {\n+\t\tif (ex instanceof NoHandlerFoundException || ex instanceof NoResourceFoundException) {\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(buildLogMessage(ex, request));\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\t\tsuper.logException(ex, request);\n+\t}\n+\n }",
    "output": "Upgrade DefaultHandlerExceptionResolver logging Reduce logging for NoResourceFoundException and NoHandlerFoundException"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -101,8 +101,6 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \t\t\t\"^\" + HTTP_PATTERN + \"(//(\" + USERINFO_PATTERN + \"@)?\" + HOST_PATTERN + \"(:\" + PORT_PATTERN + \")?\" + \")?\" +\n \t\t\t\t\tPATH_PATTERN + \"(\\\\?\" + QUERY_PATTERN + \")?\" + \"(#\" + LAST_PATTERN + \")?\");\n \n-\tprivate static final String FORWARDED_VALUE = \"\\\"?([^;,\\\"]+)\\\"?\";\n-\n \tprivate static final Object[] EMPTY_VALUES = new Object[0];\n \n ",
    "output": "Remove obsolete private constant"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -31,7 +31,6 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpRequest;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java\n@@ -28,7 +28,8 @@\n  * Common {@link SqlValue} implementation for JDBC {@link Array} creation\n  * based on the JDBC 4 {@link java.sql.Connection#createArrayOf} method.\n  *\n- * <p>Also serves as a template for custom {@link SqlValue} implementations.\n+ * <p>Also serves as a template for custom {@link SqlValue} implementations\n+ * with cleanup demand.\n  *\n  * @author Juergen Hoeller\n  * @author Philippe Marschall\n@@ -50,7 +51,7 @@ public class SqlArrayValue implements SqlValue {\n \t * @param elements the elements to populate the {@code Array} object with\n \t * @see java.sql.Connection#createArrayOf\n \t */\n-\tpublic SqlArrayValue(String typeName, Object[] elements) {\n+\tpublic SqlArrayValue(String typeName, Object... elements) {\n \t\tAssert.notNull(typeName, \"Type name must not be null\");\n \t\tAssert.notNull(elements, \"Elements array must not be null\");\n \t\tthis.typeName = typeName;",
    "output": "Use varargs for array elements"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -232,7 +232,6 @@ public void setAutodetect(boolean autodetect) {\n \t * @throws IllegalArgumentException if the supplied value is not resolvable\n \t * to one of the {@code AUTODETECT_} constants or is {@code null}\n \t * @see #setAutodetectMode(int)\n-\t * @see #getAutodetectMode()\n \t * @see #AUTODETECT_ALL\n \t * @see #AUTODETECT_ASSEMBLER\n \t * @see #AUTODETECT_MBEAN\n@@ -250,7 +249,6 @@ public void setAutodetectModeName(String constantName) {\n \t * @throws IllegalArgumentException if the supplied value is not\n \t * one of the {@code AUTODETECT_} constants\n \t * @see #setAutodetectModeName(String)\n-\t * @see #getAutodetectMode()\n \t * @see #AUTODETECT_ALL\n \t * @see #AUTODETECT_ASSEMBLER\n \t * @see #AUTODETECT_MBEAN",
    "output": "Remove outdated Javadoc cross references"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -137,7 +137,6 @@ public class MBeanExporter extends MBeanRegistrationSupport implements MBeanExpo\n \t/**\n \t * Map of constant names to constant values for the autodetect constants defined\n \t * in this class.\n-\t * @since 6.0.11\n \t */\n \tprivate static final Map<String, Integer> constants = Map.of(\n \t\t\t\"AUTODETECT_NONE\", AUTODETECT_NONE,",
    "output": "Remove since tag"
  },
  {
    "input": "diff --git a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java\n--- a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java\n+++ b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java\n@@ -43,8 +43,7 @@ public class CandidateComponentsTestClassLoader extends ClassLoader {\n \t * @see CandidateComponentsIndexLoader#COMPONENTS_RESOURCE_LOCATION\n \t */\n \tpublic static ClassLoader disableIndex(ClassLoader classLoader) {\n-\t\treturn new CandidateComponentsTestClassLoader(classLoader,\n-\t\t\t\tCollections.enumeration(Collections.emptyList()));\n+\t\treturn new CandidateComponentsTestClassLoader(classLoader, Collections.emptyEnumeration());\n \t}\n \n \t/**\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java\n@@ -170,7 +170,7 @@ public String getInitParameter(String paramName) {\n \n \t\t@Override\n \t\tpublic Enumeration<String> getInitParameterNames() {\n-\t\t\treturn Collections.enumeration(Collections.emptySet());\n+\t\t\treturn Collections.emptyEnumeration();\n \t\t}\n \t}\n ",
    "output": "Use Collections.emptyEnumerationwhere appropriate"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n@@ -637,17 +637,20 @@ public int getOrder() {\n \t}\n \n \n+\tstatic class CommonPointcuts {\n+\n+\t\t@Pointcut(\"execution(* getAge())\")\n+\t\tvoid getAge() {\n+\t\t}\n+\t}\n+\n \t@Aspect\n \tstatic class NamedPointcutAspectWithFQN {\n \n \t\t@SuppressWarnings(\"unused\")\n \t\tprivate ITestBean fieldThatShouldBeIgnoredBySpringAtAspectJProcessing = new TestBean();\n \n-\t\t@Pointcut(\"execution(* getAge())\")\n-\t\tvoid getAge() {\n-\t\t}\n-\n-\t\t@Around(\"org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NamedPointcutAspectWithFQN.getAge()\")\n+\t\t@Around(\"org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.CommonPointcuts.getAge()()\")\n \t\tint changeReturnValue(ProceedingJoinPoint pjp) {\n \t\t\treturn -1;\n \t\t}",
    "output": "Remove @Aspect for classes containing only @Pointcut declarations in ref docs"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java b/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n--- a/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n@@ -102,7 +102,7 @@ void testRegisterNotificationListenerForNonExistentMBean() throws Exception {\n \t\texporter.setNotificationListenerMappings(listeners);\n \t\tassertThatExceptionOfType(MBeanExportException.class).as(\"NotificationListener on a non-existent MBean\").isThrownBy(() ->\n \t\t\t\tstart(exporter))\n-\t\t\t.satisfies(ex -> assertThat(ex.contains(InstanceNotFoundException.class)));\n+\t\t\t.satisfies(ex -> assertThat(ex.contains(InstanceNotFoundException.class)).isTrue());\n \t}\n \n \t@Test",
    "output": "Fix incomplete AssertJ assertions"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java b/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java\n@@ -102,18 +102,3 @@ void needsJoinPointStaticPart() {\n \t}\n \n }\n-\n-\n-class AuthenticationLogger {\n-\n-\tpublic void logAuthenticationAttempt(String username) {\n-\t\tSystem.out.println(\"User [\" + username + \"] attempting to authenticate\");\n-\t}\n-\n-}\n-\n-class SecurityManager {\n-\tpublic boolean authenticate(String username, String password) {\n-\t\treturn false;\n-\t}\n-}",
    "output": "Remove unused test code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n@@ -20,8 +20,6 @@\n import java.lang.reflect.Method;\n import java.util.Arrays;\n \n-import org.reactivestreams.Publisher;\n-\n import org.springframework.context.MessageSource;\n import org.springframework.core.CoroutinesUtils;\n import org.springframework.core.DefaultParameterNameDiscoverer;\n@@ -240,7 +238,7 @@ else if (targetException instanceof Exception exception) {\n \t * instead.\n \t * @since 6.0\n \t */\n-\tprotected Publisher<?> invokeSuspendingFunction(Method method, Object target, Object[] args) {\n+\tprotected Object invokeSuspendingFunction(Method method, Object target, Object[] args) {\n \t\treturn CoroutinesUtils.invokeSuspendingFunction(method, target, args);\n \t}\n ",
    "output": "Change InvocableHandlerMethod#invokeSuspendingFunction return type This commits changes the return type from Publisher<?> to Object in order to avoid potential compatibility issues when the Reactive Streams dependency is not in the classpath"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -18,6 +18,7 @@\n \n import java.nio.file.Path;\n import java.util.List;\n+import java.util.Objects;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelId;\n@@ -55,8 +56,8 @@ class ReactorServerHttpResponse extends AbstractServerHttpResponse implements Ze\n \n \n \tpublic ReactorServerHttpResponse(HttpServerResponse response, DataBufferFactory bufferFactory) {\n-\t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(response.responseHeaders())));\n-\t\tAssert.notNull(response, \"HttpServerResponse must not be null\");\n+\t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(Objects.requireNonNull(response,\n+\t\t\t\t\"HttpServerResponse must not be null\").responseHeaders())));\n \t\tthis.response = response;\n \t}\n ",
    "output": "Remove redundant assertion in ReactorServerHttpResponse constructor"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.12.1"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -543,14 +543,14 @@ public void beforeCheckpoint(org.crac.Context<? extends org.crac.Resource> conte\n \t\t@Override\n \t\tpublic void afterRestore(org.crac.Context<? extends org.crac.Resource> context) {\n \t\t\tlong restartTime = System.nanoTime();\n-\t\t\tlogger.debug(\"Restarting Spring-managed lifecycle beans after JVM restore\");\n+\t\t\tlogger.info(\"Restarting Spring-managed lifecycle beans after JVM restore\");\n \t\t\trestartAfterStop();\n \n \t\t\t// Barrier for prevent-shutdown thread not needed anymore\n \t\t\tthis.barrier = null;\n \n \t\t\tDuration timeTakenToRestart = Duration.ofNanos(System.nanoTime() - restartTime);\n-\t\t\tlogger.debug(\"Restart complete in \" + timeTakenToRestart.toMillis() + \" ms\");\n+\t\t\tlogger.info(\"Restart complete in \" + timeTakenToRestart.toMillis() + \" ms\");\n \t\t}\n \n \t\tprivate void awaitPreventShutdownBarrier() {",
    "output": "Change restore logging to info level"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java\n@@ -22,11 +22,11 @@\n import io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.junit.platform.launcher.TestExecutionListener;\n \n import org.springframework.context.ApplicationContext;\n import org.springframework.core.Conventions;\n import org.springframework.test.context.TestContext;\n+import org.springframework.test.context.TestExecutionListener;\n import org.springframework.test.context.support.AbstractTestExecutionListener;\n import org.springframework.util.Assert;\n import org.springframework.util.ReflectionUtils;",
    "output": "Use correct ClassLoader in MicrometerObservationRegistryTestExecutionListener In the original implementation of MicrometerObservationRegistryTestExecutionListener I accidentally imported JUnit 5's org.junit.platform.launcher.TestExecutionListener instead Spring's org.springframework.test.context.TestExecutionListener. The code therefore attempts to use the ClassLoader for the JUnit Platform's TestExecutionListener which may fail to see the required types. In addition, if the JUnit Platform's TestExecutionListener is not on the classpath, the attempt to access its ClassLoader will fail. This commit addresses this by properly using the ClassLoader for Spring's TestExecutionListener to detect dependencies of the MicrometerObservationRegistryTestExecutionListener"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n--- a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n+++ b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n@@ -26,7 +26,7 @@\n  * GraalVM {@link Feature} that substitutes boolean field values that match a certain pattern\n  * with values pre-computed AOT without causing class build-time initialization.\n  *\n- * <p>It is possible to pass <pre style=\"code\">-Dspring.aot.precompute=verbose</pre> as a\n+ * <p>It is possible to pass <pre style=\"code\">-Dspring.native.precompute.log=verbose</pre> as a\n  * <pre style=\"code\">native-image</pre> compiler build argument to display detailed logs\n  * about pre-computed fields.</p>\n  *\n@@ -36,7 +36,7 @@\n  */\n class PreComputeFieldFeature implements Feature {\n \n-\tprivate static final boolean verbose = \"verbose\".equals(System.getProperty(\"spring.aot.precompute\"));\n+\tprivate static final boolean verbose = \"verbose\".equals(System.getProperty(\"spring.native.precompute.log\"));\n \n \tprivate static final Pattern[] patterns = {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.core.NativeDetector#inNativeImage\")),",
    "output": "Use spring.native.precompute.log system property This commit changes the Java system property used to control PreComputeFieldFeature verbose logging from spring.aot.precompute to spring.native.precompute.log in order to clarify its purpose and avoid confusion with AOT processing of JVM bytecode or Java sources"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n@@ -513,6 +513,7 @@ public ResolvableType getReturnType() {\n \n \tprivate static class ContextSnapshotHelper {\n \n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic static Object writeReactorContext(Object returnValue) {\n \t\t\tif (Mono.class.isAssignableFrom(returnValue.getClass())) {\n \t\t\t\tContextSnapshot snapshot = ContextSnapshot.captureAll();",
    "output": "Upgrade to Micrometer BOM 1.10.8 and context-propagation 1.0.3 Cloes"
  },
  {
    "input": "diff --git a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n--- a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n+++ b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n@@ -45,7 +45,7 @@ public String one() {\n \t\t@Bean\n \t\t@Qualifier(\"2\")\n \t\tpublic String two() {\n-\t\t\treturn \"one\";\n+\t\t\treturn \"two\";\n \t\t}\n \n \t}",
    "output": "Fix test fixture value in QualifierConfiguration"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -156,9 +156,7 @@ public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewC\n \tprotected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,\n \t\t\tType paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {\n \n-\t\tHttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n-\t\tAssert.state(servletRequest != null, \"No HttpServletRequest\");\n-\t\tServletServerHttpRequest inputMessage = new ServletServerHttpRequest(servletRequest);\n+\t\tServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n \n \t\tObject arg = readWithMessageConverters(inputMessage, parameter, paramType);\n \t\tif (arg == null && checkRequired(parameter)) {",
    "output": "Remove duplicate code in RequestResponseBodyMethodProcessor"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -807,14 +807,12 @@ public Builder name(String name) {\n \n \t\t@Override\n \t\tpublic Builder filename(String filename) {\n-\t\t\tAssert.hasText(filename, \"No filename\");\n \t\t\tthis.filename = filename;\n \t\t\treturn this;\n \t\t}\n \n \t\t@Override\n \t\tpublic Builder filename(String filename, Charset charset) {\n-\t\t\tAssert.hasText(filename, \"No filename\");\n \t\t\tthis.filename = filename;\n \t\t\tthis.charset = charset;\n \t\t\treturn this;",
    "output": "Remove non-empty filename check in ContentDisposition builder This commit ensures that the ContentDisposition.Builder is consistent with ContentDisposition and accepts null/empty filenames"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java b/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n  * {@link Plugin} that configures the {@code RuntimeHints} Java agent to test tasks.\n  *\n  * @author Brian Clozel\n+ * @author Sebastien Deleuze\n  */\n public class RuntimeHintsAgentPlugin implements Plugin<Project> {\n \n@@ -45,6 +46,7 @@ public void apply(Project project) {\n \t\t\t\t});\n \t\t\t\ttest.include(\"**/*Tests.class\", \"**/*Test.class\");\n \t\t\t\ttest.systemProperty(\"java.awt.headless\", \"true\");\n+\t\t\t\ttest.systemProperty(\"org.graalvm.nativeimage.imagecode\", \"runtime\");\n \t\t\t});\n \t\t\tproject.afterEvaluate(p -> {\n \t\t\t\tJar jar = project.getRootProject().project(\"spring-core-test\").getTasks().withType(Jar.class).named(\"jar\").get();",
    "output": "Upgrade RuntimeHintsAgentPlugin to use the native image code path RuntimeHintsAgentPlugin purpose is to verify that the reflective invocations expected match the ones performed. introduces a code path where the reflective invocation is skipped when running on native. This issue set the system property \"org.graalvm.nativeimage.imagecode\" to \"runtime\" when running runtime tests with the agent in order to make sure the code path tested for those tests is the native one"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -27,6 +27,7 @@\n import org.gradle.api.plugins.quality.CheckstyleExtension;\n import org.gradle.api.plugins.quality.CheckstylePlugin;\n \n+import java.io.File;\n import java.nio.file.Path;\n import java.util.List;\n \n@@ -68,7 +69,8 @@ private static void configureNoHttpPlugin(Project project) {\n \t\t\tPath rootPath = project.getRootDir().toPath();\n \t\t\tPath projectPath = rootPath.relativize(subproject.getProjectDir().toPath());\n \t\t\tfor (String buildFolder : buildFolders) {\n-\t\t\t\tnoHttp.getSource().exclude(projectPath.resolve(buildFolder).resolve(\"**\").toString());\n+\t\t\t\tPath innerBuildDir = projectPath.resolve(buildFolder);\n+\t\t\t\tnoHttp.getSource().exclude(innerBuildDir + File.separator + \"**\");\n \t\t\t}\n \t\t});\n \t}",
    "output": "Fix glob pattern in CheckstyleConventions to be Windows-compatible On windows, the `*` character is not allowed in a directory's name. When trying to append a glob pattern to a `Path` (`path.resolve(\"**\")`), if the underlying `Path.getFileSystem` is windows then an `InvalidPathException` is thrown. The NoHttp plugin doesn't really need a `Path` but a glob `String`, so this commit uses a simple String concatenation in order to append the wildcard part (with the canonical path separator for good measure)"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -48,7 +48,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.9.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.9.3\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.9.3 again Commit ed4404f350 inadvertently switched back to 10.9.1"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -821,6 +821,7 @@ void nullSafeConciseToStringForStrings() {\n \t\t\tString repeat100 = \"X\".repeat(100);\n \t\t\tString repeat101 = \"X\".repeat(101);\n \n+\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(\"\")).isEqualTo(\"\");\n \t\t\tassertThat(ObjectUtils.nullSafeConciseToString(\"foo\")).isEqualTo(\"foo\");\n \t\t\tassertThat(ObjectUtils.nullSafeConciseToString(repeat100)).isEqualTo(repeat100);\n \t\t\tassertThat(ObjectUtils.nullSafeConciseToString(repeat101)).hasSize(truncatedLength).endsWith(truncated);\n\ndiff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -771,6 +771,7 @@ void truncatePreconditions() {\n \n \t@ParameterizedTest\n \t@CsvSource(delimiterString = \"-->\", textBlock = \"\"\"\n+\t\t\t''                  --> ''\n \t\t\taardvark            --> aardvark\n \t\t\taardvark12          --> aardvark12\n \t\t\taardvark123         --> aardvark12 (truncated)...",
    "output": "Add tests for corner cases"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java b/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -43,6 +43,9 @@ public void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader)\n \t\t\t\t.onReachableType(sqlDateTypeReference)\n \t\t\t\t.withMethod(\"valueOf\", List.of(TypeReference.of(LocalDate.class)), ExecutableMode.INVOKE)\n \t\t\t\t.onReachableType(sqlDateTypeReference));\n+\n+\t\thints.reflection().registerTypeIfPresent(classLoader, \"org.springframework.http.HttpMethod\",\n+\t\t\t\tbuilder -> builder.withMethod(\"valueOf\", List.of(TypeReference.of(String.class)), ExecutableMode.INVOKE));\n \t}\n \n }",
    "output": "Add HttpMethod reflection hint to ObjectToObjectConverterRuntimeHints This commit adds a reflection hint for HttpMethod#valueOf in order to be able to support conversion required for Spring Boot configuration properties binding as described in https://github.com/spring-projects/spring-boot/issues/34483"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n@@ -47,7 +47,7 @@\n  * @author Sam Brannen\n  * @since 5.2.4\n  */\n-@DisabledOnJre(value= {JRE.JAVA_18, JRE.JAVA_19}, disabledReason = \"BlockHound is not compatible with Java 18+\")\n+@DisabledOnJre(value= {JRE.JAVA_18, JRE.JAVA_19, JRE.JAVA_20}, disabledReason = \"BlockHound is not compatible with Java 18+\")\n class SpringCoreBlockHoundIntegrationTests {\n \n \t@BeforeAll",
    "output": "Upgrade Java version for compatibility tests in CI This commit configures Java 20 for compatibility tests in our CI, replacing Java 19"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java b/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java\n--- a/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java\n@@ -31,6 +31,8 @@ class LiteralPathElement extends PathElement {\n \n \tprivate final char[] text;\n \n+\tprivate final String textString;\n+\n \tprivate final int len;\n \n \tprivate final boolean caseSensitive;\n@@ -50,6 +52,7 @@ public LiteralPathElement(int pos, char[] literalText, boolean caseSensitive, ch\n \t\t\t\tthis.text[i] = Character.toLowerCase(literalText[i]);\n \t\t\t}\n \t\t}\n+\t\tthis.textString = new String(this.text);\n \t}\n \n \n@@ -70,10 +73,9 @@ public boolean matches(int pathIndex, MatchingContext matchingContext) {\n \t\t}\n \n \t\tif (this.caseSensitive) {\n-\t\t\tfor (int i = 0; i < this.len; i++) {\n-\t\t\t\tif (value.charAt(i) != this.text[i]) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n+\t\t\t// This typically uses a JVM intrinsic\n+\t\t\tif (!this.textString.equals(value)) {\n+\t\t\t\treturn false;\n \t\t\t}\n \t\t}\n \t\telse {\n@@ -124,7 +126,7 @@ public boolean isLiteral() {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"Literal(\" + String.valueOf(this.text) + \")\";\n+\t\treturn \"Literal(\" + this.textString + \")\";\n \t}\n \n }",
    "output": "Use String.equalsin LiteralPathElement"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.util;\n \n import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n import java.io.File;\n import java.io.IOException;\n@@ -146,9 +145,9 @@ public static byte[] copyToByteArray(@Nullable InputStream in) throws IOExceptio\n \t\t\treturn new byte[0];\n \t\t}\n \n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);\n-\t\tcopy(in, out);\n-\t\treturn out.toByteArray();\n+\t\ttry (in) {\n+\t\t\treturn in.readAllBytes();\n+\t\t}\n \t}\n \n ",
    "output": "Use InputStream.readAllBytesin FileCopyUtils.copyToByteArrayInputStream.readAllBytesallows us to avoid the creation of an intermediate ByteArrayOutputStream and is likely to perform better"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -29,6 +29,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -791,11 +792,11 @@ private static void copyProperties(Object source, Object target, @Nullable Class\n \t\t\tactualEditable = editable;\n \t\t}\n \t\tPropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);\n-\t\tList<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);\n+\t\tSet<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);\n \n \t\tfor (PropertyDescriptor targetPd : targetPds) {\n \t\t\tMethod writeMethod = targetPd.getWriteMethod();\n-\t\t\tif (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) {\n+\t\t\tif (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {\n \t\t\t\tPropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());\n \t\t\t\tif (sourcePd != null) {\n \t\t\t\t\tMethod readMethod = sourcePd.getReadMethod();",
    "output": "Use Set to track ignored properties in BeanUtils.copyProperties"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java b/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java\n@@ -1,9 +0,0 @@\n-/**\n- * Support for an HTTP service proxy created from an interface declaration.\n- */\n-@NonNullApi\n-@NonNullFields\n-package org.springframework.web.reactive.service;\n-\n-import org.springframework.lang.NonNullApi;\n-import org.springframework.lang.NonNullFields;",
    "output": "Remove unused service package"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java\n@@ -0,0 +1,10 @@\n+/**\n+ * Various {@link org.springframework.aop.framework.autoproxy.TargetSourceCreator}\n+ * implementations for use with Spring's AOP auto-proxying support.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.aop.framework.autoproxy.target;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info.java file for autoproxy.target package"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java\n@@ -547,8 +547,8 @@ protected void initTransactionSynchronizationRegistry() {\n \t * @return a corresponding UserTransaction handle\n \t */\n \tprotected UserTransaction buildUserTransaction(TransactionManager transactionManager) {\n-\t\tif (transactionManager instanceof UserTransaction userTransaction) {\n-\t\t\treturn userTransaction;\n+\t\tif (transactionManager instanceof UserTransaction ut) {\n+\t\t\treturn ut;\n \t\t}\n \t\telse {\n \t\t\treturn new UserTransactionAdapter(transactionManager);\n@@ -702,11 +702,11 @@ protected UserTransaction findUserTransaction() {\n \t */\n \t@Nullable\n \tprotected TransactionManager findTransactionManager(@Nullable UserTransaction ut) {\n-\t\tif (ut instanceof TransactionManager transactionManager) {\n+\t\tif (ut instanceof TransactionManager tm) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"JTA UserTransaction object [\" + ut + \"] implements TransactionManager\");\n \t\t\t}\n-\t\t\treturn transactionManager;\n+\t\t\treturn tm;\n \t\t}\n \n \t\t// Check fallback JNDI locations.",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -194,7 +194,7 @@ public ClassReader(\n     this.b = classFileBuffer;\n     // Check the class' major_version. This field is after the magic and minor_version fields, which\n     // use 4 and 2 bytes respectively.\n-    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V20) {\n+    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V21) {\n       throw new IllegalArgumentException(\n           \"Unsupported class file major version \" + readShort(classFileOffset + 6));\n     }\n\ndiff --git a/spring-core/src/main/java/org/springframework/asm/Opcodes.java b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n--- a/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n@@ -285,6 +285,7 @@ public interface Opcodes {\n   int V18 = 0 << 16 | 62;\n   int V19 = 0 << 16 | 63;\n   int V20 = 0 << 16 | 64;\n+  int V21 = 0 << 16 | 65;\n \n   /**\n    * Version flag indicating that the class is using 'preview' features.",
    "output": "Upgrade to ASM master (including early support for Java 21 bytecode)"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java\n@@ -20,6 +20,7 @@\n import jakarta.jms.Session;\n \n import org.springframework.core.MethodParameter;\n+import org.springframework.jms.listener.SubscriptionNameProvider;\n import org.springframework.jms.support.JmsHeaderMapper;\n import org.springframework.jms.support.converter.MessageConversionException;\n import org.springframework.lang.Nullable;\n@@ -48,7 +49,8 @@\n  * @see JmsHeaderMapper\n  * @see InvocableHandlerMethod\n  */\n-public class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener {\n+public class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener\n+\t\timplements SubscriptionNameProvider {\n \n \t@Nullable\n \tprivate InvocableHandlerMethod handlerMethod;\n@@ -67,6 +69,16 @@ private InvocableHandlerMethod getHandlerMethod() {\n \t\treturn this.handlerMethod;\n \t}\n \n+\t@Override\n+\tpublic String getSubscriptionName() {\n+\t\tif (this.handlerMethod != null) {\n+\t\t\treturn this.handlerMethod.getBeanType().getName() + \"#\" + this.handlerMethod.getMethod().getName();\n+\t\t}\n+\t\telse {\n+\t\t\treturn this.getClass().getName();\n+\t\t}\n+\t}\n+\n \n \t@Override\n \tpublic void onMessage(jakarta.jms.Message jmsMessage, @Nullable Session session) throws JMSException {",
    "output": "Improve generated default name for a @JmsListener subscription Prior to this commit, when using durable subscribers with @JmsListener methods that do not specify a custom subscription name the generated default subscription name was always org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter. Consequently, multiple such @JmsListener methods were assigned the same subscription name which violates the uniqueness requirement. To address this, MessagingMessageListenerAdapter now implements SubscriptionNameProvider and generates the subscription name based on the following rules. - if the InvocableHandlerMethod is present, the subscription name will take the form of handlerMethod.getBeanType.getName+ \"#\" + handlerMethod.getMethod.getName. - otherwise, getClass.getNameis used, which is analogous to the previous behavior"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -1091,24 +1091,6 @@ void exchangeForUnknownStatusCode(ClientHttpConnector connector) {\n \t\t});\n \t}\n \n-\t@ParameterizedWebClientTest  // SPR-15782\n-\tvoid exchangeWithRelativeUrl(ClientHttpConnector connector) {\n-\t\tstartServer(connector);\n-\n-\t\tString uri = \"/api/v4/groups/1\";\n-\t\tMono<ResponseEntity<Void>> responseMono = WebClient.builder().build().get().uri(uri)\n-\t\t\t\t.retrieve().toBodilessEntity();\n-\n-\t\tStepVerifier.create(responseMono)\n-\t\t\t\t.expectErrorSatisfies(throwable -> {\n-\t\t\t\t\tassertThat(throwable).isInstanceOf(WebClientRequestException.class);\n-\t\t\t\t\tWebClientRequestException ex = (WebClientRequestException) throwable;\n-\t\t\t\t\tassertThat(ex.getMethod()).isEqualTo(HttpMethod.GET);\n-\t\t\t\t\tassertThat(ex.getUri()).isEqualTo(URI.create(uri));\n-\t\t\t\t})\n-\t\t\t\t.verify(Duration.ofSeconds(5));\n-\t}\n-\n \t@ParameterizedWebClientTest\n \tvoid filter(ClientHttpConnector connector) {\n \t\tstartServer(connector);",
    "output": "Remove WebClientIntegrationTests#exchangeWithRelativeUrl outdated test This test can fail when a web server runs on port 80 and is not relevant anymore due to the removal of related feature via 6e936a408195f95d41f3463bb93e255218493664"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java\n@@ -193,7 +193,6 @@ private HttpMethod getMethodToUse(ServerHttpRequest request, boolean isPreFlight\n \t * {@link CorsConfiguration#checkOrigin(String)}.\n \t */\n \t@Nullable\n-\n \tprotected List<String> checkHeaders(CorsConfiguration config, List<String> requestHeaders) {\n \t\treturn config.checkHeaders(requestHeaders);\n \t}",
    "output": "Remove extra empty line in DefaultCorsProcessor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n--- a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n@@ -1046,7 +1046,6 @@ public Reference<K, V> getNext() {\n \t\t@Override\n \t\tpublic void release() {\n \t\t\tenqueue();\n-\t\t\tclear();\n \t\t}\n \t}\n \n@@ -1083,7 +1082,6 @@ public Reference<K, V> getNext() {\n \t\t@Override\n \t\tpublic void release() {\n \t\t\tenqueue();\n-\t\t\tclear();\n \t\t}\n \t}\n ",
    "output": "Remove unnecessary calls to Reference::clear Prior to this commit, `ConcurrentReferenceHashMap` subclasses extending `Reference` would call `Reference::clear` right next to `Reference::enqueue`; this is not needed as the latter calls it already"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n@@ -200,7 +200,7 @@ protected Mono<Void> doBegin(TransactionSynchronizationManager synchronizationMa\n \t\t\t\tMono<Connection> newCon = Mono.from(obtainConnectionFactory().create());\n \t\t\t\tconnectionMono = newCon.doOnNext(connection -> {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"Acquired Connection [\" + newCon + \"] for R2DBC transaction\");\n+\t\t\t\t\t\tlogger.debug(\"Acquired Connection [\" + connection + \"] for R2DBC transaction\");\n \t\t\t\t\t}\n \t\t\t\t\ttxObject.setConnectionHolder(new ConnectionHolder(connection), true);\n \t\t\t\t});",
    "output": "Fix R2dbcTransactionManager debug log: don't log a Mono When logging the current connection inside R2dbcTransactionManager doBegin, the mono object was logged instead of the connection lambda parameter. Other similar debug-level logs do use the actual Connection object, so this commit does the same"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java\n@@ -59,7 +59,7 @@ public void exceptionClassTranslation() {\n \t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23505\", 0), DuplicateKeyException.class);\n \t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23000\", 1), DuplicateKeyException.class);\n \t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23000\", 1062), DuplicateKeyException.class);\n-\t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23505\", 2627), DuplicateKeyException.class);\n+\t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23000\", 2627), DuplicateKeyException.class);\n \t\tdoTest(new SQLInvalidAuthorizationSpecException(\"\", \"\", 0), PermissionDeniedDataAccessException.class);\n \t\tdoTest(new SQLNonTransientConnectionException(\"\", \"\", 0), DataAccessResourceFailureException.class);\n \t\tdoTest(new SQLRecoverableException(\"\", \"\", 0), RecoverableDataAccessException.class);",
    "output": "Fix wrong asserted code in SQLExceptionSubclassTranslatorTests There was a typo in the test, covering the wrong SQLState code. Polishes a644245. Relates to"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java\n@@ -76,7 +76,7 @@ public void setMessageSource(MessageSource messageSource) {\n \t}\n \n \t@Nullable\n-\tpublic MessageSource getMessageSource() {\n+\tprotected MessageSource getMessageSource() {\n \t\treturn this.messageSource;\n \t}\n ",
    "output": "Use consistent visibility for ResponseEntityExceptionHandler.getMessageSource"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java\n@@ -184,8 +184,9 @@ protected void process(MatchCallback callback) {\n \tprotected Yaml createYaml() {\n \t\tLoaderOptions loaderOptions = new LoaderOptions();\n \t\tloaderOptions.setAllowDuplicateKeys(false);\n-\t\treturn new Yaml(new FilteringConstructor(loaderOptions), new Representer(),\n-\t\t\t\tnew DumperOptions(), loaderOptions);\n+\t\tDumperOptions dumperOptions = new DumperOptions();\n+\t\treturn new Yaml(new FilteringConstructor(loaderOptions), new Representer(dumperOptions),\n+\t\t\t\tdumperOptions, loaderOptions);\n \t}\n \n \tprivate boolean process(MatchCallback callback, Yaml yaml, Resource resource) {",
    "output": "Upgrade optional dependencies"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -620,6 +620,7 @@ private class IframeHandler implements SockJsRequestHandler {\n \t\t\t\t<head>\n \t\t\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n \t\t\t\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n+\t\t\t\t\t<title>SocketJS iframe</title>\n \t\t\t\t\t<script>\n \t\t\t\t\t\tdocument.domain = document.domain;\n \t\t\t\t\t\t_sockjs_onload = function(){SockJS.bootstrap_iframe();};",
    "output": "Add title to SockJS iFrames for accessibility compliance"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n--- a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n@@ -144,7 +144,6 @@ public interface SmartContextLoader extends ContextLoader {\n \t * @return a new application context\n \t * @throws ContextLoadException if context loading failed\n \t * @see #processContextConfiguration(ContextConfigurationAttributes)\n-\t * @see #loadContextForAotProcessing(MergedContextConfiguration)\n \t * @see org.springframework.context.annotation.AnnotationConfigUtils#registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry)\n \t * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment()\n \t */",
    "output": "Remove erroneous Javadoc link"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n@@ -54,8 +54,9 @@\n  * @author Sam Brannen\n  * @since 2.0\n  * @deprecated as of 6.0.1, in favor of {@link StandardReflectionParameterNameDiscoverer}\n+ * (with the \"-parameters\" compiler flag)\n  */\n-@Deprecated\n+@Deprecated(since = \"6.0.1\")\n public class LocalVariableTableParameterNameDiscoverer implements ParameterNameDiscoverer {\n \n \tprivate static final Log logger = LogFactory.getLog(LocalVariableTableParameterNameDiscoverer.class);",
    "output": "Add since attribute to Deprecated annotation Also retaining standard Java parameter names for Spring's AspectJ sources now"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java\n@@ -160,13 +160,6 @@ public String[] getHosts() {\n \t\treturn this.hosts;\n \t}\n \n-\n-\t@Override\n-\tpublic void afterPropertiesSet() throws Exception {\n-\t\tsuper.afterPropertiesSet();\n-\t}\n-\n-\n \t@Override\n \tpublic boolean isRedirectView() {\n \t\treturn true;",
    "output": "Remove superfluous method override"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n@@ -32,9 +32,6 @@\n  * the annotated element. By default, a reflection hint is added on the\n  * annotated element so that it can be discovered and invoked if necessary.\n  *\n- * <p>A reflection hint is also added if necessary on the annotation that\n- * <em>directly</em> uses this annotation.\n- *\n  * @author Stephane Nicoll\n  * @author Sam Brannen\n  * @since 6.0",
    "output": "Remove outdated documentation in @Reflective"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -534,7 +534,7 @@ protected void checkParameters(String parameter, String value) {\n \t\t\tString unquotedValue = unquote(value);\n \t\t\tdouble d = Double.parseDouble(unquotedValue);\n \t\t\tAssert.isTrue(d >= 0D && d <= 1D,\n-\t\t\t\t\t() -> \"Invalid quality value \\\"\" + value + \"\\\": should be between 0.0 and 1.0\");\n+\t\t\t\t\t() -> \"Invalid quality value \\\"\" + unquotedValue + \"\\\": should be between 0.0 and 1.0\");\n \t\t}\n \t}\n ",
    "output": "Use unquoted value in assertion message in MediaType.checkParameters"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -547,7 +547,7 @@ protected void checkParameters(String parameter, String value) {\n \t\t\tString unquotedValue = unquote(value);\n \t\t\tdouble d = Double.parseDouble(unquotedValue);\n \t\t\tAssert.isTrue(d >= 0D && d <= 1D,\n-\t\t\t\t\t() -> \"Invalid quality value \\\"\" + value + \"\\\": should be between 0.0 and 1.0\");\n+\t\t\t\t\t() -> \"Invalid quality value \\\"\" + unquotedValue + \"\\\": should be between 0.0 and 1.0\");\n \t\t}\n \t}\n ",
    "output": "Use unquoted value in assertion message in MediaType.checkParameters"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java\n@@ -722,15 +722,15 @@ void testCustomBooleanEditorWithEmptyAsNull() {\n \n \t@Test\n \tvoid testCustomDateEditor() {\n-\t\tCustomDateEditor editor = new CustomDateEditor(null, false);\n+\t\tCustomDateEditor editor = new CustomDateEditor(new SimpleDateFormat(\"MM/dd/yyyy\"), false);\n \t\teditor.setValue(null);\n \t\tassertThat(editor.getValue()).isNull();\n \t\tassertThat(editor.getAsText()).isEmpty();\n \t}\n \n \t@Test\n \tvoid testCustomDateEditorWithEmptyAsNull() {\n-\t\tCustomDateEditor editor = new CustomDateEditor(null, true);\n+\t\tCustomDateEditor editor = new CustomDateEditor(new SimpleDateFormat(\"MM/dd/yyyy\"), true);\n \t\teditor.setValue(null);\n \t\tassertThat(editor.getValue()).isNull();\n \t\tassertThat(editor.getAsText()).isEmpty();",
    "output": "Use non-null DateFormat for CustomDateEditor in tests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java\n@@ -79,16 +79,27 @@ protected Void doProcess() {\n \t * output directories. In addition, run-time hints are registered for the\n \t * application contexts used by the test classes as well as test infrastructure\n \t * components used by the tests.\n+\t * @see #scanClasspathRoots()\n+\t * @see #createFileSystemGeneratedFiles()\n+\t * @see TestContextAotGenerator#processAheadOfTime(Stream)\n+\t * @see #writeHints(org.springframework.aot.hint.RuntimeHints)\n \t */\n \tprotected void performAotProcessing() {\n-\t\tTestClassScanner scanner = new TestClassScanner(getClasspathRoots());\n-\t\tStream<Class<?>> testClasses = scanner.scan();\n-\n+\t\tStream<Class<?>> testClasses = scanClasspathRoots();\n \t\tGeneratedFiles generatedFiles = createFileSystemGeneratedFiles();\n \t\tTestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles);\n \t\tgenerator.processAheadOfTime(testClasses);\n-\n \t\twriteHints(generator.getRuntimeHints());\n \t}\n \n+\t/**\n+\t * Scan the configured {@linkplain #getClasspathRoots() classpath roots} for\n+\t * Spring integration test classes.\n+\t * @return a stream of Spring integration test classes\n+\t */\n+\tprotected Stream<Class<?>> scanClasspathRoots() {\n+\t\tTestClassScanner scanner = new TestClassScanner(getClasspathRoots());\n+\t\treturn scanner.scan();\n+\t}\n+\n }",
    "output": "Make TestAotProcessor more easily extensible"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java b/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java\n--- a/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java\n+++ b/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java\n@@ -35,17 +35,27 @@\n  */\n public class ServerRequestObservationContext extends RequestReplyReceiverContext<ServerHttpRequest, ServerHttpResponse> {\n \n+\tprivate final ServerWebExchange serverWebExchange;\n+\n \t@Nullable\n \tprivate PathPattern pathPattern;\n \n \tprivate boolean connectionAborted;\n \n \tpublic ServerRequestObservationContext(ServerWebExchange exchange) {\n \t\tsuper((request, key) -> request.getHeaders().getFirst(key));\n+\t\tthis.serverWebExchange = exchange;\n \t\tsetCarrier(exchange.getRequest());\n \t\tsetResponse(exchange.getResponse());\n \t}\n \n+\t/**\n+\t * Return the current {@link ServerWebExchange HTTP exchange}.\n+\t */\n+\tpublic ServerWebExchange getServerWebExchange() {\n+\t\treturn this.serverWebExchange;\n+\t}\n+\n \t/**\n \t * Return the path pattern for the handler that matches the current request.\n \t * For example, {@code \"/projects/{name}\"}.",
    "output": "Add ServerWebExchange getter in WebFlux Observation context The observation context relies on request and response for propagation, but the exchange itself holds attributes and locale context so this is needed for keyvalues extraction in general. This commit adds a getter to expose the exchange from the context"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -24,8 +24,6 @@\n \n import kotlin.jvm.JvmClassMappingKt;\n import kotlin.reflect.KClass;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.core.KotlinDetector;\n import org.springframework.core.MethodParameter;\n@@ -45,8 +43,6 @@\n  */\n public class BindingReflectionHintsRegistrar {\n \n-\tprivate static final Log logger = LogFactory.getLog(BindingReflectionHintsRegistrar.class);\n-\n \tprivate static final String KOTLIN_COMPANION_SUFFIX = \"$Companion\";\n \n \t/**",
    "output": "Remove unused logger field"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -740,19 +740,6 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\tURI rootDirUri;\n \t\ttry {\n \t\t\trootDirUri = rootDirResource.getURI();\n-\t\t\t// If the URI is for a \"resource\" in the GraalVM native image file system, we have to\n-\t\t\t// ensure that the root directory does not end in a slash while simultaneously ensuring\n-\t\t\t// that the root directory is not an empty string (since Path#resolve throws an\n-\t\t\t// ArrayIndexOutOfBoundsException in a native image if the initial Path is created\n-\t\t\t// from an empty string).\n-\t\t\tString scheme = rootDirUri.getScheme();\n-\t\t\tString path = rootDirUri.getPath();\n-\t\t\tif (\"resource\".equals(scheme) && (path.length() > 1) && path.endsWith(\"/\")) {\n-\t\t\t\tpath = path.substring(0, path.length() - 1);\n-\t\t\t\t// Retain the fragment as well, since root folders in the native image\n-\t\t\t\t// file system are indexed via the fragment (e.g., resource:/#1).\n-\t\t\t\trootDirUri = new URI(scheme, path, rootDirUri.getFragment());\n-\t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tif (logger.isInfoEnabled()) {",
    "output": "Remove GraalVM workaround in PathMatchingResourcePatternResolver Tested successfully using the following locally built GraalVM dev build. OpenJDK Runtime Environment GraalVM 22.3.0-dev (build 17.0.5+5-.3-b07)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -63,21 +63,11 @@ public void registerReflectionHints(ReflectionHints hints, Type... types) {\n \t\t}\n \t}\n \n-\t/**\n-\t * Return whether the type should be skipped.\n-\t * @param type the type to evaluate\n-\t * @return {@code true} if the type should be skipped\n-\t */\n-\tprotected boolean shouldSkipType(Class<?> type) {\n+\tprivate boolean shouldSkipType(Class<?> type) {\n \t\treturn type.isPrimitive() || type == Object.class;\n \t}\n \n-\t/**\n-\t * Return whether the members of the type should be skipped.\n-\t * @param type the type to evaluate\n-\t * @return {@code true} if the members of the type should be skipped\n-\t */\n-\tprotected boolean shouldSkipMembers(Class<?> type) {\n+\tprivate boolean shouldSkipMembers(Class<?> type) {\n \t\treturn type.getCanonicalName().startsWith(\"java.\") || type.isArray();\n \t}\n ",
    "output": "Make BindingReflectionHintsRegistrar protected methods private In order to keep the maximum of flexibility, this commit makes shouldSkipType and shouldSkipMembers methods private. That will allow for example to refactor BindingReflectionHintsRegistrar in order to support skipping custom classes specified via @RegisterReflectionForBinding without having to subclass it"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n@@ -17,6 +17,7 @@\n package org.springframework.http.codec.multipart;\n \n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Deque;\n@@ -602,7 +603,10 @@ private void flush() {\n \t\t@Override\n \t\tpublic void onComplete() {\n \t\t\tif (changeState(this, DisposedState.INSTANCE, null)) {\n-\t\t\t\temitError(new DecodingException(\"Could not find end of body\"));\n+\t\t\t\tString msg = \"Could not find end of body (␍␊--\" +\n+\t\t\t\t\t\tnew String(MultipartParser.this.boundary, StandardCharsets.UTF_8) +\n+\t\t\t\t\t\t\")\";\n+\t\t\t\temitError(new DecodingException(msg));\n \t\t\t}\n \t\t}\n ",
    "output": "Improve exception message if MultipartParser can not find end of body This commit improves the exception message thrown by MultipartParser when it cannot find the end of the multipart body, by showing in the message what the parser is looking for (CRLF--<boundary>)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java b/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,7 +34,6 @@\n import java.util.TreeMap;\n import java.util.TreeSet;\n \n-import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.util.LinkedMultiValueMap;\n@@ -156,7 +155,7 @@ void createMapIsNotTypeSafeForLinkedMultiValueMap() {\n \t@Test\n \tvoid createApproximateCollectionFromEmptyHashSet() {\n \t\tCollection<String> set = createApproximateCollection(new HashSet<String>(), 2);\n-\t\tAssertions.assertThat(set).isEmpty();\n+\t\tassertThat(set).isEmpty();\n \t}\n \n \t@Test",
    "output": "Use AssertJ static imports consistently in 5.3.x"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -173,7 +173,7 @@ public void requestMappingHandlerAdapter() {\n \t\tApplicationContext context = initContext(WebConfig.class);\n \t\tRequestMappingHandlerAdapter adapter = context.getBean(RequestMappingHandlerAdapter.class);\n \t\tList<HttpMessageConverter<?>> converters = adapter.getMessageConverters();\n-\t\tassertThat(converters.size()).isEqualTo(12);\n+\t\tassertThat(converters).hasSizeGreaterThanOrEqualTo(15);\n \t\tconverters.stream()\n \t\t\t\t.filter(converter -> converter instanceof AbstractJackson2HttpMessageConverter)\n \t\t\t\t.forEach(converter -> {",
    "output": "Fix WebMvcConfigurationSupportTests due to change in previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java\n@@ -77,7 +77,6 @@ private static List<String> paramsToStringList(List<String[]> paramConditions) {\n \t@Override\n \tpublic String getMessage() {\n \t\tStringBuilder sb = new StringBuilder(\"Parameter conditions \");\n-\t\tint i = 0;\n \t\tsb.append(String.join(\" OR \", paramsToStringList(this.paramConditions)));\n \t\tsb.append(\" not met for actual request parameters: \");\n \t\tsb.append(requestParameterMapToString(this.actualParams));",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -362,7 +362,8 @@ private static class MultipartHelper {\n \n \t\tpublic static MultiValueMap<String, ?> parse(MockClientHttpRequest request) {\n \t\t\ttry {\n-\t\t\t\tFileUpload fileUpload = new FileUpload(new DiskFileItemFactory());\n+\t\t\t\tFileUpload fileUpload = new FileUpload();\n+\t\t\t\tfileUpload.setFileItemFactory(new DiskFileItemFactory());\n \n \t\t\t\tList<FileItem> fileItems = fileUpload.parseRequest(new UploadContext() {\n \t\t\t\t\tprivate final byte[] body = request.getBodyAsBytes();",
    "output": "Upgrade to Tomcat 10.1 Includes Jetty 11.0.12, Hibernate ORM 5.6.12, HtmlUnit 2.65"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n@@ -79,7 +79,7 @@\n  * @author Sam Brannen\n  * @since 6.0\n  */\n-public class TestClassScanner {\n+class TestClassScanner {\n \n \t// JUnit Jupiter\n \tprivate static final String EXTEND_WITH_ANNOTATION_NAME = \"org.junit.jupiter.api.extension.ExtendWith\";",
    "output": "Make TestClassScanner package private again TestClassScanner was made public with the assumption that Spring Boot's AOT testing support might need to work directly with that class; however, it turns out that Spring Boot does not currently have such a need. In light of that, this commit restores TestClassScanner's visibility to package private"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java b/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java\n@@ -113,8 +113,7 @@ private CodeBlock generateCodeForConstructor(RegisteredBean registeredBean,\n \t\t\t\t.getUserClass(constructor.getDeclaringClass());\n \t\tboolean dependsOnBean = ClassUtils.isInnerClass(declaringClass);\n \t\tVisibility accessVisibility = getAccessVisibility(registeredBean, constructor);\n-\t\tif (accessVisibility == Visibility.PUBLIC\n-\t\t\t\t|| accessVisibility == Visibility.PACKAGE_PRIVATE) {\n+\t\tif (accessVisibility != Visibility.PRIVATE) {\n \t\t\treturn generateCodeForAccessibleConstructor(beanName, beanClass, constructor,\n \t\t\t\t\tdependsOnBean, declaringClass);\n \t\t}\n@@ -208,8 +207,7 @@ private CodeBlock generateCodeForFactoryMethod(RegisteredBean registeredBean,\n \t\t\t\t.getUserClass(factoryMethod.getDeclaringClass());\n \t\tboolean dependsOnBean = !Modifier.isStatic(factoryMethod.getModifiers());\n \t\tVisibility accessVisibility = getAccessVisibility(registeredBean, factoryMethod);\n-\t\tif (accessVisibility == Visibility.PUBLIC\n-\t\t\t\t|| accessVisibility == Visibility.PACKAGE_PRIVATE) {\n+\t\tif (accessVisibility != Visibility.PRIVATE) {\n \t\t\treturn generateCodeForAccessibleFactoryMethod(beanName, beanClass, factoryMethod,\n \t\t\t\t\tdeclaringClass, dependsOnBean);\n \t\t}",
    "output": "Fix handling of protected visibility Previously, InstanceSupplierCodeGenerator used reflection if the target visibility is either protected or private, and use direct access if the target visibility is public or package private. The previous arrangement already assumed that the code is generateed in the same package as the target type. This means that protected can be used as well so this commit only use reflection if the target visibility is private"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n@@ -76,7 +76,6 @@ public ReactorNetty2WebSocketClient(HttpClient httpClient) {\n \t/**\n \t * Constructor that accepts an existing {@link HttpClient} builder\n \t * and a pre-configured {@link WebsocketClientSpec.Builder}.\n-\t * @since 5.3\n \t */\n \tpublic ReactorNetty2WebSocketClient(\n \t\t\tHttpClient httpClient, Supplier<WebsocketClientSpec.Builder> builderSupplier) {\n@@ -100,7 +99,6 @@ public HttpClient getHttpClient() {\n \t * configuration. This can be used to check the configured parameters except\n \t * for sub-protocols which depend on the {@link WebSocketHandler} that is used\n \t * for a given upgrade.\n-\t * @since 5.3\n \t */\n \tpublic WebsocketClientSpec getWebsocketClientSpec() {\n \t\treturn buildSpec(null);",
    "output": "Remove incorrect [@]since tags"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n@@ -59,7 +59,6 @@\n  * @see #setDefaultLocale\n  * @see #setDefaultTimeZone\n  */\n-@SuppressWarnings(\"deprecation\")\n public class CookieLocaleResolver extends AbstractLocaleContextResolver {\n \n \t/**",
    "output": "Remove unnecessary suppressing of deprecation"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n@@ -289,7 +289,8 @@ void wellKnownModules() throws JsonProcessingException, UnsupportedEncodingExcep\n \n \t\t// Kotlin module\n \t\tIntRange range = new IntRange(1, 3);\n-\t\tassertThat(new String(objectMapper.writeValueAsBytes(range), \"UTF-8\")).isEqualTo(\"{\\\"start\\\":1,\\\"end\\\":3}\");\n+\t\t// temporarily change the assertion, see https://github.com/FasterXML/jackson-module-kotlin/issues/582\n+\t\tassertThat(new String(objectMapper.writeValueAsBytes(range), \"UTF-8\")).isEqualTo(\"{\\\"start\\\":1,\\\"end\\\":3,\\\"endExclusive\\\":4}\");\n \t}\n \n \t@Test  // gh-22576",
    "output": "Upgrade to Kotlin 1.7.20 This commit also temporarily changes a test assertion for the Jackson Kotlin module. As of https://youtrack.jetbrains.com/issue/, Kotlin enhanced the `IntRange` and this change is not supported yet by the Jackson Kotlin module. An issue has been reported here FasterXML/jackson-module-kotlin"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java b/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.context.aot;\n \n-import java.util.List;\n-\n import org.junit.jupiter.api.Test;\n \n import org.springframework.beans.factory.support.RootBeanDefinition;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java b/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java\n--- a/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java\n+++ b/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java\n@@ -57,7 +57,7 @@ public interface AotApplicationContextInitializer<C extends ConfigurableApplicat\n \t * @param initializerClassNames the class names of the initializers to load\n \t * @return a new {@link AotApplicationContextInitializer} instance\n \t */\n-\tstatic <C extends ConfigurableApplicationContext> ApplicationContextInitializer<C> forInitializerClasses(\n+\tstatic <C extends ConfigurableApplicationContext> AotApplicationContextInitializer<C> forInitializerClasses(\n \t\t\tString... initializerClassNames) {\n \n \t\tAssert.noNullElements(initializerClassNames, \"'initializerClassNames' must not contain null elements\");",
    "output": "Fix factory method return type"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -745,7 +745,8 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\tFileSystem fileSystem;\n \t\ttry {\n \t\t\tfileSystem = FileSystems.getFileSystem(rootDirResource.getURI().resolve(\"/\"));\n-\t\t} catch (Exception e) {\n+\t\t}\n+\t\tcatch (Exception ex) {\n \t\t\tfileSystem = FileSystems.newFileSystem(rootDirResource.getURI().resolve(\"/\"), Map.of(),\n \t\t\t\t\tClassUtils.getDefaultClassLoader());\n \t\t}\n@@ -769,17 +770,20 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t\t\tif (getPathMatcher().match(patternPath.toString(), file.toString())) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tresult.add(new UrlResource(file.toUri()));\n-\t\t\t\t\t} catch (MalformedURLException e) {\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (MalformedURLException ex) {\n \t\t\t\t\t\t// ignore\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t});\n-\t\t} catch (NoSuchFileException e) {\n+\t\t}\n+\t\tcatch (NoSuchFileException ex) {\n \t\t\t// ignore\n \t\t}\n \t\ttry {\n \t\t\tfileSystem.close();\n-\t\t} catch (UnsupportedOperationException e) {\n+\t\t}\n+\t\tcatch (UnsupportedOperationException ex) {\n \t\t\t// ignore\n \t\t}\n \t\treturn result;",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java b/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java\n@@ -51,12 +51,21 @@ public TestGenerationContext(ClassNameGenerator classNameGenerator) {\n \n \t/**\n \t * Create an instance using the specified {@code target}.\n-\t * @param target the default target class to use\n+\t * @param target the default target class name to use\n \t */\n \tpublic TestGenerationContext(ClassName target) {\n \t\tthis(new ClassNameGenerator(target));\n \t}\n \n+\t/**\n+\t * Create an instance using the specified {@code target}.\n+\t * @param target the default target class to use\n+\t */\n+\tpublic TestGenerationContext(Class<?> target) {\n+\t\tthis(ClassName.get(target));\n+\t}\n+\n+\n \t/**\n \t * Create an instance using {@link #TEST_TARGET} as the {@code target}.\n \t */",
    "output": "Add shortcut in TestGenerationContext"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java\n@@ -372,17 +372,7 @@ public InvocableHandlerMethod getExceptionHandlerMethod(Throwable ex, HandlerMet\n \t */\n \tpublic SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {\n \t\tClass<?> handlerType = handlerMethod.getBeanType();\n-\t\tSessionAttributesHandler result = this.sessionAttributesHandlerCache.get(handlerType);\n-\t\tif (result == null) {\n-\t\t\tsynchronized (this.sessionAttributesHandlerCache) {\n-\t\t\t\tresult = this.sessionAttributesHandlerCache.get(handlerType);\n-\t\t\t\tif (result == null) {\n-\t\t\t\t\tresult = new SessionAttributesHandler(handlerType);\n-\t\t\t\t\tthis.sessionAttributesHandlerCache.put(handlerType, result);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n+\t\treturn this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, SessionAttributesHandler::new);\n \t}\n \n }",
    "output": "Remove unnecessary sync block in ControllerMethodResolver"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n@@ -18,7 +18,6 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -241,7 +240,6 @@ void multipartRequestWrapped() throws Exception {\n \t\tFilter filter = new RequestWrappingFilter();\n \t\tMockMvc mockMvc = standaloneSetup(new MultipartController()).addFilter(filter).build();\n \n-\t\tMap<String, String> jsonMap = Collections.singletonMap(\"name\", \"yeeeah\");\n \t\tmockMvc.perform(multipart(\"/json\").file(jsonPart)).andExpect(status().isFound());\n \t}\n ",
    "output": "Remove unused variable in test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n@@ -47,7 +47,6 @@\n import org.springframework.core.codec.Hints;\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n-import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n import org.springframework.core.log.LogFormatUtils;\n import org.springframework.http.MediaType;\n import org.springframework.http.codec.HttpMessageEncoder;\n@@ -74,8 +73,6 @@ public abstract class AbstractJackson2Encoder extends Jackson2CodecSupport imple\n \n \tprivate static final byte[] EMPTY_BYTES = new byte[0];\n \n-\tprivate static DataBuffer EMPTY_BUFFER = DefaultDataBufferFactory.sharedInstance.wrap(EMPTY_BYTES);\n-\n \tprivate static final Map<String, JsonEncoding> ENCODINGS;\n \n \tstatic {",
    "output": "Remove unused EMPTY_BUFFER constant"
  },
  {
    "input": "diff --git a/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java b/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java\n--- a/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java\n+++ b/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java\n@@ -21,7 +21,6 @@\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.annotation.Order;\n-import org.springframework.core.test.io.support.MockSpringFactoriesLoader;\n \n import static org.assertj.core.api.Assertions.assertThat;\n ",
    "output": "Remove unnecessary import"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n@@ -114,7 +114,7 @@ public boolean isDone() {\n \t * {@link java.util.concurrent.CancellationException} if the future has been cancelled.\n \t * @return the value associated with this future\n \t */\n-\t@Override\n+\t@Override  @Nullable\n \tpublic T get() throws InterruptedException, ExecutionException {\n \t\treturn this.settableTask.get();\n \t}",
    "output": "Add missing @Nullable in SettableListenableFuture"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java\n@@ -160,7 +160,7 @@ protected void closeConnection() throws Exception {\n \t}\n \n \t@Override\n-\tprotected boolean isConnected() {\n+\tpublic boolean isConnected() {\n \t\treturn (this.webSocketSession != null && this.webSocketSession.isOpen());\n \t}\n ",
    "output": "Make WebSocketConnectionManager#isConnected public"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n@@ -107,12 +107,16 @@ void endToEndTests() {\n \t@Test\n \tvoid endToEndTestsForEntireSpringTestModule() {\n \t\t// AOT BUILD-TIME: CLASSPATH SCANNING\n-\t\tList<Class<?>> testClasses = createTestClassScanner()\n+\t\tList<Class<?>> testClasses =\n+\t\t\t\t// FYI: you can limit execution to a particular set of test classes as follows.\n+\t\t\t\t// List.of(DirtiesContextTransactionalTestNGSpringContextTests.class, ...);\n+\t\t\t\tcreateTestClassScanner()\n \t\t\t\t.scan()\n-\t\t\t\t// FYI: you can limit execution to a particular package as follows.\n+\t\t\t\t// FYI: you can limit execution to a particular package and its subpackages as follows.\n \t\t\t\t// .scan(\"org.springframework.test.context.junit.jupiter\")\n \t\t\t\t.toList();\n \n+\n \t\t// AOT BUILD-TIME: PROCESSING\n \t\tInMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\n \t\tTestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles);",
    "output": "Improve tips for using endToEndTestsForEntireSpringTestModule"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java b/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.http;\n \n+import java.io.Serializable;\n+\n import org.springframework.util.Assert;\n \n /**\n@@ -27,7 +29,7 @@\n  * @see <a href=\"https://www.iana.org/assignments/http-status-codes\">HTTP Status Code Registry</a>\n  * @see <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">List of HTTP status codes - Wikipedia</a>\n  */\n-public sealed interface HttpStatusCode permits DefaultHttpStatusCode, HttpStatus {\n+public sealed interface HttpStatusCode extends Serializable permits DefaultHttpStatusCode, HttpStatus {\n \n \t/**\n \t * Return the integer value of this status code.",
    "output": "Make HttpStatusCode extend Serializable `HttpStatusCode` instance only hold an int value and are held by `Serializable` classes, so this commit enforces this. Without this change, Java 19+ will emit a compiler warning as `Serializable` classes use `HttpStatusCode` as a field"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java b/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java\n--- a/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java\n@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.web.util;\n+\n+import org.springframework.aot.hint.RuntimeHints;\n+import org.springframework.aot.hint.RuntimeHintsRegistrar;\n+\n+/**\n+ * {@link RuntimeHintsRegistrar} implementation that registers resource\n+ * hints for web util classes.\n+ *\n+ * @author Sebastien Deleuze\n+ * @since 6.0\n+ */\n+class WebUtilRuntimeHints implements RuntimeHintsRegistrar {\n+\n+\t@Override\n+\tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n+\t\thints.resources().registerPattern(\"org/springframework/web/util/HtmlCharacterEntityReferences.properties\");\n+\t}\n+}",
    "output": "Add resource hints for HtmlCharacterEntityReferences.properties"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2002-2022 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.core.annotation;\n-\n-/**\n- * Marker interface implemented by synthesized annotation proxies.\n- *\n- * <p>Used to detect whether an annotation has already been synthesized.\n- *\n- * @author Sam Brannen\n- * @since 4.2\n- * @deprecated For removal prior to Spring Framework 6.0; use\n- * {@link AnnotationUtils#isSynthesizedAnnotation(java.lang.annotation.Annotation)}\n- * instead.\n- */\n-@Deprecated\n-public interface SynthesizedAnnotation {\n-}",
    "output": "Remove deprecated SynthesizedAnnotation interface The SynthesizedAnnotation interface is no longer used in the core Spring Framework and should not be used by external parties either"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java\n@@ -92,6 +92,7 @@ private static List<String> findFiles(Path outputPath) throws IOException {\n \t\t\t\t.map(Path::toAbsolutePath)\n \t\t\t\t.map(Path::toString)\n \t\t\t\t.map(path -> path.substring(prefixLength))\n+\t\t\t\t.map(path -> path.replace('\\\\', '/')) // convert Windows path\n \t\t\t\t.toList();\n \t}\n ",
    "output": "Fix TestAotProcessorTests on MS Windows"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n@@ -46,10 +46,10 @@ public class ClassPathResource extends AbstractFileResolvingResource {\n \tprivate final String path;\n \n \t@Nullable\n-\tprivate ClassLoader classLoader;\n+\tprivate final ClassLoader classLoader;\n \n \t@Nullable\n-\tprivate Class<?> clazz;\n+\tprivate final Class<?> clazz;\n \n \n \t/**\n@@ -83,6 +83,7 @@ public ClassPathResource(String path, @Nullable ClassLoader classLoader) {\n \t\t}\n \t\tthis.path = pathToUse;\n \t\tthis.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());\n+\t\tthis.clazz = null;\n \t}\n \n \t/**\n@@ -96,6 +97,7 @@ public ClassPathResource(String path, @Nullable ClassLoader classLoader) {\n \tpublic ClassPathResource(String path, @Nullable Class<?> clazz) {\n \t\tAssert.notNull(path, \"Path must not be null\");\n \t\tthis.path = StringUtils.cleanPath(path);\n+\t\tthis.classLoader = null;\n \t\tthis.clazz = clazz;\n \t}\n ",
    "output": "Make fields in ClassPathResource final"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java b/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java\n@@ -0,0 +1,10 @@\n+/**\n+ * Support for registering hints for reflection and resources in the\n+ * <em>Spring TestContext Framework</em>.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.test.context.aot.hint;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info.java file"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java b/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n@@ -117,7 +117,7 @@ public String getConversationId() {\n \t\tac.registerBeanDefinition(\"tb1\", bd1);\n \n \t\tGenericBeanDefinition bd2 = new GenericBeanDefinition();\n-\t\tbd2.setBeanClassName(\"#{tb1.class.name}\");\n+\t\tbd2.setBeanClassName(\"#{tb1.class}\");\n \t\tbd2.setScope(\"myScope\");\n \t\tbd2.getPropertyValues().add(\"name\", \"{ XXX#{tb0.name}YYY#{mySpecialAttr}ZZZ }\");\n \t\tbd2.getPropertyValues().add(\"age\", \"#{mySpecialAttr}\");",
    "output": "Fix sporadically failing SpEL test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java b/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java\n@@ -22,6 +22,7 @@\n \n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n@@ -82,6 +83,7 @@ public boolean isSupportedTestClass(Class<?> testClass) {\n \t * initializer for the specified test class\n \t * @see #isSupportedTestClass(Class)\n \t */\n+\t@Nullable\n \tpublic ApplicationContextInitializer<ConfigurableApplicationContext> getContextInitializer(Class<?> testClass) {\n \t\tSupplier<ApplicationContextInitializer<ConfigurableApplicationContext>> supplier =\n \t\t\t\tthis.contextInitializers.get(testClass.getName());",
    "output": "Add missing @Nullable declaration in AotTestMappings"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java b/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java\n@@ -41,6 +41,7 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \n \tprivate void registerType(ReflectionHints reflectionHints, String className) {\n \t\treflectionHints.registerType(TypeReference.of(className),\n-\t\t\t\tbuilder -> builder.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n+\t\t\t\tbuilder -> builder.onReachableType(TypeReference.of(Jackson2ObjectMapperBuilder.class))\n+\t\t\t\t\t\t.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n \t}\n }",
    "output": "Add missing condition in JacksonModulesRuntimeHints"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n--- a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n+++ b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n@@ -63,7 +63,7 @@ public DefaultGenerationContext(ClassNameGenerator classNameGenerator, Generated\n \t * @param generatedFiles the generated files\n \t * @param runtimeHints the runtime hints\n \t */\n-\tpublic DefaultGenerationContext(GeneratedClasses generatedClasses,\n+\tDefaultGenerationContext(GeneratedClasses generatedClasses,\n \t\t\tGeneratedFiles generatedFiles, RuntimeHints runtimeHints) {\n \t\tAssert.notNull(generatedClasses, \"'generatedClasses' must not be null\");\n \t\tAssert.notNull(generatedFiles, \"'generatedFiles' must not be null\");",
    "output": "Make DefaultGenerationContext(GeneratedClasses,...) package private The DefaultGenerationContext constructor which accepts an instance of GeneratedClasses is now package private since GeneratedClasses can only be created within the `org.springframework.aot.generate` package"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -191,7 +191,8 @@ else if (ArrayList.class == collectionType || List.class == collectionType) {\n \t\telse if (LinkedList.class == collectionType) {\n \t\t\treturn new LinkedList<>();\n \t\t}\n-\t\telse if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {\n+\t\telse if (TreeSet.class == collectionType || NavigableSet.class == collectionType\n+\t\t\t\t|| SortedSet.class == collectionType) {\n \t\t\treturn new TreeSet<>();\n \t\t}\n \t\telse if (EnumSet.class.isAssignableFrom(collectionType)) {",
    "output": "Add missing TreeSet to CollectionFactory.createCollection"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -191,7 +191,7 @@ else if (ArrayList.class == collectionType || List.class == collectionType) {\n \t\telse if (LinkedList.class == collectionType) {\n \t\t\treturn new LinkedList<>();\n \t\t}\n-\t\telse if (SortedSet.class == collectionType || NavigableSet.class == collectionType) {\n+\t\telse if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {\n \t\t\treturn new TreeSet<>();\n \t\t}\n \t\telse if (EnumSet.class.isAssignableFrom(collectionType)) {",
    "output": "Add missing TreeSet to CollectionFactory.createCollection"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -568,6 +568,8 @@ private CodeBlock generateAddPostProcessorCode(Map<String, String> mappings) {\n \t\t\t\t\tMAPPINGS_VARIABLE, type, from));\n \t\t\tbuilder.addStatement(\"$T $L = new $T($T.class)\", RootBeanDefinition.class,\n \t\t\t\t\tBEAN_DEFINITION_VARIABLE, RootBeanDefinition.class, ImportAwareAotBeanPostProcessor.class);\n+\t\t\tbuilder.addStatement(\"$L.setRole($T.ROLE_INFRASTRUCTURE)\",\n+\t\t\t\t\tBEAN_DEFINITION_VARIABLE, BeanDefinition.class);\n \t\t\tbuilder.addStatement(\"$L.setInstanceSupplier(() -> new $T($L))\",\n \t\t\t\t\tBEAN_DEFINITION_VARIABLE, ImportAwareAotBeanPostProcessor.class, MAPPINGS_VARIABLE);\n \t\t\tbuilder.addStatement(\"$L.registerBeanDefinition($S, $L)\",",
    "output": "Make sure that ImportAwareAotBeanPostProcessor has role infrastructure"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n@@ -94,13 +94,13 @@ void applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorWithMapEntr\n \t@Test\n \tvoid applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorAfterApplicationContextAwareProcessor() {\n \t\tBeanFactoryInitializationAotContribution contribution = getContribution(\n-\t\t\t\tImportConfiguration.class);\n+\t\t\t\tTestAwareCallbackConfiguration.class);\n \t\tcontribution.applyTo(this.generationContext, this.beanFactoryInitializationCode);\n \t\tcompile((initializer, compiled) -> {\n-\t\t\tGenericApplicationContext freshContext = new AnnotationConfigApplicationContext();\n+\t\t\tGenericApplicationContext freshContext = new GenericApplicationContext();\n \t\t\tDefaultListableBeanFactory freshBeanFactory = freshContext.getDefaultListableBeanFactory();\n \t\t\tinitializer.accept(freshBeanFactory);\n-\t\t\tfreshContext.registerBean(TestAwareCallbackConfiguration.class);\n+\t\t\tfreshContext.registerBean(TestAwareCallbackBean.class);\n \t\t\tfreshContext.refresh();\n \t\t\tTestAwareCallbackBean bean = freshContext.getBean(TestAwareCallbackBean.class);\n \t\t\tassertThat(bean.instances).hasSize(2);",
    "output": "Fix test Contribution was not applied on the actual use case"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -568,8 +568,8 @@ private CodeBlock generateAddPostProcessorCode(Map<String, String> mappings) {\n \t\t\t\t\tMAPPINGS_VARIABLE, type, from));\n \t\t\tbuilder.addStatement(\"$T $L = new $T($T.class)\", RootBeanDefinition.class,\n \t\t\t\t\tBEAN_DEFINITION_VARIABLE, RootBeanDefinition.class, ImportAwareAotBeanPostProcessor.class);\n-\t\t\tbuilder.addStatement(\"$L.getConstructorArgumentValues().addIndexedArgumentValue(0, $L)\",\n-\t\t\t\t\tBEAN_DEFINITION_VARIABLE, MAPPINGS_VARIABLE);\n+\t\t\tbuilder.addStatement(\"$L.setInstanceSupplier(() -> new $T($L))\",\n+\t\t\t\t\tBEAN_DEFINITION_VARIABLE, ImportAwareAotBeanPostProcessor.class, MAPPINGS_VARIABLE);\n \t\t\tbuilder.addStatement(\"$L.registerBeanDefinition($S, $L)\",\n \t\t\t\t\tBEAN_FACTORY_VARIABLE, BEAN_NAME, BEAN_DEFINITION_VARIABLE);\n \t\t\treturn builder.build();",
    "output": "Fix custom bean definition to stop using reflection"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n--- a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n@@ -58,7 +58,6 @@\n  * <li>{@link org.springframework.test.context.support.DelegatingSmartContextLoader DelegatingSmartContextLoader}</li>\n  * <li>{@link org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader}</li>\n  * <li>{@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader}</li>\n- * <li>{@link org.springframework.test.context.support.GenericPropertiesContextLoader GenericPropertiesContextLoader}</li>\n  * <li>{@link org.springframework.test.context.web.WebDelegatingSmartContextLoader WebDelegatingSmartContextLoader}</li>\n  * <li>{@link org.springframework.test.context.web.AnnotationConfigWebContextLoader AnnotationConfigWebContextLoader}</li>\n  * <li>{@link org.springframework.test.context.web.GenericXmlWebContextLoader GenericXmlWebContextLoader}</li>",
    "output": "Remove remaining reference to GenericPropertiesContextLoader"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n@@ -41,7 +41,7 @@ public CompileWithTargetClassAccessClassLoader(ClassLoader testClassLoader) {\n \n \t@Override\n \tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n-\t\tif (name.startsWith(\"org.junit\") || name.startsWith(\"org.hamcrest\")) {\n+\t\tif (name.startsWith(\"org.junit\")) {\n \t\t\treturn Class.forName(name, false, this.testClassLoader);\n \t\t}\n \t\treturn super.loadClass(name);",
    "output": "Remove Hamcrest support from CompileWithTargetClassAccessClassLoader CompileWithTargetClassAccessClassLoader is currently only used within the CompileWithTargetClassAccessExtension which is dedicated to JUnit Jupiter support which in turn should not have any direct dependencies on Hamcrest. In other words, the JupiterTestEngine should not load any Hamcrest types that would cause issues with the CompileWithTargetClassAccessClassLoader"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n@@ -119,16 +119,14 @@ private void runTestWithModifiedClassPath(\n \t\t\t\ttestClass.getClassLoader());\n \t\tThread.currentThread().setContextClassLoader(forkedClassPathClassLoader);\n \t\ttry {\n-\t\t\trunTest(forkedClassPathClassLoader, testClass, testMethod);\n+\t\t\trunTest(testClass, testMethod);\n \t\t}\n \t\tfinally {\n \t\t\tThread.currentThread().setContextClassLoader(originalClassLoader);\n \t\t}\n \t}\n \n-\tprivate void runTest(ClassLoader classLoader, Class<?> testClass, Method testMethod)\n-\t\t\tthrows Throwable {\n-\n+\tprivate void runTest(Class<?> testClass, Method testMethod) throws Throwable {\n \t\tLauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n \t\t\t\t.selectors(selectMethod(getFullyQualifiedMethodName(testClass, testMethod)))\n \t\t\t\t.filters(includeEngines(\"junit-jupiter\"))",
    "output": "Remove unused method parameter"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java\n@@ -44,7 +44,7 @@\n  * @see BootstrapContext\n  * @see TestContextBootstrapper\n  */\n-abstract class BootstrapUtils {\n+public abstract class BootstrapUtils {\n \n \tprivate static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME =\n \t\t\t\"org.springframework.test.context.support.DefaultBootstrapContext\";",
    "output": "Make BootstrapUtils public"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java\n@@ -33,6 +33,7 @@\n import org.springframework.http.server.reactive.AbstractListenerWriteProcessor;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.reactive.socket.CloseStatus;\n import org.springframework.web.reactive.socket.HandshakeInfo;\n import org.springframework.web.reactive.socket.WebSocketHandler;\n@@ -247,7 +248,12 @@ public void onError(Throwable ex) {\n \t\tif (this.handlerCompletionMono != null) {\n \t\t\tthis.handlerCompletionMono.onError(ex);\n \t\t}\n-\t\tclose(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));\n+\t\tif(!StringUtils.hasText(ex.getMessage())) {\n+\t\t\tclose(CloseStatus.SERVER_ERROR);\n+\t\t}\n+\t\telse {\n+\t\t\tclose(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Improve setting of WebSocket error status"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java\n@@ -23,10 +23,6 @@\n  * AOT processor that makes bean factory initialization contributions by\n  * processing {@link ConfigurableListableBeanFactory} instances.\n  *\n- * <p>Note: Beans implementing interface will not have registration methods\n- * generated during AOT processing unless they also implement\n- * {@link org.springframework.beans.factory.aot.BeanRegistrationExcludeFilter}.\n- *\n  * @author Phillip Webb\n  * @author Stephane Nicoll\n  * @since 6.0",
    "output": "Fix BeanFactoryInitializationAotProcessor javadoc Update javadoc since BeanRegistrationExcludeFilter is not longer an exclude signal"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n@@ -37,8 +37,8 @@\n import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.test.context.BootstrapWith;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestContextAnnotationUtils;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n \n import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;\n import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n@@ -170,7 +170,7 @@ private boolean isSpringTestClass(Class<?> clazz) {\n \n \tprivate static boolean isJupiterSpringTestClass(Class<?> clazz) {\n \t\treturn MergedAnnotations.search(TYPE_HIERARCHY)\n-\t\t\t\t.withEnclosingClasses(TestContextAnnotationUtils::searchEnclosingClass)\n+\t\t\t\t.withEnclosingClasses(ClassUtils::isInnerClass)\n \t\t\t\t.from(clazz)\n \t\t\t\t.stream(EXTEND_WITH_ANNOTATION_NAME)\n \t\t\t\t.map(annotation -> annotation.getClassArray(VALUE))",
    "output": "Fix @ExtendWith search in TestClassScanner The search algorithm for @ExtendWith should not be tied to Spring's @NestedTestConfiguration semantics. Rather, general JUnit annotation search semantics should be used to find @ExtendWith"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n@@ -490,7 +490,7 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\treturn defineClass(className, b, loader, protectionDomain, null);\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")  // on JDK 9\n+\t@SuppressWarnings({\"deprecation\", \"serial\"})\n \tpublic static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\t\tProtectionDomain protectionDomain, Class<?> contextClass) throws Exception {\n \n@@ -578,6 +578,16 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\t\tcatch (InvocationTargetException ex) {\n \t\t\t\tthrow new CodeGenerationException(ex.getTargetException());\n \t\t\t}\n+\t\t\tcatch (IllegalAccessException ex) {\n+\t\t\t\tthrow new CodeGenerationException(ex) {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String getMessage() {\n+\t\t\t\t\t\treturn \"ClassLoader mismatch for [\" + contextClass.getName() +\n+\t\t\t\t\t\t\t\t\"]: JVM should be started with --add-opens=java.base/java.lang=ALL-UNNAMED \" +\n+\t\t\t\t\t\t\t\t\"for ClassLoader.defineClass to be accessible on \" + loader.getClass().getName();\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tthrow new CodeGenerationException(ex);\n \t\t\t}",
    "output": "Improve diagnostics for CGLIB ClassLoader mismatch with --add-opens hint"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n@@ -33,6 +33,7 @@\n  * annotated element so that it can be discovered and invoked if necessary.\n  *\n  * @author Stephane Nicoll\n+ * @author Sam Brannen\n  * @since 6.0\n  * @see SimpleReflectiveProcessor\n  */\n@@ -45,6 +46,7 @@\n \t/**\n \t * Alias for {@link #processors()}.\n \t */\n+\t@AliasFor(\"processors\")\n \tClass<? extends ReflectiveProcessor>[] value() default SimpleReflectiveProcessor.class;\n \n \t/**",
    "output": "Fix attribute aliasing in @Reflective"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/package-info.java b/spring-core/src/main/java/org/springframework/aot/package-info.java\n--- a/spring-core/src/main/java/org/springframework/aot/package-info.java\n+++ b/spring-core/src/main/java/org/springframework/aot/package-info.java\n@@ -0,0 +1,9 @@\n+/**\n+ * Core package for Spring AOT infrastructure.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.aot;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -296,8 +296,8 @@ private void addConventionMappings() {\n \t\t\t\t\t\t\tSupport for convention-based annotation attribute overrides is \\\n \t\t\t\t\t\t\tdeprecated and will be removed in Spring Framework 6.1. Please \\\n \t\t\t\t\t\t\tannotate the '%s' attribute in @%s with an appropriate @AliasFor \\\n-\t\t\t\t\t\t\tdeclaration.\"\"\"\n-\t\t\t\t\t\t\t\t.formatted(name, rootAnnotationTypeName));\n+\t\t\t\t\t\t\tdeclaration -- for example, @AliasFor(annotation = %s.class).\"\"\"\n+\t\t\t\t\t\t\t\t.formatted(name, rootAnnotationTypeName, this.annotationType.getName()));\n \t\t\t\t}\n \t\t\t\tmappings[i] = mapped;\n \t\t\t\tMirrorSet mirrors = getMirrorSets().getAssigned(i);",
    "output": "Improve diagnostics for convention-based annotation attribute overrides The warning message logged for an annotation that still uses convention-based overrides now includes a concrete suggestion for how the problem may potentially be fixed. WARN - Support for convention-based annotation attribute overrides is deprecated and will be removed in Spring Framework 6.1. Please annotate the 'locations' attribute in @org.springframework.core.annotation.MergedAnnotationsTests$ConventionBasedComposedContextConfiguration with an appropriate @AliasFor declaration -- for example, @AliasFor(annotation = org.springframework.core.annotation.MergedAnnotationsTests$ContextConfiguration.class)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java b/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java\n--- a/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java\n@@ -286,8 +286,7 @@ public static abstract class WithMetaAnnotation {\n \t}\n \n \t@Retention(RetentionPolicy.RUNTIME)\n-\t// Must be public. See AnnotationAttributesReadingVisitor.recursivelyCollectMetaAnnotations().\n-\tpublic @interface DirectAnnotation {\n+\t@interface DirectAnnotation {\n \t}\n \n \t@DirectAnnotation\n@@ -323,8 +322,7 @@ public static abstract class WithMetaAnnotationAttributes {\n \t}\n \n \t@Retention(RetentionPolicy.RUNTIME)\n-\t// Must be public. See AnnotationAttributesReadingVisitor.recursivelyCollectMetaAnnotations().\n-\tpublic @interface AnnotationAttributes {\n+\t@interface AnnotationAttributes {\n \n \t\tString name();\n ",
    "output": "Upgrade test annotations due to removal of AnnotationAttributesReadingVisitor Annotations are no longer required to be public when looked up via ASM since 6.0 M1"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java\n@@ -621,6 +621,11 @@ protected String initLookupPath(HttpServletRequest request) {\n \t\t\t}\n \t\t\treturn super.initLookupPath(request);\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \"PatternParser = \" + (getPatternParser() != null ? getPatternParser().getClass().getSimpleName() : null) ;\n+\t\t}\n \t}\n \n }",
    "output": "Improve display names in CrossOriginTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n@@ -84,12 +84,14 @@ protected void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n \t@Bean\n \t@Nullable\n \tpublic TaskScheduler defaultSockJsTaskScheduler() {\n-\t\tif (initHandlerRegistry().requiresTaskScheduler()) {\n-\t\t\tThreadPoolTaskScheduler threadPoolScheduler = new ThreadPoolTaskScheduler();\n-\t\t\tthreadPoolScheduler.setThreadNamePrefix(\"SockJS-\");\n-\t\t\tthreadPoolScheduler.setPoolSize(Runtime.getRuntime().availableProcessors());\n-\t\t\tthreadPoolScheduler.setRemoveOnCancelPolicy(true);\n-\t\t\tthis.scheduler = threadPoolScheduler;\n+\t\tif (this.scheduler == null) {\n+\t\t\tif (initHandlerRegistry().requiresTaskScheduler()) {\n+\t\t\t\tThreadPoolTaskScheduler threadPoolScheduler = new ThreadPoolTaskScheduler();\n+\t\t\t\tthreadPoolScheduler.setThreadNamePrefix(\"SockJS-\");\n+\t\t\t\tthreadPoolScheduler.setPoolSize(Runtime.getRuntime().availableProcessors());\n+\t\t\t\tthreadPoolScheduler.setRemoveOnCancelPolicy(true);\n+\t\t\t\tthis.scheduler = threadPoolScheduler;\n+\t\t\t}\n \t\t}\n \t\treturn this.scheduler;\n \t}",
    "output": "Add missing check to avoid re-initialization Noticed during review of that a check protecting against re-initialization was accidentally removed in commit 3d6e38bb43fe86cc58bc816eff13b968c1e0884f"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n@@ -237,10 +237,11 @@ private void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? e\n \t\t\tcontext.setResourceLoader(resourceLoader);\n \t\t}\n \n+\t\tString relativePathLocation = \"foo\";\n \t\tString pingLocation = \"ping:foo\";\n \t\tString fileLocation = \"file:foo\";\n \n-\t\tResource resource = context.getResource(pingLocation);\n+\t\tResource resource = context.getResource(relativePathLocation);\n \t\tassertThat(resource).isInstanceOf(defaultResourceType);\n \t\tresource = context.getResource(fileLocation);\n \t\tassertThat(resource).isInstanceOf(FileUrlResource.class);\n@@ -251,6 +252,9 @@ private void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? e\n \t\tassertThat(resource).asInstanceOf(type(ByteArrayResource.class))\n \t\t\t.extracting(bar -> new String(bar.getByteArray(), UTF_8))\n \t\t\t.isEqualTo(\"pong:foo\");\n+\n+\t\tresource = context.getResource(relativePathLocation);\n+\t\tassertThat(resource).isInstanceOf(defaultResourceType);\n \t\tresource = context.getResource(fileLocation);\n \t\tassertThat(resource).isInstanceOf(FileUrlResource.class);\n \t}",
    "output": "Fix GenericApplicationContextTests on Microsoft Windows The tests introduced in commit 9868c28c73 pass on Mac OS and Linux but fail on Microsoft Windows. This commit updates the tests so that they pass on MS Windows as well"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n@@ -232,7 +232,7 @@ void getResourceWithCustomResourceLoader() {\n \t\tassertGetResourceSemantics(new FileSystemResourceLoader(), FileSystemResource.class);\n \t}\n \n-\tprivate void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? extends Resource> defaultResouceType) {\n+\tprivate void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? extends Resource> defaultResourceType) {\n \t\tif (resourceLoader != null) {\n \t\t\tcontext.setResourceLoader(resourceLoader);\n \t\t}\n@@ -241,7 +241,7 @@ private void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? e\n \t\tString fileLocation = \"file:foo\";\n \n \t\tResource resource = context.getResource(pingLocation);\n-\t\tassertThat(resource).isInstanceOf(defaultResouceType);\n+\t\tassertThat(resource).isInstanceOf(defaultResourceType);\n \t\tresource = context.getResource(fileLocation);\n \t\tassertThat(resource).isInstanceOf(FileUrlResource.class);\n ",
    "output": "Fix typo in test"
  },
  {
    "input": "diff --git a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n--- a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n+++ b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n@@ -45,6 +45,7 @@ class ConstantFieldSubstitutionProcessor extends SubstitutionProcessor {\n \tprivate static Pattern[] patterns = {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.core.NativeDetector#imageCode\")),\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*Present\"),\n+\t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*_PRESENT\")\n \t};\n \n \tprivate final ThrowawayClassLoader throwawayClassLoader;",
    "output": "Make *_PRESENT fields constant at build time"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,8 +40,7 @@\n public class DefaultParameterNameDiscoverer extends PrioritizedParameterNameDiscoverer {\n \n \tpublic DefaultParameterNameDiscoverer() {\n-\t\t// TODO Remove this conditional inclusion when upgrading to Kotlin 1.5, see https://youtrack.jetbrains.com/issue/KT-44594\n-\t\tif (KotlinDetector.isKotlinReflectPresent() && !NativeDetector.inNativeImage()) {\n+\t\tif (KotlinDetector.isKotlinReflectPresent()) {\n \t\t\taddDiscoverer(new KotlinReflectionParameterNameDiscoverer());\n \t\t}\n \t\taddDiscoverer(new StandardReflectionParameterNameDiscoverer());",
    "output": "Remove outdated NativeDetector check for Kotlin reflection"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java\n@@ -60,10 +60,11 @@ protected BeanRegistrationCodeFragments(BeanRegistrationCodeFragments codeFragme\n \n \t/**\n \t * Package-private constructor exclusively for\n-\t * {@link DefaultBeanRegistrationCodeFragments}.\n+\t * {@link DefaultBeanRegistrationCodeFragments}. All methods are overridden\n+\t * so {@code this.codeFragments} is never actually used.\n \t */\n \tBeanRegistrationCodeFragments() {\n-\t\tthis.codeFragments = null;\n+\t\tthis.codeFragments = this;\n \t}\n \n \t/**",
    "output": "Fix null assignment to non-nullable field Update `BeanRegistrationCodeFragments` package-private constructor to set `codeFragments` to `this` rather than `null`. The field is never actually read by `DefaultBeanRegistrationCodeFragments` since all methods are overridden"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java\n@@ -33,6 +33,13 @@\n  */\n class BeanRegistrationsAotProcessorTests {\n \n+\t@Test\n+\tvoid beanRegistrationsAotProcessorIsRegistered() {\n+\t\tassertThat(new AotFactoriesLoader(new DefaultListableBeanFactory())\n+\t\t\t\t.load(BeanFactoryInitializationAotProcessor.class))\n+\t\t\t\t.anyMatch(BeanRegistrationsAotProcessor.class::isInstance);\n+\t}\n+\n \t@Test\n \tvoid processAheadOfTimeReturnsBeanRegistrationsAotContributionWithRegistrations() {\n \t\tBeanRegistrationsAotProcessor processor = new BeanRegistrationsAotProcessor();",
    "output": "Add test to validate AOT infrastructure registration"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java\n@@ -34,8 +34,10 @@\n import org.springframework.aot.test.generator.compile.Compiled;\n import org.springframework.aot.test.generator.compile.TestCompiler;\n import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.aot.AotFactoriesLoader;\n import org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution;\n import org.springframework.beans.factory.aot.BeanFactoryInitializationCode;\n+import org.springframework.beans.factory.aot.BeanRegistrationAotProcessor;\n import org.springframework.beans.factory.aot.TestBeanRegistrationsAotProcessor;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.config.PropertiesFactoryBean;\n@@ -77,6 +79,12 @@ void setup() {\n \t\tthis.beanFactoryInitializationCode = new MockBeanFactoryInitializationCode();\n \t}\n \n+\t@Test\n+\tvoid scopedProxyBeanRegistrationAotProcessorIsRegistered() {\n+\t\tassertThat(new AotFactoriesLoader(this.beanFactory).load(BeanRegistrationAotProcessor.class))\n+\t\t\t\t.anyMatch(ScopedProxyBeanRegistrationAotProcessor.class::isInstance);\n+\t}\n+\n \t@Test\n \tvoid getBeanRegistrationCodeGeneratorWhenNotScopedProxy() {\n \t\tBeanDefinition beanDefinition = BeanDefinitionBuilder",
    "output": "Fix registration of ScopedProxyBeanRegistrationAotProcessor"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java b/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java\n--- a/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java\n@@ -40,13 +40,13 @@\n \t * Alias for {@link HttpExchange#value}.\n \t */\n \t@AliasFor(annotation = HttpExchange.class)\n-\tString[] value() default {};\n+\tString value() default \"\";\n \n \t/**\n \t * Alias for {@link HttpExchange#url()}.\n \t */\n \t@AliasFor(annotation = HttpExchange.class)\n-\tString[] url() default {};\n+\tString url() default \"\";\n \n \t/**\n \t * Alias for {@link HttpExchange#contentType()}.",
    "output": "Fix attribute return types in @PutExchange The return types for the `value` and `url` attributes don't match those in `@HttpExchange`"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java\n@@ -64,6 +64,7 @@ public ManagedList(int initialCapacity) {\n \t * @since 5.3.16\n \t */\n \t@SafeVarargs\n+\t@SuppressWarnings(\"varargs\")\n \tpublic static <E> ManagedList<E> of(E... elements) {\n \t\tManagedList<E> list = new ManagedList<>();\n \t\tCollections.addAll(list, elements);\n\ndiff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java\n@@ -63,6 +63,7 @@ public ManagedSet(int initialCapacity) {\n \t * @since 5.3.16\n \t */\n \t@SafeVarargs\n+\t@SuppressWarnings(\"varargs\")\n \tpublic static <E> ManagedSet<E> of(E... elements) {\n \t\tManagedSet<E> set = new ManagedSet<>();\n \t\tCollections.addAll(set, elements);",
    "output": "Fix Java 17 compiler warning about varargs"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n@@ -1281,8 +1281,8 @@ public String toString() {\n \t\tsb.append(\"; primary=\").append(this.primary);\n \t\tsb.append(\"; factoryBeanName=\").append(this.factoryBeanName);\n \t\tsb.append(\"; factoryMethodName=\").append(this.factoryMethodName);\n-\t\tsb.append(\"; initMethodNames=\").append(this.initMethodNames);\n-\t\tsb.append(\"; destroyMethodNames=\").append(this.destroyMethodNames);\n+\t\tsb.append(\"; initMethodNames=\").append(Arrays.toString(this.initMethodNames));\n+\t\tsb.append(\"; destroyMethodNames=\").append(Arrays.toString(this.destroyMethodNames));\n \t\tif (this.resource != null) {\n \t\t\tsb.append(\"; defined in \").append(this.resource.getDescription());\n \t\t}",
    "output": "Use Arrays.toString for initMethodNames and destroyMethodNames arrays in AbstractBeanDefinition#toString"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -242,12 +242,12 @@ protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (mediaTypesToUse.isEmpty()) {\n-\t\t\t\tif (body != null) {\n-\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n-\t\t\t\t}\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n \t\t\t\t}\n+\t\t\t\tif (body != null) {\n+\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n+\t\t\t\t}\n \t\t\t\treturn;\n \t\t\t}\n ",
    "output": "Fix debug log for no matching acceptableTypes"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/NativeDetector.java b/spring-core/src/main/java/org/springframework/core/NativeDetector.java\n--- a/spring-core/src/main/java/org/springframework/core/NativeDetector.java\n+++ b/spring-core/src/main/java/org/springframework/core/NativeDetector.java\n@@ -19,9 +19,6 @@\n /**\n  * A common delegate for detecting a GraalVM native image environment.\n  *\n- * <p>Requires using the {@code -H:+InlineBeforeAnalysis} native image compiler flag in order to allow code removal at\n- * build time.\n- *\n  * @author Sebastien Deleuze\n  * @since 5.3.4\n  */",
    "output": "Remove outdated comment in NativeDetector `-H:+InlineBeforeAnalysis` is enabled by default as of GraalVM 21.3"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,7 +80,7 @@\n  * @author Costin Leau\n  * @since 2.0\n  * @see HibernateJpaVendorAdapter\n- * @see org.hibernate.Session#setFlushMode\n+ * @see org.hibernate.Session#setHibernateFlushMode\n  * @see org.hibernate.Transaction#setTimeout\n  */\n @SuppressWarnings(\"serial\")\n@@ -360,10 +360,9 @@ public SessionTransactionData(SessionImplementor session, @Nullable FlushMode pr\n \t\t\tthis.readOnly = readOnly;\n \t\t}\n \n-\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic void resetSessionState() {\n \t\t\tif (this.previousFlushMode != null) {\n-\t\t\t\tthis.session.setFlushMode(this.previousFlushMode);\n+\t\t\t\tthis.session.setHibernateFlushMode(this.previousFlushMode);\n \t\t\t}\n \t\t\tif (this.needsConnectionReset &&\n \t\t\t\t\tthis.session.getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()) {",
    "output": "Fix accidental use of deprecated setFlushMode method"
  },
  {
    "input": "diff --git a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java\n--- a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java\n+++ b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java\n@@ -49,7 +49,7 @@\n  * @author Gary Russell\n  * @since 4.0\n  */\n-public class TestSocketUtils {\n+public abstract class TestSocketUtils {\n \n \t/**\n \t * The default minimum value for port ranges used when finding an available",
    "output": "Make TestSocketUtils abstract"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n@@ -21,6 +21,7 @@\n import java.util.Set;\n \n import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n import org.springframework.core.KotlinDetector;\n@@ -130,7 +131,8 @@ protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParame\n \t\tif (adapter != null) {\n \t\t\tpublisher = adapter.toPublisher(body);\n \t\t\tboolean isUnwrapped = KotlinDetector.isSuspendingFunction(bodyParameter.getMethod()) &&\n-\t\t\t\t\t!COROUTINES_FLOW_CLASS_NAME.equals(bodyType.toClass().getName());\n+\t\t\t\t\t!COROUTINES_FLOW_CLASS_NAME.equals(bodyType.toClass().getName()) &&\n+\t\t\t\t\t!Flux.class.equals(bodyType.toClass());\n \t\t\tResolvableType genericType = isUnwrapped ? bodyType : bodyType.getGeneric();\n \t\t\telementType = getElementType(adapter, genericType);\n \t\t\tactualElementType = elementType;",
    "output": "Fix unwrapping logic for ResponseEntity<Flux> This commit makes sure that the response returned by coroutine handler methods that return ResponseEntity<Flux> is unwrapped correctly"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n@@ -95,7 +95,7 @@ private ThreadPoolTaskScheduler initDefaultSockJsScheduler() {\n \t}\n \n \n-\tprivate static class DefaultSockJsSchedulerContainer implements InitializingBean, DisposableBean {\n+\tstatic class DefaultSockJsSchedulerContainer implements InitializingBean, DisposableBean {\n \n \t\t@Nullable\n \t\tprivate final ThreadPoolTaskScheduler scheduler;",
    "output": "Fix visibility of DefaultSockJsSchedulerContainer"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java b/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java\n@@ -0,0 +1,9 @@\n+/**\n+ * Support for generating code that represents the state of a bean factory.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.beans.factory.generator;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -302,7 +302,7 @@ public void checkConfigMembers(RootBeanDefinition beanDefinition) {\n \t\t\t\t\tbeanDefinition.registerExternallyManagedInitMethod(methodIdentifier);\n \t\t\t\t\tcheckedInitMethods.add(element);\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Registered init method on class [\" + this.targetClass.getName() + \"]: \" + element);\n+\t\t\t\t\t\tlogger.trace(\"Registered init method on class [\" + this.targetClass.getName() + \"]: \" + methodIdentifier);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -313,7 +313,7 @@ public void checkConfigMembers(RootBeanDefinition beanDefinition) {\n \t\t\t\t\tbeanDefinition.registerExternallyManagedDestroyMethod(methodIdentifier);\n \t\t\t\t\tcheckedDestroyMethods.add(element);\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Registered destroy method on class [\" + this.targetClass.getName() + \"]: \" + element);\n+\t\t\t\t\t\tlogger.trace(\"Registered destroy method on class [\" + this.targetClass.getName() + \"]: \" + methodIdentifier);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix log messages for init/destroy method registration"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -74,7 +74,7 @@ public static RequestPath parseAndCache(HttpServletRequest request) {\n \t */\n \tpublic static RequestPath getParsedRequestPath(ServletRequest request) {\n \t\tRequestPath path = (RequestPath) request.getAttribute(PATH_ATTRIBUTE);\n-\t\tAssert.notNull(path, \"Expected parsed RequestPath in request attribute \\\"\" + PATH_ATTRIBUTE + \"\\\".\");\n+\t\tAssert.notNull(path, () -> \"Expected parsed RequestPath in request attribute \\\"\" + PATH_ATTRIBUTE + \"\\\".\");\n \t\treturn path;\n \t}\n ",
    "output": "Make assertion message lazy in ServletRequestPathUtils"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n@@ -37,7 +37,6 @@\n \n import jakarta.annotation.Resource;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.condition.JRE;\n \n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.MergedAnnotation.Adapt;\n@@ -1871,12 +1870,10 @@ void toStringForSynthesizedAnnotations() throws Exception {\n \n \t\tassertThat(webMappingWithAliases.toString()).isNotEqualTo(synthesizedWebMapping1.toString());\n \n-\t\tif (JRE.currentVersion().ordinal() > JRE.JAVA_8.ordinal()) {\n-\t\t\t// The unsynthesized annotation for handleMappedWithSamePathAndValueAttributes()\n-\t\t\t// should produce the same toString() results as synthesized annotations for\n-\t\t\t// handleMappedWithPathAttribute() on Java 9 or higher\n-\t\t\tassertToStringForWebMappingWithPathAndValue(webMappingWithPathAndValue);\n-\t\t}\n+\t\t// The unsynthesized annotation for handleMappedWithSamePathAndValueAttributes()\n+\t\t// should produce the same toString() results as synthesized annotations for\n+\t\t// handleMappedWithPathAttribute() on Java 9 or higher\n+\t\tassertToStringForWebMappingWithPathAndValue(webMappingWithPathAndValue);\n \t\tassertToStringForWebMappingWithPathAndValue(synthesizedWebMapping1);\n \t\tassertToStringForWebMappingWithPathAndValue(synthesizedWebMapping2);\n \t}",
    "output": "Remove unnecessary JDK 9+ check in MergedAnnotationsTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java b/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java\n--- a/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java\n@@ -5,14 +5,15 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n  *\n  *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.cglib.beans;\n \n import java.security.ProtectionDomain;",
    "output": "Upgrade license header for https (nohttp rule)"
  },
  {
    "input": "diff --git a/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java b/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java\n--- a/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java\n+++ b/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java\n@@ -318,7 +318,7 @@ else if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(jakarta.inje\n \t\t\t\t\t\tmetadata.setScopedProxyMode(scopedProxyMode);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\telse if (type.startsWith(\"javax.inject\")) {\n+\t\t\t\t\telse if (type.startsWith(\"jakarta.inject\")) {\n \t\t\t\t\t\tmetadata.setScopeName(BeanDefinition.SCOPE_PROTOTYPE);\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Fix broken test missed in merge"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -233,7 +233,8 @@ protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {\n \t\t\t\treturn beanFactory.getBean(TaskExecutor.class);\n \t\t\t}\n \t\t\tcatch (NoUniqueBeanDefinitionException ex) {\n-\t\t\t\tlogger.debug(\"Could not find unique TaskExecutor bean\", ex);\n+\t\t\t\tlogger.debug(\"Could not find unique TaskExecutor bean. \" +\n+\t\t\t\t\t\t\"Continuing search for an Executor bean named 'taskExecutor'\", ex);\n \t\t\t\ttry {\n \t\t\t\t\treturn beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);\n \t\t\t\t}\n@@ -246,7 +247,8 @@ protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\t\tlogger.debug(\"Could not find default TaskExecutor bean\", ex);\n+\t\t\t\tlogger.debug(\"Could not find default TaskExecutor bean. \" +\n+\t\t\t\t\t\t\"Continuing search for an Executor bean named 'taskExecutor'\", ex);\n \t\t\t\ttry {\n \t\t\t\t\treturn beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);\n \t\t\t\t}",
    "output": "Improve log message when searching for default executor for async processing"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n@@ -445,7 +445,7 @@ public void setName(Optional<String> name) {\n \t\t}\n \t}\n \n-\t@Configuration\n+\t@Configuration(proxyBeanMethods = false)\n \tstatic class IgnoreUnresolvablePlaceholdersFalseConfig {\n \n \t\t@Value(\"${my.key}\")\n@@ -457,7 +457,7 @@ static PropertySourcesPlaceholderConfigurer pspc() {\n \t\t}\n \t}\n \n-\t@Configuration\n+\t@Configuration(proxyBeanMethods = false)\n \tstatic class IgnoreUnresolvablePlaceholdersTrueConfig {\n \n \t\t@Value(\"${my.key}\")",
    "output": "Make PropertySourcesPlaceholderConfigurerTests pass on JDK 17 This change is required in Eclipse IDE but not for the Gradle build"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,6 +65,16 @@ public HttpStatus getStatusCode() {\n \t\treturn getDelegate().getStatusCode();\n \t}\n \n+\t@Override\n+\tpublic boolean setRawStatusCode(@Nullable Integer value) {\n+\t\treturn getDelegate().setRawStatusCode(value);\n+\t}\n+\n+\t@Override\n+\tpublic Integer getRawStatusCode() {\n+\t\treturn getDelegate().getRawStatusCode();\n+\t}\n+\n \t@Override\n \tpublic HttpHeaders getHeaders() {\n \t\treturn getDelegate().getHeaders();",
    "output": "Add missing overrides to ServerHttpResponseDecorator"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n@@ -98,7 +98,7 @@ public static Method findBridgedMethod(Method bridgeMethod) {\n \t * checks and can be used quickly filter for a set of possible matches.\n \t */\n \tprivate static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {\n-\t\treturn (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&\n+\t\treturn (!candidateMethod.isBridge() &&\n \t\t\t\tcandidateMethod.getName().equals(bridgeMethod.getName()) &&\n \t\t\t\tcandidateMethod.getParameterCount() == bridgeMethod.getParameterCount());\n \t}",
    "output": "Remove unnecessary check in isBridgedCandidateForIn BridgeMethodResolver#isBridgedCandidateFor, candidateMethod is never not bridged, so it's unnecessary to judge whether candidateMethod and bridgeMethod are the same"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -152,6 +152,14 @@ void trimTrailingCharacter() {\n \t\tassertThat(StringUtils.trimTrailingCharacter(\" a b  c \", ' ')).isEqualTo(\" a b  c\");\n \t}\n \n+\t@Test\n+\tvoid matchesCharacter() {\n+\t\tassertThat(StringUtils.matchesCharacter(null, '/')).isFalse();\n+\t\tassertThat(StringUtils.matchesCharacter(\"/a\", '/')).isFalse();\n+\t\tassertThat(StringUtils.matchesCharacter(\"a\", '/')).isFalse();\n+\t\tassertThat(StringUtils.matchesCharacter(\"/\", '/')).isTrue();\n+\t}\n+\n \t@Test\n \tvoid startsWithIgnoreCase() {\n \t\tString prefix = \"fOo\";",
    "output": "Add tests for StringUtils matchesCharactermethod"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n@@ -262,12 +262,12 @@ public void propertyAccessWithInstanceMethodResolver() {\n \n \t@Test\n \tpublic void propertyAccessWithInstanceMethodResolverAndTypedRootObject() {\n-\t\tPerson target = new Person(\"p1\");\n+\t\tPerson rootObject = new Person(\"p1\");\n \t\tEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().\n-\t\t\t\twithInstanceMethods().withTypedRootObject(target, TypeDescriptor.valueOf(Object.class)).build();\n+\t\t\t\twithInstanceMethods().withTypedRootObject(rootObject, TypeDescriptor.valueOf(Object.class)).build();\n \n-\t\tassertThat(parser.parseExpression(\"name.substring(1)\").getValue(context, target)).isEqualTo(\"1\");\n-\t\tassertThat(context.getRootObject().getValue()).isSameAs(target);\n+\t\tassertThat(parser.parseExpression(\"name.substring(1)\").getValue(context)).isEqualTo(\"1\");\n+\t\tassertThat(context.getRootObject().getValue()).isSameAs(rootObject);\n \t\tassertThat(context.getRootObject().getTypeDescriptor().getType()).isSameAs(Object.class);\n \t}\n ",
    "output": "Fix SpEL withTypedRootObjecttest"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n@@ -103,18 +103,6 @@ protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {\n \t}\n \n \n-\t/**\n-\t * Return the bean factory to register the bean definitions with.\n-\t * <p>The factory is exposed through the BeanDefinitionRegistry interface,\n-\t * encapsulating the methods that are relevant for bean definition handling.\n-\t * @deprecated as of Spring Framework 5.3.15 in favor of {@link #getRegistry()},\n-\t * to be removed in Spring Framework 6.0\n-\t */\n-\t@Deprecated\n-\tpublic final BeanDefinitionRegistry getBeanFactory() {\n-\t\treturn this.registry;\n-\t}\n-\n \t@Override\n \tpublic final BeanDefinitionRegistry getRegistry() {\n \t\treturn this.registry;",
    "output": "Remove deprecated AbstractBeanDefinitionReader.getBeanFactorymethod The getBeanFactorymethod (which is deprecated since Spring Framework 5.3.15) has been obsolete for more than 13 years since it was superseded by the getRegistrymethod in the BeanDefinitionReader interface"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n@@ -129,9 +129,7 @@ public static List<?> arrayToList(@Nullable Object source) {\n \t@SuppressWarnings(\"unchecked\")\n \tpublic static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {\n \t\tObject[] arr = ObjectUtils.toObjectArray(array);\n-\t\tfor (Object elem : arr) {\n-\t\t\tcollection.add((E) elem);\n-\t\t}\n+\t\tCollections.addAll(collection, (E[])arr);\n \t}\n \n \t/**",
    "output": "Use Collections.addAll instead of Collection.addAll"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java\n@@ -72,7 +72,7 @@ public class MappingJackson2MessageConverter extends AbstractMessageConverter {\n \t * the {@code application/json} MIME type with {@code UTF-8} character set.\n \t */\n \tpublic MappingJackson2MessageConverter() {\n-\t\tsuper(new MimeType(\"application\", \"json\"));\n+\t\tsuper(new MimeType(\"application\", \"json\"), new MimeType(\"application\", \"*+json\"));\n \t\tthis.objectMapper = initObjectMapper();\n \t}\n ",
    "output": "Add \"application/*+json\" to MappingJackson2MessageConverter"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n@@ -182,7 +182,6 @@ private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationCl\n \t * Read the given {@link BeanMethod}, registering bean definitions\n \t * with the BeanDefinitionRegistry based on its contents.\n \t */\n-\t@SuppressWarnings(\"deprecation\")  // for RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE\n \tprivate void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n \t\tConfigurationClass configClass = beanMethod.getConfigurationClass();\n \t\tMethodMetadata metadata = beanMethod.getMetadata();",
    "output": "Remove unnecessary @SuppressWarnings"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -194,7 +194,7 @@ public ClassReader(\n     this.b = classFileBuffer;\n     // Check the class' major_version. This field is after the magic and minor_version fields, which\n     // use 4 and 2 bytes respectively.\n-    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V18) {\n+    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V19) {\n       throw new IllegalArgumentException(\n           \"Unsupported class file major version \" + readShort(classFileOffset + 6));\n     }\n\ndiff --git a/spring-core/src/main/java/org/springframework/asm/Opcodes.java b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n--- a/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n@@ -283,6 +283,7 @@ public interface Opcodes {\n   int V16 = 0 << 16 | 60;\n   int V17 = 0 << 16 | 61;\n   int V18 = 0 << 16 | 62;\n+  int V19 = 0 << 16 | 63;\n \n   /**\n    * Version flag indicating that the class is using 'preview' features.",
    "output": "Upgrade to ASM master (including early support for Java 19 bytecode)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpMethod.java b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n@@ -146,7 +146,7 @@ public static HttpMethod valueOf(String method) {\n \t@Nullable\n \t@Deprecated\n \tpublic static HttpMethod resolve(@Nullable String method) {\n-\t\treturn (method != null ? mappings.get(method) : null);\n+\t\treturn (method != null ? valueOf(method) : null);\n \t}\n \n ",
    "output": "Use HttpMethod::valueOf in HttpMethod::resolve This commit makes sure that HttpMethod::resolve uses HttpMethod::valueOf and returns an HttpMethod for non-standard methods"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java\n--- a/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java\n+++ b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java\n@@ -107,7 +107,7 @@ private static CandidateComponentsIndex doLoadIndex(ClassLoader classLoader) {\n \t\t\t\tresult.add(properties);\n \t\t\t}\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Loaded \" + result.size() + \"] index(es)\");\n+\t\t\t\tlogger.debug(\"Loaded \" + result.size() + \" index(es)\");\n \t\t\t}\n \t\t\tint totalCount = result.stream().mapToInt(Properties::size).sum();\n \t\t\treturn (totalCount > 0 ? new CandidateComponentsIndex(result) : null);",
    "output": "Fix log message formatting in CandidateComponentsIndexLoader"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java b/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java\n--- a/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java\n+++ b/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java\n@@ -86,7 +86,7 @@ protected Expression getExpression(Map<ExpressionKey, Expression> cache,\n \t\tExpressionKey expressionKey = createKey(elementKey, expression);\n \t\tExpression expr = cache.get(expressionKey);\n \t\tif (expr == null) {\n-\t\t\texpr = getParser().parseExpression(expression);\n+\t\t\texpr = parseExpression(expression);\n \t\t\tcache.put(expressionKey, expr);\n \t\t}\n \t\treturn expr;\n@@ -96,6 +96,13 @@ private ExpressionKey createKey(AnnotatedElementKey elementKey, String expressio\n \t\treturn new ExpressionKey(elementKey, expression);\n \t}\n \n+\t/**\n+\t * Parse the expression\n+\t * @param expression the expression to parse\n+\t */\n+\tprotected Expression parseExpression(String expression) {\n+\t\treturn getParser().parseExpression(expression);\n+\t}\n \n \t/**\n \t * An expression key.",
    "output": "Add support for custom expression parsing"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java\n@@ -230,10 +230,10 @@ private static EntityManager createProxy(\n \n \t\tif (emIfc != null) {\n \t\t\tinterfaces = cachedEntityManagerInterfaces.computeIfAbsent(emIfc, key -> {\n-\t\t\t\tSet<Class<?>> ifcs = new LinkedHashSet<>(4);\n-\t\t\t\tifcs.add(key);\n-\t\t\t\tifcs.add(EntityManagerProxy.class);\n-\t\t\t\treturn ClassUtils.toClassArray(ifcs);\n+\t\t\t\tif (EntityManagerProxy.class.equals(key)) {\n+\t\t\t\t\treturn new Class<?>[] {key};\n+\t\t\t\t}\n+\t\t\t\treturn new Class<?>[] {key, EntityManagerProxy.class};\n \t\t\t});\n \t\t}\n \t\telse {",
    "output": "Improve mapping function in ExtendedEntityManagerCreator.createProxy"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -67,6 +67,17 @@ public void mapAccessorCompilable() {\n \t\tassertThat(ex.getValue(sec,mapGetter)).isEqualTo(\"bar\");\n \t\tassertThat(SpelCompiler.compile(ex)).isTrue();\n \t\tassertThat(ex.getValue(sec,mapGetter)).isEqualTo(\"bar\");\n+\n+\t\t// basic isWritable\n+\t\tex = sep.parseExpression(\"foo\");\n+\t\tassertThat(ex.isWritable(sec,testMap)).isTrue();\n+\n+\t\t// basic write\n+\t\tex = sep.parseExpression(\"foo2\");\n+\t\tex.setValue(sec, testMap, \"bar2\");\n+\t\tassertThat(ex.getValue(sec,testMap)).isEqualTo(\"bar2\");\n+\t\tassertThat(SpelCompiler.compile(ex)).isTrue();\n+\t\tassertThat(ex.getValue(sec,testMap)).isEqualTo(\"bar2\");\n \t}\n \n \tpublic static class MapGetter {",
    "output": "Add test cases to SpEL's MapAccessorTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -462,9 +462,9 @@ public String toString() {\n \n \tprivate void checkIndex(int index, int length) {\n \t\tassertIndex(index >= 0, \"index %d must be >= 0\", index);\n-\t\tassertIndex(length >= 0, \"length %d must be >= 0\", index);\n+\t\tassertIndex(length >= 0, \"length %d must be >= 0\", length);\n \t\tassertIndex(index <= this.capacity, \"index %d must be <= %d\", index, this.capacity);\n-\t\tassertIndex(length <= this.capacity, \"length %d must be <= %d\", index, this.capacity);\n+\t\tassertIndex(length <= this.capacity, \"length %d must be <= %d\", length, this.capacity);\n \t}\n \n \tprivate void assertIndex(boolean expression, String format, Object... args) {",
    "output": "Fix assertion message in DefaultDataBuffer"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,24 +64,24 @@ public ParserContext(XmlReaderContext readerContext, BeanDefinitionParserDelegat\n \t}\n \n \n-\tpublic final XmlReaderContext getReaderContext() {\n+\tpublic XmlReaderContext getReaderContext() {\n \t\treturn this.readerContext;\n \t}\n \n-\tpublic final BeanDefinitionRegistry getRegistry() {\n+\tpublic BeanDefinitionRegistry getRegistry() {\n \t\treturn this.readerContext.getRegistry();\n \t}\n \n-\tpublic final BeanDefinitionParserDelegate getDelegate() {\n+\tpublic BeanDefinitionParserDelegate getDelegate() {\n \t\treturn this.delegate;\n \t}\n \n \t@Nullable\n-\tpublic final BeanDefinition getContainingBeanDefinition() {\n+\tpublic BeanDefinition getContainingBeanDefinition() {\n \t\treturn this.containingBeanDefinition;\n \t}\n \n-\tpublic final boolean isNested() {\n+\tpublic boolean isNested() {\n \t\treturn (this.containingBeanDefinition != null);\n \t}\n ",
    "output": "Remove unnecessary final declarations at method level"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -105,11 +105,11 @@ public Date nextExecutionTime(TriggerContext triggerContext) {\n \t\t\t}\n \t\t}\n \t\telse {\n-\t\t\tdate = new Date();\n+\t\t\tdate = new Date(triggerContext.getClock().millis());\n \t\t}\n \t\tZonedDateTime dateTime = ZonedDateTime.ofInstant(date.toInstant(), this.zoneId);\n \t\tZonedDateTime next = this.expression.next(dateTime);\n-\t\treturn next != null ? Date.from(next.toInstant()) : null;\n+\t\treturn (next != null ? Date.from(next.toInstant()) : null);\n \t}\n \n ",
    "output": "Use TriggerContext's Clock instead of new Date"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n@@ -126,7 +126,7 @@ public boolean equals(@Nullable Object other) {\n \t */\n \t@Override\n \tpublic int hashCode() {\n-\t\treturn (byte[].class.hashCode() * 29 * this.byteArray.length);\n+\t\treturn Arrays.hashCode(byteArray);\n \t}\n \n }",
    "output": "Use Arrays.hashCodein ByteArrayResource.hashCode"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -246,7 +246,7 @@ public void testDefaultConfig() throws Exception {\n \n \t\tadapter.handle(request, response, handlerMethod);\n \t\tassertThat(handler.recordedValidationError).isTrue();\n-\t\tassertThat(handler.date).isInSameDayAs(\"2009-10-31\");\n+\t\tassertThat(handler.date).isInSameDayAs(\"2009-10-31T00:00:00+00:00\");\n \t\tassertThat(handler.percent).isEqualTo(Double.valueOf(0.9999));\n \n \t\tCompositeUriComponentsContributor uriComponentsContributor = this.appContext.getBean(",
    "output": "Fix timezone specific failing test Update `MvcNamespaceTests` so that the asserted time is in UTC"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n@@ -240,7 +240,7 @@ private RequestMatcher multipartData(MultiValueMap<String, ?> expectedMap, boole\n \t\t\t\t\t}\n \t\t\t\t\tif (expected instanceof byte[]) {\n \t\t\t\t\t\tassertTrue(\"Multipart is not a file\", actual instanceof byte[]);\n-\t\t\t\t\t\tassertEquals(\"Multipart content\", expected, (byte[]) actual);\n+\t\t\t\t\t\tassertEquals(\"Multipart content\", expected, actual);\n \t\t\t\t\t}\n \t\t\t\t\telse if (expected instanceof String) {\n \t\t\t\t\t\tassertTrue(\"Multipart is not a String\", actual instanceof String);",
    "output": "Remove unnecessary cast in ContentRequestMatchers"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n@@ -27,6 +27,7 @@\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.AbstractHttpHandlerIntegrationTests;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.HttpServer;\n+import org.springframework.web.testfixture.http.server.reactive.bootstrap.JettyHttpServer;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -80,7 +81,14 @@ void emptyPathSegments(HttpServer httpServer) throws Exception {\n \t\tURI url = new URI(\"http://localhost:\" + port + \"//\");\n \t\tResponseEntity<String> response = restTemplate.getForEntity(url, String.class);\n \n-\t\tassertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\t// Jetty 10+ rejects empty path segments, see https://github.com/eclipse/jetty.project/issues/6302,\n+\t\t// but an application can apply CompactPathRule via RewriteHandler:\n+\t\t// https://www.eclipse.org/jetty/documentation/jetty-11/programming_guide.php\n+\n+\t\tHttpStatus expectedStatus =\n+\t\t\t\t(httpServer instanceof JettyHttpServer ? HttpStatus.BAD_REQUEST : HttpStatus.OK);\n+\n+\t\tassertThat(response.getStatusCode()).isEqualTo(expectedStatus);\n \t}\n \n ",
    "output": "Fix Jetty 10+ test failure related to empty path handling"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -17,6 +17,7 @@\n package org.springframework.util;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Locale;\n import java.util.Properties;\n \n@@ -777,4 +778,9 @@ void splitWithEmptyStringOrNull() {\n \t\tassertThat(StringUtils.split(null, null)).isNull();\n \t}\n \n+\t@Test\n+\tvoid collectionToDelimitedStringWithNullValuesShouldNotFail() {\n+\t\tassertThat(StringUtils.collectionToCommaDelimitedString(Collections.singletonList(null))).isEqualTo(\"null\");\n+\t}\n+\n }",
    "output": "Fix collectionToDelimitedString failure for null elements."
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -1301,7 +1301,7 @@ public static String collectionToDelimitedString(\n \n \t\tint totalLength = coll.size() * (prefix.length() + suffix.length()) + (coll.size() - 1) * delim.length();\n \t\tfor (Object element : coll) {\n-\t\t\ttotalLength += element.toString().length();\n+\t\t\ttotalLength += String.valueOf(element).length();\n \t\t}\n \n \t\tStringBuilder sb = new StringBuilder(totalLength);",
    "output": "Fix collectionToDelimitedString failure for null elements. Prior to this commit, calling `StringUtils#collectionToDelimitedString` would fail with an NPE if the collection contains null elements. This commit ensures that null elements are converted as `\"null\"` in the resulting String without failure"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java b/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java\n@@ -521,8 +521,8 @@ AdvisedSupport getConfigurationOnlyCopy() {\n \t\tcopy.copyFrom(this);\n \t\tcopy.targetSource = EmptyTargetSource.forClass(getTargetClass(), getTargetSource().isStatic());\n \t\tcopy.advisorChainFactory = this.advisorChainFactory;\n-\t\tcopy.interfaces = this.interfaces;\n-\t\tcopy.advisors = this.advisors;\n+\t\tcopy.interfaces = new ArrayList<>(this.interfaces);\n+\t\tcopy.advisors = new ArrayList<>(this.advisors);\n \t\treturn copy;\n \t}\n ",
    "output": "Fix memory leak on AOP Proxy class definition cache"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n@@ -54,12 +54,6 @@ public void apply(Project project) {\n \t\t\t\tproject.getConfigurations().getByName(sourceSet.getRuntimeClasspathConfigurationName()).extendsFrom(optional);\n \t\t\t});\n \t\t});\n-\t\tproject.getPlugins().withType(EclipsePlugin.class, (eclipePlugin) -> {\n-\t\t\tproject.getExtensions().getByType(EclipseModel.class)\n-\t\t\t\t\t.classpath((classpath) -> {\n-\t\t\t\t\t\tclasspath.getPlusConfigurations().add(optional);\n-\t\t\t\t\t});\n-\t\t});\n \t}\n \n }\n\\ No newline at end of file",
    "output": "Remove Eclipse-specific code from OptionalDependenciesPlugin To support the recent changes to our `optional` dependencies plugin, this commit removes the Eclipse-specific code which no longer appears to be necessary"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java b/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java\n--- a/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java\n@@ -118,7 +118,7 @@ public void assertEmpty() throws Exception {\n \t * except that an {@code Executable} can throw any kind of exception.\n \t */\n \t@FunctionalInterface\n-\tinterface Executable {\n+\tpublic interface Executable {\n \n \t\tvoid execute() throws Throwable;\n ",
    "output": "Make ExceptionCollector.Executable public"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java b/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n@@ -22,7 +22,7 @@\n import org.springframework.web.testfixture.servlet.MockHttpServletRequest;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n \n /**\n  * Unit tests for {@link UrlPathHelper}.\n@@ -170,16 +170,16 @@ void getLookupPathWithSemicolonContentAndNullPathInfo() {\n \tvoid defaultInstanceReadOnlyBehavior() {\n \t\tUrlPathHelper helper = UrlPathHelper.defaultInstance;\n \n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setAlwaysUseFullPath(true))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setUrlDecode(true))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setRemoveSemicolonContent(true))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setDefaultEncoding(\"UTF-8\"))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n ",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n@@ -141,16 +141,18 @@ public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType eleme\n \t\t}\n \n \t\tif (isStreamingMediaType(contentType)) {\n-\t\t\treturn message.writeAndFlushWith(body.map(buffer -> {\n-\t\t\t\tHints.touchDataBuffer(buffer, hints, logger);\n-\t\t\t\treturn Mono.just(buffer).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n-\t\t\t}));\n+\t\t\treturn message\n+\t\t\t\t\t.writeAndFlushWith(body.map(buffer -> {\n+\t\t\t\t\t\tHints.touchDataBuffer(buffer, hints, logger);\n+\t\t\t\t\t\treturn Mono.just(buffer).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n+\t\t\t\t\t}))\n+\t\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n \t\t}\n \n \t\tif (logger.isDebugEnabled()) {\n \t\t\tbody = body.doOnNext(buffer -> Hints.touchDataBuffer(buffer, hints, logger));\n \t\t}\n-\t\treturn message.writeWith(body);\n+\t\treturn message.writeWith(body).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n \t}\n \n \t@Nullable",
    "output": "Add doOnDiscard hook for streaming mode Potential fix for issue reported at https://github.com/reactor/reactor-netty/issues/1746"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java\n@@ -489,9 +489,9 @@ else if (args[0] instanceof Map) {\n \t\t\t\t\t\tresolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length);\n \t\t\t\tthis.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class<?>) args[1], constructorArgs);\n \t\t\t\tMap<?, ?> namedArgs = (Map<?, ?>) args[0];\n-\t\t\t\tfor (Object key : namedArgs.keySet()) {\n-\t\t\t\t\tString propName = (String) key;\n-\t\t\t\t\tsetProperty(propName, namedArgs.get(propName));\n+\t\t\t\tfor (Map.Entry<?, ?> entity : namedArgs.entrySet()) {\n+\t\t\t\t\tString propName = (String) entity.getKey();\n+\t\t\t\t\tsetProperty(propName, entity.getValue());\n \t\t\t\t}\n \t\t\t}\n \t\t\t// factory method syntax",
    "output": "improve the performance of iteration"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java\n--- a/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java\n+++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java\n@@ -146,7 +146,7 @@ void refToSeparatePrototypeInstances() {\n \t\tassertThat(emmasJenks != georgiasJenks).as(\"Emma and georgia think they have a different boyfriend\").isTrue();\n \t\tassertThat(emmasJenks.getName().equals(\"Andrew\")).as(\"Emmas jenks has right name\").isTrue();\n \t\tassertThat(emmasJenks != xbf.getBean(\"jenks\")).as(\"Emmas doesn't equal new ref\").isTrue();\n-\t\tassertThat(emmasJenks.getName().equals(\"Andrew\")).as(\"Georgias jenks has right name\").isTrue();\n+\t\tassertThat(georgiasJenks.getName().equals(\"Andrew\")).as(\"Georgias jenks has right name\").isTrue();\n \t\tassertThat(emmasJenks.equals(georgiasJenks)).as(\"They are object equal\").isTrue();\n \t\tassertThat(emmasJenks.equals(xbf.getBean(\"jenks\"))).as(\"They object equal direct ref\").isTrue();\n \t}",
    "output": "Fix assertion in XmlBeanFactoryTests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -130,7 +130,7 @@ public class StandaloneMockMvcBuilder extends AbstractMockMvcBuilder<StandaloneM\n \t@Nullable\n \tprivate PathPatternParser patternParser;\n \n-\tprivate boolean useSuffixPatternMatch = true;\n+\tprivate boolean useSuffixPatternMatch = false;\n \n \tprivate boolean useTrailingSlashPatternMatch = true;\n \n@@ -324,7 +324,7 @@ public void setPatternParser(PathPatternParser parser) {\n \t/**\n \t * Whether to use suffix pattern match (\".*\") when matching patterns to\n \t * requests. If enabled a method mapped to \"/users\" also matches to \"/users.*\".\n-\t * <p>The default value is {@code true}.\n+\t * <p>The default value is {@code false}.\n \t * @deprecated as of 5.2.4. See class-level note in\n \t * {@link RequestMappingHandlerMapping} on the deprecation of path extension\n \t * config options.",
    "output": "Upgrade MockMvc default for suffixPattern matching"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n@@ -57,16 +57,13 @@ public class CorsConfiguration {\n \t/** Wildcard representing <em>all</em> origins, methods, or headers. */\n \tpublic static final String ALL = \"*\";\n \n-\tprivate static final List<String> ALL_LIST = Collections.unmodifiableList(\n-\t\t\tCollections.singletonList(ALL));\n+\tprivate static final List<String> ALL_LIST = Collections.singletonList(ALL);\n \n \tprivate static final OriginPattern ALL_PATTERN = new OriginPattern(\"*\");\n \n-\tprivate static final List<OriginPattern> ALL_PATTERN_LIST = Collections.unmodifiableList(\n-\t\t\tCollections.singletonList(ALL_PATTERN));\n+\tprivate static final List<OriginPattern> ALL_PATTERN_LIST = Collections.singletonList(ALL_PATTERN);\n \n-\tprivate static final List<String> DEFAULT_PERMIT_ALL = Collections.unmodifiableList(\n-\t\t\tCollections.singletonList(ALL));\n+\tprivate static final List<String> DEFAULT_PERMIT_ALL = Collections.singletonList(ALL);\n \n \tprivate static final List<HttpMethod> DEFAULT_METHODS = Collections.unmodifiableList(\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD));",
    "output": "Remove redundant Collections.unmodifiableList"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n@@ -60,4 +60,28 @@ void aliasChainingWithMultipleAliases() {\n \t\tassertThat(registry.hasAlias(\"real_name\", \"alias_c\")).isTrue();\n \t}\n \n+\t@Test\n+\tvoid removeAliasTest() {\n+\t\tSimpleAliasRegistry registry = new SimpleAliasRegistry();\n+\t\tregistry.registerAlias(\"realname\", \"nickname\");\n+\t\tassertThat(registry.hasAlias(\"realname\", \"nickname\")).isTrue();\n+\n+\t\tregistry.removeAlias(\"nickname\");\n+\t\tassertThat(registry.hasAlias(\"realname\", \"nickname\")).isFalse();\n+\t}\n+\n+\t@Test\n+\tvoid isAliasTest() {\n+\t\tSimpleAliasRegistry registry = new SimpleAliasRegistry();\n+\t\tregistry.registerAlias(\"realname\", \"nickname\");\n+\t\tassertThat(registry.isAlias(\"nickname\")).isTrue();\n+\t\tassertThat(registry.isAlias(\"fake\")).isFalse();\n+\t}\n+\n+\t@Test\n+\tvoid getAliasesTest() {\n+\t\tSimpleAliasRegistry registry = new SimpleAliasRegistry();\n+\t\tregistry.registerAlias(\"realname\", \"nickname\");\n+\t\tassertThat(registry.getAliases(\"realname\"));\n+\t}\n }",
    "output": "Add more test cases for SimpleAliasRegistry"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java b/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java\n--- a/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java\n+++ b/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.context;\n \n+import java.time.Clock;\n import java.util.EventObject;\n \n /**\n@@ -46,6 +47,17 @@ public ApplicationEvent(Object source) {\n \t\tthis.timestamp = System.currentTimeMillis();\n \t}\n \n+\t/**\n+\t * Create a new {@code ApplicationEvent} with a fixed timestamp.\n+\t * @param source the object on which the event initially occurred or with\n+\t * which the event is associated (never {@code null})\n+\t * @param clock a clock which will provide the timestamp\n+\t */\n+\tpublic ApplicationEvent(Object source, Clock clock) {\n+\t\tsuper(source);\n+\t\tthis.timestamp = clock.millis();\n+\t}\n+\n \n \t/**\n \t * Return the system time in milliseconds when the event occurred.",
    "output": "Add ApplicationEvent constructor for specifying timestamp"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -878,7 +878,7 @@ private static Object asFlow(Publisher<?> publisher) {\n \t\t\treturn ReactiveFlowKt.asFlow(publisher);\n \t\t}\n \n-\t\t@SuppressWarnings(\"unchecked\")\n+\t\t@SuppressWarnings({\"unchecked\", \"deprecation\"})\n \t\t@Nullable\n \t\tprivate static Object awaitSingleOrNull(Publisher<?> publisher, Object continuation) {\n \t\t\treturn AwaitKt.awaitSingleOrNull(publisher, (Continuation<Object>) continuation);",
    "output": "Upgrade to Coroutines 1.5.0 This commit upgrades to Coroutines 1.5.0 while retaining Coroutines 1.4.x compatibility"
  },
  {
    "input": "diff --git a/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java b/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java\n--- a/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java\n+++ b/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,6 +31,7 @@\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.core.io.Resource;\n import org.springframework.oxm.AbstractUnmarshallerTests;\n import org.springframework.oxm.jaxb.test.FlightType;\n@@ -56,7 +57,7 @@ public class Jaxb2UnmarshallerTests extends AbstractUnmarshallerTests<Jaxb2Marsh\n \tprotected Jaxb2Marshaller createUnmarshaller() throws Exception {\n \t\tJaxb2Marshaller unmarshaller = new Jaxb2Marshaller();\n \t\tunmarshaller.setContextPath(\"org.springframework.oxm.jaxb.test\");\n-\t\tunmarshaller.setSchema(new ClassPathResource(\"org/springframework/oxm/flight.xsd\"));\n+\t\tunmarshaller.setSchema(new FileSystemResource(\"src/test/schema/flight.xsd\"));\n \t\tunmarshaller.afterPropertiesSet();\n \t\treturn unmarshaller;\n \t}",
    "output": "Remove duplicate copy of flight.xsd eb589c2ed03dd22af1259e5b0161ea70f47488"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -49,6 +49,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.support.PropertiesLoaderUtils;\n import org.springframework.core.log.LogFormatUtils;\n+import org.springframework.http.HttpMethod;\n import org.springframework.http.server.RequestPath;\n import org.springframework.http.server.ServletServerHttpRequest;\n import org.springframework.lang.Nullable;\n@@ -1046,8 +1047,8 @@ protected void doDispatch(HttpServletRequest request, HttpServletResponse respon\n \n \t\t\t\t// Process last-modified header, if supported by the handler.\n \t\t\t\tString method = request.getMethod();\n-\t\t\t\tboolean isGet = \"GET\".equals(method);\n-\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n+\t\t\t\tboolean isGet = HttpMethod.GET.matches(method);\n+\t\t\t\tif (isGet || HttpMethod.HEAD.matches(method)) {\n \t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n \t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n \t\t\t\t\t\treturn;",
    "output": "Use HttpMethod enums"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java b/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java\n@@ -292,7 +292,7 @@ private void handleComment(Comment comment) throws SAXException {\n \n \tprivate void handleDtd(DTD dtd) throws SAXException {\n \t\tif (getLexicalHandler() != null) {\n-\t\t\tjavax.xml.stream.Location location = dtd.getLocation();\n+\t\t\tLocation location = dtd.getLocation();\n \t\t\tgetLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\n \t\t}\n \t\tif (getLexicalHandler() != null) {",
    "output": "Use an import instead of FQCN in StaxEventXMLReader"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -68,7 +68,7 @@ public static boolean simpleMatch(@Nullable String pattern, @Nullable String str\n \t\t}\n \n \t\treturn (str.length() >= firstIndex &&\n-\t\t\t\tpattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&\n+\t\t\t\tpattern.startsWith(str.substring(0, firstIndex)) &&\n \t\t\t\tsimpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)));\n \t}\n ",
    "output": "Use String.startsWithinstead of substringin PatternMatchUtils"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n@@ -186,13 +186,6 @@ interface Builder {\n \t\t */\n \t\tBuilder baseUrl(String baseUrl);\n \n-\t\t/**\n-\t\t * Configure default URI variable values that will be used when expanding\n-\t\t * URI templates using a {@link Map}.\n-\t\t * @param defaultUriVariables the default values to use\n-\t\t * @see #baseUrl(String)\n-\t\t * @see #uriBuilderFactory(UriBuilderFactory)\n-\t\t */\n \t\t/**\n \t\t * Configure default URL variable values to use when expanding URI\n \t\t * templates with a {@link Map}. Effectively a shortcut for:",
    "output": "Remove leftover Javadoc from WebClient"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n@@ -163,7 +163,7 @@ private static boolean isResolvedTypeMatch(Method genericMethod, Method candidat\n \t\t\t\t}\n \t\t\t}\n \t\t\t// A non-array type: compare the type itself.\n-\t\t\tif (!candidateParameter.equals(genericParameter.toClass())) {\n+\t\t\tif (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(ClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}",
    "output": "Improve Kotlin support in BridgeMethodResolver#findBridgedMethod This commit adds support for Kotlin non-nullable type which resolves to primitive Java types in BridgeMethodResolver#findBridgedMethod"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n@@ -1266,13 +1266,13 @@ public void daylightSaving() {\n \t\tCronExpression cronExpression = CronExpression.parse(\"0 0 9 * * *\");\n \n \t\tZonedDateTime last = ZonedDateTime.parse(\"2021-03-27T09:00:00+01:00[Europe/Amsterdam]\");\n-\t\tZonedDateTime expected = ZonedDateTime.parse(\"2021-03-28T09:00:00+01:00[Europe/Amsterdam]\");\n+\t\tZonedDateTime expected = ZonedDateTime.parse(\"2021-03-28T09:00:00+02:00[Europe/Amsterdam]\");\n \t\tZonedDateTime actual = cronExpression.next(last);\n \t\tassertThat(actual).isNotNull();\n \t\tassertThat(actual).isEqualTo(expected);\n \n-\t\tlast = ZonedDateTime.parse(\"2021-10-30T09:00:00+01:00[Europe/Amsterdam]\");\n-\t\texpected = ZonedDateTime.parse(\"2021-10-31T09:00:00+02:00[Europe/Amsterdam]\");\n+\t\tlast = ZonedDateTime.parse(\"2021-10-30T09:00:00+02:00[Europe/Amsterdam]\");\n+\t\texpected = ZonedDateTime.parse(\"2021-10-31T09:00:00+01:00[Europe/Amsterdam]\");\n \t\tactual = cronExpression.next(last);\n \t\tassertThat(actual).isNotNull();\n \t\tassertThat(actual).isEqualTo(expected);",
    "output": "Fix timezone offset in CronExpressionTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n@@ -23,6 +23,9 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import reactor.blockhound.BlockHound;\n+import reactor.blockhound.integration.BlockHoundIntegration;\n+\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n@@ -418,4 +421,20 @@ public WebHttpHandlerBuilder clone() {\n \t\treturn new WebHttpHandlerBuilder(this);\n \t}\n \n+\n+\t/**\n+\t * {@code BlockHoundIntegration} for spring-web classes.\n+\t * @since 5.3.6\n+\t */\n+\tpublic static class SpringWebBlockHoundIntegration implements BlockHoundIntegration {\n+\n+\t\t@Override\n+\t\tpublic void applyTo(BlockHound.Builder builder) {\n+\n+\t\t\t// Avoid hard references potentially anywhere in spring-web (no need for structural dependency)\n+\n+\t\t\tbuilder.allowBlockingCallsInside(\"org.springframework.web.util.HtmlUtils\", \"<clinit>\");\n+\t\t}\n+\t}\n+\n }",
    "output": "Add BlockHoundIntegration for spring-web"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.test.web.reactive.server;\n \n import java.time.Duration;\n@@ -28,7 +29,9 @@\n \n /**\n  * Assertions on cookies of the response.\n+ *\n  * @author Rossen Stoyanchev\n+ * @since 5.3\n  */\n public class CookieAssertions {\n ",
    "output": "Add since tag"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -384,7 +384,7 @@ public void onNext(Void aVoid) {\n \t\t@Override\n \t\tpublic void onError(Throwable ex) {\n \t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(this.logPrefix + \"onError: \" + ex.getMessage());\n+\t\t\t\tlogger.trace(this.logPrefix + \"onError: \" + ex);\n \t\t\t}\n \t\t\trunIfAsyncNotComplete(this.asyncContext, this.completionFlag, () -> {\n \t\t\t\tif (this.asyncContext.getResponse().isCommitted()) {",
    "output": "Fix log message See gh-"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n@@ -242,7 +242,7 @@ public static BodyBuilder ok() {\n \t * @return the created {@code ResponseEntity}\n \t * @since 4.1\n \t */\n-\tpublic static <T> ResponseEntity<T> ok(T body) {\n+\tpublic static <T> ResponseEntity<T> ok(@Nullable T body) {\n \t\treturn ok().body(body);\n \t}\n ",
    "output": "Add missing nullable annotation to ResponseEntity ok convenience method"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -46,6 +46,7 @@\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.ApplicationEventPublisherAware;\n import org.springframework.context.ApplicationListener;\n+import org.springframework.context.ApplicationStartupAware;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.EmbeddedValueResolverAware;\n import org.springframework.context.EnvironmentAware;\n@@ -692,7 +693,7 @@ protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n \t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n \t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n \t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n-\t\tbeanFactory.ignoreDependencyInterface(ApplicationStartup.class);\n+\t\tbeanFactory.ignoreDependencyInterface(ApplicationStartupAware.class);\n \n \t\t// BeanFactory interface not registered as resolvable type in a plain factory.\n \t\t// MessageSource registered (and found for autowiring) as a bean.",
    "output": "Fix registration of ApplicationStartupAware"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -59,7 +59,6 @@ public static boolean sameResourceFactory(ResourceTransactionManager tm, Object\n \t * the given handle as-is.\n \t * @since 5.3.4\n \t * @see InfrastructureProxy#getWrappedObject()\n-\t * @see ScopedProxyUnwrapper#unwrapIfNecessary(Object)\n \t */\n \tpublic static Object unwrapResourceIfNecessary(Object resource) {\n \t\tAssert.notNull(resource, \"Resource must not be null\");",
    "output": "Remove Javadoc link to private method"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n@@ -350,7 +350,7 @@ public static Object[] buildValueArray(\n \t\t\t\tObject paramValue = paramSource.getValue(paramName);\n \t\t\t\tif (paramValue instanceof SqlParameterValue) {\n \t\t\t\t\tparamArray[i] = paramValue;\n-\t\t\t\t} \n+\t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tparamArray[i] = (param != null ? new SqlParameterValue(param, paramValue) :\n \t\t\t\t\t\t\tSqlParameterSourceUtils.getTypedValue(paramSource, paramName));",
    "output": "Remove trailing whitespace (Checkstyle)"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -75,13 +75,16 @@ void executeTestsInParallel(Class<?> testClass) {\n \t\tassertThat(payloads).hasSize(10);\n \t\tassertThat(testNames).hasSize(10);\n \n+\t\tint availableProcessors = Runtime.getRuntime().availableProcessors();\n \t\t// Skip the following assertion entirely if too few processors are available\n \t\t// to the current JVM.\n-\t\tif (Runtime.getRuntime().availableProcessors() >= 4) {\n+\t\tif (availableProcessors >= 6) {\n \t\t\t// There are probably 10 different thread names on a developer's machine,\n \t\t\t// but we really just want to assert that at least two different threads\n \t\t\t// were used, since the CI server often has fewer threads available.\n-\t\t\tassertThat(threadNames).hasSizeGreaterThanOrEqualTo(2);\n+\t\t\tassertThat(threadNames)\n+\t\t\t\t.as(\"number of threads used with \" + availableProcessors + \" available processors\")\n+\t\t\t\t.hasSizeGreaterThanOrEqualTo(2);\n \t\t}\n \t}\n ",
    "output": "Improve diagnostics for flaky ParallelApplicationEventsIntegrationTests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.test.context.junit.jupiter.event;\n \n-import java.lang.management.ManagementFactory;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -278,11 +278,11 @@ protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotS\n \tprotected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,\n \t\t\tHttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {\n \n-\t\tresponse.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);\n \t\tList<MediaType> mediaTypes = ex.getSupportedMediaTypes();\n \t\tif (!CollectionUtils.isEmpty(mediaTypes)) {\n \t\t\tresponse.setHeader(\"Accept\", MediaType.toString(mediaTypes));\n \t\t}\n+\t\tresponse.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);\n \t\treturn new ModelAndView();\n \t}\n ",
    "output": "Fix order of headers in DefaultHandlerExceptionResolver"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n@@ -184,7 +184,7 @@ public static boolean hasCachedPath(ServletRequest request) {\n \t * supports a servletPath as an additional prefix to be omitted from\n \t * {@link #pathWithinApplication()}.\n \t */\n-\tprivate static class ServletRequestPath implements RequestPath {\n+\tprivate static final class ServletRequestPath implements RequestPath {\n \n \t\tprivate final RequestPath requestPath;\n \n\ndiff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java\n@@ -77,4 +77,4 @@ public String toString() {\n \t\t\t\t\"mappingMatch=\" + mappingMatch + \"]\";\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix CheckStyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n@@ -451,7 +451,7 @@ public void validateAllowCredentials() {\n \t\t\t\tthis.allowedOrigins != null && this.allowedOrigins.contains(ALL)) {\n \n \t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"When allowCredentials is true, allowedOrigins cannot contain the special value \\\"*\\\"\" +\n+\t\t\t\t\t\"When allowCredentials is true, allowedOrigins cannot contain the special value \\\"*\\\" \" +\n \t\t\t\t\t\t\t\"since that cannot be set on the \\\"Access-Control-Allow-Origin\\\" response header. \" +\n \t\t\t\t\t\t\t\"To allow credentials to a set of origins, list them explicitly \" +\n \t\t\t\t\t\t\t\"or consider using \\\"allowedOriginPatterns\\\" instead.\");",
    "output": "Add a missing space in exception message"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java\n@@ -74,8 +74,7 @@ public class DefaultPartHttpMessageReader extends LoggingCodecSupport implements\n \n \tprivate boolean streaming;\n \n-\tprivate Scheduler blockingOperationScheduler = Schedulers.newBoundedElastic(Schedulers.DEFAULT_BOUNDED_ELASTIC_SIZE,\n-\t\t\tSchedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE, IDENTIFIER, 60, true);\n+\tprivate Scheduler blockingOperationScheduler = Schedulers.boundedElastic();\n \n \tprivate Mono<Path> fileStorageDirectory = Mono.defer(this::defaultFileStorageDirectory).cache();\n \n@@ -153,8 +152,9 @@ public void setFileStorageDirectory(Path fileStorageDirectory) throws IOExceptio\n \n \t/**\n \t * Sets the Reactor {@link Scheduler} to be used for creating files and\n-\t * directories, and writing to files. By default, a bounded scheduler is\n-\t * created with default properties.\n+\t * directories, and writing to files. By default,\n+\t * {@link Schedulers#boundedElastic()} is used, but this property allows for\n+\t * changing it to an externally managed scheduler.\n \t * <p>Note that this property is ignored when\n \t * {@linkplain #setStreaming(boolean) streaming} is enabled, or when\n \t * {@link #setMaxInMemorySize(int) maxInMemorySize} is set to -1.",
    "output": "Use default bounded elastic scheduler Instead of using a new bounded elastic scheduler per DefaultPartHttpMessageReader instance, which creates daemon threads that are not shut down, we now use the shared bounded elastic scheduler"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.web.reactive.socket.adapter;\n \n import java.util.function.Consumer;\n@@ -33,7 +34,6 @@\n import org.springframework.web.reactive.socket.WebSocketMessage;\n import org.springframework.web.reactive.socket.WebSocketSession;\n \n-\n /**\n  * {@link WebSocketSession} implementation for use with the Reactor Netty's\n  * {@link NettyInbound} and {@link NettyOutbound}.\n@@ -100,7 +100,7 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \tpublic boolean isOpen() {\n \t\tDisposedCallback callback = new DisposedCallback();\n \t\tgetDelegate().getInbound().withConnection(callback);\n-\t\treturn callback.isDisposed();\n+\t\treturn !callback.isDisposed();\n \t}\n \n \t@Override",
    "output": "Fix implementation of isOpenin ReactorNettyWebSocketSession for details"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -628,8 +628,8 @@ public int hashCode() {\n \n \t\t@Override\n \t\tpublic String toString() {\n-\t\t\treturn \"CacheKey [clazz=\" + this.clazz.getName() + \", property=\" + this.property + \", \" +\n-\t\t\t\t\tthis.property + \", targetIsClass=\" + this.targetIsClass + \"]\";\n+\t\t\treturn \"CacheKey [clazz=\" + this.clazz.getName() + \", property=\" + this.property +\n+\t\t\t\t\t\", targetIsClass=\" + this.targetIsClass + \"]\";\n \t\t}\n \n \t\t@Override",
    "output": "Remove duplicate \"property\" in PropertyCacheKey.toString"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -880,10 +880,7 @@ protected ModelAndView invokeHandlerMethod(HttpServletRequest request,\n \t\t\tasyncManager.registerCallableInterceptors(this.callableInterceptors);\n \t\t\tasyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);\n \n-\t\t\tif (asyncManager.hasConcurrentResult() &&\n-\t\t\t\t\tasyncManager.getConcurrentResultContext().length > 0 &&\n-\t\t\t\t\tasyncManager.getConcurrentResultContext()[0] instanceof ModelAndViewContainer) {\n-\n+\t\t\tif (asyncManager.hasConcurrentResult()) {\n \t\t\t\tObject result = asyncManager.getConcurrentResult();\n \t\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];\n \t\t\t\tasyncManager.clearConcurrentResult();",
    "output": "Remove unnecessary check in RequestMappingHandlerAdapter"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n@@ -631,7 +631,6 @@ protected Object invokeAdviceMethodWithGivenArgs(Object[] args) throws Throwable\n \t\t}\n \t\ttry {\n \t\t\tReflectionUtils.makeAccessible(this.aspectJAdviceMethod);\n-\t\t\t// TODO AopUtils.invokeJoinpointUsingReflection\n \t\t\treturn this.aspectJAdviceMethod.invoke(this.aspectInstanceFactory.getAspectInstance(), actualArgs);\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {",
    "output": "Remove TODO from AbstractAspectJAdvice Despite the code duplication, we will not delegate to AopUtils.invokeJoinpointUsingReflectionfrom AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs. The rationale is that the exception message in invokeAdviceMethodWithGivenArgsprovides additional context via the pointcut expression, and we would lose that additional context if we simply delegate to AopUtils.invokeJoinpointUsingReflection. We could introduce an overloaded variant of invokeJoinpointUsingReflectionthat accepts an additional argument to provide the additional context for the exception message, but we don't think that would be the best solution for this particular use case. In light of that, we are simply removing the TODO"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java\n@@ -16,7 +16,7 @@\n \n package org.springframework.web.servlet.mvc.method.annotation;\n \n-import java.awt.*;\n+import java.awt.Color;\n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n@@ -22,7 +22,6 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -46,6 +45,7 @@\n import org.springframework.transaction.interceptor.TransactionAttributeSource;\n import org.springframework.util.Assert;\n import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.ReflectionUtils.MethodFilter;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -462,9 +462,9 @@ protected final boolean isRollback(TestContext testContext) throws Exception {\n \t * as well as annotated interface default methods\n \t */\n \tprivate List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> annotationType) {\n-\t\treturn Arrays.stream(ReflectionUtils.getUniqueDeclaredMethods(clazz, ReflectionUtils.USER_DECLARED_METHODS))\n-\t\t\t\t.filter(method -> AnnotatedElementUtils.hasAnnotation(method, annotationType))\n-\t\t\t\t.collect(Collectors.toList());\n+\t\tMethodFilter methodFilter = ReflectionUtils.USER_DECLARED_METHODS\n+\t\t\t\t.and(method -> AnnotatedElementUtils.hasAnnotation(method, annotationType));\n+\t\treturn Arrays.asList(ReflectionUtils.getUniqueDeclaredMethods(clazz, methodFilter));\n \t}\n \n }",
    "output": "Use MethodFilter.andin TransactionalTestExecutionListener"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -505,7 +505,7 @@ private static class DefaultResponseSpec implements ResponseSpec {\n \t\t\tthis.statusHandlers.add(DEFAULT_STATUS_HANDLER);\n \t\t}\n \n-\t\t\n+\n \t\t@Override\n \t\tpublic ResponseSpec onStatus(Predicate<HttpStatus> statusPredicate,\n \t\t\t\tFunction<ClientResponse, Mono<? extends Throwable>> exceptionFunction) {",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -352,9 +352,9 @@ protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targe\n \t\t\t\t}\n \t\t\t\treturn new ReactiveTransactionSupport(adapter);\n \t\t\t});\n-\t\t\tPublisher<?> publisher = (Publisher<?>) txSupport.invokeWithinTransaction(method, targetClass, invocation, txAttr, (ReactiveTransactionManager) tm);\n-\t\t\treturn (isSuspendingFunction ? (hasSuspendingFlowReturnType ? KotlinDelegate.asFlow(publisher) :\n-\t\t\t\t\tKotlinDelegate.awaitSingleOrNull(publisher, ((CoroutinesInvocationCallback) invocation).getContinuation())) : publisher);\n+\t\t\tObject result = txSupport.invokeWithinTransaction(method, targetClass, invocation, txAttr, (ReactiveTransactionManager) tm);\n+\t\t\treturn (isSuspendingFunction ? (hasSuspendingFlowReturnType ? KotlinDelegate.asFlow((Publisher<?>) result) :\n+\t\t\t\t\tKotlinDelegate.awaitSingleOrNull((Publisher<?>) result, ((CoroutinesInvocationCallback) invocation).getContinuation())) : result);\n \t\t}\n \n \t\tPlatformTransactionManager ptm = asPlatformTransactionManager(tm);",
    "output": "Fix @Transactional support on functions returning Flow"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -875,8 +875,8 @@ public Object invokeWithinTransaction(Method method, @Nullable Class<?> targetCl\n \n \t\t\tString joinpointIdentification = methodIdentification(method, targetClass, txAttr);\n \n-\t\t\t// Optimize for Mono\n-\t\t\tif (Mono.class.isAssignableFrom(method.getReturnType())) {\n+\t\t\t// For Mono and suspending functions not returning kotlinx.coroutines.flow.Flow\n+\t\t\tif (Mono.class.isAssignableFrom(method.getReturnType()) || (KotlinDetector.isSuspendingFunction(method) && !COROUTINES_FLOW_CLASS_NAME.equals(new MethodParameter(method, -1).getParameterType().getName()))) {\n \t\t\t\treturn TransactionContextManager.currentContext().flatMap(context ->\n \t\t\t\t\t\tcreateTransactionIfNecessary(rtm, txAttr, joinpointIdentification).flatMap(it -> {\n \t\t\t\t\t\t\ttry {",
    "output": "Fix @Transactional support on suspending function With this commit, @Transactional on suspending functions returning a value now commits the transaction properly"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -99,7 +99,7 @@ public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPo\n \t * @see #setBeanNameGenerator\n \t */\n \tpublic static final AnnotationBeanNameGenerator IMPORT_BEAN_NAME_GENERATOR =\n-\t\t\tnew FullyQualifiedAnnotationBeanNameGenerator();\n+\t\t\tFullyQualifiedAnnotationBeanNameGenerator.INSTANCE;\n \n \tprivate static final String IMPORT_REGISTRY_BEAN_NAME =\n \t\t\tConfigurationClassPostProcessor.class.getName() + \".importRegistry\";\n\ndiff --git a/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java b/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java\n@@ -43,6 +43,14 @@\n  */\n public class FullyQualifiedAnnotationBeanNameGenerator extends AnnotationBeanNameGenerator {\n \n+\t/**\n+\t * A convenient constant for a default {@code FullyQualifiedAnnotationBeanNameGenerator} instance,\n+\t * as used for configuration-level import purposes.\n+\t */\n+\tpublic static final FullyQualifiedAnnotationBeanNameGenerator INSTANCE =\n+\t\t\tnew FullyQualifiedAnnotationBeanNameGenerator();\n+\n+\n \t@Override\n \tprotected String buildDefaultBeanName(BeanDefinition definition) {\n \t\tString beanClassName = definition.getBeanClassName();",
    "output": "Add FullyQualifiedAnnotationBeanNameGenerator.INSTANCE Adds a static INSTANCE to FullyQualifiedAnnotationBeanNameGenerator, just like its parent class, AnnotationBeanNameGenerator, does. The class doesn't have any state and overriding/hiding the INSTANCE of the superclass, this prevents unintended use of a regular AnnotationBeanNameGenerator through FullyQualifiedAnnotationBeanNameGenerator.INSTANCE"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -100,10 +100,6 @@ public ReactorClientHttpConnector(HttpClient httpClient) {\n \tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n \n-\t\tif (!uri.isAbsolute()) {\n-\t\t\treturn Mono.error(new IllegalArgumentException(\"URI is not absolute: \" + uri));\n-\t\t}\n-\n \t\tAtomicReference<ReactorClientHttpResponse> responseRef = new AtomicReference<>();\n \n \t\treturn this.httpClient",
    "output": "Remove absolute URI check from ReactorClientHttpConnector This allows maknig use of the Unix Domain Socket support in Reactor 1.0"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -43,8 +43,6 @@\n import javax.annotation.Priority;\n import javax.security.auth.Subject;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.beans.BeansException;\n@@ -121,8 +119,6 @@\n  */\n class DefaultListableBeanFactoryTests {\n \n-\tprivate static final Log factoryLog = LogFactory.getLog(DefaultListableBeanFactory.class);\n-\n \tprivate DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();\n \n ",
    "output": "Remove unused field in DefaultListableBeanFactoryTests"
  },
  {
    "input": "diff --git a/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java b/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java\n--- a/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java\n+++ b/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java\n@@ -84,12 +84,12 @@ public void setup() {\n \t\t\t\t\t\"data:abcdefg-$1-hijklmnop-$1-qrstuvw-$1-xyz-$1\\n\\n\";\n \n \t\t\tint eventLength = String.format(eventTemplate, String.format(\"%05d\", 1)).length();\n-\t\t\tint eventCount = totalSize / eventLength;\n+\t\t\tint eventCount = this.totalSize / eventLength;\n \t\t\tDataBufferFactory bufferFactory = new DefaultDataBufferFactory();\n \n \t\t\tthis.chunks = Flux.range(1, eventCount)\n \t\t\t\t\t.map(index -> String.format(eventTemplate, String.format(\"%05d\", index)))\n-\t\t\t\t\t.buffer(chunkSize > eventLength ? chunkSize / eventLength : 1)\n+\t\t\t\t\t.buffer(this.chunkSize > eventLength ? this.chunkSize / eventLength : 1)\n \t\t\t\t\t.map(strings -> String.join(\"\", strings))\n \t\t\t\t\t.map(chunk -> {\n \t\t\t\t\t\tbyte[] bytes = chunk.getBytes(CHARSET);",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n@@ -120,7 +120,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\tRequest request = this.httpClient.newRequest(uri).method(method.toString());\n \n \t\treturn requestCallback.apply(new JettyClientHttpRequest(request, this.bufferFactory))\n-\t\t\t\t.then(Mono.from(ReactiveRequest.newBuilder(request).build()\n+\t\t\t\t.then(Mono.fromDirect(ReactiveRequest.newBuilder(request).build()\n \t\t\t\t\t\t.response((reactiveResponse, chunkPublisher) -> {\n \t\t\t\t\t\t\tFlux<DataBuffer> content = Flux.from(chunkPublisher).map(this::toDataBuffer);\n \t\t\t\t\t\t\treturn Mono.just(new JettyClientHttpResponse(reactiveResponse, content));",
    "output": "Use Mono.fromDirect for Jetty ReactiveRespnose"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java\n@@ -113,7 +113,7 @@ public void setImmutable() {\n \tpublic void setHeader(String name, @Nullable Object value) {\n \t\tif (name.equalsIgnoreCase(NATIVE_HEADERS)) {\n \t\t\t// Force removal since setHeader checks for equality\n-\t\t\tremoveHeader(NATIVE_HEADERS);\n+\t\t\tsuper.setHeader(NATIVE_HEADERS, null);\n \t\t}\n \t\tsuper.setHeader(name, value);\n \t}",
    "output": "Fix recursion issue caused by previous commit"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n@@ -146,6 +146,7 @@ protected boolean isHandler(Class<?> beanType) {\n \t * @see #getCustomTypeCondition(Class)\n \t */\n \t@Override\n+\t@Nullable\n \tprotected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n \t\tRequestMappingInfo info = createRequestMappingInfo(method);\n \t\tif (info != null) {",
    "output": "Add missing @Nullable to WebFlux RequestMappingHandlerMapping"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -53,6 +53,7 @@ public final class CallMetaDataProviderFactory {\n \n \t/** List of supported database products for function calls. */\n \tpublic static final List<String> supportedDatabaseProductsForFunctions = Arrays.asList(\n+\t\t\t\"MariaDB\",\n \t\t\t\"Microsoft SQL Server\",\n \t\t\t\"MySQL\",\n \t\t\t\"Oracle\",",
    "output": "Add MariaDB to the supported database products for functions as well"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -43,6 +43,7 @@ public final class CallMetaDataProviderFactory {\n \t\t\t\"Apache Derby\",\n \t\t\t\"DB2\",\n \t\t\t\"Informix Dynamic Server\",\n+\t\t\t\"MariaDB\",\n \t\t\t\"Microsoft SQL Server\",\n \t\t\t\"MySQL\",\n \t\t\t\"Oracle\",",
    "output": "Add MariaDB to the list of supported database products for procedures"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n@@ -70,7 +70,6 @@ public DataClassRowMapper(Class<T> mappedClass) {\n \t}\n \n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tprotected void initialize(Class<T> mappedClass) {\n \t\tsuper.initialize(mappedClass);",
    "output": "Remove unnecessary @SuppressWarnings"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -29,6 +29,7 @@\n import io.netty.buffer.ByteBufAllocator;\n import io.rsocket.ConnectionSetupPayload;\n import io.rsocket.DuplexConnection;\n+import io.rsocket.RSocketErrorException;\n import io.rsocket.core.DefaultConnectionSetupPayload;\n import io.rsocket.core.RSocketConnector;\n import io.rsocket.frame.decoder.PayloadDecoder;\n@@ -242,14 +243,12 @@ public ByteBuf setupFrame() {\n \t\t}\n \n \t\t@Override\n-\t\tpublic Mono<Void> send(Publisher<ByteBuf> frames) {\n-\t\t\treturn Mono.empty();\n+\t\tpublic void sendFrame(int i, ByteBuf byteBuf) {\n+\t\t\tthis.setupFrame = this.setupFrame == null ? byteBuf : this.setupFrame;\n \t\t}\n \n \t\t@Override\n-\t\tpublic Mono<Void> sendOne(ByteBuf frame) {\n-\t\t\tthis.setupFrame = frame;\n-\t\t\treturn Mono.empty();\n+\t\tpublic void sendErrorAndClose(RSocketErrorException e) {\n \t\t}\n \n \t\t@Override",
    "output": "Upgrade to RSocket 1.1-M2 and Reactor 2020.0.0-RC1"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -17,6 +17,8 @@\n package org.springframework.messaging.rsocket;\n \n import java.lang.reflect.Field;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n import java.time.Duration;\n import java.util.Collections;\n import java.util.List;\n@@ -273,6 +275,12 @@ public void dispose() {\n \t\tpublic boolean isDisposed() {\n \t\t\treturn false;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic SocketAddress remoteAddress() {\n+\t\t\treturn InetSocketAddress.createUnresolved(\"localhost\", 9090);\n+\t\t}\n+\n \t}\n \n ",
    "output": "Upgrade after RSocket SNAPSHOT changes"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java\n@@ -192,7 +192,7 @@ public void dataSourceInitialization() throws Exception {\n \t\tgiven(dataSource.getConnection()).willThrow(connectionException);\n \n \t\tSQLErrorCodeSQLExceptionTranslator sext = new SQLErrorCodeSQLExceptionTranslator(dataSource);\n-\t\tassertThat(sext.translate(\"test\", null, duplicateKeyException)).isNotInstanceOf(DuplicateKeyException.class);\n+\t\tassertThat(sext.translate(\"test\", null, duplicateKeyException)).isNull();\n \n \t\tDatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n \t\tgiven(databaseMetaData.getDatabaseProductName()).willReturn(\"Oracle\");",
    "output": "Fix assertion for the revised SQLExceptionTranslator contract in 5.3"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n--- a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.util.unit;\n \n+import java.io.Serializable;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -48,7 +49,8 @@\n  * @since 5.1\n  * @see DataUnit\n  */\n-public final class DataSize implements Comparable<DataSize> {\n+@SuppressWarnings(\"serial\")\n+public final class DataSize implements Comparable<DataSize>, Serializable {\n \n \t/**\n \t * The pattern for parsing.",
    "output": "Make DataSize serializable"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n@@ -58,22 +58,6 @@ public class ModelAssertionTests {\n \t\t\t\t\t.alwaysExpect(status().isOk())\n \t\t\t\t\t.build();\n \n-\t@Test\n-\tvoid name() throws Exception {\n-\n-\tEntityExchangeResult<Void> result = client.get().uri(\"/path\")\n-\t\t\t.exchange()\n-\t\t\t.expectBody().isEmpty();\n-\n-\tMockMvcWebTestClient.resultActionsFor(result)\n-\t\t\t.andExpect(model().attribute(\"integer\", 3))\n-\t\t\t.andExpect(model().attribute(\"string\", \"a string value\"))\n-\t\t\t.andExpect(model().attribute(\"integer\", equalTo(3))) // Hamcrest...\n-\t\t\t.andExpect(model().attribute(\"string\", equalTo(\"a string value\")))\n-\t\t\t.andExpect(model().attribute(\"globalAttrName\", equalTo(\"Global Attribute Value\")));\n-\n-\t}\n-\n \t@Test\n \tvoid attributeEqualTo() throws Exception {\n \t\tperformRequest(HttpMethod.GET, \"/\")",
    "output": "Remove erroneously committed change"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java\n@@ -49,7 +49,7 @@ public class ReplaceOverride extends MethodOverride {\n \t */\n \tpublic ReplaceOverride(String methodName, String methodReplacerBeanName) {\n \t\tsuper(methodName);\n-\t\tAssert.notNull(methodName, \"Method replacer bean name must not be null\");\n+\t\tAssert.notNull(methodReplacerBeanName, \"Method replacer bean name must not be null\");\n \t\tthis.methodReplacerBeanName = methodReplacerBeanName;\n \t}\n ",
    "output": "change assert in replaceOverride constructor from methodName to methodReplacerBeanName"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java\n@@ -158,7 +158,7 @@ else if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n \t\tif (selected != null) {\n \t\t\tselected = selected.removeQualityValue();\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Using '\" + selected + \"' given \" + acceptableTypes +\n+\t\t\t\tlogger.debug(exchange.getLogPrefix() + \"Using '\" + selected + \"' given \" + acceptableTypes +\n \t\t\t\t\t\t\" and supported \" + producibleTypes);\n \t\t\t}\n \t\t}",
    "output": "Add logPrefix to the log statement Add logPrefix to the log statement to provide better debugging experience"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java b/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java\n@@ -32,6 +32,7 @@\n  * @see JmsTemplate#convertAndSend(javax.jms.Destination, Object, MessagePostProcessor)\n  * @see org.springframework.jms.support.converter.MessageConverter\n  */\n+@FunctionalInterface\n public interface MessagePostProcessor {\n \n \t/**\n\ndiff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java b/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java\n@@ -28,6 +28,7 @@\n  * @see MessageSendingOperations\n  * @see MessageRequestReplyOperations\n  */\n+@FunctionalInterface\n public interface MessagePostProcessor {\n \n \t/**",
    "output": "Add @FunctionalInterface to MessagePostProcessor Add the @FunctionalInterface annotation to the MessagePostProcessor interfaces in the spring-jms and spring-messaging projects"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java\n@@ -109,11 +109,11 @@ public void doesNotSupportType() throws Exception {\n \tpublic void deferredResultSubscriberWithOneValue() throws Exception {\n \n \t\t// Mono\n-\t\tMonoProcessor<String> mono = MonoProcessor.create();\n+\t\tMonoProcessor<String> mono = MonoProcessor.fromSink(Sinks.one());\n \t\ttestDeferredResultSubscriber(mono, Mono.class, forClass(String.class), () -> mono.onNext(\"foo\"), \"foo\");\n \n \t\t// Mono empty\n-\t\tMonoProcessor<String> monoEmpty = MonoProcessor.create();\n+\t\tMonoProcessor<String> monoEmpty = MonoProcessor.fromSink(Sinks.one());\n \t\ttestDeferredResultSubscriber(monoEmpty, Mono.class, forClass(String.class), monoEmpty::onComplete, null);\n \n \t\t// RxJava Single",
    "output": "Upgrade ReactiveTypeHandlerTests due to deprecations in Reactor"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n@@ -335,7 +335,6 @@ protected String toLocaleValue(Locale locale) {\n \t * @see #setDefaultLocale\n \t * @see javax.servlet.http.HttpServletRequest#getLocale()\n \t */\n-\t@Nullable\n \tprotected Locale determineDefaultLocale(HttpServletRequest request) {\n \t\tLocale defaultLocale = getDefaultLocale();\n \t\tif (defaultLocale == null) {",
    "output": "Remove @Nullable from CookieLocaleResolver#determineDefaultLocaleBy definition, this method should not return `null`"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n@@ -25,6 +25,7 @@\n \n import org.junit.jupiter.api.Test;\n \n+import static java.time.DayOfWeek.FRIDAY;\n import static java.time.DayOfWeek.MONDAY;\n import static java.time.DayOfWeek.TUESDAY;\n import static java.time.DayOfWeek.WEDNESDAY;\n@@ -444,4 +445,21 @@ public void fixedDays() {\n \t\tassertThat(actual.getDayOfWeek()).isEqualTo(WEDNESDAY);\n \t}\n \n+\t@Test\n+\tvoid friday13th() {\n+\t\tCronExpression expression = CronExpression.parse(\"0 0 0 13 * FRI\");\n+\n+\t\tLocalDateTime last = LocalDateTime.of(2018, 7, 31, 11, 47, 14);\n+\t\tLocalDateTime actual = expression.next(last);\n+\t\tassertThat(actual).isNotNull();\n+\t\tassertThat(actual.getDayOfWeek()).isEqualTo(FRIDAY);\n+\t\tassertThat(actual.getDayOfMonth()).isEqualTo(13);\n+\n+\t\tlast = actual;\n+\t\tactual = expression.next(last);\n+\t\tassertThat(actual).isNotNull();\n+\t\tassertThat(actual.getDayOfWeek()).isEqualTo(FRIDAY);\n+\t\tassertThat(actual.getDayOfMonth()).isEqualTo(13);\n+\t}\n+\n }",
    "output": "Add test for Friday 13th crontab failure Added test for Friday 13th trigger, i.e. an uncommon crontab expression. With the new CronExpression in place, this failure does not occur anymore"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n@@ -431,4 +431,17 @@ void monthSequence() {\n \t\tassertThat(expression.next(last)).isEqualTo(expected);\n \t}\n \n+\t@Test\n+\tpublic void fixedDays() {\n+\t\tCronExpression expression = CronExpression.parse(\"0 0 0 29 2 WED\");\n+\n+\t\tLocalDateTime last = LocalDateTime.of(2012, 2, 29, 1, 0);\n+\t\tassertThat(last.getDayOfWeek()).isEqualTo(WEDNESDAY);\n+\n+\t\tLocalDateTime actual = expression.next(last);\n+\t\tassertThat(actual).isNotNull();\n+\t\tassertThat(actual.getDayOfMonth()).isEqualTo(29);\n+\t\tassertThat(actual.getDayOfWeek()).isEqualTo(WEDNESDAY);\n+\t}\n+\n }",
    "output": "Add test for combination of fixed date fields Added test for a fixed day-of-week and day-of-month combination. With the new CronExpression in place, this failure does not occur anymore"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -211,7 +211,7 @@ public Iterator<MergedAnnotation<Annotation>> iterator() {\n \t@Override\n \tpublic Spliterator<MergedAnnotation<Annotation>> spliterator() {\n \t\tif (this.annotationFilter == AnnotationFilter.ALL) {\n-\t\t\treturn Collections.<MergedAnnotation<Annotation>> emptyList().spliterator();\n+\t\t\treturn Spliterators.emptySpliterator();\n \t\t}\n \t\treturn spliterator(null);\n \t}",
    "output": "Use Spliterators.emptySpliteratorin TypeMappedAnnotations For greater clarity, this commit invokes Spliterators.emptySpliteratordirectly instead of going through java.util.Collections.EmptyList"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -510,7 +510,7 @@ public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {\n \n \tprotected void addCacheHeaders(ServerHttpResponse response) {\n \t\tresponse.getHeaders().setCacheControl(\"public, max-age=\" + ONE_YEAR);\n-\t\tresponse.getHeaders().setExpires(new Date().getTime() + ONE_YEAR * 1000);\n+\t\tresponse.getHeaders().setExpires(System.currentTimeMillis() + ONE_YEAR * 1000);\n \t}\n \n \tprotected void addNoCacheHeaders(ServerHttpResponse response) {",
    "output": "Use System.currentTimeMillisin AbstractSockJsService"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java\n@@ -275,7 +275,7 @@ protected void assertException(Method method, String pointcut, String returning,\n \n \n \tprivate static String format(String[] names) {\n-\t\tStringBuffer sb = new StringBuffer();\n+\t\tStringBuilder sb = new StringBuilder();\n \t\tsb.append(\"(\");\n \t\tfor (int i = 0; i < names.length; i++) {\n \t\t\tsb.append(names[i]);",
    "output": "Use StringBuilder instead of StringBuffer in tests"
  },
  {
    "input": "diff --git a/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java b/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java\n--- a/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java\n+++ b/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java\n@@ -63,8 +63,7 @@ public TestCompiler(JavaCompiler compiler, Path tempDir) throws IOException {\n \n \n \tpublic TestCompilationTask getTask(Class<?>... types) {\n-\t\tList<String> names = Arrays.stream(types).map(Class::getName).collect(Collectors.toList());\n-\t\treturn getTask(names.toArray(new String[names.size()]));\n+\t\treturn getTask(Arrays.stream(types).map(Class::getName).toArray(String[]::new));\n \t}\n \n \tpublic TestCompilationTask getTask(String... types) {",
    "output": "Use Stream#toArray in TestCompiler"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n@@ -726,6 +726,7 @@ private void growCollectionIfNecessary() {\n \t\t\t}\n \t\t}\n \n+\t\t@Nullable\n \t\tprivate Constructor<?> getDefaultConstructor(Class<?> type) {\n \t\t\ttry {\n \t\t\t\treturn ReflectionUtils.accessibleConstructor(type);",
    "output": "Add @Nullable declaration to getDefaultConstructor"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -263,8 +263,9 @@ public LinkedMultiValueMap<String, String> getSubscriptions(String destination)\n \t\t\tif (sessionIdToSubscriptionIds == null) {\n \t\t\t\tsessionIdToSubscriptionIds = this.destinationCache.computeIfAbsent(destination, _destination -> {\n \t\t\t\t\tLinkedMultiValueMap<String, String> matches = computeMatchingSubscriptions(destination);\n-\t\t\t\t\tthis.cacheSize.incrementAndGet();\n+\t\t\t\t\t// Update queue first, so that cacheSize <= queue.size(\n \t\t\t\t\tthis.cacheEvictionPolicy.add(destination);\n+\t\t\t\t\tthis.cacheSize.incrementAndGet();\n \t\t\t\t\treturn matches;\n \t\t\t\t});\n \t\t\t\tensureCacheLimit();\n@@ -309,7 +310,9 @@ private void ensureCacheLimit() {\n \t\t\tif (size > cacheLimit) {\n \t\t\t\tdo {\n \t\t\t\t\tif (this.cacheSize.compareAndSet(size, size - 1)) {\n-\t\t\t\t\t\tthis.destinationCache.remove(this.cacheEvictionPolicy.poll());\n+\t\t\t\t\t\t// Remove (vs poll): we expect an element\n+\t\t\t\t\t\tString head = this.cacheEvictionPolicy.remove();\n+\t\t\t\t\t\tthis.destinationCache.remove(head);\n \t\t\t\t\t}\n \t\t\t\t} while ((size = this.cacheSize.get()) > cacheLimit);\n \t\t\t}",
    "output": "Upgrade eviction queue before size"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java\n--- a/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java\n+++ b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -200,8 +200,7 @@ private long computeNextInterval() {\n \t\t\t}\n \t\t\telse if (this.currentInterval < 0) {\n \t\t\t\tlong initialInterval = getInitialInterval();\n-\t\t\t\tthis.currentInterval = (initialInterval < maxInterval\n-\t\t\t\t\t\t? initialInterval : maxInterval);\n+\t\t\t\tthis.currentInterval = Math.min(initialInterval, maxInterval);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthis.currentInterval = multiplyInterval(maxInterval);\n@@ -212,7 +211,7 @@ else if (this.currentInterval < 0) {\n \t\tprivate long multiplyInterval(long maxInterval) {\n \t\t\tlong i = this.currentInterval;\n \t\t\ti *= getMultiplier();\n-\t\t\treturn (i > maxInterval ? maxInterval : i);\n+\t\t\treturn Math.min(i, maxInterval);\n \t\t}\n \n ",
    "output": "Use Math.minin ExponentialBackOff Use Math.mininstead of doing it manually in ExponentialBackOff"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -255,7 +255,7 @@ protected String underscoreName(String name) {\n \t\t\t\tresult.append('_').append(Character.toLowerCase(s));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tresult.append(Character.toLowerCase(s));\n+\t\t\t\tresult.append(s);\n \t\t\t}\n \t\t}\n \t\treturn result.toString();",
    "output": "Remove redundant Character.toLowerCasein BeanPropertyRowMapper This commit removes a redundant Character.toLowerCaseinvocation in BeanPropertyRowMapper.underscoreName"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SocketUtils.java b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -54,7 +54,7 @@ public class SocketUtils {\n \tpublic static final int PORT_RANGE_MAX = 65535;\n \n \n-\tprivate static final Random random = new Random(System.currentTimeMillis());\n+\tprivate static final Random random = new Random(System.nanoTime());\n \n \n \t/**",
    "output": "Use System.nanoTimefor Random seed in SocketUtils Prior to this commit, SocketUtils used System.currentTimeMillisfor the seed for the java.util.Random instance used internally. The use of the milliseconds value returned by currentTimeMilliscan lead to collisions for randomly selected free ports for tests executing in parallel on the same computer. This commit therefore switches to System.nanoTimefor the Random seed used in SocketUtils in an attempt to avoid such collisions for tests executing in parallel in different JVMs on the same computer"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n@@ -85,7 +85,6 @@ class ConfigurationClassBeanDefinitionReader {\n \t * <p>The default is \"false\".\n \t */\n \tprivate static final boolean shouldIgnoreXml = SpringProperties.getFlag(\"spring.xml.ignore\");\n-\t\n \n \tprivate final BeanDefinitionRegistry registry;\n ",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n@@ -78,7 +78,7 @@ public AllEncompassingFormHttpMessageConverter() {\n \t\t\t\t// Ignore when no TransformerFactory implementation is available\n \t\t\t}\n \n-\t\t\tif (jaxb2Present) {\n+\t\t\tif (jaxb2Present && !jackson2XmlPresent) {\n \t\t\t\taddPartConverter(new Jaxb2RootElementHttpMessageConverter());\n \t\t\t}\n \t\t}",
    "output": "Fix an AllEncompassingFormHttpMessageConverter regression Restore previous behavior to configure Jaxb2RootElementHttpMessageConverter when JAXB but not Jackson are present"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -23,6 +23,7 @@\n \n import javax.net.ssl.SSLSession;\n \n+import io.netty.channel.Channel;\n import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.cookie.Cookie;\n import io.netty.handler.ssl.SslHandler;\n@@ -166,7 +167,11 @@ public InetSocketAddress getRemoteAddress() {\n \t@Override\n \t@Nullable\n \tprotected SslInfo initSslInfo() {\n-\t\tSslHandler sslHandler = ((Connection) this.request).channel().pipeline().get(SslHandler.class);\n+\t\tChannel channel = ((Connection) this.request).channel();\n+\t\tSslHandler sslHandler = channel.pipeline().get(SslHandler.class);\n+\t\tif (sslHandler == null && channel.parent() != null) { // HTTP/2\n+\t\t\tsslHandler = channel.parent().pipeline().get(SslHandler.class);\n+\t\t}\n \t\tif (sslHandler != null) {\n \t\t\tSSLSession session = sslHandler.engine().getSession();\n \t\t\treturn new DefaultSslInfo(session);",
    "output": "Fix missing sslInfo with Reactor Netty and http/2 Prior to this commit, the `SslInfo` would be missing for WebFlux apps when deployed on Reactor Netty with http/2. This commit ensures that the request adapter checks the current channel and the parent channel for the presence of the `SslHander`. In the case of http/2, the `SslHander` is tied to the parent channel"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n@@ -71,6 +71,7 @@\n  *\n  * @author Rod Johnson\n  * @author Juergen Hoeller\n+ * @author Qimiao Chen\n  * @see #setBasenames\n  * @see ReloadableResourceBundleMessageSource\n  * @see java.util.ResourceBundle\n@@ -331,19 +332,10 @@ protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Loc\n \t\tString msg = getStringOrNull(bundle, code);\n \t\tif (msg != null) {\n \t\t\tif (codeMap == null) {\n-\t\t\t\tcodeMap = new ConcurrentHashMap<>();\n-\t\t\t\tMap<String, Map<Locale, MessageFormat>> existing =\n-\t\t\t\t\t\tthis.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap);\n-\t\t\t\tif (existing != null) {\n-\t\t\t\t\tcodeMap = existing;\n-\t\t\t\t}\n+\t\t\t\tcodeMap = this.cachedBundleMessageFormats.computeIfAbsent(bundle, b -> new ConcurrentHashMap<>());\n \t\t\t}\n \t\t\tif (localeMap == null) {\n-\t\t\t\tlocaleMap = new ConcurrentHashMap<>();\n-\t\t\t\tMap<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap);\n-\t\t\t\tif (existing != null) {\n-\t\t\t\t\tlocaleMap = existing;\n-\t\t\t\t}\n+\t\t\t\tlocaleMap = codeMap.computeIfAbsent(code, c -> new ConcurrentHashMap<>());\n \t\t\t}\n \t\t\tMessageFormat result = createMessageFormat(msg, locale);\n \t\t\tlocaleMap.put(locale, result);",
    "output": "Use computeIfAbsent in ResourceBundleMessageSource"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -52,7 +52,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -75,7 +75,7 @@ public class DefaultRSocketRequesterBuilderTests {\n \t@BeforeEach\n \tpublic void setup() {\n \t\tthis.transport = mock(ClientTransport.class);\n-\t\tgiven(this.transport.connect(anyInt())).willReturn(Mono.just(this.connection));\n+\t\tgiven(this.transport.connect()).willReturn(Mono.just(this.connection));\n \t}\n \n \n@@ -106,7 +106,7 @@ public void rsocketConnectorConfigurer() {\n \n \t\t// RSocketStrategies and RSocketConnector configurers should have been called\n \n-\t\tverify(this.transport).connect(anyInt());\n+\t\tverify(this.transport).connect();\n \t\tverify(strategiesConfigurer).accept(any(RSocketStrategies.Builder.class));\n \t\tverify(factoryConfigurer).configure(any(io.rsocket.RSocketFactory.ClientRSocketFactory.class));\n \t\tassertThat(this.connectorConfigurer.connector()).isNotNull();",
    "output": "Upgrade to RSocket 1.0.1"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -182,6 +182,9 @@ void publishComplete(WriteResultPublisher publisher) {\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {\n \t\t\t\tpublisher.errorBeforeSubscribed = ex;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishError(publisher, ex);\n+\t\t\t\t}\n \t\t\t}\n \t\t},\n \n@@ -200,6 +203,9 @@ void publishComplete(WriteResultPublisher publisher) {\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {\n \t\t\t\tpublisher.errorBeforeSubscribed = ex;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishError(publisher, ex);\n+\t\t\t\t}\n \t\t\t}\n \t\t},\n ",
    "output": "Fix race condition in WriteResultPublisher between subscription and error from the Publish"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -235,7 +235,6 @@ public ContentNegotiationManager getContentNegotiationManager() {\n \t * {@code HttpMessageConverter}.\n \t */\n \tpublic void setResponseBodyAdvice(@Nullable List<ResponseBodyAdvice<?>> responseBodyAdvice) {\n-\t\tthis.responseBodyAdvice.clear();\n \t\tif (responseBodyAdvice != null) {\n \t\t\tthis.responseBodyAdvice.addAll(responseBodyAdvice);\n \t\t}",
    "output": "Fix ExceptionHandlerExceptionResolver.setResponseBodyAdvice behaviour Prior to this commit, calling the `setResponseBodyAdvice` method would clear all existing `ResponseBodyAdvice` instances present in the list before adding provided one. This behavior is inconsistent with the Javadoc and other implementations. This brings the method in line with the existing documentation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -675,10 +675,4 @@ public void setDefaultEncoding(String defaultEncoding) {\n \t\t}\n \t};\n \n-\n-\tprivate static class HttpServletMappingHelper {\n-\n-\n-\n-\t}\n }",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -439,7 +439,8 @@ private static String escapeQuotationsInFilename(String filename) {\n \t\tfor (char c : filename.toCharArray()) {\n \t\t\tif (!escaped && c == '\"') {\n \t\t\t\tsb.append(\"\\\\\\\"\");\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\tsb.append(c);\n \t\t\t}\n \t\t\tescaped = (!escaped && c == '\\\\');",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -183,8 +183,8 @@ protected MessageFormat resolveCode(String code, Locale locale) {\n \n \n \t/**\n-\t * Return a ResourceBundle for the given basename and code,\n-\t * fetching already generated MessageFormats from the cache.\n+\t * Return a ResourceBundle for the given basename and Locale,\n+\t * fetching already generated ResourceBundle from the cache.\n \t * @param basename the basename of the ResourceBundle\n \t * @param locale the Locale to find the ResourceBundle for\n \t * @return the resulting ResourceBundle, or {@code null} if none\n@@ -209,11 +209,7 @@ protected ResourceBundle getResourceBundle(String basename, Locale locale) {\n \t\t\ttry {\n \t\t\t\tResourceBundle bundle = doGetBundle(basename, locale);\n \t\t\t\tif (localeMap == null) {\n-\t\t\t\t\tlocaleMap = new ConcurrentHashMap<>();\n-\t\t\t\t\tMap<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap);\n-\t\t\t\t\tif (existing != null) {\n-\t\t\t\t\t\tlocaleMap = existing;\n-\t\t\t\t\t}\n+\t\t\t\t\tlocaleMap = this.cachedResourceBundles.computeIfAbsent(basename, bn -> new ConcurrentHashMap<>());\n \t\t\t\t}\n \t\t\t\tlocaleMap.put(locale, bundle);\n \t\t\t\treturn bundle;",
    "output": "Use computeIfAbsent in ResourceBundleMessageSource This commit optimizes code in ResourceBundleMessageSource by using computeIfAbsent instead of putIfAbsent. In addition, the content of some Javadoc has been adjusted"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java b/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java\n--- a/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java\n+++ b/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java\n@@ -293,8 +293,8 @@ private void doTestRmiProxyFactoryBeanWithBusinessInterfaceAndExceptionAndRefres\n \t\tassertThat(condition1).isFalse();\n \t\tassertThatExceptionOfType(springExceptionClass).isThrownBy(() ->\n \t\t\t\tproxy.setName(rmiExceptionClass.getName()));\n-\t\tboolean isRemoteConnectFaiure = RemoteConnectFailureException.class.isAssignableFrom(springExceptionClass);\n-\t\tassertThat(factory.counter).isEqualTo(isRemoteConnectFaiure ? 2 : 1);\n+\t\tboolean isRemoteConnectFailure = RemoteConnectFailureException.class.isAssignableFrom(springExceptionClass);\n+\t\tassertThat(factory.counter).isEqualTo(isRemoteConnectFailure ? 2 : 1);\n \t}\n \n \t@Test",
    "output": "Fix typo in RmiSupportTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java\n@@ -26,7 +26,6 @@\n import org.springframework.web.socket.CloseStatus;\n import org.springframework.web.socket.TextMessage;\n import org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator;\n-import org.springframework.web.socket.sockjs.SockJsMessageDeliveryException;\n import org.springframework.web.socket.sockjs.SockJsTransportFailureException;\n import org.springframework.web.socket.sockjs.frame.SockJsFrame;\n \n@@ -118,10 +117,7 @@ public void delegateMessagesWithError() throws Exception {\n \t\twillThrow(new IOException()).given(this.webSocketHandler).handleMessage(session, new TextMessage(msg2));\n \n \t\tsession.delegateConnectionEstablished();\n-\n-\t\tassertThatExceptionOfType(SockJsMessageDeliveryException.class)\n-\t\t\t\t.isThrownBy(() -> session.delegateMessages(msg1, msg2, msg3))\n-\t\t\t\t.satisfies(ex -> assertThat(ex.getUndeliveredMessages()).containsExactly(msg3));\n+\t\tsession.delegateMessages(msg1, msg2, msg3);\n \n \t\tverify(this.webSocketHandler).afterConnectionEstablished(session);\n \t\tverify(this.webSocketHandler).handleMessage(session, new TextMessage(msg1));",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n@@ -175,6 +175,9 @@ void subscribe(WriteResultPublisher publisher, Subscriber<? super Void> subscrib\n \t\t\t@Override\n \t\t\tvoid publishComplete(WriteResultPublisher publisher) {\n \t\t\t\tpublisher.completedBeforeSubscribed = true;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishComplete(publisher);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {\n@@ -190,6 +193,9 @@ void request(WriteResultPublisher publisher, long n) {\n \t\t\t@Override\n \t\t\tvoid publishComplete(WriteResultPublisher publisher) {\n \t\t\t\tpublisher.completedBeforeSubscribed = true;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishComplete(publisher);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {",
    "output": "Fix race condition in WriteResultPublisher"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -769,6 +769,9 @@ public void setParentBeanFactory(@Nullable BeanFactory parentBeanFactory) {\n \t\tif (this.parentBeanFactory != null && this.parentBeanFactory != parentBeanFactory) {\n \t\t\tthrow new IllegalStateException(\"Already associated with parent BeanFactory: \" + this.parentBeanFactory);\n \t\t}\n+\t\tif(this == parentBeanFactory) {\n+\t\t\tthrow new IllegalStateException(\"Can not set parent bean factory to self.\");\n+\t\t}\n \t\tthis.parentBeanFactory = parentBeanFactory;\n \t}\n ",
    "output": "Fix parent bean factory self-reference issue. If set parent bean factory to self, once try to get an undefined bean, bellow condition if (parentBeanFactory != null && !containsBeanDefinition(beanName)) { ... } will always be true and StackOverflowError will be thrown. Sometimes, this issue is hard to detect during runtime, if self-reference is not allowed here, error will be found at the early time of startup. Also, a self-reference parent bean factory is valueless"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n@@ -591,8 +591,11 @@ public void releaseReadLock() {\n \n \t\tpublic void register(T mapping, Object handler, Method method) {\n \t\t\t// Assert that the handler method is not a suspending one.\n-\t\t\tif (KotlinDetector.isKotlinType(method.getDeclaringClass()) && KotlinDelegate.isSuspend(method)) {\n-\t\t\t\tthrow new IllegalStateException(\"Unsupported suspending handler method detected: \" + method);\n+\t\t\tif (KotlinDetector.isKotlinType(method.getDeclaringClass())) {\n+\t\t\t\tClass<?>[] parameterTypes = method.getParameterTypes();\n+\t\t\t\tif ((parameterTypes.length > 0) && \"kotlin.coroutines.Continuation\".equals(parameterTypes[parameterTypes.length - 1].getName())) {\n+\t\t\t\t\tthrow new IllegalStateException(\"Unsupported suspending handler method detected: \" + method);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tthis.readWriteLock.writeLock().lock();\n \t\t\ttry {",
    "output": "Make it possible to run Spring MVC without kotlin-reflect"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java\n@@ -368,7 +368,7 @@ public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, Strin\n \t\t\t\t// Key is of form: prefix<name>.property\n \t\t\t\tString nameAndProperty = keyString.substring(prefix.length());\n \t\t\t\t// Find dot before property name, ignoring dots in property keys.\n-\t\t\t\tint sepIdx = -1;\n+\t\t\t\tint sepIdx ;\n \t\t\t\tint propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n \t\t\t\tif (propKeyIdx != -1) {\n \t\t\t\t\tsepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx);",
    "output": "Remove unnecessary assignment in PropertiesBeanDefinitionReader"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java b/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n@@ -26,7 +26,6 @@\n \n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.lang.Nullable;\n import org.springframework.test.context.ContextCustomizer;\n import org.springframework.test.context.DynamicPropertyRegistry;\n import org.springframework.test.context.DynamicPropertySource;\n@@ -73,7 +72,6 @@ public void customizeContext(ConfigurableApplicationContext context,\n \t\tsources.addFirst(new DynamicValuesPropertySource(PROPERTY_SOURCE_NAME, buildDynamicPropertiesMap()));\n \t}\n \n-\t@Nullable\n \tprivate Map<String, Supplier<Object>> buildDynamicPropertiesMap() {\n \t\tMap<String, Supplier<Object>> map = new LinkedHashMap<>();\n \t\tDynamicPropertyRegistry dynamicPropertyRegistry = (name, valueSupplier) -> {",
    "output": "Remove incorrect @Nullable in DynamicPropertiesContextCustomizer"
  },
  {
    "input": "diff --git a/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java b/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java\n--- a/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java\n+++ b/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,7 +65,7 @@ public ComponentDefinition getComponentDefinition(String name) {\n \n \tpublic ComponentDefinition[] getComponentDefinitions() {\n \t\tCollection<ComponentDefinition> collection = this.componentDefinitions.values();\n-\t\treturn collection.toArray(new ComponentDefinition[collection.size()]);\n+\t\treturn collection.toArray(new ComponentDefinition[0]);\n \t}\n \n \t@Override",
    "output": "Remove unnecessary mem alloc in CollectingReaderEventListener"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -151,7 +151,7 @@ public class CommonAnnotationBeanPostProcessor extends InitDestroyAnnotationBean\n \t@Nullable\n \tprivate static Class<? extends Annotation> ejbRefClass;\n \n-\tprivate static Set<Class<? extends Annotation>> resourceAnnotationTypes = new LinkedHashSet<>(4);\n+\tprivate final static Set<Class<? extends Annotation>> resourceAnnotationTypes = new LinkedHashSet<>(4);\n \n \tstatic {\n \t\ttry {",
    "output": "Make resourceAnnotationTypes field final in CommonAnnotationBPP"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n@@ -248,7 +248,7 @@ private String initDomain(String domain) {\n \t\t\t\tif (lenient && !StringUtils.isEmpty(domain)) {\n \t\t\t\t\tString s = domain.trim();\n \t\t\t\t\tif (s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) {\n-\t\t\t\t\t\tif (s.substring(1, domain.length() - 1).trim().isEmpty()) {\n+\t\t\t\t\t\tif (s.substring(1, s.length() - 1).trim().isEmpty()) {\n \t\t\t\t\t\t\treturn null;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n@@ -86,7 +86,7 @@ public void domainWithEmptyDoubleQuotes() {\n \n \t\tArrays.asList(\"\\\"\\\"\", \"\\t\\\"\\\" \", \" \\\" \\t \\\"\\t\")\n \t\t\t\t.forEach(domain -> {\n-\t\t\t\t\tResponseCookie cookie = ResponseCookie.fromClientResponse(\"id\", \"1fWa\").domain(\"\\\"\\\"\").build();\n+\t\t\t\t\tResponseCookie cookie = ResponseCookie.fromClientResponse(\"id\", \"1fWa\").domain(domain).build();\n \t\t\t\t\tassertThat(cookie.getDomain()).isNull();\n \t\t\t\t});\n ",
    "output": "Fix empty domain handling in ResponseCookie This commit also updates its test to use its intended inputs"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -85,7 +85,7 @@ public abstract class ConvertingEncoderDecoderSupport<T, M> {\n \t */\n \tpublic void init(EndpointConfig config) {\n \t\tApplicationContext applicationContext = getApplicationContext();\n-\t\tif (applicationContext != null && applicationContext instanceof ConfigurableApplicationContext) {\n+\t\tif (applicationContext instanceof ConfigurableApplicationContext) {\n \t\t\tConfigurableListableBeanFactory beanFactory =\n \t\t\t\t\t((ConfigurableApplicationContext) applicationContext).getBeanFactory();\n \t\t\tbeanFactory.autowireBean(this);",
    "output": "Remove unnecessary check in ConvertingEncoderDecoderSupport"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1343,7 +1343,7 @@ protected RootBeanDefinition getMergedBeanDefinition(\n \t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\tthrow new NoSuchBeanDefinitionException(parentBeanName,\n \t\t\t\t\t\t\t\t\t\t\"Parent name '\" + parentBeanName + \"' is equal to bean name '\" + beanName +\n-\t\t\t\t\t\t\t\t\t\t\"': cannot be resolved without an AbstractBeanFactory parent\");\n+\t\t\t\t\t\t\t\t\t\t\"': cannot be resolved without a ConfigurableBeanFactory parent\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Fix exception message in getMergedBeanDefinition"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -876,15 +876,14 @@ public int accept(Method method) {\n \t\t\t\t\t}\n \t\t\t\t\treturn AOP_PROXY;\n \t\t\t\t}\n-\t\t\t\tMethod key = method;\n \t\t\t\t// Check to see if we have fixed interceptor to serve this method.\n \t\t\t\t// Else use the AOP_PROXY.\n-\t\t\t\tif (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n+\t\t\t\tif (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(method)) {\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\t\tlogger.trace(\"Method has advice and optimizations are enabled: \" + method);\n \t\t\t\t\t}\n \t\t\t\t\t// We know that we are optimizing so we can use the FixedStaticChainInterceptors.\n-\t\t\t\t\tint index = this.fixedInterceptorMap.get(key);\n+\t\t\t\t\tint index = this.fixedInterceptorMap.get(method);\n \t\t\t\t\treturn (index + this.fixedInterceptorOffset);\n \t\t\t\t}\n \t\t\t\telse {",
    "output": "Remove unnecessary variable declaration in ProxyCallbackFilter"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n@@ -254,7 +254,7 @@ public Object getObject() throws BeansException {\n \t\t\treturn getSingletonInstance();\n \t\t}\n \t\telse {\n-\t\t\tif (this.targetName == null) {\n+\t\t\tif (this.targetName == null && logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(\"Using non-singleton proxies with singleton targets is often undesirable. \" +\n \t\t\t\t\t\t\"Enable prototype proxies by setting the 'targetName' property.\");\n \t\t\t}",
    "output": "Add logger.isInfoEnabled check before logger.info"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -90,7 +90,7 @@\n  */\n public class RestTemplate extends InterceptingHttpAccessor implements RestOperations {\n \n-\tprivate static boolean romePresent;\n+\tprivate static final boolean romePresent;\n \n \tprivate static final boolean jaxb2Present;\n ",
    "output": "Add missing final declaration for static field"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java b/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java\n--- a/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java\n+++ b/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -146,7 +146,7 @@ public Object invoke(MethodInvocation mi) throws Throwable {\n \t\t\telse {\n \t\t\t\tPersistenceExceptionTranslator translator = this.persistenceExceptionTranslator;\n \t\t\t\tif (translator == null) {\n-\t\t\t\t\tAssert.state(this.beanFactory != null, \"No PersistenceExceptionTranslator set\");\n+\t\t\t\t\tAssert.state(this.beanFactory != null, \"Cannot use PersistenceExceptionTranslator autodetection without ListableBeanFactory\");\n \t\t\t\t\ttranslator = detectPersistenceExceptionTranslators(this.beanFactory);\n \t\t\t\t\tthis.persistenceExceptionTranslator = translator;\n \t\t\t\t}",
    "output": "Improve assertion message in PersistenceExceptionTranslationInterceptor"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,10 +52,10 @@ public static void execute(DatabasePopulator populator, DataSource dataSource) t\n \t\t\t\tDataSourceUtils.releaseConnection(connection, dataSource);\n \t\t\t}\n \t\t}\n+\t\tcatch (ScriptException ex){\n+\t\t\tthrow ex;\n+\t\t}\n \t\tcatch (Throwable ex) {\n-\t\t\tif (ex instanceof ScriptException) {\n-\t\t\t\tthrow (ScriptException) ex;\n-\t\t\t}\n \t\t\tthrow new UncategorizedScriptException(\"Failed to execute database script\", ex);\n \t\t}\n \t}",
    "output": "Use dedicated catch block for ScriptException"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n@@ -325,13 +325,9 @@ static String readScript(EncodedResource resource) throws IOException {\n \tprivate static String readScript(EncodedResource resource, @Nullable String[] commentPrefixes,\n \t\t\t@Nullable String separator, @Nullable String blockCommentEndDelimiter) throws IOException {\n \n-\t\tLineNumberReader lnr = new LineNumberReader(resource.getReader());\n-\t\ttry {\n+\t\ttry (LineNumberReader lnr = new LineNumberReader(resource.getReader())) {\n \t\t\treturn readScript(lnr, commentPrefixes, separator, blockCommentEndDelimiter);\n \t\t}\n-\t\tfinally {\n-\t\t\tlnr.close();\n-\t\t}\n \t}\n \n \t/**",
    "output": "Use try-with-resource in ScriptUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n@@ -231,7 +231,8 @@ public static String copyToString(@Nullable Reader in) throws IOException {\n \tprivate static void close(Closeable closeable) {\n \t\ttry {\n \t\t\tcloseable.close();\n-\t\t} catch (IOException ex) {\n+\t\t}\n+\t\tcatch (IOException ex) {\n \t\t\t// ignore\n \t\t}\n \t}",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -821,14 +821,9 @@ protected long getLastModifiedInternal(HttpServletRequest request, HandlerMethod\n \t * (never {@code null}).\n \t */\n \tprivate SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {\n-\t\tClass<?> handlerType = handlerMethod.getBeanType();\n-\t\tSessionAttributesHandler sessionAttrHandler = this.sessionAttributesHandlerCache.get(handlerType);\n-\t\tif (sessionAttrHandler == null) {\n-\t\t\tsynchronized (this.sessionAttributesHandlerCache) {\n-\t\t\t\tsessionAttrHandler = this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, type -> new SessionAttributesHandler(type, this.sessionAttributeStore));\n-\t\t\t}\n-\t\t}\n-\t\treturn sessionAttrHandler;\n+\t\treturn this.sessionAttributesHandlerCache.computeIfAbsent(\n+\t\t\t\thandlerMethod.getBeanType(),\n+\t\t\t\ttype -> new SessionAttributesHandler(type, this.sessionAttributeStore));\n \t}\n \n \t/**",
    "output": "Remove synchronized block As per the Javadoc of ConcurrentHashMap its computeIfAbsent implementation is atomic and hence already synchronized internally, so we can remove the surrounding synchronization block"
  },
  {
    "input": "diff --git a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n--- a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -157,7 +157,12 @@ private static class Log4jLog implements Log, Serializable {\n \t\tprivate final ExtendedLogger logger;\n \n \t\tpublic Log4jLog(String name) {\n-\t\t\tthis.logger = loggerContext.getLogger(name);\n+\t\t\tLoggerContext context = loggerContext;\n+\t\t\tif (context == null) {\n+\t\t\t\t// Circular call in early-init scenario -> static field not initialized yet\n+\t\t\t\tcontext = LogManager.getContext(Log4jLog.class.getClassLoader(), false);\n+\t\t\t}\n+\t\t\tthis.logger = context.getLogger(name);\n \t\t}\n \n \t\t@Override",
    "output": "Use local LoggerContext in Log4jLog when static field not initialized yet"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -46,7 +46,8 @@ public final class CallMetaDataProviderFactory {\n \t\t\t\"Microsoft SQL Server\",\n \t\t\t\"Oracle\",\n \t\t\t\"PostgreSQL\",\n-\t\t\t\"Sybase\"\n+\t\t\t\"Sybase\",\n+\t\t\t\"Informix Dynamic Server\"\n \t\t);\n \n \t/** List of supported database products for function calls. */",
    "output": "Add Informix to the list of supported database products for procedure calls Hi guys, We're facing an issue in our application when we try to call a procedure in Informix database, our app uses standard JDBC (spring-jdbc and com.ibm.informix.jdbc.4.50.3) without Hibernate to connect to the database we trying to execute any procedure call in our Informix database there is no data returned. Diagnostic It points to the Java class called CallMetaDataProviderFactory in spring-jdbc project. Taking a look of this class there is no explicit support for Informix procedure calls, so I added \"Informix Dynamic Server\" to the list of supported databases and now I can execute procedures call without issues. Basically I added the line \"Informix Dynamic Server\" to the list called \"supportedDatabaseProductsForProcedures\" of CallMetaDataProviderFactory class in my local environment and it worked as expected. I really appreciate any feedback/suggestion for this approach due we would like to continue using the framework normally in our development without losing updates using a workaround in our end. Many thanks in advance"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,7 @@ public class ReactorResourceFactory implements InitializingBean, DisposableBean\n \t@Nullable\n \tprivate Consumer<HttpResources> globalResourcesConsumer;\n \n-\tprivate Supplier<ConnectionProvider> connectionProviderSupplier = () -> ConnectionProvider.elastic(\"webflux\");\n+\tprivate Supplier<ConnectionProvider> connectionProviderSupplier = () -> ConnectionProvider.fixed(\"webflux\", 500);\n \n \tprivate Supplier<LoopResources> loopResourcesSupplier = () -> LoopResources.create(\"webflux-http\");\n ",
    "output": "Upgrade default value in ReactorResourceFactory We used ConnectionProvider#elastic only to customize the name. Now that Reactor Netty's TcpResources itself uses fixed 500 by default, we update to have the same value which would apply when global resources are not used"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/example/gh24375/B.java b/spring-context/src/test/java/example/gh24375/B.java\n--- a/spring-context/src/test/java/example/gh24375/B.java\n+++ b/spring-context/src/test/java/example/gh24375/B.java\n@@ -26,4 +26,4 @@\n public @interface B {\n \n \tString name() default \"\";\n-}\n\\ No newline at end of file\n+}",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n@@ -430,7 +430,7 @@ protected ParsedSql getParsedSql(String sql) {\n \t\t\treturn NamedParameterUtils.parseSqlStatement(sql);\n \t\t}\n \t\tsynchronized (this.parsedSqlCache) {\n-\t\t\treturn parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);\n+\t\t\treturn this.parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);\n \t\t}\n \t}\n ",
    "output": "Fix Checkstyle violation See gh-"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -745,4 +745,20 @@ void invalidLocaleWithLanguageTag() {\n \t\tassertThat(StringUtils.parseLocale(\"\")).isNull();\n \t}\n \n+\t@Test\n+\tvoid split() {\n+\t\tassertThat(StringUtils.split(\"Hello, world\", \",\")).isEqualTo(new String[]{\"Hello\", \" world\"});\n+\t\tassertThat(StringUtils.split(\",Hello world\", \",\")).isEqualTo(new String[]{\"\", \"Hello world\"});\n+\t\tassertThat(StringUtils.split(\"Hello world,\", \",\")).isEqualTo(new String[]{\"Hello world\", \"\"});\n+\t\tassertThat(StringUtils.split(\"Hello, world,\", \",\")).isEqualTo(new String[]{\"Hello\", \" world,\"});\n+\t}\n+\n+\t@Test\n+\tvoid splitWithEmptyString() {\n+\t\tassertThat(StringUtils.split(\"Hello, world\", \"\")).isNull();\n+\t\tassertThat(StringUtils.split(\"\", \",\")).isNull();\n+\t\tassertThat(StringUtils.split(null, \",\")).isNull();\n+\t\tassertThat(StringUtils.split(\"Hello, world\", null)).isNull();\n+\t\tassertThat(StringUtils.split(null, null)).isNull();\n+\t}\n }",
    "output": "Add tests for StringUtils splitmethod"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n@@ -18,7 +18,6 @@\n \n import java.net.URI;\n \n-import org.junit.Assume;\n import org.junit.jupiter.api.Assumptions;\n import reactor.core.publisher.Mono;\n ",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n@@ -18,6 +18,8 @@\n \n import java.net.URI;\n \n+import org.junit.Assume;\n+import org.junit.jupiter.api.Assumptions;\n import reactor.core.publisher.Mono;\n \n import org.springframework.http.HttpStatus;\n@@ -27,6 +29,7 @@\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.AbstractHttpHandlerIntegrationTests;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.HttpServer;\n+import org.springframework.web.testfixture.http.server.reactive.bootstrap.ReactorHttpServer;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -72,6 +75,10 @@ void handlingError(HttpServer httpServer) throws Exception {\n \n \t@ParameterizedHttpServerTest // SPR-15560\n \tvoid emptyPathSegments(HttpServer httpServer) throws Exception {\n+\n+\t\t/* Temporarily necessary for https://github.com/reactor/reactor-netty/issues/948 */\n+\t\tAssumptions.assumeFalse(httpServer instanceof ReactorHttpServer);\n+\n \t\tstartServer(httpServer);\n \n \t\tRestTemplate restTemplate = new RestTemplate();",
    "output": "Upgrade to Dysprosium snapshots"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java\n@@ -362,7 +362,7 @@ void m95() { } void m96() { } void m97() { } void m98() { } void m99() { }\n \t}\n \n \t@Test\n-\tvoid getDecalredMethodsReturnsCopy() {\n+\tvoid getDeclaredMethodsReturnsCopy() {\n \t\tMethod[] m1 = ReflectionUtils.getDeclaredMethods(A.class);\n \t\tMethod[] m2 = ReflectionUtils.getDeclaredMethods(A.class);\n \t\tassertThat(m1). isNotSameAs(m2);",
    "output": "Fix typo in ReflectionUtilsTests"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java b/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java\n@@ -67,7 +67,8 @@ public static Object currentProxy() throws IllegalStateException {\n \t\tObject proxy = currentProxy.get();\n \t\tif (proxy == null) {\n \t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"Cannot find current proxy: Set 'exposeProxy' property on Advised to 'true' to make it available.\");\n+\t\t\t\t\t\"Cannot find current proxy: Set 'exposeProxy' property on Advised to 'true' to make it available. \" +\n+\t\t\t\t\t\t\t\"Also Check AopContext.currentProxy() invoke in the origin thread.\");\n \t\t}\n \t\treturn proxy;\n \t}",
    "output": "Improve exception message in AopContext.currentProxy"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n@@ -73,7 +73,9 @@ public static MethodInvocation currentInvocation() throws IllegalStateException\n \t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\"No MethodInvocation found: Check that an AOP invocation is in progress, and that the \" +\n \t\t\t\t\t\"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that \" +\n-\t\t\t\t\t\"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!\");\n+\t\t\t\t\t\"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor! \" +\n+\t\t\t\t\t\"Check that ExposeInvocationInterceptor and ExposeInvocationInterceptor.currentInvocation() \" +\n+\t\t\t\t\t\"invoke in one Thread\");\n \t\t}\n \t\treturn mi;\n \t}",
    "output": "Improve ExposeInvocationInterceptor exception message"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n@@ -600,7 +600,7 @@ private Advisor namedBeanToAdvisor(Object next) {\n \t\t\t// We expected this to be an Advisor or Advice,\n \t\t\t// but it wasn't. This is a configuration error.\n \t\t\tthrow new AopConfigException(\"Unknown advisor type \" + next.getClass() +\n-\t\t\t\t\t\"; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry,\" +\n+\t\t\t\t\t\"; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry, \" +\n \t\t\t\t\t\"which may also be target or TargetSource\", ex);\n \t\t}\n \t}",
    "output": "Add missing space in AopConfigException message"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java b/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java\n@@ -107,11 +107,10 @@ public void parseEncodedFilenameWithInvalidName() {\n \t@Test // gh-23077\n \tpublic void parseWithEscapedQuote() {\n \n-\t\tBiConsumer<String, String> tester = (description, filename) -> {\n+\t\tBiConsumer<String, String> tester = (description, filename) ->\n \t\t\tassertThat(parse(\"form-data; name=\\\"file\\\"; filename=\\\"\" + filename + \"\\\"; size=123\"))\n \t\t\t\t\t.as(description)\n \t\t\t\t\t.isEqualTo(builder(\"form-data\").name(\"file\").filename(filename).size(123L).build());\n-\t\t};\n \n \t\ttester.accept(\"Escaped quotes should be ignored\",\n \t\t\t\t\"\\\\\\\"The Twilight Zone\\\\\\\".txt\");\n@@ -223,10 +222,9 @@ public void formatWithEncodedFilenameUsingUsAscii() {\n \t@Test // gh-24220\n \tpublic void formatWithFilenameWithQuotes() {\n \n-\t\tBiConsumer<String, String> tester = (input, output) -> {\n+\t\tBiConsumer<String, String> tester = (input, output) ->\n \t\t\tassertThat(builder(\"form-data\").filename(input).build().toString())\n \t\t\t\t\t.isEqualTo(\"form-data; filename=\\\"\" + output + \"\\\"\");\n-\t\t};\n \n \t\tString filename = \"\\\"foo.txt\";\n \t\ttester.accept(filename, \"\\\\\" + filename);",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -388,4 +388,16 @@ public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {\n \t\treturn new BeanPropertyRowMapper<>(mappedClass);\n \t}\n \n+\t/**\n+\t * Static factory method to create a new {@code BeanPropertyRowMapper}\n+\t * (with the required type specified only once).\n+\t * @param mappedClass the class that each row should be mapped to\n+\t * @param conversionService the {@link ConversionService} for binding JDBC values to bean properties, or {@code null} for none\n+\t */\n+\tpublic static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass, @Nullable ConversionService conversionService) {\n+\t\tBeanPropertyRowMapper<T> rowMapper = newInstance(mappedClass);\n+\t\trowMapper.setConversionService(conversionService);\n+\t\treturn rowMapper;\n+\t}\n+\n }",
    "output": "Add BeanPropertyRowMapper.newInstance(mappedClass, conversionService) Similar to SingleColumnRowMapper.newInstance(requiredType, conversionService) which was added in"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java\n@@ -20,8 +20,6 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.function.Consumer;\n import java.util.function.Predicate;\n \n import org.junit.jupiter.api.BeforeEach;\n@@ -38,8 +36,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n-import org.springframework.http.codec.FormHttpMessageReader;\n-import org.springframework.http.codec.FormHttpMessageWriter;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n@@ -72,7 +72,7 @@ public void domainChecks() {\n \t\tArrays.asList(\"abc\", \"abc.org\", \"abc-def.org\", \"abc3.org\", \".abc.org\")\n \t\t\t\t.forEach(domain -> ResponseCookie.from(\"n\", \"v\").domain(domain).build());\n \n-\t\tArrays.asList(\"-abc.org\", \"abc.org.\", \"abc.org-\", \"-abc.org\", \"abc.org-\")\n+\t\tArrays.asList(\"-abc.org\", \"abc.org.\", \"abc.org-\")\n \t\t\t\t.forEach(domain -> assertThatThrownBy(() -> ResponseCookie.from(\"n\", \"v\").domain(domain).build())\n \t\t\t\t\t\t.hasMessageContaining(\"Invalid first/last char\"));\n ",
    "output": "Remove duplicate checks in ResponseCookieTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n@@ -180,7 +180,7 @@ void emptyBodyWritten() {\n \t\tconfigureEncoder(MimeTypeUtils.TEXT_PLAIN);\n \t\tHttpMessageWriter<String> writer = new EncoderHttpMessageWriter<>(this.encoder);\n \t\twriter.write(Mono.empty(), forClass(String.class), TEXT_PLAIN, this.response, NO_HINTS).block();\n-\t\tStepVerifier.create(this.response.getBody()).expectComplete();\n+\t\tStepVerifier.create(this.response.getBody()).verifyComplete();\n \t\tassertThat(this.response.getHeaders().getContentLength()).isEqualTo(0);\n \t}\n ",
    "output": "Add missing verifyin EncoderHttpMessageWriterTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java\n@@ -210,8 +210,8 @@ public void testLimit() {\n \t\t\t\t.expectNext(expected)\n \t\t\t\t.verifyComplete();\n \n-\t\tStepVerifier.create(decode(source, false, maxInMemorySize - 1))\n-\t\t\t\t.expectError(DataBufferLimitException.class);\n+\t\tStepVerifier.create(decode(source, false, maxInMemorySize - 2))\n+\t\t\t\t.verifyError(DataBufferLimitException.class);\n \t}\n \n \t@Test",
    "output": "Add missing verifyin Jackson2TokenizerTests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -473,10 +473,10 @@ public String[] getBeanNamesForType(ResolvableType type) {\n \tpublic String[] getBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit) {\n \t\tClass<?> resolved = type.resolve();\n \t\tif (resolved != null && !type.hasGenerics()) {\n-\t\t\treturn getBeanNamesForType(resolved, includeNonSingletons, includeNonSingletons);\n+\t\t\treturn getBeanNamesForType(resolved, includeNonSingletons, allowEagerInit);\n \t\t}\n \t\telse {\n-\t\t\treturn doGetBeanNamesForType(type, includeNonSingletons, includeNonSingletons);\n+\t\t\treturn doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n \t\t}\n \t}\n ",
    "output": "Fix inappropriate eager init"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/codec/Decoder.java b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java\n--- a/spring-core/src/main/java/org/springframework/core/codec/Decoder.java\n+++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,7 +88,7 @@ Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementTy\n \t * @return the decoded value, possibly {@code null}\n \t * @since 5.2\n \t */\n-\t@SuppressWarnings(\"ConstantConditions\")\n+\t@Nullable\n \tdefault T decode(DataBuffer buffer, ResolvableType targetType,\n \t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) throws DecodingException {\n ",
    "output": "Add @Nullable annotation to decode method taking DataBuffer Javadoc indicates the returned value can be null"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n@@ -199,7 +199,7 @@ public void setHeaderPredicate(@Nullable Predicate<String> headerPredicate) {\n \t * @since 5.2\n \t */\n \t@Nullable\n-\tpublic Predicate<String> getHeaderPredicate() {\n+\tprotected Predicate<String> getHeaderPredicate() {\n \t\treturn this.headerPredicate;\n \t}\n ",
    "output": "Fix getHeaderPredicate visibility to be declared as protected"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n@@ -88,7 +88,7 @@ public class SynchronossPartHttpMessageReader extends LoggingCodecSupport implem\n \n \tprivate long maxDiskUsagePerPart = -1;\n \n-\tprivate long maxParts = -1;\n+\tprivate int maxParts = -1;\n \n \n \t/**\n@@ -138,15 +138,15 @@ public long getMaxDiskUsagePerPart() {\n \t * Specify the maximum number of parts allowed in a given multipart request.\n \t * @since 5.1.11\n \t */\n-\tpublic void setMaxParts(long maxParts) {\n+\tpublic void setMaxParts(int maxParts) {\n \t\tthis.maxParts = maxParts;\n \t}\n \n \t/**\n \t * Return the {@link #setMaxParts configured} limit on the number of parts.\n \t * @since 5.1.11\n \t */\n-\tpublic long getMaxParts() {\n+\tpublic int getMaxParts() {\n \t\treturn this.maxParts;\n \t}\n ",
    "output": "Use int for maxParts instead of long"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n@@ -46,6 +46,7 @@\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.WebSocketSession;\n import org.springframework.web.socket.client.WebSocketClient;\n+import org.springframework.web.socket.handler.WebSocketHandlerDecorator;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n@@ -319,9 +320,12 @@ private WebSocketHandler connect() {\n \n \t@SuppressWarnings(\"unchecked\")\n \tprivate TcpConnection<byte[]> getTcpConnection() throws Exception {\n-\t\tWebSocketHandler webSocketHandler = connect();\n-\t\twebSocketHandler.afterConnectionEstablished(this.webSocketSession);\n-\t\treturn (TcpConnection<byte[]>) webSocketHandler;\n+\t\tWebSocketHandler handler = connect();\n+\t\thandler.afterConnectionEstablished(this.webSocketSession);\n+\t\tif (handler instanceof WebSocketHandlerDecorator) {\n+\t\t\thandler = ((WebSocketHandlerDecorator) handler).getLastHandler();\n+\t\t}\n+\t\treturn (TcpConnection<byte[]>) handler;\n \t}\n \n \tprivate void testInactivityTaskScheduling(Runnable runnable, long delay, long sleepTime)",
    "output": "Fix failing test after previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n@@ -267,7 +267,9 @@ private Mono<Void> handleUnresolvedError(ServerWebExchange exchange, Throwable e\n \t\tServerHttpResponse response = exchange.getResponse();\n \t\tString logPrefix = exchange.getLogPrefix();\n \n-\t\t// Request handling error (e.g. remote call), if we manage to set the status..\n+\t\t// Sometimes a remote call error can look like a disconnected client.\n+\t\t// Try to set the response first before the \"isDisconnectedClient\" check.\n+\n \t\tif (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {\n \t\t\tlogger.error(logPrefix + \"500 Server Error for \" + formatRequest(request), ex);\n \t\t\treturn Mono.empty();",
    "output": "Upgrade comment in HttpWebHandlerAdapter"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n@@ -153,7 +153,7 @@ public <T> ResultMatcher sessionAttribute(String name, Object value) {\n \t * Assert the given session attributes do not exist.\n \t * @since 5.2.1\n \t */\n-\tpublic <T> ResultMatcher sessionAttributeDoesNotExist(String... names) {\n+\tpublic ResultMatcher sessionAttributeDoesNotExist(String... names) {\n \t\treturn result -> {\n \t\t\tHttpSession session = result.getRequest().getSession();\n \t\t\tAssert.state(session != null, \"No HttpSession\");",
    "output": "Remove unused type parameter declaration in RequestResultMatchers The new sessionAttributeDoesNotExistmethod introduced in commit e73344fc7183631bc86ef9273afbbdce9414e629 declares an unused type parameter <T>. This commit removes that unused type parameter from the method signature"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java\n@@ -441,8 +441,8 @@ private Object getValueFromMetaAnnotation(int attributeIndex,\n \t\t\tvalue = this.mapping.getMappedAnnotationValue(attributeIndex, forMirrorResolution);\n \t\t}\n \t\tif (value == null) {\n-\t\t\tMethod attribute = mapping.getAttributes().get(attributeIndex);\n-\t\t\tvalue = ReflectionUtils.invokeMethod(attribute, mapping.getAnnotation());\n+\t\t\tMethod attribute = this.mapping.getAttributes().get(attributeIndex);\n+\t\t\tvalue = ReflectionUtils.invokeMethod(attribute, this.mapping.getAnnotation());\n \t\t}\n \t\treturn value;\n \t}",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -370,7 +370,7 @@ public class MediaType extends MimeType implements Serializable {\n \t\tAPPLICATION_OCTET_STREAM = new MediaType(\"application\", \"octet-stream\");\n \t\tAPPLICATION_PDF = new MediaType(\"application\", \"pdf\");\n \t\tAPPLICATION_PROBLEM_JSON = new MediaType(\"application\", \"problem+json\");\n-\t\tAPPLICATION_PROBLEM_JSON_UTF8 = new MediaType(\"application\", \"problem\", StandardCharsets.UTF_8);\n+\t\tAPPLICATION_PROBLEM_JSON_UTF8 = new MediaType(\"application\", \"problem+json\", StandardCharsets.UTF_8);\n \t\tAPPLICATION_PROBLEM_XML = new MediaType(\"application\", \"problem+xml\");\n \t\tAPPLICATION_RSS_XML = new MediaType(\"application\", \"rss+xml\");\n \t\tAPPLICATION_STREAM_JSON = new MediaType(\"application\", \"stream+json\");",
    "output": "Fix APPLICATION_PROBLEM_JSON_UTF8 media type value This commit adds the missing \"+json\" suffix to the \"application/problem\" media type for its deprecated variant"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -170,7 +170,6 @@ public static boolean isCandidateClass(Class<?> clazz, String annotationName) {\n \t\tif (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {\n \t\t\treturn false;\n \t\t}\n-\t\t// TODO: annotation presence registry to be integrated here\n \t\treturn true;\n \t}\n ",
    "output": "Remove TODO in AnnotationUtils"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n@@ -382,7 +382,7 @@ public void individualBeanWithFactoryBeanObjectTypeAsTargetTypeAndLazy() {\n \n \t\tassertThat(context.getType(\"&fb\")).isNull();\n \t\tassertThat(context.getType(\"fb\")).isEqualTo(String.class);\n-\t\tassertThat(context.getBean(\"&fb\") instanceof FactoryBean);\n+\t\tassertThat(context.getBean(\"&fb\")).isInstanceOf(FactoryBean.class);\n \t\tassertThat(context.getType(\"&fb\")).isEqualTo(TypedFactoryBean.class);\n \t\tassertThat(context.getType(\"fb\")).isEqualTo(String.class);\n \t\tassertThat(context.getBeanNamesForType(FactoryBean.class).length).isEqualTo(1);",
    "output": "Fix an assertion in AnnotationConfigApplicationContextTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n@@ -360,7 +360,7 @@ public void handleMessage(Message<?> message) throws MessagingException {\n \t\t\t\t\tlogger.debug(\"Terminating '\" + session + \"'\", ex);\n \t\t\t\t}\n \t\t\t\telse if (logger.isWarnEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Terminating '\" + session + \"': \" + ex.getMessage());\n+\t\t\t\t\tlogger.warn(\"Terminating '\" + session + \"': \" + ex.getMessage());\n \t\t\t\t}\n \t\t\t\tthis.stats.incrementLimitExceededCount();\n \t\t\t\tclearSession(session, ex.getStatus()); // clear first, session may be unresponsive",
    "output": "Use correct log level"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java\n@@ -126,13 +126,13 @@ public void genericBeanDefinitionEquality() {\n \t\totherBd.setAbstract(true);\n \t\totherBd.setLazyInit(true);\n \t\tboolean condition1 = !bd.equals(otherBd);\n-\t\tassertTrue(condition1);\n+\t\tassertThat(condition1).isTrue();\n \t\tboolean condition = !otherBd.equals(bd);\n-\t\tassertTrue(condition);\n+\t\tassertThat(condition).isTrue();\n \t\totherBd.setParentName(\"parent\");\n-\t\tassertTrue(bd.equals(otherBd));\n-\t\tassertTrue(otherBd.equals(bd));\n-\t\tassertTrue(bd.hashCode() == otherBd.hashCode());\n+\t\tassertThat(bd.equals(otherBd)).isTrue();\n+\t\tassertThat(otherBd.equals(bd)).isTrue();\n+\t\tassertThat(bd.hashCode() == otherBd.hashCode()).isTrue();\n \t}\n \n \t@Test",
    "output": "Upgrade genericBeanDefinitionEquality test to AssertJ usage on master"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n--- a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,22 +41,22 @@ public final class DataSize implements Comparable<DataSize> {\n \t/**\n \t * Bytes per Kilobyte.\n \t */\n-\tprivate static long BYTES_PER_KB = 1024;\n+\tprivate static final long BYTES_PER_KB = 1024;\n \n \t/**\n \t * Bytes per Megabyte.\n \t */\n-\tprivate static long BYTES_PER_MB = BYTES_PER_KB * 1024;\n+\tprivate static final long BYTES_PER_MB = BYTES_PER_KB * 1024;\n \n \t/**\n \t * Bytes per Gigabyte.\n \t */\n-\tprivate static long BYTES_PER_GB = BYTES_PER_MB * 1024;\n+\tprivate static final long BYTES_PER_GB = BYTES_PER_MB * 1024;\n \n \t/**\n \t * Bytes per Terabyte.\n \t */\n-\tprivate static long BYTES_PER_TB = BYTES_PER_GB * 1024;\n+\tprivate static final long BYTES_PER_TB = BYTES_PER_GB * 1024;\n \n \n \tprivate final long bytes;",
    "output": "Make DataSize constants final"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n@@ -29,6 +29,7 @@\n import org.gradle.api.artifacts.Dependency;\n import org.gradle.api.plugins.JavaBasePlugin;\n import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.publish.maven.plugins.MavenPublishPlugin;\n import org.gradle.api.tasks.TaskProvider;\n import org.gradle.jvm.tasks.Jar;\n \n@@ -90,8 +91,7 @@ private void createApiDiffTask(String baselineVersion, Project project) {\n \n \tprivate boolean isProjectEligible(Project project) {\n \t\treturn project.getPlugins().hasPlugin(JavaPlugin.class)\n-\t\t\t\t&& !project.getName().equals(\"spring-core-coroutines\")\n-\t\t\t\t&& !project.getName().equals(\"spring-framework-bom\");\n+\t\t\t\t&& project.getPlugins().hasPlugin(MavenPublishPlugin.class);\n \t}\n \n \tprivate Configuration createBaselineConfiguration(String baselineVersion, Project project) {",
    "output": "Fix API Diff Gradle task Prior to this change, the Gradle API Diff task was failing due to a missing class (a Guava class) during processing. This might be a dependency that was previously brought by some other dependency. This commit adds that dependency as a workaround, and improves the Gradle API Diff task to only select relevant projects when running the task (projects using the Java Plugin and the Maven Publish Plugin)"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java b/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java\n@@ -20,9 +20,6 @@\n \n import org.springframework.aop.MethodMatcher;\n import org.springframework.aop.Pointcut;\n-import org.springframework.aop.support.annotation.AnnotationClassFilter;\n-import org.springframework.aop.support.annotation.AnnotationMatchingPointcut;\n-import org.springframework.aop.support.annotation.AnnotationMethodMatcher;\n import org.springframework.beans.factory.annotation.Qualifier;\n \n import static org.assertj.core.api.Assertions.assertThat;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java\n@@ -109,7 +109,7 @@ private Mono<Void> executeInternal(URI url, HttpHeaders requestHeaders, WebSocke\n \t\t\t\t\tClientEndpointConfig config = createEndpointConfig(configurator, protocols);\n \t\t\t\t\treturn this.webSocketContainer.connectToServer(endpoint, config, url);\n \t\t\t\t})\n-\t\t\t\t.subscribeOn(Schedulers.elastic()) // connectToServer is blocking\n+\t\t\t\t.subscribeOn(Schedulers.boundedElastic()) // connectToServer is blocking\n \t\t\t\t.then(completionMono);\n \t}\n ",
    "output": "Use Reactor's new Schedulers.boundedElasticPrior to this commit, Spring Framework would use `Schedulers.elastic` in places where we needed to process blocking tasks in a reactive environment. With reactor/reactor-core, a new `Schedulers.boundedElastic` scheduler is available and achieves the same goal with added security; it guarantees that resources are bounded. This commit uses that new scheduler in the standard websocket client, since the underlying API is blocking for the connection phase and we need to schedule that off a web server thread"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -45,7 +45,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.Timeout;\n ",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java\n@@ -203,6 +203,8 @@ public void closeStatusChangesToSessionNotReliable() throws Exception {\n \t}\n \n \tprivate void sendBlockingMessage(ConcurrentWebSocketSessionDecorator session) throws InterruptedException {\n+\t\tBlockingSession delegate = (BlockingSession) session.getDelegate();\n+\t\tCountDownLatch sentMessageLatch = delegate.getSentMessageLatch();\n \t\tExecutors.newSingleThreadExecutor().submit(() -> {\n \t\t\tTextMessage message = new TextMessage(\"slow message\");\n \t\t\ttry {\n@@ -212,17 +214,16 @@ private void sendBlockingMessage(ConcurrentWebSocketSessionDecorator session) th\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t});\n-\t\tBlockingSession delegate = (BlockingSession) session.getDelegate();\n-\t\tassertThat(delegate.getSentMessageLatch().await(5, TimeUnit.SECONDS)).isTrue();\n+\t\tassertThat(sentMessageLatch.await(5, TimeUnit.SECONDS)).isTrue();\n \t}\n \n \n \n \tprivate static class BlockingSession extends TestWebSocketSession {\n \n-\t\tprivate AtomicReference<CountDownLatch> nextMessageLatch = new AtomicReference<>();\n+\t\tprivate final AtomicReference<CountDownLatch> nextMessageLatch = new AtomicReference<>();\n \n-\t\tprivate AtomicReference<CountDownLatch> releaseLatch = new AtomicReference<>();\n+\t\tprivate final AtomicReference<CountDownLatch> releaseLatch = new AtomicReference<>();\n \n \n \t\tpublic CountDownLatch getSentMessageLatch() {",
    "output": "Fix race condition in sendBlockingMessage Previously, tests in ConcurrentWebSocketSessionDecoratorTests that use the BlockingSession would fail intermittently. This appears to have been due to a race condition in sendBlockingMessage where the call to getSentMessageLatchthat stores a latch in nextMessageLatch on the main thread may happen after the call to sendMessage that counts down the latch if it is non-null occurs on the executor's thread. This commit updates sendBlockingMessage to call getSentMessageLatch(and therefore store the latch) before it sumbmits the task to the executor. This ensures that the latch will be available when the exeuctor's thread attempts to retrieve and decrement it. BlockingSession's AtomicReference fields have also been made final to eliminate the possibility of any visibility problems across threads"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java\n@@ -23,6 +23,7 @@\n import java.io.Reader;\n import java.io.Writer;\n import java.util.Map;\n+\n import javax.xml.stream.XMLEventReader;\n import javax.xml.stream.XMLEventWriter;\n import javax.xml.stream.XMLStreamReader;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java\n--- a/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java\n+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java\n@@ -64,7 +64,7 @@ public MockClientHttpResponse(HttpStatus status) {\n \t}\n \n \tpublic MockClientHttpResponse(int status) {\n-\t\tAssert.isTrue(status >= 100 && status < 600, \"Status must be between 1xx and 5xx\");\n+\t\tAssert.isTrue(status > 99 && status < 1000, \"Status must be between 100 and 999\");\n \t\tthis.status = status;\n \t}\n ",
    "output": "Change raw status code range check in MockClientHttpResponse This commit changes the raw status code check to allow for all three digit numbers, not just those between 100 and 600"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -321,7 +321,7 @@ public void copyConfigurationFrom(ConfigurableBeanFactory otherFactory) {\n \t\t\tthis.allowEagerClassLoading = otherListableFactory.allowEagerClassLoading;\n \t\t\tthis.dependencyComparator = otherListableFactory.dependencyComparator;\n \t\t\t// A clone of the AutowireCandidateResolver since it is potentially BeanFactoryAware...\n-\t\t\tsetAutowireCandidateResolver(BeanUtils.instantiateClass(getAutowireCandidateResolver().getClass()));\n+\t\t\tsetAutowireCandidateResolver(BeanUtils.instantiateClass(otherListableFactory.getAutowireCandidateResolver().getClass()));\n \t\t\t// Make resolvable dependencies (e.g. ResourceLoader) available here as well...\n \t\t\tthis.resolvableDependencies.putAll(otherListableFactory.resolvableDependencies);\n \t\t}",
    "output": "Fix DefaultListableBeanFactory#copyConfigurationFrom Prior to this commit, the copyConfigurationFrom(ConfigurableBeanFactory) method in DefaultListableBeanFactory cloned its own AutowireCandidateResolver type instead of the resolver type from the supplied ConfigurableBeanFactory. This commit fixes that by cloning the resolver type from the supplied ConfigurableBeanFactory"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java\n@@ -27,7 +27,6 @@\n \n import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.expression.AccessException;\n-import org.springframework.expression.BeanResolver;\n import org.springframework.expression.EvaluationContext;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionInvocationTargetException;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n@@ -40,7 +40,6 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.when;\n \n /**\n  * Unit tests for {@link WebSocketHttpRequestHandler}.",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n@@ -66,10 +66,10 @@ public MockResponse dispatch(RecordedRequest request) throws InterruptedExceptio\n \t\t\t\t\tassertThat(request.getHeader(\"Host\"))\n \t\t\t\t\t\t\t.contains(\"localhost:\" + port);\n \t\t\t\t\tMockResponse response = new MockResponse()\n+\t\t\t\t\t\t\t.setHeaders(request.getHeaders())\n \t\t\t\t\t\t\t.setHeader(\"Content-Length\", request.getBody().size())\n \t\t\t\t\t\t\t.setResponseCode(200)\n \t\t\t\t\t\t\t.setBody(request.getBody());\n-\t\t\t\t\tresponse.headers(request.getHeaders());\n \t\t\t\t\trequest.getBody().flush();\n \t\t\t\t\treturn response;\n \t\t\t\t}",
    "output": "Fix okhttp3 downgrade"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n@@ -43,7 +43,7 @@ protected ClientHttpRequestFactory createRequestFactory() {\n \t}\n \n \t@Test  // SPR-8809\n-\t@Disabled(\"hangs indefinitely\")\n+\t@Disabled(\"response.close() hangs indefinitely since upgrading from okhttp3 3.14.2 to 4.1.0\")\n \tpublic void interceptor() throws Exception {\n \t\tfinal String headerName = \"MyHeader\";\n \t\tfinal String headerValue = \"MyValue\";",
    "output": "Upgrade @Disabled for StreamingSimpleClientHttpRequestFactoryTests.interceptor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -336,15 +336,6 @@ public static Flux<DataBuffer> write(\n \n \t}\n \n-\tpublic void handle() {\n-\t\tNumber n = 5;\n-\t\tinspect(n);\n-\t}\n-\n-\tpublic <U extends Number> void inspect(U u){\n-\t}\n-\n-\n \t/**\n \t * Write the given stream of {@link DataBuffer DataBuffers} to the given\n \t * file {@link Path}. The optional {@code options} parameter specifies",
    "output": "Remove unnecessary code from prior commit"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java\n@@ -29,7 +29,7 @@\n  * @author Sam Brannen\n  * @since 4.2\n  */\n-public class AbstractWebRequestMatcherTests {\n+abstract class AbstractWebRequestMatcherTests {\n \n \tprotected void assertMatches(WebRequestMatcher matcher, String url) throws MalformedURLException {\n \t\tassertThat(matcher.matches(new WebRequest(new URL(url)))).isTrue();",
    "output": "Make AbstractWebRequestMatcherTests abstract"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java\n@@ -19,7 +19,6 @@\n import java.lang.reflect.Method;\n import java.util.Comparator;\n \n-import org.hamcrest.Matchers;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n@@ -137,7 +136,7 @@ public void unregisterMapping() throws Exception {\n \t\tresult = this.mapping.getHandler(MockServerWebExchange.from(MockServerHttpRequest.get(key)));\n \n \t\tassertThat(result.block()).isNull();\n-\t\tassertThat(this.mapping.getMappingRegistry().getMappings().keySet()).isNotEqualTo(Matchers.contains(key));\n+\t\tassertThat(this.mapping.getMappingRegistry().getMappings().keySet()).doesNotContain(key);\n \t}\n \n ",
    "output": "Fix assertion in HandlerMethodMappingTests.unregisterMapping"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -349,8 +349,8 @@ void registerAdapters(ReactiveAdapterRegistry registry) {\n \n \t\t\tregistry.registerReactiveType(\n \t\t\t\t\tReactiveTypeDescriptor.multiValue(kotlinx.coroutines.flow.Flow.class, kotlinx.coroutines.flow.FlowKt::emptyFlow),\n-\t\t\t\t\tsource -> kotlinx.coroutines.reactor.FlowKt.asFlux((kotlinx.coroutines.flow.Flow<?>) source),\n-\t\t\t\t\tkotlinx.coroutines.reactive.FlowKt::asFlow\n+\t\t\t\t\tsource -> kotlinx.coroutines.reactor.ReactorFlowKt.asFlux((kotlinx.coroutines.flow.Flow<?>) source),\n+\t\t\t\t\tkotlinx.coroutines.reactive.ReactiveFlowKt::asFlow\n \t\t\t);\n \t\t}\n \t}",
    "output": "Upgrade to Coroutines 1.3.0"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java\n@@ -117,7 +117,7 @@ public static String getTargetBeanName(String originalBeanName) {\n \t * @see #getTargetBeanName(String)\n \t * @see #isScopedTarget(String)\n \t */\n-\tpublic static String getOriginalBeanName(String targetBeanName) {\n+\tpublic static String getOriginalBeanName(@Nullable String targetBeanName) {\n \t\tAssert.isTrue(isScopedTarget(targetBeanName), () -> \"bean name '\" +\n \t\t\t\ttargetBeanName + \"' does not refer to the target of a scoped proxy\");\n \t\treturn targetBeanName.substring(TARGET_NAME_PREFIX_LENGTH);",
    "output": "Add missing @Nullable declaration"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java\n@@ -18,7 +18,7 @@\n import java.nio.charset.StandardCharsets;\n \n import io.netty.buffer.PooledByteBufAllocator;\n-import org.junit.After;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Flux;\n \n@@ -42,7 +42,7 @@ public class HttpHeadResponseDecoratorTests {\n \t\t\tnew HttpHeadResponseDecorator(new MockServerHttpResponse(this.bufferFactory));\n \n \n-\t@After\n+\t@AfterEach\n \tpublic void tearDown() {\n \t\tthis.bufferFactory.checkForLeaks();\n \t}",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -830,6 +830,6 @@ public Annotation[] getDeclaredAnnotations() {\n \t\t\treturn this.annotations.clone();\n \t\t}\n \n-\t};\n+\t}\n \n }",
    "output": "Remove unnecessary semicolon in AnnotatedElementUtils"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n@@ -98,7 +98,7 @@ static Object[][] arguments() throws IOException {\n \t\tservers.put(new ReactorHttpServer(), ReactorNettyConfig.class);\n \t\tservers.put(new UndertowHttpServer(), UndertowConfig.class);\n \n-\t\tFlux<WebSocketClient> f1 = Flux.fromArray(clients).concatMap(c -> Flux.just(c).repeat(servers.size()));\n+\t\tFlux<WebSocketClient> f1 = Flux.fromArray(clients).concatMap(c -> Flux.just(c).repeat(servers.size() - 1));\n \t\tFlux<HttpServer> f2 = Flux.fromIterable(servers.keySet()).repeat(clients.length);\n \t\tFlux<Class<?>> f3 = Flux.fromIterable(servers.values()).repeat(clients.length);\n ",
    "output": "Fix off-by-one error in AbstractWebSocketIntegrationTests.argumentsPrior to this commit, the \"reactive matrix\" contained a duplicate argument set per parameterized client"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n@@ -369,26 +369,6 @@ private void assertAttributeType(String attributeName, Object attributeValue, Cl\n \t\t}\n \t}\n \n-\t/**\n-\t * Store the supplied {@code value} in this map under the specified\n-\t * {@code key}, unless a value is already stored under the key.\n-\t * @param key the key under which to store the value\n-\t * @param value the value to store\n-\t * @return the current value stored in this map, or {@code null} if no\n-\t * value was previously stored in this map\n-\t * @see #get\n-\t * @see #put\n-\t * @since 4.2\n-\t */\n-\t@Override\n-\tpublic Object putIfAbsent(String key, Object value) {\n-\t\tObject obj = get(key);\n-\t\tif (obj == null) {\n-\t\t\tobj = put(key, value);\n-\t\t}\n-\t\treturn obj;\n-\t}\n-\n \t@Override\n \tpublic String toString() {\n \t\tIterator<Map.Entry<String, Object>> entries = entrySet().iterator();",
    "output": "Remove superfluous AnnotationAttributes#putIfAbsent implementation Since Java 8, putIfAbsentis a standard method in java.util.Map. We therefore no longer need the custom implementation that overrides the standard implementation in HashMap"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java\n@@ -82,7 +82,6 @@ public void synthesizedUsesCorrectClassLoader() throws Exception {\n \t\tAnnotation utilsMeta = AnnotatedElementUtils.getMergedAnnotation(source,\n \t\t\t\tTestMetaAnnotation.class);\n \t\tassertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\n-\t\tassertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\n \t\tassertThat(getClassAttribute(utilsMeta).getClassLoader()).isEqualTo(child);\n \t\tassertThat(getEnumAttribute(utilsMeta).getClass().getClassLoader()).isEqualTo(\n \t\t\t\tparent);",
    "output": "Remove duplicate assertion"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -21,7 +21,6 @@\n import reactor.core.publisher.Mono;\n import reactor.netty.NettyInbound;\n import reactor.netty.NettyOutbound;\n-import reactor.netty.NettyPipeline;\n import reactor.netty.http.websocket.WebsocketInbound;\n import reactor.netty.http.websocket.WebsocketOutbound;\n \n@@ -90,7 +89,6 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \t\t\t\t})\n \t\t\t\t.map(this::toFrame);\n \t\treturn getDelegate().getOutbound()\n-\t\t\t\t.options(NettyPipeline.SendOptions::flushOnEach)\n \t\t\t\t.sendObject(frames)\n \t\t\t\t.then();\n \t}",
    "output": "Remove unnecessary flushOnEach (since reactor-netty 0.9)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -136,7 +136,6 @@ public void match() {\n \tpublic void matchWithNullPath() {\n \t\tassertThat(pathMatcher.match(\"/test\", null)).isFalse();\n \t\tassertThat(pathMatcher.match(\"/\", null)).isFalse();\n-\t\tassertThat(pathMatcher.match(\"/\", null)).isFalse();\n \t\tassertThat(pathMatcher.match(null, null)).isFalse();\n \t}\n ",
    "output": "Remove duplicate assertion in matchWithNullPath"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java\n@@ -411,7 +411,7 @@ public void compareTests() {\n \t@Test\n \tpublic void separatorTests() {\n \t\tPathPatternParser parser = new PathPatternParser();\n-\t\tparser.setPathOptions(PathContainer.Options.HTTP_PATH);\n+\t\tparser.setPathOptions(PathContainer.Options.create('.', false));\n \t\tString rawPattern = \"first.second.{last}\";\n \t\tPathPattern pattern = parser.parse(rawPattern);\n \t\tassertThat(pattern.computePatternString()).isEqualTo(rawPattern);",
    "output": "Fix typo in test from previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -231,6 +231,7 @@ protected boolean canWrite(@Nullable MediaType mediaType) {\n \t\t\t\t(this.protobufFormatSupport != null && this.protobufFormatSupport.supportsWriteOnly(mediaType)));\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \t@Override\n \tprotected void writeInternal(Message message, HttpOutputMessage outputMessage)\n \t\t\tthrows IOException, HttpMessageNotWritableException {\n@@ -253,7 +254,7 @@ protected void writeInternal(Message message, HttpOutputMessage outputMessage)\n \t\t}\n \t\telse if (TEXT_PLAIN.isCompatibleWith(contentType)) {\n \t\t\tOutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);\n-\t\t\tTextFormat.print(message, outputStreamWriter);\n+\t\t\tTextFormat.print(message, outputStreamWriter);  // deprecated on Protobuf 3.9\n \t\t\toutputStreamWriter.flush();\n \t\t\toutputMessage.getBody().flush();\n \t\t}",
    "output": "Upgrade to Protobuf 3.9 (plus consistent XMLUnit declarations)"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n@@ -48,8 +48,12 @@\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n \n-import static org.assertj.core.api.Assertions.*;\n-import static org.springframework.transaction.event.TransactionPhase.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+import static org.springframework.transaction.event.TransactionPhase.AFTER_COMMIT;\n+import static org.springframework.transaction.event.TransactionPhase.AFTER_COMPLETION;\n+import static org.springframework.transaction.event.TransactionPhase.AFTER_ROLLBACK;\n+import static org.springframework.transaction.event.TransactionPhase.BEFORE_COMMIT;\n \n /**\n  * Integration tests for {@link TransactionalEventListener} support",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n@@ -69,11 +69,7 @@ public class LocalVariableTableParameterNameDiscoverer implements ParameterNameD\n \tpublic String[] getParameterNames(Method method) {\n \t\tMethod originalMethod = BridgeMethodResolver.findBridgedMethod(method);\n \t\tClass<?> declaringClass = originalMethod.getDeclaringClass();\n-\t\tMap<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n-\t\tif (map == null) {\n-\t\t\tmap = inspectClass(declaringClass);\n-\t\t\tthis.parameterNamesCache.put(declaringClass, map);\n-\t\t}\n+\t\tMap<Member, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n \t\tif (map != NO_DEBUG_INFO_MAP) {\n \t\t\treturn map.get(originalMethod);\n \t\t}\n@@ -84,11 +80,7 @@ public String[] getParameterNames(Method method) {\n \t@Nullable\n \tpublic String[] getParameterNames(Constructor<?> ctor) {\n \t\tClass<?> declaringClass = ctor.getDeclaringClass();\n-\t\tMap<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n-\t\tif (map == null) {\n-\t\t\tmap = inspectClass(declaringClass);\n-\t\t\tthis.parameterNamesCache.put(declaringClass, map);\n-\t\t}\n+\t\tMap<Member, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n \t\tif (map != NO_DEBUG_INFO_MAP) {\n \t\t\treturn map.get(ctor);\n \t\t}",
    "output": "Use computeIfAbsent in LocalVariableTableParameterNameDiscoverer"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java\n@@ -26,7 +26,6 @@\n import org.springframework.test.context.TestConstructor;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.springframework.test.context.TestConstructor.TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME;\n import static org.springframework.test.context.TestConstructor.AutowireMode.ALL;\n import static org.springframework.test.context.TestConstructor.AutowireMode.ANNOTATED;\n \n@@ -105,7 +104,7 @@ private void setGlobalFlag() {\n \t}\n \n \tprivate void setGlobalFlag(String flag) {\n-\t\tSpringProperties.setProperty(TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME, flag);\n+\t\tSpringProperties.setProperty(TestConstructor.TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME, flag);\n \t}\n \n ",
    "output": "Fix Checkstyle violation Eclipse apparently sorts static imports differently"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java b/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java\n@@ -109,16 +109,17 @@ public InputStream getBody() throws IOException {\n \t}\n \n \tprivate boolean shouldParse(HttpServletRequest request) {\n-\t\tif (!HTTP_METHODS.contains(request.getMethod())) {\n-\t\t\treturn false;\n-\t\t}\n-\t\ttry {\n-\t\t\tMediaType mediaType = MediaType.parseMediaType(request.getContentType());\n-\t\t\treturn MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType);\n-\t\t}\n-\t\tcatch (IllegalArgumentException ex) {\n-\t\t\treturn false;\n+\t\tString contentType = request.getContentType();\n+\t\tString method = request.getMethod();\n+\t\tif (StringUtils.hasLength(contentType) && HTTP_METHODS.contains(method)) {\n+\t\t\ttry {\n+\t\t\t\tMediaType mediaType = MediaType.parseMediaType(contentType);\n+\t\t\t\treturn MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType);\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t}\n \t\t}\n+\t\treturn false;\n \t}\n \n ",
    "output": "Improve performance of FormContentFilter Improve the performance of `FormContentFilter` by checking directly if `contentType` is empty. This saves the need for an exception to thrown then immediately caught"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -443,6 +443,11 @@ public V get(K key) {\n \t\t\t}\n \t\t\tthis.lock.writeLock().lock();\n \t\t\ttry {\n+\t\t\t\t// retrying in case of concurrent reads on the same key\n+\t\t\t\tif (this.queue.remove(key)) {\n+\t\t\t\t\tthis.queue.add(key);\n+\t\t\t\t\treturn this.cache.get(key);\n+\t\t\t\t}\n \t\t\t\tif (this.queue.size() == this.maxSize) {\n \t\t\t\t\tK leastUsed = this.queue.poll();\n \t\t\t\t\tif (leastUsed != null) {",
    "output": "Fix concurrent reads issue in MimeTypeUtils cache As of , `MimeTypeUtils` has a built-in LRU cache implementation for caching parsed MIME types and avoiding excessive garbage creation at runtime. This implementation, when hit with highly concurrent reads on the same media type (the cache key), can create multiple keys for the same MIME type string. This duplication leads to the cache filling up and evicting entries. When the cache fetches a duplicate key, it is then not associated with a value and the cache can return a `null` value, which is forbidden by the API contract. This commit adds another cache check within the write lock: this avoids creating duplicate entries in the cache and `null` return values"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -21,7 +21,6 @@\n import reactor.core.publisher.Mono;\n import reactor.netty.NettyInbound;\n import reactor.netty.NettyOutbound;\n-import reactor.netty.NettyPipeline;\n import reactor.netty.http.websocket.WebsocketInbound;\n import reactor.netty.http.websocket.WebsocketOutbound;\n ",
    "output": "Remove unnecessary import"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -90,7 +90,6 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \t\t\t\t})\n \t\t\t\t.map(this::toFrame);\n \t\treturn getDelegate().getOutbound()\n-\t\t\t\t.options(NettyPipeline.SendOptions::flushOnEach)\n \t\t\t\t.sendObject(frames)\n \t\t\t\t.then();\n \t}",
    "output": "Remove unnecessary flushOnEach (since reactor-netty 0.9)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n@@ -784,7 +784,6 @@ public void javaxMetaAnnotationTypeViaFindMergedAnnotation() throws Exception {\n \tpublic void nullableAnnotationTypeViaFindMergedAnnotation() throws Exception {\n \t\tMethod method = TransactionalServiceImpl.class.getMethod(\"doIt\");\n \t\tassertThat(findMergedAnnotation(method, Resource.class)).isEqualTo(method.getAnnotation(Resource.class));\n-\t\tassertThat(findMergedAnnotation(method, Resource.class)).isEqualTo(method.getAnnotation(Resource.class));\n \t}\n \n \t@Test",
    "output": "Remove duplicate assertion in AnnotatedElementUtilsTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java b/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java\n--- a/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java\n@@ -19,7 +19,6 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.List;\n-\n import javax.annotation.Priority;\n \n import org.junit.Test;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1648,7 +1648,7 @@ protected Object getObjectForBeanInstance(\n \t\t\t\treturn beanInstance;\n \t\t\t}\n \t\t\tif (!(beanInstance instanceof FactoryBean)) {\n-\t\t\t\tthrow new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n+                throw new BeanIsNotAFactoryException(beanName, beanInstance.getClass());\n \t\t\t}\n \t\t}\n ",
    "output": "Fix duplicate invoke method of transformedBeanName"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java\n@@ -21,6 +21,7 @@\n import java.nio.channels.Channel;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.OpenOption;\n import java.nio.file.Path;\n import java.nio.file.StandardOpenOption;\n import java.util.Collections;\n@@ -367,6 +368,10 @@ public String value() {\n \n \tprivate static class DefaultFilePart extends DefaultPart implements FilePart {\n \n+\t\tprivate static final OpenOption[] FILE_CHANNEL_OPTIONS =\n+\t\t\t\t{StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE};\n+\n+\n \t\tpublic DefaultFilePart(HttpHeaders headers, DataBuffer body) {\n \t\t\tsuper(headers, body);\n \t\t}\n@@ -380,7 +385,7 @@ public String filename() {\n \n \t\t@Override\n \t\tpublic Mono<Void> transferTo(Path dest) {\n-\t\t\treturn Mono.using(() -> AsynchronousFileChannel.open(dest, StandardOpenOption.WRITE),\n+\t\t\treturn Mono.using(() -> AsynchronousFileChannel.open(dest, FILE_CHANNEL_OPTIONS),\n \t\t\t\t\tthis::writeBody, this::close);\n \t\t}\n ",
    "output": "Use correct file options for transferTo Similar to fix applied to Synchronoss implementation in #cef98e"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java b/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java\n@@ -132,8 +132,11 @@ public void storingAsXmlSortsPropertiesAndOmitsComments() throws IOException {\n \n \t\tString[] lines = lines(baos);\n \n-\t\tassertThat(lines).containsExactly( //\n-\t\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\", //\n+\t\tassertThat(lines).isNotEmpty();\n+\t\t// Leniently match first line due to differences between JDK 8 and JDK 9+.\n+\t\tString regex = \"<\\\\?xml .*\\\\?>\";\n+\t\tassertThat(lines[0]).matches(regex);\n+\t\tassertThat(lines).filteredOn(line -> !line.matches(regex)).containsExactly( //\n \t\t\t\"<!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\">\", //\n \t\t\t\"<properties>\", //\n \t\t\t\"<entry key=\\\"color\\\">blue</entry>\", //",
    "output": "Fix SortedPropertiesTests on JDK 9+"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SortedProperties.java b/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n--- a/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n+++ b/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n@@ -30,8 +30,6 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-import org.springframework.util.StringUtils;\n-\n /**\n  * Specialization of {@link Properties} that sorts properties alphanumerically\n  * based on their keys.\n@@ -94,7 +92,7 @@ public void store(OutputStream out, String comments) throws IOException {\n \t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n \t\tsuper.store(baos, (this.omitComments ? null : comments));\n \t\tString contents = new String(baos.toByteArray(), StandardCharsets.ISO_8859_1);\n-\t\tfor (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {\n+\t\tfor (String line : contents.split(EOL)) {\n \t\t\tif (!this.omitComments || !line.startsWith(\"#\")) {\n \t\t\t\tout.write((line + EOL).getBytes(StandardCharsets.ISO_8859_1));\n \t\t\t}\n@@ -106,7 +104,7 @@ public void store(Writer writer, String comments) throws IOException {\n \t\tStringWriter stringWriter = new StringWriter();\n \t\tsuper.store(stringWriter, (this.omitComments ? null : comments));\n \t\tString contents = stringWriter.toString();\n-\t\tfor (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {\n+\t\tfor (String line : contents.split(EOL)) {\n \t\t\tif (!this.omitComments || !line.startsWith(\"#\")) {\n \t\t\t\twriter.write(line + EOL);\n \t\t\t}",
    "output": "Remove dependency on StringUtils in SortedProperties ,"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -161,7 +161,7 @@ private Method resolveAliasTarget(Method attribute, AliasFor aliasFor, boolean c\n \t\t\t\t\tStringUtils.capitalize(AttributeMethods.describe(attribute)),\n \t\t\t\t\tAttributeMethods.describe(targetAnnotation, targetAttributeName)));\n \t\t}\n-\t\tif (target == attribute) {\n+\t\tif (target.equals(attribute)) {\n \t\t\tthrow new AnnotationConfigurationException(String.format(\n \t\t\t\t\t\"@AliasFor declaration on %s points to itself. \" +\n \t\t\t\t\t\"Specify 'annotation' to point to a same-named attribute on a meta-annotation.\",\n@@ -182,7 +182,7 @@ private Method resolveAliasTarget(Method attribute, AliasFor aliasFor, boolean c\n \t\t\t\t\t\tattribute.getName()));\n \t\t\t}\n \t\t\tMethod mirror = resolveAliasTarget(target, targetAliasFor, false);\n-\t\t\tif (mirror != attribute) {\n+\t\t\tif (!mirror.equals(attribute)) {\n \t\t\t\tthrow new AnnotationConfigurationException(String.format(\n \t\t\t\t\t\t\"%s must be declared as an @AliasFor '%s', not '%s'.\",\n \t\t\t\t\t\tStringUtils.capitalize(AttributeMethods.describe(target)),",
    "output": "Fix annotation exceptions in tight memory Update `AnnotationTypeMapping` so that instance comparisons are no longer used when checking attribute methods. Prior to this commit, in an environment with tightly constrained memory, the method cache could be cleared and different method instances would be returned"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java\n@@ -23,7 +23,6 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.regex.Matcher;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java\n@@ -125,7 +125,7 @@ public void readAndSplitScriptContainingCommentsWithWindowsLineEnding() throws E\n \t\tString script = readScript(\"test-data-with-comments.sql\").replaceAll(\"\\n\", \"\\r\\n\");\n \t\tsplitScriptContainingComments(script);\n \t}\n-\t\n+\n \tprivate void splitScriptContainingComments(String script) throws Exception {\n \t\tList<String> statements = new ArrayList<>();\n \t\tsplitSqlScript(script, ';', statements);",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java b/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.context.config;\n \n-import java.io.FileNotFoundException;\n import java.util.Calendar;\n import java.util.Date;\n \n@@ -32,6 +31,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n /**\n  * @author Arjen Poutsma\n@@ -129,14 +129,14 @@ public void propertyPlaceholderLocationWithSystemPropertyForMultipleLocations()\n \t@Test\n \tpublic void propertyPlaceholderLocationWithSystemPropertyMissing() {\n \t\ttry {\n-\t\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n+\t\t\tnew ClassPathXmlApplicationContext(\n \t\t\t\t\t\"contextNamespaceHandlerTests-location-placeholder.xml\", getClass());\n-\t\t\tassertEquals(\"bar\", applicationContext.getBean(\"foo\"));\n-\t\t\tassertEquals(\"foo\", applicationContext.getBean(\"bar\"));\n-\t\t\tassertEquals(\"maps\", applicationContext.getBean(\"spam\"));\n+\t\t\tfail(\"Should have thrown FatalBeanException\");\n \t\t}\n \t\tcatch (FatalBeanException ex) {\n-\t\t\tassertTrue(ex.getRootCause() instanceof FileNotFoundException);\n+\t\t\tThrowable cause = ex.getRootCause();\n+\t\t\tassertTrue(cause instanceof IllegalArgumentException);\n+\t\t\tassertEquals(\"Could not resolve placeholder 'foo' in value \\\"${foo}\\\"\", cause.getMessage());\n \t\t}\n \t}\n ",
    "output": "Fix test failing after f"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java\n@@ -37,7 +37,9 @@\n import org.springframework.web.reactive.BindingContext;\n import org.springframework.web.server.ServerWebExchange;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Unit tests for {@link AbstractView}.",
    "output": "Fix checkstyle errors"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java b/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java\n@@ -98,4 +98,4 @@ public String value() {\n \t\t}\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java b/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java\n--- a/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java\n@@ -76,9 +76,9 @@ public static void assertTrue(String message, boolean condition) {\n \t * {@link AssertionError} otherwise.\n \t * @param message a message that describes the reason for the failure\n \t * @param object the object to check\n-\t * @since 5.1\n+\t * @since 5.1.8\n \t */\n-\tpublic static void assertNotNull(String message, Object object) {\n+\tpublic static void assertNotNull(String message, @Nullable Object object) {\n \t\tassertTrue(message, object != null);\n \t}\n ",
    "output": "Add missing Nullable annotation to assertNotNull"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java\n@@ -98,7 +98,7 @@ private void initLookupPath(ResourceUrlProvider urlProvider) {\n \t\t\t\tString lookupPath = pathHelper.getLookupPathForRequest(this);\n \t\t\t\tthis.indexLookupPath = requestUri.lastIndexOf(lookupPath);\n \t\t\t\tAssert.isTrue(this.indexLookupPath != -1, () ->\n-\t\t\t\t\t\t\"Failed to find lookupPath '\" + lookupPath + \"' within requestUri '\" + requestUri + \". \" +\n+\t\t\t\t\t\t\"Failed to find lookupPath '\" + lookupPath + \"' within requestUri '\" + requestUri + \"'. \" +\n \t\t\t\t\t\t\"Does the path have invalid encoded characters \" +\n \t\t\t\t\t\t\t\t\"for characterEncoding=\" + getRequest().getCharacterEncoding() + \"?\");\n \t\t\t\tthis.prefixLookupPath = requestUri.substring(0, this.indexLookupPath);",
    "output": "Add a missing single quote in assertion message"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -521,9 +521,11 @@ private MergedAnnotation<?> findAutowiredAnnotation(AccessibleObject ao) {\n \t * @param ann the Autowired annotation\n \t * @return whether the annotation indicates that a dependency is required\n \t */\n-\t@SuppressWarnings(\"deprecation\")\n+\t@SuppressWarnings({ \"deprecation\", \"cast\" })\n \tprotected boolean determineRequiredStatus(MergedAnnotation<?> ann) {\n-\t\treturn determineRequiredStatus(ann.asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType())));\n+\t\t// The following (AnnotationAttributes) cast is required on JDK 9+.\n+\t\treturn determineRequiredStatus((AnnotationAttributes)\n+\t\t\t\tann.asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType())));\n \t}\n \n \t/**",
    "output": "Fix build on JDK 9+"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n@@ -183,7 +183,7 @@ public void emptyBodyWritten() {\n \tpublic void isStreamingMediaType() throws InvocationTargetException, IllegalAccessException {\n \t\tHttpMessageWriter<String> writer = getWriter(TEXT_HTML);\n \t\tMediaType streamingMediaType = new MediaType(TEXT_PLAIN, Collections.singletonMap(\"streaming\", \"true\"));\n-\t\twhen(this.encoder.getStreamingMediaTypes()).thenReturn(Arrays.asList(streamingMediaType));\n+\t\tgiven(this.encoder.getStreamingMediaTypes()).willReturn(Arrays.asList(streamingMediaType));\n \t\tMethod method = ReflectionUtils.findMethod(writer.getClass(), \"isStreamingMediaType\", MediaType.class);\n \t\tReflectionUtils.makeAccessible(method);\n \t\tassertTrue((Boolean) method.invoke(writer, streamingMediaType));",
    "output": "Fix broken test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n@@ -50,6 +50,7 @@\n  * @author Sebastien Deleuze\n  * @author Rossen Stoyanchev\n  * @author Brian Clozel\n+ * @author Sam Brannen\n  * @since 5.0\n  * @param <T> the type of objects in the input stream\n  */\n@@ -171,7 +172,7 @@ private boolean isStreamingMediaType(@Nullable MediaType contentType) {\n \t\t}\n \t\tfor (MediaType mediaType : ((HttpMessageEncoder<?>) this.encoder).getStreamingMediaTypes()) {\n \t\t\tif (contentType.isCompatibleWith(mediaType) &&\n-\t\t\t\t\tcontentType.getParameters().entrySet().containsAll(mediaType.getParameters().keySet())) {\n+\t\t\t\t\tcontentType.getParameters().keySet().containsAll(mediaType.getParameters().keySet())) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "Fix bug in EncoderHttpMessageWriter.isStreamingMediaType"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java\n--- a/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java\n@@ -27,6 +27,7 @@\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.lang.Nullable;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * {@link AnnotationMetadata} implementation that uses standard reflection\n@@ -151,7 +152,7 @@ public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotatio\n \tpublic boolean hasAnnotatedMethods(String annotationName) {\n \t\tif (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {\n \t\t\ttry {\n-\t\t\t\tMethod[] methods = getIntrospectedClass().getDeclaredMethods();\n+\t\t\t\tMethod[] methods = ReflectionUtils.getDeclaredMethods(getIntrospectedClass());\n \t\t\t\tfor (Method method : methods) {\n \t\t\t\t\tif (!method.isBridge() && method.getAnnotations().length > 0 &&\n \t\t\t\t\t\t\tAnnotatedElementUtils.isAnnotated(method, annotationName)) {",
    "output": "Use ReflectionUtils to get declared methods Update `StandardAnnotationMetadata` to use `ReflectionUtils` when obtaining declared methods. This update is primarily so that the common method cache can be used"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -216,7 +216,7 @@ private void logArgumentErrorIfNecessary(\n \n \t\t// Leave stack trace for later, if error is not handled..\n \t\tString message = cause.getMessage();\n-\t\tif (!message.contains(parameter.getExecutable().toGenericString())) {\n+\t\tif (message != null && !message.contains(parameter.getExecutable().toGenericString())) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(exchange.getLogPrefix() + formatArgumentError(parameter, message));\n \t\t\t}",
    "output": "Add null check"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java\n@@ -443,7 +443,7 @@ private Mono<Void> processCommit(TransactionSynchronizationManager synchronizati\n \t\t\t\t\t\treturn triggerAfterCompletion(synchronizationManager, status, TransactionSynchronization.STATUS_ROLLED_BACK).then(propagateException);\n \t\t\t\t\t}\n \t\t\t\t\tif (ErrorPredicates.TRANSACTION_EXCEPTION.test(ex)) {\n-\t\t\t\t\t\ttriggerAfterCompletion(synchronizationManager, status, TransactionSynchronization.STATUS_UNKNOWN).then(propagateException);\n+\t\t\t\t\t\treturn triggerAfterCompletion(synchronizationManager, status, TransactionSynchronization.STATUS_UNKNOWN).then(propagateException);\n \t\t\t\t\t}\n \t\t\t\t\tif (ErrorPredicates.RUNTIME_OR_ERROR.test(ex)) {\n \t\t\t\t\t\tMono<Void> mono;",
    "output": "Add missing return in AbstractReactiveTransactionManager.processCommit"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java\n--- a/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java\n+++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java\n@@ -68,6 +68,51 @@ public final Log getLog() {\n \t}\n \n \n+\t// Log level checks\n+\n+\t/**\n+\t * Is fatal logging currently enabled?\n+\t */\n+\tpublic boolean isFatalEnabled() {\n+\t\treturn this.log.isFatalEnabled();\n+\t}\n+\n+\t/**\n+\t * Is error logging currently enabled?\n+\t */\n+\tpublic boolean isErrorEnabled() {\n+\t\treturn this.log.isErrorEnabled();\n+\t}\n+\n+\t/**\n+\t * Is warn logging currently enabled?\n+\t */\n+\tpublic boolean isWarnEnabled() {\n+\t\treturn this.log.isWarnEnabled();\n+\t}\n+\n+\t/**\n+\t * Is info logging currently enabled?\n+\t */\n+\tpublic boolean isInfoEnabled() {\n+\t\treturn this.log.isInfoEnabled();\n+\t}\n+\n+\t/**\n+\t * Is debug logging currently enabled?\n+\t */\n+\tpublic boolean isDebugEnabled() {\n+\t\treturn this.log.isDebugEnabled();\n+\t}\n+\n+\t/**\n+\t * Is trace logging currently enabled?\n+\t */\n+\tpublic boolean isTraceEnabled() {\n+\t\treturn this.log.isTraceEnabled();\n+\t}\n+\n+\n \t// Plain log methods\n \n \t/**",
    "output": "Add is*Enabled methods for log level checks to LogAccessor"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n@@ -126,6 +126,7 @@ public void followUpRequestAfterFailure() {\n \n \t\ttry {\n \t\t\tthis.restTemplate.getForEntity(\"/some-service/some-endpoint\", String.class);\n+\t\t\tfail(\"Expected exception to be thrown.\");\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthis.restTemplate.postForEntity(\"/reporting-service/report-error\", ex.toString(), String.class);\n@@ -142,6 +143,7 @@ public void verifyShouldFailIfRequestsFailed() {\n \t\tthis.restTemplate.postForEntity(\"/remoteurl\", null, String.class);\n \t\ttry {\n \t\t\tthis.restTemplate.postForEntity(\"/remoteurl\", null, String.class);\n+\t\t\tfail(\"Expected error to be thrown.\");\n \t\t}\n \t\tcatch (AssertionError error) {\n \t\t\tassertThat(error.getMessage()).startsWith(\"No further requests expected\");",
    "output": "Add missing failcalls in MockRestServiceServerTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -48,6 +48,7 @@\n  * @author Sebastien Deleuze\n  * @author Brian Clozel\n  * @author Juergen Hoeller\n+ * @author Sam Brannen\n  */\n public class HttpHeadersTests {\n \n@@ -515,10 +516,11 @@ public void firstZonedDateTime() {\n \t\tassertTrue(headers.getFirstZonedDateTime(HttpHeaders.DATE).isEqual(date));\n \n \t\theaders.clear();\n-\t\tZonedDateTime otherDate = ZonedDateTime.of(2010, 12, 18, 10, 20, 0, 0, ZoneId.of(\"GMT\"));\n \t\theaders.add(HttpHeaders.DATE, \"Fri, 02 Jun 2017 02:22:00 GMT\");\n \t\theaders.add(HttpHeaders.DATE, \"Sat, 18 Dec 2010 10:20:00 GMT\");\n \t\tassertTrue(headers.getFirstZonedDateTime(HttpHeaders.DATE).isEqual(date));\n+\t\tassertEquals(Arrays.asList(\"Fri, 02 Jun 2017 02:22:00 GMT\",\n+\t\t\t\t\"Sat, 18 Dec 2010 10:20:00 GMT\"), headers.get(HttpHeaders.DATE));\n \n \t\t// obsolete RFC 850 format\n \t\theaders.clear();",
    "output": "Remove dead code in HttpHeadersTests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java b/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java\n--- a/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java\n@@ -10,7 +10,6 @@\n  * same JNDI names as within a Java EE container, both application code and\n  * configuration can be reused without changes.\n  */\n-@Deprecated\n @NonNullApi\n @NonNullFields\n package org.springframework.mock.jndi;",
    "output": "Remove @Deprecated from org.springframework.mock.jndi package This commit removes the @Deprecated declaration on the org.springframework.mock.jndi package, since such usage results in a compiler warning on JDK 9+ which breaks Spring's JDK 9 and JDK 11 CI builds. https://bugs.openjdk.java.net/browse/"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -524,13 +524,9 @@ public void completed(Integer read, DataBuffer dataBuffer) {\n \t\t\t\tlong pos = this.position.addAndGet(read);\n \t\t\t\tdataBuffer.writePosition(read);\n \t\t\t\tthis.sink.next(dataBuffer);\n-\t\t\t\t// It's possible for cancellation to happen right before the push into the sink\n+\t\t\t\t// onNext may have led to onCancel (e.g. downstream takeUntil)\n \t\t\t\tif (this.disposed.get()) {\n-\t\t\t\t\t// TODO:\n-\t\t\t\t\t// This is not ideal since we already passed the buffer into the sink and\n-\t\t\t\t\t// releasing may cause something reading to fail. Maybe we won't have to\n-\t\t\t\t\t// do this after https://github.com/reactor/reactor-core/issues/1634\n-\t\t\t\t\tcomplete(dataBuffer);\n+\t\t\t\t\tcomplete();\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tDataBuffer newDataBuffer = this.dataBufferFactory.allocateBuffer(this.bufferSize);\n@@ -539,12 +535,12 @@ public void completed(Integer read, DataBuffer dataBuffer) {\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tcomplete(dataBuffer);\n+\t\t\t\trelease(dataBuffer);\n+\t\t\t\tcomplete();\n \t\t\t}\n \t\t}\n \n-\t\tprivate void complete(DataBuffer dataBuffer) {\n-\t\t\trelease(dataBuffer);\n+\t\tprivate void complete() {\n \t\t\tthis.sink.complete();\n \t\t\tcloseChannel(this.channel);\n \t\t}",
    "output": "Remove buffer release used as workaround The extra buffer release was used as a workaround for a reactor core issue and should have already been removed as part of b3bc2d9253efc4cfb5d81b487ecaa620e4b88879"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n@@ -23,7 +23,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n import org.springframework.context.EmbeddedValueResolverAware;\n import org.springframework.core.annotation.AnnotatedElementUtils;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n@@ -230,22 +230,6 @@ public void setCorsConfigurationSource(CorsConfigurationSource corsConfiguration\n \t\tthis.corsConfigurationSource = corsConfigurationSource;\n \t}\n \n-\t/**\n-\t * Get the \"global\" CORS configurations.\n-\t * @deprecated as of 5.1 since it is now possible to set a {@link CorsConfigurationSource} which is not a\n-\t * {@link UrlBasedCorsConfigurationSource}. Expected to be removed in 5.2.\n-\t */\n-\t@Deprecated\n-\tpublic Map<String, CorsConfiguration> getCorsConfigurations() {\n-\t\tif (this.corsConfigurationSource instanceof UrlBasedCorsConfigurationSource) {\n-\t\t\treturn ((UrlBasedCorsConfigurationSource)this.corsConfigurationSource).getCorsConfigurations();\n-\t\t}\n-\t\telse {\n-\t\t\tthrow new IllegalStateException(\"No CORS configurations available when the source \" +\n-\t\t\t\t\t\"is not an UrlBasedCorsConfigurationSource\");\n-\t\t}\n-\t}\n-\n \t/**\n \t * Configure a custom {@link CorsProcessor} to use to apply the matched\n \t * {@link CorsConfiguration} for a request.",
    "output": "Remove deprecated AbstractHandlerMapping#getCorsConfigurations"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n@@ -27,7 +27,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n-import java.util.Enumeration;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -372,11 +371,8 @@ public boolean containsKey(Object key) {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tEnumeration<String> attributeNames = this.servletRequest.getAttributeNames();\n-\t\t\twhile (attributeNames.hasMoreElements()) {\n-\t\t\t\tString name = attributeNames.nextElement();\n-\t\t\t\tthis.servletRequest.removeAttribute(name);\n-\t\t\t}\n+\t\t\tList<String> attributeNames = Collections.list(this.servletRequest.getAttributeNames());\n+\t\t\tattributeNames.forEach(this.servletRequest::removeAttribute);\n \t\t}\n \n \t\t@NotNull",
    "output": "Fix ConcurrentModificationException on Undertow This commit fixes a ConcurrentModificationException that occurs when requesting a nonexistant route"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -95,7 +95,7 @@ private void copyCharactersTillPotentialReference() {\n \t\t\tint skipUntilIndex = (this.nextPotentialReferencePosition != -1 ?\n \t\t\t\t\tthis.nextPotentialReferencePosition : this.originalMessage.length());\n \t\t\tif (skipUntilIndex - this.currentPosition > 3) {\n-\t\t\t\tthis.decodedMessage.append(this.originalMessage.substring(this.currentPosition, skipUntilIndex));\n+\t\t\t\tthis.decodedMessage.append(this.originalMessage, this.currentPosition, skipUntilIndex);\n \t\t\t\tthis.currentPosition = skipUntilIndex;\n \t\t\t}\n \t\t\telse {",
    "output": "Remove redundant 'String.substring' call"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java b/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -38,14 +38,18 @@\n  * @author Juergen Hoeller\n  * @since 4.3\n  */\n-public abstract class MultipartResolutionDelegate {\n+public final class MultipartResolutionDelegate {\n \n \t/**\n \t * Indicates an unresolvable value.\n \t */\n \tpublic static final Object UNRESOLVABLE = new Object();\n \n \n+\tprivate MultipartResolutionDelegate() {\n+\t}\n+\n+\n \t@Nullable\n \tpublic static MultipartRequest resolveMultipartRequest(NativeWebRequest webRequest) {\n \t\tMultipartRequest multipartRequest = webRequest.getNativeRequest(MultipartRequest.class);",
    "output": "Make MultipartResolutionDelegate final (aligned with other delegates)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n@@ -145,8 +145,8 @@ private static <C, R> R processClassInheritedAnnotations(C context, Class<?> sou\n \t\tint remaining = Integer.MAX_VALUE;\n \t\tint aggregateIndex = 0;\n \t\tClass<?> root = source;\n-\t\twhile (source != null && source != Object.class\n-\t\t\t\t&& !hasPlainJavaAnnotationsOnly(source) && remaining > 0) {\n+\t\twhile (source != null && source != Object.class && remaining > 0\n+\t\t\t\t&& !hasPlainJavaAnnotationsOnly(source)) {\n \t\t\tR result = processor.doWithAggregate(context, aggregateIndex);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n@@ -524,7 +524,9 @@ else if (annotatedElement instanceof Member) {\n \t\tString name = type.getName();\n \t\treturn type.equals(Ordered.class) ||\n \t\t\t\tname.startsWith(\"java\") ||\n-\t\t\t\tname.startsWith(\"org.springframework.lang.\");\n+\t\t\t\tname.startsWith(\"org.springframework.lang.\") ||\n+\t\t\t\tname.startsWith(\"org.springframework.util.\") ||\n+\t\t\t\t(name.startsWith(\"com.sun\") && !name.contains(\"Proxy\"));\n \t}\n \n \tprivate static boolean isWithoutHierarchy(AnnotatedElement source) {",
    "output": "Add more aggressive annotation element filtering Refine the element filtering performed by `AnnotationsScanner` to also cover `org.springframework.util` and most `com.sun` classes which turn out to be referenced quite frequently and which we know contain no useful annotations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -66,10 +66,14 @@ public abstract class ReflectionUtils {\n \t */\n \tprivate static final String CGLIB_RENAMED_METHOD_PREFIX = \"CGLIB$\";\n \n+\tprivate static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];\n+\n \tprivate static final Method[] EMPTY_METHOD_ARRAY = new Method[0];\n \n \tprivate static final Field[] EMPTY_FIELD_ARRAY = new Field[0];\n \n+\tprivate static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n+\n \n \t/**\n \t * Cache for {@link Class#getDeclaredMethods()} plus equivalent default methods\n@@ -211,7 +215,7 @@ public static void makeAccessible(Constructor<?> ctor) {\n \t */\n \t@Nullable\n \tpublic static Method findMethod(Class<?> clazz, String name) {\n-\t\treturn findMethod(clazz, name, new Class<?>[0]);\n+\t\treturn findMethod(clazz, name, EMPTY_CLASS_ARRAY);\n \t}\n \n \t/**\n@@ -255,7 +259,7 @@ public static Method findMethod(Class<?> clazz, String name, @Nullable Class<?>.\n \t */\n \t@Nullable\n \tpublic static Object invokeMethod(Method method, @Nullable Object target) {\n-\t\treturn invokeMethod(method, target, new Object[0]);\n+\t\treturn invokeMethod(method, target, EMPTY_OBJECT_ARRAY);\n \t}\n \n \t/**",
    "output": "Add more empty array constants in ReflectionUtils Add some additional empty array constants to `ReflectionUtils` to save us creating new arrays for zero length results"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -42,8 +42,6 @@\n import org.springframework.web.reactive.HandlerResult;\n import org.springframework.web.server.ServerWebExchange;\n \n-import static org.springframework.web.reactive.result.method.InvocableHandlerMethodKt.invokeHandlerMethod;\n-\n /**\n  * Extension of {@link HandlerMethod} that invokes the underlying method with\n  * argument values resolved from the current HTTP request through a list of\n@@ -142,7 +140,7 @@ public Mono<HandlerResult> invoke(\n \t\t\t\tReflectionUtils.makeAccessible(getBridgedMethod());\n \t\t\t\tMethod method = getBridgedMethod();\n \t\t\t\tif (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(method.getDeclaringClass())) {\n-\t\t\t\t\tvalue = invokeHandlerMethod(method, getBean(), args);\n+\t\t\t\t\tvalue = InvocableHandlerMethodKt.invokeHandlerMethod(method, getBean(), args);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tvalue = method.invoke(getBean(), args);",
    "output": "Remove static import from InvocableHandlerMethod"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.web.reactive.result.method;\n \n-import static org.springframework.web.reactive.result.method.InvocableHandlerMethodKt.*;\n-\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.ParameterizedType;\n@@ -44,6 +42,8 @@\n import org.springframework.web.reactive.HandlerResult;\n import org.springframework.web.server.ServerWebExchange;\n \n+import static org.springframework.web.reactive.result.method.InvocableHandlerMethodKt.invokeHandlerMethod;\n+\n /**\n  * Extension of {@link HandlerMethod} that invokes the underlying method with\n  * argument values resolved from the current HTTP request through a list of",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n@@ -92,7 +92,7 @@ public void setMaxFramePayloadLength(int maxFramePayloadLength) {\n \t * @since 5.2\n \t */\n \tpublic int getMaxFramePayloadLength() {\n-\t\treturn maxFramePayloadLength;\n+\t\treturn this.maxFramePayloadLength;\n \t}\n \n ",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n@@ -49,14 +49,10 @@ public void defaultExecutor() throws Exception {\n \tpublic static class ExecutorConfig {\n \n \t\t@Bean\n-\t\tpublic ThreadPoolExecutorFactoryBean executorFactory() {\n+\t\tpublic ThreadPoolExecutorFactoryBean executor() {\n \t\t\treturn new ThreadPoolExecutorFactoryBean();\n \t\t}\n \n-\t\t@Bean\n-\t\tpublic ExecutorService executor() {\n-\t\t\treturn executorFactory().getObject();\n-\t\t}\n \t}\n \n }",
    "output": "Fix broken test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContext.java b/spring-test/src/main/java/org/springframework/test/context/TestContext.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContext.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContext.java\n@@ -67,6 +67,7 @@ public interface TestContext extends AttributeAccessor, Serializable {\n \t * @return the current test instance (may be {@code null})\n \t * @see #updateState(Object, Method, Throwable)\n \t */\n+\t@Nullable\n \tObject getTestInstance();\n \n \t/**\n@@ -75,6 +76,7 @@ public interface TestContext extends AttributeAccessor, Serializable {\n \t * @return the current test method (may be {@code null})\n \t * @see #updateState(Object, Method, Throwable)\n \t */\n+\t@Nullable\n \tMethod getTestMethod();\n \n \t/**",
    "output": "Add missing @Nullable declarations to TestContext return values"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java\n@@ -124,6 +124,7 @@ public void setLogExceptionStackTrace(boolean logExceptionStackTrace) {\n \t * @see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log)\n \t */\n \t@Override\n+\t@Nullable\n \tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n \t\tLog logger = getLoggerForInvocation(invocation);\n \t\tif (isInterceptorEnabled(invocation, logger)) {\n@@ -242,6 +243,7 @@ protected void writeToLog(Log logger, String message, @Nullable Throwable ex) {\n \t * @see #writeToLog(Log, String)\n \t * @see #writeToLog(Log, String, Throwable)\n \t */\n+\t@Nullable\n \tprotected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable;\n \n }",
    "output": "Fix AbstractTraceInterceptor null-safety annotations"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java\n@@ -96,8 +96,8 @@ public void listenableFuture() throws Exception {\n \n \t@Test\n \tpublic void completableFuture() throws Exception {\n-\t\tSettableListenableFuture<String> future = new SettableListenableFuture<>();\n-\t\ttestHandle(future, CompletableFuture.class, () -> future.set(\"foo\"), \"foo\");\n+\t\tCompletableFuture<String> future = new CompletableFuture<>();\n+\t\ttestHandle(future, CompletableFuture.class, () -> future.complete(\"foo\"), \"foo\");\n \t}\n \n \t@Test\n@@ -115,9 +115,9 @@ public void listenableFutureWithError() throws Exception {\n \n \t@Test\n \tpublic void completableFutureWithError() throws Exception {\n-\t\tSettableListenableFuture<String> future = new SettableListenableFuture<>();\n+\t\tCompletableFuture<String> future = new CompletableFuture<>();\n \t\tIllegalStateException ex = new IllegalStateException();\n-\t\ttestHandle(future, CompletableFuture.class, () -> future.setException(ex), ex);\n+\t\ttestHandle(future, CompletableFuture.class, () -> future.completeExceptionally(ex), ex);\n \t}\n \n ",
    "output": "Fix use CompletableFuture in DeferredResultReturnValueHandlerTest"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -852,9 +852,6 @@ public MethodArgumentBuilder(@Nullable UriComponentsBuilder baseUrl, Class<?> co\n \t\t\tthis.controllerType = controllerType;\n \t\t\tthis.method = method;\n \t\t\tthis.argumentValues = new Object[method.getParameterCount()];\n-\t\t\tfor (int i = 0; i < this.argumentValues.length; i++) {\n-\t\t\t\tthis.argumentValues[i] = null;\n-\t\t\t}\n \t\t}\n \n \t\tprivate static String getPath() {",
    "output": "Remove unnecessary array initialization"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java\n@@ -63,7 +63,7 @@ public abstract class StaxUtils {\n \t * @since 5.0\n \t */\n \tpublic static XMLInputFactory createDefensiveInputFactory() {\n-\t\treturn createDefensiveInputFactory(XMLInputFactory::newFactory);\n+\t\treturn createDefensiveInputFactory(XMLInputFactory::newInstance);\n \t}\n \n \t/**",
    "output": "Fix Java 9 Build Fix Java 9 build by replacing deprecated method"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java\n@@ -199,7 +199,7 @@ public String toString() {\n \t\t\t\t\", stompSubProtocol[\" + getStompSubProtocolStatsInfo() + \"]\" +\n \t\t\t\t\", stompBrokerRelay[\" + getStompBrokerRelayStatsInfo() + \"]\" +\n \t\t\t\t\", inboundChannel[\" + getClientInboundExecutorStatsInfo() + \"]\" +\n-\t\t\t\t\", outboundChannel\" + getClientOutboundExecutorStatsInfo() + \"]\" +\n+\t\t\t\t\", outboundChannel[\" + getClientOutboundExecutorStatsInfo() + \"]\" +\n \t\t\t\t\", sockJsScheduler[\" + getSockJsTaskSchedulerStatsInfo() + \"]\";\n \t}\n ",
    "output": "Add missing [ in toString of WebSocketMessageBrokerStats"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -399,6 +399,8 @@ private void registerMvcSingletons(StubWebApplicationContext wac) {\n \n \t\tthis.flashMapManager = new SessionFlashMapManager();\n \t\twac.addBean(DispatcherServlet.FLASH_MAP_MANAGER_BEAN_NAME, this.flashMapManager);\n+\n+\t\textendMvcSingletons(sc).forEach(wac::addBean);\n \t}\n \n \tprivate List<ViewResolver> initViewResolvers(WebApplicationContext wac) {\n@@ -412,6 +414,18 @@ private List<ViewResolver> initViewResolvers(WebApplicationContext wac) {\n \t\treturn this.viewResolvers;\n \t}\n \n+\t/**\n+\t * This method could be used from a sub-class to register additional Spring\n+\t * MVC infrastructure such as additional {@code HandlerMapping},\n+\t * {@code HandlerAdapter}, and others.\n+\t * @param servletContext the ServletContext\n+\t * @return a map with additional MVC infrastructure object instances\n+\t * @since 5.1.4\n+\t */\n+\tprotected Map<String, Object> extendMvcSingletons(@Nullable ServletContext servletContext) {\n+\t\treturn Collections.emptyMap();\n+\t}\n+\n \n \t/** Using the MVC Java configuration as the starting point for the \"standalone\" setup. */\n \tprivate class StandaloneConfiguration extends WebMvcConfigurationSupport {",
    "output": "Add protected method in StandaloneMockMvcBuilder To allow sub-classes to register additional MVC infrastructure. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n@@ -40,6 +40,10 @@ abstract public class AbstractClassGenerator<T> implements ClassGenerator {\n \n \tprivate static volatile Map<ClassLoader, ClassLoaderData> CACHE = new WeakHashMap<ClassLoader, ClassLoaderData>();\n \n+\tprivate static final boolean DEFAULT_USE_CACHE =\n+\t\t\tBoolean.parseBoolean(System.getProperty(\"cglib.useCache\", \"true\"));\n+\n+\n \tprivate GeneratorStrategy strategy = DefaultGeneratorStrategy.INSTANCE;\n \n \tprivate NamingPolicy namingPolicy = DefaultNamingPolicy.INSTANCE;\n@@ -54,7 +58,7 @@ abstract public class AbstractClassGenerator<T> implements ClassGenerator {\n \n \tprivate Object key;\n \n-\tprivate boolean useCache = true;\n+\tprivate boolean useCache = DEFAULT_USE_CACHE;\n \n \tprivate String className;\n ",
    "output": "Upgrade to CGLIB 3.2.10 Includes upgrade to JarJar 1.7.2 and Tomcat 9.0.14. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n@@ -195,8 +195,7 @@ public RequestMappingInfo combine(RequestMappingInfo other) {\n \t@Nullable\n \tprivate String combineNames(RequestMappingInfo other) {\n \t\tif (this.name != null && other.name != null) {\n-\t\t\tString separator = \"#\";\n-\t\t\treturn this.name + separator + other.name;\n+\t\t\treturn this.name + \"#\" + other.name;\n \t\t}\n \t\telse if (this.name != null) {\n \t\t\treturn this.name;",
    "output": "Remove an unnecessary local variable"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -25,7 +25,6 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n ",
    "output": "Remove unused LinkedList import"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -697,7 +697,7 @@ private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {\n \t\t\tfor (Method ifcMethod : ifc.getMethods()) {\n \t\t\t\tif (!Modifier.isAbstract(ifcMethod.getModifiers())) {\n \t\t\t\t\tif (result == null) {\n-\t\t\t\t\t\tresult = new LinkedList<>();\n+\t\t\t\t\t\tresult = new ArrayList<>();\n \t\t\t\t\t}\n \t\t\t\t\tresult.add(ifcMethod);\n \t\t\t\t}",
    "output": "Use ArrayList instead of LinkedList"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n@@ -192,8 +192,8 @@ public Mono<byte[]> getContent() {\n \t\t\t\t\t//noinspection ConstantConditions\n \t\t\t\t\t(this.publisher != null ? this.publisher : this.publisherNested)\n \t\t\t\t\t\t\t.onErrorMap(ex -> new IllegalStateException(\n-\t\t\t\t\t\t\t\t\t\"Content was not been consumed and \" +\n-\t\t\t\t\t\t\t\t\t\t\t\"an error was raised on attempt to produce it:\", ex))\n+\t\t\t\t\t\t\t\t\t\"Content has not been consumed, and \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"an error was raised while attempting to produce it.\", ex))\n \t\t\t\t\t\t\t.subscribe();\n \t\t\t\t}\n \t\t\t\treturn this.content;",
    "output": "Fix typo and polish"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n@@ -32,6 +32,8 @@\n import org.springframework.core.codec.Hints;\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.PooledDataBuffer;\n import org.springframework.http.MediaType;\n import org.springframework.http.ReactiveHttpOutputMessage;\n import org.springframework.http.server.reactive.ServerHttpRequest;\n@@ -144,7 +146,8 @@ private Flux<Publisher<DataBuffer>> encode(Publisher<?> input, ResolvableType el\n \n \t\t\treturn Flux.concat(encodeText(sb, mediaType, factory),\n \t\t\t\t\tencodeData(data, valueType, mediaType, factory, hints),\n-\t\t\t\t\tencodeText(\"\\n\", mediaType, factory));\n+\t\t\t\t\tencodeText(\"\\n\", mediaType, factory))\n+\t\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n \t\t});\n \t}\n ",
    "output": "Fix memory leak for ServerSentEventHttpMessageWriter Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n@@ -201,7 +201,7 @@ else if (this.name != null) {\n \t\t\treturn this.name;\n \t\t}\n \t\telse {\n-\t\t\treturn (other.name != null ? other.name : null);\n+\t\t\treturn other.name;\n \t\t}\n \t}\n ",
    "output": "Remove unnecessary null check"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java\n@@ -35,9 +35,7 @@\n import org.springframework.util.MimeType;\n \n import static java.util.Collections.emptyMap;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n import static org.springframework.core.ResolvableType.forClass;\n \n /**\n@@ -80,6 +78,19 @@ public void encode() {\n \t\t\t\t.verifyComplete();\n \t}\n \n+\t@Test\n+\tpublic void encodeError() {\n+\t\tFlux<Msg> messages = Flux.just(this.testMsg)\n+\t\t\t\t.concatWith(Flux.error(new RuntimeException()));\n+\n+\t\tResolvableType elementType = forClass(Msg.class);\n+\t\tFlux<DataBuffer> output = this.encoder.encode(messages, this.bufferFactory, elementType, PROTOBUF_MIME_TYPE, emptyMap());\n+\t\tStepVerifier.create(output)\n+\t\t\t\t.consumeNextWith(DataBufferUtils::release)\n+\t\t\t\t.expectError(RuntimeException.class)\n+\t\t\t\t.verify();\n+\t}\n+\n \t@Test\n \tpublic void encodeStream() {\n \t\tMsg testMsg2 = Msg.newBuilder().setFoo(\"Bar\").setBlah(SecondMsg.newBuilder().setBlah(456).build()).build();",
    "output": "Add error stream tests for ProtobufEncoderTests Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n@@ -33,6 +33,7 @@\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.PooledDataBuffer;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n@@ -94,7 +95,10 @@ public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n \n \t@Override\n \tpublic Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {\n-\t\tFlux<ContentChunk> chunks = Flux.from(body).flatMap(Function.identity()).map(this::toContentChunk);\n+\t\tFlux<ContentChunk> chunks = Flux.from(body)\n+\t\t\t\t.flatMap(Function.identity())\n+\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)\n+\t\t\t\t.map(this::toContentChunk);\n \t\tReactiveRequest.Content content = ReactiveRequest.Content.fromPublisher(chunks, getContentType());\n \t\tthis.reactiveRequest = ReactiveRequest.newBuilder(this.jettyRequest).content(content).build();\n \t\treturn doCommit(this::completes);",
    "output": "Add onDiscard hook to Jetty client request The flatMap operation in writeAndFlushWith could buffer internally. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n@@ -197,7 +197,10 @@ private static class SessionClosingHandler implements WebSocketHandler {\n \n \t\t@Override\n \t\tpublic Mono<Void> handle(WebSocketSession session) {\n-\t\t\treturn Flux.never().mergeWith(session.close(CloseStatus.GOING_AWAY)).then();\n+\t\t\treturn session.send(Flux\n+\t\t\t\t\t.error(new Throwable())\n+\t\t\t\t\t.onErrorResume(ex -> session.close(CloseStatus.GOING_AWAY)) // SPR-17306 (nested close)\n+\t\t\t\t\t.cast(WebSocketMessage.class));\n \t\t}\n \t}\n ",
    "output": "Upgrade to Californium snapshots Towards Californium SR2 to confirm fix for"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -778,7 +778,7 @@ public void process() {\n \t\t\t\tthis.deferredImportSelectors = new ArrayList<>();\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t}\n \n ",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java b/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java\n--- a/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java\n+++ b/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java\n@@ -52,7 +52,7 @@ public static <T> Comparator<T> nullsLow() {\n \t * @see NullSafeComparator#NullSafeComparator(boolean)\n \t */\n \tpublic static <T> Comparator<T> nullsLow(Comparator<T> comparator) {\n-\t\treturn new NullSafeComparator<>(comparator, false);\n+\t\treturn new NullSafeComparator<>(comparator, true);\n \t}\n \n \t/**",
    "output": "Fix construction of NullSafeComparator in nullsLow Previously, both nullsLow(Comparator<T>) and nullsHigh(Comparator<T>) returned a NullSafeComparator which treated nulls as being high. This commit corrects this typo"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -15,7 +15,6 @@\n  */\n package org.springframework.web.reactive.socket.adapter;\n \n-import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n@@ -98,8 +97,7 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \n \t@Override\n \tpublic Mono<Void> close(CloseStatus status) {\n-\t\tWebSocketFrame closeFrame = new CloseWebSocketFrame(status.getCode(), status.getReason());\n-\t\treturn getDelegate().getOutbound().sendObject(closeFrame).then();\n+\t\treturn getDelegate().getOutbound().sendClose(status.getCode(), status.getReason());\n \t}\n \n ",
    "output": "Use WebsocketOutbound#sendClose Switch to using the sendClose method available since Reactor Netty 0.8 vs explicitly sending a CloseWebSocketFrame. Related to , but does not address the root cause"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java\n@@ -114,7 +114,7 @@ public DataAccessException translate(String task, @Nullable String sql, SQLExcep\n \t * @return the message {@code String} to use\n \t */\n \tprotected String buildMessage(String task, @Nullable String sql, SQLException ex) {\n-\t\treturn task + \"; \" + (sql != null ? \"SQL [\" + sql : \"]; \" + \"\") + ex.getMessage();\n+\t\treturn task + \"; \" + (sql != null ? (\"SQL [\" + sql + \"]; \") : \"\") + ex.getMessage();\n \t}\n \n }",
    "output": "Fix jdbc template error messages generation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n@@ -168,7 +168,7 @@ public void afterPropertiesSet() {\n \t */\n \tpublic void initialize() {\n \t\tif (logger.isInfoEnabled()) {\n-\t\t\tlogger.info(\"Initializing ExecutorService \" + (this.beanName != null ? \" '\" + this.beanName + \"'\" : \"\"));\n+\t\t\tlogger.info(\"Initializing ExecutorService\" + (this.beanName != null ? \" '\" + this.beanName + \"'\" : \"\"));\n \t\t}\n \t\tif (!this.threadNamePrefixSet && this.beanName != null) {\n \t\t\tsetThreadNamePrefix(this.beanName + \"-\");",
    "output": "Remove duplicate blank in log message of ExecutorConfigurationSupport#initialize (obvious fix)"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java\n@@ -381,7 +381,6 @@ public void asyncMethodListener() throws Exception {\n \t\t\t\t\t.atMost(1, TimeUnit.SECONDS)\n \t\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n \t\t\t\t\t.until(() -> listenerCalled == 1);\n-\t\tassertEquals(listenerCalled, 1);\n \t\tcontext.close();\n \t}\n \n@@ -403,7 +402,6 @@ public void asyncClassListener() throws Exception {\n \t\t\t\t\t.atMost(1, TimeUnit.SECONDS)\n \t\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n \t\t\t\t\t.until(() -> listenerCalled == 2);\n-\t\tassertEquals(2, listenerCalled);\n \t\tassertEquals(1, listenerConstructed);\n \t}\n \n@@ -427,7 +425,6 @@ public void asyncPrototypeClassListener() throws Exception {\n \t\t\t\t\t.atMost(1, TimeUnit.SECONDS)\n \t\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n \t\t\t\t\t.until(() -> listenerCalled == 2);\n-\t\tassertEquals(2, listenerCalled);\n \t\tassertEquals(2, listenerConstructed);\n \t}\n ",
    "output": "Remove duplicate assertions in AsyncExecutionTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -29,6 +29,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import kotlin.reflect.KFunction;\n@@ -768,17 +769,21 @@ public static boolean isOptional(MethodParameter param) {\n \t\t\t}\n \t\t\telse {\n \t\t\t\tKFunction<?> function = null;\n+\t\t\t\tPredicate<KParameter> predicate = null;\n \t\t\t\tif (method != null) {\n \t\t\t\t\tfunction = ReflectJvmMapping.getKotlinFunction(method);\n+\t\t\t\t\tpredicate = p -> KParameter.Kind.VALUE.equals(p.getKind());\n \t\t\t\t}\n \t\t\t\telse if (ctor != null) {\n \t\t\t\t\tfunction = ReflectJvmMapping.getKotlinFunction(ctor);\n+\t\t\t\t\tpredicate = p -> KParameter.Kind.VALUE.equals(p.getKind()) ||\n+\t\t\t\t\t\t\tKParameter.Kind.INSTANCE.equals(p.getKind());\n \t\t\t\t}\n \t\t\t\tif (function != null) {\n \t\t\t\t\tList<KParameter> parameters = function.getParameters();\n \t\t\t\t\tKParameter parameter = parameters\n \t\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.filter(p -> KParameter.Kind.VALUE.equals(p.getKind()))\n+\t\t\t\t\t\t\t.filter(predicate)\n \t\t\t\t\t\t\t.collect(Collectors.toList())\n \t\t\t\t\t\t\t.get(index);\n \t\t\t\t\treturn (parameter.getType().isMarkedNullable() || parameter.isOptional());",
    "output": "Fix Kotlin inner class nested configuration handling Before this commit, Kotlin inner class nested configuration handling thrown an IndexOutOfBoundsException due to bogus filtering of its constructor parameter reference to an instance of the outer class. This commit keep constructor parameter of type INSTANCE in order to throw a more meaningful NoSuchBeanDefinitionException. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n@@ -73,13 +73,13 @@ public class DispatcherHandler implements WebHandler, ApplicationContextAware {\n \n \n \t@Nullable\n-\tprivate List<HandlerMapping> handlerMappings;\n+\tprotected List<HandlerMapping> handlerMappings;\n \n \t@Nullable\n-\tprivate List<HandlerAdapter> handlerAdapters;\n+\tprotected List<HandlerAdapter> handlerAdapters;\n \n \t@Nullable\n-\tprivate List<HandlerResultHandler> resultHandlers;\n+\tprotected List<HandlerResultHandler> resultHandlers;\n \n \n \t/**",
    "output": "Make DispacherServlet attributes protected Since the `initStrategies` method is there to be extended, the related attributes should be `protected` as well"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java\n@@ -17,7 +17,6 @@\n package org.springframework.cache.jcache;\n \n import java.util.concurrent.Callable;\n-\n import javax.cache.Cache;\n import javax.cache.processor.EntryProcessor;\n import javax.cache.processor.EntryProcessorException;",
    "output": "Fix Checkstyle violation in JCacheCache"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java b/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java\n@@ -243,7 +243,7 @@ private void handleComment() throws SAXException {\n \n \tprivate void handleDtd() throws SAXException {\n \t\tif (getLexicalHandler() != null) {\n-\t\t\tjavax.xml.stream.Location location = this.reader.getLocation();\n+\t\t\tLocation location = this.reader.getLocation();\n \t\t\tgetLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\n \t\t}\n \t\tif (getLexicalHandler() != null) {",
    "output": "Use an import instead of FQCN javax.xml.stream.Location is already there as an import there is no need to use the FQCN in the handleDtd method"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java\n@@ -363,10 +363,10 @@ public void testSqlUpdateWithArguments() throws Exception {\n \t\tgiven(this.preparedStatement.executeUpdate()).willReturn(rowsAffected);\n \n \t\tint actualRowsAffected = this.template.update(sql,\n-\t\t\t\tnew Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))});\n+\t\t\t\tnew Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, Float.valueOf(1.4142f))});\n \t\tassertTrue(\"Actual rows affected is correct\", actualRowsAffected == rowsAffected);\n \t\tverify(this.preparedStatement).setObject(1, 4);\n-\t\tverify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2);\n+\t\tverify(this.preparedStatement).setObject(2, Float.valueOf(1.4142f), Types.NUMERIC, 2);\n \t\tverify(this.preparedStatement).close();\n \t\tverify(this.connection).close();\n \t}",
    "output": "Use Float.valueOf(float) instead of deprecated Float(double) constructor"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java\n@@ -183,4 +183,9 @@ public boolean equals(Object obj) {\n \t\t\t\t\"to avoid being used in error instead of JsonPathAssertions#isEqualTo(String).\");\n \t}\n \n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn super.hashCode();\n+\t}\n+\n }\n\ndiff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java\n@@ -195,6 +195,11 @@ public boolean equals(Object obj) {\n \t\t\t\t\"to avoid being used in error instead of XPathAssertions#isEqualTo(String).\");\n \t}\n \n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn super.hashCode();\n+\t}\n+\n \n \t/**\n \t * Lets us be able to use lambda expressions that could throw checked exceptions, since",
    "output": "Fix compiler warnings"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -202,7 +202,7 @@ protected void processProperties(ConfigurableListableBeanFactory beanFactory, Pr\n \t * @since 4.0\n \t */\n \tpublic PropertySources getAppliedPropertySources() throws IllegalStateException {\n-\t\tAssert.state(this.appliedPropertySources != null, \"PropertySources have not get been applied\");\n+\t\tAssert.state(this.appliedPropertySources != null, \"PropertySources have not yet been applied\");\n \t\treturn this.appliedPropertySources;\n \t}\n ",
    "output": "Upgrade PropertySourcesPlaceholderConfigurer.java Fix the error message when PropertySources are not applied"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java\n@@ -135,7 +135,7 @@ public void afterPropertiesSet() {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\tlogger.debug(\"Validation query [\" + this.validationQuery + \"] threw exception\", ex);\n \t\t\t\t\t}\n-\t\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\t\t\tfloat rest = ((float) (deadLine - System.currentTimeMillis())) / 1000;\n \t\t\t\t\t\tif (rest > this.interval) {\n \t\t\t\t\t\t\tlogger.info(\"Database has not started up yet - retrying in \" + this.interval +",
    "output": "Fix log level guard in DatabaseStartupValidator.afterPropertiesSet"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java\n@@ -39,6 +39,7 @@\n  * where \"Forwarded\" and \"X-Forwarded-*\" headers are eliminated, and not used.\n  *\n  * @author Arjen Poutsma\n+ * @author Rossen Stoyanchev\n  * @since 5.0\n  * @see <a href=\"https://tools.ietf.org/html/rfc7239\">https://tools.ietf.org/html/rfc7239</a>\n  */\n@@ -71,7 +72,6 @@ public void setRemoveOnly(boolean removeOnly) {\n \n \t@Override\n \tpublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n-\n \t\tServerHttpRequest request = exchange.getRequest();\n \t\tif (!hasForwardedHeaders(request)) {\n \t\t\treturn chain.filter(exchange);\n@@ -117,8 +117,8 @@ private static String getForwardedPrefix(ServerHttpRequest request) {\n \t\t\tint endIndex = prefix.length();\n \t\t\twhile (endIndex > 1 && prefix.charAt(endIndex - 1) == '/') {\n \t\t\t\tendIndex--;\n-\t\t\t};\n-\t\t\tprefix = endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix;\n+\t\t\t}\n+\t\t\tprefix = (endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix);\n \t\t}\n \t\treturn prefix;\n \t}",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -35,7 +35,6 @@\n import org.springframework.util.Assert;\n import org.springframework.web.context.request.RequestAttributes;\n import org.springframework.web.context.request.async.DeferredResult.DeferredResultHandler;\n-import org.springframework.web.server.adapter.WebHttpHandlerBuilder;\n \n /**\n  * The central class for managing asynchronous request processing, mainly intended\n@@ -64,7 +63,7 @@ public final class WebAsyncManager {\n \tprivate static final Object RESULT_NONE = new Object();\n \n \tprivate static final AsyncTaskExecutor DEFAULT_TASK_EXECUTOR =\n-\t\t\tnew SimpleAsyncTaskExecutor(WebHttpHandlerBuilder.class.getSimpleName());\n+\t\t\tnew SimpleAsyncTaskExecutor(WebAsyncManager.class.getSimpleName());\n \n \tprivate static final Log logger = LogFactory.getLog(WebAsyncManager.class);\n ",
    "output": "Fix code completion typo"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java b/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java\n--- a/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java\n+++ b/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java\n@@ -85,10 +85,9 @@ public ConcurrentModel addAttribute(String attributeName, @Nullable Object attri\n \t * the model when using this method because we cannot correctly determine\n \t * the true convention name. View code should check for {@code null} rather\n \t * than for empty collections as is already done by JSTL tags.</i>\n-\t * @param attributeValue the model attribute value (never {@code null} for {@code ConcurrentModel},\n-\t * with the {@code Nullable} declaration inherited from {@link Model#addAttribute(String, Object)})\n+\t * @param attributeValue the model attribute value (never {@code null})\n \t */\n-\tpublic ConcurrentModel addAttribute(@Nullable Object attributeValue) {\n+\tpublic ConcurrentModel addAttribute(Object attributeValue) {\n \t\tAssert.notNull(attributeValue, \"Model attribute value must not be null\");\n \t\tif (attributeValue instanceof Collection && ((Collection<?>) attributeValue).isEmpty()) {\n \t\t\treturn this;",
    "output": "Fix accidental @Nullable declaration on addAttribute(Object) Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -62,14 +62,12 @@ public static boolean canConvertElements(@Nullable TypeDescriptor sourceElementT\n \t\t\t// yes\n \t\t\treturn true;\n \t\t}\n-\t\telse if (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {\n+\t\tif (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {\n \t\t\t// maybe\n \t\t\treturn true;\n \t\t}\n-\t\telse {\n-\t\t\t// no\n-\t\t\treturn false;\n-\t\t}\n+\t\t// no\n+\t\treturn false;\n \t}\n \n \tpublic static Class<?> getEnumType(Class<?> targetType) {",
    "output": "Remove unneeded conditional logic Update `ConversionUtils` to remove conditional logic that isn't necessary. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n@@ -396,6 +396,10 @@ public void accept(Visitor visitor) {\n \t\t\tthis.routerFunction.accept(visitor);\n \t\t}\n \n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn this.routerFunction.toString();\n+\t\t}\n \t}\n \n \tprivate static final class DefaultRouterFunction<T extends ServerResponse>",
    "output": "Improve toString for filtered router function Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -265,7 +265,7 @@ else if (isTwoCharToken(TokenKind.SAFE_NAVI)) {\n \t\t\t\t\t\traiseParseException(this.pos, SpelMessage.UNEXPECTED_ESCAPE_CHAR);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n-\t\t\t\t\t\tthrow new IllegalStateException(\"Cannot handle (\" + Integer.valueOf(ch) + \") '\" + ch + \"'\");\n+\t\t\t\t\t\tthrow new IllegalStateException(\"Cannot handle ('\" + ch + \"')\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Remove unnecessary boxing"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -209,14 +209,18 @@ public static String trimWhitespace(String str) {\n \t\t\treturn str;\n \t\t}\n \n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {\n-\t\t\tsb.deleteCharAt(0);\n+\t\tint beginIndex = 0;\n+\t\tint endIndex = str.length() - 1;\n+\n+\t\twhile (beginIndex <= endIndex && Character.isWhitespace(str.charAt(beginIndex))) {\n+\t\t\tbeginIndex++;\n \t\t}\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n-\t\t\tsb.deleteCharAt(sb.length() - 1);\n+\n+\t\twhile (endIndex > beginIndex && Character.isWhitespace(str.charAt(endIndex))) {\n+\t\t\tendIndex--;\n \t\t}\n-\t\treturn sb.toString();\n+\n+\t\treturn str.substring(beginIndex, endIndex + 1);\n \t}\n \n \t/**",
    "output": "Improve performance of StringUtils#trimWhitespace Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -143,7 +143,11 @@ protected void registerEndpoints() {\n \n \tprivate void registerEndpoint(Class<?> endpointClass) {\n \t\tServerContainer serverContainer = getServerContainer();\n-\t\tAssert.state(serverContainer != null, \"No ServerContainer set\");\n+\t\tAssert.state(serverContainer != null,\n+\t\t\t\t\"No ServerContainer set. Most likely the server's own WebSocket ServletContainerInitializer \" +\n+\t\t\t\t\t\t\"has not run yet. Was the Spring ApplicationContext refreshed through a \" +\n+\t\t\t\t\t\t\"org.springframework.web.context.ContextLoaderListener, \" +\n+\t\t\t\t\t\t\"i.e. after the ServletContext has been fully initialized?\");\n \t\ttry {\n \t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(\"Registering @ServerEndpoint class: \" + endpointClass);",
    "output": "Add more detail to ISE in ServerEndpointExporter Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java\n@@ -21,6 +21,7 @@\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+import java.util.function.BiConsumer;\n \n /**\n  * Adapts a {@link CompletableFuture} or {@link CompletionStage} into a\n@@ -50,14 +51,13 @@ public CompletableToListenableFutureAdapter(CompletionStage<T> completionStage)\n \t */\n \tpublic CompletableToListenableFutureAdapter(CompletableFuture<T> completableFuture) {\n \t\tthis.completableFuture = completableFuture;\n-\t\tthis.completableFuture.handle((result, ex) -> {\n+\t\tthis.completableFuture.whenComplete((result, ex) -> {\n \t\t\tif (ex != null) {\n \t\t\t\tcallbacks.failure(ex);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tcallbacks.success(result);\n \t\t\t}\n-\t\t\treturn null;\n \t\t});\n \t}\n ",
    "output": "Use whenComplete since (null) return value not needed"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java\n@@ -91,13 +91,13 @@ public Object getTarget() {\n \t\t\t\tif (target == null) {\n \t\t\t\t\tClass<?> type = getTargetClass();\n \t\t\t\t\tif (Map.class == type) {\n-\t\t\t\t\t\treturn Collections.EMPTY_MAP;\n+\t\t\t\t\t\treturn Collections.emptyMap();\n \t\t\t\t\t}\n \t\t\t\t\telse if (List.class == type) {\n-\t\t\t\t\t\treturn Collections.EMPTY_LIST;\n+\t\t\t\t\t\treturn Collections.emptyList();\n \t\t\t\t\t}\n \t\t\t\t\telse if (Set.class == type || Collection.class == type) {\n-\t\t\t\t\t\treturn Collections.EMPTY_SET;\n+\t\t\t\t\t\treturn Collections.emptySet();\n \t\t\t\t\t}\n \t\t\t\t\tthrow new NoSuchBeanDefinitionException(descriptor.getResolvableType(),\n \t\t\t\t\t\t\t\"Optional dependency not present for lazy injection point\");",
    "output": "use more modern java API for empty collections"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n@@ -32,7 +32,6 @@\n import org.springframework.web.util.UriComponentsBuilder;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertNotNull;\n import static org.springframework.test.util.AssertionErrors.assertEquals;\n import static org.springframework.test.util.AssertionErrors.assertTrue;\n \n@@ -148,7 +147,7 @@ private static void assertValueCount(String valueType, final String name,\n \t\tList<String> values = map.get(name);\n \n \t\tString message = \"Expected \" + valueType + \" <\" + name + \">\";\n-\t\tassertNotNull(message, values);\n+\t\tAssert.notNull(values, message);\n \n \t\tassertTrue(message + \" to have at least <\" + count + \"> values but found \" + values,\n \t\t\t\tcount <= values.size());",
    "output": "Make MockRestRequestMatchers independent of JUnit MockRestRequestMatchers was using org.junit.Assert.assertNotNull and thus could not be used in projects that use e.g. TestNG instead of JUnit 4"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java\n@@ -111,7 +111,7 @@ public void entityStream() {\n \t\t\t\t.accept(TEXT_EVENT_STREAM)\n \t\t\t\t.exchange()\n \t\t\t\t.expectStatus().isOk()\n-\t\t\t\t.expectHeader().contentType(TEXT_EVENT_STREAM)\n+\t\t\t\t.expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)\n \t\t\t\t.returnResult(Person.class);\n \n \t\tStepVerifier.create(result.getResponseBody())",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n@@ -56,6 +56,11 @@\n  */\n class ServletServerHttpRequest extends AbstractServerHttpRequest {\n \n+\tprivate static final String X509_CERTIFICATE_ATTRIBUTE = \"javax.servlet.request.X509Certificate\";\n+\n+\tprivate static final String SSL_SESSION_ID_ATTRIBUTE = \"javax.servlet.request.ssl_session_id\";\n+\n+\n \tprotected final Log logger = LogFactory.getLog(getClass());\n \n \n@@ -178,8 +183,8 @@ protected SslInfo initSslInfo() {\n \t\t\treturn null;\n \t\t}\n \t\treturn new DefaultSslInfo(\n-\t\t\t\t(String) request.getAttribute(\"javax.servlet.request.ssl_session_id\"),\n-\t\t\t\t(X509Certificate[]) request.getAttribute(\"java.security.cert.X509Certificate\"));\n+\t\t\t\t(String) request.getAttribute(SSL_SESSION_ID_ATTRIBUTE),\n+\t\t\t\t(X509Certificate[]) request.getAttribute(X509_CERTIFICATE_ATTRIBUTE));\n \t}\n \n \t@Override",
    "output": "Use correct X509 certificate attribute name Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java\n@@ -17,6 +17,7 @@\n package org.springframework.http.codec.json;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n import java.util.List;\n \n import com.fasterxml.jackson.databind.ObjectMapper;",
    "output": "Fix compiler error"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -579,9 +579,10 @@ private Schema loadSchema(Resource[] resources, String schemaLanguage) throws IO\n \t\tXMLReader xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader();\n \t\txmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\n \t\tfor (int i = 0; i < resources.length; i++) {\n-\t\t\tAssert.notNull(resources[i], \"Resource is null\");\n-\t\t\tAssert.isTrue(resources[i].exists(), () -> \"Resource \" + resources[i] + \" does not exist\");\n-\t\t\tInputSource inputSource = SaxResourceUtils.createInputSource(resources[i]);\n+\t\t\tResource currentResource = resources[i];\n+\t\t\tAssert.notNull(currentResource, \"Resource is null\");\n+\t\t\tAssert.isTrue(currentResource.exists(), () -> \"Resource \" + currentResource + \" does not exist\");\n+\t\t\tInputSource inputSource = SaxResourceUtils.createInputSource(currentResource);\n \t\t\tschemaSources[i] = new SAXSource(xmlReader, inputSource);\n \t\t}\n \t\tSchemaFactory schemaFactory = SchemaFactory.newInstance(schemaLanguage);",
    "output": "Use effectively final local variable in lambda expression"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n@@ -77,8 +77,8 @@ public void tearDown() throws Exception {\n \n \n \t/**\n-\t * Return an interval stream of with n number of ticks and buffer the\n-\t * emissions to avoid back pressure failures (e.g. on slow CI server).\n+\t * Return an interval stream of N number of ticks and buffer the emissions\n+\t * to avoid back pressure failures (e.g. on slow CI server).\n \t *\n \t * <p>Use this method as follows:\n \t * <ul>\n@@ -89,7 +89,7 @@ public void tearDown() throws Exception {\n \t * </ul>\n \t */\n \tpublic static Flux<Long> interval(Duration period, int count) {\n-\t\treturn Flux.interval(period).take(count).onBackpressureBuffer(2);\n+\t\treturn Flux.interval(period).take(count).onBackpressureBuffer(count);\n \t}\n \n }",
    "output": "Fix copy+paste error"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java\n@@ -87,4 +87,9 @@ public void setReadListener(ReadListener readListener) {\n \t\tthrow new UnsupportedOperationException();\n \t}\n \n+\t@Override\n+\tpublic int available() throws IOException {\n+\t\treturn this.sourceStream.available();\n+\t}\n+\n }",
    "output": "Fix `DelegatingServletInputStream#available` Ensure that the method returns the correct number of bytes that can be read without blocking Issue: #"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n@@ -116,7 +116,7 @@ public URI getURI() {\n \t\t\t\tthis.uri = new URI(urlString);\n \t\t\t}\n \t\t\tcatch (URISyntaxException ex) {\n-\t\t\t\tif (true || !hasQuery) {\n+\t\t\t\tif (!hasQuery) {\n \t\t\t\t\tthrow new IllegalStateException(\"Could not resolve HttpServletRequest as URI: \" + urlString, ex);\n \t\t\t\t}\n \t\t\t\t// Maybe a malformed query string... try plain request URL",
    "output": "Fix test failure"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n@@ -327,20 +327,19 @@ protected String createMessage(HttpServletRequest request, String prefix, String\n \tprotected String getMessagePayload(HttpServletRequest request) {\n \t\tContentCachingRequestWrapper wrapper =\n \t\t\t\tWebUtils.getNativeRequest(request, ContentCachingRequestWrapper.class);\n-\t\tString payload = null;\n \t\tif (wrapper != null) {\n \t\t\tbyte[] buf = wrapper.getContentAsByteArray();\n \t\t\tif (buf.length > 0) {\n \t\t\t\tint length = Math.min(buf.length, getMaxPayloadLength());\n \t\t\t\ttry {\n-\t\t\t\t\tpayload = new String(buf, 0, length, wrapper.getCharacterEncoding());\n+\t\t\t\t\treturn new String(buf, 0, length, wrapper.getCharacterEncoding());\n \t\t\t\t}\n \t\t\t\tcatch (UnsupportedEncodingException ex) {\n-\t\t\t\t\tpayload = \"[unknown]\";\n+\t\t\t\t\treturn \"[unknown]\";\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\treturn payload;\n+\t\treturn null;\n \t}\n \n ",
    "output": "Remove an unnecessary intermediate variable"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n@@ -73,7 +73,7 @@ public URI getURI() {\n \tprotected OutputStream getBodyInternal(HttpHeaders headers) throws IOException {\n \t\tif (this.body == null) {\n \t\t\tif (this.outputStreaming) {\n-\t\t\t\tint contentLength = (int) headers.getContentLength();\n+\t\t\t\tlong contentLength = headers.getContentLength();\n \t\t\t\tif (contentLength >= 0) {\n \t\t\t\t\tthis.connection.setFixedLengthStreamingMode(contentLength);\n \t\t\t\t}",
    "output": "Remove unnecessary cast to int Since Java7 HttpURLConnection offers setFixedLengthStreamingMode method with long parameter which should be prefered over version with int argument, therefore casting ContentLength to int is no longer needed. Moreover it makes impossible to stream payload larger than Integer.MAX_VALUE"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java\n@@ -272,13 +272,10 @@ private <T> Flux<DataBuffer> encodePart(byte[] boundary, String name, T value) {\n \t\tMono<Void> partWritten = ((HttpMessageWriter<T>) writer.get())\n \t\t\t\t.write(bodyPublisher, resolvableType, contentType, outputMessage, Collections.emptyMap());\n \n-\t\t// partWritten.subscribe() is required in order to make sure MultipartHttpOutputMessage#getBody()\n-\t\t// returns a non-null value (occurs with ResourceHttpMessageWriter that invokes\n-\t\t// ReactiveHttpOutputMessage.writeWith() only when at least one element has been requested).\n-\t\tpartWritten.subscribe();\n-\n \t\treturn Flux.concat(\n-\t\t\t\tMono.just(generateBoundaryLine(boundary)), outputMessage.getBody(), Mono.just(generateNewLine()));\n+\t\t\t\tMono.just(generateBoundaryLine(boundary)),\n+\t\t\t\tpartWritten.thenMany(Flux.defer(outputMessage::getBody)),\n+\t\t\t\tMono.just(generateNewLine()));\n \t}\n \n ",
    "output": "Remove explicit subscribe in MultipartHttpMessageWriter Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java\n@@ -34,8 +34,7 @@\n  * which has default methods, made possible by a Java 8 baseline.\n  */\n @Deprecated\n-public abstract class /*AbstractWebSocketMessageBrokerConfigurer*/ implements WebSocketMessageBrokerConfigurer {\n-\n+public abstract class AbstractWebSocketMessageBrokerConfigurer implements WebSocketMessageBrokerConfigurer {\n \n \t@Override\n \tpublic void configureWebSocketTransport(WebSocketTransportRegistration registration) {",
    "output": "Fix compile error"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -444,7 +444,7 @@ protected void processScheduled(Scheduled scheduled, Method method, Object bean)\n \t\t\t\t\t}\n \t\t\t\t\tcatch (NumberFormatException ex) {\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Invalid fixedRateString value \\\"\" + fixedRateString + \"\\\" - cannot parse into integer\");\n+\t\t\t\t\t\t\t\t\"Invalid fixedRateString value \\\"\" + fixedRateString + \"\\\" - cannot parse into long\");\n \t\t\t\t\t}\n \t\t\t\t\ttasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));\n \t\t\t\t}",
    "output": "Fix an exception message in ScheduledAnnotationBeanPostProcessor"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -347,7 +347,8 @@ else if (candidates.size() == 1 && logger.isWarnEnabled()) {\n \t\t\t\t\telse if (rawCandidates.length == 1 && rawCandidates[0].getParameterCount() > 0) {\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {rawCandidates[0]};\n \t\t\t\t\t}\n-\t\t\t\t\telse if (nonSyntheticConstructors == 2 && primaryConstructor != null && defaultConstructor != null) {\n+\t\t\t\t\telse if (nonSyntheticConstructors == 2 && primaryConstructor != null\n+\t\t\t\t\t\t\t&& defaultConstructor != null && !primaryConstructor.equals(defaultConstructor)) {\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {primaryConstructor, defaultConstructor};\n \t\t\t\t\t}\n \t\t\t\t\telse if (nonSyntheticConstructors == 1 && primaryConstructor != null) {",
    "output": "Fix Kotlin bean w/ default + secondary ctors handling This commit polishes fix in order to handle correctly the case when primary and default constructors are the same when a secondary constructor is defined. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -70,9 +70,10 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \t@Override\n \tpublic Mono<Void> close(CloseStatus status) {\n \t\treturn Mono.error(new UnsupportedOperationException(\n-\t\t\t\t\"Currently in Reactor Netty applications are expected to use the \" +\n-\t\t\t\t\t\t\"Cancellation returned from subscribing to the \\\"receive\\\"-side Flux \" +\n-\t\t\t\t\t\t\"in order to close the WebSocket session.\"));\n+\t\t\t\t\"Reactor Netty does not support closing the session from anywhere. \" +\n+\t\t\t\t\t\t\"You will need to work with the Flux returned from receive() method, \" +\n+\t\t\t\t\t\t\"either subscribing to it and using the returned Disposable, \" +\n+\t\t\t\t\t\t\"or using an operator that cancels (e.g. take).\"));\n \t}\n \n ",
    "output": "Improve error message Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java\n@@ -77,10 +77,6 @@ public void errorBeforeFirstItem() throws Exception {\n \n \t@Test // SPR-16051\n \tpublic void exceptionAfterSeveralItems() throws Exception {\n-\n-\t\t// TODO: uncomment and try after https://github.com/reactor/reactor-netty/issues/231\n-\t\tAssume.assumeFalse(server instanceof ReactorHttpServer);\n-\n \t\ttry {\n \t\t\tperformGet(\"/SPR-16051\", new HttpHeaders(), String.class).getBody();\n \t\t\tfail();",
    "output": "Upgrade to Reactor Bismuth snapshots This allows us to confirm 0.7.3 fixes and run tests against the latest ahead of an upgrade to Reactor Netty 0.8 snapshots. The fix for and are confirmed but unfortunately test case for"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n@@ -197,7 +197,7 @@ public StompCommand updateStompCommandAsClientMessage() {\n \t\t}\n \t\tStompCommand command = getCommand();\n \t\tif (command == null) {\n-\t\t\tcommand = StompCommand.SEND\n+\t\t\tcommand = StompCommand.SEND;\n \t\t\tsetHeader(COMMAND_HEADER, command);\n \t\t}\n \t\telse if (!command.equals(StompCommand.SEND)) {",
    "output": "Fix compile issue from previous commit"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n@@ -197,7 +197,8 @@ public StompCommand updateStompCommandAsClientMessage() {\n \t\t}\n \t\tStompCommand command = getCommand();\n \t\tif (command == null) {\n-\t\t\tsetHeader(COMMAND_HEADER, StompCommand.SEND);\n+\t\t\tcommand = StompCommand.SEND\n+\t\t\tsetHeader(COMMAND_HEADER, command);\n \t\t}\n \t\telse if (!command.equals(StompCommand.SEND)) {\n \t\t\tthrow new IllegalStateException(\"Unexpected STOMP command \" + command);",
    "output": "Fix Stomp Broker Relay ignoring destination prefixes in some cases Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -365,7 +365,7 @@ protected void processScheduled(Scheduled scheduled, Method method, Object bean)\n \t\t\t\t\t}\n \t\t\t\t\tcatch (NumberFormatException ex) {\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Invalid initialDelayString value \\\"\" + initialDelayString + \"\\\" - cannot parse into integer\");\n+\t\t\t\t\t\t\t\t\"Invalid initialDelayString value \\\"\" + initialDelayString + \"\\\" - cannot parse into long\");\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix exception message initialDelayString is parsed into long, not integer"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java\n--- a/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java\n@@ -46,7 +46,6 @@ public class InMemoryWebSessionStore implements WebSessionStore {\n \t/** Minimum period between expiration checks */\n \tprivate static final Duration EXPIRATION_CHECK_PERIOD = Duration.ofSeconds(60);\n \n-\n \tprivate static final IdGenerator idGenerator = new JdkIdGenerator();\n \n \n@@ -210,11 +209,7 @@ public boolean isStarted() {\n \t\t@Override\n \t\tpublic Mono<Void> changeSessionId() {\n \t\t\tString currentId = this.id.get();\n-\t\t\tif (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {\n-\t\t\t\treturn Mono.error(new IllegalStateException(\n-\t\t\t\t\t\t\"Failed to change session id: \" + currentId +\n-\t\t\t\t\t\t\t\t\" because the Session is no longer present in the store.\"));\n-\t\t\t}\n+\t\t\tInMemoryWebSessionStore.this.sessions.remove(currentId);\n \t\t\tString newId = String.valueOf(idGenerator.generateId());\n \t\t\tthis.id.set(newId);\n \t\t\tInMemoryWebSessionStore.this.sessions.put(this.getId(), this);",
    "output": "Remove unnecessary assertion Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n@@ -171,7 +171,9 @@ public WebSocketHandlerAdapter handlerAdapter() {\n \n \t\t@Bean\n \t\tpublic WebSocketService webSocketService() {\n-\t\t\treturn new HandshakeWebSocketService(getUpgradeStrategy());\n+\t\t\tTomcatRequestUpgradeStrategy strategy = new TomcatRequestUpgradeStrategy();\n+\t\t\tstrategy.setMaxSessionIdleTimeout(0L);\n+\t\t\treturn new HandshakeWebSocketService(strategy);\n \t\t}\n \n \t\tprotected abstract RequestUpgradeStrategy getUpgradeStrategy();",
    "output": "Add WebSocket chapter to WebFlux section Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -71,6 +71,7 @@ public String[] decodeInputStream(InputStream content) throws IOException {\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tprotected char[] applyJsonQuoting(String content) {\n \t\treturn JsonStringEncoder.getInstance().quoteAsString(content);\n \t}",
    "output": "Upgrade to Jackson 2.9.2"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n@@ -693,7 +693,7 @@ private class ReadInactivityTask implements Runnable {\n \t\t@Override\n \t\tpublic void run() {\n \t\t\tclosing = true;\n-\t\t\tString error = \"Server has gone quite. Closing connection in session id=\" + sessionId + \".\";\n+\t\t\tString error = \"Server has gone quiet. Closing connection in session id=\" + sessionId + \".\";\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(error);\n \t\t\t}",
    "output": "Fix typo in exception message: quite -> quiet"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -367,7 +367,9 @@ else if (rawCandidates.length == 1 && rawCandidates[0].getParameterCount() > 0)\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {rawCandidates[0]};\n \t\t\t\t\t}\n \t\t\t\t\telse if (kotlinPrimaryConstructor != null) {\n-\t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {kotlinPrimaryConstructor};\n+\t\t\t\t\t\tcandidateConstructors = (defaultConstructor != null ?\n+\t\t\t\t\t\t\t\tnew Constructor<?>[] {kotlinPrimaryConstructor, defaultConstructor} :\n+\t\t\t\t\t\t\t\tnew Constructor<?>[] {kotlinPrimaryConstructor});\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[0];",
    "output": "Improve support of Kotlin beans w/ primary and default ctors This commit add the default constructor if available as fallback after to the primary constructor. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n@@ -139,6 +139,9 @@ public void accept(FluxSink<Part> emitter) {\n \t\t\t\tcatch (IOException ex) {\n \t\t\t\t\tlistener.onError(\"Exception thrown providing input to the parser\", ex);\n \t\t\t\t}\n+\t\t\t\tfinally {\n+\t\t\t\t\tDataBufferUtils.release(buffer);\n+\t\t\t\t}\n \t\t\t}, (ex) -> {\n \t\t\t\ttry {\n \t\t\t\t\tlistener.onError(\"Request body input error\", ex);",
    "output": "Fix memory leak in reactive multipart parser"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -422,7 +422,7 @@ public <T> Mono<T> bodyToMono(Class<T> bodyType) {\n \t\tpublic <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference) {\n \t\t\treturn this.responseMono.flatMap(\n \t\t\t\t\tresponse -> bodyToMono(response, BodyExtractors.toMono(typeReference),\n-\t\t\t\t\t\t\tmono -> (Mono<T>)mono));\n+\t\t\t\t\t\t\tthis::monoThrowableToMono));\n \t\t}\n \n \t\tprivate <T> Mono<T> monoThrowableToMono(Mono<? extends Throwable> mono) {",
    "output": "Fix error responses handling in WebClient This commit fixes a typo in the `DefaultWebClient` implementation. Instead of forwarding resolved `WebClientException` instances as error signals, the `bodyToMono(ParameterizedTypeReference)` variant would just forward those exceptions as `onNext` signals. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -430,7 +430,7 @@ public void setDeferredResultInterceptors(List<DeferredResultProcessingIntercept\n \t */\n \tpublic void setReactiveRegistry(ReactiveAdapterRegistry reactiveRegistry) {\n \t\tAssert.notNull(reactiveRegistry, \"ReactiveAdapterRegistry is required\");\n-\t\tthis.reactiveRegistry = this.reactiveRegistry;\n+\t\tthis.reactiveRegistry = reactiveRegistry;\n \t}\n \n \t/**",
    "output": "Fix broken RequestMappingHandlerAdapter setter RequestMappingHandlerAdapter.setReactiveRegistrydoesn't actually set the value appropriately. FYI: I found this using lgtm.com https://lgtm.com/projects/g/spring-projects/spring-framework/alerts/?mode=list"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -38,12 +38,6 @@\n  */\n public class ReactorClientHttpConnector implements ClientHttpConnector {\n \n-\tprivate static final Mono<ClientHttpResponse> NO_CLIENT_RESPONSE_ERROR = Mono.error(\n-\t\t\tnew IllegalStateException(\"HttpClient completed without a response. \" +\n-\t\t\t\t\t\"As a temporary workaround try to disable connection pool. \" +\n-\t\t\t\t\t\"See https://github.com/reactor/reactor-netty/issues/138.\"));\n-\n-\n \tprivate final HttpClient httpClient;\n \n \n@@ -78,8 +72,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\t\t.request(adaptHttpMethod(method),\n \t\t\t\t\t\turi.toString(),\n \t\t\t\t\t\trequest -> requestCallback.apply(adaptRequest(method, uri, request)))\n-\t\t\t\t.map(this::adaptResponse)\n-\t\t\t\t.switchIfEmpty(NO_CLIENT_RESPONSE_ERROR);\n+\t\t\t\t.map(this::adaptResponse);\n \t}\n \n \tprivate io.netty.handler.codec.http.HttpMethod adaptHttpMethod(HttpMethod method) {",
    "output": "Remove temporary workaround for reactor-netty client Now that https://github.com/reactor/reactor-netty/issues/138 is solved, this commit removes the temporary workaround introduced in but leaves the general mechanism for detecting empty responses"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n@@ -101,7 +101,8 @@ protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParame\n \t\t}\n \t\telse {\n \t\t\tpublisher = Mono.justOrEmpty(body);\n-\t\t\telementType = (bodyClass == null && body != null ? ResolvableType.forInstance(body) : bodyType);\n+\t\t\telementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?\n+\t\t\t\t\tResolvableType.forInstance(body) : bodyType);\n \t\t}\n \n \t\tif (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {",
    "output": "Improve check for actual return value type Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -734,12 +734,11 @@ public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {\n \t\t * Instantiate a Kotlin class using the provided constructor.\n \t\t * @param ctor the constructor of the Kotlin class to instantiate\n \t\t * @param args the constructor arguments to apply (use null for unspecified parameter if needed)\n-\t\t * @throws BeanInstantiationException if no primary constructor can be found\n \t\t */\n-\t\tpublic static <T> T instantiateClass(Constructor<T> ctor, Object... args) {\n+\t\tpublic static <T> T instantiateClass(Constructor<T> ctor, Object... args) throws IllegalAccessException, InvocationTargetException, InstantiationException {\n \t\t\tKFunction<T> kotlinConstructor = ReflectJvmMapping.getKotlinFunction(ctor);\n \t\t\tif (kotlinConstructor == null) {\n-\t\t\t\tthrow new BeanInstantiationException(ctor.getDeclaringClass(), \"No corresponding Kotlin constructor found\");\n+\t\t\t\treturn ctor.newInstance(args);\n \t\t\t}\n \t\t\tList<KParameter> parameters = kotlinConstructor.getParameters();\n \t\t\tMap<KParameter, Object> argParameters = new HashMap<>(parameters.size());",
    "output": "Fix BeanUtils#instantiateClass w/ Kotlin + noarg constructor Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n@@ -39,7 +39,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-@Ignore  // for JDK 9 compatibility\n+@Ignore  // for JDK 9 compatibility, see KT-18833\n public class KotlinScriptTemplateTests {\n \n \t@Test\n\ndiff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n@@ -42,7 +42,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-@Ignore  // for JDK 9 compatibility\n+@Ignore  // for JDK 9 compatibility, see KT-18833\n public class KotlinScriptTemplateTests {\n \n \tprivate WebApplicationContext webAppContext;",
    "output": "Add a reference to in JDK 9 ignored tests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n@@ -173,6 +173,17 @@ public void sequentialRequestsWithDifferentCount() throws Exception {\n \t\tthis.manager.validateRequest(createRequest(GET, \"/bar\"));\n \t}\n \n+\t@Test  // SPR-15719\n+\tpublic void repeatedRequestsInSequentialOrder() throws Exception {\n+\t\tthis.manager.expectRequest(times(2), requestTo(\"/foo\")).andExpect(method(GET)).andRespond(withSuccess());\n+\t\tthis.manager.expectRequest(times(2), requestTo(\"/bar\")).andExpect(method(GET)).andRespond(withSuccess());\n+\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/foo\"));\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/foo\"));\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/bar\"));\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/bar\"));\n+\t}\n+\n \n \tprivate ClientHttpRequest createRequest(HttpMethod method, String url) {\n \t\ttry {",
    "output": "Add test case for"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java\n@@ -130,7 +130,7 @@ public String getDestination() {\n \t\treturn (String) getHeader(DESTINATION_HEADER);\n \t}\n \n-\tpublic void setSubscriptionId(String subscriptionId) {\n+\tpublic void setSubscriptionId(@Nullable String subscriptionId) {\n \t\tsetHeader(SUBSCRIPTION_ID_HEADER, subscriptionId);\n \t}\n \n@@ -139,7 +139,7 @@ public String getSubscriptionId() {\n \t\treturn (String) getHeader(SUBSCRIPTION_ID_HEADER);\n \t}\n \n-\tpublic void setSessionId(String sessionId) {\n+\tpublic void setSessionId(@Nullable String sessionId) {\n \t\tsetHeader(SESSION_ID_HEADER, sessionId);\n \t}\n ",
    "output": "Upgrade to Kotlin 1.1.4-Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -588,7 +588,7 @@ private static String prefixWithSlash(String path) {\n \n \t\t\tprivate static List<Element> prependWithSeparator(List<Element> elements) {\n \t\t\t\tList<Element> result = new ArrayList<>(elements);\n-\t\t\t\tif (!(result.get(0) instanceof Separator)) {\n+\t\t\t\tif (result.isEmpty() || !(result.get(0) instanceof Separator)) {\n \t\t\t\t\tresult.add(0, SEPARATOR);\n \t\t\t\t}\n \t\t\t\treturn Collections.unmodifiableList(result);",
    "output": "Fix an eventual IndexOutOfBoundsException in RequestPredicates"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -62,10 +62,10 @@ public ChannelSendOperator(Publisher<? extends T> source, Function<Publisher<T>,\n \t@Nullable\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic Object scanUnsafe(Attr key) {\n-\t\tif (key == IntAttr.PREFETCH) {\n+\t\tif (key == Attr.PREFETCH) {\n \t\t\treturn Integer.MAX_VALUE;\n \t\t}\n-\t\tif (key == ScannableAttr.PARENT) {\n+\t\tif (key == Attr.PARENT) {\n \t\t\treturn this.source;\n \t\t}\n \t\treturn null;",
    "output": "Upgrade for reactor-core change"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n@@ -458,10 +458,9 @@ protected Object createProxy(Class<?> beanClass, @Nullable String beanName,\n \t\t}\n \n \t\tAdvisor[] advisors = buildAdvisors(beanName, specificInterceptors);\n-\t\tfor (Advisor advisor : advisors) {\n-\t\t\tproxyFactory.addAdvisor(advisor);\n-\t\t}\n-\n+\t\t\n+\t\tproxyFactory.addAdvisors(advisors);\n+\t\t\n \t\tproxyFactory.setTargetSource(targetSource);\n \t\tcustomizeProxyFactory(proxyFactory);\n ",
    "output": "Use dedicated addAdvisors"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n@@ -173,18 +173,6 @@ public void decodeEmptyBodyToMono() throws Exception {\n \t\t\t\t.verifyComplete();\n \t}\n \n-\t@Test\n-\t@Ignore\n-\tpublic void decodeEmptyArrayToMono() throws Exception {\n-\t\tFlux<DataBuffer> source = Flux.just(stringBuffer(\"[]\"));\n-\t\tResolvableType elementType = forClass(Pojo.class);\n-\t\tMono<Object> mono = new Jackson2JsonDecoder().decodeToMono(source, elementType, null, emptyMap());\n-\n-\t\tStepVerifier.create(mono)\n-\t\t\t\t.expectNextCount(0)\n-\t\t\t\t.verifyComplete();\n-\t}\n-\n \t@Test\n \tpublic void invalidData() throws Exception {\n \t\tFlux<DataBuffer> source = Flux.just(stringBuffer( \"{\\\"foofoo\\\": \\\"foofoo\\\", \\\"barbar\\\": \\\"barbar\\\"}\"));",
    "output": "Remove faulty test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -229,9 +229,9 @@ public void request(long n) {\n \t\t\t\t\tif (n == 0) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\ts.request(n);\n \t\t\t\t}\n \t\t\t}\n-\t\t\ts.request(n);\n \t\t}\n \n \t\tprivate boolean emitCachedSignals() {",
    "output": "Fix recently intorduced bug in ChannelSendOperator WriteBarrier acts as Subscription to both completionSubscriber and writeSubscriber so the request method needs to be careful not to pass on the request outside of readyToWrite or writeSubscriber checks"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n@@ -22,7 +22,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicReference;\n-import java.util.logging.Level;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -33,16 +32,15 @@\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.MonoProcessor;\n import reactor.core.publisher.ReplayProcessor;\n-import reactor.core.publisher.SignalType;\n-import sun.util.logging.PlatformLogger;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.HttpHeaders;\n import org.springframework.web.reactive.HandlerMapping;\n import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n \n /**\n  * Integration tests with server-side {@link WebSocketHandler}s.",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n--- a/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n@@ -17,6 +17,7 @@\n \n import java.time.Clock;\n import java.time.Instant;\n+import java.time.ZoneId;\n import java.util.List;\n import java.util.UUID;\n \n@@ -41,7 +42,7 @@ public class DefaultWebSessionManager implements WebSessionManager {\n \n \tprivate WebSessionStore sessionStore = new InMemoryWebSessionStore();\n \n-\tprivate Clock clock = Clock.systemDefaultZone();\n+\tprivate Clock clock = Clock.system(ZoneId.of(\"GMT\"));\n \n \n \t/**\n@@ -82,7 +83,7 @@ public WebSessionStore getSessionStore() {\n \t * Configure the {@link Clock} for access to current time. During tests you\n \t * may use {code Clock.offset(clock, Duration.ofMinutes(-31))} to set the\n \t * clock back for example to test changes after sessions expire.\n-\t * <p>By default {@link Clock#systemDefaultZone()} is used.\n+\t * <p>By default {@code Clock.system(ZoneId.of(\"GMT\"))} is used.\n \t * @param clock the clock to use\n \t */\n \tpublic void setClock(Clock clock) {",
    "output": "Use fixed GMT time-zone for WebSession Clock Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n@@ -146,7 +146,7 @@ public WebTestClient build() {\n \t\t\t\tnew HttpHandlerConnector(this.httpHandlerBuilder.build()));\n \n \t\tDefaultWebTestClientBuilder webTestClientBuilder = new DefaultWebTestClientBuilder(\n-\t\t\t\tthis.webClientBuilder.build().mutate(), this.httpHandlerBuilder,\n+\t\t\t\tthis.webClientBuilder.cloneBuilder(), this.httpHandlerBuilder,\n \t\t\t\tthis.connector, this.responseTimeout);\n \n \t\treturn new DefaultWebTestClient(this.webClientBuilder,",
    "output": "Fix test failure by using the new cloneBuilder method The cloneBuilder helps to avoid the issue in the comment of the ticket. Rather than creating the WebClient to then obtain a fresh builder which causes connector instantiation, we now use the cloneBuilder Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n@@ -92,6 +92,11 @@ public WebClient.Builder baseUrl(String baseUrl) {\n \t\treturn this;\n \t}\n \n+\t@Override\n+\tpublic WebClient.Builder cloneBuilder() {\n+\t\treturn new DefaultWebClientBuilder(this);\n+\t}\n+\n \t@Override\n \tpublic WebClient.Builder defaultUriVariables(Map<String, ?> defaultUriVariables) {\n \t\tthis.defaultUriVariables = defaultUriVariables;\n\ndiff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n@@ -192,6 +192,11 @@ interface Builder {\n \t\t */\n \t\tBuilder baseUrl(String baseUrl);\n \n+\t\t/**\n+\t\t * Clone this {@code WebClient.Builder}\n+\t\t */\n+\t\tBuilder cloneBuilder();\n+\n \t\t/**\n \t\t * Configure default URI variable values that will be used when expanding\n \t\t * URI templates using a {@link Map}.",
    "output": "Add cloneBuilder method on WebClient.Builder This commit adds a new `cloneBuilder` method on `WebClient.Builder`; we can now reuse the customizations of an existing builder without sharing its state across several `WebClient` building code paths. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -206,7 +206,7 @@ public DefaultRequestBodySpec header(String headerName, String... headerValues)\n \t\t@Override\n \t\tpublic DefaultRequestBodySpec headers(Consumer<HttpHeaders> headersConsumer) {\n \t\t\tAssert.notNull(headersConsumer, \"'headersConsumer' must not be null\");\n-\t\t\theadersConsumer.accept(this.headers);\n+\t\t\theadersConsumer.accept(getHeaders());\n \t\t\treturn this;\n \t\t}\n ",
    "output": "Fix initialization issue with headers in DefaultWebClient This commit fixes a lazy initialization issue in `headers(Consumer<HttpHeaders>)`. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java\n@@ -43,7 +43,7 @@ class DefaultPathSegmentContainer implements PathSegmentContainer {\n \t\t\tnew DefaultPathSegmentContainer(\"\", Collections.emptyList());\n \n \tprivate static final PathSegmentContainer ROOT_PATH =\n-\t\t\tnew DefaultPathSegmentContainer(\"/\", Collections.singletonList(EMPTY_PATH_SEGMENT));\n+\t\t\tnew DefaultPathSegmentContainer(\"/\", Collections.emptyList());\n \n \n \tprivate final String path;\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java\n@@ -92,7 +92,7 @@ public void path() throws Exception {\n \t\ttestPath(\"/a/b/c\", \"/a/b/c\", false, true, Arrays.asList(\"a\", \"b\", \"c\"), false);\n \n \t\t// root path\n-\t\ttestPath(\"/\", \"/\", false, true, Collections.singletonList(\"\"), false);\n+\t\ttestPath(\"/\", \"/\", false, true, Collections.emptyList(), false);\n \n \t\t// empty path\n \t\ttestPath(\"\",   \"\", true, false, Collections.emptyList(), false);",
    "output": "Fix ROOT_PATH constant to match recent changes \"/\" should be 0 segments, isAbsolute=true, hasTrailingSlash=false"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java\n@@ -62,7 +62,7 @@ protected AbstractMonoToListenableFutureAdapter(Mono<S> mono) {\n \t\t\t\t\tregistry.success(adapted);\n \t\t\t\t})\n \t\t\t\t.doOnError(this.registry::failure)\n-\t\t\t\t.subscribe();\n+\t\t\t\t.toProcessor();\n \t}\n \n ",
    "output": "Upgrade to Reactor Bismuth-M2 Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n@@ -102,7 +102,7 @@ public Object getProperty(String name) {\n \t * any underscore / uppercase variation thereof. Return the resolved name if one is\n \t * found or otherwise the original name. Never returns {@code null}.\n \t */\n-\tprivate String resolvePropertyName(String name) {\n+\tprotected final String resolvePropertyName(String name) {\n \t\tAssert.notNull(name, \"Property name must not be null\");\n \t\tString resolvedName = checkPropertyName(name);\n \t\tif (resolvedName != null) {",
    "output": "Make resolvePropertyName available to subclasses Change `SystemEnvironmentPropertySource.resolvePropertyName` to a protected final method so that subclasses may call it. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -109,7 +109,7 @@ public void registerReactiveType(ReactiveTypeDescriptor descriptor,\n \t/**\n \t * Get the adapter for the given reactive type.\n \t */\n-\tpublic ReactiveAdapter getAdapter(Class<?> reactiveType) {\n+\tpublic ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType) {\n \t\treturn getAdapter(reactiveType, null);\n \t}\n ",
    "output": "Add missing @Nullable annotation Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java\n@@ -0,0 +1,10 @@\n+/**\n+ * Mock objects for the functional web framework.\n+ *\n+ * <p>Useful for testing router and handler functions.\n+ *\n+ */\n+@NonNullApi\n+package org.springframework.mock.web.reactive.function.server;\n+\n+import org.springframework.lang.NonNullApi;",
    "output": "Add package-info.java to mock.web.reactive.function.server"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Nullable.java b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n--- a/spring-core/src/main/java/org/springframework/lang/Nullable.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n@@ -6,7 +6,9 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import javax.annotation.meta.TypeQualifierDefault;\n+import javax.annotation.Nonnull;\n+import javax.annotation.meta.TypeQualifierNickname;\n+import javax.annotation.meta.When;\n \n /**\n  * Leverage JSR 305 meta-annotations to define the annotated element could be null\n@@ -20,9 +22,9 @@\n  * @see javax.annotation.Nullable\n  */\n @Documented\n-@javax.annotation.Nullable\n+@TypeQualifierNickname\n+@Nonnull(when= When.MAYBE)\n @Target({ElementType.METHOD, ElementType.PARAMETER})\n-@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Nullable {\n }",
    "output": "Improve @Nullable annotation This commit makes Spring @Nullable annotation leveraging JSR 305 @TypeQualifierNickname + @Nonnull(when= When.MAYBE) instead of directly using @javax.annotation.Nullable which seems not designed to be used as a meta-annotation. It also removes @TypeQualifierDefault since the purpose of this annotation when applied at method level is to only change return value nullability, not parameters one. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java\n@@ -24,7 +24,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.core.ParameterizedTypeReference;\n@@ -36,9 +35,11 @@\n import static org.junit.Assert.*;\n \n /**\n+ * Integration tests for the JSON Binding API, running against Apache Johnzon.\n+ *\n  * @author Juergen Hoeller\n+ * @since 5.0\n  */\n-@Ignore  // until we are able to include Eclipse Yasson (the JSONB RI) in our build setup\n public class JsonbHttpMessageConverterTests {\n \n \tprivate final JsonbHttpMessageConverter converter = new JsonbHttpMessageConverter();\n@@ -133,7 +134,7 @@ public void writeUTF16() throws IOException {\n \t\tMockHttpOutputMessage outputMessage = new MockHttpOutputMessage();\n \t\tString body = \"H\\u00e9llo W\\u00f6rld\";\n \t\tthis.converter.write(body, contentType, outputMessage);\n-\t\tassertEquals(\"Invalid result\", \"\\\"\" + body + \"\\\"\", outputMessage.getBodyAsString(StandardCharsets.UTF_16BE));\n+\t\tassertEquals(\"Invalid result\", body, outputMessage.getBodyAsString(StandardCharsets.UTF_16BE));\n \t\tassertEquals(\"Invalid content-type\", contentType, outputMessage.getHeaders().getContentType());\n \t}\n ",
    "output": "Use Apache Johnzon 1.1 for JSON-B integration tests Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -292,8 +292,11 @@ public void updateAfterNewSubscription(String destination, String sessionId, Str\n \t\t\t\t\tString cachedDestination = entry.getKey();\n \t\t\t\t\tif (getPathMatcher().match(destination, cachedDestination)) {\n \t\t\t\t\t\tLinkedMultiValueMap<String, String> subs = entry.getValue();\n-\t\t\t\t\t\tsubs.add(sessionId, subsId);\n-\t\t\t\t\t\tthis.accessCache.put(cachedDestination, subs.deepCopy());\n+\t\t\t\t\t\t// Subscription id's may also be populated via getSubscriptions()\n+\t\t\t\t\t\tif (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {\n+\t\t\t\t\t\t\tsubs.add(sessionId, subsId);\n+\t\t\t\t\t\t\tthis.accessCache.put(cachedDestination, subs.deepCopy());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix duplicate STOMP subscription id issue Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -95,11 +95,7 @@ public static RequestPredicate path(String pattern) {\n \t */\n \tpublic static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {\n \t\tAssert.notNull(patternParser, \"'patternParser' must not be null\");\n-\t\treturn pattern -> {\n-\t\t\tsynchronized (patternParser) {\n-\t\t\t\treturn new PathPatternPredicate(patternParser.parse(pattern));\n-\t\t\t}\n-\t\t};\n+\t\treturn pattern -> new PathPatternPredicate(patternParser.parse(pattern));\n \t}\n \n \t/**",
    "output": "Remove synchronized block around PathPatternParser Removed the synchronized block around PathPatternParser, since it is now thread-safe"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n@@ -128,7 +128,7 @@ public HttpHeaders getResponseHeaders() {\n \t * Return response cookies received from the server.\n \t */\n \tpublic MultiValueMap<String, ResponseCookie> getResponseCookies() {\n-\t\treturn this.getResponseCookies();\n+\t\treturn this.response.getCookies();\n \t}\n \n \t/**",
    "output": "Fix minor issue in ExchangeResult"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java b/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java\n--- a/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java\n+++ b/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java\n@@ -121,9 +121,9 @@ private MockResponse jsonPostRequest(RecordedRequest request, String location, S\n \t}\n \n \tprivate MockResponse multipartRequest(RecordedRequest request) {\n-\t\tString contentType = request.getHeader(\"Content-Type\");\n-\t\tassertTrue(contentType.startsWith(\"multipart/form-data\"));\n-\t\tString boundary = contentType.split(\"boundary=\")[1];\n+\t\tMediaType mediaType = MediaType.parseMediaType(request.getHeader(\"Content-Type\"));\n+\t\tassertTrue(mediaType.isCompatibleWith(MediaType.MULTIPART_FORM_DATA));\n+\t\tString boundary = mediaType.getParameter(\"boundary\");\n \t\tBuffer body = request.getBody();\n \t\ttry {\n \t\t\tassertPart(body, \"form-data\", boundary, \"name 1\", \"text/plain\", \"value 1\");",
    "output": "Fix error in mock server test code"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java\n@@ -53,6 +53,12 @@ public TransactionAwareCacheDecorator(Cache targetCache) {\n \t\tthis.targetCache = targetCache;\n \t}\n \n+\t/**\n+\t * Return the target Cache that this Cache should delegate to.\n+\t */\n+\tpublic Cache getTargetCache() {\n+\t\treturn this.targetCache;\n+\t}\n \n \t@Override\n \tpublic String getName() {\n\ndiff --git a/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java b/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java\n@@ -46,6 +46,13 @@ public void createWithNullTarget() {\n \t\tnew TransactionAwareCacheDecorator(null);\n \t}\n \n+\t@Test\n+\tpublic void getTargetCache() {\n+\t\tCache target = new ConcurrentMapCache(\"testCache\");\n+\t\tTransactionAwareCacheDecorator cache = new TransactionAwareCacheDecorator(target);\n+\t\tassertSame(target, cache.getTargetCache());\n+\t}\n+\n \t@Test\n \tpublic void regularOperationsOnTarget() {\n \t\tCache target = new ConcurrentMapCache(\"testCache\");",
    "output": "Add getTargetDataSource to TransactionAwareCacheDecorator Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n--- a/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n@@ -245,6 +245,17 @@ public void contextPathWithForwardedPrefixTrailingSlash() throws Exception {\n \t\tassertEquals(\"/prefix\", actual);\n \t}\n \n+\t@Test\n+\tpublic void contextPathPreserveEncoding() throws Exception {\n+\t\tthis.request.setContextPath(\"/app%20\");\n+\t\tthis.request.setRequestURI(\"/app%20/path/\");\n+\t\tHttpServletRequest actual = filterAndGetWrappedRequest();\n+\n+\t\tassertEquals(\"/app%20\", actual.getContextPath());\n+\t\tassertEquals(\"/app%20/path/\", actual.getRequestURI());\n+\t\tassertEquals(\"http://localhost/app%20/path/\", actual.getRequestURL().toString());\n+\t}\n+\n \t@Test\n \tpublic void sendRedirectWithAbsolutePath() throws Exception {\n \t\tthis.request.addHeader(X_FORWARDED_PROTO, \"https\");",
    "output": "Add test to ensure ForwardedHeaderFilter contextPath preserves encoding Add a test to verify that the ForwardedHeaderFilter contextPath override preserves URL encoding as it should. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java\n@@ -117,12 +117,7 @@ public final Set<String> getModelKeys() {\n \t@SuppressWarnings(\"unchecked\")\n \tpublic Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange) {\n \t\treturn getObjectToRender(model)\n-\t\t\t\t.map(value -> {\n-\t\t\t\t\tPublisher stream = Mono.justOrEmpty(value);\n-\t\t\t\t\tResolvableType type = ResolvableType.forClass(value.getClass());\n-\t\t\t\t\tServerHttpResponse response = exchange.getResponse();\n-\t\t\t\t\treturn this.writer.write(stream, type, contentType, response, Collections.emptyMap());\n-\t\t\t\t})\n+\t\t\t\t.map(value -> write(value, contentType, exchange))\n \t\t\t\t.orElseGet(() -> exchange.getResponse().setComplete());\n \t}\n \n@@ -158,4 +153,12 @@ private boolean isMatch(Map.Entry<String, ?> entry) {\n \t\treturn getMessageWriter().canWrite(type, null);\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> Mono<Void> write(T value, MediaType contentType, ServerWebExchange exchange) {\n+\t\tPublisher<T> input = Mono.justOrEmpty(value);\n+\t\tResolvableType elementType = ResolvableType.forClass(value.getClass());\n+\t\treturn ((HttpMessageWriter<T>) this.writer).write(\n+\t\t\t\tinput, elementType, contentType, exchange.getResponse(), Collections.emptyMap());\n+\t}\n+\n }",
    "output": "Fix compiler warning"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -123,7 +123,7 @@ public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {\n \t\tObject sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);\n \t\tClass<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);\n \n-\t\tif (reactiveType == null) {\n+\t\tif (clazz == null) {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Fix failing tests due to last commit"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,11 +16,11 @@\n \n package org.springframework.test.context.junit;\n \n-import org.junit.platform.runner.IncludeClassNamePatterns;\n-import org.junit.platform.runner.IncludeEngines;\n import org.junit.platform.runner.JUnitPlatform;\n-import org.junit.platform.runner.SelectPackages;\n-import org.junit.platform.runner.UseTechnicalNames;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.UseTechnicalNames;\n import org.junit.runner.RunWith;\n \n /**",
    "output": "Upgrade to JUnit 5.0 M4 Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java\n@@ -18,15 +18,14 @@\n \n import java.util.concurrent.atomic.AtomicReference;\n \n-import reactor.core.Loopback;\n import reactor.ipc.netty.NettyContext;\n \n import org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;\n \n /**\n  * @author Stephane Maldini\n  */\n-public class ReactorHttpServer extends AbstractHttpServer implements Loopback {\n+public class ReactorHttpServer extends AbstractHttpServer {\n \n \tprivate ReactorHttpHandlerAdapter reactorHandler;\n \n@@ -45,16 +44,6 @@ private ReactorHttpHandlerAdapter createHttpHandlerAdapter() {\n \t\treturn new ReactorHttpHandlerAdapter(resolveHttpHandler());\n \t}\n \n-\t@Override\n-\tpublic Object connectedInput() {\n-\t\treturn this.reactorServer;\n-\t}\n-\n-\t@Override\n-\tpublic Object connectedOutput() {\n-\t\treturn this.reactorServer;\n-\t}\n-\n \t@Override\n \tprotected void startInternal() {\n \t\tNettyContext nettyContext = this.reactorServer.newHandler(this.reactorHandler).block();",
    "output": "Remove deprecated usage of Reactor Loopback interface"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java\n@@ -92,10 +92,10 @@ default HandlerFunction<R> apply(HandlerFunction<T> handler) {\n \t * @return the filter adaptation of the request processor\n \t */\n \tstatic <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(\n-\t\t\tFunction<T, R> responseProcessor) {\n+\t\t\tFunction<T, Mono<R>> responseProcessor) {\n \n \t\tAssert.notNull(responseProcessor, \"'responseProcessor' must not be null\");\n-\t\treturn (request, next) -> next.handle(request).map(responseProcessor);\n+\t\treturn (request, next) -> next.handle(request).then(responseProcessor);\n \t}\n \n ",
    "output": "Fix ofResponseProcessor signature This commit changes the `HandlerFilterFunction.ofResponseProcessor` method signature to return `Mono<ServerResponse>`, to better cooperate with response builders (which all return a `Mono`)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -113,7 +113,7 @@ public static Flux<DataBuffer> read(AsynchronousFileChannel channel,\n \t\tByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize);\n \n \t\treturn Flux.create(emitter -> {\n-\t\t\temitter.onDispose(() -> closeChannel(channel));\n+\t\t\temitter.setCancellation(() -> closeChannel(channel));\n \t\t\tAsynchronousFileChannelCompletionHandler completionHandler =\n \t\t\t\t\tnew AsynchronousFileChannelCompletionHandler(emitter, position,\n \t\t\t\t\t\t\tdataBufferFactory, byteBuffer);",
    "output": "Upgrade after changed method in Reactor Core"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java\n@@ -125,7 +125,7 @@ public boolean hasExceptionMappings() {\n \t * @return a Method to handle the exception, or {@code null} if none found\n \t */\n \tpublic Method resolveMethod(Exception exception) {\n-\t\treturn resolveMethod(exception);\n+\t\treturn resolveMethodByThrowable(exception);\n \t}\n \n \t/**",
    "output": "Fix failing tests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -197,8 +197,8 @@ public StandaloneMockMvcBuilder addMappedInterceptors(String[] pathPatterns, Han\n \t/**\n \t * Set a ContentNegotiationManager.\n \t */\n-\tprotected StandaloneMockMvcBuilder setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {\n-\t\tthis.contentNegotiationManager = contentNegotiationManager;\n+\tpublic StandaloneMockMvcBuilder setContentNegotiationManager(ContentNegotiationManager manager) {\n+\t\tthis.contentNegotiationManager = manager;\n \t\treturn this;\n \t}\n ",
    "output": "Fix wrong access modifier in MockMvc standalone setup Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -497,6 +497,23 @@ public Expression getSelectorExpression() {\n \t\t\treturn this.selectorExpression;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic boolean equals(Object other) {\n+\t\t\tif (this == other) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (other == null || getClass() != other.getClass()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn getId().equals(((Subscription) other).getId());\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn getId().hashCode();\n+\t\t}\n+\n \t\t@Override\n \t\tpublic String toString() {\n \t\t\treturn \"subscription(id=\" + this.id + \")\";",
    "output": "Add equals/hashcode for STOMP Subscription Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -386,6 +386,9 @@ public ServerRequest nestRequest(ServerRequest request) {\n \t\t\tif (!subPath.startsWith(\"/\")) {\n \t\t\t\tsubPath = \"/\" + subPath;\n \t\t\t}\n+\t\t\tif (requestPath.endsWith(\"/\") && !subPath.endsWith(\"/\")) {\n+\t\t\t\tsubPath += \"/\";\n+\t\t\t}\n \t\t\treturn new SubPathServerRequestWrapper(request, subPath);\n \t\t}\n ",
    "output": "Fix trailing slash in nested path This commit adds a trailing slash to the nested path if the request path also ends with a slash. For instance, given the request \"/foo/bar/\", and nested path pattern \"/foo/**\", we expect the nested path to be “/bar/”, not “/bar\""
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.test.web.reactive.server;\n \n import java.net.URI;\n@@ -429,6 +430,9 @@ public <T> EntityExchangeResult<List<T>> isEqualTo(List<T> expected) {\n \n \t\t@Override\n \t\tpublic ListBodySpec hasSize(int size) {\n+\t\t\tList<?> actual = this.result.getResponseBody();\n+\t\t\tString message = \"Response body does not contain \" + size + \" elements\";\n+\t\t\tthis.result.assertWithDiagnostics(() -> assertEquals(message, size, actual.size()));\n \t\t\treturn this;\n \t\t}\n ",
    "output": "Add ListBodySpec.size implementation Added implementation for WebTestClient.ListBodySpec.size"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -204,6 +204,15 @@ public void getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations() {\n \t\t\t\tattributes.get(\"value\"));\n \t}\n \n+\t@Test\n+\t@Ignore(\"To be validated by \")\n+\tpublic void getAllMergedAnnotationsOnClassWithInterface() throws NoSuchMethodException {\n+\t\tMethod m = TransactionalServiceImpl.class.getMethod(\"doIt\");\n+\t\tSet<Transactional> allMergedAnnotations =\n+\t\t\t\tgetAllMergedAnnotations(m, Transactional.class);\n+\t\tassertEquals(1, allMergedAnnotations.size());\n+\t}\n+\n \t@Test\n \tpublic void getMergedAnnotationAttributesOnClassWithLocalAnnotation() {\n \t\tClass<?> element = TxConfig.class;\n@@ -1272,4 +1281,17 @@ static class SpringAppConfigClass {\n \tstatic class ResourceHolder {\n \t}\n \n+\tinterface TransactionalService {\n+\n+\t\t@Transactional\n+\t\tvoid doIt();\n+\t}\n+\n+\tclass TransactionalServiceImpl implements TransactionalService {\n+\n+\t\t@Override\n+\t\tpublic void doIt() {\n+\t\t}\n+\t}\n+\n }",
    "output": "Add test to reproduce"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n@@ -408,6 +408,7 @@ public <T> EntityExchangeResult<T> isEqualTo(T expected) {\n \t\t\t});\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\t@Override\n \t\tpublic <T> EntityExchangeResult<T> returnResult() {\n \t\t\treturn new EntityExchangeResult<>(this.result, (T) this.result.getResponseBody());",
    "output": "Fix build by suppressing unchecked warnings"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,11 +64,7 @@ public void registerTypeName(String paramName, String typeName) {\n \t@Override\n \tpublic int getSqlType(String paramName) {\n \t\tAssert.notNull(paramName, \"Parameter name must not be null\");\n-\t\tInteger sqlType = this.sqlTypes.get(paramName);\n-\t\tif (sqlType != null) {\n-\t\t\treturn sqlType;\n-\t\t}\n-\t\treturn TYPE_UNKNOWN;\n+\t\treturn this.sqlTypes.getOrDefault(paramName, TYPE_UNKNOWN);\n \t}\n \n \t/**",
    "output": "Use Map.getOrDefault in getSqlType implementation Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java\n@@ -129,7 +129,7 @@ public HeaderSpec uri(URI uri) {\n \n \t\t@Override\n \t\tpublic HeaderSpec uri(String uriTemplate, Object... uriVariables) {\n-\t\t\treturn uri(getUriBuilderFactory().expand(uriTemplate));\n+\t\t\treturn uri(getUriBuilderFactory().expand(uriTemplate, uriVariables));\n \t\t}\n \n \t\t@Override",
    "output": "Fix missing uriVariables"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n@@ -116,10 +116,13 @@ public final void onError(Throwable t) {\n \t * @return {@code true} if there is more demand; {@code false} otherwise\n \t */\n \tprivate boolean readAndPublish() throws IOException {\n-\t\twhile (hasDemand()) {\n+\t\tlong r;\n+\t\twhile ((r = demand) > 0) {\n \t\t\tT data = read();\n \t\t\tif (data != null) {\n-\t\t\t\tOperators.addAndGet(DEMAND_FIELD_UPDATER, this, -1L);\n+\t\t\t\tif (r != Long.MAX_VALUE) {\n+\t\t\t\t\tDEMAND_FIELD_UPDATER.addAndGet(this, -1L);\n+\t\t\t\t}\n \t\t\t\tthis.subscriber.onNext(data);\n \t\t\t}\n \t\t\telse {\n@@ -129,10 +132,6 @@ private boolean readAndPublish() throws IOException {\n \t\treturn false;\n \t}\n \n-\tprivate boolean hasDemand() {\n-\t\treturn (this.demand > 0);\n-\t}\n-\n \tprivate boolean changeState(State oldState, State newState) {\n \t\treturn this.state.compareAndSet(oldState, newState);\n \t}",
    "output": "Add check for Long.MAX_VALUE Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n@@ -60,8 +60,8 @@ public ScriptTemplateViewResolver(String prefix, String suffix) {\n \t}\n \n \t@Override\n-\tprotected View createView(String viewName, Locale locale) throws Exception {\n-\t\tScriptTemplateView view = (ScriptTemplateView)super.createView(viewName, locale);\n+\tpublic View resolveViewName(String viewName, Locale locale) throws Exception {\n+\t\tScriptTemplateView view = (ScriptTemplateView)super.resolveViewName(viewName, locale);\n \t\tview.setLocale(locale);\n \t\treturn view;\n \t}",
    "output": "Fix Spring MVC ScriptTemplateView locale support The locale should be set in resolveViewNameinstead of createViewin order to be taken in account with cached views. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -63,7 +63,7 @@ private class AsyncHandler implements HttpHandler {\n \t\t@Override\n \t\tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\t\treturn response.writeWith(Flux.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n-\t\t\t\t\t\t\t\t\t\t.delay(Duration.ofMillis(100))\n+\t\t\t\t\t\t\t\t\t\t.delayElements(Duration.ofMillis(100))\n \t\t\t\t\t\t\t\t\t\t.publishOn(asyncGroup)\n \t\t\t\t\t.collect(dataBufferFactory::allocateBuffer, (buffer, str) -> buffer.write(str.getBytes())));\n \t\t}",
    "output": "Upgrade to Reactor Aluminium SNAPSHOT"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,6 +46,8 @@ public abstract class AbstractRequestExpectationManager implements RequestExpect\n \n \tprivate final List<ClientHttpRequest> requests = new LinkedList<>();\n \n+\tprivate final Object lock = new Object();\n+\n \n \tprotected List<RequestExpectation> getExpectations() {\n \t\treturn this.expectations;\n@@ -66,12 +68,14 @@ public ResponseActions expectRequest(ExpectedCount count, RequestMatcher matcher\n \n \t@Override\n \tpublic ClientHttpResponse validateRequest(ClientHttpRequest request) throws IOException {\n-\t\tif (getRequests().isEmpty()) {\n-\t\t\tafterExpectationsDeclared();\n+\t\tsynchronized (this.lock) {\n+\t\t\tif (getRequests().isEmpty()) {\n+\t\t\t\tafterExpectationsDeclared();\n+\t\t\t}\n+\t\t\tClientHttpResponse response = validateRequestInternal(request);\n+\t\t\tgetRequests().add(request);\n+\t\t\treturn response;\n \t\t}\n-\t\tClientHttpResponse response = validateRequestInternal(request);\n-\t\tgetRequests().add(request);\n-\t\treturn response;\n \t}\n \n \t/**",
    "output": "Add locking to AbstractRequestExpectationManager This commit ensures that verifying a request, which includes finding and updating expectations, is done synchronously to avoid concurrent modification exceptions. Technically SimpleRequestExpectationManager is not even expected to see concurrent requests by definition but with UnorderedRequestExpectationManager it can happen. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n@@ -38,6 +38,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Adapt {@link ServerHttpRequest} to the Undertow {@link HttpServerExchange}.\n@@ -63,9 +64,10 @@ public UndertowServerHttpRequest(HttpServerExchange exchange, DataBufferFactory\n \tprivate static URI initUri(HttpServerExchange exchange) {\n \t\tAssert.notNull(exchange, \"HttpServerExchange is required.\");\n \t\ttry {\n+\t\t\tString query = exchange.getQueryString();\n \t\t\treturn new URI(exchange.getRequestScheme(), null,\n \t\t\t\t\texchange.getHostName(), exchange.getHostPort(),\n-\t\t\t\t\texchange.getRequestURI(), exchange.getQueryString(), null);\n+\t\t\t\t\texchange.getRequestURI(), StringUtils.hasText(query) ? query : null, null);\n \t\t}\n \t\tcatch (URISyntaxException ex) {\n \t\t\tthrow new IllegalStateException(\"Could not get URI: \" + ex.getMessage(), ex);",
    "output": "Fix URI construction in UndertowServerHttpRequest Ensure there is no \"?\" at the end of the generated URI when there is no query available"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n@@ -191,11 +191,12 @@ protected RequestContext createRequestContext(ServerWebExchange exchange, Map<St\n \t * <p>The default implementation looks in the {@link #getApplicationContext()\n \t * Spring configuration} for a {@code RequestDataValueProcessor} bean with\n \t * the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}.\n+\t * @return the RequestDataValueProcessor, or null if there is none at the application context.\n \t */\n \tprotected RequestDataValueProcessor getRequestDataValueProcessor() {\n-\t\tif (getApplicationContext() != null) {\n-\t\t\tString beanName = REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME;\n-\t\t\treturn getApplicationContext().getBean(beanName, RequestDataValueProcessor.class);\n+\t\tApplicationContext context = getApplicationContext();\n+\t\tif (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {\n+\t\t\treturn context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);\n \t\t}\n \t\treturn null;\n \t}",
    "output": "Fix exception if no RequestDataValueProcessor is present This modification fixes the way AbstractView retrieves the RequestDataValueProcessor bean, correctly returning null if there is no bean of such type at the Application Context. This avoids an exception in RedirectView (which extends AbstractView) when trying to post-process the URL generated for redirection, when no RequestDataValueProcessor exists. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,7 +49,7 @@\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n import org.springframework.core.ResolvableType.VariableResolver;\n import org.springframework.util.MultiValueMap;",
    "output": "Use MockitoJUnitRunner from Mockito 2's preferred location Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -123,7 +123,7 @@ else if (undertowPresent) {\n \t\t}\n \n \t\ttry {\n-\t\t\tclassName = HandshakeWebSocketService.class.getPackage().getName() + \".\" + className;\n+\t\t\tclassName = \"org.springframework.web.reactive.socket.server.upgrade.\" + className;\n \t\t\tClass<?> clazz = ClassUtils.forName(className, HandshakeWebSocketService.class.getClassLoader());\n \t\t\treturn (RequestUpgradeStrategy) ReflectionUtils.accessibleConstructor(clazz).newInstance();\n \t\t}",
    "output": "Fix RequestUpgradeStrategy impl. class loading Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -516,15 +516,22 @@ private static String changeFirstCharacterCase(String str, boolean capitalize) {\n \t\tif (str == null || str.length() == 0) {\n \t\t\treturn str;\n \t\t}\n-\t\tStringBuilder sb = new StringBuilder(str.length());\n-\t\tif (capitalize) {\n-\t\t\tsb.append(Character.toUpperCase(str.charAt(0)));\n-\t\t}\n \t\telse {\n-\t\t\tsb.append(Character.toLowerCase(str.charAt(0)));\n+\t\t\tchar baseChar = str.charAt(0);\n+\t\t\tchar updatedChar;\n+\t\t\tif (capitalize) {\n+\t\t\t\tupdatedChar = Character.toUpperCase(baseChar);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tupdatedChar = Character.toLowerCase(baseChar);\n+\t\t\t}\n+\t\t\tif (baseChar == updatedChar) {\n+\t\t\t\treturn str;\n+\t\t\t}\n+\t\t\tchar[] chars = str.toCharArray();\n+\t\t\tchars[0] = updatedChar;\n+\t\t\treturn new String(chars, 0, chars.length);\n \t\t}\n-\t\tsb.append(str.substring(1));\n-\t\treturn sb.toString();\n \t}\n \n \t/**",
    "output": "Improve performance of StringUtils.capitalizeIssue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n@@ -178,9 +178,8 @@ public static void splitSqlScript(EncodedResource resource, String script, Strin\n \t\tboolean inSingleQuote = false;\n \t\tboolean inDoubleQuote = false;\n \t\tboolean inEscape = false;\n-\t\tchar[] content = script.toCharArray();\n \t\tfor (int i = 0; i < script.length(); i++) {\n-\t\t\tchar c = content[i];\n+\t\t\tchar c = script.charAt(i);\n \t\t\tif (inEscape) {\n \t\t\t\tinEscape = false;\n \t\t\t\tsb.append(c);\n@@ -342,9 +341,8 @@ private static void appendSeparatorToScriptIfNecessary(StringBuilder scriptBuild\n \t */\n \tpublic static boolean containsSqlScriptDelimiters(String script, String delim) {\n \t\tboolean inLiteral = false;\n-\t\tchar[] content = script.toCharArray();\n \t\tfor (int i = 0; i < script.length(); i++) {\n-\t\t\tif (content[i] == '\\'') {\n+\t\t\tif (script.charAt(i) == '\\'') {\n \t\t\t\tinLiteral = !inLiteral;\n \t\t\t}\n \t\t\tif (!inLiteral && script.startsWith(delim, i)) {",
    "output": "Remove String#toCharArray from ScriptUtils ScriptUtils contains two calls to String#toCharArray for the sole purpose to iterating over all chars in a String. Not only is this unnecessary and can be replaced with String#charAt it also causes additional allocator and heap pressure because String#toCharArray rather than returning the backing array (which is gone in Java 9) creates a copy. This commit contains the following changes - remove String#toCharArray from ScriptUtils and replace with String#charAt Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n@@ -25,9 +25,6 @@\n import java.util.Map;\n import java.util.UUID;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.messaging.Message;\n import org.springframework.messaging.MessageChannel;\n import org.springframework.messaging.MessageHeaders;\n@@ -124,8 +121,6 @@ public class MessageHeaderAccessor {\n \t};\n \n \n-\tprotected final Log logger = LogFactory.getLog(getClass());\n-\n \tprivate final MutableMessageHeaders headers;\n \n \tprivate boolean leaveMutable = false;",
    "output": "Remove unused Log object from MessageHeaderAccessor Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java\n@@ -29,6 +29,7 @@\n import org.springframework.web.reactive.HandlerMapping;\n import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;\n import org.springframework.web.reactive.socket.WebSocketHandler;\n+import org.springframework.web.reactive.socket.WebSocketMessage;\n import org.springframework.web.reactive.socket.WebSocketSession;\n import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;\n import org.springframework.web.reactive.socket.client.RxNettyWebSocketClient;\n@@ -68,13 +69,7 @@ private void testEcho(WebSocketClient client) throws URISyntaxException {\n \t\tclient.execute(getUrl(\"/echo\"),\n \t\t\t\tsession -> session\n \t\t\t\t\t\t.send(input.map(session::textMessage))\n-\t\t\t\t\t\t.thenMany(session.receive()\n-\t\t\t\t\t\t\t\t.take(count)\n-\t\t\t\t\t\t\t\t.map(message -> {\n-\t\t\t\t\t\t\t\t\tString text = message.getPayloadAsText();\n-\t\t\t\t\t\t\t\t\tmessage.release();\n-\t\t\t\t\t\t\t\t\treturn text;\n-\t\t\t\t\t\t\t\t}))\n+\t\t\t\t\t\t.thenMany(session.receive().take(count).map(WebSocketMessage::getPayloadAsText))\n \t\t\t\t\t\t.subscribeWith(output)\n \t\t\t\t\t\t.then())\n \t\t\t\t.blockMillis(5000);",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n@@ -46,8 +46,8 @@ public static Object[][] arguments() {\n \t\tFile base = new File(System.getProperty(\"java.io.tmpdir\"));\n \t\treturn new Object[][] {\n \t\t\t\t{new JettyHttpServer()},\n-\t\t\t\t//{new RxNettyHttpServer()},\n-\t\t\t\t{new ReactorHttpServer()},\n+\t\t\t\t{new RxNettyHttpServer()},\n+\t\t\t\t//{new ReactorHttpServer()},\n \t\t\t\t{new TomcatHttpServer(base.getAbsolutePath())},\n \t\t\t\t{new UndertowHttpServer()}\n \t\t};",
    "output": "Fix previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -30,7 +30,6 @@\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n import org.springframework.core.io.buffer.NettyDataBufferFactory;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseCookie;\n import org.springframework.http.ZeroCopyHttpOutputMessage;\n@@ -84,10 +83,6 @@ protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? e\n \n \t@Override\n \tprotected void applyHeaders() {\n-\t\t// TODO: temporarily, see https://github.com/reactor/reactor-netty/issues/2\n-\t\tif(getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)){\n-\t\t\tthis.response.disableChunkedTransfer();\n-\t\t}\n \t\tfor (String name : getHeaders().keySet()) {\n \t\t\tfor (String value : getHeaders().get(name)) {\n \t\t\t\tthis.response.responseHeaders().add(name, value);",
    "output": "Remove temporary workaround in ReactorServertHttpResponse We no longer should need the workaround for https://github.com/reactor/reactor-netty/issues/2 Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java\n--- a/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java\n+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java\n@@ -18,6 +18,7 @@\n \n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n import org.reactivestreams.Publisher;\n@@ -56,6 +57,8 @@ public class MockServerHttpResponse implements ServerHttpResponse {\n \n \tprivate DataBufferFactory bufferFactory = new DefaultDataBufferFactory();\n \n+\tprivate Function<String, String> urlEncoder = url -> url;\n+\n \n \t@Override\n \tpublic boolean setStatusCode(HttpStatus status) {\n@@ -111,6 +114,16 @@ public DataBufferFactory bufferFactory() {\n \t\treturn this.bufferFactory;\n \t}\n \n+\t@Override\n+\tpublic String encodeUrl(String url) {\n+\t\treturn (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);\n+\t}\n+\n+\t@Override\n+\tpublic void registerUrlEncoder(Function<String, String> encoder) {\n+\t\tthis.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);\n+\t}\n+\n \t/**\n \t * Return the body of the response aggregated and converted to a String\n \t * using the charset of the Content-Type response or otherwise defaulting",
    "output": "Add missing overrides to MockServerHttpResponse"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n@@ -61,11 +61,11 @@ public ReactorNettyTcpConnection(NettyInbound inbound, NettyOutbound outbound,\n \n \t@Override\n \tpublic ListenableFuture<Void> send(Message<P> message) {\n-\t\tByteBuf byteBuf = this.inbound.alloc()\n-\t\t                              .buffer();\n+\t\tByteBuf byteBuf = this.outbound.alloc()\n+\t\t                               .buffer();\n \t\tthis.encoder.accept(byteBuf, message);\n-\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf)\n-\t\t                                                                  .then()));\n+\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf))\n+\t\t                                                        .then());\n \t}\n \n \t@Override",
    "output": "upgrade STOMP support to reactor-netty 0.6"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n@@ -61,9 +61,11 @@ public ReactorNettyTcpConnection(NettyInbound inbound, NettyOutbound outbound,\n \n \t@Override\n \tpublic ListenableFuture<Void> send(Message<P> message) {\n-\t\tByteBuf byteBuf = this.inbound.channel().alloc().buffer();\n+\t\tByteBuf byteBuf = this.inbound.alloc()\n+\t\t                              .buffer();\n \t\tthis.encoder.accept(byteBuf, message);\n-\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf)));\n+\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf)\n+\t\t                                                                  .then()));\n \t}\n \n \t@Override",
    "output": "upgrade STOMP support to reactor-netty 0.6"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -114,7 +114,7 @@ protected void applyCookies() {\n \n \t@Override\n \tpublic Mono<Void> writeWith(File file, long position, long count) {\n-\t\treturn doCommit(() -> this.response.sendFile(file, position, count));\n+\t\treturn doCommit(() -> this.response.sendFile(file.toPath(), position, count));\n \t}\n \n \tprivate static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {",
    "output": "Upgrade with new HttpServerResponse.sendFile signature Reactor Netty's `HttpServerResponse` has a new `sendFile` signature that takes a `Path` instead of a `File`"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n@@ -221,9 +221,11 @@ public void onNext(AbstractResponseBodyProcessor processor, DataBuffer dataBuffe\n \t\t\t\tif (dataBuffer.readableByteCount() == 0) {\n \t\t\t\t\tprocessor.subscription.request(1);\n \t\t\t\t}\n-\t\t\t\telse if (processor.changeState(this, RECEIVED)) {\n+\t\t\t\telse {\n \t\t\t\t\tprocessor.receiveBuffer(dataBuffer);\n-\t\t\t\t\tprocessor.writeIfPossible();\n+\t\t\t\t\tif (processor.changeState(this, RECEIVED)) {\n+\t\t\t\t\t\tprocessor.writeIfPossible();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Fix NPE in ServletServerHttpResponse.ResponseBodyProcessor.write Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java\n@@ -51,6 +51,7 @@\n  * @author Arjen Poutsma\n  * @author Rossen Stoyanchev\n  * @author Brian Clozel\n+ * @author Mark Paluch\n  * @since 4.1.2\n  */\n public class Netty4ClientHttpRequestFactory implements ClientHttpRequestFactory,\n@@ -174,8 +175,7 @@ private Netty4ClientHttpRequest createRequestInternal(URI uri, HttpMethod httpMe\n \t}\n \n \tprivate Bootstrap getBootstrap(URI uri) {\n-\t\tboolean isSecure = (uri.getPort() == 443 ||\n-\t\t\t\t(uri.getPort() == -1 && \"https\".equalsIgnoreCase(uri.getScheme())));\n+\t\tboolean isSecure = (uri.getPort() == 443 || \"https\".equalsIgnoreCase(uri.getScheme()));\n \t\tif (isSecure) {\n \t\t\tif (this.sslBootstrap == null) {\n \t\t\t\tthis.sslBootstrap = buildBootstrap(true);",
    "output": "Fix TLS detection in URLs for Netty Client RequestFactory Do not check on non-specified port when scheme is https. Enables SSL for https URIs with a specified port. Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java\n@@ -289,6 +289,23 @@ public void handleMonoWithWildcardBodyType() throws Exception {\n \t\tassertResponseBody(\"\\\"body\\\"\");\n \t}\n \n+\t@Test // SPR-14877\n+\tpublic void handleMonoWithWildcardBodyTypeAndNullBody() throws Exception {\n+\n+\t\tthis.exchange.getAttributes().put(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE,\n+\t\t\t\tCollections.singleton(MediaType.APPLICATION_JSON));\n+\n+\t\tHandlerResult result = new HandlerResult(new TestController(), Mono.just(notFound().build()),\n+\t\t\t\tResolvableMethod.onClass(TestController.class)\n+\t\t\t\t\t\t.name(\"monoResponseEntityWildcard\")\n+\t\t\t\t\t\t.resolveReturnType());\n+\n+\t\tthis.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));\n+\n+\t\tassertEquals(HttpStatus.NOT_FOUND, this.response.getStatusCode());\n+\t\tassertNull(this.response.getBody());\n+\t}\n+\n \n \tprivate void testHandle(Object returnValue, ResolvableType type) {\n \t\tHandlerResult result = handlerResult(returnValue, type);",
    "output": "Add ResponseEntity test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n@@ -273,7 +273,7 @@ protected List<SyncHandlerMethodArgumentResolver> getDefaultInitBinderArgumentRe\n \t\tresolvers.add(new ServerWebExchangeArgumentResolver());\n \n \t\t// Custom resolvers\n-\t\tif (getCustomArgumentResolvers() != null) {\n+\t\tif (getCustomInitBinderArgumentResolvers() != null) {\n \t\t\tresolvers.addAll(getCustomInitBinderArgumentResolvers());\n \t\t}\n ",
    "output": "Fix NPE in custom @InitBinder resolver initialization Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -90,12 +90,14 @@ public int getBufferSize() {\n \t@Override\n \tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n \n+\t\t// Start async before Read/WriteListener registration\n+\t\tAsyncContext asyncContext = servletRequest.startAsync();\n+\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n \t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n \t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n-\t\tAsyncContext asyncContext = servletRequest.startAsync();\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);",
    "output": "Fix failing tests Issue: ,"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n@@ -218,7 +218,10 @@ public void onSubscribe(AbstractResponseBodyProcessor processor, Subscription su\n \n \t\t\t@Override\n \t\t\tpublic void onNext(AbstractResponseBodyProcessor processor, DataBuffer dataBuffer) {\n-\t\t\t\tif (processor.changeState(this, RECEIVED)) {\n+\t\t\t\tif (dataBuffer.readableByteCount() == 0) {\n+\t\t\t\t\tprocessor.subscription.request(1);\n+\t\t\t\t}\n+\t\t\t\telse if (processor.changeState(this, RECEIVED)) {\n \t\t\t\t\tprocessor.receiveBuffer(dataBuffer);\n \t\t\t\t\tprocessor.writeIfPossible();\n \t\t\t\t}",
    "output": "Improve AbstractResponseBodyProcessor.onNext(..) If the provided DataBuffer is empty then request the next DataBuffer"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java\n@@ -35,10 +35,6 @@\n  * flags to \"true\". If none of the statement types is wrapped - or you solely need\n  * Connection unwrapping in the first place -, the defaults are fine.\n  *\n- * <p>SimpleNativeJdbcExtractor is a common choice for use with OracleLobHandler, which\n- * just needs Connection unwrapping via the {@link #getNativeConnectionFromStatement}\n- * method. This usage will work with almost any connection pool.\n- *\n  * <p>For full usage with JdbcTemplate, i.e. to also provide Statement unwrapping:\n  * <ul>\n  * <li>Use a default SimpleNativeJdbcExtractor for Resin and SJSAS (no JDBC",
    "output": "Remove OracleLobHandler from documentation Now that OracleLobHandler has finally been removed it should also be removed from the documentation. This commit includes the following changes * remove OracleLobHandler references from Javadoc * remove OracleLobHandler references from Asciidoctor Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -164,7 +164,7 @@ public ReadableByteChannel apply(ReadableByteChannel channel, SynchronousSink<Da\n \t\t\ttry {\n \t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(chunkSize);\n \t\t\t\tint read;\n-\t\t\t\tif ((read = channel.read(byteBuffer)) > 0) {\n+\t\t\t\tif ((read = channel.read(byteBuffer)) >= 0) {\n \t\t\t\t\tbyteBuffer.flip();\n \t\t\t\t\tboolean release = true;\n \t\t\t\t\tDataBuffer dataBuffer = this.dataBufferFactory.allocateBuffer(read);",
    "output": "Fix bug in reading Flux from Channel Fixed bug where the returned Flux from DataBufferUtils.readwould be completed prematurely if the channel was not ready to read, but did not reach the end of the file either"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/codec/Encoder.java b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java\n--- a/spring-core/src/main/java/org/springframework/core/codec/Encoder.java\n+++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java\n@@ -20,6 +20,7 @@\n \n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import org.springframework.core.ResolvableType;\n import org.springframework.core.io.buffer.DataBuffer;\n@@ -50,7 +51,9 @@ public interface Encoder<T> {\n \t/**\n \t * Encode a stream of Objects of type {@code T} into a {@link DataBuffer}\n \t * output stream.\n-\t * @param inputStream the input stream of Objects to encode\n+\t * @param inputStream the input stream of Objects to encode. If the input should be\n+\t * encoded as a single value rather than as a stream of elements, an instance of\n+\t * {@link Mono} should be used.\n \t * @param bufferFactory for creating output stream {@code DataBuffer}'s\n \t * @param elementType the expected type of elements in the input stream;\n \t * this type must have been previously passed to the {@link #canEncode}",
    "output": "Improve Encoder Javadoc"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java b/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n@@ -103,8 +103,13 @@ public ApplicationContext getApplicationContext() {\n \t\tif (context instanceof ConfigurableApplicationContext) {\n \t\t\t@SuppressWarnings(\"resource\")\n \t\t\tConfigurableApplicationContext cac = (ConfigurableApplicationContext) context;\n-\t\t\tAssert.state(cac.isActive(), () -> \"The ApplicationContext loaded for [\" + mergedContextConfiguration\n-\t\t\t\t\t+ \"] is not active. Ensure that the context has not been closed programmatically.\");\n+\t\t\tAssert.state(cac.isActive(), () ->\n+\t\t\t\t\t\"The ApplicationContext loaded for [\" + mergedContextConfiguration +\n+\t\t\t\t\t\"] is not active. This may be due to one of the following reasons: \" +\n+\t\t\t\t\t\"1) the context was closed programmatically by user code; \" +\n+\t\t\t\t\t\"2) the context was closed during parallel test execution either \" +\n+\t\t\t\t\t\"according to @DirtiesContext semantics or due to automatic eviction \" +\n+\t\t\t\t\t\"from the ContextCache due to a maximum cache size policy.\");\n \t\t}\n \t\treturn context;\n \t}",
    "output": "Improve exception msg for inactive test ApplicationContext This commit improves the exception message thrown when a test's ApplicationContext is no longer active by explaining that the cause may be due to parallel test execution. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java\n@@ -210,14 +210,7 @@ private static Field findSpringMethodRuleField(Class<?> testClass) {\n \t */\n \tstatic TestContextManager getTestContextManager(Class<?> testClass) {\n \t\tAssert.notNull(testClass, \"testClass must not be null\");\n-\t\tsynchronized (testContextManagerCache) {\n-\t\t\tTestContextManager testContextManager = testContextManagerCache.get(testClass);\n-\t\t\tif (testContextManager == null) {\n-\t\t\t\ttestContextManager = new TestContextManager(testClass);\n-\t\t\t\ttestContextManagerCache.put(testClass, testContextManager);\n-\t\t\t}\n-\t\t\treturn testContextManager;\n-\t\t}\n+\t\treturn testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new);\n \t}\n \n ",
    "output": "Use Map.computeIfAbsentin SpringClassRule Replace manual synchronization block in SpringClassRule with Java 8's Map.computeIfAbsent. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -515,11 +515,6 @@ protected boolean isInvalidPath(String path) {\n \t * @return the corresponding media type, or {@code null} if none found\n \t */\n \tprotected MediaType getMediaType(HttpServletRequest request, Resource resource) {\n-\t\t// For backwards compatibility\n-\t\tMediaType mediaType = getMediaType(resource);\n-\t\tif (mediaType != null) {\n-\t\t\treturn mediaType;\n-\t\t}\n \t\treturn this.pathExtensionStrategy.getMediaTypeForResource(resource);\n \t}\n ",
    "output": "Fix compile issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java b/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java\n@@ -143,6 +143,18 @@ public void setPersistenceUnitName(String persistenceUnitName) {\n \t\tthis.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);\n \t}\n \n+\t/**\n+\t * Set the default persistence unit root location, to be applied\n+\t * if no unit-specific persistence unit root could be determined.\n+\t * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>\n+\t * <p>Default is \"classpath:\", that is, the root of the current classpath\n+\t * (nearest root directory). To be overridden if unit-specific resolution\n+\t * does not work and the classpath root is not appropriate either.\n+\t */\n+\tpublic void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {\n+\t\tthis.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation);\n+\t}\n+\n \t/**\n \t * Set whether to use Spring-based scanning for entity classes in the classpath\n \t * instead of using JPA's standard scanning of jar files with {@code persistence.xml}",
    "output": "Add setter for defaultPersistenceUnitRootLocation This commit adds a setter for the default persistence unit's defaultPersistenceUnitRootLocation attribute"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -49,16 +49,19 @@ public class ServletHttpHandlerAdapter extends HttpServlet {\n \n \tprivate static Log logger = LogFactory.getLog(ServletHttpHandlerAdapter.class);\n \n-\tprivate HttpHandler handler;\n+\tprivate final HttpHandler handler;\n \n \t// Servlet is based on blocking I/O, hence the usage of non-direct, heap-based buffers\n \t// (i.e. 'false' as constructor argument)\n \tprivate DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory(false);\n \n \tprivate int bufferSize = DEFAULT_BUFFER_SIZE;\n \n-\n-\tpublic void setHandler(HttpHandler handler) {\n+\t/**\n+\t * Create a new {@code ServletHttpHandlerAdapter} with the given HTTP handler.\n+\t * @param handler the handler\n+     */\n+\tpublic ServletHttpHandlerAdapter(HttpHandler handler) {\n \t\tAssert.notNull(handler, \"'handler' must not be null\");\n \t\tthis.handler = handler;\n \t}",
    "output": "Add HttpHandler contructor argument"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java\n@@ -82,11 +82,9 @@ protected Mono<Void> writeWithInternal(Publisher<DataBuffer> body) {\n \tprotected Mono<Void> writeAndFlushWithInternal(\n \t\t\tPublisher<Publisher<DataBuffer>> body) {\n \t\tFlux<ByteBuf> bodyWithFlushSignals = Flux.from(body).\n-\t\t\t\tflatMap(publisher -> {\n-\t\t\t\t\treturn Flux.from(publisher).\n-\t\t\t\t\t\t\tmap(NettyDataBufferFactory::toByteBuf).\n-\t\t\t\t\t\t\tconcatWith(Mono.just(FLUSH_SIGNAL));\n-\t\t\t\t});\n+\t\t\t\tflatMap(publisher -> Flux.from(publisher).\n+\t\t\t\t\t\tmap(NettyDataBufferFactory::toByteBuf).\n+\t\t\t\t\t\tconcatWith(Mono.just(FLUSH_SIGNAL)));\n \t\tObservable<ByteBuf> content = RxJava1Adapter.publisherToObservable(bodyWithFlushSignals);\n \t\tResponseContentWriter<ByteBuf> writer = this.response.write(content, bb -> bb == FLUSH_SIGNAL);\n \t\treturn RxJava1Adapter.observableToFlux(writer).then();",
    "output": "Use abbreviated expression lambda instead of statement lambda"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java\n@@ -87,7 +87,7 @@ public void sseAsString() throws Exception {\n \n \t\tTestSubscriber\n \t\t\t\t.subscribe(result)\n-\t\t\t\t.await()\n+\t\t\t\t.await(Duration.ofSeconds(5))\n \t\t\t\t.assertValues(\"data:foo 0\", \"data:foo 1\");\n \t}\n \n@@ -104,7 +104,7 @@ public void sseAsPerson() throws Exception {\n \n \t\tTestSubscriber\n \t\t\t\t.subscribe(result)\n-\t\t\t\t.await()\n+\t\t\t\t.await(Duration.ofSeconds(5))\n \t\t\t\t.assertValues(\"data:{\\\"name\\\":\\\"foo 0\\\"}data:{\\\"name\\\":\\\"foo 1\\\"}\");\n \t}\n \n@@ -120,7 +120,7 @@ public void sseAsEvent() throws Exception {\n \n \t\tTestSubscriber\n \t\t\t\t.subscribe(result)\n-\t\t\t\t.await()\n+\t\t\t\t.await(Duration.ofSeconds(5))\n \t\t\t\t.assertValues(\n \t\t\t\t\t\t\"id:0:bardata:foo\",\n \t\t\t\t\t\t\"id:1:bardata:foo\"",
    "output": "Add timeout settings in SseIntegrationTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java\n@@ -16,21 +16,21 @@\n \n package org.springframework.http.server.reactive;\n \n-import io.netty.buffer.ByteBuf;\n+import java.util.function.Function;\n+\n import reactor.core.publisher.Mono;\n-import reactor.io.ipc.ChannelHandler;\n import reactor.io.netty.http.HttpChannel;\n \n import org.springframework.core.io.buffer.NettyDataBufferFactory;\n import org.springframework.util.Assert;\n \n /**\n- * Adapt {@link HttpHandler} to the Reactor Netty {@link ChannelHandler}.\n+ * Adapt {@link HttpHandler} to the Reactor Netty channel handling function.\n  *\n  * @author Stephane Maldini\n  * @since 5.0\n  */\n-public class ReactorHttpHandlerAdapter implements ChannelHandler<ByteBuf, ByteBuf, HttpChannel> {\n+public class ReactorHttpHandlerAdapter implements Function<HttpChannel, Mono<Void>> {\n \n \tprivate final HttpHandler httpHandler;\n ",
    "output": "Upgrade to the latest Reactory Netty snapshot"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -105,7 +105,6 @@ public final class WebAsyncManager {\n \t */\n \tpublic void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {\n \t\tAssert.notNull(asyncWebRequest, \"AsyncWebRequest must not be null\");\n-\t\tAssert.state(!isConcurrentHandlingStarted(), \"Can't set AsyncWebRequest with concurrent handling in progress\");\n \t\tthis.asyncWebRequest = asyncWebRequest;\n \t\tthis.asyncWebRequest.addCompletionHandler(new Runnable() {\n \t\t\t@Override",
    "output": "Remove isAsyncStarted assertion Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -38,7 +38,7 @@ public class ReactorClientHttpConnector implements ClientHttpConnector {\n \tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n \n-\t\treturn reactor.io.netty.http.HttpClient.create(uri.getHost(), uri.getPort())\n+\t\treturn reactor.io.netty.http.HttpClient.create(uri.toString())\n \t\t\t\t.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name()),\n \t\t\t\t\t\turi.toString(),\n \t\t\t\t\t\thttpClientRequest -> requestCallback",
    "output": "Fix default origin port in ReactorClientHttpConnector This commit ensures that a valid port is given to the underlying Netty client when no port is defined in the URL itself. By default, port 80 is used by the Reactor Netty client. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n@@ -30,6 +30,7 @@\n import com.fasterxml.aalto.AsyncXMLInputFactory;\n import com.fasterxml.aalto.AsyncXMLStreamReader;\n import com.fasterxml.aalto.evt.EventAllocatorImpl;\n+import com.fasterxml.aalto.stax.InputFactoryImpl;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n@@ -116,8 +117,7 @@ public Flux<XMLEvent> decode(Publisher<DataBuffer> inputStream, ResolvableType e\n \tprivate static class AaltoDataBufferToXmlEvent\n \t\t\timplements Function<DataBuffer, Publisher<? extends XMLEvent>> {\n \n-\t\tprivate static final AsyncXMLInputFactory inputFactory =\n-\t\t\t\t(AsyncXMLInputFactory) XmlEventDecoder.inputFactory;\n+\t\tprivate static final AsyncXMLInputFactory inputFactory = new InputFactoryImpl();\n \n \t\tprivate final AsyncXMLStreamReader<AsyncByteBufferFeeder> streamReader =\n \t\t\t\tinputFactory.createAsyncForByteBuffer();",
    "output": "Fix Jaxb2CollectionHttpMessageConverterTests - Added Woodstox before Aalto in the spring-web build, so that Woodstox is used as StAX implementation, and not the less featured Aalto. - Hardcoded Aalto dependency in XmlEventDecoder, instead of relying on the StAX XMLInputFactory"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n@@ -19,6 +19,7 @@\n import org.junit.platform.runner.IncludeEngines;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.platform.runner.SelectPackages;\n+import org.junit.platform.runner.UseTechnicalNames;\n import org.junit.runner.RunWith;\n \n /**\n@@ -36,5 +37,6 @@\n @RunWith(JUnitPlatform.class)\n @IncludeEngines(\"junit-jupiter\")\n @SelectPackages(\"org.springframework.test.context.junit.jupiter\")\n+@UseTechnicalNames\n public class SpringJUnitJupiterTestSuite {\n }",
    "output": "Upgrade to JUnit 5.0.0-M1 Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java\n@@ -17,6 +17,7 @@\n package org.springframework.web.reactive;\n \n import java.net.URI;\n+import java.time.Duration;\n import java.util.Collections;\n \n import org.junit.Before;\n@@ -171,12 +172,9 @@ public void webExceptionHandler() throws Exception {\n \n \t\tWebExceptionHandler exceptionHandler = new ServerError500ExceptionHandler();\n \t\tWebHandler webHandler = new ExceptionHandlingWebHandler(this.dispatcherHandler, exceptionHandler);\n-\t\tMono<Void> publisher = webHandler.handle(this.exchange);\n-\n-\t\tTestSubscriber.subscribe(publisher)\n-\t\t\t\t.assertErrorWith(ex -> assertEquals(\n-\t\t\t\t\t\tHttpStatus.INTERNAL_SERVER_ERROR, this.exchange.getResponse().getStatusCode()));\n+\t\twebHandler.handle(this.exchange).block(Duration.ofSeconds(5));\n \n+\t\tassertEquals(HttpStatus.INTERNAL_SERVER_ERROR, this.exchange.getResponse().getStatusCode());\n \t}\n \n ",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,6 +49,7 @@ public Person save(Person person) {\n \t@Override\n \tpublic Person findByName(String name) {\n \t\treturn (Person) this.sessionFactory.getCurrentSession().createQuery(\n-\t\t\t\"from Person person where person.name = :name\").setString(\"name\", name).uniqueResult();\n+\t\t\t\"from Person person where person.name = :name\").setParameter(\"name\", name).getSingleResult();\n \t}\n+\n }",
    "output": "Upgrade test to Hibernate 5.2"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n@@ -25,7 +25,6 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n@@ -150,7 +149,6 @@ public void handleWithErrorSignal() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void streamResult() throws Exception {\n \t\tURI url = new URI(\"http://localhost:\" + port + \"/stream-result\");\n \t\tRequestEntity<Void> request = RequestEntity.get(url).build();",
    "output": "Remove @Ignore on streamResulttest This test was fixed by previous commit that allows to JSON encode correctly streams with more than 2 elements"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java\n--- a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java\n@@ -45,7 +45,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-public class JsonObjectDecoder extends AbstractDecoder<DataBuffer> {\n+class JsonObjectDecoder extends AbstractDecoder<DataBuffer> {\n \n \tprivate static final int ST_CORRUPTED = -1;\n ",
    "output": "Make JsonObjectDecoder package private"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java\n@@ -18,6 +18,7 @@\n \n import java.io.IOException;\n import java.nio.channels.Channel;\n+import java.util.Objects;\n import java.util.concurrent.atomic.AtomicReference;\n import javax.servlet.WriteListener;\n \n@@ -169,11 +170,13 @@ private enum State {\n \t\t\t@Override\n \t\t\tvoid onSubscribe(AbstractResponseBodySubscriber subscriber,\n \t\t\t\t\tSubscription subscription) {\n-\t\t\t\tif (BackpressureUtils.validate(subscriber.subscription, subscription)) {\n+\t\t\t\tObjects.requireNonNull(subscription, \"Subscription cannot be null\");\n+\t\t\t\tif (subscriber.changeState(this, REQUESTED)) {\n \t\t\t\t\tsubscriber.subscription = subscription;\n-\t\t\t\t\tif (subscriber.changeState(this, REQUESTED)) {\n-\t\t\t\t\t\tsubscription.request(1);\n-\t\t\t\t\t}\n+\t\t\t\t\tsubscription.request(1);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tsuper.onSubscribe(subscriber, subscription);\n \t\t\t\t}\n \t\t\t}\n \t\t},",
    "output": "Make AbstractResponseBodySubscriber.onSubscribe thread-safe When there are simultaneous invocations of onSubscribe, only the first one should succeed, the rest should cancel the provided subscriptions"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -487,7 +487,7 @@ protected boolean isInvalidPath(String path) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n-\t\tif (path.contains(\"../\")) {\n+\t\tif (path.contains(\"..\")) {\n \t\t\tpath = StringUtils.cleanPath(path);\n \t\t\tif (path.contains(\"../\")) {\n \t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "Improve static resource path check"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -247,8 +247,11 @@ private static class ResponseBodySubscriber implements Subscriber<DataBuffer> {\n \n \t\tprivate volatile boolean completed = false;\n \n+\t\tprivate volatile boolean flushOnNext = false;\n+\n \t\tprivate Subscription subscription;\n \n+\n \t\tpublic ResponseBodySubscriber(ServletAsyncContextSynchronizer synchronizer,\n \t\t\t\tint bufferSize) {\n \t\t\tthis.synchronizer = synchronizer;\n@@ -321,6 +324,12 @@ public void onWritePossible() throws IOException {\n \t\t\t\tServletOutputStream output = synchronizer.getResponse().getOutputStream();\n \n \t\t\t\tboolean ready = output.isReady();\n+\n+\t\t\t\tif (flushOnNext) {\n+\t\t\t\t\tflush(output);\n+\t\t\t\t\tready = output.isReady();\n+\t\t\t\t}\n+\n \t\t\t\tlogger.trace(\"ready: \" + ready + \" buffer: \" + dataBuffer);\n \n \t\t\t\tif (ready) {\n@@ -370,9 +379,12 @@ private void flush(ServletOutputStream output) {\n \t\t\t\t\tlogger.trace(\"Flushing\");\n \t\t\t\t\ttry {\n \t\t\t\t\t\toutput.flush();\n+\t\t\t\t\t\tflushOnNext = false;\n \t\t\t\t\t}\n \t\t\t\t\tcatch (IOException ignored) {\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tflushOnNext = true;\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Fix Servlet flush Servlet flush will now occur on the next possible write if it cannot be done immediately"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java\n@@ -32,7 +32,7 @@\n import org.springframework.mock.env.MockPropertySource;\n import org.springframework.test.context.TestPropertySource;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.CoreMatchers.startsWith;\n import static org.junit.Assert.*;\n import static org.mockito.Matchers.*;",
    "output": "Fix ambiguous static import in TestPropertySourceUtilsTests"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java\n@@ -91,6 +91,10 @@ public void setApplicationContext(ApplicationContext applicationContext) {\n \t\tthis.applicationContext = applicationContext;\n \t}\n \n+\tprotected ApplicationContext getApplicationContext() {\n+\t\treturn this.applicationContext;\n+\t}\n+\n \n \t@Bean\n \tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {",
    "output": "Add protected method to reactive config"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java\n@@ -93,9 +93,7 @@ protected MultiValueMap<String, HttpCookie> initCookies() {\n \n \t@Override\n \tpublic Flux<DataBuffer> getBody() {\n-\t\tObservable<DataBuffer> content =\n-\t\t\t\tthis.request.getContent().map(dataBufferFactory::wrap);\n-\t\tcontent = content.concatWith(Observable.empty()); // See GH issue #58\n+\t\tObservable<DataBuffer> content = this.request.getContent().map(dataBufferFactory::wrap);\n \t\treturn RxJava1ObservableConverter.from(content);\n \t}\n ",
    "output": "Upgrade to RxJava 1.1.5 After the fix for ReactiveX/RxNettywe can remove the workaround to concatenate with an empty Observable for the request body and upgrade to the latest RxJava 1.1.5. Issues"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -89,9 +89,7 @@ protected MultiValueMap<String, HttpCookie> initCookies() {\n \n \t@Override\n \tpublic Flux<DataBuffer> getBody() {\n-\t\treturn this.channel.receive()\n-\t\t                   .retain() //FIXME Rogue reference holding\n-\t\t\t\t.map(dataBufferFactory::wrap);\n+\t\treturn this.channel.receive().retain().map(this.dataBufferFactory::wrap);\n \t}\n \n }",
    "output": "Remove FIXME on retain in ReactorServerHttpRequest The converters release so this is the right thing to do, not a temporary fix"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n@@ -80,7 +80,7 @@ public void setUp() throws Exception {\n \t\tthis.resolver = new RequestHeaderMethodArgumentResolver(conversionService, context.getBeanFactory());\n \n \t\t@SuppressWarnings(\"ConfusingArgumentToVarargsMethod\")\n-\t\tMethod method = ReflectionUtils.findMethod(getClass(), \"params\", null);\n+\t\tMethod method = ReflectionUtils.findMethod(getClass(), \"params\", (Class<?>[]) null);\n \t\tthis.paramNamedDefaultValueStringHeader = new SynthesizingMethodParameter(method, 0);\n \t\tthis.paramNamedValueStringArray = new SynthesizingMethodParameter(method, 1);\n \t\tthis.paramSystemProperty = new SynthesizingMethodParameter(method, 2);\n@@ -190,6 +190,7 @@ public void notFound() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void dateConversion() throws Exception {\n \t\tString rfc1123val = \"Thu, 21 Apr 2016 17:11:08 +0100\";\n \t\tthis.exchange.getRequest().getHeaders().add(\"name\", rfc1123val);",
    "output": "Fix compiler warnings"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java b/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java\n@@ -113,6 +113,13 @@ public void setEncoding(String encoding) {\n \t\tthis.encoding = encoding;\n \t}\n \n+\t/**\n+\t * Return the configured encoding for requests and/or responses\n+\t */\n+\tpublic String getEncoding() {\n+\t\treturn encoding;\n+\t}\n+\n \t/**\n \t * Set whether the configured {@link #setEncoding encoding} of this filter\n \t * is supposed to override existing request and response encodings.\n@@ -143,6 +150,13 @@ public void setForceRequestEncoding(boolean forceRequestEncoding) {\n \t\tthis.forceRequestEncoding = forceRequestEncoding;\n \t}\n \n+\t/**\n+\t * Return whether the encoding should be forced on requests\n+\t */\n+\tpublic boolean isForceRequestEncoding() {\n+\t\treturn forceRequestEncoding;\n+\t}\n+\n \t/**\n \t * Set whether the configured {@link #setEncoding encoding} of this filter\n \t * is supposed to override existing response encodings.\n@@ -155,6 +169,13 @@ public void setForceResponseEncoding(boolean forceResponseEncoding) {\n \t\tthis.forceResponseEncoding = forceResponseEncoding;\n \t}\n \n+\t/**\n+\t * Return whether the encoding should be forced on responses\n+\t */\n+\tpublic boolean isForceResponseEncoding() {\n+\t\treturn forceResponseEncoding;\n+\t}\n+\n \t@Override\n \tprotected void doFilterInternal(\n \t\t\tHttpServletRequest request, HttpServletResponse response, FilterChain filterChain)",
    "output": "Add convenient getters for force*Encoding attributes Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -191,6 +191,16 @@ public class MediaType extends MimeType implements Serializable {\n \t */\n \tpublic final static String TEXT_HTML_VALUE = \"text/html\";\n \n+\t/**\n+\t * Public constant media type for {@code text/markdown}.\n+\t */\n+\tpublic final static MediaType TEXT_MARKDOWN;\n+\n+\t/**\n+\t * A String equivalent of {@link MediaType#TEXT_MARKDOWN}.\n+\t */\n+\tpublic final static String TEXT_MARKDOWN_VALUE = \"text/markdown\";\n+\n \t/**\n \t * Public constant media type for {@code text/plain}.\n \t *  */\n@@ -230,6 +240,7 @@ public class MediaType extends MimeType implements Serializable {\n \t\tIMAGE_PNG = valueOf(IMAGE_PNG_VALUE);\n \t\tMULTIPART_FORM_DATA = valueOf(MULTIPART_FORM_DATA_VALUE);\n \t\tTEXT_HTML = valueOf(TEXT_HTML_VALUE);\n+\t\tTEXT_MARKDOWN = valueOf(TEXT_MARKDOWN_VALUE);\n \t\tTEXT_PLAIN = valueOf(TEXT_PLAIN_VALUE);\n \t\tTEXT_XML = valueOf(TEXT_XML_VALUE);\n \t}",
    "output": "Add text/markdown MediaType constant Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java\n--- a/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java\n@@ -245,7 +245,7 @@ public MergedContextConfiguration(Class<?> testClass, String[] locations, Class<\n \t\t\tMergedContextConfiguration parent) {\n \t\tthis(testClass, locations, classes, contextInitializerClasses, activeProfiles,\n \t\t\t\tpropertySourceLocations, propertySourceProperties,\n-\t\t\t\tCollections.<ContextCustomizer> emptySet(), contextLoader,\n+\t\t\t\tEMPTY_CONTEXT_CUSTOMIZERS, contextLoader,\n \t\t\t\tcacheAwareContextLoaderDelegate, parent);\n \t}\n ",
    "output": "Use the defined constant in MergedContextConfiguration"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n@@ -118,7 +118,7 @@ public Mono<ClientHttpResponse> execute() {\n \t\t\t\t\t\t\t\t\treturn channel.send(body);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\t\t\treturn channel.writeHeaders();\n+\t\t\t\t\t\t\t\t\treturn channel.sendHeaders();\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t});\n \t\t\t\t})",
    "output": "fix change issue on HttpChannel#writeHeaders to sendHeaders"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java\n@@ -17,6 +17,8 @@\n \n import java.net.URI;\n \n+import org.reactivestreams.Publisher;\n+\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n \n@@ -29,6 +31,8 @@ public interface ClientHttpRequestFactory {\n \n \t/**\n \t * Create a new {@link ClientHttpRequest} for the specified HTTP method, URI and headers\n+\t * <p>The returned request can be {@link ClientHttpRequest#setBody(Publisher) written to},\n+\t * and then executed by calling {@link ClientHttpRequest#execute()}\n \t *\n \t * @param httpMethod the HTTP method to execute\n \t * @param uri the URI to create a request for",
    "output": "Improve ClientHttpRequestFactory javadoc This commit underlines the fact that the request created by a ClientHttpRequestFactory should be augmented with a message body using the `ClientHttpRequest#setBody` method before it is executed"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java\n@@ -56,7 +56,7 @@ public RxNettyClientHttpResponse(HttpClientResponse<ByteBuf> response,\n \t\tthis.allocator = allocator;\n \t\tthis.response = response;\n \t\tthis.headers = new HttpHeaders();\n-\t\tthis.response.headerIterator().forEachRemaining(e -> this.headers.set(e.getKey(), e.getValue()));\n+\t\tthis.response.headerIterator().forEachRemaining(e -> this.headers.set(e.getKey().toString(), e.getValue().toString()));\n \t\tthis.cookies = initCookies(response);\n \t}\n ",
    "output": "Upgrade RxNetty to 0.5.2-SNAPSHOT and Tomcat to 8.0.33"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n@@ -359,14 +359,15 @@ private void scheduleSessionTask() {\n \t\t\tif (this.sessionCleanupTask != null) {\n \t\t\t\treturn;\n \t\t\t}\n-\t\t\tfinal List<String> removedSessionIds = new ArrayList<String>();\n \t\t\tthis.sessionCleanupTask = getTaskScheduler().scheduleAtFixedRate(new Runnable() {\n \t\t\t\t@Override\n \t\t\t\tpublic void run() {\n+\t\t\t\t\tList<String> removedIds = new ArrayList<String>();\n \t\t\t\t\tfor (SockJsSession session : sessions.values()) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tif (session.getTimeSinceLastActive() > getDisconnectDelay()) {\n \t\t\t\t\t\t\t\tsessions.remove(session.getId());\n+\t\t\t\t\t\t\t\tremovedIds.add(session.getId());\n \t\t\t\t\t\t\t\tsession.close();\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n@@ -375,9 +376,8 @@ public void run() {\n \t\t\t\t\t\t\tlogger.debug(\"Failed to close \" + session, ex);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tif (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) {\n-\t\t\t\t\t\tlogger.debug(\"Closed \" + removedSessionIds.size() + \" sessions \" + removedSessionIds);\n-\t\t\t\t\t\tremovedSessionIds.clear();\n+\t\t\t\t\tif (logger.isDebugEnabled() && !removedIds.isEmpty()) {\n+\t\t\t\t\t\tlogger.debug(\"Closed \" + removedIds.size() + \" sessions: \" + removedIds);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}, getDisconnectDelay());",
    "output": "Fix incomplete log message Commit 48236b from 2014 introduced a logging improvement to avoid logging each removed session per line and instead log one line at the end with all removed sessions ids. However that list of removed session ids wasn't populated. This commit fixes that. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n@@ -124,7 +124,7 @@ public void cookieManagerShared() throws Exception {\n \t\tassertThat(get(\"http://localhost/\"), equalTo(\"\"));\n \t\tCookie cookie = new Cookie(\"localhost\", \"cookie\", \"cookieManagerShared\");\n \t\totherDriver.getWebClient().getCookieManager().addCookie(cookie);\n-\t\tassertThat(get(\"http://localhost/\"), equalTo(\"cookieManagerShared\"));\n+\t\tassertThat(get(\"http://localhost/\"), containsString(\"cookieManagerShared\"));\n \t}\n \n ",
    "output": "Fix test that failed due to upgrade to HtmlUnit 2.20"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n@@ -160,7 +160,8 @@ public static void setField(Object targetObject, Class<?> targetClass, String na\n \t\tAssert.isTrue(targetObject != null || targetClass != null,\n \t\t\t\"Either targetObject or targetClass for the field must be specified\");\n \n-\t\tObject ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);\n+\t\tObject ultimateTargetObject = (targetObject == null ? null\n+\t\t\t\t: AopTestUtils.getUltimateTargetObject(targetObject));\n \n \t\tif (targetClass == null) {\n \t\t\ttargetClass = ultimateTargetObject.getClass();\n@@ -237,7 +238,8 @@ public static Object getField(Object targetObject, Class<?> targetClass, String\n \t\tAssert.isTrue(targetObject != null || targetClass != null,\n \t\t\t\"Either targetObject or targetClass for the field must be specified\");\n \n-\t\tObject ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);\n+\t\tObject ultimateTargetObject = (targetObject == null ? null\n+\t\t\t\t: AopTestUtils.getUltimateTargetObject(targetObject));\n \n \t\tif (targetClass == null) {\n \t\t\ttargetClass = ultimateTargetObject.getClass();",
    "output": "Fix bugs in ReflectionTestUtils related to proxies Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java\n@@ -45,7 +45,7 @@\n  */\n public class WebJarsResourceResolver extends AbstractResourceResolver {\n \n-\tprivate final static String WEBJARS_LOCATION = \"META-INF/resources/webjars\";\n+\tprivate final static String WEBJARS_LOCATION = \"META-INF/resources/webjars/\";\n \n \tprivate final static int WEBJARS_LOCATION_LENGTH = WEBJARS_LOCATION.length();\n ",
    "output": "Remove duplicate slash from resolved WebJar locations This commit updates the WEBJARS_LOCATION in WebJarResourceResolver to avoid getting duplicate slashes in resolved resources locations such as `/webjars//bootstrap/3.3.2/js/bootstrap.min.js`. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n@@ -124,7 +124,7 @@ public TestContextManager(TestContextBootstrapper testContextBootstrapper) {\n \t/**\n \t * Get the {@link TestContext} managed by this {@code TestContextManager}.\n \t */\n-\tprotected final TestContext getTestContext() {\n+\tpublic final TestContext getTestContext() {\n \t\treturn this.testContext;\n \t}\n ",
    "output": "Make TestContextManager.getTestContextpublic This commit changes the visibility of the getTestContextmethod in TestContextManager from 'protected' to 'public' in order to support test method injection in JUnit 5 and similar use cases. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java\n@@ -89,7 +89,7 @@ public ResultMatcher string(final String name, final String value) {\n \t\treturn new ResultMatcher() {\n \t\t\t@Override\n \t\t\tpublic void match(MvcResult result) {\n-\t\t\t\tassertEquals(\"Response header \" + name, result.getResponse().getHeader(name), value);\n+\t\t\t\tassertEquals(\"Response header \" + name, value, result.getResponse().getHeader(name));\n \t\t\t}\n \t\t};\n \t}",
    "output": "Fix HeaderResultMatchers#string(String, String) assert order Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java b/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java\n--- a/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java\n+++ b/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java\n@@ -0,0 +1,20 @@\n+package org.springframework.lang;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Indicates that the annotated element uses an API from the {@code sun.misc}\n+ * package.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 4.3\n+ */\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.TYPE})\n+@Documented\n+public @interface UsesSunMisc {\n+}",
    "output": "Add sun.misc annotation marker This commit adds an annotation that should be used to mark any usage of the `sun.misc` API"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n--- a/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n@@ -250,14 +250,15 @@ public int available() throws IOException {\n \t\t@Override\n \t\tpublic int read() {\n \t\t\treturn readInternal(\n-\t\t\t\t\tbuffer -> buffer.hasRemaining() ? buffer.get() & 0xFF : -1);\n+\t\t\t\t\tbuffer -> readableByteCount() > 0 ? buffer.get() & 0xFF : -1);\n \t\t}\n \n \t\t@Override\n \t\tpublic int read(byte[] bytes, int off, int len) throws IOException {\n \t\t\treturn readInternal(buffer -> {\n-\t\t\t\tif (buffer.hasRemaining()) {\n-\t\t\t\t\tint minLen = Math.min(len, buffer.remaining());\n+\t\t\t\tint count = readableByteCount();\n+\t\t\t\tif (count > 0) {\n+\t\t\t\t\tint minLen = Math.min(len, count);\n \t\t\t\t\tbuffer.get(bytes, off, minLen);\n \t\t\t\t\treturn minLen;\n \t\t\t\t}",
    "output": "Fix issue with DefaultDataBuffer.asInputStream"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java b/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java\n@@ -110,8 +110,7 @@ public void toString_verbosityVariesOnLogLevel() {\n \t\t\t\t\tps.toString(),\n \t\t\t\t\tequalTo(String.format(\"%s [name='%s']\",\n \t\t\t\t\t\t\tps.getClass().getSimpleName(),\n-\t\t\t\t\t\t\tname,\n-\t\t\t\t\t\t\tmap.size())));\n+\t\t\t\t\t\t\tname)));\n \t\t} finally {\n \t\t\tlogger.setLevel(original);\n \t\t}",
    "output": "Fix Format-string method arguments"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java\n@@ -131,13 +131,13 @@ public interface ConfigurableApplicationContext extends ApplicationContext, Life\n \tvoid addApplicationListener(ApplicationListener<?> listener);\n \n \t/**\n-\t * Register the given resource resolver with this application context,\n+\t * Register the given protocol resolver with this application context,\n \t * allowing for additional resource protocols to be handled.\n \t * <p>Any such resolver will be invoked ahead of this context's standard\n \t * resolution rules. It may therefore also override any default rules.\n \t * @since 4.3\n \t */\n-\tvoid addResourceResolver(ProtocolResolver protocolHandler);\n+\tvoid addProtocolResolver(ProtocolResolver resolver);\n \n \t/**\n \t * Load or refresh the persistent representation of the configuration,",
    "output": "Fix addProtocolResolver signature in ConfigurableApplicationContext"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java\n@@ -23,7 +23,6 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import io.netty.buffer.UnpooledByteBufAllocator;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import reactor.core.publisher.Mono;\n@@ -37,7 +36,7 @@\n import org.springframework.core.convert.ConversionService;\n import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.core.io.buffer.DataBufferAllocator;\n-import org.springframework.core.io.buffer.NettyDataBufferAllocator;\n+import org.springframework.core.io.buffer.DefaultDataBufferAllocator;\n import org.springframework.ui.ExtendedModelMap;\n import org.springframework.ui.ModelMap;\n import org.springframework.util.ObjectUtils;\n@@ -62,8 +61,7 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Initializin\n \n \tprivate ConversionService conversionService = new DefaultConversionService();\n \n-\tprivate DataBufferAllocator allocator =\n-\t\t\tnew NettyDataBufferAllocator(new UnpooledByteBufAllocator(false));\n+\tprivate DataBufferAllocator allocator = new DefaultDataBufferAllocator();\n \n \tprivate final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache =\n \t\t\tnew ConcurrentHashMap<>(64);",
    "output": "Use default buffer allocator in RequestMappingHandlerAdapter This commit removes RequestMappingHandlerAdapter's hard dependency on Netty by switching to the DefaultDataBufferAllocator"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -146,14 +146,18 @@ protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, Meth\n \n \t\tObject arg = readWithMessageConverters(inputMessage, methodParam, paramType);\n \t\tif (arg == null) {\n-\t\t\tif (methodParam.getParameterAnnotation(RequestBody.class).required()) {\n+\t\t\tif (checkRequired(methodParam)) {\n \t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" +\n \t\t\t\t\t\tmethodParam.getMethod().toGenericString());\n \t\t\t}\n \t\t}\n \t\treturn arg;\n \t}\n \n+\tprotected boolean checkRequired(MethodParameter methodParam) {\n+\t\treturn methodParam.getParameterAnnotation(RequestBody.class).required();\n+\t}\n+\n \t@Override\n \tpublic void handleReturnValue(Object returnValue, MethodParameter returnType,\n \t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)",
    "output": "Add protected method for required RequestBody"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n@@ -131,7 +131,7 @@ public RequestBodyPublisher(HttpServerExchange exchange,\n \t\t@Override\n \t\tpublic void subscribe(Subscriber<? super DataBuffer> subscriber) {\n \t\t\tif (subscriber == null) {\n-\t\t\t\tthrow Exceptions.spec_2_13_exception();\n+\t\t\t\tthrow Exceptions.argumentIsNullException();\n \t\t\t}\n \t\t\tif (this.subscriber != null) {\n \t\t\t\tsubscriber.onError(new IllegalStateException(\"Only one subscriber allowed\"));\n\ndiff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -27,6 +27,7 @@\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.ProcessorGroup;\n import reactor.core.publisher.Processors;\n+import reactor.core.timer.Timer;\n import reactor.rx.Stream;\n \n import org.springframework.core.io.buffer.DataBufferAllocator;",
    "output": "fix timer issues sync reactor-core"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -27,7 +27,6 @@\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.ProcessorGroup;\n import reactor.core.publisher.Processors;\n-import reactor.core.timer.Timers;\n import reactor.rx.Stream;\n \n import org.springframework.core.io.buffer.DataBufferAllocator;\n@@ -107,7 +106,7 @@ private class AsyncHandler implements HttpHandler {\n \t\t@Override\n \t\tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\t\treturn response.setBody(Stream.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n-\t\t\t                              .timer(Timers.global())\n+\t\t\t                              .timer(Timer.global())\n \t\t\t                              .throttleRequest(100)\n \t\t\t                              .dispatchOn(asyncGroup)\n \t\t\t                              .collect(allocator::allocateBuffer,",
    "output": "fix compile test issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java\n@@ -33,6 +33,7 @@\n import org.springframework.web.server.WebServerExchange;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n \n /**",
    "output": "Fix the build that bad boy @smaldini broke"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n@@ -149,7 +149,7 @@ public void match(ClientHttpRequest request) throws IOException, AssertionError\n \tpublic RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {\n \t\treturn new RequestMatcher() {\n \t\t\t@Override\n-\t\t\tpublic void match(ClientHttpRequest request) throws IOException, AssertionError {\n+\t\t\tpublic void match(final ClientHttpRequest request) throws IOException, AssertionError {\n \t\t\t\tHttpInputMessage inputMessage = new HttpInputMessage() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic InputStream getBody() throws IOException {",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n@@ -36,9 +36,9 @@\n import org.xnio.channels.StreamSinkChannel;\n import org.xnio.channels.StreamSourceChannel;\n import reactor.Mono;\n-import reactor.core.error.Exceptions;\n import reactor.core.subscriber.BaseSubscriber;\n import reactor.core.support.BackpressureUtils;\n+import reactor.core.support.Exceptions;\n \n import org.springframework.util.Assert;\n ",
    "output": "upgrade DependencyUtils package"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -111,6 +111,16 @@ public class MediaType extends MimeType implements Serializable {\n \t */\n \tpublic final static String APPLICATION_OCTET_STREAM_VALUE = \"application/octet-stream\";\n \n+\t/**\n+\t * Public constant media type for {@code application/pdf}.\n+\t *  */\n+\tpublic final static MediaType APPLICATION_PDF;\n+\n+\t/**\n+\t * A String equivalent of {@link MediaType#APPLICATION_PDF}.\n+\t */\n+\tpublic final static String APPLICATION_PDF_VALUE = \"application/pdf\";\n+\n \t/**\n \t * Public constant media type for {@code application/xhtml+xml}.\n \t *  */\n@@ -212,6 +222,7 @@ public class MediaType extends MimeType implements Serializable {\n \t\tAPPLICATION_JSON = valueOf(APPLICATION_JSON_VALUE);\n \t\tAPPLICATION_JSON_UTF8 = valueOf(APPLICATION_JSON_UTF8_VALUE);\n \t\tAPPLICATION_OCTET_STREAM = valueOf(APPLICATION_OCTET_STREAM_VALUE);\n+\t\tAPPLICATION_PDF = valueOf(APPLICATION_PDF_VALUE);\n \t\tAPPLICATION_XHTML_XML = valueOf(APPLICATION_XHTML_XML_VALUE);\n \t\tAPPLICATION_XML = valueOf(APPLICATION_XML_VALUE);\n \t\tIMAGE_GIF = valueOf(IMAGE_GIF_VALUE);",
    "output": "Add MediaType constants for application/pdf Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n@@ -138,7 +138,7 @@ public void setContentLength(int len) {\n \t// Overrides Servlet 3.1 setContentLengthLong(long) at runtime\n \tpublic void setContentLengthLong(long len) {\n \t\tif (len > Integer.MAX_VALUE) {\n-\t\t\tthrow new IllegalArgumentException(\"Content-Length exceeds ShallowEtagHeaderFilter's maximum (\" +\n+\t\t\tthrow new IllegalArgumentException(\"Content-Length exceeds ContentCachingResponseWrapper's maximum (\" +\n \t\t\t\t\tInteger.MAX_VALUE + \"): \" + len);\n \t\t}\n \t\tint lenInt = (int) len;",
    "output": "Improve Content-Length exception message In case ShallowEtagHeaderFilter is not used, the message was confusing"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -132,8 +132,7 @@ private List<Mono<Object>> resolveArguments(ServerHttpRequest request, Object...\n \t\t\t\t\t\t\t.orElseThrow(() -> getArgError(\"No resolver for \", parameter, null));\n \t\t\t\t\ttry {\n \t\t\t\t\t\treturn resolver.resolveArgument(parameter, request)\n-\t\t\t\t\t\t\t\t// TODO Add a defaultIfEmpty alias to Mono to avoid conversion to Flux\n-\t\t\t\t\t\t\t\t.flux().defaultIfEmpty(NO_VALUE).next()\n+\t\t\t\t\t\t\t\t.defaultIfEmpty(NO_VALUE)\n \t\t\t\t\t\t\t\t.otherwise(ex -> Mono.error(getArgError(\"Error resolving \", parameter, ex)));\n \t\t\t\t\t}\n \t\t\t\t\tcatch (Exception ex) {",
    "output": "Use Mono#defaultIfEmpty instead of Flux#defaultIfEmpty"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n@@ -33,6 +33,7 @@\n  * @author Keesun Baik\n  * @author Rossen Stoyanchev\n  * @author Sebastien Deleuze\n+ * @author Brian Clozel\n  * @since 3.2\n  */\n public class StatusResultMatchers {\n@@ -561,6 +562,14 @@ public ResultMatcher isRequestHeaderFieldsTooLarge() {\n \t\treturn matcher(HttpStatus.valueOf(431));\n \t}\n \n+\t/**\n+\t * Assert the response status code is {@code HttpStatus.UNAVAILABLE_FOR_LEGAL_REASONS} (451).\n+\t * @since 4.3\n+\t */\n+\tpublic ResultMatcher isUnavailableForLegalReasons() {\n+\t\treturn matcher(HttpStatus.valueOf(451));\n+\t}\n+\n \t/**\n \t * Assert the response status code is {@code HttpStatus.INTERNAL_SERVER_ERROR} (500).\n \t */",
    "output": "Add missing StatusResultMatcher for HTTP Status 451 Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java\n@@ -20,8 +20,6 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.HttpMediaTypeNotAcceptableException;\n import org.springframework.web.ResponseStatusException;\n@@ -45,7 +43,7 @@ public void setUp() throws Exception {\n \n \t@Test\n \tpublic void handlerNotFound() throws Exception {\n-\t\tThrowable ex = new HandlerNotFoundException(HttpMethod.GET, \"/path\", new HttpHeaders());\n+\t\tThrowable ex = new HandlerNotFoundException();\n \t\tex = this.mapper.apply(ex);\n \n \t\tassertEquals(ResponseStatusException.class, ex.getClass());",
    "output": "Fix test failure"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java\n@@ -53,7 +53,7 @@ public void setUp() throws Exception {\n \n \t@Test\n \tpublic void handleErrorSignal() throws Exception {\n-\t\tHttpExceptionHandler exceptionHandler = new UnresolvedExceptionHandler();\n+\t\tHttpExceptionHandler exceptionHandler = new HttpStatusExceptionHandler(HttpStatus.INTERNAL_SERVER_ERROR);\n \t\tHttpHandler targetHandler = new TestHttpHandler(new IllegalStateException(\"boo\"));\n \t\tHttpHandler handler = new ErrorHandlingHttpHandler(targetHandler, exceptionHandler);\n ",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java b/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java\n@@ -25,7 +25,6 @@\n import org.apache.commons.logging.LogFactory;\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n-import reactor.io.buffer.Buffer;\n \n import org.springframework.util.Assert;\n \n@@ -88,9 +87,10 @@ public void onWritePossible() throws IOException {\n \n \t\tif (ready) {\n \t\t\tif (this.buffer != null) {\n-\t\t\t\toutput.write(new Buffer(this.buffer).asBytes());\n+\t\t\t\tbyte[] bytes = new byte[this.buffer.remaining()];\n+\t\t\t\tthis.buffer.get(bytes);\n \t\t\t\tthis.buffer = null;\n-\n+\t\t\t\toutput.write(bytes);\n \t\t\t\tif (!subscriberComplete) {\n \t\t\t\t\tthis.subscription.request(1);\n \t\t\t\t}",
    "output": "Remove isolated use of Reactor Buffer"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -63,7 +63,7 @@ public Publisher<Object> invokeForRequest(ReactiveServerHttpRequest request,\n \t\tList<Publisher<Object>> argPublishers = getMethodArguments(request, providedArgs);\n \n \t\tPublisher<Object[]> argValues = (!argPublishers.isEmpty() ?\n-\t\t\t\tPublishers.<Tuple, Object[]>zip(argPublishers, this::unwrapOptionalArgValues) :\n+\t\t\t\tPublishers.zip(argPublishers, this::unwrapOptionalArgValues) :\n \t\t\t\tPublishers.just(new Object[0]));\n \n \t\treturn Publishers.map(argValues, args -> {",
    "output": "Change to Definitive generic signature for Publishers.zip"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -26,7 +26,6 @@\n import org.reactivestreams.Publisher;\n import reactor.Publishers;\n import reactor.fn.tuple.Tuple;\n-import reactor.rx.Streams;\n \n import org.springframework.core.DefaultParameterNameDiscoverer;\n import org.springframework.core.GenericTypeResolver;\n@@ -64,7 +63,7 @@ public Publisher<Object> invokeForRequest(ReactiveServerHttpRequest request,\n \t\tList<Publisher<Object>> argPublishers = getMethodArguments(request, providedArgs);\n \n \t\tPublisher<Object[]> argValues = (!argPublishers.isEmpty() ?\n-\t\t\t\tStreams.zip(argPublishers, this::unwrapOptionalArgValues) :\n+\t\t\t\tPublishers.zip(argPublishers, this::unwrapOptionalArgValues) :\n \t\t\t\tPublishers.just(new Object[0]));\n \n \t\treturn Publishers.map(argValues, args -> {",
    "output": "Use Publishers.zip instead of Streams.zip"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -574,7 +574,7 @@ private void copyRange(InputStream in, OutputStream out, long start, long end) t\n \t\t\t\tout.write(buffer, 0, (int) bytesToCopy);\n \t\t\t\tbytesToCopy = 0;\n \t\t\t}\n-\t\t\tif (bytesRead < buffer.length) {\n+\t\t\tif (bytesRead == -1) {\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}",
    "output": "Fix inputstream reading for HTTP range requests Prior to this commit, range requests would be served by ResourceHttpRequestHandler by partially reading the inputstream of static resources. In case of resources contained in ZIP/JAR containers, InputStreams may not fill the entire read buffer when calling `inputStream.read(byte[])`. This was the case when using Spring Boot's ZipInflaterInputStream - this would then not read the entire file content and would close the response without writing the expected body length indicated in the \"Content-Length\" header. This commit makes sure that the whole resource is read. Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java\n@@ -66,27 +66,6 @@ protected EhCacheCache getCache() {\n \tprotected Ehcache getNativeCache() {\n \t\treturn nativeCache;\n \t}\n-\t@Test\n-\tpublic void testCachePut() throws Exception {\n-\t\tObject key = \"enescu\";\n-\t\tObject value = \"george\";\n-\n-\t\tassertNull(cache.get(key));\n-\t\tassertNull(cache.get(key, String.class));\n-\t\tassertNull(cache.get(key, Object.class));\n-\n-\t\tcache.put(key, value);\n-\t\tassertEquals(value, cache.get(key).get());\n-\t\tassertEquals(value, cache.get(key, String.class));\n-\t\tassertEquals(value, cache.get(key, Object.class));\n-\t\tassertEquals(value, cache.get(key, null));\n-\n-\t\tcache.put(key, null);\n-\t\tassertNotNull(cache.get(key));\n-\t\tassertNull(cache.get(key).get());\n-\t\tassertNull(cache.get(key, String.class));\n-\t\tassertNull(cache.get(key, Object.class));\n-\t}\n \n \t@Test\n \tpublic void testExpiredElements() throws Exception {",
    "output": "Remove test duplication"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -51,6 +51,10 @@ public abstract class ReflectionUtils {\n \t */\n \tprivate static final String CGLIB_RENAMED_METHOD_PREFIX = \"CGLIB$\";\n \n+\tprivate static final Method[] NO_METHODS = {};\n+\n+\tprivate static final Field[] NO_FIELDS = {};\n+\n \t/**\n \t * Cache for {@link Class#getDeclaredMethods()} plus equivalent default methods\n \t * from Java 8 based interfaces, allowing for fast iteration.\n@@ -617,7 +621,7 @@ private static Method[] getDeclaredMethods(Class<?> clazz) {\n \t\t\telse {\n \t\t\t\tresult = declaredMethods;\n \t\t\t}\n-\t\t\tdeclaredMethodsCache.put(clazz, result);\n+\t\t\tdeclaredMethodsCache.put(clazz, (result.length == 0 ? NO_METHODS : result));\n \t\t}\n \t\treturn result;\n \t}\n@@ -705,7 +709,7 @@ private static Field[] getDeclaredFields(Class<?> clazz) {\n \t\tField[] result = declaredFieldsCache.get(clazz);\n \t\tif (result == null) {\n \t\t\tresult = clazz.getDeclaredFields();\n-\t\t\tdeclaredFieldsCache.put(clazz, result);\n+\t\t\tdeclaredFieldsCache.put(clazz, (result.length == 0 ? NO_FIELDS : result));\n \t\t}\n \t\treturn result;\n \t}",
    "output": "Use constants when caching empty arrays Reduce cache memory consumption by using a single constant for empty arrays"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -201,6 +201,9 @@ public static boolean isAnnotated(AnnotatedElement element, final String annotat\n \t\tAssert.notNull(element, \"AnnotatedElement must not be null\");\n \t\tAssert.hasLength(annotationName, \"annotationName must not be null or empty\");\n \n+\t\tif (element.getAnnotations().length == 0) {\n+\t\t\treturn false;\n+\t\t}\n \t\treturn Boolean.TRUE.equals(searchWithGetSemantics(element, annotationName, new SimpleAnnotationProcessor<Boolean>() {\n \t\t\t@Override\n \t\t\tpublic Boolean process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {\n@@ -331,6 +334,9 @@ public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement elem\n \tpublic static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, String annotationName,\n \t\t\tboolean classValuesAsString, boolean nestedAnnotationsAsMap) {\n \n+\t\tif (element.getAnnotations().length == 0) {\n+\t\t\treturn null;\n+\t\t}\n \t\tAnnotationAttributes attributes = searchWithGetSemantics(element, annotationName,\n \t\t\t\tnew MergedAnnotationAttributesProcessor(annotationName, classValuesAsString, nestedAnnotationsAsMap));\n \t\tAnnotationUtils.postProcessAnnotationAttributes(element, attributes, classValuesAsString, nestedAnnotationsAsMap);",
    "output": "Add shortcuts for elements with no annotations Improve the performance of the `getMergedAnnotationAttributes` and `isAnnotated` methods in `AnnotatedElementUtils` by returning immediately when the element had no annotations. Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n@@ -26,7 +26,7 @@\n  *\n  * @author Arjen Poutsma\n  */\n-public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage, Closeable {\n+public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage {\n \n \t/**\n \t * Return the HTTP status code of the response.\n@@ -46,10 +46,4 @@ public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage, Cl\n \t */\n \tString getStatusText();\n \n-\t/**\n-\t * Close this response, freeing any resources created.\n-\t */\n-\t@Override\n-\tvoid close();\n-\n }",
    "output": "Remove Closeable implementation"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n@@ -17,7 +17,6 @@\n package org.springframework.http.client;\n \n import java.io.Closeable;\n-import java.io.IOException;\n \n import org.springframework.http.HttpStatus;\n import org.springframework.http.ReactiveHttpInputMessage;\n@@ -32,23 +31,20 @@ public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage, Cl\n \t/**\n \t * Return the HTTP status code of the response.\n \t * @return the HTTP status as an HttpStatus enum value\n-\t * @throws IOException in case of I/O errors\n \t */\n-\tHttpStatus getStatusCode() throws IOException;\n+\tHttpStatus getStatusCode();\n \n \t/**\n \t * Return the HTTP status code of the response as integer\n \t * @return the HTTP status as an integer\n-\t * @throws IOException in case of I/O errors\n \t */\n-\tint getRawStatusCode() throws IOException;\n+\tint getRawStatusCode();\n \n \t/**\n \t * Return the HTTP status text of the response.\n \t * @return the HTTP status text\n-\t * @throws IOException in case of I/O errors\n \t */\n-\tString getStatusText() throws IOException;\n+\tString getStatusText();\n \n \t/**\n \t * Close this response, freeing any resources created.",
    "output": "Remove IOException declaration"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -691,7 +691,7 @@ public void testViewControllersDefaultConfig() {\n \n \t@Test\n \tpublic void testContentNegotiationManager() throws Exception {\n-\t\tloadBeanDefinitions(\"mvc-config-content-negotiation-manager.xml\", 14);\n+\t\tloadBeanDefinitions(\"mvc-config-content-negotiation-manager.xml\", 15);\n \n \t\tRequestMappingHandlerMapping mapping = appContext.getBean(RequestMappingHandlerMapping.class);\n \t\tContentNegotiationManager manager = mapping.getContentNegotiationManager();",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java\n--- a/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java\n@@ -17,6 +17,7 @@\n package org.springframework.reactive.web.dispatch;\n \n import org.reactivestreams.Publisher;\n+import reactor.Publishers;\n \n import org.springframework.core.Ordered;\n import org.springframework.reactive.web.http.ServerHttpRequest;\n@@ -44,6 +45,6 @@ public boolean supports(HandlerResult result) {\n \n \t@Override\n \tpublic Publisher<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {\n-\t\treturn (Publisher<Void>)result.getValue();\n+\t\treturn Publishers.completable((Publisher<?>)result.getValue());\n \t}\n }",
    "output": "Fix SimpleHandlerResultHandler by using Publishers.completable"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n@@ -216,8 +216,14 @@ public Object createdEndpoint(ServerEndpointRegistration registration, Component\n \t\t\tObject sessionListener = accessor.getPropertyValue(\"sessionListener\");\n \t\t\tObject clusterContext = accessor.getPropertyValue(\"clusterContext\");\n \t\t\ttry {\n-\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n-\t\t\t\t\t\t\"/\",  registration.getConfigurator(), sessionListener, clusterContext, null);\n+\t\t\t\tif (constructor.getParameterCount() == 9) {\n+\t\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n+\t\t\t\t\t\t\t\"/\", registration.getConfigurator(), sessionListener, clusterContext, null);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n+\t\t\t\t\t\t\t\"/\", registration.getConfigurator(), sessionListener, clusterContext, null, Boolean.TRUE);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new HandshakeFailureException(\"Failed to register \" + registration, ex);",
    "output": "Fix websocket compatibility with Tyrus 1.9 - 1.12 As of Tyrus 1.9, `TyrusEndpointWrapper`'s constructor has a new Boolean argument (which is mandatory). This commit reflectively chooses the right constructor method for Tyrus 1.9+ versions. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.core;\n \n-import java.io.ObjectStreamException;\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.Constructor;\n@@ -859,7 +858,7 @@ VariableResolver asVariableResolver() {\n \t/**\n \t * Custom serialization support for {@link #NONE}.\n \t */\n-\tprivate Object readResolve() throws ObjectStreamException {\n+\tprivate Object readResolve() {\n \t\treturn (this.type == null ? NONE : this);\n \t}\n ",
    "output": "Remove superfluous ObjectStreamException declaration"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java\n@@ -588,7 +588,7 @@ public void closePooledResource(Object pooled) {\n \t\tpublic void httpClientConnect(UndertowClient httpClient, ClientCallback<ClientConnection> listener, URI uri,\n \t\t\t\tXnioWorker worker, OptionMap options) {\n \t\t\tReflectionUtils.invokeMethod(httpClientConnectCallbackMethod, httpClient, listener, uri,\n-\t\t\t\t\tthis.undertowBufferPool, worker, options);\n+\t\t\t\t\tworker, this.undertowBufferPool, options);\n \t\t}\n \n \t\t@Override",
    "output": "Fix undertow httpClientConnect invoke signature Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java\n@@ -38,8 +38,8 @@ public static Object[][] arguments() {\n \t\treturn new Object[][] {\n \t\t\t\t{new JettyHttpServer()},\n \t\t\t\t{new TomcatHttpServer()},\n-\t\t\t\t{new ReactorHttpServer()},\n-\t\t\t\t{new RxNettyHttpServer()}\n+\t\t\t\t{new RxNettyHttpServer()},\n+\t\t        {new ReactorHttpServer()}\n \t\t};\n \t}\n ",
    "output": "Upgrade to 2.0.6 snapshot for Header sent too soon fix, which allows DispatcherHandler to assign content-type correctly"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -163,14 +163,9 @@ protected boolean isEligibleForEtag(HttpServletRequest request, HttpServletRespo\n \t * @return the ETag header value\n \t * @see org.springframework.util.DigestUtils\n \t */\n-\tprotected String generateETagHeaderValue(InputStream inputStream) {\n+\tprotected String generateETagHeaderValue(InputStream inputStream) throws IOException {\n \t\tStringBuilder builder = new StringBuilder(\"\\\"0\");\n-\t\ttry {\n-\t\t\tDigestUtils.appendMd5DigestAsHex(inputStream, builder);\n-\t\t}\n-\t\tcatch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n+\t\tDigestUtils.appendMd5DigestAsHex(inputStream, builder);\n \t\tbuilder.append('\"');\n \t\treturn builder.toString();\n \t}\n@@ -184,7 +179,7 @@ protected String generateETagHeaderValue(InputStream inputStream) {\n \t * @since 4.2\n \t */\n \tpublic static void disableContentCaching(ServletRequest request) {\n-\t\tAssert.notNull(request);\n+\t\tAssert.notNull(request, \"ServletRequest must not be null\");\n \t\trequest.setAttribute(STREAMING_ATTRIBUTE, true);\n \t}\n ",
    "output": "Fix generateETagHeaderValue's IOException handling Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -1514,7 +1514,7 @@ static List<String> getAttributeAliasNames(Method attribute) {\n \t\tAssert.notNull(attribute, \"attribute must not be null\");\n \n \t\tAliasDescriptor descriptor = AliasDescriptor.from(attribute);\n-\t\treturn (descriptor == null ? Collections.emptyList() : descriptor.getAttributeAliasNames());\n+\t\treturn (descriptor == null ? Collections.<String> emptyList() : descriptor.getAttributeAliasNames());\n \t}\n \n \t/**",
    "output": "Make AnnotationUtils Java 6 source compatible"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.messaging.tcp.reactor;\n \n-import reactor.fn.Functions;\n import reactor.io.net.ChannelStream;\n import reactor.rx.Promise;\n import reactor.rx.Promises;\n@@ -58,13 +57,15 @@ public ListenableFuture<Void> send(Message<P> message) {\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void onReadInactivity(Runnable runnable, long inactivityDuration) {\n-\t\tthis.channelStream.on().readIdle(inactivityDuration, Functions.<Void>consumer(runnable));\n+\t\tthis.channelStream.on().readIdle(inactivityDuration, reactor.fn.Functions.<Void>consumer(runnable));\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void onWriteInactivity(Runnable runnable, long inactivityDuration) {\n-\t\tthis.channelStream.on().writeIdle(inactivityDuration, Functions.<Void>consumer(runnable));\n+\t\tthis.channelStream.on().writeIdle(inactivityDuration, reactor.fn.Functions.<Void>consumer(runnable));\n \t}\n \n \t@Override",
    "output": "Upgrade to Reactor 2.0.5"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java b/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java\n--- a/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java\n@@ -49,6 +49,7 @@\n  * @author Rob Harrop\n  * @author Juergen Hoeller\n  * @author Stephane Nicoll\n+ * @author Kazuki Shimizu\n  * @since 4.2\n  * @see GenericObjectPool\n  * @see #createObjectPool()\n@@ -66,7 +67,7 @@ public class CommonsPool2TargetSource extends AbstractPoolingTargetSource implem\n \n \tprivate int minIdle = GenericObjectPoolConfig.DEFAULT_MIN_IDLE;\n \n-\tprivate long maxWait = GenericObjectPoolConfig.DEFAULT_MAX_TOTAL;\n+\tprivate long maxWait = GenericObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS;\n \n \tprivate long timeBetweenEvictionRunsMillis = GenericObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;\n \n@@ -126,7 +127,7 @@ public int getMinIdle() {\n \t/**\n \t * Set the maximum waiting time for fetching an object from the pool.\n \t * Default is -1, waiting forever.\n-\t * @see GenericObjectPool#setMaxTotal\n+\t * @see GenericObjectPool#setMaxWaitMillis\n \t */\n \tpublic void setMaxWait(long maxWait) {\n \t\tthis.maxWait = maxWait;",
    "output": "Fix default value of CommonsPool2TargetSource#maxWait Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -583,15 +583,16 @@ public boolean supports(Type genericType) {\n \t\t\tif (JAXBElement.class == parameterizedType.getRawType() &&\n \t\t\t\t\tparameterizedType.getActualTypeArguments().length == 1) {\n \t\t\t\tboolean isJdk6 = (org.springframework.core.JdkVersion.getMajorJavaVersion() <= org.springframework.core.JdkVersion.JAVA_16);\n+\t\t\t\tboolean isJdk7 = (org.springframework.core.JdkVersion.getMajorJavaVersion() >= org.springframework.core.JdkVersion.JAVA_17);\n \t\t\t\tType typeArgument = parameterizedType.getActualTypeArguments()[0];\n \t\t\t\tif (typeArgument instanceof Class) {\n \t\t\t\t\tClass<?> classArgument = (Class<?>) typeArgument;\n-\t\t\t\t\tif (isJdk6 && classArgument.isArray()) {\n-\t\t\t\t\t\treturn (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||\n-\t\t\t\t\t\t\t\tsupportsInternal(classArgument, false));\n+\t\t\t\t\tif (isJdk7 && classArgument.isArray()) {\n+\t\t\t\t\t\treturn (classArgument.getComponentType() == Byte.TYPE);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n-\t\t\t\t\t\treturn (classArgument.getComponentType() == Byte.TYPE);\n+\t\t\t\t\t\treturn (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||\n+\t\t\t\t\t\t\t\tsupportsInternal(classArgument, false));\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse if (isJdk6 && typeArgument instanceof GenericArrayType) {",
    "output": "Fix regression in Jaxb2Marshaller regarding JdkVersion Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/Order.java b/spring-core/src/main/java/org/springframework/core/annotation/Order.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/Order.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/Order.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.core.annotation;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -47,6 +48,7 @@\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})\n+@Documented\n public @interface Order {\n \n \t/**",
    "output": "Make @Order @Documented"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java\n@@ -128,11 +128,8 @@ public void checkFileLocation() throws Exception {\n \t@Test\n \tpublic void resolvePathRootResource() throws Exception {\n \t\tResource webjarsLocation = new ClassPathResource(\"/META-INF/resources/webjars/\", PathResourceResolver.class);\n-\t\tResource actual = this.resolver.resolveResource(null, \"\", Arrays.asList(webjarsLocation), null);\n \t\tString path = this.resolver.resolveUrlPathInternal(\"\", Arrays.asList(webjarsLocation), null);\n \n-\t\tassertNotNull(actual);\n-\t\tassertTrue(actual.exists() && actual.isReadable());\n \t\tassertNull(path);\n \t}\n }",
    "output": "Fix tests Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -94,7 +94,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \tprivate void updateResponse(HttpServletRequest request, HttpServletResponse response) throws IOException {\n \t\tContentCachingResponseWrapper responseWrapper =\n \t\t\t\tWebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);\n-\t\tAssert.notNull(responseWrapper, \"ShallowEtagResponseWrapper not found\");\n+\t\tAssert.notNull(responseWrapper, \"ContentCachingResponseWrapper not found\");\n \t\tHttpServletResponse rawResponse = (HttpServletResponse) responseWrapper.getResponse();\n \t\tint statusCode = responseWrapper.getStatusCode();\n ",
    "output": "Fix error message typo in ShallowEtagHeaderFilter Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n@@ -214,12 +214,12 @@ public void handleIframeRequest() throws Exception {\n \t\tassertTrue(this.servletResponse.getContentAsString().startsWith(\"<!DOCTYPE html>\\n\"));\n \t\tassertEquals(490, this.servletResponse.getContentLength());\n \t\tassertEquals(\"no-store, no-cache, must-revalidate, max-age=0\", this.response.getHeaders().getCacheControl());\n-\t\tassertEquals(\"\\\"06b486b3208b085d9e3220f456a6caca4\\\"\", this.response.getHeaders().getETag());\n+\t\tassertEquals(\"\\\"0096cbd37f2a5218c33bb0826a7c74cbf\\\"\", this.response.getHeaders().getETag());\n \t}\n \n \t@Test\n \tpublic void handleIframeRequestNotModified() throws Exception {\n-\t\tthis.servletRequest.addHeader(\"If-None-Match\", \"\\\"06b486b3208b085d9e3220f456a6caca4\\\"\");\n+\t\tthis.servletRequest.addHeader(\"If-None-Match\", \"\\\"0096cbd37f2a5218c33bb0826a7c74cbf\\\"\");\n \t\tresetResponseAndHandleRequest(\"GET\", \"/echo/iframe.html\", HttpStatus.NOT_MODIFIED);\n \t}\n ",
    "output": "Fix SockJsServiceTests Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -81,7 +81,7 @@ public abstract class AbstractSockJsService implements SockJsService, CorsConfig\n \n \tprivate String name = \"SockJSService@\" + ObjectUtils.getIdentityHexString(this);\n \n-\tprivate String clientLibraryUrl = \"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\";\n+\tprivate String clientLibraryUrl = \"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js\";\n \n \tprivate int streamBytesLimit = 128 * 1024;\n \n@@ -134,7 +134,7 @@ public String getName() {\n \t * server. Since the iframe needs to load the SockJS javascript client library,\n \t * this property allows specifying where to load it from.\n \t * <p>By default this is set to point to\n-\t * \"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\".\n+\t * \"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js\".\n \t * However, it can also be set to point to a URL served by the application.\n \t * <p>Note that it's possible to specify a relative URL in which case the URL\n \t * must be relative to the iframe URL. For example assuming a SockJS endpoint",
    "output": "Upgrade AbstractSockJsService and ref doc to SockJS client 1.0.0 Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java\n@@ -101,7 +101,7 @@ protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, Http\n \t\t\treason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());\n \t\t}\n \t\tif (!StringUtils.hasLength(reason)) {\n-\t\t\tresponse.sendError(statusCode);\n+\t\t\tresponse.setStatus(statusCode);\n \t\t}\n \t\telse {\n \t\t\tresponse.sendError(statusCode, reason);",
    "output": "Use .setStatus in ResponseStatusExceptionResolver Before this change ResponseStatusExceptionResolver always used .sendError despite the javadoc on @ResponseStatus#code. This was perhaps justifiable from a HandlerExceptionResolver. Nevertheless .setStatus should be more REST API friendly while still marking the response as an error. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n@@ -747,7 +747,7 @@ else if (this.pattern.charAt(pos) == '*') {\n \t\t\t\t\t\t\tthis.doubleWildcards++;\n \t\t\t\t\t\t\tpos += 2;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\telse if (!this.pattern.substring(pos - 1).equals(\".*\")) {\n+\t\t\t\t\t\telse if (pos > 0 && !this.pattern.substring(pos - 1).equals(\".*\")) {\n \t\t\t\t\t\t\tthis.singleWildcards++;\n \t\t\t\t\t\t\tpos++;\n \t\t\t\t\t\t}\n\ndiff --git a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -479,6 +479,10 @@ public void patternComparator() {\n \n \t\t// longer is better\n \t\tassertEquals(1, comparator.compare(\"/hotels\", \"/hotels2\"));\n+\t\t\n+\t\t//SPR-13139\n+\t\tassertEquals(-1, comparator.compare(\"*\", \"*/**\"));\n+\t\tassertEquals(1, comparator.compare(\"*/**\", \"*\"));\n \t}\n \n \t@Test",
    "output": "Fix exception in AntPathMatcher for leading * Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java b/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java\n@@ -44,6 +44,7 @@\n  * @author Rob Harrop\n  * @author Chris Beams\n  */\n+@SuppressWarnings(\"deprecation\")\n public class CommonsPoolTargetSourceTests {\n \n \t/**",
    "output": "Remove deprecated warnings"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java\n@@ -33,6 +33,7 @@ protected ClientHttpRequestFactory createRequestFactory() {\n \t@Override\n \t@Test\n \tpublic void httpMethods() throws Exception {\n+\t\tsuper.httpMethods();\n \t\tassertHttpMethod(\"patch\", HttpMethod.PATCH);\n \t}\n ",
    "output": "Add missing super in test"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n@@ -20,7 +20,6 @@\n import org.aspectj.lang.annotation.After;\n import org.aspectj.lang.annotation.Aspect;\n import org.aspectj.lang.annotation.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.beans.factory.support.DefaultListableBeanFactory;",
    "output": "Remove superfluous @Ignore import Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n@@ -89,7 +89,7 @@ public JsonPathExpectationsHelper(String expression, Object... args) {\n \t@SuppressWarnings(\"unchecked\")\n \tpublic <T> void assertValue(String content, Matcher<T> matcher) throws ParseException {\n \t\tT value = (T) evaluateJsonPath(content);\n-\t\tassertThat(\"JSON path\" + this.expression, value, matcher);\n+\t\tassertThat(\"JSON path \" + this.expression, value, matcher);\n \t}\n \n \tprivate Object evaluateJsonPath(String content) throws ParseException  {",
    "output": "Fix missing space in assertion message"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java\n@@ -40,6 +40,7 @@\n import org.springframework.messaging.Message;\n import org.springframework.messaging.MessageDeliveryException;\n import org.springframework.messaging.converter.MessageConversionException;\n+import org.springframework.messaging.converter.StringMessageConverter;\n import org.springframework.messaging.simp.stomp.StompSession.Receiptable;\n import org.springframework.messaging.simp.stomp.StompSession.Subscription;\n import org.springframework.messaging.support.MessageBuilder;\n@@ -85,6 +86,7 @@ public void setUp() throws Exception {\n \t\tthis.sessionHandler = mock(StompSessionHandler.class);\n \t\tthis.connectHeaders = new StompHeaders();\n \t\tthis.session = new DefaultStompSession(this.sessionHandler, this.connectHeaders);\n+\t\tthis.session.setMessageConverter(new StringMessageConverter());\n \n \t\tSettableListenableFuture<Void> future = new SettableListenableFuture<>();\n \t\tfuture.set(null);",
    "output": "Fix failing tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n@@ -24,5 +24,5 @@\n  * @author Sam Brannen\n  * @since 4.2\n  */\n-interface SynthesizedAnnotation {\n+public interface SynthesizedAnnotation {\n }",
    "output": "Make SynthetizedAnnotation public Enable public visibility on SynthetizedAnnotation to allow annotation outside its package to be proxied properly. This commit is pending a unit test that actually reproduces the problem. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -648,7 +648,7 @@ else if (Map.class.isAssignableFrom(type)) {\n \t\t\t\treturn CollectionFactory.createMap(type, (keyDesc != null ? keyDesc.getType() : null), 16);\n \t\t\t}\n \t\t\telse {\n-\t\t\t\treturn type.newInstance();\n+\t\t\t\treturn BeanUtils.instantiate(type);\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Use BeanUtils to instantiate target type Use BeanUtils.instantiate(Class<?>) instead of a raw call to type.newInstanceas the former has more checks. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/MethodWriter.java b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java\n--- a/spring-core/src/main/java/org/springframework/asm/MethodWriter.java\n+++ b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java\n@@ -2706,11 +2706,13 @@ private void resizeInstructions() {\n                 l = l.successor;\n             }\n             // Update the offsets in the uninitialized types\n-            for (i = 0; i < cw.typeTable.length; ++i) {\n-                Item item = cw.typeTable[i];\n-                if (item != null && item.type == ClassWriter.TYPE_UNINIT) {\n-                    item.intVal = getNewOffset(allIndexes, allSizes, 0,\n-                            item.intVal);\n+            if (cw.typeTable != null) {\n+                for (i = 0; i < cw.typeTable.length; ++i) {\n+                    Item item = cw.typeTable[i];\n+                    if (item != null && item.type == ClassWriter.TYPE_UNINIT) {\n+                        item.intVal = getNewOffset(allIndexes, allSizes, 0,\n+                                item.intVal);\n+                    }\n                 }\n             }\n             // The stack map frames are not serialized yet, so we don't need",
    "output": "Fix for ASM issue 317555 Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -690,6 +690,8 @@ public MethodArgumentBuilder(UriComponentsBuilder baseUrl, Method method) {\n \t\t\t}\n \t\t}\n \n+\n+\n \t\tpublic MethodArgumentBuilder arg(int index, Object value) {\n \t\t\tthis.argumentValues[index] = value;\n \t\t\treturn this;",
    "output": "Fix typo Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java\n@@ -83,7 +83,7 @@ static TransactionalEventListener findAnnotation(Method method) {\n \t\tTransactionalEventListener annotation = AnnotationUtils\n \t\t\t\t.findAnnotation(method, TransactionalEventListener.class);\n \t\tif (annotation == null) {\n-\t\t\tthrow new IllegalStateException(\"No TransactionalEventListener annotation found ou '\" + method + \"'\");\n+\t\t\tthrow new IllegalStateException(\"No TransactionalEventListener annotation found on '\" + method + \"'\");\n \t\t}\n \t\treturn annotation;\n \t}",
    "output": "Fix typo in exception message"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -184,7 +184,8 @@ public void afterSingletonsInstantiated() {\n \t\t\t}\n \t\t\tcatch (NoUniqueBeanDefinitionException ex) {\n \t\t\t\tthrow new IllegalStateException(\"No CacheResolver specified, and no unique bean of type \" +\n-\t\t\t\t\t\t\"CacheManager found. Mark one as primary or declare a specific CacheManager to use.\");\n+\t\t\t\t\t\t\"CacheManager found. Mark one as primary (or give it the name 'cacheManager') or \" +\n+\t\t\t\t\t\t\"declare a specific CacheManager to use, that serves as the default one.\");\n \t\t\t}\n \t\t\tcatch (NoSuchBeanDefinitionException ex) {\n \t\t\t\tthrow new IllegalStateException(\"No CacheResolver specified, and no bean of type CacheManager found. \" +",
    "output": "Improve exception message Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -147,7 +147,8 @@ protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, Meth\n \t\tObject arg = readWithMessageConverters(inputMessage, methodParam, paramType);\n \t\tif (arg == null) {\n \t\t\tif (methodParam.getParameterAnnotation(RequestBody.class).required()) {\n-\t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" + methodParam);\n+\t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" +\n+\t\t\t\t\t\tmethodParam.getMethod().toGenericString());\n \t\t\t}\n \t\t}\n ",
    "output": "Improve error message for missing request body Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java\n@@ -108,7 +108,6 @@ public void exceptionCacheResolverLazilyRequired() {\n \t\ttry {\n \t\t\tDefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class);\n \t\t\tassertSame(context.getBean(\"cacheResolver\"), cos.getCacheResolver());\n-\t\t\tassertNull(cos.getExceptionCacheResolver());\n \n \t\t\tJCacheableService<?> service = context.getBean(JCacheableService.class);\n ",
    "output": "Fix test The rework of 314b069 in a7fec6a has created a lazy proxy to make sure that the need for an exception cache resolver come as late as possible. Unfortunately, the test that was only failing on CI because of an early lookup has not been updated accordingly. This is now the case. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n@@ -223,6 +223,14 @@ protected final MessageBrokerRegistry getBrokerRegistry() {\n \tprotected void configureMessageBroker(MessageBrokerRegistry registry) {\n \t}\n \n+\t/**\n+\t * Provide access to the configured PatchMatcher for access from other\n+\t * configuration classes.\n+\t */\n+\tpublic final PathMatcher getPathMatcher() {\n+\t\treturn getBrokerRegistry().getPathMatcher();\n+\t}\n+\n \t@Bean\n \tpublic SimpAnnotationMethodMessageHandler simpAnnotationMethodMessageHandler() {\n \t\tSimpAnnotationMethodMessageHandler handler = createAnnotationMethodMessageHandler();",
    "output": "Add public access to PathMatcher in WebSocket config Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -573,7 +573,7 @@ protected boolean isSubDelimiter(int c) {\n \t\t * @see <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986, appendix A</a>\n \t\t */\n \t\tprotected boolean isReserved(char c) {\n-\t\t\treturn isGenericDelimiter(c) || isReserved(c);\n+\t\t\treturn isGenericDelimiter(c) || isSubDelimiter(c);\n \t\t}\n \n \t\t/**",
    "output": "Fix reserved set definition according to appendix A of RFC 3986 I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n--- a/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n@@ -288,8 +288,8 @@ private String getInvocationErrorMessage(Object bean, String message, Object[] r\n \n \n \tprivate ResolvableType resolveDeclaredEventType() {\n-\t\tParameter[] parameters = this.method.getParameters();\n-\t\tif (parameters.length != 1) {\n+\t\tint count = this.method.getParameterTypes().length;\n+\t\tif (count != 1) {\n \t\t\tthrow new IllegalStateException(\"Only one parameter is allowed \" +\n \t\t\t\t\t\"for event listener method: \" + method);\n \t\t}",
    "output": "Fix usage of Java8 API"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n@@ -211,7 +211,7 @@ public final String getForLookupPath(String lookupPath) {\n \t\t\tResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers());\n \t\t\tString resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations());\n \t\t\tif (resolved == null) {\n-\t\t\t\tthrow new IllegalStateException(\"Failed to get public resource URL path for \" + pathWithinMapping);\n+\t\t\t\tcontinue;\n \t\t\t}\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Resolved public resource URL path=\\\"\" + resolved + \"\\\"\");",
    "output": "Remove ISE in ResourceUrlProvider Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -855,7 +855,13 @@ public void registerScope(String scopeName, Scope scope) {\n \t\tif (SCOPE_SINGLETON.equals(scopeName) || SCOPE_PROTOTYPE.equals(scopeName)) {\n \t\t\tthrow new IllegalArgumentException(\"Cannot replace existing scopes 'singleton' and 'prototype'\");\n \t\t}\n-\t\tthis.scopes.put(scopeName, scope);\n+\t\tScope previous = this.scopes.put(scopeName, scope);\n+\t\tif (previous != null && logger.isInfoEnabled()) {\n+\t\t\tlogger.info(\"Replacing scope '\" + scopeName + \"' from '\" + previous + \"' to '\" + scope);\n+\t\t}\n+\t\telse if (previous == null && logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(\"Registering scope '\" + scopeName + \"' with '\" + scope + \"'\");\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Improve logging of registerScope Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -477,8 +477,10 @@ private boolean isConditionPassing(CacheOperationContext context, Object result)\n \n \tprivate Object generateKey(CacheOperationContext context, Object result) {\n \t\tObject key = context.generateKey(result);\n-\t\tAssert.notNull(key, \"Null key returned for cache operation (maybe you are using named params \" +\n-\t\t\t\t\"on classes without debug info?) \" + context.metadata.operation);\n+\t\tif (key == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Null key returned for cache operation (maybe you are \" +\n+\t\t\t\t\t\"using named params on classes without debug info?) \" + context.metadata.operation);\n+\t\t}\n \t\tif (logger.isTraceEnabled()) {\n \t\t\tlogger.trace(\"Computed cache key \" + key + \" for operation \" + context.metadata.operation);\n \t\t}",
    "output": "Improve performance of generateKey Only compute the error message to display when the generated key is actually null instead of using Assert.notNull as the cache operation 'toString' method is non trivial and gets computed regardless of the result. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/tests/Assume.java b/spring-core/src/test/java/org/springframework/tests/Assume.java\n--- a/spring-core/src/test/java/org/springframework/tests/Assume.java\n+++ b/spring-core/src/test/java/org/springframework/tests/Assume.java\n@@ -21,7 +21,7 @@\n import java.util.Set;\n \n import org.apache.commons.logging.Log;\n-import org.junit.internal.AssumptionViolatedException;\n+import org.junit.AssumptionViolatedException;\n \n import org.springframework.util.ClassUtils;\n ",
    "output": "Use public AssumptionViolatedException in Assume JUnit 4.12 created a 'public' version of the previously 'internal' AssumptionViolatedException. This commit upgrades Spring's Assume class to use this new public version"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n@@ -252,7 +252,7 @@ public static HeadersBuilder<?> notFound() {\n \t * @return the created builder\n \t * @since 4.1.3\n \t */\n-\tpublic static HeadersBuilder<?> unprocessableEntity() {\n+\tpublic static BodyBuilder unprocessableEntity() {\n \t\treturn status(HttpStatus.UNPROCESSABLE_ENTITY);\n \t}\n \n\ndiff --git a/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java b/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java\n@@ -122,11 +122,11 @@ public void notFound() throws URISyntaxException {\n \n \t@Test\n \tpublic void unprocessableEntity() throws URISyntaxException {\n-\t\tResponseEntity<Void> responseEntity = ResponseEntity.unprocessableEntity().build();\n+\t\tResponseEntity<String> responseEntity = ResponseEntity.unprocessableEntity().body(\"error\");\n \n \t\tassertNotNull(responseEntity);\n \t\tassertEquals(HttpStatus.UNPROCESSABLE_ENTITY, responseEntity.getStatusCode());\n-\t\tassertNull(responseEntity.getBody());\n+\t\tassertEquals(\"error\", responseEntity.getBody());\n \t}\n \n \t@Test",
    "output": "Upgrade unprocessableEntity to allow body Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n@@ -370,6 +370,7 @@ public void handle() {\n \n \n \t@ResponseStatus(value = HttpStatus.BAD_REQUEST,  reason = \"exception.user.exists\")\n+\t@SuppressWarnings(\"serial\")\n \tpublic static class UserAlreadyExistsException extends RuntimeException {\n \t}\n ",
    "output": "Remove compiler warning"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java\n@@ -74,9 +74,4 @@ public void testConfigFileParsingError() {\n \t\tnew GenericGroovyApplicationContext(\"org/springframework/context/groovy/applicationContext-error.groovy\");\n \t}\n \n-\t@Test(expected = BeanDefinitionParsingException.class)\n-\tpublic void testConfigFileParsingErrorWhenNamedBeans() {\n-\t\tnew GenericGroovyApplicationContext(\"org/springframework/context/groovy/beans.groovy\");\n-\t}\n-\n }",
    "output": "Remove a Groovy test already covered by testConfigFileParsingErrorThe removed test testConfigFileParsingErrorWhenNamedBeanscould cause a groovyc compilation error, for example when using latest IntelliJ IDEA. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java b/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,7 +29,8 @@\n import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;\n \n /**\n- * Tests for {@link MockClientHttpRequestFactory}.\n+ * Tests for\n+ * {@link org.springframework.test.web.client.MockMvcClientHttpRequestFactory}.\n  *\n  * @author Rossen Stoyanchev\n  */\n@@ -64,7 +65,7 @@ public void noFurtherRequestsExpected() throws Exception {\n \t\t\tthis.factory.createRequest(new URI(\"/foo\"), HttpMethod.GET);\n \t\t}\n \t\tcatch (AssertionError error) {\n-\t\t\tassertEquals(\"No further requests expected\", error.getMessage());\n+\t\t\tassertEquals(\"No further requests expected: HTTP GET /foo\", error.getMessage());\n \t\t}\n \t}\n ",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java\n@@ -216,7 +216,7 @@ private RequestMatcherClientHttpRequest createRequestInternal(URI uri, HttpMetho\n \t\t\t\tthis.requestIterator = MockRestServiceServer.this.expectedRequests.iterator();\n \t\t\t}\n \t\t\tif (!this.requestIterator.hasNext()) {\n-\t\t\t\tthrow new AssertionError(\"No further requests expected\");\n+\t\t\t\tthrow new AssertionError(\"No further requests expected: HTTP \" + httpMethod + \" \" + uri);\n \t\t\t}\n \n \t\t\tRequestMatcherClientHttpRequest request = this.requestIterator.next();",
    "output": "Improve exception message Issue"
  },
  {
    "input": "diff --git a/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n--- a/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n@@ -25,7 +25,6 @@\n import org.hibernate.SessionFactory;\n import org.hibernate.cache.spi.RegionFactory;\n import org.hibernate.cfg.Configuration;\n-import org.hibernate.cfg.NamingStrategy;\n \n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n@@ -86,7 +85,8 @@ public class LocalSessionFactoryBean extends HibernateExceptionTranslator\n \n \tprivate Interceptor entityInterceptor;\n \n-\tprivate NamingStrategy namingStrategy;\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate org.hibernate.cfg.NamingStrategy namingStrategy;\n \n \tprivate Object jtaTransactionManager;\n \n@@ -222,7 +222,8 @@ public void setEntityInterceptor(Interceptor entityInterceptor) {\n \t * physical column and table names given the info in the mapping document.\n \t * @see org.hibernate.cfg.Configuration#setNamingStrategy\n \t */\n-\tpublic void setNamingStrategy(NamingStrategy namingStrategy) {\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic void setNamingStrategy(org.hibernate.cfg.NamingStrategy namingStrategy) {\n \t\tthis.namingStrategy = namingStrategy;\n \t}\n ",
    "output": "Upgrade to Hibernate 4.3.7 (and Netty 4.0.24)"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java\n@@ -175,7 +175,7 @@ public void start() {\n \n \t@Override\n \tpublic void stop() {\n-\t\tif (!isRunning()) {\n+\t\tif (isRunning()) {\n \t\t\tthis.running = false;\n \t\t\tfor (Transport transport : this.transports) {\n \t\t\t\tif (transport instanceof Lifecycle) {",
    "output": "Fix condition check in SockJsClient lifecycle method"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -814,8 +814,7 @@ else if (value instanceof Map) {\n \t\t\t\t\t\tClass<?> mapKeyType = GenericCollectionTypeResolver.getMapKeyReturnType(pd.getReadMethod(), i + 1);\n \t\t\t\t\t\t// IMPORTANT: Do not pass full property name in here - property editors\n \t\t\t\t\t\t// must not kick in for map keys but rather only for map values.\n-\t\t\t\t\t\tTypeDescriptor typeDescriptor = (mapKeyType != null ?\n-\t\t\t\t\t\t\t\tTypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));\n+\t\t\t\t\t\tTypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);\n \t\t\t\t\t\tObject convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);\n \t\t\t\t\t\tvalue = map.get(convertedMapKey);\n \t\t\t\t\t}\n@@ -1028,8 +1027,7 @@ else if (propValue instanceof Map) {\n \t\t\t\tMap<Object, Object> map = (Map<Object, Object>) propValue;\n \t\t\t\t// IMPORTANT: Do not pass full property name in here - property editors\n \t\t\t\t// must not kick in for map keys but rather only for map values.\n-\t\t\t\tTypeDescriptor typeDescriptor = (mapKeyType != null ?\n-\t\t\t\t\t\tTypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));\n+\t\t\t\tTypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);\n \t\t\t\tObject convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);\n \t\t\t\tObject oldValue = null;\n \t\t\t\tif (isExtractOldValueForEditor()) {",
    "output": "Remove unnecessary null check Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java\n@@ -45,8 +45,9 @@\n import org.springframework.util.FileCopyUtils;\n \n import static org.custommonkey.xmlunit.XMLAssert.*;\n+// Do NOT statically import org.junit.Assert.*, since XMLAssert extends junit.framework.Assert\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n /**",
    "output": "Fix JUnit imports in SourceHttpMessageConverterTests When org.junit.Assert.* is statically imported, the class does not compile in Eclipse/STS since XMLAssert extends junit.framework.Assert"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -117,6 +117,10 @@ protected <T> void writeWithMessageConverters(T returnValue, MethodParameter ret\n \t\t\tthrows IOException, HttpMediaTypeNotAcceptableException {\n \n \t\tClass<?> returnValueClass = getReturnValueType(returnValue, returnType);\n+\t\tif (returnValue == null && Void.class.equals(returnValueClass)) {\n+\t\t\treturn;\n+\t\t}\n+\n \t\tHttpServletRequest servletRequest = inputMessage.getServletRequest();\n \t\tList<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\n \t\tList<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass);",
    "output": "Add check for ResponseEntity<void> with null return value Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java\n@@ -280,7 +280,7 @@ protected boolean hasBeanOfType(Class<?> beanType) {\n \n \n \tprotected int getOrder() {\n-\t\treturn this.order;\n+\t\treturn (this.order != null ? this.order : Ordered.LOWEST_PRECEDENCE);\n \t}\n \n \tprotected List<ViewResolver> getViewResolvers() {",
    "output": "Fix test failure"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/package-info.java b/spring-test/src/main/java/org/springframework/test/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/package-info.java\n@@ -1,9 +1,8 @@\n-\n /**\n+ * Generic unit testing support classes.\n  *\n- * This package contains the legacy JUnit 3.8 class hierarchy, which as of Spring 3.0\n- * has been deprecated in favor of using the listener-based <em>Spring TestContext Framework</em>.\n- *\n+ * @see org.springframework.test.util\n  */\n+\n package org.springframework.test;\n ",
    "output": "Upgrade package-info for org.springframework.test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java b/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java\n@@ -0,0 +1,7 @@\n+/**\n+ * JDBC support classes for the <em>Spring TestContext Framework</em>,\n+ * including support for declarative SQL script execution via {@code @Sql}.\n+ */\n+\n+package org.springframework.test.context.jdbc;\n+\n\ndiff --git a/spring-test/src/main/java/org/springframework/test/context/util/package-info.java b/spring-test/src/main/java/org/springframework/test/context/util/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/context/util/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/util/package-info.java\n@@ -0,0 +1,6 @@\n+/**\n+ * Common utilities used within the <em>Spring TestContext Framework</em>.\n+ */\n+\n+package org.springframework.test.context.util;\n+",
    "output": "Add missing package-info files in spring-test"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SocketUtils.java b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n@@ -37,7 +37,7 @@\n  * @author Gunnar Hillert\n  * @since 4.0\n  */\n-public abstract class SocketUtils {\n+public class SocketUtils {\n \n \t/**\n \t * The default minimum value for port ranges used when finding an available",
    "output": "Make SocketUtils a concrete class Per the Javadoc for the SocketUtilsconstructor, SocketUtils can be instantiated as a Spring Bean in XML configuration files; however, SocketUtils is currently abstract which prevents such usage. This commit removes the 'abstract' declaration thereby allowing SocketUtils to be instantiated as a Spring bean. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java\n@@ -19,6 +19,7 @@\n import org.springframework.core.MethodParameter;\n import org.springframework.http.MediaType;\n import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n import org.springframework.http.converter.json.MappingJacksonValue;\n import org.springframework.http.server.ServerHttpRequest;\n@@ -36,7 +37,7 @@ public abstract class AbstractMappingJacksonResponseBodyAdvice implements Respon\n \n \t@Override\n \tpublic boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n-\t\treturn MappingJackson2HttpMessageConverter.class.equals(converterType);\n+\t\treturn AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType);\n \t}\n \n \t@Override",
    "output": "Fix Jackson @JSONView when using XML serialization Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n@@ -143,8 +143,8 @@ protected void detectResourceHandlers(ApplicationContext appContext) {\n \t\tCollections.sort(handlerMappings, new OrderComparator());\n \n \t\tfor (SimpleUrlHandlerMapping hm : handlerMappings) {\n-\t\t\tfor (String pattern : hm.getUrlMap().keySet()) {\n-\t\t\t\tObject handler = hm.getUrlMap().get(pattern);\n+\t\t\tfor (String pattern : hm.getHandlerMap().keySet()) {\n+\t\t\t\tObject handler = hm.getHandlerMap().get(pattern);\n \t\t\t\tif (handler instanceof ResourceHttpRequestHandler) {\n \t\t\t\t\tResourceHttpRequestHandler resourceHandler = (ResourceHttpRequestHandler) handler;\n \t\t\t\t\tif (logger.isDebugEnabled()) {",
    "output": "Fix initialization issue in ResourceUrlProvider Before this change ResourceUrlProvider used getUrlMap to detect ResourceHttpRequestHandler instances, however the map may contain bean names as is the case when using <mvc:resources>. Instead it now uses getHandlerMap"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -104,7 +104,7 @@ public ResourceHttpRequestHandler() {\n \t * for serving static resources.\n \t */\n \tpublic void setLocations(List<Resource> locations) {\n-\t\tAssert.notEmpty(locations, \"Locations list must not be empty\");\n+\t\tAssert.notNull(locations, \"Locations list must not be null\");\n \t\tthis.locations.clear();\n \t\tthis.locations.addAll(locations);\n \t}",
    "output": "Remove assertion making locations mandatory This change finishes work started in . Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -808,7 +808,11 @@ public boolean equals(Object obj) {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn ObjectUtils.nullSafeHashCode(this.type);\n+\t\tint hashCode = ObjectUtils.nullSafeHashCode(this.type);\n+\t\thashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(getSource());\n+\t\thashCode = 31 * hashCode + variableResolverSourceHashCode();\n+\t\thashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.componentType);\n+\t\treturn hashCode;\n \t}\n \n \t/**\n@@ -838,6 +842,14 @@ private boolean variableResolverSourceEquals(VariableResolver other) {\n \t\treturn ObjectUtils.nullSafeEquals(this.variableResolver.getSource(), other.getSource());\n \t}\n \n+\tprivate int variableResolverSourceHashCode() {\n+\t\tint hashCode = 0;\n+\t\tif (this.variableResolver != null) {\n+\t\t\thashCode = ObjectUtils.nullSafeHashCode(this.variableResolver.getSource());\n+\t\t}\n+\t\treturn hashCode;\n+\t}\n+\n \tprivate static ResolvableType[] forTypes(Type[] types, VariableResolver owner) {\n \t\tResolvableType[] result = new ResolvableType[types.length];\n \t\tfor (int i = 0; i < types.length; i++) {",
    "output": "Improve ResolvableType.hashCodefor better performance Prior to this commit, when there was a lot of entries in the ResolvableType.cache HashMap, getting a simple value could take a lot of time due to a lot of calls to ResolvableType.equals. ResolvableType.equalsused this.type, getSource, this.variableResolver.getSourceand this.componentType, but ResolvableType.hashCodeused only this.type. With this commit, ResolvableType.hashCodenow uses the same fields than ResolvableType.equals. Performance on the spring-resolvabletype-benchmark project - 8000 us before this commit - 120 us with this commit Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java b/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java\n@@ -20,7 +20,6 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.*;\n \n /**\n@@ -39,8 +38,11 @@ public void addFirst() {\n \t\tcomposite.addPropertySource(p3);\n \t\tcomposite.addPropertySource(p1);\n \t\tcomposite.addFirstPropertySource(p1);\n-\t\tassertThat(composite.toString(), containsString(\"MapPropertySource [name='p1'], \"\n-\t\t\t\t+ \"MapPropertySource [name='p2'], MapPropertySource [name='p3']\"));\n+\t\tString s = composite.toString();\n+\t\tint i1 = s.indexOf(\"name='p1'\");\n+\t\tint i2 = s.indexOf(\"name='p2'\");\n+\t\tint i3 = s.indexOf(\"name='p3'\");\n+\t\tassertTrue(\"Bad order: \" + s, ((i1 < i2) && (i2 < i3)));\n \t}\n \n }",
    "output": "Fix failing CompositePropertySourceTests Fix CompositePropertySourceTests which fails when run we debug logging"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java\n@@ -20,6 +20,7 @@\n \n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -146,6 +147,29 @@ public int compareTo(FlashMap other) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj != null && obj instanceof FlashMap) {\n+\t\t\tFlashMap other = (FlashMap) obj;\n+\t\t\tif (this.targetRequestParams.equals(other.targetRequestParams) &&\n+\t\t\t\t\tObjectUtils.nullSafeEquals(this.targetRequestPath, other.targetRequestPath)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tint result = super.hashCode();\n+\t\tresult = 31 * result + (this.targetRequestPath != null ? this.targetRequestPath.hashCode() : 0);\n+\t\tresult = 31 * result + this.targetRequestParams.hashCode();\n+\t\treturn result;\n+\t}\n+\n \t@Override\n \tpublic String toString() {\n \t\tStringBuilder sb = new StringBuilder();",
    "output": "Add equals/hashcode to FlashMap Brings consistency with the existing compareTo implementation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java\n--- a/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java\n+++ b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java\n@@ -59,7 +59,7 @@ public CompoundComparator() {\n \t * @param comparators the comparators to build into a compound comparator\n \t * @see InvertibleComparator\n \t */\n-\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic CompoundComparator(Comparator... comparators) {\n \t\tAssert.notNull(comparators, \"Comparators must not be null\");\n \t\tthis.comparators = new ArrayList<InvertibleComparator>(comparators.length);",
    "output": "Remove unnecessary @SupressWarnings"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java\n@@ -250,7 +250,7 @@ String aString() {\n \t\t\treturn \"regular\";\n \t\t}\n \n-\t\t@Bean\n+\t\t@Bean @Lazy\n \t\tString aString(Integer dependency) {\n \t\t\treturn \"overloaded\" + dependency;\n \t\t}",
    "output": "Fix fragile tests for @Bean method overloading"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java b/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java\n--- a/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java\n@@ -109,6 +109,7 @@ public WebMergedContextConfiguration(\n \t * {@link #WebMergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], String, ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}\n \t * instead.\n \t */\n+\t@Deprecated\n \tpublic WebMergedContextConfiguration(\n \t\t\tClass<?> testClass,\n \t\t\tString[] locations,",
    "output": "Add @Deprecated to WebMergedContextConfiguration constructor"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java\n@@ -76,6 +76,13 @@ public void setJmsTemplate(JmsTemplate jmsTemplate) {\n \t\tthis.jmsTemplate = jmsTemplate;\n \t}\n \n+\t/**\n+\t * Return the configured {@link JmsTemplate}.\n+\t */\n+\tpublic JmsTemplate getJmsTemplate() {\n+\t\treturn jmsTemplate;\n+\t}\n+\n \t/**\n \t * Set the {@link MessageConverter} to use to convert a {@link Message} from\n \t * the messaging to and from a {@link javax.jms.Message}. By default, a\n\ndiff --git a/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java\n--- a/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java\n+++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java\n@@ -77,6 +77,11 @@ public void setup() {\n \t\tmessagingTemplate = new JmsMessagingTemplate(jmsTemplate);\n \t}\n \n+\t@Test\n+\tpublic void validateJmsTemplate() {\n+\t\tassertSame(this.jmsTemplate, messagingTemplate.getJmsTemplate());\n+\t}\n+\n \t@Test\n \tpublic void send() {\n \t\tDestination destination = new Destination() {};",
    "output": "Add JmsTemplate accessor in JmsMessagingTemplate"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,14 +25,15 @@\n import org.springframework.messaging.converter.MessageConverter;\n \n /**\n- * Annotation that binds a method parameter to the payload of a message. The payload may\n- * be passed through a {@link MessageConverter} to convert it from serialized form with a\n+ * Annotation that binds a method parameter to the payload of a message. Can also\n+ * be used to associate a payload to a method invocation. The payload may be passed\n+ * through a {@link MessageConverter} to convert it from serialized form with a\n  * specific MIME type to an Object matching the target method parameter.\n  *\n  * @author Rossen Stoyanchev\n  * @since 4.0\n  */\n-@Target(ElementType.PARAMETER)\n+@Target({ElementType.PARAMETER, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface Payload {",
    "output": "Use @Payload on method declaration Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -593,7 +593,7 @@ private void logResponseStatus(HttpMethod method, URI url, ClientHttpResponse re\n \t\tif (logger.isDebugEnabled()) {\n \t\t\ttry {\n \t\t\t\tlogger.debug(method.name() + \" request for \\\"\" + url + \"\\\" resulted in \" +\n-\t\t\t\t\t\tresponse.getStatusCode() + \" (\" + response.getStatusText() + \")\");\n+\t\t\t\t\t\tresponse.getRawStatusCode() + \" (\" + response.getStatusText() + \")\");\n \t\t\t}\n \t\t\tcatch (IOException e) {\n \t\t\t\t// ignore\n@@ -605,7 +605,7 @@ private void handleResponseError(HttpMethod method, URI url, ClientHttpResponse\n \t\tif (logger.isWarnEnabled()) {\n \t\t\ttry {\n \t\t\t\tlogger.warn(method.name() + \" request for \\\"\" + url + \"\\\" resulted in \" +\n-\t\t\t\t\t\tresponse.getStatusCode() + \" (\" + response.getStatusText() + \"); invoking error handler\");\n+\t\t\t\t\t\tresponse.getRawStatusCode() + \" (\" + response.getStatusText() + \"); invoking error handler\");\n \t\t\t}\n \t\t\tcatch (IOException e) {\n \t\t\t\t// ignore",
    "output": "Use raw status code in RestTemplate logResponseStatus Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java\n@@ -40,7 +40,7 @@ public class SockJsUrlInfoTests {\n \tpublic void serverId() throws Exception {\n \t\tSockJsUrlInfo info = new SockJsUrlInfo(new URI(\"http://example.com\"));\n \t\tint serverId = Integer.valueOf(info.getServerId());\n-\t\tassertTrue(\"Invalid serverId: \" + serverId, serverId > 0 && serverId < 1000);\n+\t\tassertTrue(\"Invalid serverId: \" + serverId, serverId >= 0 && serverId < 1000);\n \t}\n \n \t@Test",
    "output": "Fix test condition"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java\n@@ -50,13 +50,13 @@\n  * migrate to {@code ShadowMatch.getVariablesInvolvedInRuntimeTest()}\n  * or some similar operation.\n  *\n- * <p>See <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=151593\"/>.\n+ * <p>See <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=151593\"/>Bug 151593</a>\n  *\n  * @author Adrian Colyer\n  * @author Ramnivas Laddad\n  * @since 2.0\n  */\n-class RuntimeTestWalker {\n+class RuntimeTestWlalker {\n \n \tprivate static final Field residualTestField;\n ",
    "output": "Fix javadoc typo"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java b/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java\n@@ -23,6 +23,7 @@ public GeneratedCacheKey generateCacheKey(CacheKeyInvocationContext<? extends An\n \t}\n \n \n+\t@SuppressWarnings(\"serial\")\n \tprivate static class SimpleGeneratedCacheKey extends SimpleKey implements GeneratedCacheKey {\n \n \t\tpublic SimpleGeneratedCacheKey(Object... elements) {",
    "output": "Fix compiler warning"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n@@ -21,6 +21,7 @@\n import org.hamcrest.Matchers;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TestName;\n@@ -143,7 +144,9 @@ protected void initSockJsClient(Transport... transports) {\n \t\tthis.sockJsClient.start();\n \t}\n \n+\t// Temporarily @Ignore failures caused by suspected Jetty bug\n \n+\t@Ignore\n \t@Test\n \tpublic void echoWebSocket() throws Exception {\n \t\ttestEcho(100, createWebSocketTransport());\n@@ -161,6 +164,7 @@ public void echoXhr() throws Exception {\n \t\ttestEcho(100, xhrTransport);\n \t}\n \n+\t@Ignore\n \t@Test\n \tpublic void closeAfterOneMessageWebSocket() throws Exception {\n \t\ttestCloseAfterOneMessage(createWebSocketTransport());",
    "output": "Add @Ignored temporarily to Jetty SockJS tests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java b/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java\n@@ -54,7 +54,7 @@ public void buildMergedConfigWithBareAnnotations() {\n \t\tassertMergedConfig(\n \t\t\tmergedConfig,\n \t\t\ttestClass,\n-\t\t\tnew String[] { \"classpath:org/springframework/test/context/support/AbstractContextLoaderUtilsTests$BareAnnotations-context.xml\" },\n+\t\t\tnew String[] { \"classpath:org/springframework/test/context/support/AbstractContextConfigurationUtilsTests$BareAnnotations-context.xml\" },\n \t\t\tEMPTY_CLASS_ARRAY, DelegatingSmartContextLoader.class);\n \t}\n ",
    "output": "Fix test broken by previous refactoring"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java\n@@ -37,7 +37,6 @@\n  */\n public class ModelResultMatchers {\n \n-\n \t/**\n \t * Protected constructor.\n \t * Use {@link MockMvcResultMatchers#model()}.\n@@ -196,7 +195,6 @@ public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final Str\n \n \t\treturn new ResultMatcher() {\n \t\t\t@Override\n-\t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\tpublic void match(MvcResult mvcResult) throws Exception {\n \t\t\t\tModelAndView mav = getModelAndView(mvcResult);\n \t\t\t\tBindingResult result = getBindingResult(mav, name);",
    "output": "Remove unnecessary warning suppression in ModelResultMatchers"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n@@ -102,6 +102,7 @@ public void setup() throws Exception {\n \t\tthis.wac.register(TestConfig.class, upgradeStrategyConfigClass());\n \t\tthis.wac.refresh();\n \t\tthis.server = createWebSocketTestServer();\n+\t\tthis.server.setup();\n \t\tthis.server.deployConfig(this.wac, this.errorFilter);\n \t\tthis.server.start();\n \t\tthis.baseUrl = \"http://localhost:\" + this.server.getPort();",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n@@ -27,10 +27,10 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.messaging.Message;\n import org.springframework.messaging.MessageChannel;\n import org.springframework.messaging.MessageHeaders;\n-import org.springframework.messaging.simp.stomp.StompDecoder;\n import org.springframework.util.Assert;\n import org.springframework.util.IdGenerator;\n import org.springframework.util.MimeType;",
    "output": "Remove unused import (which indicated a package cycle)"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n@@ -282,6 +282,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n \t\t\t\t\telse if (args.length == 3) {\n \t\t\t\t\t\treturn sendWithDestinationAndCompletionListenerMethod.invoke(\n \t\t\t\t\t\t\t\ttarget, args[0], args[1], deliveryMode, priority, timeToLive, args[2]);\n+\t\t\t\t\t} else if (args.length == 5) {\n+\t\t\t\t\t\treturn sendWithCompletionListenerMethod.invoke(\n+\t\t\t\t\t\t\t\ttarget, args[0], args[1], args[2], args[3], args[4]);\n+\t\t\t\t\t} else if (args.length == 6) {\n+\t\t\t\t\t\treturn sendWithDestinationAndCompletionListenerMethod.invoke(\n+\t\t\t\t\t\t\t\ttarget, args[0], args[1], args[2], args[3], args[4], args[5]);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn method.invoke(CachedMessageProducer.this, args);",
    "output": "Add support for extra MessageProducer method This commit supports two additional methods of the MessageProducer interface as from JMS 2.0 An integration test infrastructure is necessary to be able to test those scenario: this is taken care of in a separated initiative. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n@@ -123,7 +123,7 @@ public void handleInfoGetWildflyNPE() throws Exception {\n \n \t\thandleRequest(\"GET\", \"/echo/info\", HttpStatus.OK);\n \n-\t\tverify(mockResponse.getOutputStream(), times(1));\n+\t\tverify(mockResponse, times(1)).getOutputStream();\n \t}\n \n \t@Test",
    "output": "Fix unit test for Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java\n@@ -40,7 +40,7 @@ public class SockJsThreadPoolTaskScheduler extends ThreadPoolTaskScheduler {\n \n \t// Check for setRemoveOnCancelPolicy method - available on JDK 7 and higher\n \tprivate static boolean hasRemoveOnCancelPolicyMethod = ClassUtils.hasMethod(\n-\t\t\tScheduledThreadPoolExecutor.class, \"setRemoveOnCancelPolicy\", Boolean.class);\n+\t\t\tScheduledThreadPoolExecutor.class, \"setRemoveOnCancelPolicy\", boolean.class);\n \n \n \tpublic SockJsThreadPoolTaskScheduler() {",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n@@ -71,7 +71,7 @@ public boolean set(T value) {\n \t */\n \tpublic boolean setException(Throwable exception) {\n \t\tAssert.notNull(exception, \"'exception' must not be null\");\n-\t\tboolean success = this.settableTask.setValue(exception);\n+\t\tboolean success = this.settableTask.setException(exception);\n \t\tif (success) {\n \t\t\tthis.listenableFuture.run();\n \t\t}\n@@ -151,17 +151,25 @@ private static class SettableTask<T> implements Callable<T> {\n \t\tprivate volatile boolean cancelled = false;\n \n \n-\t\tpublic boolean setValue(Object value) {\n+\t\tpublic boolean setValue(T value) {\n \t\t\tif (this.cancelled) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\treturn this.value.compareAndSet(NO_VALUE, value);\n \t\t}\n \n+\t\tpublic boolean setException(Throwable exception) {\n+\t\t\tif (this.cancelled) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn this.value.compareAndSet(NO_VALUE, exception);\n+\t\t}\n+\n \t\tpublic void setCancelled() {\n \t\t\tthis.cancelled = true;\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\t@Override\n \t\tpublic T call() throws Exception {\n \t\t\tif (value.get() instanceof Exception) {",
    "output": "Add suppress warning in SettableListenableFuture"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -216,14 +216,12 @@ public static String trimAllWhitespace(String str) {\n \t\tif (!hasLength(str)) {\n \t\t\treturn str;\n \t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\tint index = 0;\n-\t\twhile (sb.length() > index) {\n-\t\t\tif (Character.isWhitespace(sb.charAt(index))) {\n-\t\t\t\tsb.deleteCharAt(index);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tindex++;\n+\t\tint len = str.length();\n+\t\tStringBuilder sb = new StringBuilder(str.length());\n+\t\tfor (int i = 0; i < len; i++) {\n+\t\t\tchar c = str.charAt(i);\n+\t\t\tif (!Character.isWhitespace(c)) {\n+\t\t\t\tsb.append(c);\n \t\t\t}\n \t\t}\n \t\treturn sb.toString();",
    "output": "Improve StringUtils#trimAllWhitespace Prior to this commit, StringUtils#trimAllWhitespace(String str) was unecessary slower. Using sb.deleteCharAt(index) leads to a complete copy of the char[]"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java\n@@ -235,7 +235,7 @@ public int getEnd() {\n \n \t\t@Override\n \t\tpublic int compareTo(CssLinkInfo other) {\n-\t\t\treturn Integer.compare(this.start, other.start);\n+\t\t\treturn (this.start < other.start ? -1 : (this.start == other.start ? 0 : 1));\n \t\t}\n \n \t\t@Override",
    "output": "Fix animalSniffer warning"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java\n@@ -50,7 +50,7 @@ public void handleReturnValue(Object returnValue,\n \t\t\treturn;\n \t\t}\n \n-\t\tDeferredResult<Object> deferredResult = new DeferredResult<Object>();\n+\t\tfinal DeferredResult<Object> deferredResult = new DeferredResult<Object>();\n \t\tWebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult, mavContainer);\n \n \t\tListenableFuture<?> future = (ListenableFuture<?>) returnValue;",
    "output": "Fix compile error"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -400,8 +400,8 @@ protected void handleMessageInternal(Message<?> message) {\n \t\t\tif (sessionId == null || SystemStompConnectionHandler.SESSION_ID.equals(sessionId)) {\n \t\t\t\tthrow new MessageDeliveryException(\"Message broker is not active.\");\n \t\t\t}\n-\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(\"Message broker is not active. Ignoring: \" + message);\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Message broker is not active. Ignoring: \" + message);\n \t\t\t}\n \t\t\treturn;\n \t\t}\n@@ -712,8 +712,8 @@ public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAcces\n \n \t\t\tif (!this.isStompConnected) {\n \t\t\t\tif (this.isRemoteClientSession) {\n-\t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Ignoring client message received \" + message +\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Ignoring client message received \" + message +\n \t\t\t\t\t\t\t\t(conn != null ? \"before CONNECTED frame\" : \"after TCP connection closed\"));\n \t\t\t\t\t}\n \t\t\t\t\treturn EMPTY_TASK;",
    "output": "Upgrade log level Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n@@ -168,6 +168,8 @@ public void messageDeliveryExceptionIfSystemSessionForwardFails() throws Excepti\n \t\tlogger.debug(\"Starting test messageDeliveryExceptionIfSystemSessionForwardFails()\");\n \n \t\tstopActiveMqBrokerAndAwait();\n+\t\tthis.eventPublisher.expectBrokerAvailabilityEvent(false);\n+\n \t\tStompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SEND);\n \t\tthis.relay.handleMessage(MessageBuilder.createMessage(\"test\".getBytes(), headers.getMessageHeaders()));\n \t}\n@@ -184,6 +186,7 @@ public void brokerBecomingUnvailableTriggersErrorFrame() throws Exception {\n \n \t\tMessageExchange error = MessageExchangeBuilder.error(sess1).build();\n \t\tstopActiveMqBrokerAndAwait();\n+\t\tthis.eventPublisher.expectBrokerAvailabilityEvent(false);\n \t\tthis.responseHandler.expectMessages(error);\n \t}\n ",
    "output": "Fix one more issue in STOMP broker relay int test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n@@ -101,7 +101,7 @@ else if (actualValue != null && expectedValue != null) {\n \t\t\tassertEquals(\"For JSON path \" + this.expression + \" type of value\",\n \t\t\t\t\texpectedValue.getClass(), actualValue.getClass());\n \t\t}\n-\t\tassertEquals(\"JSON path\" + this.expression, expectedValue, actualValue);\n+\t\tassertEquals(\"JSON path \" + this.expression, expectedValue, actualValue);\n \t}\n \n \t/**",
    "output": "Add space separator in JsonPathExpectationsHelper"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n--- a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n@@ -387,7 +387,7 @@ private Segment getSegmentForHash(int hash) {\n \tprotected static int calculateShift(int minimumValue, int maximumValue) {\n \t\tint shift = 0;\n \t\tint value = 1;\n-\t\twhile (value < minimumValue && value < minimumValue) {\n+\t\twhile (value < minimumValue && value < maximumValue) {\n \t\t\tvalue <<= 1;\n \t\t\tshift++;\n \t\t}",
    "output": "Fix ConcurrentReferenceHashMap max constraints Update calculateShift to respect the maximum upper bound as well as the minimum value. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n@@ -70,7 +70,7 @@ public abstract class ScriptUtils {\n \t * such a script should not actually contain this value; it is merely a\n \t * <em>virtual</em> statement separator.\n \t */\n-\tpublic static final String EOF_STATEMENT_SEPARATOR = \"<<< END OF SCRIPT >>>\";\n+\tpublic static final String EOF_STATEMENT_SEPARATOR = \"^^^ END OF SCRIPT ^^^\";\n \n \t/**\n \t * Default prefix for line comments within SQL scripts.",
    "output": "Make EOF_STATEMENT_SEPARATOR XML friendly Changed the value of ScriptUtils.EOF_STATEMENT_SEPARATOR from \"<<< END OF SCRIPT >>>\" to \"^^^ END OF SCRIPT ^^^\" so that the angle brackets do not have to be escaped in XML configuration files. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java\n@@ -17,8 +17,11 @@\n package org.springframework.web.socket.adapter.jetty;\n \n import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.UpgradeRequest;\n+import org.eclipse.jetty.websocket.api.UpgradeResponse;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.springframework.web.socket.CloseStatus;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter;\n@@ -45,6 +48,9 @@ public class JettyWebSocketHandlerAdapterTests {\n \t@Before\n \tpublic void setup() {\n \t\tthis.session = mock(Session.class);\n+\t\twhen(this.session.getUpgradeRequest()).thenReturn(Mockito.mock(UpgradeRequest.class));\n+\t\twhen(this.session.getUpgradeResponse()).thenReturn(Mockito.mock(UpgradeResponse.class));\n+\n \t\tthis.webSocketHandler = mock(WebSocketHandler.class);\n \t\tthis.webSocketSession = new JettyWebSocketSession(null, null);\n \t\tthis.adapter = new JettyWebSocketHandlerAdapter(this.webSocketHandler, this.webSocketSession);",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java\n@@ -190,7 +190,6 @@ public EmbeddedDatabaseBuilder setCommentPrefix(String commentPrefix) {\n \t * @return {@code this}, to facilitate method chaining\n \t * @since 4.0.3\n \t * @see #setBlockCommentEndDelimiter\n-\t * @since 4.0.3\n \t */\n \tpublic EmbeddedDatabaseBuilder setBlockCommentStartDelimiter(String blockCommentStartDelimiter) {\n \t\tthis.databasePopulator.setBlockCommentStartDelimiter(blockCommentStartDelimiter);\n@@ -204,7 +203,6 @@ public EmbeddedDatabaseBuilder setBlockCommentStartDelimiter(String blockComment\n \t * @return {@code this}, to facilitate method chaining\n \t * @since 4.0.3\n \t * @see #setBlockCommentStartDelimiter\n-\t * @since 4.0.3\n \t */\n \tpublic EmbeddedDatabaseBuilder setBlockCommentEndDelimiter(String blockCommentEndDelimiter) {\n \t\tthis.databasePopulator.setBlockCommentEndDelimiter(blockCommentEndDelimiter);",
    "output": "Remove duplicate @since tags in EmbeddedDatabaseBuilder"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n@@ -581,7 +581,7 @@ public void expectAvailabilityStatusChanges(Boolean... expected) {\n \n \t\tpublic void awaitAndAssert() throws InterruptedException {\n \t\t\tsynchronized(this.monitor) {\n-\t\t\t\tlong endTime = System.currentTimeMillis() + 10000;\n+\t\t\t\tlong endTime = System.currentTimeMillis() + 60000;\n \t\t\t\twhile ((this.expected.size() != this.actual.size()) && (System.currentTimeMillis() < endTime)) {\n \t\t\t\t\tthis.monitor.wait(500);\n \t\t\t\t}",
    "output": "Upgrade test to catch CI server issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -81,6 +81,7 @@ public class StompBrokerRelayMessageHandler extends AbstractBrokerMessageHandler\n \tstatic {\n \t\tSimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create(SimpMessageType.HEARTBEAT);\n \t\tHEARTBEAT_MESSAGE = MessageBuilder.withPayload(new byte[] {'\\n'}).setHeaders(headers).build();\n+\t\tEMPTY_TASK.run();\n \t}\n \n ",
    "output": "Fix minor issue in STOMP broker relay"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java\n@@ -238,19 +238,6 @@ private static class Animals extends LocationsBar {\n \tprivate static @interface MetaAnimalsConfig {\n \t}\n \n-\t@ActiveProfiles\n-\t@Retention(RetentionPolicy.RUNTIME)\n-\t@Target(ElementType.TYPE)\n-\t// TODO Write test with @MetaProfilesWithOverrides.\n-\tprivate static @interface MetaProfilesWithOverrides {\n-\n-\t\tString[] profiles() default { \"dog\", \"cat\" };\n-\n-\t\tClass<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class;\n-\n-\t\tboolean inheritProfiles() default false;\n-\t}\n-\n \t@ActiveProfiles(resolver = TestClassVerifyingActiveProfilesResolver.class)\n \t@Retention(RetentionPolicy.RUNTIME)\n \t@Target(ElementType.TYPE)",
    "output": "Remove unused code in ContextLoaderUtilsActiveProfilesTests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -445,7 +445,7 @@ public static class TransactionalClass {\n \t}\n \n \t@Order\n-\tpublic static class TransactionalAndOrderedClass {\n+\tpublic static class TransactionalAndOrderedClass extends TransactionalClass {\n \t}\n \n \tpublic static class SubTransactionalAndOrderedClass extends TransactionalAndOrderedClass {",
    "output": "Fix minor error in AnnotationUtilsTests TransactionalAndOrderedClass now extends TransactionalClass. The tests passed anyway, but they did not actually verify what was meant to be verified"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -36,7 +36,6 @@\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ConcurrentReferenceHashMap;\n-import org.springframework.util.ConcurrentReferenceHashMap.ReferenceType;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n ",
    "output": "Fix unused import warning"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java\n@@ -71,7 +71,7 @@ public void deployConfig(WebApplicationContext cxt) {\n \n \t\ttry {\n \t\t\tthis.server = Undertow.builder()\n-\t\t\t\t\t.addListener(this.port, \"localhost\")\n+\t\t\t\t\t.addHttpListener(this.port, \"localhost\")\n \t\t\t\t\t.setHandler(this.manager.start()).build();\n \t\t}\n \t\tcatch (ServletException ex) {",
    "output": "Upgrade to Undertow 1.0 Final (WildFly 8 Final)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java b/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n--- a/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n@@ -74,7 +74,7 @@ public Object remove(String name) {\n \n \t@Override\n \tpublic void registerDestructionCallback(String name, Runnable callback) {\n-\t\tlogger.warn(\"SimpleThreadScope does not support descruction callbacks. \" +\n+\t\tlogger.warn(\"SimpleThreadScope does not support destruction callbacks. \" +\n \t\t\t\t\"Consider using a RequestScope in a Web environment.\");\n \t}\n ",
    "output": "fix log spelling typo"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java\n@@ -74,7 +74,7 @@ public void convertAndSendToUserWithEncoding() {\n \n \t@Test\n \tpublic void convertAndSendWithCustomHeader() {\n-\t\tMap<String, Object> headers = Collections.singletonMap(\"key\", \"value\");\n+\t\tMap<String, Object> headers = Collections.<String, Object>singletonMap(\"key\", \"value\");\n \t\tthis.messagingTemplate.convertAndSend(\"/foo\", \"data\", headers);\n \n \t\tList<Message<byte[]>> messages = this.messageChannel.getMessages();",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java\n@@ -155,7 +155,7 @@ public void convertAndSendPayloadWithPostProcessorToDestination() {\n \tpublic void convertAndSendNoMatchingConverter() {\n \n \t\tMessageConverter converter = new CompositeMessageConverter(\n-\t\t\t\tArrays.asList(new MappingJackson2MessageConverter()), new DefaultContentTypeResolver());\n+\t\t\t\tArrays.<MessageConverter>asList(new MappingJackson2MessageConverter()), new DefaultContentTypeResolver());\n \t\tthis.template.setMessageConverter(converter);\n \n \t\tthis.headers.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_XML);",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n@@ -84,7 +84,7 @@ public void readXmlRootElementSubclass() throws Exception {\n \t\tbyte[] body = \"<rootElement><type s=\\\"Hello World\\\"/></rootElement>\".getBytes(\"UTF-8\");\n \t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(body);\n \t\tRootElementSubclass result = (RootElementSubclass) converter.read(RootElementSubclass.class, inputMessage);\n-\t\tassertEquals(\"Invalid result\", \"Hello World\", result.type.s);\n+\t\tassertEquals(\"Invalid result\", \"Hello World\", result.getType().s);\n \t}\n \n \t@Test\n@@ -118,9 +118,16 @@ public void writeXmlRootElementSubclass() throws Exception {\n \t@XmlRootElement\n \tpublic static class RootElement {\n \n-\t\t@XmlElement\n-\t\tpublic Type type = new Type();\n+\t\tprivate Type type = new Type();\n \n+\t\tpublic Type getType() {\n+\t\t\treturn this.type;\n+\t\t}\n+\n+\t\t@XmlElement\n+\t\tpublic void setType(Type type) {\n+\t\t\tthis.type = type;\n+\t\t}\n \t}\n \n \t@XmlType",
    "output": "Fix test in Jaxb2RootElementHttpMessageConverterTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,7 +37,7 @@\n import org.springframework.http.MockHttpOutputMessage;\n \n /** @author Arjen Poutsma */\n-public class Jaxb2RootElementHttpMessageConverterTest {\n+public class Jaxb2RootElementHttpMessageConverterTests {\n \n \tprivate Jaxb2RootElementHttpMessageConverter converter;\n ",
    "output": "Fix test class name"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java b/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java\n@@ -37,7 +37,7 @@ public interface ResultActions {\n \t * mockMvc.perform(get(\"/person/1\"))\n \t *   .andExpect(status.isOk())\n \t *   .andExpect(content().mimeType(MediaType.APPLICATION_JSON))\n-\t *   .andExpect(jsonPath(\"$.person.name\").equalTo(\"Jason\"));\n+\t *   .andExpect(jsonPath(\"$.person.name\").value(\"Jason\"));\n \t *\n \t * mockMvc.perform(post(\"/form\"))\n \t *   .andExpect(status.isOk())\n@@ -67,4 +67,4 @@ public interface ResultActions {\n \t */\n \tMvcResult andReturn();\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix code example in JavaDoc equalTo is not a valid method on JsonPathResultMatchers I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,10 +25,18 @@\n @SuppressWarnings(\"serial\")\n public class MessageHandlingException extends MessagingException {\n \n+\tpublic MessageHandlingException(Message<?> failedMessage) {\n+\t\tsuper(failedMessage);\n+\t}\n+\n \tpublic MessageHandlingException(Message<?> message, String description) {\n \t\tsuper(message, description);\n \t}\n \n+\tpublic MessageHandlingException(Message<?> failedMessage, Throwable cause) {\n+\t\tsuper(failedMessage, cause);\n+\t}\n+\n \tpublic MessageHandlingException(Message<?> message, String description, Throwable cause) {\n \t\tsuper(message, description, cause);\n \t}",
    "output": "Add constructors to MessageHandlingException Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n@@ -22,11 +22,9 @@\n  * @author Mark Fisher\n  * @since 4.0\n  */\n+@SuppressWarnings(\"serial\")\n public class MessageHandlingException extends MessagingException {\n \n-\tprivate static final long serialVersionUID = 690969923668400297L;\n-\n-\n \tpublic MessageHandlingException(Message<?> message, String description) {\n \t\tsuper(message, description);\n \t}\n\ndiff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java\n@@ -23,11 +23,9 @@\n  * @author Rossen Stoyanchev\n  * @since 4.0\n  */\n+@SuppressWarnings(\"serial\")\n public class MissingSessionUserException extends MessagingException {\n \n-\tprivate static final long serialVersionUID = -6905878930083523161L;\n-\n-\n \tpublic MissingSessionUserException(Message<?> message) {\n \t\tsuper(message, \"No \\\"user\\\" header in message\");\n \t}",
    "output": "Remove serialVersionUIDs in spring-messaging Exc. Prior to this commit, several spring-messaging exceptions had defined serialVersionUIDs. Those exception aren't supposed to leave the system via Java serialization; also, their deserialization is supported only against the same version of Spring. Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -67,7 +67,7 @@ public void setIncludePatterns(List<String> patterns) {\n \t}\n \n \tpublic void setAspectJAdvisorFactory(AspectJAdvisorFactory aspectJAdvisorFactory) {\n-\t\tAssert.notNull(this.aspectJAdvisorFactory, \"AspectJAdvisorFactory must not be null\");\n+\t\tAssert.notNull(aspectJAdvisorFactory, \"AspectJAdvisorFactory must not be null\");\n \t\tthis.aspectJAdvisorFactory = aspectJAdvisorFactory;\n \t}\n ",
    "output": "Fix assert in setAspectJAdvisorFactoryIssue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n@@ -273,8 +273,9 @@ private void startNewTransaction(TestContext testContext, TransactionContext txC\n \t\ttxContext.startTransaction();\n \t\t++this.transactionsStarted;\n \t\tif (logger.isInfoEnabled()) {\n-\t\t\tlogger.info(\"Began transaction (\" + this.transactionsStarted + \"): transaction manager [\"\n-\t\t\t\t\t+ txContext.transactionManager + \"]; rollback [\" + isRollback(testContext) + \"]\");\n+\t\t\tlogger.info(String.format(\n+\t\t\t\t\"Began transaction (%s) for test context %s; transaction manager [%s]; rollback [%s]\",\n+\t\t\t\tthis.transactionsStarted, testContext, txContext.transactionManager, isRollback(testContext)));\n \t\t}\n \t}\n \n@@ -288,8 +289,9 @@ private void startNewTransaction(TestContext testContext, TransactionContext txC\n \tprivate void endTransaction(TestContext testContext, TransactionContext txContext) throws Exception {\n \t\tboolean rollback = isRollback(testContext);\n \t\tif (logger.isTraceEnabled()) {\n-\t\t\tlogger.trace(\"Ending transaction for test context \" + testContext + \"; transaction manager [\"\n-\t\t\t\t\t+ txContext.transactionStatus + \"]; rollback [\" + rollback + \"]\");\n+\t\t\tlogger.trace(String.format(\n+\t\t\t\t\"Ending transaction for test context %s; transaction status [%s]; rollback [%s]\", testContext,\n+\t\t\t\ttxContext.transactionStatus, rollback));\n \t\t}\n \t\ttxContext.endTransaction(rollback);\n \t\tif (logger.isInfoEnabled()) {",
    "output": "Improve logging in TransactionalTEL This commit makes the logging in TransactionalTestExecutionListener consistent for both starting and ending transactions. Specifically, the current TestContext is now included in the informational log statement when starting a new transaction. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MethodInvoker.java b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n--- a/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n+++ b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n@@ -28,10 +28,6 @@\n  * optionally specify arguments, prepare the invoker. Afterwards, you may\n  * invoke the method any number of times, obtaining the invocation result.\n  *\n- * <p>Typically not used directly but via its subclasses\n- * {@link org.springframework.beans.factory.config.MethodInvokingFactoryBean} and\n- * {@link org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean}.\n- *\n  * @author Colin Sampaleanu\n  * @author Juergen Hoeller\n  * @since 19.02.2004",
    "output": "Remove javadoc references to non-accessible subclasses"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n@@ -92,9 +92,9 @@ public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {\n \t * {@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The\n \t * default value is {@code false}.\n \t */\n-\tpublic void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {\n-\t\tthis.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch;\n-\t\tthis.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch;\n+\tpublic void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {\n+\t\tthis.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch;\n+\t\tthis.useSuffixPatternMatch = useRegisteredSuffixPatternMatch ? true : this.useSuffixPatternMatch;\n \t}\n \n \t/**",
    "output": "Fix a typo in RequestMappingHandlerMapping.java"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n@@ -33,6 +33,7 @@\n  *\n  * @author Arjen Poutsma\n  * @author Rossen Stoyanchev\n+ * @author Greg Turnquist\n  * @since 3.2\n  */\n public abstract class MockMvcRequestBuilders {\n@@ -70,6 +71,16 @@ public static MockHttpServletRequestBuilder put(String urlTemplate, Object... ur\n \t\treturn new MockHttpServletRequestBuilder(HttpMethod.PUT, urlTemplate, urlVariables);\n \t}\n \n+\t/**\n+\t * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.\n+\t *\n+\t * @param urlTemplate a URL template; the resulting URL will be encoded\n+\t * @param urlVariables zero or more URL variables\n+\t */\n+\tpublic static MockHttpServletRequestBuilder patch(String urlTemplate, Object... urlVariables) {\n+\t\treturn new MockHttpServletRequestBuilder(HttpMethod.PATCH, urlTemplate, urlVariables);\n+\t}\n+\n \t/**\n \t * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.\n \t *",
    "output": "Add method for HTTP PATCH in MockMvcRequestBuilders is short to avoid having to use MockMvcRequestBuilders.requestand instead have a simple patch(url, params...)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n--- a/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n+++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n@@ -227,8 +227,12 @@ public Class<?> getFieldType(String field) {\n \t * @return whether the FieldError matches the given field\n \t */\n \tprotected boolean isMatchingFieldError(String field, FieldError fieldError) {\n-\t\treturn (field.equals(fieldError.getField()) ||\n-\t\t\t\t(field.endsWith(\"*\") && fieldError.getField().startsWith(field.substring(0, field.length() - 1))));\n+\t\tif (field.equals(fieldError.getField())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\t// Optimization: use chatAt instead of endsWith (SPR-11304, VESC-165)\n+\t\tint endIndex = field.length() - 1;\n+\t\treturn (field.charAt(endIndex) == '*' && fieldError.getField().startsWith(field.substring(0, endIndex)));\n \t}\n \n ",
    "output": "Add minor optimization to AbstractErrors Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java\n@@ -54,6 +54,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.PathMatcher;\n+import org.springframework.validation.Errors;\n import org.springframework.validation.Validator;\n \n /**\n@@ -243,7 +244,8 @@ protected List<HandlerMethodArgumentResolver> initArgumentResolvers() {\n \t\tresolvers.add(new MessageMethodArgumentResolver());\n \n \t\tresolvers.addAll(getCustomArgumentResolvers());\n-\t\tresolvers.add(new PayloadArgumentResolver(this.messageConverter, this.validator));\n+\t\tresolvers.add(new PayloadArgumentResolver(this.messageConverter,\n+\t\t\t\tthis.validator != null ? this.validator : new NoopValidator()));\n \n \t\treturn resolvers;\n \t}\n@@ -360,4 +362,14 @@ protected AbstractExceptionHandlerMethodResolver createExceptionHandlerMethodRes\n \t\treturn new AnnotationExceptionHandlerMethodResolver(beanType);\n \t}\n \n+\tprivate static final class NoopValidator implements Validator {\n+\t\t@Override\n+\t\tpublic boolean supports(Class<?> clazz) {\n+\t\t\treturn false;\n+\t\t}\n+\t\t@Override\n+\t\tpublic void validate(Object target, Errors errors) {\n+\t\t}\n+\t};\n+\n }",
    "output": "Fix Validator initialization with a no-op implementation Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java\n--- a/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java\n@@ -36,7 +36,9 @@ public class AlternativeJdkIdGenerator implements IdGenerator {\n \n \n \tpublic AlternativeJdkIdGenerator() {\n-\t\tbyte[] seed = new SecureRandom().generateSeed(8);\n+\t\tSecureRandom secureRandom = new SecureRandom();\n+\t\tbyte[] seed = new byte[8];\n+\t\tsecureRandom.nextBytes(seed);\n \t\tthis.random = new Random(new BigInteger(seed).longValue());\n \t}\n ",
    "output": "Fix issue with use of SecureRandom for id generation Switch to using nextBytes as generateSeed doesn't seem to be always supported by all hardware providers. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n@@ -61,12 +61,6 @@ public GenericMessage(T payload) {\n \t */\n \tpublic GenericMessage(T payload, Map<String, Object> headers) {\n \t\tAssert.notNull(payload, \"payload must not be null\");\n-\t\tif (headers == null) {\n-\t\t\theaders = new HashMap<String, Object>();\n-\t\t}\n-\t\telse {\n-\t\t\theaders = new HashMap<String, Object>(headers);\n-\t\t}\n \t\tthis.headers = new MessageHeaders(headers);\n \t\tthis.payload = payload;\n \t}",
    "output": "Remove unnecessary copying of headers in GenericMessage Since the MessageHeaders constructor is makes a copy of the headers and is protected against a null map, there is no need for the same to be done in GenericMessage. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -93,7 +93,7 @@ public class HttpHeaders implements MultiValueMap<String, String>, Serializable\n \n \tprivate static final String PRAGMA = \"Pragma\";\n \n-\tprivate static final String UPGARDE = \"Upgrade\";\n+\tprivate static final String UPGRADE = \"Upgrade\";\n \n \n \tprivate static final String[] DATE_FORMATS = new String[] {\n@@ -547,15 +547,15 @@ public String getPragma() {\n \t * @param upgrade the value of the header\n \t */\n \tpublic void setUpgrade(String upgrade) {\n-\t\tset(UPGARDE, upgrade);\n+\t\tset(UPGRADE, upgrade);\n \t}\n \n \t/**\n \t * Returns the value of the {@code Upgrade} header.\n \t * @return the value of the header\n \t */\n \tpublic String getUpgrade() {\n-\t\treturn getFirst(UPGARDE);\n+\t\treturn getFirst(UPGRADE);\n \t}\n \n \t// Date methods",
    "output": "Fix typo Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n@@ -119,7 +119,6 @@ protected final void doSend(MessageChannel channel, Message<?> message) {\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tprotected final Message<?> doReceive(MessageChannel channel) {\n \n@@ -230,13 +229,14 @@ public boolean send(Message<?> message) {\n \t\tpublic boolean send(Message<?> message, long timeout) {\n \n \t\t\tthis.replyMessage = message;\n+\t\t\tboolean alreadyReceivedReply = this.hasReceived;\n \t\t\tthis.replyLatch.countDown();\n \n \t\t\tString errorDescription = null;\n \t\t\tif (this.hasTimedOut) {\n \t\t\t\terrorDescription = \"Reply message received but the receiving thread has exited due to a timeout\";\n \t\t\t}\n-\t\t\telse if (this.hasReceived) {\n+\t\t\telse if (alreadyReceivedReply) {\n \t\t\t\terrorDescription = \"Reply message received but the receiving thread has already received a reply\";\n \t\t\t}\n \t\t\telse if (this.hasSendFailed) {",
    "output": "Fix possible GenericMsgTemplate race condition Fix a potential race condition with GenericMessagingTemplate's inner TemporaryReplyChannel class. Prior to this commit the `hasReceived` member variable was read after calling `replyLatch.countDown`. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java\n@@ -165,6 +165,7 @@ private boolean performUpgrade(HttpServletRequest request, HttpServletResponse r\n \n \t\tRequestContext wsRequest = RequestContext.Builder.create().\n \t\t\t\trequestURI(URI.create(wsApp.getPath())).requestPath(wsApp.getPath()).\n+\t\t\t\tuserPrincipal(request.getUserPrincipal()).\n \t\t\t\tconnection(connection).secure(request.isSecure()).build();\n \n \t\tfor (String header : headers.keySet()) {",
    "output": "Add principal in GlassfishRequestUpgradeStrategy"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java\n@@ -107,6 +107,15 @@ public void fromRequestWithForwardedHostAndPortHeader() {\n \t\tassertEquals(443, result.getPort());\n \t}\n \n+\t// SPR-11140\n+\n+\t@Test\n+\tpublic void fromRequestWithForwardedHostMultiValuedHeader() {\n+\t\tthis.request.addHeader(\"X-Forwarded-Host\", \"a.example.org, b.example.org, c.example.org\");\n+\n+\t\tassertEquals(\"a.example.org\", ServletUriComponentsBuilder.fromRequest(this.request).build().getHost());\n+\t}\n+\n \t@Test\n \tpublic void fromContextPath() {\n \t\trequest.setRequestURI(\"/mvc-showcase/data/param\");",
    "output": "Add test case for multivalue x-forwarded host header Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -770,6 +770,7 @@ public void resolveTypeVariableFromTypeWithVariableResolver() throws Exception {\n \t@Test\n \tpublic void resolveTypeWithCustomVariableResolver() throws Exception {\n \t\tVariableResolver variableResolver = mock(VariableResolver.class);\n+\t\tgiven(variableResolver.getSource()).willReturn(this);\n \t\tResolvableType longType = ResolvableType.forClass(Long.class);\n \t\tgiven(variableResolver.resolveVariable((TypeVariable<?>) anyObject())).willReturn(longType);\n ",
    "output": "Fix test following ResolvableType hashcode change"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -690,7 +690,8 @@ public boolean equals(Object obj) {\n \t@Override\n \tpublic int hashCode() {\n \t\tint hashCode = ObjectUtils.nullSafeHashCode(this.type);\n-\t\thashCode = hashCode * 31 + ObjectUtils.nullSafeHashCode(this.variableResolver);\n+\t\thashCode = hashCode * 31 + ObjectUtils.nullSafeHashCode(\n+\t\t\t\tthis.variableResolver == null ? null : this.variableResolver.getSource());\n \t\thashCode = hashCode * 31 + ObjectUtils.nullSafeHashCode(this.componentType);\n \t\treturn hashCode;\n \t}",
    "output": "Fix ResolvableType hashCode generation Fix ResolvableType.hashCodeto use the source of the variable resolver, rather than the resolver itself"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java\n@@ -32,6 +32,7 @@\n import org.springframework.http.server.ServerHttpRequest;\n import org.springframework.http.server.ServerHttpResponse;\n import org.springframework.http.server.ServletServerHttpRequest;\n+import org.springframework.util.Assert;\n import org.springframework.web.socket.support.WebSocketExtension;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.adapter.StandardWebSocketHandlerAdapter;\n@@ -64,7 +65,11 @@ public List<WebSocketExtension> getSupportedExtensions(ServerHttpRequest request\n \n \tprotected ServerContainer getContainer(HttpServletRequest request) {\n \t\tServletContext servletContext = request.getServletContext();\n-\t\treturn (ServerContainer) servletContext.getAttribute(\"javax.websocket.server.ServerContainer\");\n+\t\tString attrName = \"javax.websocket.server.ServerContainer\";\n+\t\tServerContainer container = (ServerContainer) servletContext.getAttribute(attrName);\n+\t\tAssert.notNull(container, \"No 'javax.websocket.server.ServerContainer' ServletContext attribute. \" +\n+\t\t\t\t\"Are you running in a Servlet container that supports JSR-356?\");\n+\t\treturn container;\n \t}\n \n \tprotected List<WebSocketExtension> getInstalledExtensions(WebSocketContainer container) {",
    "output": "Add assert AbstractStandardRequestUpgradeStrategy"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -174,7 +174,11 @@ else if (SimpMessageType.MESSAGE.equals(headers.getMessageType())) {\n \t\ttry {\n \t\t\tmessage = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();\n \t\t\tbyte[] bytes = this.stompEncoder.encode((Message<byte[]>) message);\n-\t\t\tsession.sendMessage(new TextMessage(new String(bytes, Charset.forName(\"UTF-8\"))));\n+\n+\t\t\tsynchronized(session) {\n+\t\t\t\tsession.sendMessage(new TextMessage(new String(bytes, Charset.forName(\"UTF-8\"))));\n+\t\t\t}\n+\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tsendErrorMessage(session, t);",
    "output": "Fix synchronization issue in StompSubProtocolHandler Two concurrent threads should not send a message on a single WebSocket session at the same time, for example see http://docs.oracle.com/javaee/7/api/javax/websocket/RemoteEndpoint.Basic.html In StompSubProtocolHandler it is quite possible that multiple messages may be broadcast to a single WebSocket client concurrently. This change adds synchronization around the sending of a message to a specific cilent session. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n@@ -71,7 +71,7 @@ public final class MessageHeaders implements Map<String, Object>, Serializable {\n \n \tprivate static volatile IdGenerator idGenerator = null;\n \n-\tprivate static volatile IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();\n+\tprivate static final IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();\n \n \t/**\n \t * The key for the Message ID. This is an automatically generated UUID and\n@@ -97,8 +97,7 @@ public final class MessageHeaders implements Map<String, Object>, Serializable {\n \n \tpublic MessageHeaders(Map<String, Object> headers) {\n \t\tthis.headers = (headers != null) ? new HashMap<String, Object>(headers) : new HashMap<String, Object>();\n-\t\tIdGenerator generatorToUse = (idGenerator != null) ? idGenerator : defaultIdGenerator;\n-\t\tthis.headers.put(ID, generatorToUse.generateId());\n+\t\tthis.headers.put(ID, ((idGenerator != null) ? idGenerator : defaultIdGenerator).generateId());\n \t\tthis.headers.put(TIMESTAMP, new Long(System.currentTimeMillis()));\n \t}\n ",
    "output": "Use final keyword in MessageHeaders"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -80,7 +80,6 @@\n import org.springframework.core.JdkVersion;\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.core.io.Resource;\n-import org.springframework.core.io.ResourceLoader;\n import org.springframework.oxm.GenericMarshaller;\n import org.springframework.oxm.GenericUnmarshaller;\n import org.springframework.oxm.MarshallingFailureException;\n@@ -168,8 +167,6 @@ public class Jaxb2Marshaller implements MimeMarshaller, MimeUnmarshaller, Generi\n \n \tprivate ClassLoader beanClassLoader;\n \n-\tprivate ResourceLoader resourceLoader;\n-\n \tprivate final Object jaxbContextMonitor = new Object();\n \n \tprivate volatile JAXBContext jaxbContext;",
    "output": "Remove unused resourceLoader field in Jaxb2Marshaller"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -40,6 +40,8 @@\n import org.springframework.web.context.support.WebApplicationContextUtils;\n import org.springframework.web.method.annotation.RequestParamMethodArgumentResolver;\n import org.springframework.web.method.support.CompositeUriComponentsContributor;\n+import org.springframework.web.servlet.DispatcherServlet;\n+import org.springframework.web.servlet.support.RequestContextUtils;\n import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n@@ -297,10 +299,10 @@ protected static CompositeUriComponentsContributor getConfiguredUriComponentsCon\n \t\t\tlogger.debug(\"Request bound to current thread is not an HttpServletRequest\");\n \t\t\treturn null;\n \t\t}\n-\t\tServletContext servletContext = request.getServletContext();\n-\t\tWebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(servletContext);\n+\t\tWebApplicationContext wac = (WebApplicationContext) request.getAttribute(\n+\t\t\t\tDispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n \t\tif (wac == null) {\n-\t\t\tlogger.debug(\"No WebApplicationContext found: no ContextLoaderListener registered?\");\n+\t\t\tlogger.debug(\"No WebApplicationContext found: not in a DispatcherServlet request?\");\n \t\t\treturn null;\n \t\t}\n \t\ttry {",
    "output": "Upgrade MvcUriComponentsBuilder to use DispServlet WAC Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -688,7 +688,7 @@ public static Locale parseLocaleString(String localeString) {\n \t\tvalidateLocalePart(language);\n \t\tvalidateLocalePart(country);\n \t\tString variant = \"\";\n-\t\tif (parts.length >= 2) {\n+\t\tif (parts.length > 2) {\n \t\t\t// There is definitely a variant, and it is everything after the country\n \t\t\t// code sans the separator between the country code and the variant.\n \t\t\tint endIndexOfCountryCode = localeString.lastIndexOf(country) + country.length();",
    "output": "Fix off-by-one error in parseLocaleString Fix off-by-one error in StringUtils.parseLocaleStringIssue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n@@ -260,7 +260,7 @@ else if (registry instanceof GenericApplicationContext) {\n \t\t}\n \t}\n \n-\tstatic void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) {\n+\tpublic static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) {\n \t\tprocessCommonDefinitionAnnotations(abd, abd.getMetadata());\n \t}\n ",
    "output": "Make processCommonDefinitionAnnotations(AnnotatedBeanDefinition) public Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -19,6 +19,8 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.reflect.Method;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n@@ -161,8 +163,8 @@ public void testDefaultConfig() throws Exception {\n \t\t\ttestController.testBind(now, null, null);\n \t\t\tMvcUrls mvcUrls = this.appContext.getBean(MvcUrls.class);\n \t\t\tUriComponents uriComponents = mvcUrls.linkToMethodOn(testController);\n-\n-\t\t\tassertEquals(\"http://localhost/?date=2013-10-21\", uriComponents.toUriString());\n+\t\t\tDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\t\t\tassertEquals(\"http://localhost/?date=\" + dateFormat.format(now), uriComponents.toUriString());\n \t\t}\n \t\tfinally {\n \t\t\tRequestContextHolder.resetRequestAttributes();",
    "output": "Fix broken test in MvcNamespaceTests The testDefaultConfigmethod in MvcNamespaceTests creates a new Datein its test fixture but then performs an assertion against a hard coded data string of \"2013-10-21\". This test therefore only passed yesterday, on October 21, 2013. This commit addresses this by changing the hard coded date string to one based on the current date. Issue: ,"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n@@ -82,9 +82,15 @@ public T getPayload() {\n \t}\n \n \tpublic String toString() {\n-\t\tStringBuilder sb = new StringBuilder(\"[Headers=\" + this.headers + \"]\");\n-\t\tsb.append(\"[Payload \").append(this.payload.getClass().getSimpleName());\n-\t\tsb.append(\" content=\").append(this.payload).append(\"]\");\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tif (byte[].class.equals(this.payload.getClass())) {\n+\t\t\tsb.append(\"[Payload byte[\").append(((byte[]) this.payload).length).append(\"]]\");\n+\t\t}\n+\t\telse {\n+\t\t\tsb.append(\"[Payload \").append(this.payload.getClass().getSimpleName());\n+\t\t\tsb.append(\" content=\").append(this.payload).append(\"]\");\n+\t\t}\n+\t\tsb.append(\"[Headers=\" + this.headers + \"]\");\n \t\treturn sb.toString();\n \t}\n ",
    "output": "Improve GenericMessage.toStringRestore pringing the payload first and headers second as it has been in SI but also handle specifically the case where the body is a byte array to minimize unnecessary \"noise\" that causes otherwise for STOMP msgs"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java\n@@ -90,7 +90,8 @@ public <T> T convertSendAndReceive(D destination, Object request, Class<T> targe\n \tpublic <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers,\n \t\t\tClass<T> targetClass) {\n \n-\t\treturn this.convertSendAndReceive(destination, request, null);\n+\t\tMessagePostProcessor postProcessor = null;\n+\t\treturn this.convertSendAndReceive(destination, request, headers, targetClass, postProcessor);\n \t}\n \n \t@Override",
    "output": "Fix issue in AbstractMessagingTemplate"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n@@ -239,15 +239,15 @@ protected void registerDefaultFilters() {\n \t\ttry {\n \t\t\tthis.includeFilters.add(new AnnotationTypeFilter(\n \t\t\t\t\t((Class<? extends Annotation>) cl.loadClass(\"javax.annotation.ManagedBean\")), false));\n-\t\t\tlogger.info(\"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\");\n+\t\t\tlogger.debug(\"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\");\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\t// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.\n \t\t}\n \t\ttry {\n \t\t\tthis.includeFilters.add(new AnnotationTypeFilter(\n \t\t\t\t\t((Class<? extends Annotation>) cl.loadClass(\"javax.inject.Named\")), false));\n-\t\t\tlogger.info(\"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\");\n+\t\t\tlogger.debug(\"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\");\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\t// JSR-330 API not available - simply skip.",
    "output": "Change detection logging from info to debug Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n@@ -236,7 +236,9 @@ protected RequestCondition<?> getCustomMethodCondition(Method method) {\n \t/**\n \t * Created a RequestMappingInfo from a RequestMapping annotation.\n \t */\n-\tprivate RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {\n+\tprotected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation,\n+\t\t\tRequestCondition<?> customCondition) {\n+\n \t\tString[] patterns = resolveEmbeddedValuesInPatterns(annotation.value());\n \t\treturn new RequestMappingInfo(\n \t\t\t\tnew PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),",
    "output": "Make method in RequestMappingHandlerMapping protected Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -438,7 +438,12 @@ public boolean isReady() {\n \n \t\tpublic void setDisconnected() {\n \t\t\tthis.readyConnection.set(null);\n-\t\t\tthis.connection = null;\n+\n+\t\t\tTcpConnection<Message<byte[]>, Message<byte[]>> localConnection = this.connection;\n+\t\t\tif (localConnection != null) {\n+\t\t\t\tlocalConnection.close();\n+\t\t\t\tthis.connection = null;\n+\t\t\t}\n \t\t}\n \n \t\t@Override\n@@ -499,7 +504,10 @@ protected void connected(StompHeaderAccessor headers, final StompConnection stom\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\tstompConnection.connection.send(MessageBuilder.withPayload(heartbeatPayload).build());\n+\t\t\t\t\t\tTcpConnection<Message<byte[]>, Message<byte[]>> connection = stompConnection.connection;\n+\t\t\t\t\t\tif (connection != null) {\n+\t\t\t\t\t\t\tconnection.send(MessageBuilder.withPayload(heartbeatPayload).build());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t});",
    "output": "Improve handling of missed heartbeats Previously, when a broker heartbeat was mnissed, the STOMP connection would be left in a semi-disconnected state such that, for example, the read and write idle callbacks would still be active, even though the underlying TCP connection had been nulled out. As part of disconnecting the STOMP connection, this commit closes the underlying TCP connection when a heartbeat's missed which cancels the read and write idle callbacks. It also now copes with the underlying TCP connection being null when sending a heartbeat to the broker. This protects again a race condition between the write idle callback being fired, such that a heartbeat needs to be sent, and the connection being nulled out due to it being closed"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java\n@@ -139,7 +139,7 @@ public enum SpelMessage {\n \t\t\t\"''{1}'' and ''{2}''\"),\n \n \tPROBLEM_LOCATING_METHOD(Kind.ERROR, 1031,\n-\t\t\t\"Problem locating method {0} cannot on type {1}\"),\n+\t\t\t\"Problem locating method {0} on type {1}\"),\n \n \tSETVALUE_NOT_SUPPORTED(\tKind.ERROR, 1032,\n \t\t\t\"setValue(ExpressionState, Object) not supported for ''{0}''\"),",
    "output": "Fix \"Problem locating method\" SpEL error message Replace \"Problem locating method {0} cannot on type {1}\" with \"Problem locating method {0} on type {1}\". Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java\n@@ -185,10 +185,10 @@ protected void handleConnect(WebSocketSession session, Message<?> message) throw\n \n \t\tSet<String> acceptVersions = connectHeaders.getAcceptVersion();\n \t\tif (acceptVersions.contains(\"1.2\")) {\n-\t\t\tconnectedHeaders.setAcceptVersion(\"1.2\");\n+\t\t\tconnectedHeaders.setVersion(\"1.2\");\n \t\t}\n \t\telse if (acceptVersions.contains(\"1.1\")) {\n-\t\t\tconnectedHeaders.setAcceptVersion(\"1.1\");\n+\t\t\tconnectedHeaders.setVersion(\"1.1\");\n \t\t}\n \t\telse if (acceptVersions.isEmpty()) {\n \t\t\t// 1.0",
    "output": "Use correct header for version in CONNECTED frame Previously, the negotiated version was included in the CONNECTED frame using the accept-version header. This is incorrect. The version header should be used"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java\n@@ -173,16 +173,16 @@ public void afterPropertiesSet() {\n \n \t\tinitHandlerMethods();\n \n-\t\t// Annotation-based argument resolution\n-\t\tthis.argumentResolvers.addResolver(new MessageBodyMethodArgumentResolver(this.messageConverter));\n-\n \t\t// Type-based argument resolution\n \t\tthis.argumentResolvers.addResolver(new PrincipalMethodArgumentResolver());\n \t\tthis.argumentResolvers.addResolver(new MessageMethodArgumentResolver());\n \n \t\t// custom arguments\n \t\tthis.argumentResolvers.addResolvers(this.customArgumentResolvers);\n \n+\t\t// catch-all argument resolver\n+\t\tthis.argumentResolvers.addResolver(new MessageBodyMethodArgumentResolver(this.messageConverter));\n+\n \t\t// Annotation-based return value types\n \t\tthis.returnValueHandlers.addHandler(new ReplyToMethodReturnValueHandler(this.dispatchMessagingTemplate));\n \t\tthis.returnValueHandlers.addHandler(new SubscriptionMethodReturnValueHandler(this.webSocketSessionMessagingTemplate));",
    "output": "Fix bug with the order of messaging arg resolvers"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n@@ -69,6 +69,8 @@ public JettyRequestUpgradeStrategy() {\n \t * {@link WebSocketServerFactory#getPolicy()}.\n \t */\n \tpublic JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {\n+\t\tAssert.notNull(factory, \"WebSocketServerFactory is required\");\n+\t\tthis.factory = factory;\n \t\tthis.factory.setCreator(new WebSocketCreator() {\n \t\t\t@Override\n \t\t\tpublic Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {",
    "output": "Fix minor issue in JettyRequestUpgradeStrategy Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java\n@@ -79,8 +79,8 @@ public void getEndpointInstanceSingletonByType() throws Exception {\n \n \t@Test\n \tpublic void getEndpointInstanceSingletonByComponentName() throws Exception {\n-\t\tAlternativeEchoEndpoint expected = this.webAppContext.getBean(AlternativeEchoEndpoint.class);\n-\t\tAlternativeEchoEndpoint actual = this.configurator.getEndpointInstance(AlternativeEchoEndpoint.class);\n+\t\tAnotherEchoEndpoint expected = this.webAppContext.getBean(AnotherEchoEndpoint.class);\n+\t\tAnotherEchoEndpoint actual = this.configurator.getEndpointInstance(AnotherEchoEndpoint.class);\n \t\tassertSame(expected, actual);\n \t}\n \n@@ -115,14 +115,14 @@ public void onOpen(Session session, EndpointConfig config) {\n \t\t}\n \t}\n \n-\t@Component(\"echoEndpoint\")\n-\tprivate static class AlternativeEchoEndpoint extends Endpoint {\n+\t@Component(\"myEchoEndpoint\")\n+\tprivate static class AnotherEchoEndpoint extends Endpoint {\n \n \t\t@SuppressWarnings(\"unused\")\n \t\tprivate final EchoService service;\n \n \t\t@Autowired\n-\t\tpublic AlternativeEchoEndpoint(EchoService service) {\n+\t\tpublic AnotherEchoEndpoint(EchoService service) {\n \t\t\tthis.service = service;\n \t\t}\n ",
    "output": "Fix failing test Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -318,7 +318,9 @@ private void registerMvcSingletons(StubWebApplicationContext cxt) {\n \n \t\tStandaloneConfiguration config = new StandaloneConfiguration();\n \n-\t\tStaticRequestMappingHandlerMapping hm = config.getHandlerMapping(cxt);\n+\t\tStaticRequestMappingHandlerMapping hm = config.getHandlerMapping();\n+\t\thm.setServletContext(cxt.getServletContext());\n+\t\thm.setApplicationContext(cxt);\n \t\thm.registerHandlers(controllers);\n \t\tcxt.addBean(\"requestMappingHandlerMapping\", hm);\n \n@@ -358,11 +360,8 @@ private List<ViewResolver> initViewResolvers(WebApplicationContext wac) {\n \tprivate class StandaloneConfiguration extends WebMvcConfigurationSupport {\n \n \n-\t\tpublic StaticRequestMappingHandlerMapping getHandlerMapping(StubWebApplicationContext cxt) {\n-\n+\t\tpublic StaticRequestMappingHandlerMapping getHandlerMapping() {\n \t\t\tStaticRequestMappingHandlerMapping handlerMapping = new StaticRequestMappingHandlerMapping();\n-\t\t\thandlerMapping.setServletContext(cxt.getServletContext());\n-\t\t\thandlerMapping.setApplicationContext(cxt);\n \t\t\thandlerMapping.setEmbeddedValueResolver(new StaticStringValueResolver(placeHolderValues));\n \t\t\thandlerMapping.setUseSuffixPatternMatch(useSuffixPatternMatch);\n \t\t\thandlerMapping.setUseTrailingSlashMatch(useTrailingSlashPatternMatch);",
    "output": "Fix failing tests Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java\n@@ -32,7 +32,7 @@\n import org.glassfish.tyrus.core.EndpointWrapper;\n import org.glassfish.tyrus.core.ErrorCollector;\n import org.glassfish.tyrus.core.RequestContext;\n-import org.glassfish.tyrus.server.TyrusEndpoint;\n+import org.glassfish.tyrus.core.TyrusEndpoint;\n import org.glassfish.tyrus.servlet.TyrusHttpUpgradeHandler;\n import org.glassfish.tyrus.websockets.Connection;\n import org.glassfish.tyrus.websockets.Version;",
    "output": "Upgrade spring-websocket to Tyrus 1.2.1 This targets currently nightly snapshots and future release of Glassfish 4.0.1"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java\n@@ -226,7 +226,9 @@ protected void writeToResult(T t, HttpHeaders headers, Result result) throws IOE\n \t * @return the created factory\n \t */\n \tprotected XMLInputFactory createXmlInputFactory() {\n-\t\treturn XMLInputFactory.newInstance();\n+\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\t\tinputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false);\n+\t\treturn inputFactory;\n \t}\n \n }",
    "output": "Fix potential security risk when using Spring OXM Disable by default external entity resolution when using Spring OXM with jaxb. This prevents a XML entity from being able to resolve a local file on the host system. See https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java\n--- a/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java\n+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java\n@@ -52,7 +52,7 @@\n  * <p>For concrete usage, check out the {@link SchedulerFactoryBean} and\n  * {@link SchedulerAccessorBean} classes.\n  *\n- * <p>Compatible with Quartz 1.8 as well as Quartz 2.0/2.1, as of Spring 4.0.\n+ * <p>Compatible with Quartz 1.8 as well as Quartz 2.0-2.2, as of Spring 4.0.\n  *\n  * @author Juergen Hoeller\n  * @since 2.5.6\n@@ -383,7 +383,7 @@ private JobDetail findJobDetail(Trigger trigger) {\n \t\telse {\n \t\t\ttry {\n \t\t\t\tMap jobDataMap = (Map) ReflectionUtils.invokeMethod(Trigger.class.getMethod(\"getJobDataMap\"), trigger);\n-\t\t\t\treturn (JobDetail) jobDataMap.get(JobDetailAwareTrigger.JOB_DETAIL_KEY);\n+\t\t\t\treturn (JobDetail) jobDataMap.remove(JobDetailAwareTrigger.JOB_DETAIL_KEY);\n \t\t\t}\n \t\t\tcatch (NoSuchMethodException ex) {\n \t\t\t\tthrow new IllegalStateException(\"Inconsistent Quartz API: \" + ex);",
    "output": "Remove the JobDetail from the job data map after discovering it Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java\n@@ -20,6 +20,7 @@\n import java.lang.reflect.Method;\n import java.util.Collections;\n \n+import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.websocket.Endpoint;\n@@ -74,8 +75,9 @@ public void upgradeInternal(ServerHttpRequest request, ServerHttpResponse respon\n \t\t\tthrow new HandshakeFailureException(\"Failed to upgrade HttpServletRequest\", ex);\n \t\t}\n \n-\t\t// TODO: use ServletContext attribute when Tomcat is updated\n-\t\tWsServerContainer serverContainer = WsServerContainer.getServerContainer();\n+\t\tString attribute = \"javax.websocket.server.ServerContainer\";\n+\t\tServletContext servletContext = servletRequest.getServletContext();\n+\t\tWsServerContainer serverContainer = (WsServerContainer) servletContext.getAttribute(attribute);\n \n \t\tServerEndpointConfig endpointConfig = new ServerEndpointRegistration(\"/shouldntmatter\", endpoint);\n ",
    "output": "Fix issue in TomcatRequestUpgradeStrategy The method WsServerContainer.getServerContainerwas removed from but remained in Tomcat a little while longer. Instead the ServerContainer is obtained through a ServletContext attribute. Tomcat has now removed this method, hence the need for this fix"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,6 +34,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.FileCopyUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.web.HttpRequestHandler;\n@@ -95,7 +96,7 @@ public void setLocations(List<Resource> locations) {\n \n \t@Override\n \tpublic void afterPropertiesSet() throws Exception {\n-\t\tif (logger.isWarnEnabled()) {\n+\t\tif (logger.isWarnEnabled() && CollectionUtils.isEmpty(this.locations)) {\n \t\t\tlogger.warn(\"Locations list is empty. No resources will be served\");\n \t\t}\n \t}",
    "output": "Fix ResourceHttpRequestHandler empty location log Fix ResourceHttpRequestHandler to only log warning when locations is empty. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n@@ -65,7 +65,7 @@ public WebSocketHttpRequestHandler(\tWebSocketHandler webSocketHandler, Handshake\n \t\tAssert.notNull(webSocketHandler, \"webSocketHandler must not be null\");\n \t\tAssert.notNull(handshakeHandler, \"handshakeHandler must not be null\");\n \t\tthis.webSocketHandler = decorateWebSocketHandler(webSocketHandler);\n-\t\tthis.handshakeHandler = new DefaultHandshakeHandler();\n+\t\tthis.handshakeHandler = handshakeHandler;\n \t}\n \n ",
    "output": "Fix minor issue in WebSocketHttpRequestHandler Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n@@ -24,8 +24,8 @@\n import org.eclipse.jetty.websocket.api.UpgradeRequest;\n import org.eclipse.jetty.websocket.api.UpgradeResponse;\n import org.eclipse.jetty.websocket.server.HandshakeRFC6455;\n-import org.eclipse.jetty.websocket.server.ServletWebSocketRequest;\n import org.eclipse.jetty.websocket.server.WebSocketServerFactory;\n+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;\n import org.eclipse.jetty.websocket.servlet.WebSocketCreator;\n import org.springframework.http.server.ServerHttpRequest;\n import org.springframework.http.server.ServerHttpResponse;\n@@ -67,8 +67,8 @@ public JettyRequestUpgradeStrategy() {\n \t\tthis.factory.setCreator(new WebSocketCreator() {\n \t\t\t@Override\n \t\t\tpublic Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {\n-\t\t\t\tAssert.isInstanceOf(ServletWebSocketRequest.class, request);\n-\t\t\t\treturn ((ServletWebSocketRequest) request).getServletAttributes().get(WEBSOCKET_LISTENER_ATTR_NAME);\n+\t\t\t\tAssert.isInstanceOf(ServletUpgradeRequest.class, request);\n+\t\t\t\treturn ((ServletUpgradeRequest) request).getServletAttributes().get(WEBSOCKET_LISTENER_ATTR_NAME);\n \t\t\t}\n \t\t});\n \t\ttry {",
    "output": "Upgrade spring-websocket to Jetty 9.0.4"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java\n@@ -83,7 +83,12 @@ public void setValidatedAnnotationType(Class<? extends Annotation> validatedAnno\n \t * <p>Default is the default ValidatorFactory's default Validator.\n \t */\n \tpublic void setValidator(Validator validator) {\n-\t\tthis.validator = validator;\n+\t\tif(validator instanceof LocalValidatorFactoryBean) {\n+\t\t\tthis.validator = ((LocalValidatorFactoryBean) validator).getValidator();\n+\t\t}\n+\t\telse {\n+\t\t\tthis.validator = validator;\n+\t\t}\n \t}\n \n \t/**",
    "output": "Improve method validation support for BV 1.1 Update MethodValidationPostProcessor.setValidator(...) to use LocalValidatorFactoryBean.getValidatorwhen possible. This is required because LocalValidatorFactoryBean does not directly implement the forExecutablesmethod introduced in bean validation v1.1. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java b/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java\n--- a/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java\n@@ -104,7 +104,7 @@ public boolean unsubscribe(MessageHandler<Message<?>> handler) {\n \t\t\tlogger.trace(\"Channel \" + getName() + \", removing subscription for handler \" + handler);\n \t\t}\n \n-\t\tRegistration<?> registration = this.registrations.get(handler);\n+\t\tRegistration<?> registration = this.registrations.remove(handler);\n \t\tif (registration == null) {\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Channel \" + getName() + \", no subscription for handler \" + handler);",
    "output": "Fix minor issue in ReactorMessageChannel"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n@@ -25,6 +25,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Map.Entry;\n+\n import javax.servlet.ServletContext;\n import javax.servlet.ServletRequest;\n import javax.servlet.http.Cookie;\n@@ -188,6 +189,21 @@ public MockHttpServletRequestBuilder accept(MediaType... mediaTypes) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the 'Accept' header to the given media type(s).\n+\t *\n+\t * @param mediaTypes one or more media types\n+\t */\n+\tpublic MockHttpServletRequestBuilder accept(String... mediaTypes) {\n+\t\tAssert.notEmpty(mediaTypes, \"No 'Accept' media types\");\n+\t\tList<MediaType> result = new ArrayList<MediaType>(mediaTypes.length);\n+\t\tfor (String mediaType : mediaTypes) {\n+\t\t\tresult.add(MediaType.parseMediaType(mediaType));\n+\t\t}\n+\t\tthis.headers.set(\"Accept\", MediaType.toString(result));\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Set the request body.\n \t *",
    "output": "Add accept(String) method to mock request builder Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n@@ -250,13 +250,15 @@ private void sendError(String sessionId, String errorText) {\n \n \t\tpublic void forward(M message, StompHeaders headers) {\n \n-\t\t\tsynchronized(this.monitor) {\n-\t\t\t\tif (!this.isConnected) {\n-\t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Adding to queue message \" + message + \", queue size=\" + this.messageQueue.size());\n+\t\t\tif (!this.isConnected) {\n+\t\t\t\tsynchronized(this.monitor) {\n+\t\t\t\t\tif (!this.isConnected) {\n+\t\t\t\t\t\tthis.messageQueue.add(message);\n+\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\t\t\t\tlogger.trace(\"Queued message \" + message + \", queue size=\" + this.messageQueue.size());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\tthis.messageQueue.add(message);\n-\t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Improve synchronization checks in STOMP relay session"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n@@ -502,15 +502,13 @@ static String[] resolveActiveProfiles(Class<?> testClass) {\n \t\t\t\t\tthrow new IllegalStateException(msg, e);\n \t\t\t\t}\n \n-\t\t\t\tif (resolver != null) {\n-\t\t\t\t\tprofiles = resolver.resolve(declaringClass);\n-\t\t\t\t\tif (profiles == null) {\n-\t\t\t\t\t\tString msg = String.format(\n-\t\t\t\t\t\t\t\"ActiveProfilesResolver [%s] returned a null array of bean definition profiles.\",\n-\t\t\t\t\t\t\tresolverClass.getName());\n-\t\t\t\t\t\tlogger.error(msg);\n-\t\t\t\t\t\tthrow new IllegalStateException(msg);\n-\t\t\t\t\t}\n+\t\t\t\tprofiles = resolver.resolve(declaringClass);\n+\t\t\t\tif (profiles == null) {\n+\t\t\t\t\tString msg = String.format(\n+\t\t\t\t\t\t\"ActiveProfilesResolver [%s] returned a null array of bean definition profiles.\",\n+\t\t\t\t\t\tresolverClass.getName());\n+\t\t\t\t\tlogger.error(msg);\n+\t\t\t\t\tthrow new IllegalStateException(msg);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (valueDeclared) {",
    "output": "Remove superfluous not-null check in ContextLoaderUtils"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java b/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java\n--- a/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java\n+++ b/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java\n@@ -64,11 +64,15 @@ public GenericMessage(T payload, Map<String, Object> headers) {\n \t\telse {\n \t\t\theaders = new HashMap<String, Object>(headers);\n \t\t}\n-\t\tthis.headers = new MessageHeaders(headers);\n+\t\tthis.headers = createMessageHeaders(headers);\n \t\tthis.payload = payload;\n \t}\n \n \n+\tprotected MessageHeaders createMessageHeaders(Map<String, Object> headers) {\n+\t\treturn new MessageHeaders(headers);\n+\t}\n+\n \tpublic MessageHeaders getHeaders() {\n \t\treturn this.headers;\n \t}",
    "output": "Add method to create MessageHeaders in Message"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -87,7 +87,8 @@\n  * @since 3.0\n  */\n public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPostProcessor,\n-\t\tResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, ApplicationContextAware {\n+\t\tResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, ApplicationContextAware,\n+\t\tOrdered {\n \n \tprivate static final String IMPORT_AWARE_PROCESSOR_BEAN_NAME =\n \t\t\tConfigurationClassPostProcessor.class.getName() + \".importAwareProcessor\";\n@@ -374,6 +375,11 @@ public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFact\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic int getOrder() {\n+\t\treturn Ordered.HIGHEST_PRECEDENCE;\n+\t}\n+\n \n \tprivate static class ImportAwareBeanPostProcessor implements PriorityOrdered, BeanFactoryAware, BeanPostProcessor {\n ",
    "output": "Make ConfClassPostPro Ordered.HIGHEST_PRECEDENCE Make ConfigurationClassPostProcessor Ordered.HIGHEST_PRECEDENCE in case several BeanDefinitionRegistryPostProcessors are registered. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java b/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java\n--- a/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java\n+++ b/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java\n@@ -58,7 +58,7 @@\n  * @author Gary Russell\n  * @since 4.0\n  */\n-public final class MessageHeaders implements Map<String, Object>, Serializable {\n+public class MessageHeaders implements Map<String, Object>, Serializable {\n \n \tprivate static final long serialVersionUID = 8946067357652612145L;\n ",
    "output": "Make MessageHeaders non-final"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/PathResource.java b/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n@@ -58,7 +58,6 @@ public PathResource(Path path) {\n \t}\n \n \t/**\n-\t * Create a new PathResource from a Path handle.\n \t * Create a new PathResource from a Path handle.\n \t * <p>Note: Unlike {@link FileSystemResource}, when building relative resources\n \t * via {@link #createRelative}, the relative path will be built <i>underneath</i> the",
    "output": "Remove duplicate Javadoc line from PathResource Remove duplicate Javadoc comment from PathResource that was accidentally introduced during the merge. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n@@ -173,9 +173,9 @@ private boolean setResultInternal(Object result) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tthis.result = result;\n-\t\t\tif (this.resultHandler != null) {\n-\t\t\t\tthis.resultHandler.handleResult(this.result);\n-\t\t\t}\n+\t\t}\n+\t\tif (this.resultHandler != null) {\n+\t\t\tthis.resultHandler.handleResult(this.result);\n \t\t}\n \t\treturn true;\n \t}",
    "output": "Fix deadlock issue in DeferredResult Previously DeferredResult locked around the setting of the result including handling up to the part of submitting a dispatch. This can cause a deadlock if a timeout occurs at the same time since the Tomcat timeout thread has its own locking that permits only one thread to do timeout or dispatch processing. The fix reduces the locking to cover only the attempt to set the DeferredResult but not the dispatching. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n@@ -122,7 +122,7 @@ protected Resource getResourceByPath(String path) {\n \t * ClassPathResource that explicitly expresses a context-relative path\n \t * through implementing the ContextResource interface.\n \t */\n-\tprivate static class ClassPathContextResource extends ClassPathResource implements ContextResource {\n+\tprotected static class ClassPathContextResource extends ClassPathResource implements ContextResource {\n \n \t\tpublic ClassPathContextResource(String path, ClassLoader classLoader) {\n \t\t\tsuper(path, classLoader);",
    "output": "Make Make ClassPathContextResource protected Allow ClassPathContextResource to be accessed by subclasses of DefaultResourceLoader. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n package org.springframework.context.annotation;\n \n import org.springframework.beans.factory.support.BeanNameGenerator;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.support.GenericApplicationContext;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.util.Assert;\n@@ -61,6 +62,16 @@ public AnnotationConfigApplicationContext() {\n \t\tthis.scanner = new ClassPathBeanDefinitionScanner(this);\n \t}\n \n+\t/**\n+\t * Create a new AnnotationConfigApplicationContext with the given DefaultListableBeanFactory.\n+\t * @param beanFactory the DefaultListableBeanFactory instance to use for this context\n+\t */\n+\tpublic AnnotationConfigApplicationContext(DefaultListableBeanFactory beanFactory) {\n+\t\tsuper(beanFactory);\n+\t\tthis.reader = new AnnotatedBeanDefinitionReader(this);\n+\t\tthis.scanner = new ClassPathBeanDefinitionScanner(this);\n+\t}\n+\n \t/**\n \t * Create a new AnnotationConfigApplicationContext, deriving bean definitions\n \t * from the given annotated classes and automatically refreshing the context.",
    "output": "Add AnnotationConfigApplicationContext constructor Add AnnotationConfigApplicationContext constructor allow use of a custom DefaultListableBeanFactory. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,7 +82,7 @@ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader class\n \t\treturn result;\n \t}\n \n-\tprivate static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n+\tpublic static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n \t\tString factoryClassName = factoryClass.getName();\n \t\ttry {\n \t\t\tList<String> result = new ArrayList<String>();",
    "output": "Make SpringFactoriesLoader.loadFactoryNames public Update the SpringFactoriesLoader static loadFactoryNames method from private to public. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java b/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java\n@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2002-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.websocket;\n+\n+import org.springframework.http.server.ServerHttpRequest;\n+import org.springframework.http.server.ServerHttpResponse;\n+\n+\n+/**\n+ *\n+ * @author Rossen Stoyanchev\n+ */\n+public interface HandshakeRequestHandler {\n+\n+\n+\tboolean doHandshake(ServerHttpRequest request, ServerHttpResponse response);\n+\n+}",
    "output": "Add spring-websocket module"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n@@ -876,7 +876,6 @@ public void testSchedulerWithSpringBeanJobFactoryAndJobSchedulingData() throws E\n \t\tSchedulerFactoryBean bean = new SchedulerFactoryBean();\n \t\tbean.setJobFactory(new SpringBeanJobFactory());\n \t\tbean.setJobSchedulingDataLocation(\"org/springframework/scheduling/quartz/job-scheduling-data.xml\");\n-\t\tbean.setResourceLoader(new FileSystemResourceLoader());\n \t\tbean.afterPropertiesSet();\n \t\tbean.start();\n ",
    "output": "Fix job scheduling data test for Quartz 1.8"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -302,16 +302,16 @@ private class LifecycleGroup {\n \n \t\tprivate final List<LifecycleGroupMember> members = new ArrayList<LifecycleGroupMember>();\n \n-\t\tprivate Map<String, ? extends Lifecycle> lifecycleBeans = getLifecycleBeans();\n-\n-\t\tprivate volatile int smartMemberCount;\n-\n \t\tprivate final int phase;\n \n \t\tprivate final long timeout;\n \n+\t\tprivate final Map<String, ? extends Lifecycle> lifecycleBeans;\n+\n \t\tprivate final boolean autoStartupOnly;\n \n+\t\tprivate volatile int smartMemberCount;\n+\n \t\tpublic LifecycleGroup(int phase, long timeout, Map<String, ? extends Lifecycle> lifecycleBeans, boolean autoStartupOnly) {\n \t\t\tthis.phase = phase;\n \t\t\tthis.timeout = timeout;",
    "output": "Remove unnecessary default value of LifecycleGroup.lifecycleBeans Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java\n@@ -103,13 +103,15 @@ public MethodExecutor resolve(EvaluationContext context, Object targetObject, St\n \t\t\t}\n \n \t\t\t// Sort methods into a sensible order\n-\t\t\tCollections.sort(methods, new Comparator<Method>() {\n-\t\t\t\tpublic int compare(Method m1, Method m2) {\n-\t\t\t\t\tint m1pl = m1.getParameterTypes().length;\n-\t\t\t\t\tint m2pl = m2.getParameterTypes().length;\n-\t\t\t\t\treturn (new Integer(m1pl)).compareTo(m2pl);\n-\t\t\t\t}\n-\t\t\t});\n+\t\t\tif (methods.size() > 1) {\n+\t\t\t\tCollections.sort(methods, new Comparator<Method>() {\n+\t\t\t\t\tpublic int compare(Method m1, Method m2) {\n+\t\t\t\t\t\tint m1pl = m1.getParameterTypes().length;\n+\t\t\t\t\t\tint m2pl = m2.getParameterTypes().length;\n+\t\t\t\t\t\treturn (new Integer(m1pl)).compareTo(m2pl);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n \n \t\t\t// Resolve any bridge methods\n \t\t\tfor (int i = 0; i < methods.size(); i++) {",
    "output": "Fix ReflectiveMethodResolver to avoid potential UnsupportedOperationException on sort Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java b/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n--- a/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n+++ b/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n@@ -373,12 +373,6 @@ protected AbstractTilesContainerFactory createContainerFactory(ApplicationContex\n \n \tprivate class SpringCompleteAutoloadTilesContainerFactory extends CompleteAutoloadTilesContainerFactory {\n \n-\t\t@Override\n-\t\tprotected AttributeEvaluatorFactory createAttributeEvaluatorFactory(\n-\t\t\t\tApplicationContext applicationContext, LocaleResolver resolver) {\n-\t\t\treturn new BasicAttributeEvaluatorFactory(new DirectAttributeEvaluator());\n-\t\t}\n-\n \t\t@Override\n \t\tpublic TilesContainer createContainer(ApplicationContext applicationContext) {\n \t\t\tCachingTilesContainer cachingContainer = (CachingTilesContainer) super.createContainer(applicationContext);",
    "output": "Remove Tiles 3 configuration method Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1268,6 +1268,7 @@ private void triggerAfterCompletionWithError(HttpServletRequest request, HttpSer\n \t * @param request current HTTP request\n \t * @param attributesSnapshot the snapshot of the request attributes before the include\n \t */\n+\t@SuppressWarnings(\"unchecked\")\n \tprivate void restoreAttributesAfterInclude(HttpServletRequest request, Map<?,?> attributesSnapshot) {\n \t\tlogger.debug(\"Restoring snapshot of request attributes after include\");\n \n@@ -1282,6 +1283,9 @@ private void restoreAttributesAfterInclude(HttpServletRequest request, Map<?,?>\n \t\t\t}\n \t\t}\n \n+\t\t// Add attributes that may have been removed\n+\t\tattrsToCheck.addAll((Set<String>) attributesSnapshot.keySet());\n+\n \t\t// Iterate over the attributes to check, restoring the original value\n \t\t// or removing the attribute, respectively, if appropriate.\n \t\tfor (String attrName : attrsToCheck) {",
    "output": "Fix issue with restoring included attributes Before this change the DispatcherServlet restored modified and also removed added attributes but did not restore removed attributes. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n@@ -422,8 +422,8 @@ public void testSpecificMinuteSecond() throws Exception {\n \n \t@Test\n \tpublic void testSpecificHourSecond() throws Exception {\n-\t\tCronTrigger trigger = new CronTrigger(\"55 * 2 * * *\", timeZone);\n-\t\tcalendar.set(Calendar.HOUR_OF_DAY, 1);\n+\t\tCronTrigger trigger = new CronTrigger(\"55 * 10 * * *\", timeZone);\n+\t\tcalendar.set(Calendar.HOUR_OF_DAY, 9);\n \t\tcalendar.set(Calendar.SECOND, 54);\n \t\tDate date = calendar.getTime();\n \t\tTriggerContext context1 = getTriggerContext(date);",
    "output": "Fix test for daylight savings glitch"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n@@ -1741,7 +1741,7 @@ public void SPR_10125() throws Exception {\n \tpublic void SPR_10210() throws Exception {\n \t\tStandardEvaluationContext context = new StandardEvaluationContext();\n \t\tcontext.setVariable(\"bridgeExample\", new org.springframework.expression.spel.spr10210.D());\n-\t\tExpression parseExpression = parser.parseExpression(\"#bridgeExample.bridgetMethod()\");\n+\t\tExpression parseExpression = parser.parseExpression(\"#bridgeExample.bridgeMethod()\");\n \t\tparseExpression.getValue(context);\n \t}\n \n\ndiff --git a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n@@ -21,7 +21,7 @@\n \n abstract class A extends B<C> {\n \n-\tpublic void bridgetMethod() {\n+\tpublic void bridgeMethod() {\n \t}\n \n }",
    "output": "Fix minor typo Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java\n@@ -76,7 +76,7 @@ public void setDataSource(DataSource dataSource) {\n \t}\n \n \tprivate int countRowsInTable(String tableName) {\n-\t\treturn jdbcTemplate.queryForInt(\"SELECT COUNT(0) FROM \" + tableName);\n+\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + tableName, Integer.class);\n \t}\n \n \tprivate int createPerson(String name) {",
    "output": "Upgrade spring-test re: deprecated queryForIntNow invoking JdbcTemplate's queryForObjectmethod instead of the deprecated queryForIntmethod within the test suite. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java\n@@ -61,7 +61,7 @@ public class JdbcTestUtils {\n \t * @return the number of rows in the table\n \t */\n \tpublic static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {\n-\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + tableName, int.class);\n+\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + tableName, Integer.class);\n \t}\n \n \t/**\n@@ -83,7 +83,7 @@ public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableN\n \t\tif (StringUtils.hasText(whereClause)) {\n \t\t\tsql += \" WHERE \" + whereClause;\n \t\t}\n-\t\treturn jdbcTemplate.queryForObject(sql, int.class);\n+\t\treturn jdbcTemplate.queryForObject(sql, Integer.class);\n \t}\n \n \t/**",
    "output": "Upgrade JdbcTestUtils re: deprecated queryForIntJdbcTestUtils now invokes JdbcTemplate's queryForObjectmethod instead of the deprecated queryForIntmethod. Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -417,7 +417,10 @@ public final void afterPropertiesSet() throws Exception {\n \t\t}\n \t}\n \n-\tprotected JAXBContext getJaxbContext() {\n+\t/**\n+\t * Return the JAXBContext used by this marshaller, lazily building it if necessary.\n+\t */\n+\tpublic JAXBContext getJaxbContext() {\n \t\tif (this.jaxbContext != null) {\n \t\t\treturn this.jaxbContext;\n \t\t}\n@@ -525,10 +528,8 @@ private Schema loadSchema(Resource[] resources, String schemaLanguage) throws IO\n \n \n \tpublic boolean supports(Class<?> clazz) {\n-\t\tif (this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn supportsInternal(clazz, this.checkForXmlRootElement);\n+\t\treturn ((this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) ||\n+\t\t\t\tsupportsInternal(clazz, this.checkForXmlRootElement));\n \t}\n \n \tpublic boolean supports(Type genericType) {",
    "output": "Make \"getJaxbContext\" method public Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n@@ -133,7 +133,6 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tcacheFb.setBeanName(\"undefinedCache2\");\n \t\t\tcacheFb.setMaxElementsInMemory(5);\n \t\t\tcacheFb.setOverflowToDisk(false);\n-\t\t\tcacheFb.setEternal(true);\n \t\t\tcacheFb.setTimeToLive(8);\n \t\t\tcacheFb.setTimeToIdle(7);\n \t\t\tcacheFb.setDiskPersistent(true);\n@@ -145,7 +144,6 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tassertEquals(\"undefinedCache2\", cache.getName());\n \t\t\tassertTrue(\"overridden maxElements is correct\", config.getMaxElementsInMemory() == 5);\n \t\t\tassertFalse(\"overridden overflowToDisk is correct\", config.isOverflowToDisk());\n-\t\t\tassertTrue(\"overridden eternal is correct\", config.isEternal());\n \t\t\tassertTrue(\"default timeToLive is correct\", config.getTimeToLiveSeconds() == 8);\n \t\t\tassertTrue(\"default timeToIdle is correct\", config.getTimeToIdleSeconds() == 7);\n \t\t\tassertTrue(\"overridden diskPersistent is correct\", config.isDiskPersistent());",
    "output": "Fix invalid EhCacheFactoryBean test for EhCache 2.4+ compatibility"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n@@ -88,10 +88,6 @@ public boolean containsProperty(String name) {\n \tpublic Object getProperty(String name) {\n \t\tAssert.notNull(name, \"property name must not be null\");\n \t\tString actualName = resolvePropertyName(name);\n-\t\tif (actualName == null) {\n-\t\t\t// at this point we know the property does not exist\n-\t\t\treturn null;\n-\t\t}\n \t\tif (logger.isDebugEnabled() && !name.equals(actualName)) {\n \t\t\tlogger.debug(String.format(\n \t\t\t\t\t\"PropertySource [%s] does not contain '%s', but found equivalent '%s'\",",
    "output": "Remove unnecessary null check in SysEnvPropSource Remove unnecessary null check and dead code from SystemEnvironmentPropertySource. Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -201,15 +201,22 @@ public StandaloneMockMvcBuilder setCustomReturnValueHandlers(HandlerMethodReturn\n \t\treturn this;\n \t}\n \n-\n \t/**\n-\t * Set the HandlerExceptionResolver types to use.\n+\t * Set the HandlerExceptionResolver types to use as a list.\n \t */\n \tpublic StandaloneMockMvcBuilder setHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {\n \t\tthis.handlerExceptionResolvers = exceptionResolvers;\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the HandlerExceptionResolver types to use as an array.\n+\t */\n+\tpublic StandaloneMockMvcBuilder setHandlerExceptionResolvers(HandlerExceptionResolver... exceptionResolvers) {\n+\t\tthis.handlerExceptionResolvers = Arrays.asList(exceptionResolvers);\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Set up view resolution with the given {@link ViewResolver}s.\n \t * If not set, an {@link InternalResourceViewResolver} is used by default.",
    "output": "Make StandaloneMockMvcBuilder interface consistent The exception resolvers can now be set using a setter that expects varargs, just like other infrastructure beans. Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n@@ -24,7 +24,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n\ndiff --git a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n@@ -20,4 +20,8 @@\n import org.springframework.expression.spel.spr10210.infra.C;\n \n abstract class A extends B<C> {\n+\n+\tpublic void bridgetMethod() {\n+\t}\n+\n }",
    "output": "Use bridge methods in ReflectiveMethodResolver Fix failing test Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java b/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java\n--- a/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java\n+++ b/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java\n@@ -44,7 +44,7 @@\n  * @author Costin Leau\n  * @author Phillip Webb\n  */\n-public class ExpressionEvalutatorTest {\n+public class ExpressionEvaluatorTests {\n \n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();",
    "output": "Fix test class name"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java\n@@ -62,6 +62,8 @@\n import org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor;\n import org.springframework.aop.target.HotSwappableTargetSource;\n import org.springframework.aop.target.SingletonTargetSource;\n+import org.springframework.tests.Assume;\n+import org.springframework.tests.TestGroup;\n import org.springframework.tests.TimeStamped;\n import org.springframework.tests.aop.advice.CountingAfterReturningAdvice;\n import org.springframework.tests.aop.advice.CountingBeforeAdvice;\n@@ -170,6 +172,7 @@ public void testValuesStick() {\n \t */\n \t@Test\n \tpublic void testManyProxies() {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n \t\tint howMany = 10000;\n \t\tStopWatch sw = new StopWatch();\n \t\tsw.start(\"Create \" + howMany + \" proxies\");",
    "output": "Add testMany test to TestGroup.PERFORMANCE"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.context.support;\n \n import org.springframework.beans.factory.BeanNameAware;\n-\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.util.Assert;\n@@ -114,12 +113,13 @@ protected String[] getDefaultConfigLocations() {\n \n \t/**\n \t * Resolve the given path, replacing placeholders with corresponding\n-\t * system property values if necessary. Applied to config locations.\n+\t * environment property values if necessary. Applied to config locations.\n \t * @param path the original file path\n \t * @return the resolved file path\n+\t * @see org.springframework.core.env.Environment#resolveRequiredPlaceholders(String)\n \t */\n \tprotected String resolvePath(String path) {\n-\t\treturn this.getEnvironment().resolveRequiredPlaceholders(path);\n+\t\treturn getEnvironment().resolveRequiredPlaceholders(path);\n \t}\n \n ",
    "output": "Upgrade resolvePath javadoc to reflect Environment-based placeholder resolution Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponents.java b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.web.util;\n \n+import java.io.Serializable;\n import java.io.UnsupportedEncodingException;\n import java.net.URI;\n import java.util.Arrays;\n@@ -38,7 +39,7 @@\n  * @since 3.1\n  * @see UriComponentsBuilder\n  */\n-public abstract class UriComponents {\n+public abstract class UriComponents implements Serializable {\n \n \tprivate static final String DEFAULT_ENCODING = \"UTF-8\";\n ",
    "output": "Make UriComponents Serializable Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java\n@@ -94,6 +94,11 @@ protected void registerDispatcherServlet(ServletContext servletContext) {\n \n \t\tServletRegistration.Dynamic registration =\n \t\t\t\tservletContext.addServlet(servletName, dispatcherServlet);\n+\n+\t\tAssert.notNull(registration,\n+\t\t\t\t\"Failed to register servlet with name '\" + servletName + \"'.\" +\n+\t\t\t\t\"Check if there is another servlet registered under the same name.\");\n+\n \t\tregistration.setLoadOnStartup(1);\n \t\tregistration.addMapping(getServletMappings());\n \t\tregistration.setAsyncSupported(isAsyncSupported());",
    "output": "Add helpful error message to DispServlet initializer Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -123,7 +123,7 @@ protected <T> void writeWithMessageConverters(T returnValue,\n \t\t\t}\n \t\t}\n \t\tif (compatibleMediaTypes.isEmpty()) {\n-\t\t\tthrow new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);\n+\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\n \t\t}\n \n \t\tList<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);",
    "output": "Fix exception message about producible media types Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java\n@@ -25,6 +25,8 @@\n import org.junit.runners.JUnit4;\n import org.springframework.test.annotation.Timed;\n import org.springframework.test.context.TestExecutionListeners;\n+import org.springframework.tests.Assume;\n+import org.springframework.tests.TestGroup;\n \n /**\n  * Verifies proper handling of the following in conjunction with the\n@@ -42,6 +44,7 @@ public class TimedSpringRunnerTests {\n \n \t@Test\n \tpublic void timedTests() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n \t\tClass<TimedSpringRunnerTestCase> testClass = TimedSpringRunnerTestCase.class;\n \t\tTrackingRunListener listener = new TrackingRunListener();\n \t\tRunNotifier notifier = new RunNotifier();",
    "output": "Add TimedSpringRunnerTests to performance test group Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java\n--- a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java\n+++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java\n@@ -63,7 +63,7 @@ public void testContentType() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/handleUtf8\"))\n \t\t\t.andExpect(content().contentType(MediaType.valueOf(\"text/plain;charset=UTF-8\")))\n \t\t\t.andExpect(content().contentType(\"text/plain;charset=UTF-8\"))\n-\t\t\t.andExpect(content().contentTypeCompatibleWith(\"text/plan\"))\n+\t\t\t.andExpect(content().contentTypeCompatibleWith(\"text/plain\"))\n \t\t\t.andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN));\n \t}\n ",
    "output": "Fix broken test in ContentAssertionTests"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -357,7 +357,6 @@ protected Method findSetterForProperty(String propertyName, Class<?> clazz, bool\n \tprivate Method[] getSortedClassMethods(Class<?> clazz) {\n \t\tMethod[] methods = clazz.getMethods();\n \t\tArrays.sort(methods, new Comparator<Method>() {\n-\t\t\t@Override\n \t\t\tpublic int compare(Method o1, Method o2) {\n \t\t\t\treturn (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1);\n \t\t\t}",
    "output": "Remove accidentally committed interface @Override"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java b/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java\n@@ -19,6 +19,8 @@\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n+import org.springframework.build.junit.Assume;\n+import org.springframework.build.junit.TestGroup;\n \n /**\n  * @author Rob Harrop\n@@ -75,6 +77,8 @@ public void testWithNoRefreshCheck() throws Exception {\n \n \t@Test\n \tpublic void testRefreshOverTime() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n+\n \t\tCountingRefreshableTargetSource ts = new CountingRefreshableTargetSource(true);\n \t\tts.setRefreshCheckDelay(100);\n ",
    "output": "Add aop target source test to TestGroup.PERFORMANCE Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n@@ -57,6 +57,8 @@\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.RootBeanDefinition;\n import org.springframework.beans.factory.support.StaticListableBeanFactory;\n+import org.springframework.build.junit.Assume;\n+import org.springframework.build.junit.TestGroup;\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n import org.springframework.context.support.StaticApplicationContext;\n import org.springframework.core.io.FileSystemResourceLoader;\n@@ -964,6 +966,8 @@ public void testSchedulerRepositoryExposure() throws InterruptedException {\n \t// SPR-6038: detect HSQL and stop illegal locks being taken\n \t@Test\n \tpublic void testSchedulerWithHsqlDataSource() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n+\n \t\tDummyJob.param = 0;\n \t\tDummyJob.count = 0;\n ",
    "output": "Add quartz scheduling test to TestGroup.PERFORMANCE Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n@@ -38,7 +38,7 @@\n  * Extension of {@link UriComponents} for hierarchical URIs.\n  *\n  * @author Arjen Poutsma\n- * @since 3.2\n+ * @since 3.1.3\n  * @see <a href=\"http://tools.ietf.org/html/rfc3986#section-1.2.3\">Hierarchical URIs</a>\n  */\n final class HierarchicalUriComponents extends UriComponents {\n@@ -421,12 +421,10 @@ public boolean equals(Object obj) {\n \t\tif (this == obj) {\n \t\t\treturn true;\n \t\t}\n-\t\tif (!(obj instanceof OpaqueUriComponents)) {\n+\t\tif (!(obj instanceof HierarchicalUriComponents)) {\n \t\t\treturn false;\n \t\t}\n-\n \t\tHierarchicalUriComponents other = (HierarchicalUriComponents) obj;\n-\n \t\tif (ObjectUtils.nullSafeEquals(getScheme(), other.getScheme())) {\n \t\t\treturn false;\n \t\t}\n@@ -448,7 +446,6 @@ public boolean equals(Object obj) {\n \t\tif (ObjectUtils.nullSafeEquals(getFragment(), other.getFragment())) {\n \t\t\treturn false;\n \t\t}\n-\n \t\treturn true;\n \t}\n ",
    "output": "Fix HierarchicalUriComponents equals implementation Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n@@ -23,8 +23,10 @@\n import org.hibernate.SessionFactory;\n import org.hibernate.exception.ConstraintViolationException;\n import org.hibernate.exception.GenericJDBCException;\n+\n import org.junit.Before;\n import org.junit.Test;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;\n@@ -39,7 +41,6 @@\n  * @author Sam Brannen\n  * @since 3.0\n  */\n-@org.junit.Ignore // TODO SPR-8116 (Hibernate classpath-related)\n @ContextConfiguration\n public class HibernateSessionFlushingTests extends AbstractTransactionalJUnit4SpringContextTests {\n ",
    "output": "Fix classpaths regarding slf4j versions - Defined global slf4jVersion as '1.6.1' in the Gradle build. - Replaced dependencies on slf4j-log4j12 with slf4j-jcl where possible; however, spring-test-mvc still depends on jcl-over-slf4j and slf4j-log4j12 (see ). - Reenabled HibernateSessionFlushingTests. - Verified that the following tests pass in the Gradle build and within Eclipse - HibernateSessionFlushingTests - HibernateTransactionManagerTests (Hibernate 3) - HibernateTransactionManagerTests (Hibernate 4) - RequestResponseBodyMethodProcessorTests Issue: ,"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java b/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java\n@@ -73,7 +73,7 @@ public ClientHttpResponse executeInternal() throws IOException {\n \n \t\tsetResponse(this.responseCreator.createResponse(this));\n \n-\t\treturn super.execute();\n+\t\treturn super.executeInternal();\n \t}\n \n }",
    "output": "Fix failing test from last commit Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java\n@@ -20,6 +20,7 @@\n import java.util.Map;\n \n import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.mock.web.MockHttpServletRequest;\n@@ -129,7 +130,8 @@ protected final MultiValueMap<String, String> getParamsMultiValueMap(MockHttpSer\n \t}\n \n \tprotected void printAsyncResult(MvcResult result) throws Exception {\n-\t\tthis.printer.printValue(\"Was async started\", result.getRequest().isAsyncStarted());\n+\t\tHttpServletRequest request = result.getRequest();\n+\t\tthis.printer.printValue(\"Was async started\", request.isAsyncStarted());\n \t\tthis.printer.printValue(\"Async result\", result.getAsyncResult(0));\n \t}\n ",
    "output": "Fix failing test from previous commit"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java\n@@ -18,15 +18,14 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import javax.servlet.http.HttpServletRequest;\n \n import org.springframework.util.Assert;\n import org.springframework.util.ObjectUtils;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * Implements the {@link RequestCondition} contract by delegating to multiple\n  * {@code RequestCondition} types and using a logical conjunction (' && ') to",
    "output": "Fix Collections import Replace backport Collections class with stock JDK version"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/package-info.java b/spring-test/src/main/java/org/springframework/test/util/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/util/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/package-info.java\n@@ -1,6 +1,5 @@\n /**\n- * Helper classes for unit tests with reflective needs.\n+ * General utility classes for use in unit and integration tests.\n  */\n \n-package org.springframework.test.util;\n-\n+package org.springframework.test.util;\n\\ No newline at end of file",
    "output": "Upgrade package-info for test.util package"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java\n@@ -351,13 +351,17 @@ protected void processMessage(Message message, Session session) {\n \t */\n \t@Override\n \tprotected void doShutdown() throws JMSException {\n-\t\tlogger.debug(\"Closing JMS MessageConsumers\");\n-\t\tfor (MessageConsumer consumer : this.consumers) {\n-\t\t\tJmsUtils.closeMessageConsumer(consumer);\n-\t\t}\n-\t\tlogger.debug(\"Closing JMS Sessions\");\n-\t\tfor (Session session : this.sessions) {\n-\t\t\tJmsUtils.closeSession(session);\n+\t\tsynchronized (this.consumersMonitor) {\n+\t\t\tif (this.consumers != null) {\n+\t\t\t\tlogger.debug(\"Closing JMS MessageConsumers\");\n+\t\t\t\tfor (MessageConsumer consumer : this.consumers) {\n+\t\t\t\t\tJmsUtils.closeMessageConsumer(consumer);\n+\t\t\t\t}\n+\t\t\t\tlogger.debug(\"Closing JMS Sessions\");\n+\t\t\t\tfor (Session session : this.sessions) {\n+\t\t\t\t\tJmsUtils.closeSession(session);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Add proper synchronization and not-null check to SimpleMessageListenerContainer's doShutdown Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java\n--- a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java\n+++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java\n@@ -25,6 +25,7 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;\n \n+import org.hamcrest.Matcher;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -60,11 +61,10 @@ public void testHttpStatus() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/badRequest\")).andExpect(status().isBadRequest());\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Test\n \tpublic void testMatcher() throws Exception {\n-\t\tthis.mockMvc.perform(get(\"/badRequest\"))\n-\t\t\t.andExpect(status().is(allOf(greaterThanOrEqualTo(400), lessThan(500))));\n+\t\tMatcher<Integer> matcher = allOf(greaterThanOrEqualTo(400), lessThan(500));\n+\t\tthis.mockMvc.perform(get(\"/badRequest\")).andExpect(status().is(matcher));\n \t}\n \n \t@Test",
    "output": "Upgrade to Hamcrest 1.3"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java\n@@ -382,8 +382,7 @@ public void numerics() {\n \n \t\tcheckNumberError(\"3.4L\", SpelMessage.REAL_CANNOT_BE_LONG);\n \n-\t\t// Number is parsed as a float, but immediately promoted to a double\n-\t\tcheckNumber(\"3.5f\", 3.5d, Double.class);\n+\t\tcheckNumber(\"3.5f\", 3.5f, Float.class);\n \n \t\tcheckNumber(\"1.2e3\", 1.2e3d, Double.class);\n \t\tcheckNumber(\"1.2e+3\", 1.2e3d, Double.class);",
    "output": "Upgrade SpEL test to reflect native float support Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -141,9 +141,8 @@ else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICAT\n \t\t\t}\n \t\t}\n \n-\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n-\n \t\tif (selectedMediaType != null) {\n+\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n \t\t\tfor (HttpMessageConverter<?> messageConverter : messageConverters) {\n \t\t\t\tif (messageConverter.canWrite(returnValueClass, selectedMediaType)) {\n \t\t\t\t\t((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage);",
    "output": "Fix NPE in AbstractMessageConverterMethodProcessor Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -495,7 +495,8 @@ protected <T> T doExecute(URI url, HttpMethod method, RequestCallback requestCal\n \t\t\t}\n \t\t}\n \t\tcatch (IOException ex) {\n-\t\t\tthrow new ResourceAccessException(\"I/O error: \" + ex.getMessage(), ex);\n+\t\t\tthrow new ResourceAccessException(\"I/O error on \" + method.name() +\n+\t\t\t\t\t\" request for \\\"\" + url + \"\\\":\" + ex.getMessage(), ex);\n \t\t}\n \t\tfinally {\n \t\t\tif (response != null) {",
    "output": "Add URI and method name on ResourceAccess Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java\n--- a/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java\n+++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java\n@@ -395,7 +395,7 @@ public void testGetFloatParameterWithDefaultValueHandlingIsFastEnough() {\n \t\t\tPortletRequestUtils.getFloatParameter(request, \"nonExistingParam\", 0f);\n \t\t}\n \t\tsw.stop();\n-\t\tassertThat(sw.getTotalTimeMillis(), lessThan(250L));\n+\t\tassertThat(sw.getTotalTimeMillis(), lessThan(350L));\n \t}\n \n \tpublic void testGetDoubleParameterWithDefaultValueHandlingIsFastEnough() {",
    "output": "Upgrade PortletRequestUtilsTests float test timeout Float parameter handling appears to be marginally more expensive under JDK7, with the testGetFloatParameterWithDefaultValueHandlingIsFastEnough test clocking in anywhere from 250 to 315 ms. This violates the current test threshold of 250 ms, so this commit ups the timeout value to 350 ms with the assumption that this is indeed a marginal and therefore overall negligible performance degradation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java\n--- a/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java\n@@ -409,8 +409,11 @@ public void merge(ConfigurableEnvironment parent) {\n \t\tfor (String profile : parent.getActiveProfiles()) {\n \t\t\tthis.activeProfiles.add(profile);\n \t\t}\n-\t\tfor (String profile : parent.getDefaultProfiles()) {\n-\t\t\tthis.defaultProfiles.add(profile);\n+\t\tif (parent.getDefaultProfiles().length > 0) {\n+\t\t\tthis.defaultProfiles.remove(RESERVED_DEFAULT_PROFILE_NAME);\n+\t\t\tfor (String profile : parent.getDefaultProfiles()) {\n+\t\t\t\tthis.defaultProfiles.add(profile);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Remove default profile during environment merge This change fixes a minor bug with the implementation of ConfigurableEnvironment#merge, introduced in . During a merge of two environments A and B, where A has default profiles [prod] and B has default profiles [default] (the so-called 'reserved default profile'), B would complete the merge process having a collection of profiles reading [default, prod], which is incorrect. This commit explicitly ensure's that B's reserved default profile is removed if A has a set of default profiles greater than zero. If A consists only of [default], B will inherit it during the merge correctly; if A consists of [p1, p2], B will result in [p1, p2] as well; if B consists of [p1] and A of [p2, p3], B will result in [p1, p2, p3] post-merge. Issue: ,"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1126,7 +1126,7 @@ protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletExcepti\n \t\t\t}\n \t\t}\n \t\tthrow new ServletException(\"No adapter for handler [\" + handler +\n-\t\t\t\t\"]: Does your handler implement a supported interface like Controller?\");\n+\t\t\t\t\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\");\n \t}\n \n \t/**",
    "output": "Upgrade error message in DispatcherServlet Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -35,6 +35,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n@@ -45,7 +46,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n@@ -673,7 +673,8 @@ private boolean useTypeLevelMapping(HttpServletRequest request) {\n \t\t\tif (!hasTypeLevelMapping() || ObjectUtils.isEmpty(getTypeLevelMapping().value())) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\treturn (Boolean) request.getAttribute(HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING);\n+\t\t\tObject value = request.getAttribute(HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING);\n+\t\t\treturn (value != null) ? (Boolean) value : Boolean.TRUE;\n \t\t}\n \n \t\tprivate boolean useSuffixPattern(HttpServletRequest request) {",
    "output": "Use a default for INTROSPECT_TYPE_LEVEL_MAPPING Usually this request attribute is set for all sub-classes of AbstractUrlHandlerMapping and therefore whenever AnnotationMethodHandlerAdapter is used. However, having a default value to fall back on in AnnotationMethodHandlerAdapter is still appropriate in general and also considering the Javadoc of HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING. Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java\n@@ -217,7 +217,7 @@ protected void doFilterInternal(\n \t\t\t\t\tcloseSession(sessionHolder.getSession(), sessionFactory);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tif (!chain.pop()) {\n+\t\t\t\t\tif (chain.isAsyncStarted()) {\n \t\t\t\t\t\tthrow new IllegalStateException(\"Deferred close is not supported with async requests.\");\n \t\t\t\t\t}\n \t\t\t\t\t// deferred close mode",
    "output": "Fix issue with failing test from previous commit Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -18,6 +18,7 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -58,8 +59,6 @@\n import org.springframework.web.servlet.View;\n import org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * An {@link AbstractHandlerMethodExceptionResolver} that resolves exceptions\n  * through {@code @ExceptionHandler} methods.",
    "output": "Fix issue with incorrect class import Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -113,6 +113,16 @@ private NonClosingOutputStream(OutputStream out) {\n \t\t\tsuper(out);\n \t\t}\n \n+\t\t@Override\n+\t\tpublic void write(byte[] b) throws IOException {\n+\t\t\tsuper.write(b);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(byte[] b, int off, int let) throws IOException {\n+\t\t\tout.write(b, off, let);\n+\t\t}\n+\n \t\t@Override\n \t\tpublic void close() throws IOException {\n \t\t}",
    "output": "Improve SimpleStreamingClientHttpRequest performance Ensure that NonClosingOutputStream calls with a byte array call the corresponding methods of the underlying OutputStream rather than relying on the default NonClosingOutputStream implementation, which writes one bte at a time. This significantly improves performance. Issues"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.web.servlet.mvc.method.annotation;\n \n+import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n@@ -30,8 +31,6 @@\n import org.springframework.web.method.support.ModelAndViewContainer;\n import org.springframework.web.servlet.HandlerMapping;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * Resolves {@link Map} method arguments annotated with an @{@link PathVariable}\n  * where the annotation does not specify a path variable name. The created",
    "output": "Fix import issue introduced in prior commit Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java\n--- a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java\n+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -411,8 +411,8 @@ public int compareTo(Object other) {\n \t\t\t}\n \t\t\telse if (other instanceof RenderMappingPredicate) {\n \t\t\t\tRenderMappingPredicate otherRender = (RenderMappingPredicate) other;\n-\t\t\t\tboolean hasWindowState = \"\".equals(this.windowState);\n-\t\t\t\tboolean otherHasWindowState = \"\".equals(otherRender.windowState);\n+\t\t\t\tboolean hasWindowState = (this.windowState != null);\n+\t\t\t\tboolean otherHasWindowState = (otherRender.windowState != null);\n \t\t\t\tif (hasWindowState != otherHasWindowState) {\n \t\t\t\t\treturn (hasWindowState ? -1 : 1);\n \t\t\t\t}",
    "output": "Fix window state comparison in DAHandlerMapping"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -59,10 +59,13 @@ public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request)\n \t}\n \n \tpublic void cleanupMultipart(MultipartHttpServletRequest request) {\n-\t\t// To be on the safe side: explicitly delete all parts.\n+\t\t// To be on the safe side: explicitly delete the parts,\n+\t\t// but only actual file parts (for Resin compatibility)\n \t\ttry {\n \t\t\tfor (Part part : request.getParts()) {\n-\t\t\t\tpart.delete();\n+\t\t\t\tif (request.getFile(part.getName()) != null) {\n+\t\t\t\t\tpart.delete();\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Fix MultipartResolver Resin compatibility StandardServletMultipartResolver#cleanupMultipart now takes care to delete only actual file parts for Resin compatibility. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n@@ -193,7 +193,7 @@ protected String getDetailedErrorMessage(String message) {\n \t * Attempt to resolve a method parameter from the list of provided argument values.\n \t */\n \tprivate Object resolveProvidedArgument(MethodParameter parameter, Object... providedArgs) {\n-\t\tif (providedArgs == null || parameter.hasParameterAnnotations()) {\n+\t\tif (providedArgs == null) {\n \t\t\treturn null;\n \t\t}\n \t\tfor (Object providedArg : providedArgs) {",
    "output": "Fix issue with resolution of WebDataBinder argument There is usually not need to put annotations on a WebDataBinder argument in an `@InitBinder` method. However, the presence of any annotation prevented the successful resolution of the argument. This fix addresses the issue. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,7 +41,7 @@\n  */\n public class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest {\n \n-\tprivate static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+\tprivate static final String CONTENT_DISPOSITION = \"content-disposition\";\n \n \tprivate static final String FILENAME_KEY = \"filename=\";\n ",
    "output": "Make 'Content-Disposition' header case insensitive Previously 'Content-Disposition' was passed to Part.getHeader(String). However the Javadoc for that method specifies the header should be case insensitive. Note that the JavaDoc in tomcat-servlet-api doesn't mention this. It can only be found in the official api JavaDoc http://download.oracle.com/otndocs/jcp/.0-fr-oth-JSpec/ Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n@@ -171,7 +171,7 @@ public void afterPropertiesSet() throws ClassNotFoundException, NoSuchFieldExcep\n \t\t\tint lastDotIndex = this.staticField.lastIndexOf('.');\n \t\t\tif (lastDotIndex == -1 || lastDotIndex == this.staticField.length()) {\n \t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\"staticField must be a fully qualified class plus method name: \" +\n+\t\t\t\t\t\t\"staticField must be a fully qualified class plus static field name: \" +\n \t\t\t\t\t\t\"e.g. 'example.MyExampleClass.MY_EXAMPLE_FIELD'\");\n \t\t\t}\n \t\t\tString className = this.staticField.substring(0, lastDotIndex);",
    "output": "Fix typo in util:constant error reporting Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java\n--- a/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java\n+++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java\n@@ -37,7 +37,7 @@ public class JibxUnmarshallerTests extends AbstractUnmarshallerTests {\n \n \tprotected static final String INPUT_STRING_WITH_SPECIAL_CHARACTERS =\n \t\t\t\"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n-\t\t\t\t\t\"<tns:flight><tns:airline>Air Liberté</tns:airline><tns:number>42</tns:number></tns:flight></tns:flights>\";\n+\t\t\t\t\t\"<tns:flight><tns:airline>Air Libert\\u00e9</tns:airline><tns:number>42</tns:number></tns:flight></tns:flights>\";\n \n \t@Override\n \tprotected Unmarshaller createUnmarshaller() throws Exception {\n@@ -78,7 +78,7 @@ public void unmarshalStreamSourceInputStreamUsingNonDefaultEncoding() throws Exc\n \t\ttestFlights(flights);\n \n \t\tFlightType flight = ((Flights)flights).getFlight(0);\n-\t\tassertEquals(\"Airline is invalid\", \"Air Liberté\", flight.getAirline());\n+\t\tassertEquals(\"Airline is invalid\", \"Air Libert\\u00e9\", flight.getAirline());\n \t}\n \n }",
    "output": "Fix illegal characters in JibxUnmarshallerTests JibxUnmarshallerTests contained characters; this commit changes those to the \\uXXX notation, as all Java source files should be in"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -185,7 +185,7 @@ protected AnnotationMetadata doProcessConfigurationClass(\n \t\t\t\tthrow new IllegalArgumentException(\"At least one @PropertySource(value) location is required\");\n \t\t\t}\n \t\t\tfor (int i = 0; i < nLocations; i++) {\n-\t\t\t\tlocations[0] = this.environment.resolveRequiredPlaceholders(locations[0]);\n+\t\t\t\tlocations[i] = this.environment.resolveRequiredPlaceholders(locations[i]);\n \t\t\t}\n \t\t\tClassLoader classLoader = this.resourceLoader.getClassLoader();\n \t\t\tif (!StringUtils.hasText(name)) {",
    "output": "Fix regression in @PropertySource placeholder resolution Changes in commit 41ade68b50b39485b3cf02b9c6fb8eb74962146b introduced a regression causing all but the first location in the @PropertySource#value array to be ignored during ${...} placeholder resolution. This change ensures that all locations are processed and replaced as expected. Issue: ,"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java\n@@ -25,7 +25,6 @@\n import java.net.URL;\n \n import org.springframework.core.NestedIOException;\n-import org.springframework.util.FileCopyUtils;\n import org.springframework.util.ResourceUtils;\n \n /**\n@@ -115,7 +114,22 @@ public File getFile() throws IOException {\n \t * @see #getInputStream()\n \t */\n \tpublic long contentLength() throws IOException {\n-\t\treturn FileCopyUtils.copyToByteArray(getInputStream()).length;\n+\t\tInputStream is = getInputStream();\n+\t\ttry {\n+\t\t\tlong size = 0;\n+\t\t\tbyte[] buf = new byte[255];\n+\t\t\tfor (int read = is.read(buf); read != -1;) {\n+\t\t\t\tsize += read;\n+\t\t\t}\n+\t\t\treturn size;\n+\t\t}\n+\t\tfinally {\n+\t\t\ttry {\n+\t\t\t\tis.close();\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t}\n+\t\t}\n \t}\n \n \t/**",
    "output": "use custom InputStream traversal instead of a full byte array"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n@@ -94,7 +94,7 @@ public class MethodInvokingJobDetailFactoryBean extends ArgumentConvertingMethod\n \t\ttry {\n \t\t\tClass jobExecutionContextClass =\n \t\t\t\t\tQuartzJobBean.class.getClassLoader().loadClass(\"org.quartz.JobExecutionContext\");\n-\t\t\tsetResultMethod = jobExecutionContextClass.getMethod(\"setResult\");\n+\t\t\tsetResultMethod = jobExecutionContextClass.getMethod(\"setResult\", Object.class);\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Incompatible Quartz API: \" + ex);",
    "output": "fix MethodInvokingJobDetailFactoryBean for compatibility with Quartz 2.0/2.1"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java b/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.core.io;\n \n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.junit.Assert.*;\n \n import java.io.ByteArrayInputStream;\n@@ -215,13 +216,8 @@ public InputStream getInputStream() {\n \t\tcatch (FileNotFoundException ex) {\n \t\t\tassertTrue(ex.getMessage().indexOf(name) != -1);\n \t\t}\n-\t\ttry {\n-\t\t\tresource.getFilename();\n-\t\t\tfail(\"IllegalStateException should have been thrown\");\n-\t\t}\n-\t\tcatch (IllegalStateException ex) {\n-\t\t\tassertTrue(ex.getMessage().indexOf(name) != -1);\n-\t\t}\n+\n+\t\tassertThat(resource.getFilename(), nullValue());\n \t}\n \n }",
    "output": "Fix false negative test failure in ResourceTests Prior to changes in commit 57851de88e84006afc104c4f22eb2fbaf2e0d3d1, AbstractResource#getFilename threw IllegalStateException unless overridden by a subclass. Following that change, this method now throws null instead, but ResourceTests#testAbstractResourceExceptions had not been updated to reflect, resulting in a false negative failure. This has now been fixed. Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,6 @@\n import javax.validation.Validator;\n import javax.validation.ValidatorContext;\n import javax.validation.ValidatorFactory;\n-import javax.validation.spi.ValidationProvider;\n \n import org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator;\n \n@@ -87,7 +86,7 @@ public class LocalValidatorFactoryBean extends SpringValidatorAdapter\n \t * @see javax.validation.Validation#byDefaultProvider()\n \t */\n \t@SuppressWarnings(\"rawtypes\")\n-\tpublic void setProviderClass(Class<? extends ValidationProvider> providerClass) {\n+\tpublic void setProviderClass(Class providerClass) {\n \t\tthis.providerClass = providerClass;\n \t}\n ",
    "output": "remove optional javax.validation.spi dependency"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -170,8 +170,8 @@ public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {\n \t\t\t\t\t\tcontinue ALL_METHODS;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tif (method == pd.getReadMethod()\n-\t\t\t\t\t\t|| (pd instanceof IndexedPropertyDescriptor && method == ((IndexedPropertyDescriptor) pd).getIndexedReadMethod())) {\n+\t\t\t\tif (method.equals(pd.getReadMethod())\n+\t\t\t\t\t\t|| (pd instanceof IndexedPropertyDescriptor && method.equals(((IndexedPropertyDescriptor) pd).getIndexedReadMethod()))) {\n \t\t\t\t\t// yes -> copy it, including corresponding setter method (if any -- may be null)\n \t\t\t\t\tif (pd instanceof IndexedPropertyDescriptor) {\n \t\t\t\t\t\tthis.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod(), ((IndexedPropertyDescriptor)pd).getIndexedReadMethod(), ((IndexedPropertyDescriptor)pd).getIndexedWriteMethod());",
    "output": "Fix method equality bug in ExtendedBeanInfo A number of users reported issues with comparing method identity vs equivalence when discovering JavaBeans property methods in ExtendedBeanInfo. This commit updates the implementation to consistently use '.equals' instead of '=='. Issue: ,"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -787,7 +787,7 @@ else if (strategyAndRegion.length > 0) {\n \t\t\t\tconfigTimeTransactionManagerHolder.remove();\n \t\t\t}\n \t\t\tif (this.cacheRegionFactory != null) {\n-\t\t\t\tconfigTimeCacheProviderHolder.remove();\n+\t\t\t\tconfigTimeRegionFactoryHolder.remove();\n \t\t\t}\n \t\t\tif (this.cacheProvider != null) {\n \t\t\t\tconfigTimeCacheProviderHolder.remove();\n@@ -862,7 +862,7 @@ protected SessionFactory newSessionFactory(Configuration config) throws Hibernat\n \n \t/**\n \t * Return the Configuration object used to build the SessionFactory.\n-\t * Allows access to configuration metadata stored there (rarely needed).\n+\t * Allows for access to configuration metadata stored there (rarely needed).\n \t * @throws IllegalStateException if the Configuration object has not been initialized yet\n \t */\n \tpublic final Configuration getConfiguration() {",
    "output": "fix \"configTimeRegionFactoryHolder\" reset"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java\n@@ -39,7 +39,15 @@ public class EhCacheCacheManager extends AbstractCacheManager {\n \n \n \t/**\n-\t * Set the backing EhCache {@link net.sf.ehcache.CacheManager}.\n+\t * Returns the backing Ehcache {@link net.sf.ehcache.CacheManager}.\n+\t * @return\n+\t */\n+\tpublic net.sf.ehcache.CacheManager getCacheManager() {\n+\t\treturn cacheManager;\n+\t}\n+\n+\t/**\n+\t * Sets the backing EhCache {@link net.sf.ehcache.CacheManager}.\n \t */\n \tpublic void setCacheManager(net.sf.ehcache.CacheManager cacheManager) {\n \t\tthis.cacheManager = cacheManager;\n@@ -75,5 +83,4 @@ public Cache getCache(String name) {\n \t\t}\n \t\treturn cache;\n \t}\n-\n-}\n+}\n\\ No newline at end of file",
    "output": "add getCacheManagerfor access to native class"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -390,7 +390,7 @@ private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {\n \tprivate SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {\n \t\tSpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo();\n \t\tscannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName);\n-\t\tscannedUnit.excludeUnlistedClasses();\n+\t\tscannedUnit.setExcludeUnlistedClasses(true);\n \t\tif (this.packagesToScan != null) {\n \t\t\tfor (String pkg : this.packagesToScan) {\n \t\t\t\ttry {",
    "output": "fix \"packagesToScan\" to avoid additional provider scan"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -390,7 +390,7 @@ private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {\n \tprivate SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {\n \t\tSpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo();\n \t\tscannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName);\n-\t\tscannedUnit.excludeUnlistedClasses();\n+\t\tscannedUnit.setExcludeUnlistedClasses(true);\n \t\tif (this.packagesToScan != null) {\n \t\t\tfor (String pkg : this.packagesToScan) {\n \t\t\t\ttry {",
    "output": "fix \"packagesToScan\" to avoid additional provider scan"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java b/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java\n@@ -86,7 +86,7 @@ public class PersistenceExceptionTranslationPostProcessor extends ProxyConfig\n \t * @param repositoryAnnotationType the desired annotation type\n \t */\n \tpublic void setRepositoryAnnotationType(Class<? extends Annotation> repositoryAnnotationType) {\n-\t\tAssert.notNull(repositoryAnnotationType, \"'requiredAnnotationType' must not be null\");\n+\t\tAssert.notNull(repositoryAnnotationType, \"'repositoryAnnotationType' must not be null\");\n \t\tthis.repositoryAnnotationType = repositoryAnnotationType;\n \t}\n ",
    "output": "fix assertion message"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n@@ -507,6 +507,13 @@ else if (method.getName().equals(\"hashCode\")) {\n \t\t\t\t\t// Use hashCode of EntityManagerFactory proxy.\n \t\t\t\t\treturn System.identityHashCode(proxy);\n \t\t\t\t}\n+\t\t\t\telse if (method.getName().equals(\"unwrap\")) {\n+\t\t\t\t\t// Handle JPA 2.1 unwrap method - could be a proxy match.\n+\t\t\t\t\tClass targetClass = (Class) args[0];\n+\t\t\t\t\tif (targetClass == null || targetClass.isInstance(proxy)) {\n+\t\t\t\t\t\treturn proxy;\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\treturn this.entityManagerFactoryBean.invokeProxyMethod(method, args);\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {",
    "output": "add support for JPA 2.1 unwrap method on EntityManagerFactory interface"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -16,14 +16,11 @@\n \n package org.springframework.core.annotation;\n \n-import java.io.IOException;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.WeakHashMap;\n ",
    "output": "remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,18 +80,14 @@ public StandardEvaluationContext(Object rootObject) {\n \t}\n \n \n-\tpublic void setRootObject(Object rootObject) {\n-\t\tif (this.rootObject == null) {\n-\t\t\tthis.rootObject = TypedValue.NULL;\n-\t\t} else {\n-\t\t\tthis.rootObject = new TypedValue(rootObject);//, TypeDescriptor.forObject(rootObject));\n-\t\t}\n-\t}\n-\n \tpublic void setRootObject(Object rootObject, TypeDescriptor typeDescriptor) {\n \t\tthis.rootObject = new TypedValue(rootObject, typeDescriptor);\n \t}\n \n+\tpublic void setRootObject(Object rootObject) {\n+\t\tthis.rootObject = (rootObject != null ? new TypedValue(rootObject) : TypedValue.NULL);\n+\t}\n+\n \tpublic TypedValue getRootObject() {\n \t\treturn this.rootObject;\n \t}",
    "output": "fix setRootObject check in StandardEvaluationContext"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -75,6 +75,11 @@ public Class loadClass(String name) throws ClassNotFoundException {\n \t\treturn this.resourceLoader.getClassLoader().loadClass(name);\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> Class<? extends T> loadClass(String name, Class<T> clazz) throws ClassNotFoundException {\n+        return loadClass(name);\n+    }\n+\n \tpublic URL getResource(String name) {\n \t\tResource resource = this.resourceLoader.getResource(name);\n \t\ttry {",
    "output": "add Quartz 2.1 loadClass variant"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java\n@@ -336,6 +336,8 @@ public UriComponents expand(Object... uriVariableValues) {\n \t}\n \n \tprivate UriComponents expandInternal(UriTemplateVariables uriVariables) {\n+\t\tAssert.state(!encoded, \"Cannot expand an already encoded UriComponents object\");\n+\t\t\n \t\tString expandedScheme = expandUriComponent(this.scheme, uriVariables);\n \t\tString expandedUserInfo = expandUriComponent(this.userInfo, uriVariables);\n \t\tString expandedHost = expandUriComponent(this.host, uriVariables);\n\ndiff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java\n@@ -54,4 +54,9 @@ public void expand() {\n \t\tassertEquals(\"http://example.com/1 2 3 4\", uriComponents.toUriString());\n \t}\n \n+\t@Test(expected = IllegalStateException.class)\n+\tpublic void expandEncoded() {\n+\t\tUriComponentsBuilder.fromPath(\"/{foo}\").build().encode().expand(\"bar\");\n+\t}\n+\n }",
    "output": "Add check for expanding already encoded UriComponents object"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,6 +80,14 @@ public boolean exists() {\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * This implementation returns the length of the underlying byte array.\n+\t */\n+\t@Override\n+\tpublic long contentLength() {\n+\t\treturn this.byteArray.length;\n+\t}\n+\n \t/**\n \t * This implementation returns a ByteArrayInputStream for the\n \t * underlying byte array.",
    "output": "add proper \"contentLength\" implementation to ByteArrayResource"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n@@ -194,8 +194,8 @@ public void afterPropertiesSet() throws ClassNotFoundException, NoSuchMethodExce\n \t\t// Build JobDetail instance.\n \t\tif (jobDetailImplClass != null) {\n \t\t\t// Using Quartz 2.0 JobDetailImpl class...\n-\t\t\tObject jobDetail = BeanUtils.instantiate(jobDetailImplClass);\n-\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(jobDetail);\n+\t\t\tthis.jobDetail = (JobDetail) BeanUtils.instantiate(jobDetailImplClass);\n+\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this.jobDetail);\n \t\t\tbw.setPropertyValue(\"name\", name);\n \t\t\tbw.setPropertyValue(\"group\", this.group);\n \t\t\tbw.setPropertyValue(\"jobClass\", jobClass);",
    "output": "fix MethodInvokingJobDetailFactoryBean's Quartz 2.0 support"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n@@ -54,6 +54,7 @@\n  * @see org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor\n  * @see AbstractBeanDefinition#getDestroyMethodName()\n  */\n+@SuppressWarnings(\"serial\")\n class DisposableBeanAdapter implements DisposableBean, Runnable, Serializable {\n \n \tprivate static final Log logger = LogFactory.getLog(DisposableBeanAdapter.class);\n@@ -106,7 +107,7 @@ public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition be\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tClass[] paramTypes = this.destroyMethod.getParameterTypes();\n+\t\t\t\tClass<?>[] paramTypes = this.destroyMethod.getParameterTypes();\n \t\t\t\tif (paramTypes.length > 1) {\n \t\t\t\t\tthrow new BeanDefinitionValidationException(\"Method '\" + destroyMethodName + \"' of bean '\" +\n \t\t\t\t\t\t\tbeanName + \"' has more than one parameter - not supported as destroy method\");\n@@ -239,7 +240,7 @@ private Method findDestroyMethod() {\n \t * assuming a \"force\" parameter), else logging an error.\n \t */\n \tprivate void invokeCustomDestroyMethod(final Method destroyMethod) {\n-\t\tClass[] paramTypes = destroyMethod.getParameterTypes();\n+\t\tClass<?>[] paramTypes = destroyMethod.getParameterTypes();\n \t\tfinal Object[] args = new Object[paramTypes.length];\n \t\tif (paramTypes.length == 1) {\n \t\t\targs[0] = Boolean.TRUE;",
    "output": "Fix warnings in DisposableBeanAdapter"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n@@ -154,7 +154,10 @@ public SessionTransactionData(Session session, FlushMode previousFlushMode) {\n \t\t}\n \n \t\tpublic void cleanup() {\n-\t\t\tTransactionSynchronizationManager.unbindResource(this.session.getSessionFactory());\n+\t\t\tSessionFactory sessionFactory = this.session.getSessionFactory();\n+\t\t\tif (TransactionSynchronizationManager.hasResource(sessionFactory)) {\n+\t\t\t\tTransactionSynchronizationManager.unbindResource(sessionFactory);\n+\t\t\t}\n \t\t\tif (this.previousFlushMode != null) {\n \t\t\t\tthis.session.setFlushMode(this.previousFlushMode);\n \t\t\t}",
    "output": "fix unbind failure through appropriate guard"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n@@ -105,7 +105,7 @@ public static ParsedSql parseSqlStatement(final String sql) {\n \t\t\t\t\t// :{x} style parameter\n \t\t\t\t\twhile (j < statement.length && !('}' == statement[j])) {\n \t\t\t\t\t\tj++;\n-\t\t\t\t\t\tif (':' == statement[j] || '{' == statement[j] || isParameterSeparator(statement[j])) {\n+\t\t\t\t\t\tif (':' == statement[j] || '{' == statement[j]) {\n \t\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\"Parameter name contains invalid character '\" + statement[j] + \"' at position \" + i + \" in statement \" + sql);\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Improve named parameter parsing skipping escaped colons like '\\:' and allowing for delimiting parameter names with curly brackets like :{p1}"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n@@ -345,10 +345,11 @@ protected int writeTagContent(TagWriter tagWriter) throws JspException {\n \t\ttagWriter.forceBlock();\n \n \t\tif (!isMethodBrowserSupported(getMethod())) {\n+\t\t\tString inputType = \"hidden\";\n \t\t\ttagWriter.startTag(INPUT_TAG);\n-\t\t\twriteOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, \"hidden\");\n+\t\t\twriteOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, inputType);\n \t\t\twriteOptionalAttribute(tagWriter, NAME_ATTRIBUTE, getMethodParameter());\n-\t\t\twriteOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, getMethod());\n+\t\t\twriteOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, processFieldValue(getName(), getMethod(), inputType));\n \t\t\ttagWriter.endTag();\n \t\t}\n ",
    "output": "Add one missing call to RequestDataValueProcessor in FormTag"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.http.client.support;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import org.springframework.http.client.ClientHttpRequestFactory;\n@@ -33,7 +34,7 @@\n  */\n public abstract class InterceptingHttpAccessor extends HttpAccessor {\n \n-\tprivate List<ClientHttpRequestInterceptor> interceptors;\n+\tprivate List<ClientHttpRequestInterceptor> interceptors = new ArrayList<ClientHttpRequestInterceptor>();\n \n \t/**\n \t * Sets the request interceptors that this accessor should use.",
    "output": "Change ClientHttpRequestInterceptor array to List"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java b/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java\n--- a/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java\n+++ b/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java\n@@ -1685,7 +1685,6 @@ public Object doInHibernate(org.hibernate.Session sess) {\n \t\tsfiControl.verify();\n \t}\n \n-\t@Ignore(\"getting error on UserTransaction mock\")\n \t@Test\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic void testJtaSessionSynchronizationWithSpringTransactionLaterOn() throws Exception {\n@@ -1695,7 +1694,7 @@ public void testJtaSessionSynchronizationWithSpringTransactionLaterOn() throws E\n \t\tTransactionManager tm = (TransactionManager) tmControl.getMock();\n \t\tMockJtaTransaction transaction = new MockJtaTransaction();\n \t\tut.getStatus();\n-\t\tutControl.setReturnValue(Status.STATUS_ACTIVE, 2);\n+\t\tutControl.setReturnValue(Status.STATUS_ACTIVE, 1);\n \t\ttm.getTransaction();\n \t\ttmControl.setReturnValue(transaction, 6);\n ",
    "output": "fix ignored test"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,8 +70,9 @@ public static MethodInvocation currentInvocation() throws IllegalStateException\n \t\tMethodInvocation mi = invocation.get();\n \t\tif (mi == null)\n \t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"No MethodInvocation found: Check that an AOP invocation is in progress, \" +\n-\t\t\t\t\t\"and that the ExposeInvocationInterceptor is in the interceptor chain.\");\n+\t\t\t\t\t\"No MethodInvocation found: Check that an AOP invocation is in progress, and that the \" +\n+\t\t\t\t\t\"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that \" +\n+\t\t\t\t\t\"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!\");\n \t\treturn mi;\n \t}\n ",
    "output": "improve ExposeInvocationInterceptor error message with respect to advice ordering"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -874,11 +874,13 @@ protected final void processRequest(HttpServletRequest request, HttpServletRespo\n \t\t\t\tlogger.trace(\"Cleared thread-bound request context: \" + request);\n \t\t\t}\n \n-\t\t\tif (failureCause != null) {\n-\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tif (failureCause != null) {\n+\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif (this.publishEvents) {\n \t\t\t\t// Whether or not we succeeded, publish an event.",
    "output": "Add missing isDebugEnabled guard in FrameworkServlet Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n@@ -193,7 +193,7 @@ private static class TestBean {\n \t\tprivate BigDecimal[] patternArray;\n \n \t\t@NumberFormat(pattern=\"#,##.00\")\n-\t\tprivate List<BigDecimal>[] patternList;\n+\t\tprivate List<BigDecimal> patternList;\n \n \t\t@NumberFormat(pattern=\"#,##.00\")\n \t\tprivate List<BigDecimal> patternList2;\n@@ -246,11 +246,11 @@ public void setPatternArray(BigDecimal[] patternArray) {\n \t\t\tthis.patternArray = patternArray;\n \t\t}\n \n-\t\tpublic List<BigDecimal>[] getPatternList() {\n+\t\tpublic List<BigDecimal> getPatternList() {\n \t\t\treturn patternList;\n \t\t}\n \n-\t\tpublic void setPatternList(List<BigDecimal>[] patternList) {\n+\t\tpublic void setPatternList(List<BigDecimal> patternList) {\n \t\t\tthis.patternList = patternList;\n \t\t}\n ",
    "output": "fix pattern list test"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java\n@@ -20,6 +20,7 @@\n import javax.sql.DataSource;\n \n import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.InvalidDataAccessApiUsageException;\n import org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException;\n import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n import org.springframework.jdbc.core.namedparam.NamedParameterUtils;\n@@ -177,6 +178,12 @@ public int update(Object... params) throws DataAccessException {\n \t * @return the number of rows affected by the update\n \t */\n \tpublic int update(Object[] params, KeyHolder generatedKeyHolder) throws DataAccessException {\n+\t\tif (!isReturnGeneratedKeys() && getGeneratedKeysColumnNames() == null) {\n+\t\t\tthrow new InvalidDataAccessApiUsageException(\n+\t\t\t\t\t\"The update method taking a KeyHolder should only be used when generated keys have \" +\n+\t\t\t\t\t\"been configured by calling either 'setReturnGeneratedKeys' or \" +\n+\t\t\t\t\t\"'setGeneratedKeysColumnNames'.\");\n+\t\t}\n \t\tvalidateParameters(params);\n \t\tint rowsAffected = getJdbcTemplate().update(newPreparedStatementCreator(params), generatedKeyHolder);\n \t\tcheckRowsAffected(rowsAffected);",
    "output": "add check for existing configuration of generated keys before calling update with a KeyHolder"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n@@ -257,7 +257,7 @@ private static void cleanupTransaction(Object transactionData, EntityManagerFact\n \tpublic static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {\n \t\tEntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf);\n \t\tif (emHolder != null && emHolder.hasTimeout()) {\n-\t\t\tint timeoutValue = emHolder.getTimeToLiveInSeconds();\n+\t\t\tint timeoutValue = (int) emHolder.getTimeToLiveInMillis();\n \t\t\tquery.setHint(\"javax.persistence.lock.timeout\", timeoutValue);\n \t\t\tquery.setHint(\"javax.persistence.query.timeout\", timeoutValue);\n \t\t}",
    "output": "fix JPA 2.0 timeout hints to correctly specify milliseconds"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java\n@@ -28,8 +28,7 @@\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.method.support.HandlerMethodReturnValueHandlerContainer;\n-import org.springframework.web.method.support.StubReturnValueHandler;\n-import org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod;\n+import org.springframework.web.servlet.mvc.method.annotation.support.DefaultMethodReturnValueHandler;\n \n /**\n  * Test fixture for {@link ServletInvocableHandlerMethod} unit tests.\n@@ -51,7 +50,7 @@ public void setUp() throws Exception {\n \t@Test\n \tpublic void setResponseStatus() throws Exception {\n \t\tHandlerMethodReturnValueHandlerContainer handlers = new HandlerMethodReturnValueHandlerContainer();\n-\t\thandlers.registerReturnValueHandler(new StubReturnValueHandler(void.class, false));\n+\t\thandlers.registerReturnValueHandler(new DefaultMethodReturnValueHandler(null));\n \n \t\tMethod method = Handler.class.getDeclaredMethod(\"responseStatus\");\n \t\tServletInvocableHandlerMethod handlerMethod = new ServletInvocableHandlerMethod(new Handler(), method);",
    "output": "Fix issue with tests compiling"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n@@ -73,7 +73,7 @@\n  * @since 3.0\n  * @see ConfigurationClassParser\n  */\n-class ConfigurationClassBeanDefinitionReader {\n+public class ConfigurationClassBeanDefinitionReader {\n \n \tprivate static final String CONFIGURATION_CLASS_FULL = \"full\";\n ",
    "output": "Make ConfigurationClassBeanDefinitionReader public Issue"
  },
  {
    "input": "diff --git a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java\n@@ -21,13 +21,10 @@\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n-\n import org.springframework.beans.Employee;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\n \n /**\n  * <p>\n@@ -43,7 +40,6 @@\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration\n-@TestExecutionListeners( { DependencyInjectionTestExecutionListener.class })\n public class DefaultLocationsBaseTests {\n \n \t@Autowired",
    "output": "Remove unnecessary declaration of @TestExecutionListeners"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n@@ -63,12 +63,6 @@ public boolean containsKey(Object key) {\n \t\treturn (element != null ? true : false);\r\n \t}\r\n \r\n-\tpublic boolean containsValue(Object value) {\r\n-\t\t// force expiry check to guarantee a valid result (otherwise expired elements are considered)\r\n-\t\tcache.evictExpiredElements();\r\n-\t\treturn cache.isValueInCache(value);\r\n-\t}\r\n-\r\n \tpublic Object get(Object key) {\r\n \t\tElement element = cache.get(key);\r\n \t\treturn (element != null ? element.getObjectValue() : null);\r",
    "output": "remove unneeded method"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java\n@@ -214,7 +214,7 @@ else if (arg instanceof TypeVariable) {\n \t * @param typeVariableMap the TypeVariable Map to resolved against\n \t * @return the type if it resolves to a Class, or <code>Object.class</code> otherwise\n \t */\n-\tstatic Class resolveType(Type genericType, Map<TypeVariable, Type> typeVariableMap) {\n+\tpublic static Class resolveType(Type genericType, Map<TypeVariable, Type> typeVariableMap) {\n \t\tType rawType = getRawType(genericType, typeVariableMap);\n \t\treturn (rawType instanceof Class ? (Class) rawType : Object.class);\n \t}\n@@ -247,7 +247,7 @@ static Type getRawType(Type genericType, Map<TypeVariable, Type> typeVariableMap\n \t * {@link Class} for the specified {@link Class}. Searches all super types,\n \t * enclosing types and interfaces.\n \t */\n-\tstatic Map<TypeVariable, Type> getTypeVariableMap(Class clazz) {\n+\tpublic static Map<TypeVariable, Type> getTypeVariableMap(Class clazz) {\n \t\tReference<Map<TypeVariable, Type>> ref = typeVariableCache.get(clazz);\n \t\tMap<TypeVariable, Type> typeVariableMap = (ref != null ? ref.get() : null);\n ",
    "output": "Make GenericTypeResolver.getTypeVariableMap(…) and resolvetype(…) public"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n@@ -19,6 +19,7 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.Suite;\n import org.junit.runners.Suite.SuiteClasses;\n+\n import org.springframework.context.annotation.FeatureMethodEarlyBeanProxyTests;\n \n /**\n@@ -29,7 +30,7 @@\n @RunWith(Suite.class)\n @SuiteClasses({\n \tFeatureMethodEarlyBeanProxyTests.class,\n-\tConfigurationClassWithPlaceholderConfigurerBeanTests.class,\n+\tConfigurationClassWithPlaceholderConfigurerBeanTests.class\n })\n public class FeatureMethodLifecycleIssueTestSuite {\n ",
    "output": "Fix compilation error with javac"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n@@ -183,18 +183,6 @@ private RuntimeBeanReference getConversionService(Element element, Object source\n \t\t\tparserContext.registerComponent(new BeanComponentDefinition(conversionDef, conversionName));\n \t\t\tconversionServiceRef = new RuntimeBeanReference(conversionName);\n \t\t}\n-\t\tElement formattersElement = DomUtils.getChildElementByTagName(element, \"formatters\");\n-\t\tif (formattersElement != null) {\n-\t\t\tManagedList<BeanDefinitionHolder> formatters = new ManagedList<BeanDefinitionHolder>();\n-\t\t\tformatters.setSource(source);\n-\t\t\tfor (Element formatter : DomUtils.getChildElementsByTagName(formattersElement, \"bean\")) {\n-\t\t\t\tBeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(formatter);\n-\t\t\t\tbeanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(formatter, beanDef);\n-\t\t\t\tformatters.add(beanDef);\n-\t\t\t}\n-\t\t\tBeanDefinition beanDef = parserContext.getRegistry().getBeanDefinition(conversionServiceRef.getBeanName());\n-\t\t\tbeanDef.getPropertyValues().add(\"formatters\", formatters);\n-\t\t}\n \t\treturn conversionServiceRef;\n \t}\n ",
    "output": "Remove code for parsing mvc:formatters"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java\n@@ -28,7 +28,7 @@\n  * @author Arjen Poutsma\n  * @since 3.0.6\n  */\n-abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {\n+public abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {\n \n \tprivate ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();\n \n\ndiff --git a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java\n@@ -28,7 +28,7 @@\n  * @author Arjen Poutsma\n  * @since 3.0\n  */\n-abstract class AbstractClientHttpRequest implements ClientHttpRequest {\n+public abstract class AbstractClientHttpRequest implements ClientHttpRequest {\n \n \tprivate boolean executed = false;\n ",
    "output": "Make abstract requests public again"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -1017,7 +1017,6 @@ else if (propValue instanceof Map) {\n \t\t\t\t}\n \t\t\t\t// Pass full property name and old value in here, since we want full\n \t\t\t\t// conversion ability for map values.\n-\t\t\t\t// TODO method parameter nesting level should be token.keys.length + 1\n \t\t\t\tObject convertedMapValue = convertIfNecessary(\n \t\t\t\t\t\tpropertyName, oldValue, pv.getValue(), mapValueType,\n \t\t\t\t\t\tPropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));",
    "output": "remove addressed TODO"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -986,7 +986,6 @@ else if (index >= list.size()) {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tlist.add(convertedValue);\n-\t\t\t\t\tSystem.out.println(list);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (propValue instanceof Map) {",
    "output": "remove accidental system.out commit"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n \n import org.springframework.beans.PropertyEditorRegistry;\n import org.springframework.util.Assert;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -337,13 +338,13 @@ public boolean equals(Object other) {\n \t\t}\n \t\tBindingResult otherResult = (BindingResult) other;\n \t\treturn (getObjectName().equals(otherResult.getObjectName()) &&\n-\t\t\t\tgetTarget().equals(otherResult.getTarget()) &&\n+\t\t\t\tObjectUtils.nullSafeEquals(getTarget(), otherResult.getTarget()) &&\n \t\t\t\tgetAllErrors().equals(otherResult.getAllErrors()));\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn getObjectName().hashCode() * 29 + getTarget().hashCode();\n+\t\treturn getObjectName().hashCode();\n \t}\n \n ",
    "output": "fix AbstractBindingResult to avoid NPE in \"hashCode\" if target is null"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n@@ -180,11 +180,10 @@ protected void loadProperties(Properties props) throws IOException {\n \t\t\t\ttry {\n \t\t\t\t\tis = location.getInputStream();\n \n-\t\t\t\t\tif (location instanceof AbstractFileResolvingResource) {\n-\t\t\t\t\t\tString filename = location.getFilename();\n-\t\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n-\t\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n-\t\t\t\t\t\t}\n+\t\t\t\t\tString filename = (location instanceof AbstractFileResolvingResource) ?\n+\t\t\t\t\t\t\tlocation.getFilename() : null;\n+\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n+\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tif (this.fileEncoding != null) {",
    "output": "Fix breaking logic around getFilenamecall"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n@@ -23,6 +23,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.springframework.core.io.AbstractFileResolvingResource;\n import org.springframework.core.io.Resource;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.DefaultPropertiesPersister;\n@@ -179,15 +180,11 @@ protected void loadProperties(Properties props) throws IOException {\n \t\t\t\ttry {\n \t\t\t\t\tis = location.getInputStream();\n \n-\t\t\t\t\tString filename = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tfilename = location.getFilename();\n-\t\t\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\t\t\t// resource is not file-based. See SPR-7552.\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n-\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n+\t\t\t\t\tif (location instanceof AbstractFileResolvingResource) {\n+\t\t\t\t\t\tString filename = location.getFilename();\n+\t\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n+\t\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tif (this.fileEncoding != null) {",
    "output": "Improve fix for detecting non-file based Resources in PropertiesLoaderSupport (, ) Use instanceof check against AbstractFileResolvingResource instead of try/catch around resource.getFilenamecall"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.context.annotation;\n \n-import java.awt.dnd.Autoscroll;\n import java.io.IOException;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n@@ -25,7 +24,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.beans.factory.BeanClassLoaderAware;\n import org.springframework.beans.factory.BeanDefinitionStoreException;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -131,10 +129,6 @@ public void setEnvironment(Environment environment) {\n \t\tthis.environment = environment;\n \t}\n \n-\tpublic int getOrder() {\n-\t\treturn Ordered.HIGHEST_PRECEDENCE + 1; // make room for AutoScanningBeanDefinitionRegistrar\n-\t}\n-\n \n \t/**\n \t * Derive further bean definitions from the configuration classes in the registry.",
    "output": "Remove obsolete ConfigurationClassPostProcessor.getOrder"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java\n@@ -34,6 +34,7 @@\n  * \n  * @author Mark Fisher\n  * @author Juergen Hoeller\n+ * @author Ramnivas Laddad\n  * @since 3.0\n  */\n public class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {\n@@ -48,7 +49,7 @@ public class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParse\n \t * The bean name of the internally managed transaction aspect (mode=\"aspectj\").\n \t */\n \tpublic static final String ASYNC_EXECUTION_ASPECT_BEAN_NAME =\n-\t\t\t\"org.springframework.transaction.config.internalTransactionAspect\";\n+\t\t\t\"org.springframework.scheduling.config.internalAsyncExecutionAspect\";\n \n \tprivate static final String ASYNC_EXECUTION_ASPECT_CLASS_NAME =\n \t\t\t\"org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect\";",
    "output": "Fix configuration of AnnotationAsyncExecutionAspect (was incorrectly under the same name as that for transaction management aspect)"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java b/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java\n@@ -5,5 +5,5 @@\n  * Includes adapters to the Converter SPI.\r\n  *\r\n  */\r\n-package org.springframework.core.io.support;\r\n+package org.springframework.core.serializer.support;\r\n \r",
    "output": "fix package declaration"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n@@ -190,7 +190,7 @@ private int findPlaceholderEndIndex(CharSequence buf, int startIndex) {\n \t\t\tif (StringUtils.substringMatch(buf, index, this.placeholderSuffix)) {\n \t\t\t\tif (withinNestedPlaceholder > 0) {\n \t\t\t\t\twithinNestedPlaceholder--;\n-\t\t\t\t\tindex = index + this.placeholderPrefix.length() - 1;\n+\t\t\t\t\tindex = index + this.placeholderSuffix.length();\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\treturn index;",
    "output": "fix findPlaceholderEndIndex to work with a custom suffix as well"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java\n@@ -134,7 +134,8 @@ public void notModified() throws Exception {\n \tpublic void modified() throws Exception {\n \t\tMockHttpServletRequest request = new MockHttpServletRequest();\n \t\trequest.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"/foo.css\");\n-\t\trequest.addHeader(\"If-Modified-Since\", new ClassPathResource(\"test/foo.css\", getClass()).getFile().lastModified() - 1);\n+\t\trequest.addHeader(\"If-Modified-Since\",\n+\t\t\t\tnew ClassPathResource(\"test/foo.css\", getClass()).getFile().lastModified() / 1000 * 1000 - 1);\n \t\trequest.setMethod(\"GET\");\n \t\tMockHttpServletResponse response = new MockHttpServletResponse();\n \t\thandler.handleRequest(request, response);",
    "output": "make ResourceHttpRequestHandlerTests more reliable"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -1326,11 +1326,12 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) {\n \t\t}\n \n \t\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {\n-\t\t\tif (!(bean instanceof BeanPostProcessor) &&\n+\t\t\tif (bean != null && !(bean instanceof BeanPostProcessor) &&\n \t\t\t\t\tthis.beanFactory.getBeanPostProcessorCount() < this.beanPostProcessorTargetCount) {\n \t\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\t\tlogger.info(\"Bean '\" + beanName + \"' is not eligible for getting processed by all \" +\n-\t\t\t\t\t\t\t\"BeanPostProcessors (for example: not eligible for auto-proxying)\");\n+\t\t\t\t\tlogger.info(\"Bean '\" + beanName + \"' of type [\" + bean.getClass() +\n+\t\t\t\t\t\t\t\"] is not eligible for getting processed by all BeanPostProcessors \" +\n+\t\t\t\t\t\t\t\"(for example: not eligible for auto-proxying)\");\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn bean;",
    "output": "add bean type to post-processing log statement"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java b/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n@@ -351,7 +351,7 @@ protected boolean doReceiveAndExecute(\n \t\t\t\t}\n \t\t\t\tnoMessageReceived(invoker, sessionToUse);\n \t\t\t\t// Nevertheless call commit, in order to reset the transaction timeout (if any).\n-\t\t\t\tcommitIfNecessary(session, message);\n+\t\t\t\tcommitIfNecessary(sessionToUse, message);\n \t\t\t\t// Indicate that no message has been received.\n \t\t\t\treturn false;\n \t\t\t}",
    "output": "fix no-message-received commit case for non-cached Sessions"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n@@ -417,7 +417,8 @@ private static String encode(String source, String encoding, BitSet notEncoded)\n \tprivate static byte[] encode(byte[] source, BitSet notEncoded) {\n \t\tAssert.notNull(source, \"'source' must not be null\");\n \t\tByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);\n-\t\tfor (byte b : source) {\n+\t\tfor (int i = 0; i < source.length; i++) {\n+\t\t\tint b = source[i];\n \t\t\tif (b < 0) {\n \t\t\t\tb += 256;\n \t\t\t}",
    "output": "fix accidental change to byte array loop"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n@@ -263,7 +263,7 @@ private void splitSqlScript(String script, char delim, List<String> statements)\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t\telse if (c == '\\n' || c == '\\t') {\n-\t\t\t\t\tcontinue;\n+\t\t\t\t\tc = ' ';\n \t\t\t\t}\n \t\t\t}\n \t\t\tsb.append(c);\n\ndiff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java\n@@ -71,7 +71,6 @@ public void testBuildWithCommentsAndFailedDrop() throws Exception {\n \t\tassertTestDatabaseCreated();\n \t}\n \n-\t@Ignore(\"Disabled until SPR-7449 is resolved\")\n \t@Test\n \tpublic void scriptWithEolBetweenTokens() throws Exception {\n \t\tdatabasePopulator.addScript(resourceLoader.getResource(\"users-schema.sql\"));",
    "output": "fix yet another regression with respect to newlines"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n@@ -254,15 +254,19 @@ private void splitSqlScript(String script, char delim, List<String> statements)\n \t\t\tif (c == '\\'') {\n \t\t\t\tinLiteral = !inLiteral;\n \t\t\t}\n-\t\t\tif ((c == delim || c == '\\n') && !inLiteral) {\n-\t\t\t\tif (sb.length() > 0) {\n-\t\t\t\t\tstatements.add(sb.toString());\n-\t\t\t\t\tsb = new StringBuilder();\n+\t\t\tif (!inLiteral) {\n+\t\t\t\tif (c == delim) {\n+\t\t\t\t\tif (sb.length() > 0) {\n+\t\t\t\t\t\tstatements.add(sb.toString());\n+\t\t\t\t\t\tsb = new StringBuilder();\n+\t\t\t\t\t}\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\telse if (c == '\\n' || c == '\\t') {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(c);\n-\t\t\t}\n+\t\t\tsb.append(c);\n \t\t}\n \t\tif (StringUtils.hasText(sb)) {\n \t\t\tstatements.add(sb.toString());",
    "output": "fix accidental regression with respect to newlines"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java\n@@ -140,6 +140,7 @@ public class PropertyPlaceholderConfigurer extends PropertyResourceConfigurer\n \n \tprivate BeanFactory beanFactory;\n \n+\n \t/**\n \t * Set the prefix that a placeholder string starts with.\n \t * The default is \"${\".\n@@ -158,6 +159,16 @@ public void setPlaceholderSuffix(String placeholderSuffix) {\n \t\tthis.placeholderSuffix = placeholderSuffix;\n \t}\n \n+\t/**\n+\t * Specify the separating character between the placeholder variable\n+\t * and the associated default value, or <code>null</code> if no such\n+\t * special character should be processed as a value separator.\n+\t * The default is \":\".\n+\t */\n+\tpublic void setValueSeparator(String valueSeparator) {\n+\t\tthis.valueSeparator = valueSeparator;\n+\t}\n+\n \t/**\n \t * Set the system property mode by the name of the corresponding constant,\n \t * e.g. \"SYSTEM_PROPERTIES_MODE_OVERRIDE\".\n@@ -255,6 +266,7 @@ public void setBeanFactory(BeanFactory beanFactory) {\n \t\tthis.beanFactory = beanFactory;\n \t}\n \n+\n \t@Override\n \tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)\n \t\t\tthrows BeansException {",
    "output": "add missing setter method for the \"valueSeparator\" property"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -174,9 +174,7 @@ public class AnnotationMethodHandlerAdapter extends WebContentGenerator\n \n \tprivate ModelAndViewResolver[] customModelAndViewResolvers;\n \n-\tprivate HttpMessageConverter<?>[] messageConverters =\n-\t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),\n-\t\t\t\t\tnew SourceHttpMessageConverter(), new XmlAwareFormHttpMessageConverter()};\n+\tprivate HttpMessageConverter<?>[] messageConverters;\n \n \tprivate int order = Ordered.LOWEST_PRECEDENCE;\n \n@@ -191,6 +189,12 @@ public class AnnotationMethodHandlerAdapter extends WebContentGenerator\n \tpublic AnnotationMethodHandlerAdapter() {\n \t\t// no restriction of HTTP methods by default\n \t\tsuper(false);\n+\n+\t\t// See SPR-7316\n+\t\tStringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n+\t\tstringHttpMessageConverter.setWriteAcceptCharset(false);\n+\t\tmessageConverters = new HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), stringHttpMessageConverter,\n+\t\t\t\tnew SourceHttpMessageConverter(), new XmlAwareFormHttpMessageConverter()};\n \t}\n \n ",
    "output": "remove \"Accept-Charset\" header from response, generated by @ResponseBody"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -460,7 +460,7 @@ protected Collection convertToTypedCollection(\n \t\t\tCollection original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n-\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType) || original.isEmpty()) {\n+\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType)) {\n \t\t\treturn original;\n \t\t}\n \n@@ -542,7 +542,7 @@ protected Map convertToTypedMap(\n \t\t\tMap original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n-\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType) || original.isEmpty()) {\n+\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType)) {\n \t\t\treturn original;\n \t\t}\n ",
    "output": "remove eager skipping of empty collection conversion, for UtilNamespaceHandlerTests to pass again"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -225,6 +225,22 @@ public void testBindingWithErrors() throws Exception {\n \t\t}\n \t}\n \n+\tpublic void testBindingWithSystemFieldError() throws Exception {\n+\t\tTestBean rod = new TestBean();\n+\t\tDataBinder binder = new DataBinder(rod, \"person\");\n+\t\tMutablePropertyValues pvs = new MutablePropertyValues();\n+\t\tpvs.add(\"class.classLoader.URLs[0]\", \"http://myserver\");\n+\t\tbinder.setIgnoreUnknownFields(false);\n+\n+\t\ttry {\n+\t\t\tbinder.bind(pvs);\n+\t\t\tfail(\"Should have thrown NotWritablePropertyException\");\n+\t\t}\n+\t\tcatch (NotWritablePropertyException ex) {\n+\t\t\tassertTrue(ex.getMessage().contains(\"classLoader\"));\n+\t\t}\n+\t}\n+\n \tpublic void testBindingWithErrorsAndCustomEditors() throws Exception {\n \t\tTestBean rod = new TestBean();\n \t\tDataBinder binder = new DataBinder(rod, \"person\");",
    "output": "add test for invalid binding to ClassLoader"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -19,13 +19,18 @@\n import static org.junit.Assert.*;\n import static org.springframework.core.annotation.AnnotationUtils.*;\n \n+import java.io.Serializable;\n+import java.lang.annotation.ElementType;\n import java.lang.annotation.Inherited;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.lang.reflect.Method;\n+import java.util.List;\n \n import org.junit.Test;\n import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationUtils.ParameterAnnotation;\n \n /**\n  * @author Rod Johnson\n@@ -364,7 +369,8 @@ public static interface InterfaceWithAnnotatedMethodParameters {\n \n \t\tvoid foo(String foo, @MyAnnotation(\"foo\") Long bar);\n \n-\t\tvoid bar(@MyAnnotation(\"first\") String first, String second, @MyAnnotation(\"third\") Serializable third);\n+\t\tvoid bar(@MyAnnotation(\"first\") String first, String second,\n+\t\t\t\t@Transactional @MyAnnotation(\"third\") Serializable third);\n \t}\n }\n ",
    "output": "Add missing imports. Added additional annotation to test interface to make sure no ClassCastException appears"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java b/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java\n@@ -41,17 +41,20 @@\n import org.springframework.http.MediaType;\n import org.springframework.http.MockHttpInputMessage;\n import org.springframework.http.MockHttpOutputMessage;\n+import org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n \n-/** @author Arjen Poutsma */\n+/**\n+ * @author Arjen Poutsma\n+ */\n public class FormHttpMessageConverterTests {\n \n \tprivate FormHttpMessageConverter converter;\n \n \t@Before\n \tpublic void setUp() {\n-\t\tconverter = new FormHttpMessageConverter();\n+\t\tconverter = new XmlAwareFormHttpMessageConverter();\n \t}\n \n \t@Test",
    "output": "add XmlAwareFormHttpMessageConverter, taking over the 3.0.2-introduced XML multipart support (avoiding a package cycle)"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -89,7 +89,7 @@\n  * @author Sam Brannen\n  * @author Chris Beams\n  */\n-public final class DefaultListableBeanFactoryTests {\n+public class DefaultListableBeanFactoryTests {\n \n \tprivate static final Log factoryLog = LogFactory.getLog(DefaultListableBeanFactory.class);\n \n@@ -1280,6 +1280,15 @@ public void testAutowireBeanWithFactoryBeanByType() {\n \t\t\t\tfactoryBean, bean.getFactoryBean());\n \t}\n \n+\t@Test\n+\tpublic void testGetTypeForAbstractFactoryBean() {\n+\t\tDefaultListableBeanFactory lbf = new DefaultListableBeanFactory();\n+\t\tRootBeanDefinition bd = new RootBeanDefinition(FactoryBeanThatShouldntBeCalled.class);\n+\t\tbd.setAbstract(true);\n+\t\tlbf.registerBeanDefinition(\"factoryBean\", bd);\n+\t\tassertNull(lbf.getType(\"factoryBean\"));\n+\t}\n+\n \t/**\n \t * Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>\n \t * be autowired <em>by name</em>, as &amp; is an illegal character in",
    "output": "add test for getType against an abstract FactoryBean"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n@@ -604,7 +604,7 @@ private void setParameterValues(PreparedStatement preparedStatement, List<Object\n \t\tint colIndex = 0;\n \t\tfor (Object value : values) {\n \t\t\tcolIndex++;\n-\t\t\tif (columnTypes == null || colIndex < columnTypes.length) {\n+\t\t\tif (columnTypes == null || colIndex > columnTypes.length) {\n \t\t\t\tStatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value);\n \t\t\t}\n \t\t\telse {",
    "output": "fix index test for parameter types"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java\n@@ -34,6 +34,7 @@\n import org.springframework.jdbc.core.SqlParameter;\n import org.springframework.jdbc.core.metadata.CallMetaDataContext;\n import org.springframework.jdbc.core.namedparam.SqlParameterSource;\n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -203,6 +204,7 @@ public boolean isReturnValueRequired() {\n \t * @param parameter the {@link SqlParameter} to add\n \t */\n \tpublic void addDeclaredParameter(SqlParameter parameter) {\n+\t\tAssert.notNull(parameter, \"The supplied parameter must not be null\");\n \t\tif (!StringUtils.hasText(parameter.getName())) {\n \t\t\tthrow new InvalidDataAccessApiUsageException(\n \t\t\t\t\t\"You must specify a parameter name when declaring parameters for \\\"\" + getProcedureName() + \"\\\"\");",
    "output": "add null check for parameter"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java\n@@ -135,7 +135,7 @@ else if (this.optionSource instanceof Collection) {\n \t\telse if (this.optionSource instanceof Map) {\n \t\t\trenderFromMap(tagWriter);\n \t\t}\n-\t\telse if (this.optionSource instanceof Class && this.optionSource.getClass().isEnum()) {\n+\t\telse if (this.optionSource instanceof Class && ((Class) this.optionSource).isEnum()) {\n \t\t\trenderFromEnum(tagWriter);\n \t\t}\n \t\telse {",
    "output": "fix JSP SelectTag's support for rendering enum constants"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -295,6 +295,7 @@ public void testViewControllersOnWebSphere() throws Exception {\n \t\trequest.setRequestURI(\"/myapp/app/bar\");\n \t\trequest.setContextPath(\"/myapp\");\n \t\trequest.setServletPath(\"/app/\");\n+\t\trequest.setAttribute(\"com.ibm.websphere.servlet.uri_non_decoded\", \"/myapp/app/bar\");\n \t\tHandlerExecutionChain chain = mapping2.getHandler(request);\n \t\tassertEquals(4, chain.getInterceptors().length);\n \t\tassertTrue(chain.getInterceptors()[1] instanceof ConversionServiceExposingInterceptor);",
    "output": "remove trailing servlet path slash on WebSphere only"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -233,8 +233,10 @@ public String getServletPath(HttpServletRequest request) {\n \t\tif (servletPath == null) {\n \t\t\tservletPath = request.getServletPath();\n \t\t}\n-\t\tif (servletPath.length() > 1 && servletPath.endsWith(\"/\")) {\n-\t\t\t// Probably on WebSphere: removing trailing slash...\n+\t\tif (servletPath.length() > 1 && servletPath.endsWith(\"/\") &&\n+\t\t\t\trequest.getAttribute(WEBSPHERE_URI_ATTRIBUTE) != null) {\n+\t\t\t// On WebSphere, for a \"/foo/\" case that would be \"/foo\" on all other servlet containers:\n+\t\t\t// removing trailing slash, proceeding with that slash as final path mapping...\n \t\t\tservletPath = servletPath.substring(0, servletPath.length() - 1);\n \t\t}\n \t\treturn servletPath;",
    "output": "remove trailing servlet path slash on WebSphere only"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java\n@@ -89,6 +89,8 @@ public void decode() throws UnsupportedEncodingException {\n \t\tassertEquals(\"Invalid encoded URI\", \"foobar\", UriUtils.decode(\"foobar\", ENC));\n \t\tassertEquals(\"Invalid encoded URI\", \"foo bar\", UriUtils.decode(\"foo%20bar\", ENC));\n \t\tassertEquals(\"Invalid encoded URI\", \"foo+bar\", UriUtils.decode(\"foo%2bbar\", ENC));\n+\t\tassertEquals(\"Invalid encoded result\", \"T\\u014dky\\u014d\", UriUtils.decode(\"T%C5%8Dky%C5%8D\", ENC));\n+\t\tassertEquals(\"Invalid encoded result\", \"/Z\\u00fcrich\", UriUtils.decode(\"/Z%C3%BCrich\", ENC));\n \t}\n \n \t@Test(expected = IllegalArgumentException.class)",
    "output": "Add more tests"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java b/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2009 the original author or authors.\r\n+ * Copyright 2002-2010 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -31,8 +31,9 @@ public class TemplateParserContext implements ParserContext {\n \r\n \tprivate final String expressionSuffix;\r\n \r\n+\r\n \t/**\r\n-\t * Creates a new TemplateParserContext with the default #{ prefix and } suffix.\r\n+\t * Create a new TemplateParserContext with the default \"#{\" prefix and \"}\" suffix.\r\n \t */\r\n \tpublic TemplateParserContext() {\r\n \t\tthis(\"#{\", \"}\");\r",
    "output": "fix TemplateParserContext documentation"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java b/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,6 +58,7 @@ public void setMethodParam(String methodParam) {\n \t\tthis.methodParam = methodParam;\n \t}\n \n+\t@Override\n \tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n \t\t\tthrows ServletException, IOException {\n \n@@ -86,6 +87,7 @@ public HttpMethodRequestWrapper(String method, HttpServletRequest request) {\n \t\t\tthis.method = method;\n \t\t}\n \n+\t\t@Override\n \t\tpublic String getMethod() {\n \t\t\treturn this.method;\n \t\t}",
    "output": "Add @Override annotations"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -130,9 +130,9 @@ public String[] resolveMessageCodes(String errorCode) {\n \t}\n \n \tpublic String[] resolveMessageCodes(String errorCode, String field) {\n-\t\tString fixedField = fixedField(field);\n-\t\tClass fieldType = getFieldType(fixedField);\n-\t\treturn getMessageCodesResolver().resolveMessageCodes(errorCode, getObjectName(), fixedField, fieldType);\n+\t\tClass fieldType = getFieldType(field);\n+\t\treturn getMessageCodesResolver().resolveMessageCodes(\n+\t\t\t\terrorCode, getObjectName(), fixedField(field), fieldType);\n \t}\n \n ",
    "output": "fix double fixedField call for getFieldType"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n@@ -50,7 +50,7 @@\n  * @since 3.0\r\n  * @see CronTrigger\r\n  */\r\n-class CronSequenceGenerator {\r\n+public class CronSequenceGenerator {\r\n \r\n \tprivate final BitSet seconds = new BitSet(60);\r\n \r",
    "output": "make CronSequenceGenerator public"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -522,12 +522,13 @@ else if (requestBody != null) {\n \t\tpublic void doWithRequest(ClientHttpRequest httpRequest) throws IOException {\n \t\t\tsuper.doWithRequest(httpRequest);\n \t\t\tif (!requestEntity.hasBody()) {\n+\t\t\t\tHttpHeaders httpHeaders = httpRequest.getHeaders();\n \t\t\t\tHttpHeaders requestHeaders = requestEntity.getHeaders();\n \t\t\t\tif (!requestHeaders.isEmpty()) {\n-\t\t\t\t\thttpRequest.getHeaders().putAll(requestHeaders);\n+\t\t\t\t\thttpHeaders.putAll(requestHeaders);\n \t\t\t\t}\n-\t\t\t\tif (httpRequest.getHeaders().getContentLength() == -1) {\n-\t\t\t\t\thttpRequest.getHeaders().setContentLength(0L);\n+\t\t\t\tif (httpHeaders.getContentLength() == -1) {\n+\t\t\t\t\thttpHeaders.setContentLength(0L);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Fix the build"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -222,7 +222,7 @@ public <T> T getBean(String name, Class<T> requiredType, Object... args) throws\n \t * @throws BeansException if the bean could not be created\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tprivate <T> T doGetBean(\n+\tprotected <T> T doGetBean(\n \t\t\tfinal String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly)\n \t\t\tthrows BeansException {\n ",
    "output": "change doGetBean signature back to protected"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,7 +52,7 @@ public abstract class AutoProxyUtils {\n \t * @return whether the given bean should be proxied with its target class\n \t */\n \tpublic static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {\n-\t\tif (beanFactory.containsBeanDefinition(beanName)) {\n+\t\tif (beanName != null && beanFactory.containsBeanDefinition(beanName)) {\n \t\t\tBeanDefinition bd = beanFactory.getBeanDefinition(beanName);\n \t\t\treturn Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE));\n \t\t}",
    "output": "fix @Configurable issue with null bean name"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java\n--- a/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java\n+++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -223,6 +223,10 @@ public Object invoke(MethodInvocation invocation) throws Throwable {\n \t\t}\n \t\tcatch (InvocationTargetException ex) {\n \t\t\tThrowable targetEx = ex.getTargetException();\n+\t\t\t// Hessian 4.0 check: another layer of InvocationTargetException. \n+\t\t\tif (targetEx instanceof InvocationTargetException) {\n+\t\t\t\ttargetEx = ((InvocationTargetException) targetEx).getTargetException();\n+\t\t\t}\n \t\t\tif (targetEx instanceof HessianConnectionException) {\n \t\t\t\tthrow convertHessianAccessException(targetEx);\n \t\t\t}",
    "output": "fix exception propagation issue with Hessian 4.0"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -147,7 +147,7 @@ private void initProxyClassLoader() {\n \t\t\t\tthis.proxyClassLoader = ((EntityManagerFactoryInfo) this.targetFactory).getBeanClassLoader();\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tthis.proxyClassLoader = EntityManagerFactory.class.getClassLoader();\n+\t\t\t\tthis.proxyClassLoader = this.targetFactory.getClass().getClassLoader();\n \t\t\t}\n \t\t}\n ",
    "output": "use target factory's ClassLoader in case of a raw EntityManagerFactory"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,8 +17,8 @@\n package org.springframework.jdbc.support;\n \n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.WeakHashMap;\n import javax.sql.DataSource;\n \n import org.apache.commons.logging.Log;\n@@ -85,7 +85,7 @@ public static SQLErrorCodesFactory getInstance() {\n \t/**\n \t * Map to cache the SQLErrorCodes instance per DataSource.\n \t */\n-\tprivate final Map<DataSource, SQLErrorCodes> dataSourceCache = new HashMap<DataSource, SQLErrorCodes>(16);\n+\tprivate final Map<DataSource, SQLErrorCodes> dataSourceCache = new WeakHashMap<DataSource, SQLErrorCodes>(16);\n \n \n \t/**",
    "output": "use WeakHashMap for DataSource-keyed cache"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n@@ -178,7 +178,7 @@ public void setCompleteAutoload(boolean completeAutoload) {\n \t\t\t\tthis.tilesInitializer = (TilesInitializer) clazz.newInstance();\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n-\t\t\t\tthrow new IllegalStateException(\"Tiles 2.2 not available\", ex);\n+\t\t\t\tthrow new IllegalStateException(\"Tiles-Extras 2.2 not available\", ex);\n \t\t\t}\n \t\t}\n \t\telse {",
    "output": "fix error message"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n@@ -16,7 +16,6 @@\n \r\n package org.springframework.beans.factory.config;\r\n \r\n-import org.springframework.beans.factory.BeanFactory;\r\n import org.springframework.util.Assert;\r\n \r\n /**\r",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -322,7 +322,7 @@ public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefin\n \t\t}\n \t\tif (!currentResources.add(encodedResource)) {\n \t\t\tthrow new BeanDefinitionStoreException(\n-\t\t\t\t\t\"Detected recursive loading of \" + encodedResource + \" - check your import definitions!\");\n+\t\t\t\t\t\"Detected cyclic loading of \" + encodedResource + \" - check your import definitions!\");\n \t\t}\n \t\ttry {\n \t\t\tInputStream inputStream = encodedResource.getResource().getInputStream();",
    "output": "change exception wording from \"recursive\" to \"cyclic\""
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2009 the original author or authors.\r\n+ * Copyright 2002-2010 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -145,6 +145,12 @@ public String getConversationId() {\n \t\t\tassertEquals(42, tb3.age);\r\n \t\t\tassertEquals(\"123 UK\", tb3.country);\r\n \t\t\tassertEquals(\"123 UK\", tb3.countryFactory.getObject());\r\n+\t\t\tSystem.getProperties().put(\"country\", \"US\");\r\n+\t\t\tassertEquals(\"123 UK\", tb3.country);\r\n+\t\t\tassertEquals(\"123 US\", tb3.countryFactory.getObject());\r\n+\t\t\tSystem.getProperties().put(\"country\", \"UK\");\r\n+\t\t\tassertEquals(\"123 UK\", tb3.country);\r\n+\t\t\tassertEquals(\"123 UK\", tb3.countryFactory.getObject());\r\n \t\t\tassertSame(tb0, tb3.tb);\r\n \r\n \t\t\ttb3 = (ValueTestBean) SerializationTestUtils.serializeAndDeserialize(tb3);\r",
    "output": "add test for expression re-evaluation"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -340,6 +340,7 @@ protected Resource[] findPathMatchingResources(String locationPattern) throws IO\n \t\tResource[] rootDirResources = getResources(rootDirPath);\n \t\tSet<Resource> result = new LinkedHashSet<Resource>(16);\n \t\tfor (Resource rootDirResource : rootDirResources) {\n+\t\t\trootDirResource = resolveRootDirResource(rootDirResource);\n \t\t\tif (isJarResource(rootDirResource)) {\n \t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));\n \t\t\t}",
    "output": "fix resolveRootDirResource regression"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -194,6 +194,7 @@ else if (method.getName().equals(\"toString\")) {\n \t\t\t\telse {\n \t\t\t\t\tsb.append(\" from DataSource [\").append(this.targetDataSource).append(\"]\");\n \t\t\t\t}\n+\t\t\t\treturn sb.toString();\n \t\t\t}\n \t\t\telse if (method.getName().equals(\"isClosed\")) {\n \t\t\t\treturn this.closed;",
    "output": "fix toString handling"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n@@ -151,9 +151,9 @@ protected Collection<ApplicationListener> getApplicationListeners(ApplicationEve\n \t\t\t\t\t\t\tallListeners.add(listener);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tOrderComparator.sort(allListeners);\n-\t\t\t\t\tthis.retrieverCache.put(cacheKey, retriever);\n \t\t\t\t}\n+\t\t\t\tOrderComparator.sort(allListeners);\n+\t\t\t\tthis.retrieverCache.put(cacheKey, retriever);\n \t\t\t}\n \t\t\treturn allListeners;\n \t\t}",
    "output": "fix retriever cache putting"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -67,7 +67,7 @@ static Object unwrapResourceIfNecessary(Object resource) {\n \t\t}\n \t\tif (aopAvailable) {\n \t\t\t// now unwrap scoped proxy\n-\t\t\tresourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resource);\n+\t\t\tresourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef);\n \t\t}\n \t\treturn resourceRef;\n \t}",
    "output": "fix scoped proxy unwrapping"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java\n@@ -37,18 +37,18 @@\n  */\n final class ObjectToStringConverter implements ConditionalGenericConverter {\n \n+\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n+\t\treturn Collections.singleton(new ConvertiblePair(Object.class, String.class));\n+\t}\n+\n \tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tClass sourceClass = sourceType.getObjectType();\n+\t\tClass<?> sourceClass = sourceType.getObjectType();\n \t\treturn Number.class.isAssignableFrom(sourceClass) || Boolean.class.equals(sourceClass) ||\n \t\t\t\tCharacter.class.equals(sourceClass) || CharSequence.class.isAssignableFrom(sourceClass) ||\n \t\t\t\tStringWriter.class.isAssignableFrom(sourceClass) || sourceClass.isEnum() ||\n \t\t\t\tObjectToObjectConverter.hasValueOfMethodOrConstructor(sourceClass, String.class);\n \t}\n \n-\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n-\t\treturn Collections.singleton(new ConvertiblePair(Object.class, String.class));\n-\t}\n-\n \tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\treturn (source != null ? source.toString() : null);\n \t}",
    "output": "remove generic warning"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java\n@@ -623,8 +623,17 @@ protected void checkRequiredFields(MutablePropertyValues mpvs) {\n \t\t\t}\n \t\t\tfor (String field : requiredFields) {\n \t\t\t\tPropertyValue pv = propertyValues.get(field);\n-\t\t\t\tif (pv == null || pv.getValue() == null ||\n-\t\t\t\t\t\t(pv.getValue() instanceof String && !StringUtils.hasText((String) pv.getValue()))) {\n+\t\t\t\tboolean empty = (pv == null || pv.getValue() == null);\n+\t\t\t\tif (!empty) {\n+\t\t\t\t\tif (pv.getValue() instanceof String) {\n+\t\t\t\t\t\tempty = !StringUtils.hasText((String) pv.getValue());\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (pv.getValue() instanceof String[]) {\n+\t\t\t\t\t\tString[] values = (String[]) pv.getValue();\n+\t\t\t\t\t\tempty = (values.length == 0 || !StringUtils.hasText(values[0]));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (empty) {\n \t\t\t\t\t// Use bind error processor to create FieldError.\n \t\t\t\t\tgetBindingErrorProcessor().processMissingFieldError(field, getInternalBindingResult());\n \t\t\t\t\t// Remove property from property values to bind:",
    "output": "add special handling of String array values for required fields, e.g. for WebRequestDataBinder"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -1575,13 +1575,23 @@ private static class MyBinderInitializingCommandProvidingFormController extends\n \t\t@InitBinder\n \t\tprivate void initBinder(WebDataBinder binder) {\n \t\t\tbinder.initBeanPropertyAccess();\n+\t\t\tbinder.setRequiredFields(\"sex\");\n \t\t\tLocalValidatorFactoryBean vf = new LocalValidatorFactoryBean();\n \t\t\tvf.afterPropertiesSet();\n \t\t\tbinder.setValidator(vf);\n \t\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n \t\t\tdateFormat.setLenient(false);\n \t\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n \t\t}\n+\n+\t\t@Override\n+\t\t@RequestMapping(\"/myPath.do\")\n+\t\tpublic String myHandle(@ModelAttribute(\"myCommand\") @Valid TestBean tb, BindingResult errors, ModelMap model) {\n+\t\t\tif (!errors.hasFieldErrors(\"sex\")) {\n+\t\t\t\tthrow new IllegalStateException(\"requiredFields not applied\");\n+\t\t\t}\n+\t\t\treturn super.myHandle(tb, errors, model);\n+\t\t}\n \t}\n \n \t@Controller",
    "output": "add unit test for setRequiredFields with @MVC"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -1081,13 +1081,6 @@ public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> an\n \t\treturn getBeanFactory().getBeansWithAnnotation(annotationType);\n \t}\n \n-\tpublic Map<String, Object> getBeansWithAnnotation(\n-\t\t\tClass<? extends Annotation> annotationType, boolean includeNonSingletons, boolean allowEagerInit)\n-\t\t\tthrows BeansException {\n-\n-\t\treturn getBeanFactory().getBeansWithAnnotation(annotationType, includeNonSingletons, allowEagerInit);\n-\t}\n-\n \tpublic <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) {\n \t\treturn getBeanFactory().findAnnotationOnBean(beanName, annotationType);\n \t}",
    "output": "remove getBeansWithAnnotation(Class,boolean,boolean) method from ListableBeanFactory; reimplemented getBeansWithAnnotation(Class) to avoid use of getBeanNamesForType(Object.class)"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -69,6 +69,7 @@\n import org.springframework.core.convert.ConversionService;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.util.StringValueResolver;\n \n@@ -1212,7 +1213,7 @@ public Class run() throws Exception {\n \t}\n \t\n \tprivate Class doResolveBeanClass(RootBeanDefinition mbd, Class... typesToMatch) throws ClassNotFoundException {\n-\t\tif (typesToMatch != null) {\n+\t\tif (!ObjectUtils.isEmpty(typesToMatch)) {\n \t\t\tClassLoader tempClassLoader = getTempClassLoader();\n \t\t\tif (tempClassLoader != null) {\n \t\t\t\tif (tempClassLoader instanceof DecoratingClassLoader) {",
    "output": "fix accidental breakage in bean class resolution with tempClassLoader"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -226,9 +226,10 @@ private Map<String, Lifecycle> getLifecycleBeans() {\n \t\tString[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);\n \t\tfor (String beanName : beanNames) {\n \t\t\tString beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName);\n-\t\t\tString beanNameToCheck = (this.beanFactory.isFactoryBean(beanNameToRegister) ?\n-\t\t\t\t\tBeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);\n-\t\t\tif (this.beanFactory.containsSingleton(beanNameToRegister) ||\n+\t\t\tboolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister);\n+\t\t\tString beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);\n+\t\t\tif ((this.beanFactory.containsSingleton(beanNameToRegister) &&\n+\t\t\t\t\t(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||\n \t\t\t\t\tSmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {\n \t\t\t\tLifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class);\n \t\t\t\tif (bean != this) {",
    "output": "fix non-Lifecycle-FactoryBean with exposed Lifecycle object case"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n@@ -121,7 +121,7 @@ public <T> Set<ConstraintViolation<T>> validateProperty(T object, String propert\n \tpublic <T> Set<ConstraintViolation<T>> validateValue(\r\n \t\t\tClass<T> beanType, String propertyName, Object value, Class<?>... groups) {\r\n \r\n-\t\treturn this.targetValidator.validateValue(beanType, propertyName, groups);\r\n+\t\treturn this.targetValidator.validateValue(beanType, propertyName, value, groups);\r\n \t}\r\n \r\n \tpublic BeanDescriptor getConstraintsForClass(Class<?> clazz) {\r",
    "output": "fix Validator delegation code"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -84,7 +84,7 @@ public TypeDescriptor(MethodParameter methodParameter) {\n \t * @param methodParameter the MethodParameter to wrap\n \t * @param type the specific type to expose (may be an array/collection element)\n \t */\n-\tprotected TypeDescriptor(MethodParameter methodParameter, Class type) {\n+\tprotected TypeDescriptor(MethodParameter methodParameter, Class<?> type) {\n \t\tAssert.notNull(methodParameter, \"MethodParameter must not be null\");\n \t\tthis.methodParameter = methodParameter;\n \t\tthis.type = type;",
    "output": "remove generic warning"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -154,8 +154,8 @@ else if (method.getName().equals(\"getEntityManagerFactory\")) {\n \t\t\t\t// JPA 2.0: return EntityManagerFactory without creating an EntityManager.\n \t\t\t\treturn this.targetFactory;\n \t\t\t}\n-\t\t\telse if (method.getName().equals(\"getQueryBuilder\") || method.getName().equals(\"getMetamodel\")) {\n-\t\t\t\t// JPA 2.0: return EntityManagerFactory's QueryBuilder/Metamodel (avoid creation of EntityManager)\n+\t\t\telse if (method.getName().equals(\"getCriteriaBuilder\") || method.getName().equals(\"getMetamodel\")) {\n+\t\t\t\t// JPA 2.0: return EntityManagerFactory's CriteriaBuilder/Metamodel (avoid creation of EntityManager)\n \t\t\t\ttry {\n \t\t\t\t\treturn EntityManagerFactory.class.getMethod(method.getName()).invoke(this.targetFactory);\n \t\t\t\t}",
    "output": "upgrade JPA 2.0 support to the final spec (supporting the \"getCriteriaBuilder\" method)"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n@@ -215,7 +215,7 @@ protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDe\n \t// internal helpers\n \n \tprivate GenericConverter.ConvertiblePair getRequiredTypeInfo(Object converter, Class<?> genericIfc) {\n-\t\tClass[] args = GenericTypeResolver.resolveTypeArguments(converter.getClass(), genericIfc);\n+\t\tClass<?>[] args = GenericTypeResolver.resolveTypeArguments(converter.getClass(), genericIfc);\n \t\treturn (args != null ? new GenericConverter.ConvertiblePair(args[0], args[1]) : null);\n \t}\n ",
    "output": "remove generic warning"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n@@ -114,7 +114,7 @@ public void register(Class<?>... annotatedClasses) {\n \t * Perform a scan within the specified base packages.\n \t * @param basePackages the packages to check for annotated classes\n \t */\n-\tpublic void scan(String[] basePackages) {\n+\tpublic void scan(String... basePackages) {\n \t\tthis.scanner.scan(basePackages);\n \t}\n ",
    "output": "use varargs for scan method as well"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -193,9 +193,6 @@ public static Object invokeMethod(Method method, Object target) {\n \t * @return the invocation result, if any\n \t */\n \tpublic static Object invokeMethod(Method method, Object target, Object... args) {\n-\t\tif (target == null) {\n-\t\t\tthrow new IllegalArgumentException(\"target cannot be null\");\n-\t\t}\n \t\ttry {\n \t\t\treturn method.invoke(target, args);\n \t\t}",
    "output": "remove inappropriate assertion that prevents static method calls"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java\n@@ -46,26 +46,13 @@ public void testParameterizableViewController() throws Exception {\n \t\tString viewName = \"viewName\";\n \t\tParameterizableViewController pvc = new ParameterizableViewController();\n \t\tpvc.setViewName(viewName);\n-\t\tpvc.initApplicationContext();\n \t\t// We don't care about the params.\n \t\tModelAndView mv = pvc.handleRequest(new MockHttpServletRequest(\"GET\", \"foo.html\"), null);\n \t\tassertTrue(\"model has no data\", mv.getModel().size() == 0);\n \t\tassertTrue(\"model has correct viewname\", mv.getViewName().equals(viewName));\n \t\tassertTrue(\"getViewName matches\", pvc.getViewName().equals(viewName));\n \t}\n \n-\tpublic void testParameterizableViewControllerWithPropertyNotSet() {\n-\t\tParameterizableViewController pvc = new ParameterizableViewController();\n-\t\ttry {\n-\t\t\tpvc.initApplicationContext();\n-\t\t\tfail(\"should require viewName property to be set\");\n-\t\t}\n-\t\tcatch (IllegalArgumentException ex){\n-\t\t\t// expected\n-\t\t\tassertTrue(\"meaningful exception message\", ex.getMessage().indexOf(\"viewName\") != -1);\n-\t\t}\n-\t}\n-\n \tpublic void testServletForwardingController() throws Exception {\n \t\tServletForwardingController sfc = new ServletForwardingController();\n \t\tsfc.setServletName(\"action\");",
    "output": "remove now obsolete test case"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java\n--- a/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java\n+++ b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java\n@@ -39,7 +39,6 @@ public void destroyLazyInitSchedulerWithDefaultShutdownOrderDoesNotHang() {\n \t\tsw.start(\"lazyScheduler\");\n \t\tcontext.destroy();\n \t\tsw.stop();\n-\t\tSystem.out.println(sw.getTotalTimeMillis());\n \t\tassertTrue(\"Quartz Scheduler with lazy-init is hanging on destruction: \" +\n \t\t\t\tsw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500);\n \t}\n@@ -52,7 +51,6 @@ public void destroyLazyInitSchedulerWithCustomShutdownOrderDoesNotHang() {\n \t\tsw.start(\"lazyScheduler\");\n \t\tcontext.destroy();\n \t\tsw.stop();\n-\t\tSystem.out.println(sw.getTotalTimeMillis());\n \t\tassertTrue(\"Quartz Scheduler with lazy-init is hanging on destruction: \" +\n \t\t\t\tsw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500);\n \t}",
    "output": "remove printlns from test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java b/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java\n@@ -31,7 +31,6 @@ public class JodaTimeFormattingTests {\n \tpublic void setUp() {\n \t\tJodaTimeFormattingConfigurer configurer = new JodaTimeFormattingConfigurer();\n \t\tconfigurer.installJodaTimeFormatting(conversionService);\n-\t\tSystem.out.println(conversionService);\n \n \t\tbinder = new DataBinder(new JodaTimeBean());\n \t\tbinder.setConversionService(conversionService);",
    "output": "improve toString method"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java\n@@ -25,6 +25,7 @@\n \n import org.junit.Test;\n import org.springframework.core.convert.ConversionFailedException;\n+import org.springframework.core.convert.ConverterNotFoundException;\n import org.springframework.core.convert.converter.Converter;\n \n /**\n@@ -196,7 +197,7 @@ public void convertObjectToObjectConstructor() {\n \t\tassertEquals(\"123456789\", conversionService.convert(new SSN(\"123456789\"), String.class));\n \t}\n \n-\t@Test(expected=ConversionFailedException.class)\n+\t@Test(expected=ConverterNotFoundException.class)\n \tpublic void convertObjectToObjectNoValueOFMethodOrConstructor() {\n \t\tDefaultConversionService conversionService = new DefaultConversionService();\n \t\tconversionService.convert(new Long(3), SSN.class);",
    "output": "upgrade test to reflect correct behavior"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -43,7 +43,6 @@\n import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.context.support.ResourceBundleMessageSource;\n import org.springframework.context.support.StaticMessageSource;\n-import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.format.number.NumberFormatter;\n import org.springframework.format.support.FormattingConversionService;\n import org.springframework.util.StringUtils;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java\n@@ -18,7 +18,6 @@\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n-import java.lang.annotation.Inherited;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n@@ -32,7 +31,7 @@\n public @interface ImportResource {\n \n \tString[] value();\n-\t\n+\n \tClass<? extends BeanDefinitionReader> reader() default XmlBeanDefinitionReader.class;\n \n }",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -23,6 +23,7 @@\n \n import org.springframework.core.InfrastructureProxy;\n import org.springframework.util.Assert;\n+import org.springframework.aop.scope.ScopedObject;\n \n /**\n  * Utility methods for triggering specific {@link TransactionSynchronization}\n@@ -55,7 +56,13 @@ public static boolean sameResourceFactory(ResourceTransactionManager tm, Object\n \t */\n \tstatic Object unwrapResourceIfNecessary(Object resource) {\n \t\tAssert.notNull(resource, \"Resource must not be null\");\n-\t\treturn (resource instanceof InfrastructureProxy ? ((InfrastructureProxy) resource).getWrappedObject() : resource);\n+\t\tObject resourceRef = resource;\n+\t\tif (resource instanceof ScopedObject) {\n+\t\t\t// First unwrap a scoped proxy.\n+\t\t\tresourceRef = ((ScopedObject) resource).getTargetObject();\n+\t\t}\n+\t\t// Now unwrap infrastructure proxy\n+\t\treturn (resourceRef instanceof InfrastructureProxy ? ((InfrastructureProxy) resourceRef).getWrappedObject() : resourceRef);\n \t}\n \n ",
    "output": "add unwrapping of scoped proxy tp unwrapResourceIfNecessary"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -31,7 +31,6 @@ public class MvcNamespaceTests {\n \tpublic void setUp() {\n \t\tcontainer = new GenericWebApplicationContext();\n \t\tcontainer.setServletContext(new MockServletContext());\n-\t\t\n \t\tLocaleContextHolder.setLocale(Locale.US);\n \t}\n \t",
    "output": "add test dep to ivy.xml causing build failure"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java b/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java\n@@ -10,7 +10,7 @@ public class ConversionServiceContextConfigTests {\n \t\n \t@Test\n \tpublic void testConfigOk() {\n-\t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"org/springframework/context/conversionservice/conversionservice.xml\");\n+\t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"org/springframework/context/conversionservice/conversionService.xml\");\n \t\tTestClient client = context.getBean(\"testClient\", TestClient.class);\n \t\tassertEquals(2, client.getBars().size());\n \t\tassertEquals(\"value1\", client.getBars().get(0).getValue());",
    "output": "fix failing test due to case issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java\n@@ -22,6 +22,7 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import org.joda.time.DateMidnight;\n import org.joda.time.DateTime;\n import org.joda.time.LocalDate;\n import org.joda.time.LocalDateTime;\n@@ -80,11 +81,12 @@ public Parser<DateTime> getParser(A annotation, Class<?> propertyType) {\n \t// internal helpers\n \t\n \tprivate Set<Class<?>> createFieldTypes() {\n-\t\tSet<Class<?>> fieldTypes = new HashSet<Class<?>>(7);\n+\t\tSet<Class<?>> fieldTypes = new HashSet<Class<?>>(8);\n \t\tfieldTypes.add(LocalDate.class);\n \t\tfieldTypes.add(LocalTime.class);\n \t\tfieldTypes.add(LocalDateTime.class);\n \t\tfieldTypes.add(DateTime.class);\n+\t\tfieldTypes.add(DateMidnight.class);\n \t\tfieldTypes.add(Date.class);\n \t\tfieldTypes.add(Calendar.class);\n \t\tfieldTypes.add(Long.class);",
    "output": "add date midnight"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n@@ -326,7 +326,7 @@ public void testMultiFieldToFieldMappingWithAssembler() {\n \t\t\t\t// field to multiple fields\n \t\t\t\t.addAssemblerMapping(\"activationDateTime\", new Converter<Map<String, String>, DateTime>() {\n \t\t\t\t\tpublic DateTime convert(Map<String, String> source) {\n-\t\t\t\t\t\tMutableDateTime dateTime = new MutableDateTime(DateTimeZone.UTC);\n+\t\t\t\t\t\tMutableDateTime dateTime = new MutableDateTime(DateTimeZone.forID(\"-04:00\"));\n \t\t\t\t\t\tdateTime.setYear(Integer.parseInt(source.get(\"year\")));\n \t\t\t\t\t\tdateTime.setMonthOfYear(Integer.parseInt(source.get(\"month\")));\n \t\t\t\t\t\tdateTime.setDayOfMonth(Integer.parseInt(source.get(\"day\")));\n@@ -344,7 +344,7 @@ public DateTime convert(Map<String, String> source) {\n \t\tsource.put(\"activationDateTime.hour\", \"12\");\n \t\tsource.put(\"activationDateTime.minute\", \"0\");\n \t\tAccount account = mapper.map(source, new Account());\t\n-\t\tassertEquals(ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC).parseDateTime(\"2009-10-12T12:00:00.000-04:00\"), account\n+\t\tassertEquals(ISODateTimeFormat.dateTime().withOffsetParsed().parseDateTime(\"2009-10-12T12:00:00.000-04:00\"), account\n \t\t\t\t.getActivationDateTime());\t\t\n \t}\n ",
    "output": "fix failing test; take 2"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n@@ -8,7 +8,6 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Map;\n \n import org.joda.time.DateTime;",
    "output": "remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n@@ -418,7 +418,7 @@ private Number executeInsertAndReturnKeyInternal(final List<Object> values) {\n \t\t\treturn kh.getKey();\n \t\t}\n \t\telse {\n-\t\t\tthrow new DataIntegrityViolationException(\"Unable to retreive the generated key for the insert: \" +\n+\t\t\tthrow new DataIntegrityViolationException(\"Unable to retrieve the generated key for the insert: \" +\n \t\t\t\t\tgetInsertString());\n \t\t}\n \t}",
    "output": "fix rertieval of generated keys for HSQLDB 1.9 and fixed some typos"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -238,7 +238,7 @@ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, S\n \t\t\t\telse if (databaseProductName.startsWith(\"DB2\") ||\n \t\t\t\t\t\tjdbcDriverName.startsWith(\"jConnect\") ||\n \t\t\t\t\t\tjdbcDriverName.startsWith(\"SQLServer\")||\n-\t\t\t\t\t\tjdbcDriverName.startsWith(\"Apache Derby Embedded\")) {\n+\t\t\t\t\t\tjdbcDriverName.startsWith(\"Apache Derby\")) {\n \t\t\t\t\tsqlType = Types.VARCHAR;\n \t\t\t\t}\n \t\t\t}",
    "output": "fix null handling for all Derby drivers to be the same as for the embedded driver"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java\n--- a/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java\n+++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java\n@@ -250,7 +250,6 @@ public void componentRegistered(ComponentDefinition componentDefinition) {\n \n \tstatic class TestErrorHandler implements ErrorHandler {\n \n-\t\t@Override\n \t\tpublic void handleError(Throwable t) {\n \t\t}\n \t}",
    "output": "remove @Override from interface method"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n@@ -41,7 +41,7 @@ public ParseException(String expressionString, int position, String message) {\n \t * @param cause the underlying cause of this exception\n \t */ \n \tpublic ParseException(int position, String message, Throwable cause) {\n-\t\tsuper(message);\n+\t\tsuper(position, message, cause);\n \t}\n \t\n \t/**\n@@ -50,7 +50,7 @@ public ParseException(int position, String message, Throwable cause) {\n \t * @param message description of the problem that occurred\n \t */ \n \tpublic ParseException(int position, String message) {\n-\t\tsuper(message);\n+\t\tsuper(position, message);\n \t}\n \n }",
    "output": "fix ParseException constructor calls"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -137,7 +137,7 @@ protected String[] generatePathMappings(Class beanClass) {\n \t\tStringBuilder pathMapping = buildPathPrefix(beanClass);\n \t\tString className = ClassUtils.getShortName(beanClass);\n \t\tString path = (className.endsWith(CONTROLLER_SUFFIX) ?\n-\t\t\t\tclassName.substring(0, className.indexOf(CONTROLLER_SUFFIX)) : className);\n+\t\t\t\tclassName.substring(0, className.lastIndexOf(CONTROLLER_SUFFIX)) : className);\n \t\tif (path.length() > 0) {\n \t\t\tif (this.caseSensitive) {\n \t\t\t\tpathMapping.append(path.substring(0, 1).toLowerCase()).append(path.substring(1));",
    "output": "fix extraction of Controller suffix"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java b/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java\n--- a/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java\n+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java\n@@ -29,6 +29,7 @@\n /**\n  * An individual mapping definition between two fields.\n  * @author Keith Donald\n+ * @since 3.0\n  */\n class Mapping implements MappingConfiguration {\n \n@@ -95,4 +96,9 @@ public String toString() {\n \t\treturn \"[Mapping<\" + getSourceExpressionString() + \" -> \" + getTargetExpressionString() + \">]\";\n \t}\n \n+\t@Override\n+\tpublic void setExclude() {\n+\t\t// TODO Auto-generated method stub\n+\t}\n+\n }\n\\ No newline at end of file",
    "output": "Add an empty implementation of the missing setExcludemethod so that the class compiles"
  },
  {
    "input": "diff --git a/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java b/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java\n--- a/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java\n+++ b/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java\n@@ -409,8 +409,8 @@ public void setFriend(TestBean f) {\n \tpublic static class CircularFactoryBean implements FactoryBean{\r\n \r\n \t\tpublic CircularFactoryBean() {\r\n-//\t\t\tValidAutowireByName autowired = new ValidAutowireByName();\r\n-//\t\t\tassertNull(autowired.getRamnivas());\r\n+\t\t\tValidAutowireByName autowired = new ValidAutowireByName();\r\n+\t\t\tassertNull(autowired.getRamnivas());\r\n \t\t}\r\n \r\n \t\tpublic Object getObject() throws Exception {\r",
    "output": "Fix a commented test"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n@@ -33,7 +33,10 @@\n import javax.servlet.http.HttpSession;\r\n import javax.servlet.jsp.JspWriter;\r\n import javax.servlet.jsp.PageContext;\r\n+import javax.servlet.jsp.el.ELException;\r\n+import javax.servlet.jsp.el.Expression;\r\n import javax.servlet.jsp.el.ExpressionEvaluator;\r\n+import javax.servlet.jsp.el.FunctionMapper;\r\n import javax.servlet.jsp.el.VariableResolver;\r\n \r\n import org.springframework.util.Assert;\r\n@@ -275,7 +278,15 @@ public JspWriter getOut() {\n \t}\r\n \r\n \tpublic ExpressionEvaluator getExpressionEvaluator() {\r\n-\t\tthrow new UnsupportedOperationException();\r\n+\t\treturn new ExpressionEvaluator() {\r\n+\t\t\tpublic Expression parseExpression(String expression, Class expectedType, FunctionMapper fMapper) throws ELException {\r\n+\t\t\t\tthrow new UnsupportedOperationException();\r\n+\t\t\t}\r\n+\t\t\tpublic Object evaluate(String expression, Class expectedType, VariableResolver vResolver, FunctionMapper fMapper) throws ELException {\r\n+\t\t\t\tString key = expression.substring(2, expression.length() - 1);\r\n+\t\t\t\treturn findAttribute(key);\r\n+\t\t\t}\r\n+\t\t};\r\n \t}\r\n \r\n \tpublic ELContext getELContext() {\r",
    "output": "add simplest possible ExpressionEvaluator"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -459,7 +459,6 @@ protected WebApplicationContext createWebApplicationContext(WebApplicationContex\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void commandProvidingFormControllerWithFormatter() throws Exception {\n \t\t@SuppressWarnings(\"serial\") DispatcherServlet servlet = new DispatcherServlet() {\n \t\t\t@Override",
    "output": "remove ignored test now that convert system has been revised"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -166,16 +166,17 @@ protected <T> T convertIfNecessary(\n \t\t// No custom editor but custom ConversionService specified?\n \t\tConversionService conversionService = this.propertyEditorRegistry.getConversionService();\n \t\tif (editor == null && conversionService != null && convertedValue != null) {\n-\t\t\tTypeDescriptor typeDesc;\n+\t\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.valueOf(convertedValue.getClass());\n+\t\t\tTypeDescriptor targetTypeDesc;\n \t\t\tif (methodParam != null) {\n-\t\t\t\ttypeDesc = (descriptor != null ?\n+\t\t\t\ttargetTypeDesc = (descriptor != null ?\n \t\t\t\t\t\tnew BeanTypeDescriptor(methodParam, descriptor) : new TypeDescriptor(methodParam));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\ttypeDesc = TypeDescriptor.valueOf(requiredType);\n+\t\t\t\ttargetTypeDesc = TypeDescriptor.valueOf(requiredType);\n \t\t\t}\n-\t\t\tif (conversionService.matches(convertedValue.getClass(), typeDesc)) {\n-\t\t\t\treturn (T) conversionService.convert(convertedValue, typeDesc);\n+\t\t\tif (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) {\n+\t\t\t\treturn (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);\n \t\t\t}\n \t\t}\n ",
    "output": "upgrade for change in conversion service api; source type desc now required"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java\n@@ -151,11 +151,13 @@ public void configureBean(Object beanInstance) {\n \t\t\tThrowable rootCause = ex.getMostSpecificCause();\n \t\t\tif (rootCause instanceof BeanCurrentlyInCreationException) {\n \t\t\t\tBeanCreationException bce = (BeanCreationException) rootCause;\n-\t\t\t\tif (logger.isDebugEnabled() && this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {\n-\t\t\t\t\tlogger.debug(\"Failed to create target bean '\" + bce.getBeanName() +\n-\t\t\t\t\t\t\t\"' while configuring object of type [\" + beanInstance.getClass().getName() +\n-\t\t\t\t\t\t\t\"] - probably due to a circular reference. This is a common startup situation \" +\n-\t\t\t\t\t\t\t\"and usually not fatal. Proceeding without injection. Original exception: \" + ex);\n+\t\t\t\tif (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Failed to create target bean '\" + bce.getBeanName() +\n+\t\t\t\t\t\t\t\t\"' while configuring object of type [\" + beanInstance.getClass().getName() +\n+\t\t\t\t\t\t\t\t\"] - probably due to a circular reference. This is a common startup situation \" +\n+\t\t\t\t\t\t\t\t\"and usually not fatal. Proceeding without injection. Original exception: \" + ex);\n+\t\t\t\t\t}\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}",
    "output": "fix currently-in-creation check to apply with any log level"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n@@ -132,6 +132,11 @@ public String getKind() {\n \t\treturn ProceedingJoinPoint.METHOD_EXECUTION;\n \t}\n \n+\tpublic int getId() {\n+\t\t// TODO: It's just an adapter but returning 0 might still have side effects...\n+\t\treturn 0;\n+\t}\n+\n \tpublic JoinPoint.StaticPart getStaticPart() {\n \t\treturn this;\n \t}",
    "output": "upgrade to AspectJ 1.6.5"
  },
  {
    "input": "diff --git a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n@@ -52,6 +52,14 @@ public class HibernateSessionFlushingTests extends AbstractTransactionalJUnit4Sp\n \tprivate SessionFactory sessionFactory;\n \n \n+\tprotected int countRowsInPersonTable() {\n+\t\treturn countRowsInTable(\"person\");\n+\t}\n+\n+\tprotected void assertPersonCount(int expectedCount) {\n+\t\tassertEquals(\"Verifying number of rows in the 'person' table.\", expectedCount, countRowsInPersonTable());\n+\t}\n+\n \t@Before\n \tpublic void setUp() {\n \t\tassertInTransaction(true);\n@@ -72,7 +80,9 @@ public void findSam() {\n \tpublic void saveJuergenWithDriversLicense() {\n \t\tDriversLicense driversLicense = new DriversLicense(2L, 2222L);\n \t\tPerson juergen = new Person(JUERGEN, driversLicense);\n+\t\tint numRows = countRowsInPersonTable();\n \t\tpersonService.save(juergen);\n+\t\tassertPersonCount(numRows + 1);\n \t\tassertNotNull(\"Should be able to save and retrieve Juergen\", personService.findByName(JUERGEN));\n \t\tassertNotNull(\"Juergen's ID should have been set\", juergen.getId());\n \t}",
    "output": "Add assertPersonCountfunctionality for increased robustness"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java\n@@ -1,40 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.oxm.castor;\n-\n-public class OrderItem {\n-\n-\tprivate String id;\n-\n-\tprivate Integer quantity;\n-\n-\tpublic String getId() {\n-\t\treturn id;\n-\t}\n-\n-\tpublic void setId(String id) {\n-\t\tthis.id = id;\n-\t}\n-\n-\tpublic Integer getQuantity() {\n-\t\treturn quantity;\n-\t}\n-\n-\tpublic void setQuantity(Integer quantity) {\n-\t\tthis.quantity = quantity;\n-\t}\n-}",
    "output": "Remove duplicate OrderItem"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n@@ -28,7 +28,9 @@\n import org.springframework.oxm.AbstractUnmarshallerTests;\n import org.springframework.oxm.Unmarshaller;\n \n-/** @author Arjen Poutsma */\n+/**\n+ * @author Arjen Poutsma\n+ */\n public class CastorUnmarshallerTests extends AbstractUnmarshallerTests {\n \n \t@Override\n@@ -43,7 +45,7 @@ protected void testFlights(Object o) {\n \tprotected void testFlight(Object o) {\n \t\tFlight flight = (Flight) o;\n \t\tassertNotNull(\"Flight is null\", flight);\n-\t\tassertEquals(\"Number is invalid\", Long.valueOf(42L), flight.getNumber());\n+\t\tassertEquals(\"Number is invalid\", 42L, (long) flight.getNumber());\n \t}\n \n \t@Override",
    "output": "add superfluous cast to get around ambiguity problem with some compilers"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n@@ -30,7 +30,7 @@ public void testBuildH2() {\n \t\tassertDatabaseCreatedAndShutdown(db);\n \t}\n \n-\t@Test\n+\n \tpublic void testBuildDerby() {\n \t\tEmbeddedDatabaseBuilder builder = EmbeddedDatabaseBuilder.relativeTo(getClass());\n \t\tEmbeddedDatabase db = builder.type(DERBY).script(\"db-schema-derby.sql\").script(\"db-test-data.sql\").build();",
    "output": "Upgrade POMS to JUnit 4.6"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java b/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java\n@@ -15,13 +15,13 @@ public class StringKeyedMapAdapterTests extends TestCase {\n \n \tprivate Map contents = new HashMap();\n \n-\tprivate StringKeyedMapAdapter map = new StringKeyedMapAdapter() {\n+\tprivate StringKeyedMapAdapter<Object> map = new StringKeyedMapAdapter<Object>() {\n \n \t\tprotected Object getAttribute(String key) {\n \t\t\treturn contents.get(key);\n \t\t}\n \n-\t\tprotected Iterator getAttributeNames() {\n+\t\tprotected Iterator<String> getAttributeNames() {\n \t\t\treturn contents.keySet().iterator();\n \t\t}\n ",
    "output": "Fix failing test due to compiler differences"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java b/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java\n--- a/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java\n@@ -67,7 +67,6 @@ private EvaluationContextFieldBinder(ExpressionParser parser, EvaluationContext\n \t\t\tthis.context = context;\n \t\t}\n \n-\t\t@Override\n \t\tpublic BindingResult bind(String key, Object value) {\n \t\t\tAlert alert = null;\n \t\t\ttry {",
    "output": "Remove @Override on interface method"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java\n@@ -22,6 +22,7 @@\n \n /**\n  * Converts an object to a single-element array.\n+ * TODO - this class throws cryptic exception if it can't convert to required target array element type.\n  * @author Keith Donald\n  * @since 3.0\n  */\n@@ -39,8 +40,9 @@ public ObjectToArray(TypeDescriptor sourceObjectType, TypeDescriptor targetArray\n \t}\n \n \tpublic Object execute(Object source) throws ConversionFailedException {\n-\t\tObject array = Array.newInstance(targetArrayType.getType(), 1);\n-\t\tArray.set(array, 0, elementConverter.execute(source));\t\t\n+\t\tObject array = Array.newInstance(targetArrayType.getElementType(), 1);\n+\t\tObject element = elementConverter.execute(source);\n+\t\tArray.set(array, 0, element);\t\t\n \t\treturn array;\n \t}\n ",
    "output": "fix element type bug"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java\n@@ -26,11 +26,10 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.core.convert.ConversionFailedException;\n-import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.convert.ConverterNotFoundException;\n+import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.convert.converter.Converter;\n \n public class GenericTypeConverterTests {\n@@ -114,22 +113,6 @@ public Integer convert(CharSequence source) throws Exception {\n \t\tassertEquals(new Integer(3), result);\n \t}\n \n-\t@Test\n-\t@Ignore\n-\tpublic void convertNoSuperTargetType() {\n-\t\tconverter.add(new Converter<CharSequence, Number>() {\n-\t\t\tpublic Integer convert(CharSequence source) throws Exception {\n-\t\t\t\treturn Integer.valueOf(source.toString());\n-\t\t\t}\n-\t\t});\n-\t\ttry {\n-\t\t\tconverter.convert(\"3\", Integer.class);\n-\t\t\tfail(\"Should have failed\");\n-\t\t} catch (ConverterNotFoundException e) {\n-\n-\t\t}\n-\t}\n-\n \t@Test\n \tpublic void convertObjectToPrimitive() {\n \t\tconverter.add(new StringToInteger());",
    "output": "remove last ignore"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java b/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java\n@@ -0,0 +1,23 @@\n+package org.springframework.ui.validation;\n+\n+import org.springframework.ui.alert.Alert;\n+\n+public interface ValidationResult {\n+\n+\t/**\n+\t * The name of the model property associated with this validation result.\n+\t */\n+\tString getProperty();\n+\t\n+\t/**\n+\t * Indicates if the validation failed.\n+\t */\n+\tboolean isFailure();\n+\n+\t/**\n+\t * Gets the alert for this validation result, appropriate for rendering the result to the user.\n+\t * An alert describing a successful validation will have info severity.\n+\t * An alert describing a failed validation will have either warning or error severity.\n+\t */\n+\tAlert getAlert();\n+}",
    "output": "add validation result"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -982,7 +982,7 @@ public void bindingCookieValue() throws ServletException, IOException {\n \t\trequest.setCookies(new Cookie(\"date\", \"2008-11-18\"));\n \t\tMockHttpServletResponse response  = new MockHttpServletResponse();\n \t\tservlet.service(request, response);\n-\t\tassertEquals(\"test-1226962800000\", response.getContentAsString());\n+\t\tassertEquals(\"test-108\", response.getContentAsString());\n \t}\n \n \t@Test\n@@ -1706,7 +1706,7 @@ public void initBinder(WebDataBinder binder) {\n \t\tpublic void handle(@CookieValue(\"date\") Date date, Writer writer)\n \t\t\t\tthrows IOException {\n \t\t\tassertEquals(\"Invalid path variable value\", new Date(108, 10, 18), date);\n-\t\t\twriter.write(\"test-\" + date.getTime());\n+\t\t\twriter.write(\"test-\" + date.getYear());\n \t\t}\n \n \t}",
    "output": "Fix the build, stupid java.util.Date"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java\n@@ -53,20 +53,6 @@ public Object getValue() {\n \t\treturn value;\n \t}\n \t\n-\t/**\n-\t * Is the user-entered value a String?\n-\t */\n-\tpublic boolean isString() {\n-\t\treturn value instanceof String;\n-\t}\n-\n-\t/**\n-\t * Is the user-entered value a String[]?\n-\t */\n-\tpublic boolean isStringArray() {\n-\t\treturn value instanceof String[];\n-\t}\n-\n \t/**\n \t * Creates a new UserValue list with a single element.\n \t * @param property the property",
    "output": "remove unused field"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java\n--- a/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,6 +65,10 @@ public void setBaseAddress(String baseAddress) {\n \t@Override\n \tprotected void publishEndpoint(Endpoint endpoint, WebService annotation) {\n \t\tString fullAddress = this.baseAddress + annotation.serviceName();\n+\t\tif (endpoint.getClass().getName().startsWith(\"weblogic.\")) {\n+\t\t\t// Workaround for WebLogic 10.3 \n+\t\t\tfullAddress = fullAddress + \"/\";\n+\t\t}\n \t\tendpoint.publish(fullAddress);\n \t}\n ",
    "output": "add JAX-WS workaround for WebLogic 10.3"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n@@ -16,8 +16,6 @@\n import org.springframework.core.GenericTypeResolver;\n import org.springframework.core.convert.TypeConverter;\n import org.springframework.core.convert.TypeDescriptor;\n-import org.springframework.core.convert.converter.Converter;\n-import org.springframework.core.convert.converter.ConverterFactory;\n import org.springframework.core.convert.support.DefaultTypeConverter;\n import org.springframework.expression.EvaluationContext;\n import org.springframework.expression.EvaluationException;\n@@ -31,6 +29,7 @@\n import org.springframework.ui.format.AnnotationFormatterFactory;\n import org.springframework.ui.format.Formatter;\n \n+@SuppressWarnings(\"unchecked\")\n public class Binder<T> {\n \n \tprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n@@ -224,7 +223,6 @@ private Object parse(String formatted, Formatter formatter) {\n \t\t\t}\n \t\t}\n \n-\t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate Formatter getFormatter() {\n \t\t\tif (formatter != null) {\n \t\t\t\treturn formatter;\n@@ -336,7 +334,6 @@ private Class getParameterClass(Type parameterType, Class converterClass) {\n \t\t\t\t+ \"] on Formatter [\" + converterClass.getName() + \"]\");\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \tstatic class SimpleAnnotationFormatterFactory implements AnnotationFormatterFactory {\n \n \t\tprivate Formatter formatter;",
    "output": "Add surpress warning unchecked"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -82,7 +82,6 @@ public Object postProcessAfterInitialization(final Object bean, String beanName)\n \t\t\treturn bean;\n \t\t}\n \t\tReflectionUtils.doWithMethods(targetClass, new MethodCallback() {\n-\t\t\t@Override\n \t\t\tpublic void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {\n \t\t\t\tScheduled annotation = AnnotationUtils.getAnnotation(method, Scheduled.class);\n \t\t\t\tif (annotation != null) {\n@@ -126,7 +125,6 @@ public void doWith(Method method) throws IllegalArgumentException, IllegalAccess\n \t\treturn bean;\n \t}\n \n-\t@Override\n \tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n \t\tif (scheduler != null) {\n \t\t\tthis.registrar.setScheduler(scheduler);\n@@ -137,7 +135,6 @@ public void onApplicationEvent(ContextRefreshedEvent event) {\n \t\tthis.registrar.afterPropertiesSet();\n \t}\n \n-\t@Override\n \tpublic void destroy() throws Exception {\n \t\tif (this.registrar != null) {\n \t\t\tthis.registrar.destroy();",
    "output": "remove @Override annotations from interface methods"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n@@ -100,7 +100,7 @@ private static class TestBean implements ITestBean {\n \n \t\tprivate Thread thread;\n \n-\t\tprivate CountDownLatch latch;\n+\t\tprivate final CountDownLatch latch = new CountDownLatch(1);\n \n \t\tpublic Thread getThread() {\n \t\t\treturn this.thread;",
    "output": "fix NPE on latch in test"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n--- a/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n@@ -1,9 +0,0 @@\n-\n-/**\n- *\n- * Package providing integration of <a href=\"http://java.sun.com/webservices/jaxb/\">JAXB</a> with Springs O/X Mapping\n- * support\n- *\n- */\n-package org.springframework.oxm.jaxb;\n-",
    "output": "Fix build breakage by removing oxm.jaxb package-info.java and replacing it with the old package.html. The problem was that the new package-info.java was ending up overriding a generated package-info.java that contains important @XmlSource annotations"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n@@ -41,7 +41,7 @@ public class Binder<T> {\n \t\n \tprivate boolean optimisticBinding = true;\n \n-\tprivate static Formatter<?> defaultFormatter = new Formatter<?>() {\n+\tprivate static Formatter defaultFormatter = new Formatter() {\n \t\t\n \t\tpublic Class<?> getFormattedObjectType() {\n \t\t\treturn String.class;",
    "output": "fix issue that did not compile with sun compiler"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java\n@@ -0,0 +1,10 @@\n+\n+/**\n+ * \n+ * Annotation support for the Application Context, including JSR-250 \"common\"\n+ * annotations, component-scanning, and Java-based metadata for creating\n+ * Spring-managed objects.\n+ * \n+ */\n+package org.springframework.context.annotation;\n+\n\ndiff --git a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java\n@@ -0,0 +1,8 @@\n+\n+/**\n+ * \n+ * Support classes for reading annotation and class-level metadata.\n+ * \n+ */\n+package org.springframework.core.type.classreading;\n+",
    "output": "Add package declarations and comments to package-info.java files where they had been missing"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n@@ -144,7 +144,7 @@ private class FinalConfigurationProblem extends Problem {\n \n \t\tpublic FinalConfigurationProblem() {\n \t\t\tsuper(String.format(\"@Configuration class '%s' may not be final. Remove the final modifier to continue.\",\n-\t\t\t\t\tgetSimpleName()), new Location(getResource(), ConfigurationClass.this));\n+\t\t\t\t\tgetSimpleName()), new Location(getResource(), getMetadata()));\n \t\t}\n \t}\n \n@@ -155,7 +155,7 @@ private class OverloadedMethodProblem extends Problem {\n \t\tpublic OverloadedMethodProblem(String methodName, int count) {\n \t\t\tsuper(String.format(\"@Configuration class '%s' has %s overloaded factory methods of name '%s'. \" +\n \t\t\t\t\t\"Only one factory method of the same name allowed.\",\n-\t\t\t\t\tgetSimpleName(), count, methodName), new Location(getResource(), ConfigurationClass.this));\n+\t\t\t\t\tgetSimpleName(), count, methodName), new Location(getResource(), getMetadata()));\n \t\t}\n \t}\n ",
    "output": "use the annotation meta data in problem reporting"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java\n@@ -19,7 +19,7 @@ public StringToEnum(Class<T> enumType) {\n \t\t}\n \t\t\n \t\tpublic T convert(String source) throws Exception {\n-\t\t\treturn Enum.valueOf(enumType, source);\n+\t\t\treturn (T) Enum.valueOf(enumType, source);\n \t\t}\n \t}\n ",
    "output": "add additional cast for javac"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java\n@@ -17,7 +17,6 @@\n package org.springframework.context.expression;\r\n \r\n import org.springframework.beans.factory.config.BeanExpressionContext;\r\n-import org.springframework.core.convert.ConversionContext;\r\n import org.springframework.expression.AccessException;\r\n import org.springframework.expression.EvaluationContext;\r\n import org.springframework.expression.PropertyAccessor;\r\n\ndiff --git a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java\n@@ -17,7 +17,6 @@\n package org.springframework.context.expression;\r\n \r\n import org.springframework.beans.factory.BeanFactory;\r\n-import org.springframework.core.convert.ConversionContext;\r\n import org.springframework.expression.AccessException;\r\n import org.springframework.expression.EvaluationContext;\r\n import org.springframework.expression.PropertyAccessor;\r",
    "output": "remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java\n@@ -30,11 +30,11 @@\n import org.springframework.util.ClassUtils;\n \n /**\n- * {@link EmbeddedDatabaseConfigurer} for Apache Derby database.\n+ * {@link EmbeddedDatabaseConfigurer} for the Apache Derby database.\n  * \n  * @author Oliver Gierke\n  */\n-public class DerbyEmbeddedDatabaseConfigurer implements EmbeddedDatabaseConfigurer {\n+final class DerbyEmbeddedDatabaseConfigurer implements EmbeddedDatabaseConfigurer {\n \n \tprivate static final Log logger = LogFactory.getLog(DerbyEmbeddedDatabaseConfigurer.class);\n \t",
    "output": "make package private"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n@@ -5,7 +5,6 @@\n import static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.DERBY;\n import static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.H2;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.jdbc.core.JdbcTemplate;\n ",
    "output": "remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -85,6 +85,8 @@ public class ConfigurationClassPostProcessor implements BeanFactoryPostProcessor\n \n \tprivate MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory();\n \n+\tprivate boolean setMetadataReaderFactoryCalled = false;\n+\n \n \t/**\n \t * Set the {@link ProblemReporter} to use.\n@@ -96,9 +98,21 @@ public void setProblemReporter(ProblemReporter problemReporter) {\n \t\tthis.problemReporter = problemReporter;\n \t}\n \n+\t/**\n+\t * Set the {@link MetadataReaderFactory} to use.\n+\t * <p>Default is a {@link CachingMetadataReaderFactory} for the specified\n+\t * {@link #setBeanClassLoader bean class loader}.\n+\t */\n+\tpublic void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {\n+\t\tthis.metadataReaderFactory = metadataReaderFactory;\n+\t\tthis.setMetadataReaderFactoryCalled = true;\n+\t}\n+\n \tpublic void setBeanClassLoader(ClassLoader beanClassLoader) {\n \t\tthis.beanClassLoader = beanClassLoader;\n-\t\tthis.metadataReaderFactory = new CachingMetadataReaderFactory(beanClassLoader);\n+\t\tif (!this.setMetadataReaderFactoryCalled) {\n+\t\t\tthis.metadataReaderFactory = new CachingMetadataReaderFactory(beanClassLoader);\n+\t\t}\n \t}\n \n \tpublic int getOrder() {",
    "output": "add setMetadataReaderFactory method"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n@@ -79,7 +79,7 @@ private void doTestAnnotationInfo(AnnotationMetadata metadata) {\n \t\tassertEquals(\"myScope\", scopeAttrs.get(\"value\"));\n \t\tMap<String, Object> specialAttrs = metadata.getAnnotationAttributes(SpecialAttr.class.getName());\n \t\tassertEquals(2, specialAttrs.size());\n-\t\tassertEquals(String.class, specialAttrs.get(\"clazz\"));\n+\t\tassertEquals(String.class.getName(), specialAttrs.get(\"clazz\"));\n \t\tassertEquals(Thread.State.NEW, specialAttrs.get(\"state\"));\n \t}\n \t",
    "output": "upgrade AnnotationMetadata tests for change in Class exposure"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -37,6 +37,7 @@\n  *\n  * @author Juergen Hoeller\n  * @author Rob Harrop\n+ * @author Andy Clement\n  * @since 2.0\n  * @see GenericCollectionTypeResolver\n  */\n@@ -176,9 +177,13 @@ void setParameterType(Class parameterType) {\n \t */\n \tpublic Class getParameterType() {\n \t\tif (this.parameterType == null) {\n-\t\t\tthis.parameterType = (this.method != null ?\n+\t\t\tif (parameterIndex < 0) {\n+\t\t\t\tthis.parameterType = (this.method !=null ? this.method.getReturnType():null);\n+\t\t\t} else {\n+\t\t\t\tthis.parameterType = (this.method != null ?\n \t\t\t\t\tthis.method.getParameterTypes()[this.parameterIndex] :\n \t\t\t\t\tthis.constructor.getParameterTypes()[this.parameterIndex]);\n+\t\t\t}\n \t\t}\n \t\treturn this.parameterType;\n \t}",
    "output": "fix support for -1 parameterIndex to access the method return type"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java\n@@ -18,7 +18,6 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.springframework.core.GenericCollectionTypeResolver;\n import org.springframework.core.convert.ConversionExecutor;\n import org.springframework.core.convert.TypeDescriptor;\n \n@@ -44,7 +43,7 @@ protected Object doExecute(Object source) throws Exception {\n \t\tConversionExecutor elementConverter = getElementConverter();\n \t\tClass elementType;\n \t\tif (elementConverter == null) {\n-\t\t\telementType = GenericCollectionTypeResolver.getCollectionType(targetCollectionType);\n+\t\t\telementType = getTargetType().getElementType();\n \t\t} else {\n \t\t\telementType = null;\n \t\t}",
    "output": "use type descriptor to determine collection element type"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -59,7 +59,6 @@\n import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;\n import org.springframework.beans.factory.config.Scope;\n-import org.springframework.beans.factory.config.DependencyProxyBuilder;\n import org.springframework.core.DecoratingClassLoader;\n import org.springframework.core.NamedThreadLocal;\n import org.springframework.util.Assert;",
    "output": "Fix the build"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java\n@@ -118,4 +118,29 @@ public TestBean testBean() {\n \t\t\treturn new TestBean(name);\n \t\t}\n \t}\n+\n+\t@Test\n+\tpublic void testCustomProperties() {\n+\t\tClassPathXmlApplicationContext factory = new ClassPathXmlApplicationContext(\n+\t\t        \"AutowiredConfigurationTests-custom.xml\", AutowiredConfigurationTests.class);\n+\n+\t\tTestBean testBean = factory.getBean(\"testBean\", TestBean.class);\n+\t\tassertThat(testBean.getName(), equalTo(\"localhost\"));\n+\t}\n+\n+\t@Configuration\n+\tstatic class PropertiesConfig {\n+\n+\t\tprivate String hostname;\n+\n+\t\t@Value(\"#{myProps.hostname}\")\n+\t\tpublic void setHostname(String hostname) {\n+\t\t\tthis.hostname = hostname;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic TestBean testBean() {\n+\t\t\treturn new TestBean(hostname);\n+\t\t}\n+\t}\n }",
    "output": "Add test using custom properties file with util:properties and dereferenced with @Value(\"#{...}\")"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n@@ -28,11 +28,6 @@\n import org.springframework.beans.factory.parsing.FailFastProblemReporter;\n import org.springframework.beans.factory.parsing.Location;\n import org.springframework.beans.factory.parsing.ProblemReporter;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.BeanMethod;\n-import org.springframework.context.annotation.ConfigurationClass;\n-import org.springframework.context.annotation.ModelClass;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.util.ClassUtils;\n \n@@ -63,8 +58,8 @@ public void testWellFormedMethod() {\n \t\tassertThat(beanMethod.getRequiredAnnotation(Bean.class), sameInstance(beanAnno));\n \t\ttry {\n \t\t\tbeanMethod.getRequiredAnnotation(Override.class);\n-\t\t\tfail(\"expected IllegalArgumentException ex\");\n-\t\t} catch (IllegalArgumentException ex) { /* expected */ }\n+\t\t\tfail(\"expected IllegalStateException ex\");\n+\t\t} catch (IllegalStateException ex) { /* expected */ }\n \n \t\t// must call setDeclaringClass() before calling getLocation()\n \t\ttry {",
    "output": "Upgrade BeanMethodTests to reflect change from IllegalArgumentException -> IllegalStateException"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java\n@@ -471,6 +471,14 @@ public void testGenericallyTypedSetOfIntegerBean() throws Exception {\n \t\tAssert.assertEquals(new Integer(30), gb.getGenericListProperty().get(1).iterator().next());\n \t}\n \n+\t@Test\n+\tpublic void testSettingGenericPropertyWithReadOnlyInterface() {\n+\t\tBar bar = new Bar();\n+\t\tBeanWrapper bw = new BeanWrapperImpl(bar);\n+\t\tbw.setPropertyValue(\"version\", \"10\");\n+\t\tAssert.assertEquals(10.0, bar.getVersion());\n+\t}\n+\n \n \tprivate static abstract class BaseGenericCollectionBean {\n \n@@ -565,4 +573,25 @@ private static class DerivedMap extends HashMap<Integer, List<Long>> {\n \n \t}\n \n+\n+\tpublic interface Foo {\n+\n+\t\tNumber getVersion();\n+\t}\n+\n+\n+\tpublic class Bar implements Foo {\n+\n+\t\tprivate double version;\n+\n+\t\tpublic Double getVersion() {\n+\t\t\treturn this.version;\n+\t\t}\n+\n+\t\tpublic void setVersion(Double theDouble) {\n+\t\t\tthis.version = theDouble;\n+\t\t}\n+\t}\n+\n+\n }",
    "output": "add further generic property resolution test"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1055,8 +1055,11 @@ protected ModelAndView processHandlerException(\n \n \t\t// Check registerer HandlerExceptionResolvers...\n \t\tModelAndView exMv = null;\n-\t\tfor (Iterator<HandlerExceptionResolver> it = this.handlerExceptionResolvers.iterator(); exMv == null && it.hasNext();) {\n-\t\t\texMv = it.next().resolveException(request, response, handler, ex);\n+\t\tfor (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n+\t\t\texMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n+\t\t\tif (exMv != null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \t\tif (exMv != null) {\n \t\t\tif (exMv.isEmpty()) {",
    "output": "Make looping over handlerExceptionResolvers more explicit"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n@@ -19,6 +19,7 @@\n import org.springframework.expression.EvaluationException;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParseException;\n+import org.springframework.expression.spel.support.StandardEvaluationContext;\n \n /**\n  * Tests set value expressions.\n@@ -70,9 +71,10 @@ protected void setValue(String expression, Object value) {\n \t\t\tif (DEBUG) {\n \t\t\t\tSpelUtilities.printAbstractSyntaxTree(System.out, e);\n \t\t\t}\n-\t\t\tassertTrue(\"Expression is not writeable but should be\", e.isWritable(eContext));\n-\t\t\te.setValue(eContext, value);\n-\t\t\tassertEquals(\"Retrieved value was not equal to set value\", value, e.getValue(eContext));\n+\t\t\tStandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext();\n+\t\t\tassertTrue(\"Expression is not writeable but should be\", e.isWritable(lContext));\n+\t\t\te.setValue(lContext, value);\n+\t\t\tassertEquals(\"Retrieved value was not equal to set value\", value, e.getValue(lContext));\n \t\t} catch (EvaluationException ee) {\n \t\t\tee.printStackTrace();\n \t\t\tfail(\"Unexpected Exception: \" + ee.getMessage());",
    "output": "Fix SPEL tests when using maven. With the maven test runner expression.spel.SetValueTests is run before expression.spel.EvaluationTests. The order is reversed in eclipse/spring-build. Static variables are modifed in SetValueTests that cause EvaluationTests to fail if it is run first. Make a simple fix so SetValueTests uses a local evaluation context variable instead of a static variable"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n@@ -170,9 +170,8 @@ private void assertCglibIsPresent(BeanDefinitionRegistry configBeanDefs) {\n \t\t\tClass.forName(CGLIB_TEST_CLASS);\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tthrow new IllegalStateException(\"CGLIB is required to process @Configuration classes. \" +\n-\t\t\t\t\t\"Either add CGLIB v2.2.3 to the classpath or remove the following \" +\n-\t\t\t\t\t\"@Configuration bean definitions: [\"\n-\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(configBeanDefs.getBeanDefinitionNames()) + \"]\");\n+\t\t\t\t\t\"Either add CGLIB to the classpath or remove the following @Configuration bean definitions: [\" +\n+\t\t\t\t\tStringUtils.arrayToCommaDelimitedString(configBeanDefs.getBeanDefinitionNames()) + \"]\");\n \t\t}\n \t}\n ",
    "output": "fix tests in .test package that were failing due to missing CGLIB dependency"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java\n--- a/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java\n+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java\n@@ -88,9 +88,10 @@ public class InterfaceBasedMBeanInfoAssembler extends AbstractConfigurableMBeanI\n \t */\n \tpublic void setManagedInterfaces(Class[] managedInterfaces) {\n \t\tif (managedInterfaces != null) {\n-\t\t\tfor (Class ifc : managedInterfaces) {\n+\t\t\tfor (Class<?> ifc : managedInterfaces) {\n \t\t\t\tif (!ifc.isInterface()) {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Management interface [\" + ifc.getName() + \"] is no interface\");\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"Management interface [\" + ifc.getName() + \"] is not an interface\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Improve error message: s/is no interface/is not an interface"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java b/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java\n@@ -119,7 +119,7 @@ public static WebApplicationContext getWebApplicationContext(ServletContext sc,\n \t * as used by the WebApplicationContext.\n \t * @param beanFactory the BeanFactory to configure\n \t */\n-\tstatic void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {\n+\tpublic static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {\n \t\tbeanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope());\n \t\tbeanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false));\n \t\tbeanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true));",
    "output": "Make WebApplicationContextUtils:registerWebApplicationScopes public. Changed core's org.springframework.asm OSGi import to proper version numbers"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java\n@@ -121,4 +121,14 @@ public void matchDuplicate() throws Exception {\n \t\tMap<String, String> expected = Collections.singletonMap(\"c\", \"cheeseburger\");\n \t\tassertEquals(\"Invalid match\", expected, result);\n \t}\n+\n+\t@Test\n+\tpublic void matchMultipleInOneSegment() throws Exception {\n+\t\ttemplate = new UriTemplate(\"/{foo}-{bar}\");\n+\t\tMap<String, String> result = template.match(\"/12-34\");\n+\t\tMap<String, String> expected = new HashMap<String, String>(2);\n+\t\texpected.put(\"foo\", \"12\");\n+\t\texpected.put(\"bar\", \"34\");\n+\t\tassertEquals(\"Invalid match\", expected, result);\n+\t}\n }\n\\ No newline at end of file",
    "output": "Add test for multiple template variables in one path segment"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java\n@@ -17,18 +17,19 @@\n \n /**\n  * Converts a String to a Enum using {@link Enum#valueOf(Class, String)}.\n- * \n+ *\n  * @author Keith Donald\n+ * @since 3.0\n  */\n @SuppressWarnings(\"unchecked\")\n public class StringToEnum implements SuperTwoWayConverter<String, Enum> {\n \n \tpublic <RT extends Enum> RT convert(String source, Class<RT> targetClass) throws Exception {\n-\t\treturn Enum.valueOf(targetClass, source);\n+\t\treturn (RT) Enum.valueOf(targetClass, source);\n \t}\n \n \tpublic <RS extends String> RS convertBack(Enum target, Class<RS> sourceClass) throws Exception {\n \t\treturn (RS) target.name();\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "add superfluous cast as a workaround for the Sun Javac compiler"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java\n@@ -16,13 +16,11 @@\n \n package org.springframework.jdbc.object;\n \n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.util.Map;\n \n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.util.Assert;\n-import org.springframework.dao.InvalidDataAccessApiUsageException;\n+import org.springframework.dao.InvalidDataAccessResourceUsageException;\n \n public class GenericSqlQuery extends SqlQuery {\n \n@@ -49,10 +47,10 @@ protected RowMapper newRowMapper(Object[] parameters, Map context) {\n \t\t\treturn (RowMapper) rowMapperClass.newInstance();\n \t\t}\n \t\tcatch (InstantiationException e) {\n-\t\t\tthrow new InvalidDataAccessApiUsageException(\"Unable to instantiate RowMapper\", e);\n+\t\t\tthrow new InvalidDataAccessResourceUsageException(\"Unable to instantiate RowMapper\", e);\n \t\t}\n \t\tcatch (IllegalAccessException e) {\n-\t\t\tthrow new InvalidDataAccessApiUsageException(\"Unable to instantiate RowMapper\", e);\n+\t\t\tthrow new InvalidDataAccessResourceUsageException(\"Unable to instantiate RowMapper\", e);\n \t\t}\n \t}\n }",
    "output": "change exception class thrown for problems configuring GenericSqlQuery class"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java b/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java\n@@ -18,8 +18,6 @@\n \n import java.util.Comparator;\n \n-import org.springframework.util.Assert;\n-\n /**\n  * Comparator that adapts Comparables to the Comparator interface.\n  * Mainly for internal use in other Comparators, when supposed",
    "output": "remove aopalliance errant dependency; removed unused import"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -35,6 +35,7 @@\n import org.springframework.http.converter.FormHttpMessageConverter;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.http.converter.StringHttpMessageConverter;\n+import org.springframework.http.converter.xml.SourceHttpMessageConverter;\n import org.springframework.util.Assert;\n import org.springframework.web.util.UriTemplate;\n \n@@ -93,7 +94,7 @@ public class RestTemplate extends HttpAccessor implements RestOperations {\n \n \tprivate HttpMessageConverter<?>[] messageConverters =\n \t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),\n-\t\t\t\t\tnew FormHttpMessageConverter()};\n+\t\t\t\t\tnew FormHttpMessageConverter(), new SourceHttpMessageConverter()};\n \n \tprivate ResponseErrorHandler errorHandler = new DefaultResponseErrorHandler();\n ",
    "output": "Add SourceHttpMessageConverter as a default"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -32,6 +32,7 @@\n import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.http.client.support.HttpAccessor;\n import org.springframework.http.converter.ByteArrayHttpMessageConverter;\n+import org.springframework.http.converter.FormHttpMessageConverter;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.http.converter.StringHttpMessageConverter;\n import org.springframework.util.Assert;\n@@ -91,7 +92,8 @@ public class RestTemplate extends HttpAccessor implements RestOperations {\n \tprivate final ResponseExtractor<HttpHeaders> headersExtractor = new HeadersExtractor();\n \n \tprivate HttpMessageConverter<?>[] messageConverters =\n-\t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter()};\n+\t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),\n+\t\t\t\t\tnew FormHttpMessageConverter()};\n \n \tprivate ResponseErrorHandler errorHandler = new DefaultResponseErrorHandler();\n ",
    "output": "Add Form converter as a default"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java b/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.jms.listener.adapter;\n \n import java.lang.reflect.InvocationTargetException;\n-\n import javax.jms.Destination;\n import javax.jms.InvalidDestinationException;\n import javax.jms.JMSException;\n@@ -366,11 +365,12 @@ else if (!(delegate instanceof MessageListener)) {\n \t}\n \n \tpublic String getSubscriptionName() {\n-\t\tif (this.delegate instanceof SubscriptionNameProvider) {\n-\t\t\treturn ((SubscriptionNameProvider) this.delegate).getSubscriptionName();\n+\t\tObject delegate = getDelegate();\n+\t\tif (delegate != this && delegate instanceof SubscriptionNameProvider) {\n+\t\t\treturn ((SubscriptionNameProvider) delegate).getSubscriptionName();\n \t\t}\n \t\telse {\n-\t\t\treturn this.delegate.getClass().getName();\n+\t\t\treturn delegate.getClass().getName();\n \t\t}\n \t}\n ",
    "output": "fix MessageListenerAdapter's \"getSubscriptionName\" to work without delegate as well"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java b/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java\n@@ -46,10 +46,10 @@ public abstract class RequestContextHolder  {\n \tprivate static final boolean jsfPresent =\n \t\t\tClassUtils.isPresent(\"javax.faces.context.FacesContext\", RequestContextHolder.class.getClassLoader());\n \n-\tprivate static final ThreadLocal requestAttributesHolder = new NamedThreadLocal(\"Request attributes\");\n+\tprivate static final ThreadLocal<RequestAttributes> requestAttributesHolder = new NamedThreadLocal<RequestAttributes>(\"Request attributes\");\n \n-\tprivate static final ThreadLocal inheritableRequestAttributesHolder =\n-\t\t\tnew NamedInheritableThreadLocal(\"Request context\");\n+\tprivate static final ThreadLocal<RequestAttributes> inheritableRequestAttributesHolder =\n+\t\t\tnew NamedInheritableThreadLocal<RequestAttributes>(\"Request context\");\n \n \n \t/**\n@@ -93,9 +93,9 @@ public static void setRequestAttributes(RequestAttributes attributes, boolean in\n \t * or <code>null</code> if none bound\n \t */\n \tpublic static RequestAttributes getRequestAttributes() {\n-\t\tRequestAttributes attributes = (RequestAttributes) requestAttributesHolder.get();\n+\t\tRequestAttributes attributes = requestAttributesHolder.get();\n \t\tif (attributes == null) {\n-\t\t\tattributes = (RequestAttributes) inheritableRequestAttributesHolder.get();\n+\t\t\tattributes = inheritableRequestAttributesHolder.get();\n \t\t}\n \t\treturn attributes;\n \t}",
    "output": "Make threadlocals generic"
  },
  {
    "input": "diff --git a/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java\n--- a/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java\n+++ b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java\n@@ -62,6 +62,8 @@ public class DbcpDataSourceFactory implements FactoryBean<DataSource>, Disposabl\n \n     private Resource dataLocation;\n \n+    private Resource dropLocation;\n+\n     /**\n      * The object created by this factory.\n      */\n@@ -115,6 +117,14 @@ public void setDataLocation(Resource testDataLocation) {\n         this.dataLocation = testDataLocation;\n     }\n \n+    /**\n+     * Sets the location of the file containing the drop scripts for the database.\n+     * @param testDataLocation the location of the data file\n+     */\n+    public void setDropLocation(Resource testDropLocation) {\n+        this.dropLocation = testDropLocation;\n+    }\n+\n     // implementing FactoryBean\n \n     // this method is called by Spring to expose the DataSource as a bean\n@@ -163,6 +173,14 @@ private BasicDataSource createDataSource() {\n \n     private void populateDataSource() {\n         DatabasePopulator populator = new DatabasePopulator(dataSource);\n+        if (dropLocation != null) {\n+            try {\n+        \t\tpopulator.populate(this.dropLocation);\n+            } \n+            catch (Exception e) {\n+               \t// ignore\n+            }\n+        }\n         populator.populate(this.schemaLocation);\n         populator.populate(this.dataLocation);\n     }",
    "output": "fix broken unit test related to"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java\n@@ -18,8 +18,8 @@\n \n import static org.junit.Assert.assertEquals;\n import org.junit.Test;\n-import test.beans.ITestBean;\n \n+import org.springframework.beans.ITestBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n ",
    "output": "Fix usage of wrong TestBean package"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java b/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n@@ -252,8 +252,13 @@ public static void rollbackIfNecessary(Session session) throws JMSException {\n \tpublic static String buildExceptionMessage(JMSException ex) {\n \t\tString message = ex.getMessage();\n \t\tException linkedEx = ex.getLinkedException();\n-\t\tif (linkedEx != null && message.indexOf(linkedEx.getMessage()) == -1) {\n-\t\t\tmessage = message + \"; nested exception is \" + linkedEx;\n+\t\tif (linkedEx != null) {\n+\t\t\tif (message == null) {\n+\t\t\t\tmessage = linkedEx.toString();\n+\t\t\t}\n+\t\t\telse if (!message.contains(linkedEx.getMessage())) {\n+\t\t\t\tmessage = message + \"; nested exception is \" + linkedEx;\n+\t\t\t}\n \t\t}\n \t\treturn message;\n \t}",
    "output": "fix buildExceptionMessage to avoid potential NPE"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java\n@@ -0,0 +1,29 @@\n+package org.springframework.web.servlet.mvc.annotation;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+/** @author Arjen Poutsma */\n+public class ServletAnnotationMappingUtilsTests {\n+\n+\t@Test\n+\tpublic void checkRequestMethodMatch() {\n+\t\tRequestMethod[] methods = new RequestMethod[]{RequestMethod.GET, RequestMethod.POST};\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/\");\n+\t\tboolean result = ServletAnnotationMappingUtils.checkRequestMethod(methods, request);\n+\t\tassertTrue(\"Invalid request method result\", result);\n+\t}\n+\n+\t@Test\n+\tpublic void checkRequestMethodNoMatch() {\n+\t\tRequestMethod[] methods = new RequestMethod[]{RequestMethod.GET, RequestMethod.POST};\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"PUT\", \"/\");\n+\t\tboolean result = ServletAnnotationMappingUtils.checkRequestMethod(methods, request);\n+\t\tassertFalse(\"Invalid request method result\", result);\n+\t}\n+\n+}",
    "output": "Add test for ServletAnnotationMappingUtils"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java b/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java\n@@ -26,7 +26,7 @@\n  * @since 2.5.2\n  * @see NamedThreadLocal\n  */\n-public class NamedInheritableThreadLocal extends InheritableThreadLocal {\n+public class NamedInheritableThreadLocal<T> extends InheritableThreadLocal<T> {\n \n \tprivate final String name;\n \n\ndiff --git a/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java b/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java\n@@ -26,7 +26,7 @@\n  * @since 2.5.2\n  * @see NamedInheritableThreadLocal\n  */\n-public class NamedThreadLocal extends ThreadLocal {\n+public class NamedThreadLocal<T> extends ThreadLocal<T> {\n \n \tprivate final String name;\n ",
    "output": "Make ThreadLocals generic"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java b/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java\n@@ -28,7 +28,7 @@\n public abstract class Md5HashUtils {\n \n \tprivate static final char[] HEX_CHARS =\n-\t\t\t{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',};\n+\t\t\t{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n \n \t/**\n \t * Calculates the MD5 hash of the given bytes.",
    "output": "Add MD5 hashing utils"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -18,7 +18,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.IdentityHashMap;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java b/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java\n@@ -57,7 +57,7 @@ public String getParameter(String paramName) {\n \t}\n \n \tpublic String[] getParameterValues(String paramName) {\n-\t\treturn (String[]) getExternalContext().getRequestParameterMap().get(paramName);\n+\t\treturn (String[]) getExternalContext().getRequestParameterValuesMap().get(paramName);\n \t}\n \n \tpublic Map getParameterMap() {",
    "output": "Change use of getRequestParameterMapto getRequestParameterValuesMap"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java\n@@ -19,12 +19,13 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n \n import org.antlr.runtime.Token;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.spel.ExpressionState;\n import org.springframework.expression.spel.SpelException;\n import org.springframework.expression.spel.SpelMessages;\n-import org.springframework.expression.spel.ExpressionState;\n \n /**\n  * Represents a date literal value in an expression (a java.util.Date object).\n@@ -47,7 +48,9 @@ public Date getValue(ExpressionState state) throws EvaluationException {\n \t\t\tif (getChildCount() > 1) {\n \t\t\t\tformatter = new SimpleDateFormat((String) getChild(1).getValue(state));\n \t\t\t} else {\n-\t\t\t\tformatter = DateFormat.getDateTimeInstance();\n+\t\t\t\t// http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html\n+\t\t\t\t// this is something of this format: \"Wed, 4 Jul 2001 12:08:56 GMT\"\n+\t\t\t\tformatter = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.UK);\n \t\t\t}\n \t\t}\n \t\tString valueToParse = (String) getChild(0).getValue(state);",
    "output": "Make GMT the default Locale"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java\n@@ -56,11 +56,11 @@ public void testCombinations01() {\n \t}\n \n \tpublic void testBooleanErrors01() {\n-\t\tevaluateAndCheckError(\"1 or false\", SpelMessages.TYPE_CONVERSION_ERROR, 0);\n-\t\tevaluateAndCheckError(\"false or 39\", SpelMessages.TYPE_CONVERSION_ERROR, 9);\n+\t\tevaluateAndCheckError(\"1.0 or false\", SpelMessages.TYPE_CONVERSION_ERROR, 0);\n+\t\tevaluateAndCheckError(\"false or 39.4\", SpelMessages.TYPE_CONVERSION_ERROR, 9);\n \t\tevaluateAndCheckError(\"true and 'hello'\", SpelMessages.TYPE_CONVERSION_ERROR, 9);\n \t\tevaluateAndCheckError(\" 'hello' and 'goodbye'\", SpelMessages.TYPE_CONVERSION_ERROR, 1);\n-\t\tevaluateAndCheckError(\"!35\", SpelMessages.TYPE_CONVERSION_ERROR, 1);\n+\t\tevaluateAndCheckError(\"!35.2\", SpelMessages.TYPE_CONVERSION_ERROR, 1);\n \t\tevaluateAndCheckError(\"! 'foob'\", SpelMessages.TYPE_CONVERSION_ERROR, 2);\n \t}\n }",
    "output": "fix some tests that will now break because int/long can be treated as boolean. May need to change again if real numbers get the same treatment"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n@@ -15,7 +15,6 @@\n  */\n package org.springframework.expression;\n \n-// TODO (asc) This class needs a better name? I might have used EvaluationException if it wasn't also used for parsing issues\n /**\n  * Base class for exceptions occurring during expression parsing and evaluation.\n  * ",
    "output": "remove fixed TODO task"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n@@ -284,7 +284,7 @@ public void testInlineMapCreation01() {\n \t}\n \n \tpublic void testInlineMapCreation02() {\n-\t\tevaluate(\"#{1:'January', 2:'February', 3:'March'}\", \"{2=February, 1=January, 3=March}\", HashMap.class);\n+\t\tevaluate(\"#{1:'January', 2:'February', 3:'March'}.size()\", 3, Integer.class);//\"{2=February, 1=January, 3=March}\", HashMap.class);\n \t}\n \n \tpublic void testInlineMapCreation03() {",
    "output": "Change test so expected results match actual on both windows and Mac"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n@@ -17,8 +17,8 @@\n \n import org.springframework.expression.AccessException;\n import org.springframework.expression.EvaluationContext;\n-import org.springframework.expression.Expression;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.Expression;\n import org.springframework.expression.PropertyAccessor;\n import org.springframework.expression.spel.reflection.ReflectionPropertyResolver;\n import org.springframework.expression.spel.standard.StandardEvaluationContext;\n@@ -69,7 +69,7 @@ static class StringyPropertyAccessor implements PropertyAccessor {\n \n \t\tint flibbles = 7;\n \t\t\n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn new Class[]{String.class};\n \t\t}\n ",
    "output": "Fix generics warnings"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n@@ -267,7 +267,7 @@ static class FruitColourAccessor implements PropertyAccessor {\n \t\t/**\n \t\t * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it\n \t\t */\n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n \t\t\n@@ -344,7 +344,7 @@ static class VegetableColourAccessor extends CacheablePropertyAccessor {\n \t\t/**\n \t\t * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it\n \t\t */\n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Fix generics warning"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java\n@@ -19,8 +19,8 @@\n \n import org.springframework.expression.AccessException;\n import org.springframework.expression.EvaluationContext;\n-import org.springframework.expression.Expression;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.Expression;\n import org.springframework.expression.MethodExecutor;\n import org.springframework.expression.MethodResolver;\n import org.springframework.expression.PropertyAccessor;\n@@ -136,7 +136,7 @@ public void write(EvaluationContext context, Object target, Object name, Object\n \t\t\t\tthrows AccessException {\n \t\t}\n \n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n \t\t\n@@ -164,7 +164,7 @@ public void write(EvaluationContext context, Object target, Object name, Object\n \t\t\t\tthrows AccessException {\n \t\t}\n \n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Fix generics warnings"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java\n@@ -79,9 +79,6 @@ public static DiscoveredMethod findMethod(TypeConverter typeConverter, String na\n \t\t\t\t\tif (matchInfo.kind == ArgsMatchKind.EXACT) {\r\n \t\t\t\t\t\treturn new DiscoveredMethod(method, null);\r\n \t\t\t\t\t} else if (matchInfo.kind == ArgsMatchKind.CLOSE) {\r\n-\t\t\t\t\t\tif (matchRequiringConversion!=null) {\r\n-\t\t\t\t\t\t\tint stop = 1;\r\n-\t\t\t\t\t\t}\r\n \t\t\t\t\t\tcloseMatch = method;\r\n \t\t\t\t\t} else if (matchInfo.kind == ArgsMatchKind.REQUIRES_CONVERSION) {\r\n \t\t\t\t\t\tif (matchRequiringConversion!=null) {\r",
    "output": "Remove unused code"
  }
]