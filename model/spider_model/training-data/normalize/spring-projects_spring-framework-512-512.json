[
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -485,6 +485,10 @@ private void doStop(Map<String, ? extends Lifecycle> lifecycleBeans, final Strin\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t});\n \t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t// Don't wait for beans that aren't pauseable...\n+\t\t\t\t\t\t\tlatch.countDown();\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse if (!pauseableOnly) {\n \t\t\t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "Upgrade CountDownLatch for non-pauseable beans"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n@@ -376,7 +376,7 @@ public void stop(Runnable callback) {\n \n \t@Override\n \tpublic boolean isRunning() {\n-\t\treturn this.triggerLifecycle.isRunning();\n+\t\treturn (this.triggerLifecycle.isRunning() || this.fixedDelayLifecycle.isRunning());\n \t}\n \n \t@Override\n\ndiff --git a/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java b/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\n--- a/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\n+++ b/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\n@@ -364,7 +364,6 @@ public void close() {\n \t\t\tthis.active = false;\n \t\t\tSet<Thread> threads = this.activeThreads;\n \t\t\tif (threads != null) {\n-\t\t\t\tthreads.forEach(Thread::interrupt);\n \t\t\t\tsynchronized (threads) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tif (!threads.isEmpty()) {\n@@ -375,6 +374,7 @@ public void close() {\n \t\t\t\t\t\tThread.currentThread().interrupt();\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tthreads.forEach(Thread::interrupt);\n \t\t\t}\n \t\t}\n \t}",
    "output": "Align task execution tracking and thread interruption on shutdown"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java\n@@ -19,7 +19,7 @@\n import java.sql.DatabaseMetaData;\n import java.sql.SQLException;\n \n-import org.springframework.lang.Nullable;\n+import org.jspecify.annotations.Nullable;\n \n /**\n  * The PostgreSQL specific implementation of {@link TableMetaDataProvider}.\n@@ -39,14 +39,12 @@ public PostgresTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws S\n \n \n \t@Override\n-\t@Nullable\n-\tpublic String metaDataCatalogNameToUse(@Nullable String catalogName) {\n+\tpublic @Nullable String metaDataCatalogNameToUse(@Nullable String catalogName) {\n \t\treturn catalogName;\n \t}\n \n \t@Override\n-\t@Nullable\n-\tpublic String metaDataSchemaNameToUse(@Nullable String schemaName) {\n+\tpublic @Nullable String metaDataSchemaNameToUse(@Nullable String schemaName) {\n \t\treturn (schemaName != null ? schemaName : getDefaultSchema());\n \t}\n ",
    "output": "Align @Nullable annotation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -69,8 +69,7 @@ public class UrlResource extends AbstractFileResolvingResource {\n \t/**\n \t * Whether to use URLConnection caches ({@code null} means default).\n \t */\n-\t@Nullable\n-\tvolatile Boolean useCaches;\n+\tvolatile @Nullable Boolean useCaches;\n \n \n \t/**",
    "output": "Align @Nullable annotation"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n@@ -32,7 +32,7 @@\n public class KotlinConventions {\n \n \tvoid apply(Project project) {\n-\t\tproject.getPlugins().withId(\"org.jetbrains.kotlin.jvm\", _ -> {\n+\t\tproject.getPlugins().withId(\"org.jetbrains.kotlin.jvm\", plugin -> {\n \t\t\tproject.getTasks().withType(KotlinCompile.class, this::configure);\n \t\t\tif (project.getLayout().getProjectDirectory().dir(\"src/main/kotlin\").getAsFile().exists()) {\n \t\t\t\tproject.getPlugins().apply(DokkaPlugin.class);",
    "output": "Restore Java 17 compatibility in KotlinConventions"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n@@ -68,9 +68,10 @@ private void configure(Project project, DokkaExtension dokka) {\n \t\t\t\t\t\t\t.getByName(SourceSet.MAIN_SOURCE_SET_NAME)\n \t\t\t\t\t\t\t.getOutput());\n \t\t\tvar externalDocumentationLinks = sourceSet.getExternalDocumentationLinks();\n+\t\t\tvar springVersion = project.getVersion();\n \t\t\texternalDocumentationLinks.register(\"spring-framework\", spec -> {\n-\t\t\t\tspec.url(\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/\");\n-\t\t\t\tspec.packageListUrl(\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/element-list\");\n+\t\t\t\tspec.url(\"https://docs.spring.io/spring-framework/docs/\" + springVersion + \"/javadoc-api/\");\n+\t\t\t\tspec.packageListUrl(\"https://docs.spring.io/spring-framework/docs/\" + springVersion + \"/javadoc-api/element-list\");\n \t\t\t});\n \t\t\texternalDocumentationLinks.register(\"reactor-core\", spec ->\n \t\t\t\t\tspec.url(\"https://projectreactor.io/docs/core/release/api/\"));",
    "output": "Link to the right Framework version in the KDoc"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/TestConventions.java b/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n@@ -25,6 +25,7 @@\n import org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions;\n import org.gradle.testretry.TestRetryPlugin;\n import org.gradle.testretry.TestRetryTaskExtension;\n+import org.jetbrains.kotlin.gradle.targets.jvm.tasks.KotlinJvmTest;\n \n import java.util.Map;\n \n@@ -89,6 +90,11 @@ private void configureMockitoAgent(Project project) {\n \t\t\tmockitoAgentConfig.getDependencies().add(mockitoCore);\n \t\t\tproject.afterEvaluate(p -> {\n \t\t\t\tp.getTasks().withType(Test.class, test -> test.jvmArgs(\"-javaagent:\" + mockitoAgentConfig.getAsPath()));\n+\t\t\t\tproject.getPlugins().withId(\"org.jetbrains.kotlin.jvm\", plugin -> {\n+\t\t\t\t\tproject.getTasks().withType(KotlinJvmTest.class, kotlinTest -> {\n+\t\t\t\t\t\tkotlinTest.jvmArgs(\"-javaagent:\" + mockitoAgentConfig.getAsPath());\n+\t\t\t\t\t});\n+\t\t\t\t});\n \t\t\t});\n \t\t}\n \t}",
    "output": "Apply Mockito Java Agent to Kotlin tests too"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java\n@@ -48,7 +48,7 @@ class CacheEvaluationContext extends MethodBasedEvaluationContext {\n \tprivate final Set<String> unavailableVariables = new HashSet<>(1);\n \n \n-\tCacheEvaluationContext(Object rootObject, Method method, @Nullable Object[] arguments,\n+\tCacheEvaluationContext(@Nullable Object rootObject, Method method, @Nullable Object[] arguments,\n \t\t\tParameterNameDiscoverer parameterNameDiscoverer) {\n \n \t\tsuper(rootObject, method, arguments, parameterNameDiscoverer);\n\ndiff --git a/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java b/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java\n@@ -53,7 +53,7 @@ public class MethodBasedEvaluationContext extends StandardEvaluationContext {\n \tprivate boolean argumentsLoaded = false;\n \n \n-\tpublic MethodBasedEvaluationContext(Object rootObject, Method method, @Nullable Object[] arguments,\n+\tpublic MethodBasedEvaluationContext(@Nullable Object rootObject, Method method, @Nullable Object[] arguments,\n \t\t\tParameterNameDiscoverer parameterNameDiscoverer) {\n \n \t\tsuper(rootObject);",
    "output": "Make rootObject parameter consistently nullable MethodBasedEvaluationContext and CacheEvaluationContext should allow a nullable rootObject constructor parameter like StandardEvaluationContext does"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java b/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java\n@@ -86,7 +86,7 @@ public abstract class OncePerRequestFilter extends GenericFilterBean {\n \t * @see #doFilterInternal\n \t */\n \t@Override\n-\tpublic final void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)\n+\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)\n \t\t\tthrows ServletException, IOException {\n \n \t\tif (!((request instanceof HttpServletRequest httpRequest) && (response instanceof HttpServletResponse httpResponse))) {",
    "output": "Drop final declaration from doFilter entry point (for CGLIB proxying)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/ApplicationContextEvent.java b/spring-context/src/main/java/org/springframework/context/event/ApplicationContextEvent.java\n--- a/spring-context/src/main/java/org/springframework/context/event/ApplicationContextEvent.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationContextEvent.java\n@@ -20,28 +20,41 @@\n import org.springframework.context.ApplicationEvent;\n \n /**\n- * Base class for events raised for an {@code ApplicationContext}.\n+ * Base class for events raised for an {@link ApplicationContext}.\n  *\n  * @author Juergen Hoeller\n+ * @author Sam Brannen\n  * @since 2.5\n  */\n @SuppressWarnings(\"serial\")\n public abstract class ApplicationContextEvent extends ApplicationEvent {\n \n \t/**\n \t * Create a new {@code ApplicationContextEvent}.\n-\t * @param source the {@code ApplicationContext} that the event is raised for\n+\t * @param source the {@link ApplicationContext} that the event is raised for\n \t * (must not be {@code null})\n \t */\n \tpublic ApplicationContextEvent(ApplicationContext source) {\n \t\tsuper(source);\n \t}\n \n \t/**\n-\t * Get the {@code ApplicationContext} that the event was raised for.\n+\t * Get the {@link ApplicationContext} that the event was raised for.\n+\t * @return the {@code ApplicationContext} that the event was raised for\n+\t * @since 7.0\n+\t * @see #getApplicationContext()\n+\t */\n+\t@Override\n+\tpublic ApplicationContext getSource() {\n+\t\treturn getApplicationContext();\n+\t}\n+\n+\t/**\n+\t * Get the {@link ApplicationContext} that the event was raised for.\n+\t * @see #getSource()\n \t */\n \tpublic final ApplicationContext getApplicationContext() {\n-\t\treturn (ApplicationContext) getSource();\n+\t\treturn (ApplicationContext) super.getSource();\n \t}\n \n }",
    "output": "Introduce ApplicationContextEvent.getSourcewith covariant return type Prior to this commit, ApplicationContextEvent inherited getSourcefrom java.util.EventObject.getSourcewhich has an Object return type. This commit introduces a local getSourceimplementation in ApplicationContextEvent with an ApplicationContext covariant return type, analogous to TestContextEvent in spring-test"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java b/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsClient.java\n@@ -78,7 +78,7 @@\n  * @see JmsMessagingTemplate\n  * @see org.springframework.messaging.support.MessageBuilder\n  */\n-interface JmsClient {\n+public interface JmsClient {\n \n \t/**\n \t * Provide an operation handle for the given JMS destination.",
    "output": "Fix JmsClient visibility"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -1798,6 +1798,11 @@ private boolean isConvertibleProperty(String propertyName, BeanWrapper bw) {\n \t */\n \t@SuppressWarnings(\"deprecation\")\n \tprotected Object initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd) {\n+\t\t// Skip initialization of a NullBean\n+\t\tif (bean.getClass() == NullBean.class) {\n+\t\t\treturn bean;\n+\t\t}\n+\n \t\tinvokeAwareMethods(beanName, bean);\n \n \t\tObject wrappedBean = bean;",
    "output": "Skip initialization of a NullBean Prior to this commit, AbstractAutowireCapableBeanFactory's initializeBeanmethod always attempted to initialize a NullBean. However, invokeInitMethods(which is invoked by initializeBean) skips processing of a NullBean, which is logical since a NullBean will never contain init-methods. In practice, initialization and post-processing of a NullBean should not result in any change to the NullBean. This commit therefore skips initialization of a NullBean altogether"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java\n--- a/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java\n@@ -107,9 +107,8 @@ public Mono<Void> filter(ServerWebExchange exchange) {\n \t\t\t\t\t\tthis.handler.handle(exchange));\n \t}\n \n-\tprivate Mono<Void> invokeFilter(WebFilter current, DefaultWebFilterChain chain, ServerWebExchange exchange) {\n-\t\tString currentName = current.getClass().getName();\n-\t\treturn current.filter(exchange, chain).checkpoint(currentName + \" [DefaultWebFilterChain]\");\n+\tprivate Mono<Void> invokeFilter(WebFilter filter, DefaultWebFilterChain chain, ServerWebExchange exchange) {\n+\t\treturn filter.filter(exchange, chain).checkpoint(filter.toString());\n \t}\n \n }",
    "output": "Use toString for WebFilter checkpoint"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/InstanceFilter.java b/spring-core/src/main/java/org/springframework/util/InstanceFilter.java\n--- a/spring-core/src/main/java/org/springframework/util/InstanceFilter.java\n+++ b/spring-core/src/main/java/org/springframework/util/InstanceFilter.java\n@@ -86,21 +86,16 @@ public InstanceFilter(@Nullable Collection<? extends T> includes,\n \tpublic boolean match(T instance) {\n \t\tAssert.notNull(instance, \"Instance to match must not be null\");\n \n-\t\tboolean includesSet = !this.includes.isEmpty();\n-\t\tboolean excludesSet = !this.excludes.isEmpty();\n-\t\tif (!includesSet && !excludesSet) {\n-\t\t\treturn this.matchIfEmpty;\n-\t\t}\n+\t\tboolean emptyIncludes = this.includes.isEmpty();\n+\t\tboolean emptyExcludes = this.excludes.isEmpty();\n \n-\t\tboolean matchIncludes = match(instance, this.includes);\n-\t\tboolean matchExcludes = match(instance, this.excludes);\n-\t\tif (!includesSet) {\n-\t\t\treturn !matchExcludes;\n+\t\tif (emptyIncludes && emptyExcludes) {\n+\t\t\treturn this.matchIfEmpty;\n \t\t}\n-\t\tif (!excludesSet) {\n-\t\t\treturn matchIncludes;\n+\t\tif (!emptyExcludes && match(instance, this.excludes)) {\n+\t\t\treturn false;\n \t\t}\n-\t\treturn matchIncludes && !matchExcludes;\n+\t\treturn (emptyIncludes || match(instance, this.includes));\n \t}\n \n \t/**",
    "output": "Short-circuit matching algorithm in InstanceFilter In commit 97522cfa36a0281929cb3ba6f8404dc8cd938695, I implemented a short-circuiting matching algorithm in DefaultRetryPolicy for includes and excludes, which was later copied to MethodRetrySpec. After we switched to using ExceptionTypeFilter, I realized that the matching algorithm in InstanceFilter (the superclass of ExceptionTypeFilter) does not exhibit the same short-circuiting characteristics. In light of that, this commit revises the matching algorithm in InstanceFilter to mirror the original short-circuiting algorithm in DefaultRetryPolicy"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Contract.java b/spring-core/src/main/java/org/springframework/lang/Contract.java\n--- a/spring-core/src/main/java/org/springframework/lang/Contract.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Contract.java\n@@ -81,6 +81,6 @@\n \t/**\n \t * Contains the contract clauses describing causal relations between call arguments and the returned value.\n \t */\n-\tString value() default \"\";\n+\tString value();\n \n }",
    "output": "Require explicit constraints in @⁠Contract Prior to this commit, the value attribute in @⁠Contract was declared as follows. String valuedefault \"\"; That allowed empty declarations such as @⁠Contract or @⁠Contract; however, a contract is not useful without declared constraints. To address that, this commit removes the `default \"\"` declaration in order to force users to provide explicit constraints. Although one could technically still declare the annotation without constraints via @⁠Contract(\"\"), it's unlikely that anyone would intentionally do that"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n--- a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n+++ b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.core.retry;\n \n-import java.time.Duration;\n import java.util.ArrayDeque;\n import java.util.Deque;\n \n@@ -84,7 +83,6 @@ public RetryTemplate(RetryPolicy retryPolicy) {\n \t * @param retryPolicy the retry policy to use\n \t * @see RetryPolicy#withDefaults()\n \t * @see RetryPolicy#withMaxAttempts(long)\n-\t * @see RetryPolicy#withMaxElapsedTime(Duration)\n \t * @see RetryPolicy#builder()\n \t */\n \tpublic void setRetryPolicy(RetryPolicy retryPolicy) {",
    "output": "Remove obsolete Javadoc reference"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/resilience/annotation/ConcurrencyLimitBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/resilience/annotation/ConcurrencyLimitBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/resilience/annotation/ConcurrencyLimitBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/resilience/annotation/ConcurrencyLimitBeanPostProcessor.java\n@@ -20,7 +20,6 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import org.aopalliance.intercept.Joinpoint;\n import org.aopalliance.intercept.MethodInterceptor;\n import org.aopalliance.intercept.MethodInvocation;\n import org.jspecify.annotations.Nullable;\n@@ -93,8 +92,8 @@ private static class ConcurrencyLimitInterceptor implements MethodInterceptor {\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (interceptor == null) {\n-\t\t\t\t\t\t\tinterceptor = (limit != null ? new ConcurrencyThrottleInterceptor(limit.value()) :\n-\t\t\t\t\t\t\t\t\tJoinpoint::proceed);\n+\t\t\t\t\t\t\tAssert.state(limit != null, \"No @ConcurrencyLimit annotation found\");\n+\t\t\t\t\t\t\tinterceptor = new ConcurrencyThrottleInterceptor(limit.value());\n \t\t\t\t\t\t\tif (!perMethod) {\n \t\t\t\t\t\t\t\tcache.classInterceptor = interceptor;\n \t\t\t\t\t\t\t}",
    "output": "Replace lenient fallback with assertion for actual annotation present"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.26.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.26.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.26.1"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n@@ -224,7 +224,6 @@ void contentNegotiationManager() {\n \t\tassertThat(mediaTypeMappings)\n \t\t\t\t.containsEntry(\"atom\", MediaType.APPLICATION_ATOM_XML)\n \t\t\t\t.containsEntry(\"rss\", MediaType.APPLICATION_RSS_XML)\n-\t\t\t\t.containsEntry(\"rss\", MediaType.APPLICATION_RSS_XML)\n \t\t\t\t.containsEntry(\"xml\", MediaType.APPLICATION_XML)\n \t\t\t\t.containsEntry(\"json\", MediaType.APPLICATION_JSON)\n \t\t\t\t.containsEntry(\"smile\", MediaType.valueOf(\"application/x-jackson-smile\"))",
    "output": "Remove the duplicated “rss” assertion"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/type/classreading/CachingMetadataReaderFactoryTests.java b/spring-core/src/test/java/org/springframework/core/type/classreading/CachingMetadataReaderFactoryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/type/classreading/CachingMetadataReaderFactoryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/type/classreading/CachingMetadataReaderFactoryTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.core.type.classreading;\n \n-\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.io.Resource;\n@@ -38,8 +37,8 @@ void shouldCacheClassNameCalls() throws Exception {\n \t\twhen(delegate.getMetadataReader(any(Resource.class))).thenReturn(mock(MetadataReader.class));\n \n \t\tCachingMetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(delegate);\n-\t\tMetadataReader metadataReader = readerFactory.getMetadataReader(TestClass.class.getName());\n-\t\tmetadataReader = readerFactory.getMetadataReader(TestClass.class.getName());\n+\t\treaderFactory.getMetadataReader(TestClass.class.getName());\n+\t\treaderFactory.getMetadataReader(TestClass.class.getName());\n \n \t\tverify(delegate, times(1)).getMetadataReader(any(Resource.class));\n \t}",
    "output": "Resolve warning in CachingMetadataReaderFactoryTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java b/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java\n--- a/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java\n+++ b/spring-core/src/main/java/org/springframework/util/backoff/FixedBackOff.java\n@@ -21,6 +21,7 @@\n  * between two attempts and a maximum number of retries.\n  *\n  * @author Stephane Nicoll\n+ * @author Sam Brannen\n  * @since 4.1\n  */\n public class FixedBackOff implements BackOff {\n@@ -50,6 +51,17 @@ public class FixedBackOff implements BackOff {\n \tpublic FixedBackOff() {\n \t}\n \n+\t/**\n+\t * Create an instance with the supplied interval and an unlimited number of\n+\t * attempts.\n+\t * @param interval the interval between two attempts in milliseconds\n+\t * @since 7.0\n+\t * @see #setMaxAttempts(long)\n+\t */\n+\tpublic FixedBackOff(long interval) {\n+\t\tthis.interval = interval;\n+\t}\n+\n \t/**\n \t * Create an instance with the supplied interval and maximum number of attempts.\n \t * @param interval the interval between two attempts in milliseconds",
    "output": "Reintroduce FixedBackOff(long) constructor Effectively removing FixedBackOff(Duration) only"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MethodInvoker.java b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n--- a/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n+++ b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n@@ -127,7 +127,7 @@ public void setStaticMethod(String staticMethod) {\n \t * Set arguments for the method invocation. If this property is not set,\n \t * or the Object array is of length 0, a method with no arguments is assumed.\n \t */\n-\tpublic void setArguments(@Nullable Object... arguments) {\n+\tpublic void setArguments(@Nullable Object @Nullable ... arguments) {\n \t\tthis.arguments = arguments;\n \t}\n ",
    "output": "Refine nullability of MethodInvoker#setArguments"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/hibernate/HibernateExceptionTranslator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/hibernate/HibernateExceptionTranslator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/hibernate/HibernateExceptionTranslator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/hibernate/HibernateExceptionTranslator.java\n@@ -108,9 +108,8 @@ public void setJdbcExceptionTranslator(@Nullable SQLExceptionTranslator exceptio\n \t\t\tif (ex.getCause() instanceof HibernateException hibernateEx) {\n \t\t\t\treturn convertHibernateAccessException(hibernateEx);\n \t\t\t}\n-\t\t\treturn EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);\n \t\t}\n-\t\treturn null;\n+\t\treturn EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);\n \t}\n \n \t/**",
    "output": "Restore translation of IllegalArgumentException for JPA"
  },
  {
    "input": "diff --git a/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java b/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java\n--- a/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java\n+++ b/spring-core/src/main/java24/org/springframework/core/type/classreading/ClassFileAnnotationMetadata.java\n@@ -103,7 +103,7 @@ private static String fromTypeDescriptor(String descriptor) {\n \t\tclassDesc.packageName() + \".\" + classDesc.displayName();\n \t}\n \n-\tprivate static Object parseArrayValue(String className, @org.jetbrains.annotations.Nullable ClassLoader classLoader, AnnotationValue.OfArray arrayValue) {\n+\tprivate static Object parseArrayValue(String className, @Nullable ClassLoader classLoader, AnnotationValue.OfArray arrayValue) {\n \t\tif (arrayValue.values().isEmpty()) {\n \t\t\treturn new Object[0];\n \t\t}",
    "output": "Fix Nullable import in ClassFileAnnotationMetadata"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.25.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.26.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.26"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ApiVersionTests.java\n@@ -51,7 +51,7 @@ public void queryParameter() throws Exception {\n \t\tDefaultApiVersionStrategy versionStrategy = new DefaultApiVersionStrategy(\n \t\t\t\tList.of(request -> request.getHeader(header)),\n \t\t\t\tnew SemanticApiVersionParser(),\n-\t\t\t\ttrue, null);\n+\t\t\t\ttrue, null, null);\n \n \t\tMockMvc mockMvc = standaloneSetup(new PersonController())\n \t\t\t\t.setApiVersionStrategy(versionStrategy)",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n@@ -34,16 +34,17 @@ void apply(Project project) {\n \n \tprivate void configure(KotlinCompile compile) {\n \t\tcompile.compilerOptions(options -> {\n-\t\t\toptions.getApiVersion().set(KotlinVersion.KOTLIN_2_1);\n-\t\t\toptions.getLanguageVersion().set(KotlinVersion.KOTLIN_2_1);\n+\t\t\toptions.getApiVersion().set(KotlinVersion.KOTLIN_2_2);\n+\t\t\toptions.getLanguageVersion().set(KotlinVersion.KOTLIN_2_2);\n \t\t\toptions.getJvmTarget().set(JvmTarget.JVM_17);\n \t\t\toptions.getJavaParameters().set(true);\n \t\t\toptions.getAllWarningsAsErrors().set(true);\n \t\t\toptions.getFreeCompilerArgs().addAll(\n \t\t\t\t\t\"-Xsuppress-version-warnings\",\n \t\t\t\t\t\"-Xjsr305=strict\", // For dependencies using JSR 305\n \t\t\t\t\t\"-opt-in=kotlin.RequiresOptIn\",\n-\t\t\t\t\t\"-Xjdk-release=17\" // Needed due to https://youtrack.jetbrains.com/issue/KT-49746\n+\t\t\t\t\t\"-Xjdk-release=17\", // Needed due to https://youtrack.jetbrains.com/issue/KT-49746\n+\t\t\t\t\t\"-Xannotation-default-target=param-property\" // Upcoming default, see https://youtrack.jetbrains.com/issue/KT-73255\n \t\t\t);\n \t\t});\n \t}",
    "output": "Upgrade to Kotlin 2.2.0 Kotlin 2.2 is the new baseline for Spring Framework 7.0. -Xannotation-default-target=param-property is specified to avoid warnings when compiling tests or documentation snippets. It is expected to become the default behavior in an upcoming version of Kotlin, see https://youtrack.jetbrains.com/issue/for more details"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/JacksonXmlHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/JacksonXmlHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/JacksonXmlHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/JacksonXmlHttpMessageConverterTests.java\n@@ -314,7 +314,7 @@ public void setWithoutView(String withoutView) {\n \t}\n \n \n-\t@SuppressWarnings(\"serial\")\n+\t@SuppressWarnings({\"serial\", \"unchecked\"})\n \tprivate static class MyXmlMapper extends XmlMapper {\n \t}\n ",
    "output": "Clean up warning in Gradle build"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java\n@@ -89,7 +89,7 @@ public Mono<Void> execute(URI url, WebSocketHandler handler) {\n \t@Override\n \tpublic Mono<Void> execute(URI url, @Nullable HttpHeaders headers, WebSocketHandler handler) {\n \n-\t\tClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest();\n+\t\tClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest(url);\n \t\tupgradeRequest.setSubProtocols(handler.getSubProtocols());\n \t\tif (headers != null) {\n \t\t\theaders.headerNames().forEach(header -> upgradeRequest.setHeader(header, headers.getValuesAsList(header)));\n@@ -110,7 +110,7 @@ public void onHandshakeResponse(Request request, Response response) {\n \t\tJettyWebSocketHandlerAdapter handlerAdapter = new JettyWebSocketHandlerAdapter(handler, session ->\n \t\t\t\tnew JettyWebSocketSession(session, Objects.requireNonNull(handshakeInfo.get()), DefaultDataBufferFactory.sharedInstance, completion));\n \t\ttry {\n-\t\t\tthis.client.connect(handlerAdapter, url, upgradeRequest, jettyUpgradeListener)\n+\t\t\tthis.client.connect(handlerAdapter, upgradeRequest, jettyUpgradeListener)\n \t\t\t\t\t.exceptionally(throwable -> {\n \t\t\t\t\t\t// Only fail the completion if we have an error\n \t\t\t\t\t\t// as the JettyWebSocketSession will never be opened.",
    "output": "Upgrade to Jetty 12.1.0.beta1"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/config/TaskManagementConfigUtils.java b/spring-context/src/main/java/org/springframework/scheduling/config/TaskManagementConfigUtils.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/config/TaskManagementConfigUtils.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/config/TaskManagementConfigUtils.java\n@@ -28,13 +28,13 @@ public abstract class TaskManagementConfigUtils {\n \t * The bean name of the internally managed Scheduled annotation processor.\n \t */\n \tpublic static final String SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME =\n-\t\t\t\"org.springframework.context.annotation.internalScheduledAnnotationProcessor\";\n+\t\t\t\"org.springframework.scheduling.config.internalScheduledAnnotationProcessor\";\n \n \t/**\n \t * The bean name of the internally managed Async annotation processor.\n \t */\n \tpublic static final String ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME =\n-\t\t\t\"org.springframework.context.annotation.internalAsyncAnnotationProcessor\";\n+\t\t\t\"org.springframework.scheduling.config.internalAsyncAnnotationProcessor\";\n \n \t/**\n \t * The bean name of the internally managed AspectJ async execution aspect.",
    "output": "Align package namespace in TaskManagementConfigUtils constants"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -463,7 +463,7 @@ private Object executeSynchronized(CacheOperationInvoker invoker, Method method,\n \t\t\t\t\t\t() -> {\n \t\t\t\t\t\t\tCompletableFuture<?> invokeResult = ((CompletableFuture<?>) invokeOperation(invoker));\n \t\t\t\t\t\t\tif (invokeResult == null) {\n-\t\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Returned CompletableFuture must not be null: \" + method);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\treturn invokeResult.exceptionallyCompose(ex -> {\n \t\t\t\t\t\t\t\tinvokeFailure.set(true);",
    "output": "Reject null for returned CompletableFuture (avoiding subsequent NPE)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/CheckReturnValue.java b/spring-core/src/main/java/org/springframework/lang/CheckReturnValue.java\n--- a/spring-core/src/main/java/org/springframework/lang/CheckReturnValue.java\n+++ b/spring-core/src/main/java/org/springframework/lang/CheckReturnValue.java\n@@ -33,10 +33,13 @@\n  * and the return value is only interesting when adding an element to a set,\n  * to see if the set already contained that element before.\n  *\n+ * <p>When used on a type, the annotation applies to all constructors and all\n+ * methods that do not return {@code void}.\n+ *\n  * @author Sebastien Deleuze\n  * @since 6.2\n  */\n @Documented\n-@Target(ElementType.METHOD)\n+@Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR})\n public @interface CheckReturnValue {\n }",
    "output": "Allow usage of `@CheckReturnValue` on types and ctors"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java\n@@ -64,7 +64,7 @@ void canRead() {\n \tvoid canWrite() {\n \t\tassertThat(this.converter.canWrite(Msg.class, null)).isTrue();\n \t\tassertThat(this.converter.canWrite(Msg.class, ProtobufHttpMessageConverter.PROTOBUF)).isTrue();\n-\t\tassertThat(this.converter.canRead(Msg.class, this.testPlusProtoMediaType)).isTrue();\n+\t\tassertThat(this.converter.canWrite(Msg.class, this.testPlusProtoMediaType)).isTrue();\n \t\tassertThat(this.converter.canWrite(Msg.class, MediaType.APPLICATION_JSON)).isTrue();\n \t\tassertThat(this.converter.canWrite(Msg.class, MediaType.TEXT_PLAIN)).isTrue();\n \t}",
    "output": "Fix typo in ProtobufHttpMessageConverterTests.canWrite"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferInputStream.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferInputStream.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferInputStream.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferInputStream.java\n@@ -124,7 +124,7 @@ public long skip(long n) throws IOException {\n \t\t\treturn 0L;\n \t\t}\n \t\tint skipped = Math.min(available(), n > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) n);\n-\t\tthis.dataBuffer.readPosition(Math.min(this.end, this.dataBuffer.readPosition() + skipped));\n+\t\tthis.dataBuffer.readPosition(this.dataBuffer.readPosition() + skipped);\n \t\treturn skipped;\n \t}\n ",
    "output": "Polish DataBufferInputStream.skip"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/JavaConventions.java b/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n@@ -26,7 +26,6 @@\n import org.gradle.api.plugins.JavaPluginExtension;\n import org.gradle.api.tasks.compile.JavaCompile;\n import org.gradle.jvm.toolchain.JavaLanguageVersion;\n-import org.gradle.jvm.toolchain.JvmVendorSpec;\n \n /**\n  * {@link Plugin} that applies conventions for compiling Java sources in Spring Framework.\n@@ -86,7 +85,6 @@ public void apply(Project project) {\n \t */\n \tprivate static void applyToolchainConventions(Project project) {\n \t\tproject.getExtensions().getByType(JavaPluginExtension.class).toolchain(toolchain -> {\n-\t\t\ttoolchain.getVendor().set(JvmVendorSpec.BELLSOFT);\n \t\t\ttoolchain.getLanguageVersion().set(DEFAULT_LANGUAGE_VERSION);\n \t\t});\n \t}",
    "output": "Relax Java 24 toolchain requirements While we choose our GitHub action to use Bellsoft Liberica, we should relax that vendor requirement and ensure that contributors can build the project with any Java 24 distribution"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/MetadataEncoder.java\n@@ -106,8 +106,7 @@ private static String expand(String route, Object... routeVars) {\n \t\tMatcher matcher = VARS_PATTERN.matcher(route);\n \t\twhile (matcher.find()) {\n \t\t\tAssert.isTrue(index < routeVars.length, () -> \"No value for variable '\" + matcher.group(1) + \"'\");\n-\t\t\tString value = routeVars[index].toString();\n-\t\t\tvalue = value.contains(\".\") ? value.replaceAll(\"\\\\.\", \"%2E\") : value;\n+\t\t\tString value = routeVars[index].toString().replace(\".\", \"%2E\");\n \t\t\tmatcher.appendReplacement(sb, value);\n \t\t\tindex++;\n \t\t}",
    "output": "Use String.replace in MetadataEncoder Use String.replace instead of replaceAll in MetadataEncoder; since Java 9, String.replace no longer uses a regex, while replaceAll does. The use case here of replacing a single character does not require a regex"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java b/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java\n--- a/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java\n+++ b/spring-core/src/main/java/org/springframework/core/retry/RetryOperations.java\n@@ -41,6 +41,6 @@ public interface RetryOperations {\n \t * encountered during retry attempts should be made available as suppressed\n \t * exceptions\n \t */\n-\t<R extends @Nullable Object> R execute(Retryable<R> retryable) throws RetryException;\n+\t<R> @Nullable R execute(Retryable<? extends @Nullable R> retryable) throws RetryException;\n \n }\n\ndiff --git a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n--- a/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n+++ b/spring-core/src/main/java/org/springframework/core/retry/RetryTemplate.java\n@@ -142,7 +142,7 @@ public void setRetryListener(RetryListener retryListener) {\n \t * encountered during retry attempts are available as suppressed exceptions\n \t */\n \t@Override\n-\tpublic <R extends @Nullable Object> R execute(Retryable<R> retryable) throws RetryException {\n+\tpublic <R> @Nullable R execute(Retryable<? extends @Nullable R> retryable) throws RetryException {\n \t\tString retryableName = retryable.getName();\n \t\t// Initial attempt\n \t\ttry {",
    "output": "Change signature of RetryOperations.executeregarding nullability Due to lacking support in NullAway for the current arrangement, we are (perhaps temporarily) changing the signature of the executemethod in RetryOperations (and thus also in RetryTemplate)... from: <R extends @Nullable Object> R execute(Retryable<R> retryable); to: <R> @Nullable R execute(Retryable<? extends @Nullable R> retryable); Once https://github.com/uber/NullAway/issues/1075 has been resolved, we will consider switching back to the original signature"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -150,7 +150,8 @@ private void registerKotlinSerializationHints(ReflectionHints hints, Class<?> cl\n \t\tString companionClassName = clazz.getCanonicalName() + KOTLIN_COMPANION_SUFFIX;\n \t\tif (ClassUtils.isPresent(companionClassName, null)) {\n \t\t\tClass<?> companionClass = ClassUtils.resolveClassName(companionClassName, null);\n-\t\t\tMethod serializerMethod = ClassUtils.getMethodIfAvailable(companionClass, \"serializer\");\n+\t\t\tMethod serializerMethod = ClassUtils.getMethodIfAvailable(companionClass, \"serializer\",\n+\t\t\t\t\t(Class<?>[]) null);\n \t\t\tif (serializerMethod != null) {\n \t\t\t\thints.registerMethod(serializerMethod, ExecutableMode.INVOKE);\n \t\t\t}",
    "output": "Refine Kotlin Serialization hint registration This commit adds support for serializer methods with a parameter"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/jdbc/AfterTestClassSqlScriptsTests.java b/spring-test/src/test/java/org/springframework/test/context/jdbc/AfterTestClassSqlScriptsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/jdbc/AfterTestClassSqlScriptsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/AfterTestClassSqlScriptsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -72,6 +72,7 @@ void databaseIsNotWipedBetweenTests() {\n \t}\n \n \t@Nested\n+\t@TestMethodOrder(OrderAnnotation.class)\n \t@Sql(scripts = \"recreate-schema.sql\", executionPhase = BEFORE_TEST_CLASS)\n \t@Sql(scripts = \"drop-schema.sql\", executionPhase = AFTER_TEST_CLASS)\n \tclass NestedAfterTestClassSqlScriptsTests {",
    "output": "Redeclare @⁠TestMethodOrder on @⁠Nested test class Thanks to the new Discovery Issue Reporting mechanism introduced in JUnit 5.13, I became aware of the fact that the @⁠Order annotations in NestedAfterTestClassSqlScriptsTests were being silently ignored. To address that, this commit redeclares @⁠TestMethodOrder on @⁠Nested test class"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n@@ -19,7 +19,6 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.Serializable;\n-import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n import java.util.Map;\n import java.util.Optional;\n@@ -167,20 +166,6 @@ public boolean isRequired() {\n \t\t}\n \t}\n \n-\t/**\n-\t * Check whether the underlying field is annotated with any variant of a\n-\t * {@code Nullable} annotation, for example, {@code jakarta.annotation.Nullable} or\n-\t * {@code edu.umd.cs.findbugs.annotations.Nullable}.\n-\t */\n-\tprivate boolean hasNullableAnnotation() {\n-\t\tfor (Annotation ann : getAnnotations()) {\n-\t\t\tif (\"Nullable\".equals(ann.annotationType().getSimpleName())) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n \t/**\n \t * Return whether this dependency is 'eager' in the sense of\n \t * eagerly resolving potential target beans for type matching.",
    "output": "Remove obsolete code The hasNullableAnnotationmethod was made obsolete in commit b5d153febf7395658a53c2fac08f342781b6cc8f"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.23.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.25.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Groovy 4.0.27, Mockito 5.18, Checkstyle 10.25"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -25,7 +25,6 @@\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.core.convert.ConversionService;\n-import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.ConfigurablePropertyResolver;\n import org.springframework.core.env.Environment;\n@@ -270,11 +269,7 @@ private String convertToString(Object value) {\n \t\t\tif (value instanceof String string) {\n \t\t\t\treturn string;\n \t\t\t}\n-\t\t\tConversionService conversionService = super.source.getConversionService();\n-\t\t\tif (conversionService == null) {\n-\t\t\t\tconversionService = DefaultConversionService.getSharedInstance();\n-\t\t\t}\n-\t\t\treturn conversionService.convert(value, String.class);\n+\t\t\treturn super.source.getConversionService().convert(value, String.class);\n \t\t}\n \n \t\t@Override",
    "output": "Remove unnecessary fallback to DefaultConversionService"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractKotlinSerializationHttpMessageConverter.java\n@@ -20,6 +20,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -76,6 +77,11 @@ protected AbstractKotlinSerializationHttpMessageConverter(T format, MediaType...\n \t\tthis.format = format;\n \t}\n \n+\t@Override\n+\tpublic List<MediaType> getSupportedMediaTypes(Class<?> clazz) {\n+\t\treturn getSupportedMediaTypes();\n+\t}\n+\n \t@Override\n \tprotected boolean supports(Class<?> clazz) {\n \t\treturn serializer(ResolvableType.forClass(clazz)) != null;",
    "output": "Fix collection support in AbstractKotlinSerializationHttpMessageConverter AbstractKotlinSerializationHttpMessageConverter#getSupportedMediaTypes(Class<?>) currently invokes transitively supports(Class<?>) which always return false with generic types. This commit adds an override that just invokes getSupportedMediaTypes"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n@@ -219,7 +219,7 @@ protected Mono<Void> doBegin(TransactionSynchronizationManager synchronizationMa\n \t\t\t\t\t\tif (txObject.isNewConnectionHolder()) {\n \t\t\t\t\t\t\tsynchronizationManager.bindResource(obtainConnectionFactory(), txObject.getConnectionHolder());\n \t\t\t\t\t\t}\n-\t\t\t\t\t}).thenReturn(con).onErrorResume(ex -> {\n+\t\t\t\t\t}).onErrorResume(ex -> {\n \t\t\t\t\t\tif (txObject.isNewConnectionHolder()) {\n \t\t\t\t\t\t\treturn ConnectionFactoryUtils.releaseConnection(con, obtainConnectionFactory())\n \t\t\t\t\t\t\t\t\t.doOnTerminate(() -> txObject.setConnectionHolder(null, false))",
    "output": "Remove thenReturn that fetches unused values"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java\n@@ -17,6 +17,7 @@\n package org.springframework.beans.propertyeditors;\n \n import java.beans.PropertyEditorSupport;\n+import java.util.HexFormat;\n \n import org.jspecify.annotations.Nullable;\n \n@@ -97,13 +98,12 @@ public String getAsText() {\n \t\treturn (value != null ? value.toString() : \"\");\n \t}\n \n-\n-\tprivate boolean isUnicodeCharacterSequence(String sequence) {\n+\tprivate static boolean isUnicodeCharacterSequence(String sequence) {\n \t\treturn (sequence.startsWith(UNICODE_PREFIX) && sequence.length() == UNICODE_LENGTH);\n \t}\n \n \tprivate void setAsUnicode(String text) {\n-\t\tint code = Integer.parseInt(text.substring(UNICODE_PREFIX.length()), 16);\n+\t\tint code = HexFormat.fromHexDigits(text, UNICODE_PREFIX.length(), text.length());\n \t\tsetValue((char) code);\n \t}\n ",
    "output": "Use HexFormat in CharacterEditor Use HexFormat to perform conversion for unicode-prefixed Strings in CharacterEditor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n@@ -37,7 +37,7 @@ public abstract class SupplierUtils {\n \t * @param supplier the supplier to resolve\n \t * @return the supplier's result, or {@code null} if none\n \t */\n-\t@Contract(\"null -> null; !null -> !null\")\n+\t@Contract(\"null -> null\")\n \tpublic static <T> @Nullable T resolve(@Nullable Supplier<T> supplier) {\n \t\treturn (supplier != null ? supplier.get() : null);\n \t}",
    "output": "Fix nullability @⁠Contract for SupplierUtils.resolve(Supplier)"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/converter/JacksonJsonMessageConverter.java b/spring-messaging/src/main/java/org/springframework/messaging/converter/JacksonJsonMessageConverter.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/converter/JacksonJsonMessageConverter.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/JacksonJsonMessageConverter.java\n@@ -97,6 +97,13 @@ public JacksonJsonMessageConverter(ObjectMapper objectMapper, MimeType... suppor\n \t\tthis.objectMapper = objectMapper;\n \t}\n \n+\t/**\n+\t * Return the underlying {@code ObjectMapper} for this converter.\n+\t */\n+\tprotected ObjectMapper getObjectMapper() {\n+\t\treturn this.objectMapper;\n+\t}\n+\n \t@Override\n \tprotected boolean canConvertFrom(Message<?> message, @Nullable Class<?> targetClass) {\n \t\treturn targetClass != null && supportsMimeType(message.getHeaders());",
    "output": "Introduce JacksonJsonMessageConverter#getObjectMapper In order to give access to the underlying ObjectMapper to classes extending JacksonJsonMessageConverter"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -2249,7 +2249,7 @@ protected boolean matchesBeanName(String beanName, @Nullable String candidateNam\n \t * i.e. whether the candidate points back to the original bean or to a factory method\n \t * on the original bean.\n \t */\n-\t@Contract(\"null, _ -> false;_, null -> false;\")\n+\t@Contract(\"null, _ -> false; _, null -> false;\")\n \tprivate boolean isSelfReference(@Nullable String beanName, @Nullable String candidateName) {\n \t\treturn (beanName != null && candidateName != null &&\n \t\t\t\t(beanName.equals(candidateName) || (containsBeanDefinition(candidateName) &&",
    "output": "Consistent @⁠Contract expression formatting"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpRequestValues.java b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpRequestValues.java\n--- a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpRequestValues.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpRequestValues.java\n@@ -348,8 +348,9 @@ public Builder setContentType(MediaType contentType) {\n \t\t * Add the given header name and values.\n \t\t */\n \t\tpublic Builder addHeader(String headerName, String... headerValues) {\n+\t\t\tHttpHeaders headers = initHeaders();\n \t\t\tfor (String headerValue : headerValues) {\n-\t\t\t\tinitHeaders().add(headerName, headerValue);\n+\t\t\t\theaders.add(headerName, headerValue);\n \t\t\t}\n \t\t\treturn this;\n \t\t}\n@@ -373,8 +374,9 @@ private HttpHeaders initHeaders() {\n \t\t * Add the given cookie name and values.\n \t\t */\n \t\tpublic Builder addCookie(String name, String... values) {\n+\t\t\tMultiValueMap<String, String> cookies = initCookies();\n \t\t\tfor (String value : values) {\n-\t\t\t\tinitCookies().add(name, value);\n+\t\t\t\tcookies.add(name, value);\n \t\t\t}\n \t\t\treturn this;\n \t\t}\n@@ -402,8 +404,9 @@ private MultiValueMap<String, String> initCookies() {\n \t\t * parameters.\n \t\t */\n \t\tpublic Builder addRequestParameter(String name, String... values) {\n+\t\t\tMultiValueMap<String, String> requestParams = initRequestParams();\n \t\t\tfor (String value : values) {\n-\t\t\t\tinitRequestParams().add(name, value);\n+\t\t\t\trequestParams.add(name, value);\n \t\t\t}\n \t\t\treturn this;\n \t\t}",
    "output": "Polish HttpRequestValues"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java b/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java\n--- a/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java\n+++ b/spring-test/src/main/java/org/springframework/mock/env/MockEnvironment.java\n@@ -50,14 +50,6 @@ public void setProperty(String name, Object value) {\n \t\tthis.propertySource.setProperty(name, value);\n \t}\n \n-\t/**\n-\t * Set a property on the underlying {@link MockPropertySource} for this environment.\n-\t * @see #setProperty(String, Object)\n-\t */\n-\tpublic void setProperty(String name, String value) {\n-\t\tthis.propertySource.setProperty(name, value);\n-\t}\n-\n \t/**\n \t * Convenient synonym for {@link #setProperty(String, Object)} that returns\n \t * the current instance.\n@@ -71,16 +63,4 @@ public MockEnvironment withProperty(String name, Object value) {\n \t\treturn this;\n \t}\n \n-\t/**\n-\t * Convenient synonym for {@link #setProperty(String, String)} that returns\n-\t * the current instance.\n-\t * <p>Useful for method chaining and fluent-style use.\n-\t * @return this {@link MockEnvironment} instance\n-\t * @see #withProperty(String, Object)\n-\t */\n-\tpublic MockEnvironment withProperty(String name, String value) {\n-\t\tsetProperty(name, value);\n-\t\treturn this;\n-\t}\n-\n }",
    "output": "Remove [set|with]Property(String, String) variants from MockEnvironment Since setProperty(String, Object) and withProperty(String, Object) methods were introduced in MockEnvironment in 6.2.8, this commit removes the obsolete variants with (String, String) signatures"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.HttpURLConnection;\n+import java.util.Objects;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatusCode;\n@@ -103,6 +104,7 @@ public void close() {\n \t\t\tif (this.responseStream == null) {\n \t\t\t\tgetBody();\n \t\t\t}\n+\t\t\tObjects.requireNonNull(this.responseStream);\n \t\t\tStreamUtils.drain(this.responseStream);\n \t\t\tthis.responseStream.close();\n \t\t}",
    "output": "Upgrade code due to change in nullability contract"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -516,6 +516,7 @@ public static String deleteAny(String inString, @Nullable String charsToDelete)\n \t * @return the quoted {@code String} (for example, \"'myString'\"),\n \t * or {@code null} if the input was {@code null}\n \t */\n+\t@Contract(\"null -> null; !null -> !null\")\n \tpublic static @Nullable String quote(@Nullable String str) {\n \t\treturn (str != null ? \"'\" + str + \"'\" : null);\n \t}\n@@ -618,6 +619,7 @@ private static String changeFirstCharacterCase(String str, boolean capitalize) {\n \t * @param path the file path (may be {@code null})\n \t * @return the extracted filename, or {@code null} if none\n \t */\n+\t@Contract(\"null -> null; !null -> !null\")\n \tpublic static @Nullable String getFilename(@Nullable String path) {\n \t\tif (path == null) {\n \t\t\treturn null;",
    "output": "Declare @⁠Contract for quote& getFilenamein StringUtils This commit declares nullability @⁠Contract annotations for quoteand getFilenamein StringUtils"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n@@ -707,22 +707,19 @@ private String appendSql(@Nullable String sql, String statement) {\n \t\tAssert.notNull(rse, \"ResultSetExtractor must not be null\");\n \t\tlogger.debug(\"Executing prepared SQL query\");\n \n-\t\treturn execute(psc, new PreparedStatementCallback<>() {\n-\t\t\t@Override\n-\t\t\tpublic @Nullable T doInPreparedStatement(PreparedStatement ps) throws SQLException {\n-\t\t\t\tResultSet rs = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tif (pss != null) {\n-\t\t\t\t\t\tpss.setValues(ps);\n-\t\t\t\t\t}\n-\t\t\t\t\trs = ps.executeQuery();\n-\t\t\t\t\treturn rse.extractData(rs);\n+\t\treturn execute(psc, (PreparedStatementCallback<T>) ps -> {\n+\t\t\tResultSet rs = null;\n+\t\t\ttry {\n+\t\t\t\tif (pss != null) {\n+\t\t\t\t\tpss.setValues(ps);\n \t\t\t\t}\n-\t\t\t\tfinally {\n-\t\t\t\t\tJdbcUtils.closeResultSet(rs);\n-\t\t\t\t\tif (pss instanceof ParameterDisposer parameterDisposer) {\n-\t\t\t\t\t\tparameterDisposer.cleanupParameters();\n-\t\t\t\t\t}\n+\t\t\t\trs = ps.executeQuery();\n+\t\t\t\treturn rse.extractData(rs);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tJdbcUtils.closeResultSet(rs);\n+\t\t\t\tif (pss instanceof ParameterDisposer parameterDisposer) {\n+\t\t\t\t\tparameterDisposer.cleanupParameters();\n \t\t\t\t}\n \t\t\t}\n \t\t}, true);",
    "output": "Implement PreparedStatementCallback as lambda expression"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StreamUtils.java b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n@@ -239,7 +239,7 @@ public static OutputStream nonClosing(OutputStream out) {\n \t}\n \n \n-\tprivate static class NonClosingInputStream extends FilterInputStream {\n+\tprivate static final class NonClosingInputStream extends FilterInputStream {\n \n \t\tpublic NonClosingInputStream(InputStream in) {\n \t\t\tsuper(in);\n@@ -248,10 +248,30 @@ public NonClosingInputStream(InputStream in) {\n \t\t@Override\n \t\tpublic void close() throws IOException {\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic byte[] readAllBytes() throws IOException {\n+\t\t\treturn in.readAllBytes();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic byte[] readNBytes(int len) throws IOException {\n+\t\t\treturn in.readNBytes(len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int readNBytes(byte[] b, int off, int len) throws IOException {\n+\t\t\treturn in.readNBytes(b, off, len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic long transferTo(OutputStream out) throws IOException {\n+\t\t\treturn in.transferTo(out);\n+\t\t}\n \t}\n \n \n-\tprivate static class NonClosingOutputStream extends FilterOutputStream {\n+\tprivate static final class NonClosingOutputStream extends FilterOutputStream {\n \n \t\tpublic NonClosingOutputStream(OutputStream out) {\n \t\t\tsuper(out);",
    "output": "Forward more methods to underlying InputStream in NonClosingInputStream NonClosingInputStream extends FilterInputStream, which does not forward some newer InputStream methods such as transferTo and readAllBytes. Specific InputStream implementations may have more optimized methods (e.g., FileInputStream)"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.23.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.23.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Micrometer 1.14.7 Includes Jackson 2.18.4, Jetty 12.0.21, Netty 4.1.121, Apache HttpClient 5.4.4, Checkstyle 10.23.1"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorClientHttpRequestFactory.java\n@@ -49,7 +49,9 @@ public class ReactorClientHttpRequestFactory implements ClientHttpRequestFactory\n \tprivate static final Log logger = LogFactory.getLog(ReactorClientHttpRequestFactory.class);\n \n \tprivate static final Function<HttpClient, HttpClient> defaultInitializer =\n-\t\t\tclient -> client.compress(true).responseTimeout(Duration.ofSeconds(10));\n+\t\t\tclient -> client.compress(true)\n+\t\t\t\t\t.responseTimeout(Duration.ofSeconds(10))\n+\t\t\t\t\t.proxyWithSystemProperties();\n \n \n \tprivate final @Nullable ReactorResourceFactory resourceFactory;\n@@ -69,7 +71,8 @@ public class ReactorClientHttpRequestFactory implements ClientHttpRequestFactory\n \n \t/**\n \t * Constructor with default client, created via {@link HttpClient#create()},\n-\t * and with {@link HttpClient#compress compression} enabled.\n+\t * and with {@link HttpClient#compress compression} and\n+\t * {@link HttpClient#proxyWithSystemProperties() proxyWithSystemProperties} enabled.\n \t */\n \tpublic ReactorClientHttpRequestFactory() {\n \t\tthis(defaultInitializer.apply(HttpClient.create()));",
    "output": "Use system properties in ReactorClientHttpRequestFactory"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n@@ -22,6 +22,7 @@\n import org.springframework.beans.factory.BeanNameAware;\n import org.springframework.lang.Nullable;\n import org.springframework.util.StringValueResolver;\n+import org.springframework.util.SystemPropertyUtils;\n \n /**\n  * Abstract base class for property resource configurers that resolve placeholders\n@@ -92,16 +93,16 @@ public abstract class PlaceholderConfigurerSupport extends PropertyResourceConfi\n \t\timplements BeanNameAware, BeanFactoryAware {\n \n \t/** Default placeholder prefix: {@value}. */\n-\tpublic static final String DEFAULT_PLACEHOLDER_PREFIX = \"${\";\n+\tpublic static final String DEFAULT_PLACEHOLDER_PREFIX = SystemPropertyUtils.PLACEHOLDER_PREFIX;\n \n \t/** Default placeholder suffix: {@value}. */\n-\tpublic static final String DEFAULT_PLACEHOLDER_SUFFIX = \"}\";\n+\tpublic static final String DEFAULT_PLACEHOLDER_SUFFIX = SystemPropertyUtils.PLACEHOLDER_SUFFIX;\n \n \t/** Default value separator: {@value}. */\n-\tpublic static final String DEFAULT_VALUE_SEPARATOR = \":\";\n+\tpublic static final String DEFAULT_VALUE_SEPARATOR = SystemPropertyUtils.VALUE_SEPARATOR;\n \n \t/** Default escape character: {@code '\\'}. */\n-\tpublic static final Character DEFAULT_ESCAPE_CHARACTER = '\\\\';\n+\tpublic static final Character DEFAULT_ESCAPE_CHARACTER = SystemPropertyUtils.ESCAPE_CHARACTER;\n \n \n \t/** Defaults to {@value #DEFAULT_PLACEHOLDER_PREFIX}. */",
    "output": "Stop redefining placeholder syntax constants in PlaceholderConfigurerSupport"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -279,6 +279,11 @@ public Object getProperty(String name) {\n \t\t\treturn super.source.getProperty(name);\n \t\t}\n \n+\t\t@Override\n+\t\tpublic boolean containsProperty(String name) {\n+\t\t\treturn super.source.containsProperty(name);\n+\t\t}\n+\n \t\t@Override\n \t\tpublic String toString() {\n \t\t\treturn \"FallbackEnvironmentPropertySource {environment=\" + super.source + \"}\";",
    "output": "Override containsPropertyin FallbackEnvironmentPropertySource This commit overrides containsPropertyin FallbackEnvironmentPropertySource for consistency with the implementation of ConfigurableEnvironmentPropertySource"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -164,8 +164,8 @@ public void setValueSeparator(@Nullable String valueSeparator) {\n \t * <p>Default is {@link #DEFAULT_ESCAPE_CHARACTER}.\n \t * @since 6.2\n \t */\n-\tpublic void setEscapeCharacter(@Nullable Character escsEscapeCharacter) {\n-\t\tthis.escapeCharacter = escsEscapeCharacter;\n+\tpublic void setEscapeCharacter(@Nullable Character escapeCharacter) {\n+\t\tthis.escapeCharacter = escapeCharacter;\n \t}\n \n \t/**",
    "output": "Fix typo in parameter name"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n@@ -463,10 +463,21 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\t\t\tc = lookup.defineClass(b);\n \t\t\t}\n \t\t\tcatch (LinkageError | IllegalArgumentException ex) {\n-\t\t\t\t// in case of plain LinkageError (class already defined)\n-\t\t\t\t// or IllegalArgumentException (class in different package):\n-\t\t\t\t// fall through to traditional ClassLoader.defineClass below\n-\t\t\t\tt = ex;\n+\t\t\t\tif (ex instanceof LinkageError) {\n+\t\t\t\t\t// Could be a ClassLoader mismatch with the class pre-existing in a\n+\t\t\t\t\t// parent ClassLoader -> try loadClass before giving up completely.\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tc = contextClass.getClassLoader().loadClass(className);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (ClassNotFoundException cnfe) {\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (c == null) {\n+\t\t\t\t\t// in case of plain LinkageError (class already defined)\n+\t\t\t\t\t// or IllegalArgumentException (class in different package):\n+\t\t\t\t\t// fall through to traditional ClassLoader.defineClass below\n+\t\t\t\t\tt = ex;\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tthrow new CodeGenerationException(ex);",
    "output": "Try loadClass on LinkageError in case of same ClassLoader as well"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java b/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpEntityTests.java\n@@ -131,7 +131,7 @@ void mutateEmptyInstanceHeaders() {\n \t\tHttpHeaders headers = new HttpHeaders(HttpEntity.EMPTY.getHeaders());\n \t\theaders.add(\"Authorization\", \"Bearer some-token\");\n \n-\t\tassertThat(HttpEntity.EMPTY.getHeaders())\n+\t\tassertThat(HttpEntity.EMPTY.getHeaders().headerNames())\n \t\t\t\t.as(\"Headers of HttpEntity.EMPTY should remain empty\")\n \t\t\t\t.isEmpty();\n \t}",
    "output": "Add remaining change from merge"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/jsr330/SpringAtInjectTckTests.java b/spring-context/src/test/java/org/springframework/context/annotation/jsr330/SpringAtInjectTckTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/jsr330/SpringAtInjectTckTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/jsr330/SpringAtInjectTckTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -38,7 +38,8 @@\n  * @author Juergen Hoeller\n  * @since 3.0\n  */\n-class SpringAtInjectTckTests {\n+// WARNING: This class MUST be public, since it is based on JUnit 3.\n+public class SpringAtInjectTckTests {\n \n \t@SuppressWarnings(\"unchecked\")\n \tpublic static Test suite() {",
    "output": "Reinstate the @⁠Inject Technology Compatibility Kit (TCK) In commit 05ebca8677, the `public` modifier was removed from the SpringAtInjectTckTests class, which prevents it from being run as a JUnit 3 test class. To address that, this commit adds the missing `public` modifier as well as a a code comment to help prevent this from happening again. In addition, this commit updates spring-context.gradle to ensure that the JUnit Vintage test engine is always applied. However, that Gradle configuration is unfortunately ignored due to how our TestConventions class has been implemented. Thus, that issue will have to be addressed separately"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n@@ -126,7 +126,7 @@ public static boolean simpleMatch(String @Nullable [] patterns, @Nullable String\n \t/**\n \t * Variant of {@link #simpleMatch(String[], String)}  that ignores upper/lower case.\n \t */\n-\tpublic static boolean simpleMatchIgnoreCase(@Nullable String[] patterns, @Nullable String str) {\n+\tpublic static boolean simpleMatchIgnoreCase(String @Nullable [] patterns, @Nullable String str) {\n \t\tif (patterns != null) {\n \t\t\tfor (String pattern : patterns) {\n \t\t\t\tif (simpleMatch(pattern, str, true)) {",
    "output": "Fix Nullable declaration in PatternMatchUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -36,6 +36,7 @@\n import java.nio.file.FileSystems;\n import java.nio.file.FileVisitOption;\n import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.Enumeration;\n@@ -874,9 +875,9 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \t\t\t\trootEntryPath = (jarEntry != null ? jarEntry.getName() : \"\");\n \t\t\t\tcloseJarFile = !jarCon.getUseCaches();\n \t\t\t}\n-\t\t\tcatch (ZipException | FileNotFoundException ex) {\n+\t\t\tcatch (ZipException | FileNotFoundException | NoSuchFileException ex) {\n \t\t\t\t// Happens in case of a non-jar file or in case of a cached root directory\n-\t\t\t\t// without specific subdirectory present, respectively.\n+\t\t\t\t// without the specific subdirectory present, respectively.\n \t\t\t\treturn Collections.emptySet();\n \t\t\t}\n \t\t}\n@@ -1275,7 +1276,7 @@ private static String fixPath(String path) {\n \t\t}\n \n \t\t/**\n-\t\t * Return a alternative form of the resource, i.e. with or without a leading slash.\n+\t\t * Return an alternative form of the resource, i.e. with or without a leading slash.\n \t\t * @param path the file path (with or without a leading slash)\n \t\t * @return the alternative form or {@code null}\n \t\t */",
    "output": "Ignore NoSuchFileException from getJarFileas well"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1066,8 +1066,9 @@ protected void checkMergedBeanDefinition(RootBeanDefinition mbd, String beanName\n \t@Nullable\n \tprotected Boolean isCurrentThreadAllowedToHoldSingletonLock() {\n \t\tString mainThreadPrefix = this.mainThreadPrefix;\n-\t\tif (this.mainThreadPrefix != null) {\n-\t\t\t// We only differentiate in the preInstantiateSingletons phase.\n+\t\tif (mainThreadPrefix != null) {\n+\t\t\t// We only differentiate in the preInstantiateSingletons phase, using\n+\t\t\t// the volatile mainThreadPrefix field as an indicator for that phase.\n \n \t\t\tPreInstantiation preInstantiation = this.preInstantiationThread.get();\n \t\t\tif (preInstantiation != null) {\n@@ -1087,7 +1088,7 @@ protected Boolean isCurrentThreadAllowedToHoldSingletonLock() {\n \t\t\t}\n \t\t\telse if (this.strictLocking == null) {\n \t\t\t\t// No explicit locking configuration -> infer appropriate locking.\n-\t\t\t\tif (mainThreadPrefix != null && !getThreadNamePrefix().equals(mainThreadPrefix)) {\n+\t\t\t\tif (!getThreadNamePrefix().equals(mainThreadPrefix)) {\n \t\t\t\t\t// An unmanaged thread (assumed to be application-internal) with lenient locking,\n \t\t\t\t\t// and not part of the same thread pool that provided the main bootstrap thread\n \t\t\t\t\t// (excluding scenarios where we are hit by multiple external bootstrap threads).",
    "output": "Consistently use local copy of volatile mainThreadPrefix field"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1048,7 +1048,7 @@ protected void checkMergedBeanDefinition(RootBeanDefinition mbd, String beanName\n \t@Override\n \tprotected @Nullable Boolean isCurrentThreadAllowedToHoldSingletonLock() {\n \t\tString mainThreadPrefix = this.mainThreadPrefix;\n-\t\tif (this.mainThreadPrefix != null) {\n+\t\tif (mainThreadPrefix != null) {\n \t\t\t// We only differentiate in the preInstantiateSingletons phase.\n \n \t\t\tPreInstantiation preInstantiation = this.preInstantiationThread.get();\n@@ -1069,7 +1069,7 @@ protected void checkMergedBeanDefinition(RootBeanDefinition mbd, String beanName\n \t\t\t}\n \t\t\telse if (this.strictLocking == null) {\n \t\t\t\t// No explicit locking configuration -> infer appropriate locking.\n-\t\t\t\tif (mainThreadPrefix != null && !getThreadNamePrefix().equals(mainThreadPrefix)) {\n+\t\t\t\tif (!getThreadNamePrefix().equals(mainThreadPrefix)) {\n \t\t\t\t\t// An unmanaged thread (assumed to be application-internal) with lenient locking,\n \t\t\t\t\t// and not part of the same thread pool that provided the main bootstrap thread\n \t\t\t\t\t// (excluding scenarios where we are hit by multiple external bootstrap threads).",
    "output": "Improve handling of `mainThreadPrefix` and remove redundant null check"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n@@ -361,16 +361,12 @@ private static boolean isOverride(Method rootMethod, Method candidateMethod) {\n \t}\n \n \tprivate static boolean hasSameParameterTypes(Method rootMethod, Method candidateMethod) {\n-\t\tif (candidateMethod.getParameterCount() != rootMethod.getParameterCount()) {\n-\t\t\treturn false;\n-\t\t}\n \t\tClass<?>[] rootParameterTypes = rootMethod.getParameterTypes();\n \t\tClass<?>[] candidateParameterTypes = candidateMethod.getParameterTypes();\n \t\tif (Arrays.equals(candidateParameterTypes, rootParameterTypes)) {\n \t\t\treturn true;\n \t\t}\n-\t\treturn hasSameGenericTypeParameters(rootMethod, candidateMethod,\n-\t\t\t\trootParameterTypes);\n+\t\treturn hasSameGenericTypeParameters(rootMethod, candidateMethod, rootParameterTypes);\n \t}\n \n \tprivate static boolean hasSameGenericTypeParameters(",
    "output": "Remove redundant parameter count check in AnnotationsScanner.hasSameParameterTypesThe redundancy was reported by @TAKETODAY"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceGroupConfigurer.java b/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceGroupConfigurer.java\n--- a/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceGroupConfigurer.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceGroupConfigurer.java\n@@ -20,6 +20,7 @@\n import java.util.function.Consumer;\n import java.util.function.Predicate;\n \n+import org.springframework.core.Ordered;\n import org.springframework.web.service.invoker.HttpServiceProxyFactory;\n \n /**\n@@ -31,13 +32,22 @@\n  * @param <CB> the type of client builder, i.e. {@code RestClient} or {@code WebClient} builder.\n  */\n @FunctionalInterface\n-public interface HttpServiceGroupConfigurer<CB> {\n+public interface HttpServiceGroupConfigurer<CB> extends Ordered {\n \n \t/**\n \t * Configure the underlying infrastructure for all group.\n \t */\n \tvoid configureGroups(Groups<CB> groups);\n \n+\t/**\n+\t * Determine the order of this configurer relative to others.\n+\t * <p>By default, this is {@link Ordered#LOWEST_PRECEDENCE}.\n+\t */\n+\t@Override\n+\tdefault int getOrder() {\n+\t\treturn Ordered.LOWEST_PRECEDENCE;\n+\t}\n+\n \n \t/**\n \t * Contract to help iterate and configure the set of groups.",
    "output": "HttpServiceGroupConfigurer extends Ordered"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -450,7 +450,7 @@ private Object execute(CacheOperationInvoker invoker, Method method, CacheOperat\n \t\treturn cacheHit;\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n \t@Nullable\n \tprivate Object executeSynchronized(CacheOperationInvoker invoker, Method method, CacheOperationContexts contexts) {\n \t\tCacheOperationContext context = contexts.get(CacheableOperation.class).iterator().next();",
    "output": "Suppress recently introduced warning"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientObservationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientObservationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientObservationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientObservationTests.java\n@@ -53,7 +53,6 @@\n  */\n class WebClientObservationTests {\n \n-\n \tprivate final TestObservationRegistry observationRegistry = TestObservationRegistry.create();\n \n \tprivate final ExchangeFunction exchangeFunction = mock();\n@@ -63,6 +62,7 @@ class WebClientObservationTests {\n \tprivate WebClient.Builder builder;\n \n \t@BeforeEach\n+\t@SuppressWarnings(\"unchecked\")\n \tvoid setup() {\n \t\tHooks.enableAutomaticContextPropagation();\n \t\tClientResponse mockResponse = mock();",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SpringProperties.java b/spring-core/src/main/java/org/springframework/core/SpringProperties.java\n--- a/spring-core/src/main/java/org/springframework/core/SpringProperties.java\n+++ b/spring-core/src/main/java/org/springframework/core/SpringProperties.java\n@@ -150,8 +150,7 @@ public static boolean getFlag(String key) {\n \t * {@code null} if it is not set at all\n \t * @since 6.2.6\n \t */\n-\t@Nullable\n-\tpublic static Boolean checkFlag(String key) {\n+\tpublic static @Nullable Boolean checkFlag(String key) {\n \t\tString flag = getProperty(key);\n \t\treturn (flag != null ? Boolean.valueOf(flag) : null);\n \t}",
    "output": "Align JSpecify @Nullable annotation"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.22.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.23.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Mockito 5.17 and Checkstyle 10.23"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistry.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistry.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistry.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistry.java\n@@ -23,9 +23,9 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.jspecify.annotations.Nullable;\n \n import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n-import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n \n /**\n@@ -114,8 +114,7 @@ Object wrapBeanIfNecessary(Object bean, String beanName) {\n \t * @since 6.2.6\n \t * @see #registerBeanOverrideHandler(BeanOverrideHandler, String)\n \t */\n-\t@Nullable\n-\tObject getBeanForHandler(BeanOverrideHandler handler, Class<?> requiredType) {\n+\t@Nullable Object getBeanForHandler(BeanOverrideHandler handler, Class<?> requiredType) {\n \t\tString beanName = this.handlerToBeanNameMap.get(handler);\n \t\tif (beanName != null) {\n \t\t\treturn this.beanFactory.getBean(beanName, requiredType);",
    "output": "Switch to JSpecify @⁠Nullable annotation on main"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java b/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedOperationParameters.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -39,6 +39,6 @@\n @Documented\n public @interface ManagedOperationParameters {\n \n-\tManagedOperationParameter[] value() default {};\n+\tManagedOperationParameter[] value();\n \n }",
    "output": "Remove default value for @⁠ManagedOperationParameters container"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java b/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java\n--- a/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/registry/ImportHttpServices.java\n@@ -108,7 +108,7 @@\n \t@Import(AnnotationHttpServiceRegistrar.class)\n \t@interface Container {\n \n-\t\tImportHttpServices[] value() default {};\n+\t\tImportHttpServices[] value();\n \t}\n \n }",
    "output": "Remove default value for Container annotation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java b/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java\n--- a/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/registry/HttpServiceProxyRegistryFactoryBean.java\n@@ -180,10 +180,6 @@ public ClientType clientType() {\n \t\t\treturn this.declaredGroup.clientType();\n \t\t}\n \n-\t\tpublic Class<? extends HttpServiceGroupConfigurer<?>> getConfigurerType() {\n-\t\t\treturn this.groupAdapter.getConfigurerType();\n-\t\t}\n-\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tpublic <CB> void apply(\n \t\t\t\tBiConsumer<HttpServiceGroup, CB> clientConfigurer,",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.21.4\");\n+\t\t\tcheckstyle.setToolVersion(\"10.22.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Jetty 12.0.18, Apache HttpClient 5.4.3, Protobuf 4.30.2, Checkstyle 10.22"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -248,8 +248,7 @@ private Executor getBootstrapExecutor() {\n \t\treturn executor;\n \t}\n \n-\t@Nullable\n-\tprivate Long determineConcurrentStartup(int phase) {\n+\tprivate @Nullable Long determineConcurrentStartup(int phase) {\n \t\treturn this.concurrentStartupForPhases.get(phase);\n \t}\n ",
    "output": "Align JSpecify @Nullable annotation"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/MethodInvocationException.java b/spring-beans/src/main/java/org/springframework/beans/MethodInvocationException.java\n--- a/spring-beans/src/main/java/org/springframework/beans/MethodInvocationException.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/MethodInvocationException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,6 +25,7 @@\n  * analogous to an InvocationTargetException.\n  *\n  * @author Rod Johnson\n+ * @author Juergen Hoeller\n  */\n @SuppressWarnings(\"serial\")\n public class MethodInvocationException extends PropertyAccessException {\n@@ -41,7 +42,9 @@ public class MethodInvocationException extends PropertyAccessException {\n \t * @param cause the Throwable raised by the invoked method\n \t */\n \tpublic MethodInvocationException(PropertyChangeEvent propertyChangeEvent, @Nullable Throwable cause) {\n-\t\tsuper(propertyChangeEvent, \"Property '\" + propertyChangeEvent.getPropertyName() + \"' threw exception\", cause);\n+\t\tsuper(propertyChangeEvent,\n+\t\t\t\t\"Property '\" + propertyChangeEvent.getPropertyName() + \"' threw exception: \" + cause,\n+\t\t\t\tcause);\n \t}\n \n \t@Override",
    "output": "Include cause in MethodInvocationException message"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java b/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java\n--- a/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java\n+++ b/spring-core/src/test/java/org/springframework/SpringCoreTestSuite.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,11 @@\n  * @author Sam Brannen\n  */\n @Suite\n-@SelectPackages({\"org.springframework.core\", \"org.springframework.util\"})\n+@SelectPackages({\n+\t\"org.springframework.aot\",\n+\t\"org.springframework.core\",\n+\t\"org.springframework.util\"\n+})\n @IncludeClassNamePatterns(\".*Tests?$\")\n class SpringCoreTestSuite {\n }",
    "output": "Upgrade SpringCoreTestSuite to include AOT"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -71,6 +71,9 @@\n  */\n final class DefaultWebClient implements WebClient {\n \n+\t// Copy of CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE value to avoid compilation errors in Eclipse\n+\tprivate static final String COROUTINE_CONTEXT_ATTRIBUTE = \"org.springframework.web.reactive.function.client.CoExchangeFilterFunction.context\";\n+\n \tprivate static final String URI_TEMPLATE_ATTRIBUTE = WebClient.class.getName() + \".uriTemplate\";\n \n \tprivate static final Mono<ClientResponse> NO_HTTP_CLIENT_RESPONSE_ERROR = Mono.error(\n@@ -430,6 +433,8 @@ private Mono<ClientResponse> exchange() {\n \t\t\t\tif (filterFunctions != null) {\n \t\t\t\t\tfilterFunction = filterFunctions.andThen(filterFunction);\n \t\t\t\t}\n+\t\t\t\tcontextView.getOrEmpty(COROUTINE_CONTEXT_ATTRIBUTE)\n+\t\t\t\t\t\t.ifPresent(context -> requestBuilder.attribute(COROUTINE_CONTEXT_ATTRIBUTE, context));\n \t\t\t\tClientRequest request = requestBuilder.build();\n \t\t\t\tobservationContext.setUriTemplate((String) request.attribute(URI_TEMPLATE_ATTRIBUTE).orElse(null));\n \t\t\t\tobservationContext.setRequest(request);",
    "output": "Propagate CoroutineContext to WebClient filter This commit introduces a new ResponseSpec.awaitEntityOrNullextension function to replace ResponseSpec.toEntity(...).awaitFirstOrNulland pass the CoroutineContext to the CoExchangeFilterFunction. CoroutineContext propagation is implemented via ReactorContext and ClientRequest attribute"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -289,9 +289,15 @@ private void doValidateClass(Class<?> proxySuperClass, @Nullable ClassLoader pro\n \t\t\t\tint mod = method.getModifiers();\n \t\t\t\tif (!Modifier.isStatic(mod) && !Modifier.isPrivate(mod)) {\n \t\t\t\t\tif (Modifier.isFinal(mod)) {\n-\t\t\t\t\t\tif (logger.isWarnEnabled() && implementsInterface(method, ifcs)) {\n-\t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n-\t\t\t\t\t\t\t\t\t\"it is marked as final, consider using interface-based JDK proxies instead.\");\n+\t\t\t\t\t\tif (logger.isWarnEnabled() && Modifier.isPublic(mod)) {\n+\t\t\t\t\t\t\tif (implementsInterface(method, ifcs)) {\n+\t\t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n+\t\t\t\t\t\t\t\t\t\t\"it is marked as final, consider using interface-based JDK proxies instead.\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\tlogger.warn(\"Public final method [\" + method + \"] cannot get proxied via CGLIB, \" +\n+\t\t\t\t\t\t\t\t\t\t\"consider removing the final marker or using interface-based JDK proxies.\");\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\t\tlogger.debug(\"Final method [\" + method + \"] cannot get proxied via CGLIB: \" +",
    "output": "Log public final method at warn level for non-interface case as well"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -138,7 +138,7 @@ private String getNextSuffix() {\n \t\tString className = \"org/springframework/expression/spel/generated/CompiledExpression\" + getNextSuffix();\n \t\tString evaluationContextClass = \"org/springframework/expression/EvaluationContext\";\n \t\tClassWriter cw = new ExpressionClassWriter();\n-\t\tcw.visit(V1_8, ACC_PUBLIC, className, null, \"org/springframework/expression/spel/CompiledExpression\", null);\n+\t\tcw.visit(V17, ACC_PUBLIC, className, null, \"org/springframework/expression/spel/CompiledExpression\", null);\n \n \t\t// Create default constructor\n \t\tMethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);",
    "output": "Generate compiled SpEL expressions using Java 17 byte code level"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -624,11 +624,12 @@ public boolean canRead(EvaluationContext context, @Nullable Object target, Strin\n \t\t\t}\n \n \t\t\tif (this.member instanceof Method method) {\n-\t\t\t\tString getterName = \"get\" + StringUtils.capitalize(name);\n+\t\t\t\tString capitalizedName = StringUtils.capitalize(name);\n+\t\t\t\tString getterName = \"get\" + capitalizedName;\n \t\t\t\tif (getterName.equals(method.getName())) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\tgetterName = \"is\" + StringUtils.capitalize(name);\n+\t\t\t\tgetterName = \"is\" + capitalizedName;\n \t\t\t\tif (getterName.equals(method.getName())) {\n \t\t\t\t\treturn true;\n \t\t\t\t}",
    "output": "Cache capitalized name in SpEL's ReflectivePropertyAccessor"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -259,6 +259,12 @@ public B getBeanInstance() {\n \t\t\treturn this.beanInstance;\n \t\t}\n \n+\t\t@Override\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tpublic Class<B> getBeanClass() {\n+\t\t\treturn (Class<B>) this.beanInstance.getClass();\n+\t\t}\n+\n \t\tpublic void destroyIfNecessary() {\n \t\t\tif (this.destructionCallback != null) {\n \t\t\t\tthis.destructionCallback.accept(this.beanInstance);",
    "output": "Upgrade to Hibernate ORM 7.0.0.Beta4 Includes Hamcrest 3.0"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -39,6 +39,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.jspecify.annotations.Nullable;\n \n+import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.BeanDefinitionStoreException;\n import org.springframework.beans.factory.BeanRegistrar;\n import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n@@ -600,9 +601,7 @@ private void processImports(ConfigurationClass configClass, SourceClass currentS\n \t\t\t\t\t}\n \t\t\t\t\telse if (candidate.isAssignable(BeanRegistrar.class)) {\n \t\t\t\t\t\tClass<?> candidateClass = candidate.loadClass();\n-\t\t\t\t\t\tBeanRegistrar registrar =\n-\t\t\t\t\t\t\t\tParserStrategyUtils.instantiateClass(candidateClass, BeanRegistrar.class,\n-\t\t\t\t\t\t\t\t\t\tthis.environment, this.resourceLoader, this.registry);\n+\t\t\t\t\t\tBeanRegistrar registrar = (BeanRegistrar) BeanUtils.instantiateClass(candidateClass);\n \t\t\t\t\t\tconfigClass.addBeanRegistrar(registrar);\n \t\t\t\t\t}\n \t\t\t\t\telse if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) {",
    "output": "Remove support for Aware interfaces in BeanRegistrar"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.21.2\");\n+\t\t\tcheckstyle.setToolVersion(\"10.21.4\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.21.4"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n@@ -500,6 +500,7 @@ void applyToWhenHasPostConstructAnnotationPostProcessed() {\n \t\t\t});\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate void compile(BiConsumer<Consumer<GenericApplicationContext>, Compiled> result) {\n \t\t\tMethodReference methodReference = beanFactoryInitializationCode.getInitializers().get(0);\n \t\t\tbeanFactoryInitializationCode.getTypeBuilder().set(type -> {",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java\n@@ -582,6 +582,7 @@ void stringListToListOfSubclassOfUnboundGenericClass() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tvoid stringToListOfMapConverterWithFallbackMatch() {\n \t\tconversionService.addConverter(new StringToListOfMapConverter());\n ",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java\n@@ -473,7 +473,7 @@ interface AbstractType {\n \n \tpublic static class InheritsDefaultMethod implements InterfaceWithDefaultMethod<InheritsDefaultMethod.ConcreteType> {\n \n-\t\tstatic class ConcreteType implements AbstractType {\n+\t\tstatic class ConcreteType implements InterfaceWithDefaultMethod.AbstractType {\n \t\t}\n \t}\n ",
    "output": "Ensure GenericTypeResolverTests compiles with Eclipse compiler"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotContextLoaderRuntimeHintsTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotContextLoaderRuntimeHintsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotContextLoaderRuntimeHintsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotContextLoaderRuntimeHintsTests.java\n@@ -49,7 +49,7 @@ void aotContextLoaderCanRegisterRuntimeHints() {\n \n \t\tgenerator.processAheadOfTime(Stream.of(TestCase.class));\n \n-\t\tassertThat(reflection().onMethod(ConfigWithMain.class, \"main\").invoke()).accepts(runtimeHints);\n+\t\tassertThat(reflection().onMethodInvocation(ConfigWithMain.class, \"main\")).accepts(runtimeHints);\n \t}\n \n ",
    "output": "Stop using deprecated ReflectionHintsPredicates.onMethodon main"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlQuery.java b/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlQuery.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlQuery.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/object/SqlQuery.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -84,14 +84,18 @@ public SqlQuery(DataSource ds, String sql) {\n \t * Set the number of rows expected.\n \t * <p>This can be used to ensure efficient storage of results. The\n \t * default behavior is not to expect any specific number of rows.\n+\t * @deprecated since 6.2.4 with no replacement; it's for internal use only\n \t */\n+\t@Deprecated(since = \"6.2.4\", forRemoval = true)\n \tpublic void setRowsExpected(int rowsExpected) {\n \t\tthis.rowsExpected = rowsExpected;\n \t}\n \n \t/**\n \t * Get the number of rows expected.\n+\t * @deprecated since 6.2.4 with no replacement; it's for internal use only\n \t */\n+\t@Deprecated(since = \"6.2.4\", forRemoval = true)\n \tpublic int getRowsExpected() {\n \t\treturn this.rowsExpected;\n \t}",
    "output": "Deprecate unused \"rowsExpected\" property of SqlQuery for removal"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n@@ -81,7 +81,10 @@ else if (code == HttpURLConnection.HTTP_NOT_FOUND) {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tif (con.getContentLengthLong() > 0) {\n+\t\t\t\t// Check content-length entry but not for JarURLConnection where\n+\t\t\t\t// this would open the jar file but effectively never close it ->\n+\t\t\t\t// for jar entries, always fall back to stream existence instead.\n+\t\t\t\tif (!(con instanceof JarURLConnection) && con.getContentLengthLong() > 0) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\tif (httpCon != null) {",
    "output": "Avoid JarURLConnection resource leak in AbstractFileResolvingResource.exists"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -64,7 +64,7 @@ private static void configureNoHttpPlugin(Project project) {\n \t\tNoHttpExtension noHttp = project.getExtensions().getByType(NoHttpExtension.class);\n \t\tnoHttp.setAllowlistFile(project.file(\"src/nohttp/allowlist.lines\"));\n \t\tnoHttp.getSource().exclude(\"**/test-output/**\", \"**/.settings/**\",\n-\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\", \"**/node_modules/**\");\n+\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\", \"**/node_modules/**\", \"buildSrc/build/**\");\n \t\tList<String> buildFolders = List.of(\"bin\", \"build\", \"out\");\n \t\tproject.allprojects(subproject -> {\n \t\t\tPath rootPath = project.getRootDir().toPath();",
    "output": "Ignore nohttp check on buildSrc/build"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoResetTestExecutionListener.java\n@@ -88,7 +88,7 @@ public class MockitoResetTestExecutionListener extends AbstractTestExecutionList\n \t */\n \t@Override\n \tpublic int getOrder() {\n-\t\treturn Ordered.LOWEST_PRECEDENCE - 100;\n+\t\treturn ORDER;\n \t}\n \n \t@Override",
    "output": "Use ORDER constant in MockitoResetTestExecutionListener"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -77,11 +77,20 @@ public int getOrder() {\n \t/**\n \t * Set the UrlPathHelper to configure on the {@code SimpleUrlHandlerMapping}\n \t * used to map handshake requests.\n+\t * @deprecated without a replacement since effectively the UrlPathHelper is\n+\t * no longer used with {@code PathPatternParser} used by the default in\n+\t * all extensions of {@code AbstractHandlerMapping}. To be removed in 7.0.\n \t */\n+\t@Deprecated(since = \"6.2.4\", forRemoval = true)\n \tpublic void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {\n \t\tthis.urlPathHelper = urlPathHelper;\n \t}\n \n+\t/**\n+\t * Return the configured {@code UrlPathHelper}.\n+\t * @deprecated without a replacement; see notice on {@link #setUrlPathHelper}\n+\t */\n+\t@Deprecated(since = \"6.2.4\", forRemoval = true)\n \t@Nullable\n \tpublic UrlPathHelper getUrlPathHelper() {\n \t\treturn this.urlPathHelper;",
    "output": "Deprecate UrlPathHelper in ServletWebSocketHandlerRegistry"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/task/TaskRejectedException.java b/spring-core/src/main/java/org/springframework/core/task/TaskRejectedException.java\n--- a/spring-core/src/main/java/org/springframework/core/task/TaskRejectedException.java\n+++ b/spring-core/src/main/java/org/springframework/core/task/TaskRejectedException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -69,7 +69,13 @@ public TaskRejectedException(Executor executor, Object task, RejectedExecutionEx\n \n \tprivate static String executorDescription(Executor executor) {\n \t\tif (executor instanceof ExecutorService executorService) {\n-\t\t\treturn \"ExecutorService in \" + (executorService.isShutdown() ? \"shutdown\" : \"active\") + \" state\";\n+\t\t\ttry {\n+\t\t\t\treturn \"ExecutorService in \" + (executorService.isShutdown() ? \"shutdown\" : \"active\") + \" state\";\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// UnsupportedOperationException/IllegalStateException from ManagedExecutorService.isShutdown()\n+\t\t\t\t// Falling back to toString() below.\n+\t\t\t}\n \t\t}\n \t\treturn executor.toString();\n \t}",
    "output": "Defensively call isShutdown method for executor description"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n@@ -123,13 +123,17 @@ public Predicate getUniqueNamePredicate() {\n \t\t}\n \n \t\tpublic Object get(AbstractClassGenerator gen, boolean useCache) {\n-\t\t\tif (!useCache) {\n-\t\t\t\treturn gen.generate(ClassLoaderData.this);\n-\t\t\t}\n-\t\t\telse {\n+\t\t\t// SPRING PATCH BEGIN\n+\t\t\tObject value = null;\n+\t\t\tif (useCache) {\n \t\t\t\tObject cachedValue = generatedClasses.get(gen);\n-\t\t\t\treturn gen.unwrapCachedValue(cachedValue);\n+\t\t\t\tvalue = gen.unwrapCachedValue(cachedValue);\n \t\t\t}\n+\t\t\tif (value == null) {  // fallback when cached WeakReference returns null\n+\t\t\t\tvalue = gen.generate(ClassLoaderData.this);\n+\t\t\t}\n+\t\t\treturn value;\n+\t\t\t// SPRING PATCH END\n \t\t}\n \t}\n ",
    "output": "Lenient fallback when cached WeakReference returns null"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -816,17 +816,21 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \t\t\t\t// Clean root entry path to match jar entries format without \"!\" separators\n \t\t\t\trootEntryPath = rootEntryPath.replace(ResourceUtils.JAR_URL_SEPARATOR, \"/\");\n \t\t\t\t// Search sorted entries from first entry with rootEntryPath prefix\n+\t\t\t\tboolean rootEntryPathFound = false;\n \t\t\t\tfor (String entryPath : entriesCache.tailSet(rootEntryPath, false)) {\n \t\t\t\t\tif (!entryPath.startsWith(rootEntryPath)) {\n \t\t\t\t\t\t// We are beyond the potential matches in the current TreeSet.\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n+\t\t\t\t\trootEntryPathFound = true;\n \t\t\t\t\tString relativePath = entryPath.substring(rootEntryPath.length());\n \t\t\t\t\tif (getPathMatcher().match(subPattern, relativePath)) {\n \t\t\t\t\t\tresult.add(rootDirResource.createRelative(relativePath));\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\treturn result;\n+\t\t\t\tif (rootEntryPathFound) {\n+\t\t\t\t\treturn result;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "Ignore entries cache if no matching root entry path found"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n@@ -100,6 +100,7 @@ public static Flux<Token> parse(Flux<DataBuffer> buffers, byte[] boundary, int m\n \t\treturn Flux.create(sink -> {\n \t\t\tMultipartParser parser = new MultipartParser(sink, boundary, maxHeadersSize, headersCharset);\n \t\t\tsink.onCancel(parser::onSinkCancel);\n+\t\t\tsink.onRequest(l -> parser.requestBuffer());\n \t\t\tbuffers.subscribe(parser);\n \t\t});\n \t}",
    "output": "Prevent hung uploads in MultipartParser This commit adds an onRequesthook to request more data from the source in order to avoid hung uploads in MultipartParser"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureCheck.java b/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureCheck.java\n--- a/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureCheck.java\n+++ b/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureCheck.java\n@@ -44,7 +44,12 @@\n import org.gradle.api.tasks.SkipWhenEmpty;\n import org.gradle.api.tasks.TaskAction;\n \n-import static org.springframework.build.architecture.ArchitectureRules.*;\n+import static org.springframework.build.architecture.ArchitectureRules.allPackagesShouldBeFreeOfTangles;\n+import static org.springframework.build.architecture.ArchitectureRules.classesShouldNotImportForbiddenTypes;\n+import static org.springframework.build.architecture.ArchitectureRules.javaClassesShouldNotImportKotlinAnnotations;\n+import static org.springframework.build.architecture.ArchitectureRules.noClassesShouldCallStringToLowerCaseWithoutLocale;\n+import static org.springframework.build.architecture.ArchitectureRules.noClassesShouldCallStringToUpperCaseWithoutLocale;\n+import static org.springframework.build.architecture.ArchitectureRules.packageInfoShouldBeNullMarked;\n \n /**\n  * {@link Task} that checks for architecture problems.",
    "output": "Sync checkstyle on buildSrc"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n@@ -168,9 +168,9 @@ private Class<?> createClass(Enhancer enhancer, boolean fallback) {\n \t\ttry {\n \t\t\tsubclass = enhancer.createClass();\n \t\t}\n-\t\tcatch (CodeGenerationException ex) {\n+\t\tcatch (Throwable ex) {\n \t\t\tif (!fallback) {\n-\t\t\t\tthrow ex;\n+\t\t\t\tthrow (ex instanceof CodeGenerationException cgex ? cgex : new CodeGenerationException(ex));\n \t\t\t}\n \t\t\t// Possibly a package-visible @Bean method declaration not accessible\n \t\t\t// in the given ClassLoader -> retry with original ClassLoader",
    "output": "Apply fallback in case of any exception coming out of createClass"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java b/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java\n--- a/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/integration/resthttpinterface/customresolver/CustomHttpServiceArgumentResolver.java\n@@ -29,7 +29,7 @@\n public class CustomHttpServiceArgumentResolver {\n \n \t// tag::httpinterface[]\n-\tinterface RepositoryService {\n+\tpublic interface RepositoryService {\n \n \t\t@GetExchange(\"/repos/search\")\n \t\tList<Repository> searchRepository(Search search);",
    "output": "Use public interface for HTTP Interface documentation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -843,8 +843,9 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \t\t\t\trootEntryPath = (jarEntry != null ? jarEntry.getName() : \"\");\n \t\t\t\tcloseJarFile = !jarCon.getUseCaches();\n \t\t\t}\n-\t\t\tcatch (FileNotFoundException ex) {\n-\t\t\t\t// Happens in case of cached root directory without specific subdirectory present.\n+\t\t\tcatch (ZipException | FileNotFoundException ex) {\n+\t\t\t\t// Happens in case of a non-jar file or in case of a cached root directory\n+\t\t\t\t// without specific subdirectory present, respectively.\n \t\t\t\treturn Collections.emptySet();\n \t\t\t}\n \t\t}",
    "output": "Consistently ignore non-jar files in classpath"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n--- a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n+++ b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.http;\n \n+import java.io.Serializable;\n import java.net.URI;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -49,7 +50,9 @@\n  * @see org.springframework.web.ErrorResponse\n  * @see org.springframework.web.ErrorResponseException\n  */\n-public class ProblemDetail {\n+public class ProblemDetail implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 3307761915842206538L;\n \n \tprivate static final URI BLANK_TYPE = URI.create(\"about:blank\");\n ",
    "output": "Make ProblemDetail Serializable This commit makes the `ProblemDetail` type implement `Serializable` in order to be serialized and shared in distributed systems"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassEnhancerTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassEnhancerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassEnhancerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassEnhancerTests.java\n@@ -23,11 +23,11 @@\n import java.security.ProtectionDomain;\n import java.security.SecureClassLoader;\n \n+import org.jspecify.annotations.Nullable;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.OverridingClassLoader;\n import org.springframework.core.SmartClassLoader;\n-import org.springframework.lang.Nullable;\n import org.springframework.util.StreamUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;",
    "output": "Consistently use @Nullable annotation from JSpecify"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.21.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.21.2\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Netty 4.1.118 and Checkstyle 10.21.2"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java\n--- a/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerErrorTests.java\n@@ -162,11 +162,10 @@ void startCallableProcessingDisconnectedClient() throws Exception {\n \t\tAsyncEvent event = new AsyncEvent(new MockAsyncContext(this.servletRequest, this.servletResponse), ex);\n \t\tthis.asyncWebRequest.onError(event);\n \n-\t\tMockAsyncContext asyncContext = (MockAsyncContext) this.servletRequest.getAsyncContext();\n \t\tassertThat(this.asyncManager.hasConcurrentResult()).isTrue();\n \t\tassertThat(this.asyncManager.getConcurrentResult())\n-\t\t\t\t.as(\"Disconnected client error not wrapped AsyncRequestNotUsableException\")\n-\t\t\t\t.isOfAnyClassIn(AsyncRequestNotUsableException.class);\n+\t\t\t\t.as(\"Disconnected client error not wrapped in AsyncRequestNotUsableException\")\n+\t\t\t\t.isExactlyInstanceOf(AsyncRequestNotUsableException.class);\n \t}\n \n \t@Test\n@@ -287,8 +286,8 @@ void startDeferredResultProcessingDisconnectedClient() throws Exception {\n \n \t\tassertThat(this.asyncManager.hasConcurrentResult()).isTrue();\n \t\tassertThat(deferredResult.getResult())\n-\t\t\t\t.as(\"Disconnected client error not wrapped AsyncRequestNotUsableException\")\n-\t\t\t\t.isOfAnyClassIn(AsyncRequestNotUsableException.class);\n+\t\t\t\t.as(\"Disconnected client error not wrapped in AsyncRequestNotUsableException\")\n+\t\t\t\t.isExactlyInstanceOf(AsyncRequestNotUsableException.class);\n \t}\n \n ",
    "output": "Remove unused code and improve assertion"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -478,7 +478,7 @@ public static <A extends Annotation> Set<A> getMergedRepeatableAnnotations(\n \t * attributes from all annotations found, or {@code null} if not found\n \t * @see #getAllAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\n \t */\n-\tpublic static MultiValueMap<String, @Nullable Object> getAllAnnotationAttributes(\n+\tpublic static @Nullable MultiValueMap<String, @Nullable Object> getAllAnnotationAttributes(\n \t\t\tAnnotatedElement element, String annotationName) {\n \n \t\treturn getAllAnnotationAttributes(element, annotationName, false, false);\n@@ -502,7 +502,7 @@ public static <A extends Annotation> Set<A> getMergedRepeatableAnnotations(\n \t * @return a {@link MultiValueMap} keyed by attribute name, containing the annotation\n \t * attributes from all annotations found, or {@code null} if not found\n \t */\n-\tpublic static MultiValueMap<String, @Nullable Object> getAllAnnotationAttributes(AnnotatedElement element,\n+\tpublic static @Nullable MultiValueMap<String, @Nullable Object> getAllAnnotationAttributes(AnnotatedElement element,\n \t\t\tString annotationName, final boolean classValuesAsString, final boolean nestedAnnotationsAsMap) {\n \n \t\tAdapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);",
    "output": "Restore @⁠Nullable on AnnotatedElementUtils.getAllAnnotationAttributes(...)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/DataBinder.java b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n--- a/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n@@ -1137,7 +1137,8 @@ private static SortedSet<Integer> getIndexes(String paramPath, ValueResolver val\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tprivate <V> @Nullable V createIndexedValue(\n+\t@Nullable\n+\tprivate <V> V createIndexedValue(\n \t\t\tString paramPath, Class<?> paramType, ResolvableType elementType,\n \t\t\tString indexedPath, ValueResolver valueResolver) {\n ",
    "output": "Fix @⁠Nullable declaration in DataBinder on 6.2.x"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java b/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java\n--- a/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java\n+++ b/spring-test/src/test/java/org/springframework/test/mockito/MockitoAssertions.java\n@@ -42,7 +42,7 @@ public static void assertIsNotMock(Object obj) {\n \t}\n \n \tpublic static void assertIsNotMock(Object obj, String message) {\n-\t\tassertThat(isSpy(obj)).as(\"%s is a Mockito mock\", message).isFalse();\n+\t\tassertThat(isMock(obj)).as(\"%s is a Mockito mock\", message).isFalse();\n \t}\n \n \tpublic static void assertIsSpy(Object obj) {",
    "output": "Fix copy-n-paste error"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedMethod.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedMethod.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedMethod.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedMethod.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -214,8 +214,8 @@ private boolean isOverrideFor(Method candidate) {\n \n \t@Override\n \tpublic boolean equals(@Nullable Object other) {\n-\t\treturn (this == other || (other != null && getClass() == other.getClass() &&\n-\t\t\t\tthis.method.equals(((AnnotatedMethod) other).method)));\n+\t\treturn (this == other || (other instanceof AnnotatedMethod otherHandlerMethod &&\n+\t\t\t\tthis.method.equals(otherHandlerMethod.method)));\n \t}\n \n \t@Override",
    "output": "Align AnnotatedMethod#equals and #hashcode"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -455,18 +455,7 @@ public HttpHeaders() {\n \t */\n \tpublic HttpHeaders(MultiValueMap<String, String> headers) {\n \t\tAssert.notNull(headers, \"MultiValueMap must not be null\");\n-\t\tif (headers == EMPTY) {\n-\t\t\tthis.headers = CollectionUtils.toMultiValueMap(new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH));\n-\t\t}\n-\t\telse if (headers instanceof HttpHeaders httpHeaders) {\n-\t\t\twhile (httpHeaders.headers instanceof HttpHeaders wrapped) {\n-\t\t\t\thttpHeaders = wrapped;\n-\t\t\t}\n-\t\t\tthis.headers = httpHeaders.headers;\n-\t\t}\n-\t\telse {\n-\t\t\tthis.headers = headers;\n-\t\t}\n+\t\tthis.headers = headers;\n \t}\n \n \t/**",
    "output": "Simplify HttpHeaders constructor As of , `HttpHeaders` does not implement the `MultiValueMap` contract anymore, so we can take this opportunity to simplify one of the constructors to not consider that the argument could be an `HttpHeaders` instance. This case is already covered by the other constructor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n@@ -360,7 +360,7 @@ protected Class generate(ClassLoaderData data) {\n \t\t\t// SPRING PATCH BEGIN\n \t\t\tif (inNativeImage) {\n \t\t\t\tthrow new UnsupportedOperationException(\"CGLIB runtime enhancement not supported on native image. \" +\n-\t\t\t\t\t\t\"Make sure to enable Spring AOT processing in order to pre-generate this class: \" + getClassName());\n+\t\t\t\t\t\t\"Make sure to enable Spring AOT processing to pre-generate '\" + getClassName() + \"' at build time.\");\n \t\t\t}\n \t\t\t// SPRING PATCH END\n \t\t\tbyte[] b = strategy.generate(this);",
    "output": "Refine the CGLIB error message with native"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n@@ -360,7 +360,7 @@ protected Class generate(ClassLoaderData data) {\n \t\t\t// SPRING PATCH BEGIN\n \t\t\tif (inNativeImage) {\n \t\t\t\tthrow new UnsupportedOperationException(\"CGLIB runtime enhancement not supported on native image. \" +\n-\t\t\t\t\t\t\"Make sure to include a pre-generated class on the classpath instead: \" + getClassName());\n+\t\t\t\t\t\t\"Make sure to enable Spring AOT processing in order to pre-generate this class: \" + getClassName());\n \t\t\t}\n \t\t\t// SPRING PATCH END\n \t\t\tbyte[] b = strategy.generate(this);",
    "output": "Provide a more actionable CGLIB error message with native"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerResponseResultHandler.java\n@@ -47,6 +47,12 @@ public class ServerResponseResultHandler implements HandlerResultHandler, Initia\n \n \tprivate int order = 0;\n \n+\t/**\n+\t * Return the configured {@link HttpMessageWriter}'s.\n+\t */\n+\tpublic List<HttpMessageWriter<?>> getMessageWriters() {\n+\t\treturn this.messageWriters;\n+\t}\n \n \t/**\n \t * Configure HTTP message writers to serialize the request body with.\n@@ -56,6 +62,16 @@ public void setMessageWriters(List<HttpMessageWriter<?>> configurer) {\n \t\tthis.messageWriters = configurer;\n \t}\n \n+\t/**\n+\t * Return the configured {@link ViewResolver}'s.\n+\t */\n+\tpublic List<ViewResolver> getViewResolvers() {\n+\t\treturn this.viewResolvers;\n+\t}\n+\n+\t/**\n+\t * Set the current view resolvers.\n+\t */\n \tpublic void setViewResolvers(List<ViewResolver> viewResolvers) {\n \t\tthis.viewResolvers = viewResolvers;\n \t}",
    "output": "Add getters ServerResponseResultHandler"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java\n@@ -296,7 +296,7 @@ protected String[] getSupportedVersions() {\n \n \tprotected void handleWebSocketVersionNotSupported(ServerHttpRequest request, ServerHttpResponse response) {\n \t\tif (logger.isErrorEnabled()) {\n-\t\t\tString version = request.getHeaders().getFirst(\"Sec-WebSocket-Version\");\n+\t\t\tString version = request.getHeaders().getFirst(WebSocketHttpHeaders.SEC_WEBSOCKET_VERSION);\n \t\t\tlogger.error(LogFormatUtils.formatValue(\n \t\t\t\t\t\"Handshake failed due to unsupported WebSocket version: \" + version +\n \t\t\t\t\t\t\t\". Supported versions: \" + Arrays.toString(getSupportedVersions()), -1, true));",
    "output": "Replace hardcoded \"Sec-WebSocket-Version\" with constant"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -129,6 +129,9 @@ public Class<?> enhance(Class<?> configClass, @Nullable ClassLoader classLoader)\n \t */\n \tprivate Enhancer newEnhancer(Class<?> configSuperClass, @Nullable ClassLoader classLoader) {\n \t\tEnhancer enhancer = new Enhancer();\n+\t\tif (classLoader != null) {\n+\t\t\tenhancer.setClassLoader(classLoader);\n+\t\t}\n \t\tenhancer.setSuperclass(configSuperClass);\n \t\tenhancer.setInterfaces(new Class<?>[] {EnhancedConfiguration.class});\n \t\tenhancer.setUseFactory(false);",
    "output": "Explicitly set custom ClassLoader on CGLIB Enhancer"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -813,6 +813,8 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \t\t\tNavigableSet<String> entriesCache = this.jarEntriesCache.get(jarFileUrl);\n \t\t\tif (entriesCache != null) {\n \t\t\t\tSet<Resource> result = new LinkedHashSet<>(64);\n+\t\t\t\t// Clean root entry path to match jar entries format without \"!\" separators\n+\t\t\t\trootEntryPath = rootEntryPath.replace(ResourceUtils.JAR_URL_SEPARATOR, \"/\");\n \t\t\t\t// Search sorted entries from first entry with rootEntryPath prefix\n \t\t\t\tfor (String entryPath : entriesCache.tailSet(rootEntryPath, false)) {\n \t\t\t\t\tif (!entryPath.startsWith(rootEntryPath)) {",
    "output": "Clean root entry path to match jar entries format in cache"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -491,7 +491,7 @@ private void preDetermineBeanType(String beanName, List<SmartInstantiationAwareB\n \t * (may be {@code null} or empty)\n \t * @since 5.2 (since 5.0 on the AnnotationConfigApplicationContext subclass)\n \t */\n-\tpublic <T> void registerBean(Class<T> beanClass, Object... constructorArgs) {\n+\tpublic <T> void registerBean(Class<T> beanClass, @Nullable Object... constructorArgs) {\n \t\tregisterBean(null, beanClass, constructorArgs);\n \t}\n \n@@ -506,7 +506,7 @@ public <T> void registerBean(Class<T> beanClass, Object... constructorArgs) {\n \t * (may be {@code null} or empty)\n \t * @since 5.2 (since 5.0 on the AnnotationConfigApplicationContext subclass)\n \t */\n-\tpublic <T> void registerBean(@Nullable String beanName, Class<T> beanClass, Object... constructorArgs) {\n+\tpublic <T> void registerBean(@Nullable String beanName, Class<T> beanClass, @Nullable Object... constructorArgs) {\n \t\tregisterBean(beanName, beanClass, (Supplier<T>) null,\n \t\t\t\tbd -> {\n \t\t\t\t\tfor (Object arg : constructorArgs) {",
    "output": "Refine GenericApplicationContext#registerBean nullness"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java\n@@ -16,10 +16,8 @@\n \n package org.springframework.web.socket.client.standard;\n \n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.URI;\n-import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -186,15 +184,6 @@ private static List<Extension> adaptExtensions(List<WebSocketExtension> extensio\n \t\treturn result;\n \t}\n \n-\tprivate static InetAddress getLocalHost() {\n-\t\ttry {\n-\t\t\treturn InetAddress.getLocalHost();\n-\t\t}\n-\t\tcatch (UnknownHostException ex) {\n-\t\t\treturn InetAddress.getLoopbackAddress();\n-\t\t}\n-\t}\n-\n \tprivate static int getPort(URI uri) {\n \t\tif (uri.getPort() == -1) {\n \t\t\tString scheme = uri.getScheme().toLowerCase(Locale.ROOT);",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/IndexedTestBean.java b/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/IndexedTestBean.java\n--- a/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/IndexedTestBean.java\n+++ b/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/IndexedTestBean.java\n@@ -181,6 +181,7 @@ public void setMyTestBeans(MyTestBeans myTestBeans) {\n \t}\n \n \n+\t@SuppressWarnings(\"serial\")\n \tpublic static class IterableMap<K,V> extends LinkedHashMap<K,V> implements Iterable<V> {\n \n \t\t@Override",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -64,7 +64,7 @@ private static void configureNoHttpPlugin(Project project) {\n \t\tNoHttpExtension noHttp = project.getExtensions().getByType(NoHttpExtension.class);\n \t\tnoHttp.setAllowlistFile(project.file(\"src/nohttp/allowlist.lines\"));\n \t\tnoHttp.getSource().exclude(\"**/test-output/**\", \"**/.settings/**\",\n-\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\", \"**/node_modules/**\");\n+\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\", \"**/node_modules/**\", \"**/spring-jcl/**\");\n \t\tList<String> buildFolders = List.of(\"bin\", \"build\", \"out\");\n \t\tproject.allprojects(subproject -> {\n \t\t\tPath rootPath = project.getRootDir().toPath();",
    "output": "Exclude spring-jcl from nohttp check on main branch The spring-jcl module no longer exists on main, but it still exists on the 6.2.x branch and previous branches and can cause build failures when switching between branches"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideHandler.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideHandler.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideHandler.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideHandler.java\n@@ -78,8 +78,7 @@ public abstract class BeanOverrideHandler {\n \t\t\tComparator.<MergedAnnotation<? extends Annotation>> comparingInt(MergedAnnotation::getDistance).reversed();\n \n \n-\t@Nullable\n-\tprivate final Field field;\n+\tprivate final @Nullable Field field;\n \n \tprivate final Set<Annotation> qualifierAnnotations;\n \n@@ -213,8 +212,7 @@ private static void processElement(AnnotatedElement element, Class<?> testClass,\n \t/**\n \t * Get the annotated {@link Field}.\n \t */\n-\t@Nullable\n-\tpublic final Field getField() {\n+\tpublic final @Nullable Field getField() {\n \t\treturn this.field;\n \t}\n ",
    "output": "Revise @⁠Nullable declarations for consistency with usage in 7.0"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideHandler.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideHandler.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideHandler.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideHandler.java\n@@ -113,7 +113,9 @@ boolean isSerializable() {\n \t}\n \n \t@Override\n-\tprotected Object createOverrideInstance(String beanName, @Nullable BeanDefinition existingBeanDefinition, @Nullable Object existingBeanInstance) {\n+\tprotected Object createOverrideInstance(String beanName,\n+\t\t\t@Nullable BeanDefinition existingBeanDefinition, @Nullable Object existingBeanInstance) {\n+\n \t\treturn createMock(beanName);\n \t}\n ",
    "output": "Polish formatting for consistency across implementations"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/AbstractMockitoBeanOverrideHandler.java\n@@ -39,7 +39,7 @@ abstract class AbstractMockitoBeanOverrideHandler extends BeanOverrideHandler {\n \n \n \tprotected AbstractMockitoBeanOverrideHandler(@Nullable Field field, ResolvableType beanType,\n-\t\t\t@Nullable String beanName, BeanOverrideStrategy strategy, @Nullable MockReset reset) {\n+\t\t\t@Nullable String beanName, BeanOverrideStrategy strategy, MockReset reset) {\n \n \t\tsuper(field, beanType, beanName, strategy);\n \t\tthis.reset = (reset != null ? reset : MockReset.AFTER);",
    "output": "Remove unnecessary @⁠Nullable declaration"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java b/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java\n--- a/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java\n+++ b/buildSrc/src/main/java/org/springframework/build/architecture/ArchitectureRules.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.build.architecture;\n \n+import com.tngtech.archunit.base.DescribedPredicate;\n import com.tngtech.archunit.core.domain.JavaClass;\n import com.tngtech.archunit.lang.ArchRule;\n import com.tngtech.archunit.lang.syntax.ArchRuleDefinition;\n@@ -66,8 +67,14 @@ static ArchRule classesShouldNotImportForbiddenTypes() {\n \n \tstatic ArchRule javaClassesShouldNotImportKotlinAnnotations() {\n \t\treturn ArchRuleDefinition.noClasses()\n-\t\t\t\t.that().haveSimpleNameNotEndingWith(\"Kt\")\n-\t\t\t\t.and().haveSimpleNameNotEndingWith(\"Dsl\")\n+\t\t\t\t.that(new DescribedPredicate<JavaClass>(\"is not a Kotlin class\") {\n+\t\t\t\t\t\t  @Override\n+\t\t\t\t\t\t  public boolean test(JavaClass javaClass) {\n+\t\t\t\t\t\t\t  return javaClass.getSourceCodeLocation()\n+\t\t\t\t\t\t\t\t\t  .getSourceFileName().endsWith(\".java\");\n+\t\t\t\t\t\t  }\n+\t\t\t\t\t  }\n+\t\t\t\t)\n \t\t\t\t.should().dependOnClassesThat()\n \t\t\t\t.resideInAnyPackage(\"org.jetbrains.annotations..\")\n \t\t\t\t.allowEmptyShould(true);",
    "output": "Fix Kotlin annotations architecture rule"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java b/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/ForwardedHeaderUtilsTests.java\n@@ -546,7 +546,7 @@ void fromHttpRequestXForwardedHeaderForIpv6Formatting() {\n \t\theaders.add(\"X-Forwarded-For\", \"fd00:fefe:1::4, 192.168.0.1\");\n \n \t\tInetSocketAddress address =\n-\t\t\t\tForwardedHeaderUtils.parseForwardedFor(URI.create(\"http://example.com\"), headers, null);\n+\t\t\t\tForwardedHeaderUtils.parseForwardedFor(URI.create(\"https://example.com\"), headers, null);\n \n \t\tassertThat(address.getHostName()).isEqualTo(\"[fd00:fefe:1::4]\");\n \t}",
    "output": "Fix checkstyle warning"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -1784,8 +1784,6 @@ public class MySimpleSuperclassType extends MySuperclassType<String> {\n \tpublic class MyCollectionSuperclassType extends MySuperclassType<Collection<String>> {\n \t}\n \n-\tpublic interface Consumer<T> {\n-\t}\n \n \tpublic interface Consumer<T> {\n \t}",
    "output": "Fix merge result"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.20.2\");\n+\t\t\tcheckstyle.setToolVersion(\"10.21.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Jetty 12.0.16, Netty 4.1.117, Protobuf 4.29.3, Checkstyle 10.21.1"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -1785,6 +1785,9 @@ public class MyCollectionSuperclassType extends MySuperclassType<Collection<Stri\n \t}\n \n \n+\tpublic interface Consumer<T> {\n+\t}\n+\n \tpublic class Wildcard<T extends CharSequence> {\n \t}\n \n@@ -1794,7 +1797,6 @@ public class WildcardFixed extends Wildcard<String> {\n \tpublic class WildcardConsumer<T extends CharSequence & Serializable> implements Consumer<Wildcard<T>> {\n \t}\n \n-\n \tpublic class DoubleWildcard<T extends CharSequence & Serializable> {\n \t}\n ",
    "output": "Refer to local Consumer type instead of Kotlin test type"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -41,7 +41,6 @@\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.concurrent.Callable;\n-import java.util.function.Consumer;\n \n import org.assertj.core.api.AbstractAssert;\n import org.junit.jupiter.api.Test;\n@@ -1785,6 +1784,8 @@ public class MySimpleSuperclassType extends MySuperclassType<String> {\n \tpublic class MyCollectionSuperclassType extends MySuperclassType<Collection<String>> {\n \t}\n \n+\tpublic interface Consumer<T> {\n+\t}\n \n \tpublic class Wildcard<T extends CharSequence> {\n \t}",
    "output": "Fix compilation error in ResolvableTypeTests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -41,6 +41,7 @@\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.concurrent.Callable;\n+import java.util.function.Consumer;\n \n import org.assertj.core.api.AbstractAssert;\n import org.junit.jupiter.api.Test;",
    "output": "Fix compilation error in ResolvableTypeTests"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/KotlinConventions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -39,7 +39,12 @@ private void configure(KotlinCompile compile) {\n \t\t\toptions.getJvmTarget().set(JvmTarget.JVM_17);\n \t\t\toptions.getJavaParameters().set(true);\n \t\t\toptions.getAllWarningsAsErrors().set(true);\n-\t\t\toptions.getFreeCompilerArgs().addAll(\"-Xsuppress-version-warnings\", \"-Xjsr305=strict\", \"-opt-in=kotlin.RequiresOptIn\");\n+\t\t\toptions.getFreeCompilerArgs().addAll(\n+\t\t\t\t\t\"-Xsuppress-version-warnings\",\n+\t\t\t\t\t\"-Xjsr305=strict\", // For dependencies using JSR 305\n+\t\t\t\t\t\"-opt-in=kotlin.RequiresOptIn\",\n+\t\t\t\t\t\"-Xjdk-release=17\" // Needed due to https://youtrack.jetbrains.com/issue/KT-49746\n+\t\t\t);\n \t\t});\n \t}\n ",
    "output": "Set -Xjdk-release=17 for Kotlin build Needed due to https://youtrack.jetbrains.com/issue/"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -120,7 +120,7 @@ public class LocalSessionFactoryBuilder extends Configuration {\n \n \tprivate final ResourcePatternResolver resourcePatternResolver;\n \n-\tprivate @Nullable TypeFilter[] entityTypeFilters = DEFAULT_ENTITY_TYPE_FILTERS;\n+\tprivate TypeFilter[] entityTypeFilters = DEFAULT_ENTITY_TYPE_FILTERS;\n \n \n \t/**",
    "output": "Specify generic type nullness in spring-orm"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicates.java b/spring-core/src/main/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicates.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicates.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicates.java\n@@ -374,7 +374,7 @@ public Predicate<RuntimeHints> withAnyMemberCategory(MemberCategory... memberCat\n \t\t}\n \t}\n \n-\n+\t@Deprecated(since = \"7.0\", forRemoval = true)\n \t@SuppressWarnings(\"removal\")\n \tpublic abstract static class ExecutableHintPredicate<T extends Executable> implements Predicate<RuntimeHints> {\n \n@@ -420,6 +420,7 @@ static boolean includes(ExecutableHint hint, String name,\n \t}\n \n \n+\t@Deprecated(since = \"7.0\", forRemoval = true)\n \t@SuppressWarnings(\"removal\")\n \tpublic static class ConstructorHintPredicate extends ExecutableHintPredicate<Constructor<?>> {\n \n@@ -454,6 +455,7 @@ Predicate<RuntimeHints> exactMatch() {\n \t}\n \n \n+\t@Deprecated(since = \"7.0\", forRemoval = true)\n \t@SuppressWarnings(\"removal\")\n \tpublic static class MethodHintPredicate extends ExecutableHintPredicate<Method> {\n \n@@ -489,6 +491,7 @@ Predicate<RuntimeHints> exactMatch() {\n \t}\n \n \n+\t@Deprecated(since = \"7.0\", forRemoval = true)\n \tpublic static class FieldHintPredicate implements Predicate<RuntimeHints> {\n \n \t\tprivate final Field field;",
    "output": "Polishing RuntimeHintsPredicates deprecations This commit also deprecates the types returned by deprecated methods as they will be removed as well in the future"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java b/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java\n--- a/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java\n+++ b/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -51,10 +51,11 @@ public FlightRecorderApplicationStartup() {\n \n \t@Override\n \tpublic StartupStep start(String name) {\n+\t\tLong parentId = this.currentSteps.getFirst();\n \t\tlong sequenceId = this.currentSequenceId.incrementAndGet();\n \t\tthis.currentSteps.offerFirst(sequenceId);\n \t\treturn new FlightRecorderStartupStep(sequenceId, name,\n-\t\t\t\tthis.currentSteps.getFirst(), committedStep -> this.currentSteps.removeFirstOccurrence(sequenceId));\n+\t\t\t\tparentId, committedStep -> this.currentSteps.removeFirstOccurrence(sequenceId));\n \t}\n \n }",
    "output": "Fix Wrong parentId tracking in JFR application startup This commit fixes the tracking of the main event parentId for the Java Flight Recorder implementation variant"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -991,7 +991,11 @@ protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd,\n \t */\n \t@Nullable\n \tprivate FactoryBean<?> getSingletonFactoryBeanForTypeCheck(String beanName, RootBeanDefinition mbd) {\n-\t\tthis.singletonLock.lock();\n+\t\tboolean locked = this.singletonLock.tryLock();\n+\t\tif (!locked) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\ttry {\n \t\t\tBeanWrapper bw = this.factoryBeanInstanceCache.get(beanName);\n \t\t\tif (bw != null) {",
    "output": "Defensively acquire singleton lock for FactoryBean type check"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -183,6 +183,13 @@ public void releaseSavepoint(Object savepoint) throws TransactionException {\n \t\tcatch (SQLFeatureNotSupportedException ex) {\n \t\t\t// typically on Oracle - ignore\n \t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t// ignore Microsoft SQLServerException: This operation is not supported.\n+\t\t\tString msg = ex.getMessage();\n+\t\t\tif (msg == null || !msg.contains(\"not supported\")) {\n+\t\t\t\tthrow new TransactionSystemException(\"Could not explicitly release JDBC savepoint\", ex);\n+\t\t\t}\n+\t\t}\n \t\tcatch (Throwable ex) {\n \t\t\tthrow new TransactionSystemException(\"Could not explicitly release JDBC savepoint\", ex);\n \t\t}",
    "output": "Ignore SQLServerException with \"not supported\" message"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -834,11 +834,17 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \n \t\tif (con instanceof JarURLConnection jarCon) {\n \t\t\t// Should usually be the case for traditional JAR files.\n-\t\t\tjarFile = jarCon.getJarFile();\n-\t\t\tjarFileUrl = jarCon.getJarFileURL().toExternalForm();\n-\t\t\tJarEntry jarEntry = jarCon.getJarEntry();\n-\t\t\trootEntryPath = (jarEntry != null ? jarEntry.getName() : \"\");\n-\t\t\tcloseJarFile = !jarCon.getUseCaches();\n+\t\t\ttry {\n+\t\t\t\tjarFile = jarCon.getJarFile();\n+\t\t\t\tjarFileUrl = jarCon.getJarFileURL().toExternalForm();\n+\t\t\t\tJarEntry jarEntry = jarCon.getJarEntry();\n+\t\t\t\trootEntryPath = (jarEntry != null ? jarEntry.getName() : \"\");\n+\t\t\t\tcloseJarFile = !jarCon.getUseCaches();\n+\t\t\t}\n+\t\t\tcatch (FileNotFoundException ex) {\n+\t\t\t\t// Happens in case of cached root directory without specific subdirectory present.\n+\t\t\t\treturn Collections.emptySet();\n+\t\t\t}\n \t\t}\n \t\telse {\n \t\t\t// No JarURLConnection -> need to resort to URL file parsing.",
    "output": "Defensively resolve JarFile from JarURLConnection"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n@@ -183,13 +183,7 @@ public void initializeNativeSession(Session session) {\n \t\tthis.extensions = getExtensions(session);\n \n \t\tif (this.user == null) {\n-\t\t\ttry {\n-\t\t\t\tthis.user = session.getUpgradeRequest().getUserPrincipal();\n-\t\t\t}\n-\t\t\tcatch (NullPointerException ex) {\n-\t\t\t\t// Necessary until https://github.com/eclipse/jetty.project/issues/10498 is resolved\n-\t\t\t\tlogger.error(\"Failure from UpgradeRequest while getting Principal\", ex);\n-\t\t\t}\n+\t\t\tthis.user = session.getUpgradeRequest().getUserPrincipal();\n \t\t}\n \t}\n ",
    "output": "Remove the catch of NPE because this issue had resolved at Jetty 12.0.2"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2024 the original author or authors.\n+ * Copyright 2002-2025 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,6 +82,18 @@ public JsonPathExpectationsHelper(String expression, @Nullable Configuration con\n \t\tthis.configuration = (configuration != null) ? configuration : Configuration.defaultConfiguration();\n \t}\n \n+\t/**\n+\t * Construct a new {@code JsonPathExpectationsHelper}.\n+\t * @param expression the {@link JsonPath} expression; never {@code null} or empty\n+\t * @param args arguments to parameterize the {@code JsonPath} expression with,\n+\t * using formatting specifiers defined in {@link String#format(String, Object...)}\n+\t * @deprecated in favor of calling {@link String#formatted(Object...)} upfront\n+\t */\n+\t@Deprecated(since = \"6.2\", forRemoval = true)\n+\tpublic JsonPathExpectationsHelper(String expression, Object... args) {\n+\t\tthis(expression.formatted(args), (Configuration) null);\n+\t}\n+\n \n \t/**\n \t * Evaluate the JSON path expression against the supplied {@code content}",
    "output": "Restore deprecated constructor for binary compatibility support Code that compiles against the non-deprecated version does not see the new constructor that has been introduced. As such, there is no way for them to migrate to it without resorting to reflection. This commit restores the deprecated constructor so that people can try the latest version more easily"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java\n@@ -101,7 +101,6 @@ protected void extendAdvisors(List<Advisor> candidateAdvisors) {\n \n \t@Override\n \tprotected boolean shouldSkip(Class<?> beanClass, String beanName) {\n-\t\t// TODO: Consider optimization by caching the list of the aspect names\n \t\tList<Advisor> candidateAdvisors = findCandidateAdvisors();\n \t\tfor (Advisor advisor : candidateAdvisors) {\n \t\t\tif (advisor instanceof AspectJPointcutAdvisor pointcutAdvisor &&",
    "output": "Remove outdated TODO task"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/PathResource.java b/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n@@ -56,7 +56,9 @@\n  * @see java.nio.file.Path\n  * @see java.nio.file.Files\n  * @see FileSystemResource\n+ * @deprecated since 7.0 in favor of {@link FileSystemResource}\n  */\n+@Deprecated(since = \"7.0\", forRemoval = true)\n public class PathResource extends AbstractResource implements WritableResource {\n \n \tprivate final Path path;\n\ndiff --git a/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n@@ -50,6 +50,7 @@\n  * @author Juergen Hoeller\n  * @author Arjen Poutsma\n  */\n+@SuppressWarnings(\"removal\")\n class PathResourceTests {\n \n \tprivate static final String TEST_DIR =",
    "output": "Deprecate PathResource variant This commit deprecates the `PathResource` implementation variant in favor of `FileSystemResource`. This was already pointing to `FileSystemResource` as of Spring Framework 5.1 and we now consider this variant as deprecated"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -427,6 +427,11 @@ public void startDeferredResultProcessing(\n \t\t\t}\n \t\t\ttry {\n \t\t\t\tinterceptorChain.triggerAfterTimeout(this.asyncWebRequest, deferredResult);\n+\t\t\t\tsynchronized (WebAsyncManager.this) {\n+\t\t\t\t\t// If application thread set the DeferredResult first in a race,\n+\t\t\t\t\t// we must still not return until setConcurrentResultAndDispatch is done\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tsetConcurrentResultAndDispatch(ex);\n@@ -439,6 +444,11 @@ public void startDeferredResultProcessing(\n \t\t\t}\n \t\t\ttry {\n \t\t\t\tinterceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex);\n+\t\t\t\tsynchronized (WebAsyncManager.this) {\n+\t\t\t\t\t// If application thread set the DeferredResult first in a race,\n+\t\t\t\t\t// we must still not return until setConcurrentResultAndDispatch is done\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable interceptorEx) {\n \t\t\t\tsetConcurrentResultAndDispatch(interceptorEx);",
    "output": "Synchronize in WebAsyncManager onError/onTimeout On connection loss, in a race between application thread and onError callback trying to set the DeferredResult and dispatch, the onError callback must not exit until dispatch completes. Currently, it may do so because the DeferredResult has checks to bypasses locking or even trying to dispatch if result is already set"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -438,10 +438,7 @@ public void startDeferredResultProcessing(\n \t\t\t\tlogger.debug(\"Servlet container error notification for \" + formatUri(this.asyncWebRequest));\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\tif (!interceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex)) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tdeferredResult.setErrorResult(ex);\n+\t\t\t\tinterceptorChain.triggerAfterError(this.asyncWebRequest, deferredResult, ex);\n \t\t\t}\n \t\t\tcatch (Throwable interceptorEx) {\n \t\t\t\tsetConcurrentResultAndDispatch(interceptorEx);",
    "output": "Minor refactoring in WebAsyncManager There is no need to set the DeferredResult from WebAsyncManager in an onError notification because it is already done from the Lifecycle interceptor in DeferredResult"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/PropertyPlaceholderHelperTests.java b/spring-core/src/test/java/org/springframework/util/PropertyPlaceholderHelperTests.java\n--- a/spring-core/src/test/java/org/springframework/util/PropertyPlaceholderHelperTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/PropertyPlaceholderHelperTests.java\n@@ -153,6 +153,23 @@ static Stream<Arguments> defaultValues() {\n \t\t\t);\n \t\t}\n \n+\t\t@ParameterizedTest(name = \"{0} -> {1}\")\n+\t\t@MethodSource(\"exactMatchPlaceholders\")\n+\t\tvoid placeholdersWithExactMatchAreConsidered(String text, String expected) {\n+\t\t\tProperties properties = new Properties();\n+\t\t\tproperties.setProperty(\"prefix://my-service\", \"example-service\");\n+\t\t\tproperties.setProperty(\"px\", \"prefix\");\n+\t\t\tproperties.setProperty(\"p1\", \"${prefix://my-service}\");\n+\t\t\tassertThat(this.helper.replacePlaceholders(text, properties)).isEqualTo(expected);\n+\t\t}\n+\n+\t\tstatic Stream<Arguments> exactMatchPlaceholders() {\n+\t\t\treturn Stream.of(\n+\t\t\t\t\tArguments.of(\"${prefix://my-service}\", \"example-service\"),\n+\t\t\t\t\tArguments.of(\"${p1}\", \"example-service\")\n+\t\t\t);\n+\t\t}\n+\n \t}\n \n \tPlaceholderResolver mockPlaceholderResolver(String... pairs) {",
    "output": "Backport tests for exact match resolution (cherry picked from commit 898d3ec86aaaaa76f69f1e65adf9b52f6a26e7ff)"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java b/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/framework/AbstractProxyExceptionHandlingTests.java\n@@ -99,7 +99,7 @@ void targetThrowsUndeclaredCheckedException() throws DeclaredCheckedException {\n \t\t\tassertThat(throwableSeenByInterceptor).isSameAs(undeclaredCheckedException);\n \t\t\tassertThat(throwableSeenByCaller)\n \t\t\t\t\t.isInstanceOf(UndeclaredThrowableException.class)\n-\t\t\t\t\t.hasCauseReference(undeclaredCheckedException);\n+\t\t\t\t\t.cause().isSameAs(undeclaredCheckedException);\n \t\t}\n \n \t\t@Test\n@@ -147,7 +147,7 @@ void targetThrowsUndeclaredCheckedException() throws DeclaredCheckedException {\n \t\t\tinvokeProxy();\n \t\t\tassertThat(throwableSeenByCaller)\n \t\t\t\t\t.isInstanceOf(UndeclaredThrowableException.class)\n-\t\t\t\t\t.hasCauseReference(undeclaredCheckedException);\n+\t\t\t\t\t.cause().isSameAs(undeclaredCheckedException);\n \t\t}\n \n \t\t@Test",
    "output": "Upgrade to AssertJ 3.27.1"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MethodValidationTests.java\n@@ -41,7 +41,7 @@\n import jakarta.validation.constraints.Size;\n import jakarta.validation.executable.ExecutableValidator;\n import jakarta.validation.metadata.BeanDescriptor;\n-import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorFactoryImpl;\n+import org.hibernate.validator.constraintvalidation.spi.DefaultConstraintValidatorFactory;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -557,7 +557,7 @@ private static class TestConstraintValidatorFactory implements ConstraintValidat\n \n \t\tprivate final Map<Class<?>, ConstraintValidator<?, ?>> validators;\n \n-\t\tprivate final ConstraintValidatorFactory delegate = new ConstraintValidatorFactoryImpl();\n+\t\tprivate final ConstraintValidatorFactory delegate = new DefaultConstraintValidatorFactory();\n \n \t\tprivate TestConstraintValidatorFactory(ConstraintValidator<?, ?>... validators) {\n \t\t\tthis.validators = new LinkedHashMap<>(validators.length);",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/Assert.java b/spring-core/src/main/java/org/springframework/util/Assert.java\n--- a/spring-core/src/main/java/org/springframework/util/Assert.java\n+++ b/spring-core/src/main/java/org/springframework/util/Assert.java\n@@ -319,7 +319,7 @@ public static void doesNotContain(@Nullable String textToSearch, String substrin\n \t * @throws IllegalArgumentException if the object array is {@code null} or contains no elements\n \t */\n \t@Contract(\"null, _ -> fail\")\n-\tpublic static void notEmpty(Object @Nullable [] array, String message) {\n+\tpublic static void notEmpty(@Nullable Object @Nullable [] array, String message) {\n \t\tif (ObjectUtils.isEmpty(array)) {\n \t\t\tthrow new IllegalArgumentException(message);\n \t\t}",
    "output": "Refine null-safety in the spring-core module"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n@@ -158,7 +158,7 @@ public void setBeanClassLoader(ClassLoader classLoader) {\n \n \n \t@Override\n-\t@SuppressWarnings(\"NullAway\")\n+\t@SuppressWarnings(\"NullAway\") // Lazy initialization\n \tpublic void afterPropertiesSet() throws ClassNotFoundException, NoSuchFieldException {\n \t\tif (this.targetClass != null && this.targetObject != null) {\n \t\t\tthrow new IllegalArgumentException(\"Specify either targetClass or targetObject, not both\");",
    "output": "Refine null-safety in the spring-beans module"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,9 @@\n \n package org.springframework.web.servlet.config;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.beans.factory.xml.NamespaceHandler;\n import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n \n@@ -29,8 +32,11 @@\n  */\n public class MvcNamespaceHandler extends NamespaceHandlerSupport {\n \n+\tprivate static final Log logger = LogFactory.getLog(MvcNamespaceHandler.class);\n+\n \t@Override\n \tpublic void init() {\n+\t\tlogger.warn(\"The XML configuration namespace for Spring MVC is deprecated, please use Java configuration instead.\");\n \t\tregisterBeanDefinitionParser(\"annotation-driven\", new AnnotationDrivenBeanDefinitionParser());\n \t\tregisterBeanDefinitionParser(\"default-servlet-handler\", new DefaultServletHandlerBeanDefinitionParser());\n \t\tregisterBeanDefinitionParser(\"interceptors\", new InterceptorsBeanDefinitionParser());",
    "output": "Deprecate mvc XML configuration namespace This commit deprecates the `<mvc:*` XML configuration namespace for configuring Spring MVC applications. This configuration model is lagging behind in the 6.x generation already and we don't intend to invest in this space to close that gap. As of 7.0, using this XML namespace will result in a WARN log message. This commit also states our intent in the reference documentation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -19,7 +19,6 @@\n import java.io.ByteArrayOutputStream;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n-import java.time.ZonedDateTime;\n import java.util.ArrayList;\n import java.util.Base64;\n import java.util.BitSet;\n@@ -256,10 +255,6 @@ public static ContentDisposition parse(String contentDisposition) {\n \t\tString name = null;\n \t\tString filename = null;\n \t\tCharset charset = null;\n-\t\tLong size = null;\n-\t\tZonedDateTime creationDate = null;\n-\t\tZonedDateTime modificationDate = null;\n-\t\tZonedDateTime readDate = null;\n \t\tfor (int i = 1; i < parts.size(); i++) {\n \t\t\tString part = parts.get(i);\n \t\t\tint eqIndex = part.indexOf('=');",
    "output": "Remove unused code from ContentDisposition"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n@@ -285,18 +285,6 @@ public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeF\n \t\treturn this;\n \t}\n \n-\t/**\n-\t * Add the given annotated classes in a batch.\n-\t * @see #addAnnotatedClass\n-\t * @see #scanPackages\n-\t */\n-\tpublic LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {\n-\t\tfor (Class<?> annotatedClass : annotatedClasses) {\n-\t\t\taddAnnotatedClass(annotatedClass);\n-\t\t}\n-\t\treturn this;\n-\t}\n-\n \t/**\n \t * Add the given annotated packages in a batch.\n \t * @see #addPackage",
    "output": "Upgrade to Hibernate ORM 7.0.0.Beta3 and Validator 9.0.0.CR1 Using relocated Maven coordinates"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -186,7 +186,7 @@ public static EntityManager createSharedEntityManager(EntityManagerFactory emf,\n \t@SuppressWarnings(\"serial\")\n \tprivate static class SharedEntityManagerInvocationHandler implements InvocationHandler, Serializable {\n \n-\t\tprivate final Log logger = LogFactory.getLog(getClass());\n+\t\tprivate static final Log logger = LogFactory.getLog(SharedEntityManagerInvocationHandler.class);\n \n \t\tprivate final EntityManagerFactory targetFactory;\n ",
    "output": "Avoid logger serialization behind shared EntityManager proxy"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.20.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.20.2\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Jackson 2.18.2, RxJava 3.1.10, Checkstyle 10.20.2"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideHandler.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideHandler.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideHandler.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideHandler.java\n@@ -23,6 +23,7 @@\n \n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.core.ResolvableType;\n+import org.springframework.core.style.ToStringCreator;\n import org.springframework.lang.Nullable;\n import org.springframework.test.context.bean.override.BeanOverrideHandler;\n import org.springframework.test.context.bean.override.BeanOverrideStrategy;\n@@ -83,4 +84,15 @@ public int hashCode() {\n \t\treturn this.factoryMethod.hashCode() * 29 + super.hashCode();\n \t}\n \n+\t@Override\n+\tpublic String toString() {\n+\t\treturn new ToStringCreator(this)\n+\t\t\t\t.append(\"field\", getField())\n+\t\t\t\t.append(\"beanType\", getBeanType())\n+\t\t\t\t.append(\"beanName\", getBeanName())\n+\t\t\t\t.append(\"strategy\", getStrategy())\n+\t\t\t\t.append(\"factoryMethod\", this.factoryMethod)\n+\t\t\t\t.toString();\n+\t}\n+\n }",
    "output": "Implement toStringin TestBeanOverrideHandler"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/beanvalidation/OptionalValidatorFactoryBean.java b/spring-context/src/main/java/org/springframework/validation/beanvalidation/OptionalValidatorFactoryBean.java\n--- a/spring-context/src/main/java/org/springframework/validation/beanvalidation/OptionalValidatorFactoryBean.java\n+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/OptionalValidatorFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n package org.springframework.validation.beanvalidation;\n \n import jakarta.validation.ValidationException;\n+import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n /**\n@@ -39,7 +40,13 @@ public void afterPropertiesSet() {\n \t\t\tsuper.afterPropertiesSet();\n \t\t}\n \t\tcatch (ValidationException ex) {\n-\t\t\tLogFactory.getLog(getClass()).debug(\"Failed to set up a Bean Validation provider\", ex);\n+\t\t\tLog logger = LogFactory.getLog(getClass());\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Failed to set up a Bean Validation provider\", ex);\n+\t\t\t}\n+\t\t\telse if (logger.isInfoEnabled()) {\n+\t\t\t\tlogger.info(\"Failed to set up a Bean Validation provider: \" + ex);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Log provider setup failure at info level without stacktrace"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java\n@@ -485,9 +485,9 @@ private WebSocketService initWebSocketService() {\n \t\t\ttry {\n \t\t\t\tservice = new HandshakeWebSocketService();\n \t\t\t}\n-\t\t\tcatch (IllegalStateException ex) {\n+\t\t\tcatch (Throwable ex) {\n \t\t\t\t// Don't fail, test environment perhaps\n-\t\t\t\tservice = new NoUpgradeStrategyWebSocketService();\n+\t\t\t\tservice = new NoUpgradeStrategyWebSocketService(ex);\n \t\t\t}\n \t\t}\n \t\treturn service;\n@@ -608,9 +608,15 @@ public void validate(@Nullable Object target, Errors errors) {\n \n \tprivate static final class NoUpgradeStrategyWebSocketService implements WebSocketService {\n \n+\t\tprivate final Throwable ex;\n+\n+\t\tpublic NoUpgradeStrategyWebSocketService(Throwable ex) {\n+\t\t\tthis.ex = ex;\n+\t\t}\n+\n \t\t@Override\n \t\tpublic Mono<Void> handleRequest(ServerWebExchange exchange, WebSocketHandler webSocketHandler) {\n-\t\t\treturn Mono.error(new IllegalStateException(\"No suitable RequestUpgradeStrategy\"));\n+\t\t\treturn Mono.error(new IllegalStateException(\"No suitable RequestUpgradeStrategy\", this.ex));\n \t\t}\n \t}\n ",
    "output": "Consistent fallback to NoUpgradeStrategyWebSocketService"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n@@ -17,6 +17,7 @@\n package org.springframework.jdbc.datasource;\n \n import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n import java.sql.Savepoint;\n \n import org.springframework.lang.Nullable;\n@@ -179,6 +180,9 @@ public void releaseSavepoint(Object savepoint) throws TransactionException {\n \t\ttry {\n \t\t\tconHolder.getConnection().releaseSavepoint((Savepoint) savepoint);\n \t\t}\n+\t\tcatch (SQLFeatureNotSupportedException ex) {\n+\t\t\t// typically on Oracle - ignore\n+\t\t}\n \t\tcatch (Throwable ex) {\n \t\t\tthrow new TransactionSystemException(\"Could not explicitly release JDBC savepoint\", ex);\n \t\t}",
    "output": "Ignore SQLFeatureNotSupportedException on releaseSavepoint"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolverTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolverTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolverTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolverTests.java\n@@ -69,6 +69,7 @@ class ServletRequestMethodArgumentResolverTests {\n \n \n \t@BeforeEach\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid setup() throws Exception {\n \t\tresolver = new ServletRequestMethodArgumentResolver();\n \t\tmavContainer = new ModelAndViewContainer();\n@@ -241,6 +242,7 @@ void httpMethod() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid pushBuilder() throws Exception {\n \t\tfinal PushBuilder pushBuilder = mock();\n \t\tservletRequest = new MockHttpServletRequest(\"GET\", \"\") {\n@@ -259,7 +261,7 @@ public PushBuilder newPushBuilder() {\n \t}\n \n \n-\t@SuppressWarnings(\"unused\")\n+\t@SuppressWarnings({\"unused\", \"deprecation\"})\n \tpublic void supportedParams(ServletRequest p0,\n \t\t\t\t\t\t\t\tMultipartRequest p1,\n \t\t\t\t\t\t\t\tHttpSession p2,",
    "output": "Document Servlet PushBuilder API deprecation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n@@ -138,6 +138,7 @@ public static boolean isEmpty(@Nullable Object[] array) {\n \t * @see CollectionUtils#isEmpty(java.util.Collection)\n \t * @see CollectionUtils#isEmpty(java.util.Map)\n \t */\n+\t@Contract(\"null -> true\")\n \tpublic static boolean isEmpty(@Nullable Object obj) {\n \t\tif (obj == null) {\n \t\t\treturn true;",
    "output": "Add missing `@Contract` annotation to ObjectUtils#isEmpty"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -978,8 +978,8 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t}\n \n \t\tif (!Files.exists(rootPath)) {\n-\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\tlogger.info(\"Skipping search for files matching pattern [%s]: directory [%s] does not exist\"\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Skipping search for files matching pattern [%s]: directory [%s] does not exist\"\n \t\t\t\t\t\t.formatted(subPattern, rootPath.toAbsolutePath()));\n \t\t\t}\n \t\t\treturn result;",
    "output": "Fix log level in PathMatchingResourcePatternResolver"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -83,6 +83,7 @@\n import org.springframework.web.testfixture.xml.Pojo;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n import static org.junit.jupiter.params.provider.Arguments.argumentSet;\n \n /**\n@@ -192,6 +193,8 @@ void retrieveJson(ClientHttpConnector connector) {\n \n \t@ParameterizedWebClientTest\n \tvoid applyAttributesToNativeRequest(ClientHttpConnector connector) {\n+\t\tassumeFalse(connector instanceof ReactorClientHttpConnector,\n+\t\t\t\t\"Temporarily disabling flaky test for Reactor Netty\");\n \t\tstartServer(connector);\n \t\tprepareResponse(response -> {});\n ",
    "output": "Temporarily disable flaky integration test"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/FilteredIterator.java b/spring-core/src/main/java/org/springframework/util/FilteredIterator.java\n--- a/spring-core/src/main/java/org/springframework/util/FilteredIterator.java\n+++ b/spring-core/src/main/java/org/springframework/util/FilteredIterator.java\n@@ -55,17 +55,13 @@ public boolean hasNext() {\n \t\tif (this.nextSet) {\n \t\t\treturn true;\n \t\t}\n-\t\telse {\n-\t\t\treturn setNext();\n-\t\t}\n+\t\treturn setNext();\n \t}\n \n \t@Override\n \tpublic E next() {\n-\t\tif (!this.nextSet) {\n-\t\t\tif (!setNext()) {\n+\t\tif (!this.nextSet && !setNext()) {\n \t\t\t\tthrow new NoSuchElementException();\n-\t\t\t}\n \t\t}\n \t\tthis.nextSet = false;\n \t\tAssert.state(this.next != null, \"Next should not be null\");",
    "output": "Simplify implementation of FilteredIterator"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java\n@@ -24,7 +24,6 @@\n import java.util.function.BiFunction;\n import java.util.function.Function;\n \n-import org.apache.hc.client5.http.cookie.BasicCookieStore;\n import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n import org.apache.hc.client5.http.impl.async.HttpAsyncClients;\n import org.apache.hc.client5.http.protocol.HttpClientContext;\n@@ -107,12 +106,10 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n \n \t\tHttpClientContext context = this.contextProvider.apply(method, uri);\n-\t\tif (context.getCookieStore() == null) {\n-\t\t\tcontext.setCookieStore(new BasicCookieStore());\n-\t\t}\n \n \t\tHttpComponentsClientHttpRequest request =\n \t\t\t\tnew HttpComponentsClientHttpRequest(method, uri, context, this.dataBufferFactory);\n+\n \t\treturn requestCallback.apply(request).then(Mono.defer(() -> execute(request, context)));\n \t}\n ",
    "output": "Do not set up CookieStore in Apache connector"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/format/annotation/DurationFormat.java b/spring-context/src/main/java/org/springframework/format/annotation/DurationFormat.java\n--- a/spring-context/src/main/java/org/springframework/format/annotation/DurationFormat.java\n+++ b/spring-context/src/main/java/org/springframework/format/annotation/DurationFormat.java\n@@ -211,7 +211,7 @@ public static Unit fromChronoUnit(@Nullable ChronoUnit chronoUnit) {\n \t\t\t\t\treturn candidate;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tthrow new IllegalArgumentException(\"No matching Unit for ChronoUnit: \" + chronoUnit.name());\n+\t\t\tthrow new IllegalArgumentException(\"No matching Unit for ChronoUnit.\" + chronoUnit.name());\n \t\t}\n \n \t\t/**",
    "output": "Restore enum-style exception message expected by test"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.18.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.20.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Micrometer 1.12.12 and Reactor 2023.0.12 Includes Netty 4.1.114, Jetty 12.0.15, Jetty Reactive HttpClient 4.0.8, RxJava 3.1.9, RSocket 1.1.4, Groovy 4.0.24, JRuby 9.4.9, Checkstyle 10.20.1"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.18.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.20.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Micrometer 1.14.0 and Reactor 2024.0.0 Includes Netty 4.1.114, Jetty 12.0.15, Jetty Reactive HttpClient 4.0.8, RxJava 3.1.9, RSocket 1.1.4, HSQLDB 2.7.4, H2 2.3.232, SnakeYAML 2.3, Groovy 4.0.24, JRuby 9.4.9, Jackson 2.18.1, Gson 2.11, Protobuf 4.28.3, XStream 1.4.21, Woodstox 6.7, TestNG 7.10.2, Selenium 4.26, HtmlUnit 4.6, XMLUnit 2.10, Checkstyle 10.20.1"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -322,7 +322,16 @@ public String toString(int index, int length, Charset charset) {\n \t\t}\n \n \n-\t\tprivate record JettyByteBufferIterator(ByteBufferIterator delegate) implements ByteBufferIterator {\n+\t\tprivate static class JettyByteBufferIterator implements ByteBufferIterator {\n+\n+\t\t\tprivate final ByteBufferIterator delegate;\n+\n+\n+\t\t\tJettyByteBufferIterator(ByteBufferIterator delegate) {\n+\t\t\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n+\n+\t\t\t\tthis.delegate = delegate;\n+\t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void close() {",
    "output": "Align JettyByteBufferIterator implementations Both are now static nested classes"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/core/test/tools/DynamicJavaFileManager.java b/spring-core-test/src/main/java/org/springframework/core/test/tools/DynamicJavaFileManager.java\n--- a/spring-core-test/src/main/java/org/springframework/core/test/tools/DynamicJavaFileManager.java\n+++ b/spring-core-test/src/main/java/org/springframework/core/test/tools/DynamicJavaFileManager.java\n@@ -70,11 +70,12 @@ public ClassLoader getClassLoader(Location location) {\n \t}\n \n \t@Override\n-\tpublic FileObject getFileForOutput(Location location, String packageName, String relativeName, FileObject sibling) {\n+\tpublic FileObject getFileForOutput(Location location, String packageName,\n+\t\t\tString relativeName, FileObject sibling) {\n \t\treturn this.dynamicResourceFiles.computeIfAbsent(relativeName, name -> {\n \t\t\tResourceFile resourceFile = this.resourceFiles.get(name);\n-\t\t\treturn (resourceFile != null) ? new DynamicResourceFileObject(name, resourceFile.getContent())\n-\t\t\t\t\t: new DynamicResourceFileObject(name);\n+\t\t\treturn (resourceFile != null) ? new DynamicResourceFileObject(name, resourceFile.getContent()) :\n+\t\t\t\t\tnew DynamicResourceFileObject(name);\n \t\t});\n \t}\n ",
    "output": "Prefer modified resources over the originals in TestCompiler"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Contract.java b/spring-core/src/main/java/org/springframework/lang/Contract.java\n--- a/spring-core/src/main/java/org/springframework/lang/Contract.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Contract.java\n@@ -72,10 +72,4 @@\n \t * Contains the contract clauses describing causal relations between call arguments and the returned value.\n \t */\n \tString value() default \"\";\n-\n-\t/**\n-\t * Specifies if this method is pure, i.e. has no visible side effects. This may be used for more precise data flow analysis, and\n-\t * to check that the method's return value is actually used in the call place.\n-\t */\n-\tboolean pure() default false;\n }",
    "output": "Remove the pure attribute from `@Contract`"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestClient.java b/spring-web/src/main/java/org/springframework/web/client/RestClient.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestClient.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestClient.java\n@@ -44,6 +44,7 @@\n import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.http.client.observation.ClientRequestObservationConvention;\n import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.lang.CheckReturnValue;\n import org.springframework.lang.Nullable;\n import org.springframework.util.MultiValueMap;\n import org.springframework.web.util.DefaultUriBuilderFactory;\n@@ -644,6 +645,7 @@ interface RequestHeadersSpec<S extends RequestHeadersSpec<S>> {\n \t\t * {@link ResponseSpec#onStatus(Predicate, ResponseSpec.ErrorHandler) onStatus} handlers.\n \t\t * @return {@code ResponseSpec} to specify how to decode the body\n \t\t */\n+\t\t@CheckReturnValue\n \t\tResponseSpec retrieve();\n \n \t\t/**",
    "output": "Annotate RestClient retrievewith `@CheckReturnValue` This annotation triggers a warning in IDEs supporting `@CheckReturnValue` when retrievereturn value is not used"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java\n@@ -136,7 +136,6 @@ private static AspectJAnnotation findAnnotation(Method method, Class<? extends A\n \n \tprivate static boolean compiledByAjc(Class<?> clazz) {\n \t\tfor (Field field : clazz.getDeclaredFields()) {\n-\t\t\tSystem.out.println(clazz + \": \" + field.getName());\n \t\t\tif (field.getName().startsWith(AJC_MAGIC)) {\n \t\t\t\treturn true;\n \t\t\t}",
    "output": "Prevent accidental Sysouts in the codebase"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n@@ -205,7 +205,7 @@ public void setHttpContextFactory(BiFunction<HttpMethod, URI, HttpContext> httpC\n \n \n \t@Override\n-\t@SuppressWarnings(\"deprecation\")\n+\t@SuppressWarnings(\"deprecation\")  // HttpClientContext.REQUEST_CONFIG\n \tpublic ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {\n \t\tHttpClient client = getHttpClient();\n \n@@ -217,16 +217,20 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IO\n \t\t}\n \n \t\t// Request configuration not set in the context\n-\t\tif (context.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {\n-\t\t\t// Use request configuration given by the user, when available\n+\t\tif (!(context instanceof HttpClientContext clientContext && clientContext.getRequestConfig() != null) &&\n+\t\t\t\tcontext.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {\n \t\t\tRequestConfig config = null;\n+\t\t\t// Use request configuration given by the user, when available\n \t\t\tif (httpRequest instanceof Configurable configurable) {\n \t\t\t\tconfig = configurable.getConfig();\n \t\t\t}\n \t\t\tif (config == null) {\n \t\t\t\tconfig = createRequestConfig(client);\n \t\t\t}\n \t\t\tif (config != null) {\n+\t\t\t\tif (context instanceof HttpClientContext clientContext) {\n+\t\t\t\t\tclientContext.setRequestConfig(config);\n+\t\t\t\t}\n \t\t\t\tcontext.setAttribute(HttpClientContext.REQUEST_CONFIG, config);\n \t\t\t}\n \t\t}",
    "output": "Call get/setRequestConfig for HttpClient 5.4 compatibility Includes upgrade to HttpClient 5.4.1 while retaining a HttpClient 5.1 baseline"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -1872,7 +1872,10 @@ public static HttpHeaders writableHttpHeaders(HttpHeaders headers) {\n \t\tif (headers == EMPTY) {\n \t\t\treturn new HttpHeaders();\n \t\t}\n-\t\treturn (headers instanceof ReadOnlyHttpHeaders ? new HttpHeaders(headers.headers) : headers);\n+\t\twhile (headers.headers instanceof HttpHeaders wrapped) {\n+\t\t\theaders = wrapped;\n+\t\t}\n+\t\treturn new HttpHeaders(headers.headers);\n \t}\n \n \t/**\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -57,6 +57,14 @@ class HttpHeadersTests {\n \tprivate final HttpHeaders headers = new HttpHeaders();\n \n \n+\t@Test\n+\tvoid writableHttpHeadersUnwrapsMultiple() {\n+\t\tHttpHeaders originalExchangeHeaders = HttpHeaders.readOnlyHttpHeaders(new HttpHeaders());\n+\t\tHttpHeaders firewallHeaders = new HttpHeaders(originalExchangeHeaders);\n+\t\tHttpHeaders writeable = HttpHeaders.writableHttpHeaders(firewallHeaders);\n+\t\twriteable.setContentType(MediaType.APPLICATION_JSON);\n+\t}\n+\n \t@Test\n \tvoid getOrEmpty() {\n \t\tString key = \"FOO\";",
    "output": "HttpHeaders.writeableHttpHeaders should unwrap many times Prior to this commit, the `HttpHeaders.writeableHttpHeaders` would only consider headers read-only instances that were wrapped once by `HttpHeaders.readOnlyHttpHeaders`. This does not work when other `HttpHeaders` wrappers are involved in the chain. This commit ensures that `writeableHttpHeaders` unwraps all headers instances down to the actual multivalue map and create a new headers instance out of it"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java b/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/client/RestClientIntegrationTests.java\n@@ -824,13 +824,14 @@ void retrieveDefaultCookiesAsCookieHeader(ClientHttpRequestFactory requestFactor\n \t\t\t\t.build();\n \n \t\trestClientWithCookies.get()\n-\t\t\t.uri(\"/greeting\")\n-\t\t\t.header(\"X-Test-Header\", \"testvalue\")\n-\t\t\t.retrieve();\n+\t\t\t\t.uri(\"/greeting\")\n+\t\t\t\t.header(\"X-Test-Header\", \"testvalue\")\n+\t\t\t\t.retrieve()\n+\t\t\t\t.body(String.class);\n \n \t\texpectRequest(request ->\n-\t\t\tassertThat(request.getHeader(HttpHeaders.COOKIE))\n-\t\t\t\t\t.isEqualTo(\"testCookie=firstValue; testCookie=secondValue\")\n+\t\t\t\tassertThat(request.getHeader(HttpHeaders.COOKIE))\n+\t\t\t\t\t\t.isEqualTo(\"testCookie=firstValue; testCookie=secondValue\")\n \t\t);\n \t}\n ",
    "output": "Fix test causing failure in RestClientObservationTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -116,13 +116,10 @@ public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request)\n \tpublic void cleanupMultipart(MultipartHttpServletRequest request) {\n \t\tif (!(request instanceof AbstractMultipartHttpServletRequest abstractMultipartHttpServletRequest) ||\n \t\t\t\tabstractMultipartHttpServletRequest.isResolved()) {\n-\t\t\t// To be on the safe side: explicitly delete the parts,\n-\t\t\t// but only actual file parts (for Resin compatibility)\n+\n \t\t\ttry {\n \t\t\t\tfor (Part part : request.getParts()) {\n-\t\t\t\t\tif (request.getFile(part.getName()) != null) {\n-\t\t\t\t\t\tpart.delete();\n-\t\t\t\t\t}\n+\t\t\t\t\tpart.delete();\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable ex) {",
    "output": "Remove HTTP parts workaround for Resin A workaround was added for the Resin Servlet container in . This avoids attempting to delete parts that are not named, because the `part.delete` call would fail for non-file entries. This can be problematic for files that are unnamed as they might not be removed by the Framework. This commit removes this workaround as Resin is not supported anymore"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -1136,7 +1136,7 @@ public void setHost(@Nullable InetSocketAddress host) {\n \t\t\tset(HOST, value);\n \t\t}\n \t\telse {\n-\t\t\tremove(HOST, null);\n+\t\t\tremove(HOST);\n \t\t}\n \t}\n \n\ndiff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -213,6 +213,15 @@ void ipv6Host() {\n \t\tassertThat(headers.getFirst(\"Host\")).as(\"Invalid Host header\").isEqualTo(\"[::1]\");\n \t}\n \n+\t@Test\n+\tvoid hostDeletion() {\n+\t\tInetSocketAddress host = InetSocketAddress.createUnresolved(\"localhost\", 8080);\n+\t\theaders.setHost(host);\n+\t\theaders.setHost(null);\n+\t\tassertThat(headers.getHost()).as(\"Host is not deleted\").isEqualTo(null);\n+\t\tassertThat(headers.getFirst(\"Host\")).as(\"Host is not deleted\").isEqualTo(null);\n+\t}\n+\n \t@Test\n \tvoid eTagWithoutQuotes() {\n \t\theaders.setETag(\"v2.6\");",
    "output": "Fix HttpHeaders.setHostto remove the header"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanBeanOverrideHandler.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanBeanOverrideHandler.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanBeanOverrideHandler.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanBeanOverrideHandler.java\n@@ -58,8 +58,8 @@ protected Object createOverrideInstance(String beanName, @Nullable BeanDefinitio\n \t\t\treturn this.factoryMethod.invoke(null);\n \t\t}\n \t\tcatch (IllegalAccessException | InvocationTargetException ex) {\n-\t\t\tthrow new IllegalStateException(\"Failed to invoke bean overriding method \" + this.factoryMethod.getName() +\n-\t\t\t\t\t\"; a static method with no formal parameters is expected\", ex);\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\"Failed to invoke @TestBean factory method: \" + this.factoryMethod, ex);\n \t\t}\n \t}\n ",
    "output": "Polish exception message"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -366,10 +366,10 @@ else if (StompCommand.UNSUBSCRIBE.equals(command)) {\n \t\t\t\t\tlogger.debug(\"Failed to send message to MessageChannel in session \" + session.getId(), ex);\n \t\t\t\t}\n \t\t\t\telse if (logger.isErrorEnabled()) {\n-\t\t\t\t\t// Skip unsent CONNECT messages (likely auth issues)\n-\t\t\t\t\tif (!isConnect || sent) {\n-\t\t\t\t\t\tlogger.error(\"Failed to send message to MessageChannel in session \" + session.getId() +\n-\t\t\t\t\t\t\t\t\":\" + ex.getMessage());\n+\t\t\t\t\t// Skip for unsent CONNECT or SUBSCRIBE (likely authentication/authorization issues)\n+\t\t\t\t\tif (sent || !(isConnect || StompCommand.SUBSCRIBE.equals(command))) {\n+\t\t\t\t\t\tlogger.error(\"Failed to send message to MessageChannel in session \" +\n+\t\t\t\t\t\t\t\tsession.getId() + \":\" + ex.getMessage());\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\thandleError(session, ex, message);",
    "output": "Reduce logging for unsent SUBSCRIBE messages"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -243,15 +243,6 @@ public static UriComponentsBuilder fromHttpUrl(String httpUrl) throws InvalidUrl\n \t\treturn fromUriString(httpUrl);\n \t}\n \n-\tprivate static void checkSchemeAndHost(String uri, @Nullable String scheme, @Nullable String host) {\n-\t\tif (StringUtils.hasLength(scheme) && scheme.startsWith(\"http\") && !StringUtils.hasLength(host)) {\n-\t\t\tthrow new IllegalArgumentException(\"[\" + uri + \"] is not a valid HTTP URL\");\n-\t\t}\n-\t\tif (StringUtils.hasLength(host) && host.startsWith(\"[\") && !host.endsWith(\"]\")) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid IPV6 host in [\" + uri + \"]\");\n-\t\t}\n-\t}\n-\n \t/**\n \t * Create a new {@code UriComponents} object from the URI associated with\n \t * the given HttpRequest while also overlaying with values from the headers",
    "output": "Remove unused method in UriComponentsBuilder This commit removes HierarchicalUriComponents#checkSchemeAndHost unused private method"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java b/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java\n--- a/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java\n+++ b/spring-context/src/test/java/org/springframework/cache/interceptor/CacheErrorHandlerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -76,7 +76,6 @@ void setup() {\n \t\tthis.simpleService = context.getBean(SimpleService.class);\n \t}\n \n-\n \t@AfterEach\n \tvoid closeContext() {\n \t\tthis.context.close();\n@@ -95,6 +94,7 @@ void getFail() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void getSyncFail() {\n \t\tUnsupportedOperationException exception = new UnsupportedOperationException(\"Test exception on get\");\n \t\twillThrow(exception).given(this.cache).get(eq(0L), any(Callable.class));\n@@ -127,7 +127,6 @@ public void getMonoFail() {\n \t\tverify(this.cache).retrieve(eq(0L));\n \t}\n \n-\n \t@Test\n \tpublic void getFluxFail() {\n \t\tUnsupportedOperationException exception = new UnsupportedOperationException(\"Test exception on get\");",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -322,7 +322,7 @@ private void addConventionMappings() {\n \t\t\t\tlogger.isWarnEnabled()) {\n \t\t\tlogger.warn(\"\"\"\n \t\t\t\t\tSupport for convention-based annotation attribute overrides is deprecated \\\n-\t\t\t\t\tand will be removed in Spring Framework 6.2. Please annotate the following \\\n+\t\t\t\t\tand will be removed in Spring Framework 7.0. Please annotate the following \\\n \t\t\t\t\tattributes in @%s with appropriate @AliasFor declarations: %s\"\"\"\n \t\t\t\t\t\t.formatted(rootAnnotationTypeName, conventionMappedAttributes));\n \t\t}",
    "output": "Upgrade warning for use of convention-based annotation attribute overrides"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java b/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java\n--- a/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java\n@@ -142,10 +142,11 @@ public void handleNext(InternalParser parser, char c, int i) {\n \t\t\t\t\tcase ';':\n \t\t\t\t\tcase '?':\n \t\t\t\t\tcase '#':\n+\t\t\t\t\tcase '.':\n+\t\t\t\t\t\tparser.index(--i);\n+\t\t\t\t\t\tparser.advanceTo(PATH);\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n-\t\t\t\t\t\tif (c == '.') {\n-\t\t\t\t\t\t\tparser.index(--i);\n-\t\t\t\t\t\t}\n \t\t\t\t\t\tparser.advanceTo(PATH);\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix failing tests in spring-test after recent changes"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n@@ -238,10 +238,6 @@ void fromUriStringIPv6Host() {\n \t\tUriComponents result = UriComponentsBuilder\n \t\t\t\t.fromUriString(\"http://[1abc:2abc:3abc::5ABC:6abc]:8080/resource\").build().encode();\n \t\tassertThat(result.getHost()).isEqualToIgnoringCase(\"[1abc:2abc:3abc::5ABC:6abc]\");\n-\n-\t\tUriComponents resultIPv4compatible = UriComponentsBuilder\n-\t\t\t\t.fromUriString(\"http://[::192.168.1.1]:8080/resource\").build().encode();\n-\t\tassertThat(resultIPv4compatible.getHost()).isEqualTo(\"[::c0a8:101]\");\n \t}\n \n \t@Test",
    "output": "Remove test for IPv4 compatible IPv6 address An example of this can be found in RFC 2732, but it is obsoleted by RFC 3986 whose syntax for IPv6address does not allow dots. Also, Appendix D of RFC 3986 As [RFC2732] defers to [RFC3513] for definition of an IPv6 literal address, which, unfortunately, lacks an ABNF description of IPv6address, we created a new ABNF rule for IPv6address that matches the text representations defined by Section 2.2 of [RFC3513]"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java\n@@ -83,9 +83,6 @@ public AotContribution(Class<?> beanClass) {\n \t\tpublic void applyTo(GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode) {\n \t\t\tRuntimeHints runtimeHints = generationContext.getRuntimeHints();\n \t\t\tClass<?>[] proxyInterfaces = ClassUtils.getAllInterfacesForClass(this.beanClass);\n-\t\t\tif (proxyInterfaces.length == 0) {\n-\t\t\t\treturn;\n-\t\t\t}\n \t\t\tfor (Class<?> proxyInterface : proxyInterfaces) {\n \t\t\t\truntimeHints.reflection().registerType(proxyInterface, MemberCategory.INVOKE_DECLARED_METHODS);\n \t\t\t}",
    "output": "Remove redundant array length check"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -36,6 +36,23 @@\n  */\n class StringUtilsTests {\n \n+\t@Test\n+\tvoid hasLengthBlank() {\n+\t\tString blank = \"          \";\n+\t\tassertThat(StringUtils.hasLength(blank)).isTrue();\n+\t}\n+\n+\t@Test\n+\tvoid hasLengthNullEmpty() {\n+\t\tassertThat(StringUtils.hasLength(null)).isFalse();\n+\t\tassertThat(StringUtils.hasLength(\"\")).isFalse();\n+\t}\n+\n+\t@Test\n+\tvoid hasLengthValid() {\n+\t\tassertThat(StringUtils.hasLength(\"t\")).isTrue();\n+\t}\n+\n \t@Test\n \tvoid hasTextBlank() {\n \t\tString blank = \"          \";",
    "output": "Add unit tests for StringUtils.hasLength"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java b/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java\n--- a/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/expression/MapAccessor.java\n@@ -43,7 +43,6 @@ public class MapAccessor implements CompilablePropertyAccessor {\n \n \t/**\n \t * Create a new {@code MapAccessor} for reading as well as writing.\n-\t * @since 6.2\n \t * @see #MapAccessor(boolean)\n \t */\n \tpublic MapAccessor() {",
    "output": "Remove Javadoc @⁠since tag from MapAccessor default constructor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -72,6 +72,8 @@ public abstract class StringUtils {\n \n \tprivate static final String WINDOWS_FOLDER_SEPARATOR = \"\\\\\";\n \n+\tprivate static final char WINDOWS_FOLDER_SEPARATOR_CHAR = '\\\\';\n+\n \tprivate static final String DOUBLE_BACKSLASHES = \"\\\\\\\\\";\n \n \tprivate static final String TOP_PATH = \"..\";\n@@ -712,7 +714,7 @@ public static String cleanPath(String path) {\n \n \t\tString normalizedPath;\n \t\t// Optimize when there is no backslash\n-\t\tif (path.indexOf('\\\\') != -1) {\n+\t\tif (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {\n \t\t\tnormalizedPath = replace(path, DOUBLE_BACKSLASHES, FOLDER_SEPARATOR);\n \t\t\tnormalizedPath = replace(normalizedPath, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\n \t\t}\n@@ -722,7 +724,7 @@ public static String cleanPath(String path) {\n \t\tString pathToUse = normalizedPath;\n \n \t\t// Shortcut if there is no work to do\n-\t\tif (pathToUse.indexOf('.') == -1) {\n+\t\tif (pathToUse.indexOf(EXTENSION_SEPARATOR) == -1) {\n \t\t\treturn pathToUse;\n \t\t}\n ",
    "output": "Polish use of constants in StringUtils The hardcoded '.' and '\\\\' literals have been replaced by the use of EXTENSION_SEPARATOR and WINDOWS_FOLDER_SEPARATOR_CHAR"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n@@ -119,8 +119,7 @@ private void replaceDefinition(ConfigurableListableBeanFactory beanFactory, Over\n \t\tString beanNameIncludingFactory;\n \t\tBeanDefinition existingBeanDefinition = null;\n \t\tif (beanName == null) {\n-\t\t\tbeanNameIncludingFactory = getBeanNameForType(\n-\t\t\t\t\tbeanFactory, overrideMetadata, pseudoBeanDefinition, enforceExistingDefinition);\n+\t\t\tbeanNameIncludingFactory = getBeanNameForType(beanFactory, overrideMetadata, enforceExistingDefinition);\n \t\t\tif (beanNameIncludingFactory == null) {\n \t\t\t\tbeanNameIncludingFactory = beanNameGenerator.generateBeanName(pseudoBeanDefinition, registry);\n \t\t\t}\n@@ -200,7 +199,7 @@ private void wrapBean(ConfigurableListableBeanFactory beanFactory, OverrideMetad\n \n \t@Nullable\n \tprivate String getBeanNameForType(ConfigurableListableBeanFactory beanFactory, OverrideMetadata overrideMetadata,\n-\t\t\tRootBeanDefinition beanDefinition, boolean enforceExistingDefinition) {\n+\t\t\tboolean enforceExistingDefinition) {\n \n \t\tSet<String> candidateNames = getExistingBeanNamesByType(beanFactory, overrideMetadata, true);\n \t\tint candidateCount = candidateNames.size();",
    "output": "Remove obsolete method parameter"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHandlerMapping.java\n@@ -22,6 +22,7 @@\n import org.springframework.context.Lifecycle;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n import org.springframework.lang.Nullable;\n import org.springframework.web.context.ServletContextAware;\n import org.springframework.web.servlet.HandlerExecutionChain;\n@@ -126,7 +127,7 @@ private boolean matchWebSocketUpgrade(@Nullable Object handler, HttpServletReque\n \t\thandler = (handler instanceof HandlerExecutionChain chain ? chain.getHandler() : handler);\n \t\tif (this.webSocketUpgradeMatch && handler instanceof WebSocketHttpRequestHandler) {\n \t\t\tString header = request.getHeader(HttpHeaders.UPGRADE);\n-\t\t\treturn (request.getMethod().equals(\"GET\") &&\n+\t\t\treturn (HttpMethod.GET.matches(request.getMethod()) &&\n \t\t\t\t\theader != null && header.equalsIgnoreCase(\"websocket\"));\n \t\t}\n \t\treturn true;",
    "output": "Use HttpMethod.GET for better readability"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -64,6 +64,7 @@\n  * @author Rob Harrop\n  * @author Sam Brannen\n  * @author Sebastien Deleuze\n+ * @author Sungbin Yang\n  * @since 1.1\n  * @see TypeUtils\n  * @see ReflectionUtils\n@@ -694,7 +695,7 @@ public static String convertClassNameToResourcePath(String className) {\n \tpublic static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {\n \t\tAssert.notNull(resourceName, \"Resource name must not be null\");\n \t\tif (!resourceName.startsWith(\"/\")) {\n-\t\t\treturn classPackageAsResourcePath(clazz) + '/' + resourceName;\n+\t\t\treturn classPackageAsResourcePath(clazz) + PATH_SEPARATOR + resourceName;\n \t\t}\n \t\treturn classPackageAsResourcePath(clazz) + resourceName;\n \t}",
    "output": "Refactor: Replace hardcoded path separator with PATH_SEPARATOR constant Replaced the hardcoded '/' path separator with the `PATH_SEPARATOR` constant to improve code readability and maintainability. This change ensures consistency across the codebase when handling path separators"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -206,7 +206,10 @@ private Object buildProxy(@Nullable ClassLoader classLoader, boolean classOnly)\n \t\t\tenhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));\n \t\t\tenhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);\n \t\t\tenhancer.setAttemptLoad(true);\n-\t\t\tenhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(classLoader, undeclaredThrowableStrategy));\n+\t\t\tenhancer.setStrategy(KotlinDetector.isKotlinType(proxySuperClass) ?\n+\t\t\t\t\tnew ClassLoaderAwareGeneratorStrategy(classLoader) :\n+\t\t\t\t\tnew ClassLoaderAwareGeneratorStrategy(classLoader, undeclaredThrowableStrategy)\n+\t\t\t);\n \n \t\t\tCallback[] callbacks = getCallbacks(rootClass);\n \t\t\tClass<?>[] types = new Class<?>[callbacks.length];",
    "output": "Fix a regression in Cglib Kotlin proxies The commit skips using UndeclaredThrowableStrategy for Kotlin classes in CglibAopProxy in order to fix a related regression caused by"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,6 +18,7 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n+import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -72,7 +73,7 @@ public abstract class AbstractSockJsService implements SockJsService, CorsConfig\n \tprivate static final long ONE_YEAR = TimeUnit.DAYS.toSeconds(365);\n \n \n-\tprivate static final Random random = new Random();\n+\tprivate static final Random random = new SecureRandom();\n \n \tprotected final Log logger = LogFactory.getLog(getClass());\n ",
    "output": "Improve random source in SockJS server support Prior to this commit, the SockJs server support would use `java.util.Random` to send a random value to clients when they request the `/info` endpoint. Per protocol, clients can use this value as a source of entropy for generating a random session id. In practice, this is not used by clients. For example, the SockJS javascript client is using a cryptographically safe API to generate session ids. While this has no concrete effect on known clients, this commit improves the random source in the server support by switching to `java.security.SecureRandom`"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n@@ -901,7 +901,7 @@ public static String nullSafeToString(@Nullable short[] array) {\n \t */\n \tpublic static String nullSafeConciseToString(@Nullable Object obj) {\n \t\tif (obj == null) {\n-\t\t\treturn \"null\";\n+\t\t\treturn NULL_STRING;\n \t\t}\n \t\tif (obj instanceof Optional<?> optional) {\n \t\t\treturn (optional.isEmpty() ? \"Optional.empty\" :",
    "output": "Replace \"null\" with NULL_STRING constant in ObjectUtils.nullSafeConciseToString"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -1119,6 +1119,7 @@ private static String prefix(Class<?> clazz) {\n \tvoid unwrapOptional() {\n \n \t\tassertThat(ObjectUtils.unwrapOptional(null)).isNull();\n+\t\tassertThat(ObjectUtils.unwrapOptional(\"some value\")).isEqualTo(\"some value\");\n \t\tassertThat(ObjectUtils.unwrapOptional(Optional.empty())).isNull();\n \t\tassertThat(ObjectUtils.unwrapOptional(Optional.of(\"some value\"))).isEqualTo(\"some value\");\n ",
    "output": "Add a missing test case for ObjectUtils#unwrapOptional"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -62,6 +62,7 @@\n  * @author Rick Evans\n  * @author Sam Brannen\n  * @author Hyunjin Choi\n+ * @author Ngoc Nhan\n  */\n class ObjectUtilsTests {\n \n@@ -1114,4 +1115,22 @@ private static String prefix(Class<?> clazz) {\n \t\t}\n \t}\n \n+\t@Test\n+\tvoid unwrapOptional() {\n+\n+\t\tassertThat(ObjectUtils.unwrapOptional(null)).isNull();\n+\t\tassertThat(ObjectUtils.unwrapOptional(Optional.empty())).isNull();\n+\t\tassertThat(ObjectUtils.unwrapOptional(Optional.of(\"some value\"))).isEqualTo(\"some value\");\n+\n+\t\tOptional<Optional<Object>> nestedEmptyOptional = Optional.of(Optional.empty());\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t.isThrownBy(() -> ObjectUtils.unwrapOptional(nestedEmptyOptional))\n+\t\t\t.withMessage(\"Multi-level Optional usage not supported\");\n+\n+\t\tOptional<Optional<String>> nestedStringOptional = Optional.of(Optional.of(\"some value\"));\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t.isThrownBy(() -> ObjectUtils.unwrapOptional(nestedStringOptional))\n+\t\t\t.withMessage(\"Multi-level Optional usage not supported\");\n+\t}\n+\n }",
    "output": "Add test cases for ObjectUtils#unwrapOptional"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n@@ -173,10 +173,7 @@ public static boolean isEmpty(@Nullable Object obj) {\n \t@Nullable\n \tpublic static Object unwrapOptional(@Nullable Object obj) {\n \t\tif (obj instanceof Optional<?> optional) {\n-\t\t\tif (optional.isEmpty()) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\tObject result = optional.get();\n+\t\t\tObject result = optional.orElse(null);\n \t\t\tAssert.isTrue(!(result instanceof Optional), \"Multi-level Optional usage not supported\");\n \t\t\treturn result;\n \t\t}",
    "output": "Simplify ObjectUtils#unwrapOptional This commit replaces optional.isEmptyand optional.getwith optional.orElse(null) for better efficiency and readability"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java\n--- a/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -36,7 +36,6 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-import org.assertj.core.api.IntegerAssert;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.beans.BeanWrapper;\n@@ -2042,7 +2041,7 @@ void setAutoGrowCollectionLimit() {\n \n \t\tbinder.bind(pvs);\n \t\tassertThat(tb.getIntegerList()).hasSize(257);\n-\t\tassertThat(tb.getIntegerList(), IntegerAssert.class).element(256).isEqualTo(1);\n+\t\tassertThat(tb.getIntegerList()).element(256).isEqualTo(1);\n \t\tassertThat(binder.getBindingResult().getFieldValue(\"integerList[256]\")).isEqualTo(1);\n \t}\n ",
    "output": "Avoid usage of deprecated AssertJ feature"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java\n@@ -122,7 +122,7 @@ public final ResolvableType getBeanType() {\n \t * matching bean of type {@link #getBeanType()}.\n \t */\n \t@Nullable\n-\tpublic String getBeanName() {\n+\tpublic final String getBeanName() {\n \t\treturn this.beanName;\n \t}\n ",
    "output": "Add missing final declaration to OverrideMetadata.getBeanName"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -437,8 +437,9 @@ public Object postProcessAfterInitialization(Object bean, String beanName) {\n \t\t\t\t\tlogger.warn(\"Bean '\" + beanName + \"' of type [\" + bean.getClass().getName() +\n \t\t\t\t\t\t\t\"] is not eligible for getting processed by all BeanPostProcessors \" +\n \t\t\t\t\t\t\t\"(for example: not eligible for auto-proxying). Is this bean getting eagerly \" +\n-\t\t\t\t\t\t\t\"injected into a currently created BeanPostProcessor \" + bppsInCreation + \"? \" +\n-\t\t\t\t\t\t\t\"Check the corresponding BeanPostProcessor declaration and its dependencies.\");\n+\t\t\t\t\t\t\t\"injected/applied to a currently created BeanPostProcessor \" + bppsInCreation + \"? \" +\n+\t\t\t\t\t\t\t\"Check the corresponding BeanPostProcessor declaration and its dependencies/advisors. \" +\n+\t\t\t\t\t\t\t\"If this bean does not have to be post-processed, declare it with ROLE_INFRASTRUCTURE.\");\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn bean;",
    "output": "Refine warn log message with advisor and ROLE_INFRASTRUCTURE hints"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java\n@@ -37,6 +37,9 @@\n  */\n public abstract class TransactionContextManager {\n \n+\tprivate static final NoTransactionInContextException NO_TRANSACTION_IN_CONTEXT_EXCEPTION =\n+\t\t\tnew NoTransactionInContextException();\n+\n \tprivate TransactionContextManager() {\n \t}\n \n@@ -60,7 +63,7 @@ public static Mono<TransactionContext> currentContext() {\n \t\t\t\t\treturn Mono.just(holder.currentContext());\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn Mono.error(new NoTransactionInContextException());\n+\t\t\treturn Mono.error(NO_TRANSACTION_IN_CONTEXT_EXCEPTION);\n \t\t});\n \t}\n ",
    "output": "Reuse NoTransactionInContextException instances New NoTransactionInContextException instances are created frequently in TransactionContextManager#currentContextwhen there is no transaction, we could reuse the same instance instead to reduce the GC pressure"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapterTests.java b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapterTests.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapterTests.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapterTests.java\n@@ -28,7 +28,6 @@\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.RestrictedTransactionalEventListenerFactory;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.event.TransactionalApplicationListenerMethodAdapterTests.SampleEvents.SampleEventsWithTransactionalAnnotation;\n import org.springframework.transaction.support.TransactionSynchronization;\n import org.springframework.transaction.support.TransactionSynchronizationManager;\n import org.springframework.util.ClassUtils;\n\ndiff --git a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n@@ -611,7 +611,7 @@ interface TransactionalComponentTestInterface {\n \t}\n \n \n-\t@Transactional\n+\t@Transactional(propagation = Propagation.REQUIRES_NEW)\n \t@Component\n \tstatic class TransactionalComponentTestListenerWithInterface extends BaseTransactionalTestListener implements\n \t\t\tTransactionalComponentTestInterface {",
    "output": "Adapt transactional test component declaration"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -890,7 +890,7 @@ public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {\n \t\t\t\t\t\tqualifier.addMetadataAttribute(attribute);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n-\t\t\t\t\t\terror(\"Qualifier 'attribute' tag must have a 'name' and 'value'\", attributeEle);\n+\t\t\t\t\t\terror(\"Qualifier 'attribute' tag must have a 'key' and 'value'\", attributeEle);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Fix error message for XML qualifier 'attribute' tag"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.IOException;\n import java.io.OutputStream;\n import java.lang.reflect.Type;\n+import java.nio.charset.Charset;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpOutputMessage;\n@@ -60,6 +61,17 @@ protected AbstractGenericHttpMessageConverter(MediaType... supportedMediaTypes)\n \t\tsuper(supportedMediaTypes);\n \t}\n \n+\t/**\n+\t * Construct an {@code AbstractGenericHttpMessageConverter} with a default charset and\n+\t * multiple supported media types.\n+\t * @param defaultCharset the default character set\n+\t * @param supportedMediaTypes the supported media types\n+\t * @since 6.2\n+\t */\n+\tprotected AbstractGenericHttpMessageConverter(Charset defaultCharset, MediaType... supportedMediaTypes) {\n+\t\tsuper(defaultCharset, supportedMediaTypes);\n+\t}\n+\n \n \t@Override\n \tprotected boolean supports(Class<?> clazz) {",
    "output": "Add an AbstractGenericHttpMessageConverter constructor This commit adds a new AbstractGenericHttpMessageConverter(Charset, MediaType...) constructor, similar to the one present in AbstractHttpMessageConverter"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterTests.java\n@@ -273,6 +273,7 @@ void multipleOnCompletionCallbacks() throws Exception {\n \tvoid multipleOnErrorCallbacks() throws Exception {\n \t\tthis.emitter.initialize(this.handler);\n \n+\t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n \t\tArgumentCaptor<Consumer<Throwable>> captor = ArgumentCaptor.<Consumer<Throwable>, Consumer>forClass(Consumer.class);\n \t\tverify(this.handler).onError(captor.capture());\n ",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactoryTests.java\n@@ -182,6 +182,7 @@ static Stream<HttpMethod> safeHttpMethods() {\n \t\treturn Stream.of(HttpMethod.GET, HttpMethod.OPTIONS, HttpMethod.TRACE);\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate RequestConfig retrieveRequestConfig(HttpComponentsClientHttpRequestFactory factory) throws Exception {\n \t\tURI uri = URI.create(baseUrl + \"/status/ok\");\n \t\tHttpComponentsClientHttpRequest request = (HttpComponentsClientHttpRequest)",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java\n@@ -205,6 +205,7 @@ public void setHttpContextFactory(BiFunction<HttpMethod, URI, HttpContext> httpC\n \n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {\n \t\tHttpClient client = getHttpClient();\n ",
    "output": "Upgrade to Apache HttpClient 5.4 This commit also updates the external Javadoc link to avoid the following warning in the build. URL https://hc.apache.org/httpcomponents-.2.x/current/httpclient5/apidocs/package-list was redirected to https://hc.apache.org/httpcomponents-.4.x/current/httpclient5/apidocs/package-list"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n@@ -29,6 +29,7 @@\n import org.springframework.util.ConcurrentReferenceHashMap;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatNoException;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.junit.jupiter.api.condition.JRE.JAVA_18;\n \n@@ -107,8 +108,9 @@ void concurrentReferenceHashMapSegmentClear() {\n \t\t\t}\n \t\t}, future2);\n \n-\t\tCompletableFuture.allOf(future1, future2).join();\n-\t\tassertThat(map).isEmpty();\n+\t\t//ensure blockhound doesn't trigger\n+\t\tfinal CompletableFuture<Void> allOf = CompletableFuture.allOf(future1, future2);\n+\t\tassertThatNoException().isThrownBy(allOf::join);\n \t}\n \n \tprivate void testNonBlockingTask(NonBlockingTask task) {",
    "output": "Polishing test Assert that BlockHound doesn't trigger, rather than assertions on a condition that makes the test flakky because concurrency is involved"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java\n@@ -212,7 +212,7 @@ else if (resource instanceof ClassPathResource classPathResource) {\n \t\t\treturn true;\n \t\t}\n \t\tlocationPath = (locationPath.endsWith(\"/\") || locationPath.isEmpty() ? locationPath : locationPath + \"/\");\n-\t\treturn (resourcePath.startsWith(locationPath) && !isInvalidEncodedInputPath(resourcePath));\n+\t\treturn (resourcePath.startsWith(locationPath) && !isInvalidEncodedResourcePath(resourcePath));\n \t}\n \n \tprivate boolean isInvalidEncodedResourcePath(String resourcePath) {",
    "output": "Use correct method to check encoded resource path Closes"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -442,10 +442,13 @@ public static class SpringCoreBlockHoundIntegration implements BlockHoundIntegra\n \t\tpublic void applyTo(BlockHound.Builder builder) {\n \t\t\t// Avoid hard references potentially anywhere in spring-core (no need for structural dependency)\n \n-\t\t\tString className = \"org.springframework.util.ConcurrentReferenceHashMap$Segment\";\n-\t\t\tbuilder.allowBlockingCallsInside(className, \"doTask\");\n-\t\t\tbuilder.allowBlockingCallsInside(className, \"clear\");\n-\t\t\tbuilder.allowBlockingCallsInside(className, \"restructure\");\n+\t\t\tString segmentClassName = \"org.springframework.util.ConcurrentReferenceHashMap$Segment\";\n+\t\t\tbuilder.allowBlockingCallsInside(segmentClassName, \"doTask\");\n+\t\t\tbuilder.allowBlockingCallsInside(segmentClassName, \"clear\");\n+\t\t\tbuilder.allowBlockingCallsInside(segmentClassName, \"restructure\");\n+\n+\t\t\tString referenceManagerClassName = \"org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager\";\n+\t\t\tbuilder.allowBlockingCallsInside(referenceManagerClassName, \"pollForPurge\");\n \t\t}\n \t}\n ",
    "output": "Add BlockHound exception for ConcurrentReferenceHashMap$ReferenceManager This commit adds a SpringCoreBlockHoundIntegration configuration to allows `pollForPurge` method to block"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.17.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.18.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to SLF4J 2.0.16, Tomcat 10.1.29, Jetty 12.0.13, Netty 4.1.113, Undertow 2.3.17, AssertJ 3.26.3, Checkstyle 10.18.1"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java\n@@ -32,7 +32,6 @@\n \n import org.springframework.core.codec.Hints;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n@@ -46,7 +46,6 @@\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourceRegion;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpRange;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilder.java\n@@ -37,7 +37,6 @@\n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.codec.Hints;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatusCode;\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java\n@@ -31,7 +31,6 @@\n \n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.http.CacheControl;\n-import org.springframework.http.ETag;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatusCode;",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java b/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/MediaTypeFactoryTests.java\n@@ -24,6 +24,7 @@\n \n /**\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  */\n class MediaTypeFactoryTests {\n \n@@ -32,6 +33,7 @@ void getMediaType() {\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.xml\")).contains(MediaType.APPLICATION_XML);\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.js\")).contains(MediaType.parseMediaType(\"text/javascript\"));\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.css\")).contains(MediaType.parseMediaType(\"text/css\"));\n+\t\tassertThat(MediaTypeFactory.getMediaType(\"file.wasm\")).contains(MediaType.parseMediaType(\"application/wasm\"));\n \t\tassertThat(MediaTypeFactory.getMediaType(\"file.foobar\")).isNotPresent();\n \t}\n ",
    "output": "Upgrade mime.types This commit updates mime.types based on revision 1918129 of https://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types"
  },
  {
    "input": "diff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java\n@@ -256,6 +256,9 @@ public class MockHttpServletRequest implements HttpServletRequest {\n \t@Nullable\n \tprivate String requestedSessionId;\n \n+\t@Nullable\n+\tprivate String uriTemplate;\n+\n \t@Nullable\n \tprivate String requestURI;\n \n@@ -1284,6 +1287,24 @@ public String getRequestedSessionId() {\n \t\treturn this.requestedSessionId;\n \t}\n \n+\t/**\n+\t * Set the original URI template used to prepare the request, if any.\n+\t * @param uriTemplate the URI template used to set up the request, if any\n+\t * @since 6.2\n+\t */\n+\tpublic void setUriTemplate(@Nullable String uriTemplate) {\n+\t\tthis.uriTemplate = uriTemplate;\n+\t}\n+\n+\t/**\n+\t * Return the original URI template used to prepare the request, if any.\n+\t * @since 6.2\n+\t */\n+\t@Nullable\n+\tpublic String getUriTemplate() {\n+\t\treturn this.uriTemplate;\n+\t}\n+\n \tpublic void setRequestURI(@Nullable String requestURI) {\n \t\tthis.requestURI = requestURI;\n \t}",
    "output": "Sync MockHttpServletRequest implementations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -647,7 +647,7 @@ public Annotation[] getParameterAnnotations() {\n \t\t\t\t// for inner classes, so access it with the actual parameter index lowered by 1\n \t\t\t\tindex = this.parameterIndex - 1;\n \t\t\t}\n-\t\t\tparamAnns = (index >= 0 && index < annotationArray.length ?\n+\t\t\tparamAnns = (index >= 0 && index < annotationArray.length && annotationArray[index].length > 0 ?\n \t\t\t\t\tadaptAnnotationArray(annotationArray[index]) : EMPTY_ANNOTATION_ARRAY);\n \t\t\tthis.parameterAnnotations = paramAnns;\n \t\t}\n@@ -916,7 +916,7 @@ public Annotation[] getParameterAnnotations() {\n \t\t\t\t\t\t\t\tmerged.add(fieldAnn);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tanns = merged.toArray(new Annotation[0]);\n+\t\t\t\t\t\tanns = merged.toArray(EMPTY_ANNOTATION_ARRAY);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tcatch (NoSuchFieldException | SecurityException ex) {",
    "output": "Avoid storing duplicate empty array in MethodParameter field Avoid storing duplicate empty arrays in the parameterAnnotations field of MethodParameter"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java b/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJAutoProxyCreatorTests.java\n@@ -609,7 +609,7 @@ SupplierAdvice supplierAdvice() {\n \t@Aspect\n \tstatic class SupplierAdvice {\n \n-\t\t@Around(\"execution(public * org.springframework.aop.aspectj.autoproxy..*.*(..))\")\n+\t\t@Around(\"execution(* java.util.function.Supplier+.get())\")\n \t\tObject aroundSupplier(ProceedingJoinPoint joinPoint) throws Throwable {\n \t\t\treturn \"advised: \" + joinPoint.proceed();\n \t\t}",
    "output": "Make AspectJ pointcut in test more robust The previous pointcut attempted to match against a local lambda type; however, that pointcut was unreliable and failed sporadically. This commit therefore changes the pointcut so that it specifically targets the getmethod of a subtype of Supplier, which seems to result in reliable pointcut matching"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -371,6 +371,9 @@ else if (bean instanceof SmartLifecycle) {\n \t\t\t\tif (logger.isWarnEnabled()) {\n \t\t\t\t\tlogger.warn(\"Failed to stop bean '\" + beanName + \"'\", ex);\n \t\t\t\t}\n+\t\t\t\tif (bean instanceof SmartLifecycle) {\n+\t\t\t\t\tlatch.countDown();\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}",
    "output": "Avoid shutdown timeout in case of exception on stop"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -34,6 +34,7 @@\n import java.net.URLConnection;\n import java.nio.file.FileSystemNotFoundException;\n import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitOption;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Collections;\n@@ -871,7 +872,7 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t\t\t\t.formatted(rootPath.toAbsolutePath(), subPattern));\n \t\t}\n \n-\t\ttry (Stream<Path> files = Files.walk(rootPath)) {\n+\t\ttry (Stream<Path> files = Files.walk(rootPath, FileVisitOption.FOLLOW_LINKS)) {\n \t\t\tfiles.filter(isMatchingFile).sorted().map(FileSystemResource::new).forEach(result::add);\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Follow symlinks during root path traversal"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java\n@@ -475,7 +475,7 @@ void resolveSignatureWithArray() throws Exception {\n \t}\n \n \t@Test\n-\tvoid spr6063() {\n+\tvoid propertyDescriptorShouldMatchWithCachedDescriptors() {\n \t\tPropertyDescriptor[] descrs = BeanUtils.getPropertyDescriptors(Bean.class);\n \n \t\tPropertyDescriptor keyDescr = BeanUtils.getPropertyDescriptor(Bean.class, \"value\");",
    "output": "Rename test method to clarify its purpose"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -387,16 +387,15 @@ private void setConcurrentResultAndDispatch(@Nullable Object result) {\n \t\tsynchronized (WebAsyncManager.this) {\n \t\t\tif (!this.state.compareAndSet(State.ASYNC_PROCESSING, State.RESULT_SET)) {\n \t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Async result already set: \" +\n-\t\t\t\t\t\t\t\"[\" + this.state.get() + \"], ignored result: \" + result +\n-\t\t\t\t\t\t\t\" for \" + formatUri(this.asyncWebRequest));\n+\t\t\t\t\tlogger.debug(\"Async result already set: [\" + this.state.get() +\n+\t\t\t\t\t\t\t\"], ignored result for \" + formatUri(this.asyncWebRequest));\n \t\t\t\t}\n \t\t\t\treturn;\n \t\t\t}\n \n \t\t\tthis.concurrentResult = result;\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Async result set to: \" + result + \" for \" + formatUri(this.asyncWebRequest));\n+\t\t\t\tlogger.debug(\"Async result set for \" + formatUri(this.asyncWebRequest));\n \t\t\t}\n \n \t\t\tif (this.asyncWebRequest.isAsyncComplete()) {",
    "output": "Stop logging result in WebAsyncManager"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java\n@@ -25,11 +25,13 @@\n import org.springframework.aot.hint.ExecutableMode;\n import org.springframework.aot.hint.ReflectionHints;\n import org.springframework.aot.hint.annotation.ReflectiveProcessor;\n+import org.springframework.core.KotlinDetector;\n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.http.HttpEntity;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Controller;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * {@link ReflectiveProcessor} implementation for {@link Controller} and\n@@ -71,6 +73,11 @@ protected void registerTypeHints(ReflectionHints hints, Class<?> type) {\n \n \tprotected void registerMethodHints(ReflectionHints hints, Method method) {\n \t\thints.registerMethod(method, ExecutableMode.INVOKE);\n+\t\tClass<?> declaringClass = method.getDeclaringClass();\n+\t\tif (KotlinDetector.isKotlinType(declaringClass)) {\n+\t\t\tReflectionUtils.doWithMethods(declaringClass, m -> hints.registerMethod(m, ExecutableMode.INVOKE),\n+\t\t\t\t\tm -> m.getName().equals(method.getName() + \"$default\"));\n+\t\t}\n \t\tfor (Parameter parameter : method.getParameters()) {\n \t\t\tregisterParameterTypeHints(hints, MethodParameter.forParameter(parameter));\n \t\t}",
    "output": "Add native support for Kotlin default values in controllers"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -107,7 +107,8 @@ private void registerReflectionHints(ReflectionHints hints, Set<Type> seen, Type\n \t\t\t\t\t\t\tregisterPropertyHints(hints, seen, method, 0);\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse if ((methodName.startsWith(\"get\") && method.getParameterCount() == 0 && method.getReturnType() != void.class) ||\n-\t\t\t\t\t\t\t\t(methodName.startsWith(\"is\") && method.getParameterCount() == 0 && method.getReturnType() == boolean.class)) {\n+\t\t\t\t\t\t\t\t(methodName.startsWith(\"is\") && method.getParameterCount() == 0\n+\t\t\t\t\t\t\t\t\t\t&& ClassUtils.resolvePrimitiveIfNecessary(method.getReturnType()) == Boolean.class)) {\n \t\t\t\t\t\t\tregisterPropertyHints(hints, seen, method, -1);\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Support Boolean property in BindingReflectionHintsRegistrar"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n@@ -349,9 +349,10 @@ public static Object invokeJoinpointUsingReflection(@Nullable Object target, Met\n \n \t\t// Use reflection to invoke the method.\n \t\ttry {\n-\t\t\tReflectionUtils.makeAccessible(method);\n-\t\t\treturn (coroutinesReactorPresent && KotlinDetector.isSuspendingFunction(method) ?\n-\t\t\t\t\tKotlinDelegate.invokeSuspendingFunction(method, target, args) : method.invoke(target, args));\n+\t\t\tMethod originalMethod = BridgeMethodResolver.findBridgedMethod(method);\n+\t\t\tReflectionUtils.makeAccessible(originalMethod);\n+\t\t\treturn (coroutinesReactorPresent && KotlinDetector.isSuspendingFunction(originalMethod) ?\n+\t\t\t\t\tKotlinDelegate.invokeSuspendingFunction(originalMethod, target, args) : originalMethod.invoke(target, args));\n \t\t}\n \t\tcatch (InvocationTargetException ex) {\n \t\t\t// Invoked method threw a checked exception.",
    "output": "Support invoking bridged suspending functions in AopUtils"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -510,6 +510,9 @@ private Object findInCaches(CacheOperationContext context, Object key,\n \t\t\t\t\t\t\t(value != null ? CompletableFuture.completedFuture(unwrapCacheValue(value)) : null),\n \t\t\t\t\t\t\tinvoker, method, contexts));\n \t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif (this.reactiveCachingHandler != null) {\n \t\t\t\tObject returnValue = this.reactiveCachingHandler.findInCaches(",
    "output": "Avoid CacheAspectSupport#findInCaches fall through to reactive handler Prior to this commit if the return type is a CompletableFuture but a cache get returns null, the execution falls through to the reactiveCachingHandler. This commit ensures that evaluation instead continues onto the next cache (if any)"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java\n@@ -86,9 +86,9 @@ void createWithExplicitDatabaseName() {\n \n \t@Test\n \tvoid createWithGeneratedDatabaseName() {\n-\t\tPredicate<String> urlPredicate = url -> url.startsWith(\"jdbc:hsqldb:mem:\");\n-\t\turlPredicate.and(url -> !url.endsWith(\"dataSource\"));\n-\t\turlPredicate.and(url -> !url.endsWith(\"shouldBeOverriddenByGeneratedName\"));\n+\t\tPredicate<String> urlPredicate = ((Predicate<String>) url -> url.startsWith(\"jdbc:hsqldb:mem:\"))\n+\t\t\t\t.and(url -> !url.endsWith(\"dataSource\"))\n+\t\t\t\t.and(url -> !url.endsWith(\"shouldBeOverriddenByGeneratedName\"));\n \t\tassertCorrectSetupForSingleDataSource(\"jdbc-config-db-name-generated.xml\", urlPredicate);\n \t}\n ",
    "output": "Fix predicate setup in test"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationReactiveSupport.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationReactiveSupport.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationReactiveSupport.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationReactiveSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -244,6 +244,7 @@ public void run() {\n \t\tprivate void subscribe(TrackingSubscriber subscriber, Observation observation) {\n \t\t\tthis.subscriptionTrackerRegistry.add(subscriber);\n \t\t\tif (reactorPresent) {\n+\t\t\t\tobservation.start();\n \t\t\t\tFlux.from(this.publisher)\n \t\t\t\t\t\t.contextWrite(context -> context.put(ObservationThreadLocalAccessor.KEY, observation))\n \t\t\t\t\t\t.subscribe(subscriber);\n@@ -300,7 +301,6 @@ public void run() {\n \t\t@Override\n \t\tpublic void onSubscribe(Subscription subscription) {\n \t\t\tthis.subscription = subscription;\n-\t\t\tthis.observation.start();\n \t\t\tsubscription.request(Integer.MAX_VALUE);\n \t\t}\n ",
    "output": "Start Observation before scope open for Scheduled operation When ScheduledAnnotationReactiveSupport adds the Observation to the context, Reactor opens a scope through the Context Propagation API. This happens before TrackingSubscriber would start the Observation and opening a scope without starting an Observation is invalid. This change moves the Observation start before the scope opening"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n--- a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n@@ -220,13 +220,10 @@ private <T> T readWithMessageConverters(ClientHttpResponse clientResponse, Runna\n \t\t\t\t\treturn (T) messageConverter.read((Class)bodyClass, responseWrapper);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tUnknownContentTypeException unknownContentTypeException = new UnknownContentTypeException(bodyType, contentType,\n+\n+\t\t\tthrow new UnknownContentTypeException(bodyType, contentType,\n \t\t\t\t\tresponseWrapper.getStatusCode(), responseWrapper.getStatusText(),\n \t\t\t\t\tresponseWrapper.getHeaders(), RestClientUtils.getBody(responseWrapper));\n-\t\t\tif (observation != null) {\n-\t\t\t\tobservation.error(unknownContentTypeException);\n-\t\t\t}\n-\t\t\tthrow unknownContentTypeException;\n \t\t}\n \t\tcatch (UncheckedIOException | IOException | HttpMessageNotReadableException exc) {\n \t\t\tThrowable cause;",
    "output": "Remove unnecessary error signal from DefaultRestClient Before UnknownContentTypeException is thrown, it is added to the current Observation but since UnknownContentTypeException is a RestClientException, the exception is added again in one of the catch blocks later on"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n--- a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java\n@@ -196,7 +196,7 @@ private <T> T readWithMessageConverters(ClientHttpResponse clientResponse, Runna\n \n \t\tMediaType contentType = getContentType(clientResponse);\n \n-\t\ttry (clientResponse) {\n+\t\ttry {\n \t\t\tcallback.run();\n \n \t\t\tIntrospectingClientHttpResponse responseWrapper = new IntrospectingClientHttpResponse(clientResponse);\n@@ -240,17 +240,18 @@ private <T> T readWithMessageConverters(ClientHttpResponse clientResponse, Runna\n \t\t\t\t\tResolvableType.forType(bodyType) + \"] and content type [\" + contentType + \"]\", cause);\n \t\t\tif (observation != null) {\n \t\t\t\tobservation.error(restClientException);\n-\t\t\t\tobservation.stop();\n \t\t\t}\n \t\t\tthrow restClientException;\n \t\t}\n \t\tcatch (RestClientException restClientException) {\n \t\t\tif (observation != null) {\n \t\t\t\tobservation.error(restClientException);\n-\t\t\t\tobservation.stop();\n \t\t\t}\n \t\t\tthrow restClientException;\n \t\t}\n+\t\tfinally {\n+\t\t\tclientResponse.close();\n+\t\t}\n \t}\n \n \tprivate static MediaType getContentType(ClientHttpResponse clientResponse) {",
    "output": "Fix RestClient instrumentation ClientHttpResponse implements Closeable and the close method of DefaultConvertibleClientHttpResponse also stops the current Observation. Before this change exiting the try-with-resource block stopped the Observation since it called close on ClientHttpResponse. After this, there were multiple error and stop calls on the Observation in the catch blocks after the Observation was already stopped which is invalid. This change reorders the flow by stopping the Observation in the finally block (closing ClientHttpResponse) and not stopping the Observation in any of the catch blocks"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/TestConventions.java b/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n@@ -62,8 +62,11 @@ private void configureTests(Project project, Test test) {\n \t\tif (project.hasProperty(\"testGroups\")) {\n \t\t\ttest.systemProperty(\"testGroups\", project.getProperties().get(\"testGroups\"));\n \t\t}\n-\t\ttest.jvmArgs(\"--add-opens=java.base/java.lang=ALL-UNNAMED\",\n-\t\t\t\t\"--add-opens=java.base/java.util=ALL-UNNAMED\");\n+\t\ttest.jvmArgs(\n+\t\t\t\t\"--add-opens=java.base/java.lang=ALL-UNNAMED\",\n+\t\t\t\t\"--add-opens=java.base/java.util=ALL-UNNAMED\",\n+\t\t\t\t\"-Xshare:off\"\n+\t\t);\n \t}\n \n \tprivate void configureTestRetryPlugin(Project project, Test test) {",
    "output": "Disable class data sharing (CDS) for tests Prior to this commit, the Gradle build output the following warning multiple times. OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended Since we don't need CDS enabled for our tests, I've added `-Xshare:off` as a JVM argument for our tests to disable CDS. (cherry picked from commit 27985b1439950106454da11a0a06c6b131938af9)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoTestExecutionListener.java\n@@ -122,9 +122,6 @@ private void closeMocks(TestContext testContext) throws Exception {\n \t\tif (mocks instanceof MockitoSession session) {\n \t\t\tsession.finishMocking();\n \t\t}\n-\t\telse if (mocks instanceof AutoCloseable closeable) {\n-\t\t\tcloseable.close();\n-\t\t}\n \t}\n \n \tprivate boolean hasMockitoAnnotations(TestContext testContext) {",
    "output": "Polishing: remove unnecessary code"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n@@ -201,7 +201,7 @@ private Runnable scheduledTask(Runnable task) {\n \t}\n \n \tprivate void shutdownAwareErrorHandler(Throwable ex) {\n-\t\tif (this.scheduledExecutor.isTerminated()) {\n+\t\tif (this.scheduledExecutor.isShutdown()) {\n \t\t\tLogFactory.getLog(getClass()).debug(\"Ignoring scheduled task exception after shutdown\", ex);\n \t\t}\n \t\telse {",
    "output": "SimpleAsyncTaskScheduler stops accepting new tasks when isShutdown This changes the criteria for simplified task rejection logging from to be that the executor is in the shutdown phase, not fully terminated"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/VariableAndFunctionTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/VariableAndFunctionTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/VariableAndFunctionTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/VariableAndFunctionTests.java\n@@ -206,7 +206,6 @@ void functionFromMethodWithVarargsAndPrimitiveArrayToObjectArrayConversion() {\n \t\tevaluate(\"#varargsObjectFunction(new int[]{1, 2, 3})\", \"[1, 2, 3]\", String.class); // int[] to Object[]\n \t}\n \n-\t@Disabled(\"Primitive array to Object[] conversion is not currently supported\")\n \t@Test\n \tvoid functionFromMethodHandleWithVarargsAndPrimitiveArrayToObjectArrayConversion() {\n \t\tevaluate(\"#message('x -> %s %s %s', new short[]{1, 2, 3})\", \"x -> 1 2 3\", String.class);  // short[] to Object[]",
    "output": "Enable test for primitive array to Object[] conversion in SpEL"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n@@ -557,6 +557,7 @@ else if (len < 0) {\n \t\t\t\t}\n \t\t\t\telse /* if (len == 0) */ {\n \t\t\t\t\t// buffer starts with complete delimiter, flush out the previous buffers\n+\t\t\t\t\tDataBufferUtils.release(boundaryBuffer);\n \t\t\t\t\tflush();\n \t\t\t\t}\n ",
    "output": "Fix buffer leak in MultipartParser This change fixes a buffer leak when the MultipartParser is encountering a body DataBuffer that only contains a boundary"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/MockMvcFilterDecorator.java\n@@ -111,19 +111,18 @@ private static Function<ServletContext, FilterConfig> getFilterConfigInitializer\n \t\tString className = delegate.getClass().getName();\n \n \t\treturn servletContext -> {\n-\t\t\tMockServletContext mockServletContext = (MockServletContext) servletContext;\n-\t\t\tMockFilterConfig filterConfig;\n-\t\t\tif (filterName != null) {\n-\t\t\t\tfilterConfig = new MockFilterConfig(servletContext, filterName);\n-\t\t\t\tmockServletContext.addFilterRegistration(new MockFilterRegistration(className, filterName));\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tfilterConfig = new MockFilterConfig(servletContext);\n-\t\t\t\tmockServletContext.addFilterRegistration(new MockFilterRegistration(className));\n-\t\t\t}\n+\t\t\tMockFilterConfig filterConfig = (filterName != null ?\n+\t\t\t\t\tnew MockFilterConfig(servletContext, filterName) : new MockFilterConfig(servletContext));\n+\n \t\t\tif (initParams != null) {\n \t\t\t\tinitParams.forEach(filterConfig::addInitParameter);\n \t\t\t}\n+\n+\t\t\tif (servletContext instanceof MockServletContext mockServletContext) {\n+\t\t\t\tmockServletContext.addFilterRegistration(filterName != null ?\n+\t\t\t\t\t\tnew MockFilterRegistration(className, filterName) : new MockFilterRegistration(className));\n+\t\t\t}\n+\n \t\t\treturn filterConfig;\n \t\t};\n \t}",
    "output": "Add FilterRegistration's defensively Follow-up to d2225c, which broke Boot tests because the ServletContext can be the one of the embedded Servlet container if initializing a live server and as well as MockMvc (e.g. via `@AutoConfigureMockMvc`)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java b/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n@@ -78,10 +78,12 @@ public void customizeContext(ConfigurableApplicationContext context, MergedConte\n \t\t\t\tnew DefaultDynamicPropertyRegistry(environment, this.methods.isEmpty());\n \t\tbeanFactory.registerSingleton(DYNAMIC_PROPERTY_REGISTRY_BEAN_NAME, dynamicPropertyRegistry);\n \n-\t\tBeanDefinition beanDefinition = new RootBeanDefinition(DynamicPropertySourceBeanInitializer.class);\n-\t\tbeanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n-\t\tbeanDefinitionRegistry.registerBeanDefinition(\n-\t\t\t\tDYNAMIC_PROPERTY_SOURCE_BEAN_INITIALIZER_BEAN_NAME, beanDefinition);\n+\t\tif (!beanDefinitionRegistry.containsBeanDefinition(DYNAMIC_PROPERTY_SOURCE_BEAN_INITIALIZER_BEAN_NAME)) {\n+\t\t\tBeanDefinition beanDefinition = new RootBeanDefinition(DynamicPropertySourceBeanInitializer.class);\n+\t\t\tbeanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n+\t\t\tbeanDefinitionRegistry.registerBeanDefinition(\n+\t\t\t\t\tDYNAMIC_PROPERTY_SOURCE_BEAN_INITIALIZER_BEAN_NAME, beanDefinition);\n+\t\t}\n \n \t\tif (!this.methods.isEmpty()) {\n \t\t\tMutablePropertySources propertySources = environment.getPropertySources();",
    "output": "Only register DynamicPropertySourceBeanInitializer if necessary This commit makes sure to check first if DynamicPropertySourceBeanInitializer has been registered before trying to register it. When running with AOT optimizations, the bean definition has been contributed so there is no need to register it again when the context customizer runs"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -644,6 +644,7 @@ public static TypeDescriptor map(Class<?> mapType, @Nullable TypeDescriptor keyT\n \t * @since 3.2.1\n \t */\n \t@Nullable\n+\t@Contract(\"!null -> !null; null -> null\")\n \tpublic static TypeDescriptor array(@Nullable TypeDescriptor elementTypeDescriptor) {\n \t\tif (elementTypeDescriptor == null) {\n \t\t\treturn null;\n\ndiff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java\n@@ -389,7 +389,6 @@ public static boolean convertAllMethodHandleArguments(TypeConverter converter, O\n \t\t\t// FunctionReference#executeFunctionViaMethodHandle().\n \t\t\tClass<?> varargsComponentClass = ClassUtils.resolvePrimitiveIfNecessary(varargsArrayClass.componentType());\n \t\t\tTypeDescriptor varargsArrayType = TypeDescriptor.array(TypeDescriptor.valueOf(varargsComponentClass));\n-\t\t\tAssert.state(varargsArrayType != null, \"Array type must not be null for a varargs array\");\n \t\t\tTypeDescriptor varargsComponentType = varargsArrayType.getElementTypeDescriptor();\n \t\t\tAssert.state(varargsComponentType != null, \"Component type must not be null for a varargs array\");\n ",
    "output": "Specify nullability @⁠Contract for TypeDescriptor.array"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -428,12 +428,18 @@ protected Resource convertClassLoaderURL(URL url) {\n \t\t\tif (!cleanedPath.equals(urlString)) {\n \t\t\t\t// Prefer cleaned URL, aligned with UrlResource#createRelative(String)\n \t\t\t\ttry {\n-\t\t\t\t\treturn new UrlResource(ResourceUtils.toURI(cleanedPath));\n+\t\t\t\t\t// Cannot test for URLStreamHandler directly: URL equality for same String\n+\t\t\t\t\t// in order to find out whether original URL uses default URLStreamHandler.\n+\t\t\t\t\tif (ResourceUtils.toURL(urlString).equals(url)) {\n+\t\t\t\t\t\t// Plain URL with default URLStreamHandler -> replace with cleaned path.\n+\t\t\t\t\t\treturn new UrlResource(ResourceUtils.toURI(cleanedPath));\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tcatch (URISyntaxException | MalformedURLException ex) {\n \t\t\t\t\t// Fallback to regular URL construction below...\n \t\t\t\t}\n \t\t\t}\n+\t\t\t// Retain original URL instance, potentially including custom URLStreamHandler.\n \t\t\treturn new UrlResource(url);\n \t\t}\n \t}",
    "output": "Retain original URL instance in case of custom URLStreamHandler"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java\n@@ -18,6 +18,7 @@\n \n import java.lang.invoke.MethodHandle;\n import java.lang.invoke.MethodType;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.StringJoiner;\n@@ -145,8 +146,10 @@ private TypedValue executeFunctionViaMethod(ExpressionState state, Method method\n \t\t\treturn new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result));\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tthrow new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,\n-\t\t\t\t\tthis.name, ex.getMessage());\n+\t\t\tThrowable cause = ((ex instanceof InvocationTargetException ite && ite.getCause() != null) ?\n+\t\t\t\t\tite.getCause() : ex);\n+\t\t\tthrow new SpelEvaluationException(getStartPosition(), cause, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,\n+\t\t\t\t\tthis.name, cause.getMessage());\n \t\t}\n \t\tfinally {\n \t\t\tif (compilable) {",
    "output": "Unwrap InvocationTargetException in SpEL's FunctionReference FunctionReference in the Spring Expression Language (SpEL) currently does not unwrap an InvocationTargetException; however, ConstructorReference and MethodReference do. For example, currently one may encounter an exception like the following, where the 'null' comes from the fact that an InvocationTargetException doesn't always have a message. SpelEvaluationException: EL1023E: A problem occurred whilst attempting to invoke the function 'formatObjectVarargs': 'null' To address that, and to align with the behavior of ConstructorReference and MethodReference, this commit modifies FunctionReference so that it unwraps the InvocationTargetException to use its cause for the exception message, resulting in an exception message like the following. SpelEvaluationException: EL1023E: A problem occurred whilst attempting to invoke the function 'formatObjectVarargs': 'Format specifier '%s''"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n@@ -553,7 +553,8 @@ private static boolean compiledByAjc(Class<?> clazz) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n-\t\treturn false;\n+\t\tClass<?> superclass = clazz.getSuperclass();\n+\t\treturn (superclass != null && compiledByAjc(superclass));\n \t}\n \n ",
    "output": "Detect ajc markers in superclasses as well (for weaving check)"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java\n@@ -111,10 +111,11 @@ public void configureViewResolvers(ViewResolverRegistry registry) {\n \n \t\t@Bean\n \t\tpublic FreeMarkerConfigurer freeMarkerConfig() {\n-\t\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n-\t\t\tconfigurer.setPreferFileSystemAccess(false);\n-\t\t\tconfigurer.setTemplateLoaderPath(\"classpath*:org/springframework/web/reactive/view/freemarker/\");\n-\t\t\treturn configurer;\n+\t\t\t// No need to configure a custom template loader path via setTemplateLoaderPath(),\n+\t\t\t// since FreeMarkerConfigurer already registers a\n+\t\t\t// new ClassTemplateLoader(FreeMarkerConfigurer.class, \"\"), which automatically\n+\t\t\t// finds template files in the same package as this test class.\n+\t\t\treturn new FreeMarkerConfigurer();\n \t\t}\n \t}\n ",
    "output": "Remove invalid configuration in RequestMappingViewResolutionIntegrationTests Prior to this commit, RequestMappingViewResolutionIntegrationTests invoked the following configurer.setTemplateLoaderPath( \"classpath*:org/springframework/web/reactive/view/freemarker/\"); However, that configuration is invalid since `classpath*:` is not supported for a `templateLoaderPath`. Despite that, the tests still passed since FreeMarkerConfigurer already registers a new ClassTemplateLoader(FreeMarkerConfigurer.class, \"\"), which automatically finds template files in the same package as FreeMarkerConfigurer (for the \"spring.ftl\" macro library support) and coincidentally RequestMappingViewResolutionIntegrationTests as well (which resides in the same package). This commit therefore removes the invalid configuration and adds a comment to explain what's going on"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Nullable.java b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n--- a/spring-core/src/main/java/org/springframework/lang/Nullable.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,9 +22,8 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.CheckForNull;\n import javax.annotation.meta.TypeQualifierNickname;\n-import javax.annotation.meta.When;\n \n /**\n  * A common Spring annotation to declare that annotated elements can be {@code null}\n@@ -50,7 +49,7 @@\n @Target({ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n-@Nonnull(when = When.MAYBE)\n+@CheckForNull\n @TypeQualifierNickname\n public @interface Nullable {\n }",
    "output": "Prevent compilation warnings with `@Nullable` This commit replaces `@Nonnull(when = When.MAYBE)` meta-annotation in org.springframework.lang.Nullable by `@CheckForNull` in order to prevent \"unknown enum constant When.MAYBE\" compilation warnings. IntelliJ IDEA 2024.1.2+ is required to interpret correctly the related annotations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java b/spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java\n@@ -40,6 +40,13 @@\n  * times. This also applies when constructed with an {@code InputStreamSource}\n  * which lazily obtains the stream but only allows for single access as well.\n  *\n+ * <p><b>NOTE: This class does not provide an independent {@link #contentLength()}\n+ * implementation: Any such call will consume the given {@code InputStream}!</b>\n+ * Consider overriding {@code #contentLength()} with a custom implementation if\n+ * possible. For any other purpose, it is not recommended to extend from this\n+ * class; this is particularly true when used with Spring's web resource rendering\n+ * which specifically skips {@code #contentLength()} for this exact class only.\n+ *\n  * @author Juergen Hoeller\n  * @author Sam Brannen\n  * @since 28.12.2003\n@@ -132,8 +139,8 @@ public boolean isOpen() {\n \t@Override\n \tpublic InputStream getInputStream() throws IOException, IllegalStateException {\n \t\tif (this.read) {\n-\t\t\tthrow new IllegalStateException(\"InputStream has already been read - \" +\n-\t\t\t\t\t\"do not use InputStreamResource if a stream needs to be read multiple times\");\n+\t\t\tthrow new IllegalStateException(\"InputStream has already been read (possibly for early content length \" +\n+\t\t\t\t\t\"determination) - do not use InputStreamResource if a stream needs to be read multiple times\");\n \t\t}\n \t\tthis.read = true;\n \t\treturn this.inputStreamSource.getInputStream();",
    "output": "Document contentLengthbehavior for InputStreamResource and custom subclasses"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -495,7 +495,7 @@ public String toString() {\n \t}\n \n \tprotected String formatViewName() {\n-\t\treturn (getBeanName() != null ? \"name '\" + getBeanName() + \"'\" : \"[\" + getClass().getSimpleName() + \"]\");\n+\t\treturn (getBeanName() != null ? \"name [\" + getBeanName() + \"]\" : \"[\" + getClass().getSimpleName() + \"]\");\n \t}\n \n }",
    "output": "Use consistent formatting for view name in AbstractView"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -36,6 +36,7 @@\n import org.springframework.beans.BeansException;\n import org.springframework.beans.CachedIntrospectionResults;\n import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.BeanNotOfRequiredTypeException;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n@@ -949,7 +950,15 @@ protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory b\n \t\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n \t\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n \t\tfor (String weaverAwareName : weaverAwareNames) {\n-\t\t\tbeanFactory.getBean(weaverAwareName, LoadTimeWeaverAware.class);\n+\t\t\ttry {\n+\t\t\t\tbeanFactory.getBean(weaverAwareName, LoadTimeWeaverAware.class);\n+\t\t\t}\n+\t\t\tcatch (BeanNotOfRequiredTypeException ex) {\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"Failed to initialize LoadTimeWeaverAware bean '\" + weaverAwareName +\n+\t\t\t\t\t\t\t\"' due to unexpected type mismatch: \" + ex.getMessage());\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n \t\t// Stop using the temporary ClassLoader for type matching.",
    "output": "Leniently ignore type mismatch for LoadTimeWeaverAware beans"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java\n@@ -140,7 +140,7 @@ static IOException convertException(RuntimeException ex) {\n \t\t\t\treturn ioEx;\n \t\t\t}\n \t\t}\n-\t\treturn new IOException(ex.getMessage(), cause);\n+\t\treturn new IOException(ex.getMessage(), (cause != null ? cause : ex));\n \t}\n \n ",
    "output": "Include original exception if cause is null"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -813,10 +813,20 @@ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition m\n \n \t\t// Common return type found: all factory methods return same type. For a non-parameterized\n \t\t// unique candidate, cache the full type declaration context of the target factory method.\n-\t\tcachedReturnType = (uniqueCandidate != null ?\n-\t\t\t\tResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));\n-\t\tmbd.factoryMethodReturnType = cachedReturnType;\n-\t\treturn cachedReturnType.resolve();\n+\t\ttry {\n+\t\t\tcachedReturnType = (uniqueCandidate != null ?\n+\t\t\t\t\tResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));\n+\t\t\tmbd.factoryMethodReturnType = cachedReturnType;\n+\t\t\treturn cachedReturnType.resolve();\n+\t\t}\n+\t\tcatch (LinkageError err) {\n+\t\t\t// E.g. a NoClassDefFoundError for a generic method return type\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Failed to resolve type for factory method of bean '\" + beanName + \"': \" +\n+\t\t\t\t\t\t(uniqueCandidate != null ? uniqueCandidate : commonType), err);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n \t/**",
    "output": "Catch and log LinkageError in getTypeForFactoryMethod"
  },
  {
    "input": "diff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java\n@@ -24,6 +24,7 @@\n import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n@@ -72,6 +73,8 @@ public class MockHttpServletResponse implements HttpServletResponse {\n \n \tprivate static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n \n+\tprivate static final MediaType APPLICATION_PLUS_JSON = new MediaType(\"application\", \"*+json\");\n+\n \n \t//---------------------------------------------------------------------\n \t// ServletResponse properties\n@@ -348,6 +351,10 @@ public void setContentType(@Nullable String contentType) {\n \t\t\t\tif (mediaType.getCharset() != null) {\n \t\t\t\t\tsetExplicitCharacterEncoding(mediaType.getCharset().name());\n \t\t\t\t}\n+\t\t\t\telse if (mediaType.isCompatibleWith(MediaType.APPLICATION_JSON) ||\n+\t\t\t\t\t\tmediaType.isCompatibleWith(APPLICATION_PLUS_JSON)) {\n+\t\t\t\t\t\tthis.characterEncoding = StandardCharsets.UTF_8.name();\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\t// Try to get charset value anyway",
    "output": "Sync MockHttpServletResponse implementations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/DisconnectedClientHelper.java b/spring-web/src/main/java/org/springframework/web/util/DisconnectedClientHelper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/DisconnectedClientHelper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/DisconnectedClientHelper.java\n@@ -36,7 +36,7 @@\n public class DisconnectedClientHelper {\n \n \tprivate static final Set<String> EXCEPTION_PHRASES =\n-\t\t\tSet.of(\"broken pipe\", \"connection reset by peer\");\n+\t\t\tSet.of(\"broken pipe\", \"connection reset\");\n \n \tprivate static final Set<String> EXCEPTION_TYPE_NAMES =\n \t\t\tSet.of(\"AbortedException\", \"ClientAbortException\",\n@@ -73,11 +73,12 @@ else if (logger.isDebugEnabled()) {\n \n \t/**\n \t * Whether the given exception indicates the client has gone away.\n-\t * Known cases covered:\n+\t * <p>Known cases covered:\n \t * <ul>\n \t * <li>ClientAbortException or EOFException for Tomcat\n \t * <li>EofException for Jetty\n \t * <li>IOException \"Broken pipe\" or \"connection reset by peer\"\n+\t * <li>SocketException \"Connection reset\"\n \t * </ul>\n \t */\n \tpublic static boolean isClientDisconnectedException(Throwable ex) {",
    "output": "Support all \"connection reset\" phrases in DisconnectedClientHelper Prior to this commit, the isClientDisconnectedExceptionmethod in DisconnectedClientHelper checked whether the message of the ultimate exception in an exception chain contained one of the phrases \"broken pipe\" or \"connection reset by peer\". However, that failed to match if the exception message contained \"Connection reset\", which is the case for the SocketException thrown by throwConnectionResetin sun.nio.ch.SocketChannelImpl. This commit therefore replaces the \"connection reset by peer\" phrase with \"connection reset\" in order to support all exception messages containing \"connection reset\""
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -875,7 +875,7 @@ private Object[] resolveMethodArguments(Method method, Object bean, @Nullable St\n \t\t\tint argumentCount = method.getParameterCount();\n \t\t\tObject[] arguments = new Object[argumentCount];\n \t\t\tDependencyDescriptor[] descriptors = new DependencyDescriptor[argumentCount];\n-\t\t\tSet<String> autowiredBeanNames = new LinkedHashSet<>(argumentCount * 2);\n+\t\t\tSet<String> autowiredBeanNames = CollectionUtils.newLinkedHashSet(argumentCount);\n \t\t\tAssert.state(beanFactory != null, \"No BeanFactory available\");\n \t\t\tTypeConverter typeConverter = beanFactory.getTypeConverter();\n \t\t\tfor (int i = 0; i < arguments.length; i++) {",
    "output": "Use CollectionFactory#newLinkedHashSet for method arguments"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n@@ -88,7 +88,7 @@ public InputStream getBody() throws IOException {\n \t\t}\n \n \t\tif (body == null) {\n-\t\t\tthrow new IOException(\"Could not receive body\");\n+\t\t\tbody = InputStream.nullInputStream();\n \t\t}\n \t\tthis.body = body;\n \t\treturn body;",
    "output": "Use null stream in ReactorNettyClientResponse if no body is available"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -60,10 +60,6 @@\n  * groups for specific phases, on startup/shutdown as well as for explicit start/stop\n  * interactions on a {@link org.springframework.context.ConfigurableApplicationContext}.\n  *\n- * <p>Provides interaction with {@link Lifecycle} and {@link SmartLifecycle} beans in\n- * groups for specific phases, on startup/shutdown as well as for explicit start/stop\n- * interactions on a {@link org.springframework.context.ConfigurableApplicationContext}.\n- *\n  * <p>As of 6.1, this also includes support for JVM checkpoint/restore (Project CRaC)\n  * when the {@code org.crac:crac} dependency on the classpath.\n  *",
    "output": "Remove duplicated javadoc paragraph"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/web/websocket/stomp/websocketstomphandlebrokerrelayconfigure/WebSocketConfiguration.java b/framework-docs/src/main/java/org/springframework/docs/web/websocket/stomp/websocketstomphandlebrokerrelayconfigure/WebSocketConfiguration.java\n--- a/framework-docs/src/main/java/org/springframework/docs/web/websocket/stomp/websocketstomphandlebrokerrelayconfigure/WebSocketConfiguration.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/web/websocket/stomp/websocketstomphandlebrokerrelayconfigure/WebSocketConfiguration.java\n@@ -23,7 +23,6 @@\n import org.springframework.messaging.simp.stomp.StompReactorNettyCodec;\n import org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient;\n import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\n-import org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n \n // tag::snippet[]\n@@ -41,7 +40,7 @@ public void configureMessageBroker(MessageBrokerRegistry registry) {\n \n \tprivate ReactorNettyTcpClient<byte[]> createTcpClient() {\n \t\treturn new ReactorNettyTcpClient<>(\n-\t\t\t\tclient -> client.addressSupplier(() -> new InetSocketAddress(0)),\n+\t\t\t\tclient -> client.remoteAddress(() -> new InetSocketAddress(0)),\n \t\t\t\tnew StompReactorNettyCodec());\n \t}\n }",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java\n@@ -186,7 +186,7 @@ public void releaseSavepoint(Object savepoint) throws TransactionException {\n \t\t\tconHolder.getConnection().releaseSavepoint((Savepoint) savepoint);\n \t\t}\n \t\tcatch (Throwable ex) {\n-\t\t\tlogger.debug(\"Could not explicitly release JDBC savepoint\", ex);\n+\t\t\tthrow new TransactionSystemException(\"Could not explicitly release JDBC savepoint\", ex);\n \t\t}\n \t}\n ",
    "output": "Do not swallow exceptions on failing to release a savepoint By swallowing the exception on failing to release a savepoint, we are hiding client code from database errors that they may need to be aware of or handle. e.g. if the connection is now dead when trying to release the savepoint, by swallowing the exception here, client code has no way of knowing this now until the next operation on the database, which will yield a confusing message about the problem and obscures where the failure occurred as it will be in a different part of their code that throws any exception. Swallowing the exception here is also inconsistent with all the other database calls in the Transaction Object, where we always raise an exception up and let client code decide how to handle the error"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -98,7 +98,7 @@ public class DefaultLifecycleProcessor implements LifecycleProcessor, BeanFactor\n \tpublic static final String ON_REFRESH_VALUE = \"onRefresh\";\n \n \n-\tprivate static final boolean checkpointOnRefresh =\n+\tprivate static boolean checkpointOnRefresh =\n \t\t\tON_REFRESH_VALUE.equalsIgnoreCase(SpringProperties.getProperty(CHECKPOINT_PROPERTY_NAME));\n \n \tprivate static final boolean exitOnRefresh =\n@@ -194,6 +194,7 @@ public void stop() {\n \t@Override\n \tpublic void onRefresh() {\n \t\tif (checkpointOnRefresh) {\n+\t\t\tcheckpointOnRefresh = false;\n \t\t\tnew CracDelegate().checkpointRestore();\n \t\t}\n \t\tif (exitOnRefresh) {",
    "output": "Ignore checkpointOnRefresh after restore"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -64,7 +64,7 @@ private static void configureNoHttpPlugin(Project project) {\n \t\tNoHttpExtension noHttp = project.getExtensions().getByType(NoHttpExtension.class);\n \t\tnoHttp.setAllowlistFile(project.file(\"src/nohttp/allowlist.lines\"));\n \t\tnoHttp.getSource().exclude(\"**/test-output/**\", \"**/.settings/**\",\n-\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\");\n+\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\", \"**/node_modules/**\");\n \t\tList<String> buildFolders = List.of(\"bin\", \"build\", \"out\");\n \t\tproject.allprojects(subproject -> {\n \t\t\tPath rootPath = project.getRootDir().toPath();",
    "output": "Exclude node_modules from NoHttp checks"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java\n@@ -34,7 +34,6 @@\n import org.springframework.beans.factory.config.DependencyDescriptor;\n import org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n-import org.springframework.beans.factory.support.DefaultBeanNameGenerator;\n import org.springframework.beans.factory.support.RootBeanDefinition;\n import org.springframework.core.Ordered;\n import org.springframework.core.PriorityOrdered;",
    "output": "Polishing: remove unused import"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n@@ -219,6 +219,14 @@ private void contributeHibernateHints(RuntimeHints hints, @Nullable ClassLoader\n \t\t\t\tReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,\n \t\t\t\t\t\tAnnotationUtils.findAnnotation(method, idGeneratorTypeClass), \"value\"));\n \t\t\t}\n+\n+\t\t\tClass<? extends Annotation> attributeBinderTypeClass = loadClass(\"org.hibernate.annotations.AttributeBinderType\", classLoader);\n+\t\t\tif (attributeBinderTypeClass != null) {\n+\t\t\t\tReflectionUtils.doWithFields(managedClass, field -> registerForReflection(reflection,\n+\t\t\t\t\t\tAnnotationUtils.findAnnotation(field, attributeBinderTypeClass), \"binder\"));\n+\t\t\t\tReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,\n+\t\t\t\t\t\tAnnotationUtils.findAnnotation(method, attributeBinderTypeClass), \"binder\"));\n+\t\t\t}\n \t\t}\n \n \t\t@Nullable",
    "output": "Add missing hints for Hibernate `@TenantId`"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/EngineTestKitUtils.java b/spring-test/src/test/java/org/springframework/test/context/junit/EngineTestKitUtils.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/EngineTestKitUtils.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/EngineTestKitUtils.java\n@@ -41,7 +41,7 @@ public static Events executeTestsForClass(Class<?> testClass) {\n \t\treturn EngineTestKit.engine(\"junit-jupiter\")\n \t\t\t\t.selectors(selectClass(testClass))\n \t\t\t\t.execute()\n-\t\t\t\t.testEvents();\n+\t\t\t\t.allEvents();\n \t}\n \n \t/**",
    "output": "Return all events from EngineTestKitUtils.executeTestsForClass"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequest.java\n@@ -131,15 +131,16 @@ static IOException convertException(RuntimeException ex) {\n \t\t// Exceptions.ReactiveException is package private\n \t\tThrowable cause = ex.getCause();\n \n-\t\tif (cause instanceof UncheckedIOException uioEx) {\n-\t\t\treturn uioEx.getCause();\n-\t\t}\n-\t\telse if (cause instanceof IOException ioEx) {\n+\t\tif (cause instanceof IOException ioEx) {\n \t\t\treturn ioEx;\n \t\t}\n-\t\telse {\n-\t\t\treturn new IOException(ex.getMessage(), cause);\n+\t\tif (cause instanceof UncheckedIOException uioEx) {\n+\t\t\tIOException ioEx = uioEx.getCause();\n+\t\t\tif (ioEx != null) {\n+\t\t\t\treturn ioEx;\n+\t\t\t}\n \t\t}\n+\t\treturn new IOException(ex.getMessage(), cause);\n \t}\n \n ",
    "output": "Defensively handle UncheckedIOException cause (for NullAway compliance)"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java\n@@ -200,6 +200,8 @@ private void contributeHibernateHints(RuntimeHints hints, @Nullable ClassLoader\n \t\t\t\t\tregisterForReflection(reflection,\n \t\t\t\t\t\t\tAnnotationUtils.findAnnotation(field.getType(), embeddableInstantiatorClass), \"value\");\n \t\t\t\t});\n+\t\t\t\tReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,\n+\t\t\t\t\t\tAnnotationUtils.findAnnotation(method, embeddableInstantiatorClass), \"value\"));\n \t\t\t}\n \n \t\t\tClass<? extends Annotation> valueGenerationTypeClass = loadClass(\"org.hibernate.annotations.ValueGenerationType\", classLoader);",
    "output": "Consistently support Hibernate annotation hint inference on methods"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvcconfig/mvcconfiginterceptors/WebConfiguration.java b/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvcconfig/mvcconfiginterceptors/WebConfiguration.java\n--- a/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvcconfig/mvcconfiginterceptors/WebConfiguration.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvcconfig/mvcconfiginterceptors/WebConfiguration.java\n@@ -20,7 +20,6 @@\n import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\n-import org.springframework.web.servlet.theme.ThemeChangeInterceptor;\n \n // tag::snippet[]\n @Configuration\n@@ -29,7 +28,6 @@ public class WebConfiguration implements WebMvcConfigurer {\n \t@Override\n \tpublic void addInterceptors(InterceptorRegistry registry) {\n \t\tregistry.addInterceptor(new LocaleChangeInterceptor());\n-\t\tregistry.addInterceptor(new ThemeChangeInterceptor()).addPathPatterns(\"/**\").excludePathPatterns(\"/admin/**\");\n \t}\n }\n // end::snippet[]",
    "output": "Stop using deprecated ThemeChangeInterceptor in WebConfiguration example"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -1052,16 +1052,16 @@ public static Object getValue(@Nullable Annotation annotation, @Nullable String\n \t\t\treturn null;\n \t\t}\n \t\ttry {\n-\t\t\tMethod method = annotation.annotationType().getDeclaredMethod(attributeName);\n-\t\t\treturn invokeAnnotationMethod(method, annotation);\n-\t\t}\n-\t\tcatch (NoSuchMethodException ex) {\n-\t\t\treturn null;\n+\t\t\tfor (Method method : annotation.annotationType().getDeclaredMethods()) {\n+\t\t\t\tif (method.getName().equals(attributeName) && method.getParameterCount() == 0) {\n+\t\t\t\t\treturn invokeAnnotationMethod(method, annotation);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t\tcatch (Throwable ex) {\n \t\t\thandleValueRetrievalFailure(annotation, ex);\n-\t\t\treturn null;\n \t\t}\n+\t\treturn null;\n \t}\n \n \t/**",
    "output": "Avoid NoSuchMethodException for annotation attribute checks"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanIntegrationTests.java\n@@ -85,7 +85,7 @@ void fieldWithMethodNameHasOverride(ApplicationContext ctx) {\n \n \t@Nested\n \t@DisplayName(\"With @TestBean in enclosing class\")\n-\tpublic class TestBeanNestedTests {\n+\tpublic class TestBeanFieldInEnclosingClassTests {\n \n \t\t@Test\n \t\tvoid fieldHasOverride(ApplicationContext ctx) {\n@@ -108,7 +108,7 @@ void fieldWithMethodNameHasOverride(ApplicationContext ctx) {\n \n \t@Nested\n \t@DisplayName(\"With factory method in enclosing class\")\n-\tpublic class TestBeanNested2Tests {\n+\tpublic class TestBeanFactoryMethodInEnclosingClassTests {\n \n \t\t@TestBean(methodName = \"nestedFieldTestOverride\", name = \"nestedField\")\n \t\tString nestedField2;",
    "output": "Improve class names"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n@@ -137,6 +137,8 @@ void endToEndTestsForEntireSpringTestModule() {\n \t\t\t\t.filter(clazz -> clazz.getSimpleName().endsWith(\"Tests\"))\n \t\t\t\t// TestNG EJB tests use @PersistenceContext which is not yet supported in tests in AOT mode.\n \t\t\t\t.filter(clazz -> !clazz.getPackageName().contains(\"testng.transaction.ejb\"))\n+\t\t\t\t// Uncomment the following to disable Bean Override tests since they are not yet supported in AOT mode.\n+\t\t\t\t// .filter(clazz -> !clazz.getPackageName().contains(\"test.context.bean.override\"))\n \t\t\t\t.toList();\n \n \t\t// Optionally set failOnError flag to true to halt processing at the first failure.\n@@ -147,6 +149,8 @@ void endToEndTestsForEntireSpringTestModule() {\n \t@Test\n \tvoid endToEndTestsForSelectedTestClasses() {\n \t\tList<Class<?>> testClasses = List.of(\n+\t\t\t\torg.springframework.test.context.bean.override.convention.TestBeanIntegrationTests.class,\n+\t\t\t\torg.springframework.test.context.bean.override.mockito.MockitoBeanIntegrationTests.class,\n \t\t\t\torg.springframework.test.context.junit4.SpringJUnit4ClassRunnerAppCtxTests.class,\n \t\t\t\torg.springframework.test.context.junit4.ParameterizedDependencyInjectionTests.class\n \t\t);",
    "output": "Demonstrate how to disable Bean Override tests in AOT mode"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/assertj/MockMvcTesterIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/assertj/MockMvcTesterIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/assertj/MockMvcTesterIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/assertj/MockMvcTesterIntegrationTests.java\n@@ -503,7 +503,7 @@ public Callable<Map<String, String>> getCallable() {\n \n \t@Controller\n \t@SessionAttributes(\"locale\")\n-\tprivate static class SessionController {\n+\tstatic class SessionController {\n \n \t\t@ModelAttribute\n \t\tvoid populate(Model model) {\n@@ -517,7 +517,7 @@ String handle() {\n \t}\n \n \t@Controller\n-\tprivate static class ErrorController {\n+\tstatic class ErrorController {\n \n \t\t@GetMapping(\"/error/1\")\n \t\tpublic String one() {",
    "output": "Ensure MockMvcTesterIntegrationTests runs in AOT mode"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.16.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.17.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.17"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -561,9 +561,8 @@ private List<Class<?>> getClassHierarchy(Class<?> type) {\n \t\t\t}\n \n \t\t\tif (Enum.class.isAssignableFrom(type)) {\n-\t\t\t\taddToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited);\n \t\t\t\taddToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited);\n-\t\t\t\taddInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited);\n+\t\t\t\taddInterfacesToClassHierarchy(Enum.class, false, hierarchy, visited);\n \t\t\t}\n \n \t\t\taddToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited);",
    "output": "Remove superfluous addToClassHierarchy call for Enum types"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1030,7 +1030,7 @@ public void preInstantiateSingletons() throws BeansException {\n \t\t\t}\n \t\t}\n \t\tfinally {\n-\t\t\tthis.preInstantiationThread.set(null);\n+\t\t\tthis.preInstantiationThread.remove();\n \t\t}\n \t\tif (!futures.isEmpty()) {\n \t\t\ttry {\n@@ -1100,7 +1100,7 @@ private void instantiateSingletonInBackgroundThread(String beanName) {\n \t\t\tthrow ex;\n \t\t}\n \t\tfinally {\n-\t\t\tthis.preInstantiationThread.set(null);\n+\t\t\tthis.preInstantiationThread.remove();\n \t\t}\n \t}\n ",
    "output": "Apply ThreadLocal#removeto pre-instantiation threads"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/TestConventions.java b/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/TestConventions.java\n@@ -64,7 +64,7 @@ private void configureTests(Project project, Test test) {\n \t\t}\n \t\ttest.jvmArgs(\"--add-opens=java.base/java.lang=ALL-UNNAMED\",\n \t\t\t\t\"--add-opens=java.base/java.util=ALL-UNNAMED\",\n-\t\t\t\t\"-Djava.locale.providers=COMPAT\");\n+\t\t\t\t\"-Djava.locale.providers=COMPAT\", \"-Xshare:off\");\n \t}\n \n \tprivate void configureTestRetryPlugin(Project project, Test test) {",
    "output": "Disable class data sharing (CDS) for tests Prior to this commit, the Gradle build output the following warning multiple times. OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended Since we don't need CDS enabled for our tests, I've added `-Xshare:off` as a JVM argument for our tests to disable CDS"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java\n--- a/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -36,7 +36,6 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-import org.assertj.core.api.IntegerAssert;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.beans.BeanWrapper;\n@@ -2042,7 +2041,7 @@ void setAutoGrowCollectionLimit() {\n \n \t\tbinder.bind(pvs);\n \t\tassertThat(tb.getIntegerList()).hasSize(257);\n-\t\tassertThat(tb.getIntegerList(), IntegerAssert.class).element(256).isEqualTo(1);\n+\t\tassertThat(tb.getIntegerList()).element(256).isEqualTo(1);\n \t\tassertThat(binder.getBindingResult().getFieldValue(\"integerList[256]\")).isEqualTo(1);\n \t}\n ",
    "output": "Avoid usage of deprecated AssertJ feature"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -74,8 +74,6 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \n \tprivate static final String SCHEME_PATTERN = \"([^:/?#\\\\\\\\]+):\";\n \n-\tprivate static final String HTTP_PATTERN = \"(?i)(http|https):\";\n-\n \tprivate static final String USERINFO_PATTERN = \"([^/?#\\\\\\\\]*)\";\n \n \tprivate static final String HOST_IPV4_PATTERN = \"[^/?#:\\\\\\\\]*\";",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java\n@@ -213,8 +213,16 @@ public Advisor getAdvisor(Method candidateAdviceMethod, MetadataAwareAspectInsta\n \t\t\treturn null;\n \t\t}\n \n-\t\treturn new InstantiationModelAwarePointcutAdvisorImpl(expressionPointcut, candidateAdviceMethod,\n-\t\t\t\tthis, aspectInstanceFactory, declarationOrderInAspect, aspectName);\n+\t\ttry {\n+\t\t\treturn new InstantiationModelAwarePointcutAdvisorImpl(expressionPointcut, candidateAdviceMethod,\n+\t\t\t\t\tthis, aspectInstanceFactory, declarationOrderInAspect, aspectName);\n+\t\t}\n+\t\tcatch (IllegalArgumentException | IllegalStateException ex) {\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Ignoring incompatible advice method: \" + candidateAdviceMethod, ex);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n \t@Nullable",
    "output": "Defensive handling of incompatible advice methods This covers AspectJ transaction and caching aspects when encountered by Spring AOP"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n@@ -456,7 +456,6 @@ private ShadowMatch getTargetShadowMatch(Method method, Class<?> targetClass) {\n \t}\n \n \tprivate ShadowMatch getShadowMatch(Method targetMethod, Method originalMethod) {\n-\t\tString expression = resolveExpression();\n \t\tShadowMatch shadowMatch = ShadowMatchUtils.getShadowMatch(this, targetMethod);\n \t\tif (shadowMatch == null) {\n \t\t\tPointcutExpression fallbackExpression = null;",
    "output": "Skip expression resolution in getShadowMatch (aligned with 6.1.x)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java\n@@ -37,6 +37,7 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.util.Assert;\n+import org.springframework.util.MultiValueMap;\n \n /**\n  * {@link ClientHttpRequest} for the Java {@link HttpClient}.\n@@ -108,8 +109,11 @@ protected void applyHeaders() {\n \n \t@Override\n \tprotected void applyCookies() {\n-\t\tthis.builder.header(HttpHeaders.COOKIE, getCookies().values().stream()\n-\t\t\t\t.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining(\";\")));\n+\t\tMultiValueMap<String, HttpCookie> cookies = getCookies();\n+\t\tif (!cookies.isEmpty()) {\n+\t\t\tthis.builder.header(HttpHeaders.COOKIE, cookies.values().stream()\n+\t\t\t\t\t.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining(\";\")));\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Fix cookie management in reactive JdkClientHttpRequest Prevent cookies to be set to empty in the HTTP request if no cookie is present"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -423,6 +423,17 @@ protected Resource convertClassLoaderURL(URL url) {\n \t\t\t}\n \t\t}\n \t\telse {\n+\t\t\tString urlString = url.toString();\n+\t\t\tString cleanedPath = StringUtils.cleanPath(urlString);\n+\t\t\tif (!cleanedPath.equals(urlString)) {\n+\t\t\t\t// Prefer cleaned URL, aligned with UrlResource#createRelative(String)\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new UrlResource(ResourceUtils.toURI(cleanedPath));\n+\t\t\t\t}\n+\t\t\t\tcatch (URISyntaxException | MalformedURLException ex) {\n+\t\t\t\t\t// Fallback to regular URL construction below...\n+\t\t\t\t}\n+\t\t\t}\n \t\t\treturn new UrlResource(url);\n \t\t}\n \t}",
    "output": "Enforce cleaned URL for root resource from ClassLoader"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n@@ -58,7 +58,8 @@ class PathMatchingResourcePatternResolverTests {\n \n \tprivate static final String[] TEST_CLASSES_IN_CORE_IO_SUPPORT = {\"PathMatchingResourcePatternResolverTests.class\"};\n \n-\tprivate static final String[] CLASSES_IN_REACTOR_UTIL_ANNOTATION = {\"NonNull.class\", \"NonNullApi.class\", \"Nullable.class\"};\n+\tprivate static final String[] CLASSES_IN_REACTOR_UTIL_ANNOTATION =\n+\t\t\t{\"Incubating.class\", \"NonNull.class\", \"NonNullApi.class\", \"Nullable.class\"};\n \n \n \tprivate PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();",
    "output": "Upgrade reactor.util.annotation content"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java\n@@ -308,7 +308,9 @@ private static Class<?> loadClassForExitDescriptor(@Nullable String exitDescript\n \t\t\treturn null;\n \t\t}\n \t\tString typeDescriptor = exitDescriptor;\n-\t\tif (typeDescriptor.startsWith(\"[\") || typeDescriptor.startsWith(\"L\")) {\n+\t\t// If the SpEL exitDescriptor is not for a primitive (single character),\n+\t\t// ASM expects the typeDescriptor to end with a ';'.\n+\t\tif (typeDescriptor.length() > 1) {\n \t\t\ttypeDescriptor += \";\";\n \t\t}\n \t\tString className = Type.getType(typeDescriptor).getClassName();",
    "output": "Simplify implementation of SpelNodeImpl.loadClassForExitDescriptor(...)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -132,7 +132,7 @@ public class StandaloneMockMvcBuilder extends AbstractMockMvcBuilder<StandaloneM\n \n \tprivate boolean useSuffixPatternMatch = false;\n \n-\tprivate boolean useTrailingSlashPatternMatch = true;\n+\tprivate boolean useTrailingSlashPatternMatch = false;\n \n \t@Nullable\n \tprivate Boolean removeSemicolonContent;",
    "output": "Align StandaloneMockMvcBuilder with trailing slash defaults Prior to this commit, trailing slash matching was disabled by default in Spring MVC with . `StandaloneMockMvcBuilder` was not changed as a result and still had the trailing slash match option enabled. This commit aligns the defaults in `StandaloneMockMvcBuilder` to better reflect the expected behavior in tests"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n@@ -99,14 +99,23 @@ public ResultSetWrappingSqlRowSet(ResultSet resultSet) throws InvalidResultSetAc\n \t\t\tResultSetMetaData rsmd = resultSet.getMetaData();\n \t\t\tif (rsmd != null) {\n \t\t\t\tint columnCount = rsmd.getColumnCount();\n-\t\t\t\tthis.columnLabelMap = CollectionUtils.newHashMap(columnCount);\n+\t\t\t\tthis.columnLabelMap = CollectionUtils.newHashMap(columnCount * 2);\n \t\t\t\tfor (int i = 1; i <= columnCount; i++) {\n \t\t\t\t\tString key = rsmd.getColumnLabel(i);\n \t\t\t\t\t// Make sure to preserve first matching column for any given name,\n \t\t\t\t\t// as defined in ResultSet's type-level javadoc (lines 81 to 83).\n \t\t\t\t\tif (!this.columnLabelMap.containsKey(key)) {\n \t\t\t\t\t\tthis.columnLabelMap.put(key, i);\n \t\t\t\t\t}\n+\t\t\t\t\t// Also support column names prefixed with table name\n+\t\t\t\t\t// as in {table_name}.{column.name}.\n+\t\t\t\t\tString table = rsmd.getTableName(i);\n+\t\t\t\t\tif (table != null && !table.isEmpty()) {\n+\t\t\t\t\t\tkey = table + \".\" + rsmd.getColumnName(i);\n+\t\t\t\t\t\tif (!this.columnLabelMap.containsKey(key)) {\n+\t\t\t\t\t\t\tthis.columnLabelMap.put(key, i);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Add support for qualifying columns with table. Adds support common in other ResultSet implemenatations for qualifying column names with table name to distinguish potentially duplicate column names in a join of two or more tables from one another. The expected format is {table_name}.{column_namne}, where column_name is the actuall designated column name and not the column label"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/RouterFunctionMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/RouterFunctionMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/RouterFunctionMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/RouterFunctionMockMvcBuilder.java\n@@ -175,7 +175,7 @@ public RouterFunctionMockMvcBuilder setViewResolvers(ViewResolver...resolvers) {\n \t * Atom).\n \t */\n \tpublic RouterFunctionMockMvcBuilder setSingleView(View view) {\n-\t\tthis.viewResolvers = Collections.<ViewResolver>singletonList(new StaticViewResolver(view));\n+\t\tthis.viewResolvers = Collections.singletonList(new StaticViewResolver(view));\n \t\treturn this;\n \t}\n \n@@ -226,7 +226,7 @@ private void registerRouterFunction(StubWebApplicationContext wac) {\n \t\tContentNegotiationManager mvcContentNegotiationManager = config.mvcContentNegotiationManager();\n \t\twac.addBean(\"mvcContentNegotiationManager\", mvcContentNegotiationManager);\n \n-\t\tRouterFunctionMapping hm = config.routerFunctionMapping(mvcConversionService, resourceUrlProvider);\n+\t\tRouterFunctionMapping hm = config.getHandlerMapping(mvcConversionService, resourceUrlProvider);\n \t\tif (sc != null) {\n \t\t\thm.setServletContext(sc);\n \t\t}",
    "output": "Bug fixes in WebMvc.fn testing support"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlParser.java b/spring-web/src/main/java/org/springframework/web/util/UrlParser.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UrlParser.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UrlParser.java\n@@ -220,15 +220,15 @@ else if (isTabOrNL) {\n \t}\n \n \tprivate void setState(State newState) {\n-\t\tif (logger.isDebugEnabled()) {\n+\t\tif (logger.isTraceEnabled()) {\n \t\t\tString c;\n \t\t\tif (this.pointer < this.input.length()) {\n \t\t\t\tc = Character.toString(this.input.charAt(this.pointer));\n \t\t\t}\n \t\t\telse {\n \t\t\t\tc = \"EOF\";\n \t\t\t}\n-\t\t\tlogger.debug(\"Changing state from \" + this.state + \" to \" + newState + \" (cur: \" + c + \" prev: \" + this.previousState + \")\");\n+\t\t\tlogger.trace(\"Changing state from \" + this.state + \" to \" + newState + \" (cur: \" + c + \" prev: \" + this.previousState + \")\");\n \t\t}\n \t\t// EXTRA: we keep the previous state, to ensure that the parser can escape from malformed URI templates\n \t\tthis.previousState = this.state;\n@@ -2847,7 +2847,6 @@ public PathSegments(List<PathSegment> segments) {\n \n \t\t@Override\n \t\tpublic void append(String segment) {\n-\t\t\tlogger.debug(\"Adding \\\"\" + segment + \"\\\"\");\n \t\t\tthis.segments.add(new PathSegment(segment));\n \t\t}\n ",
    "output": "Reduce logging level in UrlParser"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequestFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.IOException;\n import java.net.URI;\n import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.Request;\n@@ -133,6 +134,7 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IO\n \t\t}\n \n \t\tRequest request = this.httpClient.newRequest(uri).method(httpMethod.name());\n+\t\trequest.timeout(this.readTimeout, TimeUnit.MILLISECONDS);\n \t\treturn new JettyClientHttpRequest(request, this.readTimeout);\n \t}\n }",
    "output": "Set request timeout in JettyClientHttpRequestFactory"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.15.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.16.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Groovy 4.0.21, Tomcat 10.1.23, Jetty 12.0.8, Netty 4.1.109, Undertow 2.3.13, Checkstyle 10.16"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -322,7 +322,8 @@ else if (requiredType != null) {\n \t\t\t\t\t\t\t\t// requested (indicated by required type), not for depends-on cascades.\n \t\t\t\t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n \t\t\t\t\t\t\t\t\t\t\"Failed to initialize dependency '\" + ex.getBeanName() + \"' of \" +\n-\t\t\t\t\t\t\t\t\t\t\t\trequiredType.getSimpleName() + \" bean '\" + beanName + \"'\", ex);\n+\t\t\t\t\t\t\t\t\t\t\t\trequiredType.getSimpleName() + \" bean '\" + beanName + \"': \" +\n+\t\t\t\t\t\t\t\t\t\t\t\tex.getMessage(), ex);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tthrow ex;\n \t\t\t\t\t\t}",
    "output": "Include original exception message in dependency initialization exception"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n--- a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n@@ -57,7 +57,7 @@ public static MethodProxy create(Class c1, Class c2, String desc, String name1,\n \t\tproxy.createInfo = new CreateInfo(c1, c2);\n \n \t\t// SPRING PATCH BEGIN\n-\t\tif (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {\n+\t\tif (c1 != Object.class && c1.isAssignableFrom(c2.getSuperclass()) && !Factory.class.isAssignableFrom(c2)) {\n \t\t\t// Try early initialization for overridden methods on specifically purposed subclasses\n \t\t\ttry {\n \t\t\t\tproxy.init();",
    "output": "Try early initialization for all user-declared methods (including interfaces)"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n@@ -355,8 +355,11 @@ else if (target instanceof Collection<?> collection) {\n \n \t@Override\n \tpublic boolean isCompilable() {\n+\t\tif (this.exitTypeDescriptor == null) {\n+\t\t\treturn false;\n+\t\t}\n \t\tif (this.indexedType == IndexedType.ARRAY) {\n-\t\t\treturn (this.exitTypeDescriptor != null && this.arrayTypeDescriptor != null);\n+\t\t\treturn (this.arrayTypeDescriptor != null);\n \t\t}\n \t\tSpelNodeImpl index = this.children[0];\n \t\tif (this.indexedType == IndexedType.LIST) {\n@@ -792,10 +795,11 @@ public TypedValue getValue() {\n \t\t\t\t\t\t\t\t\tthis.evaluationContext, this.targetObject, this.name);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tupdatePropertyReadState(accessor, this.name, targetType);\n+\t\t\t\t\t\tTypedValue result = accessor.read(this.evaluationContext, this.targetObject, this.name);\n \t\t\t\t\t\tif (accessor instanceof CompilablePropertyAccessor compilablePropertyAccessor) {\n \t\t\t\t\t\t\tsetExitTypeDescriptor(CodeFlow.toDescriptor(compilablePropertyAccessor.getPropertyType()));\n \t\t\t\t\t\t}\n-\t\t\t\t\t\treturn accessor.read(this.evaluationContext, this.targetObject, this.name);\n+\t\t\t\t\t\treturn result;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Avoid unnecessary compilation attempts in SpEL's Indexer"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n@@ -344,6 +344,7 @@ protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session,\n \t\t\t\t\t}\n \t\t\t\t\tcatch (Throwable throwable) {\n \t\t\t\t\t\tobservation.error(throwable);\n+\t\t\t\t\t\tthrow throwable;\n \t\t\t\t\t}\n \t\t\t\t\t// Rethrow JMSException to indicate an infrastructure problem\n \t\t\t\t\t// that may have to trigger recovery...",
    "output": "Rethrow unhandled JMS listener exceptions"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java b/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/DefaultTransactionDefinition.java\n@@ -227,7 +227,7 @@ public final int getIsolationLevel() {\n \t */\n \tpublic final void setTimeout(int timeout) {\n \t\tif (timeout < TIMEOUT_DEFAULT) {\n-\t\t\tthrow new IllegalArgumentException(\"Timeout must be a positive integer or TIMEOUT_DEFAULT\");\n+\t\t\tthrow new IllegalArgumentException(\"Timeout must be a non-negative integer or TIMEOUT_DEFAULT\");\n \t\t}\n \t\tthis.timeout = timeout;\n \t}",
    "output": "Fix transaction definition setTimeout error message since zero is valid This commit rephrases the `DefaultTransactionDefinition#setTimeout` exception message to better reflect the fact that 0 is a valid input value. Even though this often leads to a transaction immediately timing out after opening, there is one notable case where this has another meaningful effect: in Jakarta transactions (`UserTransaction`), when passing 0 \"the transaction service restores the default value\""
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java\n@@ -85,7 +85,7 @@ protected void logDeprecatedBean(String beanName, Class<?> beanType, BeanDefinit\n \t\tbuilder.append(beanName);\n \t\tbuilder.append('\\'');\n \t\tString resourceDescription = beanDefinition.getResourceDescription();\n-\t\tif (StringUtils.hasLength(resourceDescription)) {\n+\t\tif (StringUtils.hasText(resourceDescription)) {\n \t\t\tbuilder.append(\" in \");\n \t\t\tbuilder.append(resourceDescription);\n \t\t}",
    "output": "Omit empty resource description in DeprecatedBeanWarner's log message"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java\n@@ -32,6 +32,7 @@\n  * syntax {@code &orderServiceFactory} can be used to access the factory itself.\n  *\n  * @author Andy Clement\n+ * @author Sam Brannen\n  */\n public class BeanReference extends SpelNodeImpl {\n \n@@ -46,6 +47,16 @@ public BeanReference(int startPos, int endPos, String beanName) {\n \t}\n \n \n+\t/**\n+\t * Get the name of the referenced bean.\n+\t * @return the name of the referenced bean, potentially prefixed with\n+\t * {@code &} for a direct reference to a {@code FactoryBean}\n+\t * @since 6.2\n+\t */\n+\tpublic final String getName() {\n+\t\treturn this.beanName;\n+\t}\n+\n \t@Override\n \tpublic TypedValue getValueInternal(ExpressionState state) throws EvaluationException {\n \t\tBeanResolver beanResolver = state.getEvaluationContext().getBeanResolver();",
    "output": "Introduce getNamein SpEL's BeanReference"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -72,19 +72,19 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \n \tprivate static final Pattern QUERY_PARAM_PATTERN = Pattern.compile(\"([^&=]+)(=?)([^&]+)?\");\n \n-\tprivate static final String SCHEME_PATTERN = \"([^:/?#]+):\";\n+\tprivate static final String SCHEME_PATTERN = \"([^:/?#\\\\\\\\]+):\";\n \n \tprivate static final String HTTP_PATTERN = \"(?i)(http|https):\";\n \n-\tprivate static final String USERINFO_PATTERN = \"([^/?#]*)\";\n+\tprivate static final String USERINFO_PATTERN = \"([^/?#\\\\\\\\]*)\";\n \n-\tprivate static final String HOST_IPV4_PATTERN = \"[^/?#:]*\";\n+\tprivate static final String HOST_IPV4_PATTERN = \"[^/?#:\\\\\\\\]*\";\n \n \tprivate static final String HOST_IPV6_PATTERN = \"\\\\[[\\\\p{XDigit}:.]*[%\\\\p{Alnum}]*]\";\n \n \tprivate static final String HOST_PATTERN = \"(\" + HOST_IPV6_PATTERN + \"|\" + HOST_IPV4_PATTERN + \")\";\n \n-\tprivate static final String PORT_PATTERN = \"(\\\\{[^}]+\\\\}?|[^/?#]*)\";\n+\tprivate static final String PORT_PATTERN = \"(\\\\{[^}]+\\\\}?|[^/?#\\\\\\\\]*)\";\n \n \tprivate static final String PATH_PATTERN = \"([^?#]*)\";\n ",
    "output": "Refine UriComponentsBuilder parsing This commit refines the expressions for the scheme, user info, host and port parts of the URL in UriComponentsBuilder to better conform to RFC 3986"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java b/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -66,6 +66,10 @@ private void registerHints(Class<?> type, RuntimeHints runtimeHints) {\n \t\t\tif (superClass != null) {\n \t\t\t\tregisterHints(superClass, runtimeHints);\n \t\t\t}\n+\t\t\tClass<?> enclosingClass = type.getEnclosingClass();\n+\t\t\tif (enclosingClass != null) {\n+\t\t\t\truntimeHints.reflection().registerType(enclosingClass);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Add Kotlin hints for enclosing class This is needed by Kotlin reflection in order to be able to list class members on native"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java b/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n--- a/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n@@ -74,12 +74,9 @@ public static void closeConnection(@Nullable Connection con, boolean stop) {\n \t\tif (con != null) {\n \t\t\ttry {\n \t\t\t\tif (stop) {\n-\t\t\t\t\ttry {\n+\t\t\t\t\ttry (con) {\n \t\t\t\t\t\tcon.stop();\n \t\t\t\t\t}\n-\t\t\t\t\tfinally {\n-\t\t\t\t\t\tcon.close();\n-\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tcon.close();",
    "output": "Use try-with-resources when applicable"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n@@ -575,14 +575,11 @@ protected void closeConnection(Connection con) {\n \t\t\tlogger.debug(\"Closing shared JMS Connection: \" + con);\n \t\t}\n \t\ttry {\n-\t\t\ttry {\n+\t\t\ttry (con) {\n \t\t\t\tif (this.startedCount > 0) {\n \t\t\t\t\tcon.stop();\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfinally {\n-\t\t\t\tcon.close();\n-\t\t\t}\n \t\t}\n \t\tcatch (jakarta.jms.IllegalStateException ex) {\n \t\t\tlogger.debug(\"Ignoring Connection state exception - assuming already closed: \" + ex);",
    "output": "Use try-with-resources when applicable"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n@@ -229,14 +229,14 @@ else if (obj instanceof Number number) {\n \t\t\ttry {\n \t\t\t\treturn rs.getObject(index, requiredType);\n \t\t\t}\n-\t\t\tcatch (AbstractMethodError err) {\n-\t\t\t\tlogger.debug(\"JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method\", err);\n-\t\t\t}\n-\t\t\tcatch (SQLFeatureNotSupportedException ex) {\n+\t\t\tcatch (SQLFeatureNotSupportedException | AbstractMethodError ex) {\n \t\t\t\tlogger.debug(\"JDBC driver does not support JDBC 4.1 'getObject(int, Class)' method\", ex);\n \t\t\t}\n \t\t\tcatch (SQLException ex) {\n-\t\t\t\tlogger.debug(\"JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method\", ex);\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"JDBC driver has limited support for 'getObject(int, Class)' with column type: \" +\n+\t\t\t\t\t\t\trequiredType.getName(), ex);\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Corresponding SQL types for JSR-310 / Joda-Time types, left up",
    "output": "Log column type for limited support message in getResultSetValue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Nullable.java b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n--- a/spring-core/src/main/java/org/springframework/lang/Nullable.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,9 +22,8 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import javax.annotation.Nonnull;\n+import javax.annotation.CheckForNull;\n import javax.annotation.meta.TypeQualifierNickname;\n-import javax.annotation.meta.When;\n \n /**\n  * A common Spring annotation to declare that annotated elements can be {@code null}\n@@ -50,7 +49,7 @@\n @Target({ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n-@Nonnull(when = When.MAYBE)\n+@CheckForNull\n @TypeQualifierNickname\n public @interface Nullable {\n }",
    "output": "Prevent compilation warnings with `@Nullable` This commit replaces `@Nonnull(when = When.MAYBE)` meta-annotation in `org.springframework.lang.Nullable` by `@CheckForNull` in order to prevent `unknown enum constant When.MAYBE` compilation warnings"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.14.2\");\n+\t\t\tcheckstyle.setToolVersion(\"10.15.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to AspectJ 1.9.22, Groovy 4.0.20, Tomcat 10.1.20, Netty 4.1.108, OpenPDF 1.3.43, Woodstox 6.6.2, Checkstyle 10.15"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java\n@@ -27,6 +27,7 @@\n import org.springframework.http.HttpStatusCode;\n import org.springframework.http.support.Netty4HeadersAdapter;\n import org.springframework.lang.Nullable;\n+import org.springframework.util.StreamUtils;\n \n /**\n  * {@link ClientHttpResponse} implementation for the Reactor-Netty HTTP client.\n@@ -89,7 +90,13 @@ public InputStream getBody() throws IOException {\n \n \t@Override\n \tpublic void close() {\n-\t\tthis.connection.dispose();\n+\t\ttry{\n+\t\t\tInputStream body = getBody();\n+\t\t\tStreamUtils.drain(body);\n+\t\t\tbody.close();\n+\t\t}\n+\t\tcatch (IOException ignored) {\n+\t\t}\n \t}\n \n }",
    "output": "ReactorNettyClientResponse should close response body This commit ensures that the response body is drained and closed when the response itself is closed, instead of disposing the connection, as this will disable the connection pool"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/server/standard/SpringConfiguratorTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/server/standard/SpringConfiguratorTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/server/standard/SpringConfiguratorTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/standard/SpringConfiguratorTests.java\n@@ -23,8 +23,8 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.stereotype.Component;\n import org.springframework.web.context.ContextLoader;\n import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n@@ -84,7 +84,7 @@ void getEndpointSingletonByComponentName() throws Exception {\n \n \n \t@Configuration\n-\t@ComponentScan(basePackageClasses=SpringConfiguratorTests.class)\n+\t@Import(ComponentEchoEndpoint.class)\n \tstatic class Config {\n \n \t\t@Bean",
    "output": "Avoid classpath scanning in test This commit updates SpringConfiguratorTests to not rely on classpath scanning as it could have side effect. In this particular case, the configuration class that sources the scan is detected again, leading to bean overriding. Irrespective of that, adding more code in that package may have side effect as they could be scanned as well"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/i18n/LocaleContextThreadLocalAccessorTests.java b/spring-context/src/test/java/org/springframework/context/i18n/LocaleContextThreadLocalAccessorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/i18n/LocaleContextThreadLocalAccessorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/i18n/LocaleContextThreadLocalAccessorTests.java\n@@ -51,6 +51,7 @@ void cleanUp() {\n \n \t@ParameterizedTest\n \t@MethodSource\n+\t@SuppressWarnings(\"try\")\n \tvoid propagation(@Nullable LocaleContext previous, LocaleContext current) throws Exception {\n \t\tLocaleContextHolder.setLocaleContext(current);\n \t\tContextSnapshot snapshot = ContextSnapshotFactory.builder()\n\ndiff --git a/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n@@ -278,6 +278,7 @@ void sendWebSocketBinaryExceedOutboundMessageSizeLimit() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n \tvoid reassembleReceivedIFragmentedFrames() throws Exception {\n \t\tWebSocketHandler handler = connect();\n \t\thandler.handleMessage(this.webSocketSession, new TextMessage(\"SEND\\ndestination:/topic/foo\\nco\"));",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java\n@@ -401,8 +401,8 @@ public Constructor<?>[] getPreferredConstructors() {\n \t\tif (attribute instanceof Constructor<?> constructor) {\n \t\t\treturn new Constructor<?>[] {constructor};\n \t\t}\n-\t\tif (attribute instanceof Constructor<?>[]) {\n-\t\t\treturn (Constructor<?>[]) attribute;\n+\t\tif (attribute instanceof Constructor<?>[] constructors) {\n+\t\t\treturn constructors;\n \t\t}\n \t\tthrow new IllegalArgumentException(\"Invalid value type for attribute '\" +\n \t\t\t\tPREFERRED_CONSTRUCTORS_ATTRIBUTE + \"': \" + attribute.getClass().getName());",
    "output": "Apply instanceof pattern matching in RootBeanDefinition"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java\n--- a/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java\n@@ -94,7 +94,7 @@ private void parseField(Field field, Class<?> source) {\n \t\tAtomicBoolean overrideAnnotationFound = new AtomicBoolean();\n \n \t\tMergedAnnotations.from(field, DIRECT).stream(BeanOverride.class).forEach(mergedAnnotation -> {\n-\t\t\tAssert.notNull(mergedAnnotation.isMetaPresent(), \"@BeanOverride annotation must be meta-present\");\n+\t\t\tAssert.isTrue(mergedAnnotation.isMetaPresent(), \"@BeanOverride annotation must be meta-present\");\n \n \t\t\tBeanOverride beanOverride = mergedAnnotation.synthesize();\n \t\t\tBeanOverrideProcessor processor = BeanUtils.instantiateClass(beanOverride.value());",
    "output": "Fix logic error hidden by auto-boxing"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java b/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n--- a/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -217,7 +217,7 @@ public static void commitIfNecessary(Session session) throws JMSException {\n \t\ttry {\n \t\t\tsession.commit();\n \t\t}\n-\t\tcatch (jakarta.jms.TransactionInProgressException | jakarta.jms.IllegalStateException ex) {\n+\t\tcatch (jakarta.jms.TransactionInProgressException ex) {\n \t\t\t// Ignore -> can only happen in case of a JTA transaction.\n \t\t}\n \t}\n@@ -232,7 +232,7 @@ public static void rollbackIfNecessary(Session session) throws JMSException {\n \t\ttry {\n \t\t\tsession.rollback();\n \t\t}\n-\t\tcatch (jakarta.jms.TransactionInProgressException | jakarta.jms.IllegalStateException ex) {\n+\t\tcatch (jakarta.jms.TransactionInProgressException ex) {\n \t\t\t// Ignore -> can only happen in case of a JTA transaction.\n \t\t}\n \t}",
    "output": "Propagate JMS IllegalStateException from commit/rollbackIfNecessary"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -759,7 +759,7 @@ private static AnnotatedElementAdapter from(@Nullable Annotation[] annotations)\n \n \t\t@Override\n \t\tpublic boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {\n-\t\t\tfor (Annotation annotation : getAnnotations()) {\n+\t\t\tfor (Annotation annotation : this.annotations) {\n \t\t\t\tif (annotation.annotationType() == annotationClass) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n@@ -771,7 +771,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)\n \t\t@Nullable\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationClass) {\n-\t\t\tfor (Annotation annotation : getAnnotations()) {\n+\t\t\tfor (Annotation annotation : this.annotations) {\n \t\t\t\tif (annotation.annotationType() == annotationClass) {\n \t\t\t\t\treturn (T) annotation;\n \t\t\t\t}",
    "output": "Avoid unnecessary Annotation array cloning in TypeDescriptor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -545,7 +545,7 @@ public int hashCode() {\n \tpublic String toString() {\n \t\tStringBuilder builder = new StringBuilder();\n \t\tfor (Annotation ann : getAnnotations()) {\n-\t\t\tbuilder.append('@').append(ann.annotationType().getName()).append(' ');\n+\t\t\tbuilder.append('@').append(getName(ann.annotationType())).append(' ');\n \t\t}\n \t\tbuilder.append(getResolvableType());\n \t\treturn builder.toString();\n@@ -733,6 +733,11 @@ public static TypeDescriptor nested(Property property, int nestingLevel) {\n \t\treturn new TypeDescriptor(property).nested(nestingLevel);\n \t}\n \n+\tprivate static String getName(Class<?> clazz) {\n+\t\tString canonicalName = clazz.getCanonicalName();\n+\t\treturn (canonicalName != null ? canonicalName : clazz.getName());\n+\t}\n+\n \n \t/**\n \t * Adapter class for exposing a {@code TypeDescriptor}'s annotations as an",
    "output": "Restore canonical name representation for 6.2"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.14.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.14.2\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.14.2"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n@@ -50,7 +50,7 @@ public class SimpleAliasRegistry implements AliasRegistry {\n \tprivate final Map<String, String> aliasMap = new ConcurrentHashMap<>(16);\n \n \t/** List of alias names, in registration order. */\n-\tprivate volatile List<String> aliasNames = new ArrayList<>(16);\n+\tprivate final List<String> aliasNames = new ArrayList<>(16);\n \n \n \t@Override",
    "output": "Make SimpleAliasRegistry.aliasNames final"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java\n@@ -105,6 +105,17 @@ void valueMatches() {\n \t\t\t\t\t\t\"[.*ISO-8859-1.*]\"));\n \t}\n \n+\t@Test\n+\tvoid valueMatchesWithNonexistentHeader() {\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\theaders.setContentType(MediaType.parseMediaType(\"application/json;charset=UTF-8\"));\n+\t\tHeaderAssertions assertions = headerAssertions(headers);\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)\n+\t\t\t\t.isThrownBy(() -> assertions.valueMatches(\"Content-XYZ\", \".*ISO-8859-1.*\"))\n+\t\t\t\t.withMessage(\"Response header 'Content-XYZ' not found\");\n+\t}\n+\n \t@Test\n \tvoid valuesMatch() {\n \t\tHttpHeaders headers = new HttpHeaders();",
    "output": "Add missing test"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.13.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.14.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Reactor 2023.0.4 and Micrometer 1.12.4 Includes AspectJ 1.9.21.1, Groovy 4.0.19, Tomcat 10.1.19, Jetty 12.0.7, Jackson 2.15.4, OpenPDF 1.3.42, Mockito 5.11, Checkstyle 10.14.1"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java b/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java\n--- a/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/web/webmvc/mvccontroller/mvcanncontroller/WebConfiguration.java\n@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2002-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.docs.web.webmvc.mvccontroller.mvcanncontroller;\n+\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+\n+// tag::snippet[]\n+@Configuration\n+@ComponentScan(\"org.example.web\")\n+public class WebConfiguration {\n+\n+\t// ...\n+}\n+// end::snippet[]",
    "output": "Use code includes and tabs in mvc-controller/ann.adoc"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/Spr16217Tests.java b/spring-context/src/test/java/org/springframework/context/annotation/Spr16217Tests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/Spr16217Tests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr16217Tests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.context.annotation;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.type.AnnotatedTypeMetadata;\n@@ -28,7 +27,6 @@\n class Spr16217Tests {\n \n \t@Test\n-\t@Disabled(\"TODO\")\n \tpublic void baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInRegisterBeanPhase() {\n \t\ttry (AnnotationConfigApplicationContext context =\n \t\t\t\t\tnew AnnotationConfigApplicationContext(RegisterBeanPhaseImportingConfiguration.class)) {",
    "output": "Enable test now that the related issue is resolved"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java\n@@ -33,7 +33,6 @@\n import jakarta.annotation.PostConstruct;\n import jakarta.inject.Inject;\n import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n@@ -659,14 +658,6 @@ void publicSubclassWithInheritedEventListener() {\n \t\tthis.eventCollector.assertTotalEventsCount(1);\n \t}\n \n-\t@Test @Disabled  // SPR-15122\n-\tvoid listenersReceiveEarlyEvents() {\n-\t\tload(EventOnPostConstruct.class, OrderedTestListener.class);\n-\t\tOrderedTestListener listener = this.context.getBean(OrderedTestListener.class);\n-\n-\t\tassertThat(listener.order).contains(\"first\", \"second\", \"third\");\n-\t}\n-\n \t@Test\n \tvoid missingListenerBeanIgnored() {\n \t\tload(MissingEventListener.class);",
    "output": "Remove disabled test of declined issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java b/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java\n@@ -148,10 +148,10 @@ public static Publisher<?> invokeSuspendingFunction(CoroutineContext context, Me\n \t\tif (KTypes.isSubtypeOf(returnType, flowType)) {\n \t\t\treturn mono.flatMapMany(CoroutinesUtils::asFlux);\n \t\t}\n-\t\telse if (KTypes.isSubtypeOf(returnType, monoType)) {\n-\t\t\treturn mono.flatMap(o -> ((Mono<?>)o));\n-\t\t}\n-\t\telse if (KTypes.isSubtypeOf(returnType, publisherType)) {\n+\t\tif (KTypes.isSubtypeOf(returnType, publisherType)) {\n+\t\t\tif (KTypes.isSubtypeOf(returnType, monoType)) {\n+\t\t\t\treturn mono.flatMap(o -> ((Mono<?>)o));\n+\t\t\t}\n \t\t\treturn mono.flatMapMany(o -> ((Publisher<?>)o));\n \t\t}\n \t\treturn mono;",
    "output": "Refine publisher type check in CoroutinesUtils"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n@@ -512,7 +512,6 @@ protected ModelAndView handleAsyncRequestTimeoutException(AsyncRequestTimeoutExc\n \t * @param handler the executed handler, or {@code null} if none chosen\n \t * at the time of the exception (for example, if multipart resolution failed)\n \t * @return an empty ModelAndView indicating the exception was handled\n-\t * @throws IOException potentially thrown from {@link HttpServletResponse#sendError}\n \t * @since 5.3.33\n \t */\n \tprotected ModelAndView handleAsyncRequestNotUsableException(AsyncRequestNotUsableException ex,",
    "output": "Remove IOException that's not thrown from Javadoc"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n@@ -27,6 +27,8 @@\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ApplicationListener;\n@@ -183,12 +185,21 @@ protected void doExecute(Runnable task) {\n \t\t}\n \t}\n \n+\tprivate Runnable taskOnSchedulerThread(Runnable task) {\n+\t\treturn new DelegatingErrorHandlingRunnable(task, TaskUtils.getDefaultErrorHandler(true));\n+\t}\n+\n \tprivate Runnable scheduledTask(Runnable task) {\n-\t\treturn () -> execute(new DelegatingErrorHandlingRunnable(task, TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER));\n+\t\treturn () -> execute(new DelegatingErrorHandlingRunnable(task, this::shutdownAwareErrorHandler));\n \t}\n \n-\tprivate Runnable taskOnSchedulerThread(Runnable task) {\n-\t\treturn new DelegatingErrorHandlingRunnable(task, TaskUtils.getDefaultErrorHandler(true));\n+\tprivate void shutdownAwareErrorHandler(Throwable ex) {\n+\t\tif (this.scheduledExecutor.isTerminated()) {\n+\t\t\tLogFactory.getLog(getClass()).debug(\"Ignoring scheduled task exception after shutdown\", ex);\n+\t\t}\n+\t\telse {\n+\t\t\tTaskUtils.getDefaultErrorHandler(true).handleError(ex);\n+\t\t}\n \t}\n \n ",
    "output": "Ignore scheduled task exceptions after shutdown Includes suppression after logging, not propagating exceptions to the thread itself"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n--- a/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n+++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n@@ -82,7 +82,7 @@ protected void doSetNestedPath(@Nullable String nestedPath) {\n \t\t\tnestedPath = \"\";\n \t\t}\n \t\tnestedPath = canonicalFieldName(nestedPath);\n-\t\tif (nestedPath.length() > 0 && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {\n+\t\tif (!nestedPath.isEmpty() && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {\n \t\t\tnestedPath += NESTED_PATH_SEPARATOR;\n \t\t}\n \t\tthis.nestedPath = nestedPath;",
    "output": "enh: use isEmptyinstead of length"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n@@ -162,7 +162,7 @@ public String getFirst(String headerName) {\n \t\t\tif (headerName.equalsIgnoreCase(CONTENT_TYPE)) {\n \t\t\t\t// Content-Type is written as an override so check super first\n \t\t\t\tString value = super.getFirst(headerName);\n-\t\t\t\treturn (value != null ? value : servletResponse.getHeader(headerName));\n+\t\t\t\treturn (value != null ? value : servletResponse.getContentType());\n \t\t\t}\n \t\t\telse {\n \t\t\t\tString value = servletResponse.getHeader(headerName);",
    "output": "Use ServletResponse#getContentType in ServletServerHttpResponse This commit updates ServletServerHttpResponse.ServletResponseHttpHeaders in order to use ServletResponse#getContentType instead of ServletResponse#getHeader. It allows to have a consistent behavior between Tomcat (which sets only the former) and Undertow/Jetty (which set both)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java b/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java\n--- a/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java\n+++ b/spring-core/src/main/java/org/springframework/util/PlaceholderResolutionException.java\n@@ -31,7 +31,7 @@\n  * @since 6.2\n  */\n @SuppressWarnings(\"serial\")\n-public class PlaceholderResolutionException extends RuntimeException {\n+public class PlaceholderResolutionException extends IllegalArgumentException {\n \n \tprivate final String reason;\n ",
    "output": "Make PlaceholderResolutionException extend from IllegalArgumentException To smooth upgrade from 6.1.x, this commit makes sure that code that used to catch an IAE to ignore a faulty placeholder resolution still works"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -484,11 +484,11 @@ void acceptLanguage() {\n \t\t\t\tnew Locale.LanguageRange(\"*\", 0.5)\n \t\t);\n \t\tassertThat(headers.getAcceptLanguage()).isEqualTo(expectedRanges);\n-\t\tassertThat(headers.getAcceptLanguageAsLocales()).isEqualTo(List.of(\n+\t\tassertThat(headers.getAcceptLanguageAsLocales()).containsExactly(\n \t\t\t\tLocale.forLanguageTag(\"fr-ch\"),\n \t\t\t\tLocale.forLanguageTag(\"fr\"),\n \t\t\t\tLocale.forLanguageTag(\"en\"),\n-\t\t\t\tLocale.forLanguageTag(\"de\")));\n+\t\t\t\tLocale.forLanguageTag(\"de\"));\n \n \t\theaders.setAcceptLanguageAsLocales(Collections.singletonList(Locale.FRANCE));\n \t\tassertThat(headers.getAcceptLanguageAsLocales()).first().isEqualTo(Locale.FRANCE);",
    "output": "Polishing external contribution"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java\n@@ -116,6 +116,19 @@ void primaryVersusFallback(Class<?> configClass) {\n \t\tctx.close();\n \t}\n \n+\t/**\n+\t * One regular bean along with fallback beans is considered effective primary\n+\t */\n+\t@Test\n+\tvoid effectivePrimary() {\n+\t\tAnnotationConfigApplicationContext ctx = context(EffectivePrimaryConfig.class);\n+\n+\t\tTestBean testBean = ctx.getBean(TestBean.class);\n+\t\tassertThat(testBean.getName()).isEqualTo(\"effective-primary\");\n+\n+\t\tctx.close();\n+\t}\n+\n \t@Test\n \tvoid customWithLazyResolution() {\n \t\tAnnotationConfigApplicationContext ctx = context(CustomConfig.class, CustomPojo.class);\n@@ -314,6 +327,24 @@ public TestBean testBean2x() {\n \t\t}\n \t}\n \n+\t@Configuration\n+\tstatic class EffectivePrimaryConfig {\n+\n+\t\t@Bean\n+\t\tpublic TestBean effectivePrimary() {\n+\t\t\treturn new TestBean(\"effective-primary\");\n+\t\t}\n+\n+\t\t@Bean @Fallback\n+\t\tpublic TestBean fallback1() {\n+\t\t\treturn new TestBean(\"fallback1\");\n+\t\t}\n+\n+\t\t@Bean @Fallback\n+\t\tpublic TestBean fallback2() {\n+\t\t\treturn new TestBean(\"fallback2\");\n+\t\t}\n+\t}\n \n \t@Component @Lazy\n \tstatic class StandardPojo {",
    "output": "Add test for @Fallback with BeanFactory.getBean(Class)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -478,7 +478,7 @@ private void removeKnownSuperclass(String removedClass, boolean replace) {\n \t\t\t\tif (entry.getValue().isEmpty()) {\n \t\t\t\t\tit.remove();\n \t\t\t\t}\n-\t\t\t\telse if (replace) {\n+\t\t\t\telse if (replace && replacingClass == null) {\n \t\t\t\t\treplacedSuperclass = entry.getKey();\n \t\t\t\t\treplacingClass = entry.getValue().get(0);\n \t\t\t\t}",
    "output": "Consistently pick lowest superclass level to replace"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java\n@@ -30,6 +30,7 @@\n \n import org.junit.jupiter.api.Test;\n \n+import org.springframework.core.testfixture.ide.IdeUtils;\n import org.springframework.util.ReflectionUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -120,7 +121,14 @@ void findBridgedMethodInHierarchyWithBoundedGenerics() throws Exception {\n \tvoid isBridgeMethodFor() throws Exception {\n \t\tMethod bridged = MyBar.class.getDeclaredMethod(\"someMethod\", String.class, Object.class);\n \t\tMethod other = MyBar.class.getDeclaredMethod(\"someMethod\", Integer.class, Object.class);\n-\t\tMethod bridge = MyBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\n+\t\tMethod bridge;\n+\n+\t\tif (IdeUtils.runningInEclipse()) {\n+\t\t\tbridge = InterBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\n+\t\t}\n+\t\telse {\n+\t\t\tbridge = MyBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\n+\t\t}\n \n \t\tassertThat(BridgeMethodResolver.isBridgeMethodFor(bridge, bridged, MyBar.class)).as(\"Should be bridge method\").isTrue();\n \t\tassertThat(BridgeMethodResolver.isBridgeMethodFor(bridge, other, MyBar.class)).as(\"Should not be bridge method\").isFalse();",
    "output": "Fix BridgeMethodResolverTests.isBridgeMethodForin Eclipse IDE"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java\n@@ -472,6 +472,6 @@ static IntegerTestBean[] createArray() {\n \n \n \trecord NumberWrapper(Number value) {\n-\t};\n+\t}\n \n }",
    "output": "Spring cleaning: remove unnecessary semicolon"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n@@ -744,13 +744,15 @@ public boolean isPrimary() {\n \t * {@inheritDoc}\n \t * <p>Default is {@code false}.\n \t */\n+\t@Override\n \tpublic void setFallback(boolean fallback) {\n \t\tthis.fallback = fallback;\n \t}\n \n \t/**\n \t * {@inheritDoc}\n \t */\n+\t@Override\n \tpublic boolean isFallback() {\n \t\treturn this.fallback;\n \t}",
    "output": "Add missing @Override annotations"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n@@ -768,7 +768,7 @@ public void setValue(@Nullable Object newValue) {\n \n \t\t@Override\n \t\tpublic boolean isWritable() {\n-\t\t\treturn true;\n+\t\t\treturn false;\n \t\t}\n \t}\n ",
    "output": "SpEL's StringIndexingValueRef.isWritableshould return false"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -313,8 +313,7 @@ protected final SourceClass doProcessConfigurationClass(\n \t\t\t\t\tComponentScan.class, ComponentScans.class, MergedAnnotation::isMetaPresent);\n \t\t}\n \n-\t\tif (!componentScans.isEmpty() &&\n-\t\t\t\t!this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n+\t\tif (!componentScans.isEmpty()) {\n \t\t\tfor (AnnotationAttributes componentScan : componentScans) {\n \t\t\t\t// The config class is annotated with @ComponentScan -> perform the scan immediately\n \t\t\t\tSet<BeanDefinitionHolder> scannedBeanDefinitions =",
    "output": "Remove ComponentScan duplicate condition"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -184,7 +184,7 @@ protected void doExecute(Runnable task) {\n \t}\n \n \tprivate Runnable scheduledTask(Runnable task) {\n-\t\treturn () -> execute(task);\n+\t\treturn () -> execute(new DelegatingErrorHandlingRunnable(task, TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER));\n \t}\n \n \tprivate Runnable taskOnSchedulerThread(Runnable task) {",
    "output": "Consistent default error handling/logging for all scheduled tasks"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n@@ -94,7 +94,7 @@ public ByteBuffer getNativeBuffer() {\n \n \tprivate void setNativeBuffer(ByteBuffer byteBuffer) {\n \t\tthis.byteBuffer = byteBuffer;\n-\t\tthis.capacity = byteBuffer.remaining();\n+\t\tthis.capacity = byteBuffer.capacity();\n \t}\n \n ",
    "output": "Set correct capacity in DefaultDataBuffer::setNativeBuffer"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java\n@@ -66,7 +66,6 @@\n import org.springframework.stereotype.Component;\n import org.springframework.util.Assert;\n \n-import static java.util.Map.entry;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n@@ -1089,7 +1088,7 @@ void testCollectionInjectionFromSameConfigurationClass() {\n \tvoid testMapInjectionFromSameConfigurationClass() {\n \t\tConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(MapInjectionConfiguration.class);\n \t\tMapInjectionConfiguration bean = ctx.getBean(MapInjectionConfiguration.class);\n-\t\tassertThat(bean.testBeans).containsOnly(entry(\"testBean\", ctx.getBean(Runnable.class)));\n+\t\tassertThat(bean.testBeans).containsOnly(Map.entry(\"testBean\", ctx.getBean(Runnable.class)));\n \t\tctx.close();\n \t}\n ",
    "output": "Avoid trivial static import"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/ComplexWebApplicationContext.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/ComplexWebApplicationContext.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/ComplexWebApplicationContext.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/ComplexWebApplicationContext.java\n@@ -274,6 +274,7 @@ public ModelAndView handle(HttpServletRequest request, HttpServletResponse respo\n \t\t\treturn null;\n \t\t}\n \n+\t\t@Deprecated\n \t\t@Override\n \t\tpublic long getLastModified(HttpServletRequest request, Object delegate) {\n \t\t\treturn ((MyHandler) delegate).lastModified();\n@@ -294,6 +295,7 @@ public ModelAndView handle(HttpServletRequest request, HttpServletResponse respo\n \t\t\tthrow new ServletException(\"dummy\");\n \t\t}\n \n+\t\t@Deprecated\n \t\t@Override\n \t\tpublic long getLastModified(HttpServletRequest request, Object delegate) {\n \t\t\treturn -1;",
    "output": "Clean up warning in Gradle build"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n package org.springframework.http.client;\n \n import java.io.IOException;\n+import java.io.OutputStream;\n import java.net.URI;\n import java.util.Iterator;\n import java.util.List;\n@@ -92,7 +93,17 @@ public ClientHttpResponse execute(HttpRequest request, byte[] body) throws IOExc\n \t\t\t\trequest.getHeaders().forEach((key, value) -> delegate.getHeaders().addAll(key, value));\n \t\t\t\tif (body.length > 0) {\n \t\t\t\t\tif (delegate instanceof StreamingHttpOutputMessage streamingOutputMessage) {\n-\t\t\t\t\t\tstreamingOutputMessage.setBody(outputStream -> StreamUtils.copy(body, outputStream));\n+\t\t\t\t\t\tstreamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void writeTo(OutputStream outputStream) throws IOException {\n+\t\t\t\t\t\t\t\tStreamUtils.copy(body, outputStream);\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean repeatable() {\n+\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tStreamUtils.copy(body, delegate.getBody());",
    "output": "Allow repeatable writes in Client Interceptors"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java\n@@ -268,7 +268,7 @@ public static Builder forReadWriteDataBinding() {\n \t/**\n \t * Builder for {@code SimpleEvaluationContext}.\n \t */\n-\tpublic static class Builder {\n+\tpublic static final class Builder {\n \n \t\tprivate final List<PropertyAccessor> accessors;\n \n@@ -280,7 +280,7 @@ public static class Builder {\n \t\t@Nullable\n \t\tprivate TypedValue rootObject;\n \n-\t\tpublic Builder(PropertyAccessor... accessors) {\n+\t\tprivate Builder(PropertyAccessor... accessors) {\n \t\t\tthis.accessors = Arrays.asList(accessors);\n \t\t}\n ",
    "output": "Make SimpleEvaluationContext.Builder final and its constructor private"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -76,7 +76,7 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \n \tprivate static final String HTTP_PATTERN = \"(?i)(http|https):\";\n \n-\tprivate static final String USERINFO_PATTERN = \"([^@\\\\[/?#]*)\";\n+\tprivate static final String USERINFO_PATTERN = \"([^@/?#]*)\";\n \n \tprivate static final String HOST_IPV4_PATTERN = \"[^\\\\[/?#:]*\";\n ",
    "output": "Upgrade user info pattern"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java b/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java\n--- a/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/support/RestClientAdapter.java\n@@ -55,7 +55,7 @@ private RestClientAdapter(RestClient restClient) {\n \n \t@Override\n \tpublic boolean supportsRequestAttributes() {\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Override",
    "output": "Fix supportsRequestAttributes for RestClientAdapter Previously, RestClientAdapter claimed that it supports request attributes when, in fact, it does not. This commit updates the implementation accordingly"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n@@ -689,6 +689,25 @@ void nullSafeSelectFirst() {\n \t\t\tassertThat(inventor).isNull();\n \t\t}\n \n+\t\t@Test\n+\t\tvoid nullSafeSelectFirstAndPropertyAccess() {\n+\t\t\tIEEE society = new IEEE();\n+\t\t\tStandardEvaluationContext context = new StandardEvaluationContext(society);\n+\t\t\tString expression = \"members?.^[nationality == 'Serbian']?.name\"; // <1>\n+\n+\t\t\t// evaluates to \"Nikola Tesla\"\n+\t\t\tString name = parser.parseExpression(expression)\n+\t\t\t\t\t.getValue(context, String.class);\n+\t\t\tassertThat(name).isEqualTo(\"Nikola Tesla\");\n+\n+\t\t\tsociety.members = null;\n+\n+\t\t\t// evaluates to null - does not throw a NullPointerException\n+\t\t\tname = parser.parseExpression(expression)\n+\t\t\t\t\t.getValue(context, String.class);\n+\t\t\tassertThat(name).isNull();\n+\t\t}\n+\n \t\t@Test\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tvoid nullSafeSelectLast() {",
    "output": "Document safe navigation semantics within compound expressions in SpEL"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java b/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java\n@@ -81,14 +81,9 @@ public ApplicationContextAwareProcessor(ConfigurableApplicationContext applicati\n \t@Override\n \t@Nullable\n \tpublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n-\t\tif (!((bean instanceof Aware) && (bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||\n-\t\t\t\tbean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||\n-\t\t\t\tbean instanceof MessageSourceAware || bean instanceof ApplicationStartupAware ||\n-\t\t\t\tbean instanceof ApplicationContextAware))) {\n-\t\t\treturn bean;\n+\t\tif (bean instanceof Aware) {\n+\t\t\tinvokeAwareInterfaces(bean);\n \t\t}\n-\n-\t\tinvokeAwareInterfaces(bean);\n \t\treturn bean;\n \t}\n ",
    "output": "Simplify logic in ApplicationContextAwareProcessor.postProcessBeforeInitialization"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -1425,12 +1425,17 @@ public static Method getInterfaceMethodIfPossible(Method method, @Nullable Class\n \t}\n \n \tprivate static Method findInterfaceMethodIfPossible(Method method, Class<?> startClass, Class<?> endClass) {\n+\t\tClass<?>[] parameterTypes = null;\n \t\tClass<?> current = startClass;\n \t\twhile (current != null && current != endClass) {\n-\t\t\tClass<?>[] ifcs = current.getInterfaces();\n-\t\t\tfor (Class<?> ifc : ifcs) {\n+\t\t\tif (parameterTypes == null) {\n+\t\t\t\t// Since Method#getParameterTypes() clones the array, we lazily retrieve\n+\t\t\t\t// and cache parameter types to avoid cloning the array multiple times.\n+\t\t\t\tparameterTypes = method.getParameterTypes();\n+\t\t\t}\n+\t\t\tfor (Class<?> ifc : current.getInterfaces()) {\n \t\t\t\ttry {\n-\t\t\t\t\treturn ifc.getMethod(method.getName(), method.getParameterTypes());\n+\t\t\t\t\treturn ifc.getMethod(method.getName(), parameterTypes);\n \t\t\t\t}\n \t\t\t\tcatch (NoSuchMethodException ex) {\n \t\t\t\t\t// ignore",
    "output": "Cache parameter types array in ClassUtils.findInterfaceMethodIfPossible"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/RequestPredicates.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/RequestPredicates.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/RequestPredicates.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/RequestPredicates.java\n@@ -1237,7 +1237,7 @@ private static Map<String, Object> mergeAttributes(ServerRequest request, Map<St\n \t\t\tPathPattern oldPathPattern = (PathPattern) request.attribute(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE)\n \t\t\t\t\t.orElse(null);\n \n-\t\t\tMap<String, Object> result = new LinkedHashMap<>(2);\n+\t\t\tMap<String, Object> result = CollectionUtils.newLinkedHashMap(2);\n \t\t\tresult.put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, mergeMaps(oldPathVariables, newPathVariables));\n \t\t\tresult.put(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE, mergePatterns(oldPathPattern, newPathPattern));\n \t\t\treturn result;",
    "output": "Initialize Map with correct size in RequestPredicates Fix another instance where a LinkedHashMap was initialized with an initial capacity that would always cause a resize / rehash to occur. Switch to CollectionUtils.newLinkedHashMap to size the map appropiately for the expected number of items"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.7\");\n+\t\t\tcheckstyle.setToolVersion(\"10.13.0\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to SLF4J 2.0.12, Jetty 12.0.6, Apache HttpClient 5.3.1, OpenPDF 1.3.39, Mockito 5.10, Checkstyle 10.13"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -242,6 +242,9 @@ public ConversionService getConversionService() {\n \t/**\n \t * Initialize the mapping meta-data for the given class.\n \t * @param mappedClass the mapped class\n+\t * @see #setMappedClass\n+\t * @see BeanUtils#getPropertyDescriptors\n+\t * @see #mappedNames(PropertyDescriptor)\n \t */\n \tprotected void initialize(Class<T> mappedClass) {\n \t\tthis.mappedClass = mappedClass;\n@@ -280,17 +283,14 @@ protected void suppressProperty(String propertyName) {\n \t * @param pd the property descriptor discovered on initialization\n \t * @return a set of mapped names\n \t * @since 6.1.4\n+\t * @see #initialize\n \t * @see #lowerCaseName\n \t * @see #underscoreName\n \t */\n \tprotected Set<String> mappedNames(PropertyDescriptor pd) {\n \t\tSet<String> mappedNames = new HashSet<>(4);\n-\t\tString lowerCaseName = lowerCaseName(pd.getName());\n-\t\tmappedNames.add(lowerCaseName);\n-\t\tString underscoreName = underscoreName(pd.getName());\n-\t\tif (!lowerCaseName.equals(underscoreName)) {\n-\t\t\tmappedNames.add(underscoreName);\n-\t\t}\n+\t\tmappedNames.add(lowerCaseName(pd.getName()));\n+\t\tmappedNames.add(underscoreName(pd.getName()));\n \t\treturn mappedNames;\n \t}\n ",
    "output": "Rely on HashSet for uniqueness of mapped names"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n@@ -429,6 +429,9 @@ void mathematicalOperators() {\n \t\t\tint maxInt = parser.parseExpression(\"(2^31) - 1\").getValue(int.class);  // Integer.MAX_VALUE\n \t\t\tassertThat(maxInt).isEqualTo(Integer.MAX_VALUE);\n \n+\t\t\tint minInt = parser.parseExpression(\"-2^31\").getValue(int.class);  // Integer.MIN_VALUE\n+\t\t\tassertThat(minInt).isEqualTo(Integer.MIN_VALUE);\n+\n \t\t\t// -- Operator precedence --\n \n \t\t\tint minusTwentyOne = parser.parseExpression(\"1+2-3*8\").getValue(int.class);  // -21",
    "output": "Provide example for calculating Integer.MIN_VALUE with SpEL's power operator"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelDocumentationTests.java\n@@ -457,7 +457,7 @@ void overloadingOperators() {\n \t\t\tcontext.setOperatorOverloader(new ListConcatenation());\n \n \t\t\t// evaluates to [1, 2, 3, 4, 5]\n-\t\t\tList list = parser.parseExpression(\"{1, 2, 3} + {4, 5}\").getValue(context, List.class);\n+\t\t\tList list = parser.parseExpression(\"{1, 2, 3} + {2 + 2, 5}\").getValue(context, List.class);\n \t\t\tassertThat(list).containsExactly(1, 2, 3, 4, 5);\n \t\t}\n \n@@ -706,7 +706,7 @@ public Object operate(Operation operation, Object left, Object right) {\n \t\t\t}\n \t\t\tthrow new UnsupportedOperationException(\n \t\t\t\t\"No overload for operation %s and operands [%s] and [%s]\"\n-\t\t\t\t\t.formatted(operation.name(), left, right));\n+\t\t\t\t\t.formatted(operation, left, right));\n \t\t}\n \t}\n ",
    "output": "Improve documentation for overloaded operators in SpEL"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n@@ -198,7 +198,7 @@ private HandlerMethod(HandlerMethod handlerMethod, @Nullable Object handler, boo\n \t\tthis.responseStatus = handlerMethod.responseStatus;\n \t\tthis.responseStatusReason = handlerMethod.responseStatusReason;\n \t\tthis.resolvedFromHandlerMethod = handlerMethod;\n-\t\tthis.description = handlerMethod.description;\n+\t\tthis.description = handlerMethod.toString();\n \t}\n \n ",
    "output": "Preserve overridden toString result in HandlerMethod copy constructor"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java\n@@ -196,7 +196,7 @@ void setPropertyValueAutoGrowNestedMapWithinMap() {\n \t@Test @Disabled  // gh-32154\n \tvoid setPropertyValueAutoGrowNestedNestedMapWithinMap() {\n \t\twrapper.setPropertyValue(\"nestedNestedMap[A][B][C]\", new Bean());\n-\t\tassertThat(bean.getNestedNestedMap().get(\"A\").get(\"B\").get(\"C)\")).isInstanceOf(Bean.class);\n+\t\tassertThat(bean.getNestedNestedMap().get(\"A\").get(\"B\").get(\"C\")).isInstanceOf(Bean.class);\n \t}\n \n ",
    "output": "Fix assertion in BeanWrapperAutoGrowingTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n@@ -171,7 +171,7 @@ public String toString() {\n \t\tif (!this.maxAge.isNegative()) {\n \t\t\tsb.append(\"; Max-Age=\").append(this.maxAge.getSeconds());\n \t\t\tsb.append(\"; Expires=\");\n-\t\t\tlong millis = this.maxAge.getSeconds() > 0 ? System.currentTimeMillis() + this.maxAge.toMillis() : 0;\n+\t\t\tlong millis = (this.maxAge.getSeconds() > 0 ? System.currentTimeMillis() + this.maxAge.toMillis() : 0);\n \t\t\tsb.append(HttpHeaders.formatDate(millis));\n \t\t}\n \t\tif (this.secure) {",
    "output": "Wrap ternary operator within parantheses"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/function/SupplierUtils.java\n@@ -49,7 +49,7 @@ public static <T> T resolve(@Nullable Supplier<T> supplier) {\n \t */\n \t@Nullable\n \tpublic static Object resolve(@Nullable Object candidate) {\n-\t\treturn (candidate instanceof Supplier<?> supplier ? supplier.get() : null);\n+\t\treturn (candidate instanceof Supplier<?> supplier ? supplier.get() : candidate);\n \t}\n \n }",
    "output": "Fix logic in SupplierUtils"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SetValueTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n@@ -268,18 +268,6 @@ private Expression parse(String expressionString) {\n \t\treturn parser.parseExpression(expressionString);\n \t}\n \n-\t/**\n-\t * Call setValue() but expect it to fail.\n-\t */\n-\tprivate void setValueAndExpectError(String expression, Object value) {\n-\t\tExpression e = parser.parseExpression(expression);\n-\t\tassertThat(e).isNotNull();\n-\t\tif (DEBUG) {\n-\t\t\tSpelUtilities.printAbstractSyntaxTree(System.out, e);\n-\t\t}\n-\t\tassertThatSpelEvaluationException().isThrownBy(() -> e.setValue(context, value));\n-\t}\n-\n \t/**\n \t * Call setValue() but expect it to fail.\n \t * @see #evaluateAndCheckError(org.springframework.expression.ExpressionParser, String, Class, SpelMessage, Object...)",
    "output": "Delete obsolete test utility method Commit dc6ce30663 made this method obsolete"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/PartEventHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/PartEventHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/PartEventHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/PartEventHttpMessageReader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -167,8 +167,8 @@ public Flux<PartEvent> read(ResolvableType elementType, ReactiveHttpInputMessage\n \t\t\t\t\t\t\t\t\tAssert.state(headersToken != null, \"Signal should be headers token\");\n \n \t\t\t\t\t\t\t\t\tHttpHeaders headers = headersToken.headers();\n-\t\t\t\t\t\t\t\t\tFlux<MultipartParser.BodyToken> bodyTokens =\n-\t\t\t\t\t\t\t\t\t\t\tflux.ofType(MultipartParser.BodyToken.class);\n+\t\t\t\t\t\t\t\t\tFlux<MultipartParser.BodyToken> bodyTokens = flux.ofType(\n+\t\t\t\t\t\t\t\t\t\t\tMultipartParser.BodyToken.class);\n \t\t\t\t\t\t\t\t\treturn createEvents(headers, bodyTokens);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\telse {",
    "output": "Simplify use of Reactor's cast operator"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -93,8 +93,8 @@ public List<Token> process() {\n \t\t\t\t\t\t\tpushCharToken(TokenKind.PLUS);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase '_': // the other way to start an identifier\n-\t\t\t\t\t\tlexIdentifier();\n+\t\t\t\t\tcase '_':\n+\t\t\t\t\t\tlexIdentifier();  // '_' is another way to start an identifier\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase '-':\n \t\t\t\t\t\tif (isTwoCharToken(TokenKind.DEC)) {\n@@ -206,7 +206,7 @@ else if (isTwoCharToken(TokenKind.SAFE_NAVI)) {\n \t\t\t\t\t\t\tpushPairToken(TokenKind.SELECT_LAST);\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse {\n-\t\t\t\t\t\t\tlexIdentifier();\n+\t\t\t\t\t\t\tlexIdentifier();  // '$' is another way to start an identifier\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase '>':",
    "output": "Upgrade documentation for supported letters in variable names in SpEL"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java\n@@ -19,7 +19,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.convert.TypeDescriptor;\n@@ -227,11 +226,7 @@ void testWidening01() {\n \t}\n \n \t@Test\n-\t@Disabled\n-\tpublic void testArgumentConversion01() {\n-\t\t// Closest ctor will be new String(String) and converter supports Double>String\n-\t\t// TODO currently failing as with new ObjectToArray converter closest constructor\n-\t\t// matched becomes String(byte[]) which fails...\n+\tvoid testArgumentConversion01() {\n \t\tevaluate(\"new String(3.0d)\", \"3.0\", String.class);\n \t}\n ",
    "output": "Enable test for argument conversion in SpEL"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n@@ -137,13 +137,9 @@ public int compareTo(ParamsRequestCondition other, HttpServletRequest request) {\n \t}\n \n \tprivate long getValueMatchCount(Set<ParamExpression> expressions) {\n-\t\tlong count = 0;\n-\t\tfor (ParamExpression e : expressions) {\n-\t\t\tif (e.getValue() != null && !e.isNegated()) {\n-\t\t\t\tcount++;\n-\t\t\t}\n-\t\t}\n-\t\treturn count;\n+\t\treturn expressions.stream()\n+\t\t\t\t.filter(e -> e.getValue() != null && !e.isNegated())\n+\t\t\t\t.count();\n \t}\n \n ",
    "output": "Use count in ParamsRequestCondition#getValueMatchCount"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n@@ -375,7 +375,7 @@ private static class StubStringValueResolver implements StringValueResolver {\n \n \t\t@Override\n \t\tpublic String resolveStringValue(String str) {\n-\t\t\treturn (this.placeholders.containsKey(str) ? this.placeholders.get(str) : str);\n+\t\t\treturn (this.placeholders.getOrDefault(str, str));\n \t\t}\n \n \t}",
    "output": "Use 'Map.getOrDefault' rather than explicit check with fallback"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n@@ -261,7 +261,7 @@ public SafeWriter(Writer writer) {\n \n \t\tpublic SafeWriter append(String value) throws JspException {\n \t\t\ttry {\n-\t\t\t\tgetWriterToUse().write(String.valueOf(value));\n+\t\t\t\tgetWriterToUse().write(value);\n \t\t\t\treturn this;\n \t\t\t}\n \t\t\tcatch (IOException ex) {",
    "output": "Remove unnecessary conversion to 'String'"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -138,8 +138,7 @@ private void applyArguments(HttpRequestValues.Builder requestValues, Object[] ar\n \t\t\tint index = i;\n \t\t\tAssert.state(resolved, () ->\n \t\t\t\t\t\"Could not resolve parameter [\" + this.parameters[index].getParameterIndex() + \"] in \" +\n-\t\t\t\t\t\t\tthis.parameters[index].getExecutable().toGenericString() +\n-\t\t\t\t\t\t\t(StringUtils.hasText(\"No suitable resolver\") ? \": \" + \"No suitable resolver\" : \"\"));\n+\t\t\t\t\t\t\tthis.parameters[index].getExecutable().toGenericString() + \": No suitable resolver\");\n \t\t}\n \t}\n ",
    "output": "Remove tautological ternary statement"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -272,7 +272,7 @@ private Method determineDestroyMethod(String destroyMethodName) {\n \t\t\tif (destroyMethod != null) {\n \t\t\t\treturn destroyMethod;\n \t\t\t}\n-\t\t\tfor (Class<?> beanInterface : beanClass.getInterfaces()) {\n+\t\t\tfor (Class<?> beanInterface : ClassUtils.getAllInterfacesForClass(beanClass)) {\n \t\t\t\tdestroyMethod = findDestroyMethod(beanInterface, methodName);\n \t\t\t\tif (destroyMethod != null) {\n \t\t\t\t\treturn destroyMethod;",
    "output": "Find destroy methods in superclass interfaces Related tests will be added in https://github.com/spring-projects/spring-aot-smoke-tests"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -571,7 +571,7 @@ private DefaultTransactionStatus newTransactionStatus(\n \t/**\n \t * Initialize transaction synchronization as appropriate.\n \t */\n-\tprivate void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) {\n+\tprotected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) {\n \t\tif (status.isNewSynchronization()) {\n \t\t\tTransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());\n \t\t\tTransactionSynchronizationManager.setCurrentTransactionIsolationLevel(",
    "output": "Make prepareSynchronization overridable again"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -334,13 +334,15 @@ public boolean matches(Method method, Class<?> targetClass, Object... args) {\n \t\tObject targetObject = null;\n \t\tObject thisObject = null;\n \t\ttry {\n-\t\t\tMethodInvocation mi = ExposeInvocationInterceptor.currentInvocation();\n-\t\t\ttargetObject = mi.getThis();\n-\t\t\tif (!(mi instanceof ProxyMethodInvocation _pmi)) {\n-\t\t\t\tthrow new IllegalStateException(\"MethodInvocation is not a Spring ProxyMethodInvocation: \" + mi);\n+\t\t\tMethodInvocation curr = ExposeInvocationInterceptor.currentInvocation();\n+\t\t\tif (curr.getMethod() == method) {\n+\t\t\t\ttargetObject = curr.getThis();\n+\t\t\t\tif (!(curr instanceof ProxyMethodInvocation currPmi)) {\n+\t\t\t\t\tthrow new IllegalStateException(\"MethodInvocation is not a Spring ProxyMethodInvocation: \" + curr);\n+\t\t\t\t}\n+\t\t\t\tpmi = currPmi;\n+\t\t\t\tthisObject = pmi.getProxy();\n \t\t\t}\n-\t\t\tpmi = _pmi;\n-\t\t\tthisObject = pmi.getProxy();\n \t\t}\n \t\tcatch (IllegalStateException ex) {\n \t\t\t// No current invocation...",
    "output": "Evaluate thread-bound MethodInvocation only if it matches current Method"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,12 +50,12 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.5\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.7\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();\n-\t\t\tcheckstyleDependencies\n-\t\t\t\t.add(project.getDependencies().create(\"io.spring.javaformat:spring-javaformat-checkstyle:\" + version));\n+\t\t\tcheckstyleDependencies.add(\n+\t\t\t\t\tproject.getDependencies().create(\"io.spring.javaformat:spring-javaformat-checkstyle:\" + version));\n \t\t});\n \t}\n ",
    "output": "Upgrade to Checkstyle 10.12.7"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java\n@@ -118,6 +118,20 @@ void incompleteBeanDefinition() {\n \t\t\t\t.withRootCauseInstanceOf(IllegalStateException.class);\n \t}\n \n+\t@Test\n+\tvoid processInjection() {\n+\t\tResourceInjectionBean bean = new ResourceInjectionBean();\n+\t\tassertThat(bean.getTestBean()).isNull();\n+\t\tassertThat(bean.getTestBean2()).isNull();\n+\n+\t\tTestBean tb = new TestBean();\n+\t\tbf.registerSingleton(\"testBean\", tb);\n+\t\tbpp.processInjection(bean);\n+\n+\t\tassertThat(bean.getTestBean()).isSameAs(tb);\n+\t\tassertThat(bean.getTestBean2()).isSameAs(tb);\n+\t}\n+\n \t@Test\n \tvoid resourceInjection() {\n \t\tRootBeanDefinition bd = new RootBeanDefinition(ResourceInjectionBean.class);",
    "output": "Introduce basic unit test for AutowiredAnnotationBeanPostProcessor.processInjection"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -162,7 +162,8 @@ public void decodeSplitChunks() {\n \t@SuppressWarnings(\"deprecation\")\n \tpublic void decodeSplitMessageSize() {\n \t\tthis.decoder.setMaxMessageSize(100009);\n-\t\tMsg bigMessage = Msg.newBuilder().setFoo(\"azertyuiop\".repeat(10000)).setBlah(secondMsg2).build();\n+\t\tMsg bigMessage = Msg.newBuilder().setFoo(\"azertyuiop\".repeat(10000))\n+\t\t\t\t.setBlah(secondMsg2).build();\n \n \t\tFlux<DataBuffer> input = Flux.just(bigMessage, bigMessage)\n \t\t\t\t.flatMap(msg -> Mono.defer(() -> {",
    "output": "Use String.repeatwhere feasible"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java b/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java\n--- a/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/mail/SimpleMailMessageTests.java\n@@ -121,6 +121,7 @@ public final void testHashCode() {\n \t\tassertThat(message2.hashCode()).isEqualTo(message1.hashCode());\n \t}\n \n+\t@Test\n \tpublic final void testEqualsObject() {\n \t\tSimpleMailMessage message1;\n \t\tSimpleMailMessage message2;",
    "output": "Add missing @Test"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java b/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/aot/ApplicationContextAotGeneratorTests.java\n@@ -488,7 +488,7 @@ void processAheadOfTimeWhenHasCglibProxyWithArgumentsRegisterIntrospectionHintsO\n \t}\n \n \t@Nested\n-\tstatic class ActiveProfile {\n+\tclass ActiveProfile {\n \n \t\t@ParameterizedTest\n \t\t@MethodSource(\"activeProfilesParameters\")",
    "output": "Fix @Nested class not be executed"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -39,6 +39,7 @@\n import org.hibernate.dialect.OracleDialect;\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n+import org.hibernate.dialect.SQLServerDialect;\n import org.hibernate.dialect.SybaseDialect;\n import org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode;\n \n@@ -205,7 +206,7 @@ protected Class<?> determineDatabaseDialectClass(Database database) {\n \t\t\t\tcase MYSQL -> MySQLDialect.class;\n \t\t\t\tcase ORACLE -> OracleDialect.class;\n \t\t\t\tcase POSTGRESQL -> org.hibernate.dialect.PostgreSQLDialect.class;\n-\t\t\t\tcase SQL_SERVER -> SQLServer2012Dialect.class;\n+\t\t\t\tcase SQL_SERVER -> SQLServerDialect.class;\n \t\t\t\tcase SYBASE -> SybaseDialect.class;\n \t\t\t\tdefault -> null;\n \t\t\t};",
    "output": "Use proper SQLServer dialect for Hibernate 6+ This commit fixes the Hibernate dialect lookup for SQLServer as it was previously using a dialect that has been deprecated. In recent versions, the standard SQLServerDialect is the one we should be using"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n@@ -58,6 +58,7 @@\n  * @author Juergen Hoeller\n  * @author Stephane Nicoll\n  * @author He Bo\n+ * @author Sebastien Deleuze\n  * @since 3.1.2\n  */\n public abstract class AsyncExecutionAspectSupport implements BeanFactoryAware {\n@@ -292,7 +293,7 @@ else if (org.springframework.util.concurrent.ListenableFuture.class.isAssignable\n \t\telse if (Future.class.isAssignableFrom(returnType)) {\n \t\t\treturn executor.submit(task);\n \t\t}\n-\t\telse if (void.class == returnType) {\n+\t\telse if (void.class == returnType || \"kotlin.Unit\".equals(returnType.getName())) {\n \t\t\texecutor.submit(task);\n \t\t\treturn null;\n \t\t}",
    "output": "Add support for `@Async` Kotlin function returning `Unit?`"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -36,6 +36,7 @@\n import org.hibernate.dialect.MySQL57Dialect;\n import org.hibernate.dialect.MySQLDialect;\n import org.hibernate.dialect.Oracle12cDialect;\n+import org.hibernate.dialect.OracleDialect;\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n import org.hibernate.dialect.SybaseDialect;\n@@ -202,7 +203,7 @@ protected Class<?> determineDatabaseDialectClass(Database database) {\n \t\t\t\tcase HANA -> HANAColumnStoreDialect.class;\n \t\t\t\tcase HSQL -> HSQLDialect.class;\n \t\t\t\tcase MYSQL -> MySQLDialect.class;\n-\t\t\t\tcase ORACLE -> Oracle12cDialect.class;\n+\t\t\t\tcase ORACLE -> OracleDialect.class;\n \t\t\t\tcase POSTGRESQL -> org.hibernate.dialect.PostgreSQLDialect.class;\n \t\t\t\tcase SQL_SERVER -> SQLServer2012Dialect.class;\n \t\t\t\tcase SYBASE -> SybaseDialect.class;",
    "output": "Use proper Oracle dialect for Hibernate 6+ This commit fixes the Hibernate dialect lookup for Oracle as it was previously using a dialect that has been moved and deprecated to a separate project. In recent versions, the standard OracleDialect is the one we should be using"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -34,6 +34,7 @@\n import org.hibernate.dialect.HSQLDialect;\n import org.hibernate.dialect.Informix10Dialect;\n import org.hibernate.dialect.MySQL57Dialect;\n+import org.hibernate.dialect.MySQLDialect;\n import org.hibernate.dialect.Oracle12cDialect;\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n@@ -193,14 +194,14 @@ protected Class<?> determineDatabaseDialectClass(Database database) {\n \t\t\t\tdefault -> null;\n \t\t\t};\n \t\t}\n-\t\telse {  // Hibernate 6.2 aligned\n+\t\telse {  // Hibernate 6.2+ aligned\n \t\t\treturn switch (database) {\n \t\t\t\tcase DB2 -> DB2Dialect.class;\n \t\t\t\tcase DERBY -> org.hibernate.dialect.DerbyDialect.class;\n \t\t\t\tcase H2 -> H2Dialect.class;\n \t\t\t\tcase HANA -> HANAColumnStoreDialect.class;\n \t\t\t\tcase HSQL -> HSQLDialect.class;\n-\t\t\t\tcase MYSQL -> MySQL57Dialect.class;\n+\t\t\t\tcase MYSQL -> MySQLDialect.class;\n \t\t\t\tcase ORACLE -> Oracle12cDialect.class;\n \t\t\t\tcase POSTGRESQL -> org.hibernate.dialect.PostgreSQLDialect.class;\n \t\t\t\tcase SQL_SERVER -> SQLServer2012Dialect.class;",
    "output": "Use non deprecated MySQL dialect for Hibernate 6+ This commit fixes the Hibernate dialect lookup for MySQL as it was previously using a deprecated dialect that has been removed in the most recent Hibernate version"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n@@ -115,6 +115,9 @@ public void onWebSocketFrame(Frame frame, Callback callback) {\n \t\t\t\tExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger);\n \t\t\t}\n \t\t}\n+\t\telse {\n+\t\t\tcallback.succeed();\n+\t\t}\n \t}\n \n \tprivate static ByteBuffer copyByteBuffer(ByteBuffer src) {",
    "output": "Complete Jetty frame callback when opcode is not PONG The onWebSocketFrame method should complete callback. For more details,"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java b/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java\n--- a/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java\n+++ b/spring-context/src/test/java/org/springframework/cache/annotation/ReactiveCachingTests.java\n@@ -43,7 +43,7 @@\n  * @author Juergen Hoeller\n  * @since 6.1\n  */\n-public class ReactiveCachingTests {\n+class ReactiveCachingTests {\n \n \t@ParameterizedTest\n \t@ValueSource(classes = {EarlyCacheHitDeterminationConfig.class,\n@@ -174,7 +174,7 @@ public CompletableFuture<?> retrieve(Object key) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void put(Object key, @Nullable Object value) {\n-\t\t\t\t\t\t\tassertThat(get(key) == null).as(\"Double put\");\n+\t\t\t\t\t\t\tassertThat(get(key)).as(\"Double put\").isNull();\n \t\t\t\t\t\t\tsuper.put(key, value);\n \t\t\t\t\t\t}\n \t\t\t\t\t};\n@@ -201,7 +201,7 @@ public CompletableFuture<?> retrieve(Object key) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void put(Object key, @Nullable Object value) {\n-\t\t\t\t\t\t\tassertThat(get(key) == null).as(\"Double put\");\n+\t\t\t\t\t\t\tassertThat(get(key)).as(\"Double put\").isNull();\n \t\t\t\t\t\t\tsuper.put(key, value);\n \t\t\t\t\t\t}\n \t\t\t\t\t};",
    "output": "Fix assertions in ReactiveCachingTests"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequestObservationContext.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequestObservationContext.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequestObservationContext.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequestObservationContext.java\n@@ -52,15 +52,17 @@ public class ClientRequestObservationContext extends RequestReplySenderContext<C\n \n \t/**\n \t * Create a new Observation context for HTTP client observations.\n-\t * @deprecated as of 6.1, in favor of {@link #ClientRequestObservationContext(ClientRequest.Builder)}\n+\t * @deprecated as of 6.1.2, in favor of {@link #ClientRequestObservationContext(ClientRequest.Builder)}\n \t */\n-\t@Deprecated(since = \"6.1\", forRemoval = true)\n+\t@Deprecated(since = \"6.1.2\", forRemoval = true)\n \tpublic ClientRequestObservationContext() {\n \t\tsuper(ClientRequestObservationContext::setRequestHeader);\n \t}\n \n \t/**\n \t * Create a new Observation context for HTTP client observations.\n+\t * @param request client request builder\n+\t * @since 6.1.2\n \t */\n \tpublic ClientRequestObservationContext(ClientRequest.Builder request) {\n \t\tsuper(ClientRequestObservationContext::setRequestHeader);",
    "output": "Polish Javadoc for ClientRequestObservationContext constructors"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -524,20 +524,7 @@ static class PropertyDescriptorComparator implements Comparator<PropertyDescript\n \n \t\t@Override\n \t\tpublic int compare(PropertyDescriptor desc1, PropertyDescriptor desc2) {\n-\t\t\tString left = desc1.getName();\n-\t\t\tString right = desc2.getName();\n-\t\t\tbyte[] leftBytes = left.getBytes();\n-\t\t\tbyte[] rightBytes = right.getBytes();\n-\t\t\tfor (int i = 0; i < left.length(); i++) {\n-\t\t\t\tif (right.length() == i) {\n-\t\t\t\t\treturn 1;\n-\t\t\t\t}\n-\t\t\t\tint result = leftBytes[i] - rightBytes[i];\n-\t\t\t\tif (result != 0) {\n-\t\t\t\t\treturn result;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn left.length() - right.length();\n+\t\t\treturn desc1.getName().compareTo(desc2.getName());\n \t\t}\n \t}\n ",
    "output": "Use standard String comparison in PropertyDescriptorComparator"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java b/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/bind/support/DefaultDataBinderFactoryTests.java\n@@ -31,8 +31,8 @@\n import org.springframework.web.testfixture.servlet.MockHttpServletRequest;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.BDDMockito.mock;\n+import static org.mockito.BDDMockito.when;\n \n /**\n  * Unit tests for {@link DefaultDataBinderFactory}.",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n@@ -18,7 +18,8 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n-import java.util.List;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.StringJoiner;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n@@ -402,7 +403,8 @@ public static boolean checkArguments(Class<?> beanType, MethodParameter[] parame\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tClass<?> type = parameter.getParameterType();\n-\t\t\t\t\t\tif (merged.stream().anyMatch(VALID_PREDICATE) && List.class.isAssignableFrom(type)) {\n+\t\t\t\t\t\tif (merged.stream().anyMatch(VALID_PREDICATE) &&\n+\t\t\t\t\t\t\t\t(Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type))) {\n \t\t\t\t\t\t\treturn true;\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Improve HandlerMethod check when method validation applies Method validation needs to be used for a container such as a List or Map, but until now we were only checking for a List container. Moreover, in we improved method validation to also cover any Collection. This change aligns with HandlerMethod check for when method validation applies with the underlying ability of method validation"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java\n@@ -118,8 +118,9 @@ public void onWebSocketFrame(Frame frame, Callback callback) {\n \t}\n \n \tprivate static ByteBuffer copyByteBuffer(ByteBuffer src) {\n-\t\tByteBuffer dest = ByteBuffer.allocate(src.capacity());\n-\t\tdest.put(0, src, 0, src.remaining());\n+\t\tByteBuffer dest = ByteBuffer.allocate(src.remaining());\n+\t\tdest.put(src);\n+\t\tdest.flip();\n \t\treturn dest;\n \t}\n ",
    "output": "Improve ByteBuffer copy method This commit improves JettyWebSocketHandlerAdapter::copyByteBuffer so that it allocates a buffer large enough for the remaining bytes contained in the source, instead of allocating one with the capacity of the source"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n@@ -371,7 +371,7 @@ public DataBuffer split(int index) {\n \t\t\t\t.slice();\n \t\tthis.writePosition = Math.max(this.writePosition, index) - index;\n \t\tthis.readPosition = Math.max(this.readPosition, index) - index;\n-\t\tcapacity(this.byteBuffer.capacity());\n+\t\tthis.capacity = this.byteBuffer.capacity();\n \n \t\treturn result;\n \t}",
    "output": "Correctly set capacity of remainder in DefaultDataBuffer::split This commit ensures that the capacity of the remainder buffer after a split operation is set directly on the field. Calling capacity(int) caused a new buffer to be allocated"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator.java b/spring-aop/src/main/java/org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator.java\n@@ -42,10 +42,8 @@ class ScopedProxyBeanDefinitionDecorator implements BeanDefinitionDecorator {\n \t@Override\n \tpublic BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {\n \t\tboolean proxyTargetClass = true;\n-\t\tif (node instanceof Element ele) {\n-\t\t\tif (ele.hasAttribute(PROXY_TARGET_CLASS)) {\n-\t\t\t\tproxyTargetClass = Boolean.parseBoolean(ele.getAttribute(PROXY_TARGET_CLASS));\n-\t\t\t}\n+\t\tif (node instanceof Element ele && ele.hasAttribute(PROXY_TARGET_CLASS)) {\n+\t\t\tproxyTargetClass = Boolean.parseBoolean(ele.getAttribute(PROXY_TARGET_CLASS));\n \t\t}\n \n \t\t// Register the original bean definition as it will be referenced by the scoped proxy",
    "output": "Combine conditions for better readability and simplicity"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n@@ -56,7 +56,7 @@\n  */\n public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {\n \n-\tprivate final FastByteArrayOutputStream cachedContent = new FastByteArrayOutputStream();\n+\tprivate FastByteArrayOutputStream cachedContent;\n \n \t@Nullable\n \tprivate final Integer contentCacheLimit;\n@@ -74,6 +74,8 @@ public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {\n \t */\n \tpublic ContentCachingRequestWrapper(HttpServletRequest request) {\n \t\tsuper(request);\n+\t\tint contentLength = request.getContentLength();\n+\t\tthis.cachedContent = (contentLength > 0) ? new FastByteArrayOutputStream(contentLength) : new FastByteArrayOutputStream();\n \t\tthis.contentCacheLimit = null;\n \t}\n \n@@ -86,6 +88,8 @@ public ContentCachingRequestWrapper(HttpServletRequest request) {\n \t */\n \tpublic ContentCachingRequestWrapper(HttpServletRequest request, int contentCacheLimit) {\n \t\tsuper(request);\n+\t\tint contentLength = request.getContentLength();\n+\t\tthis.cachedContent = (contentLength > 0) ? new FastByteArrayOutputStream(contentLength) : new FastByteArrayOutputStream();\n \t\tthis.contentCacheLimit = contentCacheLimit;\n \t}\n ",
    "output": "Optimize ContentCachingRequestWrapper allocation This commit builds on top of changes made in and . Before this change, we would allocate several byte arrays even in cases of known request size. This could decrease performance when getting the cached content as it requires merging several arrays and data is not colocated in memory. This change ensures that we create a `FastByteArrayOutputStream` instance with the known request size so that the first allocated segment can contain the entire content. If the request size is not know, we will default back on the default allocation size for the `FastByteArrayOutputStream`"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -294,19 +294,6 @@ private static void traceMatch(String prefix, Object desired, @Nullable Object a\n \t\t}\n \t}\n \n-\tprivate static Map<String, String> mergePathVariables(Map<String, String> oldVariables,\n-\t\t\tMap<String, String> newVariables) {\n-\n-\t\tif (!newVariables.isEmpty()) {\n-\t\t\tMap<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);\n-\t\t\tmergedVariables.putAll(newVariables);\n-\t\t\treturn mergedVariables;\n-\t\t}\n-\t\telse {\n-\t\t\treturn oldVariables;\n-\t\t}\n-\t}\n-\n \tprivate static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {\n \t\tif (oldPattern != null) {\n \t\t\treturn oldPattern.combine(newPattern);",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHeadersAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -159,6 +159,7 @@ public void putAll(Map<? extends String, ? extends List<String>> map) {\n \t\tmap.forEach(this::put);\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")  // on Tomcat 10.1.16+\n \t@Override\n \tpublic void clear() {\n \t\tthis.headers.clear();",
    "output": "Upgrade to Tomcat 10.1.16 and Jetty 12.0.4"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java b/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CoroutinesUtils.java\n@@ -38,8 +38,8 @@ static Object asFlow(Object publisher) {\n \n \t@Nullable\n \t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-\tstatic Object awaitSingleOrNull(Object value, Object continuation) {\n-\t\treturn MonoKt.awaitSingleOrNull(value instanceof Mono mono ? mono : Mono.just(value),\n+\tstatic Object awaitSingleOrNull(@Nullable Object value, Object continuation) {\n+\t\treturn MonoKt.awaitSingleOrNull(value instanceof Mono mono ? mono : Mono.justOrEmpty(value),\n \t\t\t\t(Continuation<Object>) continuation);\n \t}\n ",
    "output": "Fix a NPE in proxied suspending functions"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java\n@@ -455,11 +455,6 @@ public TestBean testBean() {\n \t}\n }\n \n-@Configuration\n-@ComponentScan\n-class ComponentScanWithNoPackagesConfig {\n-}\n-\n @Configuration\n @ComponentScan(basePackages = \"example.scannable\", nameGenerator = MyBeanNameGenerator.class)\n class ComponentScanWithBeanNameGenerator {",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/core/test/tools/TestCompiler.java b/spring-core-test/src/main/java/org/springframework/core/test/tools/TestCompiler.java\n--- a/spring-core-test/src/main/java/org/springframework/core/test/tools/TestCompiler.java\n+++ b/spring-core-test/src/main/java/org/springframework/core/test/tools/TestCompiler.java\n@@ -311,9 +311,7 @@ private DynamicClassLoader compile() {\n \t\t\tErrors errors = new Errors();\n \t\t\tCompilationTask task = this.compiler.getTask(null, fileManager, errors,\n \t\t\t\t\tthis.compilerOptions, null, compilationUnits);\n-\t\t\tif (!this.processors.isEmpty()) {\n-\t\t\t\ttask.setProcessors(this.processors);\n-\t\t\t}\n+\t\t\ttask.setProcessors(this.processors);\n \t\t\tboolean result = task.call();\n \t\t\tif (!result || errors.hasReportedErrors()) {\n \t\t\t\tthrow new CompilationException(errors.toString(), this.sourceFiles, this.resourceFiles);",
    "output": "Do not discover annotation processors from the classpath in tests Previously, if an annotation processors was present in the classpath it was executed as part of tests using `TestCompiler`. This commit updates `TestCompiler` to always set the annotation processors to use. By default, this sets an empty list which does not use annotation processing"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/JdbcTransactionManagerTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/JdbcTransactionManagerTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/JdbcTransactionManagerTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/JdbcTransactionManagerTests.java\n@@ -43,14 +43,15 @@\n  * @since 5.3\n  * @see org.springframework.jdbc.datasource.DataSourceTransactionManagerTests\n  */\n-public class JdbcTransactionManagerTests extends DataSourceTransactionManagerTests {\n+public class JdbcTransactionManagerTests extends DataSourceTransactionManagerTests<JdbcTransactionManager> {\n \n \t@Override\n \tprotected JdbcTransactionManager createTransactionManager(DataSource ds) {\n \t\treturn new JdbcTransactionManager(ds);\n \t}\n \n \n+\t@Override\n \t@Test\n \tpublic void testTransactionWithExceptionOnCommit() throws Exception {\n \t\twillThrow(new SQLException(\"Cannot commit\")).given(con).commit();\n@@ -106,6 +107,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n \t\tverify(con).close();\n \t}\n \n+\t@Override\n \t@Test\n \tpublic void testTransactionWithExceptionOnCommitAndRollbackOnCommitFailure() throws Exception {\n \t\twillThrow(new SQLException(\"Cannot commit\")).given(con).commit();\n@@ -127,6 +129,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n \t\tverify(con).close();\n \t}\n \n+\t@Override\n \t@Test\n \tpublic void testTransactionWithExceptionOnRollback() throws Exception {\n \t\tgiven(con.getAutoCommit()).willReturn(true);",
    "output": "Clean up warnings in JdbcTransactionManagerTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -362,7 +362,7 @@ public static String toString(Collection<? extends MimeType> mimeTypes) {\n \t */\n \tpublic static <T extends MimeType> void sortBySpecificity(List<T> mimeTypes) {\n \t\tAssert.notNull(mimeTypes, \"'mimeTypes' must not be null\");\n-\t\tif (mimeTypes.size() >= 50) {\n+\t\tif (mimeTypes.size() > 50) {\n \t\t\tthrow new InvalidMimeTypeException(mimeTypes.toString(), \"Too many elements\");\n \t\t}\n ",
    "output": "Fix condition for \"Too many elements\" in MimeTypeUtils.sortBySpecificity"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/MockPart.java b/spring-test/src/main/java/org/springframework/mock/web/MockPart.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/MockPart.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/MockPart.java\n@@ -70,6 +70,19 @@ public MockPart(String name, @Nullable String filename, @Nullable byte[] content\n \t\tthis.headers.setContentDispositionFormData(name, filename);\n \t}\n \n+\t/**\n+\t * Constructor for a part with a filename, byte[] content and MediaType mediaType.\n+\t * @see #getHeaders()\n+\t */\n+\tpublic MockPart(String name, @Nullable String filename, @Nullable byte[] content, @Nullable MediaType mediaType) {\n+\t\tAssert.hasLength(name, \"'name' must not be empty\");\n+\t\tthis.name = name;\n+\t\tthis.filename = filename;\n+\t\tthis.content = (content != null ? content : new byte[0]);\n+\t\tthis.headers.setContentDispositionFormData(name, filename);\n+\t\tthis.headers.setContentType(mediaType);\n+\t}\n+\n \n \t@Override\n \tpublic String getName() {",
    "output": "Introduce overloaded MockPart constructor that accepts the Content-Type"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/DataBinder.java b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n--- a/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n@@ -1018,7 +1018,8 @@ private Object createObject(ResolvableType objectType, String nestedPath, ValueR\n \tprotected boolean shouldConstructArgument(MethodParameter param) {\n \t\tClass<?> type = param.nestedIfOptional().getNestedParameterType();\n \t\treturn !(BeanUtils.isSimpleValueType(type) ||\n-\t\t\t\tCollection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type) || type.isArray());\n+\t\t\t\tCollection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type) || type.isArray() ||\n+\t\t\t\ttype.getPackageName().startsWith(\"java.\"));\n \t}\n \n \tprivate void validateConstructorArgument(",
    "output": "Exclude any Java library type from nested constructor binding"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n@@ -205,7 +205,7 @@ public byte[] getContentAsByteArray() {\n \t * @see #getContentAsByteArray()\n \t */\n \tpublic String getContentAsString() {\n-\t\treturn new String(this.cachedContent.toByteArray(), Charset.forName(getCharacterEncoding()));\n+\t\treturn new String(this.cachedContent.toByteArrayUnsafe(), Charset.forName(getCharacterEncoding()));\n \t}\n \n \t/**",
    "output": "Avoid byte array copy in getContentAsString The getContentAsString method was originally added in d9b8826 to avoid the extra copying inherent to calling ByteArrayOutputStream.toByteArray; however, in f83c609 the class was updated to instead use FastByteArrayOutputStream, and in the process the extra copy was brought back when getContentAsString was changed to call toByteArray. Switch to calling toByteArrayUnsafe, a method provided by FastByteArrayOutputStream, which avoids the extra copy; since we immediately pass the byte array to the String constructor, and it isn't accessed anywhere else, the usage is safe"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -670,8 +670,10 @@ private boolean isConditionPassing(CacheOperationContext context, @Nullable Obje\n \tprivate Object generateKey(CacheOperationContext context, @Nullable Object result) {\n \t\tObject key = context.generateKey(result);\n \t\tif (key == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Null key returned for cache operation (maybe you are \" +\n-\t\t\t\t\t\"using named params on classes without debug info?) \" + context.metadata.operation);\n+\t\t\tthrow new IllegalArgumentException(\"\"\"\n+\t\t\t\t\tNull key returned for cache operation [%s]. If you are using named parameters, \\\n+\t\t\t\t\tensure that the compiler uses the '-parameters' flag.\"\"\"\n+\t\t\t\t\t\t.formatted(context.metadata.operation));\n \t\t}\n \t\tif (logger.isTraceEnabled()) {\n \t\t\tlogger.trace(\"Computed cache key '\" + key + \"' for operation \" + context.metadata.operation);",
    "output": "Document need for -parameters flag in cache key generation exception messages"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,8 +78,10 @@ public void setAsText(String text) throws IllegalArgumentException {\n \t\tif (nioPathCandidate && !text.startsWith(\"/\")) {\n \t\t\ttry {\n \t\t\t\tURI uri = ResourceUtils.toURI(text);\n-\t\t\t\tif (uri.getScheme() != null) {\n-\t\t\t\t\tnioPathCandidate = false;\n+\t\t\t\tString scheme = uri.getScheme();\n+\t\t\t\tif (scheme != null) {\n+\t\t\t\t\t// No NIO candidate except for \"C:\" style drive letters\n+\t\t\t\t\tnioPathCandidate = (scheme.length() == 1);\n \t\t\t\t\t// Let's try NIO file system providers via Paths.get(URI)\n \t\t\t\t\tsetValue(Paths.get(uri).normalize());\n \t\t\t\t\treturn;\n@@ -109,7 +111,8 @@ else if (nioPathCandidate && !resource.exists()) {\n \t\t\t\tsetValue(resource.getFile().toPath());\n \t\t\t}\n \t\t\tcatch (IOException ex) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Failed to retrieve file for \" + resource, ex);\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"Could not retrieve file for \" + resource + \": \" + ex.getMessage());\n \t\t\t}\n \t\t}\n \t}",
    "output": "PathEditor considers single-letter URI scheme as NIO path candidate"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n@@ -142,11 +142,10 @@ public InetSocketAddress getRemoteAddress() {\n \t\treturn (InetSocketAddress) getNativeSession().getRemoteSocketAddress();\n \t}\n \n-\t/**\n-\t * This method is a no-op for Jetty.\n-\t */\n \t@Override\n \tpublic void setTextMessageSizeLimit(int messageSizeLimit) {\n+\t\tcheckNativeSessionInitialized();\n+\t\tgetNativeSession().setMaxTextMessageSize(messageSizeLimit);\n \t}\n \n \t@Override\n@@ -155,11 +154,10 @@ public int getTextMessageSizeLimit() {\n \t\treturn (int) getNativeSession().getMaxTextMessageSize();\n \t}\n \n-\t/**\n-\t * This method is a no-op for Jetty.\n-\t */\n \t@Override\n \tpublic void setBinaryMessageSizeLimit(int messageSizeLimit) {\n+\t\tcheckNativeSessionInitialized();\n+\t\tgetNativeSession().setMaxBinaryMessageSize(messageSizeLimit);\n \t}\n \n \t@Override",
    "output": "Implement messageSize methods in JettyWebSocketSession"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java\n@@ -239,6 +239,13 @@ void resolveWildcardTypeWithUnbounded() {\n \t\tassertThat(resolvableType.resolveGenerics()).containsExactly(Object.class);\n \t}\n \n+\t@Test // gh-28904\n+\tvoid resolveGenericWithDifferentInterfaceOrder() {\n+\t\tType f = First.class.getTypeParameters()[0];\n+\t\tassertThat(resolveType(f, FirstSecondService.class)).isEqualTo(Integer.class);\n+\t\tassertThat(resolveType(f, SecondFirstService.class)).isEqualTo(Integer.class);\n+\t}\n+\n \tprivate static Method method(Class<?> target, String methodName, Class<?>... parameterTypes) {\n \t\tMethod method = findMethod(target, methodName, parameterTypes);\n \t\tassertThat(method).describedAs(target.getName() + \"#\" + methodName).isNotNull();\n@@ -428,4 +435,25 @@ interface Repository<T, ID extends Serializable> {\n \tinterface IdFixingRepository<T> extends Repository<T, Long> {\n \t}\n \n+\tinterface First<F extends Number> {\n+\n+\t\tdefault void foo(F f) {\n+\t\t\t// ...\n+\t\t}\n+\t}\n+\n+\tinterface Second<B> {\n+\n+\t\tdefault void bar(B b) {\n+\t\t\t// ...\n+\t\t}\n+\t}\n+\n+\tstatic class FirstSecondService implements First<Integer>, Second<String> {\n+\t}\n+\n+\tstatic class SecondFirstService implements Second<String>, First<Integer> {\n+\t}\n+\n+\n }",
    "output": "Move sample to unit test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n@@ -268,8 +268,8 @@ public void prepareTestInstance(Object testInstance) throws Exception {\n \t\t\t\t\t\t\t\t\t\t.formatted(typeName(testExecutionListener), testInstance), ex);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\telse if (logger.isErrorEnabled()) {\n-\t\t\t\t\t\tlogger.error(\"\"\"\n+\t\t\t\t\telse if (logger.isWarnEnabled()) {\n+\t\t\t\t\t\tlogger.warn(\"\"\"\n \t\t\t\t\t\t\tCaught exception while allowing TestExecutionListener [%s] to \\\n \t\t\t\t\t\t\tprepare test instance [%s]\"\"\"\n \t\t\t\t\t\t\t\t.formatted(typeName(testExecutionListener), testInstance), ex);",
    "output": "Consistently log exceptions from TestExecutionListeners at WARN level Prior to this commit, the TestContextManager logged an exception from a TestExecutionListener at WARN level except in prepareTestInstancewhere such an exception was logged at ERROR level (except for a skipped exception which is logged at INFO level). For consistency, this commit modifies TestContextManager so that it always logs non-skipped exceptions from TestExecutionListeners at WARN level"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -88,6 +88,7 @@ public abstract class SharedEntityManagerCreator {\n \t\t\t\"getResultStream\",  // jakarta.persistence.Query.getResultStream()\n \t\t\t\"getResultList\",  // jakarta.persistence.Query.getResultList()\n \t\t\t\"list\",  // org.hibernate.query.Query.list()\n+\t\t\t\"scroll\",  // org.hibernate.query.Query.scroll()\n \t\t\t\"stream\",  // org.hibernate.query.Query.stream()\n \t\t\t\"uniqueResult\",  // org.hibernate.query.Query.uniqueResult()\n \t\t\t\"uniqueResultOptional\"  // org.hibernate.query.Query.uniqueResultOptional()",
    "output": "Include scrollin SharedEntityManagerCreator's queryTerminatingMethods This commit supports the scrolland scroll(ScrollMode) methods from Hibernate's Query API in SharedEntityManagerCreator's query-terminating methods set"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java\n@@ -120,9 +120,10 @@ public Class<?> findType(String typeName) throws EvaluationException {\n \t\t\treturn cachedType;\n \t\t}\n \t\tClass<?> loadedType = loadType(typeName);\n-\t\tif (loadedType != null &&\n-\t\t\t\t!(this.classLoader instanceof SmartClassLoader scl && scl.isClassReloadable(loadedType))) {\n-\t\t\tthis.typeCache.put(typeName, loadedType);\n+\t\tif (loadedType != null) {\n+\t\t\tif (!(this.classLoader instanceof SmartClassLoader scl && scl.isClassReloadable(loadedType))) {\n+\t\t\t\tthis.typeCache.put(typeName, loadedType);\n+\t\t\t}\n \t\t\treturn loadedType;\n \t\t}\n \t\tthrow new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName);",
    "output": "Properly return loaded type even if identified as reloadable"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -73,8 +73,6 @@ public abstract class AsyncExecutionAspectSupport implements BeanFactoryAware {\n \n \tprotected final Log logger = LogFactory.getLog(getClass());\n \n-\tprivate final Map<Method, AsyncTaskExecutor> executors = new ConcurrentHashMap<>(16);\n-\n \tprivate SingletonSupplier<Executor> defaultExecutor;\n \n \tprivate SingletonSupplier<AsyncUncaughtExceptionHandler> exceptionHandler;\n@@ -85,6 +83,9 @@ public abstract class AsyncExecutionAspectSupport implements BeanFactoryAware {\n \t@Nullable\n \tprivate StringValueResolver embeddedValueResolver;\n \n+\tprivate final Map<Method, AsyncTaskExecutor> executors = new ConcurrentHashMap<>(16);\n+\n+\n \t/**\n \t * Create a new instance with a default {@link AsyncUncaughtExceptionHandler}.\n \t * @param defaultExecutor the {@code Executor} (typically a Spring {@code AsyncTaskExecutor}\n@@ -157,6 +158,7 @@ public void setBeanFactory(BeanFactory beanFactory) {\n \t\tif (beanFactory instanceof ConfigurableBeanFactory configurableBeanFactory) {\n \t\t\tthis.embeddedValueResolver = new EmbeddedValueResolver(configurableBeanFactory);\n \t\t}\n+\t\tthis.executors.clear();\n \t}\n \n ",
    "output": "Clear cached executors in setBeanFactory (for reused AspectJ aspect)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StreamUtils.java b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n@@ -23,8 +23,6 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n import java.nio.charset.Charset;\n \n import org.springframework.lang.Nullable;\n@@ -133,9 +131,8 @@ public static void copy(String in, Charset charset, OutputStream out) throws IOE\n \t\tAssert.notNull(charset, \"No Charset specified\");\n \t\tAssert.notNull(out, \"No OutputStream specified\");\n \n-\t\tWriter writer = new OutputStreamWriter(out, charset);\n-\t\twriter.write(in);\n-\t\twriter.flush();\n+\t\tout.write(in.getBytes(charset));\n+\t\tout.flush();\n \t}\n \n \t/**",
    "output": "Skip buffer in StreamUtils#copy(String)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/generate/GeneratedFiles.java b/spring-core/src/main/java/org/springframework/aot/generate/GeneratedFiles.java\n--- a/spring-core/src/main/java/org/springframework/aot/generate/GeneratedFiles.java\n+++ b/spring-core/src/main/java/org/springframework/aot/generate/GeneratedFiles.java\n@@ -161,7 +161,7 @@ default void addFile(Kind kind, String path, ThrowingConsumer<Appendable> conten\n \n \tprivate static String getClassNamePath(String className) {\n \t\tAssert.hasLength(className, \"'className' must not be empty\");\n-\t\tAssert.isTrue(isJavaIdentifier(className), \"'className' must be a valid identifier\");\n+\t\tAssert.isTrue(isJavaIdentifier(className), \"'className' \" + className + \" must be a valid identifier\");\n \t\treturn ClassUtils.convertClassNameToResourcePath(className) + \".java\";\n \t}\n \n\ndiff --git a/spring-core/src/test/java/org/springframework/aot/generate/GeneratedFilesTests.java b/spring-core/src/test/java/org/springframework/aot/generate/GeneratedFilesTests.java\n--- a/spring-core/src/test/java/org/springframework/aot/generate/GeneratedFilesTests.java\n+++ b/spring-core/src/test/java/org/springframework/aot/generate/GeneratedFilesTests.java\n@@ -78,7 +78,7 @@ void addSourceFileWithCharSequenceWhenClassNameIsInvalidThrowsException() {\n \t\tassertThatIllegalArgumentException()\n \t\t\t\t.isThrownBy(() -> this.generatedFiles\n \t\t\t\t\t\t.addSourceFile(\"com/example/HelloWorld.java\", \"{}\"))\n-\t\t\t\t.withMessage(\"'className' must be a valid identifier\");\n+\t\t\t\t.withMessage(\"'className' com/example/HelloWorld.java must be a valid identifier\");\n \t}\n \n \t@Test",
    "output": "Provide invalid class name in exception message"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.4\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.5\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Reactor 2023.0.0 Includes Protobuf 3.25.0, Artemis 2.31.2, Checkstyle 10.12.5"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java\n@@ -201,7 +201,7 @@ public static <T> MessageBuilder<T> withPayload(T payload) {\n \t * @since 4.1\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tpublic static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders) {\n+\tpublic static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {\n \t\tAssert.notNull(payload, \"Payload must not be null\");\n \t\tAssert.notNull(messageHeaders, \"MessageHeaders must not be null\");\n \t\tif (payload instanceof Throwable throwable) {",
    "output": "Fix wrong nullability requirement"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java\n@@ -332,7 +332,8 @@ private static CachedResult getAttribute(HttpServletRequest request) {\n \t * for a given request identified by dispatcher type and requestURI.\n \t * @since 6.0.14\n \t */\n-\tpublic final static class CachedResult {\n+\t@SuppressWarnings(\"serial\")\n+\tpublic static final class CachedResult {\n \n \t\tprivate final DispatcherType dispatcherType;\n ",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -491,7 +491,8 @@ protected void addClassPathManifestEntries(Set<Resource> result) {\n \t\t\t\t\tint prefixIndex = filePath.indexOf(':');\n \t\t\t\t\tif (prefixIndex == 1) {\n \t\t\t\t\t\t// Possibly \"c:\" drive prefix on Windows, to be upper-cased for proper duplicate detection\n-\t\t\t\t\t\tfilePath = StringUtils.capitalize(filePath);\n+\t\t\t\t\t\t// to resolve find duplicate jar resource on windows\n+\t\t\t\t\t\tfilePath = \"/\" + StringUtils.capitalize(filePath);\n \t\t\t\t\t}\n \t\t\t\t\t// Since '#' can appear in directories/filenames, java.net.URL should not treat it as a fragment\n \t\t\t\t\tfilePath = StringUtils.replace(filePath, \"#\", \"%23\");",
    "output": "Avoid duplicate resources in PathMatchingResourcePatternResolver on Windows This commit updates PathMatchingResourcePatternResolver to avoid returning duplicate resources on MS Windows when searching using the `classpath*:` prefix and a wildcard pattern that matches resources which are directly present in a JAR as well as present via classpath manifest entries"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -79,7 +79,9 @@ final class DefaultWebClient implements WebClient {\n \tprivate static final Mono<ClientResponse> NO_HTTP_CLIENT_RESPONSE_ERROR = Mono.error(\n \t\t\t() -> new IllegalStateException(\"The underlying HTTP client completed without emitting a response.\"));\n \n-\tprivate static final DefaultClientRequestObservationConvention DEFAULT_OBSERVATION_CONVENTION = new DefaultClientRequestObservationConvention();\n+\tprivate static final DefaultClientRequestObservationConvention DEFAULT_OBSERVATION_CONVENTION =\n+\t\t\tnew DefaultClientRequestObservationConvention();\n+\n \n \tprivate final ExchangeFunction exchangeFunction;\n \n@@ -119,10 +121,10 @@ final class DefaultWebClient implements WebClient {\n \t\tthis.uriBuilderFactory = uriBuilderFactory;\n \t\tthis.defaultHeaders = defaultHeaders;\n \t\tthis.defaultCookies = defaultCookies;\n-\t\tthis.observationRegistry = observationRegistry;\n-\t\tthis.observationConvention = observationConvention;\n \t\tthis.defaultRequest = defaultRequest;\n \t\tthis.defaultStatusHandlers = initStatusHandlers(statusHandlerMap);\n+\t\tthis.observationRegistry = observationRegistry;\n+\t\tthis.observationConvention = observationConvention;\n \t\tthis.builder = builder;\n \t}\n ",
    "output": "Polishing in DefaultWebClient"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -698,7 +698,7 @@ private <T> Mono<T> applyStatusHandlers(ClientResponse response) {\n \t\tprivate static URI getUriToLog(URI uri) {\n \t\t\tif (StringUtils.hasText(uri.getQuery())) {\n \t\t\t\ttry {\n-\t\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), uri.getPath(), null);\n+\t\t\t\t\turi = new URI(uri.getScheme(), null, uri.getHost(), uri.getPort(), uri.getPath(), null, null);\n \t\t\t\t}\n \t\t\t\tcatch (URISyntaxException ex) {\n \t\t\t\t\t// ignore",
    "output": "Include port when logging URI in DefaultWebClient"
  },
  {
    "input": "diff --git a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n--- a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n@@ -145,9 +145,12 @@ private static class Log4jLog implements Log, Serializable {\n \t\tprivate static final LoggerContext loggerContext =\n \t\t\t\tLogManager.getContext(Log4jLog.class.getClassLoader(), false);\n \n-\t\tprivate final ExtendedLogger logger;\n+\t\tprivate final String name;\n+\n+\t\tprivate final transient ExtendedLogger logger;\n \n \t\tpublic Log4jLog(String name) {\n+\t\t\tthis.name = name;\n \t\t\tLoggerContext context = loggerContext;\n \t\t\tif (context == null) {\n \t\t\t\t// Circular call in early-init scenario -> static field not initialized yet\n@@ -261,6 +264,10 @@ private void log(Level level, Object message, Throwable exception) {\n \t\t\t\tthis.logger.logIfEnabled(FQCN, level, null, message, exception);\n \t\t\t}\n \t\t}\n+\n+\t\tprotected Object readResolve() {\n+\t\t\treturn new Log4jLog(this.name);\n+\t\t}\n \t}\n \n ",
    "output": "Log4jLog re-resolves ExtendedLogger on deserialization This is necessary for compatibility with Log4J 2.21, analogous to the existing re-resolution in Spring's SLF4J adapter"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java\n@@ -247,18 +247,20 @@ public Mono<MultiValueMap<String, Part>> getMultipartData() {\n \n \t@Override\n \tpublic Mono<Void> cleanupMultipart() {\n-\t\tif (this.multipartRead) {\n-\t\t\treturn getMultipartData()\n-\t\t\t\t\t.onErrorResume(t -> Mono.empty()) // ignore errors reading multipart data\n-\t\t\t\t\t.flatMapIterable(Map::values)\n-\t\t\t\t\t.flatMapIterable(Function.identity())\n-\t\t\t\t\t.flatMap(part -> part.delete()\n-\t\t\t\t\t\t\t\t\t.onErrorResume(ex -> Mono.empty()))\n-\t\t\t\t\t.then();\n-\t\t}\n-\t\telse {\n-\t\t\treturn Mono.empty();\n-\t\t}\n+\t\treturn Mono.defer(() -> {\n+\t\t\tif (this.multipartRead) {\n+\t\t\t\treturn getMultipartData()\n+\t\t\t\t\t\t.onErrorComplete()\n+\t\t\t\t\t\t.flatMapIterable(Map::values)\n+\t\t\t\t\t\t.flatMapIterable(Function.identity())\n+\t\t\t\t\t\t.flatMap(part -> part.delete()\n+\t\t\t\t\t\t\t\t\t.onErrorComplete())\n+\t\t\t\t\t\t.then();\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn Mono.empty();\n+\t\t\t}\n+\t\t});\n \t}\n \n \t@Override",
    "output": "Defer cleanup in DefaultServerWebExchange This commit ensures that the multipartRead flag is read in a deferred block, and is not evaluated too early"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.http.client;\n \n+import java.io.BufferedOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.io.UncheckedIOException;\n@@ -44,6 +45,9 @@\n  */\n class JettyClientHttpRequest extends AbstractStreamingClientHttpRequest {\n \n+\tprivate static final int CHUNK_SIZE = 1024;\n+\n+\n \tprivate final Request request;\n \n \tprivate final long readTimeout;\n@@ -85,7 +89,8 @@ protected ClientHttpResponse executeInternal(HttpHeaders headers, @Nullable Body\n \t\t\t\tOutputStreamRequestContent requestContent = new OutputStreamRequestContent(contentType);\n \t\t\t\tthis.request.body(requestContent)\n \t\t\t\t\t\t.send(responseListener);\n-\t\t\t\ttry (OutputStream outputStream = requestContent.getOutputStream()) {\n+\t\t\t\ttry (OutputStream outputStream =\n+\t\t\t\t\t\t\tnew BufferedOutputStream(requestContent.getOutputStream(), CHUNK_SIZE)) {\n \t\t\t\t\tbody.writeTo(StreamUtils.nonClosing(outputStream));\n \t\t\t\t}\n \t\t\t}",
    "output": "Buffer writes in JettyClientHttpRequest This commit ensures that not every OutputStream.write gets written as a separate chunk, by buffering the written data in a BufferedOutputStream. In some cases, a large quantity of small writes would result in many sent chunks"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/DataBinder.java b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n--- a/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java\n@@ -22,6 +22,7 @@\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -947,7 +948,7 @@ private Object createObject(ResolvableType objectType, String nestedPath, ValueR\n \t\t\t\tClass<?> paramType = paramTypes[i];\n \t\t\t\tObject value = valueResolver.resolveValue(paramPath, paramType);\n \n-\t\t\t\tif (value == null && !BeanUtils.isSimpleValueType(param.nestedIfOptional().getNestedParameterType())) {\n+\t\t\t\tif (value == null && shouldCreateObject(param)) {\n \t\t\t\t\tResolvableType type = ResolvableType.forMethodParameter(param);\n \t\t\t\t\targs[i] = createObject(type, paramPath + \".\", valueResolver);\n \t\t\t\t}\n@@ -1007,6 +1008,12 @@ private Object createObject(ResolvableType objectType, String nestedPath, ValueR\n \t\treturn (isOptional && !nestedPath.isEmpty() ? Optional.ofNullable(result) : result);\n \t}\n \n+\tprivate static boolean shouldCreateObject(MethodParameter param) {\n+\t\tClass<?> type = param.nestedIfOptional().getNestedParameterType();\n+\t\treturn !(BeanUtils.isSimpleValueType(type) ||\n+\t\t\t\tCollection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type) || type.isArray());\n+\t}\n+\n \tprivate void validateConstructorArgument(\n \t\t\tClass<?> constructorClass, String nestedPath, String name, @Nullable Object value) {\n ",
    "output": "Refine decision to create object for constructor injection"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -238,11 +238,18 @@ protected void processConfigurationClass(ConfigurationClass configClass, Predica\n \t\t}\n \n \t\t// Recursively process the configuration class and its superclass hierarchy.\n-\t\tSourceClass sourceClass = asSourceClass(configClass, filter);\n-\t\tdo {\n-\t\t\tsourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);\n+\t\tSourceClass sourceClass = null;\n+\t\ttry {\n+\t\t\tsourceClass = asSourceClass(configClass, filter);\n+\t\t\tdo {\n+\t\t\t\tsourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);\n+\t\t\t}\n+\t\t\twhile (sourceClass != null);\n+\t\t}\n+\t\tcatch (IOException ex) {\n+\t\t\tthrow new BeanDefinitionStoreException(\n+\t\t\t\t\t\"I/O failure while processing configuration class [\" + sourceClass + \"]\", ex);\n \t\t}\n-\t\twhile (sourceClass != null);\n \n \t\tthis.configurationClasses.put(configClass, configClass);\n \t}",
    "output": "Improve exception message when configuration class parsing fails This commit improves the exception that is thrown when a particular source class cannot be parsed. Previously, the message would include the root configuration class, which may not be the class that actually failed as parsing can trigger component scan. There's now a dedicated catch that generates an exception message that includes the class that is currently parsed"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -1198,23 +1198,6 @@ void exchangeResponseCookies(ClientHttpConnector connector) {\n \t\texpectRequestCount(1);\n \t}\n \n-\t@ParameterizedWebClientTest\n-\tvoid invalidDomain(ClientHttpConnector connector) {\n-\t\tstartServer(connector);\n-\n-\t\tString url = \"http://example.invalid\";\n-\t\tMono<Void> result = this.webClient.get().uri(url).retrieve().bodyToMono(Void.class);\n-\n-\t\tStepVerifier.create(result)\n-\t\t\t\t.expectErrorSatisfies(throwable -> {\n-\t\t\t\t\tassertThat(throwable).isInstanceOf(WebClientRequestException.class);\n-\t\t\t\t\tWebClientRequestException ex = (WebClientRequestException) throwable;\n-\t\t\t\t\tassertThat(ex.getMethod()).isEqualTo(HttpMethod.GET);\n-\t\t\t\t\tassertThat(ex.getUri()).isEqualTo(URI.create(url));\n-\t\t\t\t})\n-\t\t\t\t.verify();\n-\t}\n-\n \t@ParameterizedWebClientTest\n \tvoid malformedResponseChunksOnBodilessEntity(ClientHttpConnector connector) {\n \t\tMono<?> result = doMalformedChunkedResponseTest(connector, ResponseSpec::toBodilessEntity);",
    "output": "Remove invalid domain integration tests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequest.java\n@@ -132,7 +132,7 @@ public void writeTo(BufferedSink sink) throws IOException {\n \n \t\t@Override\n \t\tpublic boolean isOneShot() {\n-\t\t\treturn true;\n+\t\t\treturn !this.body.repeatable();\n \t\t}\n \t}\n ",
    "output": "Use StreamingHttpOutputMessage.Body.repeatable in OkHttp3ClientHttpRequest"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -982,7 +982,10 @@ protected void doTrace(HttpServletRequest request, HttpServletResponse response)\n \t\t\t\treturn;\n \t\t\t}\n \t\t}\n-\t\tsuper.doTrace(request, response);\n+\t\t// Work around until https://github.com/jakartaee/servlet/pull/545 is fixed and in use\n+\t\tif (request.getDispatcherType() != DispatcherType.ERROR) {\n+\t\t\tsuper.doTrace(request, response);\n+\t\t}\n \t}\n \n \t/**",
    "output": "Avoid super.doTrace for ERROR dispatches"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/MissingPathVariableException.java b/spring-web/src/main/java/org/springframework/web/bind/MissingPathVariableException.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/MissingPathVariableException.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/MissingPathVariableException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,7 +88,7 @@ public final MethodParameter getParameter() {\n \n \t@Override\n \tpublic HttpStatusCode getStatusCode() {\n-\t\treturn HttpStatus.INTERNAL_SERVER_ERROR;\n+\t\treturn (isMissingAfterConversion() ? HttpStatus.BAD_REQUEST : HttpStatus.INTERNAL_SERVER_ERROR);\n \t}\n \n }",
    "output": "Send 400 for PathVariable that is null after conversion This implies a value was actually sent, but is not something that can be converted to the expected type"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java b/spring-context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java\n@@ -543,6 +543,25 @@ public void testLazyResolutionWithCglibProxy() {\n \t\tassertThat(tb.getName()).isEqualTo(\"notLazyAnymore\");\n \t}\n \n+\t@Test\n+\tpublic void testLazyResolutionWithFallbackTypeMatch() {\n+\t\tDefaultListableBeanFactory bf = new DefaultListableBeanFactory();\n+\t\tbf.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());\n+\t\tCommonAnnotationBeanPostProcessor bpp = new CommonAnnotationBeanPostProcessor();\n+\t\tbpp.setBeanFactory(bf);\n+\t\tbf.addBeanPostProcessor(bpp);\n+\n+\t\tbf.registerBeanDefinition(\"annotatedBean\", new RootBeanDefinition(LazyResourceCglibInjectionBean.class));\n+\t\tbf.registerBeanDefinition(\"tb\", new RootBeanDefinition(TestBean.class));\n+\n+\t\tLazyResourceCglibInjectionBean bean = (LazyResourceCglibInjectionBean) bf.getBean(\"annotatedBean\");\n+\t\tassertThat(bf.containsSingleton(\"tb\")).isFalse();\n+\t\tbean.testBean.setName(\"notLazyAnymore\");\n+\t\tassertThat(bf.containsSingleton(\"tb\")).isTrue();\n+\t\tTestBean tb = (TestBean) bf.getBean(\"tb\");\n+\t\tassertThat(tb.getName()).isEqualTo(\"notLazyAnymore\");\n+\t}\n+\n \n \tpublic static class AnnotatedInitDestroyBean {\n ",
    "output": "Test for @Resource @Lazy fallback type match"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -581,7 +581,11 @@ private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\tif (!method.getDeclaringClass().isRecord() && method.getParameterCount() == 0) {\n+\t\t\t\t\tif (method.getParameterCount() == 0) {\n+\t\t\t\t\t\tif (method.getDeclaringClass().isRecord()) {\n+\t\t\t\t\t\t\t// Annotations on the compact constructor arguments made available on accessors, ignoring.\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n \t\t\t\t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\t\t\t\tlogger.info(\"Autowired annotation should only be used on methods with parameters: \" +\n \t\t\t\t\t\t\t\t\tmethod);",
    "output": "Ignore @Value on record property"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -581,7 +581,7 @@ private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\tif (method.getParameterCount() == 0) {\n+\t\t\t\t\tif (!method.getDeclaringClass().isRecord() && method.getParameterCount() == 0) {\n \t\t\t\t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\t\t\t\tlogger.info(\"Autowired annotation should only be used on methods with parameters: \" +\n \t\t\t\t\t\t\t\t\tmethod);",
    "output": "Ignore @Value on record property"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,8 +16,8 @@\n \n package org.springframework.http.server.reactive;\n \n-import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n@@ -69,7 +69,7 @@ private enum State {NEW, COMMITTING, COMMIT_ACTION_FAILED, COMMITTED}\n \n \tprivate final AtomicReference<State> state = new AtomicReference<>(State.NEW);\n \n-\tprivate final List<Supplier<? extends Mono<Void>>> commitActions = new ArrayList<>(4);\n+\tprivate final List<Supplier<? extends Mono<Void>>> commitActions = new CopyOnWriteArrayList<>();\n \n \t@Nullable\n \tprivate HttpHeaders readOnlyHeaders;",
    "output": "Use CopyOnWriteArrayList for beforeCommit actions"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.context.support;\n \n-import java.time.Duration;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -561,17 +560,16 @@ public void beforeCheckpoint(org.crac.Context<? extends org.crac.Resource> conte\n \n \t\t@Override\n \t\tpublic void afterRestore(org.crac.Context<? extends org.crac.Resource> context) {\n-\t\t\tlong restartTime = System.nanoTime();\n \t\t\tlogger.info(\"Restarting Spring-managed lifecycle beans after JVM restore\");\n \t\t\trestartAfterStop();\n \n \t\t\t// Barrier for prevent-shutdown thread not needed anymore\n \t\t\tthis.barrier = null;\n \n-\t\t\tlong timeTakenToRestart = Duration.ofNanos(System.nanoTime() - restartTime).toMillis();\n-\t\t\tlong timeTakenToRestoreJvm = CRaCMXBean.getCRaCMXBean().getUptimeSinceRestore();\n-\t\t\tlogger.info(\"Spring-managed lifecycle restart completed in \" + timeTakenToRestart\n-\t\t\t\t\t+ \" ms (restored JVM running for \" + timeTakenToRestoreJvm + \" ms)\");\n+\t\t\tif (!checkpointOnRefresh) {\n+\t\t\t\tlogger.info(\"Spring-managed lifecycle restart completed (restored JVM running for \" +\n+\t\t\t\t\t\tCRaCMXBean.getCRaCMXBean().getUptimeSinceRestore() + \" ms)\");\n+\t\t\t}\n \t\t}\n \n \t\tprivate void awaitPreventShutdownBarrier() {",
    "output": "Refine CRaC restoration logs"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java\n@@ -35,6 +35,7 @@\n  * Exceptions that contain actual HTTP response data.\n  *\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  * @since 5.0\n  */\n @SuppressWarnings(\"RedundantSuppression\")\n@@ -202,11 +203,11 @@ public byte[] getResponseBodyAsByteArray() {\n \t/**\n \t * Return the response content as a String using the charset of media type\n \t * for the response, if available, or otherwise falling back on\n-\t * {@literal ISO-8859-1}. Use {@link #getResponseBodyAsString(Charset)} if\n+\t * {@literal UTF-8}. Use {@link #getResponseBodyAsString(Charset)} if\n \t * you want to fall back on a different, default charset.\n \t */\n \tpublic String getResponseBodyAsString() {\n-\t\treturn getResponseBodyAsString(StandardCharsets.ISO_8859_1);\n+\t\treturn getResponseBodyAsString(StandardCharsets.UTF_8);\n \t}\n \n \t/**",
    "output": "Fall back on charset in WebClientResponseException Instead of -1, consistently with the change done in RestClientResponseException"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageChannelDecorator.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageChannelDecorator.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageChannelDecorator.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageChannelDecorator.java\n@@ -204,7 +204,7 @@ public void run() {\n \t}\n \n \n-\tprivate final static class CallbackTaskInterceptor implements ExecutorChannelInterceptor {\n+\tprivate static final class CallbackTaskInterceptor implements ExecutorChannelInterceptor {\n \n \t\t@Override\n \t\tpublic void afterMessageHandled(\n\ndiff --git a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientRequestFactory.java\n@@ -47,7 +47,7 @@ public class ReactorNettyClientRequestFactory implements ClientHttpRequestFactor\n \n \tprivate static final Log logger = LogFactory.getLog(ReactorNettyClientRequestFactory.class);\n \n-\tprivate final static Function<HttpClient, HttpClient> defaultInitializer = client -> client.compress(true);\n+\tprivate static final Function<HttpClient, HttpClient> defaultInitializer = client -> client.compress(true);\n \n \n \tprivate HttpClient httpClient;",
    "output": "Order modifiers to align with JLS"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n--- a/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n+++ b/spring-web/src/main/java/org/springframework/http/ProblemDetail.java\n@@ -216,6 +216,18 @@ public void setProperty(String name, @Nullable Object value) {\n \t\tthis.properties.put(name, value);\n \t}\n \n+\t/**\n+\t * Setter for the {@link #getProperties() properties map}.\n+\t * <p>By default, this is not set.\n+\t * <p>When Jackson JSON is present on the classpath, any properties set here\n+\t * are rendered as top level key-value pairs in the output JSON. Otherwise,\n+\t * they are rendered as a {@code \"properties\"} sub-map.\n+\t * @param properties the properties map\n+\t */\n+\tpublic void setProperties(@Nullable Map<String, Object> properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n \t/**\n \t * Return a generic map of properties that are not known ahead of time,\n \t * possibly {@code null} if no properties have been added. To add a property,",
    "output": "Add a properties setter to ProblemDetail Mainly to allow Kotlin idiomatic properties assignment"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n@@ -137,11 +137,13 @@ void endToEndTestsForEntireSpringTestModule() {\n \t\t\t\t// Scan all base packages in spring-test.\n \t\t\t\t.scan(\"org.springframework.mock\", \"org.springframework.test\")\n \t\t\t\t// Or limit execution to a particular package and its subpackages.\n-\t\t\t\t//   - For example, to test @EJB and @PersistenceContext DI support:\n-\t\t\t\t//     .scan(\"org.springframework.test.context.testng.transaction.ejb\")\n+\t\t\t\t//   - For example, to test JDBC support:\n+\t\t\t\t//     .scan(\"org.springframework.test.context.jdbc\")\n \t\t\t\t// We only include test classes named *Tests so that we don't pick up\n \t\t\t\t// internal TestCase classes that aren't really tests.\n \t\t\t\t.filter(clazz -> clazz.getSimpleName().endsWith(\"Tests\"))\n+\t\t\t\t// We don't have a way to abort a TestNG test mid-flight, and @EJB is not supported in AOT.\n+\t\t\t\t.filter(clazz -> !clazz.getPackageName().contains(\"testng.transaction.ejb\"))\n \t\t\t\t.toList();\n \n \t\t// AOT BUILD-TIME: PROCESSING",
    "output": "Filter out TestNG @⁠EJB tests in AOT end-to-end tests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/nested/NestedTestsWithSpringRulesTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/nested/NestedTestsWithSpringRulesTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/nested/NestedTestsWithSpringRulesTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/nested/NestedTestsWithSpringRulesTests.java\n@@ -54,7 +54,7 @@ public void topLevelTest() {\n \n \n \t@ContextConfiguration(classes = NestedConfig.class)\n-\tpublic class NestedTestCase extends SpringRuleConfigurer {\n+\tpublic class NestedTests extends SpringRuleConfigurer {\n \n \t\t@Autowired\n \t\tString bar;",
    "output": "Rename test class to NestedTests for AOT integration testing Prior to this commit, the NestedTestCase resulted in errors during our AOT end-to-end integration tests since it did not comply to our \"*Tests\" naming convention"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n@@ -258,13 +258,15 @@ private MultiValueMap<ClassName, Class<?>> processAheadOfTime(\n \t\t\t\tif (numDisabled != testClasses.size()) {\n \t\t\t\t\tif (this.failOnError) {\n \t\t\t\t\t\tthrow new TestContextAotException(\"\"\"\n-\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated\n-\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \"\"\" + classNames(testClasses));\n+\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated \\\n+\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \\\n+\t\t\t\t\t\t\t\t\"\"\" + classNames(testClasses));\n \t\t\t\t\t}\n \t\t\t\t\telse if (logger.isWarnEnabled()) {\n \t\t\t\t\t\tlogger.warn(\"\"\"\n-\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated\n-\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \"\"\" + classNames(testClasses));\n+\t\t\t\t\t\t\t\tAll test classes that share an ApplicationContext must be annotated \\\n+\t\t\t\t\t\t\t\twith @DisabledInAotMode if one of them is: \\\n+\t\t\t\t\t\t\t\t\"\"\" + classNames(testClasses));\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (logger.isInfoEnabled()) {",
    "output": "Fix formatting for @⁠DisabledInAotMode error messages"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n@@ -55,6 +55,7 @@\n import org.springframework.test.context.ContextLoader;\n import org.springframework.test.context.MergedContextConfiguration;\n import org.springframework.test.context.SmartContextLoader;\n+import org.springframework.test.context.TestContextAnnotationUtils;\n import org.springframework.test.context.TestContextBootstrapper;\n import org.springframework.util.Assert;\n import org.springframework.util.LinkedMultiValueMap;\n@@ -94,7 +95,7 @@ public class TestContextAotGenerator {\n \tprivate static final Log logger = LogFactory.getLog(TestContextAotGenerator.class);\n \n \tprivate static final Predicate<? super Class<?>> isDisabledInAotMode =\n-\t\t\ttestClass -> MergedAnnotations.from(testClass).isPresent(DisabledInAotMode.class);\n+\t\t\ttestClass -> TestContextAnnotationUtils.hasAnnotation(testClass, DisabledInAotMode.class);\n \n \n \tprivate final ApplicationContextAotGenerator aotGenerator = new ApplicationContextAotGenerator();",
    "output": "Find @⁠DisabledInAotMode on enclosing classes for @⁠Nested tests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -24,7 +24,6 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import java.lang.reflect.Method;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n@@ -160,9 +159,8 @@ void findMethodAnnotationOnBridgeMethod() throws Exception {\n \t\tassertThat(getAnnotation(bridgeMethod, Order.class)).isNull();\n \t\tassertThat(findAnnotation(bridgeMethod, Order.class)).isNotNull();\n \n-\t\tboolean runningInEclipse = Arrays.stream(new Exception().getStackTrace())\n-\t\t\t\t.anyMatch(element -> element.getClassName().startsWith(\"org.eclipse.jdt\"));\n-\n+\t\tboolean runningInEclipse = StackWalker.getInstance().walk(stream ->\n+\t\t\t\tstream.anyMatch(stackFrame -> stackFrame.getClassName().startsWith(\"org.eclipse.jdt\")));\n \t\t// As of JDK 8, invoking getAnnotation() on a bridge method actually finds an\n \t\t// annotation on its 'bridged' method [1]; however, the Eclipse compiler will not\n \t\t// support this until Eclipse 4.9 [2]. Thus, we effectively ignore the following",
    "output": "Align with StackWalker use in MergedAnnotationsTests.getFromMethodWithBridgeMethod"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n@@ -122,15 +122,16 @@ void endToEndTestsForEntireSpringTestModule() {\n \t\t\t\t// Scan all packages.\n \t\t\t\t.scan()\n \t\t\t\t// Or limit execution to a particular package and its subpackages.\n-\t\t\t\t// .scan(\"org.springframework.test.context.aot.samples.web\")\n+\t\t\t\t// .scan(\"org.springframework.test.context.junit4\")\n \t\t\t\t// Only include test classes named *Tests so that we don't pick up\n \t\t\t\t// internal TestCase classes that aren't really tests.\n \t\t\t\t.filter(clazz -> clazz.getSimpleName().endsWith(\"Tests\"))\n \t\t\t\t.toList();\n \n \t\t// AOT BUILD-TIME: PROCESSING\n \t\tInMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\n-\t\tTestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles);\n+\t\t// Set failOnError flag to false to allow processing to continue.\n+\t\tTestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles, new RuntimeHints(), false);\n \t\tgenerator.processAheadOfTime(testClasses.stream());\n \n \t\t// AOT BUILD-TIME: COMPILATION",
    "output": "Set failOnError flag to false endToEndTestsForEntireSpringTestModule"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanDefinitionMethodGeneratorTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanDefinitionMethodGeneratorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanDefinitionMethodGeneratorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanDefinitionMethodGeneratorTests.java\n@@ -367,6 +367,7 @@ void generateBeanDefinitionMethodWhenHasInstancePostProcessorGeneratesMethod() {\n \t\t\t\tassertThat(instance.getName()).isEqualTo(\"postprocessed\");\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalStateException(ex);\n \t\t\t}\n \t\t\tSourceFile sourceFile = compiled.getSourceFile(\".*BeanDefinitions\");\n \t\t\tassertThat(sourceFile).contains(\"instanceSupplier.andThen(\");\n@@ -405,6 +406,7 @@ void generateBeanDefinitionMethodWhenHasInstancePostProcessorAndFactoryMethodGen\n \t\t\t\tassertThat(instance.getName()).isEqualTo(\"postprocessed\");\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalStateException(ex);\n \t\t\t}\n \t\t\tSourceFile sourceFile = compiled.getSourceFile(\".*BeanDefinitions\");\n \t\t\tassertThat(sourceFile).contains(\"instanceSupplier.andThen(\");",
    "output": "Do not swallow failures in tests"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -131,9 +131,9 @@ private Configuration getRuntimeClassPath(Project project) {\n \t}\n \n \tprivate File getOutputFile(String baseLineVersion, Project project) {\n-\t\tPath outDir = Paths.get(project.getRootProject()\n-\t\t\t\t\t\t.getLayout().getBuildDirectory().getAsFile().get().getAbsolutePath(),\n-\t\t\t\t\"reports\", \"api-diff\",\n+\t\tString buildDirectoryPath = project.getRootProject()\n+\t\t\t\t.getLayout().getBuildDirectory().getAsFile().get().getAbsolutePath();\n+\t\tPath outDir = Paths.get(buildDirectoryPath, \"reports\", \"api-diff\",\n \t\t\t\tbaseLineVersion + \"_to_\" + project.getRootProject().getVersion());\n \t\treturn project.file(outDir.resolve(project.getName() + \".html\").toString());\n \t}",
    "output": "Replace deprecated method getBuildDir"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n@@ -131,7 +131,8 @@ private Configuration getRuntimeClassPath(Project project) {\n \t}\n \n \tprivate File getOutputFile(String baseLineVersion, Project project) {\n-\t\tPath outDir = Paths.get(project.getRootProject().getBuildDir().getAbsolutePath(),\n+\t\tPath outDir = Paths.get(project.getRootProject()\n+\t\t\t\t\t\t.getLayout().getBuildDirectory().getAsFile().get().getAbsolutePath(),\n \t\t\t\t\"reports\", \"api-diff\",\n \t\t\t\tbaseLineVersion + \"_to_\" + project.getRootProject().getVersion());\n \t\treturn project.file(outDir.resolve(project.getName() + \".html\").toString());",
    "output": "Replace deprecated method getBuildDir"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java\n@@ -507,7 +507,7 @@ static Search search(SearchStrategy searchStrategy) {\n \t *\n \t * @since 6.0\n \t */\n-\tstatic final class Search {\n+\tfinal class Search {\n \n \t\tstatic final Predicate<Class<?>> always = clazz -> true;\n ",
    "output": "Remove redundant static declaration on Search class"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.3\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.4\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Reactor 2023.0.0-RC1 Includes Jetty 12.0.2 and Checkstyle 10.12.4"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n@@ -436,6 +436,7 @@ protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlPa\n \t * @return a representation of the parsed SQL statement\n \t */\n \tprotected ParsedSql getParsedSql(String sql) {\n+\t\tAssert.notNull(sql, \"SQL must not be null\");\n \t\treturn this.parsedSqlCache.get(sql);\n \t}\n ",
    "output": "Throw IllegalArgumentException for null SQL String"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -45,6 +45,7 @@\n  *\n  * @author Phillip Webb\n  * @author Sam Brannen\n+ * @author Juergen Hoeller\n  * @since 5.2\n  * @see AnnotationTypeMappings\n  */\n@@ -402,9 +403,11 @@ private boolean computeSynthesizableFlag() {\n \t\t\t\tif (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation())) {\n \t\t\t\t\tClass<? extends Annotation> annotationType =\n \t\t\t\t\t\t\t(Class<? extends Annotation>) (type.isAnnotation() ? type : type.getComponentType());\n-\t\t\t\t\tAnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);\n-\t\t\t\t\tif (mapping.isSynthesizable()) {\n-\t\t\t\t\t\treturn true;\n+\t\t\t\t\tif (annotationType != this.annotationType) {\n+\t\t\t\t\t\tAnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);\n+\t\t\t\t\t\tif (mapping.isSynthesizable()) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Re-introduce support for annotation declarations with self references"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n--- a/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n@@ -263,6 +263,24 @@ private Collection<ApplicationListener<?>> retrieveApplicationListeners(\n \t\t\t\t\tif (supportsEvent(beanFactory, listenerBeanName, eventType)) {\n \t\t\t\t\t\tApplicationListener<?> listener =\n \t\t\t\t\t\t\t\tbeanFactory.getBean(listenerBeanName, ApplicationListener.class);\n+\n+\t\t\t\t\t\t// Despite best efforts to avoid it, unwrapped proxies (singleton targets) can end up in the\n+\t\t\t\t\t\t// list of programmatically registered listeners. In order to avoid duplicates, we need to find\n+\t\t\t\t\t\t// and replace them by their proxy counterparts, because if both a proxy and its target end up\n+\t\t\t\t\t\t// in 'allListeners', listeners will fire twice.\n+\t\t\t\t\t\tApplicationListener<?> unwrappedListener =\n+\t\t\t\t\t\t\t\t(ApplicationListener<?>) AopProxyUtils.getSingletonTarget(listener);\n+\t\t\t\t\t\tif (listener != unwrappedListener) {\n+\t\t\t\t\t\t\tif (filteredListeners != null && filteredListeners.contains(unwrappedListener)) {\n+\t\t\t\t\t\t\t\tfilteredListeners.remove(unwrappedListener);\n+\t\t\t\t\t\t\t\tfilteredListeners.add(listener);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (allListeners.contains(unwrappedListener)) {\n+\t\t\t\t\t\t\t\tallListeners.remove(unwrappedListener);\n+\t\t\t\t\t\t\t\tallListeners.add(listener);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\n \t\t\t\t\t\tif (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {\n \t\t\t\t\t\t\tif (retriever != null) {\n \t\t\t\t\t\t\t\tif (beanFactory.isSingleton(listenerBeanName)) {",
    "output": "Avoid duplicate application listeners (proxy vs. proxy target) In AbstractApplicationEventMulticaster.retrieveApplicationListeners, despite best efforts to avoid it, unwrapped proxies (singleton targets) can end up in the list of programmatically registered listeners. In order to avoid duplicates, we need to find and replace them by their proxy counterparts, because if both a proxy and its target end up in 'allListeners', listeners will fire twice"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -29,7 +29,6 @@\n import reactor.netty.resources.ConnectionProvider;\n import reactor.netty.resources.LoopResources;\n \n-import org.springframework.context.Lifecycle;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.http.HttpMethod;\n import org.springframework.lang.Nullable;",
    "output": "Fix unused import error in ReactorClientHttpConnector"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/jdbc/TransactionalSqlScriptsTests.java b/spring-test/src/test/java/org/springframework/test/context/jdbc/TransactionalSqlScriptsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/jdbc/TransactionalSqlScriptsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/TransactionalSqlScriptsTests.java\n@@ -17,6 +17,7 @@\n package org.springframework.test.context.jdbc;\n \n import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestMethodOrder;\n \n@@ -31,7 +32,7 @@\n  */\n @SpringJUnitConfig(EmptyDatabaseConfig.class)\n @TestMethodOrder(MethodOrderer.MethodName.class)\n-@Sql({ \"schema.sql\", \"data.sql\" })\n+@Sql({ \"recreate-schema.sql\", \"data.sql\" })\n @DirtiesContext\n class TransactionalSqlScriptsTests extends AbstractTransactionalTests {\n \n@@ -46,4 +47,20 @@ void methodLevelScripts() {\n \t\tassertNumUsers(2);\n \t}\n \n+\t@Nested\n+\tclass NestedTransactionalSqlScriptsTests {\n+\n+\t\t@Test\n+\t\tvoid classLevelScripts() {\n+\t\t\tassertNumUsers(1);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@Sql({ \"recreate-schema.sql\", \"data.sql\", \"data-add-dogbert.sql\" })\n+\t\tvoid methodLevelScripts() {\n+\t\t\tassertNumUsers(2);\n+\t\t}\n+\n+\t}\n+\n }",
    "output": "Test status quo for inherited @⁠Sql in @⁠Nested test class"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n@@ -93,7 +93,7 @@ public ExpressionState(EvaluationContext context, TypedValue rootObject) {\n \n \tpublic ExpressionState(EvaluationContext context, TypedValue rootObject, SpelParserConfiguration configuration) {\n \t\tAssert.notNull(context, \"EvaluationContext must not be null\");\n-\t\tAssert.notNull(context, \"'rootObject' must not be null\");\n+\t\tAssert.notNull(rootObject, \"'rootObject' must not be null\");\n \t\tAssert.notNull(configuration, \"SpelParserConfiguration must not be null\");\n \t\tthis.relatedContext = context;\n \t\tthis.rootObject = rootObject;",
    "output": "Fix copy-n-paste error"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n@@ -93,11 +93,7 @@ public boolean supports(Class<?> clazz) {\n \t@Override\n \tprotected String readInternal(Class<? extends String> clazz, HttpInputMessage inputMessage) throws IOException {\n \t\tCharset charset = getContentTypeCharset(inputMessage.getHeaders().getContentType());\n-\t\tlong length = inputMessage.getHeaders().getContentLength();\n-\t\tbyte[] bytes = (length >= 0 && length <= Integer.MAX_VALUE ?\n-\t\t\t\tinputMessage.getBody().readNBytes((int) length) :\n-\t\t\t\tinputMessage.getBody().readAllBytes());\n-\t\treturn new String(bytes, charset);\n+\t\treturn StreamUtils.copyToString(inputMessage.getBody(), charset);\n \t}\n \n \t@Override",
    "output": "Undo optimization from 12fe2c that can cause regression"
  },
  {
    "input": "diff --git a/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java b/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java\n--- a/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java\n+++ b/spring-jms/src/test/java/org/springframework/jms/support/JmsAccessorTests.java\n@@ -109,7 +109,10 @@ void setSessionAcknowledgeMode() {\n \n \t\taccessor.setSessionAcknowledgeMode(Session.SESSION_TRANSACTED);\n \t\tassertThat(accessor.getSessionAcknowledgeMode()).isEqualTo(Session.SESSION_TRANSACTED);\n+\t}\n \n+\t@Test\n+\tvoid setCustomSessionAcknowledgeMode() {\n \t\taccessor.setSessionAcknowledgeMode(999);\n \t\tassertThat(accessor.getSessionAcknowledgeMode()).isEqualTo(999);\n \t}",
    "output": "Fix regression in JmsAccessor#setSessionAcknowledgeMode"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java b/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java\n--- a/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/UnknownContentTypeException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,8 +36,8 @@ public class UnknownContentTypeException extends RestClientException {\n \n \tprivate static final long serialVersionUID = 2759516676367274084L;\n \n-\t@SuppressWarnings(\"serial\")\n-\tprivate final Type targetType;\n+\n+\tprivate transient final Type targetType;\n \n \tprivate final MediaType contentType;\n ",
    "output": "Make targetType in UknownContentTypeException transient"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n@@ -38,7 +38,6 @@\n import org.aspectj.lang.annotation.DeclarePrecedence;\n import org.aspectj.lang.annotation.Pointcut;\n import org.aspectj.lang.reflect.MethodSignature;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.aop.Advisor;\n@@ -389,9 +388,7 @@ void introductionBasedOnAnnotationMatch() { // gh-9980\n \t\tassertThat(lockable.locked()).isTrue();\n \t}\n \n-\t// TODO: Why does this test fail? It hasn't been run before, so it maybe never actually passed...\n \t@Test\n-\t@Disabled\n \tvoid introductionWithArgumentBinding() {\n \t\tTestBean target = new TestBean();\n ",
    "output": "Enable test in AbstractAspectJAdvisorFactoryTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -108,7 +108,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\tHttpClient.RequestSender requestSender = this.httpClient\n \t\t\t\t.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name()));\n \n-\t\trequestSender = (uri.isAbsolute() ? requestSender.uri(uri) : requestSender.uri(uri.toString()));\n+\t\trequestSender = setUri(requestSender, uri);\n \n \t\treturn requestSender\n \t\t\t\t.send((request, outbound) -> requestCallback.apply(adaptRequest(method, uri, request, outbound)))\n@@ -125,6 +125,18 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\t\t});\n \t}\n \n+\tprivate static HttpClient.RequestSender setUri(HttpClient.RequestSender requestSender, URI uri) {\n+\t\tif (uri.isAbsolute()) {\n+\t\t\ttry {\n+\t\t\t\treturn requestSender.uri(uri);\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Fall back on passing it in as a String\n+\t\t\t}\n+\t\t}\n+\t\treturn requestSender.uri(uri.toString());\n+\t}\n+\n \tprivate ReactorClientHttpRequest adaptRequest(HttpMethod method, URI uri, HttpClientRequest request,\n \t\t\tNettyOutbound nettyOutbound) {\n ",
    "output": "Use URI String as fallback in ReactorClientHttpConnector"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java\n@@ -90,13 +90,10 @@ protected String getToStringInfix() {\n \t */\n \t@Override\n \tpublic ParamsRequestCondition combine(ParamsRequestCondition other) {\n-\t\tif (isEmpty() && other.isEmpty()) {\n+\t\tif (other.isEmpty()) {\n \t\t\treturn this;\n \t\t}\n-\t\telse if (other.isEmpty()) {\n-\t\t\treturn this;\n-\t\t}\n-\t\telse if (isEmpty()) {\n+\t\tif (isEmpty()) {\n \t\t\treturn other;\n \t\t}\n \t\tSet<ParamExpression> set = new LinkedHashSet<>(this.expressions);",
    "output": "Polish Conditional Statements"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n@@ -61,7 +61,7 @@ class DefaultFetchSpec<T> implements FetchSpec<T> {\n \tpublic Mono<T> one() {\n \t\treturn all().singleOrEmpty()\n \t\t\t.onErrorMap(IndexOutOfBoundsException.class, ex -> {\n-\t\t\t\tString message = String.format(\"Query [%s] returned non unique result.\", resultFunction.getSql());\n+\t\t\t\tString message = String.format(\"Query [%s] returned non unique result.\", this.resultFunction.getSql());\n \t\t\t\treturn new IncorrectResultSizeDataAccessException(message, 1);\n \t\t\t});\n \t}",
    "output": "Use `singleOrEmpty` instead of `buffer`"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/core/DefaultFetchSpec.java\n@@ -59,18 +59,11 @@ class DefaultFetchSpec<T> implements FetchSpec<T> {\n \n \t@Override\n \tpublic Mono<T> one() {\n-\t\treturn all().buffer(2)\n-\t\t\t\t.flatMap(list -> {\n-\t\t\t\t\tif (list.isEmpty()) {\n-\t\t\t\t\t\treturn Mono.empty();\n-\t\t\t\t\t}\n-\t\t\t\t\tif (list.size() > 1) {\n-\t\t\t\t\t\treturn Mono.error(new IncorrectResultSizeDataAccessException(\n-\t\t\t\t\t\t\t\tString.format(\"Query [%s] returned non unique result.\", this.resultFunction.getSql()),\n-\t\t\t\t\t\t\t\t1));\n-\t\t\t\t\t}\n-\t\t\t\t\treturn Mono.just(list.get(0));\n-\t\t\t\t}).next();\n+\t\treturn all().singleOrEmpty()\n+\t\t\t.onErrorMap(IndexOutOfBoundsException.class, ex -> {\n+\t\t\t\tString message = String.format(\"Query [%s] returned non unique result.\", resultFunction.getSql());\n+\t\t\t\treturn new IncorrectResultSizeDataAccessException(message, 1);\n+\t\t\t});\n \t}\n \n \t@Override",
    "output": "Use `singleOrEmpty` instead of `buffer` This commit avoids fetching and buffering results in temporary `List` buffers"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java\n@@ -302,10 +302,12 @@ private boolean isAspectMaterialized() {\n \n \t\t@Override\n \t\tpublic boolean equals(@Nullable Object other) {\n+\t\t\t// For equivalence, we only need to compare the preInstantiationPointcut fields since\n+\t\t\t// they include the declaredPointcut fields. In addition, we should not compare the\n+\t\t\t// aspectInstanceFactory fields since LazySingletonAspectInstanceFactoryDecorator does\n+\t\t\t// not implement equals().\n \t\t\treturn (this == other || (other instanceof PerTargetInstantiationModelPointcut that &&\n-\t\t\t\t\tObjectUtils.nullSafeEquals(this.declaredPointcut, that.declaredPointcut) &&\n-\t\t\t\t\tObjectUtils.nullSafeEquals(this.preInstantiationPointcut, that.preInstantiationPointcut) &&\n-\t\t\t\t\tObjectUtils.nullSafeEquals(this.aspectInstanceFactory, that.aspectInstanceFactory)));\n+\t\t\t\t\tObjectUtils.nullSafeEquals(this.preInstantiationPointcut, that.preInstantiationPointcut)));\n \t\t}\n \n \t\t@Override",
    "output": "Simplify equalsimplementation in PerTargetInstantiationModelPointcut For equivalence, we only need to compare the preInstantiationPointcut fields since they include the declaredPointcut fields. In addition, we should not compare the aspectInstanceFactory fields since LazySingletonAspectInstanceFactoryDecorator does not implement equals"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/InstantiationModelAwarePointcutAdvisorImpl.java\n@@ -303,7 +303,9 @@ private boolean isAspectMaterialized() {\n \t\t@Override\n \t\tpublic boolean equals(@Nullable Object other) {\n \t\t\treturn (this == other || (other instanceof PerTargetInstantiationModelPointcut that &&\n-\t\t\t\t\tObjectUtils.nullSafeEquals(this.declaredPointcut.getExpression(), that.declaredPointcut.getExpression())));\n+\t\t\t\t\tObjectUtils.nullSafeEquals(this.declaredPointcut, that.declaredPointcut) &&\n+\t\t\t\t\tObjectUtils.nullSafeEquals(this.preInstantiationPointcut, that.preInstantiationPointcut) &&\n+\t\t\t\t\tObjectUtils.nullSafeEquals(this.aspectInstanceFactory, that.aspectInstanceFactory)));\n \t\t}\n \n \t\t@Override",
    "output": "Expand scope of equalsin PerTargetInstantiationModelPointcut This commit expands the scope of equality checks in the implementation of equalsfor PerTargetInstantiationModelPointcut to include all fields instead of just the pointcut expression for the declared pointcut"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/JavaConventions.java b/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n@@ -27,6 +27,8 @@\n import org.gradle.api.plugins.JavaPluginExtension;\n import org.gradle.api.tasks.compile.JavaCompile;\n import org.gradle.jvm.toolchain.JavaLanguageVersion;\n+import org.gradle.jvm.toolchain.JavaToolchainSpec;\n+import org.gradle.jvm.toolchain.JvmVendorSpec;\n \n /**\n  * {@link Plugin} that applies conventions for compiling Java sources in Spring Framework.\n@@ -70,8 +72,10 @@ public void apply(Project project) {\n \t * @param project the current project\n \t */\n \tprivate void applyJavaCompileConventions(Project project) {\n-\t\tproject.getExtensions().getByType(JavaPluginExtension.class)\n-\t\t\t\t.getToolchain().getLanguageVersion().set(JavaLanguageVersion.of(17));\n+\t\tproject.getExtensions().getByType(JavaPluginExtension.class).toolchain(toolchain -> {\n+\t\t\ttoolchain.getVendor().set(JvmVendorSpec.BELLSOFT);\n+\t\t\ttoolchain.getLanguageVersion().set(JavaLanguageVersion.of(17));\n+\t\t});\n \t\tproject.getTasks().withType(JavaCompile.class)\n \t\t\t\t.matching(compileTask -> compileTask.getName().equals(JavaPlugin.COMPILE_JAVA_TASK_NAME))\n \t\t\t\t.forEach(compileTask -> {",
    "output": "Configure Gradle toolchain auto-provisioning This commit configures the Foojay resolver plugin in the Gradle build in order to auto-provision a required JDK distribution if it's not present already on the host. Currently the Spring Framework build requires both a JDK 17 and a JDK 21 distribution to build artifacts"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/server/adapter/ForwardedHeaderTransformerTests.java b/spring-web/src/test/java/org/springframework/web/server/adapter/ForwardedHeaderTransformerTests.java\n--- a/spring-web/src/test/java/org/springframework/web/server/adapter/ForwardedHeaderTransformerTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/server/adapter/ForwardedHeaderTransformerTests.java\n@@ -133,6 +133,21 @@ void shouldNotDoubleEncode() throws Exception {\n \t\tassertForwardedHeadersRemoved(request);\n \t}\n \n+\t@Test\n+\tvoid shouldHandleUnencodedUri() throws Exception {\n+\t\t\tHttpHeaders headers = new HttpHeaders();\n+\t\t\theaders.add(\"Forwarded\", \"host=84.198.58.199;proto=https\");\n+\t\t\tServerHttpRequest request = MockServerHttpRequest\n+\t\t\t\t\t\t\t.method(HttpMethod.GET, URI.create(\"https://example.com/a?q=1+1=2\"))\n+\t\t\t\t\t\t\t.headers(headers)\n+\t\t\t\t\t\t\t.build();\n+\n+\t\t\trequest = this.requestMutator.apply(request);\n+\n+\t\t\tassertThat(request.getURI()).isEqualTo(URI.create(\"https://84.198.58.199/a?q=1+1=2\"));\n+\t\t\tassertForwardedHeadersRemoved(request);\n+\t}\n+\n \t@Test\n \tvoid shouldConcatenatePrefixes() throws Exception {\n \t\tHttpHeaders headers = new HttpHeaders();",
    "output": "Lenient URI encoding handling in ForwardedHeaderTransformer"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -305,7 +305,8 @@ public static Class<?> forName(String name, @Nullable ClassLoader classLoader)\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\tint lastDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR);\n-\t\t\tif (lastDotIndex != -1) {\n+\t\t\tint previousDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR, lastDotIndex -1);\n+\t\t\tif (lastDotIndex != -1 && previousDotIndex != 1 && Character.isUpperCase(name.charAt(previousDotIndex + 1))) {\n \t\t\t\tString nestedClassName =\n \t\t\t\t\t\tname.substring(0, lastDotIndex) + NESTED_CLASS_SEPARATOR + name.substring(lastDotIndex + 1);\n \t\t\t\ttry {",
    "output": "Reduce nested class lookups in ClassUtils Prior to this commit, `ClassUtils#forName` would always attempt to resolve the given class name as a nested type. For example, searching for `org.example.Spring` would try to resolve * `org.example.Spring` * if not available, try `org.example$Spring` as well Java classes usually start with uppercase letters, so this additional lookup can be costly and not very useful. This commit only attempts nested class lookups when the previous segment starts with an uppercase. So `org.example.Spring.Issue` will look for `org.example.Spring$Issue`, but `org.example.Spring` will not"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -283,7 +283,7 @@ private void doValidateClass(Class<?> proxySuperClass, @Nullable ClassLoader pro\n \t\t\t\t\tif (Modifier.isFinal(mod)) {\n \t\t\t\t\t\tif (logger.isWarnEnabled() && implementsInterface(method, ifcs)) {\n \t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n-\t\t\t\t\t\t\t\t\t\"it is marked as final: Consider using interface-based JDK proxies instead!\");\n+\t\t\t\t\t\t\t\t\t\"it is marked as final, consider using interface-based JDK proxies instead.\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\t\tlogger.debug(\"Final method [\" + method + \"] cannot get proxied via CGLIB: \" +",
    "output": "Polish log message"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -281,8 +281,8 @@ private void doValidateClass(Class<?> proxySuperClass, @Nullable ClassLoader pro\n \t\t\t\tint mod = method.getModifiers();\n \t\t\t\tif (!Modifier.isStatic(mod) && !Modifier.isPrivate(mod)) {\n \t\t\t\t\tif (Modifier.isFinal(mod)) {\n-\t\t\t\t\t\tif (logger.isInfoEnabled() && implementsInterface(method, ifcs)) {\n-\t\t\t\t\t\t\tlogger.info(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n+\t\t\t\t\t\tif (logger.isWarnEnabled() && implementsInterface(method, ifcs)) {\n+\t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n \t\t\t\t\t\t\t\t\t\"it is marked as final: Consider using interface-based JDK proxies instead!\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (logger.isDebugEnabled()) {",
    "output": "Log attempt at proxying final methods to WARN instead of INFO"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1244,7 +1244,7 @@ else if (hasMultipartException(request)) {\n \t/**\n \t * Check \"jakarta.servlet.error.exception\" attribute for a multipart exception.\n \t */\n-\tprivate boolean hasMultipartException(HttpServletRequest request) {\n+\tprivate static boolean hasMultipartException(HttpServletRequest request) {\n \t\tThrowable error = (Throwable) request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE);\n \t\twhile (error != null) {\n \t\t\tif (error instanceof MultipartException) {\n@@ -1478,7 +1478,7 @@ protected View resolveViewName(String viewName, @Nullable Map<String, Object> mo\n \t\treturn null;\n \t}\n \n-\tprivate void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response,\n+\tprivate static void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response,\n \t\t\t@Nullable HandlerExecutionChain mappedHandler, Exception ex) throws Exception {\n \n \t\tif (mappedHandler != null) {",
    "output": "Make utility methods consistently static in DispatcherServlet"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1018,7 +1018,7 @@ else if (isEnableLoggingRequestDetails()) {\n \n \t\t\tif (traceOn) {\n \t\t\t\tList<String> values = Collections.list(request.getHeaderNames());\n-\t\t\t\tString headers = values.size() > 0 ? \"masked\" : \"\";\n+\t\t\t\tString headers = values.isEmpty() ? \"\" : \"masked\";\n \t\t\t\tif (isEnableLoggingRequestDetails()) {\n \t\t\t\t\theaders = values.stream().map(name -> name + \":\" + Collections.list(request.getHeaders(name)))\n \t\t\t\t\t\t\t.collect(Collectors.joining(\", \"));",
    "output": "Use List#isEmptyin DispatcherServlet This commit uses !isEmptyinstead of size> 0"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java b/spring-context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java\n@@ -55,14 +55,15 @@ class ContextTypeMatchClassLoader extends DecoratingClassLoader implements Smart\n \t\t// override classes that have not been loaded yet. If not accessible, we will\n \t\t// always override requested classes, even when the classes have been loaded\n \t\t// by the parent ClassLoader already and cannot be transformed anymore anyway.\n-\t\tMethod method = null;\n+\t\tMethod method;\n \t\ttry {\n \t\t\tmethod = ClassLoader.class.getDeclaredMethod(\"findLoadedClass\", String.class);\n \t\t\tReflectionUtils.makeAccessible(method);\n \t\t}\n \t\tcatch (Throwable ex) {\n \t\t\t// Typically a JDK 9+ InaccessibleObjectException...\n \t\t\t// Avoid through JVM startup with --add-opens=java.base/java.lang=ALL-UNNAMED\n+\t\t\tmethod = null;\n \t\t\tLogFactory.getLog(ContextTypeMatchClassLoader.class).debug(\n \t\t\t\t\t\"ClassLoader.findLoadedClass not accessible -> will always override requested class\", ex);\n \t\t}",
    "output": "Reset findLoadedClassMethod in case of makeAccessible failing"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -17,6 +17,7 @@\n package org.springframework.core.io.support;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.lang.module.ModuleFinder;\n@@ -786,10 +787,26 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t\t\t// Fallback via Resource.getFile() below\n \t\t\t}\n \t\t}\n+\n \t\tif (rootPath == null) {\n \t\t\t// Resource.getFile() resolution as a fallback -\n \t\t\t// for custom URI formats and custom Resource implementations\n-\t\t\trootPath = Path.of(rootDirResource.getFile().getAbsolutePath());\n+\t\t\ttry {\n+\t\t\t\trootPath = Path.of(rootDirResource.getFile().getAbsolutePath());\n+\t\t\t}\n+\t\t\tcatch (FileNotFoundException ex) {\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"Cannot search for matching files underneath \" + rootDirResource +\n+\t\t\t\t\t\t\t\" in the file system: \" + ex.getMessage());\n+\t\t\t\t}\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\tlogger.info(\"Failed to resolve \" + rootDirResource + \" in the file system: \" + ex);\n+\t\t\t\t}\n+\t\t\t\treturn result;\n+\t\t\t}\n \t\t}\n \n \t\tif (!Files.exists(rootPath)) {",
    "output": "Defensively call Resource.getFilefor fallback resolution"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n@@ -49,9 +49,6 @@\n  */\n public abstract class ObjectUtils {\n \n-\tprivate static final int INITIAL_HASH = 7;\n-\tprivate static final int MULTIPLIER = 31;\n-\n \tprivate static final String EMPTY_STRING = \"\";\n \tprivate static final String NULL_STRING = \"null\";\n \tprivate static final String ARRAY_START = \"{\";",
    "output": "Delete obsolete constants"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -49,7 +49,6 @@\n import org.springframework.web.method.HandlerMethod;\n import org.springframework.web.reactive.BindingContext;\n import org.springframework.web.reactive.HandlerResult;\n-import org.springframework.web.server.CoWebFilter;\n import org.springframework.web.server.ServerWebExchange;\n \n /**\n@@ -292,13 +291,16 @@ private boolean isResponseHandled(Object[] args, ServerWebExchange exchange) {\n \t */\n \tprivate static class KotlinDelegate {\n \n+\t\t// Copy of CoWebFilter.COROUTINE_CONTEXT_ATTRIBUTE value to avoid compilation errors in Eclipse\n+\t\tprivate static final String COROUTINE_CONTEXT_ATTRIBUTE = \"org.springframework.web.server.CoWebFilter.context\";\n+\n \t\t@Nullable\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic static Object invokeFunction(Method method, Object target, Object[] args, boolean isSuspendingFunction,\n \t\t\t\tServerWebExchange exchange) {\n \n \t\t\tif (isSuspendingFunction) {\n-\t\t\t\tObject coroutineContext = exchange.getAttribute(CoWebFilter.COROUTINE_CONTEXT_ATTRIBUTE);\n+\t\t\t\tObject coroutineContext = exchange.getAttribute(COROUTINE_CONTEXT_ATTRIBUTE);\n \t\t\t\tif (coroutineContext == null) {\n \t\t\t\t\treturn CoroutinesUtils.invokeSuspendingFunction(method, target, args);\n \t\t\t\t}",
    "output": "Remove Java code dependency on CoWebFilter To avoid compilation errors in Eclipse which does not support Java code dependency on Kotlin code"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java\n@@ -192,15 +192,15 @@ private String getExplicitBeanName(AnnotationMetadata metadata) {\n \t * @return whether the annotation qualifies as a stereotype with component name\n \t */\n \tprotected boolean isStereotypeWithNameValue(String annotationType,\n-\t\t\tSet<String> metaAnnotationTypes, @Nullable Map<String, Object> attributes) {\n+\t\t\tSet<String> metaAnnotationTypes, Map<String, Object> attributes) {\n \n \t\tboolean isStereotype = metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME) ||\n \t\t\t\tannotationType.equals(\"jakarta.annotation.ManagedBean\") ||\n \t\t\t\tannotationType.equals(\"javax.annotation.ManagedBean\") ||\n \t\t\t\tannotationType.equals(\"jakarta.inject.Named\") ||\n \t\t\t\tannotationType.equals(\"javax.inject.Named\");\n \n-\t\treturn (isStereotype && attributes != null && attributes.containsKey(\"value\"));\n+\t\treturn (isStereotype && attributes.containsKey(\"value\"));\n \t}\n \n \t/**",
    "output": "Remove @Nullable on attributes parameter in isStereotypeWithNameValue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n@@ -56,6 +56,8 @@\n  */\n public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {\n \n+\tprivate static final int DEFAULT_BUFFER_SIZE = 1024;\n+\n \tprivate final ByteArrayOutputStream cachedContent;\n \n \t@Nullable\n@@ -75,7 +77,8 @@ public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {\n \tpublic ContentCachingRequestWrapper(HttpServletRequest request) {\n \t\tsuper(request);\n \t\tint contentLength = request.getContentLength();\n-\t\tthis.cachedContent = new ByteArrayOutputStream(contentLength >= 0 ? contentLength : 1024);\n+\t\tthis.cachedContent = new ByteArrayOutputStream(contentLength >= 0 ?\n+\t\t\t\tcontentLength : DEFAULT_BUFFER_SIZE);\n \t\tthis.contentCacheLimit = null;\n \t}\n \n@@ -88,7 +91,9 @@ public ContentCachingRequestWrapper(HttpServletRequest request) {\n \t */\n \tpublic ContentCachingRequestWrapper(HttpServletRequest request, int contentCacheLimit) {\n \t\tsuper(request);\n-\t\tthis.cachedContent = new ByteArrayOutputStream(contentCacheLimit);\n+\t\tint contentLength = request.getContentLength();\n+\t\tint initialBufferSize = contentLength >= 0 ? contentLength : DEFAULT_BUFFER_SIZE;\n+\t\tthis.cachedContent = new ByteArrayOutputStream(Math.min(initialBufferSize, contentCacheLimit));\n \t\tthis.contentCacheLimit = contentCacheLimit;\n \t}\n ",
    "output": "Optimize initial buffer size in ContentCachingRequestWrapper Prior to this commit, the initial buffer size for content caching allocated in `ContentCachingRequestWrapper` would be * the request content length, if available in request headers * the cache limit size as configured on the wrapper The latter is really an upper bound and should not be considered as a good default in most cases. This commit ensures that the request content length is still used if available, but uses a default 1024 size if it's not. While this change will probably cause more reallocations as the buffer grows, this will avoid large allocations in many cases and should overall help with GC"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -491,7 +491,7 @@ private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {\n \t\tList<Method> result = null;\n \t\tfor (Class<?> ifc : clazz.getInterfaces()) {\n \t\t\tfor (Method ifcMethod : ifc.getMethods()) {\n-\t\t\t\tif (!Modifier.isAbstract(ifcMethod.getModifiers())) {\n+\t\t\t\tif (ifcMethod.isDefault()) {\n \t\t\t\t\tif (result == null) {\n \t\t\t\t\t\tresult = new ArrayList<>();\n \t\t\t\t\t}",
    "output": "Use Method#isDefault to find default methods in interfaces"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -126,7 +126,7 @@ private static class GetterPointcut extends StaticMethodMatcherPointcut implemen\n \t\t@Override\n \t\tpublic boolean matches(Method method, Class<?> targetClass) {\n \t\t\treturn (method.getName().startsWith(\"get\") &&\n-\t\t\t\t\tmethod.getParameterCount() == 0 && \n+\t\t\t\t\tmethod.getParameterCount() == 0 &&\n \t\t\t\t\tmethod.getReturnType() != Void.TYPE);\n \t\t}\n ",
    "output": "Add return type check on GetterPointcut"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/Pointcuts.java\n@@ -126,7 +126,8 @@ private static class GetterPointcut extends StaticMethodMatcherPointcut implemen\n \t\t@Override\n \t\tpublic boolean matches(Method method, Class<?> targetClass) {\n \t\t\treturn (method.getName().startsWith(\"get\") &&\n-\t\t\t\t\tmethod.getParameterCount() == 0);\n+\t\t\t\t\tmethod.getParameterCount() == 0 && \n+\t\t\t\t\tmethod.getReturnType() != Void.TYPE);\n \t\t}\n \n \t\tprivate Object readResolve() {",
    "output": "Add return type check on GetterPointcut"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java\n@@ -258,7 +258,7 @@ public String schemaNameToUse(@Nullable String schemaName) {\n \t\treturn identifierNameToUse(schemaName);\n \t}\n \n-\tprivate String identifierNameToUse(String identifierName) {\n+\tprivate String identifierNameToUse(@Nullable String identifierName) {\n \t\tif (identifierName == null) {\n \t\t\treturn null;\n \t\t}",
    "output": "Add missing @Nullable declaration"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationBeanRegistrationAotProcessor.java b/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationBeanRegistrationAotProcessor.java\n--- a/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationBeanRegistrationAotProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationBeanRegistrationAotProcessor.java\n@@ -105,8 +105,12 @@ public static BeanRegistrationAotContribution processAheadOfTime(RegisteredBean\n \t\t\t\t\tlogger.warn(\"Skipping validation constraint hint inference for bean \" + registeredBean.getBeanName() +\n \t\t\t\t\t\t\t\" due to an ArrayIndexOutOfBoundsException at validator level\");\n \t\t\t\t}\n+\t\t\t\telse if (ex instanceof TypeNotPresentException) {\n+\t\t\t\t\tlogger.debug(\"Skipping validation constraint hint inference for bean \" +\n+\t\t\t\t\t\t\tregisteredBean.getBeanName() + \" due to a TypeNotPresentException at validator level: \" + ex.getMessage());\n+\t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tlogger.error(\"Skipping validation constraint hint inference for bean \" +\n+\t\t\t\t\tlogger.warn(\"Skipping validation constraint hint inference for bean \" +\n \t\t\t\t\t\t\tregisteredBean.getBeanName(), ex);\n \t\t\t\t}\n \t\t\t\treturn null;",
    "output": "Refine BeanValidationBeanRegistrationAotProcessor logging This commit prints a log message at debug level without a stacktrace for TypeNotPresentException and uses warn level instead of error level for other exceptions since the processing of such bean will just be skipped"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n@@ -19,6 +19,7 @@\n import org.gradle.api.Plugin;\n import org.gradle.api.Project;\n import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n import org.gradle.api.plugins.JavaPlugin;\n import org.gradle.api.plugins.JavaPluginExtension;\n import org.gradle.api.tasks.SourceSetContainer;\n@@ -40,10 +41,10 @@ public class OptionalDependenciesPlugin implements Plugin<Project> {\n \n \t@Override\n \tpublic void apply(Project project) {\n-\t\tConfiguration optional = project.getConfigurations().create(\"optional\");\n+\t\tConfiguration optional = project.getConfigurations().create(OPTIONAL_CONFIGURATION_NAME);\n \t\toptional.setCanBeConsumed(false);\n \t\toptional.setCanBeResolved(false);\n-\t\tproject.getPlugins().withType(JavaPlugin.class, (javaPlugin) -> {\n+\t\tproject.getPlugins().withType(JavaBasePlugin.class, (javaBasePlugin) -> {\n \t\t\tSourceSetContainer sourceSets = project.getExtensions().getByType(JavaPluginExtension.class)\n \t\t\t\t\t.getSourceSets();\n \t\t\tsourceSets.all((sourceSet) -> {",
    "output": "Polish Aggregate Javadoc task"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -134,9 +134,9 @@ public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewC\n \n \t\tparameter = parameter.nestedIfOptional();\n \t\tObject arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());\n-\t\tString name = Conventions.getVariableNameForParameter(parameter);\n \n \t\tif (binderFactory != null) {\n+\t\t\tString name = Conventions.getVariableNameForParameter(parameter);\n \t\t\tWebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);\n \t\t\tif (arg != null) {\n \t\t\t\tvalidateIfApplicable(binder, parameter);",
    "output": "Polish resolveArgument method in RequestResponseBodyMethodProcessor"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n@@ -372,6 +372,7 @@ private static class KotlinDelegate {\n \n \t\tpublic static Publisher<?> invokeSuspendingFunction(Method method, Object target, Object... args) {\n \t\t\tContinuation<?> continuation = (Continuation<?>) args[args.length -1];\n+\t\t\tAssert.state(continuation != null, \"No Continuation available\");\n \t\t\tCoroutineContext context = continuation.getContext().minusKey(Job.Key);\n \t\t\treturn CoroutinesUtils.invokeSuspendingFunction(context, method, target, args);\n \t\t}",
    "output": "Add an assertion to AopUtils.KotlinDelegate#invokeSuspendingFunction"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertIntegrationTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertIntegrationTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertIntegrationTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertIntegrationTests.java\n@@ -55,6 +55,20 @@ void retrieveColumnNamesFromMetadata() throws Exception {\n \t\t\tinsertJaneSmith(insert);\n \t\t}\n \n+\t\t@Test  //  gh-24013\n+\t\tvoid retrieveColumnNamesFromMetadataAndUsingQuotedIdentifiers() throws Exception {\n+\t\t\tSimpleJdbcInsert insert = new SimpleJdbcInsert(embeddedDatabase)\n+\t\t\t\t\t.withTableName(\"users\")\n+\t\t\t\t\t.usingGeneratedKeyColumns(\"id\")\n+\t\t\t\t\t.usingQuotedIdentifiers();\n+\n+\t\t\tinsert.compile();\n+\t\t\t// NOTE: quoted identifiers in H2/HSQL will be UPPERCASE!\n+\t\t\tassertThat(insert.getInsertString()).isEqualTo(\"INSERT INTO \\\"USERS\\\" (\\\"FIRST_NAME\\\", \\\"LAST_NAME\\\") VALUES(?, ?)\");\n+\n+\t\t\tinsertJaneSmith(insert);\n+\t\t}\n+\n \t\t@Test\n \t\tvoid usingColumns() {\n \t\t\tSimpleJdbcInsert insert = new SimpleJdbcInsert(embeddedDatabase)",
    "output": "Test another scenario"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -506,11 +506,12 @@ public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFact\n \t\t\t\t\tthrow new BeanDefinitionStoreException(\"Cannot enhance @Configuration bean definition '\" +\n \t\t\t\t\t\t\tbeanName + \"' since it is not stored in an AbstractBeanDefinition subclass\");\n \t\t\t\t}\n-\t\t\t\telse if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {\n-\t\t\t\t\tlogger.info(\"Cannot enhance @Configuration bean definition '\" + beanName +\n+\t\t\t\telse if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {\n+\t\t\t\t\tlogger.warn(\"Cannot enhance @Configuration bean definition '\" + beanName +\n \t\t\t\t\t\t\t\"' since its singleton instance has been created too early. The typical cause \" +\n \t\t\t\t\t\t\t\"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor \" +\n-\t\t\t\t\t\t\t\"return type: Consider declaring such methods as 'static'.\");\n+\t\t\t\t\t\t\t\"return type: Consider declaring such methods as 'static' and/or mark the \" +\n+\t\t\t\t\t\t\t\"containing configuration class as 'proxyBeanMethods=false'.\");\n \t\t\t\t}\n \t\t\t\tconfigBeanDefs.put(beanName, abd);\n \t\t\t}",
    "output": "Raise log level to warn when enhancement cannot apply"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n--- a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n+++ b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n@@ -38,7 +38,7 @@ class PreComputeFieldFeature implements Feature {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.aot.AotDetector#inNativeImage\")),\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*Present\"),\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*PRESENT\"),\n-\t\t\tPattern.compile(Pattern.quote(\"reactor.\") + \".*#.*Available\"),\n+\t\t\tPattern.compile(Pattern.quote(\"reactor.core.\") + \".*#.*Available\"),\n \t\t\tPattern.compile(Pattern.quote(\"org.apache.commons.logging.LogAdapter\") + \"#.*Present\")\n \t};\n ",
    "output": "Refine Reactor field precomputing on native This commit refines Reactor field precomputing on native to only compute at build-time fields in the reactor.core package, since doing so in reactor.netty has unwanted side effects like Epoll always disabled"
  },
  {
    "input": "diff --git a/spring-context-indexer/src/main/java/org/springframework/context/index/processor/StandardStereotypesProvider.java b/spring-context-indexer/src/main/java/org/springframework/context/index/processor/StandardStereotypesProvider.java\n--- a/spring-context-indexer/src/main/java/org/springframework/context/index/processor/StandardStereotypesProvider.java\n+++ b/spring-context-indexer/src/main/java/org/springframework/context/index/processor/StandardStereotypesProvider.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,7 +25,8 @@\n \n /**\n  * A {@link StereotypesProvider} that extracts a stereotype for each\n- * {@code jakarta.*} annotation <i>present</i> on a class or interface.\n+ * {@code jakarta.*} or {@code javax.*} annotation <i>present</i> on a class or\n+ * interface.\n  *\n  * @author Stephane Nicoll\n  * @since 5.0\n@@ -49,7 +50,7 @@ public Set<String> getStereotypes(Element element) {\n \t\t}\n \t\tfor (AnnotationMirror annotation : this.typeHelper.getAllAnnotationMirrors(element)) {\n \t\t\tString type = this.typeHelper.getType(annotation);\n-\t\t\tif (type.startsWith(\"jakarta.\")) {\n+\t\t\tif (type.startsWith(\"jakarta.\") || type.startsWith(\"javax.\")) {\n \t\t\t\tstereotypes.add(type);\n \t\t\t}\n \t\t}",
    "output": "Reinstate support for javax.* annotations in component indexer - for consistency with the changes made in e1826d2322"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.3\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.12.3"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n@@ -86,7 +86,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n \n /**\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverterTests.java\n@@ -44,7 +44,6 @@\n \n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.http.MediaType;\n-import org.springframework.http.converter.HttpMessageConversionException;\n import org.springframework.http.converter.HttpMessageNotReadableException;\n import org.springframework.lang.Nullable;\n import org.springframework.web.testfixture.http.MockHttpInputMessage;",
    "output": "Fix formatting errors"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,7 +58,7 @@ final class AnnotationTypeMapping {\n \t/**\n \t * Set used to track which convention-based annotation attribute overrides\n \t * have already been checked. Each key is the combination of the fully\n-\t * qualified class names of a composed annotation and a meta-annotation\n+\t * qualified class name of a composed annotation and a meta-annotation\n \t * that it is either present or meta-present on the composed annotation,\n \t * separated by a dash.\n \t * @since 6.0\n@@ -319,7 +319,7 @@ private void addConventionMappings() {\n \t\t\t\tlogger.isWarnEnabled()) {\n \t\t\tlogger.warn(\"\"\"\n \t\t\t\t\tSupport for convention-based annotation attribute overrides is deprecated \\\n-\t\t\t\t\tand will be removed in Spring Framework 6.1. Please annotate the following \\\n+\t\t\t\t\tand will be removed in Spring Framework 6.2. Please annotate the following \\\n \t\t\t\t\tattributes in @%s with appropriate @AliasFor declarations: %s\"\"\"\n \t\t\t\t\t\t.formatted(rootAnnotationTypeName, conventionMappedAttributes));\n \t\t}",
    "output": "Upgrade warning for use of convention-based annotation attribute overrides"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java\n@@ -23,7 +23,6 @@\n \n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n-import org.springframework.util.StringUtils;\n \n /**\n  * A simple key as returned from the {@link SimpleKeyGenerator}.\n@@ -73,7 +72,7 @@ public final int hashCode() {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn getClass().getSimpleName() + \" [\" + StringUtils.arrayToCommaDelimitedString(this.params) + \"]\";\n+\t\treturn getClass().getSimpleName() + \" \" + Arrays.deepToString(this.params);\n \t}\n \n \tprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {",
    "output": "Use Arrays.deepToString for toString in SimpleKey"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n@@ -1036,10 +1036,13 @@ public int[] batchUpdate(String sql, final BatchPreparedStatementSetter pss) thr\n \t\tif (logger.isDebugEnabled()) {\n \t\t\tlogger.debug(\"Executing SQL batch update [\" + sql + \"]\");\n \t\t}\n+\t\tint batchSize = pss.getBatchSize();\n+\t\tif (batchSize == 0) {\n+\t\t\treturn new int[0];\n+\t\t}\n \n \t\tint[] result = execute(sql, (PreparedStatementCallback<int[]>) ps -> {\n \t\t\ttry {\n-\t\t\t\tint batchSize = pss.getBatchSize();\n \t\t\t\tInterruptibleBatchPreparedStatementSetter ipss =\n \t\t\t\t\t\t(pss instanceof InterruptibleBatchPreparedStatementSetter ibpss ? ibpss : null);\n \t\t\t\tif (JdbcUtils.supportsBatchUpdates(ps.getConnection())) {\n@@ -1050,7 +1053,7 @@ public int[] batchUpdate(String sql, final BatchPreparedStatementSetter pss) thr\n \t\t\t\t\t\t}\n \t\t\t\t\t\tps.addBatch();\n \t\t\t\t\t}\n-\t\t\t\t\treturn batchSize > 0 ? ps.executeBatch() : new int[] {};\n+\t\t\t\t\treturn ps.executeBatch();\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tList<Integer> rowsAffected = new ArrayList<>();",
    "output": "Avoid calling executeBatchwith an empty batch"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,7 +16,6 @@\n \n package org.springframework.test.context.junit4;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n@@ -92,8 +91,7 @@ public FailingBeforeAndAfterMethodsTestNGTests(String testClassName, int expecte\n \n \n \t@Test\n-\t@Ignore(\"Fails against TestNG 6.11\")\n-\tpublic void runTestAndAssertCounters() throws Exception {\n+\tpublic void runTestAndAssertCounters() {\n \t\tTrackingTestNGTestListener listener = new TrackingTestNGTestListener();\n \t\tTestNG testNG = new TestNG();\n \t\ttestNG.addListener(listener);",
    "output": "Reinstate FailingBeforeAndAfterMethodsTestNGTests The tests were ignored due to \"Fails against TestNG 6.11\"; however, these tests pass against the current version of TestNG that we build against (7.8.0)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -170,14 +170,16 @@ public String getProperty(String key) {\n \t\t\t}\n \t\t}\n \n-\t\tprocessProperties(beanFactory, getPropertyResolver(this.propertySources));\n+\t\tprocessProperties(beanFactory, createPropertyResolver(this.propertySources));\n \t\tthis.appliedPropertySources = this.propertySources;\n \t}\n \n \t/**\n-\t * Construct and provide a PropertyResolver from the given properties.\n+\t * Create a {@link ConfigurablePropertyResolver} for the specified property sources.\n+\t * @param propertySources the property sources to use\n+\t * @since 6.0.12\n \t */\n-\tpublic ConfigurablePropertyResolver getPropertyResolver(MutablePropertySources propertySources){\n+\tprotected ConfigurablePropertyResolver createPropertyResolver(MutablePropertySources propertySources){\n \t\treturn new PropertySourcesPropertyResolver(propertySources);\n \t}\n ",
    "output": "Restore customization of PropertyResolver"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -170,10 +170,17 @@ public String getProperty(String key) {\n \t\t\t}\n \t\t}\n \n-\t\tprocessProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));\n+\t\tprocessProperties(beanFactory, getPropertyResolver(this.propertySources));\n \t\tthis.appliedPropertySources = this.propertySources;\n \t}\n \n+\t/**\n+\t * Construct and provide a PropertyResolver from the given properties.\n+\t */\n+\tpublic ConfigurablePropertyResolver getPropertyResolver(MutablePropertySources propertySources){\n+\t\treturn new PropertySourcesPropertyResolver(propertySources);\n+\t}\n+\n \t/**\n \t * Visit each bean definition in the given bean factory and attempt to replace ${...} property\n \t * placeholders with values from the given properties.",
    "output": "Restore customization of PropertyResolver This commit reintroduces the ability to customize the PropertyResolver to use in PropertySourcesPropertyResolver"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java\n@@ -297,6 +297,9 @@ public static List<TransactionSynchronization> getSynchronizations() throws Ille\n \t\tif (synchs.isEmpty()) {\n \t\t\treturn Collections.emptyList();\n \t\t}\n+\t\telse if (synchs.size() == 1) {\n+\t\t\treturn Collections.singletonList(synchs.iterator().next());\n+\t\t}\n \t\telse {\n \t\t\t// Sort lazily here, not in registerSynchronization.\n \t\t\tList<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs);",
    "output": "Optimize for single TransactionSynchronization Optimize TransactionSynchronizationManager.getSynchronizationsto avoid sorting and ArrayList creation in case of a single TransactionSynchronization"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -754,6 +754,7 @@ protected JarFile getJarFile(String jarFileUrl) throws IOException {\n \tprotected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)\n \t\t\tthrows IOException {\n \n+\t\tSet<Resource> result = new LinkedHashSet<>();\n \t\tURI rootDirUri;\n \t\ttry {\n \t\t\trootDirUri = rootDirResource.getURI();\n@@ -762,7 +763,7 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t\tif (logger.isWarnEnabled()) {\n \t\t\t\tlogger.warn(\"Failed to resolve directory [%s] as URI: %s\".formatted(rootDirResource, ex));\n \t\t\t}\n-\t\t\treturn Collections.emptySet();\n+\t\t\treturn result;\n \t\t}\n \n \t\tPath rootPath = null;\n@@ -806,7 +807,6 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t\t\t\t.formatted(rootPath.toAbsolutePath(), subPattern));\n \t\t}\n \n-\t\tSet<Resource> result = new LinkedHashSet<>();\n \t\ttry (Stream<Path> files = Files.walk(rootPath)) {\n \t\t\tfiles.filter(isMatchingFile).sorted().map(FileSystemResource::new).forEach(result::add);\n \t\t}",
    "output": "Ensure doFindPathMatchingFileResourcesreturns a mutable Set This commit ensures that PathMatchingResourcePatternResolver's doFindPathMatchingFileResourcesmethod returns a mutable Set in order to comply with the documented contract"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/StringToRegexConverter.java b/spring-core/src/main/java/org/springframework/core/convert/support/StringToRegexConverter.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/StringToRegexConverter.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToRegexConverter.java\n@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.convert.support;\n+\n+import kotlin.text.Regex;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Converts from a String to a {@link Regex}.\n+ *\n+ * @author Stephane Nicoll\n+ * @author Sebastien Deleuze\n+ */\n+class StringToRegexConverter implements Converter<String, Regex> {\n+\n+\t@Override\n+\tpublic Regex convert(String source) {\n+\t\tif (source.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn new Regex(source);\n+\t}\n+\n+}",
    "output": "Implement StringToRegexConverter in Java This commit implements StringToRegexConverter in Java in order to avoid circular dependencies between Java and Kotlin codes that can break IDE support, and for consistency with the rest of the codebase"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/SmartValidator.java b/spring-context/src/main/java/org/springframework/validation/SmartValidator.java\n--- a/spring-context/src/main/java/org/springframework/validation/SmartValidator.java\n+++ b/spring-context/src/main/java/org/springframework/validation/SmartValidator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,4 +64,19 @@ default void validateValue(\n \t\tthrow new IllegalArgumentException(\"Cannot validate individual value for \" + targetType);\n \t}\n \n+\t/**\n+\t * Return a contained validator instance of the specified type, unwrapping\n+\t * as far as necessary.\n+\t * @param type the class of the object to return\n+\t * @param <T> the type of the object to return\n+\t * @return a validator instance of the specified type; {@code null} if there\n+\t * isn't a nested validator; an exception may be raised if the specified\n+\t * validator type does not match.\n+\t * @since 6.1\n+\t */\n+\t@Nullable\n+\tdefault <T> T unwrap(@Nullable Class<T> type) {\n+\t\treturn null;\n+\t}\n+\n }",
    "output": "Expose unwrap method on SmartValidator"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -108,6 +108,9 @@ public DefaultLifecycleProcessor() {\n \t\tif (!NativeDetector.inNativeImage() && ClassUtils.isPresent(\"org.crac.Core\", getClass().getClassLoader())) {\n \t\t\tthis.cracResource = new CracDelegate().registerResource();\n \t\t}\n+\t\telse if (checkpointOnRefresh) {\n+\t\t\tthrow new IllegalStateException(\"Checkpoint on refresh requires a CRaC-enabled JVM and 'org.crac:crac' on the classpath\");\n+\t\t}\n \t}\n \n ",
    "output": "Refine \"checkpoint on refresh\" error handling"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingRequestWrapper.java\n@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.Iterator;\n@@ -196,6 +197,14 @@ public byte[] getContentAsByteArray() {\n \t\treturn this.cachedContent.toByteArray();\n \t}\n \n+\t/**\n+\t * Return the cached request content as a String. The Charset used to decode\n+\t * the cached content is the same as returned by getCharacterEncoding.\n+\t */\n+\tpublic String getContentAsString() {\n+\t\treturn this.cachedContent.toString(Charset.forName(getCharacterEncoding()));\n+\t}\n+\n \t/**\n \t * Template method for handling a content overflow: specifically, a request\n \t * body being read that exceeds the specified content cache limit.",
    "output": "Get content as String for ContentCachingRequestWrapper This commits adds a getContentAsString method to ContentCachingRequestWrapper that uses the configured charset without copying the underlying byte array"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java b/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/reactive/ReactiveTestTransactionManager.java\n@@ -89,7 +89,7 @@ protected Mono<Void> doCommit(TransactionSynchronizationManager synchronizationM\n \t\treturn Mono.fromRunnable(() -> {\n \t\t\tthis.commit = true;\n \t\t\tif (this.forceFailOnCommit) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Forced failure on commit\");\n+\t\t\t\tthrow new IllegalStateException(\"Forced failure on commit\");\n \t\t\t}\n \t\t});\n \t}",
    "output": "Use IllegalStateException in ReactiveTestTransactionManager.doCommit"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -31,6 +31,7 @@\n \n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.Base64Utils;\n import org.springframework.util.ResourceUtils;\n import org.springframework.util.StringUtils;\n \n@@ -41,6 +42,7 @@\n  *\n  * @author Juergen Hoeller\n  * @author Sam Brannen\n+ * @author Denis Kostin\n  * @since 28.12.2003\n  * @see java.net.URL\n  */\n@@ -225,6 +227,11 @@ private String getCleanedUrl() {\n \tpublic InputStream getInputStream() throws IOException {\n \t\tURLConnection con = this.url.openConnection();\n \t\tcustomizeConnection(con);\n+\n+\t\tif (this.url.getUserInfo() != null) {\n+\t\t\tString basicAuth = \"Basic \" + Base64Utils.encodeToString(url.getUserInfo().getBytes());\n+\t\t\tcon.setRequestProperty(\"Authorization\", basicAuth);\n+\t\t}\n \t\ttry {\n \t\t\treturn con.getInputStream();\n \t\t}",
    "output": "Add Basic Authorization for UrlResource"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/AnnotationMetadata.java b/spring-core/src/main/java/org/springframework/core/type/AnnotationMetadata.java\n--- a/spring-core/src/main/java/org/springframework/core/type/AnnotationMetadata.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/AnnotationMetadata.java\n@@ -23,7 +23,6 @@\n \n import org.springframework.core.annotation.MergedAnnotation;\n import org.springframework.core.annotation.MergedAnnotations;\n-import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\n \n /**\n  * Interface that defines abstract access to the annotations of a specific\n@@ -64,7 +63,7 @@ default Set<String> getMetaAnnotationTypes(String annotationName) {\n \t\tif (!annotation.isPresent()) {\n \t\t\treturn Collections.emptySet();\n \t\t}\n-\t\treturn MergedAnnotations.from(annotation.getType(), SearchStrategy.INHERITED_ANNOTATIONS).stream()\n+\t\treturn MergedAnnotations.from(annotation.getType()).stream()\n \t\t\t\t.map(mergedAnnotation -> mergedAnnotation.getType().getName())\n \t\t\t\t.collect(Collectors.toCollection(LinkedHashSet::new));\n \t}",
    "output": "Simplify implementation of AnnotationMetadata.getMetaAnnotationTypesSince an annotation cannot be extended in Java, there is no need to use the INHERITED_ANNOTATIONS SearchStrategy to search for meta-annotations on an annotation"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentPreparedStatementSetter.java\n@@ -62,7 +62,9 @@ public void setValues(PreparedStatement ps) throws SQLException {\n \t * @param argValue the value to set\n \t * @throws SQLException if thrown by PreparedStatement methods\n \t */\n-\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException {\n+\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, @Nullable Object argValue)\n+\t\t\tthrows SQLException {\n+\n \t\tif (argValue instanceof SqlParameterValue paramValue) {\n \t\t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue());\n \t\t}\n\ndiff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ArgumentTypePreparedStatementSetter.java\n@@ -94,7 +94,7 @@ public void setValues(PreparedStatement ps) throws SQLException {\n \t * @param argValue the argument value\n \t * @throws SQLException if thrown by PreparedStatement methods\n \t */\n-\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)\n+\tprotected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, @Nullable Object argValue)\n \t\t\tthrows SQLException {\n \n \t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue);",
    "output": "Add @Nullable in doSetValuein Argument[Type]PreparedStatementSetter This commit adds @Nullable to the argValue parameters in the doSetValuemethods in ArgumentPreparedStatementSetter and ArgumentTypePreparedStatementSetter"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n@@ -39,6 +39,8 @@ class EntityManagerRuntimeHints implements RuntimeHintsRegistrar {\n \n \tprivate static final String QUERY_SQM_IMPL_CLASS_NAME = \"org.hibernate.query.sqm.internal.QuerySqmImpl\";\n \n+\tprivate static final String NATIVE_QUERY_IMPL_CLASS_NAME = \"org.hibernate.query.sql.internal.NativeQueryImpl\";\n+\n \t@Override\n \tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\tif (ClassUtils.isPresent(HIBERNATE_SESSION_FACTORY_CLASS_NAME, classLoader)) {\n@@ -61,5 +63,11 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\t}\n \t\tcatch (ClassNotFoundException ignored) {\n \t\t}\n+\t\ttry {\n+\t\t\tClass<?> clazz = ClassUtils.forName(NATIVE_QUERY_IMPL_CLASS_NAME, classLoader);\n+\t\t\thints.proxies().registerJdkProxy(ClassUtils.getAllInterfacesForClass(clazz, classLoader));\n+\t\t}\n+\t\tcatch (ClassNotFoundException ignored) {\n+\t\t}\n \t}\n }",
    "output": "Add missing proxy hints for Hibernate native query This commit contributes proxy hints needed by SharedEntityManagerCreator for org.hibernate.query.sql.internal.NativeQueryImpl interfaces. A related smoke test has been contributed via spring-projects/spring-aot-smoke-tests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n@@ -79,6 +79,9 @@ public abstract class TestPropertySourceUtils {\n \n \tprivate static final PropertySourceFactory defaultPropertySourceFactory = new DefaultPropertySourceFactory();\n \n+\tprivate static Comparator<MergedAnnotation<? extends Annotation>> reversedMetaDistance =\n+\t\t\tComparator.<MergedAnnotation<? extends Annotation>> comparingInt(MergedAnnotation::getDistance).reversed();\n+\n \tprivate static final Log logger = LogFactory.getLog(TestPropertySourceUtils.class);\n \n \n@@ -426,7 +429,7 @@ private static <T extends Annotation> void findRepeatableAnnotations(\n \n \t\tMergedAnnotations.from(clazz, SearchStrategy.DIRECT)\n \t\t\t.stream(annotationType)\n-\t\t\t.sorted(highMetaDistancesFirst())\n+\t\t\t.sorted(reversedMetaDistance)\n \t\t\t.forEach(annotation -> listOfLists.get(aggregateIndex[0]).add(0, annotation));\n \n \t\taggregateIndex[0]++;\n@@ -448,10 +451,6 @@ private static <T extends Annotation> void findRepeatableAnnotations(\n \t\t}\n \t}\n \n-\tprivate static <A extends Annotation> Comparator<MergedAnnotation<A>> highMetaDistancesFirst() {\n-\t\treturn Comparator.<MergedAnnotation<A>> comparingInt(MergedAnnotation::getDistance).reversed();\n-\t}\n-\n \t/**\n \t * Extension of {@link Properties} that mimics a {@code SequencedMap} by\n \t * tracking all added properties in the supplied {@link LinkedHashMap}.",
    "output": "Store reversedMetaDistance Comparator in static field"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerRuntimeHints.java\n@@ -37,6 +37,8 @@ class EntityManagerRuntimeHints implements RuntimeHintsRegistrar {\n \n \tprivate static final String ENTITY_MANAGER_FACTORY_CLASS_NAME = \"jakarta.persistence.EntityManagerFactory\";\n \n+\tprivate static final String QUERY_SQM_IMPL_CLASS_NAME = \"org.hibernate.query.sqm.internal.QuerySqmImpl\";\n+\n \t@Override\n \tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\tif (ClassUtils.isPresent(HIBERNATE_SESSION_FACTORY_CLASS_NAME, classLoader)) {\n@@ -53,5 +55,11 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \t\t\t\t\t\tCollections.emptyList(), ExecutableMode.INVOKE);\n \t\t\t});\n \t\t}\n+\t\ttry {\n+\t\t\tClass<?> clazz = ClassUtils.forName(QUERY_SQM_IMPL_CLASS_NAME, classLoader);\n+\t\t\thints.proxies().registerJdkProxy(ClassUtils.getAllInterfacesForClass(clazz, classLoader));\n+\t\t}\n+\t\tcatch (ClassNotFoundException ignored) {\n+\t\t}\n \t}\n }",
    "output": "Add missing Hibernate 6.2 proxy hints This commit contributes proxy hints needed by SharedEntityManagerCreator for org.hibernate.query.sqm.internal.QuerySqmImpl interfaces. Until Hibernate 6.1, those hints were erroneously provided at GraalVM reachability metadata level. As of Hibernate 6.2, they are not, hence the need to contribute them at Spring Framework level. A related smoke test has been contributed via spring-projects/spring-aot-smoke-tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleAnnotationMetadata.java b/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleAnnotationMetadata.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleAnnotationMetadata.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleAnnotationMetadata.java\n@@ -56,15 +56,15 @@ final class SimpleAnnotationMetadata implements AnnotationMetadata {\n \n \tprivate final Set<MethodMetadata> declaredMethods;\n \n-\tprivate final MergedAnnotations annotations;\n+\tprivate final MergedAnnotations mergedAnnotations;\n \n \t@Nullable\n \tprivate Set<String> annotationTypes;\n \n \n \tSimpleAnnotationMetadata(String className, int access, @Nullable String enclosingClassName,\n \t\t\t@Nullable String superClassName, boolean independentInnerClass, Set<String> interfaceNames,\n-\t\t\tSet<String> memberClassNames, Set<MethodMetadata> declaredMethods, MergedAnnotations annotations) {\n+\t\t\tSet<String> memberClassNames, Set<MethodMetadata> declaredMethods, MergedAnnotations mergedAnnotations) {\n \n \t\tthis.className = className;\n \t\tthis.access = access;\n@@ -74,7 +74,7 @@ final class SimpleAnnotationMetadata implements AnnotationMetadata {\n \t\tthis.interfaceNames = interfaceNames;\n \t\tthis.memberClassNames = memberClassNames;\n \t\tthis.declaredMethods = declaredMethods;\n-\t\tthis.annotations = annotations;\n+\t\tthis.mergedAnnotations = mergedAnnotations;\n \t}\n \n \t@Override\n@@ -131,7 +131,7 @@ public String[] getMemberClassNames() {\n \n \t@Override\n \tpublic MergedAnnotations getAnnotations() {\n-\t\treturn this.annotations;\n+\t\treturn this.mergedAnnotations;\n \t}\n \n \t@Override",
    "output": "Polishing ... for consistency with StandardAnnotationMetadata"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java\n@@ -48,10 +48,10 @@\n public class TransactionalApplicationListenerMethodAdapter extends ApplicationListenerMethodAdapter\n \t\timplements TransactionalApplicationListener<ApplicationEvent> {\n \n-\tprivate final TransactionalEventListener annotation;\n-\n \tprivate final TransactionPhase transactionPhase;\n \n+\tprivate final boolean fallbackExecution;\n+\n \tprivate final List<SynchronizationCallback> callbacks = new CopyOnWriteArrayList<>();\n \n \n@@ -68,8 +68,8 @@ public TransactionalApplicationListenerMethodAdapter(String beanName, Class<?> t\n \t\tif (eventAnn == null) {\n \t\t\tthrow new IllegalStateException(\"No TransactionalEventListener annotation found on method: \" + method);\n \t\t}\n-\t\tthis.annotation = eventAnn;\n \t\tthis.transactionPhase = eventAnn.phase();\n+\t\tthis.fallbackExecution = eventAnn.fallbackExecution();\n \t}\n \n \n@@ -92,8 +92,8 @@ public void onApplicationEvent(ApplicationEvent event) {\n \t\t\tTransactionSynchronizationManager.registerSynchronization(\n \t\t\t\t\tnew TransactionalApplicationListenerSynchronization<>(event, this, this.callbacks));\n \t\t}\n-\t\telse if (this.annotation.fallbackExecution()) {\n-\t\t\tif (this.annotation.phase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {\n+\t\telse if (this.fallbackExecution) {\n+\t\t\tif (getTransactionPhase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {\n \t\t\t\tlogger.warn(\"Processing \" + event + \" as a fallback execution on AFTER_ROLLBACK phase\");\n \t\t\t}\n \t\t\tprocessEvent(event);",
    "output": "Use extracted attributes instead of annotation access"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java\n@@ -245,8 +245,10 @@ public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment envir\n \t * descriptors and registering property sources\n \t * @since 6.1\n \t * @see TestPropertySource#locations\n+\t * @see TestPropertySource#encoding\n \t * @see TestPropertySource#factory\n \t * @see PropertySourceFactory\n+\t * @see #addPropertySourcesToEnvironment(ConfigurableEnvironment, ResourceLoader, List)\n \t */\n \tpublic static void addPropertySourcesToEnvironment(ConfigurableApplicationContext context,\n \t\t\tList<PropertySourceDescriptor> descriptors) {\n@@ -276,10 +278,11 @@ public static void addPropertySourcesToEnvironment(ConfigurableApplicationContex\n \t * descriptors and registering property sources\n \t * @since 6.1\n \t * @see TestPropertySource#locations\n+\t * @see TestPropertySource#encoding\n \t * @see TestPropertySource#factory\n \t * @see PropertySourceFactory\n \t */\n-\tprivate static void addPropertySourcesToEnvironment(ConfigurableEnvironment environment,\n+\tpublic static void addPropertySourcesToEnvironment(ConfigurableEnvironment environment,\n \t\t\tResourceLoader resourceLoader, List<PropertySourceDescriptor> descriptors) {\n \n \t\tAssert.notNull(environment, \"'environment' must not be null\");",
    "output": "Make addPropertySourcesToEnvironmentpublic This commit makes the recently introduced addPropertySourcesToEnvironment(ConfigurableEnvironment, ResourceLoader, List<PropertySourceDescriptor>) method in TestPropertySourceUtils public so that it can be used by third parties (for example, Spring Boot)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java b/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n@@ -115,8 +115,8 @@ public boolean requiresDestruction(Object bean) {\n \t@Override\n \tpublic boolean equals(@Nullable Object other) {\n \t\treturn (this == other ||\n-\t\t\t\t(other instanceof ApplicationListenerDetector applicationListenerDectector &&\n-\t\t\t\tthis.applicationContext == applicationListenerDectector.applicationContext));\n+\t\t\t\t(other instanceof ApplicationListenerDetector applicationListenerDetector &&\n+\t\t\t\tthis.applicationContext == applicationListenerDetector.applicationContext));\n \t}\n \n \t@Override",
    "output": "Fix misspelling of applicationListenerDectector variable"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/StandardBeanInfoFactory.java b/spring-beans/src/main/java/org/springframework/beans/StandardBeanInfoFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/StandardBeanInfoFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/StandardBeanInfoFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -68,9 +68,21 @@ public class StandardBeanInfoFactory implements BeanInfoFactory, Ordered {\n \t@Override\n \t@NonNull\n \tpublic BeanInfo getBeanInfo(Class<?> beanClass) throws IntrospectionException {\n-\t\treturn (shouldIntrospectorIgnoreBeaninfoClasses ?\n+\t\tBeanInfo beanInfo = (shouldIntrospectorIgnoreBeaninfoClasses ?\n \t\t\t\tIntrospector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO) :\n \t\t\t\tIntrospector.getBeanInfo(beanClass));\n+\n+\t\t// Immediately remove class from Introspector cache to allow for proper garbage\n+\t\t// collection on class loader shutdown; we cache it in CachedIntrospectionResults\n+\t\t// in a GC-friendly manner. This is necessary (again) for the JDK ClassInfo cache.\n+\t\tClass<?> classToFlush = beanClass;\n+\t\tdo {\n+\t\t\tIntrospector.flushFromCaches(classToFlush);\n+\t\t\tclassToFlush = classToFlush.getSuperclass();\n+\t\t}\n+\t\twhile (classToFlush != null && classToFlush != Object.class);\n+\n+\t\treturn beanInfo;\n \t}\n \n \t@Override",
    "output": "Reinstate Introspector.flushFromCachescall for JDK ClassInfo cache"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1472,7 +1472,7 @@ else if (type.isArray()) {\n \t\t\t}\n \t\t\tTypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());\n \t\t\tObject result = converter.convertIfNecessary(matchingBeans.values(), resolvedArrayType);\n-\t\t\tif (result instanceof Object[] array) {\n+\t\t\tif (result instanceof Object[] array && array.length > 1) {\n \t\t\t\tComparator<Object> comparator = adaptDependencyComparator(matchingBeans);\n \t\t\t\tif (comparator != null) {\n \t\t\t\t\tArrays.sort(array, comparator);",
    "output": "Skip array sort when the length of array not greater than 1"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n@@ -73,13 +73,17 @@ protected Class<?> getTypeForFactoryBean(FactoryBean<?> factoryBean) {\n \t */\n \tResolvableType getTypeForFactoryBeanFromAttributes(AttributeAccessor attributes) {\n \t\tObject attribute = attributes.getAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE);\n+\t\tif (attribute == null) {\n+\t\t\treturn ResolvableType.NONE;\n+\t\t}\n \t\tif (attribute instanceof ResolvableType resolvableType) {\n \t\t\treturn resolvableType;\n \t\t}\n \t\tif (attribute instanceof Class<?> clazz) {\n \t\t\treturn ResolvableType.forClass(clazz);\n \t\t}\n-\t\treturn ResolvableType.NONE;\n+\t\tthrow new IllegalArgumentException(\"Invalid value type for attribute '\" +\n+\t\t\t\tFactoryBean.OBJECT_TYPE_ATTRIBUTE + \"': \" + attribute.getClass().getName());\n \t}\n \n \t/**",
    "output": "Restore restrictive getTypeForFactoryBeanFromAttributes check"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/annotation/BindParam.java b/spring-web/src/main/java/org/springframework/web/bind/annotation/BindParam.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/annotation/BindParam.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/BindParam.java\n@@ -31,7 +31,7 @@\n  * @since 6.1\n  * @see org.springframework.web.bind.WebDataBinder#construct\n  */\n-@Target(ElementType.PARAMETER)\n+@Target({ElementType.PARAMETER, ElementType.FIELD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface BindParam {",
    "output": "Allow BindParam on a field"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java\n@@ -36,6 +36,7 @@\n public class CaffeineCacheManagerTests {\n \n \t@Test\n+\t@SuppressWarnings(\"cast\")\n \tpublic void testDynamicMode() {\n \t\tCacheManager cm = new CaffeineCacheManager();\n ",
    "output": "Suppress warnings in tests"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java\n@@ -140,12 +140,33 @@ public MappedInterceptor(@Nullable String[] includePatterns, @Nullable String[]\n \t * Return the patterns this interceptor is mapped to.\n \t */\n \t@Nullable\n+\t@Deprecated\n \tpublic String[] getPathPatterns() {\n \t\treturn (!ObjectUtils.isEmpty(this.includePatterns) ?\n \t\t\t\tArrays.stream(this.includePatterns).map(PatternAdapter::getPatternString).toArray(String[]::new) :\n \t\t\t\tnull);\n \t}\n \n+\t/**\n+\t * Return the include path patterns this interceptor is mapped to.\n+\t */\n+\t@Nullable\n+\tpublic String[] getIncludePathPatterns() {\n+\t\treturn (!ObjectUtils.isEmpty(this.includePatterns) ?\n+\t\t\t\tArrays.stream(this.includePatterns).map(PatternAdapter::getPatternString).toArray(String[]::new) :\n+\t\t\t\tnull);\n+\t}\n+\n+\t/**\n+\t * Return the exclude path patterns this interceptor is mapped to.\n+\t */\n+\t@Nullable\n+\tpublic String[] getExcludePathPatterns() {\n+\t\treturn (!ObjectUtils.isEmpty(this.excludePatterns) ?\n+\t\t\t\tArrays.stream(this.excludePatterns).map(PatternAdapter::getPatternString).toArray(String[]::new) :\n+\t\t\t\tnull);\n+\t}\n+\n \t/**\n \t * The target {@link HandlerInterceptor} to invoke in case of a match.\n \t */",
    "output": "Provide methods for obtaining include/exclude patterns in MappedInterceptor Prior to this commit, MappedInterceptor had a getPathPatternsmethod that returned the include patterns. This commit introduces getIncludePathPatterns(which effectively replaces getPathPatterns) and getExcludePathPatterns. In addition, this commit deprecates getPathPatterns"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionRuntimeHints.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,7 +21,6 @@\n import org.springframework.aot.hint.RuntimeHintsRegistrar;\n import org.springframework.aot.hint.TypeHint;\n import org.springframework.aot.hint.TypeReference;\n-import org.springframework.transaction.TransactionDefinition;\n \n /**\n  * {@link RuntimeHintsRegistrar} implementation that registers runtime hints for\n@@ -35,8 +34,7 @@ class TransactionRuntimeHints implements RuntimeHintsRegistrar {\n \n \t@Override\n \tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n-\t\thints.reflection().registerTypes(TypeReference.listOf(\n-\t\t\t\t\tIsolation.class, Propagation.class, TransactionDefinition.class),\n+\t\thints.reflection().registerTypes(TypeReference.listOf(Isolation.class, Propagation.class),\n \t\t\t\tTypeHint.builtWith(MemberCategory.DECLARED_FIELDS));\n \t}\n ",
    "output": "Remove native image hints for TransactionDefinition constants"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/Constants.java b/spring-core/src/main/java/org/springframework/core/Constants.java\n--- a/spring-core/src/main/java/org/springframework/core/Constants.java\n+++ b/spring-core/src/main/java/org/springframework/core/Constants.java\n@@ -43,7 +43,10 @@\n  * @author Rod Johnson\n  * @author Juergen Hoeller\n  * @since 16.03.2003\n+ * @deprecated since 6.1 with no replacement; use an enum, map, or similar custom\n+ * solution instead\n  */\n+@Deprecated(since = \"6.1\")\n public class Constants {\n \n \t/** The name of the introspected class. */\n\ndiff --git a/spring-core/src/test/java/org/springframework/core/ConstantsTests.java b/spring-core/src/test/java/org/springframework/core/ConstantsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ConstantsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ConstantsTests.java\n@@ -31,6 +31,7 @@\n  * @author Rick Evans\n  * @since 28.04.2003\n  */\n+@SuppressWarnings(\"deprecation\")\n class ConstantsTests {\n \n \t@Test",
    "output": "Deprecate org.springframework.core.Constants utility"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java b/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n--- a/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n+++ b/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n@@ -132,6 +132,7 @@ public Object getFieldValue(String field) {\n \n \t\tPropertyDescriptor pd = BeanUtils.getPropertyDescriptor(this.target.getClass(), field);\n \t\tif (pd != null && pd.getReadMethod() != null) {\n+\t\t\tReflectionUtils.makeAccessible(pd.getReadMethod());\n \t\t\treturn ReflectionUtils.invokeMethod(pd.getReadMethod(), this.target);\n \t\t}\n ",
    "output": "Make bean property method accessible as well (for non-public types)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java\n@@ -63,8 +63,6 @@ final class DefaultRestClientBuilder implements RestClient.Builder {\n \n \tprivate static final boolean httpComponentsClientPresent;\n \n-\tprivate static final boolean okHttpClientPresent;\n-\n \tprivate static final boolean jettyClientPresent;\n \n \tprivate static final boolean jdkClientPresent;\n@@ -88,7 +86,6 @@ final class DefaultRestClientBuilder implements RestClient.Builder {\n \t\tClassLoader loader = DefaultRestClientBuilder.class.getClassLoader();\n \n \t\thttpComponentsClientPresent = ClassUtils.isPresent(\"org.apache.hc.client5.http.classic.HttpClient\", loader);\n-\t\tokHttpClientPresent = ClassUtils.isPresent(\"okhttp3.OkHttpClient\", loader);\n \t\tjettyClientPresent = ClassUtils.isPresent(\"org.eclipse.jetty.client.HttpClient\", loader);\n \t\tjdkClientPresent = ClassUtils.isPresent(\"java.net.http.HttpClient\", loader);\n ",
    "output": "Cleanup after deprecation of OkHttp3ClientHttpRequestFactory"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java b/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n--- a/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n+++ b/spring-context/src/main/java/org/springframework/validation/SimpleErrors.java\n@@ -125,15 +125,22 @@ public List<FieldError> getFieldErrors() {\n \t@Override\n \t@Nullable\n \tpublic Object getFieldValue(String field) {\n+\t\tFieldError fieldError = getFieldError(field);\n+\t\tif (fieldError != null) {\n+\t\t\treturn fieldError.getRejectedValue();\n+\t\t}\n+\n \t\tPropertyDescriptor pd = BeanUtils.getPropertyDescriptor(this.target.getClass(), field);\n \t\tif (pd != null && pd.getReadMethod() != null) {\n \t\t\treturn ReflectionUtils.invokeMethod(pd.getReadMethod(), this.target);\n \t\t}\n+\n \t\tField rawField = ReflectionUtils.findField(this.target.getClass(), field);\n \t\tif (rawField != null) {\n \t\t\tReflectionUtils.makeAccessible(rawField);\n \t\t\treturn ReflectionUtils.getField(rawField, this.target);\n \t\t}\n+\n \t\tthrow new IllegalArgumentException(\"Cannot retrieve value for field '\" + field +\n \t\t\t\t\"' - neither a getter method nor a raw field found\");\n \t}",
    "output": "Return rejected value from getFieldValue in case of error"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -1048,7 +1048,7 @@ private ModelAndView getModelAndView(ModelAndViewContainer mavContainer,\n \t@SuppressWarnings(\"serial\")\n \tprivate class MvcSimpleAsyncTaskExecutor extends SimpleAsyncTaskExecutor {\n \n-\t\tprivate static Boolean taskExecutorWarning = true;\n+\t\tprivate static boolean taskExecutorWarning = true;\n \n \t\tpublic MvcSimpleAsyncTaskExecutor() {\n \t\t\tsuper(\"MvcAsync\");",
    "output": "Change MvcSimpleAsyncTaskExecutor.taskExecutorWarning to primitive boolean"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/Trigger.java b/spring-context/src/main/java/org/springframework/scheduling/Trigger.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/Trigger.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/Trigger.java\n@@ -45,7 +45,7 @@ public interface Trigger {\n \t@Nullable\n \tdefault Date nextExecutionTime(TriggerContext triggerContext) {\n \t\tInstant instant = nextExecution(triggerContext);\n-\t\treturn instant != null ? Date.from(instant) : null;\n+\t\treturn (instant != null ? Date.from(instant) : null);\n \t}\n \n \t/**",
    "output": "Wrap ternary operator within parentheses as outlined in Code Style"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n@@ -227,7 +227,7 @@ private MultiValueMap<ClassName, Class<?>> processAheadOfTime(\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tif (this.failOnError) {\n-\t\t\t\t\tthrow new IllegalStateException(\"Failed to generate AOT artifacts for test classes \" +\n+\t\t\t\t\tthrow new TestContextAotException(\"Failed to generate AOT artifacts for test classes \" +\n \t\t\t\t\t\t\ttestClasses.stream().map(Class::getName).toList(), ex);\n \t\t\t\t}\n \t\t\t\tif (logger.isDebugEnabled()) {",
    "output": "Consistently throw TestContextAotException in TestContextAotGenerator"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n--- a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n+++ b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,7 +78,7 @@ public DefaultGenerationContext(ClassNameGenerator classNameGenerator, Generated\n \t * @param generatedFiles the generated files\n \t * @param runtimeHints the runtime hints\n \t */\n-\tDefaultGenerationContext(GeneratedClasses generatedClasses,\n+\tprotected DefaultGenerationContext(GeneratedClasses generatedClasses,\n \t\t\tGeneratedFiles generatedFiles, RuntimeHints runtimeHints) {\n \n \t\tAssert.notNull(generatedClasses, \"'generatedClasses' must not be null\");",
    "output": "Make DefaultGenerationContext(<classes>,<files>,<hints>) constructor protected"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n@@ -662,4 +662,15 @@ protected void sendServerError(Exception ex, HttpServletRequest request, HttpSer\n \t\tresponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n \t}\n \n+\t@Override\n+\tprotected void logException(Exception ex, HttpServletRequest request) {\n+\t\tif (ex instanceof NoHandlerFoundException || ex instanceof NoResourceFoundException) {\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(buildLogMessage(ex, request));\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\t\tsuper.logException(ex, request);\n+\t}\n+\n }",
    "output": "Upgrade DefaultHandlerExceptionResolver logging Reduce logging for NoResourceFoundException and NoHandlerFoundException"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n@@ -35,7 +35,7 @@\n import org.springframework.web.testfixture.servlet.MockServletContext;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.condition.JRE.JAVA_20;\n+import static org.junit.jupiter.api.condition.JRE.JAVA_21;\n import static org.mockito.Mockito.mock;\n \n /**\n@@ -44,7 +44,7 @@\n  * @author Sebastien Deleuze\n  * @author Sam Brannen\n  */\n-@DisabledForJreRange(min = JAVA_20, disabledReason = \"Kotlin doesn't support Java 20+ yet\")\n+@DisabledForJreRange(min = JAVA_21, disabledReason = \"Kotlin doesn't support Java 21+ yet\")\n class KotlinScriptTemplateTests {\n \n \tprivate WebApplicationContext webAppContext = mock();",
    "output": "Enable KotlinScriptTemplateTests in Spring MVC on Java 20"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n@@ -33,14 +33,14 @@\n import org.springframework.web.testfixture.server.MockServerWebExchange;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.jupiter.api.condition.JRE.JAVA_20;\n+import static org.junit.jupiter.api.condition.JRE.JAVA_21;\n \n /**\n  * Unit tests for Kotlin script templates running on Kotlin JSR-223 support.\n  *\n  * @author Sebastien Deleuze\n  */\n-@DisabledForJreRange(min = JAVA_20, disabledReason = \"Kotlin doesn't support Java 20+ yet\")\n+@DisabledForJreRange(min = JAVA_21, disabledReason = \"Kotlin doesn't support Java 21+ yet\")\n public class KotlinScriptTemplateTests {\n \n \t@Test",
    "output": "Enable KotlinScriptTemplateTests in Spring WebFlux on Java 20"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -101,8 +101,6 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \t\t\t\"^\" + HTTP_PATTERN + \"(//(\" + USERINFO_PATTERN + \"@)?\" + HOST_PATTERN + \"(:\" + PORT_PATTERN + \")?\" + \")?\" +\n \t\t\t\t\tPATH_PATTERN + \"(\\\\?\" + QUERY_PATTERN + \")?\" + \"(#\" + LAST_PATTERN + \")?\");\n \n-\tprivate static final String FORWARDED_VALUE = \"\\\"?([^;,\\\"]+)\\\"?\";\n-\n \tprivate static final Object[] EMPTY_VALUES = new Object[0];\n \n ",
    "output": "Remove obsolete private constant"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -31,7 +31,6 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpRequest;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java b/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/ConnectionFactoryUtils.java\n@@ -419,6 +419,8 @@ private static class JmsResourceSynchronization extends ResourceHolderSynchroniz\n \n \t\tprivate final boolean transacted;\n \n+\t\tprivate boolean commitProcessed;\n+\n \t\tpublic JmsResourceSynchronization(JmsResourceHolder resourceHolder, Object resourceKey, boolean transacted) {\n \t\t\tsuper(resourceHolder, resourceKey);\n \t\t\tthis.transacted = transacted;\n@@ -431,6 +433,7 @@ protected boolean shouldReleaseBeforeCompletion() {\n \n \t\t@Override\n \t\tprotected void processResourceAfterCommit(JmsResourceHolder resourceHolder) {\n+\t\t\tthis.commitProcessed = true;\n \t\t\ttry {\n \t\t\t\tresourceHolder.commitAll();\n \t\t\t}\n@@ -439,6 +442,16 @@ protected void processResourceAfterCommit(JmsResourceHolder resourceHolder) {\n \t\t\t}\n \t\t}\n \n+\t\t@Override\n+\t\tpublic void afterCompletion(int status) {\n+\t\t\tif (status == STATUS_COMMITTED && this.transacted && !this.commitProcessed) {\n+\t\t\t\t// JmsResourceSynchronization registered in afterCommit phase of other synchronization\n+\t\t\t\t// -> late local JMS transaction commit here, otherwise it would silently get dropped.\n+\t\t\t\tafterCommit();\n+\t\t\t}\n+\t\t\tsuper.afterCompletion(status);\n+\t\t}\n+\n \t\t@Override\n \t\tprotected void releaseResource(JmsResourceHolder resourceHolder, Object resourceKey) {\n \t\t\tresourceHolder.closeAll();",
    "output": "Trigger late commit in JmsResourceSynchronization.afterCompletion if necessary"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SqlArrayValue.java\n@@ -28,7 +28,8 @@\n  * Common {@link SqlValue} implementation for JDBC {@link Array} creation\n  * based on the JDBC 4 {@link java.sql.Connection#createArrayOf} method.\n  *\n- * <p>Also serves as a template for custom {@link SqlValue} implementations.\n+ * <p>Also serves as a template for custom {@link SqlValue} implementations\n+ * with cleanup demand.\n  *\n  * @author Juergen Hoeller\n  * @author Philippe Marschall\n@@ -50,7 +51,7 @@ public class SqlArrayValue implements SqlValue {\n \t * @param elements the elements to populate the {@code Array} object with\n \t * @see java.sql.Connection#createArrayOf\n \t */\n-\tpublic SqlArrayValue(String typeName, Object[] elements) {\n+\tpublic SqlArrayValue(String typeName, Object... elements) {\n \t\tAssert.notNull(typeName, \"Type name must not be null\");\n \t\tAssert.notNull(elements, \"Elements array must not be null\");\n \t\tthis.typeName = typeName;",
    "output": "Use varargs for array elements"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -551,7 +551,7 @@ public void afterRestore(org.crac.Context<? extends org.crac.Resource> context)\n \t\t\tthis.barrier = null;\n \n \t\t\tDuration timeTakenToRestart = Duration.ofNanos(System.nanoTime() - restartTime);\n-\t\t\tlogger.info(\"Restart complete in \" + timeTakenToRestart.toMillis() + \" ms\");\n+\t\t\tlogger.info(\"Spring-managed lifecycle restart completed in \" + timeTakenToRestart.toMillis() + \" ms\");\n \t\t}\n \n \t\tprivate void awaitPreventShutdownBarrier() {",
    "output": "Refine the log message printed after restoration"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -232,7 +232,6 @@ public void setAutodetect(boolean autodetect) {\n \t * @throws IllegalArgumentException if the supplied value is not resolvable\n \t * to one of the {@code AUTODETECT_} constants or is {@code null}\n \t * @see #setAutodetectMode(int)\n-\t * @see #getAutodetectMode()\n \t * @see #AUTODETECT_ALL\n \t * @see #AUTODETECT_ASSEMBLER\n \t * @see #AUTODETECT_MBEAN\n@@ -250,7 +249,6 @@ public void setAutodetectModeName(String constantName) {\n \t * @throws IllegalArgumentException if the supplied value is not\n \t * one of the {@code AUTODETECT_} constants\n \t * @see #setAutodetectModeName(String)\n-\t * @see #getAutodetectMode()\n \t * @see #AUTODETECT_ALL\n \t * @see #AUTODETECT_ASSEMBLER\n \t * @see #AUTODETECT_MBEAN",
    "output": "Remove outdated Javadoc cross references"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -137,7 +137,6 @@ public class MBeanExporter extends MBeanRegistrationSupport implements MBeanExpo\n \t/**\n \t * Map of constant names to constant values for the autodetect constants defined\n \t * in this class.\n-\t * @since 6.0.11\n \t */\n \tprivate static final Map<String, Integer> constants = Map.of(\n \t\t\t\"AUTODETECT_NONE\", AUTODETECT_NONE,",
    "output": "Remove since tag"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n@@ -88,12 +88,6 @@ public abstract class AnnotationConfigUtils {\n \tpublic static final String COMMON_ANNOTATION_PROCESSOR_BEAN_NAME =\n \t\t\t\"org.springframework.context.annotation.internalCommonAnnotationProcessor\";\n \n-\t/**\n-\t * The bean name of the internally managed JSR-250 annotation processor.\n-\t */\n-\tprivate static final String JSR250_ANNOTATION_PROCESSOR_BEAN_NAME =\n-\t\t\t\"org.springframework.context.annotation.internalJsr250AnnotationProcessor\";\n-\n \t/**\n \t * The bean name of the internally managed JPA annotation processor.\n \t */",
    "output": "Delete obsolete constant in AnnotationConfigUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -149,8 +149,8 @@ public static boolean isCandidateClass(Class<?> clazz, Collection<Class<? extend\n \t * @since 5.2\n \t * @see #isCandidateClass(Class, String)\n \t */\n-\tpublic static boolean isCandidateClass(Class<?> clazz, Class<? extends Annotation> annotationType) {\n-\t\treturn isCandidateClass(clazz, annotationType.getName());\n+\tpublic static boolean isCandidateClass(Class<?> clazz, @Nullable Class<? extends Annotation> annotationType) {\n+\t\treturn (annotationType != null && isCandidateClass(clazz, annotationType.getName()));\n \t}\n \n \t/**",
    "output": "Tolerate isCandidateClass call with null as annotation type"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n@@ -447,7 +447,7 @@ private boolean isDependent(String beanName, String dependentBeanName, @Nullable\n \t\t}\n \t\tString canonicalName = canonicalName(beanName);\n \t\tSet<String> dependentBeans = this.dependentBeanMap.get(canonicalName);\n-\t\tif (dependentBeans == null) {\n+\t\tif (dependentBeans == null || dependentBeans.isEmpty()) {\n \t\t\treturn false;\n \t\t}\n \t\tif (dependentBeans.contains(dependentBeanName)) {",
    "output": "Further simplify DefaultSingletonBeanRegistry.isDependent"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n@@ -453,11 +453,11 @@ private boolean isDependent(String beanName, String dependentBeanName, @Nullable\n \t\tif (dependentBeans.contains(dependentBeanName)) {\n \t\t\treturn true;\n \t\t}\n+\t\tif (alreadySeen == null) {\n+\t\t\talreadySeen = new HashSet<>();\n+\t\t}\n+\t\talreadySeen.add(beanName);\n \t\tfor (String transitiveDependency : dependentBeans) {\n-\t\t\tif (alreadySeen == null) {\n-\t\t\t\talreadySeen = new HashSet<>();\n-\t\t\t}\n-\t\t\talreadySeen.add(beanName);\n \t\t\tif (isDependent(transitiveDependency, dependentBeanName, alreadySeen)) {\n \t\t\t\treturn true;\n \t\t\t}",
    "output": "Simplify DefaultSingletonBeanRegistry.isDependentMove `alreadySeen` handling out of for-loop"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java b/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java\n@@ -342,6 +342,18 @@ void characterToNumber() {\n \n \t@Test\n \tvoid convertArrayToCollectionInterface() {\n+\t\tCollection<?> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Collection.class);\n+\t\tassertThat(result).isEqualTo(Set.of(\"1\", \"2\", \"3\"));\n+\t}\n+\n+\t@Test\n+\tvoid convertArrayToSetInterface() {\n+\t\tCollection<?> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, Set.class);\n+\t\tassertThat(result).isEqualTo(Set.of(\"1\", \"2\", \"3\"));\n+\t}\n+\n+\t@Test\n+\tvoid convertArrayToListInterface() {\n \t\tList<?> result = conversionService.convert(new String[] {\"1\", \"2\", \"3\"}, List.class);\n \t\tassertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\n \t}",
    "output": "Expand tests for array to Collection/Set/List interface"
  },
  {
    "input": "diff --git a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java\n--- a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java\n+++ b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/index/CandidateComponentsTestClassLoader.java\n@@ -43,8 +43,7 @@ public class CandidateComponentsTestClassLoader extends ClassLoader {\n \t * @see CandidateComponentsIndexLoader#COMPONENTS_RESOURCE_LOCATION\n \t */\n \tpublic static ClassLoader disableIndex(ClassLoader classLoader) {\n-\t\treturn new CandidateComponentsTestClassLoader(classLoader,\n-\t\t\t\tCollections.enumeration(Collections.emptyList()));\n+\t\treturn new CandidateComponentsTestClassLoader(classLoader, Collections.emptyEnumeration());\n \t}\n \n \t/**\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleServletPostProcessor.java\n@@ -170,7 +170,7 @@ public String getInitParameter(String paramName) {\n \n \t\t@Override\n \t\tpublic Enumeration<String> getInitParameterNames() {\n-\t\t\treturn Collections.enumeration(Collections.emptySet());\n+\t\t\treturn Collections.emptyEnumeration();\n \t\t}\n \t}\n ",
    "output": "Use Collections.emptyEnumerationwhere appropriate"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java\n@@ -637,17 +637,20 @@ public int getOrder() {\n \t}\n \n \n+\tstatic class CommonPointcuts {\n+\n+\t\t@Pointcut(\"execution(* getAge())\")\n+\t\tvoid getAge() {\n+\t\t}\n+\t}\n+\n \t@Aspect\n \tstatic class NamedPointcutAspectWithFQN {\n \n \t\t@SuppressWarnings(\"unused\")\n \t\tprivate ITestBean fieldThatShouldBeIgnoredBySpringAtAspectJProcessing = new TestBean();\n \n-\t\t@Pointcut(\"execution(* getAge())\")\n-\t\tvoid getAge() {\n-\t\t}\n-\n-\t\t@Around(\"org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.NamedPointcutAspectWithFQN.getAge()\")\n+\t\t@Around(\"org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.CommonPointcuts.getAge()()\")\n \t\tint changeReturnValue(ProceedingJoinPoint pjp) {\n \t\t\treturn -1;\n \t\t}",
    "output": "Remove @Aspect for classes containing only @Pointcut declarations in ref docs"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java\n@@ -79,8 +79,8 @@ public ScheduledFuture<?> schedule() {\n \t\t\tif (this.scheduledExecutionTime == null) {\n \t\t\t\treturn null;\n \t\t\t}\n-\t\t\tDuration initialDelay = Duration.between(this.triggerContext.getClock().instant(), this.scheduledExecutionTime);\n-\t\t\tthis.currentFuture = this.executor.schedule(this, initialDelay.toNanos(), TimeUnit.NANOSECONDS);\n+\t\t\tDuration delay = Duration.between(this.triggerContext.getClock().instant(), this.scheduledExecutionTime);\n+\t\t\tthis.currentFuture = this.executor.schedule(this, delay.toNanos(), TimeUnit.NANOSECONDS);\n \t\t\treturn this;\n \t\t}\n \t}",
    "output": "Polish variable name in ReschedulingRunnable As a variable name, `initDelay` is applicable for `scheduleAtFixedRate` and `scheduleWithFixedDelay` but not for `schedule`"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n@@ -390,7 +390,8 @@ public void setBeanClassName(@Nullable String beanClassName) {\n \t@Override\n \t@Nullable\n \tpublic String getBeanClassName() {\n-\t\treturn (this.beanClass instanceof Class<?> clazz ? clazz.getName() : (String) this.beanClass);\n+\t\tObject beanClassObject = this.beanClass;  // defensive access to volatile beanClass field\n+\t\treturn (beanClassObject instanceof Class<?> clazz ? clazz.getName() : (String) beanClassObject);\n \t}\n \n \t/**\n@@ -423,7 +424,7 @@ public void setBeanClass(@Nullable Class<?> beanClass) {\n \t * @see #resolveBeanClass(ClassLoader)\n \t */\n \tpublic Class<?> getBeanClass() throws IllegalStateException {\n-\t\tObject beanClassObject = this.beanClass;\n+\t\tObject beanClassObject = this.beanClass;  // defensive access to volatile beanClass field\n \t\tif (beanClassObject == null) {\n \t\t\tthrow new IllegalStateException(\"No bean class specified on bean definition\");\n \t\t}",
    "output": "Restore defensive access to volatile field in getBeanClassName"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java b/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n--- a/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n@@ -102,7 +102,7 @@ void testRegisterNotificationListenerForNonExistentMBean() throws Exception {\n \t\texporter.setNotificationListenerMappings(listeners);\n \t\tassertThatExceptionOfType(MBeanExportException.class).as(\"NotificationListener on a non-existent MBean\").isThrownBy(() ->\n \t\t\t\tstart(exporter))\n-\t\t\t.satisfies(ex -> assertThat(ex.contains(InstanceNotFoundException.class)));\n+\t\t\t.satisfies(ex -> assertThat(ex.contains(InstanceNotFoundException.class)).isTrue());\n \t}\n \n \t@Test",
    "output": "Fix incomplete AssertJ assertions"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java b/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/aspectj/BeforeAdviceBindingTests.java\n@@ -102,18 +102,3 @@ void needsJoinPointStaticPart() {\n \t}\n \n }\n-\n-\n-class AuthenticationLogger {\n-\n-\tpublic void logAuthenticationAttempt(String username) {\n-\t\tSystem.out.println(\"User [\" + username + \"] attempting to authenticate\");\n-\t}\n-\n-}\n-\n-class SecurityManager {\n-\tpublic boolean authenticate(String username, String password) {\n-\t\treturn false;\n-\t}\n-}",
    "output": "Remove unused test code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n@@ -20,8 +20,6 @@\n import java.lang.reflect.Method;\n import java.util.Arrays;\n \n-import org.reactivestreams.Publisher;\n-\n import org.springframework.context.MessageSource;\n import org.springframework.core.CoroutinesUtils;\n import org.springframework.core.DefaultParameterNameDiscoverer;\n@@ -240,7 +238,7 @@ else if (targetException instanceof Exception exception) {\n \t * instead.\n \t * @since 6.0\n \t */\n-\tprotected Publisher<?> invokeSuspendingFunction(Method method, Object target, Object[] args) {\n+\tprotected Object invokeSuspendingFunction(Method method, Object target, Object[] args) {\n \t\treturn CoroutinesUtils.invokeSuspendingFunction(method, target, args);\n \t}\n ",
    "output": "Change InvocableHandlerMethod#invokeSuspendingFunction return type This commits changes the return type from Publisher<?> to Object in order to avoid potential compatibility issues when the Reactive Streams dependency is not in the classpath"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -18,6 +18,7 @@\n \n import java.nio.file.Path;\n import java.util.List;\n+import java.util.Objects;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelId;\n@@ -55,8 +56,8 @@ class ReactorServerHttpResponse extends AbstractServerHttpResponse implements Ze\n \n \n \tpublic ReactorServerHttpResponse(HttpServerResponse response, DataBufferFactory bufferFactory) {\n-\t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(response.responseHeaders())));\n-\t\tAssert.notNull(response, \"HttpServerResponse must not be null\");\n+\t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(Objects.requireNonNull(response,\n+\t\t\t\t\"HttpServerResponse must not be null\").responseHeaders())));\n \t\tthis.response = response;\n \t}\n ",
    "output": "Remove redundant assertion in ReactorServerHttpResponse constructor"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -144,6 +144,9 @@ public class ScheduledAnnotationBeanPostProcessor\n \t@Nullable\n \tprivate ApplicationContext applicationContext;\n \n+\t@Nullable\n+\tprivate TaskSchedulerRouter localScheduler;\n+\n \tprivate final Set<Class<?>> nonAnnotatedClasses = Collections.newSetFromMap(new ConcurrentHashMap<>(64));\n \n \tprivate final Map<Object, Set<ScheduledTask>> scheduledTasks = new IdentityHashMap<>(16);\n@@ -251,10 +254,10 @@ private void finishRegistration() {\n \t\t\tthis.registrar.setScheduler(this.scheduler);\n \t\t}\n \t\telse {\n-\t\t\tTaskSchedulerRouter router = new TaskSchedulerRouter();\n-\t\t\trouter.setBeanName(this.beanName);\n-\t\t\trouter.setBeanFactory(this.beanFactory);\n-\t\t\tthis.registrar.setTaskScheduler(router);\n+\t\t\tthis.localScheduler = new TaskSchedulerRouter();\n+\t\t\tthis.localScheduler.setBeanName(this.beanName);\n+\t\t\tthis.localScheduler.setBeanFactory(this.beanFactory);\n+\t\t\tthis.registrar.setTaskScheduler(this.localScheduler);\n \t\t}\n \n \t\tif (this.beanFactory instanceof ListableBeanFactory lbf) {\n@@ -637,6 +640,9 @@ public void destroy() {\n \t\t\t}\n \t\t}\n \t\tthis.registrar.destroy();\n+\t\tif (this.localScheduler != null) {\n+\t\t\tthis.localScheduler.destroy();\n+\t\t}\n \t}\n \n }",
    "output": "Destroy local TaskSchedulerRouter which may contain local executor"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.http.converter;\n \n+import java.io.FilterOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.net.URLDecoder;\n@@ -618,7 +619,7 @@ private static class MultipartHttpOutputMessage implements HttpOutputMessage {\n \t\tprivate boolean headersWritten = false;\n \n \t\tpublic MultipartHttpOutputMessage(OutputStream outputStream, Charset charset) {\n-\t\t\tthis.outputStream = outputStream;\n+\t\t\tthis.outputStream = new MultipartOutputStream(outputStream);\n \t\t\tthis.charset = charset;\n \t\t}\n \n@@ -654,6 +655,32 @@ private void writeHeaders() throws IOException {\n \t\tprivate byte[] getBytes(String name) {\n \t\t\treturn name.getBytes(this.charset);\n \t\t}\n+\n+\t}\n+\n+\n+\t/**\n+\t * OutputStream that neither flushes nor closes.\n+\t */\n+\tprivate static class MultipartOutputStream extends FilterOutputStream {\n+\n+\t\tpublic MultipartOutputStream(OutputStream out) {\n+\t\t\tsuper(out);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(byte[] b, int off, int let) throws IOException {\n+\t\t\tthis.out.write(b, off, let);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void flush() {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\t\t}\n \t}\n \n+\n }",
    "output": "Reduce flushes in FormHttpMessageConverter Before this commit, each part written by the FormHttpMessageConverter would typically end with a flush, which reduced performance"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/JdkClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/JdkClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/JdkClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/JdkClientHttpRequestFactory.java\n@@ -48,10 +48,12 @@ public class JdkClientHttpRequestFactory implements ClientHttpRequestFactory {\n \n \t/**\n \t * Create a new instance of the {@code JdkClientHttpRequestFactory}\n-\t * with a default {@link HttpClient}.\n+\t * with a default {@link HttpClient} that follows redirects.\n \t */\n \tpublic JdkClientHttpRequestFactory() {\n-\t\tthis(HttpClient.newHttpClient());\n+\t\tthis(HttpClient.newBuilder()\n+\t\t\t\t.followRedirects(HttpClient.Redirect.NORMAL)\n+\t\t\t\t.build());\n \t}\n \n \t/**",
    "output": "Follow redirects in JdkClientHttpRequestFactory Make sure we follow redirects in the default HttpClient created by JdkClientHttpRequestFactory, similar toSimpleClientHttpRequestFactory"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -50,7 +50,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.12.0\");\n+\t\t\tcheckstyle.setToolVersion(\"10.12.1\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.12.1"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -108,7 +108,7 @@ public static void triggerBeforeCompletion() {\n \t\t\t\tsynchronization.beforeCompletion();\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n-\t\t\t\tlogger.debug(\"TransactionSynchronization.beforeCompletion threw exception\", ex);\n+\t\t\t\tlogger.error(\"TransactionSynchronization.beforeCompletion threw exception\", ex);\n \t\t\t}\n \t\t}\n \t}\n@@ -172,7 +172,7 @@ public static void invokeAfterCompletion(@Nullable List<TransactionSynchronizati\n \t\t\t\t\tsynchronization.afterCompletion(completionStatus);\n \t\t\t\t}\n \t\t\t\tcatch (Throwable ex) {\n-\t\t\t\t\tlogger.debug(\"TransactionSynchronization.afterCompletion threw exception\", ex);\n+\t\t\t\t\tlogger.error(\"TransactionSynchronization.afterCompletion threw exception\", ex);\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Increase log level to error"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -543,14 +543,14 @@ public void beforeCheckpoint(org.crac.Context<? extends org.crac.Resource> conte\n \t\t@Override\n \t\tpublic void afterRestore(org.crac.Context<? extends org.crac.Resource> context) {\n \t\t\tlong restartTime = System.nanoTime();\n-\t\t\tlogger.debug(\"Restarting Spring-managed lifecycle beans after JVM restore\");\n+\t\t\tlogger.info(\"Restarting Spring-managed lifecycle beans after JVM restore\");\n \t\t\trestartAfterStop();\n \n \t\t\t// Barrier for prevent-shutdown thread not needed anymore\n \t\t\tthis.barrier = null;\n \n \t\t\tDuration timeTakenToRestart = Duration.ofNanos(System.nanoTime() - restartTime);\n-\t\t\tlogger.debug(\"Restart complete in \" + timeTakenToRestart.toMillis() + \" ms\");\n+\t\t\tlogger.info(\"Restart complete in \" + timeTakenToRestart.toMillis() + \" ms\");\n \t\t}\n \n \t\tprivate void awaitPreventShutdownBarrier() {",
    "output": "Change restore logging to info level"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n@@ -112,10 +112,11 @@ private Mono<Void> rollbackOnException(ReactiveTransaction status, Throwable ex)\n \t * @param ex the throwable to try to unwrap\n \t */\n \tprivate Throwable unwrapIfResourceCleanupFailure(Throwable ex) {\n-\t\tif (ex instanceof RuntimeException &&\n-\t\t\t\tex.getCause() != null &&\n-\t\t\t\tex.getMessage().startsWith(\"Async resource cleanup failed\")) {\n-\t\t\treturn ex.getCause();\n+\t\tif (ex instanceof RuntimeException && ex.getCause() != null) {\n+\t\t\tString msg = ex.getMessage();\n+\t\t\tif (msg != null && msg.startsWith(\"Async resource cleanup failed\")) {\n+\t\t\t\treturn ex.getCause();\n+\t\t\t}\n \t\t}\n \t\treturn ex;\n \t}",
    "output": "Ignore null message when introspecting resource cleanup failure This commit fixes a regression introduced in conjunction with"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationAdapterTests.java b/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationAdapterTests.java\n--- a/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationAdapterTests.java\n+++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationAdapterTests.java\n@@ -18,12 +18,15 @@\n \n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Locale;\n import java.util.function.Consumer;\n \n import jakarta.validation.Valid;\n import jakarta.validation.constraints.Max;\n import jakarta.validation.constraints.Min;\n import jakarta.validation.constraints.Size;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.context.MessageSourceResolvable;\n@@ -35,7 +38,9 @@\n \n /**\n  * Unit tests for {@link MethodValidationAdapter}.\n+ *\n  * @author Rossen Stoyanchev\n+ * @author Sam Brannen\n  */\n public class MethodValidationAdapterTests {\n \n@@ -46,6 +51,18 @@ public class MethodValidationAdapterTests {\n \n \tprivate final MethodValidationAdapter validationAdapter = new MethodValidationAdapter();\n \n+\tprivate final Locale originalLocale = Locale.getDefault();\n+\n+\n+\t@BeforeEach\n+\tvoid setDefaultLocaleToEnglish() {\n+\t\tLocale.setDefault(Locale.ENGLISH);\n+\t}\n+\n+\t@AfterEach\n+\tvoid resetDefaultLocale() {\n+\t\tLocale.setDefault(this.originalLocale);\n+\t}\n \n \t@Test\n \tvoid validateArguments() {",
    "output": "Ensure MethodValidationAdapterTests pass with default Locale other than English"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/observation/MicrometerObservationRegistryTestExecutionListener.java\n@@ -22,11 +22,11 @@\n import io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.junit.platform.launcher.TestExecutionListener;\n \n import org.springframework.context.ApplicationContext;\n import org.springframework.core.Conventions;\n import org.springframework.test.context.TestContext;\n+import org.springframework.test.context.TestExecutionListener;\n import org.springframework.test.context.support.AbstractTestExecutionListener;\n import org.springframework.util.Assert;\n import org.springframework.util.ReflectionUtils;",
    "output": "Use correct ClassLoader in MicrometerObservationRegistryTestExecutionListener In the original implementation of MicrometerObservationRegistryTestExecutionListener I accidentally imported JUnit 5's org.junit.platform.launcher.TestExecutionListener instead Spring's org.springframework.test.context.TestExecutionListener. The code therefore attempts to use the ClassLoader for the JUnit Platform's TestExecutionListener which may fail to see the required types. In addition, if the JUnit Platform's TestExecutionListener is not on the classpath, the attempt to access its ClassLoader will fail. This commit addresses this by properly using the ClassLoader for Spring's TestExecutionListener to detect dependencies of the MicrometerObservationRegistryTestExecutionListener"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -567,7 +567,7 @@ private boolean determineUnresolvableGenerics() {\n \t\t\ttry {\n \t\t\t\tfor (Type genericInterface : resolved.getGenericInterfaces()) {\n \t\t\t\t\tif (genericInterface instanceof Class<?> clazz) {\n-\t\t\t\t\t\tif (forClass(clazz).hasGenerics()) {\n+\t\t\t\t\t\tif (clazz.getTypeParameters().length > 0) {\n \t\t\t\t\t\t\treturn true;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -576,7 +576,10 @@ private boolean determineUnresolvableGenerics() {\n \t\t\tcatch (TypeNotPresentException ex) {\n \t\t\t\t// Ignore non-present types in generic signature\n \t\t\t}\n-\t\t\treturn getSuperType().hasUnresolvableGenerics();\n+\t\t\tClass<?> superclass = resolved.getSuperclass();\n+\t\t\tif (superclass != null && superclass != Object.class) {\n+\t\t\t\treturn getSuperType().hasUnresolvableGenerics();\n+\t\t\t}\n \t\t}\n \t\treturn false;\n \t}",
    "output": "Avoid ResolvableType creation for interface/superclass check"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -133,6 +133,9 @@ public class ResolvableType implements Serializable {\n \t@Nullable\n \tprivate volatile ResolvableType[] generics;\n \n+\t@Nullable\n+\tprivate volatile Boolean unresolvableGenerics;\n+\n \n \t/**\n \t * Private constructor used to create a new {@link ResolvableType} for cache key purposes,\n@@ -544,6 +547,15 @@ public boolean hasUnresolvableGenerics() {\n \t\tif (this == NONE) {\n \t\t\treturn false;\n \t\t}\n+\t\tBoolean unresolvableGenerics = this.unresolvableGenerics;\n+\t\tif (unresolvableGenerics == null) {\n+\t\t\tunresolvableGenerics = determineUnresolvableGenerics();\n+\t\t\tthis.unresolvableGenerics = unresolvableGenerics;\n+\t\t}\n+\t\treturn unresolvableGenerics;\n+\t}\n+\n+\tprivate boolean determineUnresolvableGenerics() {\n \t\tResolvableType[] generics = getGenerics();\n \t\tfor (ResolvableType generic : generics) {\n \t\t\tif (generic.isUnresolvableTypeVariable() || generic.isWildcardWithoutBounds()) {",
    "output": "Cache hasUnresolvableGenerics result for repeated checks"
  },
  {
    "input": "diff --git a/spring-jcl/src/main/java/org/apache/commons/logging/LogFactory.java b/spring-jcl/src/main/java/org/apache/commons/logging/LogFactory.java\n--- a/spring-jcl/src/main/java/org/apache/commons/logging/LogFactory.java\n+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogFactory.java\n@@ -102,4 +102,31 @@ public Log getInstance(String name) {\n \t\treturn getLog(name);\n \t}\n \n+\t// Just in case some code happens to call uncommon Commons Logging methods...\n+\n+\t@Deprecated\n+\tpublic Object getAttribute(String name) {\n+\t\treturn null;\n+\t}\n+\n+\t@Deprecated\n+\tpublic String[] getAttributeNames() {\n+\t\treturn new String[0];\n+\t}\n+\n+\t@Deprecated\n+\tpublic void removeAttribute(String name) {\n+\t\t// do nothing\n+\t}\n+\n+\t@Deprecated\n+\tpublic void setAttribute(String name, Object value) {\n+\t\t// do nothing\n+\t}\n+\n+\t@Deprecated\n+\tpublic void release() {\n+\t\t// do nothing\n+\t}\n+\n }",
    "output": "Ensure Spring `LogFactory` contains all public methods from Apache `LogFactory`"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n@@ -133,13 +133,15 @@ public UrlPathHelper getUrlPathHelper() {\n \n \n \t@Override\n+\t@Nullable\n \tprotected Resource resolveResourceInternal(@Nullable HttpServletRequest request, String requestPath,\n \t\t\tList<? extends Resource> locations, ResourceResolverChain chain) {\n \n \t\treturn getResource(requestPath, request, locations);\n \t}\n \n \t@Override\n+\t@Nullable\n \tprotected String resolveUrlPathInternal(String resourcePath, List<? extends Resource> locations,\n \t\t\tResourceResolverChain chain) {\n ",
    "output": "Flag PathResourceResolver#resolve*Internal as @Nullable"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java\n@@ -233,7 +233,7 @@ void responseBodyFlux() throws Exception {\n \t}\n \n \t@Test\n-\t@SuppressWarnings({\"try\",\"unused\"})\n+\t@SuppressWarnings({\"try\",\"unused\", \"deprecation\"})\n \tvoid responseBodyFluxWithThreadLocal() throws Exception {\n \t\tthis.request.addHeader(\"Accept\", \"text/event-stream\");\n ",
    "output": "Suppress deprecation warning due to upgrade to context-propagation 1.0.3"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/integration/observability/httpserver/reactive/UserController.java b/framework-docs/src/main/java/org/springframework/docs/integration/observability/httpserver/reactive/UserController.java\n--- a/framework-docs/src/main/java/org/springframework/docs/integration/observability/httpserver/reactive/UserController.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/integration/observability/httpserver/reactive/UserController.java\n@@ -28,7 +28,7 @@ public class UserController {\n \t@ExceptionHandler(MissingUserException.class)\n \tResponseEntity<Void> handleMissingUser(ServerWebExchange exchange, MissingUserException exception) {\n \t\t// We want to record this exception with the observation\n-\t\tServerRequestObservationContext.findCurrent(exchange)\n+\t\tServerRequestObservationContext.findCurrent(exchange.getAttributes())\n \t\t\t\t.ifPresent(context -> context.setError(exception));\n \t\treturn ResponseEntity.notFound().build();\n \t}",
    "output": "Adapt UserController example to current ServerRequestObservationContext"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n--- a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n+++ b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n@@ -26,7 +26,7 @@\n  * GraalVM {@link Feature} that substitutes boolean field values that match a certain pattern\n  * with values pre-computed AOT without causing class build-time initialization.\n  *\n- * <p>It is possible to pass <pre style=\"code\">-Dspring.aot.precompute=verbose</pre> as a\n+ * <p>It is possible to pass <pre style=\"code\">-Dspring.native.precompute.log=verbose</pre> as a\n  * <pre style=\"code\">native-image</pre> compiler build argument to display detailed logs\n  * about pre-computed fields.</p>\n  *\n@@ -36,7 +36,7 @@\n  */\n class PreComputeFieldFeature implements Feature {\n \n-\tprivate static final boolean verbose = \"verbose\".equals(System.getProperty(\"spring.aot.precompute\"));\n+\tprivate static final boolean verbose = \"verbose\".equals(System.getProperty(\"spring.native.precompute.log\"));\n \n \tprivate static final Pattern[] patterns = {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.core.NativeDetector#inNativeImage\")),",
    "output": "Use spring.native.precompute.log system property This commit changes the Java system property used to control PreComputeFieldFeature verbose logging from spring.aot.precompute to spring.native.precompute.log in order to clarify its purpose and avoid confusion with AOT processing of JVM bytecode or Java sources"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/JettyClientHttpRequest.java\n@@ -95,7 +95,11 @@ protected ClientHttpResponse executeInternal(HttpHeaders headers, @Nullable Body\n \t\t\tResponse response = responseListener.get(TimeUnit.MILLISECONDS.convert(this.timeOut), TimeUnit.MILLISECONDS);\n \t\t\treturn new JettyClientHttpResponse(response, responseListener.getInputStream());\n \t\t}\n-\t\tcatch (InterruptedException | TimeoutException | ExecutionException ex) {\n+\t\tcatch (InterruptedException ex) {\n+\t\t\tThread.currentThread().interrupt();\n+\t\t\tthrow new IOException(\"Request was interrupted: \" + ex.getMessage(), ex);\n+\t\t}\n+\t\tcatch (TimeoutException | ExecutionException ex) {\n \t\t\tthrow new IOException(\"Could not send request: \" + ex.getMessage(), ex);\n \t\t}\n \t}",
    "output": "Polishing Restore thread interrupted status in JettyClientHttpRequest"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -508,14 +508,14 @@ public NoContentLengthResponseWrapper(HttpServletResponse response) {\n \n \t\t\t@Override\n \t\t\tpublic void addIntHeader(String name, int value) {\n-\t\t\t\tif (name!=null && !HttpHeaders.CONTENT_LENGTH.equals(name)) {\n+\t\t\t\tif (!HttpHeaders.CONTENT_LENGTH.equals(name)) {\n \t\t\t\t\tsuper.addIntHeader(name, value);\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void addHeader(String name, String value) {\n-\t\t\t\tif (name!= null && !HttpHeaders.CONTENT_LENGTH.equals(name)) {\n+\t\t\t\tif (!HttpHeaders.CONTENT_LENGTH.equals(name)) {\n \t\t\t\t\tsuper.addHeader(name, value);\n \t\t\t\t}\n \t\t\t}",
    "output": "Polishing external contribution"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java\n@@ -941,6 +941,7 @@ public static String nullSafeConciseToString(@Nullable Object obj) {\n \n \t/**\n \t * Derived from {@link org.springframework.beans.BeanUtils#isSimpleValueType}.\n+\t * As of 5.3.28, considering {@code UUID} in addition to the bean-level check.\n \t */\n \tprivate static boolean isSimpleValueType(Class<?> type) {\n \t\treturn (Void.class != type && void.class != type &&\n@@ -950,7 +951,7 @@ private static boolean isSimpleValueType(Class<?> type) {\n \t\t\t\tNumber.class.isAssignableFrom(type) ||\n \t\t\t\tDate.class.isAssignableFrom(type) ||\n \t\t\t\tTemporal.class.isAssignableFrom(type) ||\n-\t\t\t\tUUID.class.isAssignableFrom(type) ||\n+\t\t\t\tUUID.class == type ||\n \t\t\t\tURI.class == type ||\n \t\t\t\tURL.class == type ||\n \t\t\t\tLocale.class == type ||",
    "output": "Align with 5.3.28 javadoc for isSimpleValueType"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n@@ -513,6 +513,7 @@ public ResolvableType getReturnType() {\n \n \tprivate static class ContextSnapshotHelper {\n \n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic static Object writeReactorContext(Object returnValue) {\n \t\t\tif (Mono.class.isAssignableFrom(returnValue.getClass())) {\n \t\t\t\tContextSnapshot snapshot = ContextSnapshot.captureAll();",
    "output": "Upgrade to Micrometer BOM 1.10.8 and context-propagation 1.0.3 Cloes"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -196,6 +196,7 @@ private Object applyConversion(@Nullable Object value, NamedValueInfo namedValue\n \t\t\tthrow new ServerErrorException(\"Conversion not supported.\", parameter, ex);\n \t\t}\n \t\tcatch (TypeMismatchException ex) {\n+\t\t\tex.initPropertyName(namedValueInfo.name);\n \t\t\tthrow new ServerWebInputException(\"Type mismatch.\", parameter, ex);\n \t\t}\n \t\treturn value;",
    "output": "Initialize propertyName in TypeMismatchException"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/AbstractDirtiesContextTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/support/AbstractDirtiesContextTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/AbstractDirtiesContextTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractDirtiesContextTestExecutionListener.java\n@@ -48,7 +48,7 @@\n  */\n public abstract class AbstractDirtiesContextTestExecutionListener extends AbstractTestExecutionListener {\n \n-\tprivate static final Log logger = LogFactory.getLog(AbstractDirtiesContextTestExecutionListener.class);\n+\tprivate final Log logger = LogFactory.getLog(getClass());\n \n \n \t@Override",
    "output": "Configure logger per concrete @DirtiesContext TestExecutionListener"
  },
  {
    "input": "diff --git a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n--- a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n+++ b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n@@ -45,7 +45,7 @@ public String one() {\n \t\t@Bean\n \t\t@Qualifier(\"2\")\n \t\tpublic String two() {\n-\t\t\treturn \"one\";\n+\t\t\treturn \"two\";\n \t\t}\n \n \t}",
    "output": "Fix test fixture value in QualifierConfiguration"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -156,9 +156,7 @@ public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewC\n \tprotected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,\n \t\t\tType paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {\n \n-\t\tHttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n-\t\tAssert.state(servletRequest != null, \"No HttpServletRequest\");\n-\t\tServletServerHttpRequest inputMessage = new ServletServerHttpRequest(servletRequest);\n+\t\tServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n \n \t\tObject arg = readWithMessageConverters(inputMessage, parameter, paramType);\n \t\tif (arg == null && checkRequired(parameter)) {",
    "output": "Remove duplicate code in RequestResponseBodyMethodProcessor"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -1067,10 +1067,11 @@ private Mono<Void> completeTransactionAfterThrowing(@Nullable ReactiveTransactio\n \t\t * @param ex the throwable to try to unwrap\n \t\t */\n \t\tprivate Throwable unwrapIfResourceCleanupFailure(Throwable ex) {\n-\t\t\tif (ex instanceof RuntimeException &&\n-\t\t\t\t\tex.getCause() != null &&\n-\t\t\t\t\tex.getMessage().startsWith(\"Async resource cleanup failed\")) {\n-\t\t\t\treturn ex.getCause();\n+\t\t\tif (ex instanceof RuntimeException && ex.getCause() != null) {\n+\t\t\t\tString msg = ex.getMessage();\n+\t\t\t\tif (msg != null && msg.startsWith(\"Async resource cleanup failed\")) {\n+\t\t\t\t\treturn ex.getCause();\n+\t\t\t\t}\n \t\t\t}\n \t\t\treturn ex;\n \t\t}",
    "output": "Ignore null message when introspecting resource cleanup failure"
  },
  {
    "input": "diff --git a/spring-jcl/src/main/java/org/apache/commons/logging/LogFactoryService.java b/spring-jcl/src/main/java/org/apache/commons/logging/LogFactoryService.java\n--- a/spring-jcl/src/main/java/org/apache/commons/logging/LogFactoryService.java\n+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogFactoryService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,6 +36,12 @@ public class LogFactoryService extends LogFactory {\n \tprivate final Map<String, Object> attributes = new ConcurrentHashMap<>();\n \n \n+\tpublic LogFactoryService() {\n+\t\tSystem.out.println(\"Standard Commons Logging discovery in action with spring-jcl: \" +\n+\t\t\t\t\"please remove commons-logging.jar from classpath in order to avoid potential conflicts\");\n+\t}\n+\n+\n \t@Override\n \tpublic Log getInstance(Class<?> clazz) {\n \t\treturn getInstance(clazz.getName());",
    "output": "Log warning in case of standard Commons Logging discovery"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java b/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java\n@@ -75,7 +75,9 @@ public MethodArgumentNotValidException(MethodParameter parameter, BindingResult\n \t * @param executable the executable that failed validation\n \t * @param bindingResult the results of the validation\n \t * @since 6.0.5\n+\t * @deprecated in favor of {@link #MethodArgumentNotValidException(MethodParameter, BindingResult)}\n \t */\n+\t@Deprecated(since = \"6.0.10\", forRemoval = true)\n \tpublic MethodArgumentNotValidException(Executable executable, BindingResult bindingResult) {\n \t\tsuper(bindingResult);\n \t\tthis.parameter = null;\n\ndiff --git a/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java\n--- a/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java\n@@ -341,7 +341,7 @@ public Object getTarget() {\n \t\t\t\tBindingResult result = binder.getBindingResult();\n \t\t\t\tObjectError error = new ObjectError(ctor.getName(), cause.getMessage());\n \t\t\t\tresult.addError(error);\n-\t\t\t\tthrow new MethodArgumentNotValidException(ctor, result);\n+\t\t\t\tthrow new MethodArgumentNotValidException(parameter, result);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthrow ex;",
    "output": "Always use MethodArgumentNotValidException(MethodParameter, BindingResult) constructor introduced a new MethodArgumentNotValidException(Executable, BindingResult) constructor that can be advantageously replaced by using MethodArgumentNotValidException(MethodParameter, BindingResult) in ModelAttributeMethodProcessor. This commit updates ModelAttributeMethodProcessor accordingly, and deprecates MethodArgumentNotValidException(Executable, BindingResult) in favor of MethodArgumentNotValidException(MethodParameter, BindingResult)"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -165,6 +165,9 @@ private Map<String, Object> buildJpaPropertyMap(boolean connectionReleaseOnClose\n \t\t\t\t\tPhysicalConnectionHandlingMode.DELAYED_ACQUISITION_AND_HOLD);\n \t\t}\n \n+\t\t// For SpringBeanContainer to be called on Hibernate 6.2\n+\t\tjpaProperties.put(\"hibernate.cdi.extensions\", \"true\");\n+\n \t\treturn jpaProperties;\n \t}\n ",
    "output": "Set hibernate.cdi.extensions (for SpringBeanContainer on Hibernate 6.2)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -807,14 +807,12 @@ public Builder name(String name) {\n \n \t\t@Override\n \t\tpublic Builder filename(String filename) {\n-\t\t\tAssert.hasText(filename, \"No filename\");\n \t\t\tthis.filename = filename;\n \t\t\treturn this;\n \t\t}\n \n \t\t@Override\n \t\tpublic Builder filename(String filename, Charset charset) {\n-\t\t\tAssert.hasText(filename, \"No filename\");\n \t\t\tthis.filename = filename;\n \t\t\tthis.charset = charset;\n \t\t\treturn this;",
    "output": "Remove non-empty filename check in ContentDisposition builder This commit ensures that the ContentDisposition.Builder is consistent with ContentDisposition and accepts null/empty filenames"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java\n--- a/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java\n@@ -25,8 +25,6 @@\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n-import org.reactivestreams.Subscription;\n-import reactor.core.publisher.BaseSubscriber;\n import reactor.core.publisher.Flux;\n import reactor.test.StepVerifier;\n \n@@ -268,13 +266,4 @@ private DataBuffer stringBuffer(String value) {\n \t\treturn buffer;\n \t}\n \n-\n-\tprivate static class SingleRequestSubscriber extends BaseSubscriber<String> {\n-\n-\t\t@Override\n-\t\tprotected void hookOnSubscribe(Subscription subscription) {\n-\t\t\tsubscription.request(1);\n-\t\t}\n-\t}\n-\n }",
    "output": "Delete unused code"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java\n@@ -244,6 +244,7 @@ private void compile(RegisteredBean registeredBean,\n \n \tstatic class InjectionBean {\n \n+\t\t@SuppressWarnings(\"unused\")\n \t\tprivate Integer counter;\n \n \t\t@Autowired\n\ndiff --git a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n--- a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n+++ b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/QualifierConfiguration.java\n@@ -24,6 +24,7 @@\n @Configuration(proxyBeanMethods = false)\n public class QualifierConfiguration {\n \n+\t@SuppressWarnings(\"unused\")\n \tprivate String bean;\n \n \t@Autowired",
    "output": "Suppress unused warnings in tests"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java\n@@ -48,6 +48,7 @@ class SpringHibernateJpaPersistenceProvider extends HibernatePersistenceProvider\n \tstatic {\n \t\tif (NativeDetector.inNativeImage()) {\n \t\t\tSystem.setProperty(Environment.BYTECODE_PROVIDER, Environment.BYTECODE_PROVIDER_NAME_NONE);\n+\t\t\tSystem.setProperty(Environment.USE_REFLECTION_OPTIMIZER, Boolean.FALSE.toString());\n \t\t}\n \t}\n ",
    "output": "Disable Hibernate reflection optimizer with native"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java\n@@ -22,6 +22,7 @@\n \n import jakarta.persistence.EntityManagerFactory;\n import jakarta.persistence.spi.PersistenceUnitInfo;\n+import org.hibernate.bytecode.enhance.spi.EnhancementContext;\n import org.hibernate.cfg.Configuration;\n import org.hibernate.cfg.Environment;\n import org.hibernate.jpa.HibernatePersistenceProvider;\n@@ -63,6 +64,13 @@ public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitI\n \t\t\t\t\tpublic List<String> getManagedClassNames() {\n \t\t\t\t\t\treturn mergedClassesAndPackages;\n \t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void pushClassTransformer(EnhancementContext enhancementContext) {\n+\t\t\t\t\t\tif (!NativeDetector.inNativeImage()) {\n+\t\t\t\t\t\t\tsuper.pushClassTransformer(enhancementContext);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}, properties).build();\n \t}\n ",
    "output": "Skip class transformer in PersistenceUnitInfoDescriptor for native images In order to restore native support with Hibernate 6.2, this change updates the PersistenceUnitInfoDescriptor instance created by SpringHibernateJpaPersistenceProvider in order to skip the class transformer for native images"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanRegistrationAotContributionTests.java\n@@ -244,6 +244,7 @@ private void compile(RegisteredBean registeredBean,\n \n \tstatic class InjectionBean {\n \n+\t\t@SuppressWarnings(\"unused\")\n \t\tprivate Integer counter;\n \n \t\t@Autowired",
    "output": "Suppress unused warning in test"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.messaging.simp.stomp;\n \n-import org.junit.jupiter.api.Disabled;\n-\n import org.springframework.messaging.tcp.TcpOperations;\n import org.springframework.messaging.tcp.reactor.ReactorNetty2TcpClient;\n \n@@ -27,7 +25,6 @@\n  *\n  * @author Rossen Stoyanchev\n  */\n-@Disabled(\"gh-29287 :: Disabled because they fail too frequently\")\n public class ReactorNetty2StompBrokerRelayIntegrationTests extends AbstractStompBrokerRelayIntegrationTests {\n \n \t@Override",
    "output": "Re-enable flaky tests after bd66c70b"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/TypeUtils.java b/spring-core/src/main/java/org/springframework/util/TypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/TypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/TypeUtils.java\n@@ -37,6 +37,7 @@\n public abstract class TypeUtils {\n \n \tprivate static final Type[] IMPLICIT_LOWER_BOUNDS = { null };\n+\n \tprivate static final Type[] IMPLICIT_UPPER_BOUNDS = { Object.class };\n \n \t/**",
    "output": "Introduce internal constants for implicit bounds in TypeUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/TypeUtils.java b/spring-core/src/main/java/org/springframework/util/TypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/TypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/TypeUtils.java\n@@ -36,6 +36,9 @@\n  */\n public abstract class TypeUtils {\n \n+\tprivate static final Type[] IMPLICIT_LOWER_BOUNDS = { null };\n+\tprivate static final Type[] IMPLICIT_UPPER_BOUNDS = { Object.class };\n+\n \t/**\n \t * Check if the right-hand side type may be assigned to the left-hand side\n \t * type following the Java generics rules.\n@@ -196,20 +199,14 @@ private static Type[] getLowerBounds(WildcardType wildcardType) {\n \t\tType[] lowerBounds = wildcardType.getLowerBounds();\n \n \t\t// supply the implicit lower bound if none are specified\n-\t\tif (lowerBounds.length == 0) {\n-\t\t\tlowerBounds = new Type[] { null };\n-\t\t}\n-\t\treturn lowerBounds;\n+\t\treturn (lowerBounds.length == 0 ? IMPLICIT_LOWER_BOUNDS : lowerBounds);\n \t}\n \n \tprivate static Type[] getUpperBounds(WildcardType wildcardType) {\n \t\tType[] upperBounds = wildcardType.getUpperBounds();\n \n \t\t// supply the implicit upper bound if none are specified\n-\t\tif (upperBounds.length == 0) {\n-\t\t\tupperBounds = new Type[] { Object.class };\n-\t\t}\n-\t\treturn upperBounds;\n+\t\treturn (upperBounds.length == 0 ? IMPLICIT_UPPER_BOUNDS : upperBounds);\n \t}\n \n \tpublic static boolean isAssignableBound(@Nullable Type lhsType, @Nullable Type rhsType) {",
    "output": "Introduce internal constants for implicit bounds in TypeUtils"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -63,7 +63,7 @@ private static void configureNoHttpPlugin(Project project) {\n \t\tNoHttpExtension noHttp = project.getExtensions().getByType(NoHttpExtension.class);\n \t\tnoHttp.setAllowlistFile(project.file(\"src/nohttp/allowlist.lines\"));\n \t\tnoHttp.getSource().exclude(\"**/test-output/**\", \"**/.settings/**\",\n-\t\t\t\t\"**/.classpath\", \"**/.project\");\n+\t\t\t\t\"**/.classpath\", \"**/.project\", \"**/.gradle/**\");\n \t\tList<String> buildFolders = List.of(\"bin\", \"build\", \"out\");\n \t\tproject.allprojects(subproject -> {\n \t\t\tPath rootPath = project.getRootDir().toPath();",
    "output": "nohttp exclude **/.gradle/**"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.messaging.simp.stomp;\n \n+import org.junit.jupiter.api.Disabled;\n+\n import org.springframework.messaging.tcp.TcpOperations;\n import org.springframework.messaging.tcp.reactor.ReactorNetty2TcpClient;\n \n@@ -25,6 +27,7 @@\n  *\n  * @author Rossen Stoyanchev\n  */\n+@Disabled(\"gh-29287 :: Disabled because they fail too frequently\")\n public class ReactorNetty2StompBrokerRelayIntegrationTests extends AbstractStompBrokerRelayIntegrationTests {\n \n \t@Override",
    "output": "Disable flaky ReactorNetty2StompBrokerRelayIntegrationTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -43,6 +43,7 @@\n import org.springframework.context.LifecycleProcessor;\n import org.springframework.context.Phased;\n import org.springframework.context.SmartLifecycle;\n+import org.springframework.core.NativeDetector;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n@@ -79,7 +80,7 @@ public class DefaultLifecycleProcessor implements LifecycleProcessor, BeanFactor\n \n \n \tpublic DefaultLifecycleProcessor() {\n-\t\tif (ClassUtils.isPresent(\"org.crac.Core\", getClass().getClassLoader())) {\n+\t\tif (!NativeDetector.inNativeImage() && ClassUtils.isPresent(\"org.crac.Core\", getClass().getClassLoader())) {\n \t\t\tthis.cracResource = new CracDelegate().registerResource();\n \t\t}\n \t}",
    "output": "Skip CRaC support with native images Skip CRaC support with native images to avoid compiling related infrastructure to the native image and to fix tests via"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java b/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/hint/RuntimeHintsAgentPlugin.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n  * {@link Plugin} that configures the {@code RuntimeHints} Java agent to test tasks.\n  *\n  * @author Brian Clozel\n+ * @author Sebastien Deleuze\n  */\n public class RuntimeHintsAgentPlugin implements Plugin<Project> {\n \n@@ -45,6 +46,7 @@ public void apply(Project project) {\n \t\t\t\t});\n \t\t\t\ttest.include(\"**/*Tests.class\", \"**/*Test.class\");\n \t\t\t\ttest.systemProperty(\"java.awt.headless\", \"true\");\n+\t\t\t\ttest.systemProperty(\"org.graalvm.nativeimage.imagecode\", \"runtime\");\n \t\t\t});\n \t\t\tproject.afterEvaluate(p -> {\n \t\t\t\tJar jar = project.getRootProject().project(\"spring-core-test\").getTasks().withType(Jar.class).named(\"jar\").get();",
    "output": "Upgrade RuntimeHintsAgentPlugin to use the native image code path RuntimeHintsAgentPlugin purpose is to verify that the reflective invocations expected match the ones performed. introduces a code path where the reflective invocation is skipped when running on native. This issue set the system property \"org.graalvm.nativeimage.imagecode\" to \"runtime\" when running runtime tests with the agent in order to make sure the code path tested for those tests is the native one"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n@@ -404,12 +404,12 @@ protected PropertiesHolder getProperties(String filename) {\n \t * (potentially getting re-validated against the current last-modified timestamp).\n \t * @param filename the bundle filename (basename + Locale)\n \t * @param propHolder the current PropertiesHolder for the bundle\n-\t * @see #determineResource(String)\n+\t * @see #resolveResource(String)\n \t */\n \tprotected PropertiesHolder refreshProperties(String filename, @Nullable PropertiesHolder propHolder) {\n \t\tlong refreshTimestamp = (getCacheMillis() < 0 ? -1 : System.currentTimeMillis());\n \n-\t\tResource resource = determineResource(filename);\n+\t\tResource resource = resolveResource(filename);\n \t\tif (resource.exists()) {\n \t\t\tlong fileTimestamp = -1;\n \t\t\tif (getCacheMillis() >= 0) {\n@@ -490,7 +490,7 @@ protected PropertiesHolder refreshProperties(String filename, @Nullable Properti\n \t * @return the {@code Resource} to use\n \t * @since 6.1\n \t */\n-\tprotected Resource determineResource(String filename) {\n+\tprotected Resource resolveResource(String filename) {\n \t\tResource propertiesResource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX);\n \t\tif (propertiesResource.exists()) {\n \t\t\treturn propertiesResource;",
    "output": "Rename determineResourceto resolveResource"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -27,6 +27,7 @@\n import org.gradle.api.plugins.quality.CheckstyleExtension;\n import org.gradle.api.plugins.quality.CheckstylePlugin;\n \n+import java.io.File;\n import java.nio.file.Path;\n import java.util.List;\n \n@@ -68,7 +69,8 @@ private static void configureNoHttpPlugin(Project project) {\n \t\t\tPath rootPath = project.getRootDir().toPath();\n \t\t\tPath projectPath = rootPath.relativize(subproject.getProjectDir().toPath());\n \t\t\tfor (String buildFolder : buildFolders) {\n-\t\t\t\tnoHttp.getSource().exclude(projectPath.resolve(buildFolder).resolve(\"**\").toString());\n+\t\t\t\tPath innerBuildDir = projectPath.resolve(buildFolder);\n+\t\t\t\tnoHttp.getSource().exclude(innerBuildDir + File.separator + \"**\");\n \t\t\t}\n \t\t});\n \t}",
    "output": "Fix glob pattern in CheckstyleConventions to be Windows-compatible On windows, the `*` character is not allowed in a directory's name. When trying to append a glob pattern to a `Path` (`path.resolve(\"**\")`), if the underlying `Path.getFileSystem` is windows then an `InvalidPathException` is thrown. The NoHttp plugin doesn't really need a `Path` but a glob `String`, so this commit uses a simple String concatenation in order to append the wildcard part (with the canonical path separator for good measure)"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/CheckstyleConventions.java\n@@ -48,7 +48,7 @@ public void apply(Project project) {\n \t\t\tproject.getPlugins().apply(CheckstylePlugin.class);\n \t\t\tproject.getTasks().withType(Checkstyle.class).forEach(checkstyle -> checkstyle.getMaxHeapSize().set(\"1g\"));\n \t\t\tCheckstyleExtension checkstyle = project.getExtensions().getByType(CheckstyleExtension.class);\n-\t\t\tcheckstyle.setToolVersion(\"10.9.1\");\n+\t\t\tcheckstyle.setToolVersion(\"10.9.3\");\n \t\t\tcheckstyle.getConfigDirectory().set(project.getRootProject().file(\"src/checkstyle\"));\n \t\t\tString version = SpringJavaFormatPlugin.class.getPackage().getImplementationVersion();\n \t\t\tDependencySet checkstyleDependencies = project.getConfigurations().getByName(\"checkstyle\").getDependencies();",
    "output": "Upgrade to Checkstyle 10.9.3 again Commit ed4404f350 inadvertently switched back to 10.9.1"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/JavaConventions.java b/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n--- a/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n+++ b/buildSrc/src/main/java/org/springframework/build/JavaConventions.java\n@@ -24,7 +24,9 @@\n import org.gradle.api.Project;\n import org.gradle.api.plugins.JavaBasePlugin;\n import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.plugins.JavaPluginExtension;\n import org.gradle.api.tasks.compile.JavaCompile;\n+import org.gradle.jvm.toolchain.JavaLanguageVersion;\n \n /**\n  * {@link Plugin} that applies conventions for compiling Java sources in Spring Framework.\n@@ -68,6 +70,8 @@ public void apply(Project project) {\n \t * @param project the current project\n \t */\n \tprivate void applyJavaCompileConventions(Project project) {\n+\t\tproject.getExtensions().getByType(JavaPluginExtension.class)\n+\t\t\t\t.getToolchain().getLanguageVersion().set(JavaLanguageVersion.of(17));\n \t\tproject.getTasks().withType(JavaCompile.class)\n \t\t\t\t.matching(compileTask -> compileTask.getName().equals(JavaPlugin.COMPILE_JAVA_TASK_NAME))\n \t\t\t\t.forEach(compileTask -> {",
    "output": "Refactor toolchain support in Gradle build This commit removes the `-PmainToolchain` option from our build, since it was not broadly used. Instead, the language level is now configured in the `JavaConventions` for JDK 17. The `-PtestToolchain` option is still available for testing Spring Framework with other JDKs (i.e., compiling and running tests with a JDK that's not the baseline)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -54,8 +54,7 @@ public class RestClientResponseException extends RestClientException {\n \tprivate final String responseCharset;\n \n \t@Nullable\n-\t@SuppressWarnings(\"serial\")\n-\tprivate Function<ResolvableType, ?> bodyConvertFunction;\n+\tprivate transient Function<ResolvableType, ?> bodyConvertFunction;\n \n \n \t/**\n\ndiff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java\n@@ -58,7 +58,6 @@ public class WebClientResponseException extends WebClientException {\n \t@Nullable\n \tprivate transient final HttpRequest request;\n \n-\t@SuppressWarnings(\"MutableException\")\n \t@Nullable\n \tprivate transient Function<ResolvableType, ?> bodyDecodeFunction;\n ",
    "output": "Ensure RestClientResponseException is serializable"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -465,7 +465,9 @@ else if (StompCommand.CONNECTED.equals(command)) {\n \t\t}\n \n \t\tif (StompCommand.ERROR.equals(command) && getErrorHandler() != null) {\n-\t\t\tMessage<byte[]> errorMessage = getErrorHandler().handleErrorMessageToClient((Message<byte[]>) message);\n+\t\t\tMessage<byte[]> enrichedMessage =\n+\t\t\t\t\tMessageBuilder.createMessage((byte[]) message.getPayload(), accessor.getMessageHeaders());\n+\t\t\tMessage<byte[]> errorMessage = getErrorHandler().handleErrorMessageToClient(enrichedMessage);\n \t\t\tif (errorMessage != null) {\n \t\t\t\taccessor = MessageHeaderAccessor.getAccessor(errorMessage, StompHeaderAccessor.class);\n \t\t\t\tAssert.state(accessor != null, \"No StompHeaderAccessor\");",
    "output": "Ensure WebSocket disconnect msg reaches the client In some application setups, the WebSocket server does not transmit the disconnect message to the client, so that the client has no idea that the established connection has been terminated. This issue arises when the application uses SimpleBrokerMessageHandler and the error handler is set to the instance of StompSubProtocolErrorHandler or an extended class that does not override the handleErrorMessageToClient method. The commit fixes disconnect message population so that `java.lang.IllegalArgumentException: No StompHeaderAccessor` exception is not thrown in the handleErrorMessageToClient method in StompSubProtocolErrorHandler class"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadMethodArgumentResolver.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadMethodArgumentResolver.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadMethodArgumentResolver.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadMethodArgumentResolver.java\n@@ -136,11 +136,7 @@ public Object resolveArgument(MethodParameter parameter, Message<?> message) thr\n \n \t\tClass<?> targetClass = resolveTargetClass(parameter, message);\n \t\tClass<?> payloadClass = payload.getClass();\n-\t\tif (ClassUtils.isAssignable(targetClass, payloadClass)) {\n-\t\t\tvalidate(message, parameter, payload);\n-\t\t\treturn (isOptionalTargetClass ? Optional.of(payload) : payload);\n-\t\t}\n-\t\telse {\n+\t\tif (!ClassUtils.isAssignable(targetClass, payloadClass)) {\n \t\t\tif (this.converter instanceof SmartMessageConverter smartConverter) {\n \t\t\t\tpayload = smartConverter.fromMessage(message, targetClass, parameter);\n \t\t\t}\n@@ -151,9 +147,9 @@ public Object resolveArgument(MethodParameter parameter, Message<?> message) thr\n \t\t\t\tthrow new MessageConversionException(message, \"Cannot convert from [\" +\n \t\t\t\t\t\tpayloadClass.getName() + \"] to [\" + targetClass.getName() + \"] for \" + message);\n \t\t\t}\n-\t\t\tvalidate(message, parameter, payload);\n-\t\t\treturn (isOptionalTargetClass ? Optional.of(payload) : payload);\n \t\t}\n+\t\tvalidate(message, parameter, payload);\n+\t\treturn (isOptionalTargetClass ? Optional.of(payload) : payload);\n \t}\n \n \tprivate String getParameterName(MethodParameter param) {",
    "output": "Minor refactoring in PayloadMethodArgumentResolver"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n@@ -236,7 +236,9 @@ public void destroy() {\n \t\t}\n \t\telse if (this.destroyMethods != null) {\n \t\t\tfor (Method destroyMethod : this.destroyMethods) {\n-\t\t\t\tinvokeCustomDestroyMethod(destroyMethod);\n+\t\t\t\tif (destroyMethod != null) {\n+\t\t\t\t\tinvokeCustomDestroyMethod(destroyMethod);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\telse if (this.destroyMethodNames != null) {",
    "output": "Ignore nonexistent default-destroy-method in XML config Prior to this commit, DisposableBeanAdapter attempted to invoke a configured default-destroy-method on every bean, including beans that do not declare the named destroy method, resulting in a NullPointerException being thrown and logged at WARN level. This commit addresses this by effectively ignoring any nonexistent destroy method"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -821,6 +821,7 @@ void nullSafeConciseToStringForStrings() {\n \t\t\tString repeat100 = \"X\".repeat(100);\n \t\t\tString repeat101 = \"X\".repeat(101);\n \n+\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(\"\")).isEqualTo(\"\");\n \t\t\tassertThat(ObjectUtils.nullSafeConciseToString(\"foo\")).isEqualTo(\"foo\");\n \t\t\tassertThat(ObjectUtils.nullSafeConciseToString(repeat100)).isEqualTo(repeat100);\n \t\t\tassertThat(ObjectUtils.nullSafeConciseToString(repeat101)).hasSize(truncatedLength).endsWith(truncated);\n\ndiff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -771,6 +771,7 @@ void truncatePreconditions() {\n \n \t@ParameterizedTest\n \t@CsvSource(delimiterString = \"-->\", textBlock = \"\"\"\n+\t\t\t''                  --> ''\n \t\t\taardvark            --> aardvark\n \t\t\taardvark12          --> aardvark12\n \t\t\taardvark123         --> aardvark12 (truncated)...",
    "output": "Add tests for corner cases"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -341,8 +341,9 @@ protected static Map<String, List<String>> loadFactoriesResource(ClassLoader cla\n \t\t\t\tUrlResource resource = new UrlResource(urls.nextElement());\n \t\t\t\tProperties properties = PropertiesLoaderUtils.loadProperties(resource);\n \t\t\t\tproperties.forEach((name, value) -> {\n-\t\t\t\t\tList<String> implementations = result.computeIfAbsent(((String) name).trim(), key -> new ArrayList<>());\n-\t\t\t\t\tArrays.stream(StringUtils.commaDelimitedListToStringArray((String) value))\n+\t\t\t\t\tString[] factoryImplementationNames= StringUtils.commaDelimitedListToStringArray((String) value);\n+\t\t\t\t\tList<String> implementations = result.computeIfAbsent(((String) name).trim(), key -> new ArrayList<>(factoryImplementationNames.length));\n+\t\t\t\t\tArrays.stream(factoryImplementationNames)\n \t\t\t\t\t\t\t.map(String::trim).forEach(implementations::add);\n \t\t\t\t});\n \t\t\t}",
    "output": "Specify initial capacity when creating ArrayList in SpringFactoriesLoader"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/aot/hint/BindingReflectionHintsRegistrarTests.java b/spring-core/src/test/java/org/springframework/aot/hint/BindingReflectionHintsRegistrarTests.java\n--- a/spring-core/src/test/java/org/springframework/aot/hint/BindingReflectionHintsRegistrarTests.java\n+++ b/spring-core/src/test/java/org/springframework/aot/hint/BindingReflectionHintsRegistrarTests.java\n@@ -43,7 +43,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-public class BindingReflectionHintsRegistrarTests {\n+class BindingReflectionHintsRegistrarTests {\n \n \tprivate final BindingReflectionHintsRegistrar bindingRegistrar = new BindingReflectionHintsRegistrar();\n \n@@ -410,6 +410,7 @@ public SampleRecordWithJacksonCustomStrategy build() {\n \n \t}\n \n+\t@SuppressWarnings(\"serial\")\n \tstatic class CustomDeserializer1 extends StdDeserializer<LocalDate> {\n \n \t\tpublic CustomDeserializer1() {\n@@ -422,6 +423,7 @@ public LocalDate deserialize(JsonParser p, DeserializationContext ctxt) throws I\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"serial\")\n \tstatic class CustomDeserializer2 extends StdDeserializer<LocalDate> {\n \n \t\tpublic CustomDeserializer2() {",
    "output": "Suppress warnings displayed in Gradle build for test source code"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -433,9 +433,7 @@ public <V> Flux<V> exchangeToFlux(Function<ClientResponse, ? extends Flux<V>> re\n \t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic Mono<ClientResponse> exchange() {\n \t\t\tClientRequestObservationContext observationContext = new ClientRequestObservationContext();\n-\t\t\tClientRequest.Builder requestBuilder = this.inserter != null ?\n-\t\t\t\t\tinitRequestBuilder().body(this.inserter) :\n-\t\t\t\t\tinitRequestBuilder();\n+\t\t\tClientRequest.Builder requestBuilder = initRequestBuilder();\n \t\t\treturn Mono.deferContextual(contextView -> {\n \t\t\t\tObservation observation = ClientHttpObservationDocumentation.HTTP_REACTIVE_CLIENT_EXCHANGES.observation(observationConvention,\n \t\t\t\t\t\tDEFAULT_OBSERVATION_CONVENTION, () -> observationContext, observationRegistry);\n@@ -479,6 +477,9 @@ private ClientRequest.Builder initRequestBuilder() {\n \t\t\tif (this.httpRequestConsumer != null) {\n \t\t\t\tbuilder.httpRequest(this.httpRequestConsumer);\n \t\t\t}\n+\t\t\tif (this.inserter != null) {\n+\t\t\t\tbuilder.body(this.inserter);\n+\t\t\t}\n \t\t\treturn builder;\n \t\t}\n ",
    "output": "Refine initRequestBuilder in DefaultWebClient"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java b/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/support/ObjectToObjectConverterRuntimeHints.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -43,6 +43,9 @@ public void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader)\n \t\t\t\t.onReachableType(sqlDateTypeReference)\n \t\t\t\t.withMethod(\"valueOf\", List.of(TypeReference.of(LocalDate.class)), ExecutableMode.INVOKE)\n \t\t\t\t.onReachableType(sqlDateTypeReference));\n+\n+\t\thints.reflection().registerTypeIfPresent(classLoader, \"org.springframework.http.HttpMethod\",\n+\t\t\t\tbuilder -> builder.withMethod(\"valueOf\", List.of(TypeReference.of(String.class)), ExecutableMode.INVOKE));\n \t}\n \n }",
    "output": "Add HttpMethod reflection hint to ObjectToObjectConverterRuntimeHints This commit adds a reflection hint for HttpMethod#valueOf in order to be able to support conversion required for Spring Boot configuration properties binding as described in https://github.com/spring-projects/spring-boot/issues/34483"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n--- a/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -188,17 +188,17 @@ private void doTestMetadataForAnnotationClass(AnnotationMetadata metadata) {\n \t * 'true' as is done in the main test above.\n \t */\n \t@Test\n-\t@Deprecated\n \tvoid standardAnnotationMetadata_nestedAnnotationsAsMap_false() {\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tAnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class);\n \t\tAnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName());\n \t\tAnnotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get(\"nestedAnnoArray\");\n \t\tassertThat(nestedAnnoArray[0]).isInstanceOf(NestedAnno.class);\n \t}\n \n \t@Test\n-\t@Deprecated\n \tvoid metaAnnotationOverridesUsingStandardAnnotationMetadata() {\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tAnnotationMetadata metadata = new StandardAnnotationMetadata(ComposedConfigurationWithAttributeOverridesClass.class);\n \t\tassertMetaAnnotationOverrides(metadata);\n \t}",
    "output": "Suppress deprecation warnings instead of deprecating tests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n@@ -47,7 +47,7 @@\n  * @author Sam Brannen\n  * @since 5.2.4\n  */\n-@DisabledOnJre(value= {JRE.JAVA_18, JRE.JAVA_19}, disabledReason = \"BlockHound is not compatible with Java 18+\")\n+@DisabledOnJre(value= {JRE.JAVA_18, JRE.JAVA_19, JRE.JAVA_20}, disabledReason = \"BlockHound is not compatible with Java 18+\")\n class SpringCoreBlockHoundIntegrationTests {\n \n \t@BeforeAll",
    "output": "Upgrade Java version for compatibility tests in CI This commit configures Java 20 for compatibility tests in our CI, replacing Java 19"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -430,7 +430,7 @@ else if (targetClass.isInstance(proxy)) {\n \t\t\t\t\t\t\t\t\tentry.setValue(storedProc.getOutputParameterValue(key.toString()));\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\t\t\t\tcatch (RuntimeException ex) {\n \t\t\t\t\t\t\t\tentry.setValue(ex);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}",
    "output": "Handle all exceptions for stored proc out param retrieval in SharedEntityManagerCreator Prior to this commit, the EntityManager was not closed in SharedEntityManagerCreator.DeferredQueryInvocationHandler's invoke(Object, Method, Object[]) method if an invocation of getOutputParameterValue(*) threw an exception other than IllegalArgumentException, which could lead to a connection leak. This commit addresses this by catching RuntimeException instead of IllegalArgumentException"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java b/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java\n--- a/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/LiteralPathElement.java\n@@ -31,6 +31,8 @@ class LiteralPathElement extends PathElement {\n \n \tprivate final char[] text;\n \n+\tprivate final String textString;\n+\n \tprivate final int len;\n \n \tprivate final boolean caseSensitive;\n@@ -50,6 +52,7 @@ public LiteralPathElement(int pos, char[] literalText, boolean caseSensitive, ch\n \t\t\t\tthis.text[i] = Character.toLowerCase(literalText[i]);\n \t\t\t}\n \t\t}\n+\t\tthis.textString = new String(this.text);\n \t}\n \n \n@@ -70,10 +73,9 @@ public boolean matches(int pathIndex, MatchingContext matchingContext) {\n \t\t}\n \n \t\tif (this.caseSensitive) {\n-\t\t\tfor (int i = 0; i < this.len; i++) {\n-\t\t\t\tif (value.charAt(i) != this.text[i]) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n+\t\t\t// This typically uses a JVM intrinsic\n+\t\t\tif (!this.textString.equals(value)) {\n+\t\t\t\treturn false;\n \t\t\t}\n \t\t}\n \t\telse {\n@@ -124,7 +126,7 @@ public boolean isLiteral() {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"Literal(\" + String.valueOf(this.text) + \")\";\n+\t\treturn \"Literal(\" + this.textString + \")\";\n \t}\n \n }",
    "output": "Use String.equalsin LiteralPathElement"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.util;\n \n import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n import java.io.File;\n import java.io.IOException;\n@@ -146,9 +145,9 @@ public static byte[] copyToByteArray(@Nullable InputStream in) throws IOExceptio\n \t\t\treturn new byte[0];\n \t\t}\n \n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);\n-\t\tcopy(in, out);\n-\t\treturn out.toByteArray();\n+\t\ttry (in) {\n+\t\t\treturn in.readAllBytes();\n+\t\t}\n \t}\n \n ",
    "output": "Use InputStream.readAllBytesin FileCopyUtils.copyToByteArrayInputStream.readAllBytesallows us to avoid the creation of an intermediate ByteArrayOutputStream and is likely to perform better"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -29,6 +29,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -791,11 +792,11 @@ private static void copyProperties(Object source, Object target, @Nullable Class\n \t\t\tactualEditable = editable;\n \t\t}\n \t\tPropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);\n-\t\tList<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);\n+\t\tSet<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);\n \n \t\tfor (PropertyDescriptor targetPd : targetPds) {\n \t\t\tMethod writeMethod = targetPd.getWriteMethod();\n-\t\t\tif (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) {\n+\t\t\tif (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {\n \t\t\t\tPropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());\n \t\t\t\tif (sourcePd != null) {\n \t\t\t\t\tMethod readMethod = sourcePd.getReadMethod();",
    "output": "Use Set to track ignored properties in BeanUtils.copyProperties"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartRouterFunctionIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartRouterFunctionIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartRouterFunctionIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartRouterFunctionIntegrationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -163,6 +163,8 @@ void partData(HttpServer httpServer) throws Exception {\n \n \t@ParameterizedHttpServerTest\n \tvoid proxy(HttpServer httpServer) throws Exception {\n+\t\tassumeFalse(httpServer instanceof UndertowHttpServer, \"Undertow currently fails proxying requests\");\n+\n \t\tstartServer(httpServer);\n \n \t\tMono<ResponseEntity<Void>> result = webClient",
    "output": "Disable flaky unit test for undertow"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -51,6 +51,7 @@\n  * @author Juergen Hoeller\n  * @author Stephane Nicoll\n  * @author Sam Brannen\n+ * @author Brian Clozel\n  * @since 4.3\n  * @see CaffeineCache\n  */\n@@ -188,8 +189,13 @@ public Collection<String> getCacheNames() {\n \t@Override\n \t@Nullable\n \tpublic Cache getCache(String name) {\n-\t\treturn this.cacheMap.computeIfAbsent(name, cacheName ->\n-\t\t\t\tthis.dynamic ? createCaffeineCache(cacheName) : null);\n+\t\tif (this.dynamic) {\n+\t\t\tCache cache = this.cacheMap.get(name);\n+\t\t\treturn (cache != null) ? cache : this.cacheMap.computeIfAbsent(name, this::createCaffeineCache);\n+\t\t}\n+\t\telse {\n+\t\t\treturn this.cacheMap.get(name);\n+\t\t}\n \t}\n \n ",
    "output": "Avoid lock contention in CaffeineCacheManager Prior to this commit, using a dynamic `CaffeineCacheManager` would rely on `ConcurrentHashMap#computeIfAbsent` for retrieving and creating cache instances as needed. It turns out that using this method concurrently can cause lock contention even when all known cache instances are instantiated. This commit avoids using this method if the cache instance already exists and avoid storing `null` entries in the map. This change reduces lock contention and the overall HashMap size in the non-dynamic case"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java b/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/service/package-info.java\n@@ -1,9 +0,0 @@\n-/**\n- * Support for an HTTP service proxy created from an interface declaration.\n- */\n-@NonNullApi\n-@NonNullFields\n-package org.springframework.web.reactive.service;\n-\n-import org.springframework.lang.NonNullApi;\n-import org.springframework.lang.NonNullFields;",
    "output": "Remove unused service package"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -340,8 +340,8 @@ private DataSource getDataSourceFromTransactionManager(PlatformTransactionManage\n \t\ttry {\n \t\t\tMethod getDataSourceMethod = transactionManager.getClass().getMethod(\"getDataSource\");\n \t\t\tObject obj = ReflectionUtils.invokeMethod(getDataSourceMethod, transactionManager);\n-\t\t\tif (obj instanceof DataSource) {\n-\t\t\t\treturn (DataSource) obj;\n+\t\t\tif (obj instanceof DataSource dataSource) {\n+\t\t\t\treturn dataSource;\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Apply \"instanceof pattern matching\" in remainder of spring-test module"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -76,17 +76,15 @@ private static URI initUri(HttpServerRequest request) throws URISyntaxException\n \t\treturn new URI(resolveBaseUrl(request) + resolveRequestUri(request));\n \t}\n \n-\tprivate static URI resolveBaseUrl(HttpServerRequest request) throws URISyntaxException {\n-\t\tString scheme = getScheme(request);\n+\tprivate static String resolveBaseUrl(HttpServerRequest request) {\n+\t\tString scheme = request.scheme();\n \t\tint port = request.hostPort();\n-\t\treturn ((scheme.equals(\"http\") || scheme.equals(\"ws\")) && (port != 80)) ||\n-\t\t\t\t((scheme.equals(\"https\") || scheme.equals(\"wss\")) && (port != 443)) ?\n-\t\t\t\tnew URI(scheme, null, request.hostName(), port, null, null, null) :\n-\t\t\t\tnew URI(scheme, request.hostName(), null, null);\n+\t\treturn scheme + \"://\" + request.hostName() + (usePort(scheme, port) ? \":\" + port : \"\");\n \t}\n \n-\tprivate static String getScheme(HttpServerRequest request) {\n-\t\treturn request.scheme();\n+\tprivate static boolean usePort(String scheme, int port) {\n+\t\treturn ((scheme.equals(\"http\") || scheme.equals(\"ws\")) && (port != 80)) ||\n+\t\t\t\t((scheme.equals(\"https\") || scheme.equals(\"wss\")) && (port != 443));\n \t}\n \n \tprivate static String resolveRequestUri(HttpServerRequest request) {",
    "output": "Resolve baseUrl to String vs temporary URI Along the lines of what was suggested in"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/package-info.java\n@@ -0,0 +1,10 @@\n+/**\n+ * Various {@link org.springframework.aop.framework.autoproxy.TargetSourceCreator}\n+ * implementations for use with Spring's AOP auto-proxying support.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.aop.framework.autoproxy.target;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info.java file for autoproxy.target package"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java\n@@ -92,8 +92,7 @@ public List<Advisor> findAdvisorBeans() {\n \t\t\t\t\t}\n \t\t\t\t\tcatch (BeanCreationException ex) {\n \t\t\t\t\t\tThrowable rootCause = ex.getMostSpecificCause();\n-\t\t\t\t\t\tif (rootCause instanceof BeanCurrentlyInCreationException) {\n-\t\t\t\t\t\t\tBeanCreationException bce = (BeanCreationException) rootCause;\n+\t\t\t\t\t\tif (rootCause instanceof BeanCurrentlyInCreationException bce) {\n \t\t\t\t\t\t\tString bceBeanName = bce.getBeanName();\n \t\t\t\t\t\t\tif (bceBeanName != null && this.beanFactory.isCurrentlyInCreation(bceBeanName)) {\n \t\t\t\t\t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "Apply \"instanceof pattern matching\" in BeanFactoryAdvisorRetrievalHelper"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java\n@@ -547,8 +547,8 @@ protected void initTransactionSynchronizationRegistry() {\n \t * @return a corresponding UserTransaction handle\n \t */\n \tprotected UserTransaction buildUserTransaction(TransactionManager transactionManager) {\n-\t\tif (transactionManager instanceof UserTransaction userTransaction) {\n-\t\t\treturn userTransaction;\n+\t\tif (transactionManager instanceof UserTransaction ut) {\n+\t\t\treturn ut;\n \t\t}\n \t\telse {\n \t\t\treturn new UserTransactionAdapter(transactionManager);\n@@ -702,11 +702,11 @@ protected UserTransaction findUserTransaction() {\n \t */\n \t@Nullable\n \tprotected TransactionManager findTransactionManager(@Nullable UserTransaction ut) {\n-\t\tif (ut instanceof TransactionManager transactionManager) {\n+\t\tif (ut instanceof TransactionManager tm) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"JTA UserTransaction object [\" + ut + \"] implements TransactionManager\");\n \t\t\t}\n-\t\t\treturn transactionManager;\n+\t\t\treturn tm;\n \t\t}\n \n \t\t// Check fallback JNDI locations.",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -593,7 +593,7 @@ public List<HttpMethod> getAccessControlAllowMethods() {\n \t\tString value = getFirst(ACCESS_CONTROL_ALLOW_METHODS);\n \t\tif (value != null) {\n \t\t\tString[] tokens = StringUtils.tokenizeToStringArray(value, \",\");\n-\t\t\tList<HttpMethod> result = new ArrayList<>();\n+\t\t\tList<HttpMethod> result = new ArrayList<>(tokens.length);\n \t\t\tfor (String token : tokens) {\n \t\t\t\tHttpMethod method = HttpMethod.valueOf(token);\n \t\t\t\tresult.add(method);",
    "output": "Initialize ArrayList with exact size in HttpHeaders"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/Frame.java b/spring-core/src/main/java/org/springframework/asm/Frame.java\n--- a/spring-core/src/main/java/org/springframework/asm/Frame.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Frame.java\n@@ -367,11 +367,12 @@ private static int getAbstractTypeFromDescriptor(\n             typeValue = REFERENCE_KIND | symbolTable.addType(internalName);\n             break;\n           default:\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\n+                \"Invalid descriptor fragment: \" + buffer.substring(elementDescriptorOffset));\n         }\n         return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue;\n       default:\n-        throw new IllegalArgumentException();\n+        throw new IllegalArgumentException(\"Invalid descriptor: \" + buffer.substring(offset));\n     }\n   }\n ",
    "output": "Latest patch from ASM master"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java\n@@ -145,7 +145,8 @@ public final class CloseStatus implements Serializable {\n \t * client that may be done during normal shutdown.\n \t * @since 4.0.3\n \t */\n-\tpublic static final CloseStatus SESSION_NOT_RELIABLE = new CloseStatus(4500);\n+\tpublic static final CloseStatus SESSION_NOT_RELIABLE = new CloseStatus(4500)\n+\t\t\t.withReason(\"Failed to send message within the configured send limit\");\n \n \n \tprivate final int code;",
    "output": "Set reason for WebSocket CloseStatus.SESSION_NOT_RELIABLE"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -47,6 +47,7 @@\n import org.springframework.web.socket.WebSocketSession;\n import org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator;\n import org.springframework.web.socket.handler.SessionLimitExceededException;\n+import org.springframework.web.socket.handler.WebSocketSessionDecorator;\n import org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession;\n import org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession;\n \n@@ -669,6 +670,7 @@ void incrementTransportError() {\n \t\t}\n \n \t\tAtomicInteger getCountFor(WebSocketSession session) {\n+\t\t\tsession = WebSocketSessionDecorator.unwrap(session);\n \t\t\tif (session instanceof PollingSockJsSession) {\n \t\t\t\treturn this.httpPolling;\n \t\t\t}",
    "output": "Unwrap session before selecting stats counter"
  },
  {
    "input": "diff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -101,9 +101,6 @@ public class MockHttpServletRequest implements HttpServletRequest {\n \n \tprivate static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n \n-\tprivate static final ServletInputStream EMPTY_SERVLET_INPUT_STREAM =\n-\t\t\tnew DelegatingServletInputStream(InputStream.nullInputStream());\n-\n \tprivate static final BufferedReader EMPTY_BUFFERED_READER =\n \t\t\tnew BufferedReader(new StringReader(\"\"));\n \n@@ -513,12 +510,12 @@ public ServletInputStream getInputStream() {\n \t\t}\n \t\telse if (this.reader != null) {\n \t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"Cannot call getInputStream() after getReader() has already been called for the current request\")\t\t\t;\n+\t\t\t\t\t\"Cannot call getInputStream() after getReader() has already been called for the current request\");\n \t\t}\n \n \t\tthis.inputStream = (this.content != null ?\n \t\t\t\tnew DelegatingServletInputStream(new ByteArrayInputStream(this.content)) :\n-\t\t\t\tEMPTY_SERVLET_INPUT_STREAM);\n+\t\t\t\tnew DelegatingServletInputStream(InputStream.nullInputStream()));\n \t\treturn this.inputStream;\n \t}\n ",
    "output": "Sync MockHttpServletRequest implementations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -194,7 +194,7 @@ public ClassReader(\n     this.b = classFileBuffer;\n     // Check the class' major_version. This field is after the magic and minor_version fields, which\n     // use 4 and 2 bytes respectively.\n-    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V20) {\n+    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V21) {\n       throw new IllegalArgumentException(\n           \"Unsupported class file major version \" + readShort(classFileOffset + 6));\n     }\n\ndiff --git a/spring-core/src/main/java/org/springframework/asm/Opcodes.java b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n--- a/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n@@ -285,6 +285,7 @@ public interface Opcodes {\n   int V18 = 0 << 16 | 62;\n   int V19 = 0 << 16 | 63;\n   int V20 = 0 << 16 | 64;\n+  int V21 = 0 << 16 | 65;\n \n   /**\n    * Version flag indicating that the class is using 'preview' features.",
    "output": "Upgrade to ASM master (including early support for Java 21 bytecode)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/task/support/ExecutorServiceAdapter.java b/spring-core/src/main/java/org/springframework/core/task/support/ExecutorServiceAdapter.java\n--- a/spring-core/src/main/java/org/springframework/core/task/support/ExecutorServiceAdapter.java\n+++ b/spring-core/src/main/java/org/springframework/core/task/support/ExecutorServiceAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -90,4 +90,9 @@ public boolean isTerminated() {\n \t\treturn false;\n \t}\n \n+\t// @Override on JDK 19\n+\tpublic void close() {\n+\t\t// no-op in order to avoid container-triggered shutdown call which would lead to exception logging\n+\t}\n+\n }",
    "output": "Declare no-op closemethod in order to avoid container-triggered shutdown call"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n@@ -676,7 +676,8 @@ public List<String> checkHeaders(@Nullable List<String> requestHeaders) {\n \t\t}\n \n \t\tboolean allowAnyHeader = this.allowedHeaders.contains(ALL);\n-\t\tint maxResultSize = allowAnyHeader ? requestHeaders.size() : Math.min(requestHeaders.size(), this.allowedHeaders.size());\n+\t\tint maxResultSize = allowAnyHeader ? requestHeaders.size()\n+\t\t\t\t: Math.min(requestHeaders.size(), this.allowedHeaders.size());\n \t\tList<String> result = new ArrayList<>(maxResultSize);\n \t\tfor (String requestHeader : requestHeaders) {\n \t\t\tif (StringUtils.hasText(requestHeader)) {",
    "output": "Polish external contribution"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n@@ -676,7 +676,8 @@ public List<String> checkHeaders(@Nullable List<String> requestHeaders) {\n \t\t}\n \n \t\tboolean allowAnyHeader = this.allowedHeaders.contains(ALL);\n-\t\tList<String> result = new ArrayList<>(requestHeaders.size());\n+\t\tint maxResultSize = allowAnyHeader ? requestHeaders.size() : Math.min(requestHeaders.size(), this.allowedHeaders.size());\n+\t\tList<String> result = new ArrayList<>(maxResultSize);\n \t\tfor (String requestHeader : requestHeaders) {\n \t\t\tif (StringUtils.hasText(requestHeader)) {\n \t\t\t\trequestHeader = requestHeader.trim();",
    "output": "Optimize CorsConfiguration::checkHeaders In the checkHeaders method, if allowedHeaders contains * the result size can be requestHeaders.size, but if this is not the case then the result size can only be as big as the minimum value of requestHeaders.sizeand allowedHeaders.size. requestHeaders.sizecan be potentially big (user input) and allowedHeaders.sizecould be small, so this saves memory in that case"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -908,7 +908,7 @@ protected void handleResponse(URI url, HttpMethod method, ClientHttpResponse res\n \t\t\t\tlogger.debug(\"Response \" + statusCode);\n \t\t\t}\n \t\t\tcatch (IOException ex) {\n-\t\t\t\t// ignore\n+\t\t\t\tlogger.debug(\"Failed to get response status code\", ex);\n \t\t\t}\n \t\t}\n \t\tif (hasError) {",
    "output": "Don't swallow exception when logging response status"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java\n@@ -20,6 +20,7 @@\n import jakarta.jms.Session;\n \n import org.springframework.core.MethodParameter;\n+import org.springframework.jms.listener.SubscriptionNameProvider;\n import org.springframework.jms.support.JmsHeaderMapper;\n import org.springframework.jms.support.converter.MessageConversionException;\n import org.springframework.lang.Nullable;\n@@ -48,7 +49,8 @@\n  * @see JmsHeaderMapper\n  * @see InvocableHandlerMethod\n  */\n-public class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener {\n+public class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener\n+\t\timplements SubscriptionNameProvider {\n \n \t@Nullable\n \tprivate InvocableHandlerMethod handlerMethod;\n@@ -67,6 +69,16 @@ private InvocableHandlerMethod getHandlerMethod() {\n \t\treturn this.handlerMethod;\n \t}\n \n+\t@Override\n+\tpublic String getSubscriptionName() {\n+\t\tif (this.handlerMethod != null) {\n+\t\t\treturn this.handlerMethod.getBeanType().getName() + \"#\" + this.handlerMethod.getMethod().getName();\n+\t\t}\n+\t\telse {\n+\t\t\treturn this.getClass().getName();\n+\t\t}\n+\t}\n+\n \n \t@Override\n \tpublic void onMessage(jakarta.jms.Message jmsMessage, @Nullable Session session) throws JMSException {",
    "output": "Improve generated default name for a @JmsListener subscription Prior to this commit, when using durable subscribers with @JmsListener methods that do not specify a custom subscription name the generated default subscription name was always org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter. Consequently, multiple such @JmsListener methods were assigned the same subscription name which violates the uniqueness requirement. To address this, MessagingMessageListenerAdapter now implements SubscriptionNameProvider and generates the subscription name based on the following rules. - if the InvocableHandlerMethod is present, the subscription name will take the form of handlerMethod.getBeanType.getName+ \"#\" + handlerMethod.getMethod.getName. - otherwise, getClass.getNameis used, which is analogous to the previous behavior"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/task/support/ConcurrentExecutorAdapter.java b/spring-core/src/main/java/org/springframework/core/task/support/ConcurrentExecutorAdapter.java\n--- a/spring-core/src/main/java/org/springframework/core/task/support/ConcurrentExecutorAdapter.java\n+++ b/spring-core/src/main/java/org/springframework/core/task/support/ConcurrentExecutorAdapter.java\n@@ -34,7 +34,10 @@\n  * @since 2.5\n  * @see java.util.concurrent.Executor\n  * @see org.springframework.core.task.TaskExecutor\n+ * @deprecated {@code ConcurrentExecutorAdapter} is obsolete and will be removed\n+ * in Spring Framework 6.1\n  */\n+@Deprecated(since = \"6.0.5\", forRemoval = true)\n public class ConcurrentExecutorAdapter implements Executor {\n \n \tprivate final TaskExecutor taskExecutor;",
    "output": "Deprecate obsolete ConcurrentExecutorAdapter for removal in 6.1"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -1091,24 +1091,6 @@ void exchangeForUnknownStatusCode(ClientHttpConnector connector) {\n \t\t});\n \t}\n \n-\t@ParameterizedWebClientTest  // SPR-15782\n-\tvoid exchangeWithRelativeUrl(ClientHttpConnector connector) {\n-\t\tstartServer(connector);\n-\n-\t\tString uri = \"/api/v4/groups/1\";\n-\t\tMono<ResponseEntity<Void>> responseMono = WebClient.builder().build().get().uri(uri)\n-\t\t\t\t.retrieve().toBodilessEntity();\n-\n-\t\tStepVerifier.create(responseMono)\n-\t\t\t\t.expectErrorSatisfies(throwable -> {\n-\t\t\t\t\tassertThat(throwable).isInstanceOf(WebClientRequestException.class);\n-\t\t\t\t\tWebClientRequestException ex = (WebClientRequestException) throwable;\n-\t\t\t\t\tassertThat(ex.getMethod()).isEqualTo(HttpMethod.GET);\n-\t\t\t\t\tassertThat(ex.getUri()).isEqualTo(URI.create(uri));\n-\t\t\t\t})\n-\t\t\t\t.verify(Duration.ofSeconds(5));\n-\t}\n-\n \t@ParameterizedWebClientTest\n \tvoid filter(ClientHttpConnector connector) {\n \t\tstartServer(connector);",
    "output": "Remove WebClientIntegrationTests#exchangeWithRelativeUrl outdated test This test can fail when a web server runs on port 80 and is not relevant anymore due to the removal of related feature via 6e936a408195f95d41f3463bb93e255218493664"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java\n@@ -193,7 +193,6 @@ private HttpMethod getMethodToUse(ServerHttpRequest request, boolean isPreFlight\n \t * {@link CorsConfiguration#checkOrigin(String)}.\n \t */\n \t@Nullable\n-\n \tprotected List<String> checkHeaders(CorsConfiguration config, List<String> requestHeaders) {\n \t\treturn config.checkHeaders(requestHeaders);\n \t}",
    "output": "Remove extra empty line in DefaultCorsProcessor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n--- a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n@@ -1046,7 +1046,6 @@ public Reference<K, V> getNext() {\n \t\t@Override\n \t\tpublic void release() {\n \t\t\tenqueue();\n-\t\t\tclear();\n \t\t}\n \t}\n \n@@ -1083,7 +1082,6 @@ public Reference<K, V> getNext() {\n \t\t@Override\n \t\tpublic void release() {\n \t\t\tenqueue();\n-\t\t\tclear();\n \t\t}\n \t}\n ",
    "output": "Remove unnecessary calls to Reference::clear Prior to this commit, `ConcurrentReferenceHashMap` subclasses extending `Reference` would call `Reference::clear` right next to `Reference::enqueue`; this is not needed as the latter calls it already"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java\n@@ -200,7 +200,7 @@ protected Mono<Void> doBegin(TransactionSynchronizationManager synchronizationMa\n \t\t\t\tMono<Connection> newCon = Mono.from(obtainConnectionFactory().create());\n \t\t\t\tconnectionMono = newCon.doOnNext(connection -> {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"Acquired Connection [\" + newCon + \"] for R2DBC transaction\");\n+\t\t\t\t\t\tlogger.debug(\"Acquired Connection [\" + connection + \"] for R2DBC transaction\");\n \t\t\t\t\t}\n \t\t\t\t\ttxObject.setConnectionHolder(new ConnectionHolder(connection), true);\n \t\t\t\t});",
    "output": "Fix R2dbcTransactionManager debug log: don't log a Mono When logging the current connection inside R2dbcTransactionManager doBegin, the mono object was logged instead of the connection lambda parameter. Other similar debug-level logs do use the actual Connection object, so this commit does the same"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2022 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -422,7 +422,8 @@ private void bindParameters(ProxyMethodInvocation invocation, JoinPointMatch jpm\n \n \tprivate ShadowMatch getTargetShadowMatch(Method method, Class<?> targetClass) {\n \t\tMethod targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);\n-\t\tif (targetMethod.getDeclaringClass().isInterface()) {\n+\t\tif (targetMethod.getDeclaringClass().isInterface() && targetMethod.getDeclaringClass() != targetClass &&\n+\t\t\t\tobtainPointcutExpression().getPointcutExpression().contains(\".\" + targetMethod.getName() + \"(\")) {\n \t\t\t// Try to build the most specific interface possible for inherited methods to be\n \t\t\t// considered for sub-interface matches as well, in particular for proxy classes.\n \t\t\t// Note: AspectJ is only going to take Method.getDeclaringClass() into account.",
    "output": "Reduce creation of composite interfaces to actual method references in current pointcut"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -1773,19 +1773,19 @@ public Set<Entry<String, List<String>>> entrySet() {\n \n \n \t@Override\n-\tpublic boolean equals(@Nullable Object other) {\n-\t\tif (this == other) {\n+\tpublic boolean equals(@Nullable Object obj) {\n+\t\tif (this == obj) {\n \t\t\treturn true;\n \t\t}\n-\t\tif (!(other instanceof HttpHeaders)) {\n+\t\tif (!(obj instanceof HttpHeaders other)) {\n \t\t\treturn false;\n \t\t}\n-\t\treturn unwrap(this).equals(unwrap((HttpHeaders) other));\n+\t\treturn unwrap(this).equals(unwrap(other));\n \t}\n \n \tprivate static MultiValueMap<String, String> unwrap(HttpHeaders headers) {\n-\t\twhile (headers.headers instanceof HttpHeaders) {\n-\t\t\theaders = (HttpHeaders) headers.headers;\n+\t\twhile (headers.headers instanceof HttpHeaders httpHeaders) {\n+\t\t\theaders = httpHeaders;\n \t\t}\n \t\treturn headers.headers;\n \t}\n@@ -1810,8 +1810,8 @@ public String toString() {\n \t * @since 5.3\n \t */\n \tpublic static HttpHeaders readOnlyHttpHeaders(MultiValueMap<String, String> headers) {\n-\t\treturn (headers instanceof HttpHeaders ?\n-\t\t\t\treadOnlyHttpHeaders((HttpHeaders) headers) : new ReadOnlyHttpHeaders(headers));\n+\t\treturn (headers instanceof HttpHeaders httpHeaders ? readOnlyHttpHeaders(httpHeaders) :\n+\t\t\t\tnew ReadOnlyHttpHeaders(headers));\n \t}\n \n \t/**",
    "output": "Apply \"instanceof pattern matching\" in HttpHeaders"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/SpringPersistenceUnitInfo.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/SpringPersistenceUnitInfo.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/SpringPersistenceUnitInfo.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/SpringPersistenceUnitInfo.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n package org.springframework.orm.jpa.persistenceunit;\n \n import jakarta.persistence.spi.ClassTransformer;\n+import org.apache.commons.logging.LogFactory;\n \n import org.springframework.core.DecoratingClassLoader;\n import org.springframework.instrument.classloading.LoadTimeWeaver;\n@@ -79,10 +80,12 @@ public ClassLoader getClassLoader() {\n \t */\n \t@Override\n \tpublic void addTransformer(ClassTransformer classTransformer) {\n-\t\tif (this.loadTimeWeaver == null) {\n-\t\t\tthrow new IllegalStateException(\"Cannot apply class transformer without LoadTimeWeaver specified\");\n+\t\tif (this.loadTimeWeaver != null) {\n+\t\t\tthis.loadTimeWeaver.addTransformer(new ClassFileTransformerAdapter(classTransformer));\n+\t\t}\n+\t\telse {\n+\t\t\tLogFactory.getLog(getClass()).info(\"No LoadTimeWeaver setup: ignoring JPA class transformer\");\n \t\t}\n-\t\tthis.loadTimeWeaver.addTransformer(new ClassFileTransformerAdapter(classTransformer));\n \t}\n \n \t/**",
    "output": "SpringPersistenceUnitInfo leniently ignores transformer if no LoadTimeWeaver is present"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java\n@@ -59,7 +59,7 @@ public void exceptionClassTranslation() {\n \t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23505\", 0), DuplicateKeyException.class);\n \t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23000\", 1), DuplicateKeyException.class);\n \t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23000\", 1062), DuplicateKeyException.class);\n-\t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23505\", 2627), DuplicateKeyException.class);\n+\t\tdoTest(new SQLIntegrityConstraintViolationException(\"\", \"23000\", 2627), DuplicateKeyException.class);\n \t\tdoTest(new SQLInvalidAuthorizationSpecException(\"\", \"\", 0), PermissionDeniedDataAccessException.class);\n \t\tdoTest(new SQLNonTransientConnectionException(\"\", \"\", 0), DataAccessResourceFailureException.class);\n \t\tdoTest(new SQLRecoverableException(\"\", \"\", 0), RecoverableDataAccessException.class);",
    "output": "Fix wrong asserted code in SQLExceptionSubclassTranslatorTests There was a typo in the test, covering the wrong SQLState code. Polishes a644245. Relates to"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java b/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java\n--- a/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -192,7 +192,13 @@ protected JmsException convertJmsAccessException(JMSException ex) {\n \t * @see jakarta.jms.ConnectionFactory#createConnection()\n \t */\n \tprotected Connection createConnection() throws JMSException {\n-\t\treturn obtainConnectionFactory().createConnection();\n+\t\tConnectionFactory cf = obtainConnectionFactory();\n+\t\tConnection con = cf.createConnection();\n+\t\tif (con == null) {\n+\t\t\tthrow new jakarta.jms.IllegalStateException(\n+\t\t\t\t\t\"ConnectionFactory returned null from createConnection(): \" + cf);\n+\t\t}\n+\t\treturn con;\n \t}\n \n \t/**",
    "output": "Defensive check for null returned from createConnection"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAdvisorChainFactory.java b/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAdvisorChainFactory.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAdvisorChainFactory.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAdvisorChainFactory.java\n@@ -65,11 +65,11 @@ public List<Object> getInterceptorsAndDynamicInterceptionAdvice(\n \t\t\t\tif (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) {\n \t\t\t\t\tMethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();\n \t\t\t\t\tboolean match;\n-\t\t\t\t\tif (mm instanceof IntroductionAwareMethodMatcher) {\n+\t\t\t\t\tif (mm instanceof IntroductionAwareMethodMatcher iamm) {\n \t\t\t\t\t\tif (hasIntroductions == null) {\n \t\t\t\t\t\t\thasIntroductions = hasMatchingIntroductions(advisors, actualClass);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tmatch = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);\n+\t\t\t\t\t\tmatch = iamm.matches(method, actualClass, hasIntroductions);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tmatch = mm.matches(method, actualClass);",
    "output": "Apply \"instanceof pattern matching\""
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityExceptionHandler.java\n@@ -76,7 +76,7 @@ public void setMessageSource(MessageSource messageSource) {\n \t}\n \n \t@Nullable\n-\tpublic MessageSource getMessageSource() {\n+\tprotected MessageSource getMessageSource() {\n \t\treturn this.messageSource;\n \t}\n ",
    "output": "Use consistent visibility for ResponseEntityExceptionHandler.getMessageSource"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java\n@@ -184,8 +184,9 @@ protected void process(MatchCallback callback) {\n \tprotected Yaml createYaml() {\n \t\tLoaderOptions loaderOptions = new LoaderOptions();\n \t\tloaderOptions.setAllowDuplicateKeys(false);\n-\t\treturn new Yaml(new FilteringConstructor(loaderOptions), new Representer(),\n-\t\t\t\tnew DumperOptions(), loaderOptions);\n+\t\tDumperOptions dumperOptions = new DumperOptions();\n+\t\treturn new Yaml(new FilteringConstructor(loaderOptions), new Representer(dumperOptions),\n+\t\t\t\tdumperOptions, loaderOptions);\n \t}\n \n \tprivate boolean process(MatchCallback callback, Yaml yaml, Resource resource) {",
    "output": "Upgrade optional dependencies"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -111,6 +111,8 @@ else if ((methodName.startsWith(\"get\") && method.getParameterCount() == 0 && met\n \t\t\t\tif (KotlinDetector.isKotlinType(clazz)) {\n \t\t\t\t\tKotlinDelegate.registerComponentHints(hints, clazz);\n \t\t\t\t\tregisterKotlinSerializationHints(hints, clazz);\n+\t\t\t\t\t// For Kotlin reflection\n+\t\t\t\t\ttypeHint.withMembers(MemberCategory.INTROSPECT_DECLARED_METHODS);\n \t\t\t\t}\n \t\t\t});\n \t\t}\n@@ -192,7 +194,7 @@ public static void registerComponentHints(ReflectionHints hints, Class<?> type)\n \t\t\tif (kClass.isData()) {\n \t\t\t\tfor (Method method : type.getMethods()) {\n \t\t\t\t\tString methodName = method.getName();\n-\t\t\t\t\tif (methodName.startsWith(\"component\") || methodName.equals(\"copy\")) {\n+\t\t\t\t\tif (methodName.startsWith(\"component\") || methodName.equals(\"copy\") || methodName.equals(\"copy$default\")) {\n \t\t\t\t\t\thints.registerMethod(method, ExecutableMode.INVOKE);\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Refine BindingReflectionHintsRegistrar Kotlin support"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n@@ -26,6 +26,7 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.client.reactive.ClientHttpConnector;\n import org.springframework.http.client.reactive.HttpComponentsClientHttpConnector;\n+import org.springframework.http.client.reactive.JdkClientHttpConnector;\n import org.springframework.http.client.reactive.JettyClientHttpConnector;\n import org.springframework.http.client.reactive.ReactorClientHttpConnector;\n import org.springframework.http.client.reactive.ReactorNetty2ClientHttpConnector;\n@@ -317,7 +318,9 @@ else if (jettyClientPresent) {\n \t\telse if (httpComponentsClientPresent) {\n \t\t\treturn new HttpComponentsClientHttpConnector();\n \t\t}\n-\t\tthrow new IllegalStateException(\"No suitable default ClientHttpConnector found\");\n+\t\telse {\n+\t\t\treturn new JdkClientHttpConnector();\n+\t\t}\n \t}\n \n \tprivate ExchangeStrategies initExchangeStrategies() {",
    "output": "Fall back to JdkClientHttpConnector as ClientHttpConnector"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/cache/DefaultContextCache.java b/spring-test/src/main/java/org/springframework/test/context/cache/DefaultContextCache.java\n--- a/spring-test/src/main/java/org/springframework/test/context/cache/DefaultContextCache.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/cache/DefaultContextCache.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -203,8 +203,8 @@ private void remove(List<MergedContextConfiguration> removedContexts, MergedCont\n \t\t// Physically remove and close leaf nodes first (i.e., on the way back up the\n \t\t// stack as opposed to prior to the recursive call).\n \t\tApplicationContext context = this.contextMap.remove(key);\n-\t\tif (context instanceof ConfigurableApplicationContext) {\n-\t\t\t((ConfigurableApplicationContext) context).close();\n+\t\tif (context instanceof ConfigurableApplicationContext cac) {\n+\t\t\tcac.close();\n \t\t}\n \t\tremovedContexts.add(key);\n \t}",
    "output": "Apply \"instanceof pattern matching\""
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -620,6 +620,7 @@ private class IframeHandler implements SockJsRequestHandler {\n \t\t\t\t<head>\n \t\t\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n \t\t\t\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n+\t\t\t\t\t<title>SocketJS iframe</title>\n \t\t\t\t\t<script>\n \t\t\t\t\t\tdocument.domain = document.domain;\n \t\t\t\t\t\t_sockjs_onload = function(){SockJS.bootstrap_iframe();};",
    "output": "Add title to SockJS iFrames for accessibility compliance"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n--- a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n@@ -144,7 +144,6 @@ public interface SmartContextLoader extends ContextLoader {\n \t * @return a new application context\n \t * @throws ContextLoadException if context loading failed\n \t * @see #processContextConfiguration(ContextConfigurationAttributes)\n-\t * @see #loadContextForAotProcessing(MergedContextConfiguration)\n \t * @see org.springframework.context.annotation.AnnotationConfigUtils#registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry)\n \t * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment()\n \t */",
    "output": "Remove erroneous Javadoc link"
  },
  {
    "input": "diff --git a/framework-docs/src/main/java/org/springframework/docs/core/aot/hints/testing/SampleReflectionRuntimeHintsTests.java b/framework-docs/src/main/java/org/springframework/docs/core/aot/hints/testing/SampleReflectionRuntimeHintsTests.java\n--- a/framework-docs/src/main/java/org/springframework/docs/core/aot/hints/testing/SampleReflectionRuntimeHintsTests.java\n+++ b/framework-docs/src/main/java/org/springframework/docs/core/aot/hints/testing/SampleReflectionRuntimeHintsTests.java\n@@ -39,9 +39,8 @@ class SampleReflectionRuntimeHintsTests {\n \tvoid shouldRegisterReflectionHints() {\n \t\tRuntimeHints runtimeHints = new RuntimeHints();\n \t\t// Call a RuntimeHintsRegistrar that contributes hints like:\n-\t\truntimeHints.reflection().registerType(SpringVersion.class, typeHint -> {\n-\t\t\ttypeHint.withMethod(\"getVersion\", List.of(), ExecutableMode.INVOKE);\n-\t\t});\n+\t\truntimeHints.reflection().registerType(SpringVersion.class, typeHint ->\n+\t\t\t\ttypeHint.withMethod(\"getVersion\", List.of(), ExecutableMode.INVOKE));\n \n \t\t// Invoke the relevant piece of code we want to test within a recording lambda\n \t\tRuntimeHintsInvocations invocations = RuntimeHintsRecorder.record(() -> {",
    "output": "Reinstate checkstyle for reference docs code snippets This commit also ensures that checks are performed before the application is rendered to get early feedback on errors"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n@@ -85,12 +85,7 @@ public String[] getParameterNames(Constructor<?> ctor) {\n \tprivate String[] doGetParameterNames(Executable executable) {\n \t\tClass<?> declaringClass = executable.getDeclaringClass();\n \t\tMap<Executable, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n-\t\tString[] names = (map != NO_DEBUG_INFO_MAP ? map.get(executable) : null);\n-\t\tif (names != null && logger.isWarnEnabled()) {\n-\t\t\tlogger.warn(\"Using deprecated '-debug' fallback for parameter name resolution. \" +\n-\t\t\t\t\t\"Compile the affected code with '-parameters' instead: \" + executable);\n-\t\t}\n-\t\treturn names;\n+\t\treturn (map != NO_DEBUG_INFO_MAP ? map.get(executable) : null);\n \t}\n \n \t/**\n@@ -115,6 +110,10 @@ private Map<Executable, String[]> inspectClass(Class<?> clazz) {\n \t\t\tClassReader classReader = new ClassReader(is);\n \t\t\tMap<Executable, String[]> map = new ConcurrentHashMap<>(32);\n \t\t\tclassReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0);\n+\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"Using deprecated '-debug' fallback for parameter name resolution. Compile the \" +\n+\t\t\t\t\t\t\"affected code with '-parameters' instead or avoid its introspection: \" + clazz.getName());\n+\t\t\t}\n \t\t\treturn map;\n \t\t}\n \t\tcatch (IOException ex) {",
    "output": "Reduce deprecation warn logging to one entry per introspected class"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n@@ -54,8 +54,9 @@\n  * @author Sam Brannen\n  * @since 2.0\n  * @deprecated as of 6.0.1, in favor of {@link StandardReflectionParameterNameDiscoverer}\n+ * (with the \"-parameters\" compiler flag)\n  */\n-@Deprecated\n+@Deprecated(since = \"6.0.1\")\n public class LocalVariableTableParameterNameDiscoverer implements ParameterNameDiscoverer {\n \n \tprivate static final Log logger = LogFactory.getLog(LocalVariableTableParameterNameDiscoverer.class);",
    "output": "Add since attribute to Deprecated annotation Also retaining standard Java parameter names for Spring's AspectJ sources now"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.messaging.simp.stomp;\n \n-import org.junit.jupiter.api.Disabled;\n-\n import org.springframework.messaging.tcp.TcpOperations;\n import org.springframework.messaging.tcp.reactor.ReactorNetty2TcpClient;\n \n@@ -27,7 +25,6 @@\n  *\n  * @author Rossen Stoyanchev\n  */\n-@Disabled(\"gh-29287 :: Disabled because they fail too frequently\")\n public class ReactorNetty2StompBrokerRelayIntegrationTests extends AbstractStompBrokerRelayIntegrationTests {\n \n \t@Override",
    "output": "Temporarily re-enable ReactorNetty2StompBrokerRelayIntegrationTests To see if it still fails on the CI server as it doesn't fail locally for me, and if it does to get details to investigate"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n@@ -16,13 +16,11 @@\n \n package org.springframework.core;\n \n-import org.springframework.aot.AotDetector;\n-\n /**\n  * Default implementation of the {@link ParameterNameDiscoverer} strategy interface,\n  * using the Java 8 standard reflection mechanism (if available), and falling back\n- * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not using\n- * AOT-processed optimizations) for checking debug information in the class file.\n+ * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not in\n+ * a native image) for checking debug information in the class file.\n  *\n  * <p>If a Kotlin reflection implementation is present,\n  * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and\n@@ -45,7 +43,7 @@ public DefaultParameterNameDiscoverer() {\n \t\t\taddDiscoverer(new KotlinReflectionParameterNameDiscoverer());\n \t\t}\n \t\taddDiscoverer(new StandardReflectionParameterNameDiscoverer());\n-\t\tif (!AotDetector.useGeneratedArtifacts()) {\n+\t\tif (!NativeDetector.inNativeImage()) {\n \t\t\taddDiscoverer(new LocalVariableTableParameterNameDiscoverer());\n \t\t}\n \t}",
    "output": "Exclude LocalVariableTableParameterNameDiscoverer based on native image check"
  },
  {
    "input": "diff --git a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n--- a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n@@ -100,7 +100,8 @@ private static boolean isPresent(String className) {\n \t\t\tClass.forName(className, false, LogAdapter.class.getClassLoader());\n \t\t\treturn true;\n \t\t}\n-\t\tcatch (ClassNotFoundException ex) {\n+\t\tcatch (Throwable ex) {\n+\t\t\t// Typically ClassNotFoundException or NoClassDefFoundError...\n \t\t\treturn false;\n \t\t}\n \t}",
    "output": "Refine LogAdapter#isPresent Align LogAdapter#isPresent with ClassUtils#isPresent in order to catch NoClassDefFoundError and other errors"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n@@ -16,11 +16,13 @@\n \n package org.springframework.core;\n \n+import org.springframework.aot.AotDetector;\n+\n /**\n  * Default implementation of the {@link ParameterNameDiscoverer} strategy interface,\n  * using the Java 8 standard reflection mechanism (if available), and falling back\n- * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} for checking\n- * debug information in the class file.\n+ * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not using\n+ * AOT-processed optimizations) for checking debug information in the class file.\n  *\n  * <p>If a Kotlin reflection implementation is present,\n  * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and\n@@ -43,7 +45,9 @@ public DefaultParameterNameDiscoverer() {\n \t\t\taddDiscoverer(new KotlinReflectionParameterNameDiscoverer());\n \t\t}\n \t\taddDiscoverer(new StandardReflectionParameterNameDiscoverer());\n-\t\taddDiscoverer(new LocalVariableTableParameterNameDiscoverer());\n+\t\tif (!AotDetector.useGeneratedArtifacts()) {\n+\t\t\taddDiscoverer(new LocalVariableTableParameterNameDiscoverer());\n+\t\t}\n \t}\n \n }",
    "output": "Do not use LocalVariableTableParameterNameDiscoverer in AOT mode"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,7 +27,7 @@\n  * @author Juergen Hoeller\n  * @author Ruslan Sibgatullin\n  */\n-@SuppressWarnings(\"deprecation\")\n+@SuppressWarnings({ \"removal\", \"deprecation\" })\n public class CronSequenceGeneratorTests {\n \n \t@Test",
    "output": "Suppress \"removal\" warnings in CronSequenceGeneratorTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/DefaultErrorResponseBuilder.java b/spring-web/src/main/java/org/springframework/web/DefaultErrorResponseBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/DefaultErrorResponseBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/DefaultErrorResponseBuilder.java\n@@ -53,8 +53,8 @@ final class DefaultErrorResponseBuilder implements ErrorResponse.Builder {\n \n \tDefaultErrorResponseBuilder(Throwable ex, HttpStatusCode statusCode, String detail) {\n \t\tAssert.notNull(ex, \"Throwable is required\");\n-\t\tAssert.notNull(ex, \"HttpStatusCode is required\");\n-\t\tAssert.notNull(ex, \"`detail` is required\");\n+\t\tAssert.notNull(statusCode, \"HttpStatusCode is required\");\n+\t\tAssert.notNull(detail, \"`detail` is required\");\n \t\tthis.exception = ex;\n \t\tthis.statusCode = statusCode;\n \t\tthis.problemDetail = ProblemDetail.forStatusAndDetail(statusCode, detail);",
    "output": "Assert fixed in DefaultErrorResponseBuilder Fixed assert on wrong constructor fields"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -304,7 +304,8 @@ protected URL createRelativeURL(String relativePath) throws MalformedURLExceptio\n \t@Override\n \t@Nullable\n \tpublic String getFilename() {\n-\t\tString filename = StringUtils.getFilename(this.uri != null ? this.uri.getPath() : this.url.getPath());\n+\t\tString originalPath = (this.uri != null ? this.uri.getPath() : this.url.getPath());\n+\t\tString filename = StringUtils.getFilename(StringUtils.cleanPath(originalPath));\n \t\treturn (filename != null ? URLDecoder.decode(filename, StandardCharsets.UTF_8) : null);\n \t}\n ",
    "output": "Extract filename from cleaned path (for consistent separator handling)"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -438,7 +438,6 @@ public void processInjection(Object bean) throws BeanCreationException {\n \t\t}\n \t}\n \n-\n \tprivate InjectionMetadata findAutowiringMetadata(String beanName, Class<?> clazz, @Nullable PropertyValues pvs) {\n \t\t// Fall back to class name as cache key, for backwards compatibility with custom callers.\n \t\tString cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());\n@@ -563,7 +562,9 @@ protected boolean determineRequiredStatus(AnnotationAttributes ann) {\n \t * @param type the type of the bean\n \t * @return the target beans, or an empty Collection if no bean of this type is found\n \t * @throws BeansException if bean retrieval failed\n+\t * @deprecated since 5.3.24 since it is unused in the meantime\n \t */\n+\t@Deprecated\n \tprotected <T> Map<String, T> findAutowireCandidates(Class<T> type) throws BeansException {\n \t\tif (this.beanFactory == null) {\n \t\t\tthrow new IllegalStateException(\"No BeanFactory configured - \" +",
    "output": "Deprecate unused findAutowireCandidates template method (removed in 6.0)"
  },
  {
    "input": "diff --git a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/AutowiredGenericTemplate.java b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/AutowiredGenericTemplate.java\n--- a/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/AutowiredGenericTemplate.java\n+++ b/spring-context/src/testFixtures/java/org/springframework/context/testfixture/context/annotation/AutowiredGenericTemplate.java\n@@ -20,6 +20,7 @@\n \n public class AutowiredGenericTemplate {\n \n+\t@SuppressWarnings(\"unused\")\n \tprivate GenericTemplate<Integer> genericTemplate;\n \n \t@Autowired",
    "output": "Suppress unused warning in test code"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java\n@@ -160,13 +160,6 @@ public String[] getHosts() {\n \t\treturn this.hosts;\n \t}\n \n-\n-\t@Override\n-\tpublic void afterPropertiesSet() throws Exception {\n-\t\tsuper.afterPropertiesSet();\n-\t}\n-\n-\n \t@Override\n \tpublic boolean isRedirectView() {\n \t\treturn true;",
    "output": "Remove superfluous method override"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n@@ -32,9 +32,6 @@\n  * the annotated element. By default, a reflection hint is added on the\n  * annotated element so that it can be discovered and invoked if necessary.\n  *\n- * <p>A reflection hint is also added if necessary on the annotation that\n- * <em>directly</em> uses this annotation.\n- *\n  * @author Stephane Nicoll\n  * @author Sam Brannen\n  * @since 6.0",
    "output": "Remove outdated documentation in @Reflective"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -534,7 +534,7 @@ protected void checkParameters(String parameter, String value) {\n \t\t\tString unquotedValue = unquote(value);\n \t\t\tdouble d = Double.parseDouble(unquotedValue);\n \t\t\tAssert.isTrue(d >= 0D && d <= 1D,\n-\t\t\t\t\t() -> \"Invalid quality value \\\"\" + value + \"\\\": should be between 0.0 and 1.0\");\n+\t\t\t\t\t() -> \"Invalid quality value \\\"\" + unquotedValue + \"\\\": should be between 0.0 and 1.0\");\n \t\t}\n \t}\n ",
    "output": "Use unquoted value in assertion message in MediaType.checkParameters"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -547,7 +547,7 @@ protected void checkParameters(String parameter, String value) {\n \t\t\tString unquotedValue = unquote(value);\n \t\t\tdouble d = Double.parseDouble(unquotedValue);\n \t\t\tAssert.isTrue(d >= 0D && d <= 1D,\n-\t\t\t\t\t() -> \"Invalid quality value \\\"\" + value + \"\\\": should be between 0.0 and 1.0\");\n+\t\t\t\t\t() -> \"Invalid quality value \\\"\" + unquotedValue + \"\\\": should be between 0.0 and 1.0\");\n \t\t}\n \t}\n ",
    "output": "Use unquoted value in assertion message in MediaType.checkParameters"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/ContextLoadException.java b/spring-test/src/main/java/org/springframework/test/context/ContextLoadException.java\n--- a/spring-test/src/main/java/org/springframework/test/context/ContextLoadException.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoadException.java\n@@ -38,11 +38,11 @@ public class ContextLoadException extends Exception {\n \n \t/**\n \t * Create a new {@code ContextLoadException} for the supplied\n-\t * {@link ApplicationContext} and {@link Exception}.\n+\t * {@link ApplicationContext} and {@link Throwable}.\n \t * @param applicationContext the application context that failed to load\n \t * @param cause the exception caught while attempting to load that context\n \t */\n-\tpublic ContextLoadException(ApplicationContext applicationContext, Exception cause) {\n+\tpublic ContextLoadException(ApplicationContext applicationContext, Throwable cause) {\n \t\tsuper(cause);\n \t\tthis.applicationContext = applicationContext;\n \t}",
    "output": "Revise ContextLoadException constructor to accept a Throwable"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -264,9 +264,12 @@ private void readHeaders(ByteBuffer byteBuffer, StompHeaderAccessor headerAccess\n \t * <a href=\"https://stomp.github.io/stomp-specification-1.2.html#Value_Encoding\">\"Value Encoding\"</a>.\n \t */\n \tprivate String unescape(String inString) {\n+\t\tint index = inString.indexOf('\\\\');\n+\t\tif (index == -1) {\n+\t\t\treturn inString;\n+\t\t}\n \t\tStringBuilder sb = new StringBuilder(inString.length());\n \t\tint pos = 0;  // position in the old string\n-\t\tint index = inString.indexOf('\\\\');\n \n \t\twhile (index >= 0) {\n \t\t\tsb.append(inString, pos, index);",
    "output": "Avoid unnecessary allocations in StompDecoder#unescape"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/DataFieldMaxValueIncrementerTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/DataFieldMaxValueIncrementerTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/DataFieldMaxValueIncrementerTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/DataFieldMaxValueIncrementerTests.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.jdbc.support;\n+package org.springframework.jdbc.support.incrementer;\n \n import java.sql.Connection;\n import java.sql.ResultSet;\n@@ -25,15 +25,6 @@\n \n import org.junit.jupiter.api.Test;\n \n-import org.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.HanaSequenceMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.MariaDBSequenceMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.PostgresSequenceMaxValueIncrementer;\n-import org.springframework.jdbc.support.incrementer.SqlServerSequenceMaxValueIncrementer;\n-\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;",
    "output": "Move DataFieldMaxValueIncrementerTests to the appropriate package"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/Gh29105Tests.java b/spring-context/src/test/java/org/springframework/context/annotation/Gh29105Tests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/Gh29105Tests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/Gh29105Tests.java\n@@ -30,7 +30,7 @@\n  *\n  * @author Stephane Nicoll\n  */\n-public class Gh29105Tests {\n+class Gh29105Tests {\n \n \t@Test\n \tvoid beanProviderWithParentContextReuseOrder() {\n@@ -47,6 +47,7 @@ void beanProviderWithParentContextReuseOrder() {\n \t\tList<Class<?>> orderedTypes = child.getBeanProvider(MyService.class)\n \t\t\t\t.orderedStream().map(Object::getClass).collect(Collectors.toList());\n \t\tassertThat(orderedTypes).containsExactly(CustomService.class, DefaultService.class);\n+\t\tchild.close();\n \t}\n \n \n@@ -78,4 +79,5 @@ DefaultService defaultService() {\n \t\t}\n \n \t}\n+\n }",
    "output": "Avoid warnings in tests"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/service/RSocketServiceMethod.java b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/service/RSocketServiceMethod.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/service/RSocketServiceMethod.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/service/RSocketServiceMethod.java\n@@ -229,7 +229,8 @@ private void applyArguments(RSocketRequestValues.Builder requestValues, Object[]\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tAssert.state(resolved, formatArgumentError(this.parameters[i], \"No suitable resolver\"));\n+\t\t\tint index = i;\n+\t\t\tAssert.state(resolved, () -> formatArgumentError(this.parameters[index], \"No suitable resolver\"));\n \t\t}\n \t}\n \n\ndiff --git a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/invoker/HttpServiceMethod.java\n@@ -116,7 +116,8 @@ private void applyArguments(HttpRequestValues.Builder requestValues, Object[] ar\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tAssert.state(resolved, formatArgumentError(this.parameters[i], \"No suitable resolver\"));\n+\t\t\tint index = i;\n+\t\t\tAssert.state(resolved, () -> formatArgumentError(this.parameters[index], \"No suitable resolver\"));\n \t\t}\n \t}\n ",
    "output": "Avoid String allocations with Assert.state"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -531,10 +531,10 @@ public MediaType(MimeType mimeType) {\n \tprotected void checkParameters(String parameter, String value) {\n \t\tsuper.checkParameters(parameter, value);\n \t\tif (PARAM_QUALITY_FACTOR.equals(parameter)) {\n-\t\t\tvalue = unquote(value);\n-\t\t\tdouble d = Double.parseDouble(value);\n+\t\t\tString unquotedValue = unquote(value);\n+\t\t\tdouble d = Double.parseDouble(unquotedValue);\n \t\t\tAssert.isTrue(d >= 0D && d <= 1D,\n-\t\t\t\t\t\"Invalid quality value \\\"\" + value + \"\\\": should be between 0.0 and 1.0\");\n+\t\t\t\t\t() -> \"Invalid quality value \\\"\" + value + \"\\\": should be between 0.0 and 1.0\");\n \t\t}\n \t}\n ",
    "output": "Avoid String allocations in MediaType.checkParameters"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/CustomEditorTests.java\n@@ -722,15 +722,15 @@ void testCustomBooleanEditorWithEmptyAsNull() {\n \n \t@Test\n \tvoid testCustomDateEditor() {\n-\t\tCustomDateEditor editor = new CustomDateEditor(null, false);\n+\t\tCustomDateEditor editor = new CustomDateEditor(new SimpleDateFormat(\"MM/dd/yyyy\"), false);\n \t\teditor.setValue(null);\n \t\tassertThat(editor.getValue()).isNull();\n \t\tassertThat(editor.getAsText()).isEmpty();\n \t}\n \n \t@Test\n \tvoid testCustomDateEditorWithEmptyAsNull() {\n-\t\tCustomDateEditor editor = new CustomDateEditor(null, true);\n+\t\tCustomDateEditor editor = new CustomDateEditor(new SimpleDateFormat(\"MM/dd/yyyy\"), true);\n \t\teditor.setValue(null);\n \t\tassertThat(editor.getValue()).isNull();\n \t\tassertThat(editor.getAsText()).isEmpty();",
    "output": "Use non-null DateFormat for CustomDateEditor in tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n--- a/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n+++ b/spring-core/src/main/java/org/springframework/aot/nativex/feature/PreComputeFieldFeature.java\n@@ -64,7 +64,7 @@ private void iterateFields(DuringAnalysisAccess access, Class<?> subtype) {\n \t\t\t\t\t\t\tSystem.out.println(\"Field \" + fieldIdentifier + \" set to \" + fieldValue + \" at build time\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tcatch (Throwable ex) {\n-\t\t\t\t\t\t\tSystem.out.println(\"Processing of field \" + fieldIdentifier + \" skipped due the following error : \" + ex.getMessage());\n+\t\t\t\t\t\t\tSystem.out.println(\"Field \" + fieldIdentifier + \" will be evaluated at runtime due to this error during build time evaluation: \" + ex.getMessage());\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Refine PreComputeFieldFeature logging"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/PartGenerator.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/PartGenerator.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/PartGenerator.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/PartGenerator.java\n@@ -229,6 +229,7 @@ void requestToken() {\n \t\tif (upstream() != null &&\n \t\t\t\t!this.sink.isCancelled() &&\n \t\t\t\tthis.sink.requestedFromDownstream() > 0 &&\n+\t\t\t\tthis.state.get().canRequest() &&\n \t\t\t\tthis.requestOutstanding.compareAndSet(false, true)) {\n \t\t\trequest(1);\n \t\t}\n@@ -291,6 +292,13 @@ private interface State {\n \t\tdefault void error(Throwable throwable) {\n \t\t}\n \n+\t\t/**\n+\t\t * Indicates whether the current state is ready to accept a new token.\n+\t\t */\n+\t\tdefault boolean canRequest() {\n+\t\t\treturn true;\n+\t\t}\n+\n \t\t/**\n \t\t * Cleans up any state.\n \t\t */\n@@ -814,6 +822,11 @@ private Mono<Void> writeInternal(DataBuffer dataBuffer) {\n \t\t\t}\n \t\t}\n \n+\t\t@Override\n+\t\tpublic boolean canRequest() {\n+\t\t\treturn false;\n+\t\t}\n+\n \t\t@Override\n \t\tpublic void dispose() {\n \t\t\tthis.disposed = true;",
    "output": "Ensure state of PartGenerator accepts buffers This commit makes sure that the current state of the PartGenerator is able to handle an incoming buffer, possibly requested because of a request coming from the subscription. All states accept new buffers except the WritingFileState"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestAotProcessor.java\n@@ -79,16 +79,27 @@ protected Void doProcess() {\n \t * output directories. In addition, run-time hints are registered for the\n \t * application contexts used by the test classes as well as test infrastructure\n \t * components used by the tests.\n+\t * @see #scanClasspathRoots()\n+\t * @see #createFileSystemGeneratedFiles()\n+\t * @see TestContextAotGenerator#processAheadOfTime(Stream)\n+\t * @see #writeHints(org.springframework.aot.hint.RuntimeHints)\n \t */\n \tprotected void performAotProcessing() {\n-\t\tTestClassScanner scanner = new TestClassScanner(getClasspathRoots());\n-\t\tStream<Class<?>> testClasses = scanner.scan();\n-\n+\t\tStream<Class<?>> testClasses = scanClasspathRoots();\n \t\tGeneratedFiles generatedFiles = createFileSystemGeneratedFiles();\n \t\tTestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles);\n \t\tgenerator.processAheadOfTime(testClasses);\n-\n \t\twriteHints(generator.getRuntimeHints());\n \t}\n \n+\t/**\n+\t * Scan the configured {@linkplain #getClasspathRoots() classpath roots} for\n+\t * Spring integration test classes.\n+\t * @return a stream of Spring integration test classes\n+\t */\n+\tprotected Stream<Class<?>> scanClasspathRoots() {\n+\t\tTestClassScanner scanner = new TestClassScanner(getClasspathRoots());\n+\t\treturn scanner.scan();\n+\t}\n+\n }",
    "output": "Make TestAotProcessor more easily extensible"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferTests.java b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferTests.java\n@@ -530,6 +530,7 @@ void asByteBufferIndexLength(DataBufferFactory bufferFactory) {\n \t\tDataBuffer buffer = createDataBuffer(3);\n \t\tbuffer.write(new byte[]{'a', 'b'});\n \n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tByteBuffer result = buffer.asByteBuffer(1, 2);\n \t\tassertThat(result.capacity()).isEqualTo(2);\n ",
    "output": "Suppress deprecation warnings in tests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java b/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java\n--- a/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java\n+++ b/spring-web/src/main/java/org/springframework/http/observation/reactive/ServerRequestObservationContext.java\n@@ -35,17 +35,27 @@\n  */\n public class ServerRequestObservationContext extends RequestReplyReceiverContext<ServerHttpRequest, ServerHttpResponse> {\n \n+\tprivate final ServerWebExchange serverWebExchange;\n+\n \t@Nullable\n \tprivate PathPattern pathPattern;\n \n \tprivate boolean connectionAborted;\n \n \tpublic ServerRequestObservationContext(ServerWebExchange exchange) {\n \t\tsuper((request, key) -> request.getHeaders().getFirst(key));\n+\t\tthis.serverWebExchange = exchange;\n \t\tsetCarrier(exchange.getRequest());\n \t\tsetResponse(exchange.getResponse());\n \t}\n \n+\t/**\n+\t * Return the current {@link ServerWebExchange HTTP exchange}.\n+\t */\n+\tpublic ServerWebExchange getServerWebExchange() {\n+\t\treturn this.serverWebExchange;\n+\t}\n+\n \t/**\n \t * Return the path pattern for the handler that matches the current request.\n \t * For example, {@code \"/projects/{name}\"}.",
    "output": "Add ServerWebExchange getter in WebFlux Observation context The observation context relies on request and response for propagation, but the exchange itself holds attributes and locale context so this is needed for keyvalues extraction in general. This commit adds a getter to expose the exchange from the context"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n@@ -475,8 +475,7 @@ void refreshForAotRegisterHintsForTargetOfCglibProxy() {\n \t\tRuntimeHints runtimeHints = new RuntimeHints();\n \t\tcontext.refreshForAotProcessing(runtimeHints);\n \t\tassertThat(RuntimeHintsPredicates.reflection().onType(TypeReference.of(CglibConfiguration.class))\n-\t\t\t\t.withMemberCategories(MemberCategory.INTROSPECT_DECLARED_CONSTRUCTORS,\n-\t\t\t\t\t\tMemberCategory.INVOKE_DECLARED_METHODS))\n+\t\t\t\t.withMemberCategories(MemberCategory.INVOKE_PUBLIC_METHODS))\n \t\t\t\t.accepts(runtimeHints);\n \t}\n ",
    "output": "Adapted test for reflection hints on proxied user classes"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java\n@@ -117,8 +117,7 @@ public class GenericApplicationContext extends AbstractApplicationContext implem\n \t\t\t\t\tMemberCategory.DECLARED_FIELDS);\n \n \tprivate static final Consumer<Builder> asProxiedUserClass = hint ->\n-\t\t\thint.withMembers(MemberCategory.INTROSPECT_DECLARED_CONSTRUCTORS,\n-\t\t\t\t\tMemberCategory.INVOKE_DECLARED_METHODS);\n+\t\t\thint.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS);\n \n \n \tprivate final DefaultListableBeanFactory beanFactory;",
    "output": "Expose all public user class methods (including inherited methods) for reflection Also removes declared constructors hint for user classes which should not be necessary"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessor.java b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessor.java\n@@ -145,13 +145,11 @@ public CodeBlock generateInstanceSupplierCode(GenerationContext generationContex\n \n \t\t\tGeneratedMethod generatedMethod = beanRegistrationCode.getMethods()\n \t\t\t\t\t.add(\"getScopedProxyInstance\", method -> {\n-\t\t\t\t\t\tClass<?> beanClass = this.targetBeanDefinition.getResolvableType()\n-\t\t\t\t\t\t\t\t.toClass();\n \t\t\t\t\t\tmethod.addJavadoc(\n \t\t\t\t\t\t\t\t\"Create the scoped proxy bean instance for '$L'.\",\n \t\t\t\t\t\t\t\tthis.registeredBean.getBeanName());\n \t\t\t\t\t\tmethod.addModifiers(Modifier.PRIVATE, Modifier.STATIC);\n-\t\t\t\t\t\tmethod.returns(beanClass);\n+\t\t\t\t\t\tmethod.returns(ScopedProxyFactoryBean.class);\n \t\t\t\t\t\tmethod.addParameter(RegisteredBean.class,\n \t\t\t\t\t\t\t\tREGISTERED_BEAN_PARAMETER_NAME);\n \t\t\t\t\t\tmethod.addStatement(\"$T factory = new $T()\",\n@@ -162,8 +160,7 @@ public CodeBlock generateInstanceSupplierCode(GenerationContext generationContex\n \t\t\t\t\t\tmethod.addStatement(\n \t\t\t\t\t\t\t\t\"factory.setBeanFactory($L.getBeanFactory())\",\n \t\t\t\t\t\t\t\tREGISTERED_BEAN_PARAMETER_NAME);\n-\t\t\t\t\t\tmethod.addStatement(\"return ($T) factory.getObject()\",\n-\t\t\t\t\t\t\t\tbeanClass);\n+\t\t\t\t\t\tmethod.addStatement(\"return factory\");\n \t\t\t\t\t});\n \t\t\treturn CodeBlock.of(\"$T.of($L)\", InstanceSupplier.class,\n \t\t\t\t\tgeneratedMethod.toMethodReference().toCodeBlock());",
    "output": "Simplify AOT contribution for scoped proxies This commit makes sure that a `ScopedProxyFactoryBean` is exposed in the container, rather than its underlying proxy. Previously, any lifecycle method that the proxy target exposed were invoked in the container. This is a complementary fix to"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/service/invoker/PathVariableArgumentResolverTests.java b/spring-web/src/test/java/org/springframework/web/service/invoker/PathVariableArgumentResolverTests.java\n--- a/spring-web/src/test/java/org/springframework/web/service/invoker/PathVariableArgumentResolverTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/service/invoker/PathVariableArgumentResolverTests.java\n@@ -40,6 +40,7 @@ class PathVariableArgumentResolverTests {\n \n \n \t@BeforeEach\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid setUp() throws Exception {\n \t\tHttpServiceProxyFactory proxyFactory = HttpServiceProxyFactory.builder(this.client).build();\n \t\tproxyFactory.afterPropertiesSet();",
    "output": "Suppress deprecation warnings in tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -24,8 +24,6 @@\n \n import kotlin.jvm.JvmClassMappingKt;\n import kotlin.reflect.KClass;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.core.KotlinDetector;\n import org.springframework.core.MethodParameter;\n@@ -45,8 +43,6 @@\n  */\n public class BindingReflectionHintsRegistrar {\n \n-\tprivate static final Log logger = LogFactory.getLog(BindingReflectionHintsRegistrar.class);\n-\n \tprivate static final String KOTLIN_COMPANION_SUFFIX = \"$Companion\";\n \n \t/**",
    "output": "Remove unused logger field"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -740,19 +740,6 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\tURI rootDirUri;\n \t\ttry {\n \t\t\trootDirUri = rootDirResource.getURI();\n-\t\t\t// If the URI is for a \"resource\" in the GraalVM native image file system, we have to\n-\t\t\t// ensure that the root directory does not end in a slash while simultaneously ensuring\n-\t\t\t// that the root directory is not an empty string (since Path#resolve throws an\n-\t\t\t// ArrayIndexOutOfBoundsException in a native image if the initial Path is created\n-\t\t\t// from an empty string).\n-\t\t\tString scheme = rootDirUri.getScheme();\n-\t\t\tString path = rootDirUri.getPath();\n-\t\t\tif (\"resource\".equals(scheme) && (path.length() > 1) && path.endsWith(\"/\")) {\n-\t\t\t\tpath = path.substring(0, path.length() - 1);\n-\t\t\t\t// Retain the fragment as well, since root folders in the native image\n-\t\t\t\t// file system are indexed via the fragment (e.g., resource:/#1).\n-\t\t\t\trootDirUri = new URI(scheme, path, rootDirUri.getFragment());\n-\t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tif (logger.isInfoEnabled()) {",
    "output": "Remove GraalVM workaround in PathMatchingResourcePatternResolver Tested successfully using the following locally built GraalVM dev build. OpenJDK Runtime Environment GraalVM 22.3.0-dev (build 17.0.5+5-.3-b07)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpMethod.java b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n@@ -138,7 +138,7 @@ public static HttpMethod valueOf(String method) {\n \t * @deprecated in favor of {@link #valueOf(String)}\n \t */\n \t@Nullable\n-\t@Deprecated\n+\t@Deprecated(since = \"6.0\", forRemoval = true)\n \tpublic static HttpMethod resolve(@Nullable String method) {\n \t\treturn (method != null ? valueOf(method) : null);\n \t}",
    "output": "Mark HttpMethod::resolve for removal"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java b/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java\n@@ -40,7 +40,7 @@ public String getClassName(String prefix, String source, Object key, Predicate n\n \t\tif (prefix == null) {\n \t\t\tprefix = \"org.springframework.cglib.empty.Object\";\n \t\t}\n-\t\telse if (prefix.startsWith(\"java\")) {\n+\t\telse if (prefix.startsWith(\"java.\") || prefix.startsWith(\"javax.\")) {\n \t\t\tprefix = \"_\" + prefix;\n \t\t}\n ",
    "output": "Specifically handle \"java.\"/\"javax.\" packages in SpringNamingPolicy"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java\n@@ -63,21 +63,11 @@ public void registerReflectionHints(ReflectionHints hints, Type... types) {\n \t\t}\n \t}\n \n-\t/**\n-\t * Return whether the type should be skipped.\n-\t * @param type the type to evaluate\n-\t * @return {@code true} if the type should be skipped\n-\t */\n-\tprotected boolean shouldSkipType(Class<?> type) {\n+\tprivate boolean shouldSkipType(Class<?> type) {\n \t\treturn type.isPrimitive() || type == Object.class;\n \t}\n \n-\t/**\n-\t * Return whether the members of the type should be skipped.\n-\t * @param type the type to evaluate\n-\t * @return {@code true} if the members of the type should be skipped\n-\t */\n-\tprotected boolean shouldSkipMembers(Class<?> type) {\n+\tprivate boolean shouldSkipMembers(Class<?> type) {\n \t\treturn type.getCanonicalName().startsWith(\"java.\") || type.isArray();\n \t}\n ",
    "output": "Make BindingReflectionHintsRegistrar protected methods private In order to keep the maximum of flexibility, this commit makes shouldSkipType and shouldSkipMembers methods private. That will allow for example to refactor BindingReflectionHintsRegistrar in order to support skipping custom classes specified via @RegisterReflectionForBinding without having to subclass it"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java b/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java\n@@ -31,20 +31,33 @@ public final class SpringNamingPolicy implements NamingPolicy {\n \n \tpublic static final SpringNamingPolicy INSTANCE = new SpringNamingPolicy();\n \n+\tprivate static final String LABEL = \"$$SpringCGLIB$$\";\n+\n \tprivate SpringNamingPolicy() {\n \t}\n \n \tpublic String getClassName(String prefix, String source, Object key, Predicate names) {\n \t\tif (prefix == null) {\n \t\t\tprefix = \"org.springframework.cglib.empty.Object\";\n-\t\t} else if (prefix.startsWith(\"java\")) {\n+\t\t}\n+\t\telse if (prefix.startsWith(\"java\")) {\n \t\t\tprefix = \"_\" + prefix;\n \t\t}\n-\t\tString base = prefix + \"$$SpringCGLIB$$\";\n+\n+\t\tString base;\n+\t\tint existingLabel = prefix.indexOf(LABEL);\n+\t\tif (existingLabel >= 0) {\n+\t\t\tbase = prefix.substring(0, existingLabel + LABEL.length());\n+\t\t}\n+\t\telse {\n+\t\t\tbase = prefix + LABEL;\n+\t\t}\n+\n \t\tint index = 0;\n \t\tString attempt = base + index;\n-\t\twhile (names.evaluate(attempt))\n+\t\twhile (names.evaluate(attempt)) {\n \t\t\tattempt = base + index++;\n+\t\t}\n \t\treturn attempt;\n \t}\n ",
    "output": "Revise CGLIB naming policy to only contain SpringCGLIB label once"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java\n@@ -160,7 +160,8 @@ public Object instantiate(RootBeanDefinition bd, @Nullable String beanName, Bean\n \t\t\t\t\t\"Cannot access factory method '\" + factoryMethod.getName() + \"'; is it public?\", ex);\n \t\t}\n \t\tcatch (InvocationTargetException ex) {\n-\t\t\tString msg = ex.getTargetException().getMessage();\n+\t\t\tString msg = \"Factory method '\" + factoryMethod.getName() + \"' threw exception with message: \" +\n+\t\t\t\t\tex.getTargetException().getMessage();\n \t\t\tif (bd.getFactoryBeanName() != null && owner instanceof ConfigurableBeanFactory &&\n \t\t\t\t\t((ConfigurableBeanFactory) owner).isCurrentlyInCreation(bd.getFactoryBeanName())) {\n \t\t\t\tmsg = \"Circular reference involving containing bean '\" + bd.getFactoryBeanName() + \"' - consider \" +",
    "output": "Reintroduce factory method name in exception thrown from SimpleInstantiationStrategy"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartParser.java\n@@ -17,6 +17,7 @@\n package org.springframework.http.codec.multipart;\n \n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Deque;\n@@ -602,7 +603,10 @@ private void flush() {\n \t\t@Override\n \t\tpublic void onComplete() {\n \t\t\tif (changeState(this, DisposedState.INSTANCE, null)) {\n-\t\t\t\temitError(new DecodingException(\"Could not find end of body\"));\n+\t\t\t\tString msg = \"Could not find end of body (␍␊--\" +\n+\t\t\t\t\t\tnew String(MultipartParser.this.boundary, StandardCharsets.UTF_8) +\n+\t\t\t\t\t\t\")\";\n+\t\t\t\temitError(new DecodingException(msg));\n \t\t\t}\n \t\t}\n ",
    "output": "Improve exception message if MultipartParser can not find end of body This commit improves the exception message thrown by MultipartParser when it cannot find the end of the multipart body, by showing in the message what the parser is looking for (CRLF--<boundary>)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestContextAotGenerator.java\n@@ -123,7 +123,6 @@ public void processAheadOfTime(Stream<Class<?>> testClasses) throws TestContextA\n \t\t\t\tmergedConfigMappings.add(mergedConfig, testClass);\n \t\t\t\tthis.testRuntimeHintsRegistrars.forEach(registrar ->\n \t\t\t\t\t\tregistrar.registerHints(this.runtimeHints, testClass, classLoader));\n-\t\t\t\tthis.mergedConfigRuntimeHints.registerHints(this.runtimeHints, mergedConfig, classLoader);\n \t\t\t});\n \t\t\tMultiValueMap<ClassName, Class<?>> initializerClassMappings = processAheadOfTime(mergedConfigMappings);\n \n@@ -141,10 +140,12 @@ private void resetAotFactories() {\n \t}\n \n \tprivate MultiValueMap<ClassName, Class<?>> processAheadOfTime(MultiValueMap<MergedContextConfiguration, Class<?>> mergedConfigMappings) {\n+\t\tClassLoader classLoader = getClass().getClassLoader();\n \t\tMultiValueMap<ClassName, Class<?>> initializerClassMappings = new LinkedMultiValueMap<>();\n \t\tmergedConfigMappings.forEach((mergedConfig, testClasses) -> {\n \t\t\tlogger.debug(LogMessage.format(\"Generating AOT artifacts for test classes %s\",\n \t\t\t\t\ttestClasses.stream().map(Class::getName).toList()));\n+\t\t\tthis.mergedConfigRuntimeHints.registerHints(this.runtimeHints, mergedConfig, classLoader);\n \t\t\ttry {\n \t\t\t\t// Use first test class discovered for a given unique MergedContextConfiguration.\n \t\t\t\tClass<?> testClass = testClasses.get(0);",
    "output": "Ensure MergedContextConfigurationRuntimeHints is invoked once per config"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java b/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,7 +34,6 @@\n import java.util.TreeMap;\n import java.util.TreeSet;\n \n-import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.util.LinkedMultiValueMap;\n@@ -156,7 +155,7 @@ void createMapIsNotTypeSafeForLinkedMultiValueMap() {\n \t@Test\n \tvoid createApproximateCollectionFromEmptyHashSet() {\n \t\tCollection<String> set = createApproximateCollection(new HashSet<String>(), 2);\n-\t\tAssertions.assertThat(set).isEmpty();\n+\t\tassertThat(set).isEmpty();\n \t}\n \n \t@Test",
    "output": "Use AssertJ static imports consistently in 5.3.x"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNetty2StompBrokerRelayIntegrationTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.messaging.simp.stomp;\n \n+import org.junit.jupiter.api.Disabled;\n+\n import org.springframework.messaging.tcp.TcpOperations;\n import org.springframework.messaging.tcp.reactor.ReactorNetty2TcpClient;\n \n@@ -25,6 +27,7 @@\n  *\n  * @author Rossen Stoyanchev\n  */\n+@Disabled(\"gh-29287 :: Disabled because they fail too frequently\")\n public class ReactorNetty2StompBrokerRelayIntegrationTests extends AbstractStompBrokerRelayIntegrationTests {\n \n \t@Override",
    "output": "Disable flaky ReactorNetty2StompBrokerRelayIntegrationTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java\n@@ -248,7 +248,7 @@ public URI getURI() throws IOException {\n \t\t\t\t\turi = new URI(scheme, uri.getPath(), null);\n \t\t\t\t}\n \t\t\t\tcatch (URISyntaxException ex) {\n-\t\t\t\t\tthrow new IllegalStateException(\"Failed to normalize URI: \" + uri, ex);\n+\t\t\t\t\tthrow new IOException(\"Failed to normalize URI: \" + uri, ex);\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn uri;",
    "output": "Throw IOException in FileSystemResource.getURIfor consistency"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -173,7 +173,7 @@ public void requestMappingHandlerAdapter() {\n \t\tApplicationContext context = initContext(WebConfig.class);\n \t\tRequestMappingHandlerAdapter adapter = context.getBean(RequestMappingHandlerAdapter.class);\n \t\tList<HttpMessageConverter<?>> converters = adapter.getMessageConverters();\n-\t\tassertThat(converters.size()).isEqualTo(12);\n+\t\tassertThat(converters).hasSizeGreaterThanOrEqualTo(15);\n \t\tconverters.stream()\n \t\t\t\t.filter(converter -> converter instanceof AbstractJackson2HttpMessageConverter)\n \t\t\t\t.forEach(converter -> {",
    "output": "Fix WebMvcConfigurationSupportTests due to change in previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/UnsatisfiedServletRequestParameterException.java\n@@ -77,7 +77,6 @@ private static List<String> paramsToStringList(List<String[]> paramConditions) {\n \t@Override\n \tpublic String getMessage() {\n \t\tStringBuilder sb = new StringBuilder(\"Parameter conditions \");\n-\t\tint i = 0;\n \t\tsb.append(String.join(\" OR \", paramsToStringList(this.paramConditions)));\n \t\tsb.append(\" not met for actual request parameters: \");\n \t\tsb.append(requestParameterMapToString(this.actualParams));",
    "output": "Remove obsolete code"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/ResourceTests.java b/spring-core/src/test/java/org/springframework/core/io/ResourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/ResourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/ResourceTests.java\n@@ -252,6 +252,27 @@ void readableChannelProvidesContent() throws Exception {\n \t\t\t}\n \t\t}\n \n+\t\t@Test\n+\t\tvoid urlAndUriAreNormalizedWhenCreatedFromFile() throws Exception {\n+\t\t\tPath path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\n+\t\t\tassertUrlAndUriBehavior(new FileSystemResource(path.toFile()));\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid urlAndUriAreNormalizedWhenCreatedFromPath() throws Exception {\n+\t\t\tPath path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\n+\t\t\tassertUrlAndUriBehavior(new FileSystemResource(path));\n+\t\t}\n+\n+\t\t/**\n+\t\t * The following assertions serve as regression tests for the lack of the\n+\t\t * \"authority component\" (//) in the returned URI/URL. For example, we are\n+\t\t * expecting file:/my/path (or file:/C:/My/Path) instead of file:///my/path.\n+\t\t */\n+\t\tprivate void assertUrlAndUriBehavior(Resource resource) throws IOException {\n+\t\t\tassertThat(resource.getURL().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\n+\t\t\tassertThat(resource.getURI().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\n+\t\t}\n \t}\n \n \t@Nested",
    "output": "Introduce unit tests for"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n@@ -23,6 +23,7 @@\n import java.util.Arrays;\n import java.util.List;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.Test;\n \n@@ -107,6 +108,7 @@ void usingFileProtocol() {\n \t\t\t\tassertExactSubPaths(pattern, pathPrefix, \"resource#test1.txt\", \"resource#test2.txt\");\n \t\t\t}\n \n+\t\t\t@Disabled(\"Disabled until gh-29275 is addressed\")\n \t\t\t@Test\n \t\t\tvoid usingFileProtocolAndAssertingUrlAndUriSyntax() throws Exception {\n \t\t\t\tPath testResourcesDir = Path.of(\"src/test/resources\").toAbsolutePath();",
    "output": "Disable failing test until is addressed"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -362,7 +362,8 @@ private static class MultipartHelper {\n \n \t\tpublic static MultiValueMap<String, ?> parse(MockClientHttpRequest request) {\n \t\t\ttry {\n-\t\t\t\tFileUpload fileUpload = new FileUpload(new DiskFileItemFactory());\n+\t\t\t\tFileUpload fileUpload = new FileUpload();\n+\t\t\t\tfileUpload.setFileItemFactory(new DiskFileItemFactory());\n \n \t\t\t\tList<FileItem> fileItems = fileUpload.parseRequest(new UploadContext() {\n \t\t\t\t\tprivate final byte[] body = request.getBodyAsBytes();",
    "output": "Upgrade to Tomcat 10.1 Includes Jetty 11.0.12, Hibernate ORM 5.6.12, HtmlUnit 2.65"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n@@ -79,7 +79,7 @@\n  * @author Sam Brannen\n  * @since 6.0\n  */\n-public class TestClassScanner {\n+class TestClassScanner {\n \n \t// JUnit Jupiter\n \tprivate static final String EXTEND_WITH_ANNOTATION_NAME = \"org.junit.jupiter.api.extension.ExtendWith\";",
    "output": "Make TestClassScanner package private again TestClassScanner was made public with the assumption that Spring Boot's AOT testing support might need to work directly with that class; however, it turns out that Spring Boot does not currently have such a need. In light of that, this commit restores TestClassScanner's visibility to package private"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java b/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java\n@@ -113,8 +113,7 @@ private CodeBlock generateCodeForConstructor(RegisteredBean registeredBean,\n \t\t\t\t.getUserClass(constructor.getDeclaringClass());\n \t\tboolean dependsOnBean = ClassUtils.isInnerClass(declaringClass);\n \t\tVisibility accessVisibility = getAccessVisibility(registeredBean, constructor);\n-\t\tif (accessVisibility == Visibility.PUBLIC\n-\t\t\t\t|| accessVisibility == Visibility.PACKAGE_PRIVATE) {\n+\t\tif (accessVisibility != Visibility.PRIVATE) {\n \t\t\treturn generateCodeForAccessibleConstructor(beanName, beanClass, constructor,\n \t\t\t\t\tdependsOnBean, declaringClass);\n \t\t}\n@@ -208,8 +207,7 @@ private CodeBlock generateCodeForFactoryMethod(RegisteredBean registeredBean,\n \t\t\t\t.getUserClass(factoryMethod.getDeclaringClass());\n \t\tboolean dependsOnBean = !Modifier.isStatic(factoryMethod.getModifiers());\n \t\tVisibility accessVisibility = getAccessVisibility(registeredBean, factoryMethod);\n-\t\tif (accessVisibility == Visibility.PUBLIC\n-\t\t\t\t|| accessVisibility == Visibility.PACKAGE_PRIVATE) {\n+\t\tif (accessVisibility != Visibility.PRIVATE) {\n \t\t\treturn generateCodeForAccessibleFactoryMethod(beanName, beanClass, factoryMethod,\n \t\t\t\t\tdeclaringClass, dependsOnBean);\n \t\t}",
    "output": "Fix handling of protected visibility Previously, InstanceSupplierCodeGenerator used reflection if the target visibility is either protected or private, and use direct access if the target visibility is public or package private. The previous arrangement already assumed that the code is generateed in the same package as the target type. This means that protected can be used as well so this commit only use reflection if the target visibility is private"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n@@ -76,7 +76,6 @@ public ReactorNetty2WebSocketClient(HttpClient httpClient) {\n \t/**\n \t * Constructor that accepts an existing {@link HttpClient} builder\n \t * and a pre-configured {@link WebsocketClientSpec.Builder}.\n-\t * @since 5.3\n \t */\n \tpublic ReactorNetty2WebSocketClient(\n \t\t\tHttpClient httpClient, Supplier<WebsocketClientSpec.Builder> builderSupplier) {\n@@ -100,7 +99,6 @@ public HttpClient getHttpClient() {\n \t * configuration. This can be used to check the configured parameters except\n \t * for sub-protocols which depend on the {@link WebSocketHandler} that is used\n \t * for a given upgrade.\n-\t * @since 5.3\n \t */\n \tpublic WebsocketClientSpec getWebsocketClientSpec() {\n \t\treturn buildSpec(null);",
    "output": "Remove incorrect [@]since tags"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNetty2WebSocketClient.java\n@@ -17,9 +17,6 @@\n package org.springframework.web.reactive.socket.client;\n \n import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n import java.util.function.Supplier;\n \n import org.apache.commons.logging.Log;\n@@ -162,12 +159,4 @@ private HttpHeaders toHttpHeaders(WebsocketInbound inbound) {\n \t\treturn headers;\n \t}\n \n-\tprivate static List<String> getAll(Iterator<CharSequence> valuesIterator) {\n-\t\tList<String> result = new ArrayList<>();\n-\t\twhile (valuesIterator.hasNext()) {\n-\t\t\tresult.add(valuesIterator.next().toString());\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n }",
    "output": "Delete unused code"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n@@ -348,7 +348,9 @@ protected Class generate(ClassLoaderData data) {\n \t\t\t}\n \t\t\tif (attemptLoad) {\n \t\t\t\ttry {\n-\t\t\t\t\tgen = classLoader.loadClass(getClassName());\n+\t\t\t\t\t// SPRING PATCH BEGIN\n+\t\t\t\t\tgen = Class.forName(getClassName(), true, classLoader);\n+\t\t\t\t\t// SPRING PATCH END\n \t\t\t\t\treturn gen;\n \t\t\t\t}\n \t\t\t\tcatch (ClassNotFoundException e) {",
    "output": "Enforce static initialization of CGLIB method proxies on attemptLoad This propagates current Enhancer settings (naming strategy etc) to the method proxies"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n@@ -68,7 +68,6 @@ void httpHead(HttpServer httpServer) throws Exception {\n \t\tHttpHeaders headers = getRestTemplate().headForHeaders(url);\n \t\tString contentType = headers.getFirst(\"Content-Type\");\n \t\tassertThat(contentType).isNotNull();\n-\t\tassertThat(contentType.toLowerCase()).isEqualTo(\"text/html;charset=utf-8\");\n \t\tassertThat(headers.getContentLength()).isEqualTo(3);\n \t}\n ",
    "output": "Polish test This test should not rely on a particular content-type as none is defined on the producing end, not on the requesting end"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n--- a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n@@ -57,8 +57,8 @@ public static MethodProxy create(Class c1, Class c2, String desc, String name1,\n \t\tproxy.createInfo = new CreateInfo(c1, c2);\n \n \t\t// SPRING PATCH BEGIN\n-\t\tif (!c1.isInterface() && c1 != Object.class) {\n-\t\t\t// Try early initialization for overridden methods on subclasses\n+\t\tif (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {\n+\t\t\t// Try early initialization for overridden methods on specifically purposed subclasses\n \t\t\ttry {\n \t\t\t\tproxy.init();\n \t\t\t}",
    "output": "Narrow early initialization of CGLIB method proxies (for AOT processing) Do not trigger early initialization on Factory classes (e.g. AOP proxies)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n--- a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n@@ -56,9 +56,15 @@ public static MethodProxy create(Class c1, Class c2, String desc, String name1,\n \t\tproxy.sig2 = new Signature(name2, desc);\n \t\tproxy.createInfo = new CreateInfo(c1, c2);\n \n-\t\t// SPRING PATCH BEGIN: early initialization for overridden methods on subclasses\n-\t\tif (!c1.isInterface()) {\n-\t\t\tproxy.init();\n+\t\t// SPRING PATCH BEGIN\n+\t\tif (!c1.isInterface() && c1 != Object.class) {\n+\t\t\t// Try early initialization for overridden methods on subclasses\n+\t\t\ttry {\n+\t\t\t\tproxy.init();\n+\t\t\t}\n+\t\t\tcatch (CodeGenerationException ex) {\n+\t\t\t\t// Ignore - to be retried when actually needed later on (possibly not at all)\n+\t\t\t}\n \t\t}\n \t\t// SPRING PATCH END\n ",
    "output": "Defensive early initialization of CGLIB method proxies (for AOT processing) Method proxies might not actually be used later on, so failure is not fatal"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/generator/ApplicationContextAotGeneratorRuntimeHintsTests.java b/spring-context/src/test/java/org/springframework/context/generator/ApplicationContextAotGeneratorRuntimeHintsTests.java\n--- a/spring-context/src/test/java/org/springframework/context/generator/ApplicationContextAotGeneratorRuntimeHintsTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/generator/ApplicationContextAotGeneratorRuntimeHintsTests.java\n@@ -18,6 +18,7 @@\n \n import java.util.function.BiConsumer;\n \n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.aot.hint.RuntimeHints;\n@@ -71,6 +72,7 @@ void generateApplicationContextWithInitDestroyMethods() {\n \t}\n \n \t@Test\n+\t@Disabled(\"until gh-29246 is re-applied\")\n \tvoid generateApplicationContextWithMultipleInitDestroyMethods() {\n \t\tGenericApplicationContext context = new AnnotationConfigApplicationContext();\n \t\tRootBeanDefinition beanDefinition = new RootBeanDefinition(InitDestroyComponent.class);",
    "output": "Temporarily ignore tests until is re-applied"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n@@ -541,7 +541,7 @@ private Object createCglibProxyForFactoryBean(Object factoryBean,\n \t\t\t\tif (method.getName().equals(\"getObject\") && args.length == 0) {\n \t\t\t\t\treturn beanFactory.getBean(beanName);\n \t\t\t\t}\n-\t\t\t\treturn proxy.invoke(factoryBean, args);\n+\t\t\t\treturn method.invoke(factoryBean, args);\n \t\t\t});\n \n \t\t\treturn fbProxy;\n\ndiff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n--- a/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java\n@@ -55,6 +55,13 @@ public static MethodProxy create(Class c1, Class c2, String desc, String name1,\n \t\tproxy.sig1 = new Signature(name1, desc);\n \t\tproxy.sig2 = new Signature(name2, desc);\n \t\tproxy.createInfo = new CreateInfo(c1, c2);\n+\n+\t\t// SPRING PATCH BEGIN: early initialization for overridden methods on subclasses\n+\t\tif (!c1.isInterface()) {\n+\t\t\tproxy.init();\n+\t\t}\n+\t\t// SPRING PATCH END\n+\n \t\treturn proxy;\n \t}\n ",
    "output": "Enforce early initialization of CGLIB method proxies (for AOT processing) For non-required method proxies, prefer regular reflective invocation instead"
  },
  {
    "input": "diff --git a/spring-core-test/src/test/java/org/springframework/core/test/tools/SourceFileTests.java b/spring-core-test/src/test/java/org/springframework/core/test/tools/SourceFileTests.java\n--- a/spring-core-test/src/test/java/org/springframework/core/test/tools/SourceFileTests.java\n+++ b/spring-core-test/src/test/java/org/springframework/core/test/tools/SourceFileTests.java\n@@ -152,8 +152,8 @@ void getClassNameFromAnnotatedRecord() {\n \t\t\tpackage com.example;\n \n \t\t\tpublic record RecordProperties(\n-\t\t\t\t\t@org.springframework.boot.context.properties.bind.DefaultValue(\"default-value-1\") String property1,\n-\t\t\t\t\t@org.springframework.boot.context.properties.bind.DefaultValue(\"default-value-2\") String property2) {\n+\t\t\t\t\t@org.springframework.lang.NonNull(\"test\") String property1,\n+\t\t\t\t\t@org.springframework.lang.NonNull(\"test\") String property2) {\n \t\t\t}\n \t\t\"\"\");\n \t\tassertThat(sourceFile.getClassName()).isEqualTo(\"com.example.RecordProperties\");",
    "output": "Avoid using org.springframework.boot"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n@@ -49,7 +49,7 @@\n  * @author Sam Brannen\n  * @since 5.2.4\n  */\n-@DisabledOnJre(JRE.JAVA_18) // BlockHound is not compatible with JDK 18 yet\n+@DisabledOnJre(value= {JRE.JAVA_18, JRE.JAVA_19}, disabledReason = \"BlockHound is not compatible with Java 18+\")\n class SpringCoreBlockHoundIntegrationTests {\n \n ",
    "output": "Ignore Blockhound tests on Java 19"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n@@ -59,7 +59,6 @@\n  * @see #setDefaultLocale\n  * @see #setDefaultTimeZone\n  */\n-@SuppressWarnings(\"deprecation\")\n public class CookieLocaleResolver extends AbstractLocaleContextResolver {\n \n \t/**",
    "output": "Remove unnecessary suppressing of deprecation"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java\n@@ -289,7 +289,8 @@ void wellKnownModules() throws JsonProcessingException, UnsupportedEncodingExcep\n \n \t\t// Kotlin module\n \t\tIntRange range = new IntRange(1, 3);\n-\t\tassertThat(new String(objectMapper.writeValueAsBytes(range), \"UTF-8\")).isEqualTo(\"{\\\"start\\\":1,\\\"end\\\":3}\");\n+\t\t// temporarily change the assertion, see https://github.com/FasterXML/jackson-module-kotlin/issues/582\n+\t\tassertThat(new String(objectMapper.writeValueAsBytes(range), \"UTF-8\")).isEqualTo(\"{\\\"start\\\":1,\\\"end\\\":3,\\\"endExclusive\\\":4}\");\n \t}\n \n \t@Test  // gh-22576",
    "output": "Upgrade to Kotlin 1.7.20 This commit also temporarily changes a test assertion for the Jackson Kotlin module. As of https://youtrack.jetbrains.com/issue/, Kotlin enhanced the `IntRange` and this change is not supported yet by the Jackson Kotlin module. An issue has been reported here FasterXML/jackson-module-kotlin"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java b/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/aot/AotApplicationContextInitializerTests.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.context.aot;\n \n-import java.util.List;\n-\n import org.junit.jupiter.api.Test;\n \n import org.springframework.beans.factory.support.RootBeanDefinition;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java b/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java\n--- a/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java\n+++ b/spring-context/src/main/java/org/springframework/context/aot/AotApplicationContextInitializer.java\n@@ -57,7 +57,7 @@ public interface AotApplicationContextInitializer<C extends ConfigurableApplicat\n \t * @param initializerClassNames the class names of the initializers to load\n \t * @return a new {@link AotApplicationContextInitializer} instance\n \t */\n-\tstatic <C extends ConfigurableApplicationContext> ApplicationContextInitializer<C> forInitializerClasses(\n+\tstatic <C extends ConfigurableApplicationContext> AotApplicationContextInitializer<C> forInitializerClasses(\n \t\t\tString... initializerClassNames) {\n \n \t\tAssert.noNullElements(initializerClassNames, \"'initializerClassNames' must not contain null elements\");",
    "output": "Fix factory method return type"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java b/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java\n--- a/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java\n@@ -37,7 +37,9 @@\n  * @see #addCookie\n  * @see #removeCookie\n  * @see org.springframework.web.servlet.theme.CookieThemeResolver\n+ * @deprecated since 6.0 in favor of {@link org.springframework.http.ResponseCookie}\n  */\n+@Deprecated\n public class CookieGenerator {\n \n \t/**\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n@@ -59,6 +59,7 @@\n  * @see #setDefaultLocale\n  * @see #setDefaultTimeZone\n  */\n+@SuppressWarnings(\"deprecation\")\n public class CookieLocaleResolver extends AbstractLocaleContextResolver {\n \n \t/**",
    "output": "Deprecate CookieGenerator This commit deprecates CookieGenerator in favor of the more modern alternative, ResponseCookie"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -35,6 +35,7 @@\n import java.util.concurrent.Callable;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n \n import jakarta.annotation.Priority;\n import org.junit.jupiter.api.Test;\n@@ -2019,10 +2020,8 @@ void beanProviderWithParentBeanFactoryReuseOrder() {\n \t\tlbf.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);\n \t\tlbf.setParentBeanFactory(parentBf);\n \t\tlbf.registerBeanDefinition(\"low\", new RootBeanDefinition(LowPriorityTestBean.class));\n-\t\tList<Class<?>> orderedTypes = lbf.getBeanProvider(TestBean.class).orderedStream()\n-\t\t\t\t.map(Object::getClass).toList();\n-\t\tassertThat(orderedTypes).containsExactly(\n-\t\t\t\tHighPriorityTestBean.class, LowPriorityTestBean.class, TestBean.class);\n+\t\tStream<Class<?>> orderedTypes = lbf.getBeanProvider(TestBean.class).orderedStream().map(Object::getClass);\n+\t\tassertThat(orderedTypes).containsExactly(HighPriorityTestBean.class, LowPriorityTestBean.class, TestBean.class);\n \t}\n \n \t@Test",
    "output": "Ensure DefaultListableBeanFactoryTests compiles in Eclipse IDE"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -745,7 +745,8 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\tFileSystem fileSystem;\n \t\ttry {\n \t\t\tfileSystem = FileSystems.getFileSystem(rootDirResource.getURI().resolve(\"/\"));\n-\t\t} catch (Exception e) {\n+\t\t}\n+\t\tcatch (Exception ex) {\n \t\t\tfileSystem = FileSystems.newFileSystem(rootDirResource.getURI().resolve(\"/\"), Map.of(),\n \t\t\t\t\tClassUtils.getDefaultClassLoader());\n \t\t}\n@@ -769,17 +770,20 @@ protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource\n \t\t\t\tif (getPathMatcher().match(patternPath.toString(), file.toString())) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tresult.add(new UrlResource(file.toUri()));\n-\t\t\t\t\t} catch (MalformedURLException e) {\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (MalformedURLException ex) {\n \t\t\t\t\t\t// ignore\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t});\n-\t\t} catch (NoSuchFileException e) {\n+\t\t}\n+\t\tcatch (NoSuchFileException ex) {\n \t\t\t// ignore\n \t\t}\n \t\ttry {\n \t\t\tfileSystem.close();\n-\t\t} catch (UnsupportedOperationException e) {\n+\t\t}\n+\t\tcatch (UnsupportedOperationException ex) {\n \t\t\t// ignore\n \t\t}\n \t\treturn result;",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java b/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generate/TestGenerationContext.java\n@@ -51,12 +51,21 @@ public TestGenerationContext(ClassNameGenerator classNameGenerator) {\n \n \t/**\n \t * Create an instance using the specified {@code target}.\n-\t * @param target the default target class to use\n+\t * @param target the default target class name to use\n \t */\n \tpublic TestGenerationContext(ClassName target) {\n \t\tthis(new ClassNameGenerator(target));\n \t}\n \n+\t/**\n+\t * Create an instance using the specified {@code target}.\n+\t * @param target the default target class to use\n+\t */\n+\tpublic TestGenerationContext(Class<?> target) {\n+\t\tthis(ClassName.get(target));\n+\t}\n+\n+\n \t/**\n \t * Create an instance using {@link #TEST_TARGET} as the {@code target}.\n \t */",
    "output": "Add shortcut in TestGenerationContext"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n@@ -21,6 +21,9 @@\n import java.util.Arrays;\n \n import org.springframework.context.MessageSource;\n+import org.jetbrains.annotations.NotNull;\n+import org.reactivestreams.Publisher;\n+\n import org.springframework.core.CoroutinesUtils;\n import org.springframework.core.DefaultParameterNameDiscoverer;\n import org.springframework.core.KotlinDetector;\n@@ -200,7 +203,7 @@ protected Object doInvoke(Object... args) throws Exception {\n \t\tMethod method = getBridgedMethod();\n \t\ttry {\n \t\t\tif (KotlinDetector.isSuspendingFunction(method)) {\n-\t\t\t\treturn CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args);\n+\t\t\t\treturn invokeSuspendingFunction(method, args);\n \t\t\t}\n \t\t\treturn method.invoke(getBean(), args);\n \t\t}\n@@ -228,4 +231,12 @@ else if (targetException instanceof Exception) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Invokes Kotlin coroutine suspended function.\n+\t */\n+\t@NotNull\n+\tprotected Publisher<?> invokeSuspendingFunction(Method method, Object[] args) {\n+\t\treturn CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args);\n+\t}\n+\n }",
    "output": "Allow overriding invokeSuspendingFunction This commit isolates the invocation of Kotlin coroutines into a separate template method, so that it can be overridden in subclasses of RequestMappingHandlerAdapter"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java\n@@ -372,17 +372,7 @@ public InvocableHandlerMethod getExceptionHandlerMethod(Throwable ex, HandlerMet\n \t */\n \tpublic SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {\n \t\tClass<?> handlerType = handlerMethod.getBeanType();\n-\t\tSessionAttributesHandler result = this.sessionAttributesHandlerCache.get(handlerType);\n-\t\tif (result == null) {\n-\t\t\tsynchronized (this.sessionAttributesHandlerCache) {\n-\t\t\t\tresult = this.sessionAttributesHandlerCache.get(handlerType);\n-\t\t\t\tif (result == null) {\n-\t\t\t\t\tresult = new SessionAttributesHandler(handlerType);\n-\t\t\t\t\tthis.sessionAttributesHandlerCache.put(handlerType, result);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n+\t\treturn this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, SessionAttributesHandler::new);\n \t}\n \n }",
    "output": "Remove unnecessary sync block in ControllerMethodResolver"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n@@ -85,8 +85,7 @@ public static boolean isEmpty(@Nullable Map<?, ?> map) {\n \t * @see #newLinkedHashMap(int)\n \t */\n \tpublic static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n-\t\tint capacity = (int) Math.ceil(expectedSize / (double) DEFAULT_LOAD_FACTOR);\n-\t\treturn new HashMap<>(capacity, DEFAULT_LOAD_FACTOR);\n+\t\treturn new HashMap<>(computeMapInitialCapacity(expectedSize), DEFAULT_LOAD_FACTOR);\n \t}\n \n \t/**\n@@ -103,8 +102,11 @@ public static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n \t * @see #newHashMap(int)\n \t */\n \tpublic static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int expectedSize) {\n-\t\tint capacity = (int) Math.ceil(expectedSize / (double) DEFAULT_LOAD_FACTOR);\n-\t\treturn new LinkedHashMap<>(capacity, DEFAULT_LOAD_FACTOR);\n+\t\treturn new LinkedHashMap<>(computeMapInitialCapacity(expectedSize), DEFAULT_LOAD_FACTOR);\n+\t}\n+\n+\tprivate static int computeMapInitialCapacity(int expectedSize) {\n+\t\treturn (int) Math.ceil(expectedSize / (double) DEFAULT_LOAD_FACTOR);\n \t}\n \n \t/**",
    "output": "Avoid resizing of Maps created by CollectionUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -85,7 +85,8 @@ public static boolean isEmpty(@Nullable Map<?, ?> map) {\n \t * @see #newLinkedHashMap(int)\n \t */\n \tpublic static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n-\t\treturn new HashMap<>((int) (expectedSize / DEFAULT_LOAD_FACTOR), DEFAULT_LOAD_FACTOR);\n+\t\tint capacity = (int) Math.ceil(expectedSize / (double) DEFAULT_LOAD_FACTOR);\n+\t\treturn new HashMap<>(capacity, DEFAULT_LOAD_FACTOR);\n \t}\n \n \t/**\n@@ -102,7 +103,8 @@ public static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n \t * @see #newHashMap(int)\n \t */\n \tpublic static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int expectedSize) {\n-\t\treturn new LinkedHashMap<>((int) (expectedSize / DEFAULT_LOAD_FACTOR), DEFAULT_LOAD_FACTOR);\n+\t\tint capacity = (int) Math.ceil(expectedSize / (double) DEFAULT_LOAD_FACTOR);\n+\t\treturn new LinkedHashMap<>(capacity, DEFAULT_LOAD_FACTOR);\n \t}\n \n \t/**",
    "output": "Avoid resizing of Maps created by CollectionUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -892,6 +892,12 @@ protected File[] listDirectory(File dir) {\n \t */\n \tprotected Set<Resource> findAllModulePathResources(String locationPattern) throws IOException {\n \t\tSet<Resource> result = new LinkedHashSet<>(16);\n+\n+\t\t// Skip scanning the module path when running in a native image.\n+\t\tif (NativeDetector.inNativeImage()) {\n+\t\t\treturn result;\n+\t\t}\n+\n \t\tString resourcePattern = stripLeadingSlash(locationPattern);\n \t\tPredicate<String> resourcePatternMatches = (getPathMatcher().isPattern(resourcePattern) ?\n \t\t\t\tpath -> getPathMatcher().match(resourcePattern, path) :",
    "output": "Skip scanning the module path when running in a native image Prior to this commit, the following exception was thrown when using the PathMatchingResourcePatternResolver to scan for class path resources using the `classpath*:` prefix within a native image. com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89) jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139) jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527) jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502) org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819) This commit addresses this by not attempting to scan the module path when running in a GraalVM native image"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n@@ -18,7 +18,6 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -241,7 +240,6 @@ void multipartRequestWrapped() throws Exception {\n \t\tFilter filter = new RequestWrappingFilter();\n \t\tMockMvc mockMvc = standaloneSetup(new MultipartController()).addFilter(filter).build();\n \n-\t\tMap<String, String> jsonMap = Collections.singletonMap(\"name\", \"yeeeah\");\n \t\tmockMvc.perform(multipart(\"/json\").file(jsonPart)).andExpect(status().isFound());\n \t}\n ",
    "output": "Remove unused variable in test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n@@ -47,7 +47,6 @@\n import org.springframework.core.codec.Hints;\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n-import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n import org.springframework.core.log.LogFormatUtils;\n import org.springframework.http.MediaType;\n import org.springframework.http.codec.HttpMessageEncoder;\n@@ -74,8 +73,6 @@ public abstract class AbstractJackson2Encoder extends Jackson2CodecSupport imple\n \n \tprivate static final byte[] EMPTY_BYTES = new byte[0];\n \n-\tprivate static DataBuffer EMPTY_BUFFER = DefaultDataBufferFactory.sharedInstance.wrap(EMPTY_BYTES);\n-\n \tprivate static final Map<String, JsonEncoding> ENCODINGS;\n \n \tstatic {",
    "output": "Remove unused EMPTY_BUFFER constant"
  },
  {
    "input": "diff --git a/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java b/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java\n--- a/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java\n+++ b/spring-core-test/src/test/java/org/springframework/core/test/io/support/MockSpringFactoriesLoaderTests.java\n@@ -21,7 +21,6 @@\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.annotation.Order;\n-import org.springframework.core.test.io.support.MockSpringFactoriesLoader;\n \n import static org.assertj.core.api.Assertions.assertThat;\n ",
    "output": "Remove unnecessary import"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/jdbc/EmptyDatabaseConfig.java b/spring-test/src/test/java/org/springframework/test/context/jdbc/EmptyDatabaseConfig.java\n--- a/spring-test/src/test/java/org/springframework/test/context/jdbc/EmptyDatabaseConfig.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/EmptyDatabaseConfig.java\n@@ -31,7 +31,7 @@\n  * @author Sam Brannen\n  * @since 4.1\n  */\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class EmptyDatabaseConfig {\n \n \t@Bean",
    "output": "Workaround LinkageError with TestCompiler"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n@@ -114,7 +114,7 @@ public boolean isDone() {\n \t * {@link java.util.concurrent.CancellationException} if the future has been cancelled.\n \t * @return the value associated with this future\n \t */\n-\t@Override\n+\t@Override  @Nullable\n \tpublic T get() throws InterruptedException, ExecutionException {\n \t\treturn this.settableTask.get();\n \t}",
    "output": "Add missing @Nullable in SettableListenableFuture"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -579,6 +579,10 @@ private URL determineDefaultPersistenceUnitRootUrl() {\n \t\t\treturn (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url);\n \t\t}\n \t\tcatch (IOException ex) {\n+\t\t\tif (ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION.equals(this.defaultPersistenceUnitRootLocation)) {\n+\t\t\t\tlogger.debug(\"Unable to resolve classpath root as persistence unit root URL\");\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\tthrow new PersistenceException(\"Unable to resolve persistence unit root URL\", ex);\n \t\t}\n \t}",
    "output": "Refine DefaultPersistenceUnitManager#determineDefaultPersistenceUnitRootUrl This commit refines the implementation to be more lenient when defaultPersistenceUnitRootLocation is equals to ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION and an IOException is thrown, which happens when running on native image"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNetty2TcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNetty2TcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNetty2TcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNetty2TcpClient.java\n@@ -340,7 +340,7 @@ private static class StompMessageDecoder<P> extends ByteToMessageDecoder {\n \t\tprotected void decode(ChannelHandlerContext ctx, Buffer buffer) throws Exception {\n \t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(buffer.readableBytes());\n \t\t\tbuffer.readBytes(byteBuffer);\n-\t\t\tbyteBuffer.position(0);\n+\t\t\tbyteBuffer.flip();\n \t\t\tList<Message<P>> messages = this.codec.decode(byteBuffer);\n \t\t\tfor (Message<P> message : messages) {\n \t\t\t\tctx.fireChannelRead(message);",
    "output": "Minor change in ReactorNetty2TcpClient A follow-up on recent addition of ReactorNetty2TcpClient and switch to Netty 5 Buffer"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java\n@@ -160,7 +160,7 @@ protected void closeConnection() throws Exception {\n \t}\n \n \t@Override\n-\tprotected boolean isConnected() {\n+\tpublic boolean isConnected() {\n \t\treturn (this.webSocketSession != null && this.webSocketSession.isOpen());\n \t}\n ",
    "output": "Make WebSocketConnectionManager#isConnected public"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n@@ -107,12 +107,16 @@ void endToEndTests() {\n \t@Test\n \tvoid endToEndTestsForEntireSpringTestModule() {\n \t\t// AOT BUILD-TIME: CLASSPATH SCANNING\n-\t\tList<Class<?>> testClasses = createTestClassScanner()\n+\t\tList<Class<?>> testClasses =\n+\t\t\t\t// FYI: you can limit execution to a particular set of test classes as follows.\n+\t\t\t\t// List.of(DirtiesContextTransactionalTestNGSpringContextTests.class, ...);\n+\t\t\t\tcreateTestClassScanner()\n \t\t\t\t.scan()\n-\t\t\t\t// FYI: you can limit execution to a particular package as follows.\n+\t\t\t\t// FYI: you can limit execution to a particular package and its subpackages as follows.\n \t\t\t\t// .scan(\"org.springframework.test.context.junit.jupiter\")\n \t\t\t\t.toList();\n \n+\n \t\t// AOT BUILD-TIME: PROCESSING\n \t\tInMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\n \t\tTestContextAotGenerator generator = new TestContextAotGenerator(generatedFiles);",
    "output": "Improve tips for using endToEndTestsForEntireSpringTestModule"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/AotIntegrationTests.java\n@@ -26,6 +26,7 @@\n \n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n+import org.junit.platform.engine.discovery.ClassNameFilter;\n import org.junit.platform.launcher.LauncherDiscoveryRequest;\n import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n import org.junit.platform.launcher.core.LauncherFactory;\n@@ -136,6 +137,7 @@ private static void runTestsInAotMode(long expectedNumTests, Class<?>... testCla\n \t\t\tSystem.setProperty(AotDetector.AOT_ENABLED, \"true\");\n \n \t\t\tLauncherDiscoveryRequestBuilder builder = LauncherDiscoveryRequestBuilder.request()\n+\t\t\t\t\t.filters(ClassNameFilter.includeClassNamePatterns(\".*Tests?$\"))\n \t\t\t\t\t.filters(excludeTags(\"failing-test-case\"));\n \t\t\tArrays.stream(testClasses).forEach(testClass -> builder.selectors(selectClass(testClass)));\n \t\t\tLauncherDiscoveryRequest request = builder.build();",
    "output": "Filter AOT end-to-end tests like in the actual build"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StreamUtils.java b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n@@ -33,7 +33,7 @@\n /**\n  * Simple utility methods for dealing with streams. The copy methods of this class are\n  * similar to those defined in {@link FileCopyUtils} except that all affected streams are\n- * left open when done. All copy methods use a block size of 4096 bytes.\n+ * left open when done. All copy methods use a block size of 8192 bytes.\n  *\n  * <p>Mainly for use within the framework, but also useful for application code.\n  *\n@@ -48,7 +48,7 @@ public abstract class StreamUtils {\n \t/**\n \t * The default buffer size used when copying bytes.\n \t */\n-\tpublic static final int BUFFER_SIZE = 4096;\n+\tpublic static final int BUFFER_SIZE = 8192;\n \n \tprivate static final byte[] EMPTY_CONTENT = new byte[0];\n \n@@ -83,7 +83,7 @@ public static String copyToString(@Nullable InputStream in, Charset charset) thr\n \t\t\treturn \"\";\n \t\t}\n \n-\t\tStringBuilder out = new StringBuilder(BUFFER_SIZE);\n+\t\tStringBuilder out = new StringBuilder();\n \t\tInputStreamReader reader = new InputStreamReader(in, charset);\n \t\tchar[] buffer = new char[BUFFER_SIZE];\n \t\tint charsRead;",
    "output": "Increase StreamUtils.BUFFER_SIZE to 8192 This aligns the buffer size used in StreamUtils with the buffer sizes used throughout the JDK (see InputStream, BufferedInputStream, Files)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n@@ -22,6 +22,8 @@\n \n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledOnJre;\n+import org.junit.jupiter.api.condition.JRE;\n import reactor.blockhound.BlockHound;\n import reactor.core.scheduler.ReactorBlockHoundIntegration;\n import reactor.core.scheduler.Schedulers;\n@@ -47,6 +49,7 @@\n  * @author Sam Brannen\n  * @since 5.2.4\n  */\n+@DisabledOnJre(JRE.JAVA_18) // BlockHound is not compatible with JDK 18 yet\n class SpringCoreBlockHoundIntegrationTests {\n \n ",
    "output": "Disable BlockHound tests on Java 18+ BlockHound is not currently compatible with Java 18"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java b/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpStatusCode.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.http;\n \n+import java.io.Serializable;\n+\n import org.springframework.util.Assert;\n \n /**\n@@ -27,7 +29,7 @@\n  * @see <a href=\"https://www.iana.org/assignments/http-status-codes\">HTTP Status Code Registry</a>\n  * @see <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">List of HTTP status codes - Wikipedia</a>\n  */\n-public sealed interface HttpStatusCode permits DefaultHttpStatusCode, HttpStatus {\n+public sealed interface HttpStatusCode extends Serializable permits DefaultHttpStatusCode, HttpStatus {\n \n \t/**\n \t * Return the integer value of this status code.",
    "output": "Make HttpStatusCode extend Serializable `HttpStatusCode` instance only hold an int value and are held by `Serializable` classes, so this commit enforces this. Without this change, Java 19+ will emit a compiler warning as `Serializable` classes use `HttpStatusCode` as a field"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generate/compile/CompileWithTargetClassAccessClassLoader.java b/spring-core-test/src/main/java/org/springframework/aot/test/generate/compile/CompileWithTargetClassAccessClassLoader.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generate/compile/CompileWithTargetClassAccessClassLoader.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generate/compile/CompileWithTargetClassAccessClassLoader.java\n@@ -41,7 +41,7 @@ public CompileWithTargetClassAccessClassLoader(ClassLoader testClassLoader) {\n \n \t@Override\n \tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n-\t\tif (name.startsWith(\"org.junit\")) {\n+\t\tif (name.startsWith(\"org.junit\") || name.startsWith(\"org.testng\")) {\n \t\t\treturn Class.forName(name, false, this.testClassLoader);\n \t\t}\n \t\treturn super.loadClass(name);",
    "output": "Support TestNG with @CompileWithTargetClassAccess"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java b/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java\n--- a/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/WebUtilRuntimeHints.java\n@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.web.util;\n+\n+import org.springframework.aot.hint.RuntimeHints;\n+import org.springframework.aot.hint.RuntimeHintsRegistrar;\n+\n+/**\n+ * {@link RuntimeHintsRegistrar} implementation that registers resource\n+ * hints for web util classes.\n+ *\n+ * @author Sebastien Deleuze\n+ * @since 6.0\n+ */\n+class WebUtilRuntimeHints implements RuntimeHintsRegistrar {\n+\n+\t@Override\n+\tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n+\t\thints.resources().registerPattern(\"org/springframework/web/util/HtmlCharacterEntityReferences.properties\");\n+\t}\n+}",
    "output": "Add resource hints for HtmlCharacterEntityReferences.properties"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2002-2022 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.core.annotation;\n-\n-/**\n- * Marker interface implemented by synthesized annotation proxies.\n- *\n- * <p>Used to detect whether an annotation has already been synthesized.\n- *\n- * @author Sam Brannen\n- * @since 4.2\n- * @deprecated For removal prior to Spring Framework 6.0; use\n- * {@link AnnotationUtils#isSynthesizedAnnotation(java.lang.annotation.Annotation)}\n- * instead.\n- */\n-@Deprecated\n-public interface SynthesizedAnnotation {\n-}",
    "output": "Remove deprecated SynthesizedAnnotation interface The SynthesizedAnnotation interface is no longer used in the core Spring Framework and should not be used by external parties either"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicatesTests.java b/spring-core/src/test/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicatesTests.java\n--- a/spring-core/src/test/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicatesTests.java\n+++ b/spring-core/src/test/java/org/springframework/aot/hint/predicate/ReflectionHintsPredicatesTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.aot.hint.predicate;\n \n-\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n@@ -47,12 +46,8 @@ class ReflectionHintsPredicatesTests {\n \n \tprivate static Constructor<?> publicConstructor;\n \n-\tprivate static Method privateMethod;\n-\n \tprivate static Method publicMethod;\n \n-\tprivate static Field privateField;\n-\n \tprivate static Field publicField;\n \n \tprivate final ReflectionHintsPredicates reflection = new ReflectionHintsPredicates();\n@@ -64,9 +59,7 @@ class ReflectionHintsPredicatesTests {\n \tstatic void setupAll() throws Exception {\n \t\tprivateConstructor = SampleClass.class.getDeclaredConstructor(String.class);\n \t\tpublicConstructor = SampleClass.class.getConstructor();\n-\t\tprivateMethod = SampleClass.class.getDeclaredMethod(\"privateMethod\");\n \t\tpublicMethod = SampleClass.class.getMethod(\"publicMethod\");\n-\t\tprivateField = SampleClass.class.getDeclaredField(\"privateField\");\n \t\tpublicField = SampleClass.class.getField(\"publicField\");\n \t}\n ",
    "output": "Delete unused code in ReflectionHintsPredicatesTests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java b/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/aot/TestAotProcessorTests.java\n@@ -92,6 +92,7 @@ private static List<String> findFiles(Path outputPath) throws IOException {\n \t\t\t\t.map(Path::toAbsolutePath)\n \t\t\t\t.map(Path::toString)\n \t\t\t\t.map(path -> path.substring(prefixLength))\n+\t\t\t\t.map(path -> path.replace('\\\\', '/')) // convert Windows path\n \t\t\t\t.toList();\n \t}\n ",
    "output": "Fix TestAotProcessorTests on MS Windows"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/invoker/RequestBodyArgumentResolver.java b/spring-web/src/main/java/org/springframework/web/service/invoker/RequestBodyArgumentResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/service/invoker/RequestBodyArgumentResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/invoker/RequestBodyArgumentResolver.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.web.service.invoker;\n \n-import org.reactivestreams.Publisher;\n-\n import org.springframework.core.MethodParameter;\n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.ReactiveAdapter;",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.web.filter;\n \n+import java.io.IOException;\n+\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpServletResponseWrapper;\n \n@@ -44,9 +46,11 @@ private RelativeRedirectResponseWrapper(HttpServletResponse response, HttpStatus\n \n \n \t@Override\n-\tpublic void sendRedirect(String location) {\n+\tpublic void sendRedirect(String location) throws IOException {\n+\t\tresetBuffer();\n \t\tsetStatus(this.redirectStatus.value());\n \t\tsetHeader(HttpHeaders.LOCATION, location);\n+\t\tflushBuffer();\n \t}\n \n ",
    "output": "Redirect response wrapper should commit response This commit ensures that when using `sendRedirect`, the response wrapper behaves correctly with regards to the Servlet specification 1. reset the response buffer to clear any partially written response 2. set the expected response HTTP headers 3. flush the buffer to commit the response"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n@@ -46,10 +46,10 @@ public class ClassPathResource extends AbstractFileResolvingResource {\n \tprivate final String path;\n \n \t@Nullable\n-\tprivate ClassLoader classLoader;\n+\tprivate final ClassLoader classLoader;\n \n \t@Nullable\n-\tprivate Class<?> clazz;\n+\tprivate final Class<?> clazz;\n \n \n \t/**\n@@ -83,6 +83,7 @@ public ClassPathResource(String path, @Nullable ClassLoader classLoader) {\n \t\t}\n \t\tthis.path = pathToUse;\n \t\tthis.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());\n+\t\tthis.clazz = null;\n \t}\n \n \t/**\n@@ -96,6 +97,7 @@ public ClassPathResource(String path, @Nullable ClassLoader classLoader) {\n \tpublic ClassPathResource(String path, @Nullable Class<?> clazz) {\n \t\tAssert.notNull(path, \"Path must not be null\");\n \t\tthis.path = StringUtils.cleanPath(path);\n+\t\tthis.classLoader = null;\n \t\tthis.clazz = clazz;\n \t}\n ",
    "output": "Make fields in ClassPathResource final"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java b/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/hint/package-info.java\n@@ -0,0 +1,10 @@\n+/**\n+ * Support for registering hints for reflection and resources in the\n+ * <em>Spring TestContext Framework</em>.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.test.context.aot.hint;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info.java file"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java b/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n@@ -117,7 +117,7 @@ public String getConversationId() {\n \t\tac.registerBeanDefinition(\"tb1\", bd1);\n \n \t\tGenericBeanDefinition bd2 = new GenericBeanDefinition();\n-\t\tbd2.setBeanClassName(\"#{tb1.class.name}\");\n+\t\tbd2.setBeanClassName(\"#{tb1.class}\");\n \t\tbd2.setScope(\"myScope\");\n \t\tbd2.getPropertyValues().add(\"name\", \"{ XXX#{tb0.name}YYY#{mySpecialAttr}ZZZ }\");\n \t\tbd2.getPropertyValues().add(\"age\", \"#{mySpecialAttr}\");",
    "output": "Fix sporadically failing SpEL test"
  },
  {
    "input": "diff --git a/integration-tests/src/test/java/org/springframework/aot/RuntimeHintsAgentTests.java b/integration-tests/src/test/java/org/springframework/aot/RuntimeHintsAgentTests.java\n--- a/integration-tests/src/test/java/org/springframework/aot/RuntimeHintsAgentTests.java\n+++ b/integration-tests/src/test/java/org/springframework/aot/RuntimeHintsAgentTests.java\n@@ -287,6 +287,7 @@ Stream<RecordedInvocation> recordedInvocations(HintType hintType) {\n \n \tprivate static class PrivateClass {\n \n+\t\t@SuppressWarnings(\"unused\")\n \t\tprivate String greet() {\n \t\t\treturn \"hello\";\n \t\t}",
    "output": "Suppress warning in test"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java b/spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java\n@@ -316,7 +316,7 @@ public static Object constructornewInstance(Constructor<?> constructor, Object..\n \t\t\t\t.onInstance(constructor).withArguments(arguments);\n \t\ttry {\n \t\t\tif (!Modifier.isPublic(constructor.getModifiers()) ||\n-\t\t\t\t\t!Modifier.isPublic(constructor.getDeclaringClass().getModifiers()) || !constructor.canAccess(null)) {\n+\t\t\t\t\t!Modifier.isPublic(constructor.getDeclaringClass().getModifiers())) {\n \t\t\t\tconstructor.setAccessible(true);\n \t\t\t\taccessibilityChanged = true;\n \t\t\t}\n@@ -339,7 +339,8 @@ public static Object methodinvoke(Method method, Object object, Object... argume\n \t\tObject result = null;\n \t\tboolean accessibilityChanged = false;\n \t\ttry {\n-\t\t\tif (!Modifier.isPublic(method.getModifiers())) {\n+\t\t\tif (!Modifier.isPublic(method.getModifiers())\n+\t\t\t\t|| !Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n \t\t\t\tmethod.setAccessible(true);\n \t\t\t\taccessibilityChanged = true;\n \t\t\t}",
    "output": "Polish This fixes an additional case where invoked methods are public but the declaring class is package private"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/hint/TestContextRuntimeHints.java b/spring-test/src/main/java/org/springframework/test/context/aot/hint/TestContextRuntimeHints.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/hint/TestContextRuntimeHints.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/hint/TestContextRuntimeHints.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.test.context.aot;\n+package org.springframework.test.context.aot.hint;\n \n import java.lang.annotation.Annotation;\n import java.util.Arrays;\n@@ -35,7 +35,7 @@\n  * @author Sam Brannen\n  * @since 6.0\n  */\n-public class TestContextRuntimeHints implements RuntimeHintsRegistrar {\n+class TestContextRuntimeHints implements RuntimeHintsRegistrar {\n \n \t@Override\n \tpublic void registerHints(RuntimeHints runtimeHints, ClassLoader classLoader) {",
    "output": "Move TestContextRuntimeHints to aot.hint package"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java b/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/AotTestMappings.java\n@@ -22,6 +22,7 @@\n \n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n@@ -82,6 +83,7 @@ public boolean isSupportedTestClass(Class<?> testClass) {\n \t * initializer for the specified test class\n \t * @see #isSupportedTestClass(Class)\n \t */\n+\t@Nullable\n \tpublic ApplicationContextInitializer<ConfigurableApplicationContext> getContextInitializer(Class<?> testClass) {\n \t\tSupplier<ApplicationContextInitializer<ConfigurableApplicationContext>> supplier =\n \t\t\t\tthis.contextInitializers.get(testClass.getName());",
    "output": "Add missing @Nullable declaration in AotTestMappings"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java b/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java\n@@ -41,6 +41,7 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n \n \tprivate void registerType(ReflectionHints reflectionHints, String className) {\n \t\treflectionHints.registerType(TypeReference.of(className),\n-\t\t\t\tbuilder -> builder.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n+\t\t\t\tbuilder -> builder.onReachableType(TypeReference.of(Jackson2ObjectMapperBuilder.class))\n+\t\t\t\t\t\t.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n \t}\n }",
    "output": "Add missing condition in JacksonModulesRuntimeHints"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n--- a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n+++ b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n@@ -115,7 +115,7 @@ public RuntimeHints getRuntimeHints() {\n \t}\n \n \t@Override\n-\tpublic GenerationContext withName(String name) {\n+\tpublic DefaultGenerationContext withName(String name) {\n \t\treturn new DefaultGenerationContext(this, name);\n \t}\n ",
    "output": "Declare covariant return type in DefaultGenerationContext.withNamePrior to this commit, if infrastructure code working directly with an instance of DefaultGenerationContext invoked withNameon that instance, the new GenerationContext had to be cast from GenerationContext to DefaultGenerationContext in order for the infrastructure to continue working with the DefaultGenerationContext API -- for example, the writeGeneratedContentmethod which is not defined in the GenerationContext API. This commit makes use of a covariant return type by declaring that DefaultGenerationContext.withNamereturns a DefaultGenerationContext"
  },
  {
    "input": "diff --git a/spring-orm/src/test/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesTests.java b/spring-orm/src/test/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesTests.java\n--- a/spring-orm/src/test/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesTests.java\n+++ b/spring-orm/src/test/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesTests.java\n@@ -27,6 +27,7 @@\n  * Tests for {@link PersistenceManagedTypes}.\n  *\n  * @author Stephane Nicoll\n+ * @since 6.0\n  */\n class PersistenceManagedTypesTests {\n \n@@ -42,7 +43,7 @@ void createWithManagedClassNames() {\n \n \t@Test\n \tvoid createWithNullManagedClasses() {\n-\t\tassertThatIllegalArgumentException().isThrownBy(() -> PersistenceManagedTypes.of(null));\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> PersistenceManagedTypes.of((String[]) null));\n \t}\n \n \t@Test",
    "output": "Clean up warnings in tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java b/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java\n@@ -16,7 +16,12 @@\n \n package org.springframework.aot.hint.support;\n \n+import java.util.function.Consumer;\n+\n+import org.springframework.aot.hint.MemberCategory;\n import org.springframework.aot.hint.RuntimeHints;\n+import org.springframework.aot.hint.TypeHint;\n+import org.springframework.aot.hint.TypeHint.Builder;\n import org.springframework.core.annotation.AliasFor;\n import org.springframework.core.annotation.MergedAnnotation;\n import org.springframework.core.annotation.SynthesizedAnnotation;\n@@ -30,6 +35,15 @@\n  */\n public abstract class RuntimeHintsUtils {\n \n+\t/**\n+\t * A {@link TypeHint} customizer suitable for an annotation. Make sure\n+\t * that its attributes are visible.\n+\t * @deprecated as annotation attributes are visible without additional hints\n+\t */\n+\t@Deprecated\n+\tpublic static final Consumer<Builder> ANNOTATION_HINT = hint ->\n+\t\t\thint.withMembers(MemberCategory.INVOKE_DECLARED_METHODS);\n+\n \t/**\n \t * Register the necessary hints so that the specified annotation is visible\n \t * at runtime.",
    "output": "Restore ANNOTATION_HINT in a deprecated form for the time being"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n--- a/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n+++ b/spring-core/src/main/java/org/springframework/aot/generate/DefaultGenerationContext.java\n@@ -63,7 +63,7 @@ public DefaultGenerationContext(ClassNameGenerator classNameGenerator, Generated\n \t * @param generatedFiles the generated files\n \t * @param runtimeHints the runtime hints\n \t */\n-\tpublic DefaultGenerationContext(GeneratedClasses generatedClasses,\n+\tDefaultGenerationContext(GeneratedClasses generatedClasses,\n \t\t\tGeneratedFiles generatedFiles, RuntimeHints runtimeHints) {\n \t\tAssert.notNull(generatedClasses, \"'generatedClasses' must not be null\");\n \t\tAssert.notNull(generatedFiles, \"'generatedFiles' must not be null\");",
    "output": "Make DefaultGenerationContext(GeneratedClasses,...) package private The DefaultGenerationContext constructor which accepts an instance of GeneratedClasses is now package private since GeneratedClasses can only be created within the `org.springframework.aot.generate` package"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -191,7 +191,8 @@ else if (ArrayList.class == collectionType || List.class == collectionType) {\n \t\telse if (LinkedList.class == collectionType) {\n \t\t\treturn new LinkedList<>();\n \t\t}\n-\t\telse if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {\n+\t\telse if (TreeSet.class == collectionType || NavigableSet.class == collectionType\n+\t\t\t\t|| SortedSet.class == collectionType) {\n \t\t\treturn new TreeSet<>();\n \t\t}\n \t\telse if (EnumSet.class.isAssignableFrom(collectionType)) {",
    "output": "Add missing TreeSet to CollectionFactory.createCollection"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -191,7 +191,7 @@ else if (ArrayList.class == collectionType || List.class == collectionType) {\n \t\telse if (LinkedList.class == collectionType) {\n \t\t\treturn new LinkedList<>();\n \t\t}\n-\t\telse if (SortedSet.class == collectionType || NavigableSet.class == collectionType) {\n+\t\telse if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {\n \t\t\treturn new TreeSet<>();\n \t\t}\n \t\telse if (EnumSet.class.isAssignableFrom(collectionType)) {",
    "output": "Add missing TreeSet to CollectionFactory.createCollection"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n@@ -91,6 +91,7 @@ void applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorWithMapEntr\n \t\t\tassertThat(freshBeanFactory.getBeanPostProcessors()).filteredOn(ImportAwareAotBeanPostProcessor.class::isInstance)\n \t\t\t\t\t.singleElement().satisfies(postProcessor -> assertPostProcessorEntry(postProcessor, ImportAwareConfiguration.class,\n \t\t\t\t\t\t\tImportConfiguration.class));\n+\t\t\tfreshContext.close();\n \t\t});\n \t}\n \n@@ -110,6 +111,7 @@ void applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorAfterApplic\n \t\t\tassertThat(bean.instances.get(0)).isEqualTo(freshContext);\n \t\t\tassertThat(bean.instances.get(1)).isInstanceOfSatisfying(AnnotationMetadata.class, metadata ->\n \t\t\t\t\tassertThat(metadata.getClassName()).isEqualTo(TestAwareCallbackConfiguration.class.getName()));\n+\t\t\tfreshContext.close();\n \t\t});\n \t}\n \n@@ -131,6 +133,7 @@ void applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorBeforeRegul\n \t\t\tassertThat(freshContext.getBean(\"testProcessing\")).isInstanceOfSatisfying(AnnotationMetadata.class, metadata ->\n \t\t\t\t\tassertThat(metadata.getClassName()).isEqualTo(TestImportAwareBeanPostProcessorConfiguration.class.getName())\n \t\t\t);\n+\t\t\tfreshContext.close();\n \t\t});\n \t}\n ",
    "output": "Clean up warnings"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -568,6 +568,8 @@ private CodeBlock generateAddPostProcessorCode(Map<String, String> mappings) {\n \t\t\t\t\tMAPPINGS_VARIABLE, type, from));\n \t\t\tbuilder.addStatement(\"$T $L = new $T($T.class)\", RootBeanDefinition.class,\n \t\t\t\t\tBEAN_DEFINITION_VARIABLE, RootBeanDefinition.class, ImportAwareAotBeanPostProcessor.class);\n+\t\t\tbuilder.addStatement(\"$L.setRole($T.ROLE_INFRASTRUCTURE)\",\n+\t\t\t\t\tBEAN_DEFINITION_VARIABLE, BeanDefinition.class);\n \t\t\tbuilder.addStatement(\"$L.setInstanceSupplier(() -> new $T($L))\",\n \t\t\t\t\tBEAN_DEFINITION_VARIABLE, ImportAwareAotBeanPostProcessor.class, MAPPINGS_VARIABLE);\n \t\t\tbuilder.addStatement(\"$L.registerBeanDefinition($S, $L)\",",
    "output": "Make sure that ImportAwareAotBeanPostProcessor has role infrastructure"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorAotContributionTests.java\n@@ -94,13 +94,13 @@ void applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorWithMapEntr\n \t@Test\n \tvoid applyToWhenHasImportAwareConfigurationRegistersBeanPostProcessorAfterApplicationContextAwareProcessor() {\n \t\tBeanFactoryInitializationAotContribution contribution = getContribution(\n-\t\t\t\tImportConfiguration.class);\n+\t\t\t\tTestAwareCallbackConfiguration.class);\n \t\tcontribution.applyTo(this.generationContext, this.beanFactoryInitializationCode);\n \t\tcompile((initializer, compiled) -> {\n-\t\t\tGenericApplicationContext freshContext = new AnnotationConfigApplicationContext();\n+\t\t\tGenericApplicationContext freshContext = new GenericApplicationContext();\n \t\t\tDefaultListableBeanFactory freshBeanFactory = freshContext.getDefaultListableBeanFactory();\n \t\t\tinitializer.accept(freshBeanFactory);\n-\t\t\tfreshContext.registerBean(TestAwareCallbackConfiguration.class);\n+\t\t\tfreshContext.registerBean(TestAwareCallbackBean.class);\n \t\t\tfreshContext.refresh();\n \t\t\tTestAwareCallbackBean bean = freshContext.getBean(TestAwareCallbackBean.class);\n \t\t\tassertThat(bean.instances).hasSize(2);",
    "output": "Fix test Contribution was not applied on the actual use case"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -568,8 +568,8 @@ private CodeBlock generateAddPostProcessorCode(Map<String, String> mappings) {\n \t\t\t\t\tMAPPINGS_VARIABLE, type, from));\n \t\t\tbuilder.addStatement(\"$T $L = new $T($T.class)\", RootBeanDefinition.class,\n \t\t\t\t\tBEAN_DEFINITION_VARIABLE, RootBeanDefinition.class, ImportAwareAotBeanPostProcessor.class);\n-\t\t\tbuilder.addStatement(\"$L.getConstructorArgumentValues().addIndexedArgumentValue(0, $L)\",\n-\t\t\t\t\tBEAN_DEFINITION_VARIABLE, MAPPINGS_VARIABLE);\n+\t\t\tbuilder.addStatement(\"$L.setInstanceSupplier(() -> new $T($L))\",\n+\t\t\t\t\tBEAN_DEFINITION_VARIABLE, ImportAwareAotBeanPostProcessor.class, MAPPINGS_VARIABLE);\n \t\t\tbuilder.addStatement(\"$L.registerBeanDefinition($S, $L)\",\n \t\t\t\t\tBEAN_FACTORY_VARIABLE, BEAN_NAME, BEAN_DEFINITION_VARIABLE);\n \t\t\treturn builder.build();",
    "output": "Fix custom bean definition to stop using reflection"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n--- a/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/SmartContextLoader.java\n@@ -58,7 +58,6 @@\n  * <li>{@link org.springframework.test.context.support.DelegatingSmartContextLoader DelegatingSmartContextLoader}</li>\n  * <li>{@link org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader}</li>\n  * <li>{@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader}</li>\n- * <li>{@link org.springframework.test.context.support.GenericPropertiesContextLoader GenericPropertiesContextLoader}</li>\n  * <li>{@link org.springframework.test.context.web.WebDelegatingSmartContextLoader WebDelegatingSmartContextLoader}</li>\n  * <li>{@link org.springframework.test.context.web.AnnotationConfigWebContextLoader AnnotationConfigWebContextLoader}</li>\n  * <li>{@link org.springframework.test.context.web.GenericXmlWebContextLoader GenericXmlWebContextLoader}</li>",
    "output": "Remove remaining reference to GenericPropertiesContextLoader"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n@@ -41,7 +41,7 @@ public CompileWithTargetClassAccessClassLoader(ClassLoader testClassLoader) {\n \n \t@Override\n \tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n-\t\tif (name.startsWith(\"org.junit\") || name.startsWith(\"org.hamcrest\")) {\n+\t\tif (name.startsWith(\"org.junit\")) {\n \t\t\treturn Class.forName(name, false, this.testClassLoader);\n \t\t}\n \t\treturn super.loadClass(name);",
    "output": "Remove Hamcrest support from CompileWithTargetClassAccessClassLoader CompileWithTargetClassAccessClassLoader is currently only used within the CompileWithTargetClassAccessExtension which is dedicated to JUnit Jupiter support which in turn should not have any direct dependencies on Hamcrest. In other words, the JupiterTestEngine should not load any Hamcrest types that would cause issues with the CompileWithTargetClassAccessClassLoader"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n@@ -119,16 +119,14 @@ private void runTestWithModifiedClassPath(\n \t\t\t\ttestClass.getClassLoader());\n \t\tThread.currentThread().setContextClassLoader(forkedClassPathClassLoader);\n \t\ttry {\n-\t\t\trunTest(forkedClassPathClassLoader, testClass, testMethod);\n+\t\t\trunTest(testClass, testMethod);\n \t\t}\n \t\tfinally {\n \t\t\tThread.currentThread().setContextClassLoader(originalClassLoader);\n \t\t}\n \t}\n \n-\tprivate void runTest(ClassLoader classLoader, Class<?> testClass, Method testMethod)\n-\t\t\tthrows Throwable {\n-\n+\tprivate void runTest(Class<?> testClass, Method testMethod) throws Throwable {\n \t\tLauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n \t\t\t\t.selectors(selectMethod(getFullyQualifiedMethodName(testClass, testMethod)))\n \t\t\t\t.filters(includeEngines(\"junit-jupiter\"))",
    "output": "Remove unused method parameter"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessExtension.java\n@@ -22,6 +22,7 @@\n import org.junit.jupiter.api.extension.InvocationInterceptor;\n import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.launcher.EngineFilter;\n import org.junit.platform.launcher.Launcher;\n import org.junit.platform.launcher.LauncherDiscoveryRequest;\n import org.junit.platform.launcher.TestPlan;\n@@ -40,6 +41,7 @@\n  *\n  * @author Christoph Dreis\n  * @author Phillip Webb\n+ * @author Sam Brannen\n  * @since 6.0\n  */\n class CompileWithTargetClassAccessExtension implements InvocationInterceptor {\n@@ -134,6 +136,7 @@ private void runTest(ClassLoader classLoader, String testClassName,\n \t\tMethod testMethod = findMethod(testClass, testMethodName);\n \t\tLauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n \t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethod))\n+\t\t\t\t.filters(EngineFilter.includeEngines(\"junit-jupiter\"))\n \t\t\t\t.build();\n \t\tLauncher launcher = LauncherFactory.create();\n \t\tTestPlan testPlan = launcher.discover(request);",
    "output": "Ensure CompileWithTargetClassAccessExtension only uses Jupiter TestEngine Commit 9dd7f5412aa72efdeb1ba15b2cd86c6391540b61 (which has now been reverted) addressed the issue of having the TestNG TestEngine for the JUnit Platform on the test runtime classpath by allowing `org.testng` types to pass through to the original ClassLoader; however, that fix merely obfuscated the underlying issue. The underlying issue is that the CompileWithTargetClassAccessExtension is only applicable to JUnit Jupiter tests and therefore should launch the JUnit Platform with only the JUnit Jupiter TestEngine active. This commit addresses this issue by applying an EngineFilter to include only the \"junit-jupiter\" test engine"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/CompileWithTargetClassAccessClassLoader.java\n@@ -20,16 +20,21 @@\n import java.io.InputStream;\n import java.net.URL;\n import java.util.Enumeration;\n+import java.util.Set;\n \n /**\n  * {@link ClassLoader} implementation to support\n  * {@link CompileWithTargetClassAccess @CompileWithTargetClassAccess}.\n  *\n  * @author Phillip Webb\n+ * @author Sam Brannen\n  * @since 6.0\n  */\n final class CompileWithTargetClassAccessClassLoader extends ClassLoader {\n \n+\tprivate static final Set<String> passthroughPackages =\n+\t\t\tSet.of(\"org.junit\", \"org.testng\", \"org.hamcrest\");\n+\n \tprivate final ClassLoader testClassLoader;\n \n \n@@ -41,7 +46,7 @@ public CompileWithTargetClassAccessClassLoader(ClassLoader testClassLoader) {\n \n \t@Override\n \tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n-\t\tif (name.startsWith(\"org.junit\") || name.startsWith(\"org.hamcrest\")) {\n+\t\tif (passthroughPackages.stream().anyMatch(pkg -> name.startsWith(pkg))) {\n \t\t\treturn Class.forName(name, false, this.testClassLoader);\n \t\t}\n \t\treturn super.loadClass(name);",
    "output": "Support TestNG with @CompileWithTargetClassAccess"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java\n@@ -44,7 +44,7 @@\n  * @see BootstrapContext\n  * @see TestContextBootstrapper\n  */\n-abstract class BootstrapUtils {\n+public abstract class BootstrapUtils {\n \n \tprivate static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME =\n \t\t\t\"org.springframework.test.context.support.DefaultBootstrapContext\";",
    "output": "Make BootstrapUtils public"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java\n@@ -33,6 +33,7 @@\n import org.springframework.http.server.reactive.AbstractListenerWriteProcessor;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.reactive.socket.CloseStatus;\n import org.springframework.web.reactive.socket.HandshakeInfo;\n import org.springframework.web.reactive.socket.WebSocketHandler;\n@@ -247,7 +248,12 @@ public void onError(Throwable ex) {\n \t\tif (this.handlerCompletionMono != null) {\n \t\t\tthis.handlerCompletionMono.onError(ex);\n \t\t}\n-\t\tclose(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));\n+\t\tif(!StringUtils.hasText(ex.getMessage())) {\n+\t\t\tclose(CloseStatus.SERVER_ERROR);\n+\t\t}\n+\t\telse {\n+\t\t\tclose(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Improve setting of WebSocket error status"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.java\n@@ -23,10 +23,6 @@\n  * AOT processor that makes bean factory initialization contributions by\n  * processing {@link ConfigurableListableBeanFactory} instances.\n  *\n- * <p>Note: Beans implementing interface will not have registration methods\n- * generated during AOT processing unless they also implement\n- * {@link org.springframework.beans.factory.aot.BeanRegistrationExcludeFilter}.\n- *\n  * @author Phillip Webb\n  * @author Stephane Nicoll\n  * @since 6.0",
    "output": "Fix BeanFactoryInitializationAotProcessor javadoc Update javadoc since BeanRegistrationExcludeFilter is not longer an exclude signal"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/aot/RuntimeHintsBeanFactoryInitializationAotProcessor.java b/spring-context/src/main/java/org/springframework/context/aot/RuntimeHintsBeanFactoryInitializationAotProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/aot/RuntimeHintsBeanFactoryInitializationAotProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/aot/RuntimeHintsBeanFactoryInitializationAotProcessor.java\n@@ -57,7 +57,7 @@ class RuntimeHintsBeanFactoryInitializationAotProcessor\n \tpublic BeanFactoryInitializationAotContribution processAheadOfTime(\n \t\t\tConfigurableListableBeanFactory beanFactory) {\n \t\tMap<Class<? extends RuntimeHintsRegistrar>, RuntimeHintsRegistrar> registrars = AotServices\n-\t\t\t\t.factoriesAndBeans(beanFactory).load(RuntimeHintsRegistrar.class).stream()\n+\t\t\t\t.factories(beanFactory.getBeanClassLoader()).load(RuntimeHintsRegistrar.class).stream()\n \t\t\t\t.collect(LinkedHashMap::new, (map, item) -> map.put(item.getClass(), item), Map::putAll);\n \t\textractFromBeanFactory(beanFactory).forEach(registrarClass ->\n \t\t\t\tregistrars.computeIfAbsent(registrarClass, BeanUtils::instantiateClass));",
    "output": "Don't look for RuntimeHintsRegistrar beans Update `RuntimeHintsBeanFactoryInitializationAotProcessor` so that `RuntimeHintsRegistrar` beans are not loaded"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/aot/TestClassScanner.java\n@@ -37,8 +37,8 @@\n import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.test.context.BootstrapWith;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestContextAnnotationUtils;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n \n import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathRoots;\n import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n@@ -170,7 +170,7 @@ private boolean isSpringTestClass(Class<?> clazz) {\n \n \tprivate static boolean isJupiterSpringTestClass(Class<?> clazz) {\n \t\treturn MergedAnnotations.search(TYPE_HIERARCHY)\n-\t\t\t\t.withEnclosingClasses(TestContextAnnotationUtils::searchEnclosingClass)\n+\t\t\t\t.withEnclosingClasses(ClassUtils::isInnerClass)\n \t\t\t\t.from(clazz)\n \t\t\t\t.stream(EXTEND_WITH_ANNOTATION_NAME)\n \t\t\t\t.map(annotation -> annotation.getClassArray(VALUE))",
    "output": "Fix @ExtendWith search in TestClassScanner The search algorithm for @ExtendWith should not be tied to Spring's @NestedTestConfiguration semantics. Rather, general JUnit annotation search semantics should be used to find @ExtendWith"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/AbstractTestContextBootstrapper.java b/spring-test/src/main/java/org/springframework/test/context/support/AbstractTestContextBootstrapper.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/AbstractTestContextBootstrapper.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractTestContextBootstrapper.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.test.context.support;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -200,7 +201,9 @@ public final List<TestExecutionListener> getTestExecutionListeners() {\n \t * @see SpringFactoriesLoader#load(Class, FailureHandler)\n \t */\n \tprotected List<TestExecutionListener> getDefaultTestExecutionListeners() {\n-\t\tFailureHandler failureHandler = (factoryType, factoryImplementationName, ex) -> {\n+\t\tFailureHandler failureHandler = (factoryType, factoryImplementationName, failure) -> {\n+\t\t\tThrowable ex = (failure instanceof InvocationTargetException ite ?\n+\t\t\t\t\tite.getTargetException() : failure);\n \t\t\tif (ex instanceof LinkageError || ex instanceof ClassNotFoundException) {\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"Could not load default TestExecutionListener [\" + factoryImplementationName +",
    "output": "Handle missing dependencies for optional TestExecutionListener again Commit d1b65f6d3e introduced a regression regarding the handling of missing dependencies for optional (typically default) TestExecutionListeners. Prior to d1b65f6d3e a TestExecutionListener was instantiated using java.lang.Class.newInstancewhich never throws an InvocationTargetException. With the switch to the new SpringFactoriesLoader APIs, a TestExecutionListener is now instantiated using java.lang.reflect.Constructor.newInstance(Object...) which can throw an InvocationTargetException. This commit addresses the regression by unwrapping the target exception in an InvocationTargetException"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java\n@@ -151,9 +151,9 @@ public PathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> pred\n \t * {@code false} and use of this property becomes unnecessary.\n \t */\n \t@Deprecated\n-\tpublic PathMatchConfigurer setUseSuffixPatternMatch(Boolean suffixPatternMatch) {\n+\tpublic PathMatchConfigurer setUseSuffixPatternMatch(@Nullable Boolean suffixPatternMatch) {\n \t\tthis.suffixPatternMatch = suffixPatternMatch;\n-\t\tthis.preferPathMatcher |= suffixPatternMatch;\n+\t\tthis.preferPathMatcher |= (suffixPatternMatch != null && suffixPatternMatch);\n \t\treturn this;\n \t}\n \n@@ -173,9 +173,9 @@ public PathMatchConfigurer setUseSuffixPatternMatch(Boolean suffixPatternMatch)\n \t * config options.\n \t */\n \t@Deprecated\n-\tpublic PathMatchConfigurer setUseRegisteredSuffixPatternMatch(Boolean registeredSuffixPatternMatch) {\n+\tpublic PathMatchConfigurer setUseRegisteredSuffixPatternMatch(@Nullable Boolean registeredSuffixPatternMatch) {\n \t\tthis.registeredSuffixPatternMatch = registeredSuffixPatternMatch;\n-\t\tthis.preferPathMatcher |= registeredSuffixPatternMatch;\n+\t\tthis.preferPathMatcher |= (registeredSuffixPatternMatch != null && registeredSuffixPatternMatch);\n \t\treturn this;\n \t}\n ",
    "output": "Avoid NPE in PathMatchConfigurer"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -368,7 +368,7 @@ private static boolean isVariableName(String name) {\n \t * to which argument name. There are multiple strategies for determining\n \t * this binding, which are arranged in a ChainOfResponsibility.\n \t */\n-\tpublic final synchronized void calculateArgumentBindings() {\n+\tpublic final void calculateArgumentBindings() {\n \t\t// The simple case... nothing to bind.\n \t\tif (this.argumentsIntrospected || this.parameterTypes.length == 0) {\n \t\t\treturn;",
    "output": "Avoid synchronization in AbstractAspectJAdvice#calculateArgumentBindings Aligned with the early calculateArgumentBindings call in ReflectiveAspectJAdvisorFactory"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n@@ -118,8 +118,11 @@ private void parseRequest(HttpServletRequest request) {\n \n \tprotected void handleParseFailure(Throwable ex) {\n \t\tString msg = ex.getMessage();\n-\t\tif (msg != null && msg.contains(\"size\") && msg.contains(\"exceed\")) {\n-\t\t\tthrow new MaxUploadSizeExceededException(-1, ex);\n+\t\tif (msg != null) {\n+\t\t\tmsg = msg.toLowerCase();\n+\t\t\tif (msg.contains(\"size\") && msg.contains(\"exceed\")) {\n+\t\t\t\tthrow new MaxUploadSizeExceededException(-1, ex);\n+\t\t\t}\n \t\t}\n \t\tthrow new MultipartException(\"Failed to parse multipart servlet request\", ex);\n \t}",
    "output": "Correctly identify MaxUploadSizeExceededException in StandardMultipartHttpServletRequest This commit correctly identifies MaxUploadSizeExceededException in StandardMultipartHttpServletRequest by converting keywords in the exception message to lowercase before checking for their presence, for compatibility with Jetty 9.4.x"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n@@ -490,7 +490,7 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\treturn defineClass(className, b, loader, protectionDomain, null);\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")  // on JDK 9\n+\t@SuppressWarnings({\"deprecation\", \"serial\"})\n \tpublic static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\t\tProtectionDomain protectionDomain, Class<?> contextClass) throws Exception {\n \n@@ -578,6 +578,16 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\t\tcatch (InvocationTargetException ex) {\n \t\t\t\tthrow new CodeGenerationException(ex.getTargetException());\n \t\t\t}\n+\t\t\tcatch (IllegalAccessException ex) {\n+\t\t\t\tthrow new CodeGenerationException(ex) {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String getMessage() {\n+\t\t\t\t\t\treturn \"ClassLoader mismatch for [\" + contextClass.getName() +\n+\t\t\t\t\t\t\t\t\"]: JVM should be started with --add-opens=java.base/java.lang=ALL-UNNAMED \" +\n+\t\t\t\t\t\t\t\t\"for ClassLoader.defineClass to be accessible on \" + loader.getClass().getName();\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tthrow new CodeGenerationException(ex);\n \t\t\t}",
    "output": "Improve diagnostics for CGLIB ClassLoader mismatch with --add-opens hint"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,9 @@\n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -98,6 +101,9 @@ public abstract class StatementCreatorUtils {\n \t\tjavaTypeToSqlTypeMap.put(double.class, Types.DOUBLE);\n \t\tjavaTypeToSqlTypeMap.put(Double.class, Types.DOUBLE);\n \t\tjavaTypeToSqlTypeMap.put(BigDecimal.class, Types.DECIMAL);\n+\t\tjavaTypeToSqlTypeMap.put(LocalDate.class, Types.DATE);\n+\t\tjavaTypeToSqlTypeMap.put(LocalTime.class, Types.TIME);\n+\t\tjavaTypeToSqlTypeMap.put(LocalDateTime.class, Types.TIMESTAMP);\n \t\tjavaTypeToSqlTypeMap.put(java.sql.Date.class, Types.DATE);\n \t\tjavaTypeToSqlTypeMap.put(java.sql.Time.class, Types.TIME);\n \t\tjavaTypeToSqlTypeMap.put(java.sql.Timestamp.class, Types.TIMESTAMP);",
    "output": "Support LocalDate/Time for SQL type mappings"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/annotation/Reflective.java\n@@ -33,6 +33,7 @@\n  * annotated element so that it can be discovered and invoked if necessary.\n  *\n  * @author Stephane Nicoll\n+ * @author Sam Brannen\n  * @since 6.0\n  * @see SimpleReflectiveProcessor\n  */\n@@ -45,6 +46,7 @@\n \t/**\n \t * Alias for {@link #processors()}.\n \t */\n+\t@AliasFor(\"processors\")\n \tClass<? extends ReflectiveProcessor>[] value() default SimpleReflectiveProcessor.class;\n \n \t/**",
    "output": "Fix attribute aliasing in @Reflective"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/package-info.java b/spring-core/src/main/java/org/springframework/aot/package-info.java\n--- a/spring-core/src/main/java/org/springframework/aot/package-info.java\n+++ b/spring-core/src/main/java/org/springframework/aot/package-info.java\n@@ -0,0 +1,9 @@\n+/**\n+ * Core package for Spring AOT infrastructure.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.aot;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -296,8 +296,8 @@ private void addConventionMappings() {\n \t\t\t\t\t\t\tSupport for convention-based annotation attribute overrides is \\\n \t\t\t\t\t\t\tdeprecated and will be removed in Spring Framework 6.1. Please \\\n \t\t\t\t\t\t\tannotate the '%s' attribute in @%s with an appropriate @AliasFor \\\n-\t\t\t\t\t\t\tdeclaration.\"\"\"\n-\t\t\t\t\t\t\t\t.formatted(name, rootAnnotationTypeName));\n+\t\t\t\t\t\t\tdeclaration -- for example, @AliasFor(annotation = %s.class).\"\"\"\n+\t\t\t\t\t\t\t\t.formatted(name, rootAnnotationTypeName, this.annotationType.getName()));\n \t\t\t\t}\n \t\t\t\tmappings[i] = mapped;\n \t\t\t\tMirrorSet mirrors = getMirrorSets().getAssigned(i);",
    "output": "Improve diagnostics for convention-based annotation attribute overrides The warning message logged for an annotation that still uses convention-based overrides now includes a concrete suggestion for how the problem may potentially be fixed. WARN - Support for convention-based annotation attribute overrides is deprecated and will be removed in Spring Framework 6.1. Please annotate the 'locations' attribute in @org.springframework.core.annotation.MergedAnnotationsTests$ConventionBasedComposedContextConfiguration with an appropriate @AliasFor declaration -- for example, @AliasFor(annotation = org.springframework.core.annotation.MergedAnnotationsTests$ContextConfiguration.class)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java b/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java\n--- a/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/type/AbstractMethodMetadataTests.java\n@@ -286,8 +286,7 @@ public static abstract class WithMetaAnnotation {\n \t}\n \n \t@Retention(RetentionPolicy.RUNTIME)\n-\t// Must be public. See AnnotationAttributesReadingVisitor.recursivelyCollectMetaAnnotations().\n-\tpublic @interface DirectAnnotation {\n+\t@interface DirectAnnotation {\n \t}\n \n \t@DirectAnnotation\n@@ -323,8 +322,7 @@ public static abstract class WithMetaAnnotationAttributes {\n \t}\n \n \t@Retention(RetentionPolicy.RUNTIME)\n-\t// Must be public. See AnnotationAttributesReadingVisitor.recursivelyCollectMetaAnnotations().\n-\tpublic @interface AnnotationAttributes {\n+\t@interface AnnotationAttributes {\n \n \t\tString name();\n ",
    "output": "Upgrade test annotations due to removal of AnnotationAttributesReadingVisitor Annotations are no longer required to be public when looked up via ASM since 6.0 M1"
  },
  {
    "input": "diff --git a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n--- a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n+++ b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n@@ -45,7 +45,7 @@ class ConstantFieldSubstitutionProcessor extends SubstitutionProcessor {\n \tprivate static Pattern[] patterns = {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.core.NativeDetector#imageCode\")),\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*Present\"),\n-\t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*_PRESENT\"),\n+\t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*PRESENT\"),\n \t\t\tPattern.compile(Pattern.quote(\"reactor.\") + \".*#.*Available\")\n \t};\n ",
    "output": "Recognize PRESENT fields in native classpath checks at build time This pattern is used in Spring Boot"
  },
  {
    "input": "diff --git a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n--- a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n+++ b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n@@ -45,7 +45,8 @@ class ConstantFieldSubstitutionProcessor extends SubstitutionProcessor {\n \tprivate static Pattern[] patterns = {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.core.NativeDetector#imageCode\")),\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*Present\"),\n-\t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*_PRESENT\")\n+\t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*_PRESENT\"),\n+\t\t\tPattern.compile(Pattern.quote(\"reactor.\") + \".*#.*Available\")\n \t};\n \n \tprivate final ThrowawayClassLoader throwawayClassLoader;",
    "output": "Perform Reactor native classpath checks at build time"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java\n@@ -621,6 +621,11 @@ protected String initLookupPath(HttpServletRequest request) {\n \t\t\t}\n \t\t\treturn super.initLookupPath(request);\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \"PatternParser = \" + (getPatternParser() != null ? getPatternParser().getClass().getSimpleName() : null) ;\n+\t\t}\n \t}\n \n }",
    "output": "Improve display names in CrossOriginTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n@@ -84,12 +84,14 @@ protected void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n \t@Bean\n \t@Nullable\n \tpublic TaskScheduler defaultSockJsTaskScheduler() {\n-\t\tif (initHandlerRegistry().requiresTaskScheduler()) {\n-\t\t\tThreadPoolTaskScheduler threadPoolScheduler = new ThreadPoolTaskScheduler();\n-\t\t\tthreadPoolScheduler.setThreadNamePrefix(\"SockJS-\");\n-\t\t\tthreadPoolScheduler.setPoolSize(Runtime.getRuntime().availableProcessors());\n-\t\t\tthreadPoolScheduler.setRemoveOnCancelPolicy(true);\n-\t\t\tthis.scheduler = threadPoolScheduler;\n+\t\tif (this.scheduler == null) {\n+\t\t\tif (initHandlerRegistry().requiresTaskScheduler()) {\n+\t\t\t\tThreadPoolTaskScheduler threadPoolScheduler = new ThreadPoolTaskScheduler();\n+\t\t\t\tthreadPoolScheduler.setThreadNamePrefix(\"SockJS-\");\n+\t\t\t\tthreadPoolScheduler.setPoolSize(Runtime.getRuntime().availableProcessors());\n+\t\t\t\tthreadPoolScheduler.setRemoveOnCancelPolicy(true);\n+\t\t\t\tthis.scheduler = threadPoolScheduler;\n+\t\t\t}\n \t\t}\n \t\treturn this.scheduler;\n \t}",
    "output": "Add missing check to avoid re-initialization Noticed during review of that a check protecting against re-initialization was accidentally removed in commit 3d6e38bb43fe86cc58bc816eff13b968c1e0884f"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n@@ -237,10 +237,11 @@ private void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? e\n \t\t\tcontext.setResourceLoader(resourceLoader);\n \t\t}\n \n+\t\tString relativePathLocation = \"foo\";\n \t\tString pingLocation = \"ping:foo\";\n \t\tString fileLocation = \"file:foo\";\n \n-\t\tResource resource = context.getResource(pingLocation);\n+\t\tResource resource = context.getResource(relativePathLocation);\n \t\tassertThat(resource).isInstanceOf(defaultResourceType);\n \t\tresource = context.getResource(fileLocation);\n \t\tassertThat(resource).isInstanceOf(FileUrlResource.class);\n@@ -251,6 +252,9 @@ private void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? e\n \t\tassertThat(resource).asInstanceOf(type(ByteArrayResource.class))\n \t\t\t.extracting(bar -> new String(bar.getByteArray(), UTF_8))\n \t\t\t.isEqualTo(\"pong:foo\");\n+\n+\t\tresource = context.getResource(relativePathLocation);\n+\t\tassertThat(resource).isInstanceOf(defaultResourceType);\n \t\tresource = context.getResource(fileLocation);\n \t\tassertThat(resource).isInstanceOf(FileUrlResource.class);\n \t}",
    "output": "Fix GenericApplicationContextTests on Microsoft Windows The tests introduced in commit 9868c28c73 pass on Mac OS and Linux but fail on Microsoft Windows. This commit updates the tests so that they pass on MS Windows as well"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java\n@@ -232,7 +232,7 @@ void getResourceWithCustomResourceLoader() {\n \t\tassertGetResourceSemantics(new FileSystemResourceLoader(), FileSystemResource.class);\n \t}\n \n-\tprivate void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? extends Resource> defaultResouceType) {\n+\tprivate void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? extends Resource> defaultResourceType) {\n \t\tif (resourceLoader != null) {\n \t\t\tcontext.setResourceLoader(resourceLoader);\n \t\t}\n@@ -241,7 +241,7 @@ private void assertGetResourceSemantics(ResourceLoader resourceLoader, Class<? e\n \t\tString fileLocation = \"file:foo\";\n \n \t\tResource resource = context.getResource(pingLocation);\n-\t\tassertThat(resource).isInstanceOf(defaultResouceType);\n+\t\tassertThat(resource).isInstanceOf(defaultResourceType);\n \t\tresource = context.getResource(fileLocation);\n \t\tassertThat(resource).isInstanceOf(FileUrlResource.class);\n ",
    "output": "Fix typo in test"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -978,7 +978,8 @@ protected void doService(HttpServletRequest request, HttpServletResponse respons\n \tprivate void logRequest(HttpServletRequest request) {\n \t\tLogFormatUtils.traceDebug(logger, traceOn -> {\n \t\t\tString params;\n-\t\t\tif (StringUtils.startsWithIgnoreCase(request.getContentType(), \"multipart/\")) {\n+\t\t\tString contentType = request.getContentType();\n+\t\t\tif (StringUtils.startsWithIgnoreCase(contentType, \"multipart/\")) {\n \t\t\t\tparams = \"multipart\";\n \t\t\t}\n \t\t\telse if (isEnableLoggingRequestDetails()) {\n@@ -987,7 +988,9 @@ else if (isEnableLoggingRequestDetails()) {\n \t\t\t\t\t\t.collect(Collectors.joining(\", \"));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tparams = (request.getParameterMap().isEmpty() ? \"\" : \"masked\");\n+\t\t\t\t// Avoid request body parsing for form data\n+\t\t\t\tparams = (StringUtils.startsWithIgnoreCase(contentType, \"application/x-www-form-urlencoded\") ||\n+\t\t\t\t\t\t!request.getParameterMap().isEmpty() ? \"masked\" : \"\");\n \t\t\t}\n \n \t\t\tString queryString = request.getQueryString();",
    "output": "Avoid request params access for form data in logRequest"
  },
  {
    "input": "diff --git a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n--- a/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n+++ b/spring-core/graalvm/src/main/java/org/springframework/aot/graalvm/ConstantFieldSubstitutionProcessor.java\n@@ -45,6 +45,7 @@ class ConstantFieldSubstitutionProcessor extends SubstitutionProcessor {\n \tprivate static Pattern[] patterns = {\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.core.NativeDetector#imageCode\")),\n \t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*Present\"),\n+\t\t\tPattern.compile(Pattern.quote(\"org.springframework.\") + \".*#.*_PRESENT\")\n \t};\n \n \tprivate final ThrowawayClassLoader throwawayClassLoader;",
    "output": "Make *_PRESENT fields constant at build time"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/KotlinDetector.java b/spring-core/src/main/java/org/springframework/core/KotlinDetector.java\n--- a/spring-core/src/main/java/org/springframework/core/KotlinDetector.java\n+++ b/spring-core/src/main/java/org/springframework/core/KotlinDetector.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,6 +35,9 @@ public abstract class KotlinDetector {\n \t@Nullable\n \tprivate static final Class<? extends Annotation> kotlinMetadata;\n \n+\t// For ConstantFieldFeature compliance, otherwise could be deduced from kotlinMetadata\n+\tprivate static final boolean kotlinPresent;\n+\n \tprivate static final boolean kotlinReflectPresent;\n \n \tstatic {\n@@ -48,6 +51,7 @@ public abstract class KotlinDetector {\n \t\t\tmetadata = null;\n \t\t}\n \t\tkotlinMetadata = (Class<? extends Annotation>) metadata;\n+\t\tkotlinPresent = (kotlinMetadata != null);\n \t\tkotlinReflectPresent = ClassUtils.isPresent(\"kotlin.reflect.full.KClasses\", classLoader);\n \t}\n \n@@ -56,7 +60,7 @@ public abstract class KotlinDetector {\n \t * Determine whether Kotlin is present in general.\n \t */\n \tpublic static boolean isKotlinPresent() {\n-\t\treturn (kotlinMetadata != null);\n+\t\treturn kotlinPresent;\n \t}\n \n \t/**",
    "output": "Refine KotlinDetector for compliance with ConstantFieldFeature After this commit, KotlinDetector#kotlinPresent is computed at build time"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/LoggingCacheErrorHandler.java b/spring-context/src/main/java/org/springframework/cache/interceptor/LoggingCacheErrorHandler.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/LoggingCacheErrorHandler.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/LoggingCacheErrorHandler.java\n@@ -29,6 +29,7 @@\n  *\n  * @author Adam Ostrožlík\n  * @author Stephane Nicoll\n+ * @author Vedran Pavic\n  * @since 5.3.16\n  */\n public class LoggingCacheErrorHandler implements CacheErrorHandler {\n@@ -49,11 +50,19 @@ public LoggingCacheErrorHandler(Log logger, boolean logStacktrace) {\n \t\tthis.logStacktrace = logStacktrace;\n \t}\n \n+\t/**\n+\t * Create an instance.\n+\t * @param logStacktrace whether to log stacktrace\n+\t */\n+\tpublic LoggingCacheErrorHandler(boolean logStacktrace) {\n+\t\tthis(LogFactory.getLog(LoggingCacheErrorHandler.class), logStacktrace);\n+\t}\n+\n \t/**\n \t * Create an instance that does not log stack traces.\n \t */\n \tpublic LoggingCacheErrorHandler() {\n-\t\tthis(LogFactory.getLog(LoggingCacheErrorHandler.class), false);\n+\t\tthis(false);\n \t}\n \n ",
    "output": "Simplify creation of LoggingCacheErrorHandler with logged stacktrace At present, creating a LoggingCacheErrorHandler that logs stack traces also requires supplying the logger to be used. This might be inconvenient for some users, as it requires usage of the Commons Logging API. This commit simplifies creation of such as LoggingCacheErrorHandler instance by adding a constructor that only accepts a boolean flag indicating whether to log stack traces"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -585,7 +585,8 @@ private String[] doGetBeanNamesForType(ResolvableType type, boolean includeNonSi\n \t\t\t\t\t\t\tif (!matchFound) {\n \t\t\t\t\t\t\t\t// In case of FactoryBean, try to match FactoryBean instance itself next.\n \t\t\t\t\t\t\t\tbeanName = FACTORY_BEAN_PREFIX + beanName;\n-\t\t\t\t\t\t\t\tmatchFound = isTypeMatch(beanName, type, allowFactoryBeanInit);\n+\t\t\t\t\t\t\t\tmatchFound = (includeNonSingletons || isSingleton(beanName, mbd, dbd)) && isTypeMatch(beanName, type, allowFactoryBeanInit);\n+\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (matchFound) {",
    "output": "Avoid eager instantiation of non-singleton FactoryBean in getBeanNamesForType"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,8 +40,7 @@\n public class DefaultParameterNameDiscoverer extends PrioritizedParameterNameDiscoverer {\n \n \tpublic DefaultParameterNameDiscoverer() {\n-\t\t// TODO Remove this conditional inclusion when upgrading to Kotlin 1.5, see https://youtrack.jetbrains.com/issue/KT-44594\n-\t\tif (KotlinDetector.isKotlinReflectPresent() && !NativeDetector.inNativeImage()) {\n+\t\tif (KotlinDetector.isKotlinReflectPresent()) {\n \t\t\taddDiscoverer(new KotlinReflectionParameterNameDiscoverer());\n \t\t}\n \t\taddDiscoverer(new StandardReflectionParameterNameDiscoverer());",
    "output": "Remove outdated NativeDetector check for Kotlin reflection"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePartEvent.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePartEvent.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePartEvent.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePartEvent.java\n@@ -125,7 +125,7 @@ static Flux<FilePartEvent> create(String name, Path path, @Nullable Consumer<Htt\n \t\tAssert.notNull(path, \"Path must not be null\");\n \n \t\treturn Flux.defer(() -> {\n-\t\t\tString pathName = path.toString();\n+\t\t\tString pathName = StringUtils.cleanPath(path.toString());\n \t\t\tMediaType contentType = MediaTypeFactory.getMediaType(pathName)\n \t\t\t\t\t.orElse(MediaType.APPLICATION_OCTET_STREAM);\n \t\t\tString filename = StringUtils.getFilename(pathName);",
    "output": "Apply StringUtils.cleanPath for Windows path compatibility"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java\n@@ -315,6 +315,20 @@ public int getPoolSize() {\n \t\t}\n \t\treturn this.threadPoolExecutor.getPoolSize();\n \t}\n+\t\n+\t/**\n+\t * Return the current number of threads waiting in the queue\n+\t */\n+\tpublic int getCurrentQueueSize() {\n+\t\treturn this.getThreadPoolExecutor().getQueue().size();\n+\t}\n+\n+\t/**\n+\t* Return the maximum capacity of the queue\n+\t*/\n+\tpublic int getQueueCapacity() {\n+\t\treturn this.queueCapacity;\n+\t}\n \n \t/**\n \t * Return the number of currently active threads.",
    "output": "Expose ThreadPoolTaskExecutor queue size and capacity for metrics We use Grafana to monitor our app via Spring's JMX exporter, and we think it could be interesting to have at least the current queue size for this purpose since the queue size directly affects the app memory load. Having the queue capacity seems also interesting to set up triggers whose values are calculated based on the maximum capacity of the queue. This commit introduces new getCurrentQueueSizeand getQueueCapacitymethods in ThreadPoolTaskExecutor"
  },
  {
    "input": "diff --git a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/DynamicClassLoader.java b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/DynamicClassLoader.java\n--- a/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/DynamicClassLoader.java\n+++ b/spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/DynamicClassLoader.java\n@@ -57,6 +57,9 @@ public DynamicClassLoader(ClassLoader parent, ResourceFiles resourceFiles,\n \t\tthis.resourceFiles = resourceFiles;\n \t\tthis.classFiles = classFiles;\n \t\tthis.defineClassMethod = findDefineClassMethod(parent);\n+\t\tif (this.defineClassMethod != null) {\n+\t\t\tclassFiles.forEach(this::defineClass);\n+\t\t}\n \t}\n \n \t@Nullable",
    "output": "Define compiled classes when @CompileWithTargetClassAccess is used Update `DynamicClassLoader` to load classes eagerly if they are being defined in the parent classloader"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/aot/BeanRegistrationCodeFragments.java\n@@ -60,10 +60,11 @@ protected BeanRegistrationCodeFragments(BeanRegistrationCodeFragments codeFragme\n \n \t/**\n \t * Package-private constructor exclusively for\n-\t * {@link DefaultBeanRegistrationCodeFragments}.\n+\t * {@link DefaultBeanRegistrationCodeFragments}. All methods are overridden\n+\t * so {@code this.codeFragments} is never actually used.\n \t */\n \tBeanRegistrationCodeFragments() {\n-\t\tthis.codeFragments = null;\n+\t\tthis.codeFragments = this;\n \t}\n \n \t/**",
    "output": "Fix null assignment to non-nullable field Update `BeanRegistrationCodeFragments` package-private constructor to set `codeFragments` to `this` rather than `null`. The field is never actually read by `DefaultBeanRegistrationCodeFragments` since all methods are overridden"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/aot/BeanRegistrationsAotProcessorTests.java\n@@ -33,6 +33,13 @@\n  */\n class BeanRegistrationsAotProcessorTests {\n \n+\t@Test\n+\tvoid beanRegistrationsAotProcessorIsRegistered() {\n+\t\tassertThat(new AotFactoriesLoader(new DefaultListableBeanFactory())\n+\t\t\t\t.load(BeanFactoryInitializationAotProcessor.class))\n+\t\t\t\t.anyMatch(BeanRegistrationsAotProcessor.class::isInstance);\n+\t}\n+\n \t@Test\n \tvoid processAheadOfTimeReturnsBeanRegistrationsAotContributionWithRegistrations() {\n \t\tBeanRegistrationsAotProcessor processor = new BeanRegistrationsAotProcessor();",
    "output": "Add test to validate AOT infrastructure registration"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyBeanRegistrationAotProcessorTests.java\n@@ -34,8 +34,10 @@\n import org.springframework.aot.test.generator.compile.Compiled;\n import org.springframework.aot.test.generator.compile.TestCompiler;\n import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.aot.AotFactoriesLoader;\n import org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution;\n import org.springframework.beans.factory.aot.BeanFactoryInitializationCode;\n+import org.springframework.beans.factory.aot.BeanRegistrationAotProcessor;\n import org.springframework.beans.factory.aot.TestBeanRegistrationsAotProcessor;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.config.PropertiesFactoryBean;\n@@ -77,6 +79,12 @@ void setup() {\n \t\tthis.beanFactoryInitializationCode = new MockBeanFactoryInitializationCode();\n \t}\n \n+\t@Test\n+\tvoid scopedProxyBeanRegistrationAotProcessorIsRegistered() {\n+\t\tassertThat(new AotFactoriesLoader(this.beanFactory).load(BeanRegistrationAotProcessor.class))\n+\t\t\t\t.anyMatch(ScopedProxyBeanRegistrationAotProcessor.class::isInstance);\n+\t}\n+\n \t@Test\n \tvoid getBeanRegistrationCodeGeneratorWhenNotScopedProxy() {\n \t\tBeanDefinition beanDefinition = BeanDefinitionBuilder",
    "output": "Fix registration of ScopedProxyBeanRegistrationAotProcessor"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -68,7 +68,7 @@ class DefaultWebClient implements WebClient {\n \tprivate static final String URI_TEMPLATE_ATTRIBUTE = WebClient.class.getName() + \".uriTemplate\";\n \n \tprivate static final Mono<ClientResponse> NO_HTTP_CLIENT_RESPONSE_ERROR = Mono.error(\n-\t\t\tnew IllegalStateException(\"The underlying HTTP client completed without emitting a response.\"));\n+\t\t\t() -> new IllegalStateException(\"The underlying HTTP client completed without emitting a response.\"));\n \n \n \tprivate final ExchangeFunction exchangeFunction;",
    "output": "Always construct new exception on error in DefaultWebClient Always construct new exception on error, otherwise memory leak may occur due to repeated use of singleton exception"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHandlerMethod.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHandlerMethod.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHandlerMethod.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHandlerMethod.java\n@@ -205,15 +205,17 @@ private boolean isAsyncVoidReturnType(MethodParameter returnType, @Nullable Reac\n \t\t\tif (reactiveAdapter.isNoValue()) {\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\tType parameterType = returnType.getGenericParameterType();\n-\t\t\tif (parameterType instanceof ParameterizedType) {\n-\t\t\t\tParameterizedType type = (ParameterizedType) parameterType;\n-\t\t\t\tif (type.getActualTypeArguments().length == 1) {\n-\t\t\t\t\treturn Void.class.equals(type.getActualTypeArguments()[0]);\n-\t\t\t\t}\n+\t\t}\n+\t\tType parameterType = returnType.getGenericParameterType();\n+\t\tif (parameterType instanceof ParameterizedType) {\n+\t\t\tParameterizedType type = (ParameterizedType) parameterType;\n+\t\t\tif (type.getActualTypeArguments().length == 1) {\n+\t\t\t\treturn Void.class.equals(type.getActualTypeArguments()[0]);\n \t\t\t}\n \t\t}\n-\t\treturn false;\n+\t\tMethod method = returnType.getMethod();\n+\t\treturn method != null && KotlinDetector.isSuspendingFunction(method) &&\n+\t\t\t\tVoid.TYPE.equals(returnType.getParameterType());\n \t}\n \n }",
    "output": "Recognize Kotlin coroutines in isAsyncVoidReturnType This commit makes sure that Kotlin coroutines are correctly identified by InvocableHandlerMethod::isAsyncVoidReturnType"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/DomContentHandler.java b/spring-core/src/main/java/org/springframework/util/xml/DomContentHandler.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/DomContentHandler.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/DomContentHandler.java\n@@ -50,8 +50,8 @@ class DomContentHandler implements ContentHandler {\n \t */\n \tDomContentHandler(Node node) {\n \t\tthis.node = node;\n-\t\tif (node instanceof Document document) {\n-\t\t\tthis.document = document;\n+\t\tif (node instanceof Document doc) {\n+\t\t\tthis.document = doc;\n \t\t}\n \t\telse {\n \t\t\tthis.document = node.getOwnerDocument();",
    "output": "Temporary workaround for Checkstyle bug Attempting to name a variable in an \"instanceof pattern\" the same as a field results in a Checkstyle violation similar to the following if the \"instanceof pattern matching\" is located within a constructor. Reference to instance variable 'document' needs \"this.\". [RequireThis]"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java b/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java\n--- a/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java\n+++ b/spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java\n@@ -27,6 +27,7 @@\n import org.springframework.aot.hint.RuntimeHints;\n import org.springframework.aot.hint.TypeHint;\n import org.springframework.aot.hint.TypeHint.Builder;\n+import org.springframework.aot.hint.annotation.Reflective;\n import org.springframework.core.annotation.AliasFor;\n import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.core.annotation.SynthesizedAnnotation;\n@@ -66,7 +67,7 @@ public static void registerAnnotation(RuntimeHints hints, Class<?> annotationTyp\n \t}\n \n \tprivate static void collectAliasedAnnotations(Set<Class<?>> seen, Set<Class<?>> types, Class<?> annotationType) {\n-\t\tif (seen.contains(annotationType)) {\n+\t\tif (seen.contains(annotationType) || Reflective.class.equals(annotationType)) {\n \t\t\treturn;\n \t\t}\n \t\tseen.add(annotationType);",
    "output": "Exclude @Reflective from @AliasFor collection Update `RuntimeHintsUtils` to skip `@Reflective` annotations when checking for `@AliasFor`. Since the `@Reflective` annotation is only used at AOT processing time, we shouldn't need a hint for it"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/aot/hint/annotation/SimpleReflectiveProcessorTests.java b/spring-core/src/test/java/org/springframework/aot/hint/annotation/SimpleReflectiveProcessorTests.java\n--- a/spring-core/src/test/java/org/springframework/aot/hint/annotation/SimpleReflectiveProcessorTests.java\n+++ b/spring-core/src/test/java/org/springframework/aot/hint/annotation/SimpleReflectiveProcessorTests.java\n@@ -101,6 +101,7 @@ void registerReflectiveHintsForMethod() throws NoSuchMethodException {\n \n \tstatic class SampleBean {\n \n+\t\t@SuppressWarnings(\"unused\")\n \t\tprivate String name;\n \n \t\tSampleBean(String name) {",
    "output": "Suppress warning in test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java b/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java\n--- a/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java\n+++ b/spring-web/src/main/java/org/springframework/web/service/annotation/PutExchange.java\n@@ -40,13 +40,13 @@\n \t * Alias for {@link HttpExchange#value}.\n \t */\n \t@AliasFor(annotation = HttpExchange.class)\n-\tString[] value() default {};\n+\tString value() default \"\";\n \n \t/**\n \t * Alias for {@link HttpExchange#url()}.\n \t */\n \t@AliasFor(annotation = HttpExchange.class)\n-\tString[] url() default {};\n+\tString url() default \"\";\n \n \t/**\n \t * Alias for {@link HttpExchange#contentType()}.",
    "output": "Fix attribute return types in @PutExchange The return types for the `value` and `url` attributes don't match those in `@HttpExchange`"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/EventListener.java b/spring-context/src/main/java/org/springframework/context/event/EventListener.java\n--- a/spring-context/src/main/java/org/springframework/context/event/EventListener.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n import java.lang.annotation.Target;\n import java.util.function.Predicate;\n \n+import org.springframework.aot.hint.annotation.Reflective;\n import org.springframework.context.ApplicationEvent;\n import org.springframework.core.annotation.AliasFor;\n \n@@ -89,6 +90,7 @@\n @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n+@Reflective\n public @interface EventListener {\n \n \t/**",
    "output": "Tag EventListener as a reflective operation This commit adds compatibility of declarative event listeners in a native image"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedList.java\n@@ -64,6 +64,7 @@ public ManagedList(int initialCapacity) {\n \t * @since 5.3.16\n \t */\n \t@SafeVarargs\n+\t@SuppressWarnings(\"varargs\")\n \tpublic static <E> ManagedList<E> of(E... elements) {\n \t\tManagedList<E> list = new ManagedList<>();\n \t\tCollections.addAll(list, elements);\n\ndiff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedSet.java\n@@ -63,6 +63,7 @@ public ManagedSet(int initialCapacity) {\n \t * @since 5.3.16\n \t */\n \t@SafeVarargs\n+\t@SuppressWarnings(\"varargs\")\n \tpublic static <E> ManagedSet<E> of(E... elements) {\n \t\tManagedSet<E> set = new ManagedSet<>();\n \t\tCollections.addAll(set, elements);",
    "output": "Fix Java 17 compiler warning about varargs"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java b/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -90,7 +90,7 @@ public final void doFilter(ServletRequest request, ServletResponse response, Fil\n \t\t\tthrows ServletException, IOException {\n \n \t\tif (!((request instanceof HttpServletRequest httpRequest) && (response instanceof HttpServletResponse httpResponse))) {\n-\t\t\tthrow new ServletException(\"OncePerRequestFilter just supports HTTP requests\");\n+\t\t\tthrow new ServletException(\"OncePerRequestFilter only supports HTTP requests\");\n \t\t}\n \n \t\tString alreadyFilteredAttributeName = getAlreadyFilteredAttributeName();",
    "output": "Polish error message"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java\n@@ -901,7 +901,7 @@ private static class MySimpleParameterizedControllerWithList extends MyParameter\n \t}\n \n \n-\t@SuppressWarnings(\"NotNullFieldNotInitialized\")\n+\t@SuppressWarnings({\"serial\", \"NotNullFieldNotInitialized\"})\n \tprivate static class SimpleBean implements Identifiable {\n \n \t\tprivate Long id;",
    "output": "Suppress warning in test in Gradle build"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoaderRuntimeHintsRegistrar.java b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoaderRuntimeHintsRegistrar.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoaderRuntimeHintsRegistrar.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoaderRuntimeHintsRegistrar.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.core.io.support;\n \n+import java.lang.reflect.Constructor;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n@@ -88,9 +89,12 @@ private void registerHints(RuntimeHints hints, ClassLoader classLoader,\n \t@Nullable\n \tprivate Class<?> resolveClassName(ClassLoader classLoader, String factoryClassName) {\n \t\ttry {\n-\t\t\treturn ClassUtils.resolveClassName(factoryClassName, classLoader);\n+\t\t\tClass<?> className = ClassUtils.resolveClassName(factoryClassName, classLoader);\n+\t\t\t// Force resolution of all constructors to catch\n+\t\t\tConstructor<?>[] constructors = className.getDeclaredConstructors();\n+\t\t\treturn className;\n \t\t}\n-\t\tcatch (Exception ex) {\n+\t\tcatch (Throwable ex) {\n \t\t\treturn null;\n \t\t}\n \t}",
    "output": "Force AOT resolution of Spring Factories constructors This commit forces the resolution of all declared constructors when registering `RuntimeHints` for Spring factories. Resolving constructors can throw additional `NoClassDefFoundError` at runtime and during native image compilation, if a type exposed by the constructor is missing from the current classloader"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n@@ -1281,8 +1281,8 @@ public String toString() {\n \t\tsb.append(\"; primary=\").append(this.primary);\n \t\tsb.append(\"; factoryBeanName=\").append(this.factoryBeanName);\n \t\tsb.append(\"; factoryMethodName=\").append(this.factoryMethodName);\n-\t\tsb.append(\"; initMethodNames=\").append(this.initMethodNames);\n-\t\tsb.append(\"; destroyMethodNames=\").append(this.destroyMethodNames);\n+\t\tsb.append(\"; initMethodNames=\").append(Arrays.toString(this.initMethodNames));\n+\t\tsb.append(\"; destroyMethodNames=\").append(Arrays.toString(this.destroyMethodNames));\n \t\tif (this.resource != null) {\n \t\t\tsb.append(\"; defined in \").append(this.resource.getDescription());\n \t\t}",
    "output": "Use Arrays.toString for initMethodNames and destroyMethodNames arrays in AbstractBeanDefinition#toString"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java b/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java\n--- a/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -43,6 +43,7 @@\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceEditor;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.WritableResource;\n import org.springframework.core.io.support.ResourceArrayPropertyEditor;\n import org.springframework.core.io.support.ResourcePatternResolver;\n \n@@ -102,6 +103,7 @@ public void registerCustomEditors(PropertyEditorRegistry registry) {\n \t\tResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);\n \t\tdoRegisterEditor(registry, Resource.class, baseEditor);\n \t\tdoRegisterEditor(registry, ContextResource.class, baseEditor);\n+\t\tdoRegisterEditor(registry, WritableResource.class, baseEditor);\n \t\tdoRegisterEditor(registry, InputStream.class, new InputStreamEditor(baseEditor));\n \t\tdoRegisterEditor(registry, InputSource.class, new InputSourceEditor(baseEditor));\n \t\tdoRegisterEditor(registry, File.class, new FileEditor(baseEditor));",
    "output": "Accept WritableResource as required dependency type as well"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/generator/BeanFieldGeneratorTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/generator/BeanFieldGeneratorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/generator/BeanFieldGeneratorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/generator/BeanFieldGeneratorTests.java\n@@ -71,6 +71,7 @@ public static class SampleBean {\n \n \t\tpublic String one;\n \n+\t\t@SuppressWarnings(\"unused\")\n \t\tprivate int two;\n \n \t}",
    "output": "Suppress warning in test"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/MultipartControllerTests.java\n@@ -387,6 +387,7 @@ public MultipartFile getFile() {\n \t\t\treturn file;\n \t\t}\n \n+\t\t@SuppressWarnings(\"unused\")\n \t\tpublic void setFile(MultipartFile file) {\n \t\t\tthis.file = file;\n \t\t}",
    "output": "Suppress warning in test"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.web.servlet.mvc.method.annotation;\n \n import java.util.Collections;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n \n import org.springframework.core.MethodParameter;\n@@ -63,7 +62,7 @@ public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewC\n \t\t\t\t\t\tHandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);\n \n \t\tif (!CollectionUtils.isEmpty(uriTemplateVars)) {\n-\t\t\treturn new LinkedHashMap<>(uriTemplateVars);\n+\t\t\treturn Collections.unmodifiableMap(uriTemplateVars);\n \t\t}\n \t\telse {\n \t\t\treturn Collections.emptyMap();",
    "output": "Return UnmodifiableMap in MVC PathVariableMapMethodArgumentResolver"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n--- a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n@@ -367,7 +367,7 @@ private void introspectPlainAccessors(Class<?> beanClass, Set<String> readMethod\n \n \t\tfor (Method method : beanClass.getMethods()) {\n \t\t\tif (!this.propertyDescriptors.containsKey(method.getName()) &&\n-\t\t\t\t\t!readMethodNames.contains((method.getName())) && isPlainAccessor(method)) {\n+\t\t\t\t\t!readMethodNames.contains(method.getName()) && isPlainAccessor(method)) {\n \t\t\t\tthis.propertyDescriptors.put(method.getName(),\n \t\t\t\t\t\tnew GenericTypeAwarePropertyDescriptor(beanClass, method.getName(), method, null, null));\n \t\t\t\treadMethodNames.add(method.getName());\n@@ -376,8 +376,11 @@ private void introspectPlainAccessors(Class<?> beanClass, Set<String> readMethod\n \t}\n \n \tprivate boolean isPlainAccessor(Method method) {\n-\t\tif (method.getParameterCount() > 0 || method.getReturnType() == void.class ||\n-\t\t\t\tmethod.getDeclaringClass() == Object.class || Modifier.isStatic(method.getModifiers())) {\n+\t\tif (Modifier.isStatic(method.getModifiers()) ||\n+\t\t\t\tmethod.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class ||\n+\t\t\t\tmethod.getParameterCount() > 0 || method.getReturnType() == void.class ||\n+\t\t\t\tClassLoader.class.isAssignableFrom(method.getReturnType()) ||\n+\t\t\t\tProtectionDomain.class.isAssignableFrom(method.getReturnType())) {\n \t\t\treturn false;\n \t\t}\n \t\ttry {",
    "output": "Align plain accessor check"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java\n@@ -153,7 +153,7 @@ else if (read == -1) {\n \t\t\t\t\treturn EOF_BUFFER;\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\treturn null;\n+\t\t\t\t\treturn AbstractListenerReadPublisher.EMPTY_BUFFER;\n \t\t\t\t}\n \t\t\t}\n \t\t\tfinally {",
    "output": "TomcatHttpHandlerAdapter continues after 0 bytes This commit makes sure that TomcatServerHttpRequest::readFromInputStream follows the same contract as the method it overrides, and returns AbstractListenerReadPublisher.EMPTY_BUFFER when 0 bytes are read"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n@@ -197,7 +197,7 @@ public Principal getPrincipal() {\n \n \t@Override\n \tpublic InetSocketAddress getLocalAddress() {\n-\t\treturn new InetSocketAddress(this.servletRequest.getLocalName(), this.servletRequest.getLocalPort());\n+\t\treturn new InetSocketAddress(this.servletRequest.getLocalAddr(), this.servletRequest.getLocalPort());\n \t}\n \n \t@Override",
    "output": "Consistent use of getLocalAddrwithout DNS lookups in request adapters"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -242,12 +242,12 @@ protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (mediaTypesToUse.isEmpty()) {\n-\t\t\t\tif (body != null) {\n-\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n-\t\t\t\t}\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n \t\t\t\t}\n+\t\t\t\tif (body != null) {\n+\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n+\t\t\t\t}\n \t\t\t\treturn;\n \t\t\t}\n ",
    "output": "Fix debug log for no matching acceptableTypes"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/MultipartIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/MultipartIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/MultipartIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/MultipartIntegrationTests.java\n@@ -25,6 +25,7 @@\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.junit.jupiter.api.Disabled;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.scheduler.Schedulers;\n@@ -62,6 +63,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n+@Disabled\n class MultipartIntegrationTests extends AbstractHttpHandlerIntegrationTests {\n \n \tprivate WebClient webClient;",
    "output": "Disable flaky integration tests for now"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/NativeDetector.java b/spring-core/src/main/java/org/springframework/core/NativeDetector.java\n--- a/spring-core/src/main/java/org/springframework/core/NativeDetector.java\n+++ b/spring-core/src/main/java/org/springframework/core/NativeDetector.java\n@@ -19,9 +19,6 @@\n /**\n  * A common delegate for detecting a GraalVM native image environment.\n  *\n- * <p>Requires using the {@code -H:+InlineBeforeAnalysis} native image compiler flag in order to allow code removal at\n- * build time.\n- *\n  * @author Sebastien Deleuze\n  * @since 5.3.4\n  */",
    "output": "Remove outdated comment in NativeDetector `-H:+InlineBeforeAnalysis` is enabled by default as of GraalVM 21.3"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,7 +80,7 @@\n  * @author Costin Leau\n  * @since 2.0\n  * @see HibernateJpaVendorAdapter\n- * @see org.hibernate.Session#setFlushMode\n+ * @see org.hibernate.Session#setHibernateFlushMode\n  * @see org.hibernate.Transaction#setTimeout\n  */\n @SuppressWarnings(\"serial\")\n@@ -360,10 +360,9 @@ public SessionTransactionData(SessionImplementor session, @Nullable FlushMode pr\n \t\t\tthis.readOnly = readOnly;\n \t\t}\n \n-\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic void resetSessionState() {\n \t\t\tif (this.previousFlushMode != null) {\n-\t\t\t\tthis.session.setFlushMode(this.previousFlushMode);\n+\t\t\t\tthis.session.setHibernateFlushMode(this.previousFlushMode);\n \t\t\t}\n \t\t\tif (this.needsConnectionReset &&\n \t\t\t\t\tthis.session.getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()) {",
    "output": "Fix accidental use of deprecated setFlushMode method"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderStartupStep.java b/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderStartupStep.java\n--- a/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderStartupStep.java\n+++ b/spring-core/src/main/java/org/springframework/core/metrics/jfr/FlightRecorderStartupStep.java\n@@ -20,9 +20,8 @@\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n-import org.jetbrains.annotations.NotNull;\n-\n import org.springframework.core.metrics.StartupStep;\n+import org.springframework.lang.NonNull;\n \n /**\n  * {@link StartupStep} implementation for the Java Flight Recorder.\n@@ -115,7 +114,7 @@ public void add(String key, Supplier<String> value) {\n \t\t\tadd(key, value.get());\n \t\t}\n \n-\t\t@NotNull\n+\t\t@NonNull\n \t\t@Override\n \t\tpublic Iterator<Tag> iterator() {\n \t\t\treturn new TagsIterator();",
    "output": "Ban jetbrains annotations imports"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -831,15 +831,27 @@ public static boolean isJavaLanguageInterface(Class<?> ifc) {\n \t\treturn javaLanguageInterfaces.contains(ifc);\n \t}\n \n+\t/**\n+\t * Determine if the supplied class is a static class.\n+\t * @return {@code true} if the supplied class is a static class\n+\t * @since 6.0\n+\t * @see Modifier#isStatic(int)\n+\t * @see #isInnerClass(Class)\n+\t */\n+\tpublic static boolean isStaticClass(Class<?> clazz) {\n+\t\treturn Modifier.isStatic(clazz.getModifiers());\n+\t}\n+\n \t/**\n \t * Determine if the supplied class is an <em>inner class</em>,\n \t * i.e. a non-static member of an enclosing class.\n \t * @return {@code true} if the supplied class is an inner class\n \t * @since 5.0.5\n \t * @see Class#isMemberClass()\n+\t * @see #isStaticClass(Class)\n \t */\n \tpublic static boolean isInnerClass(Class<?> clazz) {\n-\t\treturn (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()));\n+\t\treturn (clazz.isMemberClass() && !isStaticClass(clazz));\n \t}\n \n \t/**",
    "output": "Introduce ClassUtils.isStaticClassutility method The impetus for this is to be able to use ClassUtils::isStaticClass or the existing ClassUtils::isInnerClass as a method reference for class-based predicates that need to differentiate between static nested types and inner classes"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -341,12 +341,6 @@ public T mapRow(ResultSet rs, int rowNumber) throws SQLException {\n \t\t\t\t\t\t\t\"Unable to map column '\" + column + \"' to property '\" + pd.getName() + \"'\", ex);\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\t// No PropertyDescriptor found\n-\t\t\t\tif (rowNumber == 0 && logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"No property found for column '\" + column + \"' mapped to field '\" + field + \"'\");\n-\t\t\t\t}\n-\t\t\t}\n \t\t}\n \n \t\tif (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {",
    "output": "Avoid confusing debug log entries with DataClassRowMapper"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedMap.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedMap.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedMap.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ManagedMap.java\n@@ -67,6 +67,7 @@ public ManagedMap(int initialCapacity) {\n \t * @return a {@code Map} containing the specified mappings\n \t * @since 5.3.16\n \t */\n+\t@SafeVarargs\n \t@SuppressWarnings(\"unchecked\")\n \tpublic static <K,V> ManagedMap<K,V> ofEntries(Entry<? extends K, ? extends V>... entries) {\n \t\tManagedMap<K,V > map = new ManagedMap<>();",
    "output": "Apply @SafeVarargs to ManagedMap.ofEntries(...)"
  },
  {
    "input": "diff --git a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java\n--- a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java\n+++ b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/net/TestSocketUtils.java\n@@ -49,7 +49,7 @@\n  * @author Gary Russell\n  * @since 4.0\n  */\n-public class TestSocketUtils {\n+public abstract class TestSocketUtils {\n \n \t/**\n \t * The default minimum value for port ranges used when finding an available",
    "output": "Make TestSocketUtils abstract"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -320,7 +320,7 @@ public Publisher<Void> apply(NettyInbound inbound, NettyOutbound outbound) {\n \t\t\tTcpConnection<P> connection = new ReactorNettyTcpConnection<>(inbound, outbound,  codec, completionSink);\n \t\t\tscheduler.schedule(() -> this.connectionHandler.afterConnected(connection));\n \n-\t\t\tinbound.withConnection(conn -> conn.addHandler(new StompMessageDecoder<>(codec)));\n+\t\t\tinbound.withConnection(conn -> conn.addHandlerFirst(new StompMessageDecoder<>(codec)));\n \n \t\t\tinbound.receiveObject()\n \t\t\t\t\t.cast(Message.class)",
    "output": "Start building against Reactor 2020.0.17 snapshots"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n@@ -21,6 +21,7 @@\n import java.util.Set;\n \n import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n import org.springframework.core.KotlinDetector;\n@@ -130,7 +131,8 @@ protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParame\n \t\tif (adapter != null) {\n \t\t\tpublisher = adapter.toPublisher(body);\n \t\t\tboolean isUnwrapped = KotlinDetector.isSuspendingFunction(bodyParameter.getMethod()) &&\n-\t\t\t\t\t!COROUTINES_FLOW_CLASS_NAME.equals(bodyType.toClass().getName());\n+\t\t\t\t\t!COROUTINES_FLOW_CLASS_NAME.equals(bodyType.toClass().getName()) &&\n+\t\t\t\t\t!Flux.class.equals(bodyType.toClass());\n \t\t\tResolvableType genericType = isUnwrapped ? bodyType : bodyType.getGeneric();\n \t\t\telementType = getElementType(adapter, genericType);\n \t\t\tactualElementType = elementType;",
    "output": "Fix unwrapping logic for ResponseEntity<Flux> This commit makes sure that the response returned by coroutine handler methods that return ResponseEntity<Flux> is unwrapped correctly"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n@@ -95,7 +95,7 @@ private ThreadPoolTaskScheduler initDefaultSockJsScheduler() {\n \t}\n \n \n-\tprivate static class DefaultSockJsSchedulerContainer implements InitializingBean, DisposableBean {\n+\tstatic class DefaultSockJsSchedulerContainer implements InitializingBean, DisposableBean {\n \n \t\t@Nullable\n \t\tprivate final ThreadPoolTaskScheduler scheduler;",
    "output": "Fix visibility of DefaultSockJsSchedulerContainer"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/generator/AotContributingBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/generator/AotContributingBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/generator/AotContributingBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/generator/AotContributingBeanPostProcessor.java\n@@ -18,12 +18,13 @@\n \n import org.springframework.beans.factory.config.BeanPostProcessor;\n import org.springframework.beans.factory.support.RootBeanDefinition;\n+import org.springframework.core.PriorityOrdered;\n import org.springframework.lang.Nullable;\n \n /**\n- * Specialization of {@link BeanPostProcessor} that contributes to bean\n- * instantiation ahead of time, providing generated code that is equivalent to\n- * its runtime behavior.\n+ * Specialization of a priority ordered {@link BeanPostProcessor} that\n+ * contributes to bean instantiation ahead of time, providing generated code\n+ * that is equivalent to its runtime behavior.\n  *\n  * <p>Contrary to other bean post processors, implementations of this interface\n  * are instantiated at build-time and should not rely on other beans in the\n@@ -32,8 +33,7 @@\n  * @author Stephane Nicoll\n  * @since 6.0\n  */\n-@FunctionalInterface\n-public interface AotContributingBeanPostProcessor extends BeanPostProcessor {\n+public interface AotContributingBeanPostProcessor extends BeanPostProcessor, PriorityOrdered {\n \n \t/**\n \t * Contribute a {@link BeanInstantiationContribution} for the given bean definition,",
    "output": "Clarify the scope of AotContributingBeanPostProcessor This commit updates AotContributingBeanPostProcessor so that it explicitly extends from PriorityOrdered. This makes it more apparent that AOT contributing bean post processors are meant to be invoked early with the regular runtime, and shouldn't be post-processed themselves"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java b/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/generator/package-info.java\n@@ -0,0 +1,9 @@\n+/**\n+ * Support for generating code that represents the state of a bean factory.\n+ */\n+@NonNullApi\n+@NonNullFields\n+package org.springframework.beans.factory.generator;\n+\n+import org.springframework.lang.NonNullApi;\n+import org.springframework.lang.NonNullFields;",
    "output": "Add missing package-info"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java b/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java\n@@ -106,11 +106,13 @@ static class NestedException extends RuntimeException {\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"serial\")\n \tstatic class MyException extends RuntimeException {\n \t}\n \n \t// Name intentionally starts with MyException (including package) but does\n \t// NOT extend MyException.\n+\t@SuppressWarnings(\"serial\")\n \tstatic class MyException2 extends RuntimeException {\n \t}\n ",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java b/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/RollbackRuleAttributeTests.java\n@@ -34,7 +34,7 @@\n  * @author Sam Brannen\n  * @since 09.04.2003\n  */\n-class RollbackRuleTests {\n+class RollbackRuleAttributeTests {\n \n \t@Test\n \tvoid constructorArgumentMustBeThrowableClassWithNonThrowableType() {",
    "output": "Rename test class to adhere to conventions"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -302,7 +302,7 @@ public void checkConfigMembers(RootBeanDefinition beanDefinition) {\n \t\t\t\t\tbeanDefinition.registerExternallyManagedInitMethod(methodIdentifier);\n \t\t\t\t\tcheckedInitMethods.add(element);\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Registered init method on class [\" + this.targetClass.getName() + \"]: \" + element);\n+\t\t\t\t\t\tlogger.trace(\"Registered init method on class [\" + this.targetClass.getName() + \"]: \" + methodIdentifier);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -313,7 +313,7 @@ public void checkConfigMembers(RootBeanDefinition beanDefinition) {\n \t\t\t\t\tbeanDefinition.registerExternallyManagedDestroyMethod(methodIdentifier);\n \t\t\t\t\tcheckedDestroyMethods.add(element);\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Registered destroy method on class [\" + this.targetClass.getName() + \"]: \" + element);\n+\t\t\t\t\t\tlogger.trace(\"Registered destroy method on class [\" + this.targetClass.getName() + \"]: \" + methodIdentifier);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix log messages for init/destroy method registration"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -420,7 +420,11 @@ public void testIndexerError() {\n \n \t@Test\n \tpublic void testStaticRef02() {\n-\t\tevaluate(\"T(java.awt.Color).green.getRGB()!=0\", \"true\", Boolean.class);\n+\t\tevaluate(\"T(java.awt.Color).green.getRGB() != 0\", true, Boolean.class);\n+\t\tevaluate(\"(T(java.lang.Math).random() * 100.0 ) > 0\", true, Boolean.class);\n+\t\tevaluate(\"(T(Math).random() * 100.0) > 0\", true, Boolean.class);\n+\t\tevaluate(\"T(Character).isUpperCase('Test'.charAt(0)) ? 'uppercase' : 'lowercase'\", \"uppercase\", String.class);\n+\t\tevaluate(\"T(Character).isUpperCase('Test'.charAt(1)) ? 'uppercase' : 'lowercase'\", \"lowercase\", String.class);\n \t}\n \n \t// variables and functions",
    "output": "Test claims regarding SpEL support for T(Character)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java\n@@ -559,9 +559,9 @@ private void logResponseStatus(HttpMethod method, URI url, ClientHttpResponse re\n \t}\n \n \tprivate void handleResponseError(HttpMethod method, URI url, ClientHttpResponse response) throws IOException {\n-\t\tif (logger.isWarnEnabled()) {\n+\t\tif (logger.isDebugEnabled()) {\n \t\t\ttry {\n-\t\t\t\tlogger.warn(\"Async \" + method.name() + \" request for \\\"\" + url + \"\\\" resulted in \" +\n+\t\t\t\tlogger.debug(\"Async \" + method.name() + \" request for \\\"\" + url + \"\\\" resulted in \" +\n \t\t\t\t\t\tresponse.getRawStatusCode() + \" (\" + response.getStatusText() + \"); invoking error handler\");\n \t\t\t}\n \t\t\tcatch (IOException ex) {",
    "output": "Align AsyncRestTemplate error logging with RestTemplate Prior to this commit, `AsyncRestTemplate` would log errors (including simple 404s) with WARN level. Such errors are quite common and should not clutter logs. This commit aligns the logging strategy with RestTemplate, using the DEBUG level for such cases"
  },
  {
    "input": "diff --git a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/aot/generator/visibility/PublicFactoryBean.java b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/aot/generator/visibility/PublicFactoryBean.java\n--- a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/aot/generator/visibility/PublicFactoryBean.java\n+++ b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/aot/generator/visibility/PublicFactoryBean.java\n@@ -20,10 +20,7 @@\n \n public class PublicFactoryBean<T> {\n \n-\tprivate final Class<T> type;\n-\n-\tpublic PublicFactoryBean(Class<T> type) {\n-\t\tthis.type = type;\n+\tPublicFactoryBean(Class<T> type) {\n \t}\n \n \tpublic static PublicFactoryBean<ProtectedType> protectedTypeFactoryBean() {",
    "output": "Clean up warnings in test fixture"
  },
  {
    "input": "diff --git a/spring-orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java b/spring-orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java\n--- a/spring-orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java\n+++ b/spring-orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -419,6 +419,7 @@ private static class TestTaskExecutor extends SimpleAsyncTaskExecutor {\n \t\tprivate final CountDownLatch latch = new CountDownLatch(1);\n \n \t\t@Override\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic void execute(Runnable task, long startTimeout) {\n \t\t\tRunnable decoratedTask = () -> {\n \t\t\t\ttry {",
    "output": "Suppress deprecation warnings in tests in build"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTests.java b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTests.java\n--- a/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -380,6 +380,7 @@ public Object call() throws Exception {\n \tprivate static class SyncTaskExecutor extends SimpleAsyncTaskExecutor {\n \n \t\t@Override\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic void execute(Runnable task, long startTimeout) {\n \t\t\ttask.run();\n \t\t}",
    "output": "Suppress deprecation warning in WebAsyncManagerTests"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -34,6 +34,7 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n@@ -1246,12 +1247,12 @@ void malformedResponseChunksOnEntityWithBody(ClientHttpConnector connector) {\n \tprivate <T> Mono<T> doMalformedChunkedResponseTest(\n \t\t\tClientHttpConnector connector, Function<ResponseSpec, Mono<T>> handler) {\n \n-\t\t@SuppressWarnings(\"deprecation\")\n-\t\tint port = org.springframework.util.SocketUtils.findAvailableTcpPort();\n+\t\tAtomicInteger port = new AtomicInteger();\n \n \t\tThread serverThread = new Thread(() -> {\n \t\t\t// No way to simulate a malformed chunked response through MockWebServer.\n-\t\t\ttry (ServerSocket serverSocket = new ServerSocket(port)) {\n+\t\t\ttry (ServerSocket serverSocket = new ServerSocket(0)) {\n+\t\t\t\tport.set(serverSocket.getLocalPort());\n \t\t\t\tSocket socket = serverSocket.accept();\n \t\t\t\tInputStream is = socket.getInputStream();\n ",
    "output": "Stop using SocketUtils in WebClientIntegrationTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -74,7 +74,7 @@ public static RequestPath parseAndCache(HttpServletRequest request) {\n \t */\n \tpublic static RequestPath getParsedRequestPath(ServletRequest request) {\n \t\tRequestPath path = (RequestPath) request.getAttribute(PATH_ATTRIBUTE);\n-\t\tAssert.notNull(path, \"Expected parsed RequestPath in request attribute \\\"\" + PATH_ATTRIBUTE + \"\\\".\");\n+\t\tAssert.notNull(path, () -> \"Expected parsed RequestPath in request attribute \\\"\" + PATH_ATTRIBUTE + \"\\\".\");\n \t\treturn path;\n \t}\n ",
    "output": "Make assertion message lazy in ServletRequestPathUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java b/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -32,6 +32,7 @@\n  * with consistent ordering as well as a few useful utility methods.\n  *\n  * @author Phillip Webb\n+ * @author Sam Brannen\n  * @since 5.2\n  */\n final class AttributeMethods {\n@@ -71,10 +72,10 @@ private AttributeMethods(@Nullable Class<? extends Annotation> annotationType, M\n \t\tfor (int i = 0; i < attributeMethods.length; i++) {\n \t\t\tMethod method = this.attributeMethods[i];\n \t\t\tClass<?> type = method.getReturnType();\n-\t\t\tif (method.getDefaultValue() != null) {\n+\t\t\tif (!foundDefaultValueMethod && (method.getDefaultValue() != null)) {\n \t\t\t\tfoundDefaultValueMethod = true;\n \t\t\t}\n-\t\t\tif (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation())) {\n+\t\t\tif (!foundNestedAnnotation && (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation()))) {\n \t\t\t\tfoundNestedAnnotation = true;\n \t\t\t}\n \t\t\tReflectionUtils.makeAccessible(method);",
    "output": "Short circuit if-conditions in AttributeMethods"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n@@ -37,7 +37,6 @@\n \n import jakarta.annotation.Resource;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.condition.JRE;\n \n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.MergedAnnotation.Adapt;\n@@ -1871,12 +1870,10 @@ void toStringForSynthesizedAnnotations() throws Exception {\n \n \t\tassertThat(webMappingWithAliases.toString()).isNotEqualTo(synthesizedWebMapping1.toString());\n \n-\t\tif (JRE.currentVersion().ordinal() > JRE.JAVA_8.ordinal()) {\n-\t\t\t// The unsynthesized annotation for handleMappedWithSamePathAndValueAttributes()\n-\t\t\t// should produce the same toString() results as synthesized annotations for\n-\t\t\t// handleMappedWithPathAttribute() on Java 9 or higher\n-\t\t\tassertToStringForWebMappingWithPathAndValue(webMappingWithPathAndValue);\n-\t\t}\n+\t\t// The unsynthesized annotation for handleMappedWithSamePathAndValueAttributes()\n+\t\t// should produce the same toString() results as synthesized annotations for\n+\t\t// handleMappedWithPathAttribute() on Java 9 or higher\n+\t\tassertToStringForWebMappingWithPathAndValue(webMappingWithPathAndValue);\n \t\tassertToStringForWebMappingWithPathAndValue(synthesizedWebMapping1);\n \t\tassertToStringForWebMappingWithPathAndValue(synthesizedWebMapping2);\n \t}",
    "output": "Remove unnecessary JDK 9+ check in MergedAnnotationsTests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -537,10 +537,10 @@ private MergedAnnotation<?> findAutowiredAnnotation(AccessibleObject ao) {\n \t * @param ann the Autowired annotation\n \t * @return whether the annotation indicates that a dependency is required\n \t */\n-\t@SuppressWarnings({\"deprecation\", \"cast\"})\n+\t@SuppressWarnings(\"deprecation\")\n \tprotected boolean determineRequiredStatus(MergedAnnotation<?> ann) {\n-\t\treturn determineRequiredStatus(\n-\t\t\t\tann.asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType())));\n+\t\treturn determineRequiredStatus(ann.<AnnotationAttributes> asMap(\n+\t\t\tmergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType())));\n \t}\n \n \t/**",
    "output": "Allow AutowiredAnnotationBeanPostProcessor to compile on JDK 11"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java\n@@ -153,11 +153,11 @@ protected Object resolveSpecifiedLookupKey(Object lookupKey) {\n \t * @throws IllegalArgumentException in case of an unsupported value type\n \t */\n \tprotected DataSource resolveSpecifiedDataSource(Object dataSource) throws IllegalArgumentException {\n-\t\tif (dataSource instanceof DataSource) {\n-\t\t\treturn (DataSource) dataSource;\n+\t\tif (dataSource instanceof DataSource result) {\n+\t\t\treturn result;\n \t\t}\n-\t\telse if (dataSource instanceof String) {\n-\t\t\treturn this.dataSourceLookup.getDataSource((String) dataSource);\n+\t\telse if (dataSource instanceof String name) {\n+\t\t\treturn this.dataSourceLookup.getDataSource(name);\n \t\t}\n \t\telse {\n \t\t\tthrow new IllegalArgumentException(",
    "output": "Apply \"instanceof pattern matching\" in AbstractRoutingDataSource"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java b/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java\n--- a/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/beans/BeanMap.java\n@@ -5,14 +5,15 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n  *\n  *  Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.cglib.beans;\n \n import java.security.ProtectionDomain;",
    "output": "Upgrade license header for https (nohttp rule)"
  },
  {
    "input": "diff --git a/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java b/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java\n--- a/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java\n+++ b/integration-tests/src/test/java/org/springframework/context/annotation/jsr330/ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java\n@@ -318,7 +318,7 @@ else if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(jakarta.inje\n \t\t\t\t\t\tmetadata.setScopedProxyMode(scopedProxyMode);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\telse if (type.startsWith(\"javax.inject\")) {\n+\t\t\t\t\telse if (type.startsWith(\"jakarta.inject\")) {\n \t\t\t\t\t\tmetadata.setScopeName(BeanDefinition.SCOPE_PROTOTYPE);\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Fix broken test missed in merge"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -233,7 +233,8 @@ protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {\n \t\t\t\treturn beanFactory.getBean(TaskExecutor.class);\n \t\t\t}\n \t\t\tcatch (NoUniqueBeanDefinitionException ex) {\n-\t\t\t\tlogger.debug(\"Could not find unique TaskExecutor bean\", ex);\n+\t\t\t\tlogger.debug(\"Could not find unique TaskExecutor bean. \" +\n+\t\t\t\t\t\t\"Continuing search for an Executor bean named 'taskExecutor'\", ex);\n \t\t\t\ttry {\n \t\t\t\t\treturn beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);\n \t\t\t\t}\n@@ -246,7 +247,8 @@ protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (NoSuchBeanDefinitionException ex) {\n-\t\t\t\tlogger.debug(\"Could not find default TaskExecutor bean\", ex);\n+\t\t\t\tlogger.debug(\"Could not find default TaskExecutor bean. \" +\n+\t\t\t\t\t\t\"Continuing search for an Executor bean named 'taskExecutor'\", ex);\n \t\t\t\ttry {\n \t\t\t\t\treturn beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);\n \t\t\t\t}",
    "output": "Improve log message when searching for default executor for async processing"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java b/spring-aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -153,7 +153,7 @@ public void testAdvisorEventsWithDirectPointcut() {\n \tpublic void testAspectEvent() {\n \t\tthis.reader.loadBeanDefinitions(CONTEXT);\n \t\tComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();\n-\t\tassertThat(componentDefinitions.length).as(\"Incorrect number of events fired\").isEqualTo(5);\n+\t\tassertThat(componentDefinitions.length).as(\"Incorrect number of events fired\").isEqualTo(2);\n \n \t\tboolean condition = componentDefinitions[0] instanceof CompositeComponentDefinition;\n \t\tassertThat(condition).as(\"No holder with nested components\").isTrue();",
    "output": "Delete unused XML config in AOP namespace tests"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -133,7 +133,9 @@ static void flush(Session session, boolean synch) throws DataAccessException {\n \tpublic static void closeSession(@Nullable Session session) {\n \t\tif (session != null) {\n \t\t\ttry {\n-\t\t\t\tsession.close();\n+\t\t\t\tif (session.isOpen()) {\n+\t\t\t\t\tsession.close();\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tlogger.error(\"Failed to release Hibernate Session\", ex);",
    "output": "Check open status before close call (aligned with EntityManagerFactoryUtils)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -137,8 +137,8 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n \t\t\t\t// local PropertyResolver to enforce that setting, since the Environment is most\n \t\t\t\t// likely not configured with ignoreUnresolvablePlaceholders set to true.\n \t\t\t\t// See https://github.com/spring-projects/spring-framework/issues/27947\n-\t\t\t\tif (this.ignoreUnresolvablePlaceholders && (this.environment instanceof ConfigurableEnvironment)) {\n-\t\t\t\t\tConfigurableEnvironment configurableEnvironment = (ConfigurableEnvironment) this.environment;\n+\t\t\t\tif (this.ignoreUnresolvablePlaceholders &&\n+\t\t\t\t\t\t(this.environment instanceof ConfigurableEnvironment configurableEnvironment)) {\n \t\t\t\t\tPropertySourcesPropertyResolver resolver =\n \t\t\t\t\t\t\tnew PropertySourcesPropertyResolver(configurableEnvironment.getPropertySources());\n \t\t\t\t\tresolver.setIgnoreUnresolvableNestedPlaceholders(true);",
    "output": "Apply \"instanceof pattern matching\" in PropertySourcesPlaceholderConfigurer"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n@@ -445,7 +445,7 @@ public void setName(Optional<String> name) {\n \t\t}\n \t}\n \n-\t@Configuration\n+\t@Configuration(proxyBeanMethods = false)\n \tstatic class IgnoreUnresolvablePlaceholdersFalseConfig {\n \n \t\t@Value(\"${my.key}\")\n@@ -457,7 +457,7 @@ static PropertySourcesPlaceholderConfigurer pspc() {\n \t\t}\n \t}\n \n-\t@Configuration\n+\t@Configuration(proxyBeanMethods = false)\n \tstatic class IgnoreUnresolvablePlaceholdersTrueConfig {\n \n \t\t@Value(\"${my.key}\")",
    "output": "Make PropertySourcesPlaceholderConfigurerTests pass on JDK 17 This change is required in Eclipse IDE but not for the Gradle build"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/BeanPropertyRowMapperTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/BeanPropertyRowMapperTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/BeanPropertyRowMapperTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/BeanPropertyRowMapperTests.java\n@@ -19,6 +19,8 @@\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n \n import org.springframework.beans.TypeMismatchException;\n import org.springframework.dao.InvalidDataAccessApiUsageException;\n@@ -149,4 +151,18 @@ void queryWithUnderscoreInColumnNameAndPersonWithMultipleAdjacentUppercaseLetter\n \t\tmock.verifyClosed();\n \t}\n \n+\t@ParameterizedTest\n+\t@CsvSource({\n+\t\t\"age, age\",\n+\t\t\"lastName, last_name\",\n+\t\t\"Name, name\",\n+\t\t\"FirstName, first_name\",\n+\t\t\"EMail, e_mail\",\n+\t\t\"URL, u_r_l\", // likely undesirable, but that's the status quo\n+\t})\n+\tvoid underscoreName(String input, String expected) {\n+\t\tBeanPropertyRowMapper<?> mapper = new BeanPropertyRowMapper<>(Object.class);\n+\t\tassertThat(mapper.underscoreName(input)).isEqualTo(expected);\n+\t}\n+\n }",
    "output": "Explicitly test BeanPropertyRowMapper.underscoreName(String)"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartIntegrationTests.java\n@@ -23,6 +23,8 @@\n import java.time.Duration;\n import java.util.Map;\n \n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n@@ -101,6 +103,16 @@ void transferTo(HttpServer httpServer) throws Exception {\n \t\t// TODO Determine why Undertow fails: https://github.com/spring-projects/spring-framework/issues/25310\n \t\tassumeFalse(httpServer instanceof UndertowHttpServer, \"Undertow currently fails with transferTo\");\n \n+\t\tverifyTransferTo(httpServer);\n+\t}\n+\n+\t@Disabled(\"Unstable on Undertow,Use @RepeatedTest(100) for verify\")\n+\t@Test\n+\tvoid transferToWithUndertow() throws Exception {\n+\t\tverifyTransferTo(new UndertowHttpServer());\n+\t}\n+\n+\tprivate void verifyTransferTo(HttpServer httpServer) throws Exception {\n \t\tstartServer(httpServer);\n \n \t\tMono<String> result = webClient",
    "output": "Simplify debugging of Undertow transferTo issue This commit introduces a dedicated (disabled) transferToWithUndertowtest method to simplify debugging of transferTo issues with Undertow"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,6 +65,16 @@ public HttpStatus getStatusCode() {\n \t\treturn getDelegate().getStatusCode();\n \t}\n \n+\t@Override\n+\tpublic boolean setRawStatusCode(@Nullable Integer value) {\n+\t\treturn getDelegate().setRawStatusCode(value);\n+\t}\n+\n+\t@Override\n+\tpublic Integer getRawStatusCode() {\n+\t\treturn getDelegate().getRawStatusCode();\n+\t}\n+\n \t@Override\n \tpublic HttpHeaders getHeaders() {\n \t\treturn getDelegate().getHeaders();",
    "output": "Add missing overrides to ServerHttpResponseDecorator"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport.java\n@@ -80,7 +80,7 @@ protected void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n \t * </pre>\n \t */\n \t@Bean\n-\tpublic DefaultSockJsSchedulerContainer defaultSockJsSchedulerContainer() {\n+\tDefaultSockJsSchedulerContainer defaultSockJsSchedulerContainer() {\n \t\treturn (initHandlerRegistry().requiresTaskScheduler() ?\n \t\t\t\tnew DefaultSockJsSchedulerContainer(initDefaultSockJsScheduler()) :\n \t\t\t\tnew DefaultSockJsSchedulerContainer(null));",
    "output": "SockJS TaskScheduler container bean is package private"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n@@ -98,7 +98,7 @@ public static Method findBridgedMethod(Method bridgeMethod) {\n \t * checks and can be used quickly filter for a set of possible matches.\n \t */\n \tprivate static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {\n-\t\treturn (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&\n+\t\treturn (!candidateMethod.isBridge() &&\n \t\t\t\tcandidateMethod.getName().equals(bridgeMethod.getName()) &&\n \t\t\t\tcandidateMethod.getParameterCount() == bridgeMethod.getParameterCount());\n \t}",
    "output": "Remove unnecessary check in isBridgedCandidateForIn BridgeMethodResolver#isBridgedCandidateFor, candidateMethod is never not bridged, so it's unnecessary to judge whether candidateMethod and bridgeMethod are the same"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/NettyHeadersAdapter.java b/spring-web/src/main/java/org/springframework/http/client/reactive/NettyHeadersAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/NettyHeadersAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/NettyHeadersAdapter.java\n@@ -147,7 +147,7 @@ public List<String> remove(Object key) {\n \n \t@Override\n \tpublic void putAll(Map<? extends String, ? extends List<String>> map) {\n-\t\tmap.forEach(this.headers::add);\n+\t\tmap.forEach(this.headers::set);\n \t}\n \n \t@Override",
    "output": "NettyHeadersAdapter::putAll does not overwrite headers Similar to 4078b73cec8eb8baad10a7593b1c917b9c7b26d8, but for the client-side NettyHeadersAdapter::putAll"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2021 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -152,6 +152,14 @@ void trimTrailingCharacter() {\n \t\tassertThat(StringUtils.trimTrailingCharacter(\" a b  c \", ' ')).isEqualTo(\" a b  c\");\n \t}\n \n+\t@Test\n+\tvoid matchesCharacter() {\n+\t\tassertThat(StringUtils.matchesCharacter(null, '/')).isFalse();\n+\t\tassertThat(StringUtils.matchesCharacter(\"/a\", '/')).isFalse();\n+\t\tassertThat(StringUtils.matchesCharacter(\"a\", '/')).isFalse();\n+\t\tassertThat(StringUtils.matchesCharacter(\"/\", '/')).isTrue();\n+\t}\n+\n \t@Test\n \tvoid startsWithIgnoreCase() {\n \t\tString prefix = \"fOo\";",
    "output": "Add tests for StringUtils matchesCharactermethod"
  },
  {
    "input": "diff --git a/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java b/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java\n--- a/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java\n+++ b/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2022 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * Abstract superclass for counting advices etc.\n@@ -31,7 +32,7 @@\n public class MethodCounter implements Serializable {\n \n \t/** Method name --> count, does not understand overloading */\n-\tprivate HashMap<String, Integer> map = new HashMap<>();\n+\tprivate Map<String, Integer> map = new HashMap<>();\n \n \tprivate int allCount;\n ",
    "output": "Simplify HashMap declaration in test fixture"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/NettyHeadersAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/NettyHeadersAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/NettyHeadersAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/NettyHeadersAdapter.java\n@@ -147,7 +147,7 @@ public List<String> remove(Object key) {\n \n \t@Override\n \tpublic void putAll(Map<? extends String, ? extends List<String>> map) {\n-\t\tmap.forEach(this.headers::add);\n+\t\tmap.forEach(this.headers::set);\n \t}\n \n \t@Override",
    "output": "NettyHeadersAdapter::putAll does not overwrite headers NettyHeadersAdapter::putAll uses HttpHeaders::add, which does not overwrite existing headers. putAll should use HttpHeaders::set instead, just like NettyHeadersAdapter::put does"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n@@ -262,12 +262,12 @@ public void propertyAccessWithInstanceMethodResolver() {\n \n \t@Test\n \tpublic void propertyAccessWithInstanceMethodResolverAndTypedRootObject() {\n-\t\tPerson target = new Person(\"p1\");\n+\t\tPerson rootObject = new Person(\"p1\");\n \t\tEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().\n-\t\t\t\twithInstanceMethods().withTypedRootObject(target, TypeDescriptor.valueOf(Object.class)).build();\n+\t\t\t\twithInstanceMethods().withTypedRootObject(rootObject, TypeDescriptor.valueOf(Object.class)).build();\n \n-\t\tassertThat(parser.parseExpression(\"name.substring(1)\").getValue(context, target)).isEqualTo(\"1\");\n-\t\tassertThat(context.getRootObject().getValue()).isSameAs(target);\n+\t\tassertThat(parser.parseExpression(\"name.substring(1)\").getValue(context)).isEqualTo(\"1\");\n+\t\tassertThat(context.getRootObject().getValue()).isSameAs(rootObject);\n \t\tassertThat(context.getRootObject().getTypeDescriptor().getType()).isSameAs(Object.class);\n \t}\n ",
    "output": "Fix SpEL withTypedRootObjecttest"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementerTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementerTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementerTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementerTests.java\n@@ -72,11 +72,9 @@ void incrementsSequenceUsingH2EmbeddedDatabaseConfigurer() {\n \n \t/**\n \t * Tests that the incrementer works when using all supported H2 <em>compatibility modes</em>.\n-\t *\n-\t * <p>The following modes are only supported with H2 2.x or higher: STRICT, LEGACY, MariaDB\n \t */\n \t@ParameterizedTest\n-\t@ValueSource(strings = { \"DB2\", \"Derby\", \"HSQLDB\", \"MSSQLServer\", \"MySQL\", \"Oracle\", \"PostgreSQL\" })\n+\t@ValueSource(strings = { \"STRICT\", \"LEGACY\", \"DB2\", \"Derby\", \"HSQLDB\", \"MariaDB\", \"MSSQLServer\", \"MySQL\", \"Oracle\", \"PostgreSQL\" })\n \tvoid incrementsSequenceWithExplicitH2CompatibilityMode(String compatibilityMode) {\n \t\tString connectionUrl = String.format(\"jdbc:h2:mem:%s;MODE=%s\", UUID.randomUUID().toString(), compatibilityMode);\n \t\tDataSource dataSource = new SimpleDriverDataSource(new org.h2.Driver(), connectionUrl, \"sa\", \"\");",
    "output": "Test H2SequenceMaxValueIncrementer against all H2 2.0.x compatibility modes"
  },
  {
    "input": "diff --git a/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java b/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java\n--- a/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java\n+++ b/spring-aop/src/testFixtures/java/org/springframework/aop/testfixture/advice/MethodCounter.java\n@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * Abstract superclass for counting advices etc.\n@@ -31,7 +32,7 @@\n public class MethodCounter implements Serializable {\n \n \t/** Method name --> count, does not understand overloading */\n-\tprivate HashMap<String, Integer> map = new HashMap<>();\n+\tprivate Map<String, Integer> map = new HashMap<>();\n \n \tprivate int allCount;\n ",
    "output": "Simplify HashMap declaration in test fixture"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n@@ -103,18 +103,6 @@ protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {\n \t}\n \n \n-\t/**\n-\t * Return the bean factory to register the bean definitions with.\n-\t * <p>The factory is exposed through the BeanDefinitionRegistry interface,\n-\t * encapsulating the methods that are relevant for bean definition handling.\n-\t * @deprecated as of Spring Framework 5.3.15 in favor of {@link #getRegistry()},\n-\t * to be removed in Spring Framework 6.0\n-\t */\n-\t@Deprecated\n-\tpublic final BeanDefinitionRegistry getBeanFactory() {\n-\t\treturn this.registry;\n-\t}\n-\n \t@Override\n \tpublic final BeanDefinitionRegistry getRegistry() {\n \t\treturn this.registry;",
    "output": "Remove deprecated AbstractBeanDefinitionReader.getBeanFactorymethod The getBeanFactorymethod (which is deprecated since Spring Framework 5.3.15) has been obsolete for more than 13 years since it was superseded by the getRegistrymethod in the BeanDefinitionReader interface"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java\n@@ -107,7 +107,10 @@ protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {\n \t * Return the bean factory to register the bean definitions with.\n \t * <p>The factory is exposed through the BeanDefinitionRegistry interface,\n \t * encapsulating the methods that are relevant for bean definition handling.\n+\t * @deprecated as of Spring Framework 5.3.15 in favor of {@link #getRegistry()},\n+\t * to be removed in Spring Framework 6.0\n \t */\n+\t@Deprecated\n \tpublic final BeanDefinitionRegistry getBeanFactory() {\n \t\treturn this.registry;\n \t}",
    "output": "Deprecate getBeanFactorymethod in AbstractBeanDefinitionReader The getBeanFactorymethod has been obsolete for more than 13 years since it was superseded by the getRegistrymethod in the BeanDefinitionReader interface"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n@@ -364,7 +364,7 @@ public Class<?> getDependencyType() {\n \t\tif (this.field != null) {\n \t\t\tif (this.nestingLevel > 1) {\n \t\t\t\tClass<?> clazz = getResolvableType().getRawClass();\n-\t\t\t\treturn clazz != null ? clazz : Object.class;\n+\t\t\t\treturn (clazz != null ? clazz : Object.class);\n \t\t\t}\n \t\t\telse {\n \t\t\t\treturn this.field.getType();",
    "output": "Reuse ResolvableType in getDependencyType"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n@@ -129,9 +129,7 @@ public static List<?> arrayToList(@Nullable Object source) {\n \t@SuppressWarnings(\"unchecked\")\n \tpublic static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {\n \t\tObject[] arr = ObjectUtils.toObjectArray(array);\n-\t\tfor (Object elem : arr) {\n-\t\t\tcollection.add((E) elem);\n-\t\t}\n+\t\tCollections.addAll(collection, (E[])arr);\n \t}\n \n \t/**",
    "output": "Use Collections.addAll instead of Collection.addAll"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java\n@@ -72,7 +72,7 @@ public class MappingJackson2MessageConverter extends AbstractMessageConverter {\n \t * the {@code application/json} MIME type with {@code UTF-8} character set.\n \t */\n \tpublic MappingJackson2MessageConverter() {\n-\t\tsuper(new MimeType(\"application\", \"json\"));\n+\t\tsuper(new MimeType(\"application\", \"json\"), new MimeType(\"application\", \"*+json\"));\n \t\tthis.objectMapper = initObjectMapper();\n \t}\n ",
    "output": "Add \"application/*+json\" to MappingJackson2MessageConverter"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n@@ -76,16 +76,18 @@ void executorWithPrestartAllCoreThreads() {\n \t\tverify(threadPoolExecutor).prestartAllCoreThreads();\n \t}\n \n+\n \t@Configuration\n \tstatic class ExecutorConfig {\n \n \t\t@Bean\n \t\tThreadPoolExecutorFactoryBean executor() {\n \t\t\treturn new ThreadPoolExecutorFactoryBean();\n \t\t}\n-\n \t}\n \n+\n+\t@SuppressWarnings(\"serial\")\n \tprivate static class TestThreadPoolExecutorFactoryBean extends ThreadPoolExecutorFactoryBean {\n \n \t\t@Override",
    "output": "Avoid compilation warning for test class with serializable base class"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAopProxyFactory.java b/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAopProxyFactory.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAopProxyFactory.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/DefaultAopProxyFactory.java\n@@ -45,9 +45,10 @@\n  * @see AdvisedSupport#setProxyTargetClass\n  * @see AdvisedSupport#setInterfaces\n  */\n-@SuppressWarnings(\"serial\")\n public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {\n \n+\tprivate static final long serialVersionUID = 7930414337282325166L;\n+\n \n \t@Override\n \tpublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {",
    "output": "Declare serialVersionUID on DefaultAopProxyFactory"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java b/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java\n@@ -22,6 +22,7 @@\n import org.apache.commons.logging.Log;\n \n import org.springframework.lang.Nullable;\n+import org.springframework.util.ObjectUtils;\n \n /**\n  * Utility methods for formatting and logging messages.\n@@ -71,10 +72,10 @@ public static String formatValue(\n \t\t}\n \t\tString result;\n \t\ttry {\n-\t\t\tresult = value.toString();\n+\t\t\tresult = ObjectUtils.nullSafeToString(value);\n \t\t}\n \t\tcatch (Throwable ex) {\n-\t\t\tresult = ex.toString();\n+\t\t\tresult = ObjectUtils.nullSafeToString(ex);\n \t\t}\n \t\tif (maxLength != -1) {\n \t\t\tresult = (result.length() > maxLength ? result.substring(0, maxLength) + \" (truncated)...\" : result);",
    "output": "Avoid NPE against null value from toString call"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -286,10 +286,14 @@ else if (ListenableFuture.class.isAssignableFrom(returnType)) {\n \t\telse if (Future.class.isAssignableFrom(returnType)) {\n \t\t\treturn executor.submit(task);\n \t\t}\n-\t\telse {\n+\t\telse if (void.class == returnType) {\n \t\t\texecutor.submit(task);\n \t\t\treturn null;\n \t\t}\n+\t\telse {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Invalid return type for async method (only Future and void supported): \" + returnType);\n+\t\t}\n \t}\n \n \t/**",
    "output": "Enforce Future/void return declaration for async methods"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -476,11 +476,7 @@ protected ServletInvocableHandlerMethod getExceptionHandlerMethod(\n \t\t\t// Local exception handler methods on the controller class itself.\n \t\t\t// To be invoked through the proxy, even in case of an interface-based proxy.\n \t\t\thandlerType = handlerMethod.getBeanType();\n-\t\t\tExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(handlerType);\n-\t\t\tif (resolver == null) {\n-\t\t\t\tresolver = new ExceptionHandlerMethodResolver(handlerType);\n-\t\t\t\tthis.exceptionHandlerCache.put(handlerType, resolver);\n-\t\t\t}\n+\t\t\tExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.computeIfAbsent(handlerType, ExceptionHandlerMethodResolver::new);\n \t\t\tMethod method = resolver.resolveMethod(exception);\n \t\t\tif (method != null) {\n \t\t\t\treturn new ServletInvocableHandlerMethod(handlerMethod.getBean(), method, this.applicationContext);",
    "output": "Polish ExceptionHandlerMethodResolver mapping"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n@@ -182,7 +182,6 @@ private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationCl\n \t * Read the given {@link BeanMethod}, registering bean definitions\n \t * with the BeanDefinitionRegistry based on its contents.\n \t */\n-\t@SuppressWarnings(\"deprecation\")  // for RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE\n \tprivate void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) {\n \t\tConfigurationClass configClass = beanMethod.getConfigurationClass();\n \t\tMethodMetadata metadata = beanMethod.getMetadata();",
    "output": "Remove unnecessary @SuppressWarnings"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -194,7 +194,7 @@ public ClassReader(\n     this.b = classFileBuffer;\n     // Check the class' major_version. This field is after the magic and minor_version fields, which\n     // use 4 and 2 bytes respectively.\n-    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V18) {\n+    if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V19) {\n       throw new IllegalArgumentException(\n           \"Unsupported class file major version \" + readShort(classFileOffset + 6));\n     }\n\ndiff --git a/spring-core/src/main/java/org/springframework/asm/Opcodes.java b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n--- a/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Opcodes.java\n@@ -283,6 +283,7 @@ public interface Opcodes {\n   int V16 = 0 << 16 | 60;\n   int V17 = 0 << 16 | 61;\n   int V18 = 0 << 16 | 62;\n+  int V19 = 0 << 16 | 63;\n \n   /**\n    * Version flag indicating that the class is using 'preview' features.",
    "output": "Upgrade to ASM master (including early support for Java 19 bytecode)"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n@@ -1248,7 +1248,7 @@ public Mono<Void> handle(ServerWebExchange exchange) {\n \t\t\t\tServerRequest request = new DefaultServerRequest(exchange, this.strategies.messageReaders());\n \t\t\t\taddAttributes(exchange, request);\n \t\t\t\treturn this.routerFunction.route(request)\n-\t\t\t\t\t\t.switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND)))\n+\t\t\t\t\t\t.switchIfEmpty(createNotFoundError())\n \t\t\t\t\t\t.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))\n \t\t\t\t\t\t.flatMap(response -> wrapException(() -> response.writeTo(exchange,\n \t\t\t\t\t\t\t\tnew HandlerStrategiesResponseContext(this.strategies))));\n@@ -1260,6 +1260,11 @@ private void addAttributes(ServerWebExchange exchange, ServerRequest request) {\n \t\t\tattributes.put(REQUEST_ATTRIBUTE, request);\n \t\t}\n \n+\t\tprivate <R> Mono<R> createNotFoundError() {\n+\t\t\treturn Mono.defer(() -> Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND,\n+\t\t\t\t\t\"No matching router function\")));\n+\t\t}\n+\n \t\tprivate static <T> Mono<T> wrapException(Supplier<Mono<T>> supplier) {\n \t\t\ttry {\n \t\t\t\treturn supplier.get();",
    "output": "Throw 404 ResponseStatusException when no routes found"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpMethod.java b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n@@ -146,7 +146,7 @@ public static HttpMethod valueOf(String method) {\n \t@Nullable\n \t@Deprecated\n \tpublic static HttpMethod resolve(@Nullable String method) {\n-\t\treturn (method != null ? mappings.get(method) : null);\n+\t\treturn (method != null ? valueOf(method) : null);\n \t}\n \n ",
    "output": "Use HttpMethod::valueOf in HttpMethod::resolve This commit makes sure that HttpMethod::resolve uses HttpMethod::valueOf and returns an HttpMethod for non-standard methods"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java\n@@ -97,6 +97,19 @@ public void writeAttribute(String attributeName, String attributeValue) throws J\n \t\tthis.writer.append(\" \").append(attributeName).append(\"=\\\"\")\n \t\t\t\t.append(attributeValue).append(\"\\\"\");\n \t}\n+\t\n+\t/**\n+\t * Write an empty HTML attribute with the specified name.\n+\t * <p>Be sure to write all attributes <strong>before</strong> writing\n+\t * any inner text or nested tags.\n+\t * @throws IllegalStateException if the opening tag is closed\n+\t */\n+\tpublic void writeAttribute(String attributeName) throws JspException {\n+\t\tif (currentState().isBlockTag()) {\n+\t\t\tthrow new IllegalStateException(\"Cannot write attributes after opening tag is closed.\");\n+\t\t}\n+\t\tthis.writer.append(\" \").append(attributeName);\n+\t}\n \n \t/**\n \t * Write an HTML attribute if the supplied value is not {@code null}",
    "output": "TagWriter can write empty attribute"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n@@ -694,7 +694,13 @@ protected void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) t\n \t@Override\n \tprotected void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException {\n \t\ttry {\n-\t\t\tdoMarshal(graph, new StaxWriter(new QNameMap(), streamWriter, this.nameCoder), null);\n+\t\t\tfinal StaxWriter writer;\n+\t\t\tif( streamDriver instanceof StaxDriver){\n+\t\t\t\twriter = ((StaxDriver)streamDriver).createStaxWriter(streamWriter);\n+\t\t\t}else{\n+\t\t\t\twriter =  new StaxWriter( new QNameMap(),streamWriter, this.nameCoder);\n+\t\t\t}\n+\t\t\tdoMarshal(graph,writer, null);\n \t\t}\n \t\tcatch (XMLStreamException ex) {\n \t\t\tthrow convertXStreamException(ex, true);",
    "output": "Repect StaxDriver in XStreamMarshaller::marshalXmlStreamWriter This commit makes sure that namespaces configured via the streamDriver property are respected"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n@@ -696,7 +696,13 @@ protected void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) t\n \t@Override\n \tprotected void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException {\n \t\ttry {\n-\t\t\tdoMarshal(graph, new StaxWriter(new QNameMap(), streamWriter, this.nameCoder), null);\n+\t\t\tfinal StaxWriter writer;\n+\t\t\tif( streamDriver instanceof StaxDriver){\n+\t\t\t\twriter = ((StaxDriver)streamDriver).createStaxWriter(streamWriter);\n+\t\t\t}else{\n+\t\t\t\twriter =  new StaxWriter( new QNameMap(),streamWriter, this.nameCoder);\n+\t\t\t}\n+\t\t\tdoMarshal(graph,writer, null);\n \t\t}\n \t\tcatch (XMLStreamException ex) {\n \t\t\tthrow convertXStreamException(ex, true);",
    "output": "Repect StaxDriver in XStreamMarshaller::marshalXmlStreamWriter This commit makes sure that namespaces configured via the streamDriver property are respected"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.client.reactive.ClientHttpConnector;\n import org.springframework.http.client.reactive.HttpComponentsClientHttpConnector;\n+import org.springframework.http.client.reactive.JdkClientHttpConnector;\n import org.springframework.http.client.reactive.JettyClientHttpConnector;\n import org.springframework.http.client.reactive.ReactorClientHttpConnector;\n import org.springframework.http.codec.ClientCodecConfigurer;\n@@ -294,7 +295,9 @@ else if (jettyClientPresent) {\n \t\telse if (httpComponentsClientPresent) {\n \t\t\treturn new HttpComponentsClientHttpConnector();\n \t\t}\n-\t\tthrow new IllegalStateException(\"No suitable default ClientHttpConnector found\");\n+\t\telse {\n+\t\t\treturn new JdkClientHttpConnector();\n+\t\t}\n \t}\n \n \tprivate ExchangeStrategies initExchangeStrategies() {",
    "output": "Default to JDK HttpClient if no others present"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -142,19 +142,20 @@ public static <T> T instantiateClass(Class<T> clazz) throws BeanInstantiationExc\n \t\tif (clazz.isInterface()) {\n \t\t\tthrow new BeanInstantiationException(clazz, \"Specified class is an interface\");\n \t\t}\n+\t\tConstructor<T> ctor;\n \t\ttry {\n-\t\t\treturn instantiateClass(clazz.getDeclaredConstructor());\n+\t\t\tctor = clazz.getDeclaredConstructor();\n \t\t}\n \t\tcatch (NoSuchMethodException ex) {\n-\t\t\tConstructor<T> ctor = findPrimaryConstructor(clazz);\n-\t\t\tif (ctor != null) {\n-\t\t\t\treturn instantiateClass(ctor);\n+\t\t\tctor = findPrimaryConstructor(clazz);\n+\t\t\tif (ctor == null) {\n+\t\t\t\tthrow new BeanInstantiationException(clazz, \"No default constructor found\", ex);\n \t\t\t}\n-\t\t\tthrow new BeanInstantiationException(clazz, \"No default constructor found\", ex);\n \t\t}\n \t\tcatch (LinkageError err) {\n \t\t\tthrow new BeanInstantiationException(clazz, \"Unresolvable class definition\", err);\n \t\t}\n+\t\treturn instantiateClass(ctor);\n \t}\n \n \t/**",
    "output": "Allow BeanUtils#instantiateClass inlining with native"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java\n--- a/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java\n+++ b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndexLoader.java\n@@ -107,7 +107,7 @@ private static CandidateComponentsIndex doLoadIndex(ClassLoader classLoader) {\n \t\t\t\tresult.add(properties);\n \t\t\t}\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Loaded \" + result.size() + \"] index(es)\");\n+\t\t\t\tlogger.debug(\"Loaded \" + result.size() + \" index(es)\");\n \t\t\t}\n \t\t\tint totalCount = result.stream().mapToInt(Properties::size).sum();\n \t\t\treturn (totalCount > 0 ? new CandidateComponentsIndex(result) : null);",
    "output": "Fix log message formatting in CandidateComponentsIndexLoader"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java b/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java\n--- a/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java\n+++ b/spring-context/src/main/java/org/springframework/context/expression/CachedExpressionEvaluator.java\n@@ -86,7 +86,7 @@ protected Expression getExpression(Map<ExpressionKey, Expression> cache,\n \t\tExpressionKey expressionKey = createKey(elementKey, expression);\n \t\tExpression expr = cache.get(expressionKey);\n \t\tif (expr == null) {\n-\t\t\texpr = getParser().parseExpression(expression);\n+\t\t\texpr = parseExpression(expression);\n \t\t\tcache.put(expressionKey, expr);\n \t\t}\n \t\treturn expr;\n@@ -96,6 +96,13 @@ private ExpressionKey createKey(AnnotatedElementKey elementKey, String expressio\n \t\treturn new ExpressionKey(elementKey, expression);\n \t}\n \n+\t/**\n+\t * Parse the expression\n+\t * @param expression the expression to parse\n+\t */\n+\tprotected Expression parseExpression(String expression) {\n+\t\treturn getParser().parseExpression(expression);\n+\t}\n \n \t/**\n \t * An expression key.",
    "output": "Add support for custom expression parsing"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java\n@@ -230,10 +230,10 @@ private static EntityManager createProxy(\n \n \t\tif (emIfc != null) {\n \t\t\tinterfaces = cachedEntityManagerInterfaces.computeIfAbsent(emIfc, key -> {\n-\t\t\t\tSet<Class<?>> ifcs = new LinkedHashSet<>(4);\n-\t\t\t\tifcs.add(key);\n-\t\t\t\tifcs.add(EntityManagerProxy.class);\n-\t\t\t\treturn ClassUtils.toClassArray(ifcs);\n+\t\t\t\tif (EntityManagerProxy.class.equals(key)) {\n+\t\t\t\t\treturn new Class<?>[] {key};\n+\t\t\t\t}\n+\t\t\t\treturn new Class<?>[] {key, EntityManagerProxy.class};\n \t\t\t});\n \t\t}\n \t\telse {",
    "output": "Improve mapping function in ExtendedEntityManagerCreator.createProxy"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java\n--- a/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/expression/MapAccessorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -67,6 +67,17 @@ public void mapAccessorCompilable() {\n \t\tassertThat(ex.getValue(sec,mapGetter)).isEqualTo(\"bar\");\n \t\tassertThat(SpelCompiler.compile(ex)).isTrue();\n \t\tassertThat(ex.getValue(sec,mapGetter)).isEqualTo(\"bar\");\n+\n+\t\t// basic isWritable\n+\t\tex = sep.parseExpression(\"foo\");\n+\t\tassertThat(ex.isWritable(sec,testMap)).isTrue();\n+\n+\t\t// basic write\n+\t\tex = sep.parseExpression(\"foo2\");\n+\t\tex.setValue(sec, testMap, \"bar2\");\n+\t\tassertThat(ex.getValue(sec,testMap)).isEqualTo(\"bar2\");\n+\t\tassertThat(SpelCompiler.compile(ex)).isTrue();\n+\t\tassertThat(ex.getValue(sec,testMap)).isEqualTo(\"bar2\");\n \t}\n \n \tpublic static class MapGetter {",
    "output": "Add test cases to SpEL's MapAccessorTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHeadersAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHeadersAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHeadersAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHeadersAdapter.java\n@@ -17,6 +17,7 @@\n package org.springframework.http.server.reactive;\n \n import java.util.AbstractSet;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n@@ -36,6 +37,7 @@\n  * {@code MultiValueMap} implementation for wrapping Undertow HTTP headers.\n  *\n  * @author Brian Clozel\n+ * @author Sam Brannen\n  * @since 5.1.1\n  */\n class UndertowHeadersAdapter implements MultiValueMap<String, String> {\n@@ -131,7 +133,10 @@ public List<String> put(String key, List<String> value) {\n \t@Nullable\n \tpublic List<String> remove(Object key) {\n \t\tif (key instanceof String) {\n-\t\t\tthis.headers.remove((String) key);\n+\t\t\tCollection<String> removed = this.headers.remove((String) key);\n+\t\t\tif (removed != null) {\n+\t\t\t\treturn new ArrayList<>(removed);\n+\t\t\t}\n \t\t}\n \t\treturn null;\n \t}",
    "output": "Return previous value in UndertowHeadersAdapter's removemethod Prior to this commit, UndertowHeadersAdapter's removemethod violated the java.util.Map contract by always returning null. This commit fixes this by returning the previous list stored under the specified key, and otherwise returning null if no previous value was present"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -422,10 +422,13 @@ private PropertyEditor getCustomEditor(@Nullable Class<?> requiredType) {\n \t\t\t}\n \t\t\tif (editor == null) {\n \t\t\t\t// Find editor for superclass or interface.\n-\t\t\t\tfor (Iterator<Class<?>> it = this.customEditors.keySet().iterator(); it.hasNext() && editor == null;) {\n-\t\t\t\t\tClass<?> key = it.next();\n+\t\t\t\tfor (Map.Entry<Class<?>, PropertyEditor> entry : this.customEditors.entrySet()) {\n+\t\t\t\t\tif (editor != null) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tClass<?> key = entry.getKey();\n \t\t\t\t\tif (key.isAssignableFrom(requiredType)) {\n-\t\t\t\t\t\teditor = this.customEditors.get(key);\n+\t\t\t\t\t\teditor = entry.getValue();\n \t\t\t\t\t\t// Cache editor for search type, to avoid the overhead\n \t\t\t\t\t\t// of repeated assignable-from checks.\n \t\t\t\t\t\tif (this.customEditorCache == null) {",
    "output": "Iterate over Map's entrySetinstead of keySetin PropertyEditorRegistrySupport"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -462,9 +462,9 @@ public String toString() {\n \n \tprivate void checkIndex(int index, int length) {\n \t\tassertIndex(index >= 0, \"index %d must be >= 0\", index);\n-\t\tassertIndex(length >= 0, \"length %d must be >= 0\", index);\n+\t\tassertIndex(length >= 0, \"length %d must be >= 0\", length);\n \t\tassertIndex(index <= this.capacity, \"index %d must be <= %d\", index, this.capacity);\n-\t\tassertIndex(length <= this.capacity, \"length %d must be <= %d\", index, this.capacity);\n+\t\tassertIndex(length <= this.capacity, \"length %d must be <= %d\", length, this.capacity);\n \t}\n \n \tprivate void assertIndex(boolean expression, String format, Object... args) {",
    "output": "Fix assertion message in DefaultDataBuffer"
  },
  {
    "input": "diff --git a/spring-context-indexer/src/main/java/org/springframework/context/index/processor/TypeHelper.java b/spring-context-indexer/src/main/java/org/springframework/context/index/processor/TypeHelper.java\n--- a/spring-context-indexer/src/main/java/org/springframework/context/index/processor/TypeHelper.java\n+++ b/spring-context-indexer/src/main/java/org/springframework/context/index/processor/TypeHelper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -60,8 +60,7 @@ public String getType(TypeMirror type) {\n \t\tif (type == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (type instanceof DeclaredType) {\n-\t\t\tDeclaredType declaredType = (DeclaredType) type;\n+\t\tif (type instanceof DeclaredType declaredType) {\n \t\t\tElement enclosingElement = declaredType.asElement().getEnclosingElement();\n \t\t\tif (enclosingElement instanceof TypeElement) {\n \t\t\t\treturn getQualifiedName(enclosingElement) + \"$\" + declaredType.asElement().getSimpleName().toString();",
    "output": "Apply \"instanceof pattern matching\" Eclipse clean-up in spring-context-indexer"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n@@ -188,7 +188,7 @@ public WebTestClient.ResponseSpec secure(String name, boolean expected) {\n \tpublic WebTestClient.ResponseSpec httpOnly(String name, boolean expected) {\n \t\tboolean isHttpOnly = getCookie(name).isHttpOnly();\n \t\tthis.exchangeResult.assertWithDiagnostics(() -> {\n-\t\t\tString message = getMessage(name) + \" secure\";\n+\t\t\tString message = getMessage(name) + \" httpOnly\";\n \t\t\tAssertionErrors.assertEquals(message, expected, isHttpOnly);\n \t\t});\n \t\treturn this.responseSpec;\n@@ -200,7 +200,7 @@ public WebTestClient.ResponseSpec httpOnly(String name, boolean expected) {\n \tpublic WebTestClient.ResponseSpec sameSite(String name, String expected) {\n \t\tString sameSite = getCookie(name).getSameSite();\n \t\tthis.exchangeResult.assertWithDiagnostics(() -> {\n-\t\t\tString message = getMessage(name) + \" secure\";\n+\t\t\tString message = getMessage(name) + \" sameSite\";\n \t\t\tAssertionErrors.assertEquals(message, expected, sameSite);\n \t\t});\n \t\treturn this.responseSpec;",
    "output": "Include correct keyword in CookieAssertions failure messages"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n@@ -188,7 +188,7 @@ public WebTestClient.ResponseSpec secure(String name, boolean expected) {\n \tpublic WebTestClient.ResponseSpec httpOnly(String name, boolean expected) {\n \t\tboolean isHttpOnly = getCookie(name).isHttpOnly();\n \t\tthis.exchangeResult.assertWithDiagnostics(() -> {\n-\t\t\tString message = getMessage(name) + \" secure\";\n+\t\t\tString message = getMessage(name) + \" httpOnly\";\n \t\t\tAssertionErrors.assertEquals(message, expected, isHttpOnly);\n \t\t});\n \t\treturn this.responseSpec;\n@@ -200,7 +200,7 @@ public WebTestClient.ResponseSpec httpOnly(String name, boolean expected) {\n \tpublic WebTestClient.ResponseSpec sameSite(String name, String expected) {\n \t\tString sameSite = getCookie(name).getSameSite();\n \t\tthis.exchangeResult.assertWithDiagnostics(() -> {\n-\t\t\tString message = getMessage(name) + \" secure\";\n+\t\t\tString message = getMessage(name) + \" sameSite\";\n \t\t\tAssertionErrors.assertEquals(message, expected, sameSite);\n \t\t});\n \t\treturn this.responseSpec;",
    "output": "Include correct keyword in CookieAssertions failure messages"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/ParserContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,24 +64,24 @@ public ParserContext(XmlReaderContext readerContext, BeanDefinitionParserDelegat\n \t}\n \n \n-\tpublic final XmlReaderContext getReaderContext() {\n+\tpublic XmlReaderContext getReaderContext() {\n \t\treturn this.readerContext;\n \t}\n \n-\tpublic final BeanDefinitionRegistry getRegistry() {\n+\tpublic BeanDefinitionRegistry getRegistry() {\n \t\treturn this.readerContext.getRegistry();\n \t}\n \n-\tpublic final BeanDefinitionParserDelegate getDelegate() {\n+\tpublic BeanDefinitionParserDelegate getDelegate() {\n \t\treturn this.delegate;\n \t}\n \n \t@Nullable\n-\tpublic final BeanDefinition getContainingBeanDefinition() {\n+\tpublic BeanDefinition getContainingBeanDefinition() {\n \t\treturn this.containingBeanDefinition;\n \t}\n \n-\tpublic final boolean isNested() {\n+\tpublic boolean isNested() {\n \t\treturn (this.containingBeanDefinition != null);\n \t}\n ",
    "output": "Remove unnecessary final declarations at method level"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -105,11 +105,11 @@ public Date nextExecutionTime(TriggerContext triggerContext) {\n \t\t\t}\n \t\t}\n \t\telse {\n-\t\t\tdate = new Date();\n+\t\t\tdate = new Date(triggerContext.getClock().millis());\n \t\t}\n \t\tZonedDateTime dateTime = ZonedDateTime.ofInstant(date.toInstant(), this.zoneId);\n \t\tZonedDateTime next = this.expression.next(dateTime);\n-\t\treturn next != null ? Date.from(next.toInstant()) : null;\n+\t\treturn (next != null ? Date.from(next.toInstant()) : null);\n \t}\n \n ",
    "output": "Use TriggerContext's Clock instead of new Date"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n@@ -126,7 +126,7 @@ public boolean equals(@Nullable Object other) {\n \t */\n \t@Override\n \tpublic int hashCode() {\n-\t\treturn (byte[].class.hashCode() * 29 * this.byteArray.length);\n+\t\treturn Arrays.hashCode(byteArray);\n \t}\n \n }",
    "output": "Use Arrays.hashCodein ByteArrayResource.hashCode"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java\n--- a/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,7 +70,7 @@ public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {\n \t\t// Mirrors AbstractHandlerExceptionResolver in spring-webmvc...\n \t\tString logPrefix = exchange.getLogPrefix();\n \t\tif (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {\n-\t\t\tthis.warnLogger.warn(logPrefix + formatError(ex, exchange.getRequest()), ex);\n+\t\t\tthis.warnLogger.warn(logPrefix + formatError(ex, exchange.getRequest()));\n \t\t}\n \t\telse if (logger.isDebugEnabled()) {\n \t\t\tlogger.debug(logPrefix + formatError(ex, exchange.getRequest()));",
    "output": "ResponseStatusExceptionHandler logs exception message only No need to log the full exception for a resolved exception, and as the comment suggests that it mirrors Spring MVC equivalent, which also logs the message only"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n@@ -63,6 +63,8 @@ private ReflectUtils() {\n \n \t// SPRING PATCH BEGIN\n \tstatic {\n+\t\t// Resolve protected ClassLoader.defineClass method for fallback use\n+\t\t// (even if JDK 9+ Lookup.defineClass is preferably used below)\n \t\tMethod classLoaderDefineClass;\n \t\tThrowable throwable = null;\n \t\ttry {\n@@ -453,7 +455,7 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\t\t\t// in case of plain LinkageError (class already defined)\n \t\t\t\t// or IllegalArgumentException (class in different package):\n \t\t\t\t// fall through to traditional ClassLoader.defineClass below\n-\t\t\t\tt = target;\n+\t\t\t\tt = ex;\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tthrow new CodeGenerationException(ex);",
    "output": "Note on ClassLoader.defineClass being used as a fallback only"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StopWatchTests.java b/spring-core/src/test/java/org/springframework/util/StopWatchTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StopWatchTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StopWatchTests.java\n@@ -97,6 +97,8 @@ void validUsage() throws Exception {\n \t\tassertThat(stopWatch.currentTaskName()).isEqualTo(name2);\n \t\tstopWatch.stop();\n \t\tassertThat(stopWatch.isRunning()).isFalse();\n+\n+\t\t/* Flaky StopWatch time assertions...\n \t\tassertThat(stopWatch.getLastTaskTimeNanos())\n \t\t\t.as(\"last task time in nanoseconds for task #2\")\n \t\t\t.isGreaterThanOrEqualTo(millisToNanos(duration2))\n@@ -109,6 +111,7 @@ void validUsage() throws Exception {\n \t\t\t.as(\"total time in seconds for task #2\")\n \t\t\t.isGreaterThanOrEqualTo((duration1 + duration2 - fudgeFactor) / 1000.0)\n \t\t\t.isLessThanOrEqualTo((duration1 + duration2 + fudgeFactor) / 1000.0);\n+\t\t*/\n \n \t\tassertThat(stopWatch.getTaskCount()).isEqualTo(2);\n \t\tassertThat(stopWatch.prettyPrint()).contains(name1, name2);",
    "output": "Skip flaky StopWatch time assertions"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -254,14 +254,13 @@ else if (ctors.length == 0){\n \t\t\t\treturn (Constructor<T>) ctors[0];\n \t\t\t}\n \t\t}\n-\t\telse {\n-\t\t\t// Several public constructors -> let's take the default constructor\n-\t\t\ttry {\n-\t\t\t\treturn clazz.getDeclaredConstructor();\n-\t\t\t}\n-\t\t\tcatch (NoSuchMethodException ex) {\n-\t\t\t\t// Giving up...\n-\t\t\t}\n+\n+\t\t// Several constructors -> let's try to take the default constructor\n+\t\ttry {\n+\t\t\treturn clazz.getDeclaredConstructor();\n+\t\t}\n+\t\tcatch (NoSuchMethodException ex) {\n+\t\t\t// Giving up...\n \t\t}\n \n \t\t// No unique constructor at all",
    "output": "Restore lenient fallback in case of several non-public constructors"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -246,7 +246,7 @@ public void testDefaultConfig() throws Exception {\n \n \t\tadapter.handle(request, response, handlerMethod);\n \t\tassertThat(handler.recordedValidationError).isTrue();\n-\t\tassertThat(handler.date).isInSameDayAs(\"2009-10-31\");\n+\t\tassertThat(handler.date).isInSameDayAs(\"2009-10-31T00:00:00+00:00\");\n \t\tassertThat(handler.percent).isEqualTo(Double.valueOf(0.9999));\n \n \t\tCompositeUriComponentsContributor uriComponentsContributor = this.appContext.getBean(",
    "output": "Fix timezone specific failing test Update `MvcNamespaceTests` so that the asserted time is in UTC"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -582,13 +582,13 @@ protected void doRescheduleTask(Object task) {\n \t/**\n \t * Log a task that has been rejected by {@link #doRescheduleTask}.\n \t * <p>The default implementation simply logs a corresponding message\n-\t * at debug level.\n+\t * at warn level.\n \t * @param task the rejected task object\n \t * @param ex the exception thrown from {@link #doRescheduleTask}\n \t */\n \tprotected void logRejectedTask(Object task, RuntimeException ex) {\n-\t\tif (logger.isDebugEnabled()) {\n-\t\t\tlogger.debug(\"Listener container task [\" + task + \"] has been rejected and paused: \" + ex);\n+\t\tif (logger.isWarnEnabled()) {\n+\t\t\tlogger.warn(\"Listener container task [\" + task + \"] has been rejected and paused: \" + ex);\n \t\t}\n \t}\n ",
    "output": "Log rejected listener container tasks at warn level"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n@@ -240,7 +240,7 @@ private RequestMatcher multipartData(MultiValueMap<String, ?> expectedMap, boole\n \t\t\t\t\t}\n \t\t\t\t\tif (expected instanceof byte[]) {\n \t\t\t\t\t\tassertTrue(\"Multipart is not a file\", actual instanceof byte[]);\n-\t\t\t\t\t\tassertEquals(\"Multipart content\", expected, (byte[]) actual);\n+\t\t\t\t\t\tassertEquals(\"Multipart content\", expected, actual);\n \t\t\t\t\t}\n \t\t\t\t\telse if (expected instanceof String) {\n \t\t\t\t\t\tassertTrue(\"Multipart is not a String\", actual instanceof String);",
    "output": "Remove unnecessary cast in ContentRequestMatchers"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n@@ -27,6 +27,7 @@\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.AbstractHttpHandlerIntegrationTests;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.HttpServer;\n+import org.springframework.web.testfixture.http.server.reactive.bootstrap.JettyHttpServer;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -80,7 +81,14 @@ void emptyPathSegments(HttpServer httpServer) throws Exception {\n \t\tURI url = new URI(\"http://localhost:\" + port + \"//\");\n \t\tResponseEntity<String> response = restTemplate.getForEntity(url, String.class);\n \n-\t\tassertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\t// Jetty 10+ rejects empty path segments, see https://github.com/eclipse/jetty.project/issues/6302,\n+\t\t// but an application can apply CompactPathRule via RewriteHandler:\n+\t\t// https://www.eclipse.org/jetty/documentation/jetty-11/programming_guide.php\n+\n+\t\tHttpStatus expectedStatus =\n+\t\t\t\t(httpServer instanceof JettyHttpServer ? HttpStatus.BAD_REQUEST : HttpStatus.OK);\n+\n+\t\tassertThat(response.getStatusCode()).isEqualTo(expectedStatus);\n \t}\n \n ",
    "output": "Fix Jetty 10+ test failure related to empty path handling"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -17,6 +17,7 @@\n package org.springframework.util;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Locale;\n import java.util.Properties;\n \n@@ -777,4 +778,9 @@ void splitWithEmptyStringOrNull() {\n \t\tassertThat(StringUtils.split(null, null)).isNull();\n \t}\n \n+\t@Test\n+\tvoid collectionToDelimitedStringWithNullValuesShouldNotFail() {\n+\t\tassertThat(StringUtils.collectionToCommaDelimitedString(Collections.singletonList(null))).isEqualTo(\"null\");\n+\t}\n+\n }",
    "output": "Fix collectionToDelimitedString failure for null elements."
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -1301,7 +1301,7 @@ public static String collectionToDelimitedString(\n \n \t\tint totalLength = coll.size() * (prefix.length() + suffix.length()) + (coll.size() - 1) * delim.length();\n \t\tfor (Object element : coll) {\n-\t\t\ttotalLength += element.toString().length();\n+\t\t\ttotalLength += String.valueOf(element).length();\n \t\t}\n \n \t\tStringBuilder sb = new StringBuilder(totalLength);",
    "output": "Fix collectionToDelimitedString failure for null elements. Prior to this commit, calling `StringUtils#collectionToDelimitedString` would fail with an NPE if the collection contains null elements. This commit ensures that null elements are converted as `\"null\"` in the resulting String without failure"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java b/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java\n@@ -45,10 +45,7 @@\n  * @author Phillip Webb\n  * @since 5.2\n  */\n-public final class CoroutinesUtils {\n-\n-\tprivate CoroutinesUtils() {\n-\t}\n+public abstract class CoroutinesUtils {\n \n \t/**\n \t * Convert a {@link Deferred} instance to a {@link Mono}.\n@@ -78,7 +75,7 @@ public static Publisher<?> invokeSuspendingFunction(Method method, Object target\n \t\t\t\t\tKCallables.callSuspend(function, getSuspendedFunctionArgs(target, args), continuation))\n \t\t\t\t.filter(result -> !Objects.equals(result, Unit.INSTANCE))\n \t\t\t\t.onErrorMap(InvocationTargetException.class, InvocationTargetException::getTargetException);\n-\t\tif (classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {\n+\t\tif (classifier != null && classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {\n \t\t\treturn mono.flatMapMany(CoroutinesUtils::asFlux);\n \t\t}\n \t\treturn mono;",
    "output": "Alignment with other abstract utils classes"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -88,6 +88,8 @@ public abstract class BeanUtils {\n \t\tvalues.put(short.class, (short) 0);\n \t\tvalues.put(int.class, 0);\n \t\tvalues.put(long.class, (long) 0);\n+\t\tvalues.put(float.class, (float) 0);\n+\t\tvalues.put(double.class, (double) 0);\n \t\tDEFAULT_TYPE_VALUES = Collections.unmodifiableMap(values);\n \t}\n ",
    "output": "Support float and double primitive default values in BeanUtils.instantiateClass"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -978,7 +978,10 @@ protected void doService(HttpServletRequest request, HttpServletResponse respons\n \tprivate void logRequest(HttpServletRequest request) {\n \t\tLogFormatUtils.traceDebug(logger, traceOn -> {\n \t\t\tString params;\n-\t\t\tif (isEnableLoggingRequestDetails()) {\n+\t\t\tif (StringUtils.startsWithIgnoreCase(request.getContentType(), \"multipart/\")) {\n+\t\t\t\tparams = \"multipart\";\n+\t\t\t}\n+\t\t\telse if (isEnableLoggingRequestDetails()) {\n \t\t\t\tparams = request.getParameterMap().entrySet().stream()\n \t\t\t\t\t\t.map(entry -> entry.getKey() + \":\" + Arrays.toString(entry.getValue()))\n \t\t\t\t\t\t.collect(Collectors.joining(\", \"));",
    "output": "Do not log request parameters for multipart requests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -138,7 +138,7 @@ public Method getWriteMethodForActualAccess() {\n \t\tSet<Method> ambiguousCandidates = this.ambiguousWriteMethods;\n \t\tif (ambiguousCandidates != null) {\n \t\t\tthis.ambiguousWriteMethods = null;\n-\t\t\tLogFactory.getLog(GenericTypeAwarePropertyDescriptor.class).warn(\"Invalid JavaBean property '\" +\n+\t\t\tLogFactory.getLog(GenericTypeAwarePropertyDescriptor.class).debug(\"Non-unique JavaBean property '\" +\n \t\t\t\t\tgetName() + \"' being accessed! Ambiguous write methods found next to actually used [\" +\n \t\t\t\t\tthis.writeMethod + \"]: \" + ambiguousCandidates);\n \t\t}",
    "output": "Reduce log statement for non-unique JavaBean property to debug level"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java b/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java\n@@ -521,8 +521,8 @@ AdvisedSupport getConfigurationOnlyCopy() {\n \t\tcopy.copyFrom(this);\n \t\tcopy.targetSource = EmptyTargetSource.forClass(getTargetClass(), getTargetSource().isStatic());\n \t\tcopy.advisorChainFactory = this.advisorChainFactory;\n-\t\tcopy.interfaces = this.interfaces;\n-\t\tcopy.advisors = this.advisors;\n+\t\tcopy.interfaces = new ArrayList<>(this.interfaces);\n+\t\tcopy.advisors = new ArrayList<>(this.advisors);\n \t\treturn copy;\n \t}\n ",
    "output": "Fix memory leak on AOP Proxy class definition cache"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n@@ -54,12 +54,6 @@ public void apply(Project project) {\n \t\t\t\tproject.getConfigurations().getByName(sourceSet.getRuntimeClasspathConfigurationName()).extendsFrom(optional);\n \t\t\t});\n \t\t});\n-\t\tproject.getPlugins().withType(EclipsePlugin.class, (eclipePlugin) -> {\n-\t\t\tproject.getExtensions().getByType(EclipseModel.class)\n-\t\t\t\t\t.classpath((classpath) -> {\n-\t\t\t\t\t\tclasspath.getPlusConfigurations().add(optional);\n-\t\t\t\t\t});\n-\t\t});\n \t}\n \n }\n\\ No newline at end of file",
    "output": "Remove Eclipse-specific code from OptionalDependenciesPlugin To support the recent changes to our `optional` dependencies plugin, this commit removes the Eclipse-specific code which no longer appears to be necessary"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n@@ -44,18 +44,14 @@ public class OptionalDependenciesPlugin implements Plugin<Project> {\n \t@Override\n \tpublic void apply(Project project) {\n \t\tConfiguration optional = project.getConfigurations().create(\"optional\");\n-\t\toptional.attributes((attributes) -> attributes.attribute(Usage.USAGE_ATTRIBUTE,\n-\t\t\t\tproject.getObjects().named(Usage.class, Usage.JAVA_API)));\n \t\toptional.setCanBeConsumed(false);\n-\t\toptional.setCanBeResolved(true);\n+\t\toptional.setCanBeResolved(false);\n \t\tproject.getPlugins().withType(JavaPlugin.class, (javaPlugin) -> {\n-\t\t\tSourceSetContainer sourceSets = project.getConvention()\n-\t\t\t\t\t.getPlugin(JavaPluginConvention.class).getSourceSets();\n+\t\t\tSourceSetContainer sourceSets = project.getConvention().getPlugin(JavaPluginConvention.class)\n+\t\t\t\t\t.getSourceSets();\n \t\t\tsourceSets.all((sourceSet) -> {\n-\t\t\t\tsourceSet.setCompileClasspath(\n-\t\t\t\t\t\tsourceSet.getCompileClasspath().plus(optional));\n-\t\t\t\tsourceSet.setRuntimeClasspath(\n-\t\t\t\t\t\tsourceSet.getRuntimeClasspath().plus(optional));\n+\t\t\t\tproject.getConfigurations().getByName(sourceSet.getCompileClasspathConfigurationName()).extendsFrom(optional);\n+\t\t\t\tproject.getConfigurations().getByName(sourceSet.getRuntimeClasspathConfigurationName()).extendsFrom(optional);\n \t\t\t});\n \t\t});\n \t\tproject.getPlugins().withType(EclipsePlugin.class, (eclipePlugin) -> {",
    "output": "Extend optional rather than adding it to existing classpath This allows the attributes configured on compileClasspath and runtimeClasspath to independently influence the variant selection when resolving the optional configuration, allowing it to contribute compile dependencies (JAVA_API) to the former and runtime dependencies (JAVA_RUNTIME) to the latter"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/optional/OptionalDependenciesPlugin.java\n@@ -19,6 +19,7 @@\n import org.gradle.api.Plugin;\n import org.gradle.api.Project;\n import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.attributes.Usage;\n import org.gradle.api.plugins.JavaPlugin;\n import org.gradle.api.plugins.JavaPluginConvention;\n import org.gradle.api.tasks.SourceSetContainer;\n@@ -43,6 +44,10 @@ public class OptionalDependenciesPlugin implements Plugin<Project> {\n \t@Override\n \tpublic void apply(Project project) {\n \t\tConfiguration optional = project.getConfigurations().create(\"optional\");\n+\t\toptional.attributes((attributes) -> attributes.attribute(Usage.USAGE_ATTRIBUTE,\n+\t\t\t\tproject.getObjects().named(Usage.class, Usage.JAVA_API)));\n+\t\toptional.setCanBeConsumed(false);\n+\t\toptional.setCanBeResolved(true);\n \t\tproject.getPlugins().withType(JavaPlugin.class, (javaPlugin) -> {\n \t\t\tSourceSetContainer sourceSets = project.getConvention()\n \t\t\t\t\t.getPlugin(JavaPluginConvention.class).getSourceSets();",
    "output": "Configure optional configuration to consume its dependencies' API Previously, the optional configuration had no usage attribute. This resulted in it using the default, JAVA_RUNTIME, which caused it to only consume the runtime produced by its dependencies and not the API. Given that the optional configuration is added to the compile classpath, this was incorrect. This commit updates the optional configuration to be configured to consume the Java API of its dependencies. The configuration has also been marked as not being for consumption. This prevents other projects attempting to consume the optional variant of a project that has the optional dependencies plugin applied and further aligns it with Gradle's built-in configurations of a similar nature"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/ConfigurableMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/ConfigurableMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/ConfigurableMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/ConfigurableMockMvcBuilder.java\n@@ -86,14 +86,14 @@ public interface ConfigurableMockMvcBuilder<B extends ConfigurableMockMvcBuilder\n \n \t/**\n \t * Define the default character encoding to be applied to every response.\n-\t * <p>The default implementation of this method ignores the supplied value.\n-\t * Concrete implementations are therefore encouraged to override this method.\n+\t * <p>The default implementation of this method throws an\n+\t * {@link UnsupportedOperationException}. Concrete implementations are therefore\n+\t * encouraged to override this method.\n \t * @param defaultResponseCharacterEncoding the default response character encoding\n \t * @since 5.3.10\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n \tdefault <T extends B> T defaultResponseCharacterEncoding(Charset defaultResponseCharacterEncoding) {\n-\t\treturn (T) this;\n+\t\tthrow new UnsupportedOperationException();\n \t}\n \n \t/**",
    "output": "Throw UnsupportedOperationException in defaultResponseCharacterEncodingThis commit updates the defaultResponseCharacterEncoding`default` method in ConfigurableMockMvcBuilder so that it throws an UnsupportedOperationException instead of silently ignoring the user's request to set the default response character encoding. Note, however, that AbstractMockMvcBuilder already overrides the default method with a concrete implementation which is used by default in MockMvc"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n@@ -56,7 +56,7 @@\n  */\n public class ExchangeResult {\n \n-\tprivate static Log logger = LogFactory.getLog(ExchangeResult.class);\n+\tprivate static final Log logger = LogFactory.getLog(ExchangeResult.class);\n \n \tprivate static final List<MediaType> PRINTABLE_MEDIA_TYPES = Arrays.asList(\n \t\t\tMediaType.APPLICATION_JSON, MediaType.APPLICATION_XML,\n@@ -77,7 +77,7 @@ public class ExchangeResult {\n \tprivate final String uriTemplate;\n \n \t@Nullable\n-\tfinal Object mockServerResult;\n+\tprivate final Object mockServerResult;\n \n \n \t/**\n@@ -218,9 +218,9 @@ public Object getMockServerResult() {\n \t}\n \n \t/**\n-\t * Execute the given Runnable, catch any {@link AssertionError}, decorate\n-\t * with {@code AssertionError} containing diagnostic information about the\n-\t * request and response, and then re-throw.\n+\t * Execute the given Runnable, catch any {@link AssertionError}, log details\n+\t * about the request and response at ERROR level under the class log\n+\t * category, and after that re-throw the error.\n \t */\n \tpublic void assertWithDiagnostics(Runnable assertion) {\n \t\ttry {",
    "output": "Polishing in ExchangeResult"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java b/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java\n--- a/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/ExceptionCollector.java\n@@ -118,7 +118,7 @@ public void assertEmpty() throws Exception {\n \t * except that an {@code Executable} can throw any kind of exception.\n \t */\n \t@FunctionalInterface\n-\tinterface Executable {\n+\tpublic interface Executable {\n \n \t\tvoid execute() throws Throwable;\n ",
    "output": "Make ExceptionCollector.Executable public"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java b/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n@@ -22,7 +22,7 @@\n import org.springframework.web.testfixture.servlet.MockHttpServletRequest;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n \n /**\n  * Unit tests for {@link UrlPathHelper}.\n@@ -170,16 +170,16 @@ void getLookupPathWithSemicolonContentAndNullPathInfo() {\n \tvoid defaultInstanceReadOnlyBehavior() {\n \t\tUrlPathHelper helper = UrlPathHelper.defaultInstance;\n \n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setAlwaysUseFullPath(true))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setUrlDecode(true))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setRemoveSemicolonContent(true))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n-\t\tassertThatExceptionOfType(IllegalArgumentException.class)\n+\t\tassertThatIllegalArgumentException()\n \t\t\t.isThrownBy(() -> helper.setDefaultEncoding(\"UTF-8\"))\n \t\t\t.withMessage(\"This instance cannot be modified\");\n ",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -246,6 +246,15 @@ public void setAllowCircularReferences(boolean allowCircularReferences) {\n \t\tthis.allowCircularReferences = allowCircularReferences;\n \t}\n \n+\t/**\n+\t * Return whether to allow circular references between beans.\n+\t * @since 5.3.10\n+\t * @see #setAllowCircularReferences\n+\t */\n+\tpublic boolean isAllowCircularReferences() {\n+\t\treturn this.allowCircularReferences;\n+\t}\n+\n \t/**\n \t * Set whether to allow the raw injection of a bean instance into some other\n \t * bean's property, despite the injected bean eventually getting wrapped\n@@ -264,6 +273,15 @@ public void setAllowRawInjectionDespiteWrapping(boolean allowRawInjectionDespite\n \t\tthis.allowRawInjectionDespiteWrapping = allowRawInjectionDespiteWrapping;\n \t}\n \n+\t/**\n+\t * Return whether to allow the raw injection of a bean instance.\n+\t * @since 5.3.10\n+\t * @see #setAllowRawInjectionDespiteWrapping\n+\t */\n+\tpublic boolean isAllowRawInjectionDespiteWrapping() {\n+\t\treturn this.allowRawInjectionDespiteWrapping;\n+\t}\n+\n \t/**\n \t * Ignore the given dependency type for autowiring:\n \t * for example, String. Default is none.",
    "output": "Introduce accessors for allowCircularReferences/allowRawInjectionDespiteWrapping"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n@@ -141,16 +141,18 @@ public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType eleme\n \t\t}\n \n \t\tif (isStreamingMediaType(contentType)) {\n-\t\t\treturn message.writeAndFlushWith(body.map(buffer -> {\n-\t\t\t\tHints.touchDataBuffer(buffer, hints, logger);\n-\t\t\t\treturn Mono.just(buffer).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n-\t\t\t}));\n+\t\t\treturn message\n+\t\t\t\t\t.writeAndFlushWith(body.map(buffer -> {\n+\t\t\t\t\t\tHints.touchDataBuffer(buffer, hints, logger);\n+\t\t\t\t\t\treturn Mono.just(buffer).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n+\t\t\t\t\t}))\n+\t\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n \t\t}\n \n \t\tif (logger.isDebugEnabled()) {\n \t\t\tbody = body.doOnNext(buffer -> Hints.touchDataBuffer(buffer, hints, logger));\n \t\t}\n-\t\treturn message.writeWith(body);\n+\t\treturn message.writeWith(body).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n \t}\n \n \t@Nullable",
    "output": "Add doOnDiscard hook for streaming mode Potential fix for issue reported at https://github.com/reactor/reactor-netty/issues/1746"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java\n@@ -125,12 +125,7 @@ public final TargetSource getTargetSource(Class<?> beanClass, String beanName) {\n \t */\n \tprotected DefaultListableBeanFactory getInternalBeanFactoryForBean(String beanName) {\n \t\tsynchronized (this.internalBeanFactories) {\n-\t\t\tDefaultListableBeanFactory internalBeanFactory = this.internalBeanFactories.get(beanName);\n-\t\t\tif (internalBeanFactory == null) {\n-\t\t\t\tinternalBeanFactory = buildInternalBeanFactory(this.beanFactory);\n-\t\t\t\tthis.internalBeanFactories.put(beanName, internalBeanFactory);\n-\t\t\t}\n-\t\t\treturn internalBeanFactory;\n+\t\t\treturn this.internalBeanFactories.computeIfAbsent(beanName, k -> buildInternalBeanFactory(this.beanFactory));\n \t\t}\n \t}\n ",
    "output": "Simplify getInternalBeanFactoryForBean This commit simplifies getInternalBeanFactoryForBeanin AbstractBeanFactoryBasedTargetSourceCreator via Map::computeIfAbsent"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n@@ -433,6 +433,7 @@ public void applyTo(BlockHound.Builder builder) {\n \n \t\t\t// Avoid hard references potentially anywhere in spring-web (no need for structural dependency)\n \n+\t\t\tbuilder.allowBlockingCallsInside(\"org.springframework.http.MediaTypeFactory\", \"<clinit>\");\n \t\t\tbuilder.allowBlockingCallsInside(\"org.springframework.web.util.HtmlUtils\", \"<clinit>\");\n \t\t}\n \t}",
    "output": "Blockhound rule for MediaTypeFactory static initializer"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java b/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java\n--- a/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java\n@@ -165,10 +165,10 @@ private static void parsePathParamValues(String input, Charset charset, MultiVal\n \t\t\tint index = input.indexOf('=');\n \t\t\tif (index != -1) {\n \t\t\t\tString name = input.substring(0, index);\n-\t\t\t\tString value = input.substring(index + 1);\n-\t\t\t\tfor (String v : StringUtils.commaDelimitedListToStringArray(value)) {\n-\t\t\t\t\tname = StringUtils.uriDecode(name, charset);\n-\t\t\t\t\tif (StringUtils.hasText(name)) {\n+\t\t\t\tname = StringUtils.uriDecode(name, charset);\n+\t\t\t\tif (StringUtils.hasText(name)) {\n+\t\t\t\t\tString value = input.substring(index + 1);\n+\t\t\t\t\tfor (String v : StringUtils.commaDelimitedListToStringArray(value)) {\n \t\t\t\t\t\toutput.add(name, StringUtils.uriDecode(v, charset));\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Minor refactoring in DefaultPathContainer"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java b/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java\n--- a/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -47,7 +47,7 @@ public class ResponseStatusException extends NestedRuntimeException {\n \t * @param status the HTTP status (required)\n \t */\n \tpublic ResponseStatusException(HttpStatus status) {\n-\t\tthis(status, null, null);\n+\t\tthis(status, null);\n \t}\n \n \t/**\n@@ -57,7 +57,10 @@ public ResponseStatusException(HttpStatus status) {\n \t * @param reason the associated reason (optional)\n \t */\n \tpublic ResponseStatusException(HttpStatus status, @Nullable String reason) {\n-\t\tthis(status, reason, null);\n+\t\tsuper(\"\");\n+\t\tAssert.notNull(status, \"HttpStatus is required\");\n+\t\tthis.status = status.value();\n+\t\tthis.reason = reason;\n \t}\n \n \t/**",
    "output": "Avoid unnecessary cause initialization in ResponseStatusException"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java\n@@ -306,7 +306,7 @@ private static class Jetty10SessionHelper implements SessionHelper {\n \n \t\tstatic {\n \t\t\ttry {\n-\t\t\t\tClass<?> type = loader.loadClass(\"org.eclipse.jetty.websocket.api.WebSocketPolicy\");\n+\t\t\t\tClass<?> type = loader.loadClass(\"org.eclipse.jetty.websocket.api.Session\");\n \t\t\t\tgetTextMessageSizeLimitMethod = type.getMethod(\"getMaxTextMessageSize\");\n \t\t\t\tgetBinaryMessageSizeLimitMethod = type.getMethod(\"getMaxBinaryMessageSize\");\n \t\t\t\tgetRemoteAddressMethod = type.getMethod(\"getRemoteAddress\");",
    "output": "Downcast to InetSocketAddress for Jetty 10 This commit uses the target type where getRemoteAddress and getLocalAddress are defined"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java\n@@ -489,9 +489,9 @@ else if (args[0] instanceof Map) {\n \t\t\t\t\t\tresolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length);\n \t\t\t\tthis.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class<?>) args[1], constructorArgs);\n \t\t\t\tMap<?, ?> namedArgs = (Map<?, ?>) args[0];\n-\t\t\t\tfor (Object key : namedArgs.keySet()) {\n-\t\t\t\t\tString propName = (String) key;\n-\t\t\t\t\tsetProperty(propName, namedArgs.get(propName));\n+\t\t\t\tfor (Map.Entry<?, ?> entity : namedArgs.entrySet()) {\n+\t\t\t\t\tString propName = (String) entity.getKey();\n+\t\t\t\t\tsetProperty(propName, entity.getValue());\n \t\t\t\t}\n \t\t\t}\n \t\t\t// factory method syntax",
    "output": "improve the performance of iteration"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n@@ -58,7 +58,7 @@ class JettyClientHttpRequest extends AbstractClientHttpRequest {\n \tpublic JettyClientHttpRequest(Request jettyRequest, DataBufferFactory bufferFactory) {\n \t\tthis.jettyRequest = jettyRequest;\n \t\tthis.bufferFactory = bufferFactory;\n-\t\tthis.builder = ReactiveRequest.newBuilder(this.jettyRequest);\n+\t\tthis.builder = ReactiveRequest.newBuilder(this.jettyRequest).abortOnCancel(true);\n \t}\n \n ",
    "output": "Reinstate abortOnCancel in JettyClientHttpRequest This commit reinstates abortOnCancel in the ReactiveRequest builder, which allows a cancel signal to abort the request. and"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java\n@@ -19,6 +19,7 @@\n import java.lang.reflect.Constructor;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Comparator;\n import java.util.List;\n \n import org.springframework.core.MethodParameter;\n@@ -59,11 +60,7 @@ public ConstructorExecutor resolve(EvaluationContext context, String typeName, L\n \t\t\tClass<?> type = context.getTypeLocator().findType(typeName);\n \t\t\tConstructor<?>[] ctors = type.getConstructors();\n \n-\t\t\tArrays.sort(ctors, (c1, c2) -> {\n-\t\t\t\tint c1pl = c1.getParameterCount();\n-\t\t\t\tint c2pl = c2.getParameterCount();\n-\t\t\t\treturn Integer.compare(c1pl, c2pl);\n-\t\t\t});\n+\t\t\tArrays.sort(ctors, Comparator.comparingInt(Constructor::getParameterCount));\n \n \t\t\tConstructor<?> closeMatch = null;\n \t\t\tConstructor<?> matchRequiringConversion = null;",
    "output": "Simplify Comparator using method references"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/support/SimpleJmsHeaderMapper.java b/spring-jms/src/main/java/org/springframework/jms/support/SimpleJmsHeaderMapper.java\n--- a/spring-jms/src/main/java/org/springframework/jms/support/SimpleJmsHeaderMapper.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/support/SimpleJmsHeaderMapper.java\n@@ -93,8 +93,7 @@ public void fromHeaders(MessageHeaders headers, javax.jms.Message jmsMessage) {\n \t\t\t\t\tlogger.debug(\"Failed to set JMSType - skipping\", ex);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tSet<Map.Entry<String, Object>> entries = headers.entrySet();\n-\t\t\tfor (Map.Entry<String, Object> entry : entries) {\n+\t\t\tfor (Map.Entry<String, Object> entry : headers.entrySet()) {\n \t\t\t\tString headerName = entry.getKey();\n \t\t\t\tif (StringUtils.hasText(headerName) && !headerName.startsWith(JmsHeaders.PREFIX)) {\n \t\t\t\t\tObject value = entry.getValue();",
    "output": "Delete unnecessary variable"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StopWatchTests.java b/spring-core/src/test/java/org/springframework/util/StopWatchTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StopWatchTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StopWatchTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,7 +41,7 @@ class StopWatchTests {\n \n \tprivate static final long duration1 = 200;\n \tprivate static final long duration2 = 100;\n-\tprivate static final long fudgeFactor = 50;\n+\tprivate static final long fudgeFactor = 100;\n \n \tprivate final StopWatch stopWatch = new StopWatch(ID);\n \n@@ -107,7 +107,7 @@ void validUsage() throws Exception {\n \t\t\t.isLessThanOrEqualTo(duration1 + duration2 + fudgeFactor);\n \t\tassertThat(stopWatch.getTotalTimeSeconds())\n \t\t\t.as(\"total time in seconds for task #2\")\n-\t\t\t.isGreaterThanOrEqualTo((duration1 + duration2  - fudgeFactor) / 1000.0)\n+\t\t\t.isGreaterThanOrEqualTo((duration1 + duration2 - fudgeFactor) / 1000.0)\n \t\t\t.isLessThanOrEqualTo((duration1 + duration2 + fudgeFactor) / 1000.0);\n \n \t\tassertThat(stopWatch.getTaskCount()).isEqualTo(2);",
    "output": "Increase fudge factor in StopWatchTests"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java\n@@ -1753,6 +1753,7 @@ void responseAsHttpHeadersNoHeader(boolean usePathPatterns) throws Exception {\n \t}\n \n \t@PathPatternsParameterizedTest\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid responseBodyAsHtml(boolean usePathPatterns) throws Exception {\n \t\tinitDispatcherServlet(TextRestController.class, usePathPatterns, wac -> {\n \t\t\tif (!usePathPatterns) {\n@@ -1792,6 +1793,7 @@ void responseBodyAsHtml(boolean usePathPatterns) throws Exception {\n \t}\n \n \t@PathPatternsParameterizedTest\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid responseBodyAsHtmlWithSuffixPresent(boolean usePathPatterns) throws Exception {\n \t\tinitDispatcherServlet(TextRestController.class, usePathPatterns, wac -> {\n \t\t\tContentNegotiationManagerFactoryBean factoryBean = new ContentNegotiationManagerFactoryBean();",
    "output": "Suppress warnings in ServletAnnotationControllerHandlerMethodTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationMethod.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationMethod.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationMethod.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationMethod.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -51,18 +51,9 @@ public Location getResourceLocation() {\n \t\treturn new Location(this.configurationClass.getResource(), this.metadata);\n \t}\n \n-\tString getFullyQualifiedMethodName() {\n-\t\treturn this.metadata.getDeclaringClassName() + \"#\" + this.metadata.getMethodName();\n+\tvoid validate(ProblemReporter problemReporter) {\n \t}\n \n-\tstatic String getShortMethodName(String fullyQualifiedMethodName) {\n-\t\treturn fullyQualifiedMethodName.substring(fullyQualifiedMethodName.indexOf('#') + 1);\n-\t}\n-\n-\tpublic void validate(ProblemReporter problemReporter) {\n-\t}\n-\n-\n \t@Override\n \tpublic String toString() {\n \t\treturn String.format(\"[%s:name=%s,declaringClass=%s]\",",
    "output": "Delete unused code in ConfigurationMethod"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java\n--- a/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java\n+++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java\n@@ -146,7 +146,7 @@ void refToSeparatePrototypeInstances() {\n \t\tassertThat(emmasJenks != georgiasJenks).as(\"Emma and georgia think they have a different boyfriend\").isTrue();\n \t\tassertThat(emmasJenks.getName().equals(\"Andrew\")).as(\"Emmas jenks has right name\").isTrue();\n \t\tassertThat(emmasJenks != xbf.getBean(\"jenks\")).as(\"Emmas doesn't equal new ref\").isTrue();\n-\t\tassertThat(emmasJenks.getName().equals(\"Andrew\")).as(\"Georgias jenks has right name\").isTrue();\n+\t\tassertThat(georgiasJenks.getName().equals(\"Andrew\")).as(\"Georgias jenks has right name\").isTrue();\n \t\tassertThat(emmasJenks.equals(georgiasJenks)).as(\"They are object equal\").isTrue();\n \t\tassertThat(emmasJenks.equals(xbf.getBean(\"jenks\"))).as(\"They object equal direct ref\").isTrue();\n \t}",
    "output": "Fix assertion in XmlBeanFactoryTests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -130,7 +130,7 @@ public class StandaloneMockMvcBuilder extends AbstractMockMvcBuilder<StandaloneM\n \t@Nullable\n \tprivate PathPatternParser patternParser;\n \n-\tprivate boolean useSuffixPatternMatch = true;\n+\tprivate boolean useSuffixPatternMatch = false;\n \n \tprivate boolean useTrailingSlashPatternMatch = true;\n \n@@ -324,7 +324,7 @@ public void setPatternParser(PathPatternParser parser) {\n \t/**\n \t * Whether to use suffix pattern match (\".*\") when matching patterns to\n \t * requests. If enabled a method mapped to \"/users\" also matches to \"/users.*\".\n-\t * <p>The default value is {@code true}.\n+\t * <p>The default value is {@code false}.\n \t * @deprecated as of 5.2.4. See class-level note in\n \t * {@link RequestMappingHandlerMapping} on the deprecation of path extension\n \t * config options.",
    "output": "Upgrade MockMvc default for suffixPattern matching"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.http.client.reactive;\n \n+import java.io.Closeable;\n+import java.io.IOException;\n import java.net.URI;\n import java.nio.ByteBuffer;\n import java.util.function.BiFunction;\n@@ -48,7 +50,7 @@\n  * @since 5.3\n  * @see <a href=\"https://hc.apache.org/index.html\">Apache HttpComponents</a>\n  */\n-public class HttpComponentsClientHttpConnector implements ClientHttpConnector {\n+public class HttpComponentsClientHttpConnector implements ClientHttpConnector, Closeable {\n \n \tprivate final CloseableHttpAsyncClient client;\n \n@@ -126,6 +128,10 @@ private Mono<ClientHttpResponse> execute(HttpComponentsClientHttpRequest request\n \t\t});\n \t}\n \n+\t@Override\n+\tpublic void close() throws IOException {\n+\t\tthis.client.close();\n+\t}\n \n \tprivate static class MonoFutureCallbackAdapter\n \t\t\timplements FutureCallback<Message<HttpResponse, Publisher<ByteBuffer>>> {",
    "output": "Close resources in HttpComponents client connector Prior to this commit, the `HttpComponentsClientHttpConnector` implementation could accept or create a default `HttpClient` instance but not expose it as part of its API. This effectively prevents applications from properly closing the associated resources when disposing of the connector. This commit implements the `Closeable` interface on the connector to allow this use case"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n@@ -57,16 +57,13 @@ public class CorsConfiguration {\n \t/** Wildcard representing <em>all</em> origins, methods, or headers. */\n \tpublic static final String ALL = \"*\";\n \n-\tprivate static final List<String> ALL_LIST = Collections.unmodifiableList(\n-\t\t\tCollections.singletonList(ALL));\n+\tprivate static final List<String> ALL_LIST = Collections.singletonList(ALL);\n \n \tprivate static final OriginPattern ALL_PATTERN = new OriginPattern(\"*\");\n \n-\tprivate static final List<OriginPattern> ALL_PATTERN_LIST = Collections.unmodifiableList(\n-\t\t\tCollections.singletonList(ALL_PATTERN));\n+\tprivate static final List<OriginPattern> ALL_PATTERN_LIST = Collections.singletonList(ALL_PATTERN);\n \n-\tprivate static final List<String> DEFAULT_PERMIT_ALL = Collections.unmodifiableList(\n-\t\t\tCollections.singletonList(ALL));\n+\tprivate static final List<String> DEFAULT_PERMIT_ALL = Collections.singletonList(ALL);\n \n \tprivate static final List<HttpMethod> DEFAULT_METHODS = Collections.unmodifiableList(\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD));",
    "output": "Remove redundant Collections.unmodifiableList"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SimpleAliasRegistryTests.java\n@@ -60,4 +60,28 @@ void aliasChainingWithMultipleAliases() {\n \t\tassertThat(registry.hasAlias(\"real_name\", \"alias_c\")).isTrue();\n \t}\n \n+\t@Test\n+\tvoid removeAliasTest() {\n+\t\tSimpleAliasRegistry registry = new SimpleAliasRegistry();\n+\t\tregistry.registerAlias(\"realname\", \"nickname\");\n+\t\tassertThat(registry.hasAlias(\"realname\", \"nickname\")).isTrue();\n+\n+\t\tregistry.removeAlias(\"nickname\");\n+\t\tassertThat(registry.hasAlias(\"realname\", \"nickname\")).isFalse();\n+\t}\n+\n+\t@Test\n+\tvoid isAliasTest() {\n+\t\tSimpleAliasRegistry registry = new SimpleAliasRegistry();\n+\t\tregistry.registerAlias(\"realname\", \"nickname\");\n+\t\tassertThat(registry.isAlias(\"nickname\")).isTrue();\n+\t\tassertThat(registry.isAlias(\"fake\")).isFalse();\n+\t}\n+\n+\t@Test\n+\tvoid getAliasesTest() {\n+\t\tSimpleAliasRegistry registry = new SimpleAliasRegistry();\n+\t\tregistry.registerAlias(\"realname\", \"nickname\");\n+\t\tassertThat(registry.getAliases(\"realname\"));\n+\t}\n }",
    "output": "Add more test cases for SimpleAliasRegistry"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -566,7 +566,7 @@ private static String changeFirstCharacterCase(String str, boolean capitalize) {\n \n \t\tchar[] chars = str.toCharArray();\n \t\tchars[0] = updatedChar;\n-\t\treturn new String(chars, 0, chars.length);\n+\t\treturn new String(chars);\n \t}\n \n \t/**",
    "output": "Simplify String construction in StringUtils.changeFirstCharacterCase"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -88,13 +88,13 @@ public abstract class ClassUtils {\n \t * Map with primitive wrapper type as key and corresponding primitive\n \t * type as value, for example: Integer.class -> int.class.\n \t */\n-\tprivate static final Map<Class<?>, Class<?>> primitiveWrapperTypeMap = new IdentityHashMap<>(8);\n+\tprivate static final Map<Class<?>, Class<?>> primitiveWrapperTypeMap = new IdentityHashMap<>(9);\n \n \t/**\n \t * Map with primitive type as key and corresponding wrapper\n \t * type as value, for example: int.class -> Integer.class.\n \t */\n-\tprivate static final Map<Class<?>, Class<?>> primitiveTypeToWrapperMap = new IdentityHashMap<>(8);\n+\tprivate static final Map<Class<?>, Class<?>> primitiveTypeToWrapperMap = new IdentityHashMap<>(9);\n \n \t/**\n \t * Map with primitive type name as key and corresponding primitive",
    "output": "Adjust expected IdentityHashMap sizes in ClassUtils Proposed change aimed to keep coherence between variable declaration and static initialization code, which stores 9 values, not 8, in these two maps"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java b/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java\n--- a/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java\n+++ b/spring-context/src/main/java/org/springframework/context/ApplicationEvent.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.context;\n \n+import java.time.Clock;\n import java.util.EventObject;\n \n /**\n@@ -46,6 +47,17 @@ public ApplicationEvent(Object source) {\n \t\tthis.timestamp = System.currentTimeMillis();\n \t}\n \n+\t/**\n+\t * Create a new {@code ApplicationEvent} with a fixed timestamp.\n+\t * @param source the object on which the event initially occurred or with\n+\t * which the event is associated (never {@code null})\n+\t * @param clock a clock which will provide the timestamp\n+\t */\n+\tpublic ApplicationEvent(Object source, Clock clock) {\n+\t\tsuper(source);\n+\t\tthis.timestamp = clock.millis();\n+\t}\n+\n \n \t/**\n \t * Return the system time in milliseconds when the event occurred.",
    "output": "Add ApplicationEvent constructor for specifying timestamp"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -398,6 +398,10 @@ public final void handleRequest(ServerHttpRequest request, ServerHttpResponse re\n \t\t\t\tif (requestInfo != null) {\n \t\t\t\t\tlogger.debug(\"Processing transport request: \" + requestInfo);\n \t\t\t\t}\n+\t\t\t\tif (\"websocket\".equalsIgnoreCase(request.getHeaders().getUpgrade())) {\n+\t\t\t\t\tresponse.setStatusCode(HttpStatus.BAD_REQUEST);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tresponse.getHeaders().setContentType(new MediaType(\"text\", \"plain\", StandardCharsets.UTF_8));\n \t\t\t\tresponse.getBody().write(\"Welcome to SockJS!\\n\".getBytes(StandardCharsets.UTF_8));\n \t\t\t}",
    "output": "Validate top-level SockJS URL"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/ConcurrentBeanWrapperTests.java b/spring-beans/src/test/java/org/springframework/beans/ConcurrentBeanWrapperTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/ConcurrentBeanWrapperTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/ConcurrentBeanWrapperTests.java\n@@ -26,8 +26,10 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.junit.jupiter.api.RepeatedTest;\n import org.junit.jupiter.api.Test;\n \n+\n import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n@@ -44,11 +46,9 @@ public class ConcurrentBeanWrapperTests {\n \n \tprivate Throwable ex = null;\n \n-\t@Test\n+\t@RepeatedTest(100)\n \tpublic void testSingleThread() {\n-\t\tfor (int i = 0; i < 100; i++) {\n-\t\t\tperformSet();\n-\t\t}\n+\t\tperformSet();\n \t}\n \n \t@Test",
    "output": "Refactor ConcurrentBeanWrapperTests to use @RepeatedTest"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -85,7 +85,7 @@ public class UriComponentsBuilder implements UriBuilder, Cloneable {\n \n \tprivate static final String HOST_PATTERN = \"(\" + HOST_IPV6_PATTERN + \"|\" + HOST_IPV4_PATTERN + \")\";\n \n-\tprivate static final String PORT_PATTERN = \"(.[^/?#]*(?:\\\\{[^/]+?})?)\";\n+\tprivate static final String PORT_PATTERN = \"([^/?#]*)\";\n \n \tprivate static final String PATH_PATTERN = \"([^?#]*)\";\n ",
    "output": "Polish PORT_PATTERN in UriComponentsBuilder"
  },
  {
    "input": "diff --git a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/init/ScriptUtils.java b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/init/ScriptUtils.java\n--- a/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/init/ScriptUtils.java\n+++ b/spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/init/ScriptUtils.java\n@@ -472,7 +472,7 @@ public static boolean containsSqlScriptDelimiters(String script, String delimite\n \t * (typically {@code \"/*\"})\n \t * @param blockCommentEndDelimiter the <em>end</em> block comment delimiter\n \t * (typically <code>\"*&#47;\"</code>)\n-\t * @since 5.2.16\n+\t * @since 5.3.8\n \t */\n \tprivate static boolean containsStatementSeparator(@Nullable EncodedResource resource, String script,\n \t\t\tString separator, String[] commentPrefixes, String blockCommentStartDelimiter,\n@@ -677,7 +677,9 @@ public static Mono<Void> executeSqlScript(Connection connection, EncodedResource\n \t\t\tif (separatorToUse == null) {\n \t\t\t\tseparatorToUse = DEFAULT_STATEMENT_SEPARATOR;\n \t\t\t}\n-\t\t\tif (!EOF_STATEMENT_SEPARATOR.equals(separatorToUse) && !containsSqlScriptDelimiters(statement, separatorToUse)) {\n+\t\t\tif (!EOF_STATEMENT_SEPARATOR.equals(separatorToUse) &&\n+\t\t\t\t\t!containsStatementSeparator(resource, statement, separatorToUse, commentPrefixes,\n+\t\t\t\t\t\tblockCommentStartDelimiter, blockCommentEndDelimiter)) {\n \t\t\t\tseparatorToUse = FALLBACK_STATEMENT_SEPARATOR;\n \t\t\t}\n \t\t\tsplitSqlScript(resource, statement, separatorToUse, commentPrefixes, blockCommentStartDelimiter,",
    "output": "Ignore comments when searching for statement delimiter in ScriptUtils This commit picks up where 569ce840cf left off, by correctly invoking the new containsStatementSeparator(...) method from executeSqlScript(...) in ScriptUtils in spring-r2dbc"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -878,7 +878,7 @@ private static Object asFlow(Publisher<?> publisher) {\n \t\t\treturn ReactiveFlowKt.asFlow(publisher);\n \t\t}\n \n-\t\t@SuppressWarnings(\"unchecked\")\n+\t\t@SuppressWarnings({\"unchecked\", \"deprecation\"})\n \t\t@Nullable\n \t\tprivate static Object awaitSingleOrNull(Publisher<?> publisher, Object continuation) {\n \t\t\treturn AwaitKt.awaitSingleOrNull(publisher, (Continuation<Object>) continuation);",
    "output": "Upgrade to Coroutines 1.5.0 This commit upgrades to Coroutines 1.5.0 while retaining Coroutines 1.4.x compatibility"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -179,6 +179,23 @@ public boolean isCacheConsumers() {\n \t}\n \n \n+\t/**\n+\t * Return a current session count, indicating the number of sessions currently\n+\t * cached by this connection factory.\n+\t * @since 5.3.7\n+\t */\n+\tpublic int getCachedSessionCount() {\n+\t\tint count = 0;\n+\t\tsynchronized (this.cachedSessions) {\n+\t\t\tfor (Deque<Session> sessionList : this.cachedSessions.values()) {\n+\t\t\t\tsynchronized (sessionList) {\n+\t\t\t\t\tcount += sessionList.size();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn count;\n+\t}\n+\n \t/**\n \t * Resets the Session cache as well.\n \t */",
    "output": "Expose current cached session count"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/support/SpringBeanAutowiringSupport.java b/spring-web/src/main/java/org/springframework/web/context/support/SpringBeanAutowiringSupport.java\n--- a/spring-web/src/main/java/org/springframework/web/context/support/SpringBeanAutowiringSupport.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/support/SpringBeanAutowiringSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -85,10 +85,11 @@ public static void processInjectionBasedOnCurrentContext(Object target) {\n \t\t\tbpp.processInjection(target);\n \t\t}\n \t\telse {\n-\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Current WebApplicationContext is not available for processing of \" +\n+\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"Current WebApplicationContext is not available for processing of \" +\n \t\t\t\t\t\tClassUtils.getShortName(target.getClass()) + \": \" +\n-\t\t\t\t\t\t\"Make sure this class gets constructed in a Spring web application. Proceeding without injection.\");\n+\t\t\t\t\t\t\"Make sure this class gets constructed in a Spring web application after the\" +\n+\t\t\t\t\t\t\"Spring WebApplicationContext has been initialized. Proceeding without injection.\");\n \t\t\t}\n \t\t}\n \t}",
    "output": "Log missing web application context at warn level (instead of debug)"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,7 @@\n import org.apache.commons.logging.LogFactory;\n \n import org.springframework.core.NamedThreadLocal;\n-import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.OrderComparator;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n \n@@ -320,7 +320,7 @@ public static List<TransactionSynchronization> getSynchronizations() throws Ille\n \t\telse {\n \t\t\t// Sort lazily here, not in registerSynchronization.\n \t\t\tList<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs);\n-\t\t\tAnnotationAwareOrderComparator.sort(sortedSynchs);\n+\t\t\tOrderComparator.sort(sortedSynchs);\n \t\t\treturn Collections.unmodifiableList(sortedSynchs);\n \t\t}\n \t}",
    "output": "TransactionSynchronization does not support @Order (just Ordered interface)"
  },
  {
    "input": "diff --git a/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java b/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java\n--- a/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java\n+++ b/spring-oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2UnmarshallerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,6 +31,7 @@\n import org.junit.jupiter.api.Test;\n \n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.core.io.Resource;\n import org.springframework.oxm.AbstractUnmarshallerTests;\n import org.springframework.oxm.jaxb.test.FlightType;\n@@ -56,7 +57,7 @@ public class Jaxb2UnmarshallerTests extends AbstractUnmarshallerTests<Jaxb2Marsh\n \tprotected Jaxb2Marshaller createUnmarshaller() throws Exception {\n \t\tJaxb2Marshaller unmarshaller = new Jaxb2Marshaller();\n \t\tunmarshaller.setContextPath(\"org.springframework.oxm.jaxb.test\");\n-\t\tunmarshaller.setSchema(new ClassPathResource(\"org/springframework/oxm/flight.xsd\"));\n+\t\tunmarshaller.setSchema(new FileSystemResource(\"src/test/schema/flight.xsd\"));\n \t\tunmarshaller.afterPropertiesSet();\n \t\treturn unmarshaller;\n \t}",
    "output": "Remove duplicate copy of flight.xsd eb589c2ed03dd22af1259e5b0161ea70f47488"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpMethod.java b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -57,14 +57,13 @@ public static HttpMethod resolve(@Nullable String method) {\n \n \n \t/**\n-\t * Determine whether this {@code HttpMethod} matches the given\n-\t * method value.\n-\t * @param method the method value as a String\n+\t * Determine whether this {@code HttpMethod} matches the given method value.\n+\t * @param method the HTTP method as a String\n \t * @return {@code true} if it matches, {@code false} otherwise\n \t * @since 4.2.4\n \t */\n \tpublic boolean matches(String method) {\n-\t\treturn (this == resolve(method));\n+\t\treturn name().equals(method);\n \t}\n \n }",
    "output": "HttpMethod#matches compares by String equality"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -49,6 +49,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.support.PropertiesLoaderUtils;\n import org.springframework.core.log.LogFormatUtils;\n+import org.springframework.http.HttpMethod;\n import org.springframework.http.server.RequestPath;\n import org.springframework.http.server.ServletServerHttpRequest;\n import org.springframework.lang.Nullable;\n@@ -1046,8 +1047,8 @@ protected void doDispatch(HttpServletRequest request, HttpServletResponse respon\n \n \t\t\t\t// Process last-modified header, if supported by the handler.\n \t\t\t\tString method = request.getMethod();\n-\t\t\t\tboolean isGet = \"GET\".equals(method);\n-\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n+\t\t\t\tboolean isGet = HttpMethod.GET.matches(method);\n+\t\t\t\tif (isGet || HttpMethod.HEAD.matches(method)) {\n \t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n \t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n \t\t\t\t\t\treturn;",
    "output": "Use HttpMethod enums"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java\n--- a/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -44,8 +44,6 @@ public class PropertyComparator<T> implements Comparator<T> {\n \n \tprivate final SortDefinition sortDefinition;\n \n-\tprivate final BeanWrapperImpl beanWrapper = new BeanWrapperImpl(false);\n-\n \n \t/**\n \t * Create a new PropertyComparator for the given SortDefinition.\n@@ -115,8 +113,9 @@ private Object getPropertyValue(Object obj) {\n \t\t// (similar to JSTL EL). If the property doesn't exist in the\n \t\t// first place, let the exception through.\n \t\ttry {\n-\t\t\tthis.beanWrapper.setWrappedInstance(obj);\n-\t\t\treturn this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty());\n+\t\t\tBeanWrapperImpl beanWrapper = new BeanWrapperImpl(false);\n+\t\t\tbeanWrapper.setWrappedInstance(obj);\n+\t\t\treturn beanWrapper.getPropertyValue(this.sortDefinition.getProperty());\n \t\t}\n \t\tcatch (BeansException ex) {\n \t\t\tlogger.debug(\"PropertyComparator could not access property - treating as null for sorting\", ex);",
    "output": "Avoid memory leak when PropertyComparator is reused This commit fixes a potential memory leak, since PropertyComparator previously kept an indirect reference to the value it last compared"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java b/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java\n@@ -292,7 +292,7 @@ private void handleComment(Comment comment) throws SAXException {\n \n \tprivate void handleDtd(DTD dtd) throws SAXException {\n \t\tif (getLexicalHandler() != null) {\n-\t\t\tjavax.xml.stream.Location location = dtd.getLocation();\n+\t\t\tLocation location = dtd.getLocation();\n \t\t\tgetLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\n \t\t}\n \t\tif (getLexicalHandler() != null) {",
    "output": "Use an import instead of FQCN in StaxEventXMLReader"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpStatus.java b/spring-web/src/main/java/org/springframework/http/HttpStatus.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpStatus.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -416,6 +416,13 @@ public enum HttpStatus {\n \tNETWORK_AUTHENTICATION_REQUIRED(511, Series.SERVER_ERROR, \"Network Authentication Required\");\n \n \n+\tprivate static final HttpStatus[] VALUES;\n+\n+\tstatic {\n+\t\tVALUES = values();\n+\t}\n+\n+\n \tprivate final int value;\n \n \tprivate final Series series;\n@@ -550,7 +557,8 @@ public static HttpStatus valueOf(int statusCode) {\n \t */\n \t@Nullable\n \tpublic static HttpStatus resolve(int statusCode) {\n-\t\tfor (HttpStatus status : values()) {\n+\t\t// used cached VALUES instead of values() to prevent array allocation\n+\t\tfor (HttpStatus status : VALUES) {\n \t\t\tif (status.value == statusCode) {\n \t\t\t\treturn status;\n \t\t\t}",
    "output": "Copy HttpStatus::values to prevent allocation Before this commit, HttpStatus::resolve used the valuesmethod in its logic. This causes a new array to be allocated for each invocation, and results in memory overhead. This commit makes a copy of the HttpStatus values array, and uses that to resolve status codes"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -68,7 +68,7 @@ public static boolean simpleMatch(@Nullable String pattern, @Nullable String str\n \t\t}\n \n \t\treturn (str.length() >= firstIndex &&\n-\t\t\t\tpattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&\n+\t\t\t\tpattern.startsWith(str.substring(0, firstIndex)) &&\n \t\t\t\tsimpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)));\n \t}\n ",
    "output": "Use String.startsWithinstead of substringin PatternMatchUtils"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n@@ -186,13 +186,6 @@ interface Builder {\n \t\t */\n \t\tBuilder baseUrl(String baseUrl);\n \n-\t\t/**\n-\t\t * Configure default URI variable values that will be used when expanding\n-\t\t * URI templates using a {@link Map}.\n-\t\t * @param defaultUriVariables the default values to use\n-\t\t * @see #baseUrl(String)\n-\t\t * @see #uriBuilderFactory(UriBuilderFactory)\n-\t\t */\n \t\t/**\n \t\t * Configure default URL variable values to use when expanding URI\n \t\t * templates with a {@link Map}. Effectively a shortcut for:",
    "output": "Remove leftover Javadoc from WebClient"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/propertyeditors/PathEditorTests.java b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/PathEditorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/propertyeditors/PathEditorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/PathEditorTests.java\n@@ -84,11 +84,18 @@ public void testWindowsAbsolutePath() {\n \t@Test\n \tpublic void testWindowsAbsoluteFilePath() {\n \t\tPropertyEditor pathEditor = new PathEditor();\n-\t\tpathEditor.setAsText(\"file://C:\\\\no_way_this_file_is_found.doc\");\n-\t\tObject value = pathEditor.getValue();\n-\t\tassertThat(value instanceof Path).isTrue();\n-\t\tPath path = (Path) value;\n-\t\tassertThat(!path.toFile().exists()).isTrue();\n+\t\ttry {\n+\t\t\tpathEditor.setAsText(\"file://C:\\\\no_way_this_file_is_found.doc\");\n+\t\t\tObject value = pathEditor.getValue();\n+\t\t\tassertThat(value instanceof Path).isTrue();\n+\t\t\tPath path = (Path) value;\n+\t\t\tassertThat(!path.toFile().exists()).isTrue();\n+\t\t}\n+\t\tcatch (IllegalArgumentException ex) {\n+\t\t\tif (File.separatorChar == '\\\\') {  // on Windows, otherwise silently ignore\n+\t\t\t\tthrow ex;\n+\t\t\t}\n+\t\t}\n \t}\n \n \t@Test",
    "output": "Ignore testWindowsAbsoluteFilePath exception if not on Windows"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java\n@@ -136,6 +136,7 @@ private int getNextSuffix() {\n \tprivate Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) {\n \t\t// Create class outline 'spel/ExNNN extends org.springframework.expression.spel.CompiledExpression'\n \t\tString className = \"spel/Ex\" + getNextSuffix();\n+\t\tString evaluationContextClass = \"org/springframework/expression/EvaluationContext\";\n \t\tClassWriter cw = new ExpressionClassWriter();\n \t\tcw.visit(V1_8, ACC_PUBLIC, className, null, \"org/springframework/expression/spel/CompiledExpression\", null);\n \n@@ -151,7 +152,7 @@ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl e\n \n \t\t// Create getValue() method\n \t\tmv = cw.visitMethod(ACC_PUBLIC, \"getValue\",\n-\t\t\t\t\"(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;\", null,\n+\t\t\t\t\"(Ljava/lang/Object;L\" + evaluationContextClass + \";)Ljava/lang/Object;\", null,\n \t\t\t\tnew String[] {\"org/springframework/expression/EvaluationException\"});\n \t\tmv.visitCode();\n ",
    "output": "Allow spring-expression to be more easily repackaged This commit allows the spring-expression module to be more easily repackaged for embedding in third-party JARs -- for example, via the Shadow Gradle plugin"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java\n@@ -163,7 +163,7 @@ private static boolean isResolvedTypeMatch(Method genericMethod, Method candidat\n \t\t\t\t}\n \t\t\t}\n \t\t\t// A non-array type: compare the type itself.\n-\t\t\tif (!candidateParameter.equals(genericParameter.toClass())) {\n+\t\t\tif (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(ClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}",
    "output": "Improve Kotlin support in BridgeMethodResolver#findBridgedMethod This commit adds support for Kotlin non-nullable type which resolves to primitive Java types in BridgeMethodResolver#findBridgedMethod"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n@@ -1266,13 +1266,13 @@ public void daylightSaving() {\n \t\tCronExpression cronExpression = CronExpression.parse(\"0 0 9 * * *\");\n \n \t\tZonedDateTime last = ZonedDateTime.parse(\"2021-03-27T09:00:00+01:00[Europe/Amsterdam]\");\n-\t\tZonedDateTime expected = ZonedDateTime.parse(\"2021-03-28T09:00:00+01:00[Europe/Amsterdam]\");\n+\t\tZonedDateTime expected = ZonedDateTime.parse(\"2021-03-28T09:00:00+02:00[Europe/Amsterdam]\");\n \t\tZonedDateTime actual = cronExpression.next(last);\n \t\tassertThat(actual).isNotNull();\n \t\tassertThat(actual).isEqualTo(expected);\n \n-\t\tlast = ZonedDateTime.parse(\"2021-10-30T09:00:00+01:00[Europe/Amsterdam]\");\n-\t\texpected = ZonedDateTime.parse(\"2021-10-31T09:00:00+02:00[Europe/Amsterdam]\");\n+\t\tlast = ZonedDateTime.parse(\"2021-10-30T09:00:00+02:00[Europe/Amsterdam]\");\n+\t\texpected = ZonedDateTime.parse(\"2021-10-31T09:00:00+01:00[Europe/Amsterdam]\");\n \t\tactual = cronExpression.next(last);\n \t\tassertThat(actual).isNotNull();\n \t\tassertThat(actual).isEqualTo(expected);",
    "output": "Fix timezone offset in CronExpressionTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java\n@@ -23,6 +23,9 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import reactor.blockhound.BlockHound;\n+import reactor.blockhound.integration.BlockHoundIntegration;\n+\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n@@ -418,4 +421,20 @@ public WebHttpHandlerBuilder clone() {\n \t\treturn new WebHttpHandlerBuilder(this);\n \t}\n \n+\n+\t/**\n+\t * {@code BlockHoundIntegration} for spring-web classes.\n+\t * @since 5.3.6\n+\t */\n+\tpublic static class SpringWebBlockHoundIntegration implements BlockHoundIntegration {\n+\n+\t\t@Override\n+\t\tpublic void applyTo(BlockHound.Builder builder) {\n+\n+\t\t\t// Avoid hard references potentially anywhere in spring-web (no need for structural dependency)\n+\n+\t\t\tbuilder.allowBlockingCallsInside(\"org.springframework.web.util.HtmlUtils\", \"<clinit>\");\n+\t\t}\n+\t}\n+\n }",
    "output": "Add BlockHoundIntegration for spring-web"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/CookieAssertions.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.test.web.reactive.server;\n \n import java.time.Duration;\n@@ -28,7 +29,9 @@\n \n /**\n  * Assertions on cookies of the response.\n+ *\n  * @author Rossen Stoyanchev\n+ * @since 5.3\n  */\n public class CookieAssertions {\n ",
    "output": "Add since tag"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n@@ -508,7 +508,10 @@ protected Advisor[] buildAdvisors(@Nullable String beanName, @Nullable Object[]\n \n \t\tList<Object> allInterceptors = new ArrayList<>();\n \t\tif (specificInterceptors != null) {\n-\t\t\tallInterceptors.addAll(Arrays.asList(specificInterceptors));\n+\t\t\tif (specificInterceptors.length > 0) {\n+\t\t\t\t// specificInterceptors may equals PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS\n+\t\t\t\tallInterceptors.addAll(Arrays.asList(specificInterceptors));\n+\t\t\t}\n \t\t\tif (commonInterceptors.length > 0) {\n \t\t\t\tif (this.applyCommonInterceptorsFirst) {\n \t\t\t\t\tallInterceptors.addAll(0, Arrays.asList(commonInterceptors));",
    "output": "Reduce memory consumption"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -384,7 +384,7 @@ else if (clazz.isInterface()) {\n \t * @throws IllegalStateException if introspection fails\n \t */\n \tpublic static Method[] getAllDeclaredMethods(Class<?> leafClass) {\n-\t\tfinal List<Method> methods = new ArrayList<>(32);\n+\t\tfinal List<Method> methods = new ArrayList<>(20);\n \t\tdoWithMethods(leafClass, methods::add);\n \t\treturn methods.toArray(EMPTY_METHOD_ARRAY);\n \t}\n@@ -410,7 +410,7 @@ public static Method[] getUniqueDeclaredMethods(Class<?> leafClass) {\n \t * @since 5.2\n \t */\n \tpublic static Method[] getUniqueDeclaredMethods(Class<?> leafClass, @Nullable MethodFilter mf) {\n-\t\tfinal List<Method> methods = new ArrayList<>(32);\n+\t\tfinal List<Method> methods = new ArrayList<>(20);\n \t\tdoWithMethods(leafClass, method -> {\n \t\t\tboolean knownSignature = false;\n \t\t\tMethod methodBeingOverriddenWithCovariantReturnType = null;",
    "output": "Specify 20 to the initial size of the ArrayList"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -384,7 +384,7 @@ public void onNext(Void aVoid) {\n \t\t@Override\n \t\tpublic void onError(Throwable ex) {\n \t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(this.logPrefix + \"onError: \" + ex.getMessage());\n+\t\t\t\tlogger.trace(this.logPrefix + \"onError: \" + ex);\n \t\t\t}\n \t\t\trunIfAsyncNotComplete(this.asyncContext, this.completionFlag, () -> {\n \t\t\t\tif (this.asyncContext.getResponse().isCommitted()) {",
    "output": "Fix log message See gh-"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n@@ -357,7 +357,9 @@ private Object readJavaType(JavaType javaType, HttpInputMessage inputMessage) th\n \t\tObjectMapper objectMapper = selectObjectMapper(javaType.getRawClass(), contentType);\n \t\tAssert.state(objectMapper != null, \"No ObjectMapper for \" + javaType);\n \n-\t\tboolean isUnicode = ENCODINGS.containsKey(charset.name());\n+\t\tboolean isUnicode = ENCODINGS.containsKey(charset.name()) ||\n+\t\t\t\t\"UTF-16\".equals(charset.name()) ||\n+\t\t\t\t\"UTF-32\".equals(charset.name());\n \t\ttry {\n \t\t\tif (inputMessage instanceof MappingJacksonInputMessage) {\n \t\t\t\tClass<?> deserializationView = ((MappingJacksonInputMessage) inputMessage).getDeserializationView();",
    "output": "Support /in Jackson message converter This commit makes sure that we let Jackson deal with all the encodings that it supports, including and"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n@@ -218,7 +218,6 @@ public void setRemoveSemicolonContent(boolean removeSemicolonContent) {\n \t * <p><strong>Note:</strong> This property is mutually exclusive with and\n \t * ignored when {@link #setPatternParser(PathPatternParser)} is set.\n \t */\n-\t@SuppressWarnings(\"deprecation\")\n \tpublic void setUrlPathHelper(UrlPathHelper urlPathHelper) {\n \t\tAssert.notNull(urlPathHelper, \"UrlPathHelper must not be null\");\n \t\tthis.urlPathHelper = urlPathHelper;",
    "output": "Delete unnecessary @SuppressWarnings declaration"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n@@ -796,10 +796,6 @@ public Match(T mapping, MappingRegistration<T> registration) {\n \t\t\tthis.registration = registration;\n \t\t}\n \n-\t\tpublic T getMapping() {\n-\t\t\treturn this.mapping;\n-\t\t}\n-\n \t\tpublic HandlerMethod getHandlerMethod() {\n \t\t\treturn this.registration.getHandlerMethod();\n \t\t}",
    "output": "Delete unused method"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n@@ -242,7 +242,7 @@ public static BodyBuilder ok() {\n \t * @return the created {@code ResponseEntity}\n \t * @since 4.1\n \t */\n-\tpublic static <T> ResponseEntity<T> ok(T body) {\n+\tpublic static <T> ResponseEntity<T> ok(@Nullable T body) {\n \t\treturn ok().body(body);\n \t}\n ",
    "output": "Add missing nullable annotation to ResponseEntity ok convenience method"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java\n@@ -148,14 +148,19 @@ public boolean exists() {\n \t */\n \t@Nullable\n \tprotected URL resolveURL() {\n-\t\tif (this.clazz != null) {\n-\t\t\treturn this.clazz.getResource(this.path);\n-\t\t}\n-\t\telse if (this.classLoader != null) {\n-\t\t\treturn this.classLoader.getResource(this.path);\n+\t\ttry {\n+\t\t\tif (this.clazz != null) {\n+\t\t\t\treturn this.clazz.getResource(this.path);\n+\t\t\t}\n+\t\t\telse if (this.classLoader != null) {\n+\t\t\t\treturn this.classLoader.getResource(this.path);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn ClassLoader.getSystemResource(this.path);\n+\t\t\t}\n \t\t}\n-\t\telse {\n-\t\t\treturn ClassLoader.getSystemResource(this.path);\n+\t\tcatch (IllegalArgumentException ex) {\n+\t\t\treturn null;\n \t\t}\n \t}\n ",
    "output": "getResource can throw IllegalArgumentException Class.getResource, ClassLoader.getResource, and ClassLoader.getSystemResource will throw IllegalArgumentException if a malformed URL is provided to them. According to its javadoc, resolveURL should return null if not resolvable, so catch the IllegalArgumentException and return null"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -46,6 +46,7 @@\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.ApplicationEventPublisherAware;\n import org.springframework.context.ApplicationListener;\n+import org.springframework.context.ApplicationStartupAware;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.EmbeddedValueResolverAware;\n import org.springframework.context.EnvironmentAware;\n@@ -692,7 +693,7 @@ protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n \t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n \t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n \t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n-\t\tbeanFactory.ignoreDependencyInterface(ApplicationStartup.class);\n+\t\tbeanFactory.ignoreDependencyInterface(ApplicationStartupAware.class);\n \n \t\t// BeanFactory interface not registered as resolvable type in a plain factory.\n \t\t// MessageSource registered (and found for autowiring) as a bean.",
    "output": "Fix registration of ApplicationStartupAware"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -59,7 +59,6 @@ public static boolean sameResourceFactory(ResourceTransactionManager tm, Object\n \t * the given handle as-is.\n \t * @since 5.3.4\n \t * @see InfrastructureProxy#getWrappedObject()\n-\t * @see ScopedProxyUnwrapper#unwrapIfNecessary(Object)\n \t */\n \tpublic static Object unwrapResourceIfNecessary(Object resource) {\n \t\tAssert.notNull(resource, \"Resource must not be null\");",
    "output": "Remove Javadoc link to private method"
  },
  {
    "input": "diff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java\n@@ -378,10 +378,10 @@ private String getCookieHeader(Cookie cookie) {\n \t\t\tbuf.append(\"; Domain=\").append(cookie.getDomain());\n \t\t}\n \t\tint maxAge = cookie.getMaxAge();\n+\t\tZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);\n \t\tif (maxAge >= 0) {\n \t\t\tbuf.append(\"; Max-Age=\").append(maxAge);\n \t\t\tbuf.append(\"; Expires=\");\n-\t\t\tZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);\n \t\t\tif (expires != null) {\n \t\t\t\tbuf.append(expires.format(DateTimeFormatter.RFC_1123_DATE_TIME));\n \t\t\t}\n@@ -391,6 +391,10 @@ private String getCookieHeader(Cookie cookie) {\n \t\t\t\tbuf.append(headers.getFirst(HttpHeaders.EXPIRES));\n \t\t\t}\n \t\t}\n+\t\telse if (expires != null) {\n+\t\t\tbuf.append(\"; Expires=\");\n+\t\t\tbuf.append(expires.format(DateTimeFormatter.RFC_1123_DATE_TIME));\n+\t\t}\n \n \t\tif (cookie.getSecure()) {\n \t\t\tbuf.append(\"; Secure\");",
    "output": "Sync changes in MockHttpServletResponse test fixture"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n@@ -350,7 +350,7 @@ public static Object[] buildValueArray(\n \t\t\t\tObject paramValue = paramSource.getValue(paramName);\n \t\t\t\tif (paramValue instanceof SqlParameterValue) {\n \t\t\t\t\tparamArray[i] = paramValue;\n-\t\t\t\t} \n+\t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tparamArray[i] = (param != null ? new SqlParameterValue(param, paramValue) :\n \t\t\t\t\t\t\tSqlParameterSourceUtils.getTypedValue(paramSource, paramName));",
    "output": "Remove trailing whitespace (Checkstyle)"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -75,13 +75,16 @@ void executeTestsInParallel(Class<?> testClass) {\n \t\tassertThat(payloads).hasSize(10);\n \t\tassertThat(testNames).hasSize(10);\n \n+\t\tint availableProcessors = Runtime.getRuntime().availableProcessors();\n \t\t// Skip the following assertion entirely if too few processors are available\n \t\t// to the current JVM.\n-\t\tif (Runtime.getRuntime().availableProcessors() >= 4) {\n+\t\tif (availableProcessors >= 6) {\n \t\t\t// There are probably 10 different thread names on a developer's machine,\n \t\t\t// but we really just want to assert that at least two different threads\n \t\t\t// were used, since the CI server often has fewer threads available.\n-\t\t\tassertThat(threadNames).hasSizeGreaterThanOrEqualTo(2);\n+\t\t\tassertThat(threadNames)\n+\t\t\t\t.as(\"number of threads used with \" + availableProcessors + \" available processors\")\n+\t\t\t\t.hasSizeGreaterThanOrEqualTo(2);\n \t\t}\n \t}\n ",
    "output": "Improve diagnostics for flaky ParallelApplicationEventsIntegrationTests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.test.context.junit.jupiter.event;\n \n-import java.lang.management.ManagementFactory;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -76,8 +76,9 @@ void executeTestsInParallel(Class<?> testClass) {\n \t\tassertThat(payloads).hasSize(10);\n \t\tassertThat(testNames).hasSize(10);\n \n-\t\t// Skip the following assertion entirely if the thread count is too low.\n-\t\tif (ManagementFactory.getThreadMXBean().getThreadCount() >= 4) {\n+\t\t// Skip the following assertion entirely if too few processors are available\n+\t\t// to the current JVM.\n+\t\tif (Runtime.getRuntime().availableProcessors() >= 4) {\n \t\t\t// There are probably 10 different thread names on a developer's machine,\n \t\t\t// but we really just want to assert that at least two different threads\n \t\t\t// were used, since the CI server often has fewer threads available.",
    "output": "Check available processors in ParallelApplicationEventsIntegrationTests This commit changes the condition in the if-block to check the number of available processors instead of currently active threads with the hope that doing so will prove more reliable on the CI server"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -77,7 +77,7 @@ void executeTestsInParallel(Class<?> testClass) {\n \t\tassertThat(testNames).hasSize(10);\n \n \t\t// Skip the following assertion entirely if the thread count is too low.\n-\t\tif (ManagementFactory.getThreadMXBean().getThreadCount() >= 2) {\n+\t\tif (ManagementFactory.getThreadMXBean().getThreadCount() >= 4) {\n \t\t\t// There are probably 10 different thread names on a developer's machine,\n \t\t\t// but we really just want to assert that at least two different threads\n \t\t\t// were used, since the CI server often has fewer threads available.",
    "output": "Increase fudge factor"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufCodecSupport.java b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufCodecSupport.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufCodecSupport.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufCodecSupport.java\n@@ -34,7 +34,8 @@ public abstract class ProtobufCodecSupport {\n \tstatic final List<MimeType> MIME_TYPES = Collections.unmodifiableList(\n \t\t\tArrays.asList(\n \t\t\t\t\tnew MimeType(\"application\", \"x-protobuf\"),\n-\t\t\t\t\tnew MimeType(\"application\", \"octet-stream\")));\n+\t\t\t\t\tnew MimeType(\"application\", \"octet-stream\"),\n+\t\t\t\t\tnew MimeType(\"application\", \"vnd.google.protobuf\")));\n \n \tstatic final String DELIMITED_KEY = \"delimited\";\n ",
    "output": "Protobuf Codec supports application/vnd.google.protobuf"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -278,11 +278,11 @@ protected ModelAndView handleHttpRequestMethodNotSupported(HttpRequestMethodNotS\n \tprotected ModelAndView handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException ex,\n \t\t\tHttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {\n \n-\t\tresponse.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);\n \t\tList<MediaType> mediaTypes = ex.getSupportedMediaTypes();\n \t\tif (!CollectionUtils.isEmpty(mediaTypes)) {\n \t\t\tresponse.setHeader(\"Accept\", MediaType.toString(mediaTypes));\n \t\t}\n+\t\tresponse.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);\n \t\treturn new ModelAndView();\n \t}\n ",
    "output": "Fix order of headers in DefaultHandlerExceptionResolver"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -228,7 +228,16 @@ public void afterPropertiesSet() {\n \t@Override\n \tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\tif (this.forwardedHeaderTransformer != null) {\n-\t\t\trequest = this.forwardedHeaderTransformer.apply(request);\n+\t\t\ttry {\n+\t\t\t\trequest = this.forwardedHeaderTransformer.apply(request);\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"Failed to apply forwarded headers to \" + formatRequest(request), ex);\n+\t\t\t\t}\n+\t\t\t\tresponse.setStatusCode(HttpStatus.BAD_REQUEST);\n+\t\t\t\treturn response.setComplete();\n+\t\t\t}\n \t\t}\n \t\tServerWebExchange exchange = createExchange(request, response);\n ",
    "output": "Handle forwarded header parse issues"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n@@ -184,7 +184,7 @@ public static boolean hasCachedPath(ServletRequest request) {\n \t * supports a servletPath as an additional prefix to be omitted from\n \t * {@link #pathWithinApplication()}.\n \t */\n-\tprivate static class ServletRequestPath implements RequestPath {\n+\tprivate static final class ServletRequestPath implements RequestPath {\n \n \t\tprivate final RequestPath requestPath;\n \n\ndiff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletMapping.java\n@@ -77,4 +77,4 @@ public String toString() {\n \t\t\t\t\"mappingMatch=\" + mappingMatch + \"]\";\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix CheckStyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import javax.net.ssl.SSLSession;\n \n@@ -50,6 +51,9 @@\n  */\n class UndertowServerHttpRequest extends AbstractServerHttpRequest {\n \n+\tprivate static final AtomicLong logPrefixIndex = new AtomicLong();\n+\n+\n \tprivate final HttpServerExchange exchange;\n \n \tprivate final RequestBodyPublisher body;\n@@ -125,7 +129,8 @@ public <T> T getNativeRequest() {\n \n \t@Override\n \tprotected String initId() {\n-\t\treturn ObjectUtils.getIdentityHexString(this.exchange.getConnection());\n+\t\treturn ObjectUtils.getIdentityHexString(this.exchange.getConnection()) +\n+\t\t\t\t\"-\" + logPrefixIndex.incrementAndGet();\n \t}\n \n ",
    "output": "Append unique number to log prefix for Undertow"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n--- a/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java\n@@ -451,7 +451,7 @@ public void validateAllowCredentials() {\n \t\t\t\tthis.allowedOrigins != null && this.allowedOrigins.contains(ALL)) {\n \n \t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"When allowCredentials is true, allowedOrigins cannot contain the special value \\\"*\\\"\" +\n+\t\t\t\t\t\"When allowCredentials is true, allowedOrigins cannot contain the special value \\\"*\\\" \" +\n \t\t\t\t\t\t\t\"since that cannot be set on the \\\"Access-Control-Allow-Origin\\\" response header. \" +\n \t\t\t\t\t\t\t\"To allow credentials to a set of origins, list them explicitly \" +\n \t\t\t\t\t\t\t\"or consider using \\\"allowedOriginPatterns\\\" instead.\");",
    "output": "Add a missing space in exception message"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultPartHttpMessageReader.java\n@@ -74,8 +74,7 @@ public class DefaultPartHttpMessageReader extends LoggingCodecSupport implements\n \n \tprivate boolean streaming;\n \n-\tprivate Scheduler blockingOperationScheduler = Schedulers.newBoundedElastic(Schedulers.DEFAULT_BOUNDED_ELASTIC_SIZE,\n-\t\t\tSchedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE, IDENTIFIER, 60, true);\n+\tprivate Scheduler blockingOperationScheduler = Schedulers.boundedElastic();\n \n \tprivate Mono<Path> fileStorageDirectory = Mono.defer(this::defaultFileStorageDirectory).cache();\n \n@@ -153,8 +152,9 @@ public void setFileStorageDirectory(Path fileStorageDirectory) throws IOExceptio\n \n \t/**\n \t * Sets the Reactor {@link Scheduler} to be used for creating files and\n-\t * directories, and writing to files. By default, a bounded scheduler is\n-\t * created with default properties.\n+\t * directories, and writing to files. By default,\n+\t * {@link Schedulers#boundedElastic()} is used, but this property allows for\n+\t * changing it to an externally managed scheduler.\n \t * <p>Note that this property is ignored when\n \t * {@linkplain #setStreaming(boolean) streaming} is enabled, or when\n \t * {@link #setMaxInMemorySize(int) maxInMemorySize} is set to -1.",
    "output": "Use default bounded elastic scheduler Instead of using a new bounded elastic scheduler per DefaultPartHttpMessageReader instance, which creates daemon threads that are not shut down, we now use the shared bounded elastic scheduler"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n@@ -125,6 +125,10 @@ private void writeHeaders() {\n \t\t\t\t\tthis.headers.getContentType().getCharset() != null) {\n \t\t\t\tthis.servletResponse.setCharacterEncoding(this.headers.getContentType().getCharset().name());\n \t\t\t}\n+\t\t\tlong contentLength = getHeaders().getContentLength();\n+\t\t\tif (contentLength != -1) {\n+\t\t\t\tthis.servletResponse.setContentLengthLong(contentLength);\n+\t\t\t}\n \t\t\tthis.headersWritten = true;\n \t\t}\n \t}",
    "output": "Set content length on ServletHttpResponse Prior to this commit, the `ServletServerHttpResponse` would copy headers from the `HttpHeaders` map and calls methods related to headers exposed as properties (content-type, character encoding). Unlike its reactive variant, this would not set the content length. Depending on the Servlet container implementation, this could cause duplicate Content-Length response headers in the actual HTTP response. This commit aligns both implementations and ensures that the `setContentLengthLong` method is called if necessary so that the Servlet container can ensure a single header for that"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -759,14 +759,6 @@ protected MediaType getMediaType(HttpServletRequest request, Resource resource)\n \tprotected void setHeaders(HttpServletResponse response, Resource resource, @Nullable MediaType mediaType)\n \t\t\tthrows IOException {\n \n-\t\tlong length = resource.contentLength();\n-\t\tif (length > Integer.MAX_VALUE) {\n-\t\t\tresponse.setContentLengthLong(length);\n-\t\t}\n-\t\telse {\n-\t\t\tresponse.setContentLength((int) length);\n-\t\t}\n-\n \t\tif (mediaType != null) {\n \t\t\tresponse.setContentType(mediaType.toString());\n \t\t}",
    "output": "Avoid writing content-length twice in resource handling Prior to this commit, the `ResourceHttpRequestHandler` would write the resource size to the \"Content-Length\" response header. This is already done by the underlying `ResourceHttpMessageConverter` and `ResourceRegionHttpMessageConverter`. This commit avoid this duplicate operation and delegates instead to the converters"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2020 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.web.reactive.socket.adapter;\n \n import java.util.function.Consumer;\n@@ -33,7 +34,6 @@\n import org.springframework.web.reactive.socket.WebSocketMessage;\n import org.springframework.web.reactive.socket.WebSocketSession;\n \n-\n /**\n  * {@link WebSocketSession} implementation for use with the Reactor Netty's\n  * {@link NettyInbound} and {@link NettyOutbound}.\n@@ -100,7 +100,7 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \tpublic boolean isOpen() {\n \t\tDisposedCallback callback = new DisposedCallback();\n \t\tgetDelegate().getInbound().withConnection(callback);\n-\t\treturn callback.isDisposed();\n+\t\treturn !callback.isDisposed();\n \t}\n \n \t@Override",
    "output": "Fix implementation of isOpenin ReactorNettyWebSocketSession for details"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/event/ParallelApplicationEventsIntegrationTests.java\n@@ -74,9 +74,10 @@ void executeTestsInParallel(Class<?> testClass) {\n \n \t\tassertThat(payloads).hasSize(10);\n \t\tassertThat(testNames).hasSize(10);\n-\t\t// There are probably 10 different thread names, but we really just want\n-\t\t// to assert that at least a few different threads were used.\n-\t\tassertThat(threadNames).hasSizeGreaterThanOrEqualTo(4);\n+\t\t// There are probably 10 different thread names on a developer's machine,\n+\t\t// but we really just want to assert that at least two different threads\n+\t\t// were used, since the CI server seems to have fewer threads available.\n+\t\tassertThat(threadNames).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \n ",
    "output": "Ensure ParallelApplicationEventsIntegrationTests passes on CI server"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -48,6 +48,7 @@\n import org.springframework.cglib.proxy.MethodInterceptor;\n import org.springframework.cglib.proxy.MethodProxy;\n import org.springframework.cglib.proxy.NoOp;\n+import org.springframework.core.KotlinDetector;\n import org.springframework.core.SmartClassLoader;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n@@ -752,10 +753,17 @@ public Object proceed() throws Throwable {\n \t\t\t\tthrow ex;\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n-\t\t\t\tif (ReflectionUtils.declaresException(getMethod(), ex.getClass())) {\n+\t\t\t\tif (ReflectionUtils.declaresException(getMethod(), ex.getClass()) ||\n+\t\t\t\t\t\tKotlinDetector.isKotlinType(getMethod().getDeclaringClass())) {\n+\t\t\t\t\t// Propagate original exception if declared on the target method\n+\t\t\t\t\t// (with callers expecting it). Always propagate it for Kotlin code\n+\t\t\t\t\t// since checked exceptions do not have to be explicitly declared there.\n \t\t\t\t\tthrow ex;\n \t\t\t\t}\n \t\t\t\telse {\n+\t\t\t\t\t// Checked exception thrown in the interceptor but not declared on the\n+\t\t\t\t\t// target method signature -> apply an UndeclaredThrowableException,\n+\t\t\t\t\t// aligned with standard JDK dynamic proxy behavior.\n \t\t\t\t\tthrow new UndeclaredThrowableException(ex);\n \t\t\t\t}\n \t\t\t}",
    "output": "Always propagate checked exceptions from Kotlin code behind CGLIB proxies"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n@@ -123,7 +123,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\tRequest request = this.httpClient.newRequest(uri).method(method.toString());\n \n \t\treturn requestCallback.apply(new JettyClientHttpRequest(request, this.bufferFactory))\n-\t\t\t\t.then(Mono.fromDirect(ReactiveRequest.newBuilder(request).build()\n+\t\t\t\t.then(Mono.fromDirect(ReactiveRequest.newBuilder(request).abortOnCancel(true).build()\n \t\t\t\t\t\t.response((reactiveResponse, chunkPublisher) -> {\n \t\t\t\t\t\t\tFlux<DataBuffer> content = Flux.from(chunkPublisher).map(this::toDataBuffer);\n \t\t\t\t\t\t\treturn Mono.just(new JettyClientHttpResponse(reactiveResponse, content));",
    "output": "Apply abortOnCancel in JettyClientHttpConnector This new option allows a cancel signal to abort the request, which is how we expect a connection to be aborted in a reactive chain that involves the WebClient"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -252,8 +252,8 @@ public static UriComponentsBuilder fromUriString(String uri) {\n \t\t\t\tbuilder.schemeSpecificPart(ssp);\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tif (StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"[\" + uri + \"] is not a valid URI\");\n+\t\t\t\tif (StringUtils.hasLength(scheme) && scheme.startsWith(\"http\") && !StringUtils.hasLength(host)) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\"[\" + uri + \"] is not a valid HTTP URL\");\n \t\t\t\t}\n \t\t\t\tbuilder.userInfo(userInfo);\n \t\t\t\tbuilder.host(host);",
    "output": "Limit scheme/host check in fromUriString to HTTP URLs"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n@@ -18,6 +18,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Supplier;\n \n@@ -213,7 +214,7 @@ public final Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n \t\t\treturn ((Mono<? extends DataBuffer>) body)\n \t\t\t\t\t.flatMap(buffer -> {\n \t\t\t\t\t\ttouchDataBuffer(buffer);\n-\t\t\t\t\t\tAtomicReference<Boolean> subscribed = new AtomicReference<>(false);\n+\t\t\t\t\t\tAtomicBoolean subscribed = new AtomicBoolean();\n \t\t\t\t\t\treturn doCommit(\n \t\t\t\t\t\t\t\t() -> {\n \t\t\t\t\t\t\t\t\ttry {",
    "output": "Replace AtomicReference<Boolean> with AtomicBoolean in AbstractServerHttpResponse.writeWith"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -628,8 +628,8 @@ public int hashCode() {\n \n \t\t@Override\n \t\tpublic String toString() {\n-\t\t\treturn \"CacheKey [clazz=\" + this.clazz.getName() + \", property=\" + this.property + \", \" +\n-\t\t\t\t\tthis.property + \", targetIsClass=\" + this.targetIsClass + \"]\";\n+\t\t\treturn \"CacheKey [clazz=\" + this.clazz.getName() + \", property=\" + this.property +\n+\t\t\t\t\t\", targetIsClass=\" + this.targetIsClass + \"]\";\n \t\t}\n \n \t\t@Override",
    "output": "Remove duplicate \"property\" in PropertyCacheKey.toString"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -427,15 +427,11 @@ else if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {\n \t\t\t\tconfigBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);\n \t\t\t}\n \t\t}\n-\t\tif (configBeanDefs.isEmpty()) {\n+\t\tif (configBeanDefs.isEmpty() || IN_NATIVE_IMAGE) {\n \t\t\t// nothing to enhance -> return immediately\n \t\t\tenhanceConfigClasses.end();\n \t\t\treturn;\n \t\t}\n-\t\tif (IN_NATIVE_IMAGE) {\n-\t\t\tthrow new BeanDefinitionStoreException(\"@Configuration classes need to be marked as \" +\n-\t\t\t\t\t\"proxyBeanMethods=false. Found: \" + configBeanDefs.keySet());\n-\t\t}\n \n \t\tConfigurationClassEnhancer enhancer = new ConfigurationClassEnhancer();\n \t\tfor (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {",
    "output": "Refine ConfigurationClassPostProcessor behavior in native images This commit refines ConfigurationClassPostProcessor behavior in native images by skipping configuration classes enhancement instead of raising an error. See spring-projects-experimental/spring-graalvm-nativefor more details"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -21,6 +21,7 @@\n import java.util.Map;\n import java.util.Properties;\n \n+import javax.servlet.RequestDispatcher;\n import javax.servlet.ServletRequest;\n import javax.servlet.http.HttpServletMapping;\n import javax.servlet.http.HttpServletRequest;\n@@ -774,7 +775,10 @@ public String removeSemicolonContent(String requestUri) {\n \tprivate static class Servlet4Delegate {\n \n \t\tpublic static boolean skipServletPathDetermination(HttpServletRequest request) {\n-\t\t\tHttpServletMapping mapping = request.getHttpServletMapping();\n+\t\t\tHttpServletMapping mapping = (HttpServletMapping) request.getAttribute(RequestDispatcher.INCLUDE_MAPPING);\n+\t\t\tif (mapping == null) {\n+\t\t\t\tmapping = request.getHttpServletMapping();\n+\t\t\t}\n \t\t\tMappingMatch match = mapping.getMappingMatch();\n \t\t\treturn (match != null && (!match.equals(MappingMatch.PATH) || mapping.getPattern().equals(\"/*\")));\n \t\t}",
    "output": "Correctly determine HttpServletMapping for INCLUDE"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java\n@@ -69,14 +69,27 @@ public abstract class AbstractServerHttpRequest implements ServerHttpRequest {\n \t * Constructor with the URI and headers for the request.\n \t * @param uri the URI for the request\n \t * @param contextPath the context path for the request\n-\t * @param headers the headers for the request\n+\t * @param headers the headers for the request (as {@link MultiValueMap})\n+\t * @since 5.3\n \t */\n \tpublic AbstractServerHttpRequest(URI uri, @Nullable String contextPath, MultiValueMap<String, String> headers) {\n \t\tthis.uri = uri;\n \t\tthis.path = RequestPath.parse(uri, contextPath);\n \t\tthis.headers = HttpHeaders.readOnlyHttpHeaders(headers);\n \t}\n \n+\t/**\n+\t * Constructor with the URI and headers for the request.\n+\t * @param uri the URI for the request\n+\t * @param contextPath the context path for the request\n+\t * @param headers the headers for the request (as {@link HttpHeaders})\n+\t */\n+\tpublic AbstractServerHttpRequest(URI uri, @Nullable String contextPath, HttpHeaders headers) {\n+\t\tthis.uri = uri;\n+\t\tthis.path = RequestPath.parse(uri, contextPath);\n+\t\tthis.headers = HttpHeaders.readOnlyHttpHeaders(headers);\n+\t}\n+\n \n \t@Override\n \tpublic String getId() {",
    "output": "Restore HttpHeaders-based constructor for binary compatibility"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -880,10 +880,7 @@ protected ModelAndView invokeHandlerMethod(HttpServletRequest request,\n \t\t\tasyncManager.registerCallableInterceptors(this.callableInterceptors);\n \t\t\tasyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);\n \n-\t\t\tif (asyncManager.hasConcurrentResult() &&\n-\t\t\t\t\tasyncManager.getConcurrentResultContext().length > 0 &&\n-\t\t\t\t\tasyncManager.getConcurrentResultContext()[0] instanceof ModelAndViewContainer) {\n-\n+\t\t\tif (asyncManager.hasConcurrentResult()) {\n \t\t\t\tObject result = asyncManager.getConcurrentResult();\n \t\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];\n \t\t\t\tasyncManager.clearConcurrentResult();",
    "output": "Remove unnecessary check in RequestMappingHandlerAdapter"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n@@ -631,7 +631,6 @@ protected Object invokeAdviceMethodWithGivenArgs(Object[] args) throws Throwable\n \t\t}\n \t\ttry {\n \t\t\tReflectionUtils.makeAccessible(this.aspectJAdviceMethod);\n-\t\t\t// TODO AopUtils.invokeJoinpointUsingReflection\n \t\t\treturn this.aspectJAdviceMethod.invoke(this.aspectInstanceFactory.getAspectInstance(), actualArgs);\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {",
    "output": "Remove TODO from AbstractAspectJAdvice Despite the code duplication, we will not delegate to AopUtils.invokeJoinpointUsingReflectionfrom AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs. The rationale is that the exception message in invokeAdviceMethodWithGivenArgsprovides additional context via the pointcut expression, and we would lose that additional context if we simply delegate to AopUtils.invokeJoinpointUsingReflection. We could introduce an overloaded variant of invokeJoinpointUsingReflectionthat accepts an additional argument to provide the additional context for the exception message, but we don't think that would be the best solution for this particular use case. In light of that, we are simply removing the TODO"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java\n@@ -16,7 +16,7 @@\n \n package org.springframework.web.servlet.mvc.method.annotation;\n \n-import java.awt.*;\n+import java.awt.Color;\n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -831,9 +831,11 @@ public interface MethodFilter {\n \t\t * <p>If this filter does not match, the next filter will not be applied.\n \t\t * @param next the next {@code MethodFilter}\n \t\t * @return a composite {@code MethodFilter}\n+\t\t * @throws IllegalArgumentException if method's argument is {@code null}\n \t\t * @since 5.3.2\n \t\t */\n \t\tdefault MethodFilter and(MethodFilter next) {\n+\t\t\tAssert.notNull(next, \"Next MethodFilter must not be null!\");\n \t\t\treturn method -> matches(method) && next.matches(method);\n \t\t}\n \t}",
    "output": "Fail MethodFilter.andimmediately when null is passed"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -432,6 +432,9 @@ protected void addClassPathManifestEntries(Set<Resource> result) {\n \t\t\t\t\t\t// Possibly \"c:\" drive prefix on Windows, to be upper-cased for proper duplicate detection\n \t\t\t\t\t\tfilePath = StringUtils.capitalize(filePath);\n \t\t\t\t\t}\n+\t\t\t\t\t// # can appear in directories/filenames, java.net.URL should not treat it as a fragment\n+\t\t\t\t\tfilePath = StringUtils.replace(filePath, \"#\", \"%23\");\n+\t\t\t\t\t// Build URL that points to the root of the jar file\n \t\t\t\t\tUrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +\n \t\t\t\t\t\t\tResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR);\n \t\t\t\t\t// Potentially overlapping with URLClassLoader.getURLs() result above!",
    "output": "Encode hash symbol in jar file path (for compatibility with JDK 11+)"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java\n@@ -354,8 +354,8 @@ private static boolean isVariableName(String name) {\n \t\tif (!Character.isJavaIdentifierStart(name.charAt(0))) {\n \t\t\treturn false;\n \t\t}\n-\t\tfor (char ch: name.toCharArray()) {\n-\t\t\tif (!Character.isJavaIdentifierPart(ch)) {\n+\t\tfor (int i = 1; i < name.length(); i++) {\n+\t\t\tif (!Character.isJavaIdentifierPart(name.charAt(i))) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}",
    "output": "Avoid char array creation in AbstractAspectJAdvice.isVariableName"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ServletRequestPathUtils.java\n@@ -39,7 +39,7 @@\n public abstract class ServletRequestPathUtils {\n \n \t/** Name of Servlet request attribute that holds the parsed {@link RequestPath}. */\n-\tpublic static final String PATH_ATTRIBUTE = ServletRequestPathUtils.class.getName() + \".path\";\n+\tpublic static final String PATH_ATTRIBUTE = ServletRequestPathUtils.class.getName() + \".PATH\";\n \n \n \t/**\n\ndiff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -58,9 +58,9 @@ public class UrlPathHelper {\n \t * {@link #getLookupPathForRequest resolved} lookupPath.\n \t * @since 5.3\n \t */\n-\tpublic static final String PATH_ATTRIBUTE = UrlPathHelper.class.getName() + \".path\";\n+\tpublic static final String PATH_ATTRIBUTE = UrlPathHelper.class.getName() + \".PATH\";\n \n-\tprivate static boolean isServlet4Present =\n+\tprivate static final boolean isServlet4Present =\n \t\t\tClassUtils.isPresent(\"javax.servlet.http.HttpServletMapping\",\n \t\t\t\t\tUrlPathHelper.class.getClassLoader());\n ",
    "output": "Consistent attribute value spelling for PATH_ATTRIBUTE"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n@@ -418,10 +418,13 @@ private EntityManagerFactory buildNativeEntityManagerFactory() {\n \t\t\t\t\tString message = ex.getMessage();\n \t\t\t\t\tString causeString = cause.toString();\n \t\t\t\t\tif (!message.endsWith(causeString)) {\n-\t\t\t\t\t\tthrow new PersistenceException(message + \"; nested exception is \" + causeString, cause);\n+\t\t\t\t\t\tex = new PersistenceException(message + \"; nested exception is \" + causeString, cause);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n+\t\t\tif (logger.isErrorEnabled()) {\n+\t\t\t\tlogger.error(\"Failed to initialize JPA EntityManagerFactory: \" + ex.getMessage());\n+\t\t\t}\n \t\t\tthrow ex;\n \t\t}\n ",
    "output": "Early log entry for async EntityManagerFactory initialization failure"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java\n@@ -25,8 +25,6 @@\n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n \n-import org.hibernate.Session;\n-import org.hibernate.SessionFactory;\n import org.hibernate.cfg.AvailableSettings;\n import org.hibernate.dialect.DB2Dialect;\n import org.hibernate.dialect.DerbyTenSevenDialect;\n@@ -39,6 +37,8 @@\n import org.hibernate.dialect.PostgreSQL95Dialect;\n import org.hibernate.dialect.SQLServer2012Dialect;\n import org.hibernate.dialect.SybaseDialect;\n+import org.hibernate.engine.spi.SessionFactoryImplementor;\n+import org.hibernate.engine.spi.SessionImplementor;\n import org.hibernate.resource.jdbc.spi.PhysicalConnectionHandlingMode;\n \n import org.springframework.lang.Nullable;\n@@ -82,8 +82,8 @@ public class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter {\n \n \tpublic HibernateJpaVendorAdapter() {\n \t\tthis.persistenceProvider = new SpringHibernateJpaPersistenceProvider();\n-\t\tthis.entityManagerFactoryInterface = SessionFactory.class;\n-\t\tthis.entityManagerInterface = Session.class;\n+\t\tthis.entityManagerFactoryInterface = SessionFactoryImplementor.class;\n+\t\tthis.entityManagerInterface = SessionImplementor.class;\n \t}\n \n ",
    "output": "Expose Hibernate Session(Factory)Implementor interface by default"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n@@ -644,7 +644,7 @@ protected static class AntPathStringMatcher {\n \n \t\tprivate static final Pattern GLOB_PATTERN = Pattern.compile(\"\\\\?|\\\\*|\\\\{((?:\\\\{[^/]+?}|[^/{}]|\\\\\\\\[{}])+?)}\");\n \n-\t\tprivate static final String DEFAULT_VARIABLE_PATTERN = \"(.*)\";\n+\t\tprivate static final String DEFAULT_VARIABLE_PATTERN = \"((?s).*)\";\n \n \t\tprivate final String rawPattern;\n \n\ndiff --git a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -130,6 +130,7 @@ void match() {\n \t\tassertThat(pathMatcher.match(\"\", \"\")).isTrue();\n \n \t\tassertThat(pathMatcher.match(\"/{bla}.*\", \"/testing.html\")).isTrue();\n+\t\tassertThat(pathMatcher.match(\"/{bla}\", \"//x\\ny\")).isTrue();\n \t}\n \n \t@Test",
    "output": "AntPathMatcher allows newline in URI template variables"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -785,13 +785,13 @@ void canReferenceParentBeanFromChildViaAlias() {\n \t\tfactory.registerBeanDefinition(\"child\", childDefinition);\n \t\tfactory.registerAlias(\"parent\", \"alias\");\n \n-\t\tTestBean child = (TestBean) factory.getBean(\"child\");\n+\t\tTestBean child = factory.getBean(\"child\", TestBean.class);\n \t\tassertThat(child.getName()).isEqualTo(EXPECTED_NAME);\n \t\tassertThat(child.getAge()).isEqualTo(EXPECTED_AGE);\n-\t\tObject mergedBeanDefinition1 = factory.getMergedBeanDefinition(\"child\");\n-\t\tObject mergedBeanDefinition2 = factory.getMergedBeanDefinition(\"child\");\n+\t\tBeanDefinition mergedBeanDefinition1 = factory.getMergedBeanDefinition(\"child\");\n+\t\tBeanDefinition mergedBeanDefinition2 = factory.getMergedBeanDefinition(\"child\");\n \n-\t\tassertThat(mergedBeanDefinition1).as(\"Use cached merged bean definition\").isEqualTo(mergedBeanDefinition2);\n+\t\tassertThat(mergedBeanDefinition1).as(\"Use cached merged bean definition\").isSameAs(mergedBeanDefinition2);\n \t}\n \n \t@Test",
    "output": "Assert same instance returned for cached merged BeanDefinition"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n@@ -22,7 +22,6 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -46,6 +45,7 @@\n import org.springframework.transaction.interceptor.TransactionAttributeSource;\n import org.springframework.util.Assert;\n import org.springframework.util.ReflectionUtils;\n+import org.springframework.util.ReflectionUtils.MethodFilter;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -462,9 +462,9 @@ protected final boolean isRollback(TestContext testContext) throws Exception {\n \t * as well as annotated interface default methods\n \t */\n \tprivate List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> annotationType) {\n-\t\treturn Arrays.stream(ReflectionUtils.getUniqueDeclaredMethods(clazz, ReflectionUtils.USER_DECLARED_METHODS))\n-\t\t\t\t.filter(method -> AnnotatedElementUtils.hasAnnotation(method, annotationType))\n-\t\t\t\t.collect(Collectors.toList());\n+\t\tMethodFilter methodFilter = ReflectionUtils.USER_DECLARED_METHODS\n+\t\t\t\t.and(method -> AnnotatedElementUtils.hasAnnotation(method, annotationType));\n+\t\treturn Arrays.asList(ReflectionUtils.getUniqueDeclaredMethods(clazz, methodFilter));\n \t}\n \n }",
    "output": "Use MethodFilter.andin TransactionalTestExecutionListener"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -505,7 +505,7 @@ private static class DefaultResponseSpec implements ResponseSpec {\n \t\t\tthis.statusHandlers.add(DEFAULT_STATUS_HANDLER);\n \t\t}\n \n-\t\t\n+\n \t\t@Override\n \t\tpublic ResponseSpec onStatus(Predicate<HttpStatus> statusPredicate,\n \t\t\t\tFunction<ClientResponse, Mono<? extends Throwable>> exceptionFunction) {",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java b/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n@@ -492,10 +492,11 @@ public static class AnnotationDescriptor<T extends Annotation> {\n \t\t\tAssert.notNull(annotation, \"Annotation must not be null\");\n \t\t\tthis.rootDeclaringClass = rootDeclaringClass;\n \t\t\tthis.declaringClass = declaringClass;\n-\t\t\tthis.annotation = (T) AnnotatedElementUtils.findMergedAnnotation(\n+\t\t\tT mergedAnnotation = (T) AnnotatedElementUtils.findMergedAnnotation(\n \t\t\t\t\trootDeclaringClass, annotation.annotationType());\n-\t\t\tAssert.state(this.annotation != null,\n+\t\t\tAssert.state(mergedAnnotation != null,\n \t\t\t\t\t() -> \"Failed to find merged annotation for \" + annotation);\n+\t\t\tthis.annotation = mergedAnnotation;\n \t\t}\n \n \t\tpublic Class<?> getRootDeclaringClass() {",
    "output": "Strict nullability for field assignment"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -352,9 +352,9 @@ protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targe\n \t\t\t\t}\n \t\t\t\treturn new ReactiveTransactionSupport(adapter);\n \t\t\t});\n-\t\t\tPublisher<?> publisher = (Publisher<?>) txSupport.invokeWithinTransaction(method, targetClass, invocation, txAttr, (ReactiveTransactionManager) tm);\n-\t\t\treturn (isSuspendingFunction ? (hasSuspendingFlowReturnType ? KotlinDelegate.asFlow(publisher) :\n-\t\t\t\t\tKotlinDelegate.awaitSingleOrNull(publisher, ((CoroutinesInvocationCallback) invocation).getContinuation())) : publisher);\n+\t\t\tObject result = txSupport.invokeWithinTransaction(method, targetClass, invocation, txAttr, (ReactiveTransactionManager) tm);\n+\t\t\treturn (isSuspendingFunction ? (hasSuspendingFlowReturnType ? KotlinDelegate.asFlow((Publisher<?>) result) :\n+\t\t\t\t\tKotlinDelegate.awaitSingleOrNull((Publisher<?>) result, ((CoroutinesInvocationCallback) invocation).getContinuation())) : result);\n \t\t}\n \n \t\tPlatformTransactionManager ptm = asPlatformTransactionManager(tm);",
    "output": "Fix @Transactional support on functions returning Flow"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -875,8 +875,8 @@ public Object invokeWithinTransaction(Method method, @Nullable Class<?> targetCl\n \n \t\t\tString joinpointIdentification = methodIdentification(method, targetClass, txAttr);\n \n-\t\t\t// Optimize for Mono\n-\t\t\tif (Mono.class.isAssignableFrom(method.getReturnType())) {\n+\t\t\t// For Mono and suspending functions not returning kotlinx.coroutines.flow.Flow\n+\t\t\tif (Mono.class.isAssignableFrom(method.getReturnType()) || (KotlinDetector.isSuspendingFunction(method) && !COROUTINES_FLOW_CLASS_NAME.equals(new MethodParameter(method, -1).getParameterType().getName()))) {\n \t\t\t\treturn TransactionContextManager.currentContext().flatMap(context ->\n \t\t\t\t\t\tcreateTransactionIfNecessary(rtm, txAttr, joinpointIdentification).flatMap(it -> {\n \t\t\t\t\t\t\ttry {",
    "output": "Fix @Transactional support on suspending function With this commit, @Transactional on suspending functions returning a value now commits the transaction properly"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -328,8 +328,13 @@ else if (StompCommand.UNSUBSCRIBE.equals(command)) {\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tif (logger.isErrorEnabled()) {\n-\t\t\t\t\tlogger.error(\"Failed to send client message to application via MessageChannel\" +\n-\t\t\t\t\t\t\t\" in session \" + session.getId() + \". Sending STOMP ERROR to client.\", ex);\n+\t\t\t\t\tString errorText = \"Failed to send message to MessageChannel in session \" + session.getId();\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(errorText, ex);\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tlogger.error(errorText + \":\" + ex.getMessage());\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\thandleError(session, ex, message);\n \t\t\t}",
    "output": "Refine logging in StompErrorHandler Avoid a full stacktrace at ERROR level for a client message that could not be sent to a MessageChannel"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n@@ -223,7 +223,8 @@ public Class<?>[] getParameterTypes() {\n \t\tpublic String[] getParameterNames() {\n \t\t\tString[] parameterNames = this.parameterNames;\n \t\t\tif (parameterNames == null) {\n-\t\t\t\tthis.parameterNames = parameterNames = parameterNameDiscoverer.getParameterNames(getMethod());\n+\t\t\t\tparameterNames = parameterNameDiscoverer.getParameterNames(getMethod());\n+\t\t\t\tthis.parameterNames = parameterNames;\n \t\t\t}\n \t\t\treturn parameterNames;\n \t\t}",
    "output": "Separate assignment statements for local variable and instance field"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -618,10 +618,11 @@ private static String removeSemicolonContentInternal(String requestUri) {\n \t\t}\n \t\tStringBuilder sb = new StringBuilder(requestUri);\n \t\twhile (semicolonIndex != -1) {\n-\t\t\tint slashIndex = requestUri.indexOf('/', semicolonIndex);\n-\t\t\tif (slashIndex >= 0) {\n-\t\t\t\tsb.delete(semicolonIndex, slashIndex);\n+\t\t\tint slashIndex = requestUri.indexOf('/', semicolonIndex + 1);\n+\t\t\tif (slashIndex == -1) {\n+\t\t\t\tslashIndex = sb.length();\n \t\t\t}\n+\t\t\tsb.delete(semicolonIndex, slashIndex);\n \t\t\tsemicolonIndex = sb.indexOf(\";\", semicolonIndex);\n \t\t}\n \t\treturn sb.toString();",
    "output": "Restore removal of trailing semicolon content"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -99,7 +99,7 @@ public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPo\n \t * @see #setBeanNameGenerator\n \t */\n \tpublic static final AnnotationBeanNameGenerator IMPORT_BEAN_NAME_GENERATOR =\n-\t\t\tnew FullyQualifiedAnnotationBeanNameGenerator();\n+\t\t\tFullyQualifiedAnnotationBeanNameGenerator.INSTANCE;\n \n \tprivate static final String IMPORT_REGISTRY_BEAN_NAME =\n \t\t\tConfigurationClassPostProcessor.class.getName() + \".importRegistry\";\n\ndiff --git a/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java b/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/FullyQualifiedAnnotationBeanNameGenerator.java\n@@ -43,6 +43,14 @@\n  */\n public class FullyQualifiedAnnotationBeanNameGenerator extends AnnotationBeanNameGenerator {\n \n+\t/**\n+\t * A convenient constant for a default {@code FullyQualifiedAnnotationBeanNameGenerator} instance,\n+\t * as used for configuration-level import purposes.\n+\t */\n+\tpublic static final FullyQualifiedAnnotationBeanNameGenerator INSTANCE =\n+\t\t\tnew FullyQualifiedAnnotationBeanNameGenerator();\n+\n+\n \t@Override\n \tprotected String buildDefaultBeanName(BeanDefinition definition) {\n \t\tString beanClassName = definition.getBeanClassName();",
    "output": "Add FullyQualifiedAnnotationBeanNameGenerator.INSTANCE Adds a static INSTANCE to FullyQualifiedAnnotationBeanNameGenerator, just like its parent class, AnnotationBeanNameGenerator, does. The class doesn't have any state and overriding/hiding the INSTANCE of the superclass, this prevents unintended use of a regular AnnotationBeanNameGenerator through FullyQualifiedAnnotationBeanNameGenerator.INSTANCE"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1288,10 +1288,8 @@ protected void initBeanWrapper(BeanWrapper bw) {\n \t * @param registry the PropertyEditorRegistry to initialize\n \t */\n \tprotected void registerCustomEditors(PropertyEditorRegistry registry) {\n-\t\tPropertyEditorRegistrySupport registrySupport =\n-\t\t\t\t(registry instanceof PropertyEditorRegistrySupport ? (PropertyEditorRegistrySupport) registry : null);\n-\t\tif (registrySupport != null) {\n-\t\t\tregistrySupport.useConfigValueEditors();\n+\t\tif (registry instanceof PropertyEditorRegistrySupport) {\n+\t\t\t((PropertyEditorRegistrySupport) registry).useConfigValueEditors();\n \t\t}\n \t\tif (!this.propertyEditorRegistrars.isEmpty()) {\n \t\t\tfor (PropertyEditorRegistrar registrar : this.propertyEditorRegistrars) {",
    "output": "Simplify AbstractBeanFactory.registerCustomEditorsThis commit avoids an unnecessary non-null check in registerCustomEditors"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -100,10 +100,6 @@ public ReactorClientHttpConnector(HttpClient httpClient) {\n \tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n \n-\t\tif (!uri.isAbsolute()) {\n-\t\t\treturn Mono.error(new IllegalArgumentException(\"URI is not absolute: \" + uri));\n-\t\t}\n-\n \t\tAtomicReference<ReactorClientHttpResponse> responseRef = new AtomicReference<>();\n \n \t\treturn this.httpClient",
    "output": "Remove absolute URI check from ReactorClientHttpConnector This allows maknig use of the Unix Domain Socket support in Reactor 1.0"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java b/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n@@ -75,7 +75,7 @@ public abstract class TestContextAnnotationUtils {\n \tprivate static final ConcurrentLruCache<Class<?>, EnclosingConfiguration> cachedEnclosingConfigurationModes =\n \t\t\tnew ConcurrentLruCache<>(32, TestContextAnnotationUtils::lookUpEnclosingConfiguration);\n \n-\tprivate static EnclosingConfiguration defaultEnclosingConfigurationMode;\n+\tprivate static volatile EnclosingConfiguration defaultEnclosingConfigurationMode;\n \n \t/**\n \t * Find the first annotation of the specified {@code annotationType} within\n\ndiff --git a/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java\n@@ -57,6 +57,7 @@ class TestContextAnnotationUtilsTests {\n \tclass SearchEnclosingClassTests {\n \n \t\t@BeforeEach\n+\t\t@AfterEach\n \t\tvoid clearCaches() {\n \t\t\tTestContextAnnotationUtils.clearCaches();\n \t\t}",
    "output": "Attempt to fix failing CI builds"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java b/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextAnnotationUtils.java\n@@ -384,7 +384,7 @@ public static boolean searchEnclosingClass(Class<?> clazz) {\n \t\treturn (ClassUtils.isInnerClass(clazz) &&\n \t\t\t\tgetEnclosingConfiguration(clazz) == EnclosingConfiguration.INHERIT);\n \t}\n-\t\n+\n \tstatic void clearCaches() {\n \t\tdefaultEnclosingConfigurationMode = null;\n \t}\n\ndiff --git a/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/TestContextAnnotationUtilsTests.java\n@@ -55,7 +55,7 @@ class TestContextAnnotationUtilsTests {\n \t@Nested\n \t@DisplayName(\"searchEnclosingClass() tests\")\n \tclass SearchEnclosingClassTests {\n-\t\t\n+\n \t\t@BeforeEach\n \t\tvoid clearCaches() {\n \t\t\tTestContextAnnotationUtils.clearCaches();",
    "output": "Delete trailing whitespace"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/annotation/support/MessagingRSocket.java b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/annotation/support/MessagingRSocket.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/rsocket/annotation/support/MessagingRSocket.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/annotation/support/MessagingRSocket.java\n@@ -177,8 +177,7 @@ private Flux<Payload> handleAndReply(Payload firstPayload, FrameType frameType,\n \t\t\t\t\t}\n \t\t\t\t})\n \t\t\t\t.thenMany(Flux.defer(() -> responseRef.get() != null ?\n-\t\t\t\t\t\tresponseRef.get() :\n-\t\t\t\t\t\tMono.error(new IllegalStateException(\"Something went wrong: reply Mono not set\"))));\n+\t\t\t\t\t\tresponseRef.get() : Mono.error(new IllegalStateException(\"Expected response\"))));\n \t}\n \n \tprivate DataBuffer retainDataAndReleasePayload(Payload payload) {",
    "output": "Correct outdated error message"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -43,8 +43,6 @@\n import javax.annotation.Priority;\n import javax.security.auth.Subject;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.beans.BeansException;\n@@ -121,8 +119,6 @@\n  */\n class DefaultListableBeanFactoryTests {\n \n-\tprivate static final Log factoryLog = LogFactory.getLog(DefaultListableBeanFactory.class);\n-\n \tprivate DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();\n \n ",
    "output": "Remove unused field in DefaultListableBeanFactoryTests"
  },
  {
    "input": "diff --git a/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java b/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java\n--- a/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java\n+++ b/spring-core/src/jmh/java/org/springframework/core/codec/StringDecoderBenchmark.java\n@@ -84,12 +84,12 @@ public void setup() {\n \t\t\t\t\t\"data:abcdefg-$1-hijklmnop-$1-qrstuvw-$1-xyz-$1\\n\\n\";\n \n \t\t\tint eventLength = String.format(eventTemplate, String.format(\"%05d\", 1)).length();\n-\t\t\tint eventCount = totalSize / eventLength;\n+\t\t\tint eventCount = this.totalSize / eventLength;\n \t\t\tDataBufferFactory bufferFactory = new DefaultDataBufferFactory();\n \n \t\t\tthis.chunks = Flux.range(1, eventCount)\n \t\t\t\t\t.map(index -> String.format(eventTemplate, String.format(\"%05d\", index)))\n-\t\t\t\t\t.buffer(chunkSize > eventLength ? chunkSize / eventLength : 1)\n+\t\t\t\t\t.buffer(this.chunkSize > eventLength ? this.chunkSize / eventLength : 1)\n \t\t\t\t\t.map(strings -> String.join(\"\", strings))\n \t\t\t\t\t.map(chunk -> {\n \t\t\t\t\t\tbyte[] bytes = chunk.getBytes(CHARSET);",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java\n@@ -208,20 +208,10 @@ protected void prepareConnection(HttpURLConnection connection, String httpMethod\n \n \t\tconnection.setDoInput(true);\n \n-\t\tif (\"GET\".equals(httpMethod)) {\n-\t\t\tconnection.setInstanceFollowRedirects(true);\n-\t\t}\n-\t\telse {\n-\t\t\tconnection.setInstanceFollowRedirects(false);\n-\t\t}\n+\t\tconnection.setInstanceFollowRedirects(\"GET\".equals(httpMethod));\n \n-\t\tif (\"POST\".equals(httpMethod) || \"PUT\".equals(httpMethod) ||\n-\t\t\t\t\"PATCH\".equals(httpMethod) || \"DELETE\".equals(httpMethod)) {\n-\t\t\tconnection.setDoOutput(true);\n-\t\t}\n-\t\telse {\n-\t\t\tconnection.setDoOutput(false);\n-\t\t}\n+\t\tconnection.setDoOutput(\"POST\".equals(httpMethod) || \"PUT\".equals(httpMethod) ||\n+\t\t\t\t\"PATCH\".equals(httpMethod) || \"DELETE\".equals(httpMethod));\n \n \t\tconnection.setRequestMethod(httpMethod);\n \t}",
    "output": "Simplify code for SimpleClientHttpRequestFactory.prepareConnection"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java b/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java\n@@ -57,8 +57,11 @@ public interface Converter<S, T> {\n \t * @since 5.3\n \t */\n \tdefault <U> Converter<S, U> andThen(Converter<? super T, ? extends U> after) {\n-\t\tAssert.notNull(after, \"after must not be null\");\n-\t\treturn (S s) -> after.convert(convert(s));\n+\t\tAssert.notNull(after, \"After Converter must not be null\");\n+\t\treturn (S s) -> {\n+\t\t\tT initialResult = convert(s);\n+\t\t\treturn (initialResult != null ? after.convert(initialResult) : null);\n+\t\t};\n \t}\n \n }",
    "output": "Return early from composed Converter if initial conversion step returned null"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StreamUtils.java b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n@@ -84,7 +84,7 @@ public static String copyToString(@Nullable InputStream in, Charset charset) thr\n \t\t\treturn \"\";\n \t\t}\n \n-\t\tStringBuilder out = new StringBuilder();\n+\t\tStringBuilder out = new StringBuilder(BUFFER_SIZE);\n \t\tInputStreamReader reader = new InputStreamReader(in, charset);\n \t\tchar[] buffer = new char[BUFFER_SIZE];\n \t\tint charsRead;",
    "output": "Construct StringBuilder in StreamUtils with appropriate initial size"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n@@ -225,6 +225,8 @@ else if (jtaTransactionManager instanceof TransactionManager) {\n \t\t\t\t\t\"Unknown transaction manager type: \" + jtaTransactionManager.getClass().getName());\n \t\t}\n \n+\t\tgetProperties().put(AvailableSettings.TRANSACTION_COORDINATOR_STRATEGY, \"jta\");\n+\n \t\t// Hibernate 5.1/5.2: manually enforce connection release mode AFTER_STATEMENT (the JTA default)\n \t\ttry {\n \t\t\t// Try Hibernate 5.2",
    "output": "Revise native Hibernate 5 bootstrapping with JTA transaction manager"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java\n@@ -120,7 +120,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\tRequest request = this.httpClient.newRequest(uri).method(method.toString());\n \n \t\treturn requestCallback.apply(new JettyClientHttpRequest(request, this.bufferFactory))\n-\t\t\t\t.then(Mono.from(ReactiveRequest.newBuilder(request).build()\n+\t\t\t\t.then(Mono.fromDirect(ReactiveRequest.newBuilder(request).build()\n \t\t\t\t\t\t.response((reactiveResponse, chunkPublisher) -> {\n \t\t\t\t\t\t\tFlux<DataBuffer> content = Flux.from(chunkPublisher).map(this::toDataBuffer);\n \t\t\t\t\t\t\treturn Mono.just(new JettyClientHttpResponse(reactiveResponse, content));",
    "output": "Use Mono.fromDirect for Jetty ReactiveRespnose"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java\n@@ -113,7 +113,7 @@ public void setImmutable() {\n \tpublic void setHeader(String name, @Nullable Object value) {\n \t\tif (name.equalsIgnoreCase(NATIVE_HEADERS)) {\n \t\t\t// Force removal since setHeader checks for equality\n-\t\t\tremoveHeader(NATIVE_HEADERS);\n+\t\t\tsuper.setHeader(NATIVE_HEADERS, null);\n \t\t}\n \t\tsuper.setHeader(name, value);\n \t}",
    "output": "Fix recursion issue caused by previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n@@ -231,6 +231,14 @@ public void setPartConverters(List<HttpMessageConverter<?>> partConverters) {\n \t\tthis.partConverters = partConverters;\n \t}\n \n+\t/**\n+\t * Return the {@link #setPartConverters configured} converters for MIME parts.\n+\t * @since 5.3\n+\t */\n+\tpublic List<HttpMessageConverter<?>> getPartConverters() {\n+\t\treturn Collections.unmodifiableList(this.partConverters);\n+\t}\n+\n \t/**\n \t * Add a message body converter. Such a converter is used to convert objects\n \t * to MIME parts.",
    "output": "Exposes getter for part converters in FormHttpMessageConverter"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n@@ -146,6 +146,7 @@ protected boolean isHandler(Class<?> beanType) {\n \t * @see #getCustomTypeCondition(Class)\n \t */\n \t@Override\n+\t@Nullable\n \tprotected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n \t\tRequestMappingInfo info = createRequestMappingInfo(method);\n \t\tif (info != null) {",
    "output": "Add missing @Nullable to WebFlux RequestMappingHandlerMapping"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -53,6 +53,7 @@ public final class CallMetaDataProviderFactory {\n \n \t/** List of supported database products for function calls. */\n \tpublic static final List<String> supportedDatabaseProductsForFunctions = Arrays.asList(\n+\t\t\t\"MariaDB\",\n \t\t\t\"Microsoft SQL Server\",\n \t\t\t\"MySQL\",\n \t\t\t\"Oracle\",",
    "output": "Add MariaDB to the supported database products for functions as well"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -43,6 +43,7 @@ public final class CallMetaDataProviderFactory {\n \t\t\t\"Apache Derby\",\n \t\t\t\"DB2\",\n \t\t\t\"Informix Dynamic Server\",\n+\t\t\t\"MariaDB\",\n \t\t\t\"Microsoft SQL Server\",\n \t\t\t\"MySQL\",\n \t\t\t\"Oracle\",",
    "output": "Add MariaDB to the list of supported database products for procedures"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java\n--- a/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java\n+++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java\n@@ -297,8 +297,7 @@ void cookies() {\n \n \t\tassertThat(cookieHeaders)\n \t\t\t\t.describedAs(\"Cookies -> Header conversion works as expected per RFC6265\")\n-\t\t\t\t.hasSize(1)\n-\t\t\t\t.hasOnlyOneElementSatisfying(header -> assertThat(header).isEqualTo(\"foo=bar; baz=qux\"));\n+\t\t\t\t.singleElement().isEqualTo(\"foo=bar; baz=qux\");\n \t}\n \n \t@Test",
    "output": "Avoid AssertJ deprecation warning"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StreamUtils.java b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java\n@@ -127,6 +127,7 @@ public static void copy(byte[] in, OutputStream out) throws IOException {\n \t\tAssert.notNull(out, \"No OutputStream specified\");\n \n \t\tout.write(in);\n+\t\tout.flush();\n \t}\n \n \t/**",
    "output": "Consistent flushing of given OutputStream"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n@@ -70,7 +70,6 @@ public DataClassRowMapper(Class<T> mappedClass) {\n \t}\n \n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tprotected void initialize(Class<T> mappedClass) {\n \t\tsuper.initialize(mappedClass);",
    "output": "Remove unnecessary @SuppressWarnings"
  },
  {
    "input": "diff --git a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/io/buffer/AbstractDataBufferAllocatingTests.java b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/io/buffer/AbstractDataBufferAllocatingTests.java\n--- a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/io/buffer/AbstractDataBufferAllocatingTests.java\n+++ b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/io/buffer/AbstractDataBufferAllocatingTests.java\n@@ -153,6 +153,7 @@ private static long getAllocations(List<PoolArenaMetric> metrics) {\n \tpublic @interface ParameterizedDataBufferAllocatingTest {\n \t}\n \n+\t@SuppressWarnings(\"deprecation\") // PooledByteBufAllocator no longer supports tinyCacheSize.\n \tpublic static Stream<Arguments> dataBufferFactories() {\n \t\treturn Stream.of(\n \t\t\targuments(\"NettyDataBufferFactory - UnpooledByteBufAllocator - preferDirect = true\",",
    "output": "Suppress deprecation warning in AbstractDataBufferAllocatingTests"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/DataClassRowMapper.java\n@@ -22,8 +22,6 @@\n \n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.TypeConverter;\n-import org.springframework.core.DefaultParameterNameDiscoverer;\n-import org.springframework.core.ParameterNameDiscoverer;\n import org.springframework.core.convert.ConversionService;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n@@ -45,8 +43,6 @@\n  */\n public class DataClassRowMapper<T> extends BeanPropertyRowMapper<T> {\n \n-\tprivate static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();\n-\n \t@Nullable\n \tprivate Constructor<T> mappedConstructor;\n ",
    "output": "Delete unused code in DataClassRowMapper"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java b/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java\n--- a/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java\n+++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java\n@@ -173,7 +173,7 @@ public class MimeMessageHelper {\n \n \tprivate FileTypeMap fileTypeMap;\n \n-\tprivate boolean encodeFilenames = true;\n+\tprivate boolean encodeFilenames = false;\n \n \tprivate boolean validateAddresses = false;\n \n@@ -490,9 +490,11 @@ public FileTypeMap getFileTypeMap() {\n \t/**\n \t * Set whether to encode attachment filenames passed to this helper's\n \t * {@code #addAttachment} methods.\n-\t * <p>The default is {@code true} for compatibility with older email clients;\n-\t * turn this to {@code false} for standard MIME behavior. On a related note,\n+\t * <p>The default is {@code false} for standard MIME behavior; turn this to\n+\t * {@code true} for compatibility with older email clients. On a related note,\n \t * check out JavaMail's {@code mail.mime.encodefilename} system property.\n+\t * <p><b>NOTE:</b> The default changed to {@code false} in 5.3, in favor of\n+\t * JavaMail's standard {@code mail.mime.encodefilename} system property.\n \t * @since 5.2.9\n \t * @see #addAttachment(String, DataSource)\n \t * @see MimeBodyPart#setFileName(String)",
    "output": "MimeMessageHelper does not encode attachment filenames by default anymore"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -861,7 +861,7 @@ public List<String> getConnection() {\n \tpublic void setContentDispositionFormData(String name, @Nullable String filename) {\n \t\tAssert.notNull(name, \"Name must not be null\");\n \t\tContentDisposition.Builder disposition = ContentDisposition.builder(\"form-data\").name(name);\n-\t\tif (filename != null) {\n+\t\tif (StringUtils.hasText(filename)) {\n \t\t\tdisposition.filename(filename);\n \t\t}\n \t\tsetContentDisposition(disposition.build());\n@@ -888,7 +888,7 @@ public void setContentDisposition(ContentDisposition contentDisposition) {\n \t */\n \tpublic ContentDisposition getContentDisposition() {\n \t\tString contentDisposition = getFirst(CONTENT_DISPOSITION);\n-\t\tif (contentDisposition != null) {\n+\t\tif (StringUtils.hasText(contentDisposition)) {\n \t\t\treturn ContentDisposition.parse(contentDisposition);\n \t\t}\n \t\treturn ContentDisposition.empty();",
    "output": "Lenient handling of empty Content-Disposition filename"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -29,6 +29,7 @@\n import io.netty.buffer.ByteBufAllocator;\n import io.rsocket.ConnectionSetupPayload;\n import io.rsocket.DuplexConnection;\n+import io.rsocket.RSocketErrorException;\n import io.rsocket.core.DefaultConnectionSetupPayload;\n import io.rsocket.core.RSocketConnector;\n import io.rsocket.frame.decoder.PayloadDecoder;\n@@ -242,14 +243,12 @@ public ByteBuf setupFrame() {\n \t\t}\n \n \t\t@Override\n-\t\tpublic Mono<Void> send(Publisher<ByteBuf> frames) {\n-\t\t\treturn Mono.empty();\n+\t\tpublic void sendFrame(int i, ByteBuf byteBuf) {\n+\t\t\tthis.setupFrame = this.setupFrame == null ? byteBuf : this.setupFrame;\n \t\t}\n \n \t\t@Override\n-\t\tpublic Mono<Void> sendOne(ByteBuf frame) {\n-\t\t\tthis.setupFrame = frame;\n-\t\t\treturn Mono.empty();\n+\t\tpublic void sendErrorAndClose(RSocketErrorException e) {\n \t\t}\n \n \t\t@Override",
    "output": "Upgrade to RSocket 1.1-M2 and Reactor 2020.0.0-RC1"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java\n@@ -366,6 +366,8 @@ private void addMatchingMappings(Collection<T> mappings, List<Match> matches, Se\n \t * @param exchange the current exchange\n \t */\n \tprotected void handleMatch(T mapping, HandlerMethod handlerMethod, ServerWebExchange exchange) {\n+\t\tString lookupPath = exchange.getRequest().getPath().pathWithinApplication().value();\n+\t\texchange.getAttributes().put(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, lookupPath);\n \t}\n \n \t/**",
    "output": "Align WebFlux with WebMvc for pathWithinHandlerMapping"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java\n--- a/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,25 +20,20 @@\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n- * A simple {@link IdGenerator} that starts at 1 and increments by 1 with each call.\n+ * A simple {@link IdGenerator} that starts at 1, increments up to\n+ * {@link Long#MAX_VALUE}, and then rolls over.\n  *\n  * @author Rossen Stoyanchev\n  * @since 4.1.5\n  */\n public class SimpleIdGenerator implements IdGenerator {\n \n-\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\n-\n \tprivate final AtomicLong leastSigBits = new AtomicLong(0);\n \n \n \t@Override\n \tpublic UUID generateId() {\n-\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\n-\t\tif (leastSigBits == 0) {\n-\t\t\tthis.mostSigBits.incrementAndGet();\n-\t\t}\n-\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\n+\t\treturn new UUID(0, this.leastSigBits.incrementAndGet());\n \t}\n \n }",
    "output": "SimpleIdGenerator rolls over at Long.MAX_VALUE"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -17,6 +17,8 @@\n package org.springframework.messaging.rsocket;\n \n import java.lang.reflect.Field;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n import java.time.Duration;\n import java.util.Collections;\n import java.util.List;\n@@ -273,6 +275,12 @@ public void dispose() {\n \t\tpublic boolean isDisposed() {\n \t\t\treturn false;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic SocketAddress remoteAddress() {\n+\t\t\treturn InetSocketAddress.createUnresolved(\"localhost\", 9090);\n+\t\t}\n+\n \t}\n \n ",
    "output": "Upgrade after RSocket SNAPSHOT changes"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java b/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java\n@@ -89,15 +89,8 @@ public File getFile() throws IOException {\n \t@Override\n \tpublic boolean isWritable() {\n \t\ttry {\n-\t\t\tURL url = getURL();\n-\t\t\tif (ResourceUtils.isFileURL(url)) {\n-\t\t\t\t// Proceed with file system resolution\n-\t\t\t\tFile file = getFile();\n-\t\t\t\treturn (file.canWrite() && !file.isDirectory());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\tFile file = getFile();\n+\t\t\treturn (file.canWrite() && !file.isDirectory());\n \t\t}\n \t\tcatch (IOException ex) {\n \t\t\treturn false;",
    "output": "FileUrlResource.isWritableexclusively relies on getFileimplementation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n@@ -286,14 +286,14 @@ private Object readJavaType(JavaType javaType, HttpInputMessage inputMessage) th\n \t}\n \n \t/**\n-\t * Return the charset to use for JSON input.\n+\t * Determine the charset to use for JSON input.\n \t * <p>By default this is either the charset from the input {@code MediaType}\n-\t * or otherwise falling back on {@code UTF-8}.\n+\t * or otherwise falling back on {@code UTF-8}. Can be overridden in subclasses.\n \t * @param contentType the content type of the HTTP input message\n \t * @return the charset to use\n \t * @since 5.1.18\n \t */\n-\tprotected static Charset getCharset(@Nullable MediaType contentType) {\n+\tprotected Charset getCharset(@Nullable MediaType contentType) {\n \t\tif (contentType != null && contentType.getCharset() != null) {\n \t\t\treturn contentType.getCharset();\n \t\t}",
    "output": "Declare protected getCharset method as non-static"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslatorTests.java\n@@ -192,7 +192,7 @@ public void dataSourceInitialization() throws Exception {\n \t\tgiven(dataSource.getConnection()).willThrow(connectionException);\n \n \t\tSQLErrorCodeSQLExceptionTranslator sext = new SQLErrorCodeSQLExceptionTranslator(dataSource);\n-\t\tassertThat(sext.translate(\"test\", null, duplicateKeyException)).isNotInstanceOf(DuplicateKeyException.class);\n+\t\tassertThat(sext.translate(\"test\", null, duplicateKeyException)).isNull();\n \n \t\tDatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n \t\tgiven(databaseMetaData.getDatabaseProductName()).willReturn(\"Oracle\");",
    "output": "Fix assertion for the revised SQLExceptionTranslator contract in 5.3"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n--- a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.util.unit;\n \n+import java.io.Serializable;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -48,7 +49,8 @@\n  * @since 5.1\n  * @see DataUnit\n  */\n-public final class DataSize implements Comparable<DataSize> {\n+@SuppressWarnings(\"serial\")\n+public final class DataSize implements Comparable<DataSize>, Serializable {\n \n \t/**\n \t * The pattern for parsing.",
    "output": "Make DataSize serializable"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n@@ -39,6 +39,7 @@\n import org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry;\n import org.springframework.aop.target.SingletonTargetSource;\n import org.springframework.beans.BeansException;\n+import org.springframework.beans.PropertyValues;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n import org.springframework.beans.factory.FactoryBean;\n@@ -270,6 +271,11 @@ public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tpublic PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) {\n+\t\treturn pvs;  // skip postProcessPropertyValues\n+\t}\n+\n \t/**\n \t * Create a proxy with the configured interceptors if the bean is\n \t * identified as one to proxy by the subclass.",
    "output": "Redeclare postProcessProperties callback to skip postProcessPropertyValues"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n@@ -58,22 +58,6 @@ public class ModelAssertionTests {\n \t\t\t\t\t.alwaysExpect(status().isOk())\n \t\t\t\t\t.build();\n \n-\t@Test\n-\tvoid name() throws Exception {\n-\n-\tEntityExchangeResult<Void> result = client.get().uri(\"/path\")\n-\t\t\t.exchange()\n-\t\t\t.expectBody().isEmpty();\n-\n-\tMockMvcWebTestClient.resultActionsFor(result)\n-\t\t\t.andExpect(model().attribute(\"integer\", 3))\n-\t\t\t.andExpect(model().attribute(\"string\", \"a string value\"))\n-\t\t\t.andExpect(model().attribute(\"integer\", equalTo(3))) // Hamcrest...\n-\t\t\t.andExpect(model().attribute(\"string\", equalTo(\"a string value\")))\n-\t\t\t.andExpect(model().attribute(\"globalAttrName\", equalTo(\"Global Attribute Value\")));\n-\n-\t}\n-\n \t@Test\n \tvoid attributeEqualTo() throws Exception {\n \t\tperformRequest(HttpMethod.GET, \"/\")",
    "output": "Remove erroneously committed change"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java\n@@ -49,7 +49,7 @@ public class ReplaceOverride extends MethodOverride {\n \t */\n \tpublic ReplaceOverride(String methodName, String methodReplacerBeanName) {\n \t\tsuper(methodName);\n-\t\tAssert.notNull(methodName, \"Method replacer bean name must not be null\");\n+\t\tAssert.notNull(methodReplacerBeanName, \"Method replacer bean name must not be null\");\n \t\tthis.methodReplacerBeanName = methodReplacerBeanName;\n \t}\n ",
    "output": "change assert in replaceOverride constructor from methodName to methodReplacerBeanName"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/client/standalone/resultmatches/ModelAssertionTests.java\n@@ -58,6 +58,22 @@ public class ModelAssertionTests {\n \t\t\t\t\t.alwaysExpect(status().isOk())\n \t\t\t\t\t.build();\n \n+\t@Test\n+\tvoid name() throws Exception {\n+\n+\tEntityExchangeResult<Void> result = client.get().uri(\"/path\")\n+\t\t\t.exchange()\n+\t\t\t.expectBody().isEmpty();\n+\n+\tMockMvcWebTestClient.resultActionsFor(result)\n+\t\t\t.andExpect(model().attribute(\"integer\", 3))\n+\t\t\t.andExpect(model().attribute(\"string\", \"a string value\"))\n+\t\t\t.andExpect(model().attribute(\"integer\", equalTo(3))) // Hamcrest...\n+\t\t\t.andExpect(model().attribute(\"string\", equalTo(\"a string value\")))\n+\t\t\t.andExpect(model().attribute(\"globalAttrName\", equalTo(\"Global Attribute Value\")));\n+\n+\t}\n+\n \t@Test\n \tvoid attributeEqualTo() throws Exception {\n \t\tperformRequest(HttpMethod.GET, \"/\")",
    "output": "More updates to Web testing section"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n@@ -47,7 +47,6 @@\n import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\n import com.thoughtworks.xstream.core.ClassLoaderReference;\n import com.thoughtworks.xstream.core.DefaultConverterLookup;\n-import com.thoughtworks.xstream.core.util.CompositeClassLoader;\n import com.thoughtworks.xstream.io.HierarchicalStreamDriver;\n import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n@@ -186,7 +185,8 @@ public class XStreamMarshaller extends AbstractMarshaller implements BeanClassLo\n \t@Nullable\n \tprivate Class<?>[] supportedClasses;\n \n-\tprivate ClassLoader beanClassLoader = new CompositeClassLoader();\n+\t@Nullable\n+\tprivate ClassLoader beanClassLoader = ClassUtils.getDefaultClassLoader();\n \n \tprivate final SingletonSupplier<XStream> xstream = SingletonSupplier.of(this::buildXStream);\n ",
    "output": "Avoid direct use of non-exported XStream CompositeClassLoader class"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,8 @@\n \n package org.springframework.web.socket;\n \n+import java.io.Serializable;\n+\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.ObjectUtils;\n@@ -30,7 +32,10 @@\n  * @author Rossen Stoyanchev\n  * @since 4.0\n  */\n-public final class CloseStatus {\n+public final class CloseStatus implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 5199057709285570947L;\n+\n \n \t/**\n \t * \"1000 indicates a normal closure, meaning that the purpose for which the connection",
    "output": "CloseStatus implements Serializable"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java\n@@ -158,7 +158,7 @@ else if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n \t\tif (selected != null) {\n \t\t\tselected = selected.removeQualityValue();\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Using '\" + selected + \"' given \" + acceptableTypes +\n+\t\t\t\tlogger.debug(exchange.getLogPrefix() + \"Using '\" + selected + \"' given \" + acceptableTypes +\n \t\t\t\t\t\t\" and supported \" + producibleTypes);\n \t\t\t}\n \t\t}",
    "output": "Add logPrefix to the log statement Add logPrefix to the log statement to provide better debugging experience"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -386,7 +386,7 @@ else if (mbd.isPrototype()) {\n \t\t\t}\n \t\t\tcatch (BeansException ex) {\n \t\t\t\tbeanCreation.tag(\"exception\", ex.getClass().toString());\n-\t\t\t\tbeanCreation.tag(\"message\", ex.getMessage());\n+\t\t\t\tbeanCreation.tag(\"message\", String.valueOf(ex.getMessage()));\n \t\t\t\tcleanupAfterBeanCreationFailure(beanName);\n \t\t\t\tthrow ex;\n \t\t\t}",
    "output": "Defensive null handling for exception message"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java\n@@ -218,7 +218,7 @@ protected Locale getDefaultLocale() {\n \t * a non-classpath location.\n \t */\n \tpublic void setCacheSeconds(int cacheSeconds) {\n-\t\tthis.cacheMillis = (cacheSeconds * 1000);\n+\t\tthis.cacheMillis = cacheSeconds * 1000L;\n \t}\n \n \t/**\n\ndiff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n@@ -146,7 +146,7 @@ public void setWaitForTasksToCompleteOnShutdown(boolean waitForJobsToCompleteOnS\n \t * @see java.util.concurrent.ExecutorService#awaitTermination\n \t */\n \tpublic void setAwaitTerminationSeconds(int awaitTerminationSeconds) {\n-\t\tthis.awaitTerminationMillis = awaitTerminationSeconds * 1000;\n+\t\tthis.awaitTerminationMillis = awaitTerminationSeconds * 1000L;\n \t}\n \n \t/**",
    "output": "Avoid potential integer overflow in seconds->millis transformation"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -300,9 +300,9 @@ else if (requiredType != null) {\n \t\t\t\tmarkBeanAsCreated(beanName);\n \t\t\t}\n \n+\t\t\tStartupStep beanCreation = this.applicationStartup.start(\"spring.beans.instantiate\")\n+\t\t\t\t\t.tag(\"beanName\", name);\n \t\t\ttry {\n-\t\t\t\tStartupStep beanCreation = this.applicationStartup.start(\"spring.beans.instantiate\")\n-\t\t\t\t\t\t.tag(\"beanName\", name);\n \t\t\t\tif (requiredType != null) {\n \t\t\t\t\tbeanCreation.tag(\"beanType\", requiredType::toString);\n \t\t\t\t}\n@@ -383,12 +383,16 @@ else if (mbd.isPrototype()) {\n \t\t\t\t\t\tthrow new ScopeNotActiveException(beanName, scopeName, ex);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tbeanCreation.end();\n \t\t\t}\n \t\t\tcatch (BeansException ex) {\n+\t\t\t\tbeanCreation.tag(\"exception\", ex.getClass().toString());\n+\t\t\t\tbeanCreation.tag(\"message\", ex.getMessage());\n \t\t\t\tcleanupAfterBeanCreationFailure(beanName);\n \t\t\t\tthrow ex;\n \t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tbeanCreation.end();\n+\t\t\t}\n \t\t}\n \n \t\t// Check if required type matches the type of the actual bean instance.",
    "output": "Call StartupStep.end in finally block Prior to this commit it was possible that a StartupStep was started but never ended. This was the case when an exception occured during bean initializing. To always call the method regardless of the outcome, the call to StartupStep.end has been moved to a finally block. When an exception occurs the StartupStep is also enriched with the exception class and message for diagnostic purposes"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java b/spring-test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java\n@@ -112,7 +112,7 @@ public final ConfigurableApplicationContext loadContext(MergedContextConfigurati\n \n \t\tvalidateMergedContextConfiguration(mergedConfig);\n \n-\t\tGenericApplicationContext context = new GenericApplicationContext();\n+\t\tGenericApplicationContext context = createContext();\n \n \t\tApplicationContext parent = mergedConfig.getParentApplicationContext();\n \t\tif (parent != null) {\n@@ -130,6 +130,15 @@ public final ConfigurableApplicationContext loadContext(MergedContextConfigurati\n \t\treturn context;\n \t}\n \n+\t/**\n+\t * Creates instance of application context used by this {@code ContextLoader}\n+\t *\n+\t * @return new Instance of application context\n+\t */\n+\tprotected GenericApplicationContext createContext() {\n+\t\treturn new GenericApplicationContext();\n+\t}\n+\n \t/**\n \t * Validate the supplied {@link MergedContextConfiguration} with respect to\n \t * what this context loader supports.\n@@ -184,7 +193,7 @@ public final ConfigurableApplicationContext loadContext(String... locations) thr\n \t\t\tlogger.debug(String.format(\"Loading ApplicationContext for locations [%s].\",\n \t\t\t\tStringUtils.arrayToCommaDelimitedString(locations)));\n \t\t}\n-\t\tGenericApplicationContext context = new GenericApplicationContext();\n+\t\tGenericApplicationContext context = createContext();\n \t\tprepareContext(context);\n \t\tcustomizeBeanFactory(context.getDefaultListableBeanFactory());\n \t\tcreateBeanDefinitionReader(context).loadBeanDefinitions(locations);",
    "output": "Introduce createContextfactory method in AbstractGenericContextLoader Prior to this commit it was possible to configure the DefaultListableBeanFactory used by the GenericApplicationContext created by AbstractGenericContextLoader, but it was not possible to completely replace the bean factory. This commit introduces a new createContextfactory method in AbstractGenericContextLoader which indirectly allows subclasses to supply a custom DefaultListableBeanFactory implementation to the GenericApplicationContext"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java b/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/MessagePostProcessor.java\n@@ -32,6 +32,7 @@\n  * @see JmsTemplate#convertAndSend(javax.jms.Destination, Object, MessagePostProcessor)\n  * @see org.springframework.jms.support.converter.MessageConverter\n  */\n+@FunctionalInterface\n public interface MessagePostProcessor {\n \n \t/**\n\ndiff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java b/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessagePostProcessor.java\n@@ -28,6 +28,7 @@\n  * @see MessageSendingOperations\n  * @see MessageRequestReplyOperations\n  */\n+@FunctionalInterface\n public interface MessagePostProcessor {\n \n \t/**",
    "output": "Add @FunctionalInterface to MessagePostProcessor Add the @FunctionalInterface annotation to the MessagePostProcessor interfaces in the spring-jms and spring-messaging projects"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java\n@@ -109,11 +109,11 @@ public void doesNotSupportType() throws Exception {\n \tpublic void deferredResultSubscriberWithOneValue() throws Exception {\n \n \t\t// Mono\n-\t\tMonoProcessor<String> mono = MonoProcessor.create();\n+\t\tMonoProcessor<String> mono = MonoProcessor.fromSink(Sinks.one());\n \t\ttestDeferredResultSubscriber(mono, Mono.class, forClass(String.class), () -> mono.onNext(\"foo\"), \"foo\");\n \n \t\t// Mono empty\n-\t\tMonoProcessor<String> monoEmpty = MonoProcessor.create();\n+\t\tMonoProcessor<String> monoEmpty = MonoProcessor.fromSink(Sinks.one());\n \t\ttestDeferredResultSubscriber(monoEmpty, Mono.class, forClass(String.class), monoEmpty::onComplete, null);\n \n \t\t// RxJava Single",
    "output": "Upgrade ReactiveTypeHandlerTests due to deprecations in Reactor"
  },
  {
    "input": "diff --git a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/http/server/reactive/MockServerHttpResponse.java b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/http/server/reactive/MockServerHttpResponse.java\n--- a/spring-web/src/testFixtures/java/org/springframework/web/testfixture/http/server/reactive/MockServerHttpResponse.java\n+++ b/spring-web/src/testFixtures/java/org/springframework/web/testfixture/http/server/reactive/MockServerHttpResponse.java\n@@ -26,6 +26,7 @@\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.MonoProcessor;\n+import reactor.core.publisher.Sinks;\n \n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n@@ -64,7 +65,7 @@ public MockServerHttpResponse(DataBufferFactory dataBufferFactory) {\n \t\tsuper(dataBufferFactory);\n \t\tthis.writeHandler = body -> {\n \t\t\t// Avoid .then() which causes data buffers to be released\n-\t\t\tMonoProcessor<Void> completion = MonoProcessor.create();\n+\t\t\tMonoProcessor<Void> completion = MonoProcessor.fromSink(Sinks.one());\n \t\t\tthis.body = body.doOnComplete(completion::onComplete).doOnError(completion::onError).cache();\n \t\t\tthis.body.subscribe();\n \t\t\treturn completion;",
    "output": "Sync MockServerHttpResponse changes"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java\n@@ -335,7 +335,6 @@ protected String toLocaleValue(Locale locale) {\n \t * @see #setDefaultLocale\n \t * @see javax.servlet.http.HttpServletRequest#getLocale()\n \t */\n-\t@Nullable\n \tprotected Locale determineDefaultLocale(HttpServletRequest request) {\n \t\tLocale defaultLocale = getDefaultLocale();\n \t\tif (defaultLocale == null) {",
    "output": "Remove @Nullable from CookieLocaleResolver#determineDefaultLocaleBy definition, this method should not return `null`"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n@@ -25,6 +25,7 @@\n \n import org.junit.jupiter.api.Test;\n \n+import static java.time.DayOfWeek.FRIDAY;\n import static java.time.DayOfWeek.MONDAY;\n import static java.time.DayOfWeek.TUESDAY;\n import static java.time.DayOfWeek.WEDNESDAY;\n@@ -444,4 +445,21 @@ public void fixedDays() {\n \t\tassertThat(actual.getDayOfWeek()).isEqualTo(WEDNESDAY);\n \t}\n \n+\t@Test\n+\tvoid friday13th() {\n+\t\tCronExpression expression = CronExpression.parse(\"0 0 0 13 * FRI\");\n+\n+\t\tLocalDateTime last = LocalDateTime.of(2018, 7, 31, 11, 47, 14);\n+\t\tLocalDateTime actual = expression.next(last);\n+\t\tassertThat(actual).isNotNull();\n+\t\tassertThat(actual.getDayOfWeek()).isEqualTo(FRIDAY);\n+\t\tassertThat(actual.getDayOfMonth()).isEqualTo(13);\n+\n+\t\tlast = actual;\n+\t\tactual = expression.next(last);\n+\t\tassertThat(actual).isNotNull();\n+\t\tassertThat(actual.getDayOfWeek()).isEqualTo(FRIDAY);\n+\t\tassertThat(actual.getDayOfMonth()).isEqualTo(13);\n+\t}\n+\n }",
    "output": "Add test for Friday 13th crontab failure Added test for Friday 13th trigger, i.e. an uncommon crontab expression. With the new CronExpression in place, this failure does not occur anymore"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronExpressionTests.java\n@@ -431,4 +431,17 @@ void monthSequence() {\n \t\tassertThat(expression.next(last)).isEqualTo(expected);\n \t}\n \n+\t@Test\n+\tpublic void fixedDays() {\n+\t\tCronExpression expression = CronExpression.parse(\"0 0 0 29 2 WED\");\n+\n+\t\tLocalDateTime last = LocalDateTime.of(2012, 2, 29, 1, 0);\n+\t\tassertThat(last.getDayOfWeek()).isEqualTo(WEDNESDAY);\n+\n+\t\tLocalDateTime actual = expression.next(last);\n+\t\tassertThat(actual).isNotNull();\n+\t\tassertThat(actual.getDayOfMonth()).isEqualTo(29);\n+\t\tassertThat(actual.getDayOfWeek()).isEqualTo(WEDNESDAY);\n+\t}\n+\n }",
    "output": "Add test for combination of fixed date fields Added test for a fixed day-of-week and day-of-month combination. With the new CronExpression in place, this failure does not occur anymore"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -211,7 +211,7 @@ public Iterator<MergedAnnotation<Annotation>> iterator() {\n \t@Override\n \tpublic Spliterator<MergedAnnotation<Annotation>> spliterator() {\n \t\tif (this.annotationFilter == AnnotationFilter.ALL) {\n-\t\t\treturn Collections.<MergedAnnotation<Annotation>> emptyList().spliterator();\n+\t\t\treturn Spliterators.emptySpliterator();\n \t\t}\n \t\treturn spliterator(null);\n \t}",
    "output": "Use Spliterators.emptySpliteratorin TypeMappedAnnotations For greater clarity, this commit invokes Spliterators.emptySpliteratordirectly instead of going through java.util.Collections.EmptyList"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java\n@@ -78,6 +78,9 @@ protected WebSocketMessage toMessage(WebSocketFrame frame) {\n \t}\n \n \tprotected WebSocketFrame toFrame(WebSocketMessage message) {\n+\t\tif (message.getNativeMessage() != null) {\n+\t\t\treturn message.getNativeMessage();\n+\t\t}\n \t\tByteBuf byteBuf = NettyDataBufferFactory.toByteBuf(message.getPayload());\n \t\tif (WebSocketMessage.Type.TEXT.equals(message.getType())) {\n \t\t\treturn new TextWebSocketFrame(byteBuf);",
    "output": "Check for native WebSocket message In addition to the changes in 313a7836b091d20dbb9763b3677d559fea32d13d to support passing on a the underlying WebSocket message, this commits checks for its availability"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -726,7 +726,7 @@ protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory b\n \n \t\t// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime\n \t\t// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)\n-\t\tif (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n+\t\tif (!IN_NATIVE_IMAGE && beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n \t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n \t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n \t\t}",
    "output": "Skip LoadTimeWeaverAwareProcessor with native images"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -341,12 +341,13 @@ private void addToDestination(String destination, String sessionId, String subsc\n \n \t\tpublic void updateAfterRemovedSubscription(String sessionId, Subscription subscription) {\n \t\t\tif (subscription.isPattern()) {\n-\t\t\t\tString patternDestination = subscription.getDestination();\n-\t\t\t\tfor (String destination : this.destinationCache.keySet()) {\n-\t\t\t\t\tif (pathMatcher.match(patternDestination, destination)) {\n-\t\t\t\t\t\tremoveInternal(destination, sessionId, subscription.getId());\n+\t\t\t\tString subscriptionId = subscription.getId();\n+\t\t\t\tthis.destinationCache.forEach((destination, sessionIdToSubscriptionIds) -> {\n+\t\t\t\t\tList<String> subscriptionIds = sessionIdToSubscriptionIds.get(sessionId);\n+\t\t\t\t\tif (subscriptionIds != null && subscriptionIds.contains(subscriptionId)) {\n+\t\t\t\t\t\tremoveInternal(destination, sessionId, subscriptionId);\n \t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\t\t});\n \t\t\t}\n \t\t\telse {\n \t\t\t\tremoveInternal(subscription.getDestination(), sessionId, subscription.getId());",
    "output": "Match subscriptions to remove by id Commit 524ca1a6767a8912e1a4c58c797e5099794b442b unintentionally changed how subscriptions to be removed are matched. This commit restores that"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -510,7 +510,7 @@ public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {\n \n \tprotected void addCacheHeaders(ServerHttpResponse response) {\n \t\tresponse.getHeaders().setCacheControl(\"public, max-age=\" + ONE_YEAR);\n-\t\tresponse.getHeaders().setExpires(new Date().getTime() + ONE_YEAR * 1000);\n+\t\tresponse.getHeaders().setExpires(System.currentTimeMillis() + ONE_YEAR * 1000);\n \t}\n \n \tprotected void addNoCacheHeaders(ServerHttpResponse response) {",
    "output": "Use System.currentTimeMillisin AbstractSockJsService"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java\n@@ -275,7 +275,7 @@ protected void assertException(Method method, String pointcut, String returning,\n \n \n \tprivate static String format(String[] names) {\n-\t\tStringBuffer sb = new StringBuffer();\n+\t\tStringBuilder sb = new StringBuilder();\n \t\tsb.append(\"(\");\n \t\tfor (int i = 0; i < names.length; i++) {\n \t\t\tsb.append(names[i]);",
    "output": "Use StringBuilder instead of StringBuffer in tests"
  },
  {
    "input": "diff --git a/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java b/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java\n--- a/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java\n+++ b/spring-context-indexer/src/test/java/org/springframework/context/index/test/TestCompiler.java\n@@ -63,8 +63,7 @@ public TestCompiler(JavaCompiler compiler, Path tempDir) throws IOException {\n \n \n \tpublic TestCompilationTask getTask(Class<?>... types) {\n-\t\tList<String> names = Arrays.stream(types).map(Class::getName).collect(Collectors.toList());\n-\t\treturn getTask(names.toArray(new String[names.size()]));\n+\t\treturn getTask(Arrays.stream(types).map(Class::getName).toArray(String[]::new));\n \t}\n \n \tpublic TestCompilationTask getTask(String... types) {",
    "output": "Use Stream#toArray in TestCompiler"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -42,7 +42,7 @@\n  */\n public class StandardWebSocketHandlerAdapter extends Endpoint {\n \n-\tprivate static final Log logger = LogFactory.getLog(StandardWebSocketHandlerAdapter.class);\n+\tprivate final Log logger = LogFactory.getLog(StandardWebSocketHandlerAdapter.class);\n \n \tprivate final WebSocketHandler handler;\n ",
    "output": "Defer creating logger in StandardWebSocketHandlerAdapter to instantiation time"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/PathResourceLookupFunction.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/PathResourceLookupFunction.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/PathResourceLookupFunction.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/PathResourceLookupFunction.java\n@@ -110,10 +110,7 @@ private boolean isInvalidPath(String path) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n-\t\tif (path.contains(\"..\") && StringUtils.cleanPath(path).contains(\"../\")) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\treturn false;\n+\t\treturn path.contains(\"..\") && StringUtils.cleanPath(path).contains(\"../\");\n \t}\n \n \tprivate boolean isResourceUnderLocation(Resource resource) throws IOException {\n@@ -144,10 +141,8 @@ else if (resource instanceof ClassPathResource) {\n \t\tif (!resourcePath.startsWith(locationPath)) {\n \t\t\treturn false;\n \t\t}\n-\t\tif (resourcePath.contains(\"%\") && StringUtils.uriDecode(resourcePath, StandardCharsets.UTF_8).contains(\"../\")) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn true;\n+\t\treturn !resourcePath.contains(\"%\") ||\n+\t\t\t\t!StringUtils.uriDecode(resourcePath, StandardCharsets.UTF_8).contains(\"../\");\n \t}\n \n ",
    "output": "Simplify PathResourceLookupFunction This commit simplified two return statements"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -652,8 +652,8 @@ public <T> Map<String, T> getBeansOfType(\n \tpublic String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType) {\n \t\tList<String> result = new ArrayList<>();\n \t\tfor (String beanName : this.beanDefinitionNames) {\n-\t\t\tBeanDefinition beanDefinition = this.beanDefinitionMap.get(beanName);\n-\t\t\tif (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {\n+\t\t\tBeanDefinition bd = this.beanDefinitionMap.get(beanName);\n+\t\t\tif (bd != null && !bd.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {\n \t\t\t\tresult.add(beanName);\n \t\t\t}\n \t\t}\n@@ -1057,8 +1057,7 @@ protected void resetBeanDefinition(String beanName) {\n \t\tfor (String bdName : this.beanDefinitionNames) {\n \t\t\tif (!beanName.equals(bdName)) {\n \t\t\t\tBeanDefinition bd = this.beanDefinitionMap.get(bdName);\n-\t\t\t\t// Ensure bd is non-null due to potential concurrent modification\n-\t\t\t\t// of the beanDefinitionMap.\n+\t\t\t\t// Ensure bd is non-null due to potential concurrent modification of beanDefinitionMap.\n \t\t\t\tif (bd != null && beanName.equals(bd.getParentName())) {\n \t\t\t\t\tresetBeanDefinition(bdName);\n \t\t\t\t}",
    "output": "Defensively access existing beanDefinitionMap entries"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -99,7 +99,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \t\t\tthrows ServletException, IOException {\n \n \t\tHttpServletResponse responseToUse = response;\n-\t\tif (!isAsyncDispatch(request) && !(response instanceof ContentCachingResponseWrapper)) {\n+\t\tif (!isAsyncDispatch(request) && !(response instanceof ConditionalContentCachingResponseWrapper)) {\n \t\t\tresponseToUse = new ConditionalContentCachingResponseWrapper(response, request);\n \t\t}\n \n@@ -111,10 +111,8 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \t}\n \n \tprivate void updateResponse(HttpServletRequest request, HttpServletResponse response) throws IOException {\n-\n-\t\tContentCachingResponseWrapper wrapper =\n-\t\t\t\tWebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);\n-\n+\t\tConditionalContentCachingResponseWrapper wrapper =\n+\t\t\t\tWebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);\n \t\tAssert.notNull(wrapper, \"ContentCachingResponseWrapper not found\");\n \t\tHttpServletResponse rawResponse = (HttpServletResponse) wrapper.getResponse();\n \n@@ -219,7 +217,6 @@ private static class ConditionalContentCachingResponseWrapper extends ContentCac\n \n \t\tprivate final HttpServletRequest request;\n \n-\n \t\tConditionalContentCachingResponseWrapper(HttpServletResponse response, HttpServletRequest request) {\n \t\t\tsuper(response);\n \t\t\tthis.request = request;",
    "output": "Enforce ConditionalContentCachingResponseWrapper in ShallowEtagHeaderFilter"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java\n@@ -726,6 +726,7 @@ private void growCollectionIfNecessary() {\n \t\t\t}\n \t\t}\n \n+\t\t@Nullable\n \t\tprivate Constructor<?> getDefaultConstructor(Class<?> type) {\n \t\t\ttry {\n \t\t\t\treturn ReflectionUtils.accessibleConstructor(type);",
    "output": "Add @Nullable declaration to getDefaultConstructor"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -263,8 +263,9 @@ public LinkedMultiValueMap<String, String> getSubscriptions(String destination)\n \t\t\tif (sessionIdToSubscriptionIds == null) {\n \t\t\t\tsessionIdToSubscriptionIds = this.destinationCache.computeIfAbsent(destination, _destination -> {\n \t\t\t\t\tLinkedMultiValueMap<String, String> matches = computeMatchingSubscriptions(destination);\n-\t\t\t\t\tthis.cacheSize.incrementAndGet();\n+\t\t\t\t\t// Update queue first, so that cacheSize <= queue.size(\n \t\t\t\t\tthis.cacheEvictionPolicy.add(destination);\n+\t\t\t\t\tthis.cacheSize.incrementAndGet();\n \t\t\t\t\treturn matches;\n \t\t\t\t});\n \t\t\t\tensureCacheLimit();\n@@ -309,7 +310,9 @@ private void ensureCacheLimit() {\n \t\t\tif (size > cacheLimit) {\n \t\t\t\tdo {\n \t\t\t\t\tif (this.cacheSize.compareAndSet(size, size - 1)) {\n-\t\t\t\t\t\tthis.destinationCache.remove(this.cacheEvictionPolicy.poll());\n+\t\t\t\t\t\t// Remove (vs poll): we expect an element\n+\t\t\t\t\t\tString head = this.cacheEvictionPolicy.remove();\n+\t\t\t\t\t\tthis.destinationCache.remove(head);\n \t\t\t\t\t}\n \t\t\t\t} while ((size = this.cacheSize.get()) > cacheLimit);\n \t\t\t}",
    "output": "Upgrade eviction queue before size"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n@@ -101,7 +101,11 @@ public DefaultServerRequest(HttpServletRequest servletRequest, List<HttpMessageC\n \t\tthis.params = CollectionUtils.toMultiValueMap(new ServletParametersMap(servletRequest));\n \t\tthis.attributes = new ServletAttributesMap(servletRequest);\n \n-\t\tthis.requestPath = ServletRequestPathUtils.getParsedRequestPath(servletRequest);\n+\t\t// DispatcherServlet parses the path but for other scenarios (e.g. tests) we might need to\n+\n+\t\tthis.requestPath = (ServletRequestPathUtils.hasParsedRequestPath(servletRequest) ?\n+\t\t\t\tServletRequestPathUtils.getParsedRequestPath(servletRequest) :\n+\t\t\t\tServletRequestPathUtils.parseAndCache(servletRequest));\n \t}\n \n \tprivate static List<MediaType> allSupportedMediaTypes(List<HttpMessageConverter<?>> messageConverters) {",
    "output": "DefaultServerRequest parses the path if necessary"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java\n--- a/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java\n+++ b/spring-core/src/main/java/org/springframework/util/backoff/ExponentialBackOff.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -200,8 +200,7 @@ private long computeNextInterval() {\n \t\t\t}\n \t\t\telse if (this.currentInterval < 0) {\n \t\t\t\tlong initialInterval = getInitialInterval();\n-\t\t\t\tthis.currentInterval = (initialInterval < maxInterval\n-\t\t\t\t\t\t? initialInterval : maxInterval);\n+\t\t\t\tthis.currentInterval = Math.min(initialInterval, maxInterval);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthis.currentInterval = multiplyInterval(maxInterval);\n@@ -212,7 +211,7 @@ else if (this.currentInterval < 0) {\n \t\tprivate long multiplyInterval(long maxInterval) {\n \t\t\tlong i = this.currentInterval;\n \t\t\ti *= getMultiplier();\n-\t\t\treturn (i > maxInterval ? maxInterval : i);\n+\t\t\treturn Math.min(i, maxInterval);\n \t\t}\n \n ",
    "output": "Use Math.minin ExponentialBackOff Use Math.mininstead of doing it manually in ExponentialBackOff"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -255,7 +255,7 @@ protected String underscoreName(String name) {\n \t\t\t\tresult.append('_').append(Character.toLowerCase(s));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tresult.append(Character.toLowerCase(s));\n+\t\t\t\tresult.append(s);\n \t\t\t}\n \t\t}\n \t\treturn result.toString();",
    "output": "Remove redundant Character.toLowerCasein BeanPropertyRowMapper This commit removes a redundant Character.toLowerCaseinvocation in BeanPropertyRowMapper.underscoreName"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SocketUtils.java b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -54,7 +54,7 @@ public class SocketUtils {\n \tpublic static final int PORT_RANGE_MAX = 65535;\n \n \n-\tprivate static final Random random = new Random(System.currentTimeMillis());\n+\tprivate static final Random random = new Random(System.nanoTime());\n \n \n \t/**",
    "output": "Use System.nanoTimefor Random seed in SocketUtils Prior to this commit, SocketUtils used System.currentTimeMillisfor the seed for the java.util.Random instance used internally. The use of the milliseconds value returned by currentTimeMilliscan lead to collisions for randomly selected free ports for tests executing in parallel on the same computer. This commit therefore switches to System.nanoTimefor the Random seed used in SocketUtils in an attempt to avoid such collisions for tests executing in parallel in different JVMs on the same computer"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -916,7 +916,9 @@ protected void finishRefresh() {\n \t\tpublishEvent(new ContextRefreshedEvent(this));\n \n \t\t// Participate in LiveBeansView MBean, if active.\n-\t\tLiveBeansView.registerApplicationContext(this);\n+\t\tif (!IN_NATIVE_IMAGE) {\n+\t\t\tLiveBeansView.registerApplicationContext(this);\n+\t\t}\n \t}\n \n \t/**\n@@ -1024,7 +1026,9 @@ protected void doClose() {\n \t\t\t\tlogger.debug(\"Closing \" + this);\n \t\t\t}\n \n-\t\t\tLiveBeansView.unregisterApplicationContext(this);\n+\t\t\tif (!IN_NATIVE_IMAGE) {\n+\t\t\t\tLiveBeansView.unregisterApplicationContext(this);\n+\t\t\t}\n \n \t\t\ttry {\n \t\t\t\t// Publish shutdown event.",
    "output": "Avoid using LiveBeansView in GraalVM native images"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n@@ -85,7 +85,6 @@ class ConfigurationClassBeanDefinitionReader {\n \t * <p>The default is \"false\".\n \t */\n \tprivate static final boolean shouldIgnoreXml = SpringProperties.getFlag(\"spring.xml.ignore\");\n-\t\n \n \tprivate final BeanDefinitionRegistry registry;\n ",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java\n@@ -103,7 +103,8 @@ protected String createInvocationTraceName(MethodInvocation invocation) {\n \t\tif (this.logTargetClassInvocation && clazz.isInstance(invocation.getThis())) {\n \t\t\tclazz = invocation.getThis().getClass();\n \t\t}\n-\t\treturn getPrefix() + clazz.getName() + '.' + method.getName() + getSuffix();\n+\t\tString clazzName = clazz.getName();\n+\t\treturn getPrefix() + clazzName + '.' + method.getName() + getSuffix();\n \t}\n \n }",
    "output": "Extract Class.getNamefrom String concatenation This commit extracts a Class.getNameinvocation from String concatenation in AbstractMonitoringInterceptor to avoid an issue related to profile pollution"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n@@ -596,6 +596,7 @@ public Jackson2ObjectMapperBuilder modulesToInstall(Module... modules) {\n \t * @see com.fasterxml.jackson.databind.Module\n \t */\n \t@SafeVarargs\n+\t@SuppressWarnings(\"varargs\")\n \tpublic final Jackson2ObjectMapperBuilder modulesToInstall(Class<? extends Module>... modules) {\n \t\tthis.moduleClasses = modules;\n \t\tthis.findWellKnownModules = true;",
    "output": "Suppress varargs warning Prior to this commit, the Gradle build failed due to a varargs warning"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -39,7 +39,6 @@\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n-import io.netty.util.IllegalReferenceCountException;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.reactivestreams.Publisher;\n@@ -502,9 +501,10 @@ public static boolean release(@Nullable DataBuffer dataBuffer) {\n \t\t\t\ttry {\n \t\t\t\t\treturn pooledDataBuffer.release();\n \t\t\t\t}\n-\t\t\t\tcatch (IllegalReferenceCountException ex) {\n+\t\t\t\tcatch (IllegalStateException ex) {\n+\t\t\t\t\t// Avoid dependency on Netty: IllegalReferenceCountException\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"RefCount already at 0\", ex);\n+\t\t\t\t\t\tlogger.debug(\"Failed to release PooledDataBuffer\", ex);\n \t\t\t\t\t}\n \t\t\t\t\treturn false;\n \t\t\t\t}",
    "output": "Avoid dependency on netty-common in DataBufferUtils See"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -247,16 +247,15 @@ protected String underscoreName(String name) {\n \t\tif (!StringUtils.hasLength(name)) {\n \t\t\treturn \"\";\n \t\t}\n+\n \t\tStringBuilder result = new StringBuilder();\n-\t\tresult.append(lowerCaseName(name.substring(0, 1)));\n-\t\tfor (int i = 1; i < name.length(); i++) {\n-\t\t\tString s = name.substring(i, i + 1);\n-\t\t\tString slc = lowerCaseName(s);\n-\t\t\tif (!s.equals(slc)) {\n-\t\t\t\tresult.append(\"_\").append(slc);\n+\t\tfor (int i = 0; i < name.length(); i++) {\n+\t\t\tchar s = name.charAt(i);\n+\t\t\tif (Character.isUpperCase(s)) {\n+\t\t\t\tresult.append('_').append(Character.toLowerCase(s));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tresult.append(s);\n+\t\t\t\tresult.append(Character.toLowerCase(s));\n \t\t\t}\n \t\t}\n \t\treturn result.toString();",
    "output": "Reduce String creation in BeanPropertyRowMapper Prior to this commit the BeanPropertyRowMapper used String.substring and String.toLowerCase to parse the field names. This would generate more String than needed. Instead one could iterate over the internal char[] of the String and use the Character methods instead. This reduces the String creation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -75,12 +75,13 @@ public ReactorClientHttpConnector(ReactorResourceFactory factory, Function<HttpC\n \t\tthis.httpClient = defaultInitializer.andThen(mapper).apply(initHttpClient(factory));\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate static HttpClient initHttpClient(ReactorResourceFactory resourceFactory) {\n \t\tConnectionProvider provider = resourceFactory.getConnectionProvider();\n \t\tLoopResources resources = resourceFactory.getLoopResources();\n \t\tAssert.notNull(provider, \"No ConnectionProvider: is ReactorResourceFactory not initialized yet?\");\n \t\tAssert.notNull(resources, \"No LoopResources: is ReactorResourceFactory not initialized yet?\");\n-\t\treturn HttpClient.create(provider).runOn(resources);\n+\t\treturn HttpClient.create(provider).tcpConfiguration(tcpClient -> tcpClient.runOn(resources));\n \t}\n \n \t/**",
    "output": "Restore use of tcpConfiguration method The method wasn't available at first but has been added since to allow being compatible with both Reactor Netty 0.9 and 1.0"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n@@ -78,7 +78,7 @@ public AllEncompassingFormHttpMessageConverter() {\n \t\t\t\t// Ignore when no TransformerFactory implementation is available\n \t\t\t}\n \n-\t\t\tif (jaxb2Present) {\n+\t\t\tif (jaxb2Present && !jackson2XmlPresent) {\n \t\t\t\taddPartConverter(new Jaxb2RootElementHttpMessageConverter());\n \t\t\t}\n \t\t}",
    "output": "Fix an AllEncompassingFormHttpMessageConverter regression Restore previous behavior to configure Jaxb2RootElementHttpMessageConverter when JAXB but not Jackson are present"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -39,7 +39,6 @@\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n-import io.netty.util.IllegalReferenceCountException;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.reactivestreams.Publisher;\n@@ -502,9 +501,10 @@ public static boolean release(@Nullable DataBuffer dataBuffer) {\n \t\t\t\ttry {\n \t\t\t\t\treturn pooledDataBuffer.release();\n \t\t\t\t}\n-\t\t\t\tcatch (IllegalReferenceCountException ex) {\n+\t\t\t\tcatch (IllegalStateException ex) {\n+\t\t\t\t\t// Avoid dependency on Netty: IllegalReferenceCountException\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"RefCount already at 0\", ex);\n+\t\t\t\t\t\tlogger.debug(\"Failed to release PooledDataBuffer\", ex);\n \t\t\t\t\t}\n \t\t\t\t\treturn false;\n \t\t\t\t}",
    "output": "Avoid dependency on netty-common in DataBufferUtils See"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MatchableHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MatchableHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MatchableHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MatchableHandlerMapping.java\n@@ -42,7 +42,9 @@ public interface MatchableHandlerMapping extends HandlerMapping {\n \t * @since 5.3\n \t */\n \t@Nullable\n-\tPathPatternParser getPatternParser();\n+\tdefault PathPatternParser getPatternParser() {\n+\t\treturn null;\n+\t}\n \n \t/**\n \t * Determine whether the request matches the given pattern. Use this method",
    "output": "MatchableHandlerMapping is backwards compatible"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -23,6 +23,7 @@\n \n import javax.net.ssl.SSLSession;\n \n+import io.netty.channel.Channel;\n import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.cookie.Cookie;\n import io.netty.handler.ssl.SslHandler;\n@@ -166,7 +167,11 @@ public InetSocketAddress getRemoteAddress() {\n \t@Override\n \t@Nullable\n \tprotected SslInfo initSslInfo() {\n-\t\tSslHandler sslHandler = ((Connection) this.request).channel().pipeline().get(SslHandler.class);\n+\t\tChannel channel = ((Connection) this.request).channel();\n+\t\tSslHandler sslHandler = channel.pipeline().get(SslHandler.class);\n+\t\tif (sslHandler == null && channel.parent() != null) { // HTTP/2\n+\t\t\tsslHandler = channel.parent().pipeline().get(SslHandler.class);\n+\t\t}\n \t\tif (sslHandler != null) {\n \t\t\tSSLSession session = sslHandler.engine().getSession();\n \t\t\treturn new DefaultSslInfo(session);",
    "output": "Fix missing sslInfo with Reactor Netty and http/2 Prior to this commit, the `SslInfo` would be missing for WebFlux apps when deployed on Reactor Netty with http/2. This commit ensures that the request adapter checks the current channel and the parent channel for the presence of the `SslHander`. In the case of http/2, the `SslHander` is tied to the parent channel"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n@@ -71,6 +71,7 @@\n  *\n  * @author Rod Johnson\n  * @author Juergen Hoeller\n+ * @author Qimiao Chen\n  * @see #setBasenames\n  * @see ReloadableResourceBundleMessageSource\n  * @see java.util.ResourceBundle\n@@ -331,19 +332,10 @@ protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Loc\n \t\tString msg = getStringOrNull(bundle, code);\n \t\tif (msg != null) {\n \t\t\tif (codeMap == null) {\n-\t\t\t\tcodeMap = new ConcurrentHashMap<>();\n-\t\t\t\tMap<String, Map<Locale, MessageFormat>> existing =\n-\t\t\t\t\t\tthis.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap);\n-\t\t\t\tif (existing != null) {\n-\t\t\t\t\tcodeMap = existing;\n-\t\t\t\t}\n+\t\t\t\tcodeMap = this.cachedBundleMessageFormats.computeIfAbsent(bundle, b -> new ConcurrentHashMap<>());\n \t\t\t}\n \t\t\tif (localeMap == null) {\n-\t\t\t\tlocaleMap = new ConcurrentHashMap<>();\n-\t\t\t\tMap<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap);\n-\t\t\t\tif (existing != null) {\n-\t\t\t\t\tlocaleMap = existing;\n-\t\t\t\t}\n+\t\t\t\tlocaleMap = codeMap.computeIfAbsent(code, c -> new ConcurrentHashMap<>());\n \t\t\t}\n \t\t\tMessageFormat result = createMessageFormat(msg, locale);\n \t\t\tlocaleMap.put(locale, result);",
    "output": "Use computeIfAbsent in ResourceBundleMessageSource"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/support/JdbcBeanDefinitionReaderTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/support/JdbcBeanDefinitionReaderTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/support/JdbcBeanDefinitionReaderTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/support/JdbcBeanDefinitionReaderTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,10 +35,11 @@\n /**\n  * @author Rod Johnson\n  */\n-public class JdbcBeanDefinitionReaderTests {\n+class JdbcBeanDefinitionReaderTests {\n \n \t@Test\n-\tpublic void testValid() throws Exception {\n+\t@SuppressWarnings(\"deprecation\")\n+\tvoid readBeanDefinitionFromMockedDataSource() throws Exception {\n \t\tString sql = \"SELECT NAME AS NAME, PROPERTY AS PROPERTY, VALUE AS VALUE FROM T\";\n \n \t\tConnection connection = mock(Connection.class);",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/KeyHolderTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/KeyHolderTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/KeyHolderTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/KeyHolderTests.java\n@@ -69,6 +69,7 @@ void getKeyWithNoKeysInMap() {\n \n \t@Test\n \tvoid getKeyWithMultipleKeysInMap() {\n+\t\t@SuppressWarnings(\"serial\")\n \t\tMap<String, Object> m = new HashMap<String, Object>() {{\n \t\t\tput(\"key\", 1);\n \t\t\tput(\"seq\", 2);\n@@ -108,6 +109,7 @@ void getKeyAsIntegerWithNullValue() {\n \n \t@Test\n \tvoid getKeysWithMultipleKeyRows() {\n+\t\t@SuppressWarnings(\"serial\")\n \t\tMap<String, Object> m = new HashMap<String, Object>() {{\n \t\t\tput(\"key\", 1);\n \t\t\tput(\"seq\", 2);",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/response/ResponseCreatorsTests.java b/spring-test/src/test/java/org/springframework/test/web/client/response/ResponseCreatorsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/response/ResponseCreatorsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/response/ResponseCreatorsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,6 +35,7 @@\n  *\n  * @author Rossen Stoyanchev\n  */\n+@SuppressWarnings(\"resource\")\n class ResponseCreatorsTests {\n \n \t@Test",
    "output": "Suppress warnings in ResponseCreatorsTests"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -52,7 +52,6 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -75,7 +75,7 @@ public class DefaultRSocketRequesterBuilderTests {\n \t@BeforeEach\n \tpublic void setup() {\n \t\tthis.transport = mock(ClientTransport.class);\n-\t\tgiven(this.transport.connect(anyInt())).willReturn(Mono.just(this.connection));\n+\t\tgiven(this.transport.connect()).willReturn(Mono.just(this.connection));\n \t}\n \n \n@@ -106,7 +106,7 @@ public void rsocketConnectorConfigurer() {\n \n \t\t// RSocketStrategies and RSocketConnector configurers should have been called\n \n-\t\tverify(this.transport).connect(anyInt());\n+\t\tverify(this.transport).connect();\n \t\tverify(strategiesConfigurer).accept(any(RSocketStrategies.Builder.class));\n \t\tverify(factoryConfigurer).configure(any(io.rsocket.RSocketFactory.ClientRSocketFactory.class));\n \t\tassertThat(this.connectorConfigurer.connector()).isNotNull();",
    "output": "Upgrade to RSocket 1.0.1"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java\n@@ -45,7 +45,6 @@\n import org.springframework.http.server.RequestPath;\n import org.springframework.http.server.reactive.ServerHttpRequest;\n import org.springframework.lang.Nullable;\n-import org.springframework.mock.web.server.MockServerWebExchange;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.LinkedMultiValueMap;\n@@ -63,11 +62,7 @@\n  *\n  * @author Arjen Poutsma\n  * @since 5.0\n- * @deprecated as of 5.2.5 in favor of\n- * {@link ServerRequest#create(ServerWebExchange, List)} combined with\n- * {@link MockServerWebExchange}.\n  */\n-@Deprecated\n public final class MockServerRequest implements ServerRequest {\n \n \tprivate final HttpMethod method;",
    "output": "Undo MockServerRequest deprecation Setting path variables (and making sure they are available in a HandlerFunction) is more convenient with MockServerRequest than having to set attributes in MockServerWebExchange. This commit removes MockServerRequest's deprecation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -79,6 +79,7 @@\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.ReflectionUtils;\n \n@@ -836,7 +837,7 @@ protected void registerListeners() {\n \t\t// Publish early application events now that we finally have a multicaster...\n \t\tSet<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;\n \t\tthis.earlyApplicationEvents = null;\n-\t\tif (earlyEventsToProcess != null) {\n+\t\tif (!CollectionUtils.isEmpty(earlyEventsToProcess)) {\n \t\t\tfor (ApplicationEvent earlyEvent : earlyEventsToProcess) {\n \t\t\t\tgetApplicationEventMulticaster().multicastEvent(earlyEvent);\n \t\t\t}",
    "output": "Avoid earlyApplicationEvents iteration in case of empty Set"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -182,6 +182,9 @@ void publishComplete(WriteResultPublisher publisher) {\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {\n \t\t\t\tpublisher.errorBeforeSubscribed = ex;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishError(publisher, ex);\n+\t\t\t\t}\n \t\t\t}\n \t\t},\n \n@@ -200,6 +203,9 @@ void publishComplete(WriteResultPublisher publisher) {\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {\n \t\t\t\tpublisher.errorBeforeSubscribed = ex;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishError(publisher, ex);\n+\t\t\t\t}\n \t\t\t}\n \t\t},\n ",
    "output": "Fix race condition in WriteResultPublisher between subscription and error from the Publish"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -141,7 +141,6 @@ public abstract class ClassUtils {\n \t\tprimitiveTypes.addAll(primitiveWrapperTypeMap.values());\n \t\tCollections.addAll(primitiveTypes, boolean[].class, byte[].class, char[].class,\n \t\t\t\tdouble[].class, float[].class, int[].class, long[].class, short[].class);\n-\t\tprimitiveTypes.add(void.class);\n \t\tfor (Class<?> primitiveType : primitiveTypes) {\n \t\t\tprimitiveTypeNameMap.put(primitiveType.getName(), primitiveType);\n \t\t}",
    "output": "Avoid duplicate addition of void.class in ClassUtils This commit avoids duplicate addition of void.class to the temporary primitiveTypes Set in the static initialization block in ClassUtils"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,6 +52,7 @@\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n import org.springframework.util.ObjectUtils;\n+import org.springframework.util.ReflectionUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.util.function.SingletonSupplier;\n import org.springframework.util.function.SupplierUtils;\n@@ -381,9 +382,9 @@ private Object execute(final CacheOperationInvoker invoker, Method method, Cache\n \t\t\t\t\treturn wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));\n \t\t\t\t}\n \t\t\t\tcatch (Cache.ValueRetrievalException ex) {\n-\t\t\t\t\t// The invoker wraps any Throwable in a ThrowableWrapper instance so we\n-\t\t\t\t\t// can just make sure that one bubbles up the stack.\n-\t\t\t\t\tthrow (CacheOperationInvoker.ThrowableWrapper) ex.getCause();\n+\t\t\t\t\t// Directly propagate ThrowableWrapper from the invoker,\n+\t\t\t\t\t// or potentially also an IllegalArgumentException etc.\n+\t\t\t\t\tReflectionUtils.rethrowRuntimeException(ex.getCause());\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Avoid ClassCastException on IllegalArgumentException from sync invocation"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -235,7 +235,6 @@ public ContentNegotiationManager getContentNegotiationManager() {\n \t * {@code HttpMessageConverter}.\n \t */\n \tpublic void setResponseBodyAdvice(@Nullable List<ResponseBodyAdvice<?>> responseBodyAdvice) {\n-\t\tthis.responseBodyAdvice.clear();\n \t\tif (responseBodyAdvice != null) {\n \t\t\tthis.responseBodyAdvice.addAll(responseBodyAdvice);\n \t\t}",
    "output": "Fix ExceptionHandlerExceptionResolver.setResponseBodyAdvice behaviour Prior to this commit, calling the `setResponseBodyAdvice` method would clear all existing `ResponseBodyAdvice` instances present in the list before adding provided one. This behavior is inconsistent with the Javadoc and other implementations. This brings the method in line with the existing documentation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -675,10 +675,4 @@ public void setDefaultEncoding(String defaultEncoding) {\n \t\t}\n \t};\n \n-\n-\tprivate static class HttpServletMappingHelper {\n-\n-\n-\n-\t}\n }",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestConstructor.java b/spring-test/src/main/java/org/springframework/test/context/TestConstructor.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestConstructor.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestConstructor.java\n@@ -133,29 +133,29 @@ enum AutowireMode {\n \t\tANNOTATED;\n \n \n-\t\tprivate static final Log logger = LogFactory.getLog(AutowireMode.class);\n-\n \t\t/**\n \t\t * Get the {@code AutowireMode} enum constant with the supplied name,\n \t\t * ignoring case.\n-\t\t *\n \t\t * @param name the name of the enum constant to retrieve\n \t\t * @return the corresponding enum constant or {@code null} if not found\n \t\t * @since 5.3\n \t\t * @see AutowireMode#valueOf(String)\n \t\t */\n \t\t@Nullable\n \t\tpublic static AutowireMode from(@Nullable String name) {\n+\t\t\tif (name == null) {\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\ttry {\n \t\t\t\treturn AutowireMode.valueOf(name.trim().toUpperCase());\n \t\t\t}\n-\t\t\tcatch (Exception ex) {\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\tLog logger = LogFactory.getLog(AutowireMode.class);\n \t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(String.format(\"Failed to parse autowire mode from '%s': %s\", name,\n-\t\t\t\t\t\tex.getMessage()));\n+\t\t\t\t\tlogger.debug(String.format(\"Failed to parse autowire mode from '%s': %s\", name, ex.getMessage()));\n \t\t\t\t}\n+\t\t\t\treturn null;\n \t\t\t}\n-\t\t\treturn null;\n \t\t}\n \t}\n ",
    "output": "Defensive null check against name parameter in AutowireMode#from"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -439,7 +439,8 @@ private static String escapeQuotationsInFilename(String filename) {\n \t\tfor (char c : filename.toCharArray()) {\n \t\t\tif (!escaped && c == '\"') {\n \t\t\t\tsb.append(\"\\\\\\\"\");\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\tsb.append(c);\n \t\t\t}\n \t\t\tescaped = (!escaped && c == '\\\\');",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -386,7 +386,7 @@ else if (member.bean instanceof SmartLifecycle) {\n \t\t\t\tif (latch.getCount() > 0 && !countDownBeanNames.isEmpty() && logger.isInfoEnabled()) {\n \t\t\t\t\tlogger.info(\"Failed to shut down \" + countDownBeanNames.size() + \" bean\" +\n \t\t\t\t\t\t\t(countDownBeanNames.size() > 1 ? \"s\" : \"\") + \" with phase value \" +\n-\t\t\t\t\t\t\tthis.phase + \" within timeout of \" + this.timeout + \": \" + countDownBeanNames);\n+\t\t\t\t\t\t\tthis.phase + \" within timeout of \" + this.timeout + \"ms: \" + countDownBeanNames);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (InterruptedException ex) {",
    "output": "Include timeout unit in shutdown failure logging"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n--- a/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java\n@@ -39,6 +39,7 @@\n  * @author Sebastien Deleuze\n  * @author Juergen Hoeller\n  * @author Rossen Stoyanchev\n+ * @author Sergey Tsypanov\n  * @since 5.0\n  * @see <a href=\"https://tools.ietf.org/html/rfc6266\">RFC 6266</a>\n  */\n@@ -436,7 +437,11 @@ private static String escapeQuotationsInFilename(String filename) {\n \t\tboolean escaped = false;\n \t\tStringBuilder sb = new StringBuilder();\n \t\tfor (char c : filename.toCharArray()) {\n-\t\t\tsb.append((c == '\"' && !escaped) ? \"\\\\\\\"\" : c);\n+\t\t\tif (!escaped && c == '\"') {\n+\t\t\t\tsb.append(\"\\\\\\\"\");\n+\t\t\t} else {\n+\t\t\t\tsb.append(c);\n+\t\t\t}\n \t\t\tescaped = (!escaped && c == '\\\\');\n \t\t}\n \t\t// Remove backslash at the end..",
    "output": "Avoid StringBuilder.append(Object) in ContentDisposition This commit avoids invoking StringBuilder.append(Object) in favor of explicit method calls to append(String) and append(char) in ContentDisposition.escapeQuotationsInFilename(String)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -183,8 +183,8 @@ protected MessageFormat resolveCode(String code, Locale locale) {\n \n \n \t/**\n-\t * Return a ResourceBundle for the given basename and code,\n-\t * fetching already generated MessageFormats from the cache.\n+\t * Return a ResourceBundle for the given basename and Locale,\n+\t * fetching already generated ResourceBundle from the cache.\n \t * @param basename the basename of the ResourceBundle\n \t * @param locale the Locale to find the ResourceBundle for\n \t * @return the resulting ResourceBundle, or {@code null} if none\n@@ -209,11 +209,7 @@ protected ResourceBundle getResourceBundle(String basename, Locale locale) {\n \t\t\ttry {\n \t\t\t\tResourceBundle bundle = doGetBundle(basename, locale);\n \t\t\t\tif (localeMap == null) {\n-\t\t\t\t\tlocaleMap = new ConcurrentHashMap<>();\n-\t\t\t\t\tMap<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap);\n-\t\t\t\t\tif (existing != null) {\n-\t\t\t\t\t\tlocaleMap = existing;\n-\t\t\t\t\t}\n+\t\t\t\t\tlocaleMap = this.cachedResourceBundles.computeIfAbsent(basename, bn -> new ConcurrentHashMap<>());\n \t\t\t\t}\n \t\t\t\tlocaleMap.put(locale, bundle);\n \t\t\t\treturn bundle;",
    "output": "Use computeIfAbsent in ResourceBundleMessageSource This commit optimizes code in ResourceBundleMessageSource by using computeIfAbsent instead of putIfAbsent. In addition, the content of some Javadoc has been adjusted"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java b/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java\n--- a/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java\n+++ b/spring-context/src/test/java/org/springframework/remoting/rmi/RmiSupportTests.java\n@@ -293,8 +293,8 @@ private void doTestRmiProxyFactoryBeanWithBusinessInterfaceAndExceptionAndRefres\n \t\tassertThat(condition1).isFalse();\n \t\tassertThatExceptionOfType(springExceptionClass).isThrownBy(() ->\n \t\t\t\tproxy.setName(rmiExceptionClass.getName()));\n-\t\tboolean isRemoteConnectFaiure = RemoteConnectFailureException.class.isAssignableFrom(springExceptionClass);\n-\t\tassertThat(factory.counter).isEqualTo(isRemoteConnectFaiure ? 2 : 1);\n+\t\tboolean isRemoteConnectFailure = RemoteConnectFailureException.class.isAssignableFrom(springExceptionClass);\n+\t\tassertThat(factory.counter).isEqualTo(isRemoteConnectFailure ? 2 : 1);\n \t}\n \n \t@Test",
    "output": "Fix typo in RmiSupportTests"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSourcePointcut.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSourcePointcut.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSourcePointcut.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSourcePointcut.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,11 +23,11 @@\n import org.springframework.aop.support.StaticMethodMatcherPointcut;\n import org.springframework.dao.support.PersistenceExceptionTranslator;\n import org.springframework.lang.Nullable;\n-import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.TransactionManager;\n import org.springframework.util.ObjectUtils;\n \n /**\n- * Inner class that implements a Pointcut that matches if the underlying\n+ * Abstract class that implements a Pointcut that matches if the underlying\n  * {@link TransactionAttributeSource} has an attribute for a given method.\n  *\n  * @author Juergen Hoeller\n@@ -87,7 +87,7 @@ private class TransactionAttributeSourceClassFilter implements ClassFilter {\n \t\t@Override\n \t\tpublic boolean matches(Class<?> clazz) {\n \t\t\tif (TransactionalProxy.class.isAssignableFrom(clazz) ||\n-\t\t\t\t\tPlatformTransactionManager.class.isAssignableFrom(clazz) ||\n+\t\t\t\t\tTransactionManager.class.isAssignableFrom(clazz) ||\n \t\t\t\t\tPersistenceExceptionTranslator.class.isAssignableFrom(clazz)) {\n \t\t\t\treturn false;\n \t\t\t}",
    "output": "Filter reactive tx managers in TransactionAttributeSourceClassFilter Prior to this commit, the TransactionAttributeSourceClassFilter filtered out PlatformTransactionManager but not ReactiveTransactionManager implementations. TransactionAttributeSourceClassFilter now filters out any TransactionManager implementation, covering both imperative and reactive transaction managers"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java\n@@ -26,7 +26,6 @@\n import org.springframework.web.socket.CloseStatus;\n import org.springframework.web.socket.TextMessage;\n import org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator;\n-import org.springframework.web.socket.sockjs.SockJsMessageDeliveryException;\n import org.springframework.web.socket.sockjs.SockJsTransportFailureException;\n import org.springframework.web.socket.sockjs.frame.SockJsFrame;\n \n@@ -118,10 +117,7 @@ public void delegateMessagesWithError() throws Exception {\n \t\twillThrow(new IOException()).given(this.webSocketHandler).handleMessage(session, new TextMessage(msg2));\n \n \t\tsession.delegateConnectionEstablished();\n-\n-\t\tassertThatExceptionOfType(SockJsMessageDeliveryException.class)\n-\t\t\t\t.isThrownBy(() -> session.delegateMessages(msg1, msg2, msg3))\n-\t\t\t\t.satisfies(ex -> assertThat(ex.getUndeliveredMessages()).containsExactly(msg3));\n+\t\tsession.delegateMessages(msg1, msg2, msg3);\n \n \t\tverify(this.webSocketHandler).afterConnectionEstablished(session);\n \t\tverify(this.webSocketHandler).handleMessage(session, new TextMessage(msg1));",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n@@ -175,6 +175,9 @@ void subscribe(WriteResultPublisher publisher, Subscriber<? super Void> subscrib\n \t\t\t@Override\n \t\t\tvoid publishComplete(WriteResultPublisher publisher) {\n \t\t\t\tpublisher.completedBeforeSubscribed = true;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishComplete(publisher);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {\n@@ -190,6 +193,9 @@ void request(WriteResultPublisher publisher, long n) {\n \t\t\t@Override\n \t\t\tvoid publishComplete(WriteResultPublisher publisher) {\n \t\t\t\tpublisher.completedBeforeSubscribed = true;\n+\t\t\t\tif(State.SUBSCRIBED.equals(publisher.state.get())) {\n+\t\t\t\t\tpublisher.state.get().publishComplete(publisher);\n+\t\t\t\t}\n \t\t\t}\n \t\t\t@Override\n \t\t\tvoid publishError(WriteResultPublisher publisher, Throwable ex) {",
    "output": "Fix race condition in WriteResultPublisher"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scripting/support/StandardScriptFactoryTests.java b/spring-context/src/test/java/org/springframework/scripting/support/StandardScriptFactoryTests.java\n--- a/spring-context/src/test/java/org/springframework/scripting/support/StandardScriptFactoryTests.java\n+++ b/spring-context/src/test/java/org/springframework/scripting/support/StandardScriptFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.util.Arrays;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledForJreRange;\n \n import org.springframework.aop.support.AopUtils;\n import org.springframework.aop.target.dynamic.Refreshable;\n@@ -27,13 +28,15 @@\n import org.springframework.scripting.Messenger;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.condition.JRE.JAVA_15;\n \n /**\n  * {@link StandardScriptFactory} (lang:std) tests for JavaScript.\n  *\n  * @author Juergen Hoeller\n  * @since 4.2\n  */\n+@DisabledForJreRange(min = JAVA_15)\n public class StandardScriptFactoryTests {\n \n \t@Test",
    "output": "Disable StandardScriptFactoryTests on Java 15+ This commit disables StandardScriptFactoryTests on Java 15 or higher since the Nashorn JavaScript engine is no longer part of the JDK"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -240,6 +240,10 @@ else if (webSocketMessage instanceof BinaryMessage) {\n \n \t\t\tBufferingStompDecoder decoder = this.decoders.get(session.getId());\n \t\t\tif (decoder == null) {\n+\t\t\t\tif (!session.isOpen()) {\n+\t\t\t\t\tlogger.trace(\"Dropped inbound WebSocket message due to closed session\");\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tthrow new IllegalStateException(\"No decoder for session id '\" + session.getId() + \"'\");\n \t\t\t}\n ",
    "output": "Ignore missing STOMP decoder if session closed"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationFilterTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationFilterTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationFilterTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationFilterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -99,6 +99,7 @@ void javaWhenOtherAnnotationReturnsFalse() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid noneReturnsFalse() {\n \t\tassertThat(AnnotationFilter.NONE.matches(Retention.class)).isFalse();\n \t\tassertThat(AnnotationFilter.NONE.matches(Nullable.class)).isFalse();\n\ndiff --git a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n@@ -1253,6 +1253,7 @@ void getRepeatableDeclaredOnMethod() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tvoid getRepeatableDeclaredOnClassWithAttributeAliases() {\n \t\tassertThat(MergedAnnotations.from(HierarchyClass.class).stream(\n \t\t\t\tTestConfiguration.class)).isEmpty();",
    "output": "Suppress warnings for deprecated AnnotationFilter.NONE enum constant"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -769,6 +769,9 @@ public void setParentBeanFactory(@Nullable BeanFactory parentBeanFactory) {\n \t\tif (this.parentBeanFactory != null && this.parentBeanFactory != parentBeanFactory) {\n \t\t\tthrow new IllegalStateException(\"Already associated with parent BeanFactory: \" + this.parentBeanFactory);\n \t\t}\n+\t\tif(this == parentBeanFactory) {\n+\t\t\tthrow new IllegalStateException(\"Can not set parent bean factory to self.\");\n+\t\t}\n \t\tthis.parentBeanFactory = parentBeanFactory;\n \t}\n ",
    "output": "Fix parent bean factory self-reference issue. If set parent bean factory to self, once try to get an undefined bean, bellow condition if (parentBeanFactory != null && !containsBeanDefinition(beanName)) { ... } will always be true and StackOverflowError will be thrown. Sometimes, this issue is hard to detect during runtime, if self-reference is not allowed here, error will be found at the early time of startup. Also, a self-reference parent bean factory is valueless"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java\n@@ -122,7 +122,7 @@ public Mono<Object> resolveArgument(\n \n \t\treturn valueMono.flatMap(value -> {\n \t\t\tWebExchangeDataBinder binder = context.createDataBinder(exchange, value, name);\n-\t\t\treturn binder.bind(exchange)\n+\t\t\treturn bindRequestParameters(binder, exchange)\n \t\t\t\t\t.doOnError(bindingResultMono::onError)\n \t\t\t\t\t.doOnSuccess(aVoid -> {\n \t\t\t\t\t\tvalidateIfApplicable(binder, parameter);\n@@ -147,6 +147,15 @@ public Mono<Object> resolveArgument(\n \t\t});\n \t}\n \n+\t/**\n+\t * Extension point to bind the request to the target object.\n+\t * @param binder the data binder instance to use for the binding\n+\t * @param exchange the current request\n+\t */\n+\tprotected Mono<Void> bindRequestParameters(WebExchangeDataBinder binder, ServerWebExchange exchange) {\n+\t\treturn binder.bind(exchange);\n+\t}\n+\n \tprivate Mono<?> prepareAttributeMono(String attributeName, ResolvableType attributeType,\n \t\t\tBindingContext context, ServerWebExchange exchange) {\n ",
    "output": "Allow override of data binder binding Motivation ---------- The Spring MVC ModelAttributeMethodProcessor includes many helpful extension methods that allow developers to extend and enhance the data binding capabilities of the class. Unfortunately, Spring WebFlux's equivalent class, the ModelAttributeMethodArgumentResolver, does not include these same extension methods. I am leveraging these extension methods, specifically the bindRequestParameters method, to provide valuable enhancements to my application. I would like to provide these same enhancements to the WebFlux portion of my application and am unable to do so at this time. I would like to update the WebFlux ModelAttributeMethodArgumentResolver to add the bindRequestParameters method. Modifications ------------- I created a new method called bindRequestParameters and encapsulated the WebExchangeDataBinder bind call inside of it. This method is marked as protected as it should only be used by children of this class. This change mirrors the behavior in the equivalent Spring MVC class (ModelAttributeMethodProcessor). Result ------ The WebFlux ModelAttributeMethodArgumentResolver can now accept alternative data binding implementations mirroring the Web MVC behavior"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReader.java b/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReader.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReader.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReader.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.core.type.classreading;\n \n-import java.io.BufferedInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n \n@@ -53,7 +52,7 @@ final class SimpleMetadataReader implements MetadataReader {\n \t}\n \n \tprivate static ClassReader getClassReader(Resource resource) throws IOException {\n-\t\ttry (InputStream is = new BufferedInputStream(resource.getInputStream())) {\n+\t\ttry (InputStream is = resource.getInputStream()) {\n \t\t\ttry {\n \t\t\t\treturn new ClassReader(is);\n \t\t\t}",
    "output": "Rid pointless wrapping with BufferedInputStream from class reading"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -279,6 +279,11 @@ public Flux<ByteBuf> receive() {\n \t\t\treturn Flux.empty();\n \t\t}\n \n+\t\t@Override\n+\t\tpublic ByteBufAllocator alloc() {\n+\t\t\treturn ByteBufAllocator.DEFAULT;\n+\t\t}\n+\n \t\t@Override\n \t\tpublic Mono<Void> onClose() {\n \t\t\treturn Mono.empty();",
    "output": "Adapt test to changes in RSocket Java"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n@@ -128,6 +128,7 @@ public Mono<Void> execute(URI url, WebSocketHandler handler) {\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic Mono<Void> execute(URI url, HttpHeaders requestHeaders, WebSocketHandler handler) {\n \t\tString protocols = StringUtils.collectionToCommaDelimitedString(handler.getSubProtocols());\n \t\treturn getHttpClient()",
    "output": "Suppress deprecated Reactor Netty call"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/DefaultRSocketRequesterBuilderTests.java\n@@ -27,7 +27,6 @@\n import io.netty.buffer.ByteBufAllocator;\n import io.rsocket.ConnectionSetupPayload;\n import io.rsocket.DuplexConnection;\n-import io.rsocket.RSocketFactory;\n import io.rsocket.core.DefaultConnectionSetupPayload;\n import io.rsocket.core.RSocketConnector;\n import io.rsocket.frame.decoder.PayloadDecoder;\n@@ -109,7 +108,7 @@ public void rsocketConnectorConfigurer() {\n \n \t\tverify(this.transport).connect(anyInt());\n \t\tverify(strategiesConfigurer).accept(any(RSocketStrategies.Builder.class));\n-\t\tverify(factoryConfigurer).configure(any(RSocketFactory.ClientRSocketFactory.class));\n+\t\tverify(factoryConfigurer).configure(any(io.rsocket.RSocketFactory.ClientRSocketFactory.class));\n \t\tassertThat(this.connectorConfigurer.connector()).isNotNull();\n \t}\n ",
    "output": "Avoid deprecation warning in DefaultRSocketRequesterBuilderTests"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/RSocketBufferLeakTests.java b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/RSocketBufferLeakTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/rsocket/RSocketBufferLeakTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/rsocket/RSocketBufferLeakTests.java\n@@ -36,6 +36,7 @@\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.api.TestInstance.Lifecycle;\n@@ -149,6 +150,7 @@ void ignoreInput() {\n \t}\n \n \t@Test // gh-24741\n+\t@Disabled // pending https://github.com/rsocket/rsocket-java/pull/777\n \tvoid noSuchRouteOnChannelInteraction() {\n \t\tFlux<String> input = Flux.just(\"foo\", \"bar\", \"baz\");\n \t\tFlux<String> result = requester.route(\"no-such-route\").data(input).retrieveFlux(String.class);",
    "output": "Disable failing test temporarily"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -219,7 +219,7 @@ private static MimeType parseMimeTypeInternal(String mimeType) {\n \t\t\tthrow new InvalidMimeTypeException(mimeType, \"does not contain subtype after '/'\");\n \t\t}\n \t\tString type = fullType.substring(0, subIndex);\n-\t\tString subtype = fullType.substring(subIndex + 1, fullType.length());\n+\t\tString subtype = fullType.substring(subIndex + 1);\n \t\tif (MimeType.WILDCARD_TYPE.equals(type) && !MimeType.WILDCARD_TYPE.equals(subtype)) {\n \t\t\tthrow new InvalidMimeTypeException(mimeType, \"wildcard type is legal only in '*/*' (all mime types)\");\n \t\t}\n@@ -248,7 +248,7 @@ else if (ch == '\"') {\n \t\t\t\tint eqIndex = parameter.indexOf('=');\n \t\t\t\tif (eqIndex >= 0) {\n \t\t\t\t\tString attribute = parameter.substring(0, eqIndex).trim();\n-\t\t\t\t\tString value = parameter.substring(eqIndex + 1, parameter.length()).trim();\n+\t\t\t\t\tString value = parameter.substring(eqIndex + 1).trim();\n \t\t\t\t\tparameters.put(attribute, value);\n \t\t\t\t}\n \t\t\t}",
    "output": "Simplify substringusage in MimeTypeUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -461,6 +461,9 @@ public static String deleteAny(String inString, @Nullable String charsToDelete)\n \t\t\t\tresult[lastCharIndex++] = c;\n \t\t\t}\n \t\t}\n+\t\tif (lastCharIndex == inString.length()) {\n+\t\t\treturn inString;\n+\t\t}\n \t\treturn new String(result, 0, lastCharIndex);\n \t}\n ",
    "output": "Avoid unnecessary String instantiation in StringUtils.deleteAnyThis commit avoids unnecessary String instantiation in StringUtils.deleteAnyif nothing was deleted from the input string"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java\n@@ -130,7 +130,7 @@ public void bind(WebRequest request) {\n \t */\n \tprivate boolean isMultipartRequest(WebRequest request) {\n \t\tString contentType = request.getHeader(\"Content-Type\");\n-\t\treturn (contentType != null && StringUtils.startsWithIgnoreCase(contentType, \"multipart\"));\n+\t\treturn StringUtils.startsWithIgnoreCase(contentType, \"multipart\");\n \t}\n \n \tprivate void bindParts(HttpServletRequest request, MutablePropertyValues mpvs) {\n\ndiff --git a/spring-web/src/main/java/org/springframework/web/util/pattern/RegexPathElement.java b/spring-web/src/main/java/org/springframework/web/util/pattern/RegexPathElement.java\n--- a/spring-web/src/main/java/org/springframework/web/util/pattern/RegexPathElement.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/RegexPathElement.java\n@@ -136,7 +136,7 @@ public boolean matches(int pathIndex, MatchingContext matchingContext) {\n \t\tif (matches) {\n \t\t\tif (isNoMorePattern()) {\n \t\t\t\tif (matchingContext.determineRemainingPath &&\n-\t\t\t\t\t(this.variableNames.isEmpty() ? true : textToMatch.length() > 0)) {\n+\t\t\t\t\t(this.variableNames.isEmpty() || textToMatch.length() > 0)) {\n \t\t\t\t\tmatchingContext.remainingPathIndex = pathIndex + 1;\n \t\t\t\t\tmatches = true;\n \t\t\t\t}",
    "output": "Simplify some control flow code"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n@@ -591,8 +591,11 @@ public void releaseReadLock() {\n \n \t\tpublic void register(T mapping, Object handler, Method method) {\n \t\t\t// Assert that the handler method is not a suspending one.\n-\t\t\tif (KotlinDetector.isKotlinType(method.getDeclaringClass()) && KotlinDelegate.isSuspend(method)) {\n-\t\t\t\tthrow new IllegalStateException(\"Unsupported suspending handler method detected: \" + method);\n+\t\t\tif (KotlinDetector.isKotlinType(method.getDeclaringClass())) {\n+\t\t\t\tClass<?>[] parameterTypes = method.getParameterTypes();\n+\t\t\t\tif ((parameterTypes.length > 0) && \"kotlin.coroutines.Continuation\".equals(parameterTypes[parameterTypes.length - 1].getName())) {\n+\t\t\t\t\tthrow new IllegalStateException(\"Unsupported suspending handler method detected: \" + method);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tthis.readWriteLock.writeLock().lock();\n \t\t\ttry {",
    "output": "Make it possible to run Spring MVC without kotlin-reflect"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java\n@@ -98,7 +98,7 @@ public LocaleContext resolveLocaleContext(ServerWebExchange exchange) {\n \t@Nullable\n \tprivate Locale resolveSupportedLocale(@Nullable List<Locale> requestLocales) {\n \t\tif (CollectionUtils.isEmpty(requestLocales)) {\n-\t\t\treturn this.defaultLocale;  // may be null\n+\t\t\treturn getDefaultLocale();  // may be null\n \t\t}\n \t\tList<Locale> supportedLocales = getSupportedLocales();\n \t\tif (supportedLocales.isEmpty()) {\n@@ -128,7 +128,8 @@ else if (languageMatch == null) {\n \t\t\treturn languageMatch;\n \t\t}\n \n-\t\treturn (this.defaultLocale != null ? this.defaultLocale : requestLocales.get(0));\n+\t\tfinal Locale defaultLocale = getDefaultLocale();\n+\t\treturn (defaultLocale != null ? defaultLocale : requestLocales.get(0));\n \t}\n \n \t@Override",
    "output": "Honor overriden AccepptHeaderLocaleContextResolver.getDefaultLocale"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/SingleConnectionDataSource.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/SingleConnectionDataSource.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/SingleConnectionDataSource.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/SingleConnectionDataSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -322,7 +322,7 @@ else if (method.getName().equals(\"close\")) {\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\telse if (method.getName().equals(\"isClosed\")) {\n-\t\t\t\treturn false;\n+\t\t\t\treturn this.target.isClosed();\n \t\t\t}\n \t\t\telse if (method.getName().equals(\"getTargetConnection\")) {\n \t\t\t\t// Handle getTargetConnection method: return underlying Connection.",
    "output": "Close-suppressing Connection proxy exposes target isClosedstate"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/FileSystemUtils.java b/spring-core/src/main/java/org/springframework/util/FileSystemUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/FileSystemUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/FileSystemUtils.java\n@@ -24,8 +24,10 @@\n import java.nio.file.SimpleFileVisitor;\n import java.nio.file.StandardCopyOption;\n import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.EnumSet;\n \n import org.springframework.lang.Nullable;\n+import static java.nio.file.FileVisitOption.FOLLOW_LINKS;\n \n /**\n  * Utility methods for working with the file system.\n@@ -123,7 +125,7 @@ public static void copyRecursively(Path src, Path dest) throws IOException {\n \t\tBasicFileAttributes srcAttr = Files.readAttributes(src, BasicFileAttributes.class);\n \n \t\tif (srcAttr.isDirectory()) {\n-\t\t\tFiles.walkFileTree(src, new SimpleFileVisitor<Path>() {\n+\t\t\tFiles.walkFileTree(src, EnumSet.of(FOLLOW_LINKS), Integer.MAX_VALUE, new SimpleFileVisitor<Path>() {\n \t\t\t\t@Override\n \t\t\t\tpublic FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n \t\t\t\t\tFiles.createDirectories(dest.resolve(src.relativize(dir)));",
    "output": "Recursively copy directory with symbolic link The following modification will also recursively traverse the directory that the symbolic link points to. This modification is not proposed for deleteRecursively, since it can be harmful if not intended. This modification relates to the following commit Consistent use of NIO.2 for file read/write interactions"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,6 +27,7 @@\n import org.springframework.core.log.LogDelegateFactory;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Abstract base class for {@code Processor} implementations that bridge between\n@@ -87,13 +88,13 @@ public AbstractListenerWriteProcessor() {\n \t * @since 5.1\n \t */\n \tpublic AbstractListenerWriteProcessor(String logPrefix) {\n-\t\tthis.logPrefix = logPrefix;\n+\t\tthis.logPrefix = (StringUtils.hasText(logPrefix) ? logPrefix : \"\");\n \t\tthis.resultPublisher = new WriteResultPublisher(logPrefix);\n \t}\n \n \n \t/**\n-\t * Create an instance with the given log prefix.\n+\t * Get the configured log prefix.\n \t * @since 5.1\n \t */\n \tpublic String getLogPrefix() {",
    "output": "Ensure logPrefix is not null or blank in AbstractListenerWriteProcessor"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n@@ -66,9 +66,9 @@\n  */\n public class Jackson2JsonDecoderTests extends AbstractDecoderTests<Jackson2JsonDecoder> {\n \n-\tprivate Pojo pojo1 = new Pojo(\"f1\", \"b1\");\n+\tprivate final Pojo pojo1 = new Pojo(\"f1\", \"b1\");\n \n-\tprivate Pojo pojo2 = new Pojo(\"f2\", \"b2\");\n+\tprivate final Pojo pojo2 = new Pojo(\"f2\", \"b2\");\n \n \n \tpublic Jackson2JsonDecoderTests() {\n@@ -219,6 +219,7 @@ public void bigDecimalFlux() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void decodeNonUtf8Encoding() {\n \t\tMono<DataBuffer> input = stringBuffer(\"{\\\"foo\\\":\\\"bar\\\"}\", StandardCharsets.UTF_16);\n \n@@ -231,6 +232,7 @@ public void decodeNonUtf8Encoding() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void decodeMonoNonUtf8Encoding() {\n \t\tMono<DataBuffer> input = stringBuffer(\"{\\\"foo\\\":\\\"bar\\\"}\", StandardCharsets.UTF_16);\n ",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java\n@@ -368,7 +368,7 @@ public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, Strin\n \t\t\t\t// Key is of form: prefix<name>.property\n \t\t\t\tString nameAndProperty = keyString.substring(prefix.length());\n \t\t\t\t// Find dot before property name, ignoring dots in property keys.\n-\t\t\t\tint sepIdx = -1;\n+\t\t\t\tint sepIdx ;\n \t\t\t\tint propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n \t\t\t\tif (propKeyIdx != -1) {\n \t\t\t\t\tsepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx);",
    "output": "Remove unnecessary assignment in PropertiesBeanDefinitionReader"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java b/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/DynamicPropertiesContextCustomizer.java\n@@ -26,7 +26,6 @@\n \n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.lang.Nullable;\n import org.springframework.test.context.ContextCustomizer;\n import org.springframework.test.context.DynamicPropertyRegistry;\n import org.springframework.test.context.DynamicPropertySource;\n@@ -73,7 +72,6 @@ public void customizeContext(ConfigurableApplicationContext context,\n \t\tsources.addFirst(new DynamicValuesPropertySource(PROPERTY_SOURCE_NAME, buildDynamicPropertiesMap()));\n \t}\n \n-\t@Nullable\n \tprivate Map<String, Supplier<Object>> buildDynamicPropertiesMap() {\n \t\tMap<String, Supplier<Object>> map = new LinkedHashMap<>();\n \t\tDynamicPropertyRegistry dynamicPropertyRegistry = (name, valueSupplier) -> {",
    "output": "Remove incorrect @Nullable in DynamicPropertiesContextCustomizer"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n@@ -128,7 +128,12 @@ public class XmlBeanDefinitionReader extends AbstractBeanDefinitionReader {\n \tprivate final XmlValidationModeDetector validationModeDetector = new XmlValidationModeDetector();\n \n \tprivate final ThreadLocal<Set<EncodedResource>> resourcesCurrentlyBeingLoaded =\n-\t\t\tnew NamedThreadLocal<>(\"XML bean definition resources currently being loaded\");\n+\t\t\tnew NamedThreadLocal<Set<EncodedResource>>(\"XML bean definition resources currently being loaded\"){\n+\t\t\t\t@Override\n+\t\t\t\tprotected Set<EncodedResource> initialValue() {\n+\t\t\t\t\treturn new HashSet<>(4);\n+\t\t\t\t}\n+\t\t\t};\n \n \n \t/**\n@@ -319,10 +324,7 @@ public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefin\n \t\t}\n \n \t\tSet<EncodedResource> currentResources = this.resourcesCurrentlyBeingLoaded.get();\n-\t\tif (currentResources == null) {\n-\t\t\tcurrentResources = new HashSet<>(4);\n-\t\t\tthis.resourcesCurrentlyBeingLoaded.set(currentResources);\n-\t\t}\n+\n \t\tif (!currentResources.add(encodedResource)) {\n \t\t\tthrow new BeanDefinitionStoreException(\n \t\t\t\t\t\"Detected cyclic loading of \" + encodedResource + \" - check your import definitions!\");",
    "output": "Set initialValue of NamedThreadLocal in XmlBeanDefinitionReader This commit overrides initialValueof NamedThreadLocal to lazily initialize the set used in XmlBeanDefinitionReader"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java b/spring-context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java\n--- a/spring-context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,13 +24,15 @@\n import java.net.BindException;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n import javax.management.Descriptor;\n import javax.management.MBeanServerConnection;\n import javax.management.remote.JMXConnectorServer;\n import javax.management.remote.JMXConnectorServerFactory;\n import javax.management.remote.JMXServiceURL;\n \n+import org.awaitility.Awaitility;\n import org.junit.jupiter.api.Test;\n \n import org.springframework.aop.framework.ProxyFactory;\n@@ -218,6 +220,10 @@ void testTestLazyConnectionToRemote() throws Exception {\n \t\t}\n \n \t\ttry {\n+\t\t\tAwaitility.await()\n+\t\t\t\t.atMost(500, TimeUnit.MILLISECONDS)\n+\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n+\t\t\t\t.until(() -> !connector.isActive());\n \t\t\tbean.getName();\n \t\t}\n \t\tcatch (JmxException ex) {",
    "output": "Attempt to make MBeanClientInterceptorTests more robust"
  },
  {
    "input": "diff --git a/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java b/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java\n--- a/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java\n+++ b/spring-beans/src/testFixtures/java/org/springframework/beans/testfixture/beans/CollectingReaderEventListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,7 +65,7 @@ public ComponentDefinition getComponentDefinition(String name) {\n \n \tpublic ComponentDefinition[] getComponentDefinitions() {\n \t\tCollection<ComponentDefinition> collection = this.componentDefinitions.values();\n-\t\treturn collection.toArray(new ComponentDefinition[collection.size()]);\n+\t\treturn collection.toArray(new ComponentDefinition[0]);\n \t}\n \n \t@Override",
    "output": "Remove unnecessary mem alloc in CollectingReaderEventListener"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -44,6 +44,7 @@\n  * Delegate for AbstractApplicationContext's post-processor handling.\n  *\n  * @author Juergen Hoeller\n+ * @author Sam Brannen\n  * @since 4.0\n  */\n final class PostProcessorRegistrationDelegate {\n@@ -255,6 +256,10 @@ else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {\n \t}\n \n \tprivate static void sortPostProcessors(List<?> postProcessors, ConfigurableListableBeanFactory beanFactory) {\n+\t\t// Nothing to sort?\n+\t\tif (postProcessors.size() <= 1) {\n+\t\t\treturn;\n+\t\t}\n \t\tComparator<Object> comparatorToUse = null;\n \t\tif (beanFactory instanceof DefaultListableBeanFactory) {\n \t\t\tcomparatorToUse = ((DefaultListableBeanFactory) beanFactory).getDependencyComparator();",
    "output": "Optimize sorting in PostProcessorRegistrationDelegate"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java b/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java\n--- a/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java\n@@ -259,6 +259,9 @@ public Enhancer() {\n \tpublic void setSuperclass(Class superclass) {\n \t\tif (superclass != null && superclass.isInterface()) {\n \t\t\tsetInterfaces(new Class[]{superclass});\n+\t\t\t// SPRING PATCH BEGIN\n+\t\t\tsetContextClass(superclass);\n+\t\t\t// SPRING PATCH END\n \t\t}\n \t\telse if (superclass != null && superclass.equals(Object.class)) {\n \t\t\t// affects choice of ClassLoader",
    "output": "Expose context class for interface-based CGLIB proxies as well"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -151,7 +151,7 @@ public class CommonAnnotationBeanPostProcessor extends InitDestroyAnnotationBean\n \t@Nullable\n \tprivate static Class<? extends Annotation> ejbRefClass;\n \n-\tprivate static Set<Class<? extends Annotation>> resourceAnnotationTypes = new LinkedHashSet<>(4);\n+\tprivate final static Set<Class<? extends Annotation>> resourceAnnotationTypes = new LinkedHashSet<>(4);\n \n \tstatic {\n \t\ttry {",
    "output": "Make resourceAnnotationTypes field final in CommonAnnotationBPP"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n@@ -248,7 +248,7 @@ private String initDomain(String domain) {\n \t\t\t\tif (lenient && !StringUtils.isEmpty(domain)) {\n \t\t\t\t\tString s = domain.trim();\n \t\t\t\t\tif (s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) {\n-\t\t\t\t\t\tif (s.substring(1, domain.length() - 1).trim().isEmpty()) {\n+\t\t\t\t\t\tif (s.substring(1, s.length() - 1).trim().isEmpty()) {\n \t\t\t\t\t\t\treturn null;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n@@ -86,7 +86,7 @@ public void domainWithEmptyDoubleQuotes() {\n \n \t\tArrays.asList(\"\\\"\\\"\", \"\\t\\\"\\\" \", \" \\\" \\t \\\"\\t\")\n \t\t\t\t.forEach(domain -> {\n-\t\t\t\t\tResponseCookie cookie = ResponseCookie.fromClientResponse(\"id\", \"1fWa\").domain(\"\\\"\\\"\").build();\n+\t\t\t\t\tResponseCookie cookie = ResponseCookie.fromClientResponse(\"id\", \"1fWa\").domain(domain).build();\n \t\t\t\t\tassertThat(cookie.getDomain()).isNull();\n \t\t\t\t});\n ",
    "output": "Fix empty domain handling in ResponseCookie This commit also updates its test to use its intended inputs"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -193,6 +193,10 @@ public static MimeType parseMimeType(String mimeType) {\n \t\tif (!StringUtils.hasLength(mimeType)) {\n \t\t\tthrow new InvalidMimeTypeException(mimeType, \"'mimeType' must not be empty\");\n \t\t}\n+\t\t// do not cache multipart mime types with random boundaries\n+\t\tif (mimeType.startsWith(\"multipart\")) {\n+\t\t\treturn parseMimeTypeInternal(mimeType);\n+\t\t}\n \t\treturn cachedMimeTypes.get(mimeType);\n \t}\n ",
    "output": "Do not cache multipart MIME types in cache Prior to this commmit, \"mutipart/*\" MIME types would be cached by the `MimeTypeUtils` LRU cache. Since those MIME types are likely to have random boundaries in them, they can waste space in the LRU cache. This is not improving things since we're parsing them anyway. This commit skips the caching step for all \"multipart\" MIME types"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/MediaTypeNotSupportedStatusException.java b/spring-web/src/main/java/org/springframework/web/server/MediaTypeNotSupportedStatusException.java\n--- a/spring-web/src/main/java/org/springframework/web/server/MediaTypeNotSupportedStatusException.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/MediaTypeNotSupportedStatusException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,7 +27,10 @@\n  *\n  * @author Rossen Stoyanchev\n  * @since 5.0\n+ * @deprecated in favor of {@link UnsupportedMediaTypeStatusException},\n+ * with this class never thrown by Spring code and to be removed in 5.3\n  */\n+@Deprecated\n @SuppressWarnings(\"serial\")\n public class MediaTypeNotSupportedStatusException extends ResponseStatusException {\n ",
    "output": "Mark MediaTypeNotSupportedStatusException as deprecated"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsBootstrapConfiguration.java b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsBootstrapConfiguration.java\n--- a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsBootstrapConfiguration.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsBootstrapConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,7 +37,7 @@\n  * @see JmsListenerEndpointRegistry\n  * @see EnableJms\n  */\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n public class JmsBootstrapConfiguration {\n ",
    "output": "Set proxyBeansMethod to false when no method is called"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -85,7 +85,7 @@ public abstract class ConvertingEncoderDecoderSupport<T, M> {\n \t */\n \tpublic void init(EndpointConfig config) {\n \t\tApplicationContext applicationContext = getApplicationContext();\n-\t\tif (applicationContext != null && applicationContext instanceof ConfigurableApplicationContext) {\n+\t\tif (applicationContext instanceof ConfigurableApplicationContext) {\n \t\t\tConfigurableListableBeanFactory beanFactory =\n \t\t\t\t\t((ConfigurableApplicationContext) applicationContext).getBeanFactory();\n \t\t\tbeanFactory.autowireBean(this);",
    "output": "Remove unnecessary check in ConvertingEncoderDecoderSupport"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java\n@@ -118,16 +118,13 @@ else if (definition.getFactoryBeanName() != null) {\n \t\t\t\t\t\"'class' nor 'parent' nor 'factory-bean' - can't generate bean name\");\n \t\t}\n \n-\t\tString id = generatedBeanName;\n \t\tif (isInnerBean) {\n \t\t\t// Inner bean: generate identity hashcode suffix.\n-\t\t\tid = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);\n+\t\t\treturn generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);\n \t\t}\n-\t\telse {\n-\t\t\t// Top-level bean: use plain class name with unique suffix if necessary.\n-\t\t\treturn uniqueBeanName(generatedBeanName, registry);\n-\t\t}\n-\t\treturn id;\n+\n+\t\t// Top-level bean: use plain class name with unique suffix if necessary.\n+\t\treturn uniqueBeanName(generatedBeanName, registry);\n \t}\n \n \t/**",
    "output": "Polish implementation of BeanDefinitionReaderUtils.generateBeanName"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java\n@@ -245,7 +245,7 @@ public ResponseCookieBuilder domain(String domain) {\n \n \t\t\t@Nullable\n \t\t\tprivate String initDomain(String domain) {\n-\t\t\t\tif (lenient) {\n+\t\t\t\tif (lenient && !StringUtils.isEmpty(domain)) {\n \t\t\t\t\tString s = domain.trim();\n \t\t\t\t\tif (s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) {\n \t\t\t\t\t\tif (s.substring(1, domain.length() - 1).trim().isEmpty()) {",
    "output": "Avoid NPE in ResponseCookie on null domain"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -199,6 +199,7 @@ public ListenableFuture<Void> connect(final TcpConnectionHandler<P> handler) {\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic ListenableFuture<Void> connect(TcpConnectionHandler<P> handler, ReconnectStrategy strategy) {\n \t\tAssert.notNull(handler, \"TcpConnectionHandler is required\");\n \t\tAssert.notNull(strategy, \"ReconnectStrategy is required\");",
    "output": "Suppress deprecation warning"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.java b/spring-context/src/main/java/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.java\n--- a/spring-context/src/main/java/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.java\n+++ b/spring-context/src/main/java/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -53,9 +53,8 @@ public class Jsr354NumberFormatAnnotationFormatterFactory extends EmbeddedValueR\n \n \n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n \tpublic Set<Class<?>> getFieldTypes() {\n-\t\treturn (Set) Collections.singleton(MonetaryAmount.class);\n+\t\treturn Collections.singleton(MonetaryAmount.class);\n \t}\n \n \t@Override",
    "output": "Clean up warnings in Jsr354NumberFormatAnnotationFormatterFactory"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -865,10 +865,6 @@ private static class DeferredImportSelectorGrouping {\n \t\t\tthis.group = group;\n \t\t}\n \n-\t\tpublic Group getGroup() {\n-\t\t\treturn this.group;\n-\t\t}\n-\n \t\tpublic void add(DeferredImportSelectorHolder deferredImport) {\n \t\t\tthis.deferredImports.add(deferredImport);\n \t\t}",
    "output": "Delete unused method in ConfigurationClassParser"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n@@ -394,10 +394,11 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques\n \t\t}\n \n \t\tif (!matches.isEmpty()) {\n-\t\t\tComparator<Match> comparator = new MatchComparator(getMappingComparator(request));\n-\t\t\tmatches.sort(comparator);\n \t\t\tMatch bestMatch = matches.get(0);\n \t\t\tif (matches.size() > 1) {\n+\t\t\t\tComparator<Match> comparator = new MatchComparator(getMappingComparator(request));\n+\t\t\t\tmatches.sort(comparator);\n+\t\t\t\tbestMatch = matches.get(0);\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(matches.size() + \" matching mappings: \" + matches);\n \t\t\t\t}",
    "output": "Avoid unnecessary sorting in AbstractHandlerMethodMapping"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -254,7 +254,7 @@ public Object getObject() throws BeansException {\n \t\t\treturn getSingletonInstance();\n \t\t}\n \t\telse {\n-\t\t\tif (this.targetName == null && logger.isInfoEnabled()) {\n+\t\t\tif (this.targetName == null) {\n \t\t\t\tlogger.info(\"Using non-singleton proxies with singleton targets is often undesirable. \" +\n \t\t\t\t\t\t\"Enable prototype proxies by setting the 'targetName' property.\");\n \t\t\t}\n@@ -600,8 +600,8 @@ private Advisor namedBeanToAdvisor(Object next) {\n \t\t\t// We expected this to be an Advisor or Advice,\n \t\t\t// but it wasn't. This is a configuration error.\n \t\t\tthrow new AopConfigException(\"Unknown advisor type \" + next.getClass() +\n-\t\t\t\t\t\"; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry, \" +\n-\t\t\t\t\t\"which may also be target or TargetSource\", ex);\n+\t\t\t\t\t\"; can only include Advisor or Advice type beans in interceptorNames chain \" +\n+\t\t\t\t\t\"except for last entry which may also be target instance or TargetSource\", ex);\n \t\t}\n \t}\n ",
    "output": "No log level check unless String concatenation is following"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java\n@@ -181,15 +181,7 @@ public static boolean containsInstance(@Nullable Collection<?> collection, Objec\n \t * @return whether any of the candidates has been found\n \t */\n \tpublic static boolean containsAny(Collection<?> source, Collection<?> candidates) {\n-\t\tif (isEmpty(source) || isEmpty(candidates)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfor (Object candidate : candidates) {\n-\t\t\tif (source.contains(candidate)) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n+\t\treturn findFirstMatch(source, candidates) != null;\n \t}\n \n \t/**",
    "output": "Polish containsAny of CollectionUtils by reusing findFirstMatch"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1343,7 +1343,7 @@ protected RootBeanDefinition getMergedBeanDefinition(\n \t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\tthrow new NoSuchBeanDefinitionException(parentBeanName,\n \t\t\t\t\t\t\t\t\t\t\"Parent name '\" + parentBeanName + \"' is equal to bean name '\" + beanName +\n-\t\t\t\t\t\t\t\t\t\t\"': cannot be resolved without an AbstractBeanFactory parent\");\n+\t\t\t\t\t\t\t\t\t\t\"': cannot be resolved without a ConfigurableBeanFactory parent\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Fix exception message in getMergedBeanDefinition"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -336,6 +336,8 @@ void individualBeanWithFactoryBeanSupplier() {\n \n \t\tassertThat(context.getType(\"fb\")).isEqualTo(String.class);\n \t\tassertThat(context.getType(\"&fb\")).isEqualTo(NonInstantiatedFactoryBean.class);\n+\t\tassertThat(context.getBeanNamesForType(FactoryBean.class)).hasSize(1);\n+\t\tassertThat(context.getBeanNamesForType(NonInstantiatedFactoryBean.class)).hasSize(1);\n \t}\n \n \t@Test",
    "output": "Consistent assertions for supplier-based bean definition tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -184,6 +184,9 @@ static <A extends Annotation> A createProxy(MergedAnnotation<A> annotation, Clas\n \t}\n \n \tprivate static boolean isVisible(ClassLoader classLoader, Class<?> interfaceClass) {\n+\t\tif (classLoader == interfaceClass.getClassLoader()) {\n+\t\t\treturn true;\n+\t\t}\n \t\ttry {\n \t\t\treturn Class.forName(interfaceClass.getName(), false, classLoader) == interfaceClass;\n \t\t}",
    "output": "Short-circuit interface visibility check in case of same ClassLoader"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -876,15 +876,14 @@ public int accept(Method method) {\n \t\t\t\t\t}\n \t\t\t\t\treturn AOP_PROXY;\n \t\t\t\t}\n-\t\t\t\tMethod key = method;\n \t\t\t\t// Check to see if we have fixed interceptor to serve this method.\n \t\t\t\t// Else use the AOP_PROXY.\n-\t\t\t\tif (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n+\t\t\t\tif (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(method)) {\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\t\tlogger.trace(\"Method has advice and optimizations are enabled: \" + method);\n \t\t\t\t\t}\n \t\t\t\t\t// We know that we are optimizing so we can use the FixedStaticChainInterceptors.\n-\t\t\t\t\tint index = this.fixedInterceptorMap.get(key);\n+\t\t\t\t\tint index = this.fixedInterceptorMap.get(method);\n \t\t\t\t\treturn (index + this.fixedInterceptorOffset);\n \t\t\t\t}\n \t\t\t\telse {",
    "output": "Remove unnecessary variable declaration in ProxyCallbackFilter"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n@@ -254,7 +254,7 @@ public Object getObject() throws BeansException {\n \t\t\treturn getSingletonInstance();\n \t\t}\n \t\telse {\n-\t\t\tif (this.targetName == null) {\n+\t\t\tif (this.targetName == null && logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(\"Using non-singleton proxies with singleton targets is often undesirable. \" +\n \t\t\t\t\t\t\"Enable prototype proxies by setting the 'targetName' property.\");\n \t\t\t}",
    "output": "Add logger.isInfoEnabled check before logger.info"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.expression.spel;\n \n import java.awt.Color;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n@@ -312,4 +311,5 @@ public void write(EvaluationContext context, Object target, String name, Object\n \t\t}\n \n \t}\n+\n }",
    "output": "Delete unused import in ExpressionLanguageScenarioTests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SpringCoreBlockHoundIntegrationTests.java\n@@ -21,27 +21,34 @@\n \n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledForJreRange;\n import reactor.blockhound.BlockHound;\n+import reactor.core.scheduler.ReactorBlockHoundIntegration;\n import reactor.core.scheduler.Schedulers;\n \n import org.springframework.tests.sample.objects.TestObject;\n import org.springframework.util.ConcurrentReferenceHashMap;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.jupiter.api.condition.JRE.JAVA_14;\n \n /**\n  * Tests to verify the spring-core BlockHound integration rules.\n  *\n  * @author Rossen Stoyanchev\n  * @since 5.2.4\n  */\n+@DisabledForJreRange(min = JAVA_14)\n public class SpringCoreBlockHoundIntegrationTests {\n \n \n \t@BeforeAll\n \tstatic void setUp() {\n-\t\tBlockHound.install();\n+\t\tBlockHound.builder()\n+\t\t\t\t.with(new ReactorBlockHoundIntegration()) // Reactor non-blocking thread predicate\n+\t\t\t\t.with(new ReactiveAdapterRegistry.SpringCoreBlockHoundIntegration())\n+\t\t\t\t.install();\n \t}\n \n ",
    "output": "Refine BlockHound support - disable for Java 14/15 for now until BlockHound support - targeted installation of required integrations only"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -63,6 +63,7 @@ class WebClientDataBufferAllocatingTests extends AbstractDataBufferAllocatingTes\n \n \t@BeforeAll\n \tvoid setUpReactorResourceFactory() {\n+\t\tthis.factory.setShutdownQuietPeriod(Duration.ofMillis(100));\n \t\tthis.factory.afterPropertiesSet();\n \t}\n ",
    "output": "Configure Reactor Netty quiet shutdown period in tests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -90,7 +90,7 @@\n  */\n public class RestTemplate extends InterceptingHttpAccessor implements RestOperations {\n \n-\tprivate static boolean romePresent;\n+\tprivate static final boolean romePresent;\n \n \tprivate static final boolean jaxb2Present;\n ",
    "output": "Add missing final declaration for static field"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n--- a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -329,7 +329,7 @@ protected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> e\n \t\t\t\treturn false;\n \t\t\t}\n \t\t});\n-\t\treturn (result == Boolean.TRUE);\n+\t\treturn (Boolean.TRUE.equals(result));\n \t}\n \n \t@Override\n@@ -344,7 +344,7 @@ protected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> e\n \t\t\t\treturn false;\n \t\t\t}\n \t\t});\n-\t\treturn (result == Boolean.TRUE);\n+\t\treturn (Boolean.TRUE.equals(result));\n \t}\n \n \t@Override",
    "output": "Minor polishing in ConcurrentReferenceHashMap"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CommonsLogWriter.java b/spring-core/src/main/java/org/springframework/util/CommonsLogWriter.java\n--- a/spring-core/src/main/java/org/springframework/util/CommonsLogWriter.java\n+++ b/spring-core/src/main/java/org/springframework/util/CommonsLogWriter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -56,14 +56,7 @@ public void write(char ch) {\n \t@Override\n \tpublic void write(char[] buffer, int offset, int length) {\n \t\tfor (int i = 0; i < length; i++) {\n-\t\t\tchar ch = buffer[offset + i];\n-\t\t\tif (ch == '\\n' && this.buffer.length() > 0) {\n-\t\t\t\tlogger.debug(this.buffer.toString());\n-\t\t\t\tthis.buffer.setLength(0);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthis.buffer.append(ch);\n-\t\t\t}\n+\t\t\twrite(buffer[offset + i]);\n \t\t}\n \t}\n ",
    "output": "Minor refactoring in CommonsLogWriter"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java b/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java\n--- a/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java\n+++ b/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -146,7 +146,7 @@ public Object invoke(MethodInvocation mi) throws Throwable {\n \t\t\telse {\n \t\t\t\tPersistenceExceptionTranslator translator = this.persistenceExceptionTranslator;\n \t\t\t\tif (translator == null) {\n-\t\t\t\t\tAssert.state(this.beanFactory != null, \"No PersistenceExceptionTranslator set\");\n+\t\t\t\t\tAssert.state(this.beanFactory != null, \"Cannot use PersistenceExceptionTranslator autodetection without ListableBeanFactory\");\n \t\t\t\t\ttranslator = detectPersistenceExceptionTranslators(this.beanFactory);\n \t\t\t\t\tthis.persistenceExceptionTranslator = translator;\n \t\t\t\t}",
    "output": "Improve assertion message in PersistenceExceptionTranslationInterceptor"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,10 +52,10 @@ public static void execute(DatabasePopulator populator, DataSource dataSource) t\n \t\t\t\tDataSourceUtils.releaseConnection(connection, dataSource);\n \t\t\t}\n \t\t}\n+\t\tcatch (ScriptException ex){\n+\t\t\tthrow ex;\n+\t\t}\n \t\tcatch (Throwable ex) {\n-\t\t\tif (ex instanceof ScriptException) {\n-\t\t\t\tthrow (ScriptException) ex;\n-\t\t\t}\n \t\t\tthrow new UncategorizedScriptException(\"Failed to execute database script\", ex);\n \t\t}\n \t}",
    "output": "Use dedicated catch block for ScriptException"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n@@ -325,13 +325,9 @@ static String readScript(EncodedResource resource) throws IOException {\n \tprivate static String readScript(EncodedResource resource, @Nullable String[] commentPrefixes,\n \t\t\t@Nullable String separator, @Nullable String blockCommentEndDelimiter) throws IOException {\n \n-\t\tLineNumberReader lnr = new LineNumberReader(resource.getReader());\n-\t\ttry {\n+\t\ttry (LineNumberReader lnr = new LineNumberReader(resource.getReader())) {\n \t\t\treturn readScript(lnr, commentPrefixes, separator, blockCommentEndDelimiter);\n \t\t}\n-\t\tfinally {\n-\t\t\tlnr.close();\n-\t\t}\n \t}\n \n \t/**",
    "output": "Use try-with-resource in ScriptUtils"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java\n@@ -231,7 +231,8 @@ public static String copyToString(@Nullable Reader in) throws IOException {\n \tprivate static void close(Closeable closeable) {\n \t\ttry {\n \t\t\tcloseable.close();\n-\t\t} catch (IOException ex) {\n+\t\t}\n+\t\tcatch (IOException ex) {\n \t\t\t// ignore\n \t\t}\n \t}",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -821,14 +821,9 @@ protected long getLastModifiedInternal(HttpServletRequest request, HandlerMethod\n \t * (never {@code null}).\n \t */\n \tprivate SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {\n-\t\tClass<?> handlerType = handlerMethod.getBeanType();\n-\t\tSessionAttributesHandler sessionAttrHandler = this.sessionAttributesHandlerCache.get(handlerType);\n-\t\tif (sessionAttrHandler == null) {\n-\t\t\tsynchronized (this.sessionAttributesHandlerCache) {\n-\t\t\t\tsessionAttrHandler = this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, type -> new SessionAttributesHandler(type, this.sessionAttributeStore));\n-\t\t\t}\n-\t\t}\n-\t\treturn sessionAttrHandler;\n+\t\treturn this.sessionAttributesHandlerCache.computeIfAbsent(\n+\t\t\t\thandlerMethod.getBeanType(),\n+\t\t\t\ttype -> new SessionAttributesHandler(type, this.sessionAttributeStore));\n \t}\n \n \t/**",
    "output": "Remove synchronized block As per the Javadoc of ConcurrentHashMap its computeIfAbsent implementation is atomic and hence already synchronized internally, so we can remove the surrounding synchronization block"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,6 +37,7 @@\n  * @author Juergen Hoeller\n  * @author Rick Evans\n  * @author Sam Brannen\n+ * @author Hyunjin Choi\n  */\n class ObjectUtilsTests {\n \n@@ -806,6 +807,20 @@ void caseInsensitiveValueOf() {\n \t\t\t.withMessage(\"Constant [bogus] does not exist in enum type org.springframework.util.ObjectUtilsTests$Tropes\");\n \t}\n \n+\t@Test\n+\tvoid containsElement() {\n+\t\tString keyObject = \"key\";\n+\t\tString[] array = {\"foo\", \"bar\", \"Bar\", keyObject};\n+\n+\t\tString fakeObject = \"fake\";\n+\n+\t\tassertThat(ObjectUtils.containsElement(null, keyObject)).isFalse();\n+\n+\t\tassertThat(ObjectUtils.containsElement(array, keyObject)).isTrue();\n+\n+\t\tassertThat(ObjectUtils.containsElement(array, fakeObject)).isFalse();\n+\t}\n+\n \tprivate void assertEqualHashCodes(int expected, Object array) {\n \t\tint actual = ObjectUtils.nullSafeHashCode(array);\n \t\tassertThat(actual).isEqualTo(expected);",
    "output": "Test ObjectUtils.containsElementThis commit introduces a unit test for the containsElementmethod in ObjectUtils"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java\n@@ -67,6 +67,7 @@ public void placeHoldersInRequestMapping() throws Exception {\n \t}\n \n \t@Test  // SPR-13637\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void suffixPatternMatch() throws Exception {\n \t\tTestStandaloneMockMvcBuilder builder = new TestStandaloneMockMvcBuilder(new PersonController());\n \t\tbuilder.setUseSuffixPatternMatch(false);",
    "output": "Suppress deprecation warning in spring-test"
  },
  {
    "input": "diff --git a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n--- a/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -157,7 +157,12 @@ private static class Log4jLog implements Log, Serializable {\n \t\tprivate final ExtendedLogger logger;\n \n \t\tpublic Log4jLog(String name) {\n-\t\t\tthis.logger = loggerContext.getLogger(name);\n+\t\t\tLoggerContext context = loggerContext;\n+\t\t\tif (context == null) {\n+\t\t\t\t// Circular call in early-init scenario -> static field not initialized yet\n+\t\t\t\tcontext = LogManager.getContext(Log4jLog.class.getClassLoader(), false);\n+\t\t\t}\n+\t\t\tthis.logger = context.getLogger(name);\n \t\t}\n \n \t\t@Override",
    "output": "Use local LoggerContext in Log4jLog when static field not initialized yet"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -42,18 +42,18 @@ public final class CallMetaDataProviderFactory {\n \tpublic static final List<String> supportedDatabaseProductsForProcedures = Arrays.asList(\n \t\t\t\"Apache Derby\",\n \t\t\t\"DB2\",\n-\t\t\t\"MySQL\",\n+\t\t\t\"Informix Dynamic Server\",\n \t\t\t\"Microsoft SQL Server\",\n+\t\t\t\"MySQL\",\n \t\t\t\"Oracle\",\n \t\t\t\"PostgreSQL\",\n-\t\t\t\"Sybase\",\n-\t\t\t\"Informix Dynamic Server\"\n+\t\t\t\"Sybase\"\n \t\t);\n \n \t/** List of supported database products for function calls. */\n \tpublic static final List<String> supportedDatabaseProductsForFunctions = Arrays.asList(\n-\t\t\t\"MySQL\",\n \t\t\t\"Microsoft SQL Server\",\n+\t\t\t\"MySQL\",\n \t\t\t\"Oracle\",\n \t\t\t\"PostgreSQL\"\n \t\t);",
    "output": "Alphabetical order for database names"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java\n@@ -46,7 +46,8 @@ public final class CallMetaDataProviderFactory {\n \t\t\t\"Microsoft SQL Server\",\n \t\t\t\"Oracle\",\n \t\t\t\"PostgreSQL\",\n-\t\t\t\"Sybase\"\n+\t\t\t\"Sybase\",\n+\t\t\t\"Informix Dynamic Server\"\n \t\t);\n \n \t/** List of supported database products for function calls. */",
    "output": "Add Informix to the list of supported database products for procedure calls Hi guys, We're facing an issue in our application when we try to call a procedure in Informix database, our app uses standard JDBC (spring-jdbc and com.ibm.informix.jdbc.4.50.3) without Hibernate to connect to the database we trying to execute any procedure call in our Informix database there is no data returned. Diagnostic It points to the Java class called CallMetaDataProviderFactory in spring-jdbc project. Taking a look of this class there is no explicit support for Informix procedure calls, so I added \"Informix Dynamic Server\" to the list of supported databases and now I can execute procedures call without issues. Basically I added the line \"Informix Dynamic Server\" to the list called \"supportedDatabaseProductsForProcedures\" of CallMetaDataProviderFactory class in my local environment and it worked as expected. I really appreciate any feedback/suggestion for this approach due we would like to continue using the framework normally in our development without losing updates using a workaround in our end. Many thanks in advance"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.net.InetSocketAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import javax.net.ssl.SSLSession;\n \n@@ -47,6 +48,9 @@\n  */\n class ReactorServerHttpRequest extends AbstractServerHttpRequest {\n \n+\tprivate static final AtomicLong logPrefixIndex = new AtomicLong(0);\n+\n+\n \tprivate final HttpServerRequest request;\n \n \tprivate final NettyDataBufferFactory bufferFactory;\n@@ -181,8 +185,11 @@ public <T> T getNativeRequest() {\n \t@Override\n \t@Nullable\n \tprotected String initId() {\n-\t\treturn this.request instanceof Connection ?\n-\t\t\t\t((Connection) this.request).channel().id().asShortText() : null;\n+\t\tif (this.request instanceof Connection) {\n+\t\t\treturn ((Connection) this.request).channel().id().asShortText() +\n+\t\t\t\t\t\"-\" + logPrefixIndex.incrementAndGet();\n+\t\t}\n+\t\treturn null;\n \t}\n \n }",
    "output": "Append unique number to WebFlux server log prefix"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,7 @@ public class ReactorResourceFactory implements InitializingBean, DisposableBean\n \t@Nullable\n \tprivate Consumer<HttpResources> globalResourcesConsumer;\n \n-\tprivate Supplier<ConnectionProvider> connectionProviderSupplier = () -> ConnectionProvider.elastic(\"webflux\");\n+\tprivate Supplier<ConnectionProvider> connectionProviderSupplier = () -> ConnectionProvider.fixed(\"webflux\", 500);\n \n \tprivate Supplier<LoopResources> loopResourcesSupplier = () -> LoopResources.create(\"webflux-http\");\n ",
    "output": "Upgrade default value in ReactorResourceFactory We used ConnectionProvider#elastic only to customize the name. Now that Reactor Netty's TcpResources itself uses fixed 500 by default, we update to have the same value which would apply when global resources are not used"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n@@ -336,7 +336,15 @@ public static Object newInstance(final Constructor cstruct, final Object[] args)\n \tpublic static Constructor getConstructor(Class type, Class[] parameterTypes) {\n \t\ttry {\n \t\t\tConstructor constructor = type.getDeclaredConstructor(parameterTypes);\n-\t\t\tconstructor.setAccessible(true);\n+\t\t\tif (System.getSecurityManager() != null) {\n+\t\t\t\tAccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n+\t\t\t\t\tconstructor.setAccessible(true);\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tconstructor.setAccessible(true);\n+\t\t\t}\n \t\t\treturn constructor;\n \t\t}\n \t\tcatch (NoSuchMethodException e) {",
    "output": "Solve ReflectPermission Issue in Sandbox Security Policy Model"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java\n@@ -216,6 +216,7 @@ protected void applyHeaders() {\n \t\t\tif (response.getContentType() == null && contentType != null) {\n \t\t\t\tresponse.setContentType(contentType.toString());\n \t\t\t}\n+\t\t\tgetHeaders().remove(HttpHeaders.CONTENT_TYPE);\n \t\t\tCharset charset = (contentType != null ? contentType.getCharset() : null);\n \t\t\tif (response.getCharacterEncoding() == null && charset != null) {\n \t\t\t\tresponse.setCharacterEncoding(charset.name());\n@@ -224,6 +225,7 @@ protected void applyHeaders() {\n \t\t\tif (contentLength != -1) {\n \t\t\t\tresponse.setContentLengthLong(contentLength);\n \t\t\t}\n+\t\t\tgetHeaders().remove(HttpHeaders.CONTENT_LENGTH);\n \t\t}\n \n \t\t@Override",
    "output": "Avoid setting special Content-* response headers for Tomcat As of , Spring WebFlux uses a `TomcatHeadersAdapter` implementation to directly address the native headers used by the server. In the case of Tomcat, \"Content-Length\" and \"Content-Type\" headers are processed separately and should not be added to the native headers map. This commit improves the `HandlerAdapter` implementation for Tomcat and removes those headers, if previously set in the map. The adapter already has a section that handles the Tomcat-specific calls for such headers"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/example/gh24375/B.java b/spring-context/src/test/java/example/gh24375/B.java\n--- a/spring-context/src/test/java/example/gh24375/B.java\n+++ b/spring-context/src/test/java/example/gh24375/B.java\n@@ -26,4 +26,4 @@\n public @interface B {\n \n \tString name() default \"\";\n-}\n\\ No newline at end of file\n+}",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n@@ -430,7 +430,7 @@ protected ParsedSql getParsedSql(String sql) {\n \t\t\treturn NamedParameterUtils.parseSqlStatement(sql);\n \t\t}\n \t\tsynchronized (this.parsedSqlCache) {\n-\t\t\treturn parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);\n+\t\t\treturn this.parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);\n \t\t}\n \t}\n ",
    "output": "Fix Checkstyle violation See gh-"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java\n@@ -430,12 +430,7 @@ protected ParsedSql getParsedSql(String sql) {\n \t\t\treturn NamedParameterUtils.parseSqlStatement(sql);\n \t\t}\n \t\tsynchronized (this.parsedSqlCache) {\n-\t\t\tParsedSql parsedSql = this.parsedSqlCache.get(sql);\n-\t\t\tif (parsedSql == null) {\n-\t\t\t\tparsedSql = NamedParameterUtils.parseSqlStatement(sql);\n-\t\t\t\tthis.parsedSqlCache.put(sql, parsedSql);\n-\t\t\t}\n-\t\t\treturn parsedSql;\n+\t\t\treturn parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);\n \t\t}\n \t}\n ",
    "output": "Simplify getParsedSqlmethod in NamedParameterJdbcTemplate"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -745,4 +745,20 @@ void invalidLocaleWithLanguageTag() {\n \t\tassertThat(StringUtils.parseLocale(\"\")).isNull();\n \t}\n \n+\t@Test\n+\tvoid split() {\n+\t\tassertThat(StringUtils.split(\"Hello, world\", \",\")).isEqualTo(new String[]{\"Hello\", \" world\"});\n+\t\tassertThat(StringUtils.split(\",Hello world\", \",\")).isEqualTo(new String[]{\"\", \"Hello world\"});\n+\t\tassertThat(StringUtils.split(\"Hello world,\", \",\")).isEqualTo(new String[]{\"Hello world\", \"\"});\n+\t\tassertThat(StringUtils.split(\"Hello, world,\", \",\")).isEqualTo(new String[]{\"Hello\", \" world,\"});\n+\t}\n+\n+\t@Test\n+\tvoid splitWithEmptyString() {\n+\t\tassertThat(StringUtils.split(\"Hello, world\", \"\")).isNull();\n+\t\tassertThat(StringUtils.split(\"\", \",\")).isNull();\n+\t\tassertThat(StringUtils.split(null, \",\")).isNull();\n+\t\tassertThat(StringUtils.split(\"Hello, world\", null)).isNull();\n+\t\tassertThat(StringUtils.split(null, null)).isNull();\n+\t}\n }",
    "output": "Add tests for StringUtils splitmethod"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n@@ -18,7 +18,6 @@\n \n import java.net.URI;\n \n-import org.junit.Assume;\n import org.junit.jupiter.api.Assumptions;\n import reactor.core.publisher.Mono;\n ",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java\n@@ -18,6 +18,8 @@\n \n import java.net.URI;\n \n+import org.junit.Assume;\n+import org.junit.jupiter.api.Assumptions;\n import reactor.core.publisher.Mono;\n \n import org.springframework.http.HttpStatus;\n@@ -27,6 +29,7 @@\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.AbstractHttpHandlerIntegrationTests;\n import org.springframework.web.testfixture.http.server.reactive.bootstrap.HttpServer;\n+import org.springframework.web.testfixture.http.server.reactive.bootstrap.ReactorHttpServer;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -72,6 +75,10 @@ void handlingError(HttpServer httpServer) throws Exception {\n \n \t@ParameterizedHttpServerTest // SPR-15560\n \tvoid emptyPathSegments(HttpServer httpServer) throws Exception {\n+\n+\t\t/* Temporarily necessary for https://github.com/reactor/reactor-netty/issues/948 */\n+\t\tAssumptions.assumeFalse(httpServer instanceof ReactorHttpServer);\n+\n \t\tstartServer(httpServer);\n \n \t\tRestTemplate restTemplate = new RestTemplate();",
    "output": "Upgrade to Dysprosium snapshots"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java b/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java\n@@ -362,7 +362,7 @@ void m95() { } void m96() { } void m97() { } void m98() { } void m99() { }\n \t}\n \n \t@Test\n-\tvoid getDecalredMethodsReturnsCopy() {\n+\tvoid getDeclaredMethodsReturnsCopy() {\n \t\tMethod[] m1 = ReflectionUtils.getDeclaredMethods(A.class);\n \t\tMethod[] m2 = ReflectionUtils.getDeclaredMethods(A.class);\n \t\tassertThat(m1). isNotSameAs(m2);",
    "output": "Fix typo in ReflectionUtilsTests"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/AbstractEmbeddedDatabaseConfigurer.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/AbstractEmbeddedDatabaseConfigurer.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/AbstractEmbeddedDatabaseConfigurer.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/AbstractEmbeddedDatabaseConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,6 +25,8 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n+import org.springframework.jdbc.support.JdbcUtils;\n+\n /**\n  * Base class for {@link EmbeddedDatabaseConfigurer} implementations\n  * providing common shutdown behavior through a \"SHUTDOWN\" statement.\n@@ -53,14 +55,7 @@ public void shutdown(DataSource dataSource, String databaseName) {\n \t\t\tlogger.info(\"Could not shut down embedded database\", ex);\n \t\t}\n \t\tfinally {\n-\t\t\tif (con != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tcon.close();\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable ex) {\n-\t\t\t\t\tlogger.debug(\"Could not close JDBC Connection on shutdown\", ex);\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\tJdbcUtils.closeConnection(con);\n \t\t}\n \t}\n ",
    "output": "Revise exception handling in AbstractEmbeddedDatabaseConfigurer"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java b/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopContext.java\n@@ -67,7 +67,8 @@ public static Object currentProxy() throws IllegalStateException {\n \t\tObject proxy = currentProxy.get();\n \t\tif (proxy == null) {\n \t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"Cannot find current proxy: Set 'exposeProxy' property on Advised to 'true' to make it available.\");\n+\t\t\t\t\t\"Cannot find current proxy: Set 'exposeProxy' property on Advised to 'true' to make it available. \" +\n+\t\t\t\t\t\t\t\"Also Check AopContext.currentProxy() invoke in the origin thread.\");\n \t\t}\n \t\treturn proxy;\n \t}",
    "output": "Improve exception message in AopContext.currentProxy"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n@@ -73,7 +73,9 @@ public static MethodInvocation currentInvocation() throws IllegalStateException\n \t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\"No MethodInvocation found: Check that an AOP invocation is in progress, and that the \" +\n \t\t\t\t\t\"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that \" +\n-\t\t\t\t\t\"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!\");\n+\t\t\t\t\t\"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor! \" +\n+\t\t\t\t\t\"Check that ExposeInvocationInterceptor and ExposeInvocationInterceptor.currentInvocation() \" +\n+\t\t\t\t\t\"invoke in one Thread\");\n \t\t}\n \t\treturn mi;\n \t}",
    "output": "Improve ExposeInvocationInterceptor exception message"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n@@ -26,6 +26,7 @@\n import org.apache.commons.logging.LogFactory;\n \n import org.springframework.util.Assert;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.util.StringValueResolver;\n \n@@ -36,6 +37,7 @@\n  * implementations.\n  *\n  * @author Juergen Hoeller\n+ * @author Qimiao Chen\n  * @since 2.5.2\n  */\n public class SimpleAliasRegistry implements AliasRegistry {\n@@ -98,16 +100,9 @@ protected boolean allowAliasOverriding() {\n \t * @since 4.2.1\n \t */\n \tpublic boolean hasAlias(String name, String alias) {\n-\t\tfor (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {\n-\t\t\tString registeredName = entry.getValue();\n-\t\t\tif (registeredName.equals(name)) {\n-\t\t\t\tString registeredAlias = entry.getKey();\n-\t\t\t\tif (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias)) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n+\t\tString registeredName = this.aliasMap.get(alias);\n+\t\treturn ObjectUtils.nullSafeEquals(registeredName, name) || (registeredName != null\n+\t\t\t\t&& hasAlias(name, registeredName));\n \t}\n \n \t@Override",
    "output": "Optimize SimpleAliasRegistry hasAlias implementation This commit reduces the number of loops and recursions in the implementation of SimpleAliasRegistry#hasAlias"
  },
  {
    "input": "diff --git a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/JavaUtilLoggingConfigurer.java b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/JavaUtilLoggingConfigurer.java\n--- a/spring-core/src/testFixtures/java/org/springframework/core/testfixture/JavaUtilLoggingConfigurer.java\n+++ b/spring-core/src/testFixtures/java/org/springframework/core/testfixture/JavaUtilLoggingConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.web.reactive.fixtures;\n+package org.springframework.core.testfixture;\n \n import java.io.InputStream;\n import java.util.logging.LogManager;",
    "output": "Move JavaUtilLoggingConfigurer to spring-core test fixtures"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java\n@@ -600,7 +600,7 @@ private Advisor namedBeanToAdvisor(Object next) {\n \t\t\t// We expected this to be an Advisor or Advice,\n \t\t\t// but it wasn't. This is a configuration error.\n \t\t\tthrow new AopConfigException(\"Unknown advisor type \" + next.getClass() +\n-\t\t\t\t\t\"; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry,\" +\n+\t\t\t\t\t\"; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry, \" +\n \t\t\t\t\t\"which may also be target or TargetSource\", ex);\n \t\t}\n \t}",
    "output": "Add missing space in AopConfigException message"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java b/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java\n@@ -107,11 +107,10 @@ public void parseEncodedFilenameWithInvalidName() {\n \t@Test // gh-23077\n \tpublic void parseWithEscapedQuote() {\n \n-\t\tBiConsumer<String, String> tester = (description, filename) -> {\n+\t\tBiConsumer<String, String> tester = (description, filename) ->\n \t\t\tassertThat(parse(\"form-data; name=\\\"file\\\"; filename=\\\"\" + filename + \"\\\"; size=123\"))\n \t\t\t\t\t.as(description)\n \t\t\t\t\t.isEqualTo(builder(\"form-data\").name(\"file\").filename(filename).size(123L).build());\n-\t\t};\n \n \t\ttester.accept(\"Escaped quotes should be ignored\",\n \t\t\t\t\"\\\\\\\"The Twilight Zone\\\\\\\".txt\");\n@@ -223,10 +222,9 @@ public void formatWithEncodedFilenameUsingUsAscii() {\n \t@Test // gh-24220\n \tpublic void formatWithFilenameWithQuotes() {\n \n-\t\tBiConsumer<String, String> tester = (input, output) -> {\n+\t\tBiConsumer<String, String> tester = (input, output) ->\n \t\t\tassertThat(builder(\"form-data\").filename(input).build().toString())\n \t\t\t\t\t.isEqualTo(\"form-data; filename=\\\"\" + output + \"\\\"\");\n-\t\t};\n \n \t\tString filename = \"\\\"foo.txt\";\n \t\ttester.accept(filename, \"\\\\\" + filename);",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n@@ -36,6 +36,8 @@\n import org.springframework.util.PathMatcher;\n import org.springframework.web.HttpRequestHandler;\n import org.springframework.web.context.request.WebRequestInterceptor;\n+import org.springframework.web.context.request.async.WebAsyncManager;\n+import org.springframework.web.context.request.async.WebAsyncUtils;\n import org.springframework.web.context.support.WebApplicationObjectSupport;\n import org.springframework.web.cors.CorsConfiguration;\n import org.springframework.web.cors.CorsConfigurationSource;\n@@ -571,6 +573,12 @@ public CorsInterceptor(@Nullable CorsConfiguration config) {\n \t\tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n \t\t\t\tthrows Exception {\n \n+\t\t\t// Consistent with CorsFilter, ignore ASYNC dispatches\n+\t\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n+\t\t\tif (asyncManager.hasConcurrentResult()) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n \t\t\treturn corsProcessor.processRequest(this.config, request, response);\n \t\t}\n ",
    "output": "CorsInterceptor skips async dispatch"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java\n@@ -388,4 +388,16 @@ public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {\n \t\treturn new BeanPropertyRowMapper<>(mappedClass);\n \t}\n \n+\t/**\n+\t * Static factory method to create a new {@code BeanPropertyRowMapper}\n+\t * (with the required type specified only once).\n+\t * @param mappedClass the class that each row should be mapped to\n+\t * @param conversionService the {@link ConversionService} for binding JDBC values to bean properties, or {@code null} for none\n+\t */\n+\tpublic static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass, @Nullable ConversionService conversionService) {\n+\t\tBeanPropertyRowMapper<T> rowMapper = newInstance(mappedClass);\n+\t\trowMapper.setConversionService(conversionService);\n+\t\treturn rowMapper;\n+\t}\n+\n }",
    "output": "Add BeanPropertyRowMapper.newInstance(mappedClass, conversionService) Similar to SingleColumnRowMapper.newInstance(requiredType, conversionService) which was added in"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n@@ -230,12 +230,14 @@ private static <C, R> R processClassHierarchy(C context, int[] aggregateIndex, C\n \t\t\t\treturn superclassResult;\n \t\t\t}\n \t\t}\n-\t\tClass<?> enclosingClass = source.getEnclosingClass();\n-\t\tif (includeEnclosing && enclosingClass != null) {\n-\t\t\tR enclosingResult = processClassHierarchy(context, aggregateIndex,\n+\t\tif (includeEnclosing) {\n+\t\t\tClass<?> enclosingClass = source.getEnclosingClass();\n+\t\t\tif (enclosingClass != null) {\n+\t\t\t\tR enclosingResult = processClassHierarchy(context, aggregateIndex,\n \t\t\t\t\tenclosingClass, processor, classFilter, includeInterfaces, true);\n-\t\t\tif (enclosingResult != null) {\n-\t\t\t\treturn enclosingResult;\n+\t\t\t\tif (enclosingResult != null) {\n+\t\t\t\t\treturn enclosingResult;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn null;",
    "output": "Only load enclosing class for TYPE_HIERARCHY_AND_ENCLOSING_CLASSES strategy Prior to this commit, the enclosing class was always eagerly loaded even if the annotation search strategy was not explicitly TYPE_HIERARCHY_AND_ENCLOSING_CLASSES"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -1496,9 +1496,9 @@ public TypeVariablesVariableResolver(TypeVariable<?>[] variables, ResolvableType\n \t\t@Override\n \t\t@Nullable\n \t\tpublic ResolvableType resolveVariable(TypeVariable<?> variable) {\n+\t\t\tTypeVariable<?> v2 = SerializableTypeWrapper.unwrap(variable);\n \t\t\tfor (int i = 0; i < this.variables.length; i++) {\n \t\t\t\tTypeVariable<?> v1 = SerializableTypeWrapper.unwrap(this.variables[i]);\n-\t\t\t\tTypeVariable<?> v2 = SerializableTypeWrapper.unwrap(variable);\n \t\t\t\tif (ObjectUtils.nullSafeEquals(v1, v2)) {\n \t\t\t\t\treturn this.generics[i];\n \t\t\t\t}",
    "output": "Hoist constant result of SerializableTypeWrapper.unwrapout of loop"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -264,18 +264,11 @@ private static <T> Supplier<Mono<T>> skipBodyAsMono(ReactiveHttpInputMessage mes\n \t\t\t\t() -> consumeAndCancel(message).then(Mono.empty()) : Mono::empty;\n \t}\n \n-\tprivate static Mono<Void> consumeAndCancel(ReactiveHttpInputMessage message) {\n-\t\treturn message.getBody()\n-\t\t\t\t.map(buffer -> {\n-\t\t\t\t\tDataBufferUtils.release(buffer);\n-\t\t\t\t\tthrow new ReadCancellationException();\n-\t\t\t\t})\n-\t\t\t\t.onErrorResume(ReadCancellationException.class, ex -> Mono.empty())\n-\t\t\t\t.then();\n-\t}\n-\n-\t@SuppressWarnings(\"serial\")\n-\tprivate static class ReadCancellationException extends RuntimeException {\n+\tprivate static Flux<DataBuffer> consumeAndCancel(ReactiveHttpInputMessage message) {\n+\t\treturn message.getBody().takeWhile(buffer -> {\n+\t\t\tDataBufferUtils.release(buffer);\n+\t\t\treturn false;\n+\t\t});\n \t}\n \n }",
    "output": "Replace ReadCancellationException with takeWhile"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java\n@@ -20,8 +20,6 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.function.Consumer;\n import java.util.function.Predicate;\n \n import org.junit.jupiter.api.BeforeEach;\n@@ -38,8 +36,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n-import org.springframework.http.codec.FormHttpMessageReader;\n-import org.springframework.http.codec.FormHttpMessageWriter;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n--- a/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n@@ -96,8 +96,12 @@ private void doTestSubClassAnnotationInfo(AnnotationMetadata metadata) {\n \t\tassertThat(metadata.hasAnnotation(Component.class.getName())).isFalse();\n \t\tassertThat(metadata.hasAnnotation(Scope.class.getName())).isFalse();\n \t\tassertThat(metadata.hasAnnotation(SpecialAttr.class.getName())).isFalse();\n+\t\tassertThat(metadata.hasMetaAnnotation(Component.class.getName())).isFalse();\n+\t\tassertThat(metadata.hasMetaAnnotation(MetaAnnotation.class.getName())).isFalse();\n \t\tassertThat(metadata.getAnnotationTypes()).hasSize(0);\n \t\tassertThat(metadata.getAnnotationAttributes(Component.class.getName())).isNull();\n+\t\tassertThat(metadata.getAnnotationAttributes(MetaAnnotation.class.getName(), false)).isNull();\n+\t\tassertThat(metadata.getAnnotationAttributes(MetaAnnotation.class.getName(), true)).isNull();\n \t\tassertThat(metadata.getAnnotatedMethods(DirectAnnotation.class.getName()).size()).isEqualTo(0);\n \t\tassertThat(metadata.isAnnotated(IsAnnotatedAnnotation.class.getName())).isEqualTo(false);\n \t\tassertThat(metadata.getAllAnnotationAttributes(DirectAnnotation.class.getName())).isNull();",
    "output": "Test status quo for AnnotatedTypeMetadata.getAnnotationAttributes"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java\n@@ -72,7 +72,7 @@ public void domainChecks() {\n \t\tArrays.asList(\"abc\", \"abc.org\", \"abc-def.org\", \"abc3.org\", \".abc.org\")\n \t\t\t\t.forEach(domain -> ResponseCookie.from(\"n\", \"v\").domain(domain).build());\n \n-\t\tArrays.asList(\"-abc.org\", \"abc.org.\", \"abc.org-\", \"-abc.org\", \"abc.org-\")\n+\t\tArrays.asList(\"-abc.org\", \"abc.org.\", \"abc.org-\")\n \t\t\t\t.forEach(domain -> assertThatThrownBy(() -> ResponseCookie.from(\"n\", \"v\").domain(domain).build())\n \t\t\t\t\t\t.hasMessageContaining(\"Invalid first/last char\"));\n ",
    "output": "Remove duplicate checks in ResponseCookieTests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -208,7 +208,7 @@ private PropertyDescriptor findExistingPropertyDescriptor(String propertyName, C\n \t}\n \n \tprivate String propertyNameFor(Method method) {\n-\t\treturn Introspector.decapitalize(method.getName().substring(3, method.getName().length()));\n+\t\treturn Introspector.decapitalize(method.getName().substring(3));\n \t}\n \n \n@@ -534,11 +534,13 @@ static class PropertyDescriptorComparator implements Comparator<PropertyDescript\n \t\tpublic int compare(PropertyDescriptor desc1, PropertyDescriptor desc2) {\n \t\t\tString left = desc1.getName();\n \t\t\tString right = desc2.getName();\n+\t\t\tbyte[] leftBytes = left.getBytes();\n+\t\t\tbyte[] rightBytes = right.getBytes();\n \t\t\tfor (int i = 0; i < left.length(); i++) {\n \t\t\t\tif (right.length() == i) {\n \t\t\t\t\treturn 1;\n \t\t\t\t}\n-\t\t\t\tint result = left.getBytes()[i] - right.getBytes()[i];\n+\t\t\t\tint result = leftBytes[i] - rightBytes[i];\n \t\t\t\tif (result != 0) {\n \t\t\t\t\treturn result;\n \t\t\t\t}",
    "output": "Hoist constant byte[] out of loop"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n@@ -77,10 +77,20 @@ public WebSocketHttpRequestHandler(WebSocketHandler wsHandler) {\n \tpublic WebSocketHttpRequestHandler(WebSocketHandler wsHandler, HandshakeHandler handshakeHandler) {\n \t\tAssert.notNull(wsHandler, \"wsHandler must not be null\");\n \t\tAssert.notNull(handshakeHandler, \"handshakeHandler must not be null\");\n-\t\tthis.wsHandler = new ExceptionWebSocketHandlerDecorator(new LoggingWebSocketHandlerDecorator(wsHandler));\n+\t\tthis.wsHandler = decorate(wsHandler);\n \t\tthis.handshakeHandler = handshakeHandler;\n \t}\n \n+\t/**\n+\t * Decorate the {@code WebSocketHandler} passed into the constructor.\n+\t * <p>By default, {@link LoggingWebSocketHandlerDecorator} and\n+\t * {@link ExceptionWebSocketHandlerDecorator} are added.\n+\t * @since 5.2.2\n+\t */\n+\tprotected WebSocketHandler decorate(WebSocketHandler handler) {\n+\t\treturn new ExceptionWebSocketHandlerDecorator(new LoggingWebSocketHandlerDecorator(handler));\n+\t}\n+\n \n \t/**\n \t * Return the WebSocketHandler.",
    "output": "Protected method to decorate WebSocketHandler"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n@@ -180,7 +180,7 @@ void emptyBodyWritten() {\n \t\tconfigureEncoder(MimeTypeUtils.TEXT_PLAIN);\n \t\tHttpMessageWriter<String> writer = new EncoderHttpMessageWriter<>(this.encoder);\n \t\twriter.write(Mono.empty(), forClass(String.class), TEXT_PLAIN, this.response, NO_HINTS).block();\n-\t\tStepVerifier.create(this.response.getBody()).expectComplete();\n+\t\tStepVerifier.create(this.response.getBody()).verifyComplete();\n \t\tassertThat(this.response.getHeaders().getContentLength()).isEqualTo(0);\n \t}\n ",
    "output": "Add missing verifyin EncoderHttpMessageWriterTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java\n@@ -210,8 +210,8 @@ public void testLimit() {\n \t\t\t\t.expectNext(expected)\n \t\t\t\t.verifyComplete();\n \n-\t\tStepVerifier.create(decode(source, false, maxInMemorySize - 1))\n-\t\t\t\t.expectError(DataBufferLimitException.class);\n+\t\tStepVerifier.create(decode(source, false, maxInMemorySize - 2))\n+\t\t\t\t.verifyError(DataBufferLimitException.class);\n \t}\n \n \t@Test",
    "output": "Add missing verifyin Jackson2TokenizerTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -420,14 +420,14 @@ public static String replace(String inString, String oldPattern, @Nullable Strin\n \t\tint pos = 0;  // our position in the old string\n \t\tint patLen = oldPattern.length();\n \t\twhile (index >= 0) {\n-\t\t\tsb.append(inString.substring(pos, index));\n+\t\t\tsb.append(inString, pos, index);\n \t\t\tsb.append(newPattern);\n \t\t\tpos = index + patLen;\n \t\t\tindex = inString.indexOf(oldPattern, pos);\n \t\t}\n \n \t\t// append any characters to the right of a match\n-\t\tsb.append(inString.substring(pos));\n+\t\tsb.append(inString, pos, inString.length());\n \t\treturn sb.toString();\n \t}\n ",
    "output": "Avoid substring allocation in StringUtils.replace"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n \n import org.eclipse.jetty.websocket.api.Session;\n import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n@@ -155,7 +156,7 @@ public ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler w\n \n \t\tCallable<WebSocketSession> connectTask = () -> {\n \t\t\tFuture<Session> future = this.client.connect(listener, uri, request);\n-\t\t\tfuture.get();\n+\t\t\tfuture.get(this.client.getConnectTimeout() + 2000, TimeUnit.MILLISECONDS);\n \t\t\treturn wsSession;\n \t\t};\n ",
    "output": "Avoid indefinite wait in JettyWebSocketClient"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/fixtures/JavaUtilLoggingConfigurer.java b/spring-webflux/src/test/java/org/springframework/web/reactive/fixtures/JavaUtilLoggingConfigurer.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/fixtures/JavaUtilLoggingConfigurer.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/fixtures/JavaUtilLoggingConfigurer.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.test_fixtures.logging;\n+package org.springframework.web.reactive.fixtures;\n \n import java.io.InputStream;\n import java.util.logging.LogManager;",
    "output": "Move JavaUtilLoggingConfigurer to web.reactive.fixtures package"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -473,10 +473,10 @@ public String[] getBeanNamesForType(ResolvableType type) {\n \tpublic String[] getBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit) {\n \t\tClass<?> resolved = type.resolve();\n \t\tif (resolved != null && !type.hasGenerics()) {\n-\t\t\treturn getBeanNamesForType(resolved, includeNonSingletons, includeNonSingletons);\n+\t\t\treturn getBeanNamesForType(resolved, includeNonSingletons, allowEagerInit);\n \t\t}\n \t\telse {\n-\t\t\treturn doGetBeanNamesForType(type, includeNonSingletons, includeNonSingletons);\n+\t\t\treturn doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n \t\t}\n \t}\n ",
    "output": "Fix inappropriate eager init"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n@@ -40,6 +40,7 @@\n import org.springframework.http.StreamingHttpOutputMessage;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MimeTypeUtils;\n import org.springframework.util.MultiValueMap;\n@@ -415,7 +416,11 @@ else if (mediaType.getCharset() == null) {\n \n \tprotected String serializeForm(MultiValueMap<String, Object> formData, Charset charset) {\n \t\tStringBuilder builder = new StringBuilder();\n-\t\tformData.forEach((name, values) ->\n+\t\tformData.forEach((name, values) -> {\n+\t\t\t\tif (name == null) {\n+\t\t\t\t\tAssert.isTrue(CollectionUtils.isEmpty(values), \"Null name in form data: \" + formData);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tvalues.forEach(value -> {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tif (builder.length() != 0) {\n@@ -430,7 +435,8 @@ protected String serializeForm(MultiValueMap<String, Object> formData, Charset c\n \t\t\t\t\tcatch (UnsupportedEncodingException ex) {\n \t\t\t\t\t\tthrow new IllegalStateException(ex);\n \t\t\t\t\t}\n-\t\t\t\t}));\n+\t\t\t\t});\n+\t\t});\n \n \t\treturn builder.toString();\n \t}",
    "output": "Reject null form data names ...or skip if there are no values either"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/codec/Decoder.java b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java\n--- a/spring-core/src/main/java/org/springframework/core/codec/Decoder.java\n+++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,7 +88,7 @@ Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementTy\n \t * @return the decoded value, possibly {@code null}\n \t * @since 5.2\n \t */\n-\t@SuppressWarnings(\"ConstantConditions\")\n+\t@Nullable\n \tdefault T decode(DataBuffer buffer, ResolvableType targetType,\n \t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) throws DecodingException {\n ",
    "output": "Add @Nullable annotation to decode method taking DataBuffer Javadoc indicates the returned value can be null"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n@@ -199,7 +199,7 @@ public void setHeaderPredicate(@Nullable Predicate<String> headerPredicate) {\n \t * @since 5.2\n \t */\n \t@Nullable\n-\tpublic Predicate<String> getHeaderPredicate() {\n+\tprotected Predicate<String> getHeaderPredicate() {\n \t\treturn this.headerPredicate;\n \t}\n ",
    "output": "Fix getHeaderPredicate visibility to be declared as protected"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java b/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java\n@@ -59,7 +59,9 @@ public ApplicationListenerDetector(AbstractApplicationContext applicationContext\n \n \t@Override\n \tpublic void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {\n-\t\tthis.singletonNames.put(beanName, beanDefinition.isSingleton());\n+\t\tif (ApplicationListener.class.isAssignableFrom(beanType)) {\n+\t\t\tthis.singletonNames.put(beanName, beanDefinition.isSingleton());\n+\t\t}\n \t}\n \n \t@Override",
    "output": "avoid store all bean name"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1317,7 +1317,6 @@ protected RootBeanDefinition getMergedBeanDefinition(\n \n \t\t\tif (mbd == null || mbd.stale) {\n \t\t\t\tprevious = mbd;\n-\t\t\t\tmbd = null;\n \t\t\t\tif (bd.getParentName() == null) {\n \t\t\t\t\t// Use copy of given root bean definition.\n \t\t\t\t\tif (bd instanceof RootBeanDefinition) {",
    "output": "Delete unnecessary variable assignment"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -121,6 +121,7 @@ public void destroy() throws IOException {\n \t\t\t\tcache.close();\n \t\t\t}\n \t\t\tthis.client.dispatcher().executorService().shutdown();\n+\t\t\tthis.client.connectionPool().evictAll();\n \t\t}\n \t}\n ",
    "output": "Clear connection pool for OkHttpClient"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n@@ -88,7 +88,7 @@ public class SynchronossPartHttpMessageReader extends LoggingCodecSupport implem\n \n \tprivate long maxDiskUsagePerPart = -1;\n \n-\tprivate long maxParts = -1;\n+\tprivate int maxParts = -1;\n \n \n \t/**\n@@ -138,15 +138,15 @@ public long getMaxDiskUsagePerPart() {\n \t * Specify the maximum number of parts allowed in a given multipart request.\n \t * @since 5.1.11\n \t */\n-\tpublic void setMaxParts(long maxParts) {\n+\tpublic void setMaxParts(int maxParts) {\n \t\tthis.maxParts = maxParts;\n \t}\n \n \t/**\n \t * Return the {@link #setMaxParts configured} limit on the number of parts.\n \t * @since 5.1.11\n \t */\n-\tpublic long getMaxParts() {\n+\tpublic int getMaxParts() {\n \t\treturn this.maxParts;\n \t}\n ",
    "output": "Use int for maxParts instead of long"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java b/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java\n@@ -25,6 +25,7 @@\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.ConcurrentReferenceHashMap;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * Provides a quick way to access the attribute methods of an {@link Annotation}\n@@ -73,15 +74,11 @@ private AttributeMethods(@Nullable Class<? extends Annotation> annotationType, M\n \t\t\tif (method.getDefaultValue() != null) {\n \t\t\t\tfoundDefaultValueMethod = true;\n \t\t\t}\n-\t\t\tif (type.isAnnotation() ||\n-\t\t\t\t\t(type.isArray() && type.getComponentType().isAnnotation())) {\n+\t\t\tif (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation())) {\n \t\t\t\tfoundNestedAnnotation = true;\n \t\t\t}\n-\t\t\tmethod.setAccessible(true);\n-\t\t\tthis.canThrowTypeNotPresentException[i] =\n-\t\t\t\t\ttype == Class.class ||\n-\t\t\t\t\ttype == Class[].class ||\n-\t\t\t\t\ttype.isEnum();\n+\t\t\tReflectionUtils.makeAccessible(method);\n+\t\t\tthis.canThrowTypeNotPresentException[i] = (type == Class.class || type == Class[].class || type.isEnum());\n \t\t}\n \t\tthis.hasDefaultValueMethod = foundDefaultValueMethod;\n \t\tthis.hasNestedAnnotation = foundNestedAnnotation;",
    "output": "Avoid unnecessary setAccessible call in AttributeMethods"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/WebSocketStompClientTests.java\n@@ -46,6 +46,7 @@\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.WebSocketSession;\n import org.springframework.web.socket.client.WebSocketClient;\n+import org.springframework.web.socket.handler.WebSocketHandlerDecorator;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n@@ -319,9 +320,12 @@ private WebSocketHandler connect() {\n \n \t@SuppressWarnings(\"unchecked\")\n \tprivate TcpConnection<byte[]> getTcpConnection() throws Exception {\n-\t\tWebSocketHandler webSocketHandler = connect();\n-\t\twebSocketHandler.afterConnectionEstablished(this.webSocketSession);\n-\t\treturn (TcpConnection<byte[]>) webSocketHandler;\n+\t\tWebSocketHandler handler = connect();\n+\t\thandler.afterConnectionEstablished(this.webSocketSession);\n+\t\tif (handler instanceof WebSocketHandlerDecorator) {\n+\t\t\thandler = ((WebSocketHandlerDecorator) handler).getLastHandler();\n+\t\t}\n+\t\treturn (TcpConnection<byte[]>) handler;\n \t}\n \n \tprivate void testInactivityTaskScheduling(Runnable runnable, long delay, long sleepTime)",
    "output": "Fix failing test after previous commit"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/WebSocketStompClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/WebSocketStompClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/WebSocketStompClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/WebSocketStompClient.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -57,6 +57,7 @@\n import org.springframework.web.socket.WebSocketMessage;\n import org.springframework.web.socket.WebSocketSession;\n import org.springframework.web.socket.client.WebSocketClient;\n+import org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator;\n import org.springframework.web.socket.sockjs.transport.SockJsSession;\n import org.springframework.web.util.UriComponentsBuilder;\n \n@@ -265,7 +266,9 @@ public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHe\n \t\tAssert.notNull(url, \"'url' must not be null\");\n \t\tConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler);\n \t\tWebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session);\n-\t\tgetWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter);\n+\t\tgetWebSocketClient()\n+\t\t\t\t.doHandshake(new LoggingWebSocketHandlerDecorator(adapter), handshakeHeaders, url)\n+\t\t\t\t.addCallback(adapter);\n \t\treturn session.getSessionFuture();\n \t}\n ",
    "output": "Logging decorator for WebSocketStompClient handler"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n@@ -314,6 +314,15 @@ public BeanDefinitionBuilder addDependsOn(String beanName) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set whether this bean is a primary autowire candidate.\n+\t * @since 5.1.11\n+\t */\n+\tpublic BeanDefinitionBuilder setPrimary(boolean primary) {\n+\t\tthis.beanDefinition.setPrimary(primary);\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Set the role of this definition.\n \t */",
    "output": "Expose primary flag on BeanDefinitionBuilder"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -486,7 +486,9 @@ public Class<?> getParameterType() {\n \t\tif (paramType != null) {\n \t\t\treturn paramType;\n \t\t}\n-\t\tparamType = ResolvableType.forMethodParameter(this, null, 1).resolve();\n+\t\tif (getContainingClass() != getDeclaringClass()) {\n+\t\t\tparamType = ResolvableType.forMethodParameter(this, null, 1).resolve();\n+\t\t}\n \t\tif (paramType == null) {\n \t\t\tparamType = computeParameterType();\n \t\t}",
    "output": "Avoid unnecessary use of ResolvableType within MethodParameter"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n@@ -80,7 +80,7 @@ public <T> Mono<T> transactional(Mono<T> mono) {\n \t\t\t// Need re-wrapping of ReactiveTransaction until we get hold of the exception\n \t\t\t// through usingWhen.\n \t\t\treturn status.flatMap(it -> Mono.usingWhen(Mono.just(it), ignore -> mono,\n-\t\t\t\t\tthis.transactionManager::commit, (res, err) -> Mono.empty(), s -> Mono.empty())\n+\t\t\t\t\tthis.transactionManager::commit, (res, err) -> Mono.empty(), this.transactionManager::commit)\n \t\t\t\t\t.onErrorResume(ex -> rollbackOnException(it, ex).then(Mono.error(ex))));\n \t\t})\n \t\t.subscriberContext(TransactionContextManager.getOrCreateContext())",
    "output": "Commit on cancelled subscription in TransactionalOperator::transactional Prior to this commit, TransactionalOperator::transactional did not close the transaction when cancelled"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -99,11 +99,22 @@ public byte[] getResponseBodyAsByteArray() {\n \t}\n \n \t/**\n-\t * Return the response body as a string.\n+\t * Return the response body converted to String. The charset used is that\n+\t * of the response \"Content-Type\" or otherwise {@code \"UTF-8\"}.\n \t */\n \tpublic String getResponseBodyAsString() {\n+\t\treturn getResponseBodyAsString(DEFAULT_CHARSET);\n+\t}\n+\n+\t/**\n+\t * Return the response body converted to String. The charset used is that\n+\t * of the response \"Content-Type\" or otherwise the one given.\n+\t * @param fallbackCharset the charset to use on if the response doesn't specify.\n+\t * @since 5.1.11\n+\t */\n+\tpublic String getResponseBodyAsString(Charset fallbackCharset) {\n \t\tif (this.responseCharset == null) {\n-\t\t\treturn new String(this.responseBody, DEFAULT_CHARSET);\n+\t\t\treturn new String(this.responseBody, fallbackCharset);\n \t\t}\n \t\ttry {\n \t\t\treturn new String(this.responseBody, this.responseCharset);",
    "output": "Charset argument in RestClientResponseException"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n@@ -103,7 +103,6 @@ public void multiStringHeaderValue() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/persons/1\")).andExpect(header().stringValues(VARY, \"foo\", \"bar\"));\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Test\n \tpublic void multiStringHeaderValueWithMatchers() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/persons/1\"))",
    "output": "Clean up warning in spring-test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java\n@@ -58,7 +58,7 @@ public class XpathRequestMatchers {\n \t * formatting specifiers defined in {@link String#format(String, Object...)}\n \t * @throws XPathExpressionException if expression compilation failed\n \t */\n-\tXpathRequestMatchers(String expression, @Nullable Map<String, String> namespaces, Object... args)\n+\tprotected XpathRequestMatchers(String expression, @Nullable Map<String, String> namespaces, Object... args)\n \t\t\tthrows XPathExpressionException {\n \n \t\tthis.xpathHelper = new XpathExpectationsHelper(expression, namespaces, args);",
    "output": "Reinstate protected XpathRequestMatchers constructor This commit makes the XpathRequestMatchers constructor protected again in case users have extended this class"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n@@ -267,7 +267,9 @@ private Mono<Void> handleUnresolvedError(ServerWebExchange exchange, Throwable e\n \t\tServerHttpResponse response = exchange.getResponse();\n \t\tString logPrefix = exchange.getLogPrefix();\n \n-\t\t// Request handling error (e.g. remote call), if we manage to set the status..\n+\t\t// Sometimes a remote call error can look like a disconnected client.\n+\t\t// Try to set the response first before the \"isDisconnectedClient\" check.\n+\n \t\tif (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {\n \t\t\tlogger.error(logPrefix + \"500 Server Error for \" + formatRequest(request), ex);\n \t\t\treturn Mono.empty();",
    "output": "Upgrade comment in HttpWebHandlerAdapter"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n@@ -99,11 +99,22 @@ public byte[] getResponseBodyAsByteArray() {\n \t}\n \n \t/**\n-\t * Return the response body as a string.\n+\t * Return the response body converted to String. The charset used is that\n+\t * of the response \"Content-Type\" or otherwise {@code \"UTF-8\"}.\n \t */\n \tpublic String getResponseBodyAsString() {\n+\t\treturn getResponseBodyAsString(DEFAULT_CHARSET);\n+\t}\n+\n+\t/**\n+\t * Return the response body converted to String. The charset used is that\n+\t * of the response \"Content-Type\" or otherwise the one given.\n+\t * @param fallbackCharset the charset to use on if the response doesn't specify.\n+\t * @since 5.1.11\n+\t */\n+\tpublic String getResponseBodyAsString(Charset fallbackCharset) {\n \t\tif (this.responseCharset == null) {\n-\t\t\treturn new String(this.responseBody, DEFAULT_CHARSET);\n+\t\t\treturn new String(this.responseBody, fallbackCharset);\n \t\t}\n \t\ttry {\n \t\t\treturn new String(this.responseBody, this.responseCharset);",
    "output": "Charset argument in RestClientResponseException"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -33,7 +33,7 @@ public class RestClientResponseException extends RestClientException {\n \n \tprivate static final long serialVersionUID = -8803556342728481792L;\n \n-\tprivate static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;\n+\tprivate static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;\n \n \n \tprivate final int rawStatusCode;",
    "output": "RestClientResponseException defaults to"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n@@ -153,7 +153,7 @@ public <T> ResultMatcher sessionAttribute(String name, Object value) {\n \t * Assert the given session attributes do not exist.\n \t * @since 5.2.1\n \t */\n-\tpublic <T> ResultMatcher sessionAttributeDoesNotExist(String... names) {\n+\tpublic ResultMatcher sessionAttributeDoesNotExist(String... names) {\n \t\treturn result -> {\n \t\t\tHttpSession session = result.getRequest().getSession();\n \t\t\tAssert.state(session != null, \"No HttpSession\");",
    "output": "Remove unused type parameter declaration in RequestResultMatchers The new sessionAttributeDoesNotExistmethod introduced in commit e73344fc7183631bc86ef9273afbbdce9414e629 declares an unused type parameter <T>. This commit removes that unused type parameter from the method signature"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotation.java\n@@ -441,8 +441,8 @@ private Object getValueFromMetaAnnotation(int attributeIndex,\n \t\t\tvalue = this.mapping.getMappedAnnotationValue(attributeIndex, forMirrorResolution);\n \t\t}\n \t\tif (value == null) {\n-\t\t\tMethod attribute = mapping.getAttributes().get(attributeIndex);\n-\t\t\tvalue = ReflectionUtils.invokeMethod(attribute, mapping.getAnnotation());\n+\t\t\tMethod attribute = this.mapping.getAttributes().get(attributeIndex);\n+\t\t\tvalue = ReflectionUtils.invokeMethod(attribute, this.mapping.getAnnotation());\n \t\t}\n \t\treturn value;\n \t}",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -370,7 +370,7 @@ public class MediaType extends MimeType implements Serializable {\n \t\tAPPLICATION_OCTET_STREAM = new MediaType(\"application\", \"octet-stream\");\n \t\tAPPLICATION_PDF = new MediaType(\"application\", \"pdf\");\n \t\tAPPLICATION_PROBLEM_JSON = new MediaType(\"application\", \"problem+json\");\n-\t\tAPPLICATION_PROBLEM_JSON_UTF8 = new MediaType(\"application\", \"problem\", StandardCharsets.UTF_8);\n+\t\tAPPLICATION_PROBLEM_JSON_UTF8 = new MediaType(\"application\", \"problem+json\", StandardCharsets.UTF_8);\n \t\tAPPLICATION_PROBLEM_XML = new MediaType(\"application\", \"problem+xml\");\n \t\tAPPLICATION_RSS_XML = new MediaType(\"application\", \"rss+xml\");\n \t\tAPPLICATION_STREAM_JSON = new MediaType(\"application\", \"stream+json\");",
    "output": "Fix APPLICATION_PROBLEM_JSON_UTF8 media type value This commit adds the missing \"+json\" suffix to the \"application/problem\" media type for its deprecated variant"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -170,7 +170,6 @@ public static boolean isCandidateClass(Class<?> clazz, String annotationName) {\n \t\tif (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {\n \t\t\treturn false;\n \t\t}\n-\t\t// TODO: annotation presence registry to be integrated here\n \t\treturn true;\n \t}\n ",
    "output": "Remove TODO in AnnotationUtils"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java\n@@ -382,7 +382,7 @@ public void individualBeanWithFactoryBeanObjectTypeAsTargetTypeAndLazy() {\n \n \t\tassertThat(context.getType(\"&fb\")).isNull();\n \t\tassertThat(context.getType(\"fb\")).isEqualTo(String.class);\n-\t\tassertThat(context.getBean(\"&fb\") instanceof FactoryBean);\n+\t\tassertThat(context.getBean(\"&fb\")).isInstanceOf(FactoryBean.class);\n \t\tassertThat(context.getType(\"&fb\")).isEqualTo(TypedFactoryBean.class);\n \t\tassertThat(context.getType(\"fb\")).isEqualTo(String.class);\n \t\tassertThat(context.getBeanNamesForType(FactoryBean.class).length).isEqualTo(1);",
    "output": "Fix an assertion in AnnotationConfigApplicationContextTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n@@ -360,7 +360,7 @@ public void handleMessage(Message<?> message) throws MessagingException {\n \t\t\t\t\tlogger.debug(\"Terminating '\" + session + \"'\", ex);\n \t\t\t\t}\n \t\t\t\telse if (logger.isWarnEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Terminating '\" + session + \"': \" + ex.getMessage());\n+\t\t\t\t\tlogger.warn(\"Terminating '\" + session + \"': \" + ex.getMessage());\n \t\t\t\t}\n \t\t\t\tthis.stats.incrementLimitExceededCount();\n \t\t\t\tclearSession(session, ex.getStatus()); // clear first, session may be unresponsive",
    "output": "Use correct log level"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanDefinitionTests.java\n@@ -126,13 +126,13 @@ public void genericBeanDefinitionEquality() {\n \t\totherBd.setAbstract(true);\n \t\totherBd.setLazyInit(true);\n \t\tboolean condition1 = !bd.equals(otherBd);\n-\t\tassertTrue(condition1);\n+\t\tassertThat(condition1).isTrue();\n \t\tboolean condition = !otherBd.equals(bd);\n-\t\tassertTrue(condition);\n+\t\tassertThat(condition).isTrue();\n \t\totherBd.setParentName(\"parent\");\n-\t\tassertTrue(bd.equals(otherBd));\n-\t\tassertTrue(otherBd.equals(bd));\n-\t\tassertTrue(bd.hashCode() == otherBd.hashCode());\n+\t\tassertThat(bd.equals(otherBd)).isTrue();\n+\t\tassertThat(otherBd.equals(bd)).isTrue();\n+\t\tassertThat(bd.hashCode() == otherBd.hashCode()).isTrue();\n \t}\n \n \t@Test",
    "output": "Upgrade genericBeanDefinitionEquality test to AssertJ usage on master"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java b/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java\n--- a/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java\n+++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -48,7 +48,7 @@ public class ShadowingClassLoader extends DecoratingClassLoader {\n \n \t/** Packages that are excluded by default. */\n \tpublic static final String[] DEFAULT_EXCLUDED_PACKAGES =\n-\t\t\tnew String[] {\"java.\", \"javax.\", \"sun.\", \"oracle.\", \"com.sun.\", \"com.ibm.\", \"COM.ibm.\",\n+\t\t\tnew String[] {\"java.\", \"javax.\", \"jdk.\", \"sun.\", \"oracle.\", \"com.sun.\", \"com.ibm.\", \"COM.ibm.\",\n \t\t\t\t\t\"org.w3c.\", \"org.xml.\", \"org.dom4j.\", \"org.eclipse\", \"org.aspectj.\", \"net.sf.cglib\",\n \t\t\t\t\t\"org.springframework.cglib\", \"org.apache.xerces.\", \"org.apache.commons.logging.\"};\n ",
    "output": "Exclude jdk package in ShadowingClassLoader (JDK 11 compatibility)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n--- a/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n+++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n@@ -87,25 +87,26 @@ public void initializeCaches() {\n \t@Override\n \t@Nullable\n \tpublic Cache getCache(String name) {\n+\t\t// Quick check for existing cache...\n \t\tCache cache = this.cacheMap.get(name);\n \t\tif (cache != null) {\n \t\t\treturn cache;\n \t\t}\n-\t\telse {\n-\t\t\t// Fully synchronize now for missing cache creation...\n+\n+\t\t// The provider may support on-demand cache creation...\n+\t\tCache missingCache = getMissingCache(name);\n+\t\tif (missingCache != null) {\n+\t\t\t// Fully synchronize now for missing cache registration\n \t\t\tsynchronized (this.cacheMap) {\n \t\t\t\tcache = this.cacheMap.get(name);\n \t\t\t\tif (cache == null) {\n-\t\t\t\t\tcache = getMissingCache(name);\n-\t\t\t\t\tif (cache != null) {\n-\t\t\t\t\t\tcache = decorateCache(cache);\n-\t\t\t\t\t\tthis.cacheMap.put(name, cache);\n-\t\t\t\t\t\tupdateCacheNames(name);\n-\t\t\t\t\t}\n+\t\t\t\t\tcache = decorateCache(missingCache);\n+\t\t\t\t\tthis.cacheMap.put(name, cache);\n+\t\t\t\t\tupdateCacheNames(name);\n \t\t\t\t}\n-\t\t\t\treturn cache;\n \t\t\t}\n \t\t}\n+\t\treturn cache;\n \t}\n \n \t@Override",
    "output": "Avoid unnecessary synchronization for non-existent missing caches"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/AbstractMBeanServerTests.java b/spring-context/src/test/java/org/springframework/jmx/AbstractMBeanServerTests.java\n--- a/spring-context/src/test/java/org/springframework/jmx/AbstractMBeanServerTests.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/AbstractMBeanServerTests.java\n@@ -16,12 +16,17 @@\n \n package org.springframework.jmx;\n \n+import java.net.BindException;\n+\n import javax.management.MBeanServer;\n import javax.management.MBeanServerFactory;\n import javax.management.ObjectName;\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+import org.opentest4j.TestAbortedException;\n \n import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -52,6 +57,16 @@\n  */\n public abstract class AbstractMBeanServerTests {\n \n+\t@RegisterExtension\n+\tTestExecutionExceptionHandler bindExceptionHandler = (context, throwable) -> {\n+\t\t// Abort test?\n+\t\tif (throwable instanceof BindException) {\n+\t\t\tthrow new TestAbortedException(\"Failed to bind to MBeanServer\", throwable);\n+\t\t}\n+\t\t// Else rethrow to conform to the contract of TestExecutionExceptionHandler\n+\t\tthrow throwable;\n+\t};\n+\n \tprotected MBeanServer server;\n \n ",
    "output": "Abort MBeanServer tests if BindException encountered"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n--- a/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,22 +41,22 @@ public final class DataSize implements Comparable<DataSize> {\n \t/**\n \t * Bytes per Kilobyte.\n \t */\n-\tprivate static long BYTES_PER_KB = 1024;\n+\tprivate static final long BYTES_PER_KB = 1024;\n \n \t/**\n \t * Bytes per Megabyte.\n \t */\n-\tprivate static long BYTES_PER_MB = BYTES_PER_KB * 1024;\n+\tprivate static final long BYTES_PER_MB = BYTES_PER_KB * 1024;\n \n \t/**\n \t * Bytes per Gigabyte.\n \t */\n-\tprivate static long BYTES_PER_GB = BYTES_PER_MB * 1024;\n+\tprivate static final long BYTES_PER_GB = BYTES_PER_MB * 1024;\n \n \t/**\n \t * Bytes per Terabyte.\n \t */\n-\tprivate static long BYTES_PER_TB = BYTES_PER_GB * 1024;\n+\tprivate static final long BYTES_PER_TB = BYTES_PER_GB * 1024;\n \n \n \tprivate final long bytes;",
    "output": "Make DataSize constants final"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n@@ -359,6 +359,9 @@ public void handleMessage(Message<?> message) throws MessagingException {\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"Terminating '\" + session + \"'\", ex);\n \t\t\t\t}\n+\t\t\t\telse if (logger.isWarnEnabled()) {\n+\t\t\t\t\tlogger.debug(\"Terminating '\" + session + \"': \" + ex.getMessage());\n+\t\t\t\t}\n \t\t\t\tthis.stats.incrementLimitExceededCount();\n \t\t\t\tclearSession(session, ex.getStatus()); // clear first, session may be unresponsive\n \t\t\t\tsession.close(ex.getStatus());",
    "output": "Log sendBufferSizeLimit exceeded at warn"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java\n@@ -268,6 +268,11 @@ private Mono<Void> handleUnresolvedError(ServerWebExchange exchange, Throwable e\n \t\tString logPrefix = exchange.getLogPrefix();\n \n \t\tif (isDisconnectedClientError(ex)) {\n+\t\t\t// Request handling error (e.g. remote call), if we manage to set the status..\n+\t\t\tif (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {\n+\t\t\t\tlogger.error(logPrefix + \"500 Server Error for \" + formatRequest(request), ex);\n+\t\t\t\treturn Mono.empty();\n+\t\t\t}\n \t\t\tif (lostClientLogger.isTraceEnabled()) {\n \t\t\t\tlostClientLogger.trace(logPrefix + \"Client went away\", ex);\n \t\t\t}",
    "output": "Refine disconnected client handling in WebFlux If an error looks like a \"disconnected client\" but the response is not yet committed then it can't be an I/O error from writing to the server response. It is most likely as a result of a remote call as part of request handling. Not setting the response to 500 in this case results in a 200 response status despite the error. Even if it was an I/O error from the server response, setting the status won't impact a failed response"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/api/ApiDiffPlugin.java\n@@ -29,6 +29,7 @@\n import org.gradle.api.artifacts.Dependency;\n import org.gradle.api.plugins.JavaBasePlugin;\n import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.publish.maven.plugins.MavenPublishPlugin;\n import org.gradle.api.tasks.TaskProvider;\n import org.gradle.jvm.tasks.Jar;\n \n@@ -90,8 +91,7 @@ private void createApiDiffTask(String baselineVersion, Project project) {\n \n \tprivate boolean isProjectEligible(Project project) {\n \t\treturn project.getPlugins().hasPlugin(JavaPlugin.class)\n-\t\t\t\t&& !project.getName().equals(\"spring-core-coroutines\")\n-\t\t\t\t&& !project.getName().equals(\"spring-framework-bom\");\n+\t\t\t\t&& project.getPlugins().hasPlugin(MavenPublishPlugin.class);\n \t}\n \n \tprivate Configuration createBaselineConfiguration(String baselineVersion, Project project) {",
    "output": "Fix API Diff Gradle task Prior to this change, the Gradle API Diff task was failing due to a missing class (a Guava class) during processing. This might be a dependency that was previously brought by some other dependency. This commit adds that dependency as a workaround, and improves the Gradle API Diff task to only select relevant projects when running the task (projects using the Java Plugin and the Maven Publish Plugin)"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java\n@@ -80,7 +80,7 @@ public <T> Mono<T> transactional(Mono<T> mono) {\n \t\t\t// Need re-wrapping of ReactiveTransaction until we get hold of the exception\n \t\t\t// through usingWhen.\n \t\t\treturn status.flatMap(it -> Mono.usingWhen(Mono.just(it), ignore -> mono,\n-\t\t\t\t\tthis.transactionManager::commit, s -> Mono.empty())\n+\t\t\t\t\tthis.transactionManager::commit, (res, err) -> Mono.empty(), s -> Mono.empty())\n \t\t\t\t\t.onErrorResume(ex -> rollbackOnException(it, ex).then(Mono.error(ex))));\n \t\t})\n \t\t.subscriberContext(TransactionContextManager.getOrCreateContext())",
    "output": "Avoid deprecated usingWhen method in Reactor 3.3"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.web.reactive.function.client;\n \n import java.time.Duration;\n@@ -38,16 +39,19 @@\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.client.reactive.ReactorClientHttpConnector;\n import org.springframework.http.client.reactive.ReactorResourceFactory;\n+import org.springframework.tests.EnabledForTestGroups;\n import org.springframework.web.reactive.function.UnsupportedMediaTypeException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.tests.TestGroup.PERFORMANCE;\n \n /**\n  * WebClient integration tests focusing on data buffer management.\n  *\n  * @author Rossen Stoyanchev\n  * @author Sam Brannen\n  */\n+@EnabledForTestGroups(PERFORMANCE)\n public class WebClientDataBufferAllocatingTests extends AbstractDataBufferAllocatingTests {\n \n \tprivate static final Duration DELAY = Duration.ofSeconds(5);",
    "output": "Execute WebClientDataBufferAllocatingTests only during PERFORMANCE build"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java b/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcutTests.java\n@@ -20,9 +20,6 @@\n \n import org.springframework.aop.MethodMatcher;\n import org.springframework.aop.Pointcut;\n-import org.springframework.aop.support.annotation.AnnotationClassFilter;\n-import org.springframework.aop.support.annotation.AnnotationMatchingPointcut;\n-import org.springframework.aop.support.annotation.AnnotationMethodMatcher;\n import org.springframework.beans.factory.annotation.Qualifier;\n \n import static org.assertj.core.api.Assertions.assertThat;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/StandardWebSocketClient.java\n@@ -109,7 +109,7 @@ private Mono<Void> executeInternal(URI url, HttpHeaders requestHeaders, WebSocke\n \t\t\t\t\tClientEndpointConfig config = createEndpointConfig(configurator, protocols);\n \t\t\t\t\treturn this.webSocketContainer.connectToServer(endpoint, config, url);\n \t\t\t\t})\n-\t\t\t\t.subscribeOn(Schedulers.elastic()) // connectToServer is blocking\n+\t\t\t\t.subscribeOn(Schedulers.boundedElastic()) // connectToServer is blocking\n \t\t\t\t.then(completionMono);\n \t}\n ",
    "output": "Use Reactor's new Schedulers.boundedElasticPrior to this commit, Spring Framework would use `Schedulers.elastic` in places where we needed to process blocking tasks in a reactive environment. With reactor/reactor-core, a new `Schedulers.boundedElastic` scheduler is available and achieves the same goal with added security; it guarantees that resources are bounded. This commit uses that new scheduler in the standard websocket client, since the underlying API is blocking for the connection phase and we need to schedule that off a web server thread"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -45,7 +45,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.Timeout;\n ",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java\n@@ -23,6 +23,8 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n+import org.springframework.scheduling.config.ScheduledTaskRegistrar;\n+\n /**\n  * Annotation that marks a method to be scheduled. Exactly one of the\n  * {@link #cron}, {@link #fixedDelay}, or {@link #fixedRate} attributes must be\n@@ -60,8 +62,9 @@\n \t * <p>This is primarily meant for use with <code>${...}</code> placeholders,\n \t * allowing for external disabling of corresponding scheduled methods.\n \t * @since 5.1\n+\t * @see ScheduledTaskRegistrar#CRON_DISABLED\n \t */\n-\tString CRON_DISABLED = \"-\";\n+\tString CRON_DISABLED = ScheduledTaskRegistrar.CRON_DISABLED;\n \n \n \t/**",
    "output": "Declare CRON_DISABLED constant value only once This commit removes the duplicated CRON_DISABLED constant value from @Scheuled and simply refers to the ScheduledTaskRegistrar.CRON_DISABLED constant. This avoids a potential package cycle by ensuring that the `annotation` package depends on the `config` package but not the other way around"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -144,7 +144,7 @@ public void clearResourceCaches() {\n \tpublic Resource getResource(String location) {\n \t\tAssert.notNull(location, \"Location must not be null\");\n \n-\t\tfor (ProtocolResolver protocolResolver : this.protocolResolvers) {\n+\t\tfor (ProtocolResolver protocolResolver : getProtocolResolvers()) {\n \t\t\tResource resource = protocolResolver.resolve(location, this);\n \t\t\tif (resource != null) {\n \t\t\t\treturn resource;",
    "output": "Consume getProtocolResolversrather than internal list This commit makes sure that DefaultResourceLoader consistently use getProtocolResolversto access additional protocol resolvers. This allows subclasses to define how the list is provided"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecoratorTests.java\n@@ -203,6 +203,8 @@ public void closeStatusChangesToSessionNotReliable() throws Exception {\n \t}\n \n \tprivate void sendBlockingMessage(ConcurrentWebSocketSessionDecorator session) throws InterruptedException {\n+\t\tBlockingSession delegate = (BlockingSession) session.getDelegate();\n+\t\tCountDownLatch sentMessageLatch = delegate.getSentMessageLatch();\n \t\tExecutors.newSingleThreadExecutor().submit(() -> {\n \t\t\tTextMessage message = new TextMessage(\"slow message\");\n \t\t\ttry {\n@@ -212,17 +214,16 @@ private void sendBlockingMessage(ConcurrentWebSocketSessionDecorator session) th\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t});\n-\t\tBlockingSession delegate = (BlockingSession) session.getDelegate();\n-\t\tassertThat(delegate.getSentMessageLatch().await(5, TimeUnit.SECONDS)).isTrue();\n+\t\tassertThat(sentMessageLatch.await(5, TimeUnit.SECONDS)).isTrue();\n \t}\n \n \n \n \tprivate static class BlockingSession extends TestWebSocketSession {\n \n-\t\tprivate AtomicReference<CountDownLatch> nextMessageLatch = new AtomicReference<>();\n+\t\tprivate final AtomicReference<CountDownLatch> nextMessageLatch = new AtomicReference<>();\n \n-\t\tprivate AtomicReference<CountDownLatch> releaseLatch = new AtomicReference<>();\n+\t\tprivate final AtomicReference<CountDownLatch> releaseLatch = new AtomicReference<>();\n \n \n \t\tpublic CountDownLatch getSentMessageLatch() {",
    "output": "Fix race condition in sendBlockingMessage Previously, tests in ConcurrentWebSocketSessionDecoratorTests that use the BlockingSession would fail intermittently. This appears to have been due to a race condition in sendBlockingMessage where the call to getSentMessageLatchthat stores a latch in nextMessageLatch on the main thread may happen after the call to sendMessage that counts down the latch if it is non-null occurs on the executor's thread. This commit updates sendBlockingMessage to call getSentMessageLatch(and therefore store the latch) before it sumbmits the task to the executor. This ensures that the latch will be available when the exeuctor's thread attempts to retrieve and decrement it. BlockingSession's AtomicReference fields have also been made final to eliminate the possibility of any visibility problems across threads"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/RowMapperTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/RowMapperTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/RowMapperTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/RowMapperTests.java\n@@ -78,7 +78,6 @@ public void setUp() throws SQLException {\n \t@AfterEach\n \tpublic void verifyClosed() throws Exception {\n \t\tverify(resultSet).close();\n-\t\t// verify(connection).close();\n \t}\n \n \t@AfterEach",
    "output": "Delete obsolete comment in RowMapperTests"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -31,7 +31,6 @@\n import java.util.List;\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n-import java.util.zip.CRC32;\n \n import okhttp3.mockwebserver.MockResponse;\n import okhttp3.mockwebserver.MockWebServer;\n@@ -672,12 +671,6 @@ void shouldSendLargeTextFile(ClientHttpConnector connector) throws Exception {\n \t\t});\n \t}\n \n-\tprivate static long hash(byte[] bytes) {\n-\t\tCRC32 crc = new CRC32();\n-\t\tcrc.update(bytes, 0, bytes.length);\n-\t\treturn crc.getValue();\n-\t}\n-\n \t@ParameterizedWebClientTest\n \tvoid shouldReceive404Response(ClientHttpConnector connector) {\n \t\tstartServer(connector);",
    "output": "Delete dead code"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java\n@@ -23,6 +23,7 @@\n import java.io.Reader;\n import java.io.Writer;\n import java.util.Map;\n+\n import javax.xml.stream.XMLEventReader;\n import javax.xml.stream.XMLEventWriter;\n import javax.xml.stream.XMLStreamReader;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java\n--- a/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java\n@@ -273,7 +273,7 @@ public LinkedCaseInsensitiveMap<V> clone() {\n \t}\n \n \t@Override\n-\tpublic boolean equals(Object obj) {\n+\tpublic boolean equals(@Nullable Object obj) {\n \t\treturn this.targetMap.equals(obj);\n \t}\n ",
    "output": "Annotate Object#equals parameter with @nullable"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java\n--- a/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java\n+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java\n@@ -64,7 +64,7 @@ public MockClientHttpResponse(HttpStatus status) {\n \t}\n \n \tpublic MockClientHttpResponse(int status) {\n-\t\tAssert.isTrue(status >= 100 && status < 600, \"Status must be between 1xx and 5xx\");\n+\t\tAssert.isTrue(status > 99 && status < 1000, \"Status must be between 100 and 999\");\n \t\tthis.status = status;\n \t}\n ",
    "output": "Change raw status code range check in MockClientHttpResponse This commit changes the raw status code check to allow for all three digit numbers, not just those between 100 and 600"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -321,7 +321,7 @@ public void copyConfigurationFrom(ConfigurableBeanFactory otherFactory) {\n \t\t\tthis.allowEagerClassLoading = otherListableFactory.allowEagerClassLoading;\n \t\t\tthis.dependencyComparator = otherListableFactory.dependencyComparator;\n \t\t\t// A clone of the AutowireCandidateResolver since it is potentially BeanFactoryAware...\n-\t\t\tsetAutowireCandidateResolver(BeanUtils.instantiateClass(getAutowireCandidateResolver().getClass()));\n+\t\t\tsetAutowireCandidateResolver(BeanUtils.instantiateClass(otherListableFactory.getAutowireCandidateResolver().getClass()));\n \t\t\t// Make resolvable dependencies (e.g. ResourceLoader) available here as well...\n \t\t\tthis.resolvableDependencies.putAll(otherListableFactory.resolvableDependencies);\n \t\t}",
    "output": "Fix DefaultListableBeanFactory#copyConfigurationFrom Prior to this commit, the copyConfigurationFrom(ConfigurableBeanFactory) method in DefaultListableBeanFactory cloned its own AutowireCandidateResolver type instead of the resolver type from the supplied ConfigurableBeanFactory. This commit fixes that by cloning the resolver type from the supplied ConfigurableBeanFactory"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java\n@@ -27,7 +27,6 @@\n \n import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.expression.AccessException;\n-import org.springframework.expression.BeanResolver;\n import org.springframework.expression.EvaluationContext;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ExpressionInvocationTargetException;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/spr3896/Spr3896TestSuite.java b/spring-test/src/test/java/org/springframework/test/context/junit4/spr3896/Spr3896TestSuite.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/spr3896/Spr3896TestSuite.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr3896/Spr3896TestSuite.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -45,5 +45,5 @@\n BeanOverridingExplicitLocationsInheritedTests.class\n \n })\n-public class Spr3896SuiteTests {\n+public class Spr3896TestSuite {\n }",
    "output": "Rename Spr3896SuiteTests to Spr3896TestSuite This commit renames Spr3896SuiteTests to comply with our naming convention for test classes that should be executed via the Gradle build. The effect of this commit is that test classes included in that \"suite\" are no longer executed twice in the build. Consequently, Gradle and Bamboo will now report the same number of executed tests for the spring-test project"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/RandomHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/RandomHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/RandomHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/RandomHandlerIntegrationTests.java\n@@ -88,10 +88,8 @@ public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response)\n \t\t\tMono<Integer> requestSizeMono = request.getBody().\n \t\t\t\t\treduce(0, (integer, dataBuffer) -> integer +\n \t\t\t\t\t\t\tdataBuffer.readableByteCount()).\n-\t\t\t\t\tdoOnSuccessOrError((size, throwable) -> {\n-\t\t\t\t\t\tassertThat(throwable).isNull();\n-\t\t\t\t\t\tassertThat(size).isEqualTo(REQUEST_SIZE);\n-\t\t\t\t\t});\n+\t\t\t\t\tdoOnNext(size -> assertThat(size).isEqualTo(REQUEST_SIZE)).\n+\t\t\t\t\tdoOnError(throwable -> assertThat(throwable).isNull());\n \n \t\t\tresponse.getHeaders().setContentLength(RESPONSE_SIZE);\n \n@@ -112,4 +110,5 @@ private DataBuffer randomBuffer(int size) {\n \t\t}\n \n \t}\n+\n }",
    "output": "Avoid deprecation warning in RandomHandlerIntegrationTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n@@ -40,7 +40,6 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.when;\n \n /**\n  * Unit tests for {@link WebSocketHttpRequestHandler}.",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandlerTests.java\n@@ -35,7 +35,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.BDDMockito.when;\n+import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n@@ -70,8 +70,8 @@ public void failure() {\n \t\tTestInterceptor interceptor = new TestInterceptor(true);\n \t\tthis.requestHandler.setHandshakeInterceptors(Collections.singletonList(interceptor));\n \n-\t\twhen(this.handshakeHandler.doHandshake(any(), any(), any(), any()))\n-\t\t\t\t.thenThrow(new IllegalStateException(\"bad state\"));\n+\t\tgiven(this.handshakeHandler.doHandshake(any(), any(), any(), any()))\n+\t\t\t\t.willThrow(new IllegalStateException(\"bad state\"));\n \n \t\tassertThatThrownBy(() -> this.requestHandler.handleRequest(new MockHttpServletRequest(), this.response))\n \t\t\t\t.isInstanceOf(HandshakeFailureException.class)",
    "output": "Polishing web socket test to use BDD Mockito"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n@@ -43,7 +43,6 @@ protected ClientHttpRequestFactory createRequestFactory() {\n \t}\n \n \t@Test  // SPR-8809\n-\t@Disabled(\"response.close() hangs indefinitely since upgrading from okhttp3 3.14.2 to 4.1.0\")\n \tpublic void interceptor() throws Exception {\n \t\tfinal String headerName = \"MyHeader\";\n \t\tfinal String headerValue = \"MyValue\";",
    "output": "Re-enable StreamingSimpleClientHttpRequestFactoryTests Since the okhttp3 3.14 downgrade, we don't need to ignore this test anymore"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n@@ -66,10 +66,10 @@ public MockResponse dispatch(RecordedRequest request) throws InterruptedExceptio\n \t\t\t\t\tassertThat(request.getHeader(\"Host\"))\n \t\t\t\t\t\t\t.contains(\"localhost:\" + port);\n \t\t\t\t\tMockResponse response = new MockResponse()\n+\t\t\t\t\t\t\t.setHeaders(request.getHeaders())\n \t\t\t\t\t\t\t.setHeader(\"Content-Length\", request.getBody().size())\n \t\t\t\t\t\t\t.setResponseCode(200)\n \t\t\t\t\t\t\t.setBody(request.getBody());\n-\t\t\t\t\tresponse.headers(request.getHeaders());\n \t\t\t\t\trequest.getBody().flush();\n \t\t\t\t\treturn response;\n \t\t\t\t}",
    "output": "Fix okhttp3 downgrade"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/StreamingSimpleClientHttpRequestFactoryTests.java\n@@ -43,7 +43,7 @@ protected ClientHttpRequestFactory createRequestFactory() {\n \t}\n \n \t@Test  // SPR-8809\n-\t@Disabled(\"hangs indefinitely\")\n+\t@Disabled(\"response.close() hangs indefinitely since upgrading from okhttp3 3.14.2 to 4.1.0\")\n \tpublic void interceptor() throws Exception {\n \t\tfinal String headerName = \"MyHeader\";\n \t\tfinal String headerValue = \"MyValue\";",
    "output": "Upgrade @Disabled for StreamingSimpleClientHttpRequestFactoryTests.interceptor"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -336,15 +336,6 @@ public static Flux<DataBuffer> write(\n \n \t}\n \n-\tpublic void handle() {\n-\t\tNumber n = 5;\n-\t\tinspect(n);\n-\t}\n-\n-\tpublic <U extends Number> void inspect(U u){\n-\t}\n-\n-\n \t/**\n \t * Write the given stream of {@link DataBuffer DataBuffers} to the given\n \t * file {@link Path}. The optional {@code options} parameter specifies",
    "output": "Remove unnecessary code from prior commit"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionContextManager.java\n@@ -62,7 +62,7 @@ public static Mono<TransactionContext> currentContext() throws NoTransactionExce\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tsink.error(new NoTransactionException(\"No transaction in context\"));\n+\t\t\tsink.error(new NoTransactionInContextException());\n \t\t});\n \t}\n \n@@ -111,4 +111,22 @@ public static Function<Context, Context> getOrCreateContextHolder() {\n \t\t};\n \t}\n \n+\n+\t/**\n+\t * Stackless variant of {@link NoTransactionException} for reactive flows.\n+\t */\n+\t@SuppressWarnings(\"serial\")\n+\tprivate static class NoTransactionInContextException extends NoTransactionException {\n+\n+\t\tpublic NoTransactionInContextException() {\n+\t\t\tsuper(\"No transaction in context\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic synchronized Throwable fillInStackTrace() {\n+\t\t\t// stackless exception\n+\t\t\treturn this;\n+\t\t}\n+\t}\n+\n }",
    "output": "Stackless variant of NoTransactionException for reactive flows"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/AbstractWebRequestMatcherTests.java\n@@ -29,7 +29,7 @@\n  * @author Sam Brannen\n  * @since 4.2\n  */\n-public class AbstractWebRequestMatcherTests {\n+abstract class AbstractWebRequestMatcherTests {\n \n \tprotected void assertMatches(WebRequestMatcher matcher, String url) throws MalformedURLException {\n \t\tassertThat(matcher.matches(new WebRequest(new URL(url)))).isTrue();",
    "output": "Make AbstractWebRequestMatcherTests abstract"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java\n@@ -19,7 +19,6 @@\n import java.lang.reflect.Method;\n import java.util.Comparator;\n \n-import org.hamcrest.Matchers;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n@@ -137,7 +136,7 @@ public void unregisterMapping() throws Exception {\n \t\tresult = this.mapping.getHandler(MockServerWebExchange.from(MockServerHttpRequest.get(key)));\n \n \t\tassertThat(result.block()).isNull();\n-\t\tassertThat(this.mapping.getMappingRegistry().getMappings().keySet()).isNotEqualTo(Matchers.contains(key));\n+\t\tassertThat(this.mapping.getMappingRegistry().getMappings().keySet()).doesNotContain(key);\n \t}\n \n ",
    "output": "Fix assertion in HandlerMethodMappingTests.unregisterMapping"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java\n@@ -66,10 +66,10 @@ public MockResponse dispatch(RecordedRequest request) throws InterruptedExceptio\n \t\t\t\t\tassertThat(request.getHeader(\"Host\"))\n \t\t\t\t\t\t\t.contains(\"localhost:\" + port);\n \t\t\t\t\tMockResponse response = new MockResponse()\n-\t\t\t\t\t\t\t.setHeaders(request.getHeaders())\n \t\t\t\t\t\t\t.setHeader(\"Content-Length\", request.getBody().size())\n \t\t\t\t\t\t\t.setResponseCode(200)\n \t\t\t\t\t\t\t.setBody(request.getBody());\n+\t\t\t\t\tresponse.headers(request.getHeaders());\n \t\t\t\t\trequest.getBody().flush();\n \t\t\t\t\treturn response;\n \t\t\t\t}",
    "output": "Avoid deprecation warning in AbstractMockWebServerTests MockResponse.setHeaders(Headers) is now deprecated"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -608,10 +608,10 @@ public void readOnlyHttpHeadersRetainEntrySetOrder() {\n \n \t\tString[] expectedKeys = new String[] { \"aardvark\", \"beaver\", \"cat\", \"dog\", \"elephant\" };\n \n-\t\tassertArrayEquals(expectedKeys, headers.entrySet().stream().map(Entry::getKey).toArray());\n+\t\tassertThat(headers.entrySet()).extracting(Entry::getKey).containsExactly(expectedKeys);\n \n \t\tHttpHeaders readOnlyHttpHeaders = HttpHeaders.readOnlyHttpHeaders(headers);\n-\t\tassertArrayEquals(expectedKeys, readOnlyHttpHeaders.entrySet().stream().map(Entry::getKey).toArray());\n+\t\tassertThat(readOnlyHttpHeaders.entrySet()).extracting(Entry::getKey).containsExactly(expectedKeys);\n \t}\n \n }",
    "output": "Convert assertions to AssertJ"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -514,7 +514,6 @@ public void firstZonedDateTime() {\n \t\tassertTrue(headers.getFirstZonedDateTime(HttpHeaders.DATE).isEqual(date));\n \n \t\theaders.clear();\n-\t\tZonedDateTime otherDate = ZonedDateTime.of(2010, 12, 18, 10, 20, 0, 0, ZoneId.of(\"GMT\"));\n \t\theaders.add(HttpHeaders.DATE, \"Fri, 02 Jun 2017 02:22:00 GMT\");\n \t\theaders.add(HttpHeaders.DATE, \"Sat, 18 Dec 2010 10:20:00 GMT\");\n \t\tassertTrue(headers.getFirstZonedDateTime(HttpHeaders.DATE).isEqual(date));",
    "output": "Delete dead code"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.core.io.support;\n \n+import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.util.ArrayList;\n@@ -96,6 +97,13 @@ void classpathStarWithPatternOnFileSystem() throws IOException {\n \t\t\t\tStringUtils.concatenateStringArrays(CLASSES_IN_CORE_IO_SUPPORT, TEST_CLASSES_IN_CORE_IO_SUPPORT));\n \t}\n \n+\t@Test\n+\tvoid getResourcesOnFileSystemContainingHashtagsInTheirFileNames() throws IOException {\n+\t\tResource[] resources = resolver.getResources(\"classpath*:org/springframework/core/io/**/resource#test*.txt\");\n+\t\tassertThat(resources).extracting(Resource::getFile).extracting(File::getName)\n+\t\t\t.containsExactlyInAnyOrder(\"resource#test1.txt\", \"resource#test2.txt\");\n+\t}\n+\n \t@Test\n \tvoid classpathWithPatternInJar() throws IOException {\n \t\tResource[] resources = resolver.getResources(\"classpath:org/reactivestreams/*.class\");",
    "output": "Verify PathMatchingResourcePatternResolver finds local files with # in name This commit introduces a test that verifies that PathMatchingResourcePatternResolver can find files in the filesystem that contain hashtags (#) in their names"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -349,8 +349,8 @@ void registerAdapters(ReactiveAdapterRegistry registry) {\n \n \t\t\tregistry.registerReactiveType(\n \t\t\t\t\tReactiveTypeDescriptor.multiValue(kotlinx.coroutines.flow.Flow.class, kotlinx.coroutines.flow.FlowKt::emptyFlow),\n-\t\t\t\t\tsource -> kotlinx.coroutines.reactor.FlowKt.asFlux((kotlinx.coroutines.flow.Flow<?>) source),\n-\t\t\t\t\tkotlinx.coroutines.reactive.FlowKt::asFlow\n+\t\t\t\t\tsource -> kotlinx.coroutines.reactor.ReactorFlowKt.asFlux((kotlinx.coroutines.flow.Flow<?>) source),\n+\t\t\t\t\tkotlinx.coroutines.reactive.ReactiveFlowKt::asFlow\n \t\t\t);\n \t\t}\n \t}",
    "output": "Upgrade to Coroutines 1.3.0"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java\n@@ -117,7 +117,7 @@ public static String getTargetBeanName(String originalBeanName) {\n \t * @see #getTargetBeanName(String)\n \t * @see #isScopedTarget(String)\n \t */\n-\tpublic static String getOriginalBeanName(String targetBeanName) {\n+\tpublic static String getOriginalBeanName(@Nullable String targetBeanName) {\n \t\tAssert.isTrue(isScopedTarget(targetBeanName), () -> \"bean name '\" +\n \t\t\t\ttargetBeanName + \"' does not refer to the target of a scoped proxy\");\n \t\treturn targetBeanName.substring(TARGET_NAME_PREFIX_LENGTH);",
    "output": "Add missing @Nullable declaration"
  },
  {
    "input": "diff --git a/spring-context-indexer/src/test/java/org/springframework/context/index/processor/CandidateComponentsIndexerTests.java b/spring-context-indexer/src/test/java/org/springframework/context/index/processor/CandidateComponentsIndexerTests.java\n--- a/spring-context-indexer/src/test/java/org/springframework/context/index/processor/CandidateComponentsIndexerTests.java\n+++ b/spring-context-indexer/src/test/java/org/springframework/context/index/processor/CandidateComponentsIndexerTests.java\n@@ -244,17 +244,18 @@ private CandidateComponentsMetadata compile(String... types) {\n \t}\n \n \tprivate CandidateComponentsMetadata readGeneratedMetadata(File outputLocation) {\n-\t\ttry {\n-\t\t\tFile metadataFile = new File(outputLocation, MetadataStore.METADATA_PATH);\n-\t\t\tif (metadataFile.isFile()) {\n-\t\t\t\treturn PropertiesMarshaller.read(new FileInputStream(metadataFile));\n+\t\tFile metadataFile = new File(outputLocation, MetadataStore.METADATA_PATH);\n+\t\tif (metadataFile.isFile()) {\n+\t\t\ttry (FileInputStream fileInputStream = new FileInputStream(metadataFile)) {\n+\t\t\t\tCandidateComponentsMetadata metadata = PropertiesMarshaller.read(fileInputStream);\n+\t\t\t\treturn metadata;\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn new CandidateComponentsMetadata();\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to read metadata from disk\", ex);\n \t\t\t}\n \t\t}\n-\t\tcatch (IOException ex) {\n-\t\t\tthrow new IllegalStateException(\"Failed to read metadata from disk\", ex);\n+\t\telse {\n+\t\t\treturn new CandidateComponentsMetadata();\n \t\t}\n \t}\n ",
    "output": "Close streams in tests This commit ensures that file streams are properly closed in tests. This seems to cause issues on Windows as the OS cannot delete temp folders. This is similar to spring-io/initializr"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/HttpHeadResponseDecoratorTests.java\n@@ -18,7 +18,7 @@\n import java.nio.charset.StandardCharsets;\n \n import io.netty.buffer.PooledByteBufAllocator;\n-import org.junit.After;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Flux;\n \n@@ -42,7 +42,7 @@ public class HttpHeadResponseDecoratorTests {\n \t\t\tnew HttpHeadResponseDecorator(new MockServerHttpResponse(this.bufferFactory));\n \n \n-\t@After\n+\t@AfterEach\n \tpublic void tearDown() {\n \t\tthis.bufferFactory.checkForLeaks();\n \t}",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/tests/Assume.java b/spring-core/src/test/java/org/springframework/tests/Assume.java\n--- a/spring-core/src/test/java/org/springframework/tests/Assume.java\n+++ b/spring-core/src/test/java/org/springframework/tests/Assume.java\n@@ -74,14 +74,4 @@ public static void notLogging(Log log) {\n \t\tassumeFalse(log.isDebugEnabled());\n \t}\n \n-\n-\t/**\n-\t * @since 4.2\n-\t */\n-\t@FunctionalInterface\n-\tpublic interface Executable {\n-\n-\t\tvoid execute() throws Exception;\n-\t}\n-\n }",
    "output": "Delete obsolete interface"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -830,6 +830,6 @@ public Annotation[] getDeclaredAnnotations() {\n \t\t\treturn this.annotations.clone();\n \t\t}\n \n-\t};\n+\t}\n \n }",
    "output": "Remove unnecessary semicolon in AnnotatedElementUtils"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n@@ -98,7 +98,7 @@ static Object[][] arguments() throws IOException {\n \t\tservers.put(new ReactorHttpServer(), ReactorNettyConfig.class);\n \t\tservers.put(new UndertowHttpServer(), UndertowConfig.class);\n \n-\t\tFlux<WebSocketClient> f1 = Flux.fromArray(clients).concatMap(c -> Flux.just(c).repeat(servers.size()));\n+\t\tFlux<WebSocketClient> f1 = Flux.fromArray(clients).concatMap(c -> Flux.just(c).repeat(servers.size() - 1));\n \t\tFlux<HttpServer> f2 = Flux.fromIterable(servers.keySet()).repeat(clients.length);\n \t\tFlux<Class<?>> f3 = Flux.fromIterable(servers.values()).repeat(clients.length);\n ",
    "output": "Fix off-by-one error in AbstractWebSocketIntegrationTests.argumentsPrior to this commit, the \"reactive matrix\" contained a duplicate argument set per parameterized client"
  },
  {
    "input": "diff --git a/buildSrc/src/main/java/org/springframework/build/compile/CompilerConventionsPlugin.java b/buildSrc/src/main/java/org/springframework/build/compile/CompilerConventionsPlugin.java\n--- a/buildSrc/src/main/java/org/springframework/build/compile/CompilerConventionsPlugin.java\n+++ b/buildSrc/src/main/java/org/springframework/build/compile/CompilerConventionsPlugin.java\n@@ -57,9 +57,8 @@ public class CompilerConventionsPlugin implements Plugin<Project> {\n \t\tCOMPILER_ARGS = new ArrayList<>();\n \t\tCOMPILER_ARGS.addAll(commonCompilerArgs);\n \t\tCOMPILER_ARGS.addAll(Arrays.asList(\n-\t\t\t\t\"-Xlint:serial\", \"-Xlint:cast\", \"-Xlint:classfile\", \"-Xlint:dep-ann\",\n-\t\t\t\t\"-Xlint:divzero\", \"-Xlint:empty\", \"-Xlint:finally\", \"-Xlint:overrides\",\n-\t\t\t\t\"-Xlint:path\", \"-Xlint:processing\", \"-Xlint:static\", \"-Xlint:try\", \"-Xlint:-options\"\n+\t\t\t\t\"-Xlint:varargs\", \"-Xlint:fallthrough\", \"-Xlint:rawtypes\", \"-Xlint:deprecation\",\n+\t\t\t\t\"-Xlint:unchecked\", \"-Werror\"\n \t\t));\n \t\tTEST_COMPILER_ARGS = new ArrayList<>();\n \t\tTEST_COMPILER_ARGS.addAll(commonCompilerArgs);",
    "output": "Polish Gradle compile convention"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java b/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java\n@@ -77,12 +77,16 @@ public ApplicationContextAwareProcessor(ConfigurableApplicationContext applicati\n \t@Override\n \t@Nullable\n \tpublic Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {\n+\n+\t\tif (!(bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||\n+\t\t\t\tbean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||\n+\t\t\t\tbean instanceof MessageSourceAware || bean instanceof ApplicationContextAware)){\n+\t\t\treturn bean;\n+\t\t}\n+\n \t\tAccessControlContext acc = null;\n \n-\t\tif (System.getSecurityManager() != null &&\n-\t\t\t\t(bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||\n-\t\t\t\t\t\tbean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||\n-\t\t\t\t\t\tbean instanceof MessageSourceAware || bean instanceof ApplicationContextAware)) {\n+\t\tif (System.getSecurityManager() != null ) {\n \t\t\tacc = this.applicationContext.getBeanFactory().getAccessControlContext();\n \t\t}\n ",
    "output": "Avoid unnecessary processing in ApplicationContextAwareProcessor This commit avoids unnecessary processing in the implementation of postProcessBeforeInitializationin ApplicationContextAwareProcessor by immediately returning the supplied bean if it does not meet the requirements for further processing"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n@@ -369,26 +369,6 @@ private void assertAttributeType(String attributeName, Object attributeValue, Cl\n \t\t}\n \t}\n \n-\t/**\n-\t * Store the supplied {@code value} in this map under the specified\n-\t * {@code key}, unless a value is already stored under the key.\n-\t * @param key the key under which to store the value\n-\t * @param value the value to store\n-\t * @return the current value stored in this map, or {@code null} if no\n-\t * value was previously stored in this map\n-\t * @see #get\n-\t * @see #put\n-\t * @since 4.2\n-\t */\n-\t@Override\n-\tpublic Object putIfAbsent(String key, Object value) {\n-\t\tObject obj = get(key);\n-\t\tif (obj == null) {\n-\t\t\tobj = put(key, value);\n-\t\t}\n-\t\treturn obj;\n-\t}\n-\n \t@Override\n \tpublic String toString() {\n \t\tIterator<Map.Entry<String, Object>> entries = entrySet().iterator();",
    "output": "Remove superfluous AnnotationAttributes#putIfAbsent implementation Since Java 8, putIfAbsentis a standard method in java.util.Map. We therefore no longer need the custom implementation that overrides the standard implementation in HashMap"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -203,6 +203,10 @@ else if (method.getName().equals(\"isWrapperFor\")) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}\n+\t\t\telse if (method.getName().equals(\"getWarnings\") || method.getName().equals(\"clearWarnings\")) {\n+\t\t\t\t// Avoid creation of target Connection on pre-close cleanup (e.g. in Hibernate Session)\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\telse if (method.getName().equals(\"close\")) {\n \t\t\t\t// Handle close method: only close if not within a transaction.\n \t\t\t\tDataSourceUtils.doReleaseConnection(this.target, this.targetDataSource);",
    "output": "TransactionAwareDataSourceProxy locally handles get/clearWarnings call"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.java b/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.java\n--- a/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/support/HandlerMethodArgumentResolverComposite.java\n@@ -22,9 +22,6 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.core.MethodParameter;\n import org.springframework.lang.Nullable;\n import org.springframework.web.bind.support.WebDataBinderFactory;\n@@ -41,9 +38,6 @@\n  */\n public class HandlerMethodArgumentResolverComposite implements HandlerMethodArgumentResolver {\n \n-\t@Deprecated\n-\tprotected final Log logger = LogFactory.getLog(getClass());\n-\n \tprivate final List<HandlerMethodArgumentResolver> argumentResolvers = new LinkedList<>();\n \n \tprivate final Map<MethodParameter, HandlerMethodArgumentResolver> argumentResolverCache =",
    "output": "Drop logger field in HandlerMethodArgumentResolverComposite"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationClassLoaderTests.java\n@@ -82,7 +82,6 @@ public void synthesizedUsesCorrectClassLoader() throws Exception {\n \t\tAnnotation utilsMeta = AnnotatedElementUtils.getMergedAnnotation(source,\n \t\t\t\tTestMetaAnnotation.class);\n \t\tassertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\n-\t\tassertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\n \t\tassertThat(getClassAttribute(utilsMeta).getClassLoader()).isEqualTo(child);\n \t\tassertThat(getEnumAttribute(utilsMeta).getClass().getClassLoader()).isEqualTo(\n \t\t\t\tparent);",
    "output": "Remove duplicate assertion"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -21,7 +21,6 @@\n import reactor.core.publisher.Mono;\n import reactor.netty.NettyInbound;\n import reactor.netty.NettyOutbound;\n-import reactor.netty.NettyPipeline;\n import reactor.netty.http.websocket.WebsocketInbound;\n import reactor.netty.http.websocket.WebsocketOutbound;\n \n@@ -90,7 +89,6 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \t\t\t\t})\n \t\t\t\t.map(this::toFrame);\n \t\treturn getDelegate().getOutbound()\n-\t\t\t\t.options(NettyPipeline.SendOptions::flushOnEach)\n \t\t\t\t.sendObject(frames)\n \t\t\t\t.then();\n \t}",
    "output": "Remove unnecessary flushOnEach (since reactor-netty 0.9)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -136,7 +136,6 @@ public void match() {\n \tpublic void matchWithNullPath() {\n \t\tassertThat(pathMatcher.match(\"/test\", null)).isFalse();\n \t\tassertThat(pathMatcher.match(\"/\", null)).isFalse();\n-\t\tassertThat(pathMatcher.match(\"/\", null)).isFalse();\n \t\tassertThat(pathMatcher.match(null, null)).isFalse();\n \t}\n ",
    "output": "Remove duplicate assertion in matchWithNullPath"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternParserTests.java\n@@ -411,7 +411,7 @@ public void compareTests() {\n \t@Test\n \tpublic void separatorTests() {\n \t\tPathPatternParser parser = new PathPatternParser();\n-\t\tparser.setPathOptions(PathContainer.Options.HTTP_PATH);\n+\t\tparser.setPathOptions(PathContainer.Options.create('.', false));\n \t\tString rawPattern = \"first.second.{last}\";\n \t\tPathPattern pattern = parser.parse(rawPattern);\n \t\tassertThat(pattern.computePatternString()).isEqualTo(rawPattern);",
    "output": "Fix typo in test from previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/protobuf/OuterSample.java b/spring-web/src/test/java/org/springframework/protobuf/OuterSample.java\n--- a/spring-web/src/test/java/org/springframework/protobuf/OuterSample.java\n+++ b/spring-web/src/test/java/org/springframework/protobuf/OuterSample.java\n@@ -3,6 +3,7 @@\n \n package org.springframework.protobuf;\n \n+@SuppressWarnings(\"deprecation\")\n public class OuterSample {\n   private OuterSample() {}\n   public static void registerAllExtensions(\n\ndiff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/protobuf/OuterSample.java b/spring-webflux/src/test/java/org/springframework/web/reactive/protobuf/OuterSample.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/protobuf/OuterSample.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/protobuf/OuterSample.java\n@@ -3,6 +3,7 @@\n \n package org.springframework.web.reactive.protobuf;\n \n+@SuppressWarnings(\"deprecation\")\n public class OuterSample {\n   private OuterSample() {}\n   public static void registerAllExtensions(",
    "output": "Suppress deprecation warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -231,6 +231,7 @@ protected boolean canWrite(@Nullable MediaType mediaType) {\n \t\t\t\t(this.protobufFormatSupport != null && this.protobufFormatSupport.supportsWriteOnly(mediaType)));\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \t@Override\n \tprotected void writeInternal(Message message, HttpOutputMessage outputMessage)\n \t\t\tthrows IOException, HttpMessageNotWritableException {\n@@ -253,7 +254,7 @@ protected void writeInternal(Message message, HttpOutputMessage outputMessage)\n \t\t}\n \t\telse if (TEXT_PLAIN.isCompatibleWith(contentType)) {\n \t\t\tOutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);\n-\t\t\tTextFormat.print(message, outputStreamWriter);\n+\t\t\tTextFormat.print(message, outputStreamWriter);  // deprecated on Protobuf 3.9\n \t\t\toutputStreamWriter.flush();\n \t\t\toutputMessage.getBody().flush();\n \t\t}",
    "output": "Upgrade to Protobuf 3.9 (plus consistent XMLUnit declarations)"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -1882,10 +1882,9 @@ protected void invokeCustomInitMethod(String beanName, final Object bean, RootBe\n \t\tif (logger.isTraceEnabled()) {\n \t\t\tlogger.trace(\"Invoking init method  '\" + initMethodName + \"' on bean with name '\" + beanName + \"'\");\n \t\t}\n+\t\tMethod methodToInvoke = ClassUtils.getInterfaceMethodIfPossible(initMethod);\n \n \t\tif (System.getSecurityManager() != null) {\n-\t\t\tMethod methodToInvoke = ClassUtils.getInterfaceMethodIfPossible(initMethod);\n-\n \t\t\tAccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n \t\t\t\tReflectionUtils.makeAccessible(methodToInvoke);\n \t\t\t\treturn null;\n@@ -1901,8 +1900,8 @@ protected void invokeCustomInitMethod(String beanName, final Object bean, RootBe\n \t\t}\n \t\telse {\n \t\t\ttry {\n-\t\t\t\tReflectionUtils.makeAccessible(initMethod);\n-\t\t\t\tinitMethod.invoke(bean);\n+\t\t\t\tReflectionUtils.makeAccessible(methodToInvoke);\n+\t\t\t\tmethodToInvoke.invoke(bean);\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {\n \t\t\t\tthrow ex.getTargetException();",
    "output": "Apply getInterfaceMethodIfPossible without SecurityManager as well"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -1882,9 +1882,10 @@ protected void invokeCustomInitMethod(String beanName, final Object bean, RootBe\n \t\tif (logger.isTraceEnabled()) {\n \t\t\tlogger.trace(\"Invoking init method  '\" + initMethodName + \"' on bean with name '\" + beanName + \"'\");\n \t\t}\n-\t\tMethod methodToInvoke = ClassUtils.getInterfaceMethodIfPossible(initMethod);\n \n \t\tif (System.getSecurityManager() != null) {\n+\t\t\tMethod methodToInvoke = ClassUtils.getInterfaceMethodIfPossible(initMethod);\n+\n \t\t\tAccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n \t\t\t\tReflectionUtils.makeAccessible(methodToInvoke);\n \t\t\t\treturn null;",
    "output": "Only invoke getInterfaceMethodIfPossiblewhen security manager is used Prior to this commit, AbstractAutowireCapableBeanFactory's invokeCustomInitMethodmethod invoked ClassUtils.getInterfaceMethodIfPossibleeven if the security manager was not being used. This commit ensures that getInterfaceMethodIfPossibleis only invoked if the security manager is used"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -84,8 +84,9 @@ public abstract class SharedEntityManagerCreator {\n \t\tqueryTerminatingMethods.add(\"execute\");  // JPA 2.1 StoredProcedureQuery\n \t\tqueryTerminatingMethods.add(\"executeUpdate\");\n \t\tqueryTerminatingMethods.add(\"getSingleResult\");\n-\t\tqueryTerminatingMethods.add(\"getResultList\");\n \t\tqueryTerminatingMethods.add(\"getResultStream\");\n+\t\tqueryTerminatingMethods.add(\"getResultList\");\n+\t\tqueryTerminatingMethods.add(\"list\");  // Hibernate Query.list() method\n \t}\n \n ",
    "output": "Consider Hibernate Query.listas query-terminating method"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,6 +82,10 @@ public Jaxb2XmlDecoder() {\n \t\tsuper(MimeTypeUtils.APPLICATION_XML, MimeTypeUtils.TEXT_XML);\n \t}\n \n+\tpublic Jaxb2XmlDecoder(MimeType... supportedMimeTypes) {\n+\t\tsuper(supportedMimeTypes);\n+\t}\n+\n \n \t/**\n \t * Configure a processor function to customize Unmarshaller instances.",
    "output": "Exposes supported mime types in Jaxb2Decoder"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java\n@@ -20,6 +20,7 @@\n \n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.RepeatedTest;\n import org.junit.platform.launcher.Launcher;\n import org.junit.platform.launcher.LauncherDiscoveryRequest;\n@@ -54,6 +55,7 @@ void runTestsInParallel() {\n \t\tlauncher.registerTestExecutionListeners(listener);\n \n \t\tLauncherDiscoveryRequest request = request()//\n+\t\t\t\t.configurationParameter(\"junit.jupiter.conditions.deactivate\", \"org.junit.jupiter.engine.extension.DisabledCondition\")//\n \t\t\t\t.configurationParameter(\"junit.jupiter.execution.parallel.enabled\", \"true\")//\n \t\t\t\t.configurationParameter(\"junit.jupiter.execution.parallel.config.dynamic.factor\", \"10\")//\n \t\t\t\t.selectors(selectClass(TestCase.class))//\n@@ -66,6 +68,7 @@ void runTestsInParallel() {\n \t}\n \n \t@SpringJUnitConfig\n+\t@Disabled\n \tstatic class TestCase {\n \n \t\t@BeforeEach",
    "output": "Exclude ParallelExecutionSpringExtensionTests.TestCase from build Prior to this commit, ParallelExecutionSpringExtensionTests.TestCase was accidentally included in the build which skewed the number of tests in spring-test by 1000"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n--- a/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n+++ b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java\n@@ -48,8 +48,12 @@\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n \n-import static org.assertj.core.api.Assertions.*;\n-import static org.springframework.transaction.event.TransactionPhase.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+import static org.springframework.transaction.event.TransactionPhase.AFTER_COMMIT;\n+import static org.springframework.transaction.event.TransactionPhase.AFTER_COMPLETION;\n+import static org.springframework.transaction.event.TransactionPhase.AFTER_ROLLBACK;\n+import static org.springframework.transaction.event.TransactionPhase.BEFORE_COMMIT;\n \n /**\n  * Integration tests for {@link TransactionalEventListener} support",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java\n@@ -69,11 +69,7 @@ public class LocalVariableTableParameterNameDiscoverer implements ParameterNameD\n \tpublic String[] getParameterNames(Method method) {\n \t\tMethod originalMethod = BridgeMethodResolver.findBridgedMethod(method);\n \t\tClass<?> declaringClass = originalMethod.getDeclaringClass();\n-\t\tMap<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n-\t\tif (map == null) {\n-\t\t\tmap = inspectClass(declaringClass);\n-\t\t\tthis.parameterNamesCache.put(declaringClass, map);\n-\t\t}\n+\t\tMap<Member, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n \t\tif (map != NO_DEBUG_INFO_MAP) {\n \t\t\treturn map.get(originalMethod);\n \t\t}\n@@ -84,11 +80,7 @@ public String[] getParameterNames(Method method) {\n \t@Nullable\n \tpublic String[] getParameterNames(Constructor<?> ctor) {\n \t\tClass<?> declaringClass = ctor.getDeclaringClass();\n-\t\tMap<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n-\t\tif (map == null) {\n-\t\t\tmap = inspectClass(declaringClass);\n-\t\t\tthis.parameterNamesCache.put(declaringClass, map);\n-\t\t}\n+\t\tMap<Member, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n \t\tif (map != NO_DEBUG_INFO_MAP) {\n \t\t\treturn map.get(ctor);\n \t\t}",
    "output": "Use computeIfAbsent in LocalVariableTableParameterNameDiscoverer"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -1406,7 +1406,7 @@ public BeanDefinitionHolder decorateIfRequired(\n \t\t\t\t\treturn decorated;\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse if (namespaceUri.startsWith(\"http://www.springframework.org/\")) {\n+\t\t\telse if (namespaceUri.startsWith(\"http://www.springframework.org/schema/\")) {\n \t\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", node);\n \t\t\t}\n \t\t\telse {",
    "output": "BeanDefinitionParserDelegate uses http://www.springframework.org/schema/"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/support/TestConstructorUtilsTests.java\n@@ -26,7 +26,6 @@\n import org.springframework.test.context.TestConstructor;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.springframework.test.context.TestConstructor.TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME;\n import static org.springframework.test.context.TestConstructor.AutowireMode.ALL;\n import static org.springframework.test.context.TestConstructor.AutowireMode.ANNOTATED;\n \n@@ -105,7 +104,7 @@ private void setGlobalFlag() {\n \t}\n \n \tprivate void setGlobalFlag(String flag) {\n-\t\tSpringProperties.setProperty(TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME, flag);\n+\t\tSpringProperties.setProperty(TestConstructor.TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME, flag);\n \t}\n \n ",
    "output": "Fix Checkstyle violation Eclipse apparently sorts static imports differently"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -513,9 +513,9 @@ private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {\n \n \t\tif (buildDefaultUnit) {\n \t\t\tif (foundDefaultUnit) {\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Found explicit default unit with name '\" + defaultName + \"' in persistence.xml - \" +\n-\t\t\t\t\t\t\t\"overriding local default unit settings ('packagesToScan'/'mappingResources')\");\n+\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\tlogger.warn(\"Found explicit default persistence unit with name '\" + defaultName + \"' in persistence.xml - \" +\n+\t\t\t\t\t\t\t\"overriding local default persistence unit settings ('packagesToScan'/'mappingResources')\");\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Log at WARN level in case of contradicting PersistenceUnitManager setup"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternRouteMatcherTests.java b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternRouteMatcherTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternRouteMatcherTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternRouteMatcherTests.java\n@@ -27,7 +27,7 @@\n  * Tests for the {@link PathPatternRouteMatcher}\n  * @author Brian Clozel\n  */\n-public class PathPatternRouteMatcherTest {\n+public class PathPatternRouteMatcherTests {\n \n \tPathPatternRouteMatcher routeMatcher = new PathPatternRouteMatcher(new PathPatternParser());\n ",
    "output": "Rename PathPatternRouteMatcherTest to PathPatternRouteMatcherTests"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -407,9 +407,9 @@ protected ModelAndView doResolveHandlerMethodException(HttpServletRequest reques\n \t\t\t}\n \t\t}\n \t\tcatch (Throwable invocationEx) {\n-\t\t\t// Any other than the original exception is unintended here,\n+\t\t\t// Any other than the original exception (or its cause) is unintended here,\n \t\t\t// probably an accident (e.g. failed assertion or the like).\n-\t\t\tif (invocationEx != exception && logger.isWarnEnabled()) {\n+\t\t\tif (invocationEx != exception && invocationEx != exception.getCause() && logger.isWarnEnabled()) {\n \t\t\t\tlogger.warn(\"Failure in @ExceptionHandler \" + exceptionHandlerMethod, invocationEx);\n \t\t\t}\n \t\t\t// Continue with default processing of the original exception...",
    "output": "Do not warn also if cause is re-thrown"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java b/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/FormContentFilter.java\n@@ -109,16 +109,17 @@ public InputStream getBody() throws IOException {\n \t}\n \n \tprivate boolean shouldParse(HttpServletRequest request) {\n-\t\tif (!HTTP_METHODS.contains(request.getMethod())) {\n-\t\t\treturn false;\n-\t\t}\n-\t\ttry {\n-\t\t\tMediaType mediaType = MediaType.parseMediaType(request.getContentType());\n-\t\t\treturn MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType);\n-\t\t}\n-\t\tcatch (IllegalArgumentException ex) {\n-\t\t\treturn false;\n+\t\tString contentType = request.getContentType();\n+\t\tString method = request.getMethod();\n+\t\tif (StringUtils.hasLength(contentType) && HTTP_METHODS.contains(method)) {\n+\t\t\ttry {\n+\t\t\t\tMediaType mediaType = MediaType.parseMediaType(contentType);\n+\t\t\t\treturn MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType);\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t}\n \t\t}\n+\t\treturn false;\n \t}\n \n ",
    "output": "Improve performance of FormContentFilter Improve the performance of `FormContentFilter` by checking directly if `contentType` is empty. This saves the need for an exception to thrown then immediately caught"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -433,7 +433,13 @@ public ConcurrentLruCache(int maxSize, Function<K, V> generator) {\n \t\tpublic V get(K key) {\n \t\t\tthis.lock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (this.queue.remove(key)) {\n+\t\t\t\tif (this.queue.size() < this.maxSize / 2) {\n+\t\t\t\t\tV cached = this.cache.get(key);\n+\t\t\t\t\tif (cached != null) {\n+\t\t\t\t\t\treturn cached;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse if (this.queue.remove(key)) {\n \t\t\t\t\tthis.queue.add(key);\n \t\t\t\t\treturn this.cache.get(key);\n \t\t\t\t}",
    "output": "Polish MimeTypeUtils LRU cache This commit improves the cache implementation by skipping the ordering of most recently used cached keys when the cache is at least half empty"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -443,6 +443,11 @@ public V get(K key) {\n \t\t\t}\n \t\t\tthis.lock.writeLock().lock();\n \t\t\ttry {\n+\t\t\t\t// retrying in case of concurrent reads on the same key\n+\t\t\t\tif (this.queue.remove(key)) {\n+\t\t\t\t\tthis.queue.add(key);\n+\t\t\t\t\treturn this.cache.get(key);\n+\t\t\t\t}\n \t\t\t\tif (this.queue.size() == this.maxSize) {\n \t\t\t\t\tK leastUsed = this.queue.poll();\n \t\t\t\t\tif (leastUsed != null) {",
    "output": "Fix concurrent reads issue in MimeTypeUtils cache As of , `MimeTypeUtils` has a built-in LRU cache implementation for caching parsed MIME types and avoiding excessive garbage creation at runtime. This implementation, when hit with highly concurrent reads on the same media type (the cache key), can create multiple keys for the same MIME type string. This duplication leads to the cache filling up and evicting entries. When the cache fetches a duplicate key, it is then not associated with a value and the cache can return a `null` value, which is forbidden by the API contract. This commit adds another cache check within the write lock: this avoids creating duplicate entries in the cache and `null` return values"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -21,7 +21,6 @@\n import reactor.core.publisher.Mono;\n import reactor.netty.NettyInbound;\n import reactor.netty.NettyOutbound;\n-import reactor.netty.NettyPipeline;\n import reactor.netty.http.websocket.WebsocketInbound;\n import reactor.netty.http.websocket.WebsocketOutbound;\n ",
    "output": "Remove unnecessary import"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -90,7 +90,6 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \t\t\t\t})\n \t\t\t\t.map(this::toFrame);\n \t\treturn getDelegate().getOutbound()\n-\t\t\t\t.options(NettyPipeline.SendOptions::flushOnEach)\n \t\t\t\t.sendObject(frames)\n \t\t\t\t.then();\n \t}",
    "output": "Remove unnecessary flushOnEach (since reactor-netty 0.9)"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n@@ -784,7 +784,6 @@ public void javaxMetaAnnotationTypeViaFindMergedAnnotation() throws Exception {\n \tpublic void nullableAnnotationTypeViaFindMergedAnnotation() throws Exception {\n \t\tMethod method = TransactionalServiceImpl.class.getMethod(\"doIt\");\n \t\tassertThat(findMergedAnnotation(method, Resource.class)).isEqualTo(method.getAnnotation(Resource.class));\n-\t\tassertThat(findMergedAnnotation(method, Resource.class)).isEqualTo(method.getAnnotation(Resource.class));\n \t}\n \n \t@Test",
    "output": "Remove duplicate assertion in AnnotatedElementUtilsTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java b/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java\n--- a/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java\n@@ -19,7 +19,6 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.List;\n-\n import javax.annotation.Priority;\n \n import org.junit.Test;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java\n@@ -246,7 +246,15 @@ public final void onComplete() {\n \t\t\t\telse if (this.state == State.NEW) {\n \t\t\t\t\tthis.completed = true;\n \t\t\t\t\tthis.state = State.FIRST_SIGNAL_RECEIVED;\n-\t\t\t\t\twriteFunction.apply(this).subscribe(this.writeCompletionBarrier);\n+\t\t\t\t\tPublisher<Void> result;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tresult = writeFunction.apply(this);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Throwable ex) {\n+\t\t\t\t\t\tthis.writeCompletionBarrier.onError(ex);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tresult.subscribe(this.writeCompletionBarrier);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tthis.completed = true;",
    "output": "Equalize copy of ChannelSendOperator"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/PropertiesPropertySource.java b/spring-core/src/main/java/org/springframework/core/env/PropertiesPropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/PropertiesPropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/PropertiesPropertySource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,7 +35,7 @@\n  */\n public class PropertiesPropertySource extends MapPropertySource {\n \n-\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n \tpublic PropertiesPropertySource(String name, Properties source) {\n \t\tsuper(name, (Map) source);\n \t}\n@@ -44,4 +44,12 @@ protected PropertiesPropertySource(String name, Map<String, Object> source) {\n \t\tsuper(name, source);\n \t}\n \n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\tsynchronized (this.source) {\n+\t\t\treturn super.getPropertyNames();\n+\t\t}\n+\t}\n+\n }",
    "output": "Defensive concurrent access to key set from java.util.Properties"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,6 +41,7 @@\n import org.springframework.expression.spel.CompilablePropertyAccessor;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n import org.springframework.util.StringUtils;\n \n@@ -413,7 +414,7 @@ private Method findMethodForProperty(String[] methodSuffixes, String prefix, Cla\n \t\t\t\t\t\tmethod.getParameterCount() == numberOfParams &&\n \t\t\t\t\t\t(!mustBeStatic || Modifier.isStatic(method.getModifiers())) &&\n \t\t\t\t\t\t(requiredReturnTypes.isEmpty() || requiredReturnTypes.contains(method.getReturnType()))) {\n-\t\t\t\t\treturn method;\n+\t\t\t\t\treturn ClassUtils.getInterfaceMethodIfPossible(method);\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "ReflectivePropertyAccessor uses interface methods if possible"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1648,7 +1648,7 @@ protected Object getObjectForBeanInstance(\n \t\t\t\treturn beanInstance;\n \t\t\t}\n \t\t\tif (!(beanInstance instanceof FactoryBean)) {\n-\t\t\t\tthrow new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n+                throw new BeanIsNotAFactoryException(beanName, beanInstance.getClass());\n \t\t\t}\n \t\t}\n ",
    "output": "Fix duplicate invoke method of transformedBeanName"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n@@ -215,11 +215,19 @@ public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType con\n \tprotected Mono<Map<String, Object>> getModelAttributes(\n \t\t\t@Nullable Map<String, ?> model, ServerWebExchange exchange) {\n \n-\t\tint size = (model != null ? model.size() : 0);\n-\t\tMap<String, Object> attributes = new ConcurrentHashMap<>(size);\n+\t\tMap<String, Object> attributes;\n \t\tif (model != null) {\n-\t\t\tattributes.putAll(model);\n+\t\t\tattributes = new ConcurrentHashMap<>(model.size());\n+\t\t\tfor (Map.Entry<String, ?> entry : model.entrySet()) {\n+\t\t\t\tif (entry.getValue() != null) {\n+\t\t\t\t\tattributes.put(entry.getKey(), entry.getValue());\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n+\t\telse {\n+\t\t\tattributes = new ConcurrentHashMap<>(0);\n+\t\t}\n+\n \t\t//noinspection deprecation\n \t\treturn resolveAsyncAttributes(attributes)\n \t\t\t\t.then(resolveAsyncAttributes(attributes, exchange))",
    "output": "Ignore null attributes in AbstractView Consistent with ConcurrentModel and also with treatment of empty values from async attributes"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/DefaultMultipartMessageReader.java\n@@ -21,6 +21,7 @@\n import java.nio.channels.Channel;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.OpenOption;\n import java.nio.file.Path;\n import java.nio.file.StandardOpenOption;\n import java.util.Collections;\n@@ -367,6 +368,10 @@ public String value() {\n \n \tprivate static class DefaultFilePart extends DefaultPart implements FilePart {\n \n+\t\tprivate static final OpenOption[] FILE_CHANNEL_OPTIONS =\n+\t\t\t\t{StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE};\n+\n+\n \t\tpublic DefaultFilePart(HttpHeaders headers, DataBuffer body) {\n \t\t\tsuper(headers, body);\n \t\t}\n@@ -380,7 +385,7 @@ public String filename() {\n \n \t\t@Override\n \t\tpublic Mono<Void> transferTo(Path dest) {\n-\t\t\treturn Mono.using(() -> AsynchronousFileChannel.open(dest, StandardOpenOption.WRITE),\n+\t\t\treturn Mono.using(() -> AsynchronousFileChannel.open(dest, FILE_CHANNEL_OPTIONS),\n \t\t\t\t\tthis::writeBody, this::close);\n \t\t}\n ",
    "output": "Use correct file options for transferTo Similar to fix applied to Synchronoss implementation in #cef98e"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -97,11 +97,11 @@ public ReactiveAdapterRegistry() {\n \t\t// We can fall back on \"reactive-streams-flow-bridge\" (once released)\n \n \t\t// Coroutines\n-\t\tif (ClassUtils.isPresent(\"kotlinx.coroutines.Deferred\", classLoader)) {\n+\t\tif (reactorPresent && ClassUtils.isPresent(\"kotlinx.coroutines.Deferred\", classLoader)) {\n \t\t\tnew CoroutinesRegistrar().registerAdapters(this);\n \t\t}\n \t\t// TODO Use a single CoroutinesRegistrar when Flow will be not experimental anymore\n-\t\tif (ClassUtils.isPresent(\"kotlinx.coroutines.flow.Flow\", classLoader)) {\n+\t\tif (reactorPresent && ClassUtils.isPresent(\"kotlinx.coroutines.flow.Flow\", classLoader)) {\n \t\t\tnew CoroutinesFlowRegistrar().registerAdapters(this);\n \t\t}\n \t}",
    "output": "Refine Coroutines adapter registration activation"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SortedProperties.java b/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n--- a/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n+++ b/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n@@ -93,7 +93,7 @@ public void store(OutputStream out, String comments) throws IOException {\n \t\tsuper.store(baos, (this.omitComments ? null : comments));\n \t\tString contents = new String(baos.toByteArray(), StandardCharsets.ISO_8859_1);\n \t\tfor (String line : contents.split(EOL)) {\n-\t\t\tif (!this.omitComments || !line.startsWith(\"#\")) {\n+\t\t\tif (!(this.omitComments && line.startsWith(\"#\"))) {\n \t\t\t\tout.write((line + EOL).getBytes(StandardCharsets.ISO_8859_1));\n \t\t\t}\n \t\t}\n@@ -105,7 +105,7 @@ public void store(Writer writer, String comments) throws IOException {\n \t\tsuper.store(stringWriter, (this.omitComments ? null : comments));\n \t\tString contents = stringWriter.toString();\n \t\tfor (String line : contents.split(EOL)) {\n-\t\t\tif (!this.omitComments || !line.startsWith(\"#\")) {\n+\t\t\tif (!(this.omitComments && line.startsWith(\"#\"))) {\n \t\t\t\twriter.write(line + EOL);\n \t\t\t}\n \t\t}",
    "output": "Apply De Morgan's law for greater clarity of purpose"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -329,12 +329,10 @@ private void handleError(WebSocketSession session, Throwable ex, @Nullable Messa\n \t\t\tsendErrorMessage(session, ex);\n \t\t\treturn;\n \t\t}\n-\n \t\tMessage<byte[]> message = getErrorHandler().handleClientMessageProcessingError(clientMessage, ex);\n \t\tif (message == null) {\n \t\t\treturn;\n \t\t}\n-\n \t\tStompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);\n \t\tAssert.state(accessor != null, \"No StompHeaderAccessor\");\n \t\tsendToClient(session, accessor, message.getPayload());\n@@ -357,6 +355,14 @@ private void sendErrorMessage(WebSocketSession session, Throwable error) {\n \t\t\t// Could be part of normal workflow (e.g. browser tab closed)\n \t\t\tlogger.debug(\"Failed to send STOMP ERROR to client\", ex);\n \t\t}\n+\t\tfinally {\n+\t\t\ttry {\n+\t\t\t\tsession.close(CloseStatus.PROTOCOL_ERROR);\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\t// Ignore\n+\t\t\t}\n+\t\t}\n \t}\n \n \tprivate boolean detectImmutableMessageInterceptor(MessageChannel channel) {",
    "output": "Consistently close connection after ERROR frame"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/comparator/InstanceComparator.java b/spring-core/src/main/java/org/springframework/util/comparator/InstanceComparator.java\n--- a/spring-core/src/main/java/org/springframework/util/comparator/InstanceComparator.java\n+++ b/spring-core/src/main/java/org/springframework/util/comparator/InstanceComparator.java\n@@ -56,7 +56,7 @@ public InstanceComparator(Class<?>... instanceOrder) {\n \tpublic int compare(T o1, T o2) {\n \t\tint i1 = getOrder(o1);\n \t\tint i2 = getOrder(o2);\n-\t\treturn (i1 < i2 ? -1 : (i1 == i2 ? 0 : 1));\n+\t\treturn (Integer.compare(i1, i2));\n \t}\n \n \tprivate int getOrder(@Nullable T object) {",
    "output": "Replace with 'Integer.compare'"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java b/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java\n--- a/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/SortedPropertiesTests.java\n@@ -132,8 +132,11 @@ public void storingAsXmlSortsPropertiesAndOmitsComments() throws IOException {\n \n \t\tString[] lines = lines(baos);\n \n-\t\tassertThat(lines).containsExactly( //\n-\t\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\", //\n+\t\tassertThat(lines).isNotEmpty();\n+\t\t// Leniently match first line due to differences between JDK 8 and JDK 9+.\n+\t\tString regex = \"<\\\\?xml .*\\\\?>\";\n+\t\tassertThat(lines[0]).matches(regex);\n+\t\tassertThat(lines).filteredOn(line -> !line.matches(regex)).containsExactly( //\n \t\t\t\"<!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\">\", //\n \t\t\t\"<properties>\", //\n \t\t\t\"<entry key=\\\"color\\\">blue</entry>\", //",
    "output": "Fix SortedPropertiesTests on JDK 9+"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java\n@@ -37,7 +37,7 @@\n  * @author Brian Clozel\n  * @since 5.0\n  */\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class DelegatingWebFluxConfiguration extends WebFluxConfigurationSupport {\n \n \tprivate final WebFluxConfigurerComposite configurers = new WebFluxConfigurerComposite();\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java\n@@ -39,7 +39,7 @@\n  * @author Rossen Stoyanchev\n  * @since 3.1\n  */\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n \n \tprivate final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();",
    "output": "Mark Spring web config classes as proxyBeanMethods=false"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SortedProperties.java b/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n--- a/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n+++ b/spring-core/src/main/java/org/springframework/core/SortedProperties.java\n@@ -30,8 +30,6 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-import org.springframework.util.StringUtils;\n-\n /**\n  * Specialization of {@link Properties} that sorts properties alphanumerically\n  * based on their keys.\n@@ -94,7 +92,7 @@ public void store(OutputStream out, String comments) throws IOException {\n \t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n \t\tsuper.store(baos, (this.omitComments ? null : comments));\n \t\tString contents = new String(baos.toByteArray(), StandardCharsets.ISO_8859_1);\n-\t\tfor (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {\n+\t\tfor (String line : contents.split(EOL)) {\n \t\t\tif (!this.omitComments || !line.startsWith(\"#\")) {\n \t\t\t\tout.write((line + EOL).getBytes(StandardCharsets.ISO_8859_1));\n \t\t\t}\n@@ -106,7 +104,7 @@ public void store(Writer writer, String comments) throws IOException {\n \t\tStringWriter stringWriter = new StringWriter();\n \t\tsuper.store(stringWriter, (this.omitComments ? null : comments));\n \t\tString contents = stringWriter.toString();\n-\t\tfor (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {\n+\t\tfor (String line : contents.split(EOL)) {\n \t\t\tif (!this.omitComments || !line.startsWith(\"#\")) {\n \t\t\t\twriter.write(line + EOL);\n \t\t\t}",
    "output": "Remove dependency on StringUtils in SortedProperties ,"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -289,7 +289,6 @@ public void stopInternal() {\n \t@Override\n \tprotected void handleMessageInternal(Message<?> message) {\n \t\tMessageHeaders headers = message.getHeaders();\n-\t\tSimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers);\n \t\tString destination = SimpMessageHeaderAccessor.getDestination(headers);\n \t\tString sessionId = SimpMessageHeaderAccessor.getSessionId(headers);\n \n@@ -299,6 +298,7 @@ protected void handleMessageInternal(Message<?> message) {\n \t\t\treturn;\n \t\t}\n \n+\t\tSimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers);\n \t\tif (SimpMessageType.MESSAGE.equals(messageType)) {\n \t\t\tlogMessage(message);\n \t\t\tsendMessageToSubscribers(destination, message);",
    "output": "Avoid unnecessary call to get message type"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java\n@@ -161,7 +161,7 @@ private Method resolveAliasTarget(Method attribute, AliasFor aliasFor, boolean c\n \t\t\t\t\tStringUtils.capitalize(AttributeMethods.describe(attribute)),\n \t\t\t\t\tAttributeMethods.describe(targetAnnotation, targetAttributeName)));\n \t\t}\n-\t\tif (target == attribute) {\n+\t\tif (target.equals(attribute)) {\n \t\t\tthrow new AnnotationConfigurationException(String.format(\n \t\t\t\t\t\"@AliasFor declaration on %s points to itself. \" +\n \t\t\t\t\t\"Specify 'annotation' to point to a same-named attribute on a meta-annotation.\",\n@@ -182,7 +182,7 @@ private Method resolveAliasTarget(Method attribute, AliasFor aliasFor, boolean c\n \t\t\t\t\t\tattribute.getName()));\n \t\t\t}\n \t\t\tMethod mirror = resolveAliasTarget(target, targetAliasFor, false);\n-\t\t\tif (mirror != attribute) {\n+\t\t\tif (!mirror.equals(attribute)) {\n \t\t\t\tthrow new AnnotationConfigurationException(String.format(\n \t\t\t\t\t\t\"%s must be declared as an @AliasFor '%s', not '%s'.\",\n \t\t\t\t\t\tStringUtils.capitalize(AttributeMethods.describe(target)),",
    "output": "Fix annotation exceptions in tight memory Update `AnnotationTypeMapping` so that instance comparisons are no longer used when checking attribute methods. Prior to this commit, in an environment with tightly constrained memory, the method cache could be cleared and different method instances would be returned"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java\n@@ -23,7 +23,6 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.regex.Matcher;",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/ImportAwareTests.java b/spring-context/src/test/java/org/springframework/context/annotation/ImportAwareTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/ImportAwareTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportAwareTests.java\n@@ -134,6 +134,14 @@ public void metadataFromImportsTwoThenOne() {\n \t\tassertThat(((StandardAnnotationMetadata) importMetadata).getIntrospectedClass()).isEqualTo(ConfigurationOne.class);\n \t}\n \n+\t@Test\n+\tpublic void metadataFromImportsOneThenThree() {\n+\t\tAnnotationMetadata importMetadata = new AnnotationConfigApplicationContext(\n+\t\t\t\tConfigurationOne.class, ConfigurationThree.class)\n+\t\t\t\t.getBean(MetadataHolder.class).importMetadata;\n+\t\tassertThat(((StandardAnnotationMetadata) importMetadata).getIntrospectedClass()).isEqualTo(ConfigurationOne.class);\n+\t}\n+\n \t@Test\n \tpublic void importAwareWithAnnotationAttributes() {\n \t\tnew AnnotationConfigApplicationContext(ApplicationConfiguration.class);\n@@ -288,6 +296,13 @@ public static class ConfigurationTwo {\n \t}\n \n \n+\t@Conditional(OnMissingBeanCondition.class)\n+\t@EnableLiteConfiguration(\"foo\")\n+\t@Configuration\n+\tpublic static class ConfigurationThree {\n+\t}\n+\n+\n \t@Import(SomeConfiguration.class)\n \t@Target(ElementType.TYPE)\n \t@Retention(RetentionPolicy.RUNTIME)",
    "output": "Actually test LiteConfiguration arrangement"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java\n@@ -125,7 +125,7 @@ public void readAndSplitScriptContainingCommentsWithWindowsLineEnding() throws E\n \t\tString script = readScript(\"test-data-with-comments.sql\").replaceAll(\"\\n\", \"\\r\\n\");\n \t\tsplitScriptContainingComments(script);\n \t}\n-\t\n+\n \tprivate void splitScriptContainingComments(String script) throws Exception {\n \t\tList<String> statements = new ArrayList<>();\n \t\tsplitSqlScript(script, ';', statements);",
    "output": "Fix Checkstyle violation"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java b/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.context.config;\n \n-import java.io.FileNotFoundException;\n import java.util.Calendar;\n import java.util.Date;\n \n@@ -32,6 +31,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n /**\n  * @author Arjen Poutsma\n@@ -129,14 +129,14 @@ public void propertyPlaceholderLocationWithSystemPropertyForMultipleLocations()\n \t@Test\n \tpublic void propertyPlaceholderLocationWithSystemPropertyMissing() {\n \t\ttry {\n-\t\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\n+\t\t\tnew ClassPathXmlApplicationContext(\n \t\t\t\t\t\"contextNamespaceHandlerTests-location-placeholder.xml\", getClass());\n-\t\t\tassertEquals(\"bar\", applicationContext.getBean(\"foo\"));\n-\t\t\tassertEquals(\"foo\", applicationContext.getBean(\"bar\"));\n-\t\t\tassertEquals(\"maps\", applicationContext.getBean(\"spam\"));\n+\t\t\tfail(\"Should have thrown FatalBeanException\");\n \t\t}\n \t\tcatch (FatalBeanException ex) {\n-\t\t\tassertTrue(ex.getRootCause() instanceof FileNotFoundException);\n+\t\t\tThrowable cause = ex.getRootCause();\n+\t\t\tassertTrue(cause instanceof IllegalArgumentException);\n+\t\t\tassertEquals(\"Could not resolve placeholder 'foo' in value \\\"${foo}\\\"\", cause.getMessage());\n \t\t}\n \t}\n ",
    "output": "Fix test failing after f"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java\n--- a/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java\n@@ -132,6 +132,7 @@ public void multipleWrites() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"try\")\n \tpublic void headersAfterExecute() throws Exception {\n \t\tClientHttpRequest request = factory.createRequest(new URI(baseUrl + \"/status/ok\"), HttpMethod.POST);\n ",
    "output": "Clean up warning in Gradle build"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java\n@@ -37,7 +37,9 @@\n import org.springframework.web.reactive.BindingContext;\n import org.springframework.web.server.ServerWebExchange;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n /**\n  * Unit tests for {@link AbstractView}.",
    "output": "Fix checkstyle errors"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java b/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/SimpleRouteMatcher.java\n@@ -98,4 +98,4 @@ public String value() {\n \t\t}\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java b/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java\n--- a/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java\n@@ -76,9 +76,9 @@ public static void assertTrue(String message, boolean condition) {\n \t * {@link AssertionError} otherwise.\n \t * @param message a message that describes the reason for the failure\n \t * @param object the object to check\n-\t * @since 5.1\n+\t * @since 5.1.8\n \t */\n-\tpublic static void assertNotNull(String message, Object object) {\n+\tpublic static void assertNotNull(String message, @Nullable Object object) {\n \t\tassertTrue(message, object != null);\n \t}\n ",
    "output": "Add missing Nullable annotation to assertNotNull"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java\n@@ -98,7 +98,7 @@ private void initLookupPath(ResourceUrlProvider urlProvider) {\n \t\t\t\tString lookupPath = pathHelper.getLookupPathForRequest(this);\n \t\t\t\tthis.indexLookupPath = requestUri.lastIndexOf(lookupPath);\n \t\t\t\tAssert.isTrue(this.indexLookupPath != -1, () ->\n-\t\t\t\t\t\t\"Failed to find lookupPath '\" + lookupPath + \"' within requestUri '\" + requestUri + \". \" +\n+\t\t\t\t\t\t\"Failed to find lookupPath '\" + lookupPath + \"' within requestUri '\" + requestUri + \"'. \" +\n \t\t\t\t\t\t\"Does the path have invalid encoded characters \" +\n \t\t\t\t\t\t\t\t\"for characterEncoding=\" + getRequest().getCharacterEncoding() + \"?\");\n \t\t\t\tthis.prefixLookupPath = requestUri.substring(0, this.indexLookupPath);",
    "output": "Add a missing single quote in assertion message"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -521,9 +521,11 @@ private MergedAnnotation<?> findAutowiredAnnotation(AccessibleObject ao) {\n \t * @param ann the Autowired annotation\n \t * @return whether the annotation indicates that a dependency is required\n \t */\n-\t@SuppressWarnings(\"deprecation\")\n+\t@SuppressWarnings({ \"deprecation\", \"cast\" })\n \tprotected boolean determineRequiredStatus(MergedAnnotation<?> ann) {\n-\t\treturn determineRequiredStatus(ann.asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType())));\n+\t\t// The following (AnnotationAttributes) cast is required on JDK 9+.\n+\t\treturn determineRequiredStatus((AnnotationAttributes)\n+\t\t\t\tann.asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType())));\n \t}\n \n \t/**",
    "output": "Fix build on JDK 9+"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java\n@@ -183,7 +183,7 @@ public void emptyBodyWritten() {\n \tpublic void isStreamingMediaType() throws InvocationTargetException, IllegalAccessException {\n \t\tHttpMessageWriter<String> writer = getWriter(TEXT_HTML);\n \t\tMediaType streamingMediaType = new MediaType(TEXT_PLAIN, Collections.singletonMap(\"streaming\", \"true\"));\n-\t\twhen(this.encoder.getStreamingMediaTypes()).thenReturn(Arrays.asList(streamingMediaType));\n+\t\tgiven(this.encoder.getStreamingMediaTypes()).willReturn(Arrays.asList(streamingMediaType));\n \t\tMethod method = ReflectionUtils.findMethod(writer.getClass(), \"isStreamingMediaType\", MediaType.class);\n \t\tReflectionUtils.makeAccessible(method);\n \t\tassertTrue((Boolean) method.invoke(writer, streamingMediaType));",
    "output": "Fix broken test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n@@ -50,6 +50,7 @@\n  * @author Sebastien Deleuze\n  * @author Rossen Stoyanchev\n  * @author Brian Clozel\n+ * @author Sam Brannen\n  * @since 5.0\n  * @param <T> the type of objects in the input stream\n  */\n@@ -171,7 +172,7 @@ private boolean isStreamingMediaType(@Nullable MediaType contentType) {\n \t\t}\n \t\tfor (MediaType mediaType : ((HttpMessageEncoder<?>) this.encoder).getStreamingMediaTypes()) {\n \t\t\tif (contentType.isCompatibleWith(mediaType) &&\n-\t\t\t\t\tcontentType.getParameters().entrySet().containsAll(mediaType.getParameters().keySet())) {\n+\t\t\t\t\tcontentType.getParameters().keySet().containsAll(mediaType.getParameters().keySet())) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "Fix bug in EncoderHttpMessageWriter.isStreamingMediaType"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -165,6 +165,7 @@ public void typeMismatch() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void httpMessageNotReadable() {\n \t\tException ex = new HttpMessageNotReadableException(\"message\");\n \t\ttestException(ex);",
    "output": "Suppress deprecation warning in Gradle build"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/cache/DefaultCacheAwareContextLoaderDelegate.java b/spring-test/src/main/java/org/springframework/test/context/cache/DefaultCacheAwareContextLoaderDelegate.java\n--- a/spring-test/src/main/java/org/springframework/test/context/cache/DefaultCacheAwareContextLoaderDelegate.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/cache/DefaultCacheAwareContextLoaderDelegate.java\n@@ -123,8 +123,8 @@ public ApplicationContext loadContext(MergedContextConfiguration mergedContextCo\n \t\t\t\ttry {\n \t\t\t\t\tcontext = loadContextInternal(mergedContextConfiguration);\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(String.format(\"Storing ApplicationContext in cache under key [%s]\",\n-\t\t\t\t\t\t\t\tmergedContextConfiguration));\n+\t\t\t\t\t\tlogger.debug(String.format(\"Storing ApplicationContext [%s] in cache under key [%s]\",\n+\t\t\t\t\t\t\t\tSystem.identityHashCode(context), mergedContextConfiguration));\n \t\t\t\t\t}\n \t\t\t\t\tthis.contextCache.put(mergedContextConfiguration, context);\n \t\t\t\t}\n@@ -134,8 +134,8 @@ public ApplicationContext loadContext(MergedContextConfiguration mergedContextCo\n \t\t\t}\n \t\t\telse {\n \t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(String.format(\"Retrieved ApplicationContext from cache with key [%s]\",\n-\t\t\t\t\t\t\tmergedContextConfiguration));\n+\t\t\t\t\tlogger.debug(String.format(\"Retrieved ApplicationContext [%s] from cache with key [%s]\",\n+\t\t\t\t\t\t\tSystem.identityHashCode(context), mergedContextConfiguration));\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Log identity hash for ApplicationContext for context cache hits/misses DefaultCacheAwareContextLoaderDelegate now logs the identity hash code for an application context instance that was stored in or retrieved from the context cache in the Spring TestContext Framework"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java\n--- a/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java\n@@ -27,6 +27,7 @@\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.lang.Nullable;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * {@link AnnotationMetadata} implementation that uses standard reflection\n@@ -151,7 +152,7 @@ public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotatio\n \tpublic boolean hasAnnotatedMethods(String annotationName) {\n \t\tif (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {\n \t\t\ttry {\n-\t\t\t\tMethod[] methods = getIntrospectedClass().getDeclaredMethods();\n+\t\t\t\tMethod[] methods = ReflectionUtils.getDeclaredMethods(getIntrospectedClass());\n \t\t\t\tfor (Method method : methods) {\n \t\t\t\t\tif (!method.isBridge() && method.getAnnotations().length > 0 &&\n \t\t\t\t\t\t\tAnnotatedElementUtils.isAnnotated(method, annotationName)) {",
    "output": "Use ReflectionUtils to get declared methods Update `StandardAnnotationMetadata` to use `ReflectionUtils` when obtaining declared methods. This update is primarily so that the common method cache can be used"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -216,7 +216,7 @@ private void logArgumentErrorIfNecessary(\n \n \t\t// Leave stack trace for later, if error is not handled..\n \t\tString message = cause.getMessage();\n-\t\tif (!message.contains(parameter.getExecutable().toGenericString())) {\n+\t\tif (message != null && !message.contains(parameter.getExecutable().toGenericString())) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(exchange.getLogPrefix() + formatArgumentError(parameter, message));\n \t\t\t}",
    "output": "Add null check"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionSynchronizationManager.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionSynchronizationManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionSynchronizationManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionSynchronizationManager.java\n@@ -403,8 +403,4 @@ public void clear() {\n \t\tthis.transactionContext.clear();\n \t}\n \n-\tprivate Map<Object, Object> getResources() {\n-\t\treturn this.transactionContext.getResources();\n-\t}\n-\n }",
    "output": "Delete dead code in TransactionSynchronizationManager"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/reactive/AbstractReactiveTransactionManager.java\n@@ -443,7 +443,7 @@ private Mono<Void> processCommit(TransactionSynchronizationManager synchronizati\n \t\t\t\t\t\treturn triggerAfterCompletion(synchronizationManager, status, TransactionSynchronization.STATUS_ROLLED_BACK).then(propagateException);\n \t\t\t\t\t}\n \t\t\t\t\tif (ErrorPredicates.TRANSACTION_EXCEPTION.test(ex)) {\n-\t\t\t\t\t\ttriggerAfterCompletion(synchronizationManager, status, TransactionSynchronization.STATUS_UNKNOWN).then(propagateException);\n+\t\t\t\t\t\treturn triggerAfterCompletion(synchronizationManager, status, TransactionSynchronization.STATUS_UNKNOWN).then(propagateException);\n \t\t\t\t\t}\n \t\t\t\t\tif (ErrorPredicates.RUNTIME_OR_ERROR.test(ex)) {\n \t\t\t\t\t\tMono<Void> mono;",
    "output": "Add missing return in AbstractReactiveTransactionManager.processCommit"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/PatternMatchUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -39,15 +39,17 @@ public static boolean simpleMatch(@Nullable String pattern, @Nullable String str\n \t\tif (pattern == null || str == null) {\n \t\t\treturn false;\n \t\t}\n+\n \t\tint firstIndex = pattern.indexOf('*');\n \t\tif (firstIndex == -1) {\n \t\t\treturn pattern.equals(str);\n \t\t}\n+\n \t\tif (firstIndex == 0) {\n \t\t\tif (pattern.length() == 1) {\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\tint nextIndex = pattern.indexOf('*', firstIndex + 1);\n+\t\t\tint nextIndex = pattern.indexOf('*', 1);\n \t\t\tif (nextIndex == -1) {\n \t\t\t\treturn str.endsWith(pattern.substring(1));\n \t\t\t}\n@@ -64,6 +66,7 @@ public static boolean simpleMatch(@Nullable String pattern, @Nullable String str\n \t\t\t}\n \t\t\treturn false;\n \t\t}\n+\n \t\treturn (str.length() >= firstIndex &&\n \t\t\t\tpattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&\n \t\t\t\tsimpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)));",
    "output": "Consistent non-use of firstIndex 0 in PatternMatchUtils"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n@@ -211,15 +211,16 @@ public Map<String, Class<? extends BeanDefinitionReader>> getImportedResources()\n \t}\n \n \tpublic void validate(ProblemReporter problemReporter) {\n-\t\t// A configuration class may not be final (CGLIB limitation)\n-\t\tif (getMetadata().isAnnotated(Configuration.class.getName())) {\n-\t\t\tif (getMetadata().isFinal()) {\n+\t\t// A configuration class may not be final (CGLIB limitation) unless it declares proxyBeanMethods=false\n+\t\tString annotationName = Configuration.class.getName();\n+\t\tif (this.metadata.isAnnotated(annotationName) &&\n+\t\t\t\t(Boolean) this.metadata.getAnnotationAttributes(annotationName).get(\"proxyBeanMethods\")) {\n+\t\t\tif (this.metadata.isFinal()) {\n \t\t\t\tproblemReporter.error(new FinalConfigurationProblem());\n \t\t\t}\n-\t\t}\n-\n-\t\tfor (BeanMethod beanMethod : this.beanMethods) {\n-\t\t\tbeanMethod.validate(problemReporter);\n+\t\t\tfor (BeanMethod beanMethod : this.beanMethods) {\n+\t\t\t\tbeanMethod.validate(problemReporter);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Support final @Configuration(proxyBeanMethods = false) classes"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java\n--- a/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java\n+++ b/spring-core/src/main/java/org/springframework/core/log/LogAccessor.java\n@@ -68,6 +68,51 @@ public final Log getLog() {\n \t}\n \n \n+\t// Log level checks\n+\n+\t/**\n+\t * Is fatal logging currently enabled?\n+\t */\n+\tpublic boolean isFatalEnabled() {\n+\t\treturn this.log.isFatalEnabled();\n+\t}\n+\n+\t/**\n+\t * Is error logging currently enabled?\n+\t */\n+\tpublic boolean isErrorEnabled() {\n+\t\treturn this.log.isErrorEnabled();\n+\t}\n+\n+\t/**\n+\t * Is warn logging currently enabled?\n+\t */\n+\tpublic boolean isWarnEnabled() {\n+\t\treturn this.log.isWarnEnabled();\n+\t}\n+\n+\t/**\n+\t * Is info logging currently enabled?\n+\t */\n+\tpublic boolean isInfoEnabled() {\n+\t\treturn this.log.isInfoEnabled();\n+\t}\n+\n+\t/**\n+\t * Is debug logging currently enabled?\n+\t */\n+\tpublic boolean isDebugEnabled() {\n+\t\treturn this.log.isDebugEnabled();\n+\t}\n+\n+\t/**\n+\t * Is trace logging currently enabled?\n+\t */\n+\tpublic boolean isTraceEnabled() {\n+\t\treturn this.log.isTraceEnabled();\n+\t}\n+\n+\n \t// Plain log methods\n \n \t/**",
    "output": "Add is*Enabled methods for log level checks to LogAccessor"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java\n@@ -109,7 +109,7 @@ public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {\n \t * @see java.util.logging.Logger#getLogger(String)\n \t */\n \tpublic void setWarnLogCategory(String loggerName) {\n-\t\tthis.warnLogger = !StringUtils.isEmpty(loggerName) ? LogFactory.getLog(loggerName) : null;\n+\t\tthis.warnLogger = (!StringUtils.isEmpty(loggerName) ? LogFactory.getLog(loggerName) : null);\n \t}\n \n \t/**\n@@ -138,11 +138,11 @@ public ModelAndView resolveException(\n \t\t\tprepareResponse(ex, response);\n \t\t\tModelAndView result = doResolveException(request, response, handler, ex);\n \t\t\tif (result != null) {\n-\t\t\t\t// Print warn message when warn logger is not enabled...\n+\t\t\t\t// Print debug message when warn logger is not enabled.\n \t\t\t\tif (logger.isDebugEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {\n \t\t\t\t\tlogger.debug(\"Resolved [\" + ex + \"]\" + (result.isEmpty() ? \"\" : \" to \" + result));\n \t\t\t\t}\n-\t\t\t\t// warnLogger with full stack trace (requires explicit config)\n+\t\t\t\t// Explicitly configured warn logger in logException method.\n \t\t\t\tlogException(ex, request);\n \t\t\t}\n \t\t\treturn result;",
    "output": "Revise inline comment for logException call"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n@@ -126,6 +126,7 @@ public void followUpRequestAfterFailure() {\n \n \t\ttry {\n \t\t\tthis.restTemplate.getForEntity(\"/some-service/some-endpoint\", String.class);\n+\t\t\tfail(\"Expected exception to be thrown.\");\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthis.restTemplate.postForEntity(\"/reporting-service/report-error\", ex.toString(), String.class);\n@@ -142,6 +143,7 @@ public void verifyShouldFailIfRequestsFailed() {\n \t\tthis.restTemplate.postForEntity(\"/remoteurl\", null, String.class);\n \t\ttry {\n \t\t\tthis.restTemplate.postForEntity(\"/remoteurl\", null, String.class);\n+\t\t\tfail(\"Expected error to be thrown.\");\n \t\t}\n \t\tcatch (AssertionError error) {\n \t\t\tassertThat(error.getMessage()).startsWith(\"No further requests expected\");",
    "output": "Add missing failcalls in MockRestServiceServerTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n--- a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -177,8 +177,8 @@ private void doInvokeListener(ApplicationListener listener, ApplicationEvent eve\n \t\t\t\t// Possibly a lambda-defined listener which we could not resolve the generic event type for\n \t\t\t\t// -> let's suppress the exception and just log a debug message.\n \t\t\t\tLog logger = LogFactory.getLog(getClass());\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Non-matching event type for listener: \" + listener, ex);\n+\t\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\t\tlogger.trace(\"Non-matching event type for listener: \" + listener, ex);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Log ClassCastException from lambda-defined listener at trace level"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -935,7 +935,7 @@ VariableResolver asVariableResolver() {\n \t\tif (this == NONE) {\n \t\t\treturn null;\n \t\t}\n-\t\treturn new DefaultVariableResolver();\n+\t\treturn new DefaultVariableResolver(this);\n \t}\n \n \t/**\n@@ -1452,17 +1452,23 @@ interface VariableResolver extends Serializable {\n \n \n \t@SuppressWarnings(\"serial\")\n-\tprivate class DefaultVariableResolver implements VariableResolver {\n+\tprivate static class DefaultVariableResolver implements VariableResolver {\n+\n+\t\tprivate final ResolvableType source;\n+\n+\t\tDefaultVariableResolver(ResolvableType resolvableType) {\n+\t\t\tthis.source = resolvableType;\n+\t\t}\n \n \t\t@Override\n \t\t@Nullable\n \t\tpublic ResolvableType resolveVariable(TypeVariable<?> variable) {\n-\t\t\treturn ResolvableType.this.resolveVariable(variable);\n+\t\t\treturn this.source.resolveVariable(variable);\n \t\t}\n \n \t\t@Override\n \t\tpublic Object getSource() {\n-\t\t\treturn ResolvableType.this;\n+\t\t\treturn this.source;\n \t\t}\n \t}\n ",
    "output": "Avoid possible memory leak in ResolvableType"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java\n@@ -147,6 +147,13 @@ public void isPresentWhenFromClassWithMetaDepth2() {\n \t\tassertThat(annotations.isPresent(ComposedTransactionalComponent.class)).isTrue();\n \t}\n \n+\t@Test\n+\tpublic void getParent() {\n+\t\tMergedAnnotations annotations = MergedAnnotations.from(ComposedTransactionalComponentClass.class);\n+\t\tassertThat(annotations.get(TransactionalComponent.class).getParent().getType())\n+\t\t\t\t.isEqualTo(ComposedTransactionalComponent.class);\n+\t}\n+\n \t@Test\n \tpublic void collectMultiValueMapFromNonAnnotatedClass() {\n \t\tMultiValueMap<String, Object> map = MergedAnnotations.from(",
    "output": "Test status quo for MergedAnnotation.getParent"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -48,6 +48,7 @@\n  * @author Sebastien Deleuze\n  * @author Brian Clozel\n  * @author Juergen Hoeller\n+ * @author Sam Brannen\n  */\n public class HttpHeadersTests {\n \n@@ -515,10 +516,11 @@ public void firstZonedDateTime() {\n \t\tassertTrue(headers.getFirstZonedDateTime(HttpHeaders.DATE).isEqual(date));\n \n \t\theaders.clear();\n-\t\tZonedDateTime otherDate = ZonedDateTime.of(2010, 12, 18, 10, 20, 0, 0, ZoneId.of(\"GMT\"));\n \t\theaders.add(HttpHeaders.DATE, \"Fri, 02 Jun 2017 02:22:00 GMT\");\n \t\theaders.add(HttpHeaders.DATE, \"Sat, 18 Dec 2010 10:20:00 GMT\");\n \t\tassertTrue(headers.getFirstZonedDateTime(HttpHeaders.DATE).isEqual(date));\n+\t\tassertEquals(Arrays.asList(\"Fri, 02 Jun 2017 02:22:00 GMT\",\n+\t\t\t\t\"Sat, 18 Dec 2010 10:20:00 GMT\"), headers.get(HttpHeaders.DATE));\n \n \t\t// obsolete RFC 850 format\n \t\theaders.clear();",
    "output": "Remove dead code in HttpHeadersTests"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBodyReturnValueHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -108,6 +108,7 @@ public StreamingResponseBodyTask(OutputStream outputStream, StreamingResponseBod\n \t\t@Override\n \t\tpublic Void call() throws Exception {\n \t\t\tthis.streamingBody.writeTo(this.outputStream);\n+\t\t\tthis.outputStream.flush();\n \t\t\treturn null;\n \t\t}\n \t}",
    "output": "Ensure flush after StreamingResponseBody"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -122,7 +122,9 @@ public Mono<Void> writeWith(Path file, long position, long count) {\n \t}\n \n \tprivate Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {\n-\t\treturn Flux.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf);\n+\t\treturn dataBuffers instanceof Mono ?\n+\t\t\t\tMono.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf) :\n+\t\t\t\tFlux.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf);\n \t}\n \n }",
    "output": "Follow-up fix for b711a Not only do we need to preserve Mono in writeWith in the base class but also in ReactorServerHttpResponse where buffers are mapped"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassWriter.java b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassWriter.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java\n@@ -298,7 +298,7 @@ public final ModuleVisitor visitModule(\n   }\n \n   @Override\n-  public void visitNestHost(final String nestHost) {\n+  public final void visitNestHost(final String nestHost) {\n     nestHostClassIndex = symbolTable.addConstantClass(nestHost).index;\n   }\n \n@@ -344,7 +344,7 @@ public final void visitAttribute(final Attribute attribute) {\n   }\n \n   @Override\n-  public void visitNestMember(final String nestMember) {\n+  public final void visitNestMember(final String nestMember) {\n     if (nestMemberClasses == null) {\n       nestMemberClasses = new ByteVector();\n     }",
    "output": "Recent fine-tuning from ASM master"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java b/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java\n--- a/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/mock/jndi/package-info.java\n@@ -10,7 +10,6 @@\n  * same JNDI names as within a Java EE container, both application code and\n  * configuration can be reused without changes.\n  */\n-@Deprecated\n @NonNullApi\n @NonNullFields\n package org.springframework.mock.jndi;",
    "output": "Remove @Deprecated from org.springframework.mock.jndi package This commit removes the @Deprecated declaration on the org.springframework.mock.jndi package, since such usage results in a compiler warning on JDK 9+ which breaks Spring's JDK 9 and JDK 11 CI builds. https://bugs.openjdk.java.net/browse/"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -524,13 +524,9 @@ public void completed(Integer read, DataBuffer dataBuffer) {\n \t\t\t\tlong pos = this.position.addAndGet(read);\n \t\t\t\tdataBuffer.writePosition(read);\n \t\t\t\tthis.sink.next(dataBuffer);\n-\t\t\t\t// It's possible for cancellation to happen right before the push into the sink\n+\t\t\t\t// onNext may have led to onCancel (e.g. downstream takeUntil)\n \t\t\t\tif (this.disposed.get()) {\n-\t\t\t\t\t// TODO:\n-\t\t\t\t\t// This is not ideal since we already passed the buffer into the sink and\n-\t\t\t\t\t// releasing may cause something reading to fail. Maybe we won't have to\n-\t\t\t\t\t// do this after https://github.com/reactor/reactor-core/issues/1634\n-\t\t\t\t\tcomplete(dataBuffer);\n+\t\t\t\t\tcomplete();\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tDataBuffer newDataBuffer = this.dataBufferFactory.allocateBuffer(this.bufferSize);\n@@ -539,12 +535,12 @@ public void completed(Integer read, DataBuffer dataBuffer) {\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tcomplete(dataBuffer);\n+\t\t\t\trelease(dataBuffer);\n+\t\t\t\tcomplete();\n \t\t\t}\n \t\t}\n \n-\t\tprivate void complete(DataBuffer dataBuffer) {\n-\t\t\trelease(dataBuffer);\n+\t\tprivate void complete() {\n \t\t\tthis.sink.complete();\n \t\t\tcloseChannel(this.channel);\n \t\t}",
    "output": "Remove buffer release used as workaround The extra buffer release was used as a workaround for a reactor core issue and should have already been removed as part of b3bc2d9253efc4cfb5d81b487ecaa620e4b88879"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java\n@@ -131,8 +131,13 @@ public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType eleme\n \t\t\t\t\t});\n \t\t}\n \n-\t\treturn (isStreamingMediaType(contentType) ?\n-\t\t\t\tmessage.writeAndFlushWith(body.map(Flux::just)) : message.writeWith(body));\n+\t\tif (isStreamingMediaType(contentType)) {\n+\t\t\treturn message.writeAndFlushWith(body.map(buffer ->\n+\t\t\t\t\tMono.fromCallable(() -> buffer)\n+\t\t\t\t\t\t\t.doOnDiscard(PooledDataBuffer.class, PooledDataBuffer::release)));\n+\t\t}\n+\n+\t\treturn message.writeWith(body);\n \t}\n \n \t@Nullable",
    "output": "Apply doOnDiscard for streaming mode Use of Flux.just is problematic in that if the Flux is cancelled before demand, the item may never be read, nor freed. Flux#just does not even delegate cancellation signals"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpRange.java b/spring-web/src/main/java/org/springframework/http/HttpRange.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpRange.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java\n@@ -170,8 +170,7 @@ else if (dashIdx == 0) {\n \t * @param ranges the list of ranges\n \t * @param resource the resource to select the regions from\n \t * @return the list of regions for the given resource\n-\t * @throws IllegalArgumentException if the sum of all ranges exceeds the\n-\t * resource length.\n+\t * @throws IllegalArgumentException if the sum of all ranges exceeds the resource length\n \t * @since 4.3\n \t */\n \tpublic static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Resource resource) {\n@@ -184,7 +183,10 @@ public static List<ResourceRegion> toResourceRegions(List<HttpRange> ranges, Res\n \t\t}\n \t\tif (ranges.size() > 1) {\n \t\t\tlong length = getLengthFor(resource);\n-\t\t\tlong total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);\n+\t\t\tlong total = 0;\n+\t\t\tfor (ResourceRegion region : regions) {\n+\t\t\t\ttotal += region.getCount();\n+\t\t\t}\n \t\t\tif (total >= length) {\n \t\t\t\tthrow new IllegalArgumentException(\"The sum of all ranges (\" + total +\n \t\t\t\t\t\t\") should be less than the resource length (\" + length + \")\");",
    "output": "Avoid expensive Stream API usage in HttpRange"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java\n@@ -23,7 +23,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n \n import org.springframework.context.EmbeddedValueResolverAware;\n import org.springframework.core.annotation.AnnotatedElementUtils;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java\n--- a/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java\n+++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,7 +52,8 @@ public Flux<DataBuffer> encode(Publisher<? extends byte[]> inputStream,\n \t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,\n \t\t\t@Nullable Map<String, Object> hints) {\n \n-\t\treturn Flux.from(inputStream).map(bytes -> {\n+\t\t// The following (byte[] bytes) lambda signature declaration is necessary for Eclipse.\n+\t\treturn Flux.from(inputStream).map((byte[] bytes) -> {\n \t\t\tDataBuffer dataBuffer = bufferFactory.wrap(bytes);\n \t\t\tif (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\n \t\t\t\tString logPrefix = Hints.getLogPrefix(hints);",
    "output": "Modify ByteArrayEncoder so that it works in Eclipse IDE"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.web.servlet.mvc.method.annotation;\n \n+import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n import java.util.function.BiFunction;\n \n@@ -93,6 +94,9 @@ private DeferredResult<Object> adaptCompletionStage(CompletionStage<?> future) {\n \t\tDeferredResult<Object> result = new DeferredResult<>();\n \t\tfuture.handle((BiFunction<Object, Throwable, Object>) (value, ex) -> {\n \t\t\tif (ex != null) {\n+\t\t\t\tif (ex instanceof CompletionException && ex.getCause() != null) {\n+\t\t\t\t\tex = ex.getCause();\n+\t\t\t\t}\n \t\t\t\tresult.setErrorResult(ex);\n \t\t\t}\n \t\t\telse {",
    "output": "Unwrap CompletionException in return value handler"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -558,16 +558,8 @@ public static boolean isToStringMethod(@Nullable Method method) {\n \t * Determine whether the given method is originally declared by {@link java.lang.Object}.\n \t */\n \tpublic static boolean isObjectMethod(@Nullable Method method) {\n-\t\tif (method == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\ttry {\n-\t\t\tObject.class.getDeclaredMethod(method.getName(), method.getParameterTypes());\n-\t\t\treturn true;\n-\t\t}\n-\t\tcatch (Exception ex) {\n-\t\t\treturn false;\n-\t\t}\n+\t\treturn (method != null && (method.getDeclaringClass() == Object.class ||\n+\t\t\t\tisEqualsMethod(method) || isHashCodeMethod(method) || isToStringMethod(method)));\n \t}\n \n \t/**",
    "output": "Avoid getDeclaredMethod check in ReflectionUtils.isObjectMethod"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/ChannelSendOperator.java\n@@ -402,7 +402,12 @@ public void onNext(Void aVoid) {\n \n \t\t@Override\n \t\tpublic void onError(Throwable ex) {\n-\t\t\tthis.completionSubscriber.onError(ex);\n+\t\t\ttry {\n+\t\t\t\tthis.completionSubscriber.onError(ex);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tthis.writeBarrier.releaseCachedItem();\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
    "output": "Sync ChannelSendOperator copy in spring-messaging"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -394,7 +394,12 @@ public void onNext(Void aVoid) {\n \n \t\t@Override\n \t\tpublic void onError(Throwable ex) {\n-\t\t\tthis.completionSubscriber.onError(ex);\n+\t\t\ttry {\n+\t\t\t\tthis.completionSubscriber.onError(ex);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tthis.writeBarrier.releaseCachedItem();\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
    "output": "Release cached item in ChannelSendOperator when server error Related to"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java\n@@ -230,22 +230,6 @@ public void setCorsConfigurationSource(CorsConfigurationSource corsConfiguration\n \t\tthis.corsConfigurationSource = corsConfigurationSource;\n \t}\n \n-\t/**\n-\t * Get the \"global\" CORS configurations.\n-\t * @deprecated as of 5.1 since it is now possible to set a {@link CorsConfigurationSource} which is not a\n-\t * {@link UrlBasedCorsConfigurationSource}. Expected to be removed in 5.2.\n-\t */\n-\t@Deprecated\n-\tpublic Map<String, CorsConfiguration> getCorsConfigurations() {\n-\t\tif (this.corsConfigurationSource instanceof UrlBasedCorsConfigurationSource) {\n-\t\t\treturn ((UrlBasedCorsConfigurationSource)this.corsConfigurationSource).getCorsConfigurations();\n-\t\t}\n-\t\telse {\n-\t\t\tthrow new IllegalStateException(\"No CORS configurations available when the source \" +\n-\t\t\t\t\t\"is not an UrlBasedCorsConfigurationSource\");\n-\t\t}\n-\t}\n-\n \t/**\n \t * Configure a custom {@link CorsProcessor} to use to apply the matched\n \t * {@link CorsConfiguration} for a request.",
    "output": "Remove deprecated AbstractHandlerMapping#getCorsConfigurations"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java b/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java\n@@ -531,7 +531,7 @@ public void convertStringToCollection() {\n \n \t@Test\n \tpublic void convertStringToCollectionWithElementConversion() throws Exception {\n-\t\tList<?> result = (List) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class),\n+\t\tList<?> result = (List<?>) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class),\n \t\t\t\tnew TypeDescriptor(getClass().getField(\"genericList\")));\n \t\tassertEquals(3, result.size());\n \t\tassertEquals(1, result.get(0));\n\ndiff --git a/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java\n@@ -35,7 +35,6 @@\n \n import io.netty.buffer.ByteBuf;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.stubbing.Answer;\n import org.reactivestreams.Subscription;",
    "output": "Clean up warnings"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -144,10 +144,10 @@ public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<Asynchronous\n \t\t\t\tchannel -> Flux.create(sink -> {\n \t\t\t\t\tReadCompletionHandler handler =\n \t\t\t\t\t\t\tnew ReadCompletionHandler(channel, sink, position, bufferFactoryToUse, bufferSize);\n+\t\t\t\t\tsink.onDispose(handler::dispose);\n \t\t\t\t\tDataBuffer dataBuffer = bufferFactoryToUse.allocateBuffer(bufferSize);\n \t\t\t\t\tByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize);\n \t\t\t\t\tchannel.read(byteBuffer, position, dataBuffer, handler);\n-\t\t\t\t\tsink.onDispose(handler::dispose);\n \t\t\t\t}),\n \t\t\t\tchannel -> {\n \t\t\t\t\t// Do not close channel from here, rather wait for the current read callback",
    "output": "Call onDispose before first read The cancellation callback in asynchronousReadFileChannel must be called before the first read I/O or otherwise if cancellation signals happens immediately the onDispose callback may be missed. The DefaultBufferFactory workaround however remains in place until an expected additional fix arrives with Reactor Core 3.2.9"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java\n@@ -90,6 +90,7 @@ public DataBuffer wrap(byte[] bytes) {\n \t * @return the wrapped buffer\n \t */\n \tpublic NettyDataBuffer wrap(ByteBuf byteBuf) {\n+\t\tbyteBuf.touch();\n \t\treturn new NettyDataBuffer(byteBuf, this);\n \t}\n ",
    "output": "NettyDataBufferFactory.wrap(ByteBuf) calls touch"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java\n@@ -27,7 +27,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n-import java.util.Enumeration;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -372,11 +371,8 @@ public boolean containsKey(Object key) {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tEnumeration<String> attributeNames = this.servletRequest.getAttributeNames();\n-\t\t\twhile (attributeNames.hasMoreElements()) {\n-\t\t\t\tString name = attributeNames.nextElement();\n-\t\t\t\tthis.servletRequest.removeAttribute(name);\n-\t\t\t}\n+\t\t\tList<String> attributeNames = Collections.list(this.servletRequest.getAttributeNames());\n+\t\t\tattributeNames.forEach(this.servletRequest::removeAttribute);\n \t\t}\n \n \t\t@NotNull",
    "output": "Fix ConcurrentModificationException on Undertow This commit fixes a ConcurrentModificationException that occurs when requesting a nonexistant route"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -1406,7 +1406,7 @@ public BeanDefinitionHolder decorateIfRequired(\n \t\t\t\t\treturn decorated;\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse if (namespaceUri.startsWith(\"https://www.springframework.org/\")) {\n+\t\t\telse if (namespaceUri.startsWith(\"http://www.springframework.org/\")) {\n \t\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", node);\n \t\t\t}\n \t\t\telse {",
    "output": "URL Cleanup - fix undesirable code change Namespace handlers are mapped based on the canonical names for XML namespaces which in Spring do not use \"https\" as the scheme"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -598,10 +598,7 @@ private void initControllerAdviceCache() {\n \t\t\tif (!binderMethods.isEmpty()) {\n \t\t\t\tthis.initBinderAdviceCache.put(adviceBean, binderMethods);\n \t\t\t}\n-\t\t\tif (RequestBodyAdvice.class.isAssignableFrom(beanType)) {\n-\t\t\t\trequestResponseBodyAdviceBeans.add(adviceBean);\n-\t\t\t}\n-\t\t\tif (ResponseBodyAdvice.class.isAssignableFrom(beanType)) {\n+\t\t\tif (RequestBodyAdvice.class.isAssignableFrom(beanType) || ResponseBodyAdvice.class.isAssignableFrom(beanType)) {\n \t\t\t\trequestResponseBodyAdviceBeans.add(adviceBean);\n \t\t\t}\n \t\t}",
    "output": "Avoid duplicate registration of [RequestBody|ResponseBody]Advice @ControllerAdvice Prior to this commit, if a @ControllerAdvice implemented both RequestBodyAdvice and ResponseBodyAdvice, it was registered twice in RequestMappingHandlerAdapter. This commit ensures that such instances are only registered once"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -95,7 +95,7 @@ private void copyCharactersTillPotentialReference() {\n \t\t\tint skipUntilIndex = (this.nextPotentialReferencePosition != -1 ?\n \t\t\t\t\tthis.nextPotentialReferencePosition : this.originalMessage.length());\n \t\t\tif (skipUntilIndex - this.currentPosition > 3) {\n-\t\t\t\tthis.decodedMessage.append(this.originalMessage.substring(this.currentPosition, skipUntilIndex));\n+\t\t\t\tthis.decodedMessage.append(this.originalMessage, this.currentPosition, skipUntilIndex);\n \t\t\t\tthis.currentPosition = skipUntilIndex;\n \t\t\t}\n \t\t\telse {",
    "output": "Remove redundant 'String.substring' call"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java b/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -38,14 +38,18 @@\n  * @author Juergen Hoeller\n  * @since 4.3\n  */\n-public abstract class MultipartResolutionDelegate {\n+public final class MultipartResolutionDelegate {\n \n \t/**\n \t * Indicates an unresolvable value.\n \t */\n \tpublic static final Object UNRESOLVABLE = new Object();\n \n \n+\tprivate MultipartResolutionDelegate() {\n+\t}\n+\n+\n \t@Nullable\n \tpublic static MultipartRequest resolveMultipartRequest(NativeWebRequest webRequest) {\n \t\tMultipartRequest multipartRequest = webRequest.getNativeRequest(MultipartRequest.class);",
    "output": "Make MultipartResolutionDelegate final (aligned with other delegates)"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -1406,7 +1406,7 @@ public BeanDefinitionHolder decorateIfRequired(\n \t\t\t\t\treturn decorated;\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse if (namespaceUri.startsWith(\"https://www.springframework.org/\")) {\n+\t\t\telse if (namespaceUri.startsWith(\"http://www.springframework.org/\")) {\n \t\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", node);\n \t\t\t}\n \t\t\telse {",
    "output": "URL Cleanup - fix undesirable code change Namespace handlers are mapped based on the canonical names for XML namespaces which in Spring do not use \"https\" as the scheme"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java\n@@ -145,8 +145,8 @@ private static <C, R> R processClassInheritedAnnotations(C context, Class<?> sou\n \t\tint remaining = Integer.MAX_VALUE;\n \t\tint aggregateIndex = 0;\n \t\tClass<?> root = source;\n-\t\twhile (source != null && source != Object.class\n-\t\t\t\t&& !hasPlainJavaAnnotationsOnly(source) && remaining > 0) {\n+\t\twhile (source != null && source != Object.class && remaining > 0\n+\t\t\t\t&& !hasPlainJavaAnnotationsOnly(source)) {\n \t\t\tR result = processor.doWithAggregate(context, aggregateIndex);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n@@ -524,7 +524,9 @@ else if (annotatedElement instanceof Member) {\n \t\tString name = type.getName();\n \t\treturn type.equals(Ordered.class) ||\n \t\t\t\tname.startsWith(\"java\") ||\n-\t\t\t\tname.startsWith(\"org.springframework.lang.\");\n+\t\t\t\tname.startsWith(\"org.springframework.lang.\") ||\n+\t\t\t\tname.startsWith(\"org.springframework.util.\") ||\n+\t\t\t\t(name.startsWith(\"com.sun\") && !name.contains(\"Proxy\"));\n \t}\n \n \tprivate static boolean isWithoutHierarchy(AnnotatedElement source) {",
    "output": "Add more aggressive annotation element filtering Refine the element filtering performed by `AnnotationsScanner` to also cover `org.springframework.util` and most `com.sun` classes which turn out to be referenced quite frequently and which we know contain no useful annotations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -639,6 +639,11 @@ public static String cleanPath(String path) {\n \t\t}\n \t\tString pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\n \n+\t\t// Shortcut if there is no work to do\n+\t\tif (pathToUse.indexOf('.') == -1) {\n+\t\t\treturn pathToUse;\n+\t\t}\n+\n \t\t// Strip prefix from path to analyze, to not treat it as part of the\n \t\t// first path element. This is necessary to correctly parse paths like\n \t\t// \"file:core/../core/io/Resource.class\", where the \"..\" should just",
    "output": "Optimize StringUtils.cleanPath Add an early exit to `StringUtils.cleanPath` to save array creating and string concatenation. With a typical Spring application, the `cleanPath` method can be called over 600 times, often with a path constructed by a `ClassPathResource` that is likely to already be clean"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -66,10 +66,14 @@ public abstract class ReflectionUtils {\n \t */\n \tprivate static final String CGLIB_RENAMED_METHOD_PREFIX = \"CGLIB$\";\n \n+\tprivate static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];\n+\n \tprivate static final Method[] EMPTY_METHOD_ARRAY = new Method[0];\n \n \tprivate static final Field[] EMPTY_FIELD_ARRAY = new Field[0];\n \n+\tprivate static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n+\n \n \t/**\n \t * Cache for {@link Class#getDeclaredMethods()} plus equivalent default methods\n@@ -211,7 +215,7 @@ public static void makeAccessible(Constructor<?> ctor) {\n \t */\n \t@Nullable\n \tpublic static Method findMethod(Class<?> clazz, String name) {\n-\t\treturn findMethod(clazz, name, new Class<?>[0]);\n+\t\treturn findMethod(clazz, name, EMPTY_CLASS_ARRAY);\n \t}\n \n \t/**\n@@ -255,7 +259,7 @@ public static Method findMethod(Class<?> clazz, String name, @Nullable Class<?>.\n \t */\n \t@Nullable\n \tpublic static Object invokeMethod(Method method, @Nullable Object target) {\n-\t\treturn invokeMethod(method, target, new Object[0]);\n+\t\treturn invokeMethod(method, target, EMPTY_OBJECT_ARRAY);\n \t}\n \n \t/**",
    "output": "Add more empty array constants in ReflectionUtils Add some additional empty array constants to `ReflectionUtils` to save us creating new arrays for zero length results"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -140,6 +140,8 @@ class ConfigurationClassParser {\n \n \tprivate final DeferredImportSelectorHandler deferredImportSelectorHandler = new DeferredImportSelectorHandler();\n \n+\tprivate final SourceClass objectSourceClass = new SourceClass(Object.class);\n+\n \n \t/**\n \t * Create a new {@link ConfigurationClassParser} instance that will be used\n@@ -639,8 +641,8 @@ private SourceClass asSourceClass(ConfigurationClass configurationClass) throws\n \t * Factory method to obtain a {@link SourceClass} from a {@link Class}.\n \t */\n \tSourceClass asSourceClass(@Nullable Class<?> classType) throws IOException {\n-\t\tif (classType == null) {\n-\t\t\treturn new SourceClass(Object.class);\n+\t\tif (classType == null || classType.getName().startsWith(\"java.lang.annotation\")) {\n+\t\t\treturn this.objectSourceClass;\n \t\t}\n \t\ttry {\n \t\t\t// Sanity test that we can reflectively read annotations,\n@@ -671,8 +673,8 @@ private Collection<SourceClass> asSourceClasses(String... classNames) throws IOE\n \t * Factory method to obtain a {@link SourceClass} from a class name.\n \t */\n \tSourceClass asSourceClass(@Nullable String className) throws IOException {\n-\t\tif (className == null) {\n-\t\t\treturn new SourceClass(Object.class);\n+\t\tif (className == null || className.startsWith(\"java.lang.annotation\")) {\n+\t\t\treturn this.objectSourceClass;\n \t\t}\n \t\tif (className.startsWith(\"java\")) {\n \t\t\t// Never use ASM for core java types",
    "output": "Optimize @Configuration class parsing a little Update `ConfigurationClassParser` to skip `java.lang.annotation` types which were often processed but would never provide useful results. Also use a single shared immutable `SourceClass` instance to represent `Object.class`"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -153,6 +153,11 @@ protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParam\n \t\tMediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM);\n \t\tObject[] hints = extractValidationHints(bodyParam);\n \n+\t\tif (mediaType.isCompatibleWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n+\t\t\treturn Mono.error(new IllegalStateException(\n+\t\t\t\t\t\"In a WebFlux application, form data is accessed via ServerWebExchange.getFormData().\"));\n+\t\t}\n+\n \t\tif (logger.isDebugEnabled()) {\n \t\t\tlogger.debug(exchange.getLogPrefix() + (contentType != null ?\n \t\t\t\t\t\"Content-Type:\" + contentType :",
    "output": "Raise ISE if @RequestBody is used for form data"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -127,8 +127,7 @@ public Mono<Void> write(Publisher<? extends MultiValueMap<String, String>> input\n \t\tmediaType = getMediaType(mediaType);\n \t\tmessage.getHeaders().setContentType(mediaType);\n \n-\t\tCharset charset = mediaType.getCharset();\n-\t\tAssert.notNull(charset, \"No charset\"); // should never occur\n+\t\tCharset charset = mediaType.getCharset() != null ? mediaType.getCharset() : getDefaultCharset();\n \n \t\treturn Mono.from(inputStream).flatMap(form -> {\n \t\t\tlogFormData(form, hints);\n@@ -140,7 +139,7 @@ public Mono<Void> write(Publisher<? extends MultiValueMap<String, String>> input\n \t\t});\n \t}\n \n-\tprivate MediaType getMediaType(@Nullable MediaType mediaType) {\n+\tprotected MediaType getMediaType(@Nullable MediaType mediaType) {\n \t\tif (mediaType == null) {\n \t\t\treturn DEFAULT_FORM_DATA_MEDIA_TYPE;\n \t\t}",
    "output": "Allow overriding of FormHttpMessageWriter#getMediaType"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n@@ -113,7 +113,8 @@ public Mono<Void> execute(URI url, HttpHeaders requestHeaders, WebSocketHandler\n \t\t\t\t\tString protocol = responseHeaders.getFirst(\"Sec-WebSocket-Protocol\");\n \t\t\t\t\tHandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol);\n \t\t\t\t\tNettyDataBufferFactory factory = new NettyDataBufferFactory(outbound.alloc());\n-\t\t\t\t\tWebSocketSession session = new ReactorNettyWebSocketSession(inbound, outbound, info, factory);\n+\t\t\t\t\tWebSocketSession session = new ReactorNettyWebSocketSession(\n+\t\t\t\t\t\t\tinbound, outbound, info, factory, getMaxFramePayloadLength());\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\tlogger.debug(\"Started session '\" + session.getId() + \"' for \" + url);\n \t\t\t\t\t}",
    "output": "ReactorNettyWebSocketSession uses correct frame size"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -42,8 +42,6 @@\n import org.springframework.web.reactive.HandlerResult;\n import org.springframework.web.server.ServerWebExchange;\n \n-import static org.springframework.web.reactive.result.method.InvocableHandlerMethodKt.invokeHandlerMethod;\n-\n /**\n  * Extension of {@link HandlerMethod} that invokes the underlying method with\n  * argument values resolved from the current HTTP request through a list of\n@@ -142,7 +140,7 @@ public Mono<HandlerResult> invoke(\n \t\t\t\tReflectionUtils.makeAccessible(getBridgedMethod());\n \t\t\t\tMethod method = getBridgedMethod();\n \t\t\t\tif (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(method.getDeclaringClass())) {\n-\t\t\t\t\tvalue = invokeHandlerMethod(method, getBean(), args);\n+\t\t\t\t\tvalue = InvocableHandlerMethodKt.invokeHandlerMethod(method, getBean(), args);\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tvalue = method.invoke(getBean(), args);",
    "output": "Remove static import from InvocableHandlerMethod"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.web.reactive.result.method;\n \n-import static org.springframework.web.reactive.result.method.InvocableHandlerMethodKt.*;\n-\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.ParameterizedType;\n@@ -44,6 +42,8 @@\n import org.springframework.web.reactive.HandlerResult;\n import org.springframework.web.server.ServerWebExchange;\n \n+import static org.springframework.web.reactive.result.method.InvocableHandlerMethodKt.invokeHandlerMethod;\n+\n /**\n  * Extension of {@link HandlerMethod} that invokes the underlying method with\n  * argument values resolved from the current HTTP request through a list of",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -142,7 +142,10 @@ public void afterSingletonsInstantiated() {\n \t}\n \n \tprivate void processBean(final String beanName, final Class<?> targetType) {\n-\t\tif (!this.nonAnnotatedClasses.contains(targetType) && !isSpringContainerClass(targetType)) {\n+\t\tif (!this.nonAnnotatedClasses.contains(targetType) &&\n+\t\t\t\t!targetType.getName().startsWith(\"java\") &&\n+\t\t\t\t!isSpringContainerClass(targetType)) {\n+\n \t\t\tMap<Method, EventListener> annotatedMethods = null;\n \t\t\ttry {\n \t\t\t\tannotatedMethods = MethodIntrospector.selectMethods(targetType,\n@@ -155,6 +158,7 @@ private void processBean(final String beanName, final Class<?> targetType) {\n \t\t\t\t\tlogger.debug(\"Could not resolve methods for bean with name '\" + beanName + \"'\", ex);\n \t\t\t\t}\n \t\t\t}\n+\n \t\t\tif (CollectionUtils.isEmpty(annotatedMethods)) {\n \t\t\t\tthis.nonAnnotatedClasses.add(targetType);\n \t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "EventListenerMethodProcessor skips annotation search on java classes"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java\n@@ -92,7 +92,7 @@ public void setMaxFramePayloadLength(int maxFramePayloadLength) {\n \t * @since 5.2\n \t */\n \tpublic int getMaxFramePayloadLength() {\n-\t\treturn maxFramePayloadLength;\n+\t\treturn this.maxFramePayloadLength;\n \t}\n \n ",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/Frame.java b/spring-core/src/main/java/org/springframework/asm/Frame.java\n--- a/spring-core/src/main/java/org/springframework/asm/Frame.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Frame.java\n@@ -1426,7 +1426,7 @@ static void putAbstractType(\n       }\n     } else {\n       // Case of an array type, we need to build its descriptor first.\n-      StringBuilder typeDescriptor = new StringBuilder();\n+      StringBuilder typeDescriptor = new StringBuilder(32);  // SPRING PATCH: larger initial size\n       while (arrayDimensions-- > 0) {\n         typeDescriptor.append('[');\n       }",
    "output": "Larger initial size for ASM type descriptor StringBuilder"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java\n@@ -114,9 +114,18 @@ else if (systemId.endsWith(DTD_SUFFIX) || systemId.endsWith(XSD_SUFFIX)) {\n \t\t\t\tif (url.startsWith(\"http:\")) {\n \t\t\t\t\turl = \"https:\" + url.substring(5);\n \t\t\t\t}\n-\t\t\t\tsource = new InputSource(url);\n-\t\t\t\tsource.setPublicId(publicId);\n-\t\t\t\treturn source;\n+\t\t\t\ttry {\n+\t\t\t\t\tsource = new InputSource(new URL(url).openStream());\n+\t\t\t\t\tsource.setPublicId(publicId);\n+\t\t\t\t\tsource.setSystemId(systemId);\n+\t\t\t\t}\n+\t\t\t\tcatch (IOException ex) {\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Could not resolve XML entity [\" + systemId + \"] through URL [\" + url + \"]\", ex);\n+\t\t\t\t\t}\n+\t\t\t\t\t// Fall back to the parser's default behavior.\n+\t\t\t\t\tsource = null;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "Local https URL resolution attempt with fallback to parser's default"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java\n@@ -49,14 +49,10 @@ public void defaultExecutor() throws Exception {\n \tpublic static class ExecutorConfig {\n \n \t\t@Bean\n-\t\tpublic ThreadPoolExecutorFactoryBean executorFactory() {\n+\t\tpublic ThreadPoolExecutorFactoryBean executor() {\n \t\t\treturn new ThreadPoolExecutorFactoryBean();\n \t\t}\n \n-\t\t@Bean\n-\t\tpublic ExecutorService executor() {\n-\t\t\treturn executorFactory().getObject();\n-\t\t}\n \t}\n \n }",
    "output": "Fix broken test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContext.java b/spring-test/src/main/java/org/springframework/test/context/TestContext.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContext.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContext.java\n@@ -67,6 +67,7 @@ public interface TestContext extends AttributeAccessor, Serializable {\n \t * @return the current test instance (may be {@code null})\n \t * @see #updateState(Object, Method, Throwable)\n \t */\n+\t@Nullable\n \tObject getTestInstance();\n \n \t/**\n@@ -75,6 +76,7 @@ public interface TestContext extends AttributeAccessor, Serializable {\n \t * @return the current test method (may be {@code null})\n \t * @see #updateState(Object, Method, Throwable)\n \t */\n+\t@Nullable\n \tMethod getTestMethod();\n \n \t/**",
    "output": "Add missing @Nullable declarations to TestContext return values"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java b/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java\n--- a/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java\n+++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ShadowingClassLoader.java\n@@ -48,7 +48,7 @@ public class ShadowingClassLoader extends DecoratingClassLoader {\n \n \t/** Packages that are excluded by default. */\n \tpublic static final String[] DEFAULT_EXCLUDED_PACKAGES =\n-\t\t\tnew String[] {\"java.\", \"javax.\", \"sun.\", \"oracle.\", \"com.sun.\", \"com.ibm.\", \"COM.ibm.\",\n+\t\t\tnew String[] {\"java.\", \"javax.\", \"jdk.\", \"sun.\", \"oracle.\", \"com.sun.\", \"com.ibm.\", \"COM.ibm.\",\n \t\t\t\t\t\"org.w3c.\", \"org.xml.\", \"org.dom4j.\", \"org.eclipse\", \"org.aspectj.\", \"net.sf.cglib\",\n \t\t\t\t\t\"org.springframework.cglib\", \"org.apache.xerces.\", \"org.apache.commons.logging.\"};\n ",
    "output": "Exclude jdk package in ShadowingClassLoader Many Java 11 internal classes are located in the jdk package. ShadowingClassLoader should not load them, because it can cause errors, e.g. java.lang.IllegalAccessError: class jdk.internal.reflect.ConstructorAccessorImpl loaded by org.springframework.instrument.classloading.ShadowingClassLoader @2bea5ab4 cannot access jdk/internal/reflect superclass jdk.internal.reflect.MagicAccessorImpl"
  },
  {
    "input": "diff --git a/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementIntegrationTests.java b/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementIntegrationTests.java\n--- a/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementIntegrationTests.java\n+++ b/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementIntegrationTests.java\n@@ -21,7 +21,6 @@\n import java.util.List;\n import javax.sql.DataSource;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.aop.Advisor;\n@@ -51,6 +50,7 @@\n  * Integration tests for the @EnableTransactionManagement annotation.\n  *\n  * @author Chris Beams\n+ * @author Sam Brannen\n  * @since 3.1\n  */\n @SuppressWarnings(\"resource\")\n@@ -89,13 +89,9 @@ public void repositoryIsTxProxy_withCustomTxManagerName() {\n \t\tassertTxProxying(ctx);\n \t}\n \n-\t@Ignore @Test // TODO SPR-8207\n+\t@Test\n \tpublic void repositoryIsTxProxy_withNonConventionalTxManagerName_fallsBackToByTypeLookup() {\n-\t\tAnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n-\t\tctx.register(Config.class, NonConventionalTxManagerNameConfig.class);\n-\t\tctx.refresh();\n-\n-\t\tassertTxProxying(ctx);\n+\t\tassertTxProxying(new AnnotationConfigApplicationContext(Config.class, NonConventionalTxManagerNameConfig.class));\n \t}\n \n \t@Test",
    "output": "Re-enable @Ignore'd TxMgt integration test See"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java\n@@ -168,11 +168,11 @@ public void setCharacterEncoding(String characterEncoding) {\n \n \tprivate void updateContentTypeHeader() {\n \t\tif (this.contentType != null) {\n-\t\t\tStringBuilder sb = new StringBuilder(this.contentType);\n-\t\t\tif (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) && this.charset) {\n-\t\t\t\tsb.append(\";\").append(CHARSET_PREFIX).append(this.characterEncoding);\n+\t\t\tString value = this.contentType;\n+\t\t\tif (this.charset && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {\n+\t\t\t\tvalue = value + ';' + CHARSET_PREFIX + this.characterEncoding;\n \t\t\t}\n-\t\t\tdoAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);\n+\t\t\tdoAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true);\n \t\t}\n \t}\n ",
    "output": "Simplify String concatenation"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java\n@@ -124,6 +124,7 @@ public void setLogExceptionStackTrace(boolean logExceptionStackTrace) {\n \t * @see #invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log)\n \t */\n \t@Override\n+\t@Nullable\n \tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n \t\tLog logger = getLoggerForInvocation(invocation);\n \t\tif (isInterceptorEnabled(invocation, logger)) {\n@@ -242,6 +243,7 @@ protected void writeToLog(Log logger, String message, @Nullable Throwable ex) {\n \t * @see #writeToLog(Log, String)\n \t * @see #writeToLog(Log, String, Throwable)\n \t */\n+\t@Nullable\n \tprotected abstract Object invokeUnderTrace(MethodInvocation invocation, Log logger) throws Throwable;\n \n }",
    "output": "Fix AbstractTraceInterceptor null-safety annotations"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java b/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java\n--- a/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java\n@@ -81,7 +81,7 @@ public LinkedMultiValueMap(Map<K, List<V>> otherMap) {\n \t@Nullable\n \tpublic V getFirst(K key) {\n \t\tList<V> values = this.targetMap.get(key);\n-\t\treturn (values != null ? values.get(0) : null);\n+\t\treturn (values != null && !values.isEmpty() ? values.get(0) : null);\n \t}\n \n \t@Override",
    "output": "getFirst - check that values is not empty"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.expression.spel.ast;\n \n+import java.util.StringJoiner;\n+\n import org.springframework.asm.MethodVisitor;\n import org.springframework.expression.EvaluationException;\n import org.springframework.expression.TypedValue;\n@@ -24,8 +26,6 @@\n import org.springframework.expression.spel.SpelEvaluationException;\n import org.springframework.lang.Nullable;\n \n-import java.util.StringJoiner;\n-\n /**\n  * Represents a DOT separated expression sequence, such as\n  * {@code 'property1.property2.methodOne()'}.",
    "output": "Correct import order"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/xml/SqlXmlObjectMappingHandler.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/xml/SqlXmlObjectMappingHandler.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/xml/SqlXmlObjectMappingHandler.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/xml/SqlXmlObjectMappingHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -32,7 +32,10 @@\n  * @since 2.5.5\n  * @see java.sql.ResultSet#getSQLXML\n  * @see java.sql.SQLXML\n+ * @deprecated as of Spring Framework 5.1.5 since this class is only known to be used in spring-data-jdbc-ext project\n+ * which was never upgraded to Spring Framework 5.x and is no longer actively developed\n  */\n+@Deprecated\n public interface SqlXmlObjectMappingHandler extends SqlXmlHandler {\n \n \t/**",
    "output": "Deprecate SqlXmlObjectMappingHandler This class is only known to be used in spring-data-jdbc-ext project which was never upgraded to Spring Framework 5.x and is no longer actively developed"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n@@ -354,7 +354,7 @@ else if (this.hasSendFailed) {\n \n \t\t\tif (errorDescription != null) {\n \t\t\t\tif (logger.isWarnEnabled()) {\n-\t\t\t\t\tlogger.warn(errorDescription + \":\" + message);\n+\t\t\t\t\tlogger.warn(errorDescription + \": \" + message);\n \t\t\t\t}\n \t\t\t\tif (this.throwExceptionOnLateReply) {\n \t\t\t\t\tthrow new MessageDeliveryException(message, errorDescription);",
    "output": "Polish warning message"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/log/CompositeLog.java b/spring-core/src/main/java/org/springframework/core/log/CompositeLog.java\n--- a/spring-core/src/main/java/org/springframework/core/log/CompositeLog.java\n+++ b/spring-core/src/main/java/org/springframework/core/log/CompositeLog.java\n@@ -114,7 +114,7 @@ public void error(Object message) {\n \n \t@Override\n \tpublic void error(Object message, Throwable ex) {\n-\t\tthis.errorLogger.error(message);\n+\t\tthis.errorLogger.error(message, ex);\n \t}\n \n \t@Override",
    "output": "Log exception at ERROR level in CompositeLog"
  },
  {
    "input": "diff --git a/src/test/java/org/springframework/core/env/PropertyPlaceholderConfigurerEnvironmentIntegrationTests.java b/src/test/java/org/springframework/core/env/PropertyPlaceholderConfigurerEnvironmentIntegrationTests.java\n--- a/src/test/java/org/springframework/core/env/PropertyPlaceholderConfigurerEnvironmentIntegrationTests.java\n+++ b/src/test/java/org/springframework/core/env/PropertyPlaceholderConfigurerEnvironmentIntegrationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,19 +19,21 @@\n import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;\n \n import org.junit.Test;\n-import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;\n import org.springframework.context.support.GenericApplicationContext;\n \n-@SuppressWarnings(\"resource\")\n public class PropertyPlaceholderConfigurerEnvironmentIntegrationTests {\n+\n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void test() {\n \t\tGenericApplicationContext ctx = new GenericApplicationContext();\n \t\tctx.registerBeanDefinition(\"ppc\",\n-\t\t\t\trootBeanDefinition(PropertyPlaceholderConfigurer.class)\n+\t\t\t\trootBeanDefinition(org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.class)\n \t\t\t\t.addPropertyValue(\"searchSystemEnvironment\", false)\n \t\t\t\t.getBeanDefinition());\n \t\tctx.refresh();\n \t\tctx.getBean(\"ppc\");\n+\t\tctx.close();\n \t}\n+\n }",
    "output": "Suppress deprecation warning in Gradle build"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -372,8 +372,9 @@ protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<\n \t\t\ttry {\n \t\t\t\tfor (URL url : ((URLClassLoader) classLoader).getURLs()) {\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tUrlResource jarResource = new UrlResource(\n-\t\t\t\t\t\t\t\tResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR);\n+\t\t\t\t\t\tUrlResource jarResource = (ResourceUtils.URL_PROTOCOL_JAR.equals(url.getProtocol()) ?\n+\t\t\t\t\t\t\t\tnew UrlResource(url) :\n+\t\t\t\t\t\t\t\tnew UrlResource(ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR));\n \t\t\t\t\t\tif (jarResource.exists()) {\n \t\t\t\t\t\t\tresult.add(jarResource);\n \t\t\t\t\t\t}",
    "output": "Detect existing jar URLs from URLClassLoader.getURLs"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -418,6 +418,9 @@ public static String commonDatabaseName(@Nullable String source) {\n \t\tif (source != null && source.startsWith(\"DB2\")) {\n \t\t\tname = \"DB2\";\n \t\t}\n+\t\telse if (\"MariaDB\".equals(source)) {\n+\t\t\tname = \"MySQL\";\n+\t\t}\n \t\telse if (\"Sybase SQL Server\".equals(source) ||\n \t\t\t\t\"Adaptive Server Enterprise\".equals(source) ||\n \t\t\t\t\"ASE\".equals(source) ||",
    "output": "Detect MariaDB as MySQL (for mariadb-java-client 2.4+ compatibility)"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -395,7 +395,7 @@ public TypedValue getValue() {\n \n \t\t@Override\n \t\tpublic void setValue(@Nullable Object newValue) {\n-\t\t\tthrow new IllegalAccessError();\n+\t\t\tthrow new SpelEvaluationException(0, SpelMessage.NOT_ASSIGNABLE, MethodReference.this.name);\n \t\t}\n \n \t\t@Override",
    "output": "MethodReference.MethodValueRef.setValue throws SpelEvaluationException"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -677,7 +677,10 @@ public <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> a\n \t\t\tif (bd instanceof AbstractBeanDefinition) {\n \t\t\t\tAbstractBeanDefinition abd = (AbstractBeanDefinition) bd;\n \t\t\t\tif (abd.hasBeanClass()) {\n-\t\t\t\t\tann = AnnotationUtils.findAnnotation(abd.getBeanClass(), annotationType);\n+\t\t\t\t\tClass<?> beanClass = abd.getBeanClass();\n+\t\t\t\t\tif (beanClass != beanType) {\n+\t\t\t\t\t\tann = AnnotationUtils.findAnnotation(beanClass, annotationType);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Avoid duplicate class introspection during findAnnotationOnBean"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultReturnValueHandlerTests.java\n@@ -96,8 +96,8 @@ public void listenableFuture() throws Exception {\n \n \t@Test\n \tpublic void completableFuture() throws Exception {\n-\t\tSettableListenableFuture<String> future = new SettableListenableFuture<>();\n-\t\ttestHandle(future, CompletableFuture.class, () -> future.set(\"foo\"), \"foo\");\n+\t\tCompletableFuture<String> future = new CompletableFuture<>();\n+\t\ttestHandle(future, CompletableFuture.class, () -> future.complete(\"foo\"), \"foo\");\n \t}\n \n \t@Test\n@@ -115,9 +115,9 @@ public void listenableFutureWithError() throws Exception {\n \n \t@Test\n \tpublic void completableFutureWithError() throws Exception {\n-\t\tSettableListenableFuture<String> future = new SettableListenableFuture<>();\n+\t\tCompletableFuture<String> future = new CompletableFuture<>();\n \t\tIllegalStateException ex = new IllegalStateException();\n-\t\ttestHandle(future, CompletableFuture.class, () -> future.setException(ex), ex);\n+\t\ttestHandle(future, CompletableFuture.class, () -> future.completeExceptionally(ex), ex);\n \t}\n \n ",
    "output": "Fix use CompletableFuture in DeferredResultReturnValueHandlerTest"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -852,9 +852,6 @@ public MethodArgumentBuilder(@Nullable UriComponentsBuilder baseUrl, Class<?> co\n \t\t\tthis.controllerType = controllerType;\n \t\t\tthis.method = method;\n \t\t\tthis.argumentValues = new Object[method.getParameterCount()];\n-\t\t\tfor (int i = 0; i < this.argumentValues.length; i++) {\n-\t\t\t\tthis.argumentValues[i] = null;\n-\t\t\t}\n \t\t}\n \n \t\tprivate static String getPath() {",
    "output": "Remove unnecessary array initialization"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java\n@@ -63,7 +63,7 @@ public abstract class StaxUtils {\n \t * @since 5.0\n \t */\n \tpublic static XMLInputFactory createDefensiveInputFactory() {\n-\t\treturn createDefensiveInputFactory(XMLInputFactory::newFactory);\n+\t\treturn createDefensiveInputFactory(XMLInputFactory::newInstance);\n \t}\n \n \t/**",
    "output": "Fix Java 9 Build Fix Java 9 build by replacing deprecated method"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -284,7 +284,7 @@ else if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n \t\t\t\t\tif (body != null) {\n \t\t\t\t\t\tObject theBody = body;\n \t\t\t\t\t\tLogFormatUtils.traceDebug(logger, traceOn ->\n-\t\t\t\t\t\t\t\t\"Writing [\" + LogFormatUtils.formatValue(theBody, traceOn) + \"]\");\n+\t\t\t\t\t\t\t\t\"Writing [\" + LogFormatUtils.formatValue(theBody, !traceOn) + \"]\");\n \t\t\t\t\t\taddContentDispositionHeader(inputMessage, outputMessage);\n \t\t\t\t\t\tif (genericConverter != null) {\n \t\t\t\t\t\t\tgenericConverter.write(body, targetType, selectedMediaType, outputMessage);",
    "output": "Correctly truncate logging of response body"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -458,7 +458,7 @@ public URI build(Map<String, ?> uriVariables) {\n \t */\n \tpublic String toUriString() {\n \t\treturn this.uriVariables.isEmpty() ?\n-\t\t\t\tencode().build().toUriString() :\n+\t\t\t\tbuild().encode().toUriString() :\n \t\t\t\tbuildInternal(EncodingHint.ENCODE_TEMPLATE).toUriString();\n \t}\n \n\ndiff --git a/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n--- a/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java\n@@ -934,4 +934,9 @@ public void uriComponentsWithMergedQueryParams() {\n \t\tassertEquals(\"http://localhost:8081/{path}?sort={sort}&sort=another_value\", uri);\n \t}\n \n+\t@Test // SPR-17630\n+\tpublic void toUriStringWithCurlyBraces() {\n+\t\tassertEquals(\"/path?q=%7Basa%7Dasa\",\n+\t\t\t\tUriComponentsBuilder.fromUriString(\"/path?q={asa}asa\").toUriString());\n+\t}\n }",
    "output": "Correction for commit #b219c6c Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -441,15 +441,25 @@ public URI build(Map<String, ?> uriVariables) {\n \t}\n \n \t/**\n-\t * Build a URI String. This is a shortcut for:\n+\t * Build a URI String.\n+\t * <p>Effectively, a shortcut for building, encoding, and returning the\n+\t * String representation:\n+\t * <pre class=\"code\">\n+\t * String uri = builder.build().encode().toUriString()\n+\t * </pre>\n+\t * <p>However if {@link #uriVariables(Map) URI variables} have been provided\n+\t * then the URI template is pre-encoded separately from URI variables (see\n+\t * {@link #encode()} for details), i.e. equivalent to:\n \t * <pre>\n \t * String uri = builder.encode().build().toUriString()\n \t * </pre>\n \t * @since 4.1\n \t * @see UriComponents#toUriString()\n \t */\n \tpublic String toUriString() {\n-\t\treturn buildInternal(EncodingHint.ENCODE_TEMPLATE).toUriString();\n+\t\treturn this.uriVariables.isEmpty() ?\n+\t\t\t\tencode().build().toUriString() :\n+\t\t\t\tbuildInternal(EncodingHint.ENCODE_TEMPLATE).toUriString();\n \t}\n \n ",
    "output": "Adjust UriComponentsBuilder#toUriString behavior Commit b7a4 added support for pre-configuring URI variables at the UriComponentsBuilder level, and also changed toUriString to encode template and URI variables separately. However this went a bit too far causing side effects for URLs with curly braces that don't represent URI variables. This commit restores the original toUriString behavior which is to encode template and URI variables sepraately only if URI variables have been pre-configured. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -1694,11 +1694,15 @@ public static HttpHeaders readOnlyHttpHeaders(HttpHeaders headers) {\n \t}\n \n \t/**\n-\t * Return a {@code HttpHeaders} object that can read and written to.\n+\t * Return a {@code HttpHeaders} object that can be read and written to.\n+\t * @since 5.1.1\n \t */\n \tpublic static HttpHeaders writableHttpHeaders(HttpHeaders headers) {\n \t\tAssert.notNull(headers, \"HttpHeaders must not be null\");\n-\t\tif (headers instanceof ReadOnlyHttpHeaders) {\n+\t\tif (headers == EMPTY) {\n+\t\t\treturn new HttpHeaders();\n+\t\t}\n+\t\telse if (headers instanceof ReadOnlyHttpHeaders) {\n \t\t\treturn new HttpHeaders(headers.headers);\n \t\t}\n \t\telse {",
    "output": "HttpHeaders.writableHttpHeaders properly handles HttpHeaders.EMPTY Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketMessageBrokerStats.java\n@@ -199,7 +199,7 @@ public String toString() {\n \t\t\t\t\", stompSubProtocol[\" + getStompSubProtocolStatsInfo() + \"]\" +\n \t\t\t\t\", stompBrokerRelay[\" + getStompBrokerRelayStatsInfo() + \"]\" +\n \t\t\t\t\", inboundChannel[\" + getClientInboundExecutorStatsInfo() + \"]\" +\n-\t\t\t\t\", outboundChannel\" + getClientOutboundExecutorStatsInfo() + \"]\" +\n+\t\t\t\t\", outboundChannel[\" + getClientOutboundExecutorStatsInfo() + \"]\" +\n \t\t\t\t\", sockJsScheduler[\" + getSockJsTaskSchedulerStatsInfo() + \"]\";\n \t}\n ",
    "output": "Add missing [ in toString of WebSocketMessageBrokerStats"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java\n@@ -21,6 +21,7 @@\n \n import org.hamcrest.Matcher;\n \n+import org.springframework.lang.Nullable;\n import org.springframework.test.web.servlet.ResultMatcher;\n import org.springframework.util.AntPathMatcher;\n import org.springframework.web.util.UriComponentsBuilder;\n@@ -85,7 +86,7 @@ public static FlashAttributeResultMatchers flash() {\n \t * <p>This method accepts only exact matches.\n \t * @param expectedUrl the exact URL expected\n \t */\n-\tpublic static ResultMatcher forwardedUrl(String expectedUrl) {\n+\tpublic static ResultMatcher forwardedUrl(@Nullable String expectedUrl) {\n \t\treturn result -> assertEquals(\"Forwarded URL\", expectedUrl, result.getResponse().getForwardedUrl());\n \t}\n ",
    "output": "MockMvcResultMatchers.forwardedUrl argument declared as nullable Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java\n@@ -51,7 +51,7 @@\n  */\n abstract class AutowireUtils {\n \n-\tprivate static final Comparator<Executable> COMPARATOR = (e1, e2) -> {\n+\tprivate static final Comparator<Executable> EXECUTABLE_COMPARATOR = (e1, e2) -> {\n \t\tboolean p1 = Modifier.isPublic(e1.getModifiers());\n \t\tboolean p2 = Modifier.isPublic(e2.getModifiers());\n \t\tif (p1 != p2) {\n@@ -70,7 +70,7 @@ abstract class AutowireUtils {\n \t * @param constructors the constructor array to sort\n \t */\n \tpublic static void sortConstructors(Constructor<?>[] constructors) {\n-\t\tArrays.sort(constructors, COMPARATOR);\n+\t\tArrays.sort(constructors, EXECUTABLE_COMPARATOR);\n \t}\n \n \t/**\n@@ -81,7 +81,7 @@ public static void sortConstructors(Constructor<?>[] constructors) {\n \t * @param factoryMethods the factory method array to sort\n \t */\n \tpublic static void sortFactoryMethods(Method[] factoryMethods) {\n-\t\tArrays.sort(factoryMethods, COMPARATOR);\n+\t\tArrays.sort(factoryMethods, EXECUTABLE_COMPARATOR);\n \t}\n \n \t/**",
    "output": "Refactor duplicate code"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -338,6 +338,9 @@ private class WriteCompletionBarrier implements CoreSubscriber<Void>, Subscripti\n \n \t\tprivate final WriteBarrier writeBarrier;\n \n+\t\t@Nullable\n+\t\tprivate Subscription subscription;\n+\n \n \t\tpublic WriteCompletionBarrier(CoreSubscriber<? super Void> subscriber, WriteBarrier writeBarrier) {\n \t\t\tthis.completionSubscriber = subscriber;\n@@ -357,6 +360,7 @@ public void connect() {\n \n \t\t@Override\n \t\tpublic void onSubscribe(Subscription subscription) {\n+\t\t\tthis.subscription = subscription;\n \t\t\tsubscription.request(Long.MAX_VALUE);\n \t\t}\n \n@@ -388,6 +392,10 @@ public void request(long n) {\n \t\t@Override\n \t\tpublic void cancel() {\n \t\t\tthis.writeBarrier.cancel();\n+\t\t\tSubscription subscription = this.subscription;\n+\t\t\tif (subscription != null) {\n+\t\t\t\tsubscription.cancel();\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Propagate the cancel signal to the downstream Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java\n--- a/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java\n+++ b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java\n@@ -71,6 +71,7 @@ public static void invokeValidator(\n \t\t\tValidator validator, Object target, Errors errors, @Nullable Object... validationHints) {\n \n \t\tAssert.notNull(validator, \"Validator must not be null\");\n+\t\tAssert.notNull(target, \"Target object must not be null\");\n \t\tAssert.notNull(errors, \"Errors object must not be null\");\n \n \t\tif (logger.isDebugEnabled()) {",
    "output": "ValidationUtils.invokeValidator assertion for non-null target object"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n@@ -126,6 +126,10 @@ private Charset getContentTypeCharset(@Nullable MediaType contentType) {\n \t\tif (contentType != null && contentType.getCharset() != null) {\n \t\t\treturn contentType.getCharset();\n \t\t}\n+\t\telse if (contentType != null && contentType.isCompatibleWith(MediaType.APPLICATION_JSON)) {\n+\t\t\t// Matching to AbstractJackson2HttpMessageConverter#DEFAULT_CHARSET\n+\t\t\treturn StandardCharsets.UTF_8;\n+\t\t}\n \t\telse {\n \t\t\tCharset charset = getDefaultCharset();\n \t\t\tAssert.state(charset != null, \"No default charset\");",
    "output": "StringHttpMessageConverter defaults to for JSON Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -399,6 +399,8 @@ private void registerMvcSingletons(StubWebApplicationContext wac) {\n \n \t\tthis.flashMapManager = new SessionFlashMapManager();\n \t\twac.addBean(DispatcherServlet.FLASH_MAP_MANAGER_BEAN_NAME, this.flashMapManager);\n+\n+\t\textendMvcSingletons(sc).forEach(wac::addBean);\n \t}\n \n \tprivate List<ViewResolver> initViewResolvers(WebApplicationContext wac) {\n@@ -412,6 +414,18 @@ private List<ViewResolver> initViewResolvers(WebApplicationContext wac) {\n \t\treturn this.viewResolvers;\n \t}\n \n+\t/**\n+\t * This method could be used from a sub-class to register additional Spring\n+\t * MVC infrastructure such as additional {@code HandlerMapping},\n+\t * {@code HandlerAdapter}, and others.\n+\t * @param servletContext the ServletContext\n+\t * @return a map with additional MVC infrastructure object instances\n+\t * @since 5.1.4\n+\t */\n+\tprotected Map<String, Object> extendMvcSingletons(@Nullable ServletContext servletContext) {\n+\t\treturn Collections.emptyMap();\n+\t}\n+\n \n \t/** Using the MVC Java configuration as the starting point for the \"standalone\" setup. */\n \tprivate class StandaloneConfiguration extends WebMvcConfigurationSupport {",
    "output": "Add protected method in StandaloneMockMvcBuilder To allow sub-classes to register additional MVC infrastructure. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java\n@@ -40,6 +40,10 @@ abstract public class AbstractClassGenerator<T> implements ClassGenerator {\n \n \tprivate static volatile Map<ClassLoader, ClassLoaderData> CACHE = new WeakHashMap<ClassLoader, ClassLoaderData>();\n \n+\tprivate static final boolean DEFAULT_USE_CACHE =\n+\t\t\tBoolean.parseBoolean(System.getProperty(\"cglib.useCache\", \"true\"));\n+\n+\n \tprivate GeneratorStrategy strategy = DefaultGeneratorStrategy.INSTANCE;\n \n \tprivate NamingPolicy namingPolicy = DefaultNamingPolicy.INSTANCE;\n@@ -54,7 +58,7 @@ abstract public class AbstractClassGenerator<T> implements ClassGenerator {\n \n \tprivate Object key;\n \n-\tprivate boolean useCache = true;\n+\tprivate boolean useCache = DEFAULT_USE_CACHE;\n \n \tprivate String className;\n ",
    "output": "Upgrade to CGLIB 3.2.10 Includes upgrade to JarJar 1.7.2 and Tomcat 9.0.14. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -939,9 +939,9 @@ private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String\n \t * {@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.\n \t */\n \tprivate void injectNotificationPublisherIfNecessary(\n-\t\t\tObject managedResource, ModelMBean modelMBean, ObjectName objectName) {\n+\t\t\tObject managedResource, @Nullable ModelMBean modelMBean, @Nullable ObjectName objectName) {\n \n-\t\tif (managedResource instanceof NotificationPublisherAware) {\n+\t\tif (managedResource instanceof NotificationPublisherAware && modelMBean != null && objectName != null) {\n \t\t\t((NotificationPublisherAware) managedResource).setNotificationPublisher(\n \t\t\t\t\tnew ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource));\n \t\t}\n@@ -1112,7 +1112,6 @@ public Object getTarget() {\n \n \t\t@Override\n \t\tprotected void postProcessTargetObject(Object targetObject) {\n-\t\t\tAssert.state(this.modelMBean != null && this.objectName != null, \"Not initialized\");\n \t\t\tinjectNotificationPublisherIfNecessary(targetObject, this.modelMBean, this.objectName);\n \t\t}\n \t}",
    "output": "Relaxed assertion in NotificationPublisherAwareLazyTargetSource Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n@@ -229,12 +229,17 @@ public OperatorOverloader getOperatorOverloader() {\n \t}\n \n \t@Override\n-\tpublic void setVariable(String name, @Nullable Object value) {\n-\t\tif (value != null) {\n-\t\t\tthis.variables.put(name, value);\n-\t\t}\n-\t\telse {\n-\t\t\tthis.variables.remove(name);\n+\tpublic void setVariable(@Nullable String name, @Nullable Object value) {\n+\t\t// For backwards compatibility, we ignore null names here...\n+\t\t// And since ConcurrentHashMap cannot store null values, we simply take null\n+\t\t// as a remove from the Map (with the same result from lookupVariable below).\n+\t\tif (name != null) {\n+\t\t\tif (value != null) {\n+\t\t\t\tthis.variables.put(name, value);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthis.variables.remove(name);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "StandardEvaluationContext.setVariable leniently ignores null name Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java\n@@ -541,7 +541,10 @@ protected void doBegin(Object transaction, TransactionDefinition definition) {\n \t\t\t// Register the Hibernate Session's JDBC Connection for the DataSource, if set.\n \t\t\tif (getDataSource() != null) {\n \t\t\t\tSessionImplementor sessionImpl = (SessionImplementor) session;\n-\t\t\t\tConnectionHolder conHolder = new ConnectionHolder(sessionImpl::connection);\n+\t\t\t\t// The following needs to use a lambda expression instead of a method reference\n+\t\t\t\t// for compatibility with Hibernate ORM <5.2 where connection() is defined on\n+\t\t\t\t// SessionImplementor itself instead of on SharedSessionContractImplementor...\n+\t\t\t\tConnectionHolder conHolder = new ConnectionHolder(() -> sessionImpl.connection());\n \t\t\t\tif (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {\n \t\t\t\t\tconHolder.setTimeoutInSeconds(timeout);\n \t\t\t\t}",
    "output": "Restore Hibernate ORM 5.1 compatibility in HibernateTransactionManager Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/parallel/ParallelExecutionSpringExtensionTests.java\n@@ -32,7 +32,6 @@\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n import static org.junit.jupiter.api.Assertions.*;\n-import static org.junit.jupiter.engine.Constants.*;\n import static org.junit.platform.engine.discovery.DiscoverySelectors.*;\n import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.*;\n \n@@ -55,8 +54,8 @@ void runTestsInParallel() {\n \t\tlauncher.registerTestExecutionListeners(listener);\n \n \t\tLauncherDiscoveryRequest request = request()//\n-\t\t\t\t.configurationParameter(PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME, \"true\")//\n-\t\t\t\t.configurationParameter(PARALLEL_CONFIG_DYNAMIC_FACTOR_PROPERTY_NAME, \"10\")//\n+\t\t\t\t.configurationParameter(\"junit.jupiter.execution.parallel.enabled\", \"true\")//\n+\t\t\t\t.configurationParameter(\"junit.jupiter.execution.parallel.config.dynamic.factor\", \"10\")//\n \t\t\t\t.selectors(selectClass(TestCase.class))//\n \t\t\t\t.build();\n ",
    "output": "Avoid test compile-time dependency on junit-jupiter-engine Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -733,11 +733,19 @@ public static MethodParameter forParameter(Parameter parameter) {\n \tprotected static int findParameterIndex(Parameter parameter) {\n \t\tExecutable executable = parameter.getDeclaringExecutable();\n \t\tParameter[] allParams = executable.getParameters();\n+\t\t// Try first with identity checks for greater performance.\n \t\tfor (int i = 0; i < allParams.length; i++) {\n \t\t\tif (parameter == allParams[i]) {\n \t\t\t\treturn i;\n \t\t\t}\n \t\t}\n+\t\t// Potentially try again with object equality checks in order to avoid race\n+\t\t// conditions while invoking java.lang.reflect.Executable.getParameters().\n+\t\tfor (int i = 0; i < allParams.length; i++) {\n+\t\t\tif (parameter.equals(allParams[i])) {\n+\t\t\t\treturn i;\n+\t\t\t}\n+\t\t}\n \t\tthrow new IllegalArgumentException(\"Given parameter [\" + parameter +\n \t\t\t\t\"] does not match any parameter in the declaring executable\");\n \t}",
    "output": "Ensure that MethodParameter.findParameterIndexis thread-safe Prior to this commit, parallel invocations of MethodParameter.findParameterIndex(invoked indirectly via SynthesizingMethodParameter.forParameterand MethodParameter.forParameter) could intermittently lead to an IllegalArgumentException being thrown due to a race condition in the internal implementation of the JDK's java.lang.reflect.Executable.getParametersmethod. This commit addresses this issue by introducing a fallback for-loop that iterates over the candidate parameters a second time using equality checks instead of identity checks. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n@@ -195,8 +195,7 @@ public RequestMappingInfo combine(RequestMappingInfo other) {\n \t@Nullable\n \tprivate String combineNames(RequestMappingInfo other) {\n \t\tif (this.name != null && other.name != null) {\n-\t\t\tString separator = \"#\";\n-\t\t\treturn this.name + separator + other.name;\n+\t\t\treturn this.name + \"#\" + other.name;\n \t\t}\n \t\telse if (this.name != null) {\n \t\t\treturn this.name;",
    "output": "Remove an unnecessary local variable"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java b/spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java\n@@ -149,6 +149,10 @@ public void clearCache() {\n \t\t\t\tthis.metadataReaderCache.clear();\n \t\t\t}\n \t\t}\n+\t\telse if (this.metadataReaderCache != null) {\n+\t\t\t// Shared resource cache -> reset to local cache.\n+\t\t\tsetCacheLimit(DEFAULT_CACHE_LIMIT);\n+\t\t}\n \t}\n \n \n@@ -159,6 +163,7 @@ private static class LocalResourceCache extends LinkedHashMap<Resource, Metadata\n \n \t\tpublic LocalResourceCache(int cacheLimit) {\n \t\t\tsuper(cacheLimit, 0.75f, true);\n+\t\t\tthis.cacheLimit = cacheLimit;\n \t\t}\n \n \t\tpublic void setCacheLimit(int cacheLimit) {",
    "output": "CachingMetadataReaderFactory releases shared cache Map on clearCacheLocalResourceCache properly initializes cacheLimit on construction. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n@@ -479,7 +479,7 @@ private static class DefaultBodyContentSpec implements BodyContentSpec {\n \n \t\tDefaultBodyContentSpec(EntityExchangeResult<byte[]> result) {\n \t\t\tthis.result = result;\n-\t\t\tthis.isEmpty = (result.getResponseBody() == null);\n+\t\t\tthis.isEmpty = (result.getResponseBody() == null || result.getResponseBody().length == 0);\n \t\t}\n \n \t\t@Override",
    "output": "Consistent isEmpty check in WebTestClient Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -25,7 +25,6 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n ",
    "output": "Remove unused LinkedList import"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1748,7 +1748,9 @@ private Object readResolve() {\n \t\t\t\t}\n \t\t\t}\n \t\t\t// Lenient fallback: dummy factory in case of original factory not found...\n-\t\t\treturn new DefaultListableBeanFactory();\n+\t\t\tDefaultListableBeanFactory dummyFactory = new DefaultListableBeanFactory();\n+\t\t\tdummyFactory.serializationId = this.id;\n+\t\t\treturn dummyFactory;\n \t\t}\n \t}\n ",
    "output": "SerializedBeanFactoryReference falls back to dummy with specific id Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -697,7 +697,7 @@ private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {\n \t\t\tfor (Method ifcMethod : ifc.getMethods()) {\n \t\t\t\tif (!Modifier.isAbstract(ifcMethod.getModifiers())) {\n \t\t\t\t\tif (result == null) {\n-\t\t\t\t\t\tresult = new LinkedList<>();\n+\t\t\t\t\t\tresult = new ArrayList<>();\n \t\t\t\t\t}\n \t\t\t\t\tresult.add(ifcMethod);\n \t\t\t\t}",
    "output": "Use ArrayList instead of LinkedList"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n@@ -19,7 +19,6 @@\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n@@ -105,15 +104,15 @@ public class Jackson2ObjectMapperBuilder {\n \n \tprivate final Log logger = HttpLogging.forLogName(getClass());\n \n-\tprivate final Map<Class<?>, Class<?>> mixIns = new HashMap<>();\n+\tprivate final Map<Class<?>, Class<?>> mixIns = new LinkedHashMap<>();\n \n \tprivate final Map<Class<?>, JsonSerializer<?>> serializers = new LinkedHashMap<>();\n \n \tprivate final Map<Class<?>, JsonDeserializer<?>> deserializers = new LinkedHashMap<>();\n \n-\tprivate final Map<PropertyAccessor, JsonAutoDetect.Visibility> visibilities = new HashMap<>();\n+\tprivate final Map<PropertyAccessor, JsonAutoDetect.Visibility> visibilities = new LinkedHashMap<>();\n \n-\tprivate final Map<Object, Boolean> features = new HashMap<>();\n+\tprivate final Map<Object, Boolean> features = new LinkedHashMap<>();\n \n \tprivate boolean createXmlMapper = false;\n ",
    "output": "Jackson2ObjectMapperBuilder stores visibility declarations in order Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java\n@@ -187,13 +187,7 @@ default PathContainer pathContainer() {\n \t * @return the attribute value\n \t */\n \tdefault Optional<Object> attribute(String name) {\n-\t\tMap<String, Object> attributes = attributes();\n-\t\tif (attributes.containsKey(name)) {\n-\t\t\treturn Optional.of(attributes.get(name));\n-\t\t}\n-\t\telse {\n-\t\t\treturn Optional.empty();\n-\t\t}\n+\t\treturn Optional.ofNullable(attributes().get(name));\n \t}\n \n \t/**\n@@ -350,7 +344,7 @@ interface Headers {\n \t\tOptional<MediaType> contentType();\n \n \t\t/**\n-\t\t * Get the value of the required {@code Host} header.\n+\t\t * Get the value of the {@code Host} header, if available.\n \t\t * <p>If the header value does not contain a port, the\n \t\t * {@linkplain InetSocketAddress#getPort() port} in the returned address will\n \t\t * be {@code 0}.",
    "output": "ServerRequest.attribute(name) defensively accesses concurrent map Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -2437,6 +2437,11 @@ private void readCode(\n    * @return a non null Label, which must be equal to labels[bytecodeOffset].\n    */\n   protected Label readLabel(final int bytecodeOffset, final Label[] labels) {\n+    // SPRING PATCH: leniently handle offset mismatch\n+    if (bytecodeOffset >= labels.length) {\n+      return new Label();\n+    }\n+    // END OF PATCH\n     if (labels[bytecodeOffset] == null) {\n       labels[bytecodeOffset] = new Label();\n     }",
    "output": "ASM ClassReader leniently handles label offset mismatch (again) Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n@@ -18,9 +18,9 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.expression.BeanResolver;\n@@ -88,7 +88,7 @@ public class StandardEvaluationContext implements EvaluationContext {\n \n \tprivate OperatorOverloader operatorOverloader = new StandardOperatorOverloader();\n \n-\tprivate final Map<String, Object> variables = new HashMap<>();\n+\tprivate final Map<String, Object> variables = new ConcurrentHashMap<>();\n \n \n \t/**\n@@ -230,11 +230,16 @@ public OperatorOverloader getOperatorOverloader() {\n \n \t@Override\n \tpublic void setVariable(String name, @Nullable Object value) {\n-\t\tthis.variables.put(name, value);\n+\t\tif (value != null) {\n+\t\t\tthis.variables.put(name, value);\n+\t\t}\n+\t\telse {\n+\t\t\tthis.variables.remove(name);\n+\t\t}\n \t}\n \n-\tpublic void setVariables(Map<String,Object> variables) {\n-\t\tthis.variables.putAll(variables);\n+\tpublic void setVariables(Map<String, Object> variables) {\n+\t\tvariables.forEach(this::setVariable);\n \t}\n \n \tpublic void registerFunction(String name, Method method) {",
    "output": "StandardEvaluationContext supports concurrent variable modification Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n@@ -192,8 +192,8 @@ public Mono<byte[]> getContent() {\n \t\t\t\t\t//noinspection ConstantConditions\n \t\t\t\t\t(this.publisher != null ? this.publisher : this.publisherNested)\n \t\t\t\t\t\t\t.onErrorMap(ex -> new IllegalStateException(\n-\t\t\t\t\t\t\t\t\t\"Content was not been consumed and \" +\n-\t\t\t\t\t\t\t\t\t\t\t\"an error was raised on attempt to produce it:\", ex))\n+\t\t\t\t\t\t\t\t\t\"Content has not been consumed, and \" +\n+\t\t\t\t\t\t\t\t\t\t\t\"an error was raised while attempting to produce it.\", ex))\n \t\t\t\t\t\t\t.subscribe();\n \t\t\t\t}\n \t\t\t\treturn this.content;",
    "output": "Fix typo and polish"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n@@ -32,6 +32,8 @@\n import org.springframework.core.codec.Hints;\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.PooledDataBuffer;\n import org.springframework.http.MediaType;\n import org.springframework.http.ReactiveHttpOutputMessage;\n import org.springframework.http.server.reactive.ServerHttpRequest;\n@@ -144,7 +146,8 @@ private Flux<Publisher<DataBuffer>> encode(Publisher<?> input, ResolvableType el\n \n \t\t\treturn Flux.concat(encodeText(sb, mediaType, factory),\n \t\t\t\t\tencodeData(data, valueType, mediaType, factory, hints),\n-\t\t\t\t\tencodeText(\"\\n\", mediaType, factory));\n+\t\t\t\t\tencodeText(\"\\n\", mediaType, factory))\n+\t\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);\n \t\t});\n \t}\n ",
    "output": "Fix memory leak for ServerSentEventHttpMessageWriter Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java\n@@ -201,7 +201,7 @@ else if (this.name != null) {\n \t\t\treturn this.name;\n \t\t}\n \t\telse {\n-\t\t\treturn (other.name != null ? other.name : null);\n+\t\t\treturn other.name;\n \t\t}\n \t}\n ",
    "output": "Remove unnecessary null check"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufEncoderTests.java\n@@ -35,9 +35,7 @@\n import org.springframework.util.MimeType;\n \n import static java.util.Collections.emptyMap;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n import static org.springframework.core.ResolvableType.forClass;\n \n /**\n@@ -80,6 +78,19 @@ public void encode() {\n \t\t\t\t.verifyComplete();\n \t}\n \n+\t@Test\n+\tpublic void encodeError() {\n+\t\tFlux<Msg> messages = Flux.just(this.testMsg)\n+\t\t\t\t.concatWith(Flux.error(new RuntimeException()));\n+\n+\t\tResolvableType elementType = forClass(Msg.class);\n+\t\tFlux<DataBuffer> output = this.encoder.encode(messages, this.bufferFactory, elementType, PROTOBUF_MIME_TYPE, emptyMap());\n+\t\tStepVerifier.create(output)\n+\t\t\t\t.consumeNextWith(DataBufferUtils::release)\n+\t\t\t\t.expectError(RuntimeException.class)\n+\t\t\t\t.verify();\n+\t}\n+\n \t@Test\n \tpublic void encodeStream() {\n \t\tMsg testMsg2 = Msg.newBuilder().setFoo(\"Bar\").setBlah(SecondMsg.newBuilder().setBlah(456).build()).build();",
    "output": "Add error stream tests for ProtobufEncoderTests Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpRequest.java\n@@ -33,6 +33,7 @@\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.PooledDataBuffer;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n@@ -94,7 +95,10 @@ public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n \n \t@Override\n \tpublic Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {\n-\t\tFlux<ContentChunk> chunks = Flux.from(body).flatMap(Function.identity()).map(this::toContentChunk);\n+\t\tFlux<ContentChunk> chunks = Flux.from(body)\n+\t\t\t\t.flatMap(Function.identity())\n+\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)\n+\t\t\t\t.map(this::toContentChunk);\n \t\tReactiveRequest.Content content = ReactiveRequest.Content.fromPublisher(chunks, getContentType());\n \t\tthis.reactiveRequest = ReactiveRequest.newBuilder(this.jettyRequest).content(content).build();\n \t\treturn doCommit(this::completes);",
    "output": "Add onDiscard hook to Jetty client request The flatMap operation in writeAndFlushWith could buffer internally. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n@@ -197,7 +197,10 @@ private static class SessionClosingHandler implements WebSocketHandler {\n \n \t\t@Override\n \t\tpublic Mono<Void> handle(WebSocketSession session) {\n-\t\t\treturn Flux.never().mergeWith(session.close(CloseStatus.GOING_AWAY)).then();\n+\t\t\treturn session.send(Flux\n+\t\t\t\t\t.error(new Throwable())\n+\t\t\t\t\t.onErrorResume(ex -> session.close(CloseStatus.GOING_AWAY)) // SPR-17306 (nested close)\n+\t\t\t\t\t.cast(WebSocketMessage.class));\n \t\t}\n \t}\n ",
    "output": "Upgrade to Californium snapshots Towards Californium SR2 to confirm fix for"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n@@ -178,7 +178,7 @@ public void afterPropertiesSet() throws Exception {\n \n \t@Override\n \tpublic boolean supports(Object handler) {\n-\t\treturn HandlerMethod.class.equals(handler.getClass());\n+\t\treturn handler instanceof HandlerMethod;\n \t}\n \n \t@Override",
    "output": "Relax handler supports checks in RequestMappingHandlerAdapter Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassTooLargeException.java b/spring-core/src/main/java/org/springframework/asm/ClassTooLargeException.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassTooLargeException.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassTooLargeException.java\n@@ -33,8 +33,8 @@\n  *\n  * @author Jason Zaugg\n  */\n-@SuppressWarnings(\"serial\")\n public final class ClassTooLargeException extends IndexOutOfBoundsException {\n+  private static final long serialVersionUID = 160715609518896765L;\n \n   private final String className;\n   private final int constantPoolCount;\n\ndiff --git a/spring-core/src/main/java/org/springframework/asm/MethodTooLargeException.java b/spring-core/src/main/java/org/springframework/asm/MethodTooLargeException.java\n--- a/spring-core/src/main/java/org/springframework/asm/MethodTooLargeException.java\n+++ b/spring-core/src/main/java/org/springframework/asm/MethodTooLargeException.java\n@@ -33,8 +33,8 @@\n  *\n  * @author Jason Zaugg\n  */\n-@SuppressWarnings(\"serial\")\n public final class MethodTooLargeException extends IndexOutOfBoundsException {\n+  private static final long serialVersionUID = 6807380416709738314L;\n \n   private final String className;\n   private final String methodName;",
    "output": "Align serialVersionUID declaration with ASM master Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java\n@@ -58,7 +58,7 @@ public String[] getParameterNames(Method method) {\n \t@Override\n \t@Nullable\n \tpublic String[] getParameterNames(Constructor<?> ctor) {\n-\t\tif (!KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {\n+\t\tif (ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Leverage Java reflection for Kotlin enums As discussed in , from a Kotlin POV enum constructors have no parameter, this is an \"implementation detail\" required for running on the JVM, so it seems relevant to skip Kotlin reflection in that case and just delegate to Java reflection. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n@@ -50,6 +50,7 @@\n  * @author Juergen Hoeller\n  * @author Arjen Poutsma\n  */\n+@Deprecated\n public class PathResourceTests {\n \n \tprivate static final String TEST_DIR =",
    "output": "Mark PathResourceTests as deprecated (along with PathResource) Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/AsmApi.java b/spring-core/src/main/java/org/springframework/cglib/core/AsmApi.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/AsmApi.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/AsmApi.java\n@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2003,2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cglib.core;\n+\n+import org.springframework.asm.Opcodes;\n+\n+final class AsmApi {\n+\n+    /**\n+     * SPRING PATCH: always returns ASM7.\n+     */\n+    static int value() {\n+        return Opcodes.ASM7;\n+    }\n+\n+    private AsmApi() {\n+    }\n+\n+}",
    "output": "Force CGLIB to always specify ASM7 for its visitors Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -778,7 +778,7 @@ public void process() {\n \t\t\t\tthis.deferredImportSelectors = new ArrayList<>();\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t}\n \n ",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java\n@@ -170,7 +170,7 @@ private SpringContainedBean<?> createBean(\n \t\t\tif (lifecycleOptions.useJpaCompliantCreation()) {\n \t\t\t\tObject bean = this.beanFactory.autowire(beanType, AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR, false);\n \t\t\t\tthis.beanFactory.applyBeanPropertyValues(bean, name);\n-\t\t\t\tthis.beanFactory.initializeBean(bean, name);\n+\t\t\t\tbean = this.beanFactory.initializeBean(bean, name);\n \t\t\t\treturn new SpringContainedBean<>(bean, beanInstance -> this.beanFactory.destroyBean(name, beanInstance));\n \t\t\t}\n \t\t\telse {",
    "output": "SpringBeanContainer exposes bean instance returned from initializeBean Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -498,9 +498,7 @@ public void addApplicationListener(ApplicationListener<?> listener) {\n \t\tif (this.applicationEventMulticaster != null) {\n \t\t\tthis.applicationEventMulticaster.addApplicationListener(listener);\n \t\t}\n-\t\telse {\n-\t\t\tthis.applicationListeners.add(listener);\n-\t\t}\n+\t\tthis.applicationListeners.add(listener);\n \t}\n \n \t/**",
    "output": "AbstractApplicationContext.getApplicationListenersexposes all statically registered listeners Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n@@ -138,7 +138,7 @@ public void accept(FluxSink<Part> emitter) {\n \t\t\tMediaType mediaType = headers.getContentType();\n \t\t\tAssert.state(mediaType != null, \"No content type set\");\n \n-\t\t\tint length = Math.toIntExact(headers.getContentLength());\n+\t\t\tint length = getContentLength(headers);\n \t\t\tCharset charset = Optional.ofNullable(mediaType.getCharset()).orElse(StandardCharsets.UTF_8);\n \t\t\tMultipartContext context = new MultipartContext(mediaType.toString(), length, charset.name());\n \n@@ -176,7 +176,12 @@ public void accept(FluxSink<Part> emitter) {\n \t\t\t\t\tlistener.onError(\"Exception thrown while closing the parser\", ex);\n \t\t\t\t}\n \t\t\t});\n+\t\t}\n \n+\t\tprivate int getContentLength(HttpHeaders headers) {\n+\t\t\t// Until this is fixed https://github.com/synchronoss/nio-multipart/issues/10\n+\t\t\tlong length = headers.getContentLength();\n+\t\t\treturn (int) length == length ? (int) length : -1;\n \t\t}\n \t}\n ",
    "output": "Workaround for Synchronoss content-length limitation Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java\n@@ -206,8 +206,8 @@ private Object applyConversion(@Nullable Object value, NamedValueInfo namedValue\n \tprivate Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,\n \t\t\tBindingContext bindingContext, Model model, ServerWebExchange exchange) {\n \n-\t\tObject value = null;\n-\t\ttry {\n+\t\treturn Mono.fromSupplier(() -> {\n+\t\t\tObject value = null;\n \t\t\tif (namedValueInfo.defaultValue != null) {\n \t\t\t\tvalue = resolveStringValue(namedValueInfo.defaultValue);\n \t\t\t}\n@@ -217,11 +217,8 @@ else if (namedValueInfo.required && !parameter.isOptional()) {\n \t\t\tvalue = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType());\n \t\t\tvalue = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange);\n \t\t\thandleResolvedValue(value, namedValueInfo.name, parameter, model, exchange);\n-\t\t\treturn Mono.justOrEmpty(value);\n-\t\t}\n-\t\tcatch (Throwable ex) {\n-\t\t\treturn Mono.error(ex);\n-\t\t}\n+\t\t\treturn value;\n+\t\t});\n \t}\n \n \t/**",
    "output": "Defer obtaining argument resolver default value Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java b/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java\n--- a/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java\n+++ b/spring-core/src/main/java/org/springframework/util/comparator/Comparators.java\n@@ -52,7 +52,7 @@ public static <T> Comparator<T> nullsLow() {\n \t * @see NullSafeComparator#NullSafeComparator(boolean)\n \t */\n \tpublic static <T> Comparator<T> nullsLow(Comparator<T> comparator) {\n-\t\treturn new NullSafeComparator<>(comparator, false);\n+\t\treturn new NullSafeComparator<>(comparator, true);\n \t}\n \n \t/**",
    "output": "Fix construction of NullSafeComparator in nullsLow Previously, both nullsLow(Comparator<T>) and nullsHigh(Comparator<T>) returned a NullSafeComparator which treated nulls as being high. This commit corrects this typo"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -15,7 +15,6 @@\n  */\n package org.springframework.web.reactive.socket.adapter;\n \n-import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n@@ -98,8 +97,7 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \n \t@Override\n \tpublic Mono<Void> close(CloseStatus status) {\n-\t\tWebSocketFrame closeFrame = new CloseWebSocketFrame(status.getCode(), status.getReason());\n-\t\treturn getDelegate().getOutbound().sendObject(closeFrame).then();\n+\t\treturn getDelegate().getOutbound().sendClose(status.getCode(), status.getReason());\n \t}\n \n ",
    "output": "Use WebsocketOutbound#sendClose Switch to using the sendClose method available since Reactor Netty 0.8 vs explicitly sending a CloseWebSocketFrame. Related to , but does not address the root cause"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java b/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/log/LogFormatUtils.java\n@@ -32,11 +32,7 @@\n  * @author Rossen Stoyanchev\n  * @since 5.1\n  */\n-public final class LogFormatUtils {\n-\n-\tprivate LogFormatUtils() {\n-\t}\n-\n+public abstract class LogFormatUtils {\n \n \t/**\n \t * Format the given value via {@code toString()}, quoting it if it is a",
    "output": "LogFormatUtils is declared abstract"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -41,7 +41,7 @@\n  */\n public class ReactorClientHttpConnector implements ClientHttpConnector {\n \n-\tprivate final static Function<HttpClient, HttpClient> defaultInitializer = HttpClient::compress;\n+\tprivate final static Function<HttpClient, HttpClient> defaultInitializer = client -> client.compress(true);\n \n \n \tprivate final HttpClient httpClient;\n@@ -82,7 +82,7 @@ private static HttpClient initHttpClient(ReactorResourceFactory resourceFactory)\n \t\tLoopResources resources = resourceFactory.getLoopResources();\n \t\tAssert.notNull(provider, \"No ConnectionProvider: is ReactorResourceFactory not initialized yet?\");\n \t\tAssert.notNull(resources, \"No LoopResources: is ReactorResourceFactory not initialized yet?\");\n-\t\treturn HttpClient.create(provider).tcpConfiguration(tcpClient -> tcpClient.runOn(resources)).compress();\n+\t\treturn HttpClient.create(provider).tcpConfiguration(tcpClient -> tcpClient.runOn(resources));\n \t}\n \n \t/**",
    "output": "Switch to Reactor Californium SNAPSHOTs"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/AbstractFallbackSQLExceptionTranslator.java\n@@ -114,7 +114,7 @@ public DataAccessException translate(String task, @Nullable String sql, SQLExcep\n \t * @return the message {@code String} to use\n \t */\n \tprotected String buildMessage(String task, @Nullable String sql, SQLException ex) {\n-\t\treturn task + \"; \" + (sql != null ? \"SQL [\" + sql : \"]; \" + \"\") + ex.getMessage();\n+\t\treturn task + \"; \" + (sql != null ? (\"SQL [\" + sql + \"]; \") : \"\") + ex.getMessage();\n \t}\n \n }",
    "output": "Fix jdbc template error messages generation"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/Bean.java b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/Bean.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java\n@@ -248,7 +248,10 @@\n \t * bean class itself expresses through annotations.\n \t * @see Autowire#BY_NAME\n \t * @see Autowire#BY_TYPE\n+\t * @deprecated as of 5.1, since {@code @Bean} factory method argument resolution and\n+\t * {@code @Autowired} processing supersede name/type-based bean property injection\n \t */\n+\t@Deprecated\n \tAutowire autowire() default Autowire.NO;\n \n \t/**",
    "output": "Deprecate autowire attribute on @Bean annotation Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java\n@@ -168,7 +168,7 @@ public void afterPropertiesSet() {\n \t */\n \tpublic void initialize() {\n \t\tif (logger.isInfoEnabled()) {\n-\t\t\tlogger.info(\"Initializing ExecutorService \" + (this.beanName != null ? \" '\" + this.beanName + \"'\" : \"\"));\n+\t\t\tlogger.info(\"Initializing ExecutorService\" + (this.beanName != null ? \" '\" + this.beanName + \"'\" : \"\"));\n \t\t}\n \t\tif (!this.threadNamePrefixSet && this.beanName != null) {\n \t\t\tsetThreadNamePrefix(this.beanName + \"-\");",
    "output": "Remove duplicate blank in log message of ExecutorConfigurationSupport#initialize (obvious fix)"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java\n@@ -381,7 +381,6 @@ public void asyncMethodListener() throws Exception {\n \t\t\t\t\t.atMost(1, TimeUnit.SECONDS)\n \t\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n \t\t\t\t\t.until(() -> listenerCalled == 1);\n-\t\tassertEquals(listenerCalled, 1);\n \t\tcontext.close();\n \t}\n \n@@ -403,7 +402,6 @@ public void asyncClassListener() throws Exception {\n \t\t\t\t\t.atMost(1, TimeUnit.SECONDS)\n \t\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n \t\t\t\t\t.until(() -> listenerCalled == 2);\n-\t\tassertEquals(2, listenerCalled);\n \t\tassertEquals(1, listenerConstructed);\n \t}\n \n@@ -427,7 +425,6 @@ public void asyncPrototypeClassListener() throws Exception {\n \t\t\t\t\t.atMost(1, TimeUnit.SECONDS)\n \t\t\t\t\t.pollInterval(10, TimeUnit.MILLISECONDS)\n \t\t\t\t\t.until(() -> listenerCalled == 2);\n-\t\tassertEquals(2, listenerCalled);\n \t\tassertEquals(2, listenerConstructed);\n \t}\n ",
    "output": "Remove duplicate assertions in AsyncExecutionTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -90,9 +90,9 @@\n  * another using the {@link Import} annotation).\n  *\n  * <p>This class helps separate the concern of parsing the structure of a Configuration\n- * class from the concern of registering BeanDefinition objects based on the\n- * content of that model (with the exception of {@code @ComponentScan} annotations which\n- * need to be registered immediately).\n+ * class from the concern of registering BeanDefinition objects based on the content of\n+ * that model (with the exception of {@code @ComponentScan} annotations which need to be\n+ * registered immediately).\n  *\n  * <p>This ASM-based implementation avoids reflection and eager class loading in order to\n  * interoperate effectively with lazy class loading in a Spring ApplicationContext.\n@@ -994,7 +994,7 @@ public Collection<SourceClass> getAnnotationAttributes(String annType, String at\n \t\tprivate SourceClass getRelated(String className) throws IOException {\n \t\t\tif (this.source instanceof Class) {\n \t\t\t\ttry {\n-\t\t\t\t\tClass<?> clazz = ((Class<?>) this.source).getClassLoader().loadClass(className);\n+\t\t\t\t\tClass<?> clazz = ClassUtils.forName(className, ((Class<?>) this.source).getClassLoader());\n \t\t\t\t\treturn asSourceClass(clazz);\n \t\t\t\t}\n \t\t\t\tcatch (ClassNotFoundException ex) {",
    "output": "ConfigurationClassParser consistently uses ClassUtils.forName Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -29,6 +29,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import kotlin.reflect.KFunction;\n@@ -768,17 +769,21 @@ public static boolean isOptional(MethodParameter param) {\n \t\t\t}\n \t\t\telse {\n \t\t\t\tKFunction<?> function = null;\n+\t\t\t\tPredicate<KParameter> predicate = null;\n \t\t\t\tif (method != null) {\n \t\t\t\t\tfunction = ReflectJvmMapping.getKotlinFunction(method);\n+\t\t\t\t\tpredicate = p -> KParameter.Kind.VALUE.equals(p.getKind());\n \t\t\t\t}\n \t\t\t\telse if (ctor != null) {\n \t\t\t\t\tfunction = ReflectJvmMapping.getKotlinFunction(ctor);\n+\t\t\t\t\tpredicate = p -> KParameter.Kind.VALUE.equals(p.getKind()) ||\n+\t\t\t\t\t\t\tKParameter.Kind.INSTANCE.equals(p.getKind());\n \t\t\t\t}\n \t\t\t\tif (function != null) {\n \t\t\t\t\tList<KParameter> parameters = function.getParameters();\n \t\t\t\t\tKParameter parameter = parameters\n \t\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.filter(p -> KParameter.Kind.VALUE.equals(p.getKind()))\n+\t\t\t\t\t\t\t.filter(predicate)\n \t\t\t\t\t\t\t.collect(Collectors.toList())\n \t\t\t\t\t\t\t.get(index);\n \t\t\t\t\treturn (parameter.getType().isMarkedNullable() || parameter.isOptional());",
    "output": "Fix Kotlin inner class nested configuration handling Before this commit, Kotlin inner class nested configuration handling thrown an IndexOutOfBoundsException due to bogus filtering of its constructor parameter reference to an instance of the outer class. This commit keep constructor parameter of type INSTANCE in order to throw a more meaningful NoSuchBeanDefinitionException. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java\n@@ -116,8 +116,8 @@ public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory buffe\n \t\tJsonEncoding encoding = getJsonEncoding(mimeType);\n \n \t\tif (inputStream instanceof Mono) {\n-\t\t\treturn Flux.from(inputStream).map(value ->\n-\t\t\t\t\tencodeValue(value, mimeType, bufferFactory, elementType, hints, encoding));\n+\t\t\treturn Mono.from(inputStream).map(value ->\n+\t\t\t\t\tencodeValue(value, mimeType, bufferFactory, elementType, hints, encoding)).flux();\n \t\t}\n \n \t\tfor (MediaType streamingMediaType : this.streamingMediaTypes) {",
    "output": "Optimize for Flux to/from Mono conversions This commit optimizes Flux <-> Mono conversions in our codebase by avoiding to hide that conversion from Reactor. This tries to keep conversions sequentially so that they can be detected by Reactor and optimized. In Spring WebFlux, this means keeping the conversions at the edges of a method implementation (right when getting an input parameter, and before returning it as a result). If those conversions are made between other operators, Reactor might not be able to detect those conversions and optimize them. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterBatchUpdateUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterBatchUpdateUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterBatchUpdateUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterBatchUpdateUtils.java\n@@ -30,7 +30,7 @@\n  * @author Thomas Risberg\n  * @since 3.0\n  */\n-public class NamedParameterBatchUpdateUtils extends BatchUpdateUtils {\n+public abstract class NamedParameterBatchUpdateUtils extends BatchUpdateUtils {\n \n \tpublic static int[] executeBatchUpdateWithNamedParameters(final ParsedSql parsedSql,\n \t\t\tfinal SqlParameterSource[] batchArgs, JdbcOperations jdbcOperations) {",
    "output": "Prevent instantiation of NamedParameterBatchUpdateUtils In order to prevent instantiation of utility classes, this commit makes NamedParameterBatchUpdateUtils `abstract`. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java b/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -42,6 +42,14 @@ public class SocketUtilsTests {\n \t@Rule\n \tpublic final ExpectedException exception = ExpectedException.none();\n \n+\t@Test\n+\tpublic void canBeInstantiated() {\n+\t\t// Just making sure somebody doesn't try to make SocketUtils abstract,\n+\t\t// since that would be a breaking change due to the intentional public\n+\t\t// constructor.\n+\t\tnew SocketUtils();\n+\t}\n+\n \t// TCP\n \n \t@Test",
    "output": "Ensure SocketUtils can be instantiated Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -916,7 +916,7 @@ private static <T> T searchWithGetSemantics(AnnotatedElement element,\n \t\t\t\t}\n \n \t\t\t\tif (element instanceof Class) {  // otherwise getAnnotations doesn't return anything new\n-\t\t\t\t\tClass<?> superclass = ((Class) element).getSuperclass();\n+\t\t\t\t\tClass<?> superclass = ((Class<?>) element).getSuperclass();\n \t\t\t\t\tif (superclass != null && superclass != Object.class) {\n \t\t\t\t\t\tList<Annotation> inheritedAnnotations = new LinkedList<>();\n \t\t\t\t\t\tfor (Annotation annotation : element.getAnnotations()) {",
    "output": "Clean up warning in AnnotatedElementUtils"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n@@ -73,13 +73,13 @@ public class DispatcherHandler implements WebHandler, ApplicationContextAware {\n \n \n \t@Nullable\n-\tprivate List<HandlerMapping> handlerMappings;\n+\tprotected List<HandlerMapping> handlerMappings;\n \n \t@Nullable\n-\tprivate List<HandlerAdapter> handlerAdapters;\n+\tprotected List<HandlerAdapter> handlerAdapters;\n \n \t@Nullable\n-\tprivate List<HandlerResultHandler> resultHandlers;\n+\tprotected List<HandlerResultHandler> resultHandlers;\n \n \n \t/**",
    "output": "Make DispacherServlet attributes protected Since the `initStrategies` method is there to be extended, the related attributes should be `protected` as well"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -141,18 +141,20 @@ public UrlResource(String protocol, String location, @Nullable String fragment)\n \t * Determine a cleaned URL for the given original URL.\n \t * @param originalUrl the original URL\n \t * @param originalPath the original URL path\n-\t * @return the cleaned URL\n+\t * @return the cleaned URL (possibly the original URL as-is)\n \t * @see org.springframework.util.StringUtils#cleanPath\n \t */\n \tprivate URL getCleanedUrl(URL originalUrl, String originalPath) {\n-\t\ttry {\n-\t\t\treturn new URL(StringUtils.cleanPath(originalPath));\n-\t\t}\n-\t\tcatch (MalformedURLException ex) {\n-\t\t\t// Cleaned URL path cannot be converted to URL\n-\t\t\t// -> take original URL.\n-\t\t\treturn originalUrl;\n+\t\tString cleanedPath = StringUtils.cleanPath(originalPath);\n+\t\tif (!cleanedPath.equals(originalPath)) {\n+\t\t\ttry {\n+\t\t\t\treturn new URL(cleanedPath);\n+\t\t\t}\n+\t\t\tcatch (MalformedURLException ex) {\n+\t\t\t\t// Cleaned URL path cannot be converted to URL -> take original URL.\n+\t\t\t}\n \t\t}\n+\t\treturn originalUrl;\n \t}\n \n \t/**",
    "output": "Defensive URL cleaning (preserving the original URL if possible) Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java\n@@ -142,25 +142,29 @@ public void afterPropertiesSet() throws Exception {\n \n \t@Override\n \tpublic void destroy() {\n-\n-\t\ttry {\n-\t\t\tConnectionProvider provider = this.connectionProvider;\n-\t\t\tif (provider != null) {\n-\t\t\t\tprovider.dispose();\n-\t\t\t}\n-\t\t}\n-\t\tcatch (Throwable ex) {\n-\t\t\t// ignore\n+\t\tif (this.globalResources) {\n+\t\t\tHttpResources.disposeLoopsAndConnections();\n \t\t}\n+\t\telse {\n+\t\t\ttry {\n+\t\t\t\tConnectionProvider provider = this.connectionProvider;\n+\t\t\t\tif (provider != null) {\n+\t\t\t\t\tprovider.dispose();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\t// ignore\n+\t\t\t}\n \n-\t\ttry {\n-\t\t\tLoopResources resources = this.loopResources;\n-\t\t\tif (resources != null) {\n-\t\t\t\tresources.dispose();\n+\t\t\ttry {\n+\t\t\t\tLoopResources resources = this.loopResources;\n+\t\t\t\tif (resources != null) {\n+\t\t\t\t\tresources.dispose();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\t// ignore\n \t\t\t}\n-\t\t}\n-\t\tcatch (Throwable ex) {\n-\t\t\t// ignore\n \t\t}\n \t}\n ",
    "output": "Clear global resources reference from HttpResources When used as global Netty resources, ReactorResourceFactory creates and sets those resources on Reactor's HttpResources directly. When that ReactorResourceFactory bean is destroyed, those resources are disposed but HttpResources still holds a reference to those and may try to use them again. This commit uses HttpResources to clear those resources and its references to it, when the ReactorResourceFactory is treating those as global. Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java\n@@ -17,7 +17,6 @@\n package org.springframework.cache.jcache;\n \n import java.util.concurrent.Callable;\n-\n import javax.cache.Cache;\n import javax.cache.processor.EntryProcessor;\n import javax.cache.processor.EntryProcessorException;",
    "output": "Fix Checkstyle violation in JCacheCache"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java b/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java\n@@ -243,7 +243,7 @@ private void handleComment() throws SAXException {\n \n \tprivate void handleDtd() throws SAXException {\n \t\tif (getLexicalHandler() != null) {\n-\t\t\tjavax.xml.stream.Location location = this.reader.getLocation();\n+\t\t\tLocation location = this.reader.getLocation();\n \t\t\tgetLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\n \t\t}\n \t\tif (getLexicalHandler() != null) {",
    "output": "Use an import instead of FQCN javax.xml.stream.Location is already there as an import there is no need to use the FQCN in the handleDtd method"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java\n@@ -363,10 +363,10 @@ public void testSqlUpdateWithArguments() throws Exception {\n \t\tgiven(this.preparedStatement.executeUpdate()).willReturn(rowsAffected);\n \n \t\tint actualRowsAffected = this.template.update(sql,\n-\t\t\t\tnew Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))});\n+\t\t\t\tnew Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, Float.valueOf(1.4142f))});\n \t\tassertTrue(\"Actual rows affected is correct\", actualRowsAffected == rowsAffected);\n \t\tverify(this.preparedStatement).setObject(1, 4);\n-\t\tverify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2);\n+\t\tverify(this.preparedStatement).setObject(2, Float.valueOf(1.4142f), Types.NUMERIC, 2);\n \t\tverify(this.preparedStatement).close();\n \t\tverify(this.connection).close();\n \t}",
    "output": "Use Float.valueOf(float) instead of deprecated Float(double) constructor"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -23,6 +23,7 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import java.lang.reflect.Method;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n@@ -145,7 +146,16 @@ public void findMethodAnnotationOnBridgeMethod() throws Exception {\n \t\tassertNull(getAnnotation(bridgeMethod, Order.class));\n \t\tassertNotNull(findAnnotation(bridgeMethod, Order.class));\n \n-\t\tassertNotNull(bridgeMethod.getAnnotation(Transactional.class));\n+\t\tboolean runningInEclipse = Arrays.stream(new Exception().getStackTrace())\n+\t\t\t\t.anyMatch(element -> element.getClassName().startsWith(\"org.eclipse.jdt\"));\n+\n+\t\t// As of JDK 8, invoking getAnnotation() on a bridge method actually finds an\n+\t\t// annotation on its 'bridged' method; however, the Eclipse compiler still does\n+\t\t// not properly support this. Thus, we effectively ignore the following assertion\n+\t\t// if the test is currently executing within the Eclipse IDE.\n+\t\tif (!runningInEclipse) {\n+\t\t\tassertNotNull(bridgeMethod.getAnnotation(Transactional.class));\n+\t\t}\n \t\tassertNotNull(getAnnotation(bridgeMethod, Transactional.class));\n \t\tassertNotNull(findAnnotation(bridgeMethod, Transactional.class));\n \t}",
    "output": "Ensure AnnotationUtilsTests pass in Eclipse again"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java\n@@ -183,4 +183,9 @@ public boolean equals(Object obj) {\n \t\t\t\t\"to avoid being used in error instead of JsonPathAssertions#isEqualTo(String).\");\n \t}\n \n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn super.hashCode();\n+\t}\n+\n }\n\ndiff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/XpathAssertions.java\n@@ -195,6 +195,11 @@ public boolean equals(Object obj) {\n \t\t\t\t\"to avoid being used in error instead of XPathAssertions#isEqualTo(String).\");\n \t}\n \n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn super.hashCode();\n+\t}\n+\n \n \t/**\n \t * Lets us be able to use lambda expressions that could throw checked exceptions, since",
    "output": "Fix compiler warnings"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/SpringAsmInfo.java b/spring-core/src/main/java/org/springframework/asm/SpringAsmInfo.java\n--- a/spring-core/src/main/java/org/springframework/asm/SpringAsmInfo.java\n+++ b/spring-core/src/main/java/org/springframework/asm/SpringAsmInfo.java\n@@ -18,20 +18,21 @@\n \n /**\n  * Utility class exposing constants related to Spring's internal repackaging\n- * of the ASM bytecode manipulation library (currently based on version 6.2).\n+ * of the ASM bytecode library: currently based on ASM 6.2 plus minor patches.\n  *\n  * <p>See <a href=\"package-summary.html\">package-level javadocs</a> for more\n  * information on {@code org.springframework.asm}.\n  *\n  * @author Chris Beams\n+ * @author Juergen Hoeller\n  * @since 3.2\n  */\n public final class SpringAsmInfo {\n \n \t/**\n \t * The ASM compatibility version for Spring's ASM visitor implementations:\n-\t * currently {@link Opcodes#ASM6}.\n+\t * currently {@link Opcodes#ASM7_EXPERIMENTAL}.\n \t */\n-\tpublic static final int ASM_VERSION = Opcodes.ASM6;\n+\tpublic static final int ASM_VERSION = Opcodes.ASM7_EXPERIMENTAL;\n \n }",
    "output": "Declare ASM7_EXPERIMENTAL for full compatibility with JDK 11 bytecode Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n--- a/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java\n@@ -202,7 +202,7 @@ protected void processProperties(ConfigurableListableBeanFactory beanFactory, Pr\n \t * @since 4.0\n \t */\n \tpublic PropertySources getAppliedPropertySources() throws IllegalStateException {\n-\t\tAssert.state(this.appliedPropertySources != null, \"PropertySources have not get been applied\");\n+\t\tAssert.state(this.appliedPropertySources != null, \"PropertySources have not yet been applied\");\n \t\treturn this.appliedPropertySources;\n \t}\n ",
    "output": "Upgrade PropertySourcesPlaceholderConfigurer.java Fix the error message when PropertySources are not applied"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java\n@@ -135,7 +135,7 @@ public void afterPropertiesSet() {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\tlogger.debug(\"Validation query [\" + this.validationQuery + \"] threw exception\", ex);\n \t\t\t\t\t}\n-\t\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\t\t\tfloat rest = ((float) (deadLine - System.currentTimeMillis())) / 1000;\n \t\t\t\t\t\tif (rest > this.interval) {\n \t\t\t\t\t\t\tlogger.info(\"Database has not started up yet - retrying in \" + this.interval +",
    "output": "Fix log level guard in DatabaseStartupValidator.afterPropertiesSet"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n@@ -45,6 +45,7 @@\n import org.springframework.beans.factory.BeanDefinitionStoreException;\n import org.springframework.beans.factory.InjectionPoint;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.NoUniqueBeanDefinitionException;\n import org.springframework.beans.factory.UnsatisfiedDependencyException;\n import org.springframework.beans.factory.config.ConstructorArgumentValues;\n import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;\n@@ -823,6 +824,9 @@ protected Object resolveAutowiredArgument(MethodParameter param, String beanName\n \t\t\treturn this.beanFactory.resolveDependency(\n \t\t\t\t\tnew DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter);\n \t\t}\n+\t\tcatch (NoUniqueBeanDefinitionException ex) {\n+\t\t\tthrow ex;\n+\t\t}\n \t\tcatch (NoSuchBeanDefinitionException ex) {\n \t\t\tif (fallback) {\n \t\t\t\t// Single constructor or factory method -> let's return an empty array/collection",
    "output": "Fallback to empty collection/map only if actually no target bean found Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java b/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java\n--- a/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java\n+++ b/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java\n@@ -16,7 +16,7 @@\n \n package org.springframework.util.xml;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.NoSuchElementException;\n import javax.xml.stream.events.XMLEvent;\n@@ -25,7 +25,8 @@\n import org.springframework.util.Assert;\n \n /**\n- * Implementation of {@code XMLEventReader} based on a list of {@link XMLEvent XMLEvents}.\n+ * Implementation of {@code XMLEventReader} based on a {@link List}\n+ * of {@link XMLEvent} elements.\n  *\n  * @author Arjen Poutsma\n  * @since 5.0\n@@ -38,8 +39,8 @@ class ListBasedXMLEventReader extends AbstractXMLEventReader {\n \n \n \tpublic ListBasedXMLEventReader(List<XMLEvent> events) {\n-\t\tAssert.notNull(events, \"'events' must not be null\");\n-\t\tthis.events = Collections.unmodifiableList(events);\n+\t\tAssert.notNull(events, \"XMLEvent List must not be null\");\n+\t\tthis.events = new ArrayList<>(events);\n \t}\n \n ",
    "output": "ListBasedXMLEventReader uses defensive modifiable copy of given List"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java\n@@ -39,6 +39,7 @@\n  * where \"Forwarded\" and \"X-Forwarded-*\" headers are eliminated, and not used.\n  *\n  * @author Arjen Poutsma\n+ * @author Rossen Stoyanchev\n  * @since 5.0\n  * @see <a href=\"https://tools.ietf.org/html/rfc7239\">https://tools.ietf.org/html/rfc7239</a>\n  */\n@@ -71,7 +72,6 @@ public void setRemoveOnly(boolean removeOnly) {\n \n \t@Override\n \tpublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n-\n \t\tServerHttpRequest request = exchange.getRequest();\n \t\tif (!hasForwardedHeaders(request)) {\n \t\t\treturn chain.filter(exchange);\n@@ -117,8 +117,8 @@ private static String getForwardedPrefix(ServerHttpRequest request) {\n \t\t\tint endIndex = prefix.length();\n \t\t\twhile (endIndex > 1 && prefix.charAt(endIndex - 1) == '/') {\n \t\t\t\tendIndex--;\n-\t\t\t};\n-\t\t\tprefix = endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix;\n+\t\t\t}\n+\t\t\tprefix = (endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix);\n \t\t}\n \t\treturn prefix;\n \t}",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/DefaultSimpUserRegistry.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/DefaultSimpUserRegistry.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/DefaultSimpUserRegistry.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/DefaultSimpUserRegistry.java\n@@ -47,6 +47,8 @@\n  */\n public class DefaultSimpUserRegistry implements SimpUserRegistry, SmartApplicationListener {\n \n+\tprivate int order = Ordered.LOWEST_PRECEDENCE;\n+\n \t/* Primary lookup that holds all users and their sessions */\n \tprivate final Map<String, LocalSimpUser> users = new ConcurrentHashMap<>();\n \n@@ -56,9 +58,13 @@ public class DefaultSimpUserRegistry implements SimpUserRegistry, SmartApplicati\n \tprivate final Object sessionLock = new Object();\n \n \n+\tpublic void setOrder(int order) {\n+\t\tthis.order = order;\n+\t}\n+\n \t@Override\n \tpublic int getOrder() {\n-\t\treturn Ordered.LOWEST_PRECEDENCE;\n+\t\treturn this.order;\n \t}\n \n ",
    "output": "Order setter for DefaultSimpUserRegistry Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -1835,7 +1835,7 @@ public void testGetBeanWithArgsNotCreatedForFactoryBeanChecking() {\n \tprivate RootBeanDefinition createConstructorDependencyBeanDefinition(int age) {\n \t\tRootBeanDefinition bd = new RootBeanDefinition(ConstructorDependency.class);\n \t\tbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);\n-\t\tbd.getConstructorArgumentValues().addGenericArgumentValue(String.valueOf(age));\n+\t\tbd.getConstructorArgumentValues().addGenericArgumentValue(age);\n \t\treturn bd;\n \t}\n ",
    "output": "Avoid relying on runtime constructor order for argument conversion"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -2387,7 +2387,7 @@ public void testPrototypeCreationWithPropertiesIsFastEnough() {\n \t\t}\n \t\tsw.stop();\n \t\t// System.out.println(sw.getTotalTimeMillis());\n-\t\tassertTrue(\"Prototype creation took too long: \" + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000);\n+\t\tassertTrue(\"Prototype creation took too long: \" + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000);\n \t}\n \n \t@Test",
    "output": "Raise testPrototypeCreationWithPropertiesIsFastEnough limit to 4000 ms"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/CookieAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/CookieAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/CookieAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/CookieAssertionTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,8 +70,8 @@ public void testNotExists() throws Exception {\n \n \t@Test\n \tpublic void testEqualTo() throws Exception {\n-\t\tthis.mockMvc.perform(get(\"/\")).andExpect(cookie().value(COOKIE_NAME, \"en_US\"));\n-\t\tthis.mockMvc.perform(get(\"/\")).andExpect(cookie().value(COOKIE_NAME, equalTo(\"en_US\")));\n+\t\tthis.mockMvc.perform(get(\"/\")).andExpect(cookie().value(COOKIE_NAME, \"en-US\"));\n+\t\tthis.mockMvc.perform(get(\"/\")).andExpect(cookie().value(COOKIE_NAME, equalTo(\"en-US\")));\n \t}\n \n \t@Test",
    "output": "CookieAssertionTests expects language tag compliance by default Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n package org.springframework.core.type.classreading;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.List;\n@@ -98,7 +99,8 @@ public Set<String> getAnnotationTypes() {\n \n \t@Override\n \tpublic Set<String> getMetaAnnotationTypes(String annotationName) {\n-\t\treturn this.metaAnnotationMap.get(annotationName);\n+\t\tSet<String> metaAnnotationTypes = this.metaAnnotationMap.get(annotationName);\n+\t\treturn (metaAnnotationTypes != null ? metaAnnotationTypes : Collections.emptySet());\n \t}\n \n \t@Override",
    "output": "Never return null from AnnotationMetadata.getMetaAnnotationTypes Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -35,7 +35,6 @@\n import org.springframework.util.Assert;\n import org.springframework.web.context.request.RequestAttributes;\n import org.springframework.web.context.request.async.DeferredResult.DeferredResultHandler;\n-import org.springframework.web.server.adapter.WebHttpHandlerBuilder;\n \n /**\n  * The central class for managing asynchronous request processing, mainly intended\n@@ -64,7 +63,7 @@ public final class WebAsyncManager {\n \tprivate static final Object RESULT_NONE = new Object();\n \n \tprivate static final AsyncTaskExecutor DEFAULT_TASK_EXECUTOR =\n-\t\t\tnew SimpleAsyncTaskExecutor(WebHttpHandlerBuilder.class.getSimpleName());\n+\t\t\tnew SimpleAsyncTaskExecutor(WebAsyncManager.class.getSimpleName());\n \n \tprivate static final Log logger = LogFactory.getLog(WebAsyncManager.class);\n ",
    "output": "Fix code completion typo"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n--- a/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n+++ b/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java\n@@ -493,15 +493,18 @@ public static Class defineClass(String className, byte[] b, ClassLoader loader,\n \t\tClass c = null;\n \t\tif (contextClass != null && privateLookupInMethod != null && lookupDefineClassMethod != null) {\n \t\t\ttry {\n-\t\t\t\tMethodHandles.Lookup lookup =\n-\t\t\t\t\t\t(MethodHandles.Lookup) privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());\n+\t\t\t\tMethodHandles.Lookup lookup = (MethodHandles.Lookup)\n+\t\t\t\t\t\tprivateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());\n \t\t\t\tc = (Class) lookupDefineClassMethod.invoke(lookup, b);\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {\n-\t\t\t\tif (!(ex.getTargetException() instanceof IllegalArgumentException)) {\n-\t\t\t\t\tthrow new CodeGenerationException(ex.getTargetException());\n+\t\t\t\tThrowable target = ex.getTargetException();\n+\t\t\t\tif (target.getClass() != LinkageError.class && target.getClass() != IllegalArgumentException.class) {\n+\t\t\t\t\tthrow new CodeGenerationException(target);\n \t\t\t\t}\n-\t\t\t\t// in case of IllegalArgumentException: fall through to defineClass\n+\t\t\t\t// in case of plain LinkageError (class already defined)\n+\t\t\t\t// or IllegalArgumentException (class in different package):\n+\t\t\t\t// fall through to traditional ClassLoader.defineClass below\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tthrow new CodeGenerationException(ex);",
    "output": "Fallback to ClassLoader.defineClass for Lookup.defineClass LinkageError Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n--- a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n@@ -651,7 +651,7 @@ private Reference<K, V> findInChain(Reference<K, V> ref, @Nullable Object key, i\n \t\t\treturn null;\n \t\t}\n \n-\t\t@SuppressWarnings(\"unchecked\")\n+\t\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n \t\tprivate Reference<K, V>[] createReferenceArray(int size) {\n \t\t\treturn new Reference[size];\n \t\t}",
    "output": "Suppress rawtypes warning for createReferenceArray"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java b/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java\n--- a/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java\n+++ b/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java\n@@ -85,10 +85,9 @@ public ConcurrentModel addAttribute(String attributeName, @Nullable Object attri\n \t * the model when using this method because we cannot correctly determine\n \t * the true convention name. View code should check for {@code null} rather\n \t * than for empty collections as is already done by JSTL tags.</i>\n-\t * @param attributeValue the model attribute value (never {@code null} for {@code ConcurrentModel},\n-\t * with the {@code Nullable} declaration inherited from {@link Model#addAttribute(String, Object)})\n+\t * @param attributeValue the model attribute value (never {@code null})\n \t */\n-\tpublic ConcurrentModel addAttribute(@Nullable Object attributeValue) {\n+\tpublic ConcurrentModel addAttribute(Object attributeValue) {\n \t\tAssert.notNull(attributeValue, \"Model attribute value must not be null\");\n \t\tif (attributeValue instanceof Collection && ((Collection<?>) attributeValue).isEmpty()) {\n \t\t\treturn this;",
    "output": "Fix accidental @Nullable declaration on addAttribute(Object) Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -74,7 +74,8 @@ public ReactiveAdapterRegistry() {\n \t\tthis.reactorPresent = reactorRegistered;\n \n \t\t// RxJava1\n-\t\tif (ClassUtils.isPresent(\"rx.Observable\", classLoader)) {\n+\t\tif (ClassUtils.isPresent(\"rx.Observable\", classLoader) &&\n+\t\t\t\tClassUtils.isPresent(\"rx.RxReactiveStreams\", classLoader)) {\n \t\t\tnew RxJava1Registrar().registerAdapters(this);\n \t\t}\n ",
    "output": "Test RxReactiveStreams presence in ReactiveAdapterRegistry Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/Conventions.java b/spring-core/src/main/java/org/springframework/core/Conventions.java\n--- a/spring-core/src/main/java/org/springframework/core/Conventions.java\n+++ b/spring-core/src/main/java/org/springframework/core/Conventions.java\n@@ -41,8 +41,6 @@ public abstract class Conventions {\n \t */\n \tprivate static final String PLURAL_SUFFIX = \"List\";\n \n-\tprivate static final ReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();\n-\n \n \t/**\n \t * Determine the conventional variable name for the supplied {@code Object}\n@@ -116,7 +114,7 @@ else if (Collection.class.isAssignableFrom(parameter.getParameterType())) {\n \t\t}\n \t\telse {\n \t\t\tvalueClass = parameter.getParameterType();\n-\n+\t\t\tReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();\n \t\t\tif (reactiveAdapterRegistry.hasAdapters()) {\n \t\t\t\tReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);\n \t\t\t\tif (adapter != null && !adapter.getDescriptor().isNoValue()) {\n@@ -205,6 +203,7 @@ else if (Collection.class.isAssignableFrom(resolvedType)) {\n \t\t}\n \t\telse {\n \t\t\tvalueClass = resolvedType;\n+\t\t\tReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();\n \t\t\tif (reactiveAdapterRegistry.hasAdapters()) {\n \t\t\t\tReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);\n \t\t\t\tif (adapter != null && !adapter.getDescriptor().isNoValue()) {",
    "output": "Conventions lazily retrieves shared ReactiveAdapterRegistry Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -62,14 +62,12 @@ public static boolean canConvertElements(@Nullable TypeDescriptor sourceElementT\n \t\t\t// yes\n \t\t\treturn true;\n \t\t}\n-\t\telse if (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {\n+\t\tif (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {\n \t\t\t// maybe\n \t\t\treturn true;\n \t\t}\n-\t\telse {\n-\t\t\t// no\n-\t\t\treturn false;\n-\t\t}\n+\t\t// no\n+\t\treturn false;\n \t}\n \n \tpublic static Class<?> getEnumType(Class<?> targetType) {",
    "output": "Remove unneeded conditional logic Update `ConversionUtils` to remove conditional logic that isn't necessary. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n@@ -190,7 +190,7 @@ protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {\n \t\t}\n \n \t\tboolean debugLevel = (cause instanceof JsonMappingException &&\n-\t\t\t\tcause.getMessage().startsWith(\"Can not find\"));\n+\t\t\t\t(cause.getMessage().startsWith(\"Can not find\") || cause.getMessage().startsWith(\"Cannot find\")));\n \n \t\tif (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {\n \t\t\tString msg = \"Failed to evaluate Jackson \" + (type instanceof JavaType ? \"de\" : \"\") +",
    "output": "Support new exception message wording since Jackson 2.9 The wording changed from \"Can not find\" to \"Cannot find\" via PR Issues"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java\n@@ -119,6 +119,7 @@ protected Object extractSource(Element ele) {\n \t/**\n \t * Register each bean definition within the given root {@code <beans/>} element.\n \t */\n+\t@SuppressWarnings(\"deprecation\")  // for Environment.acceptsProfiles(String...)\n \tprotected void doRegisterBeanDefinitions(Element root) {\n \t\t// Any nested <beans> elements will cause recursion in this method. In\n \t\t// order to propagate and preserve <beans> default-* attributes correctly,",
    "output": "Suppress deprecation warning in DefaultBeanDefinitionDocumentReader Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -444,9 +444,15 @@ public static MethodArgumentBuilder fromMappingName(String mappingName) {\n \t */\n \tpublic static MethodArgumentBuilder fromMappingName(@Nullable UriComponentsBuilder builder, String name) {\n \t\tWebApplicationContext wac = getWebApplicationContext();\n-\t\tAssert.notNull(wac, \"Cannot lookup handler method mappings without WebApplicationContext\");\n-\t\tRequestMappingInfoHandlerMapping mapping = wac.getBean(RequestMappingInfoHandlerMapping.class);\n-\t\tList<HandlerMethod> handlerMethods = mapping.getHandlerMethodsForMappingName(name);\n+\t\tAssert.notNull(wac, \"No WebApplicationContext. \");\n+\t\tMap<String, RequestMappingInfoHandlerMapping> map = wac.getBeansOfType(RequestMappingInfoHandlerMapping.class);\n+\t\tList<HandlerMethod> handlerMethods = null;\n+\t\tfor (RequestMappingInfoHandlerMapping mapping : map.values()) {\n+\t\t\thandlerMethods = mapping.getHandlerMethodsForMappingName(name);\n+\t\t\tif (handlerMethods != null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n \t\tif (handlerMethods == null) {\n \t\t\tthrow new IllegalArgumentException(\"Mapping not found: \" + name);\n \t\t}",
    "output": "Check all HandlerMapping beans for named mappings Related to (but not required by)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n@@ -365,6 +365,10 @@ protected Class<? extends Throwable> getExpectedException(FrameworkMethod framew\n \t * @see #getJUnitTimeout(FrameworkMethod)\n \t */\n \t@Override\n+\t// Retain the following warning suppression for deprecation (even if Eclipse\n+\t// states it is unnecessary) since withPotentialTimeout(FrameworkMethod,Object,Statement)\n+\t// in BlockJUnit4ClassRunner has been deprecated.\n+\t@SuppressWarnings(\"deprecation\")\n \tprotected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {\n \t\tStatement statement = null;\n \t\tlong springTimeout = getSpringTimeout(frameworkMethod);",
    "output": "Reintroduce suppression of deprecation warning"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java\n@@ -26,8 +26,6 @@\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpServletResponseWrapper;\n \n-import org.apache.tools.ant.dispatch.Dispatchable;\n-\n import org.springframework.beans.Mergeable;\n import org.springframework.lang.Nullable;\n import org.springframework.mock.web.MockFilterChain;",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -227,6 +227,9 @@ public Executable getExecutable() {\n \t * @since 5.0\n \t */\n \tpublic Parameter getParameter() {\n+\t\tif (this.parameterIndex < 0) {\n+\t\t\tthrow new IllegalStateException(\"Cannot retrieve Parameter descriptor for method return type\");\n+\t\t}\n \t\tParameter parameter = this.parameter;\n \t\tif (parameter == null) {\n \t\t\tparameter = getExecutable().getParameters()[this.parameterIndex];\n@@ -597,6 +600,9 @@ public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer paramet\n \t */\n \t@Nullable\n \tpublic String getParameterName() {\n+\t\tif (this.parameterIndex < 0) {\n+\t\t\treturn null;\n+\t\t}\n \t\tParameterNameDiscoverer discoverer = this.parameterNameDiscoverer;\n \t\tif (discoverer != null) {\n \t\t\tString[] parameterNames = null;\n@@ -735,7 +741,8 @@ protected static int findParameterIndex(Parameter parameter) {\n \n \tprivate static int validateIndex(Executable executable, int parameterIndex) {\n \t\tint count = executable.getParameterCount();\n-\t\tAssert.isTrue(parameterIndex < count, () -> \"Parameter index needs to be between -1 and \" + (count - 1));\n+\t\tAssert.isTrue(parameterIndex >= -1 && parameterIndex < count,\n+\t\t\t\t() -> \"Parameter index needs to be between -1 and \" + (count - 1));\n \t\treturn parameterIndex;\n \t}\n ",
    "output": "MethodParameter strictly asserts parameter index -1 for return type Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -94,7 +94,7 @@\n  * @see AnnotationUtils\n  * @see BridgeMethodResolver\n  */\n-public class AnnotatedElementUtils {\n+public abstract class AnnotatedElementUtils {\n \n \t/**\n \t * {@code null} constant used to denote that the search algorithm should continue.",
    "output": "Prevent instantiation of AnnotatedElementUtils"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -436,13 +436,11 @@ protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {\n \t * Return class methods ordered with non-bridge methods appearing higher.\n \t */\n \tprivate Method[] getSortedMethods(Class<?> clazz) {\n-\t\tMethod[] methods = this.sortedMethodsCache.get(clazz);\n-\t\tif (methods == null) {\n-\t\t\tmethods = clazz.getMethods();\n+\t\treturn this.sortedMethodsCache.computeIfAbsent(clazz, key -> {\n+\t\t\tMethod[] methods = key.getMethods();\n \t\t\tArrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)));\n-\t\t\tthis.sortedMethodsCache.put(clazz, methods);\n-\t\t}\n-\t\treturn methods;\n+\t\t\treturn methods;\n+\t\t});\n \t}\n \n \t/**",
    "output": "ReflectivePropertyAccessor uses computeIfAbsent for cache computation Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -354,7 +354,9 @@ public void start() {\n \t\t\t}\n \t\t\tCollections.sort(this.members);\n \t\t\tfor (LifecycleGroupMember member : this.members) {\n-\t\t\t\tdoStart(this.lifecycleBeans, member.name, this.autoStartupOnly);\n+\t\t\t\tif (this.lifecycleBeans.containsKey(member.name)) {\n+\t\t\t\t\tdoStart(this.lifecycleBeans, member.name, this.autoStartupOnly);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n@@ -369,7 +371,13 @@ public void stop() {\n \t\t\tCountDownLatch latch = new CountDownLatch(this.smartMemberCount);\n \t\t\tSet<String> countDownBeanNames = Collections.synchronizedSet(new LinkedHashSet<>());\n \t\t\tfor (LifecycleGroupMember member : this.members) {\n-\t\t\t\tdoStop(this.lifecycleBeans, member.name, latch, countDownBeanNames);\n+\t\t\t\tif (this.lifecycleBeans.containsKey(member.name)) {\n+\t\t\t\t\tdoStop(this.lifecycleBeans, member.name, latch, countDownBeanNames);\n+\t\t\t\t}\n+\t\t\t\telse if (member.bean instanceof SmartLifecycle) {\n+\t\t\t\t\t// Already removed: must have been a dependent bean from another phase\n+\t\t\t\t\tlatch.countDown();\n+\t\t\t\t}\n \t\t\t}\n \t\t\ttry {\n \t\t\t\tlatch.await(this.timeout, TimeUnit.MILLISECONDS);",
    "output": "Restore original DefaultLifecycleProcessor behavior for the time being Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java\n--- a/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -120,7 +120,7 @@ public T extractData(ClientHttpResponse response) throws IOException {\n \t\t\t\t\"for response type [\" + this.responseType + \"] and content type [\" + contentType + \"]\");\n \t}\n \n-\tprivate MediaType getContentType(ClientHttpResponse response) {\n+\tprotected MediaType getContentType(ClientHttpResponse response) {\n \t\tMediaType contentType = response.getHeaders().getContentType();\n \t\tif (contentType == null) {\n \t\t\tif (logger.isTraceEnabled()) {",
    "output": "Extension point in HttpMessageConverterExtractor"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java\n@@ -396,6 +396,10 @@ public void accept(Visitor visitor) {\n \t\t\tthis.routerFunction.accept(visitor);\n \t\t}\n \n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn this.routerFunction.toString();\n+\t\t}\n \t}\n \n \tprivate static final class DefaultRouterFunction<T extends ServerResponse>",
    "output": "Improve toString for filtered router function Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,6 +78,7 @@ public abstract class SharedEntityManagerCreator {\n \t\ttransactionRequiringMethods.add(\"remove\");\n \t\ttransactionRequiringMethods.add(\"refresh\");\n \n+\t\tqueryTerminatingMethods.add(\"execute\");  // JPA 2.1 StoredProcedureQuery\n \t\tqueryTerminatingMethods.add(\"executeUpdate\");\n \t\tqueryTerminatingMethods.add(\"getSingleResult\");\n \t\tqueryTerminatingMethods.add(\"getResultList\");",
    "output": "Query termination for JPA 2.1 StoredProcedureQuery.executemethod Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -862,10 +862,10 @@ public interface FieldFilter {\n \n \n \t/**\n-\t * Pre-built MethodFilter that matches all non-bridge methods\n+\t * Pre-built MethodFilter that matches all non-bridge non-synthetic methods\n \t * which are not declared on {@code java.lang.Object}.\n \t */\n \tpublic static final MethodFilter USER_DECLARED_METHODS =\n-\t\t\t(method -> (!method.isBridge() && method.getDeclaringClass() != Object.class));\n+\t\t\t(method -> (!method.isBridge() && !method.isSynthetic() && method.getDeclaringClass() != Object.class));\n \n }",
    "output": "Filter synthetic in ReflectionUtils#USER_DECLARED_METHODS Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -201,7 +201,7 @@ private String registerResourceHandler(ParserContext context, Element element,\n \n \n \tprivate CacheControl parseCacheControl(Element element) {\n-\t\tCacheControl cacheControl = CacheControl.empty();\n+\t\tCacheControl cacheControl;\n \t\tif (\"true\".equals(element.getAttribute(\"no-cache\"))) {\n \t\t\tcacheControl = CacheControl.noCache();\n \t\t}\n@@ -211,6 +211,10 @@ else if (\"true\".equals(element.getAttribute(\"no-store\"))) {\n \t\telse if (element.hasAttribute(\"max-age\")) {\n \t\t\tcacheControl = CacheControl.maxAge(Long.parseLong(element.getAttribute(\"max-age\")), TimeUnit.SECONDS);\n \t\t}\n+\t\telse {\n+\t\t\tcacheControl = CacheControl.empty();\n+\t\t}\n+\t\t\n \t\tif (\"true\".equals(element.getAttribute(\"must-revalidate\"))) {\n \t\t\tcacheControl = cacheControl.mustRevalidate();\n \t\t}",
    "output": "Put CacheControl.emptyin else part. Make sure the constructor of `CacheControl` being invoked only once"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -265,7 +265,7 @@ else if (isTwoCharToken(TokenKind.SAFE_NAVI)) {\n \t\t\t\t\t\traiseParseException(this.pos, SpelMessage.UNEXPECTED_ESCAPE_CHAR);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n-\t\t\t\t\t\tthrow new IllegalStateException(\"Cannot handle (\" + Integer.valueOf(ch) + \") '\" + ch + \"'\");\n+\t\t\t\t\t\tthrow new IllegalStateException(\"Cannot handle ('\" + ch + \"')\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Remove unnecessary boxing"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java\n@@ -28,7 +28,6 @@\n import org.apache.commons.logging.LogFactory;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TestName;\n@@ -103,7 +102,6 @@ public void tearDown() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore // https://github.com/reactor/reactor-core/issues/1184\n \tpublic void publishSubscribe() throws Exception {\n \t\tString destination = \"/topic/foo\";\n \t\tConsumingHandler consumingHandler1 = new ConsumingHandler(destination);",
    "output": "Uncomment ignored test after Reactor Core fix"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClientTests.java\n@@ -28,6 +28,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TestName;\n@@ -102,6 +103,7 @@ public void tearDown() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore // https://github.com/reactor/reactor-core/issues/1184\n \tpublic void publishSubscribe() throws Exception {\n \t\tString destination = \"/topic/foo\";\n \t\tConsumingHandler consumingHandler1 = new ConsumingHandler(destination);",
    "output": "@Ignore failing test from reactor-core regression"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -209,14 +209,18 @@ public static String trimWhitespace(String str) {\n \t\t\treturn str;\n \t\t}\n \n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {\n-\t\t\tsb.deleteCharAt(0);\n+\t\tint beginIndex = 0;\n+\t\tint endIndex = str.length() - 1;\n+\n+\t\twhile (beginIndex <= endIndex && Character.isWhitespace(str.charAt(beginIndex))) {\n+\t\t\tbeginIndex++;\n \t\t}\n-\t\twhile (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n-\t\t\tsb.deleteCharAt(sb.length() - 1);\n+\n+\t\twhile (endIndex > beginIndex && Character.isWhitespace(str.charAt(endIndex))) {\n+\t\t\tendIndex--;\n \t\t}\n-\t\treturn sb.toString();\n+\n+\t\treturn str.substring(beginIndex, endIndex + 1);\n \t}\n \n \t/**",
    "output": "Improve performance of StringUtils#trimWhitespace Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java\n@@ -613,6 +613,7 @@ public Completable createWithSingle(@RequestBody Single<Person> single) {\n \t\t}\n \n \t\t@PostMapping(\"/rxjava2-single\")\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic io.reactivex.Completable createWithRxJava2Single(@RequestBody io.reactivex.Single<Person> single) {\n \t\t\treturn single.map(persons::add).toCompletable();\n \t\t}\n@@ -628,13 +629,15 @@ public Observable<Void> createWithObservable(@RequestBody Observable<Person> obs\n \t\t}\n \n \t\t@PostMapping(\"/rxjava2-observable\")\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic io.reactivex.Completable createWithRxJava2Observable(\n \t\t\t\t@RequestBody io.reactivex.Observable<Person> observable) {\n \n \t\t\treturn observable.toList().doOnSuccess(persons::addAll).toCompletable();\n \t\t}\n \n \t\t@PostMapping(\"/flowable\")\n+\t\t@SuppressWarnings(\"deprecation\")\n \t\tpublic io.reactivex.Completable createWithFlowable(@RequestBody Flowable<Person> flowable) {\n \t\t\treturn flowable.toList().doOnSuccess(persons::addAll).toCompletable();\n \t\t}",
    "output": "Suppress warnings in RequestMappingMessageConversionIntegrationTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java\n@@ -220,7 +220,25 @@ protected ResourceBundle getResourceBundle(String basename, Locale locale) {\n \tprotected ResourceBundle doGetBundle(String basename, Locale locale) throws MissingResourceException {\n \t\tClassLoader classLoader = getBundleClassLoader();\n \t\tAssert.state(classLoader != null, \"No bundle ClassLoader set\");\n-\t\treturn ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl());\n+\t\tString defaultEncoding = getDefaultEncoding();\n+\n+\t\tif ((defaultEncoding != null && !\"ISO-8859-1\".equals(defaultEncoding)) ||\n+\t\t\t\t!isFallbackToSystemLocale() || getCacheMillis() >= 0) {\n+\t\t\ttry {\n+\t\t\t\treturn ResourceBundle.getBundle(basename, locale, classLoader, new MessageSourceControl());\n+\t\t\t}\n+\t\t\tcatch (UnsupportedOperationException ex) {\n+\t\t\t\t// Probably in a Jigsaw environment on JDK 9+\n+\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Custom ResourceBundleMessageSource configuration requires custom ResourceBundle.Control \" +\n+\t\t\t\t\t\t\"which is not supported in current system environment (e.g. JDK 9+ module path deployment): \" +\n+\t\t\t\t\t\t\"consider using defaults (ISO-8859-1 encoding, fallback to system locale, unlimited caching)\",\n+\t\t\t\t\t\tex);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\treturn ResourceBundle.getBundle(basename, locale, classLoader);\n+\t\t}\n \t}\n \n \t/**",
    "output": "Avoid custom ResourceBundle.Control on Jigsaw (as far as possible) Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n@@ -63,13 +63,14 @@ class DefaultWebClientBuilder implements WebClient.Builder {\n \t@Nullable\n \tprivate ClientHttpConnector connector;\n \n-\tprivate ExchangeStrategies exchangeStrategies = ExchangeStrategies.withDefaults();\n+\tprivate ExchangeStrategies exchangeStrategies;\n \n \t@Nullable\n \tprivate ExchangeFunction exchangeFunction;\n \n \n \tpublic DefaultWebClientBuilder() {\n+\t\tthis.exchangeStrategies = ExchangeStrategies.withDefaults();\n \t}\n \n \tpublic DefaultWebClientBuilder(DefaultWebClientBuilder other) {",
    "output": "Move init of excchangeStrategies to default ctor in DefaultWebClientBuilder When the copy constructor is used the exchangeStrategies need not to be initialized as they are set in the copyconstructor fixes"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -143,7 +143,11 @@ protected void registerEndpoints() {\n \n \tprivate void registerEndpoint(Class<?> endpointClass) {\n \t\tServerContainer serverContainer = getServerContainer();\n-\t\tAssert.state(serverContainer != null, \"No ServerContainer set\");\n+\t\tAssert.state(serverContainer != null,\n+\t\t\t\t\"No ServerContainer set. Most likely the server's own WebSocket ServletContainerInitializer \" +\n+\t\t\t\t\t\t\"has not run yet. Was the Spring ApplicationContext refreshed through a \" +\n+\t\t\t\t\t\t\"org.springframework.web.context.ContextLoaderListener, \" +\n+\t\t\t\t\t\t\"i.e. after the ServletContext has been fully initialized?\");\n \t\ttry {\n \t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(\"Registering @ServerEndpoint class: \" + endpointClass);",
    "output": "Add more detail to ISE in ServerEndpointExporter Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java\n@@ -107,7 +107,7 @@ public Integer getPriority(Object obj) {\n \t\t}\n \t\tInteger priority = OrderUtils.getPriority(obj.getClass());\n \t\tif (priority == null && obj instanceof DecoratingProxy) {\n-\t\t\tpriority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass());\n+\t\t\tpriority = OrderUtils.getPriority(((DecoratingProxy) obj).getDecoratedClass());\n \t\t}\n \t\treturn priority;\n \t}",
    "output": "Correctly delegate to OrderUtils.getPriority for DecoratingProxy Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -555,13 +555,18 @@ public static <A extends Annotation> A findAnnotation(Method method, @Nullable C\n \t\t\t\tif (clazz == null || Object.class == clazz) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tMethod equivalentMethod = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());\n-\t\t\t\t\tMethod resolvedEquivalentMethod = BridgeMethodResolver.findBridgedMethod(equivalentMethod);\n-\t\t\t\t\tresult = findAnnotation((AnnotatedElement) resolvedEquivalentMethod, annotationType);\n-\t\t\t\t}\n-\t\t\t\tcatch (NoSuchMethodException ex) {\n-\t\t\t\t\t// No equivalent method found\n+\t\t\t\tSet<Method> annotatedMethods = getAnnotatedMethodsInBaseType(clazz);\n+\t\t\t\tif (!annotatedMethods.isEmpty()) {\n+\t\t\t\t\tfor (Method annotatedMethod : annotatedMethods) {\n+\t\t\t\t\t\tif (annotatedMethod.getName().equals(method.getName()) &&\n+\t\t\t\t\t\t\t\tArrays.equals(annotatedMethod.getParameterTypes(), method.getParameterTypes())) {\n+\t\t\t\t\t\t\tMethod resolvedSuperMethod = BridgeMethodResolver.findBridgedMethod(annotatedMethod);\n+\t\t\t\t\t\t\tresult = findAnnotation((AnnotatedElement) resolvedSuperMethod, annotationType);\n+\t\t\t\t\t\t\tif (result != null) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (result == null) {\n \t\t\t\t\tresult = searchOnInterfaces(method, annotationType, clazz.getInterfaces());",
    "output": "Avoid repeated superclass introspection in findAnnotation(Method,...) Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.java\n@@ -32,7 +32,6 @@\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.PatternMatchUtils;\n-import org.springframework.util.ReflectionUtils;\n \n /**\n  * Simple {@link TransactionAttributeSource} implementation that\n@@ -145,7 +144,7 @@ public void addTransactionalMethod(Class<?> clazz, String mappedName, Transactio\n \t\tAssert.notNull(mappedName, \"Mapped name must not be null\");\n \t\tString name = clazz.getName() + '.'  + mappedName;\n \n-\t\tMethod[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);\n+\t\tMethod[] methods = clazz.getDeclaredMethods();\n \t\tList<Method> matchingMethods = new ArrayList<>();\n \t\tfor (Method method : methods) {\n \t\t\tif (isMatch(method.getName(), mappedName)) {",
    "output": "Restore original MethodMapTransactionAttributeSource matching rules Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java\n@@ -84,6 +84,7 @@ public void noExceptionThrownIfNoUserExceptionAndTimeoutDoesNotOccur() throws Th\n \t\tnew SpringFailOnTimeout(statement, 100).evaluate();\n \t}\n \n+\t@SuppressWarnings(\"serial\")\n \tprivate static class Boom extends RuntimeException {\n \t}\n ",
    "output": "Suppress warning in SpringFailOnTimeoutTests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeoutTests.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.test.context.junit4.spr16716;\n+package org.springframework.test.context.junit4.statements;\n \n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;",
    "output": "Move SpringFailOnTimeoutTests to 'statements' package"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -166,7 +166,8 @@ public static <A extends Annotation> A getAnnotation(Annotation annotation, Clas\n \t\t}\n \t\tClass<? extends Annotation> annotatedElement = annotation.annotationType();\n \t\ttry {\n-\t\t\treturn synthesizeAnnotation(annotatedElement.getAnnotation(annotationType), annotatedElement);\n+\t\t\tA metaAnn = annotatedElement.getAnnotation(annotationType);\n+\t\t\treturn (metaAnn != null ? synthesizeAnnotation(metaAnn, annotatedElement) : null);\n \t\t}\n \t\tcatch (Throwable ex) {\n \t\t\thandleIntrospectionFailure(annotatedElement, ex);",
    "output": "AnnotationUtils.getAnnotation non-null check for synthesizeAnnotation Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java\n@@ -273,7 +273,7 @@ public interface Builder {\n \t\tBuilder session(WebSession session);\n \n \t\t/**\n-\t\t * @deprecated  in favor of {@link #principal(Principal)}\n+\t\t * @deprecated in favor of {@link #principal(Principal)}\n \t\t */\n \t\t@Deprecated\n \t\tBuilder session(Principal principal);\n@@ -421,6 +421,7 @@ public Builder session(WebSession session) {\n \t\t}\n \n \t\t@Override\n+\t\t@Deprecated\n \t\tpublic Builder session(Principal principal) {\n \t\t\treturn principal(principal);\n \t\t}\n@@ -542,5 +543,4 @@ public HttpHeaders getHeaders() {\n \t\t}\n \t}\n \n-\n }",
    "output": "Clean up deprecation warning in spring-test"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -126,6 +126,9 @@ public abstract class AnnotationUtils {\n \tprivate static final Map<Class<?>, Set<Method>> annotatedBaseTypeCache =\n \t\t\tnew ConcurrentReferenceHashMap<>(256);\n \n+\t@Deprecated  // just here for older tool versions trying to reflectively clear the cache\n+\tprivate static final Map<Class<?>, ?> annotatedInterfaceCache = annotatedBaseTypeCache;\n+\n \tprivate static final Map<Class<? extends Annotation>, Boolean> synthesizableCache =\n \t\t\tnew ConcurrentReferenceHashMap<>(256);\n ",
    "output": "AnnotationUtils.annotatedInterfaceCache available as deprecated field Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -237,13 +237,14 @@ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasInt\n \t\t}\n \n \t\tSet<Class<?>> classes = new LinkedHashSet<>(ClassUtils.getAllInterfacesForClassAsSet(targetClass));\n-\t\tclasses.add(targetClass);\n+\t\tClass<?> userClass = ClassUtils.getUserClass(targetClass);\n+\t\tclasses.add(userClass);\n \t\tfor (Class<?> clazz : classes) {\n \t\t\tMethod[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);\n \t\t\tfor (Method method : methods) {\n \t\t\t\tif ((introductionAwareMethodMatcher != null &&\n-\t\t\t\t\t\tintroductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||\n-\t\t\t\t\t\tmethodMatcher.matches(method, targetClass)) {\n+\t\t\t\t\t\tintroductionAwareMethodMatcher.matches(method, userClass, hasIntroductions)) ||\n+\t\t\t\t\t\tmethodMatcher.matches(method, userClass)) {\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}",
    "output": "Pointcut checking directly against superclass in case of CGLIB subclass Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java\n@@ -103,11 +103,12 @@ private void assertFooPart(Part part) {\n \t\t\tassertEquals(\"fooPart\", part.name());\n \t\t\tassertTrue(part instanceof FilePart);\n \t\t\tassertEquals(\"foo.txt\", ((FilePart) part).filename());\n-\t\t\tDataBuffer buffer = DataBufferUtils.join(part.content()).block();\n-\t\t\tassertEquals(12, buffer.readableByteCount());\n-\t\t\tbyte[] byteContent = new byte[12];\n-\t\t\tbuffer.read(byteContent);\n-\t\t\tassertEquals(\"Lorem Ipsum.\", new String(byteContent));\n+\t\t\tDataBufferUtils.join(part.content()).subscribe(buffer -> {\n+\t\t\t\tassertEquals(12, buffer.readableByteCount());\n+\t\t\t\tbyte[] byteContent = new byte[12];\n+\t\t\t\tbuffer.read(byteContent);\n+\t\t\t\tassertEquals(\"Lorem Ipsum.\", new String(byteContent));\n+\t\t\t});\n \t\t}\n \n \t\tprivate void assertBarPart(Part part) {",
    "output": "workaround multipart integration test using blocking receive inside netty thread"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java\n@@ -21,6 +21,7 @@\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+import java.util.function.BiConsumer;\n \n /**\n  * Adapts a {@link CompletableFuture} or {@link CompletionStage} into a\n@@ -50,14 +51,13 @@ public CompletableToListenableFutureAdapter(CompletionStage<T> completionStage)\n \t */\n \tpublic CompletableToListenableFutureAdapter(CompletableFuture<T> completableFuture) {\n \t\tthis.completableFuture = completableFuture;\n-\t\tthis.completableFuture.handle((result, ex) -> {\n+\t\tthis.completableFuture.whenComplete((result, ex) -> {\n \t\t\tif (ex != null) {\n \t\t\t\tcallbacks.failure(ex);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tcallbacks.success(result);\n \t\t\t}\n-\t\t\treturn null;\n \t\t});\n \t}\n ",
    "output": "Use whenComplete since (null) return value not needed"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/SingleColumnRowMapperTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/SingleColumnRowMapperTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/SingleColumnRowMapperTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/SingleColumnRowMapperTests.java\n@@ -36,7 +36,7 @@\n  * @author Kazuki Shimizu\n  * @since 5.0.4\n  */\n-public class SingleColumnRowMapperTest {\n+public class SingleColumnRowMapperTests {\n \n \t@Test // SPR-16483\n \tpublic void useDefaultConversionService() throws SQLException {",
    "output": "Rename SingleColumnRowMapperTest to align with the other tests"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -240,7 +240,7 @@ private static void setParameterValueInternal(PreparedStatement ps, int paramInd\n \tprivate static void setNull(PreparedStatement ps, int paramIndex, int sqlType, @Nullable String typeName)\n \t\t\tthrows SQLException {\n \n-\t\tif (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) {\n+\t\tif (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && typeName == null)) {\n \t\t\tboolean useSetObject = false;\n \t\t\tInteger sqlTypeToUse = null;\n \t\t\tif (!shouldIgnoreGetParameterType) {",
    "output": "Pass type name into PreparedStatement.setNull in case of Types.OTHER Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java\n@@ -164,7 +164,7 @@ public ResultActions perform(RequestBuilder requestBuilder) throws Exception {\n \t\tfilterChain.doFilter(request, servletResponse);\n \n \t\tif (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&\n-\t\t\t\tasyncContext != null & !request.isAsyncStarted()) {\n+\t\t\t\tasyncContext != null && !request.isAsyncStarted()) {\n \t\t\tasyncContext.complete();\n \t\t}\n ",
    "output": "Short-circuit logic should be used in boolean contexts"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java\n@@ -373,7 +373,7 @@ public static Object[] setupArgumentsForVarargsInvocation(Class<?>[] requiredPar\n \t}\n \n \n-\tstatic enum ArgumentsMatchKind {\n+\tenum ArgumentsMatchKind {\n \n \t\t/** An exact match is where the parameter types exactly match what the method/constructor is expecting */\n \t\tEXACT,",
    "output": "Nested \"enum\"s should not be declared static"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n@@ -115,7 +115,9 @@ protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanNam\n \t\t\t\t\t\t\t\t\t\t\"Post-processing of FactoryBean's singleton object failed\", ex);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tthis.factoryBeanObjectCache.put(beanName, object);\n+\t\t\t\t\t\tif (containsSingleton(beanName)) {\n+\t\t\t\t\t\t\tthis.factoryBeanObjectCache.put(beanName, object);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn object;",
    "output": "Defensive containsSingleton cache guard within getObjectFromFactoryBean Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n@@ -284,16 +284,7 @@ private boolean isInvalidEncodedPath(String resourcePath) {\n \t\t\t// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars...\n \t\t\ttry {\n \t\t\t\tString decodedPath = URLDecoder.decode(resourcePath, \"UTF-8\");\n-\t\t\t\tint separatorIndex = decodedPath.indexOf(\"..\") + 2;\n-\t\t\t\tif (separatorIndex > 1 && separatorIndex < decodedPath.length()) {\n-\t\t\t\t\tchar separator = decodedPath.charAt(separatorIndex);\n-\t\t\t\t\tif (separator == '/' || separator == '\\\\') {\n-\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\t\tlogger.trace(\"Resolved resource path contains \\\"../\\\" after decoding: \" + resourcePath);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n+\t\t\t\treturn (decodedPath.contains(\"../\") || decodedPath.contains(\"..\\\\\"));\n \t\t\t}\n \t\t\tcatch (UnsupportedEncodingException ex) {\n \t\t\t\t// Should never happen...",
    "output": "Simplify separator check within isInvalidEncodedPath Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java\n@@ -18,6 +18,7 @@\n \n import java.nio.charset.StandardCharsets;\n import java.nio.charset.UnsupportedCharsetException;\n+import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -45,7 +46,7 @@ public abstract class MimeTypeUtils {\n \t\t\t\t\t'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n \t\t\t\t\t'V', 'W', 'X', 'Y', 'Z'};\n \n-\tprivate static final Random RND = new Random();\n+\tprivate static final Random RND = new SecureRandom();\n \n \t/**\n \t * Comparator used by {@link #sortBySpecificity(List)}.",
    "output": "MimeTypeUtils uses SecureRandom The prevailing current wisdom is to use the default constructor for secure and let it pick the best algorithm for the OS. On Java 8 (Oracle), Linux this results in \"NativePRNG\" which uses /dev/random (potentially blocking) for the initial seed, and /dev/urandom (non-blocking) for subsequent calls to nextInt. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -300,7 +300,13 @@ else if (args != null) {\n \t\t\t\t\t\t\t\t\t\"Circular depends-on relationship between '\" + beanName + \"' and '\" + dep + \"'\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tregisterDependentBean(dep, beanName);\n-\t\t\t\t\t\tgetBean(dep);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tgetBean(dep);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n+\t\t\t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n+\t\t\t\t\t\t\t\t\t\"'\" + beanName + \"' depends on missing bean '\" + dep + \"'\", ex);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n ",
    "output": "Contextual BeanCreationException in case of depending on a missing bean Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -139,7 +139,7 @@ public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer,\n \t\t\tbuilder.loopResources(this.loopResources);\n \n \t\t\tif (!builder.isPoolDisabled()) {\n-\t\t\t\tthis.poolResources = PoolResources.fixed(\"tcp-client-pool\");\n+\t\t\t\tthis.poolResources = PoolResources.elastic(\"tcp-client-pool\");\n \t\t\t\tbuilder.poolResources(this.poolResources);\n \t\t\t}\n \t\t};",
    "output": "ReactorNettyTcpClient uses elastic pool Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -174,7 +174,12 @@ private boolean changeState(State oldState, State newState) {\n \n \tprivate void changeToDemandState(State oldState) {\n \t\tif (changeState(oldState, State.DEMAND)) {\n-\t\t\tcheckOnDataAvailable();\n+\t\t\t// Protect from infinite recursion in Undertow, where we can't check if data\n+\t\t\t// is available, so all we can do is to try to read.\n+\t\t\t// Generally, no need to check if we just came out of readAndPublish()...\n+\t\t\tif (!oldState.equals(State.READING)) {\n+\t\t\t\tcheckOnDataAvailable();\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Avoid inifinite recursion in UndertowServerHttpRequest Undertow does not provide a way to check if data is available to read but instead we have to try to read and see if any data is returned. This makes it impossible to implement checkOnDataAvailable without trying to read and that can lead to infinite recursion like this ... UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319) AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) This commit prevent the call to checkOnDataAvailablewhen switching states from READING->DEMAND which implies we exited the readAndPublish loop because there was no more data to read. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -912,7 +912,8 @@ public static boolean isInJavaLangAnnotationPackage(@Nullable String annotationT\n \t */\n \tpublic static void validateAnnotation(Annotation annotation) {\n \t\tfor (Method method : getAttributeMethods(annotation.annotationType())) {\n-\t\t\tif (method.getReturnType() == Class.class) {\n+\t\t\tClass<?> returnType = method.getReturnType();\n+\t\t\tif (returnType == Class.class || returnType == Class[].class) {\n \t\t\t\ttry {\n \t\t\t\t\tmethod.invoke(annotation);\n \t\t\t\t}",
    "output": "Validate Class attributes as well as Class array attributes Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java\n@@ -76,16 +76,14 @@ public HttpStatus getStatusCode() {\n \tpublic MultiValueMap<String, ResponseCookie> getCookies() {\n \t\tMultiValueMap<String, ResponseCookie> result = new LinkedMultiValueMap<>();\n \t\tthis.response.cookies().values().stream().flatMap(Collection::stream)\n-\t\t\t\t.forEach(cookie -> {\n-\t\t\t\t\tResponseCookie responseCookie = ResponseCookie.from(cookie.name(), cookie.value())\n+\t\t\t\t.forEach(cookie ->\n+\t\t\t\t\tresult.add(cookie.name(), ResponseCookie.from(cookie.name(), cookie.value())\n \t\t\t\t\t\t\t.domain(cookie.domain())\n \t\t\t\t\t\t\t.path(cookie.path())\n \t\t\t\t\t\t\t.maxAge(cookie.maxAge())\n \t\t\t\t\t\t\t.secure(cookie.isSecure())\n \t\t\t\t\t\t\t.httpOnly(cookie.isHttpOnly())\n-\t\t\t\t\t\t\t.build();\n-\t\t\t\t\tresult.add(cookie.name(), responseCookie);\n-\t\t\t\t});\n+\t\t\t\t\t\t\t.build()));\n \t\treturn CollectionUtils.unmodifiableMultiValueMap(result);\n \t}\n ",
    "output": "simplify lambda expression"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n@@ -142,7 +142,7 @@ public void accept(FluxSink<Part> emitter) {\n \t\t\t\tfinally {\n \t\t\t\t\tDataBufferUtils.release(buffer);\n \t\t\t\t}\n-\t\t\t}, (ex) -> {\n+\t\t\t}, ex -> {\n \t\t\t\ttry {\n \t\t\t\t\tlistener.onError(\"Request body input error\", ex);\n \t\t\t\t\tparser.close();\n\ndiff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java\n@@ -58,7 +58,7 @@ default RequestPredicate and(RequestPredicate other) {\n \t * @return a predicate that represents the logical negation of this predicate\n \t */\n \tdefault RequestPredicate negate() {\n-\t\treturn (t) -> !test(t);\n+\t\treturn t -> !test(t);\n \t}\n \n \t/**",
    "output": "parentheses should be removed from a single lambda input parameter when its type is inferred"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java\n@@ -91,13 +91,13 @@ public Object getTarget() {\n \t\t\t\tif (target == null) {\n \t\t\t\t\tClass<?> type = getTargetClass();\n \t\t\t\t\tif (Map.class == type) {\n-\t\t\t\t\t\treturn Collections.EMPTY_MAP;\n+\t\t\t\t\t\treturn Collections.emptyMap();\n \t\t\t\t\t}\n \t\t\t\t\telse if (List.class == type) {\n-\t\t\t\t\t\treturn Collections.EMPTY_LIST;\n+\t\t\t\t\t\treturn Collections.emptyList();\n \t\t\t\t\t}\n \t\t\t\t\telse if (Set.class == type || Collection.class == type) {\n-\t\t\t\t\t\treturn Collections.EMPTY_SET;\n+\t\t\t\t\t\treturn Collections.emptySet();\n \t\t\t\t\t}\n \t\t\t\t\tthrow new NoSuchBeanDefinitionException(descriptor.getResolvableType(),\n \t\t\t\t\t\t\t\"Optional dependency not present for lazy injection point\");",
    "output": "use more modern java API for empty collections"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.function.Supplier;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -94,8 +95,15 @@ public class TestContextManager {\n \n \tprivate final TestContext testContext;\n \n-\tprivate final ThreadLocal<TestContext> testContextHolder =\n-\t\t\tThreadLocal.withInitial(() -> copyTestContext(TestContextManager.this.testContext));\n+\tprivate final ThreadLocal<TestContext> testContextHolder = ThreadLocal.withInitial(\n+\t\t\t// Implemented as an anonymous inner class instead of a lambda expression due to a bug\n+\t\t\t// in Eclipse IDE: \"The blank final field testContext may not have been initialized\"\n+\t\t\tnew Supplier<TestContext>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic TestContext get() {\n+\t\t\t\t\treturn copyTestContext(TestContextManager.this.testContext);\n+\t\t\t\t}\n+\t\t\t});\n \n \tprivate final List<TestExecutionListener> testExecutionListeners = new ArrayList<>();\n ",
    "output": "Allow TestContextManager to be compiled in Eclipse again"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n@@ -263,7 +263,7 @@ public void registerReadListener() throws IOException {\n \n \t\t@Override\n \t\tprotected void checkOnDataAvailable() {\n-\t\t\tif (!this.inputStream.isFinished() && this.inputStream.isReady()) {\n+\t\t\tif (this.inputStream.isReady() && !this.inputStream.isFinished()) {\n \t\t\t\tonDataAvailable();\n \t\t\t}\n \t\t}",
    "output": "Invert the check for ServletInputStream.isReadyWhen checking whether there is still request body the first method that should be checked is ServletInputStream.isReadyand then ServletInputStream.isFinished. ServletInputStream.isReadyis the active method whereas the ServletInputStream.isFinishedis not. It is important to call ServletInputStream.isReadybecause if it returns false it will schedule a dispatch and if the request body is already read it will send onAllDataRead event. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -147,7 +147,7 @@ private static void assertValueCount(String valueType, final String name,\n \t\tList<String> values = map.get(name);\n \n \t\tString message = \"Expected \" + valueType + \" <\" + name + \">\";\n-\t\tAssert.notNull(values, message);\n+\t\tassertTrue(message + \" to exist but was null\", values != null);\n \n \t\tassertTrue(message + \" to have at least <\" + count + \"> values but found \" + values,\n \t\t\t\tcount <= values.size());",
    "output": "Throw AssertionError instead of IAE in MockRestRequestMatchers"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n@@ -32,7 +32,6 @@\n import org.springframework.web.util.UriComponentsBuilder;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertNotNull;\n import static org.springframework.test.util.AssertionErrors.assertEquals;\n import static org.springframework.test.util.AssertionErrors.assertTrue;\n \n@@ -148,7 +147,7 @@ private static void assertValueCount(String valueType, final String name,\n \t\tList<String> values = map.get(name);\n \n \t\tString message = \"Expected \" + valueType + \" <\" + name + \">\";\n-\t\tassertNotNull(message, values);\n+\t\tAssert.notNull(values, message);\n \n \t\tassertTrue(message + \" to have at least <\" + count + \"> values but found \" + values,\n \t\t\t\tcount <= values.size());",
    "output": "Make MockRestRequestMatchers independent of JUnit MockRestRequestMatchers was using org.junit.Assert.assertNotNull and thus could not be used in projects that use e.g. TestNG instead of JUnit 4"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/PostgresTableMetaDataProvider.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -33,19 +33,10 @@ public PostgresTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws S\n \t\tsuper(databaseMetaData);\n \t}\n \n+\n \t@Override\n \tpublic boolean isGetGeneratedKeysSimulated() {\n-\t\tString version = getDatabaseVersion();\n-\t\tif (version != null && version.compareTo(\"8.2.0\") >= 0) {\n-\t\t\treturn true;\n-\t\t}\n-\t\telse {\n-\t\t\tif (logger.isWarnEnabled()) {\n-\t\t\t\tlogger.warn(\"PostgreSQL does not support getGeneratedKeys or INSERT ... RETURNING in version \" +\n-\t\t\t\t\t\tversion);\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t}\n+\t\treturn true;\n \t}\n \n \t@Override",
    "output": "Drop version check in isGetGeneratedKeysSimulated (for PostgreSQL 10) Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n@@ -246,7 +246,7 @@ public void testPropertiesNested03() throws ParseException {\n \t\t\tfail();\n \t\t}\n \t\tcatch (SpelParseException spe) {\n-\t\t\tassertEquals(spe.getMessageCode(), SpelMessage.UNEXPECTED_DATA_AFTER_DOT);\n+\t\t\tassertEquals(SpelMessage.UNEXPECTED_DATA_AFTER_DOT, spe.getMessageCode());\n \t\t\tassertEquals(\"23\", spe.getInserts()[0]);\n \t\t}\n \t}\n\ndiff --git a/spring-web/src/test/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilterTests.java b/spring-web/src/test/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilterTests.java\n--- a/spring-web/src/test/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilterTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilterTests.java\n@@ -76,7 +76,7 @@ public void filterWithInvalidMethodValue() {\n \t\tStepVerifier.create(postForm(\"_method=INVALID\"))\n \t\t\t\t.consumeErrorWith(error -> {\n \t\t\t\t\tassertThat(error, Matchers.instanceOf(IllegalArgumentException.class));\n-\t\t\t\t\tassertEquals(error.getMessage(), \"HttpMethod 'INVALID' not supported\");\n+\t\t\t\t\tassertEquals(\"HttpMethod 'INVALID' not supported\", error.getMessage());\n \t\t\t\t})\n \t\t\t\t.verify();\n \t}",
    "output": "Polish: assertion arguments should be passed in the correct order"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/jsf/el/WebApplicationContextFacesELResolver.java b/spring-web/src/main/java/org/springframework/web/jsf/el/WebApplicationContextFacesELResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/jsf/el/WebApplicationContextFacesELResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/jsf/el/WebApplicationContextFacesELResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -150,7 +150,7 @@ public void setValue(ELContext elContext, Object base, Object property, Object v\n \tpublic boolean isReadOnly(ELContext elContext, Object base, Object property) throws ELException {\n \t\tif (base instanceof WebApplicationContext) {\n \t\t\telContext.setPropertyResolved(true);\n-\t\t\treturn false;\n+\t\t\treturn true;\n \t\t}\n \t\treturn false;\n \t}\n@@ -168,9 +168,9 @@ public Class<?> getCommonPropertyType(ELContext elContext, Object base) {\n \n \n \t/**\n-\t * Retrieve the WebApplicationContext reference to expose.\n-\t * <p>The default implementation delegates to FacesContextUtils,\n-\t * returning {@code null} if no WebApplicationContext found.\n+\t * Retrieve the {@link WebApplicationContext} reference to expose.\n+\t * <p>The default implementation delegates to {@link FacesContextUtils},\n+\t * returning {@code null} if no {@code WebApplicationContext} found.\n \t * @param elContext the current JSF ELContext\n \t * @return the Spring web application context\n \t * @see org.springframework.web.jsf.FacesContextUtils#getWebApplicationContext",
    "output": "WebApplicationContextFacesELResolver.isReadOnly returns true for WAC Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java\n@@ -111,7 +111,7 @@ public void entityStream() {\n \t\t\t\t.accept(TEXT_EVENT_STREAM)\n \t\t\t\t.exchange()\n \t\t\t\t.expectStatus().isOk()\n-\t\t\t\t.expectHeader().contentType(TEXT_EVENT_STREAM)\n+\t\t\t\t.expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)\n \t\t\t\t.returnResult(Person.class);\n \n \t\tStepVerifier.create(result.getResponseBody())",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJsonHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJsonHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJsonHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJsonHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -124,7 +124,7 @@ protected final void writeInternal(Object o, @Nullable Type type, HttpOutputMess\n \t\tcatch (Exception ex) {\n \t\t\tthrow new HttpMessageNotWritableException(\"Could not write JSON: \" + ex.getMessage(), ex);\n \t\t}\n-\t\twriter.close();\n+\t\twriter.flush();\n \t}\n \n ",
    "output": "Gson/JsonbHttpMessageConverter keeps output stream open (for SseEmitter) Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n@@ -56,6 +56,11 @@\n  */\n class ServletServerHttpRequest extends AbstractServerHttpRequest {\n \n+\tprivate static final String X509_CERTIFICATE_ATTRIBUTE = \"javax.servlet.request.X509Certificate\";\n+\n+\tprivate static final String SSL_SESSION_ID_ATTRIBUTE = \"javax.servlet.request.ssl_session_id\";\n+\n+\n \tprotected final Log logger = LogFactory.getLog(getClass());\n \n \n@@ -178,8 +183,8 @@ protected SslInfo initSslInfo() {\n \t\t\treturn null;\n \t\t}\n \t\treturn new DefaultSslInfo(\n-\t\t\t\t(String) request.getAttribute(\"javax.servlet.request.ssl_session_id\"),\n-\t\t\t\t(X509Certificate[]) request.getAttribute(\"java.security.cert.X509Certificate\"));\n+\t\t\t\t(String) request.getAttribute(SSL_SESSION_ID_ATTRIBUTE),\n+\t\t\t\t(X509Certificate[]) request.getAttribute(X509_CERTIFICATE_ATTRIBUTE));\n \t}\n \n \t@Override",
    "output": "Use correct X509 certificate attribute name Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n@@ -70,6 +70,9 @@\n  */\n public abstract class AbstractMarshaller implements Marshaller, Unmarshaller {\n \n+\tprivate static final EntityResolver NO_OP_ENTITY_RESOLVER =\n+\t\t\t(publicId, systemId) -> new InputSource(new StringReader(\"\"));\n+\n \t/** Logger available to subclasses */\n \tprotected final Log logger = LogFactory.getLog(getClass());\n \n@@ -604,8 +607,4 @@ protected abstract Object unmarshalInputStream(InputStream inputStream)\n \tprotected abstract Object unmarshalReader(Reader reader)\n \t\t\tthrows XmlMappingException, IOException;\n \n-\n-\tprivate static final EntityResolver NO_OP_ENTITY_RESOLVER =\n-\t\t\t(publicId, systemId) -> new InputSource(new StringReader(\"\"));\n-\n }",
    "output": "Polish codacy warning: fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2SmileEncoder.java\n@@ -17,6 +17,7 @@\n package org.springframework.http.codec.json;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n import java.util.List;\n \n import com.fasterxml.jackson.databind.ObjectMapper;",
    "output": "Fix compiler error"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -579,9 +579,10 @@ private Schema loadSchema(Resource[] resources, String schemaLanguage) throws IO\n \t\tXMLReader xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader();\n \t\txmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\n \t\tfor (int i = 0; i < resources.length; i++) {\n-\t\t\tAssert.notNull(resources[i], \"Resource is null\");\n-\t\t\tAssert.isTrue(resources[i].exists(), () -> \"Resource \" + resources[i] + \" does not exist\");\n-\t\t\tInputSource inputSource = SaxResourceUtils.createInputSource(resources[i]);\n+\t\t\tResource currentResource = resources[i];\n+\t\t\tAssert.notNull(currentResource, \"Resource is null\");\n+\t\t\tAssert.isTrue(currentResource.exists(), () -> \"Resource \" + currentResource + \" does not exist\");\n+\t\t\tInputSource inputSource = SaxResourceUtils.createInputSource(currentResource);\n \t\t\tschemaSources[i] = new SAXSource(xmlReader, inputSource);\n \t\t}\n \t\tSchemaFactory schemaFactory = SchemaFactory.newInstance(schemaLanguage);",
    "output": "Use effectively final local variable in lambda expression"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/ObjectError.java b/spring-context/src/main/java/org/springframework/validation/ObjectError.java\n--- a/spring-context/src/main/java/org/springframework/validation/ObjectError.java\n+++ b/spring-context/src/main/java/org/springframework/validation/ObjectError.java\n@@ -38,7 +38,7 @@ public class ObjectError extends DefaultMessageSourceResolvable {\n \tprivate final String objectName;\n \n \t@Nullable\n-\tprivate Object source;\n+\tprivate transient Object source;\n \n \n \t/**\n@@ -77,6 +77,8 @@ public String getObjectName() {\n \t * Initialize the source behind this error: possibly an {@link Exception}\n \t * (typically {@link org.springframework.beans.PropertyAccessException})\n \t * or a Bean Validation {@link javax.validation.ConstraintViolation}.\n+\t * <p>Note that any such source object is being stored as transient:\n+\t * that is, it won't be part of a serialized error representation.\n \t * @param source the source object\n \t * @since 5.0.4\n \t */\n@@ -89,7 +91,8 @@ public void initSource(Object source) {\n \t * Return the source behind this error: possibly an {@link Exception}\n \t * (typically {@link org.springframework.beans.PropertyAccessException})\n \t * or a Bean Validation {@link javax.validation.ConstraintViolation}.\n-\t * @return the source object, or {@code null} if none\n+\t * @return the source object, or {@code null} if none available\n+\t * (none specified or not available anymore after deserialization)\n \t * @since 5.0.4\n \t */\n \t@Nullable",
    "output": "Object/FieldError stores source object as transient (not serialized) Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -38,6 +38,7 @@\n  * This class can be extended to provide database specific behavior.\n  *\n  * @author Thomas Risberg\n+ * @author Juergen Hoeller\n  * @since 2.5\n  */\n public class GenericCallMetaDataProvider implements CallMetaDataProvider {\n@@ -351,6 +352,12 @@ else if (found.isEmpty()) {\n \t\t\t\t\t\t\t\"' - package name should be specified separately using '.withCatalogName(\\\"\" +\n \t\t\t\t\t\t\tpackageName + \"\\\")'\");\n \t\t\t\t}\n+\t\t\t\telse if (\"Oracle\".equals(databaseMetaData.getDatabaseProductName())) {\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Oracle JDBC driver did not return procedure/function/signature for '\" +\n+\t\t\t\t\t\t\t\tmetaDataProcedureName + \"' - assuming a non-exposed synonym\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\n \t\t\t\t\t\t\t\"Unable to determine the correct call signature - no \" +",
    "output": "Relaxed procedure existence check on Oracle (for non-exposed synonyms) Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n@@ -77,8 +77,8 @@ public void tearDown() throws Exception {\n \n \n \t/**\n-\t * Return an interval stream of with n number of ticks and buffer the\n-\t * emissions to avoid back pressure failures (e.g. on slow CI server).\n+\t * Return an interval stream of N number of ticks and buffer the emissions\n+\t * to avoid back pressure failures (e.g. on slow CI server).\n \t *\n \t * <p>Use this method as follows:\n \t * <ul>\n@@ -89,7 +89,7 @@ public void tearDown() throws Exception {\n \t * </ul>\n \t */\n \tpublic static Flux<Long> interval(Duration period, int count) {\n-\t\treturn Flux.interval(period).take(count).onBackpressureBuffer(2);\n+\t\treturn Flux.interval(period).take(count).onBackpressureBuffer(count);\n \t}\n \n }",
    "output": "Fix copy+paste error"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -672,9 +672,7 @@ protected void inject(Object bean, @Nullable String beanName, @Nullable Property\n \t\t\t\t\tif (!this.cached) {\n \t\t\t\t\t\tif (arguments != null) {\n \t\t\t\t\t\t\tObject[] cachedMethodArguments = new Object[paramTypes.length];\n-\t\t\t\t\t\t\tfor (int i = 0; i < arguments.length; i++) {\n-\t\t\t\t\t\t\t\tcachedMethodArguments[i] = descriptors[i];\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tSystem.arraycopy(descriptors, 0, cachedMethodArguments, 0, arguments.length);\n \t\t\t\t\t\t\tregisterDependentBeans(beanName, autowiredBeans);\n \t\t\t\t\t\t\tif (autowiredBeans.size() == paramTypes.length) {\n \t\t\t\t\t\t\t\tIterator<String> it = autowiredBeans.iterator();",
    "output": "Replace manual array copy with native method call"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1515,7 +1515,7 @@ protected Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd\n \t\t\treturn getTypeForFactoryBean(factoryBean);\n \t\t}\n \t\tcatch (BeanCreationException ex) {\n-\t\t\tif (ex instanceof BeanCurrentlyInCreationException) {\n+\t\t\tif (ex.contains(BeanCurrentlyInCreationException.class)) {\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"Bean currently in creation on FactoryBean type check: \" + ex);\n \t\t\t\t}",
    "output": "Deep BeanCurrentlyInCreationException check in getTypeForFactoryBean Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java\n@@ -87,4 +87,9 @@ public void setReadListener(ReadListener readListener) {\n \t\tthrow new UnsupportedOperationException();\n \t}\n \n+\t@Override\n+\tpublic int available() throws IOException {\n+\t\treturn this.sourceStream.available();\n+\t}\n+\n }",
    "output": "Fix `DelegatingServletInputStream#available` Ensure that the method returns the correct number of bytes that can be read without blocking Issue: #"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n@@ -116,7 +116,7 @@ public URI getURI() {\n \t\t\t\tthis.uri = new URI(urlString);\n \t\t\t}\n \t\t\tcatch (URISyntaxException ex) {\n-\t\t\t\tif (true || !hasQuery) {\n+\t\t\t\tif (!hasQuery) {\n \t\t\t\t\tthrow new IllegalStateException(\"Could not resolve HttpServletRequest as URI: \" + urlString, ex);\n \t\t\t\t}\n \t\t\t\t// Maybe a malformed query string... try plain request URL",
    "output": "Fix test failure"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java\n@@ -327,20 +327,19 @@ protected String createMessage(HttpServletRequest request, String prefix, String\n \tprotected String getMessagePayload(HttpServletRequest request) {\n \t\tContentCachingRequestWrapper wrapper =\n \t\t\t\tWebUtils.getNativeRequest(request, ContentCachingRequestWrapper.class);\n-\t\tString payload = null;\n \t\tif (wrapper != null) {\n \t\t\tbyte[] buf = wrapper.getContentAsByteArray();\n \t\t\tif (buf.length > 0) {\n \t\t\t\tint length = Math.min(buf.length, getMaxPayloadLength());\n \t\t\t\ttry {\n-\t\t\t\t\tpayload = new String(buf, 0, length, wrapper.getCharacterEncoding());\n+\t\t\t\t\treturn new String(buf, 0, length, wrapper.getCharacterEncoding());\n \t\t\t\t}\n \t\t\t\tcatch (UnsupportedEncodingException ex) {\n-\t\t\t\t\tpayload = \"[unknown]\";\n+\t\t\t\t\treturn \"[unknown]\";\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\treturn payload;\n+\t\treturn null;\n \t}\n \n ",
    "output": "Remove an unnecessary intermediate variable"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n@@ -73,7 +73,7 @@ public URI getURI() {\n \tprotected OutputStream getBodyInternal(HttpHeaders headers) throws IOException {\n \t\tif (this.body == null) {\n \t\t\tif (this.outputStreaming) {\n-\t\t\t\tint contentLength = (int) headers.getContentLength();\n+\t\t\t\tlong contentLength = headers.getContentLength();\n \t\t\t\tif (contentLength >= 0) {\n \t\t\t\t\tthis.connection.setFixedLengthStreamingMode(contentLength);\n \t\t\t\t}",
    "output": "Remove unnecessary cast to int Since Java7 HttpURLConnection offers setFixedLengthStreamingMode method with long parameter which should be prefered over version with int argument, therefore casting ContentLength to int is no longer needed. Moreover it makes impossible to stream payload larger than Integer.MAX_VALUE"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java\n@@ -272,13 +272,10 @@ private <T> Flux<DataBuffer> encodePart(byte[] boundary, String name, T value) {\n \t\tMono<Void> partWritten = ((HttpMessageWriter<T>) writer.get())\n \t\t\t\t.write(bodyPublisher, resolvableType, contentType, outputMessage, Collections.emptyMap());\n \n-\t\t// partWritten.subscribe() is required in order to make sure MultipartHttpOutputMessage#getBody()\n-\t\t// returns a non-null value (occurs with ResourceHttpMessageWriter that invokes\n-\t\t// ReactiveHttpOutputMessage.writeWith() only when at least one element has been requested).\n-\t\tpartWritten.subscribe();\n-\n \t\treturn Flux.concat(\n-\t\t\t\tMono.just(generateBoundaryLine(boundary)), outputMessage.getBody(), Mono.just(generateNewLine()));\n+\t\t\t\tMono.just(generateBoundaryLine(boundary)),\n+\t\t\t\tpartWritten.thenMany(Flux.defer(outputMessage::getBody)),\n+\t\t\t\tMono.just(generateNewLine()));\n \t}\n \n ",
    "output": "Remove explicit subscribe in MultipartHttpMessageWriter Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java\n--- a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n+import org.springframework.aop.framework.AopProxyUtils;\n import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n@@ -219,7 +220,7 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) thro\n \t@Override\n \tpublic Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException {\n \t\tif (!this.nonAnnotatedClasses.contains(bean.getClass())) {\n-\t\t\tClass<?> targetClass = AopUtils.getTargetClass(bean);\n+\t\t\tClass<?> targetClass = AopProxyUtils.ultimateTargetClass(bean);\n \t\t\tMap<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass,\n \t\t\t\t\t(MethodIntrospector.MetadataLookup<Set<JmsListener>>) method -> {\n \t\t\t\t\t\tSet<JmsListener> listenerMethods = AnnotatedElementUtils.getMergedRepeatableAnnotations(",
    "output": "JmsListenerAnnotationBeanPostProcessor properly deals with nested proxies Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java\n@@ -81,6 +81,7 @@ public Map<String, Object> getJpaPropertyMap() {\n \t\tif (isShowSql()) {\n \t\t\tjpaProperties.put(PersistenceUnitProperties.CATEGORY_LOGGING_LEVEL_ +\n \t\t\t\t\torg.eclipse.persistence.logging.SessionLog.SQL, Level.FINE.toString());\n+\t\t\tjpaProperties.put(PersistenceUnitProperties.LOGGING_PARAMETERS, Boolean.TRUE.toString());\n \t\t}\n \n \t\treturn jpaProperties;",
    "output": "Log SQL parameters in EclipseLink when using showSql As of EclipseLink 2.4.0 - Juno this is not sufficient to log SQL parameter binding. Additionally, eclipselink.logging.parameters must be enabled. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer.java\n@@ -34,8 +34,7 @@\n  * which has default methods, made possible by a Java 8 baseline.\n  */\n @Deprecated\n-public abstract class /*AbstractWebSocketMessageBrokerConfigurer*/ implements WebSocketMessageBrokerConfigurer {\n-\n+public abstract class AbstractWebSocketMessageBrokerConfigurer implements WebSocketMessageBrokerConfigurer {\n \n \t@Override\n \tpublic void configureWebSocketTransport(WebSocketTransportRegistration registration) {",
    "output": "Fix compile error"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -444,7 +444,7 @@ protected void processScheduled(Scheduled scheduled, Method method, Object bean)\n \t\t\t\t\t}\n \t\t\t\t\tcatch (NumberFormatException ex) {\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Invalid fixedRateString value \\\"\" + fixedRateString + \"\\\" - cannot parse into integer\");\n+\t\t\t\t\t\t\t\t\"Invalid fixedRateString value \\\"\" + fixedRateString + \"\\\" - cannot parse into long\");\n \t\t\t\t\t}\n \t\t\t\t\ttasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));\n \t\t\t\t}",
    "output": "Fix an exception message in ScheduledAnnotationBeanPostProcessor"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -347,7 +347,8 @@ else if (candidates.size() == 1 && logger.isWarnEnabled()) {\n \t\t\t\t\telse if (rawCandidates.length == 1 && rawCandidates[0].getParameterCount() > 0) {\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {rawCandidates[0]};\n \t\t\t\t\t}\n-\t\t\t\t\telse if (nonSyntheticConstructors == 2 && primaryConstructor != null && defaultConstructor != null) {\n+\t\t\t\t\telse if (nonSyntheticConstructors == 2 && primaryConstructor != null\n+\t\t\t\t\t\t\t&& defaultConstructor != null && !primaryConstructor.equals(defaultConstructor)) {\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {primaryConstructor, defaultConstructor};\n \t\t\t\t\t}\n \t\t\t\t\telse if (nonSyntheticConstructors == 1 && primaryConstructor != null) {",
    "output": "Fix Kotlin bean w/ default + secondary ctors handling This commit polishes fix in order to handle correctly the case when primary and default constructors are the same when a secondary constructor is defined. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java\n@@ -31,7 +31,6 @@\n import org.hamcrest.Matchers;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n@@ -348,7 +347,6 @@ public void shouldSendCookies() throws Exception {\n \t}\n \n \t@Test // SPR-16246\n-\t@Ignore\n \tpublic void shouldSendLargeTextFile() throws Exception {\n \t\tprepareResponse(response -> {});\n ",
    "output": "Uncomment test after Reactor Netty fix Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java\n@@ -70,9 +70,10 @@ public Mono<Void> send(Publisher<WebSocketMessage> messages) {\n \t@Override\n \tpublic Mono<Void> close(CloseStatus status) {\n \t\treturn Mono.error(new UnsupportedOperationException(\n-\t\t\t\t\"Currently in Reactor Netty applications are expected to use the \" +\n-\t\t\t\t\t\t\"Cancellation returned from subscribing to the \\\"receive\\\"-side Flux \" +\n-\t\t\t\t\t\t\"in order to close the WebSocket session.\"));\n+\t\t\t\t\"Reactor Netty does not support closing the session from anywhere. \" +\n+\t\t\t\t\t\t\"You will need to work with the Flux returned from receive() method, \" +\n+\t\t\t\t\t\t\"either subscribing to it and using the returned Disposable, \" +\n+\t\t\t\t\t\t\"or using an operator that cancels (e.g. take).\"));\n \t}\n \n ",
    "output": "Improve error message Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java\n@@ -64,6 +64,14 @@ public InterceptorRegistration addPathPatterns(String... patterns) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Add URL patterns as list to which the registered interceptor should apply to.\n+\t */\n+\tpublic InterceptorRegistration addPathPatterns(List<String> patterns) {\n+\t\tthis.includePatterns.addAll(patterns);\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Add URL patterns to which the registered interceptor should not apply to.\n \t */\n@@ -72,6 +80,14 @@ public InterceptorRegistration excludePathPatterns(String... patterns) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Add URL patterns as list to which the registered interceptor should not apply to.\n+\t */\n+\tpublic InterceptorRegistration excludePathPatterns(List<String> patterns) {\n+\t\tthis.excludePatterns.addAll(patterns);\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * A PathMatcher implementation to use with this interceptor. This is an optional,\n \t * advanced property required only if using custom PathMatcher implementations",
    "output": "Overloaded methods in InterceptorRegistration Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -325,7 +325,10 @@ else if (methodName.startsWith(\"create\")) {\n \t\t\t\tif (isCacheProducers() && (methodName.equals(\"createProducer\") ||\n \t\t\t\t\t\tmethodName.equals(\"createSender\") || methodName.equals(\"createPublisher\"))) {\n \t\t\t\t\t// Destination argument being null is ok for a producer\n-\t\t\t\t\treturn getCachedProducer((Destination) args[0]);\n+\t\t\t\t\tDestination dest = (Destination) args[0];\n+\t\t\t\t\tif (!(dest instanceof TemporaryQueue || dest instanceof TemporaryTopic)) {\n+\t\t\t\t\t\treturn getCachedProducer(dest);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse if (isCacheConsumers()) {\n \t\t\t\t\t// let raw JMS invocation throw an exception if Destination (i.e. args[0]) is null",
    "output": "CachingConnectionFactory does not cache producer for temporary queue/topic Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/ResourceHolderSupport.java b/spring-tx/src/main/java/org/springframework/transaction/support/ResourceHolderSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/ResourceHolderSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/ResourceHolderSupport.java\n@@ -91,7 +91,7 @@ public boolean isRollbackOnly() {\n \t * @param seconds number of seconds until expiration\n \t */\n \tpublic void setTimeoutInSeconds(int seconds) {\n-\t\tsetTimeoutInMillis(seconds * 1000);\n+\t\tsetTimeoutInMillis(seconds * 1000L);\n \t}\n \n \t/**",
    "output": "— fix transaction timeout value overflow"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,6 +36,7 @@\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n+import javax.persistence.SynchronizationType;\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.sql.DataSource;\n@@ -444,7 +445,7 @@ Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwabl\n \t\t\treturn method.invoke(this, args);\n \t\t}\n \t\telse if (method.getName().equals(\"createEntityManager\") && args != null && args.length > 0 &&\n-\t\t\t\targs[0] != null && args[0].getClass().isEnum() && \"SYNCHRONIZED\".equals(args[0].toString())) {\n+\t\t\t\targs[0] == SynchronizationType.SYNCHRONIZED) {\n \t\t\t// JPA 2.1's createEntityManager(SynchronizationType, Map)\n \t\t\t// Redirect to plain createEntityManager and add synchronization semantics through Spring proxy\n \t\t\tEntityManager rawEntityManager = (args.length > 1 ?",
    "output": "Direct reference to JPA 2.1 SynchronizationType enum Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -285,9 +285,9 @@ protected Map<String, Lifecycle> getLifecycleBeans() {\n \t\t\tif ((getBeanFactory().containsSingleton(beanNameToRegister) &&\n \t\t\t\t\t(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck))) ||\n \t\t\t\t\tmatchesBeanType(SmartLifecycle.class, beanNameToCheck)) {\n-\t\t\t\tLifecycle bean = getBeanFactory().getBean(beanNameToCheck, Lifecycle.class);\n-\t\t\t\tif (bean != this) {\n-\t\t\t\t\tbeans.put(beanNameToRegister, bean);\n+\t\t\t\tObject bean = getBeanFactory().getBean(beanNameToCheck);\n+\t\t\t\tif (bean != this && bean instanceof Lifecycle) {\n+\t\t\t\t\tbeans.put(beanNameToRegister, (Lifecycle) bean);\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Properly handle null bean instance in getLifecycleBeans Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -561,13 +561,14 @@ public static boolean isSimpleProperty(Class<?> clazz) {\n \n \t/**\n \t * Check if the given type represents a \"simple\" value type:\n-\t * a primitive, a String or other CharSequence, a Number, a Date,\n+\t * a primitive, an enum, a String or other CharSequence, a Number, a Date,\n \t * a URI, a URL, a Locale or a Class.\n \t * @param clazz the type to check\n \t * @return whether the given type represents a \"simple\" value type\n \t */\n \tpublic static boolean isSimpleValueType(Class<?> clazz) {\n-\t\treturn (ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.isEnum() ||\n+\t\treturn (ClassUtils.isPrimitiveOrWrapper(clazz) ||\n+\t\t\t\tEnum.class.isAssignableFrom(clazz) ||\n \t\t\t\tCharSequence.class.isAssignableFrom(clazz) ||\n \t\t\t\tNumber.class.isAssignableFrom(clazz) ||\n \t\t\t\tDate.class.isAssignableFrom(clazz) ||",
    "output": "Consider enum subclasses as simple value types as well Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java\n@@ -77,10 +77,6 @@ public void errorBeforeFirstItem() throws Exception {\n \n \t@Test // SPR-16051\n \tpublic void exceptionAfterSeveralItems() throws Exception {\n-\n-\t\t// TODO: uncomment and try after https://github.com/reactor/reactor-netty/issues/231\n-\t\tAssume.assumeFalse(server instanceof ReactorHttpServer);\n-\n \t\ttry {\n \t\t\tperformGet(\"/SPR-16051\", new HttpHeaders(), String.class).getBody();\n \t\t\tfail();",
    "output": "Upgrade to Reactor Bismuth snapshots This allows us to confirm 0.7.3 fixes and run tests against the latest ahead of an upgrade to Reactor Netty 0.8 snapshots. The fix for and are confirmed but unfortunately test case for"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n@@ -197,7 +197,7 @@ public StompCommand updateStompCommandAsClientMessage() {\n \t\t}\n \t\tStompCommand command = getCommand();\n \t\tif (command == null) {\n-\t\t\tcommand = StompCommand.SEND\n+\t\t\tcommand = StompCommand.SEND;\n \t\t\tsetHeader(COMMAND_HEADER, command);\n \t\t}\n \t\telse if (!command.equals(StompCommand.SEND)) {",
    "output": "Fix compile issue from previous commit"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n@@ -197,7 +197,8 @@ public StompCommand updateStompCommandAsClientMessage() {\n \t\t}\n \t\tStompCommand command = getCommand();\n \t\tif (command == null) {\n-\t\t\tsetHeader(COMMAND_HEADER, StompCommand.SEND);\n+\t\t\tcommand = StompCommand.SEND\n+\t\t\tsetHeader(COMMAND_HEADER, command);\n \t\t}\n \t\telse if (!command.equals(StompCommand.SEND)) {\n \t\t\tthrow new IllegalStateException(\"Unexpected STOMP command \" + command);",
    "output": "Fix Stomp Broker Relay ignoring destination prefixes in some cases Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -365,7 +365,7 @@ protected void processScheduled(Scheduled scheduled, Method method, Object bean)\n \t\t\t\t\t}\n \t\t\t\t\tcatch (NumberFormatException ex) {\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Invalid initialDelayString value \\\"\" + initialDelayString + \"\\\" - cannot parse into integer\");\n+\t\t\t\t\t\t\t\t\"Invalid initialDelayString value \\\"\" + initialDelayString + \"\\\" - cannot parse into long\");\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix exception message initialDelayString is parsed into long, not integer"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java\n@@ -260,7 +260,6 @@ protected void handleMessageInternal(Message<?> message) {\n \t\tSimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers);\n \t\tString destination = SimpMessageHeaderAccessor.getDestination(headers);\n \t\tString sessionId = SimpMessageHeaderAccessor.getSessionId(headers);\n-\t\tPrincipal user = SimpMessageHeaderAccessor.getUser(headers);\n \n \t\tupdateSessionReadTime(sessionId);\n \n@@ -277,6 +276,7 @@ else if (SimpMessageType.CONNECT.equals(messageType)) {\n \t\t\tif (sessionId != null) {\n \t\t\t\tlong[] clientHeartbeat = SimpMessageHeaderAccessor.getHeartbeat(headers);\n \t\t\t\tlong[] serverHeartbeat = getHeartbeatValue();\n+\t\t\t\tPrincipal user = SimpMessageHeaderAccessor.getUser(headers);\n \t\t\t\tthis.sessions.put(sessionId, new SessionInfo(sessionId, user, clientHeartbeat, serverHeartbeat));\n \t\t\t\tSimpMessageHeaderAccessor connectAck = SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);\n \t\t\t\tinitHeaders(connectAck);\n@@ -293,6 +293,7 @@ else if (SimpMessageType.CONNECT.equals(messageType)) {\n \t\telse if (SimpMessageType.DISCONNECT.equals(messageType)) {\n \t\t\tlogMessage(message);\n \t\t\tif (sessionId != null) {\n+\t\t\t\tPrincipal user = SimpMessageHeaderAccessor.getUser(headers);\n \t\t\t\thandleDisconnect(sessionId, user, message);\n \t\t\t}\n \t\t}",
    "output": "Reduce access on user in SimpleBrokerMessageHandler.handleMessageInternal Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java\n--- a/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java\n@@ -46,7 +46,6 @@ public class InMemoryWebSessionStore implements WebSessionStore {\n \t/** Minimum period between expiration checks */\n \tprivate static final Duration EXPIRATION_CHECK_PERIOD = Duration.ofSeconds(60);\n \n-\n \tprivate static final IdGenerator idGenerator = new JdkIdGenerator();\n \n \n@@ -210,11 +209,7 @@ public boolean isStarted() {\n \t\t@Override\n \t\tpublic Mono<Void> changeSessionId() {\n \t\t\tString currentId = this.id.get();\n-\t\t\tif (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {\n-\t\t\t\treturn Mono.error(new IllegalStateException(\n-\t\t\t\t\t\t\"Failed to change session id: \" + currentId +\n-\t\t\t\t\t\t\t\t\" because the Session is no longer present in the store.\"));\n-\t\t\t}\n+\t\t\tInMemoryWebSessionStore.this.sessions.remove(currentId);\n \t\t\tString newId = String.valueOf(idGenerator.generateId());\n \t\t\tthis.id.set(newId);\n \t\t\tInMemoryWebSessionStore.this.sessions.put(this.getId(), this);",
    "output": "Remove unnecessary assertion Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java\n@@ -171,7 +171,9 @@ public WebSocketHandlerAdapter handlerAdapter() {\n \n \t\t@Bean\n \t\tpublic WebSocketService webSocketService() {\n-\t\t\treturn new HandshakeWebSocketService(getUpgradeStrategy());\n+\t\t\tTomcatRequestUpgradeStrategy strategy = new TomcatRequestUpgradeStrategy();\n+\t\t\tstrategy.setMaxSessionIdleTimeout(0L);\n+\t\t\treturn new HandshakeWebSocketService(strategy);\n \t\t}\n \n \t\tprotected abstract RequestUpgradeStrategy getUpgradeStrategy();",
    "output": "Add WebSocket chapter to WebFlux section Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java\n@@ -75,11 +75,15 @@ public String[] getParameterNames(Constructor<?> ctor) {\n \tprivate String[] getParameterNames(List<KParameter> parameters) {\n \t\tList<KParameter> filteredParameters = parameters\n \t\t\t\t.stream()\n-\t\t\t\t.filter(p -> KParameter.Kind.VALUE.equals(p.getKind()))\n+\t\t\t\t// Extension receivers of extension methods must be included as they appear as normal method parameters in Java\n+\t\t\t\t.filter(p -> KParameter.Kind.VALUE.equals(p.getKind()) || KParameter.Kind.EXTENSION_RECEIVER.equals(p.getKind()))\n \t\t\t\t.collect(Collectors.toList());\n \t\tString[] parameterNames = new String[filteredParameters.size()];\n \t\tfor (int i = 0; i < filteredParameters.size(); i++) {\n-\t\t\tString name = filteredParameters.get(i).getName();\n+\t\t\tKParameter parameter = filteredParameters.get(i);\n+\t\t\t// extension receivers are not explicitly named, but require a name for Java interoperability\n+\t\t\t// $receiver is not a valid Kotlin identifier, but valid in Java, so it can be used here\n+\t\t\tString name = KParameter.Kind.EXTENSION_RECEIVER.equals(parameter.getKind())  ? \"$receiver\" : parameter.getName();\n \t\t\tif (name == null) {\n \t\t\t\treturn null;\n \t\t\t}",
    "output": "Handle parameters of Kotlin extension methods correctly The EXTENSION_RECEIVER parameter of Kotlin's extension methods appear as normal method parameters to Java and thus require a name. The synthetic name \"$receiver\" is used here, as it is not a valid Kotlin identifier, but valid in Java. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java b/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/FileUrlResource.java\n@@ -70,6 +70,14 @@ public FileUrlResource(String location) throws MalformedURLException {\n \t}\n \n \n+\t@Override\n+\tpublic Resource createRelative(String relativePath) throws MalformedURLException {\n+\t\tif (relativePath.startsWith(\"/\")) {\n+\t\t\trelativePath = relativePath.substring(1);\n+\t\t}\n+\t\treturn new FileUrlResource(new URL(getURL(), relativePath));\n+\t}\n+\n \t@Override\n \tpublic boolean isWritable() {\n \t\ttry {\n\ndiff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -183,7 +183,7 @@ public InputStream getInputStream() throws IOException {\n \t * This implementation returns the underlying URL reference.\n \t */\n \t@Override\n-\tpublic URL getURL() throws IOException {\n+\tpublic URL getURL() {\n \t\treturn this.url;\n \t}\n ",
    "output": "FileUrlResource creates same class from createRelative Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriUtils.java b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriUtils.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java\n@@ -368,7 +368,7 @@ public static String extractFileExtension(String path) {\n \t * @return the encoded String\n \t * @since 5.0\n \t */\n-\tstatic Map<String, String> encodeUriVariables(Map<String, ?> uriVariables) {\n+\tpublic static Map<String, String> encodeUriVariables(Map<String, ?> uriVariables) {\n \t\tMap<String, String> result = new LinkedHashMap<>(uriVariables.size());\n \t\turiVariables.forEach((key, value) -> {\n \t\t\tString stringValue = (value != null ? value.toString() : \"\");\n@@ -384,7 +384,7 @@ static Map<String, String> encodeUriVariables(Map<String, ?> uriVariables) {\n \t * @return the encoded String\n \t * @since 5.0\n \t */\n-\tstatic Object[] encodeUriVariables(Object... uriVariables) {\n+\tpublic static Object[] encodeUriVariables(Object... uriVariables) {\n \t\treturn Arrays.stream(uriVariables)\n \t\t\t\t.map(value -> {\n \t\t\t\t\tString stringValue = (value != null ? value.toString() : \"\");",
    "output": "UriUtils#encodUriVariables methods are now public"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java\n--- a/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java\n@@ -62,7 +62,7 @@ public void onStartup(ServletContext servletContext) throws ServletException {\n \t\tAssert.notNull(registration, \"Failed to register servlet '\" + servletName + \"'.\");\n \n \t\tregistration.setLoadOnStartup(1);\n-\t\tregistration.addMapping(\"/\");\n+\t\tregistration.addMapping(getServletMapping());\n \t\tregistration.setAsyncSupported(true);\n \t}\n \n@@ -93,4 +93,13 @@ protected ApplicationContext createApplicationContext() {\n \t */\n \tprotected abstract Class<?>[] getConfigClasses();\n \n+\t/**\n+\t * Return the Servlet mapping to use. Only the default Servlet mapping '/'\n+\t * and path-based Servlet mappings such as '/api/*' are supported.\n+\t * <p>By default this is set to '/'.\n+\t */\n+\tprotected String getServletMapping() {\n+\t\treturn \"/\";\n+\t}\n+\n }",
    "output": "AbstractReactiveWebInitializer supports Servlet mapping Issue: ,"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -424,6 +424,11 @@ protected void addClassPathManifestEntries(Set<Resource> result) {\n \t\t\t\t\tjavaClassPathProperty, System.getProperty(\"path.separator\"))) {\n \t\t\t\ttry {\n \t\t\t\t\tString filePath = new File(path).getAbsolutePath();\n+\t\t\t\t\tint prefixIndex = filePath.indexOf(':');\n+\t\t\t\t\tif (prefixIndex == 1) {\n+\t\t\t\t\t\t// Possibly \"c:\" drive prefix on Windows, to be upper-cased for proper duplicate detection\n+\t\t\t\t\t\tfilePath = filePath.substring(0, 1).toUpperCase() + filePath.substring(1);\n+\t\t\t\t\t}\n \t\t\t\t\tUrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +\n \t\t\t\t\t\t\tResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR);\n \t\t\t\t\t// Potentially overlapping with URLClassLoader.getURLs() result above!",
    "output": "Drive letter case alignment in addClassPathManifestEntries Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -139,7 +139,7 @@ public static boolean hasLength(@Nullable String str) {\n \t * @see Character#isWhitespace\n \t */\n \tpublic static boolean hasText(@Nullable CharSequence str) {\n-\t\treturn (hasLength(str) && containsText(str));\n+\t\treturn (str != null && str.length() > 0 && containsText(str));\n \t}\n \n \t/**\n@@ -153,7 +153,7 @@ public static boolean hasText(@Nullable CharSequence str) {\n \t * @see #hasText(CharSequence)\n \t */\n \tpublic static boolean hasText(@Nullable String str) {\n-\t\treturn (hasLength(str) && containsText(str));\n+\t\treturn (str != null && !str.isEmpty() && containsText(str));\n \t}\n \n \tprivate static boolean containsText(CharSequence str) {",
    "output": "Consistent hasText checks for CharSequence vs String Directly inlined hasLength implementations for proper nullability detection in IntelliJ, assuming a hasText checked value is never null afterwards. Since the JVM is going to do this at runtime anyway, this is effectively equivalent but more indicative for source code introspection algorithms. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -162,7 +162,8 @@ private static boolean exhaustiveCompare(Object boundValue, Object candidate,\n \t\telse if (ObjectUtils.getDisplayString(boundValue).equals(candidateDisplayString)) {\n \t\t\treturn true;\n \t\t}\n-\t\telse if (editor != null && candidate instanceof String) {\n+\n+\t\tif (editor != null && candidate instanceof String) {\n \t\t\t// Try PE-based comparison (PE should *not* be allowed to escape creating thread)\n \t\t\tString candidateAsString = (String) candidate;\n \t\t\tObject candidateAsValue;",
    "output": "Allow PropertyEditor conversion as fallback for enums Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -71,6 +71,7 @@ public String[] decodeInputStream(InputStream content) throws IOException {\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tprotected char[] applyJsonQuoting(String content) {\n \t\treturn JsonStringEncoder.getInstance().quoteAsString(content);\n \t}",
    "output": "Upgrade to Jackson 2.9.2"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/SimpleTransactionScope.java b/spring-tx/src/main/java/org/springframework/transaction/support/SimpleTransactionScope.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/SimpleTransactionScope.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/SimpleTransactionScope.java\n@@ -23,7 +23,6 @@\n import org.springframework.beans.factory.ObjectFactory;\n import org.springframework.beans.factory.config.Scope;\n import org.springframework.lang.Nullable;\n-import org.springframework.util.Assert;\n \n /**\n  * A simple transaction-backed {@link Scope} implementation, delegating to",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n@@ -33,7 +33,6 @@\n \n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.io.ByteArrayResource;\n-import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n@@ -693,7 +693,7 @@ private class ReadInactivityTask implements Runnable {\n \t\t@Override\n \t\tpublic void run() {\n \t\t\tclosing = true;\n-\t\t\tString error = \"Server has gone quite. Closing connection in session id=\" + sessionId + \".\";\n+\t\t\tString error = \"Server has gone quiet. Closing connection in session id=\" + sessionId + \".\";\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(error);\n \t\t\t}",
    "output": "Fix typo in exception message: quite -> quiet"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -367,7 +367,9 @@ else if (rawCandidates.length == 1 && rawCandidates[0].getParameterCount() > 0)\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {rawCandidates[0]};\n \t\t\t\t\t}\n \t\t\t\t\telse if (kotlinPrimaryConstructor != null) {\n-\t\t\t\t\t\tcandidateConstructors = new Constructor<?>[] {kotlinPrimaryConstructor};\n+\t\t\t\t\t\tcandidateConstructors = (defaultConstructor != null ?\n+\t\t\t\t\t\t\t\tnew Constructor<?>[] {kotlinPrimaryConstructor, defaultConstructor} :\n+\t\t\t\t\t\t\t\tnew Constructor<?>[] {kotlinPrimaryConstructor});\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tcandidateConstructors = new Constructor<?>[0];",
    "output": "Improve support of Kotlin beans w/ primary and default ctors This commit add the default constructor if available as fallback after to the primary constructor. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java\n@@ -112,7 +112,7 @@ public DispatcherHandler(ApplicationContext applicationContext) {\n \t * @return immutable list with the configured mappings or {@code null}\n \t */\n \t@Nullable\n-\tpublic List<HandlerMapping> getHandlerMappings() {\n+\tpublic final List<HandlerMapping> getHandlerMappings() {\n \t\treturn this.handlerMappings;\n \t}\n ",
    "output": "DispatcherHandler.getHandlerMappingsis also final Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java b/spring-test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java\n@@ -21,8 +21,6 @@\n \n import org.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager;\n \n-import org.springframework.util.Assert;\n-\n /**\n  * Mock implementation of the JSP 2.0 {@link javax.servlet.jsp.el.ExpressionEvaluator}\n  * interface, delegating to the Apache JSTL ExpressionEvaluatorManager.",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java\n@@ -26,7 +26,6 @@\n import java.util.function.Consumer;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n@@ -112,7 +111,6 @@ public void getHandlerGlobMatch() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void getHandlerEmptyPathMatch() throws Exception {\n \t\tMethod expected = on(TestController.class).annot(requestMapping(\"\")).resolveMethod();\n \t\tServerWebExchange exchange = get(\"\").toExchange();",
    "output": "Un-ignore RequestMapping test for handling \"\" paths Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java\n@@ -139,6 +139,9 @@ public void accept(FluxSink<Part> emitter) {\n \t\t\t\tcatch (IOException ex) {\n \t\t\t\t\tlistener.onError(\"Exception thrown providing input to the parser\", ex);\n \t\t\t\t}\n+\t\t\t\tfinally {\n+\t\t\t\t\tDataBufferUtils.release(buffer);\n+\t\t\t\t}\n \t\t\t}, (ex) -> {\n \t\t\t\ttry {\n \t\t\t\t\tlistener.onError(\"Request body input error\", ex);",
    "output": "Fix memory leak in reactive multipart parser"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java\n@@ -41,6 +41,7 @@\n import org.springframework.context.ApplicationContextException;\n import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n import org.springframework.http.MediaType;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n@@ -199,10 +200,12 @@ protected Mono<Void> renderInternal(Map<String, Object> renderAttributes,\n \t\t\tgetTemplate(locale).process(freeMarkerModel, writer);\n \t\t}\n \t\tcatch (IOException ex) {\n+\t\t\tDataBufferUtils.release(dataBuffer);\n \t\t\tString message = \"Could not load FreeMarker template for URL [\" + getUrl() + \"]\";\n \t\t\treturn Mono.error(new IllegalStateException(message, ex));\n \t\t}\n \t\tcatch (Throwable ex) {\n+\t\t\tDataBufferUtils.release(dataBuffer);\n \t\t\treturn Mono.error(ex);\n \t\t}\n \t\treturn exchange.getResponse().writeWith(Flux.just(dataBuffer));",
    "output": "Release DataBuffers in FreeMarkerView When template processing throws an exception, we must ensure that `DataBuffers` are properly released to avoid memory leaks. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -244,7 +244,14 @@ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, @\n \t\t\tboolean useSetObject = false;\n \t\t\tInteger sqlTypeToUse = null;\n \t\t\tif (!shouldIgnoreGetParameterType) {\n-\t\t\t\tsqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);\n+\t\t\t\ttry {\n+\t\t\t\t\tsqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"JDBC getParameterType call failed - using fallback method instead: \" + ex);\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif (sqlTypeToUse == null) {\n \t\t\t\t// Proceed with database-specific checks",
    "output": "Defensively call getParameterType (which might fail for certain statements) Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -422,7 +422,7 @@ public <T> Mono<T> bodyToMono(Class<T> bodyType) {\n \t\tpublic <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference) {\n \t\t\treturn this.responseMono.flatMap(\n \t\t\t\t\tresponse -> bodyToMono(response, BodyExtractors.toMono(typeReference),\n-\t\t\t\t\t\t\tmono -> (Mono<T>)mono));\n+\t\t\t\t\t\t\tthis::monoThrowableToMono));\n \t\t}\n \n \t\tprivate <T> Mono<T> monoThrowableToMono(Mono<? extends Throwable> mono) {",
    "output": "Fix error responses handling in WebClient This commit fixes a typo in the `DefaultWebClient` implementation. Instead of forwarding resolved `WebClientException` instances as error signals, the `bodyToMono(ParameterizedTypeReference)` variant would just forward those exceptions as `onNext` signals. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -430,7 +430,7 @@ public void setDeferredResultInterceptors(List<DeferredResultProcessingIntercept\n \t */\n \tpublic void setReactiveRegistry(ReactiveAdapterRegistry reactiveRegistry) {\n \t\tAssert.notNull(reactiveRegistry, \"ReactiveAdapterRegistry is required\");\n-\t\tthis.reactiveRegistry = this.reactiveRegistry;\n+\t\tthis.reactiveRegistry = reactiveRegistry;\n \t}\n \n \t/**",
    "output": "Fix broken RequestMappingHandlerAdapter setter RequestMappingHandlerAdapter.setReactiveRegistrydoesn't actually set the value appropriately. FYI: I found this using lgtm.com https://lgtm.com/projects/g/spring-projects/spring-framework/alerts/?mode=list"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java\n@@ -429,7 +429,8 @@ else if (StompCommand.DISCONNECT.equals(getCommand())) {\n \t@Override\n \tpublic String getDetailedLogMessage(@Nullable Object payload) {\n \t\tif (isHeartbeat()) {\n-\t\t\treturn \"heart-beat in session \" + getSessionId();\n+\t\t\tString sessionId = getSessionId();\n+\t\t\treturn \"heart-beat\" + (sessionId != null ? \" in session \" + sessionId : \"\");\n \t\t}\n \t\tStompCommand command = getCommand();\n \t\tif (command == null) {",
    "output": "Heart-beat log message potentially without session id Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -38,12 +38,6 @@\n  */\n public class ReactorClientHttpConnector implements ClientHttpConnector {\n \n-\tprivate static final Mono<ClientHttpResponse> NO_CLIENT_RESPONSE_ERROR = Mono.error(\n-\t\t\tnew IllegalStateException(\"HttpClient completed without a response. \" +\n-\t\t\t\t\t\"As a temporary workaround try to disable connection pool. \" +\n-\t\t\t\t\t\"See https://github.com/reactor/reactor-netty/issues/138.\"));\n-\n-\n \tprivate final HttpClient httpClient;\n \n \n@@ -78,8 +72,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\t\t.request(adaptHttpMethod(method),\n \t\t\t\t\t\turi.toString(),\n \t\t\t\t\t\trequest -> requestCallback.apply(adaptRequest(method, uri, request)))\n-\t\t\t\t.map(this::adaptResponse)\n-\t\t\t\t.switchIfEmpty(NO_CLIENT_RESPONSE_ERROR);\n+\t\t\t\t.map(this::adaptResponse);\n \t}\n \n \tprivate io.netty.handler.codec.http.HttpMethod adaptHttpMethod(HttpMethod method) {",
    "output": "Remove temporary workaround for reactor-netty client Now that https://github.com/reactor/reactor-netty/issues/138 is solved, this commit removes the temporary workaround introduced in but leaves the general mechanism for detecting empty responses"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/ResourceHandlerFunctionTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/ResourceHandlerFunctionTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/ResourceHandlerFunctionTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/ResourceHandlerFunctionTests.java\n@@ -41,6 +41,7 @@\n \n /**\n  * @author Arjen Poutsma\n+ * @since 5.0\n  */\n public class ResourceHandlerFunctionTests {\n \n@@ -80,6 +81,7 @@ public void get() throws IOException {\n \t\tMono<Void> result = responseMono.flatMap(response -> {\n \t\t\t\t\tassertEquals(HttpStatus.OK, response.statusCode());\n \t\t\t\t\tassertTrue(response instanceof EntityResponse);\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\t\t\tEntityResponse<Resource> entityResponse = (EntityResponse<Resource>) response;\n \t\t\t\t\tassertEquals(this.resource, entityResponse.entity());\n \t\t\t\t\treturn response.writeTo(exchange, context);\n@@ -115,6 +117,7 @@ public void head() throws IOException {\n \t\tMono<Void> result = responseMono.flatMap(response -> {\n \t\t\tassertEquals(HttpStatus.OK, response.statusCode());\n \t\t\tassertTrue(response instanceof EntityResponse);\n+\t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\tEntityResponse<Resource> entityResponse = (EntityResponse<Resource>) response;\n \t\t\tassertEquals(this.resource.getFilename(), entityResponse.entity().getFilename());\n \t\t\treturn response.writeTo(exchange, context);",
    "output": "Clean up warnings in Gradle build output"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java\n@@ -101,7 +101,8 @@ protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParame\n \t\t}\n \t\telse {\n \t\t\tpublisher = Mono.justOrEmpty(body);\n-\t\t\telementType = (bodyClass == null && body != null ? ResolvableType.forInstance(body) : bodyType);\n+\t\t\telementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?\n+\t\t\t\t\tResolvableType.forInstance(body) : bodyType);\n \t\t}\n \n \t\tif (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {",
    "output": "Improve check for actual return value type Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -195,7 +195,7 @@ public ListenableFuture<Void> shutdown() {\n \n \t\tChannelGroupFuture close = this.channelGroup.close();\n \t\tMono<Void> completion = FutureMono.from(close)\n-\t\t\t\t.doAfterTerminate((x, e) -> {\n+\t\t\t\t.doOnSuccessOrError((x, e) -> {\n \t\t\t\t\t// TODO: https://github.com/reactor/reactor-netty/issues/24\n \t\t\t\t\tshutdownGlobalResources();\n ",
    "output": "One more instance of modified method name in Mono"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,6 @@\n import org.springframework.test.web.Person;\n import org.springframework.test.web.client.MockRestServiceServer;\n import org.springframework.util.concurrent.ListenableFuture;\n-import org.springframework.web.client.AsyncRestTemplate;\n \n import static org.junit.Assert.*;\n import static org.springframework.test.web.client.ExpectedCount.manyTimes;\n@@ -45,7 +44,7 @@\n @SuppressWarnings(\"deprecation\")\n public class SampleAsyncTests {\n \n-\tprivate final AsyncRestTemplate restTemplate = new AsyncRestTemplate();\n+\tprivate final org.springframework.web.client.AsyncRestTemplate restTemplate = new org.springframework.web.client.AsyncRestTemplate();\n \n \tprivate final MockRestServiceServer mockServer = MockRestServiceServer.createServer(this.restTemplate);\n ",
    "output": "Clean up warnings in Gradle build output"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -48,11 +48,13 @@ public class ReactorClientHttpConnector implements ClientHttpConnector {\n \n \n \t/**\n-\t * Create a Reactor Netty {@link ClientHttpConnector} with default {@link ClientOptions}\n-\t * and SSL support enabled.\n+\t * Create a Reactor Netty {@link ClientHttpConnector}\n+\t * with default {@link ClientOptions} and HTTP compression support enabled.\n \t */\n \tpublic ReactorClientHttpConnector() {\n-\t\tthis.httpClient = HttpClient.create();\n+\t\tthis.httpClient = HttpClient.builder()\n+\t\t\t\t.options(options -> options.compression(true))\n+\t\t\t\t.build();\n \t}\n \n \t/**",
    "output": "Enable HTTP compression Reactor ClientHttpConnector `ReactorClientHttpConnector` provides an adapter layer to `WebClient` for using Reactor-Netty's `HttpClient`. This commit enables HTTP compression support by default for this client Connector. Another constructor is still available for providing a custom `HttpOptions` configuration. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandlerTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandlerTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandlerTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandlerTests.java\n@@ -83,7 +83,7 @@ public void supports() throws NoSuchMethodException {\n \t\tmethod = on(TestController.class).annotPresent(ResponseBody.class).resolveMethod();\n \t\ttestSupports(controller, method);\n \n-\t\tmethod = on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod();\n+\t\tmethod = on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod(\"doWork\");\n \t\tHandlerResult handlerResult = getHandlerResult(controller, method);\n \t\tassertFalse(this.resultHandler.supports(handlerResult));\n \t}",
    "output": "Relax test assertion when Jacoco is enabled This commit changes the resolveMethod to take a method name as instrumentation may add additional methods to the test object. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -1139,7 +1139,7 @@ private class RequestBindingInterceptor implements CallableProcessingInterceptor\n \t\tpublic <T> void preProcess(NativeWebRequest webRequest, Callable<T> task) {\n \t\t\tHttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);\n \t\t\tif (request != null) {\n-\t\t\t\tHttpServletResponse response = webRequest.getNativeRequest(HttpServletResponse.class);\n+\t\t\t\tHttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);\n \t\t\t\tinitContextHolders(request, buildLocaleContext(request),\n \t\t\t\t\t\tbuildRequestAttributes(request, response, null));\n \t\t\t}",
    "output": "Properly retrieve and expose HttpServletResponse for async requests Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -734,12 +734,11 @@ public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {\n \t\t * Instantiate a Kotlin class using the provided constructor.\n \t\t * @param ctor the constructor of the Kotlin class to instantiate\n \t\t * @param args the constructor arguments to apply (use null for unspecified parameter if needed)\n-\t\t * @throws BeanInstantiationException if no primary constructor can be found\n \t\t */\n-\t\tpublic static <T> T instantiateClass(Constructor<T> ctor, Object... args) {\n+\t\tpublic static <T> T instantiateClass(Constructor<T> ctor, Object... args) throws IllegalAccessException, InvocationTargetException, InstantiationException {\n \t\t\tKFunction<T> kotlinConstructor = ReflectJvmMapping.getKotlinFunction(ctor);\n \t\t\tif (kotlinConstructor == null) {\n-\t\t\t\tthrow new BeanInstantiationException(ctor.getDeclaringClass(), \"No corresponding Kotlin constructor found\");\n+\t\t\t\treturn ctor.newInstance(args);\n \t\t\t}\n \t\t\tList<KParameter> parameters = kotlinConstructor.getParameters();\n \t\t\tMap<KParameter, Object> argParameters = new HashMap<>(parameters.size());",
    "output": "Fix BeanUtils#instantiateClass w/ Kotlin + noarg constructor Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/script/KotlinScriptTemplateTests.java\n@@ -39,7 +39,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-@Ignore  // for JDK 9 compatibility\n+@Ignore  // for JDK 9 compatibility, see KT-18833\n public class KotlinScriptTemplateTests {\n \n \t@Test\n\ndiff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n@@ -42,7 +42,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-@Ignore  // for JDK 9 compatibility\n+@Ignore  // for JDK 9 compatibility, see KT-18833\n public class KotlinScriptTemplateTests {\n \n \tprivate WebApplicationContext webAppContext;",
    "output": "Add a reference to in JDK 9 ignored tests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/FormContentTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/FormContentTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/FormContentTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/FormContentTests.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.test.web.servlet.samples.spr;\n \n import org.junit.Test;\n@@ -29,11 +30,11 @@\n \n /**\n  * Test for issues related to form content.\n+ *\n  * @author Rossen Stoyanchev\n  */\n public class FormContentTests {\n \n-\n \t@Test // SPR-15753\n \tpublic void formContentIsNotDuplicated() throws Exception {\n \n@@ -55,6 +56,7 @@ public String test(Data d) {\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"unused\")\n \tprivate static class Data {\n \n \t\tprivate String d1;\n@@ -80,4 +82,5 @@ public void setD2(String d2) {\n \t\t\tthis.d2 = d2;\n \t\t}\n \t}\n+\n }",
    "output": "Clean up warnings in spring-test"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -258,12 +258,7 @@ else if (webSocketMessage instanceof BinaryMessage) {\n \n \t\t\t\theaderAccessor.setSessionId(session.getId());\n \t\t\t\theaderAccessor.setSessionAttributes(session.getAttributes());\n-\n-\t\t\t\tPrincipal user = getUser(session);\n-\t\t\t\tif (user != null) {\n-\t\t\t\t\theaderAccessor.setUser(user);\n-\t\t\t\t}\n-\n+\t\t\t\theaderAccessor.setUser(getUser(session));\n \t\t\t\theaderAccessor.setHeader(SimpMessageHeaderAccessor.HEART_BEAT_HEADER, headerAccessor.getHeartbeat());\n \t\t\t\tif (!detectImmutableMessageInterceptor(outputChannel)) {\n \t\t\t\t\theaderAccessor.setImmutable();\n@@ -287,11 +282,13 @@ else if (StompCommand.DISCONNECT.equals(headerAccessor.getCommand())) {\n \n \t\t\t\t\tif (sent) {\n \t\t\t\t\t\tif (isConnect) {\n+\t\t\t\t\t\t\tPrincipal user = headerAccessor.getUser();\n \t\t\t\t\t\t\tif (user != null && user != session.getPrincipal()) {\n \t\t\t\t\t\t\t\tthis.stompAuthentications.put(session.getId(), user);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (this.eventPublisher != null) {\n+\t\t\t\t\t\t\tPrincipal user = getUser(session);\n \t\t\t\t\t\t\tif (isConnect) {\n \t\t\t\t\t\t\t\tpublishEvent(this.eventPublisher, new SessionConnectEvent(this, message, user));\n \t\t\t\t\t\t\t}",
    "output": "StompSubProtocolHandler consistently accesses current user Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -257,7 +257,7 @@ private void doValidateClass(Class<?> proxySuperClass, @Nullable ClassLoader pro\n \t\t\tMethod[] methods = proxySuperClass.getDeclaredMethods();\n \t\t\tfor (Method method : methods) {\n \t\t\t\tint mod = method.getModifiers();\n-\t\t\t\tif (!Modifier.isStatic(mod)) {\n+\t\t\t\tif (!Modifier.isStatic(mod) && !Modifier.isPrivate(mod)) {\n \t\t\t\t\tif (Modifier.isFinal(mod)) {\n \t\t\t\t\t\tif (implementsInterface(method, ifcs)) {\n \t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n@@ -267,7 +267,7 @@ private void doValidateClass(Class<?> proxySuperClass, @Nullable ClassLoader pro\n \t\t\t\t\t\t\t\t\"Calls to this method will NOT be routed to the target instance and \" +\n \t\t\t\t\t\t\t\t\"might lead to NPEs against uninitialized fields in the proxy instance.\");\n \t\t\t\t\t}\n-\t\t\t\t\telse if (!Modifier.isPublic(mod) && !Modifier.isProtected(mod) && !Modifier.isPrivate(mod) &&\n+\t\t\t\t\telse if (!Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&\n \t\t\t\t\t\t\tproxyClassLoader != null && proxySuperClass.getClassLoader() != proxyClassLoader) {\n \t\t\t\t\t\tlogger.info(\"Method [\" + method + \"] is package-visible across different ClassLoaders \" +\n \t\t\t\t\t\t\t\t\"and cannot get proxied via CGLIB: Declare this method as public or protected \" +",
    "output": "Prevent warning about final private methods in CglibAopProxy Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n@@ -173,6 +173,17 @@ public void sequentialRequestsWithDifferentCount() throws Exception {\n \t\tthis.manager.validateRequest(createRequest(GET, \"/bar\"));\n \t}\n \n+\t@Test  // SPR-15719\n+\tpublic void repeatedRequestsInSequentialOrder() throws Exception {\n+\t\tthis.manager.expectRequest(times(2), requestTo(\"/foo\")).andExpect(method(GET)).andRespond(withSuccess());\n+\t\tthis.manager.expectRequest(times(2), requestTo(\"/bar\")).andExpect(method(GET)).andRespond(withSuccess());\n+\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/foo\"));\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/foo\"));\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/bar\"));\n+\t\tthis.manager.validateRequest(createRequest(GET, \"/bar\"));\n+\t}\n+\n \n \tprivate ClientHttpRequest createRequest(HttpMethod method, String url) {\n \t\ttry {",
    "output": "Add test case for"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java\n@@ -130,7 +130,7 @@ public String getDestination() {\n \t\treturn (String) getHeader(DESTINATION_HEADER);\n \t}\n \n-\tpublic void setSubscriptionId(String subscriptionId) {\n+\tpublic void setSubscriptionId(@Nullable String subscriptionId) {\n \t\tsetHeader(SUBSCRIPTION_ID_HEADER, subscriptionId);\n \t}\n \n@@ -139,7 +139,7 @@ public String getSubscriptionId() {\n \t\treturn (String) getHeader(SUBSCRIPTION_ID_HEADER);\n \t}\n \n-\tpublic void setSessionId(String sessionId) {\n+\tpublic void setSessionId(@Nullable String sessionId) {\n \t\tsetHeader(SESSION_ID_HEADER, sessionId);\n \t}\n ",
    "output": "Upgrade to Kotlin 1.1.4-Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -588,7 +588,7 @@ private static String prefixWithSlash(String path) {\n \n \t\t\tprivate static List<Element> prependWithSeparator(List<Element> elements) {\n \t\t\t\tList<Element> result = new ArrayList<>(elements);\n-\t\t\t\tif (!(result.get(0) instanceof Separator)) {\n+\t\t\t\tif (result.isEmpty() || !(result.get(0) instanceof Separator)) {\n \t\t\t\t\tresult.add(0, SEPARATOR);\n \t\t\t\t}\n \t\t\t\treturn Collections.unmodifiableList(result);",
    "output": "Fix an eventual IndexOutOfBoundsException in RequestPredicates"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java\n@@ -30,6 +30,7 @@\n import java.time.Duration;\n import java.util.stream.Collectors;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import reactor.core.publisher.Flux;\n import reactor.test.StepVerifier;\n@@ -206,6 +207,7 @@ public void writeWritableByteChannel() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore  // SPR-15798\n \tpublic void writeAsynchronousFileChannel() throws Exception {\n \t\tDataBuffer foo = stringBuffer(\"foo\");\n \t\tDataBuffer bar = stringBuffer(\"bar\");",
    "output": "Ignore DataBufferUtilsTests#writeAsynchronousFileChannel Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.aop.framework;\n \n+import java.io.Closeable;\n+\n import org.springframework.beans.factory.Aware;\n import org.springframework.beans.factory.BeanClassLoaderAware;\n import org.springframework.beans.factory.DisposableBean;\n@@ -129,8 +131,8 @@ protected void evaluateProxyInterfaces(Class<?> beanClass, ProxyFactory proxyFac\n \t * @return whether the given interface is just a container callback\n \t */\n \tprotected boolean isConfigurationCallbackInterface(Class<?> ifc) {\n-\t\treturn (InitializingBean.class == ifc || DisposableBean.class == ifc ||\n-\t\t\t\tObjectUtils.containsElement(ifc.getInterfaces(), Aware.class));\n+\t\treturn (InitializingBean.class == ifc || DisposableBean.class == ifc || Closeable.class == ifc ||\n+\t\t\t\tAutoCloseable.class == ifc || ObjectUtils.containsElement(ifc.getInterfaces(), Aware.class));\n \t}\n \n \t/**",
    "output": "Ignore (Auto)Closeable for interface-based proxy decisions Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -62,10 +62,10 @@ public ChannelSendOperator(Publisher<? extends T> source, Function<Publisher<T>,\n \t@Nullable\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic Object scanUnsafe(Attr key) {\n-\t\tif (key == IntAttr.PREFETCH) {\n+\t\tif (key == Attr.PREFETCH) {\n \t\t\treturn Integer.MAX_VALUE;\n \t\t}\n-\t\tif (key == ScannableAttr.PARENT) {\n+\t\tif (key == Attr.PARENT) {\n \t\t\treturn this.source;\n \t\t}\n \t\treturn null;",
    "output": "Upgrade for reactor-core change"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -48,7 +48,6 @@\n import reactor.ipc.netty.resources.PoolResources;\n import reactor.ipc.netty.tcp.TcpClient;\n import reactor.ipc.netty.tcp.TcpResources;\n-import reactor.util.concurrent.QueueSupplier;\n \n import org.springframework.messaging.Message;\n import org.springframework.messaging.tcp.ReconnectStrategy;\n@@ -69,6 +68,9 @@\n  */\n public class ReactorNettyTcpClient<P> implements TcpOperations<P> {\n \n+\tprivate static final int PUBLISH_ON_BUFFER_SIZE = 16;\n+\n+\n \tprivate final TcpClient tcpClient;\n \n \tprivate final ReactorNettyCodec<P> codec;\n@@ -246,7 +248,7 @@ public Publisher<Void> apply(NettyInbound inbound, NettyOutbound outbound) {\n \n \t\t\tinbound.receiveObject()\n \t\t\t\t\t.cast(Message.class)\n-\t\t\t\t\t.publishOn(scheduler, QueueSupplier.SMALL_BUFFER_SIZE)\n+\t\t\t\t\t.publishOn(scheduler, PUBLISH_ON_BUFFER_SIZE)\n \t\t\t\t\t.subscribe(\n \t\t\t\t\t\t\tconnectionHandler::handleMessage,\n \t\t\t\t\t\t\tconnectionHandler::handleFailure,",
    "output": "Replace constant from QueueSupplier with local one"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n@@ -64,7 +64,7 @@\n  * @see ReflectionUtils\n  * @see AopTestUtils\n  */\n-public class ReflectionTestUtils {\n+public abstract class ReflectionTestUtils {\n \n \tprivate static final String SETTER_PREFIX = \"set\";\n ",
    "output": "Missing abstract declaration on ReflectionTestUtils Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1589,7 +1589,7 @@ private Object readResolve() {\n \t\t\t\t}\n \t\t\t}\n \t\t\t// Lenient fallback: dummy factory in case of original factory not found...\n-\t\t\treturn new StaticListableBeanFactory(Collections.<String, Object> emptyMap());\n+\t\t\treturn new DefaultListableBeanFactory();\n \t\t}\n \t}\n ",
    "output": "DefaultListableBeanFactory falls back to empty DLBF instance on deserialization Issue: (cherry picked from commit c9ffa64)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -397,6 +397,8 @@ public class HttpHeaders implements MultiValueMap<String, String>, Serializable\n \n \tprivate final Map<String, List<String>> headers;\n \n+\tprivate final boolean readOnly;\n+\n \n \t/**\n \t * Constructs a new, empty instance of the {@code HttpHeaders} object.\n@@ -422,6 +424,7 @@ private HttpHeaders(Map<String, List<String>> headers, boolean readOnly) {\n \t\telse {\n \t\t\tthis.headers = headers;\n \t\t}\n+\t\tthis.readOnly = readOnly;\n \t}\n \n \n@@ -1542,7 +1545,7 @@ public String toString() {\n \t * Return a {@code HttpHeaders} object that can only be read, not written to.\n \t */\n \tpublic static HttpHeaders readOnlyHttpHeaders(HttpHeaders headers) {\n-\t\treturn new HttpHeaders(headers, true);\n+\t\treturn headers.readOnly ? headers : new HttpHeaders(headers, true);\n \t}\n \n }",
    "output": "Read-Only HttpHeaders only created when necessary This commit introduces a boolean `readOnly` flag in `HttpHeaders`, which is used to check if creating a new `HttpHeaders` instance is necessary in `readOnlyHttpHeaders`"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java\n@@ -458,10 +458,9 @@ protected Object createProxy(Class<?> beanClass, @Nullable String beanName,\n \t\t}\n \n \t\tAdvisor[] advisors = buildAdvisors(beanName, specificInterceptors);\n-\t\tfor (Advisor advisor : advisors) {\n-\t\t\tproxyFactory.addAdvisor(advisor);\n-\t\t}\n-\n+\t\t\n+\t\tproxyFactory.addAdvisors(advisors);\n+\t\t\n \t\tproxyFactory.setTargetSource(targetSource);\n \t\tcustomizeProxyFactory(proxyFactory);\n ",
    "output": "Use dedicated addAdvisors"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n--- a/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java\n@@ -173,18 +173,6 @@ public void decodeEmptyBodyToMono() throws Exception {\n \t\t\t\t.verifyComplete();\n \t}\n \n-\t@Test\n-\t@Ignore\n-\tpublic void decodeEmptyArrayToMono() throws Exception {\n-\t\tFlux<DataBuffer> source = Flux.just(stringBuffer(\"[]\"));\n-\t\tResolvableType elementType = forClass(Pojo.class);\n-\t\tMono<Object> mono = new Jackson2JsonDecoder().decodeToMono(source, elementType, null, emptyMap());\n-\n-\t\tStepVerifier.create(mono)\n-\t\t\t\t.expectNextCount(0)\n-\t\t\t\t.verifyComplete();\n-\t}\n-\n \t@Test\n \tpublic void invalidData() throws Exception {\n \t\tFlux<DataBuffer> source = Flux.just(stringBuffer( \"{\\\"foofoo\\\": \\\"foofoo\\\", \\\"barbar\\\": \\\"barbar\\\"}\"));",
    "output": "Remove faulty test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -229,9 +229,9 @@ public void request(long n) {\n \t\t\t\t\tif (n == 0) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\ts.request(n);\n \t\t\t\t}\n \t\t\t}\n-\t\t\ts.request(n);\n \t\t}\n \n \t\tprivate boolean emitCachedSignals() {",
    "output": "Fix recently intorduced bug in ChannelSendOperator WriteBarrier acts as Subscription to both completionSubscriber and writeSubscriber so the request method needs to be careful not to pass on the request outside of readyToWrite or writeSubscriber checks"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n@@ -706,12 +706,14 @@ private class AggregatedExceptionListener implements ExceptionListener {\n \n \t\t@Override\n \t\tpublic void onException(JMSException ex) {\n+\t\t\t// Iterate over temporary copy in order to avoid ConcurrentModificationException,\n+\t\t\t// since listener invocations may in turn trigger registration of listeners...\n+\t\t\tSet<ExceptionListener> copy;\n \t\t\tsynchronized (connectionMonitor) {\n-\t\t\t\t// Iterate over temporary copy in order to avoid ConcurrentModificationException,\n-\t\t\t\t// since listener invocations may in turn trigger registration of listeners...\n-\t\t\t\tfor (ExceptionListener listener : new LinkedHashSet<>(this.delegates)) {\n-\t\t\t\t\tlistener.onException(ex);\n-\t\t\t\t}\n+\t\t\t\tcopy = new LinkedHashSet<>(this.delegates);\n+\t\t\t}\n+\t\t\tfor (ExceptionListener listener : copy) {\n+\t\t\t\tlistener.onException(ex);\n \t\t\t}\n \t\t}\n \t}",
    "output": "Perform onException delegation outside of connection monitor Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/FailingBeforeAndAfterMethodsSpringExtensionTestCase.java b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/FailingBeforeAndAfterMethodsSpringExtensionTestCase.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/FailingBeforeAndAfterMethodsSpringExtensionTestCase.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/FailingBeforeAndAfterMethodsSpringExtensionTestCase.java\n@@ -89,7 +89,6 @@ Stream<DynamicTest> generateTests() throws Exception {\n \t\treturn testClasses().map(clazz -> dynamicTest(clazz.getSimpleName(), () -> runTestAndAssertCounters(clazz)));\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")\n \tprivate void runTestAndAssertCounters(Class<?> testClass) {\n \t\tLauncher launcher = LauncherFactory.create();\n \t\tExceptionTrackingListener listener = new ExceptionTrackingListener();",
    "output": "Clean up deprecation warnings in spring-test"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -21,11 +21,11 @@\n import org.reactivestreams.Publisher;\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n import reactor.core.Scannable;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.Operators;\n-import reactor.util.context.Context;\n \n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n@@ -69,8 +69,8 @@ public Object scanUnsafe(Attr key) {\n \t}\n \n \t@Override\n-\tpublic void subscribe(Subscriber<? super Void> s, Context ctx) {\n-\t\tthis.source.subscribe(new WriteWithBarrier(s), ctx);\n+\tpublic void subscribe(CoreSubscriber<? super Void> actual) {\n+\t\tthis.source.subscribe(new WriteWithBarrier(actual));\n \t}\n \n ",
    "output": "Reflect recent Reactor changes"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java\n@@ -81,7 +81,7 @@ public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t * Retrieve the {@code ExchangeResult} for the given \"request-id\" header value.\n \t */\n \tpublic ExchangeResult claimRequest(String requestId) {\n-\t\tExchangeResult result = this.exchanges.get(requestId);\n+\t\tExchangeResult result = this.exchanges.remove(requestId);\n \t\tAssert.notNull(result, \"No match for \" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + \"=\" + requestId);\n \t\treturn result;\n \t}",
    "output": "WiretapConnector removes exchanges Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/WebSocketIntegrationTests.java\n@@ -22,7 +22,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicReference;\n-import java.util.logging.Level;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -33,16 +32,15 @@\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.MonoProcessor;\n import reactor.core.publisher.ReplayProcessor;\n-import reactor.core.publisher.SignalType;\n-import sun.util.logging.PlatformLogger;\n \n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.HttpHeaders;\n import org.springframework.web.reactive.HandlerMapping;\n import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n \n /**\n  * Integration tests with server-side {@link WebSocketHandler}s.",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -532,7 +532,6 @@ public static String capitalize(String str) {\n \t * @param str the {@code String} to uncapitalize\n \t * @return the uncapitalized {@code String}\n \t */\n-\t@Nullable\n \tpublic static String uncapitalize(String str) {\n \t\treturn changeFirstCharacterCase(str, false);\n \t}",
    "output": "StringUtils.uncapitalize is not actually nullable Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java\n@@ -141,7 +141,6 @@ public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> ma\n \t/**\n \t * Assert a session attribute value.\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n \tpublic <T> ResultMatcher sessionAttribute(final String name, final Object value) {\n \t\treturn result -> {\n \t\t\tHttpSession session = result.getRequest().getSession();\n\ndiff --git a/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java\n@@ -169,7 +169,6 @@ public void sequentialRequestsWithDifferentCount() throws Exception {\n \t}\n \n \n-\t@SuppressWarnings(\"deprecation\")\n \tprivate ClientHttpRequest createRequest(HttpMethod method, String url) {\n \t\ttry {\n \t\t\treturn new MockClientHttpRequest(method, new URI(url));",
    "output": "Clean up warnings in spring-test"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java\n@@ -221,7 +221,16 @@ protected void removeSingleton(String beanName) {\n \t}\n \n \t/**\n-\t * Returns the security context for this bean factory. If a security manager\n+\t * Overridden to clear the FactoryBean object cache as well.\n+\t */\n+\t@Override\n+\tpublic void destroySingletons() {\n+\t\tsuper.destroySingletons();\n+\t\tthis.factoryBeanObjectCache.clear();\n+\t}\n+\n+\t/**\n+\t * Return the security context for this bean factory. If a security manager\n \t * is set, interaction with the user code will be executed using the privileged\n \t * of the security context returned by this method.\n \t * @see AccessController#getContext()",
    "output": "FactoryBean object cache cleared on shutdown Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n@@ -292,22 +292,20 @@ public <S> boolean handleTimeout(NativeWebRequest request, DeferredResult<S> def\n \t\t\t}\n \t\t\t@Override\n \t\t\tpublic <S> boolean handleError(NativeWebRequest request, DeferredResult<S> deferredResult, Throwable t) {\n-\t\t\t\tboolean continueProcessing = true;\n \t\t\t\ttry {\n \t\t\t\t\tif (errorCallback != null) {\n \t\t\t\t\t\terrorCallback.accept(t);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tfinally {\n-\t\t\t\t\tcontinueProcessing = false;\n \t\t\t\t\ttry {\n \t\t\t\t\t\tsetResultInternal(t);\n \t\t\t\t\t}\n \t\t\t\t\tcatch (Throwable ex) {\n \t\t\t\t\t\tlogger.debug(\"Failed to handle error result\", ex);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\treturn continueProcessing;\n+\t\t\t\treturn false;\n \t\t\t}\n \t\t\t@Override\n \t\t\tpublic <S> void afterCompletion(NativeWebRequest request, DeferredResult<S> deferredResult) {",
    "output": "Polish - the flag continueProcessing is not needed"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n@@ -106,14 +106,14 @@ public Flux<XMLEvent> decode(Publisher<DataBuffer> inputStream, ResolvableType e\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tInputStream is = dataBuffer.asInputStream();\n \t\t\t\t\t\t\tIterator eventReader = inputFactory.createXMLEventReader(is);\n-\t\t\t\t\t\t\treturn Flux.fromIterable((Iterable<XMLEvent>) () -> eventReader);\n+\t\t\t\t\t\t\treturn Flux.fromIterable((Iterable<XMLEvent>) () -> eventReader)\n+\t\t\t\t\t\t\t\t\t.doFinally(t -> {\n+\t\t\t\t\t\t\t\t\t\tDataBufferUtils.release(dataBuffer);\n+\t\t\t\t\t\t\t\t\t});\n \t\t\t\t\t\t}\n \t\t\t\t\t\tcatch (XMLStreamException ex) {\n \t\t\t\t\t\t\treturn Mono.error(ex);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tfinally {\n-\t\t\t\t\t\t\tDataBufferUtils.release(dataBuffer);\n-\t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t}\n \t}",
    "output": "Delay DataBuffer release until stream is closed This commit changes the release of data buffers from a finally block into a `doFinally` lambda on the returned `Flux<XMLEvent>` stream. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -60,8 +60,8 @@\n public interface AsyncHandlerInterceptor extends HandlerInterceptor {\n \n \t/**\n-\t * Called instead of {@code postHandle} and {@code afterCompletion}, when\n-\t * the a handler is being executed concurrently.\n+\t * Called instead of {@code postHandle} and {@code afterCompletion}\n+\t * when the handler is being executed concurrently.\n \t * <p>Implementations may use the provided request and response but should\n \t * avoid modifying them in ways that would conflict with the concurrent\n \t * execution of the handler. A typical use of this method would be to\n@@ -72,7 +72,9 @@ public interface AsyncHandlerInterceptor extends HandlerInterceptor {\n \t * execution, for type and/or instance examination\n \t * @throws Exception in case of errors\n \t */\n-\tvoid afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler)\n-\t\t\tthrows Exception;\n+\tdefault void afterConcurrentHandlingStarted(\n+\t\t\tHttpServletRequest request, HttpServletResponse response, Object handler)\n+\t\t\tthrows Exception {\n+\t}\n \n }",
    "output": "AsyncHandlerInterceptor.afterConcurrentHandlingStarted declared as default method Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n--- a/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n@@ -17,6 +17,7 @@\n \n import java.time.Clock;\n import java.time.Instant;\n+import java.time.ZoneId;\n import java.util.List;\n import java.util.UUID;\n \n@@ -41,7 +42,7 @@ public class DefaultWebSessionManager implements WebSessionManager {\n \n \tprivate WebSessionStore sessionStore = new InMemoryWebSessionStore();\n \n-\tprivate Clock clock = Clock.systemDefaultZone();\n+\tprivate Clock clock = Clock.system(ZoneId.of(\"GMT\"));\n \n \n \t/**\n@@ -82,7 +83,7 @@ public WebSessionStore getSessionStore() {\n \t * Configure the {@link Clock} for access to current time. During tests you\n \t * may use {code Clock.offset(clock, Duration.ofMinutes(-31))} to set the\n \t * clock back for example to test changes after sessions expire.\n-\t * <p>By default {@link Clock#systemDefaultZone()} is used.\n+\t * <p>By default {@code Clock.system(ZoneId.of(\"GMT\"))} is used.\n \t * @param clock the clock to use\n \t */\n \tpublic void setClock(Clock clock) {",
    "output": "Use fixed GMT time-zone for WebSession Clock Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java\n@@ -146,7 +146,7 @@ public WebTestClient build() {\n \t\t\t\tnew HttpHandlerConnector(this.httpHandlerBuilder.build()));\n \n \t\tDefaultWebTestClientBuilder webTestClientBuilder = new DefaultWebTestClientBuilder(\n-\t\t\t\tthis.webClientBuilder.build().mutate(), this.httpHandlerBuilder,\n+\t\t\t\tthis.webClientBuilder.cloneBuilder(), this.httpHandlerBuilder,\n \t\t\t\tthis.connector, this.responseTimeout);\n \n \t\treturn new DefaultWebTestClient(this.webClientBuilder,",
    "output": "Fix test failure by using the new cloneBuilder method The cloneBuilder helps to avoid the issue in the comment of the ticket. Rather than creating the WebClient to then obtain a fresh builder which causes connector instantiation, we now use the cloneBuilder Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java\n@@ -92,6 +92,11 @@ public WebClient.Builder baseUrl(String baseUrl) {\n \t\treturn this;\n \t}\n \n+\t@Override\n+\tpublic WebClient.Builder cloneBuilder() {\n+\t\treturn new DefaultWebClientBuilder(this);\n+\t}\n+\n \t@Override\n \tpublic WebClient.Builder defaultUriVariables(Map<String, ?> defaultUriVariables) {\n \t\tthis.defaultUriVariables = defaultUriVariables;\n\ndiff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java\n@@ -192,6 +192,11 @@ interface Builder {\n \t\t */\n \t\tBuilder baseUrl(String baseUrl);\n \n+\t\t/**\n+\t\t * Clone this {@code WebClient.Builder}\n+\t\t */\n+\t\tBuilder cloneBuilder();\n+\n \t\t/**\n \t\t * Configure default URI variable values that will be used when expanding\n \t\t * URI templates using a {@link Map}.",
    "output": "Add cloneBuilder method on WebClient.Builder This commit adds a new `cloneBuilder` method on `WebClient.Builder`; we can now reuse the customizations of an existing builder without sharing its state across several `WebClient` building code paths. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java\n@@ -206,7 +206,7 @@ public DefaultRequestBodySpec header(String headerName, String... headerValues)\n \t\t@Override\n \t\tpublic DefaultRequestBodySpec headers(Consumer<HttpHeaders> headersConsumer) {\n \t\t\tAssert.notNull(headersConsumer, \"'headersConsumer' must not be null\");\n-\t\t\theadersConsumer.accept(this.headers);\n+\t\t\theadersConsumer.accept(getHeaders());\n \t\t\treturn this;\n \t\t}\n ",
    "output": "Fix initialization issue with headers in DefaultWebClient This commit fixes a lazy initialization issue in `headers(Consumer<HttpHeaders>)`. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java\n@@ -43,7 +43,7 @@ class DefaultPathSegmentContainer implements PathSegmentContainer {\n \t\t\tnew DefaultPathSegmentContainer(\"\", Collections.emptyList());\n \n \tprivate static final PathSegmentContainer ROOT_PATH =\n-\t\t\tnew DefaultPathSegmentContainer(\"/\", Collections.singletonList(EMPTY_PATH_SEGMENT));\n+\t\t\tnew DefaultPathSegmentContainer(\"/\", Collections.emptyList());\n \n \n \tprivate final String path;\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/DefaultPathSegmentContainerTests.java\n@@ -92,7 +92,7 @@ public void path() throws Exception {\n \t\ttestPath(\"/a/b/c\", \"/a/b/c\", false, true, Arrays.asList(\"a\", \"b\", \"c\"), false);\n \n \t\t// root path\n-\t\ttestPath(\"/\", \"/\", false, true, Collections.singletonList(\"\"), false);\n+\t\ttestPath(\"/\", \"/\", false, true, Collections.emptyList(), false);\n \n \t\t// empty path\n \t\ttestPath(\"\",   \"\", true, false, Collections.emptyList(), false);",
    "output": "Fix ROOT_PATH constant to match recent changes \"/\" should be 0 segments, isAbsolute=true, hasTrailingSlash=false"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n@@ -70,6 +70,9 @@\n  */\n class ReactiveTypeHandler {\n \n+\tprivate static final long STREAMING_TIMEOUT_VALUE = -1;\n+\n+\n \tprivate static Log logger = LogFactory.getLog(ReactiveTypeHandler.class);\n \n \tprivate final ReactiveAdapterRegistry reactiveRegistry;\n@@ -126,7 +129,7 @@ public ResponseBodyEmitter handleValue(Object returnValue, MethodParameter retur\n \t\tif (adapter.isMultiValue()) {\n \t\t\tif (mediaTypes.stream().anyMatch(MediaType.TEXT_EVENT_STREAM::includes) ||\n \t\t\t\t\tServerSentEvent.class.isAssignableFrom(elementClass)) {\n-\t\t\t\tSseEmitter emitter = new SseEmitter();\n+\t\t\t\tSseEmitter emitter = new SseEmitter(STREAMING_TIMEOUT_VALUE);\n \t\t\t\tnew SseEmitterSubscriber(emitter, this.taskExecutor).connect(adapter, returnValue);\n \t\t\t\treturn emitter;\n \t\t\t}\n@@ -162,7 +165,7 @@ private Collection<MediaType> getMediaTypes(NativeWebRequest request)\n \t}\n \n \tprivate ResponseBodyEmitter getEmitter(MediaType mediaType) {\n-\t\treturn new ResponseBodyEmitter() {\n+\t\treturn new ResponseBodyEmitter(STREAMING_TIMEOUT_VALUE) {\n \t\t\t@Override\n \t\t\tprotected void extendResponse(ServerHttpResponse outputMessage) {\n \t\t\t\toutputMessage.getHeaders().setContentType(mediaType);",
    "output": "Adjust timeout in Spring MVC for reactive streaming Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/pattern/PathPatternParser.java b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPatternParser.java\n--- a/spring-web/src/main/java/org/springframework/web/util/pattern/PathPatternParser.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPatternParser.java\n@@ -33,7 +33,7 @@ public class PathPatternParser {\n \t\n \t// Whether the PathPatterns produced by the parser will allow patterns that don't\n \t// have a trailing slash to match paths that may or may not have a trailing slash.\n-\tprivate boolean matchOptionalTrailingSlash = false;\n+\tprivate boolean matchOptionalTrailingSlash = true;\n \n \t// If the parser produces case-sensitive PathPattern matchers.\n \tprivate boolean caseSensitive = true;",
    "output": "Enable trailing slash matching by default This commit enables trailing slash matching in `PathPatternParser` by default - this mirrors the default configuration in `PathMatcher` implementations in MVC"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractMonoToListenableFutureAdapter.java\n@@ -62,7 +62,7 @@ protected AbstractMonoToListenableFutureAdapter(Mono<S> mono) {\n \t\t\t\t\tregistry.success(adapted);\n \t\t\t\t})\n \t\t\t\t.doOnError(this.registry::failure)\n-\t\t\t\t.subscribe();\n+\t\t\t\t.toProcessor();\n \t}\n \n ",
    "output": "Upgrade to Reactor Bismuth-M2 Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n@@ -102,7 +102,7 @@ public Object getProperty(String name) {\n \t * any underscore / uppercase variation thereof. Return the resolved name if one is\n \t * found or otherwise the original name. Never returns {@code null}.\n \t */\n-\tprivate String resolvePropertyName(String name) {\n+\tprotected final String resolvePropertyName(String name) {\n \t\tAssert.notNull(name, \"Property name must not be null\");\n \t\tString resolvedName = checkPropertyName(name);\n \t\tif (resolvedName != null) {",
    "output": "Make resolvePropertyName available to subclasses Change `SystemEnvironmentPropertySource.resolvePropertyName` to a protected final method so that subclasses may call it. Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java\n@@ -73,7 +73,12 @@ public ClientRequest.Builder header(String headerName, String... headerValues) {\n \n \t@Override\n \tpublic ClientRequest.Builder headers(HttpHeaders headers) {\n-\t\tthis.headers.putAll(headers);\n+\t\tfor (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n+\t\t\tString headerName = entry.getKey();\n+\t\t\tfor (String headerValue : entry.getValue()) {\n+\t\t\t\tthis.headers.add(headerName, headerValue);\n+\t\t\t}\n+\t\t}\n \t\treturn this;\n \t}\n ",
    "output": "Copy header values instead of header lists in DefaultClientRequestBuilder This commit changes the `headers(HttpHeaders)` method in DefaultClientRequestBuilder so that it copies the individual header values instead of using the `List<String>` value directly. The reason for this change is that the list of values can be immutable, and adding additional values after that could result in UnsupportedOperationExceptions"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n@@ -52,4 +52,5 @@ private String[] getParameterNames(Parameter[] parameters) {\n \t\t}\n \t\treturn parameterNames;\n \t}\n+\n }",
    "output": "Refactor duplicated code"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n@@ -33,21 +33,15 @@ public class StandardReflectionParameterNameDiscoverer implements ParameterNameD\n \n \t@Override\n \tpublic String[] getParameterNames(Method method) {\n-\t\tParameter[] parameters = method.getParameters();\n-\t\tString[] parameterNames = new String[parameters.length];\n-\t\tfor (int i = 0; i < parameters.length; i++) {\n-\t\t\tParameter param = parameters[i];\n-\t\t\tif (!param.isNamePresent()) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\tparameterNames[i] = param.getName();\n-\t\t}\n-\t\treturn parameterNames;\n+\t\treturn getParameterNames(method.getParameters());\n \t}\n \n \t@Override\n \tpublic String[] getParameterNames(Constructor<?> ctor) {\n-\t\tParameter[] parameters = ctor.getParameters();\n+\t\treturn getParameterNames(ctor.getParameters());\n+\t}\n+\n+\tprivate String[] getParameterNames(Parameter[] parameters) {\n \t\tString[] parameterNames = new String[parameters.length];\n \t\tfor (int i = 0; i < parameters.length; i++) {\n \t\t\tParameter param = parameters[i];\n@@ -58,5 +52,4 @@ public String[] getParameterNames(Constructor<?> ctor) {\n \t\t}\n \t\treturn parameterNames;\n \t}\n-\n }",
    "output": "Refactor duplicated code"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -109,7 +109,7 @@ public void registerReactiveType(ReactiveTypeDescriptor descriptor,\n \t/**\n \t * Get the adapter for the given reactive type.\n \t */\n-\tpublic ReactiveAdapter getAdapter(Class<?> reactiveType) {\n+\tpublic ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType) {\n \t\treturn getAdapter(reactiveType, null);\n \t}\n ",
    "output": "Add missing @Nullable annotation Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n@@ -146,6 +146,7 @@ protected DataBuffer read() throws IOException {\n \t\t\t\tthis.pooledByteBuffer = this.byteBufferPool.allocate();\n \t\t\t}\n \t\t\tByteBuffer byteBuffer = this.pooledByteBuffer.getBuffer();\n+\t\t\tbyteBuffer.clear();\n \t\t\tint read = this.channel.read(byteBuffer);\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"read:\" + read);",
    "output": "Clear the buffer provided by Undertow before reading the request When reading more that once for a given request, the position/limit of the buffer provided by Undertow should be reset in order to use the full capacity of the buffer"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/package-info.java\n@@ -0,0 +1,10 @@\n+/**\n+ * Mock objects for the functional web framework.\n+ *\n+ * <p>Useful for testing router and handler functions.\n+ *\n+ */\n+@NonNullApi\n+package org.springframework.mock.web.reactive.function.server;\n+\n+import org.springframework.lang.NonNullApi;",
    "output": "Add package-info.java to mock.web.reactive.function.server"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -467,7 +467,7 @@ public void setAcceptLanguage(List<Locale.LanguageRange> languages) {\n \t */\n \tpublic List<Locale.LanguageRange> getAcceptLanguage() {\n \t\tString value = getFirst(ACCEPT_LANGUAGE);\n-\t\treturn value != null ? Locale.LanguageRange.parse(value) : Collections.emptyList();\n+\t\treturn StringUtils.hasText(value) ? Locale.LanguageRange.parse(value) : Collections.emptyList();\n \t}\n \n \t/**\n\ndiff --git a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java\n@@ -447,6 +447,12 @@ public void acceptLanguage() {\n \t\tassertEquals(Locale.FRANCE, headers.getAcceptLanguageAsLocales().get(0));\n \t}\n \n+\t@Test // SPR-15603\n+\tpublic void acceptLanguageWithEmptyValue() throws Exception {\n+\t\tthis.headers.set(HttpHeaders.ACCEPT_LANGUAGE, \"\");\n+\t\tassertEquals(Collections.emptyList(), this.headers.getAcceptLanguageAsLocales());\n+\t}\n+\n \t@Test\n \tpublic void contentLanguage() {\n \t\theaders.setContentLanguage(Locale.FRANCE);",
    "output": "Ignore empty Accept-Language header value Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/Nullable.java b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n--- a/spring-core/src/main/java/org/springframework/lang/Nullable.java\n+++ b/spring-core/src/main/java/org/springframework/lang/Nullable.java\n@@ -6,7 +6,9 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import javax.annotation.meta.TypeQualifierDefault;\n+import javax.annotation.Nonnull;\n+import javax.annotation.meta.TypeQualifierNickname;\n+import javax.annotation.meta.When;\n \n /**\n  * Leverage JSR 305 meta-annotations to define the annotated element could be null\n@@ -20,9 +22,9 @@\n  * @see javax.annotation.Nullable\n  */\n @Documented\n-@javax.annotation.Nullable\n+@TypeQualifierNickname\n+@Nonnull(when= When.MAYBE)\n @Target({ElementType.METHOD, ElementType.PARAMETER})\n-@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Nullable {\n }",
    "output": "Improve @Nullable annotation This commit makes Spring @Nullable annotation leveraging JSR 305 @TypeQualifierNickname + @Nonnull(when= When.MAYBE) instead of directly using @javax.annotation.Nullable which seems not designed to be used as a meta-annotation. It also removes @TypeQualifierDefault since the purpose of this annotation when applied at method level is to only change return value nullability, not parameters one. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/JsonbHttpMessageConverterTests.java\n@@ -24,7 +24,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.core.ParameterizedTypeReference;\n@@ -36,9 +35,11 @@\n import static org.junit.Assert.*;\n \n /**\n+ * Integration tests for the JSON Binding API, running against Apache Johnzon.\n+ *\n  * @author Juergen Hoeller\n+ * @since 5.0\n  */\n-@Ignore  // until we are able to include Eclipse Yasson (the JSONB RI) in our build setup\n public class JsonbHttpMessageConverterTests {\n \n \tprivate final JsonbHttpMessageConverter converter = new JsonbHttpMessageConverter();\n@@ -133,7 +134,7 @@ public void writeUTF16() throws IOException {\n \t\tMockHttpOutputMessage outputMessage = new MockHttpOutputMessage();\n \t\tString body = \"H\\u00e9llo W\\u00f6rld\";\n \t\tthis.converter.write(body, contentType, outputMessage);\n-\t\tassertEquals(\"Invalid result\", \"\\\"\" + body + \"\\\"\", outputMessage.getBodyAsString(StandardCharsets.UTF_16BE));\n+\t\tassertEquals(\"Invalid result\", body, outputMessage.getBodyAsString(StandardCharsets.UTF_16BE));\n \t\tassertEquals(\"Invalid content-type\", contentType, outputMessage.getHeaders().getContentType());\n \t}\n ",
    "output": "Use Apache Johnzon 1.1 for JSON-B integration tests Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java\n@@ -514,8 +514,9 @@ static class ConfigWithFunctionalRegistration {\n \t\tvoid register(GenericApplicationContext ctx) {\n \t\t\tctx.registerBean(\"spouse\", TestBean.class,\n \t\t\t\t\t() -> new TestBean(\"functional\"));\n+\t\t\tSupplier<TestBean> testBeanSupplier = () -> new TestBean(ctx.getBean(\"spouse\", TestBean.class));\n \t\t\tctx.registerBean(TestBean.class,\n-\t\t\t\t\t() -> new TestBean(ctx.getBean(\"spouse\", TestBean.class)),\n+\t\t\t\t\ttestBeanSupplier,\n \t\t\t\t\tbd -> bd.setPrimary(true));\n \t\t}\n ",
    "output": "Adjust source in test class to work around eclipse compiler bug Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -86,8 +86,8 @@ public void afterConnectionClosed(WebSocketSession session, CloseStatus closeSta\n \n \n \tpublic static void tryCloseWithError(WebSocketSession session, Throwable exception, Log logger) {\n-\t\tif (logger.isDebugEnabled()) {\n-\t\t\tlogger.debug(\"Closing due to exception for \" + session, exception);\n+\t\tif (logger.isErrorEnabled()) {\n+\t\t\tlogger.error(\"Closing session due to exception for \" + session, exception);\n \t\t}\n \t\tif (session.isOpen()) {\n \t\t\ttry {",
    "output": "ExceptoinWebSocketHandlerDecorator uses ERROR level Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -293,7 +293,8 @@ public void updateAfterNewSubscription(String destination, String sessionId, Str\n \t\t\t\t\tif (getPathMatcher().match(destination, cachedDestination)) {\n \t\t\t\t\t\tLinkedMultiValueMap<String, String> subs = entry.getValue();\n \t\t\t\t\t\t// Subscription id's may also be populated via getSubscriptions()\n-\t\t\t\t\t\tif (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {\n+\t\t\t\t\t\tList<String> subsForSession = subs.get(sessionId);\n+\t\t\t\t\t\tif (subsForSession == null || !subsForSession.contains(subsId)) {\n \t\t\t\t\t\t\tsubs.add(sessionId, subsId);\n \t\t\t\t\t\t\tthis.accessCache.put(cachedDestination, subs.deepCopy());\n \t\t\t\t\t\t}",
    "output": "Protect against NPE in DefaultSubscriptionRegistry Follow-up fix on the recent commit https://github.com/spring-projects/spring-framework/commit/44c31a Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -292,8 +292,11 @@ public void updateAfterNewSubscription(String destination, String sessionId, Str\n \t\t\t\t\tString cachedDestination = entry.getKey();\n \t\t\t\t\tif (getPathMatcher().match(destination, cachedDestination)) {\n \t\t\t\t\t\tLinkedMultiValueMap<String, String> subs = entry.getValue();\n-\t\t\t\t\t\tsubs.add(sessionId, subsId);\n-\t\t\t\t\t\tthis.accessCache.put(cachedDestination, subs.deepCopy());\n+\t\t\t\t\t\t// Subscription id's may also be populated via getSubscriptions()\n+\t\t\t\t\t\tif (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {\n+\t\t\t\t\t\t\tsubs.add(sessionId, subsId);\n+\t\t\t\t\t\t\tthis.accessCache.put(cachedDestination, subs.deepCopy());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix duplicate STOMP subscription id issue Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ResourceUtils.java b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ResourceUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java\n@@ -341,8 +341,11 @@ public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\n \n \t\tint endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);\n \t\tif (endIndex != -1) {\n-\t\t\t// Tomcat's \"jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt\"\n+\t\t\t// Tomcat's \"war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt\"\n \t\t\tString warFile = urlFile.substring(0, endIndex);\n+\t\t\tif (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {\n+\t\t\t\treturn new URL(warFile);\n+\t\t\t}\n \t\t\tint startIndex = warFile.indexOf(WAR_URL_PREFIX);\n \t\t\tif (startIndex != -1) {\n \t\t\t\treturn new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));\n@@ -356,8 +359,6 @@ public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\n \t/**\n \t * Create a URI instance for the given URL,\n \t * replacing spaces with \"%20\" URI encoding first.\n-\t * <p>Furthermore, this method works on JDK 1.4 as well,\n-\t * in contrast to the {@code URL.toURI()} method.\n \t * @param url the URL to convert into a URI instance\n \t * @return the URI instance\n \t * @throws URISyntaxException if the URL wasn't a valid URI",
    "output": "ResourceUtils.extractArchiveURL properly deals with top-level war URLs Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -95,11 +95,7 @@ public static RequestPredicate path(String pattern) {\n \t */\n \tpublic static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {\n \t\tAssert.notNull(patternParser, \"'patternParser' must not be null\");\n-\t\treturn pattern -> {\n-\t\t\tsynchronized (patternParser) {\n-\t\t\t\treturn new PathPatternPredicate(patternParser.parse(pattern));\n-\t\t\t}\n-\t\t};\n+\t\treturn pattern -> new PathPatternPredicate(patternParser.parse(pattern));\n \t}\n \n \t/**",
    "output": "Remove synchronized block around PathPatternParser Removed the synchronized block around PathPatternParser, since it is now thread-safe"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java\n@@ -128,7 +128,7 @@ public HttpHeaders getResponseHeaders() {\n \t * Return response cookies received from the server.\n \t */\n \tpublic MultiValueMap<String, ResponseCookie> getResponseCookies() {\n-\t\treturn this.getResponseCookies();\n+\t\treturn this.response.getCookies();\n \t}\n \n \t/**",
    "output": "Fix minor issue in ExchangeResult"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java b/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java\n--- a/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java\n+++ b/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java\n@@ -121,9 +121,9 @@ private MockResponse jsonPostRequest(RecordedRequest request, String location, S\n \t}\n \n \tprivate MockResponse multipartRequest(RecordedRequest request) {\n-\t\tString contentType = request.getHeader(\"Content-Type\");\n-\t\tassertTrue(contentType.startsWith(\"multipart/form-data\"));\n-\t\tString boundary = contentType.split(\"boundary=\")[1];\n+\t\tMediaType mediaType = MediaType.parseMediaType(request.getHeader(\"Content-Type\"));\n+\t\tassertTrue(mediaType.isCompatibleWith(MediaType.MULTIPART_FORM_DATA));\n+\t\tString boundary = mediaType.getParameter(\"boundary\");\n \t\tBuffer body = request.getBody();\n \t\ttry {\n \t\t\tassertPart(body, \"form-data\", boundary, \"name 1\", \"text/plain\", \"value 1\");",
    "output": "Fix error in mock server test code"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -576,10 +576,13 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \t\t\t// We'll also handle paths with and without leading \"file:\" prefix.\n \t\t\tString urlFile = rootDirURL.getFile();\n \t\t\ttry {\n-\t\t\t\tint separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);\n+\t\t\t\tint separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR);\n+\t\t\t\tif (separatorIndex == -1) {\n+\t\t\t\t\tseparatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);\n+\t\t\t\t}\n \t\t\t\tif (separatorIndex != -1) {\n \t\t\t\t\tjarFileUrl = urlFile.substring(0, separatorIndex);\n-\t\t\t\t\trootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length());\n+\t\t\t\t\trootEntryPath = urlFile.substring(separatorIndex + 2);  // both separators are 2 chars\n \t\t\t\t\tjarFile = getJarFile(jarFileUrl);\n \t\t\t\t}\n \t\t\t\telse {",
    "output": "Properly extract jar file from Tomcat war URL Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/Property.java b/spring-core/src/main/java/org/springframework/core/convert/Property.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/Property.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -143,10 +143,11 @@ private String resolveName() {\n \t\t\treturn StringUtils.uncapitalize(this.readMethod.getName().substring(index));\n \t\t}\n \t\telse {\n-\t\t\tint index = this.writeMethod.getName().indexOf(\"set\") + 3;\n+\t\t\tint index = this.writeMethod.getName().indexOf(\"set\");\n \t\t\tif (index == -1) {\n \t\t\t\tthrow new IllegalArgumentException(\"Not a setter method\");\n \t\t\t}\n+\t\t\tindex += 3;\n \t\t\treturn StringUtils.uncapitalize(this.writeMethod.getName().substring(index));\n \t\t}\n \t}",
    "output": "Property actually throws exception for no write method found Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java\n@@ -43,7 +43,7 @@ public class StringHttpMessageConverter extends AbstractHttpMessageConverter<Str\n \tpublic static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;\n \n \n-\tprivate final List<Charset> availableCharsets;\n+\tprivate volatile List<Charset> availableCharsets;\n \n \tprivate boolean writeAcceptCharset = true;\n \n@@ -62,7 +62,6 @@ public StringHttpMessageConverter() {\n \t */\n \tpublic StringHttpMessageConverter(Charset defaultCharset) {\n \t\tsuper(defaultCharset, MediaType.TEXT_PLAIN, MediaType.ALL);\n-\t\tthis.availableCharsets = new ArrayList<>(Charset.availableCharsets().values());\n \t}\n \n \n@@ -109,6 +108,10 @@ protected void writeInternal(String str, HttpOutputMessage outputMessage) throws\n \t * @return the list of accepted charsets\n \t */\n \tprotected List<Charset> getAcceptedCharsets() {\n+\t\tif (this.availableCharsets == null) {\n+\t\t\tthis.availableCharsets = new ArrayList<>(\n+\t\t\t\t\tCharset.availableCharsets().values());\n+\t\t}\n \t\treturn this.availableCharsets;\n \t}\n ",
    "output": "Defer Charset.availableCharsetscall Change the `StringHttpMessageConverter` to defer calling Charset.availableCharsetsuntil absolutely necessary to help improve startup times. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n@@ -220,8 +220,7 @@ protected boolean doMatch(String pattern, String path, boolean fullMatch, Map<St\n \t\tif (pathIdxStart > pathIdxEnd) {\n \t\t\t// Path is exhausted, only match if rest of pattern is * or **'s\n \t\t\tif (pattIdxStart > pattIdxEnd) {\n-\t\t\t\treturn (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :\n-\t\t\t\t\t\t!path.endsWith(this.pathSeparator));\n+\t\t\t\treturn (pattern.endsWith(this.pathSeparator) == path.endsWith(this.pathSeparator));\n \t\t\t}\n \t\t\tif (!fullMatch) {\n \t\t\t\treturn true;\n@@ -324,10 +323,7 @@ private boolean isPotentialMatch(String path, String[] pattDirs) {\n \t\t\t\tpos += skipped;\n \t\t\t\tskipped = skipSegment(path, pos, pattDir);\n \t\t\t\tif (skipped < pattDir.length()) {\n-\t\t\t\t\tif (skipped > 0) {\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n-\t\t\t\t\treturn (pattDir.length() > 0) && isWildcardChar(pattDir.charAt(0));\n+\t\t\t\t\treturn (skipped > 0 || (pattDir.length() > 0 && isWildcardChar(pattDir.charAt(0))));\n \t\t\t\t}\n \t\t\t\tpos += skipped;\n \t\t\t}",
    "output": "Simplify match condition checks Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java\n@@ -53,6 +53,12 @@ public TransactionAwareCacheDecorator(Cache targetCache) {\n \t\tthis.targetCache = targetCache;\n \t}\n \n+\t/**\n+\t * Return the target Cache that this Cache should delegate to.\n+\t */\n+\tpublic Cache getTargetCache() {\n+\t\treturn this.targetCache;\n+\t}\n \n \t@Override\n \tpublic String getName() {\n\ndiff --git a/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java b/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/transaction/TransactionAwareCacheDecoratorTests.java\n@@ -46,6 +46,13 @@ public void createWithNullTarget() {\n \t\tnew TransactionAwareCacheDecorator(null);\n \t}\n \n+\t@Test\n+\tpublic void getTargetCache() {\n+\t\tCache target = new ConcurrentMapCache(\"testCache\");\n+\t\tTransactionAwareCacheDecorator cache = new TransactionAwareCacheDecorator(target);\n+\t\tassertSame(target, cache.getTargetCache());\n+\t}\n+\n \t@Test\n \tpublic void regularOperationsOnTarget() {\n \t\tCache target = new ConcurrentMapCache(\"testCache\");",
    "output": "Add getTargetDataSource to TransactionAwareCacheDecorator Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -104,11 +104,12 @@ public DataBufferFactory getDataBufferFactory() {\n \tpublic void service(ServletRequest request, ServletResponse response) throws IOException {\n \t\t// Start async before Read/WriteListener registration\n \t\tAsyncContext asyncContext = request.startAsync();\n+\t\tasyncContext.setTimeout(-1);\n \n \t\tServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);\n \t\tServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);\n \n-\t\tasyncContext.addListener(TIMEOUT_HANDLER);\n+\t\tasyncContext.addListener(ERROR_LISTENER);\n \n \t\tHandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);\n \t\tthis.httpHandler.handle(httpRequest, httpResponse).subscribe(subscriber);\n@@ -129,7 +130,7 @@ protected ServerHttpResponse createResponse(HttpServletResponse response,\n \t}\n \n \t/**\n-\t * We cannot combine TIMEOUT_HANDLER and HandlerResultSubscriber due to:\n+\t * We cannot combine ERROR_LISTENER and HandlerResultSubscriber due to:\n \t * https://issues.jboss.org/browse/WFLY-8515\n \t */\n \tprivate static void runIfAsyncNotComplete(AsyncContext asyncContext, Runnable task) {\n@@ -167,7 +168,7 @@ public void destroy() {\n \t}\n \n \n-\tprivate final static AsyncListener TIMEOUT_HANDLER = new AsyncListener() {\n+\tprivate final static AsyncListener ERROR_LISTENER = new AsyncListener() {\n \n \t\t@Override\n \t\tpublic void onTimeout(AsyncEvent event) throws IOException {",
    "output": "Disable Servlet async request timeout in WebFlux Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -267,8 +267,8 @@ public class DispatcherServlet extends FrameworkServlet {\n \t/**\n \t * Common prefix that DispatcherServlet's default strategy attributes start with.\n \t */\n-        private static final String DEFAULT_STRATEGIES_PREFIX = \"org.springframework.web.servlet\";\n-\t\n+\tprivate static final String DEFAULT_STRATEGIES_PREFIX = \"org.springframework.web.servlet\";\n+\n \t/** Additional logger to use when no mapped handler is found for a request. */\n \tprotected static final Log pageNotFoundLogger = LogFactory.getLog(PAGE_NOT_FOUND_LOG_CATEGORY);\n \n@@ -1352,7 +1352,7 @@ private void restoreAttributesAfterInclude(HttpServletRequest request, Map<?,?>\n \t\tEnumeration<?> attrNames = request.getAttributeNames();\n \t\twhile (attrNames.hasMoreElements()) {\n \t\t\tString attrName = (String) attrNames.nextElement();\n-\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.springframework.web.servlet\")) {\n+\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {\n \t\t\t\tattrsToCheck.add(attrName);\n \t\t\t}\n \t\t}",
    "output": "Reuse constant in DispatcherServlet"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java\n@@ -256,8 +256,8 @@ private void doValidateClass(Class<?> proxySuperClass, ClassLoader proxyClassLoa\n \t\t\t\tif (!Modifier.isStatic(mod)) {\n \t\t\t\t\tif (Modifier.isFinal(mod)) {\n \t\t\t\t\t\tif (implementsInterface(method, ifcs)) {\n-\t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implmenting method [\" + method + \"] because \" +\n-\t\t\t\t\t\t\t\t\t\"it is marked as final: Consider using interface-based proxies instead!\");\n+\t\t\t\t\t\t\tlogger.warn(\"Unable to proxy interface-implementing method [\" + method + \"] because \" +\n+\t\t\t\t\t\t\t\t\t\"it is marked as final: Consider using interface-based JDK proxies instead!\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tlogger.info(\"Final method [\" + method + \"] cannot get proxied via CGLIB: \" +\n \t\t\t\t\t\t\t\t\"Calls to this method will NOT be routed to the target instance and \" +",
    "output": "Refined log message for interface-implementing method Issue: (cherry picked from commit 665e6cf)"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n--- a/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n+++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -342,7 +342,7 @@ protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {\n \t\t\t\t}\n \t\t\t\treturn new FileTemplateLoader(file);\n \t\t\t}\n-\t\t\tcatch (IOException ex) {\n+\t\t\tcatch (Exception ex) {\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"Cannot resolve template loader path [\" + templateLoaderPath +\n \t\t\t\t\t\t\t\"] to [java.io.File]: using SpringTemplateLoader as fallback\", ex);",
    "output": "FreeMarkerConfigurationFactory falls back to SpringTemplateLoader on any exception Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java b/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java\n@@ -17,6 +17,7 @@\n package org.springframework.core.type.classreading;\n \n import java.lang.reflect.Field;\n+import java.security.AccessControlException;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -84,11 +85,11 @@ protected Object getEnumValue(String asmTypeDescriptor, String attributeValue) {\n \t\t\t\tvalueToUse = enumConstant.get(null);\n \t\t\t}\n \t\t}\n-\t\tcatch (ClassNotFoundException ex) {\n+\t\tcatch (ClassNotFoundException | NoClassDefFoundError ex) {\n \t\t\tlogger.debug(\"Failed to classload enum type while reading annotation metadata\", ex);\n \t\t}\n-\t\tcatch (IllegalAccessException ex) {\n-\t\t\tlogger.warn(\"Could not access enum value while reading annotation metadata\", ex);\n+\t\tcatch (IllegalAccessException | AccessControlException ex) {\n+\t\t\tlogger.debug(\"Could not access enum value while reading annotation metadata\", ex);\n \t\t}\n \t\treturn valueToUse;\n \t}",
    "output": "ASM annotation visitor logs IllegalAccessException at debug level only Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java b/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,6 +80,7 @@ protected Object getEnumValue(String asmTypeDescriptor, String attributeValue) {\n \t\t\tClass<?> enumType = this.classLoader.loadClass(Type.getType(asmTypeDescriptor).getClassName());\n \t\t\tField enumConstant = ReflectionUtils.findField(enumType, attributeValue);\n \t\t\tif (enumConstant != null) {\n+\t\t\t\tReflectionUtils.makeAccessible(enumConstant);\n \t\t\t\tvalueToUse = enumConstant.get(null);\n \t\t\t}\n \t\t}",
    "output": "ASM annotation visitor defensively accesses enum constants Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractGenericHttpMessageConverter.java\n@@ -29,6 +29,7 @@\n  * Abstract base class for most {@link GenericHttpMessageConverter} implementations.\n  *\n  * @author Sebastien Deleuze\n+ * @author Juergen Hoeller\n  * @since 4.2\n  */\n public abstract class AbstractGenericHttpMessageConverter<T> extends AbstractHttpMessageConverter<T>\n@@ -65,12 +66,12 @@ protected boolean supports(Class<?> clazz) {\n \n \t@Override\n \tpublic boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {\n-\t\treturn canRead(mediaType);\n+\t\treturn (type instanceof Class ? canRead((Class<?>) type, mediaType) : canRead(mediaType));\n \t}\n \n \t@Override\n \tpublic boolean canWrite(Type type, Class<?> clazz, MediaType mediaType) {\n-\t\treturn canWrite(mediaType);\n+\t\treturn canWrite(clazz, mediaType);\n \t}\n \n \t/**",
    "output": "AbstractGenericHttpMessageConverter calls two-arg variants of canRead/canWrite again Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -414,7 +414,12 @@ public static String replace(String inString, String oldPattern, String newPatte\n \t\t\treturn inString;\n \t\t}\n \n-\t\tStringBuilder sb = new StringBuilder(inString.length());\n+\t\tint capacity = inString.length();\n+\t\tif (newPattern.length() > oldPattern.length()) {\n+\t\t\tcapacity += 16;\n+\t\t}\n+\t\tStringBuilder sb = new StringBuilder(capacity);\n+\n \t\tint pos = 0;  // our position in the old string\n \t\tint patLen = oldPattern.length();\n \t\twhile (index >= 0) {\n@@ -423,6 +428,7 @@ public static String replace(String inString, String oldPattern, String newPatte\n \t\t\tpos = index + patLen;\n \t\t\tindex = inString.indexOf(oldPattern, pos);\n \t\t}\n+\n \t\t// append any characters to the right of a match\n \t\tsb.append(inString.substring(pos));\n \t\treturn sb.toString();",
    "output": "Optimize StringUtils.replace for larger replacement pattern Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n--- a/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n@@ -245,6 +245,17 @@ public void contextPathWithForwardedPrefixTrailingSlash() throws Exception {\n \t\tassertEquals(\"/prefix\", actual);\n \t}\n \n+\t@Test\n+\tpublic void contextPathPreserveEncoding() throws Exception {\n+\t\tthis.request.setContextPath(\"/app%20\");\n+\t\tthis.request.setRequestURI(\"/app%20/path/\");\n+\t\tHttpServletRequest actual = filterAndGetWrappedRequest();\n+\n+\t\tassertEquals(\"/app%20\", actual.getContextPath());\n+\t\tassertEquals(\"/app%20/path/\", actual.getRequestURI());\n+\t\tassertEquals(\"http://localhost/app%20/path/\", actual.getRequestURL().toString());\n+\t}\n+\n \t@Test\n \tpublic void sendRedirectWithAbsolutePath() throws Exception {\n \t\tthis.request.addHeader(X_FORWARDED_PROTO, \"https\");",
    "output": "Add test to ensure ForwardedHeaderFilter contextPath preserves encoding Add a test to verify that the ForwardedHeaderFilter contextPath override preserves URL encoding as it should. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java\n@@ -116,9 +116,9 @@ private enum State {\n \t\t\t@Override\n \t\t\tvoid subscribe(WriteResultPublisher publisher, Subscriber<? super Void> subscriber) {\n \t\t\t\tAssert.notNull(subscriber, \"Subscriber must not be null\");\n+\t\t\t\tpublisher.subscriber = subscriber;\n \t\t\t\tif (publisher.changeState(this, SUBSCRIBED)) {\n \t\t\t\t\tSubscription subscription = new ResponseBodyWriteResultSubscription(publisher);\n-\t\t\t\t\tpublisher.subscriber = subscriber;\n \t\t\t\t\tsubscriber.onSubscribe(subscription);\n \t\t\t\t\tif (publisher.publisherCompleted) {\n \t\t\t\t\t\tpublisher.publishComplete();",
    "output": "Init subscriber before switching the states Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/apache/commons/logging/LogFactory.java b/spring-core/src/main/java/org/apache/commons/logging/LogFactory.java\n--- a/spring-core/src/main/java/org/apache/commons/logging/LogFactory.java\n+++ b/spring-core/src/main/java/org/apache/commons/logging/LogFactory.java\n@@ -172,7 +172,8 @@ private static class Log4jLog implements Log, Serializable {\n \n \t\tprivate static final String FQCN = Log4jLog.class.getName();\n \n-\t\tprivate static final LoggerContext loggerContext = LogManager.getContext();\n+\t\tprivate static final LoggerContext loggerContext =\n+\t\t\t\tLogManager.getContext(Log4jLog.class.getClassLoader(), false);\n \n \t\tprivate final ExtendedLogger logger;\n ",
    "output": "LogFactory obtains ClassLoader-specific LoggerContext for Log4J Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n@@ -169,7 +169,9 @@ protected void done() {\n \n \t\tprivate boolean checkCompletingThread() {\n \t\t\tboolean check = (this.completingThread == Thread.currentThread());\n-\t\t\tthis.completingThread = null;  // only first check actually counts\n+\t\t\tif (check) {\n+\t\t\t\tthis.completingThread = null;  // only first match actually counts\n+\t\t\t}\n \t\t\treturn check;\n \t\t}\n \t}",
    "output": "SettableTask.checkCompletingThreadonly resets marker after match Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java\n@@ -117,12 +117,7 @@ public final Set<String> getModelKeys() {\n \t@SuppressWarnings(\"unchecked\")\n \tpublic Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange) {\n \t\treturn getObjectToRender(model)\n-\t\t\t\t.map(value -> {\n-\t\t\t\t\tPublisher stream = Mono.justOrEmpty(value);\n-\t\t\t\t\tResolvableType type = ResolvableType.forClass(value.getClass());\n-\t\t\t\t\tServerHttpResponse response = exchange.getResponse();\n-\t\t\t\t\treturn this.writer.write(stream, type, contentType, response, Collections.emptyMap());\n-\t\t\t\t})\n+\t\t\t\t.map(value -> write(value, contentType, exchange))\n \t\t\t\t.orElseGet(() -> exchange.getResponse().setComplete());\n \t}\n \n@@ -158,4 +153,12 @@ private boolean isMatch(Map.Entry<String, ?> entry) {\n \t\treturn getMessageWriter().canWrite(type, null);\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> Mono<Void> write(T value, MediaType contentType, ServerWebExchange exchange) {\n+\t\tPublisher<T> input = Mono.justOrEmpty(value);\n+\t\tResolvableType elementType = ResolvableType.forClass(value.getClass());\n+\t\treturn ((HttpMessageWriter<T>) this.writer).write(\n+\t\t\t\tinput, elementType, contentType, exchange.getResponse(), Collections.emptyMap());\n+\t}\n+\n }",
    "output": "Fix compiler warning"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java\n@@ -274,7 +274,10 @@ public void run() {\n \t\t\t\tthis.elementRef.lazySet(null);\n \t\t\t\treturn;\n \t\t\t}\n-\t\t\t\t\n+\n+\t\t\t// Check terminal signal before processing element..\n+\t\t\tboolean isTerminated = this.terminated;\n+\n \t\t\tObject element = this.elementRef.get();\n \t\t\tif (element != null) {\n \t\t\t\tthis.elementRef.lazySet(null);\n@@ -291,7 +294,7 @@ public void run() {\n \t\t\t\t}\n \t\t\t}\n \t\t\t\n-\t\t\tif (this.terminated) {\n+\t\t\tif (isTerminated) {\n \t\t\t\tthis.done = true;\n \t\t\t\tThrowable ex = this.error;\n \t\t\t\tthis.error = null;",
    "output": "Restore correct order of terminated flag check"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -243,7 +243,7 @@ public Resource createRelative(String relativePath) throws MalformedURLException\n \t */\n \t@Override\n \tpublic String getFilename() {\n-\t\treturn StringUtils.getFilename(this.url.getPath());\n+\t\treturn StringUtils.getFilename(this.cleanedUrl.getPath());\n \t}\n \n \t/**",
    "output": "UrlResource applies StringUtils.getFilename against cleaned URL path Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java\n@@ -123,7 +123,7 @@ public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {\n \t\tObject sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);\n \t\tClass<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);\n \n-\t\tif (reactiveType == null) {\n+\t\tif (clazz == null) {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Fix failing tests due to last commit"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,11 +16,11 @@\n \n package org.springframework.test.context.junit;\n \n-import org.junit.platform.runner.IncludeClassNamePatterns;\n-import org.junit.platform.runner.IncludeEngines;\n import org.junit.platform.runner.JUnitPlatform;\n-import org.junit.platform.runner.SelectPackages;\n-import org.junit.platform.runner.UseTechnicalNames;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.UseTechnicalNames;\n import org.junit.runner.RunWith;\n \n /**",
    "output": "Upgrade to JUnit 5.0 M4 Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/ReactorHttpServer.java\n@@ -18,15 +18,14 @@\n \n import java.util.concurrent.atomic.AtomicReference;\n \n-import reactor.core.Loopback;\n import reactor.ipc.netty.NettyContext;\n \n import org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;\n \n /**\n  * @author Stephane Maldini\n  */\n-public class ReactorHttpServer extends AbstractHttpServer implements Loopback {\n+public class ReactorHttpServer extends AbstractHttpServer {\n \n \tprivate ReactorHttpHandlerAdapter reactorHandler;\n \n@@ -45,16 +44,6 @@ private ReactorHttpHandlerAdapter createHttpHandlerAdapter() {\n \t\treturn new ReactorHttpHandlerAdapter(resolveHttpHandler());\n \t}\n \n-\t@Override\n-\tpublic Object connectedInput() {\n-\t\treturn this.reactorServer;\n-\t}\n-\n-\t@Override\n-\tpublic Object connectedOutput() {\n-\t\treturn this.reactorServer;\n-\t}\n-\n \t@Override\n \tprotected void startInternal() {\n \t\tNettyContext nettyContext = this.reactorServer.newHandler(this.reactorHandler).block();",
    "output": "Remove deprecated usage of Reactor Loopback interface"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -103,6 +103,7 @@ public static Flux<DataBuffer> read(AsynchronousFileChannel channel,\n \t * @param bufferSize the maximum size of the data buffers\n \t * @return a flux of data buffers read from the given channel\n \t */\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic static Flux<DataBuffer> read(AsynchronousFileChannel channel,\n \t\t\tlong position, DataBufferFactory dataBufferFactory, int bufferSize) {\n \n\ndiff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java\n@@ -55,6 +55,7 @@ public void subscribe(Subscriber<? super Void> s) {\n \t}\n \n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate class WriteWithBarrier extends Operators.SubscriberAdapter<T, Void> implements Publisher<T> {\n \n \t\t/**",
    "output": "Switch back to Reactor BOM Aluminium-BUILD-SNAPSHOT"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java\n@@ -98,7 +98,9 @@ public final void subscribe(Subscriber<? super Void> subscriber) {\n \t * Listeners can call this method to cancel further writing.\n \t */\n \tprotected void cancel() {\n-\t\tthis.subscription.cancel();\n+\t\tif (this.subscription != null) {\n+\t\t\tthis.subscription.cancel();\n+\t\t}\n \t}\n \n \n\ndiff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java\n@@ -111,7 +111,9 @@ public final void onWritePossible() {\n \t * Listeners can call this method to cancel further writing.\n \t */\n \tpublic void cancel() {\n-\t\tthis.subscription.cancel();\n+\t\tif (this.subscription != null) {\n+\t\t\tthis.subscription.cancel();\n+\t\t}\n \t}\n \n ",
    "output": "Ensure NPE will not be thrown when cancelling a subscription Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -57,7 +57,7 @@ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor t\n \t\t\treturn source;\n \t\t}\n \t\tCollection<?> sourceCollection = (Collection<?>) source;\n-\t\tif (sourceCollection.size() == 0) {\n+\t\tif (sourceCollection.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\tObject firstElement = sourceCollection.iterator().next();",
    "output": "Replace sizecheck with isEmpty"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/HandlerFilterFunction.java\n@@ -92,10 +92,10 @@ default HandlerFunction<R> apply(HandlerFunction<T> handler) {\n \t * @return the filter adaptation of the request processor\n \t */\n \tstatic <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(\n-\t\t\tFunction<T, R> responseProcessor) {\n+\t\t\tFunction<T, Mono<R>> responseProcessor) {\n \n \t\tAssert.notNull(responseProcessor, \"'responseProcessor' must not be null\");\n-\t\treturn (request, next) -> next.handle(request).map(responseProcessor);\n+\t\treturn (request, next) -> next.handle(request).then(responseProcessor);\n \t}\n \n ",
    "output": "Fix ofResponseProcessor signature This commit changes the `HandlerFilterFunction.ofResponseProcessor` method signature to return `Mono<ServerResponse>`, to better cooperate with response builders (which all return a `Mono`)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -113,7 +113,7 @@ public static Flux<DataBuffer> read(AsynchronousFileChannel channel,\n \t\tByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize);\n \n \t\treturn Flux.create(emitter -> {\n-\t\t\temitter.onDispose(() -> closeChannel(channel));\n+\t\t\temitter.setCancellation(() -> closeChannel(channel));\n \t\t\tAsynchronousFileChannelCompletionHandler completionHandler =\n \t\t\t\t\tnew AsynchronousFileChannelCompletionHandler(emitter, position,\n \t\t\t\t\t\t\tdataBufferFactory, byteBuffer);",
    "output": "Upgrade after changed method in Reactor Core"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RouterFunctionsTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RouterFunctionsTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RouterFunctionsTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RouterFunctionsTests.java\n@@ -33,6 +33,7 @@\n \n /**\n  * @author Arjen Poutsma\n+ * @since 5.0\n  */\n @SuppressWarnings(\"unchecked\")\n public class RouterFunctionsTests {\n@@ -179,7 +180,8 @@ public void toHttpHandlerHandlerResponseStatusException() throws Exception {\n \t@Test\n \tpublic void toHttpHandlerHandlerReturnResponseStatusExceptionInResponseWriteTo() throws Exception {\n \t\tHandlerFunction<ServerResponse> handlerFunction =\n-\t\t\t\trequest -> Mono.just(new ServerResponse() {\n+\t\t\t\t// Mono.<ServerResponse> is required for compilation in Eclipse\n+\t\t\t\trequest -> Mono.<ServerResponse> just(new ServerResponse() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic HttpStatus statusCode() {\n \t\t\t\t\t\treturn HttpStatus.OK;\n@@ -211,7 +213,8 @@ public Mono<Void> writeTo(ServerWebExchange exchange,\n \t@Test\n \tpublic void toHttpHandlerHandlerThrowResponseStatusExceptionInResponseWriteTo() throws Exception {\n \t\tHandlerFunction<ServerResponse> handlerFunction =\n-\t\t\t\trequest -> Mono.just(new ServerResponse() {\n+\t\t\t\t// Mono.<ServerResponse> is required for compilation in Eclipse\n+\t\t\t\trequest -> Mono.<ServerResponse> just(new ServerResponse() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic HttpStatus statusCode() {\n \t\t\t\t\t\treturn HttpStatus.OK;",
    "output": "Ensure RouterFunctionsTests class compiles in Eclipse Due to a type inference bug in Eclipse, an additional “hint” is required in order for RouterFunctionsTests to compile in Eclipse"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n@@ -455,6 +455,9 @@ public void run() {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tsendHeartbeat();\n \t\t\t\t\t}\n+\t\t\t\t\tcatch (Throwable ex) {\n+\t\t\t\t\t\t// Ignore: already handled in writeFrame...\n+\t\t\t\t\t}\n \t\t\t\t\tfinally {\n \t\t\t\t\t\tthis.expired = true;\n \t\t\t\t\t}",
    "output": "Trap exception from SockJS HeartbeatTask Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -284,9 +284,10 @@ public Resource[] getResources(String locationPattern) throws IOException {\n \t\t\t}\n \t\t}\n \t\telse {\n-\t\t\t// Only look for a pattern after a prefix here\n-\t\t\t// (to not get fooled by a pattern symbol in a strange prefix).\n-\t\t\tint prefixEnd = locationPattern.indexOf(\":\") + 1;\n+\t\t\t// Generally only look for a pattern after a prefix here,\n+\t\t\t// and on Tomcat only after the \"*/\" separator for its \"war:\" protocol.\n+\t\t\tint prefixEnd = (locationPattern.startsWith(\"war:\") ? locationPattern.indexOf(\"*/\") + 1 :\n+\t\t\t\t\tlocationPattern.indexOf(\":\") + 1);\n \t\t\tif (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {\n \t\t\t\t// a file pattern\n \t\t\t\treturn findPathMatchingResources(locationPattern);",
    "output": "Avoid pattern misdetection in Tomcat \"war:\" URL separator Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java\n@@ -125,7 +125,7 @@ public boolean hasExceptionMappings() {\n \t * @return a Method to handle the exception, or {@code null} if none found\n \t */\n \tpublic Method resolveMethod(Exception exception) {\n-\t\treturn resolveMethod(exception);\n+\t\treturn resolveMethodByThrowable(exception);\n \t}\n \n \t/**",
    "output": "Fix failing tests"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -197,8 +197,8 @@ public StandaloneMockMvcBuilder addMappedInterceptors(String[] pathPatterns, Han\n \t/**\n \t * Set a ContentNegotiationManager.\n \t */\n-\tprotected StandaloneMockMvcBuilder setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {\n-\t\tthis.contentNegotiationManager = contentNegotiationManager;\n+\tpublic StandaloneMockMvcBuilder setContentNegotiationManager(ContentNegotiationManager manager) {\n+\t\tthis.contentNegotiationManager = manager;\n \t\treturn this;\n \t}\n ",
    "output": "Fix wrong access modifier in MockMvc standalone setup Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java\n@@ -497,6 +497,23 @@ public Expression getSelectorExpression() {\n \t\t\treturn this.selectorExpression;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic boolean equals(Object other) {\n+\t\t\tif (this == other) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (other == null || getClass() != other.getClass()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn getId().equals(((Subscription) other).getId());\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn getId().hashCode();\n+\t\t}\n+\n \t\t@Override\n \t\tpublic String toString() {\n \t\t\treturn \"subscription(id=\" + this.id + \")\";",
    "output": "Add equals/hashcode for STOMP Subscription Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -240,7 +240,7 @@ public Publisher<Void> apply(NettyInbound inbound, NettyOutbound outbound) {\n \t\t\tTcpConnection<P> connection = new ReactorNettyTcpConnection<>(inbound, outbound,  codec, completion);\n \t\t\tscheduler.schedule(() -> connectionHandler.afterConnected(connection));\n \n-\t\t\tinbound.context().addDecoder(new StompMessageDecoder<>(codec));\n+\t\t\tinbound.context().addHandler(new StompMessageDecoder<>(codec));\n \n \t\t\tinbound.receiveObject()\n \t\t\t\t\t.cast(Message.class)",
    "output": "prepare for reactor-netty 0.6.1.RELEASE"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -386,6 +386,9 @@ public ServerRequest nestRequest(ServerRequest request) {\n \t\t\tif (!subPath.startsWith(\"/\")) {\n \t\t\t\tsubPath = \"/\" + subPath;\n \t\t\t}\n+\t\t\tif (requestPath.endsWith(\"/\") && !subPath.endsWith(\"/\")) {\n+\t\t\t\tsubPath += \"/\";\n+\t\t\t}\n \t\t\treturn new SubPathServerRequestWrapper(request, subPath);\n \t\t}\n ",
    "output": "Fix trailing slash in nested path This commit adds a trailing slash to the nested path if the request path also ends with a slash. For instance, given the request \"/foo/bar/\", and nested path pattern \"/foo/**\", we expect the nested path to be “/bar/”, not “/bar\""
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.test.web.reactive.server;\n \n import java.net.URI;\n@@ -429,6 +430,9 @@ public <T> EntityExchangeResult<List<T>> isEqualTo(List<T> expected) {\n \n \t\t@Override\n \t\tpublic ListBodySpec hasSize(int size) {\n+\t\t\tList<?> actual = this.result.getResponseBody();\n+\t\t\tString message = \"Response body does not contain \" + size + \" elements\";\n+\t\t\tthis.result.assertWithDiagnostics(() -> assertEquals(message, size, actual.size()));\n \t\t\treturn this;\n \t\t}\n ",
    "output": "Add ListBodySpec.size implementation Added implementation for WebTestClient.ListBodySpec.size"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -204,6 +204,15 @@ public void getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations() {\n \t\t\t\tattributes.get(\"value\"));\n \t}\n \n+\t@Test\n+\t@Ignore(\"To be validated by \")\n+\tpublic void getAllMergedAnnotationsOnClassWithInterface() throws NoSuchMethodException {\n+\t\tMethod m = TransactionalServiceImpl.class.getMethod(\"doIt\");\n+\t\tSet<Transactional> allMergedAnnotations =\n+\t\t\t\tgetAllMergedAnnotations(m, Transactional.class);\n+\t\tassertEquals(1, allMergedAnnotations.size());\n+\t}\n+\n \t@Test\n \tpublic void getMergedAnnotationAttributesOnClassWithLocalAnnotation() {\n \t\tClass<?> element = TxConfig.class;\n@@ -1272,4 +1281,17 @@ static class SpringAppConfigClass {\n \tstatic class ResourceHolder {\n \t}\n \n+\tinterface TransactionalService {\n+\n+\t\t@Transactional\n+\t\tvoid doIt();\n+\t}\n+\n+\tclass TransactionalServiceImpl implements TransactionalService {\n+\n+\t\t@Override\n+\t\tpublic void doIt() {\n+\t\t}\n+\t}\n+\n }",
    "output": "Add test to reproduce"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n--- a/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java\n@@ -408,6 +408,7 @@ public <T> EntityExchangeResult<T> isEqualTo(T expected) {\n \t\t\t});\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\t@Override\n \t\tpublic <T> EntityExchangeResult<T> returnResult() {\n \t\t\treturn new EntityExchangeResult<>(this.result, (T) this.result.getResponseBody());",
    "output": "Fix build by suppressing unchecked warnings"
  },
  {
    "input": "diff --git a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n--- a/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java\n@@ -77,7 +77,7 @@ public static RequestPredicate method(HttpMethod httpMethod) {\n \t */\n \tpublic static RequestPredicate path(String pattern) {\n \t\tAssert.notNull(pattern, \"'pattern' must not be null\");\n-\t\treturn new PathPatternPredicate(DEFAULT_PATTERN_PARSER.parse(pattern));\n+\t\treturn pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern);\n \t}\n \n \t/**\n@@ -91,7 +91,11 @@ public static RequestPredicate path(String pattern) {\n \t */\n \tpublic static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {\n \t\tAssert.notNull(patternParser, \"'patternParser' must not be null\");\n-\t\treturn pattern -> new PathPatternPredicate(patternParser.parse(pattern));\n+\t\treturn pattern -> {\n+\t\t\tsynchronized (patternParser) {\n+\t\t\t\treturn new PathPatternPredicate(patternParser.parse(pattern));\n+\t\t\t}\n+\t\t};\n \t}\n \n \t/**",
    "output": "Synchronise PathPatternParser access This commit adds a synchronized block around the PathPatternParser, since it is not thread-safe"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java b/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java\n@@ -60,7 +60,7 @@ public ClientHttpRequest createRequest(final URI uri, final HttpMethod httpMetho\n \t\t\t@Override\n \t\t\tpublic ClientHttpResponse executeInternal() throws IOException {\n \t\t\t\ttry {\n-\t\t\t\t\tMockHttpServletRequestBuilder requestBuilder = request(httpMethod, uri.toString());\n+\t\t\t\t\tMockHttpServletRequestBuilder requestBuilder = request(httpMethod, uri);\n \t\t\t\t\trequestBuilder.content(getBodyAsBytes());\n \t\t\t\t\trequestBuilder.headers(getHeaders());\n \t\t\t\t\tMvcResult mvcResult = MockMvcClientHttpRequestFactory.this.mockMvc.perform(requestBuilder).andReturn();",
    "output": "Passing the uri as a string to the MockMvc request builder will cause an encoded uri to become double encoded"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1096,7 +1096,18 @@ else if (hasMultipartException(request) ) {\n \t\t\t\t\t\t\"skipping re-resolution for undisturbed error rendering\");\n \t\t\t}\n \t\t\telse {\n-\t\t\t\treturn this.multipartResolver.resolveMultipart(request);\n+\t\t\t\ttry {\n+\t\t\t\t\treturn this.multipartResolver.resolveMultipart(request);\n+\t\t\t\t}\n+\t\t\t\tcatch (MultipartException ex) {\n+\t\t\t\t\tif (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {\n+\t\t\t\t\t\tlogger.debug(\"Multipart resolution failed for error dispatch\", ex);\n+\t\t\t\t\t\t// Keep processing error dispatch with regular request handle below\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tthrow ex;\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\t// If not returned before: return original request.",
    "output": "Defensively ignore multipart parsing failure in case of error dispatch Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,11 +64,7 @@ public void registerTypeName(String paramName, String typeName) {\n \t@Override\n \tpublic int getSqlType(String paramName) {\n \t\tAssert.notNull(paramName, \"Parameter name must not be null\");\n-\t\tInteger sqlType = this.sqlTypes.get(paramName);\n-\t\tif (sqlType != null) {\n-\t\t\treturn sqlType;\n-\t\t}\n-\t\treturn TYPE_UNKNOWN;\n+\t\treturn this.sqlTypes.getOrDefault(paramName, TYPE_UNKNOWN);\n \t}\n \n \t/**",
    "output": "Use Map.getOrDefault in getSqlType implementation Issue"
  },
  {
    "input": "diff --git a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/JsonStreamingIntegrationTests.java b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/JsonStreamingIntegrationTests.java\n--- a/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/JsonStreamingIntegrationTests.java\n+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/JsonStreamingIntegrationTests.java\n@@ -19,9 +19,8 @@\n import java.time.Duration;\n \n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON;\n-import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON_VALUE;\n import reactor.core.publisher.Flux;\n import reactor.test.StepVerifier;\n \n@@ -37,9 +36,13 @@\n import org.springframework.web.reactive.function.client.WebClient;\n import org.springframework.web.server.adapter.WebHttpHandlerBuilder;\n \n+import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON;\n+import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON_VALUE;\n+\n /**\n  * @author Sebastien Deleuze\n  */\n+@Ignore\n public class JsonStreamingIntegrationTests extends AbstractHttpHandlerIntegrationTests {\n \n \tprivate AnnotationConfigApplicationContext wac;",
    "output": "Ignore JsonStreamingIntegrationTests Ignoring JsonStreamingIntegrationTests for now, @sdeleuze is aware of the need to fix"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java\n@@ -59,7 +59,7 @@ protected Object invoke(CacheOperationInvocationContext<CacheResultOperation> co\n \n \t\ttry {\n \t\t\tObject invocationResult = invoker.invoke();\n-\t\t\tcache.put(cacheKey, invocationResult);\n+\t\t\tdoPut(cache, cacheKey, invocationResult);\n \t\t\treturn invocationResult;\n \t\t}\n \t\tcatch (CacheOperationInvoker.ThrowableWrapper ex) {\n@@ -88,7 +88,7 @@ protected void cacheException(Cache exceptionCache, ExceptionTypeFilter filter,\n \t\t\treturn;\n \t\t}\n \t\tif (filter.match(ex.getClass())) {\n-\t\t\texceptionCache.put(cacheKey, ex);\n+\t\t\tdoPut(exceptionCache, cacheKey, ex);\n \t\t}\n \t}\n ",
    "output": "Honour ErrorHandler if `Cache.put` fails This commit makes sure that the `ErrorHandler` is invoked if the cache fails to put an element (be it in the main cache or the exception cache). Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java\n@@ -129,7 +129,7 @@ public HeaderSpec uri(URI uri) {\n \n \t\t@Override\n \t\tpublic HeaderSpec uri(String uriTemplate, Object... uriVariables) {\n-\t\t\treturn uri(getUriBuilderFactory().expand(uriTemplate));\n+\t\t\treturn uri(getUriBuilderFactory().expand(uriTemplate, uriVariables));\n \t\t}\n \n \t\t@Override",
    "output": "Fix missing uriVariables"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java\n@@ -116,10 +116,13 @@ public final void onError(Throwable t) {\n \t * @return {@code true} if there is more demand; {@code false} otherwise\n \t */\n \tprivate boolean readAndPublish() throws IOException {\n-\t\twhile (hasDemand()) {\n+\t\tlong r;\n+\t\twhile ((r = demand) > 0) {\n \t\t\tT data = read();\n \t\t\tif (data != null) {\n-\t\t\t\tOperators.addAndGet(DEMAND_FIELD_UPDATER, this, -1L);\n+\t\t\t\tif (r != Long.MAX_VALUE) {\n+\t\t\t\t\tDEMAND_FIELD_UPDATER.addAndGet(this, -1L);\n+\t\t\t\t}\n \t\t\t\tthis.subscriber.onNext(data);\n \t\t\t}\n \t\t\telse {\n@@ -129,10 +132,6 @@ private boolean readAndPublish() throws IOException {\n \t\treturn false;\n \t}\n \n-\tprivate boolean hasDemand() {\n-\t\treturn (this.demand > 0);\n-\t}\n-\n \tprivate boolean changeState(State oldState, State newState) {\n \t\treturn this.state.compareAndSet(oldState, newState);\n \t}",
    "output": "Add check for Long.MAX_VALUE Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n@@ -62,7 +62,9 @@ public ScriptTemplateViewResolver(String prefix, String suffix) {\n \t@Override\n \tpublic View resolveViewName(String viewName, Locale locale) throws Exception {\n \t\tScriptTemplateView view = (ScriptTemplateView)super.resolveViewName(viewName, locale);\n-\t\tview.setLocale(locale);\n+\t\tif (view != null) {\n+\t\t\tview.setLocale(locale);\n+\t\t}\n \t\treturn view;\n \t}\n ",
    "output": "Prevent NPE in ScriptTemplateView when no view is found Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java\n@@ -60,8 +60,8 @@ public ScriptTemplateViewResolver(String prefix, String suffix) {\n \t}\n \n \t@Override\n-\tprotected View createView(String viewName, Locale locale) throws Exception {\n-\t\tScriptTemplateView view = (ScriptTemplateView)super.createView(viewName, locale);\n+\tpublic View resolveViewName(String viewName, Locale locale) throws Exception {\n+\t\tScriptTemplateView view = (ScriptTemplateView)super.resolveViewName(viewName, locale);\n \t\tview.setLocale(locale);\n \t\treturn view;\n \t}",
    "output": "Fix Spring MVC ScriptTemplateView locale support The locale should be set in resolveViewNameinstead of createViewin order to be taken in account with cached views. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n@@ -39,7 +39,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n@@ -111,16 +110,18 @@ public static void performanceTestGroupAssumption() throws Exception {\n \tpublic void setup() throws Exception {\n \t\tlogger.debug(\"Setting up '\" + this.testName.getMethodName() + \"'\");\n \t\tthis.testFilter = new TestFilter();\n+\n \t\tthis.wac = new AnnotationConfigWebApplicationContext();\n \t\tthis.wac.register(TestConfig.class, upgradeStrategyConfigClass());\n+\n \t\tthis.server = createWebSocketTestServer();\n \t\tthis.server.setup();\n \t\tthis.server.deployConfig(this.wac, this.testFilter);\n-\t\t// Set ServletContext in WebApplicationContext after deployment but before\n-\t\t// starting the server.\n+\t\tthis.server.start();\n+\n \t\tthis.wac.setServletContext(this.server.getServletContext());\n \t\tthis.wac.refresh();\n-\t\tthis.server.start();\n+\n \t\tthis.baseUrl = \"http://localhost:\" + this.server.getPort();\n \t}\n ",
    "output": "Align setup of SockJS and WebSocket integration tests Failures in JettySockJsIntegrationTests after the upgrade to 9.4 were hidden due to the PERFORMANCE test group but were failing on the CI performance build with IllegalStateException inside Jetty on \"Failure find the required ServletContext attribute org.eclipse.jetty.util.DecoratedObjectFactory\""
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java\n@@ -257,6 +257,7 @@ public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFacto\n \t */\n \tpublic void increaseNestingLevel() {\n \t\tthis.nestingLevel++;\n+\t\tthis.resolvableType = null;\n \t\tif (this.methodParameter != null) {\n \t\t\tthis.methodParameter.increaseNestingLevel();\n \t\t}\n@@ -270,6 +271,7 @@ public void increaseNestingLevel() {\n \t */\n \tpublic void setContainingClass(Class<?> containingClass) {\n \t\tthis.containingClass = containingClass;\n+\t\tthis.resolvableType = null;\n \t\tif (this.methodParameter != null) {\n \t\t\tGenericTypeResolver.resolveParameterType(this.methodParameter, containingClass);\n \t\t}",
    "output": "Reset cached ResolvableType on increaseNestingLevel/setContainingClass Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurationSupport.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurationSupport.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurationSupport.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurationSupport.java\n@@ -29,6 +29,7 @@\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.core.ReactiveAdapterRegistry;\n+import org.springframework.core.annotation.Order;\n import org.springframework.core.codec.ByteArrayDecoder;\n import org.springframework.core.codec.ByteArrayEncoder;\n import org.springframework.core.codec.ByteBufferDecoder;\n@@ -128,6 +129,7 @@ public DispatcherHandler webHandler() {\n \t}\n \n \t@Bean\n+\t@Order(0)\n \tpublic WebExceptionHandler responseStatusExceptionHandler() {\n \t\treturn new ResponseStatusExceptionHandler();\n \t}",
    "output": "ResponseStatusExceptionHandler is ordered at 0 Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -63,7 +63,7 @@ private class AsyncHandler implements HttpHandler {\n \t\t@Override\n \t\tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\t\treturn response.writeWith(Flux.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n-\t\t\t\t\t\t\t\t\t\t.delay(Duration.ofMillis(100))\n+\t\t\t\t\t\t\t\t\t\t.delayElements(Duration.ofMillis(100))\n \t\t\t\t\t\t\t\t\t\t.publishOn(asyncGroup)\n \t\t\t\t\t.collect(dataBufferFactory::allocateBuffer, (buffer, str) -> buffer.write(str.getBytes())));\n \t\t}",
    "output": "Upgrade to Reactor Aluminium SNAPSHOT"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,6 +46,8 @@ public abstract class AbstractRequestExpectationManager implements RequestExpect\n \n \tprivate final List<ClientHttpRequest> requests = new LinkedList<>();\n \n+\tprivate final Object lock = new Object();\n+\n \n \tprotected List<RequestExpectation> getExpectations() {\n \t\treturn this.expectations;\n@@ -66,12 +68,14 @@ public ResponseActions expectRequest(ExpectedCount count, RequestMatcher matcher\n \n \t@Override\n \tpublic ClientHttpResponse validateRequest(ClientHttpRequest request) throws IOException {\n-\t\tif (getRequests().isEmpty()) {\n-\t\t\tafterExpectationsDeclared();\n+\t\tsynchronized (this.lock) {\n+\t\t\tif (getRequests().isEmpty()) {\n+\t\t\t\tafterExpectationsDeclared();\n+\t\t\t}\n+\t\t\tClientHttpResponse response = validateRequestInternal(request);\n+\t\t\tgetRequests().add(request);\n+\t\t\treturn response;\n \t\t}\n-\t\tClientHttpResponse response = validateRequestInternal(request);\n-\t\tgetRequests().add(request);\n-\t\treturn response;\n \t}\n \n \t/**",
    "output": "Add locking to AbstractRequestExpectationManager This commit ensures that verifying a request, which includes finding and updating expectations, is done synchronously to avoid concurrent modification exceptions. Technically SimpleRequestExpectationManager is not even expected to see concurrent requests by definition but with UnorderedRequestExpectationManager it can happen. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n--- a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n@@ -168,7 +168,7 @@ protected void invokeListener(ApplicationListener listener, ApplicationEvent eve\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n \t\t\t\tString msg = ex.getMessage();\n-\t\t\t\tif (msg != null && msg.startsWith(event.getClass().getName())) {\n+\t\t\t\tif (msg == null || msg.startsWith(event.getClass().getName())) {\n \t\t\t\t\t// Possibly a lambda-defined listener which we could not resolve the generic event type for\n \t\t\t\t\tLog logger = LogFactory.getLog(getClass());\n \t\t\t\t\tif (logger.isDebugEnabled()) {",
    "output": "SimpleApplicationEventMulticaster defensively swallows ClassCastException without message Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java\n@@ -38,6 +38,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Adapt {@link ServerHttpRequest} to the Undertow {@link HttpServerExchange}.\n@@ -63,9 +64,10 @@ public UndertowServerHttpRequest(HttpServerExchange exchange, DataBufferFactory\n \tprivate static URI initUri(HttpServerExchange exchange) {\n \t\tAssert.notNull(exchange, \"HttpServerExchange is required.\");\n \t\ttry {\n+\t\t\tString query = exchange.getQueryString();\n \t\t\treturn new URI(exchange.getRequestScheme(), null,\n \t\t\t\t\texchange.getHostName(), exchange.getHostPort(),\n-\t\t\t\t\texchange.getRequestURI(), exchange.getQueryString(), null);\n+\t\t\t\t\texchange.getRequestURI(), StringUtils.hasText(query) ? query : null, null);\n \t\t}\n \t\tcatch (URISyntaxException ex) {\n \t\t\tthrow new IllegalStateException(\"Could not get URI: \" + ex.getMessage(), ex);",
    "output": "Fix URI construction in UndertowServerHttpRequest Ensure there is no \"?\" at the end of the generated URI when there is no query available"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java\n@@ -191,11 +191,12 @@ protected RequestContext createRequestContext(ServerWebExchange exchange, Map<St\n \t * <p>The default implementation looks in the {@link #getApplicationContext()\n \t * Spring configuration} for a {@code RequestDataValueProcessor} bean with\n \t * the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}.\n+\t * @return the RequestDataValueProcessor, or null if there is none at the application context.\n \t */\n \tprotected RequestDataValueProcessor getRequestDataValueProcessor() {\n-\t\tif (getApplicationContext() != null) {\n-\t\t\tString beanName = REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME;\n-\t\t\treturn getApplicationContext().getBean(beanName, RequestDataValueProcessor.class);\n+\t\tApplicationContext context = getApplicationContext();\n+\t\tif (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {\n+\t\t\treturn context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);\n \t\t}\n \t\treturn null;\n \t}",
    "output": "Fix exception if no RequestDataValueProcessor is present This modification fixes the way AbstractView retrieves the RequestDataValueProcessor bean, correctly returning null if there is no bean of such type at the Application Context. This avoids an exception in RedirectView (which extends AbstractView) when trying to post-process the URL generated for redirection, when no RequestDataValueProcessor exists. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,7 +49,7 @@\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n import org.springframework.core.ResolvableType.VariableResolver;\n import org.springframework.util.MultiValueMap;",
    "output": "Use MockitoJUnitRunner from Mockito 2's preferred location Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n--- a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,6 +18,7 @@\n \n import java.util.concurrent.Executor;\n \n+import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n import org.springframework.beans.factory.BeanFactory;\n@@ -166,9 +167,13 @@ protected void invokeListener(ApplicationListener listener, ApplicationEvent eve\n \t\t\t\tlistener.onApplicationEvent(event);\n \t\t\t}\n \t\t\tcatch (ClassCastException ex) {\n-\t\t\t\tif (ex.getMessage().startsWith(event.getClass().getName())) {\n+\t\t\t\tString msg = ex.getMessage();\n+\t\t\t\tif (msg != null && msg.startsWith(event.getClass().getName())) {\n \t\t\t\t\t// Possibly a lambda-defined listener which we could not resolve the generic event type for\n-\t\t\t\t\tLogFactory.getLog(getClass()).debug(\"Non-matching event type for listener: \" + listener, ex);\n+\t\t\t\t\tLog logger = LogFactory.getLog(getClass());\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Non-matching event type for listener: \" + listener, ex);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tthrow ex;",
    "output": "SimpleApplicationEventMulticaster defensively handles ClassCastException without message Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n@@ -70,6 +70,7 @@\n  * {@code MockHttpServletRequest} can be plugged in via {@link #with(RequestPostProcessor)}.\n  *\n  * @author Rossen Stoyanchev\n+ * @author Juergen Hoeller\n  * @author Arjen Poutsma\n  * @author Sam Brannen\n  * @author Kamill Sokol\n@@ -630,10 +631,13 @@ public final MockHttpServletRequest buildRequest(ServletContext servletContext)\n \t\t\t}\n \t\t}\n \n-\t\tif (this.content != null && this.contentType != null) {\n-\t\t\tMediaType mediaType = MediaType.parseMediaType(this.contentType);\n-\t\t\tif (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType)) {\n-\t\t\t\taddRequestParams(request, parseFormData(mediaType));\n+\t\tif (this.content != null && this.content.length > 0) {\n+\t\t\tString requestContentType = request.getContentType();\n+\t\t\tif (requestContentType != null) {\n+\t\t\t\tMediaType mediaType = MediaType.parseMediaType(requestContentType);\n+\t\t\t\tif (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType)) {\n+\t\t\t\t\taddRequestParams(request, parseFormData(mediaType));\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "MockHttpServletRequestBuilder reliably detects form body content type again Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java\n@@ -940,7 +940,7 @@ private void doAddHeaderValue(String name, Object value, boolean replace) {\n \t\t\tthis.headers.put(name, header);\n \t\t}\n \t\tif (value instanceof Collection) {\n-\t\t\theader.addValues((Collection) value);\n+\t\t\theader.addValues((Collection<?>) value);\n \t\t}\n \t\telse if (value.getClass().isArray()) {\n \t\t\theader.addValueArray(value);",
    "output": "Clean up warnings spring-test"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -176,13 +176,25 @@ public BeanDefinitionBuilder setParentName(String parentName) {\n \t}\n \n \t/**\n-\t * Set the name of the factory method to use for this definition.\n+\t * Set the name of a static factory method to use for this definition,\n+\t * to be called on this bean's class.\n \t */\n \tpublic BeanDefinitionBuilder setFactoryMethod(String factoryMethod) {\n \t\tthis.beanDefinition.setFactoryMethodName(factoryMethod);\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the name of a non-static factory method to use for this definition,\n+\t * including the bean name of the factory instance to call the method on.\n+\t * @since 4.3.6\n+\t */\n+\tpublic BeanDefinitionBuilder setFactoryMethodOnBean(String factoryMethod, String factoryBean) {\n+\t\tthis.beanDefinition.setFactoryMethodName(factoryMethod);\n+\t\tthis.beanDefinition.setFactoryBeanName(factoryBean);\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Add an indexed constructor arg value. The current index is tracked internally\n \t * and all additions are at the present point.",
    "output": "BeanDefinitionBuilder supports factory method on factory bean Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.test.context.junit;\n \n+import org.junit.platform.runner.IncludeClassNamePatterns;\n import org.junit.platform.runner.IncludeEngines;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.platform.runner.SelectPackages;\n@@ -47,6 +48,7 @@\n @RunWith(JUnitPlatform.class)\n @IncludeEngines(\"junit-jupiter\")\n @SelectPackages(\"org.springframework.test.context.junit.jupiter\")\n+@IncludeClassNamePatterns(\"^.*TestCase$\")\n @UseTechnicalNames\n public class SpringJUnitJupiterTestSuite {\n }",
    "output": "Ensure that JUnit Jupiter tests are executed during build After the upgrade to JUnit Jupiter 5.0 M3, JUnit Jupiter tests in the Spring build were no longer executed due to the introduction of a default test class name pattern. This commit addresses this issue by making use of the @IncludeClassNamePatterns to specify that *TestCase test classes should be executed within the org.springframework.test.context.junit.jupiter package"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -123,7 +123,7 @@ else if (undertowPresent) {\n \t\t}\n \n \t\ttry {\n-\t\t\tclassName = HandshakeWebSocketService.class.getPackage().getName() + \".\" + className;\n+\t\t\tclassName = \"org.springframework.web.reactive.socket.server.upgrade.\" + className;\n \t\t\tClass<?> clazz = ClassUtils.forName(className, HandshakeWebSocketService.class.getClassLoader());\n \t\t\treturn (RequestUpgradeStrategy) ReflectionUtils.accessibleConstructor(clazz).newInstance();\n \t\t}",
    "output": "Fix RequestUpgradeStrategy impl. class loading Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -516,15 +516,22 @@ private static String changeFirstCharacterCase(String str, boolean capitalize) {\n \t\tif (str == null || str.length() == 0) {\n \t\t\treturn str;\n \t\t}\n-\t\tStringBuilder sb = new StringBuilder(str.length());\n-\t\tif (capitalize) {\n-\t\t\tsb.append(Character.toUpperCase(str.charAt(0)));\n-\t\t}\n \t\telse {\n-\t\t\tsb.append(Character.toLowerCase(str.charAt(0)));\n+\t\t\tchar baseChar = str.charAt(0);\n+\t\t\tchar updatedChar;\n+\t\t\tif (capitalize) {\n+\t\t\t\tupdatedChar = Character.toUpperCase(baseChar);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tupdatedChar = Character.toLowerCase(baseChar);\n+\t\t\t}\n+\t\t\tif (baseChar == updatedChar) {\n+\t\t\t\treturn str;\n+\t\t\t}\n+\t\t\tchar[] chars = str.toCharArray();\n+\t\t\tchars[0] = updatedChar;\n+\t\t\treturn new String(chars, 0, chars.length);\n \t\t}\n-\t\tsb.append(str.substring(1));\n-\t\treturn sb.toString();\n \t}\n \n \t/**",
    "output": "Improve performance of StringUtils.capitalizeIssue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -197,8 +197,8 @@ public void testQueryForObjectWithBigInteger() throws Exception {\n \tpublic void testQueryForObjectWithBigDecimal() throws Exception {\n \t\tString sql = \"SELECT AGE FROM CUSTMR WHERE ID = 3\";\n \t\tgiven(this.resultSet.next()).willReturn(true, false);\n-\t\tgiven(this.resultSet.getBigDecimal(1)).willReturn(new BigDecimal(22.5));\n-\t\tassertEquals(new BigDecimal(22.5), this.template.queryForObject(sql, BigDecimal.class));\n+\t\tgiven(this.resultSet.getBigDecimal(1)).willReturn(new BigDecimal(\"22.5\"));\n+\t\tassertEquals(new BigDecimal(\"22.5\"), this.template.queryForObject(sql, BigDecimal.class));\n \t\tverify(this.resultSet).close();\n \t\tverify(this.statement).close();\n \t}",
    "output": "Avoid use of double constructor of BigDecimal Codacy warns about an Error Prone [1] use of the double constructor of BigDecimal in tests. The reason given is that it is a source of precision loss if the number does not have an exact double representation. The recommendation is to use the String constructor of BigDecimal instead as it does not require using a lossy argument. This commit contains the following changes - replace usage of the double constructor of BigDecimal with the String constructor of BigDecimal in JdbcTemplateQueryTests - update the copyright year [1] http://errorprone.info/bugpattern/BigDecimalLiteralDouble Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/KotlinScriptTemplateTests.java\n@@ -22,6 +22,7 @@\n \n import static org.junit.Assert.assertEquals;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import static org.mockito.Mockito.mock;\n \n@@ -38,6 +39,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n+@Ignore // Temporary disabled since Kotlin 1.1-M04 generates bytecode not Kotlin 1.0 compliant, will be enable as soon as Kotlin 1.1-M05 is available\n public class KotlinScriptTemplateTests {\n \n \tprivate WebApplicationContext webAppContext;",
    "output": "Temporary rollback to Kotlin 1.0.6 Kotlin 1.1-M04 has a bug that makes the generated bytecode not compatible with Kotlin 1.0.x. This bug should be fixed in Kotlin 1.1-M05"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n@@ -178,9 +178,8 @@ public static void splitSqlScript(EncodedResource resource, String script, Strin\n \t\tboolean inSingleQuote = false;\n \t\tboolean inDoubleQuote = false;\n \t\tboolean inEscape = false;\n-\t\tchar[] content = script.toCharArray();\n \t\tfor (int i = 0; i < script.length(); i++) {\n-\t\t\tchar c = content[i];\n+\t\t\tchar c = script.charAt(i);\n \t\t\tif (inEscape) {\n \t\t\t\tinEscape = false;\n \t\t\t\tsb.append(c);\n@@ -342,9 +341,8 @@ private static void appendSeparatorToScriptIfNecessary(StringBuilder scriptBuild\n \t */\n \tpublic static boolean containsSqlScriptDelimiters(String script, String delim) {\n \t\tboolean inLiteral = false;\n-\t\tchar[] content = script.toCharArray();\n \t\tfor (int i = 0; i < script.length(); i++) {\n-\t\t\tif (content[i] == '\\'') {\n+\t\t\tif (script.charAt(i) == '\\'') {\n \t\t\t\tinLiteral = !inLiteral;\n \t\t\t}\n \t\t\tif (!inLiteral && script.startsWith(delim, i)) {",
    "output": "Remove String#toCharArray from ScriptUtils ScriptUtils contains two calls to String#toCharArray for the sole purpose to iterating over all chars in a String. Not only is this unnecessary and can be replaced with String#charAt it also causes additional allocator and heap pressure because String#toCharArray rather than returning the backing array (which is gone in Java 9) creates a copy. This commit contains the following changes - remove String#toCharArray from ScriptUtils and replace with String#charAt Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n@@ -17,10 +17,12 @@\n package org.springframework.messaging.tcp.reactor;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelPipeline;\n import reactor.core.publisher.DirectProcessor;\n import reactor.core.publisher.Mono;\n import reactor.ipc.netty.NettyInbound;\n import reactor.ipc.netty.NettyOutbound;\n+import reactor.ipc.netty.NettyPipeline;\n \n import org.springframework.messaging.Message;\n import org.springframework.messaging.tcp.TcpConnection;\n@@ -64,6 +66,14 @@ public ListenableFuture<Void> send(Message<P> message) {\n \t@Override\n \t@SuppressWarnings(\"deprecation\")\n \tpublic void onReadInactivity(Runnable runnable, long inactivityDuration) {\n+\n+\t\t// TODO: workaround for https://github.com/reactor/reactor-netty/issues/22\n+\t\tChannelPipeline pipeline = this.inbound.context().channel().pipeline();\n+\t\tString name = NettyPipeline.OnChannelReadIdle;\n+\t\tif (pipeline.context(name) != null) {\n+\t\t\tpipeline.remove(name);\n+\t\t}\n+\n \t\tthis.inbound.onReadIdle(inactivityDuration, runnable);\n \t}\n ",
    "output": "Workaround for onReadIdle issue in Reactor TcpClient https://github.com/reactor/reactor-netty/issues/22"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -479,14 +479,19 @@ private boolean annotationsMatch(TypeDescriptor otherDesc) {\n \t\t}\n \t\tif (anns.length > 0) {\n \t\t\tfor (int i = 0; i < anns.length; i++) {\n-\t\t\t\tif (anns[i] != otherAnns[i]) {\n+\t\t\t\tif (!annotationEquals(anns[i], otherAnns[i])) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn true;\n \t}\n \n+\tprivate boolean annotationEquals(Annotation ann, Annotation otherAnn) {\n+\t\t// Annotation.equals is reflective and pretty slow, so let's check identity and proxy type first.\n+\t\treturn (ann == otherAnn || (ann.getClass() == otherAnn.getClass() && ann.equals(otherAnn)));\n+\t}\n+\n \t@Override\n \tpublic int hashCode() {\n \t\treturn getType().hashCode();",
    "output": "TypeDescriptor efficiently matches equal annotations as well Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java\n@@ -60,6 +60,9 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B\n \t\tSet<String> annoTypes = importingClassMetadata.getAnnotationTypes();\n \t\tfor (String annoType : annoTypes) {\n \t\t\tAnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);\n+\t\t\tif (candidate == null) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n \t\t\tObject mode = candidate.get(\"mode\");\n \t\t\tObject proxyTargetClass = candidate.get(\"proxyTargetClass\");\n \t\t\tif (mode != null && proxyTargetClass != null && AdviceMode.class == mode.getClass() &&",
    "output": "Avoid NPE in AutoProxyRegistrar when no attribute found Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -364,7 +364,17 @@ private Set<MethodMetadata> retrieveBeanMethodMetadata(SourceClass sourceClass)\n \t\t\ttry {\n \t\t\t\tAnnotationMetadata asm =\n \t\t\t\t\t\tthis.metadataReaderFactory.getMetadataReader(original.getClassName()).getAnnotationMetadata();\n-\t\t\t\tbeanMethods = asm.getAnnotatedMethods(Bean.class.getName());\n+\t\t\t\tSet<MethodMetadata> asmMethods = asm.getAnnotatedMethods(Bean.class.getName());\n+\t\t\t\tSet<MethodMetadata> reflectionMethods = beanMethods;\n+\t\t\t\tbeanMethods = new LinkedHashSet<>();\n+\t\t\t\tfor (MethodMetadata asmMethod : asmMethods) {\n+\t\t\t\t\tfor (MethodMetadata reflectionMethod : reflectionMethods) {\n+\t\t\t\t\t\tif (reflectionMethod.getMethodName().equals(asmMethod.getMethodName())) {\n+\t\t\t\t\t\t\tbeanMethods.add(reflectionMethod);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (IOException ex) {\n \t\t\t\tlogger.debug(\"Failed to read class file via ASM for determining @Bean method order\", ex);",
    "output": "Expose reflection metadata with ASM-driven method order Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n@@ -25,9 +25,6 @@\n import java.util.Map;\n import java.util.UUID;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.messaging.Message;\n import org.springframework.messaging.MessageChannel;\n import org.springframework.messaging.MessageHeaders;\n@@ -124,8 +121,6 @@ public class MessageHeaderAccessor {\n \t};\n \n \n-\tprotected final Log logger = LogFactory.getLog(getClass());\n-\n \tprivate final MutableMessageHeaders headers;\n \n \tprivate boolean leaveMutable = false;",
    "output": "Remove unused Log object from MessageHeaderAccessor Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java\n@@ -63,7 +63,7 @@ public void writeAndFlushWith() throws Exception {\n \t\tStepVerifier.create(result)\n \t\t\t\t.expectNext(\"data0data1\")\n \t\t\t\t.expectComplete()\n-\t\t\t\t.verify(Duration.ofSeconds(5L));\n+\t\t\t\t.verify(Duration.ofSeconds(10L));\n \t}\n \n \t@Test  // SPR-14991\n@@ -77,7 +77,7 @@ public void writeAndAutoFlushOnComplete() {\n \t\tStepVerifier.create(result)\n \t\t\t\t.consumeNextWith(value -> Assert.isTrue(value.length() == 200000))\n \t\t\t\t.expectComplete()\n-\t\t\t\t.verify(Duration.ofSeconds(5L));\n+\t\t\t\t.verify(Duration.ofSeconds(10L));\n \t}\n \n \t@Test  // SPR-14992\n@@ -90,7 +90,7 @@ public void writeAndAutoFlushBeforeComplete() {\n \t\tStepVerifier.create(result)\n \t\t\t\t.expectNextMatches(s -> s.startsWith(\"0123456789\"))\n \t\t\t\t.thenCancel()\n-\t\t\t\t.verify(Duration.ofSeconds(5L));\n+\t\t\t\t.verify(Duration.ofSeconds(10L));\n \t}\n \n \t@Override",
    "output": "try less log and increase timeout"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java\n@@ -29,6 +29,7 @@\n import org.springframework.web.reactive.HandlerMapping;\n import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;\n import org.springframework.web.reactive.socket.WebSocketHandler;\n+import org.springframework.web.reactive.socket.WebSocketMessage;\n import org.springframework.web.reactive.socket.WebSocketSession;\n import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;\n import org.springframework.web.reactive.socket.client.RxNettyWebSocketClient;\n@@ -68,13 +69,7 @@ private void testEcho(WebSocketClient client) throws URISyntaxException {\n \t\tclient.execute(getUrl(\"/echo\"),\n \t\t\t\tsession -> session\n \t\t\t\t\t\t.send(input.map(session::textMessage))\n-\t\t\t\t\t\t.thenMany(session.receive()\n-\t\t\t\t\t\t\t\t.take(count)\n-\t\t\t\t\t\t\t\t.map(message -> {\n-\t\t\t\t\t\t\t\t\tString text = message.getPayloadAsText();\n-\t\t\t\t\t\t\t\t\tmessage.release();\n-\t\t\t\t\t\t\t\t\treturn text;\n-\t\t\t\t\t\t\t\t}))\n+\t\t\t\t\t\t.thenMany(session.receive().take(count).map(WebSocketMessage::getPayloadAsText))\n \t\t\t\t\t\t.subscribeWith(output)\n \t\t\t\t\t\t.then())\n \t\t\t\t.blockMillis(5000);",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n@@ -46,8 +46,8 @@ public static Object[][] arguments() {\n \t\tFile base = new File(System.getProperty(\"java.io.tmpdir\"));\n \t\treturn new Object[][] {\n \t\t\t\t{new JettyHttpServer()},\n-\t\t\t\t//{new RxNettyHttpServer()},\n-\t\t\t\t{new ReactorHttpServer()},\n+\t\t\t\t{new RxNettyHttpServer()},\n+\t\t\t\t//{new ReactorHttpServer()},\n \t\t\t\t{new TomcatHttpServer(base.getAbsolutePath())},\n \t\t\t\t{new UndertowHttpServer()}\n \t\t};",
    "output": "Fix previous commit"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n@@ -253,13 +253,24 @@ final DeferredResultProcessingInterceptor getInterceptor() {\n \t\treturn new DeferredResultProcessingInterceptorAdapter() {\n \t\t\t@Override\n \t\t\tpublic <S> boolean handleTimeout(NativeWebRequest request, DeferredResult<S> deferredResult) {\n-\t\t\t\tif (timeoutCallback != null) {\n-\t\t\t\t\ttimeoutCallback.run();\n+\t\t\t\tboolean continueProcessing = true;\n+\t\t\t\ttry {\n+\t\t\t\t\tif (timeoutCallback != null) {\n+\t\t\t\t\t\ttimeoutCallback.run();\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tif (timeoutResult != RESULT_NONE) {\n-\t\t\t\t\tsetResultInternal(timeoutResult);\n+\t\t\t\tfinally {\n+\t\t\t\t\tif (timeoutResult != RESULT_NONE) {\n+\t\t\t\t\t\tcontinueProcessing = false;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tsetResultInternal(timeoutResult);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Throwable ex) {\n+\t\t\t\t\t\t\tlogger.debug(\"Failed to handle timeout result\", ex);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\treturn true;\n+\t\t\t\treturn continueProcessing;\n \t\t\t}\n \t\t\t@Override\n \t\t\tpublic <S> void afterCompletion(NativeWebRequest request, DeferredResult<S> deferredResult) {",
    "output": "Defensive processing of timeout callback and timeout result Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java\n@@ -47,7 +47,7 @@ public static Object[][] arguments() {\n \t\treturn new Object[][] {\n \t\t\t\t{new JettyHttpServer()},\n \t\t\t\t{new RxNettyHttpServer()},\n-\t\t\t\t//{new ReactorHttpServer()},\n+\t\t\t\t{new ReactorHttpServer()},\n \t\t\t\t{new TomcatHttpServer(base.getAbsolutePath())},\n \t\t\t\t{new UndertowHttpServer()}\n \t\t};",
    "output": "uncomment reactor-netty in tests"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n@@ -1177,7 +1177,7 @@ protected Map<String, Object> extractReturnedResults(CallableStatement cs,\n \t\t\t\t\telse {\n \t\t\t\t\t\tif (!this.skipUndeclaredResults) {\n \t\t\t\t\t\t\tString rsName = RETURN_RESULT_SET_PREFIX + (rsIndex + 1);\n-\t\t\t\t\t\t\tSqlReturnResultSet undeclaredRsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());\n+\t\t\t\t\t\t\tSqlReturnResultSet undeclaredRsParam = new SqlReturnResultSet(rsName, getColumnMapRowMapper());\n \t\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\t\t\tlogger.debug(\"Added default SqlReturnResultSet parameter named '\" + rsName + \"'\");\n \t\t\t\t\t\t\t}\n@@ -1242,7 +1242,7 @@ protected Map<String, Object> extractOutputParameters(CallableStatement cs, List\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse {\n \t\t\t\t\t\t\tString rsName = outParam.getName();\n-\t\t\t\t\t\t\tSqlReturnResultSet rsParam = new SqlReturnResultSet(rsName, new ColumnMapRowMapper());\n+\t\t\t\t\t\t\tSqlReturnResultSet rsParam = new SqlReturnResultSet(rsName, getColumnMapRowMapper());\n \t\t\t\t\t\t\treturnedResults.putAll(processResultSet((ResultSet) out, rsParam));\n \t\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\t\t\tlogger.debug(\"Added default SqlReturnResultSet parameter named '\" + rsName + \"'\");",
    "output": "Call getColumnRowMapperto create the row mapper; prevents requirement to override extractReturnedResults"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -30,7 +30,6 @@\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n import org.springframework.core.io.buffer.NettyDataBufferFactory;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseCookie;\n import org.springframework.http.ZeroCopyHttpOutputMessage;\n@@ -84,10 +83,6 @@ protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? e\n \n \t@Override\n \tprotected void applyHeaders() {\n-\t\t// TODO: temporarily, see https://github.com/reactor/reactor-netty/issues/2\n-\t\tif(getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)){\n-\t\t\tthis.response.disableChunkedTransfer();\n-\t\t}\n \t\tfor (String name : getHeaders().keySet()) {\n \t\t\tfor (String value : getHeaders().get(name)) {\n \t\t\t\tthis.response.responseHeaders().add(name, value);",
    "output": "Remove temporary workaround in ReactorServertHttpResponse We no longer should need the workaround for https://github.com/reactor/reactor-netty/issues/2 Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java\n--- a/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java\n+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java\n@@ -18,6 +18,7 @@\n \n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n import org.reactivestreams.Publisher;\n@@ -56,6 +57,8 @@ public class MockServerHttpResponse implements ServerHttpResponse {\n \n \tprivate DataBufferFactory bufferFactory = new DefaultDataBufferFactory();\n \n+\tprivate Function<String, String> urlEncoder = url -> url;\n+\n \n \t@Override\n \tpublic boolean setStatusCode(HttpStatus status) {\n@@ -111,6 +114,16 @@ public DataBufferFactory bufferFactory() {\n \t\treturn this.bufferFactory;\n \t}\n \n+\t@Override\n+\tpublic String encodeUrl(String url) {\n+\t\treturn (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);\n+\t}\n+\n+\t@Override\n+\tpublic void registerUrlEncoder(Function<String, String> encoder) {\n+\t\tthis.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);\n+\t}\n+\n \t/**\n \t * Return the body of the response aggregated and converted to a String\n \t * using the charset of the Content-Type response or otherwise defaulting",
    "output": "Add missing overrides to MockServerHttpResponse"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n@@ -61,11 +61,11 @@ public ReactorNettyTcpConnection(NettyInbound inbound, NettyOutbound outbound,\n \n \t@Override\n \tpublic ListenableFuture<Void> send(Message<P> message) {\n-\t\tByteBuf byteBuf = this.inbound.alloc()\n-\t\t                              .buffer();\n+\t\tByteBuf byteBuf = this.outbound.alloc()\n+\t\t                               .buffer();\n \t\tthis.encoder.accept(byteBuf, message);\n-\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf)\n-\t\t                                                                  .then()));\n+\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf))\n+\t\t                                                        .then());\n \t}\n \n \t@Override",
    "output": "upgrade STOMP support to reactor-netty 0.6"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java\n@@ -61,9 +61,11 @@ public ReactorNettyTcpConnection(NettyInbound inbound, NettyOutbound outbound,\n \n \t@Override\n \tpublic ListenableFuture<Void> send(Message<P> message) {\n-\t\tByteBuf byteBuf = this.inbound.channel().alloc().buffer();\n+\t\tByteBuf byteBuf = this.inbound.alloc()\n+\t\t                              .buffer();\n \t\tthis.encoder.accept(byteBuf, message);\n-\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf)));\n+\t\treturn new MonoToListenableFutureAdapter<>(this.outbound.send(Mono.just(byteBuf)\n+\t\t                                                                  .then()));\n \t}\n \n \t@Override",
    "output": "upgrade STOMP support to reactor-netty 0.6"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n@@ -36,6 +36,7 @@\n \n import org.springframework.jdbc.CannotGetJdbcConnectionException;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.util.NumberUtils;\n \n /**\n  * Generic utility methods for working with JDBC. Mainly for internal use\n@@ -184,6 +185,24 @@ else if (Blob.class == requiredType) {\n \t\telse if (Clob.class == requiredType) {\n \t\t\treturn rs.getClob(index);\n \t\t}\n+\t\telse if (requiredType.isEnum()) {\n+\t\t\t// Enums can either be represented through a String or an enum index value:\n+\t\t\t// leave enum type conversion up to the caller (e.g. a ConversionService)\n+\t\t\t// but make sure that we return nothing other than a String or an Integer.\n+\t\t\tObject obj = rs.getObject(index);\n+\t\t\tif (obj instanceof String) {\n+\t\t\t\treturn obj;\n+\t\t\t}\n+\t\t\telse if (obj instanceof Number) {\n+\t\t\t\t// Defensively convert any Number to an Integer (as needed by our\n+\t\t\t\t// ConversionService's IntegerToEnumConverterFactory) for use as index\n+\t\t\t\treturn NumberUtils.convertNumberToTargetClass((Number) obj, Integer.class);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// e.g. on Postgres: getObject returns a PGObject but we need a String\n+\t\t\t\treturn rs.getString(index);\n+\t\t\t}\n+\t\t}\n \n \t\telse {\n \t\t\t// Some unknown type desired -> rely on getObject.",
    "output": "Explicit support for retrieving enum values Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java\n@@ -31,7 +31,7 @@\n import reactor.core.publisher.MonoProcessor;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n-import reactor.ipc.netty.ChannelFutureMono;\n+import reactor.ipc.netty.FutureMono;\n import reactor.ipc.netty.NettyContext;\n import reactor.ipc.netty.NettyInbound;\n import reactor.ipc.netty.NettyOutbound;\n@@ -164,7 +164,7 @@ public ListenableFuture<Void> shutdown() {\n \n \t\tthis.stopping = true;\n \n-\t\tMono<Void> completion = ChannelFutureMono.from(this.group.close())\n+\t\tMono<Void> completion = FutureMono.from(this.group.close())\n \t\t\t\t.doAfterTerminate((x, e) -> this.scheduler.shutdown());\n \n \t\treturn new MonoToListenableFutureAdapter<>(completion);",
    "output": "ChannelFutureMono renamed to FutureMono In the latest reactor-netty there is renaming of ChannelFutureMono class to FutureMono. Thus build fails on the latest master"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeConverters.java b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeConverters.java\n--- a/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeConverters.java\n+++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeConverters.java\n@@ -22,7 +22,6 @@\n import java.time.LocalTime;\n import java.time.OffsetDateTime;\n import java.time.ZonedDateTime;\n-import java.time.chrono.ChronoZonedDateTime;\n import java.util.Calendar;\n import java.util.GregorianCalendar;\n \n@@ -141,8 +140,7 @@ private static class ZonedDateTimeToInstantConverter implements Converter<ZonedD\n \n \t\t@Override\n \t\tpublic Instant convert(ZonedDateTime source) {\n-\t\t\t// Explicit cast to interface necessary in order to call Java 8 default method from -source 1.6\n-\t\t\treturn ((ChronoZonedDateTime) source).toInstant();\n+\t\t\treturn source.toInstant();\n \t\t}\n \t}\n \n@@ -241,8 +239,7 @@ private static class CalendarToInstantConverter implements Converter<Calendar, I\n \n \t\t@Override\n \t\tpublic Instant convert(Calendar source) {\n-\t\t\t// Explicit cast to interface necessary in order to call Java 8 default method from -source 1.6\n-\t\t\treturn ((ChronoZonedDateTime) calendarToZonedDateTime(source)).toInstant();\n+\t\t\treturn calendarToZonedDateTime(source).toInstant();\n \t\t}\n \t}\n ",
    "output": "Avoid defensive casts against Java 8 default methods Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -114,7 +114,7 @@ protected void applyCookies() {\n \n \t@Override\n \tpublic Mono<Void> writeWith(File file, long position, long count) {\n-\t\treturn doCommit(() -> this.response.sendFile(file, position, count));\n+\t\treturn doCommit(() -> this.response.sendFile(file.toPath(), position, count));\n \t}\n \n \tprivate static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {",
    "output": "Upgrade with new HttpServerResponse.sendFile signature Reactor Netty's `HttpServerResponse` has a new `sendFile` signature that takes a `Path` instead of a `File`"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/RxNettyWebSocketSession.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/RxNettyWebSocketSession.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/RxNettyWebSocketSession.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/RxNettyWebSocketSession.java\n@@ -127,7 +127,7 @@ else if (WebSocketMessage.Type.BINARY.equals(message.getType())) {\n \t\telse if (WebSocketMessage.Type.PING.equals(message.getType())) {\n \t\t\treturn new PingWebSocketFrame(byteBuf);\n \t\t}\n-\t\telse if (WebSocketMessage.Type.BINARY.equals(message.getType())) {\n+\t\telse if (WebSocketMessage.Type.PONG.equals(message.getType())) {\n \t\t\treturn new PongWebSocketFrame(byteBuf);\n \t\t}\n \t\telse {",
    "output": "RxNettyWebSocketSession creates PONG frame correctly"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n@@ -221,9 +221,11 @@ public void onNext(AbstractResponseBodyProcessor processor, DataBuffer dataBuffe\n \t\t\t\tif (dataBuffer.readableByteCount() == 0) {\n \t\t\t\t\tprocessor.subscription.request(1);\n \t\t\t\t}\n-\t\t\t\telse if (processor.changeState(this, RECEIVED)) {\n+\t\t\t\telse {\n \t\t\t\t\tprocessor.receiveBuffer(dataBuffer);\n-\t\t\t\t\tprocessor.writeIfPossible();\n+\t\t\t\t\tif (processor.changeState(this, RECEIVED)) {\n+\t\t\t\t\t\tprocessor.writeIfPossible();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Fix NPE in ServletServerHttpResponse.ResponseBodyProcessor.write Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -441,14 +441,9 @@ public boolean equals(Object obj) {\n \t\tif (!ObjectUtils.nullSafeEquals(getType(), other.getType())) {\n \t\t\treturn false;\n \t\t}\n-\t\tif (getAnnotations().length != other.getAnnotations().length) {\n+\t\tif (!Arrays.equals(getAnnotations(), other.getAnnotations())) {\n \t\t\treturn false;\n \t\t}\n-\t\tfor (Annotation ann : getAnnotations()) {\n-\t\t\tif (!ann.equals(other.getAnnotation(ann.annotationType()))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n \t\tif (isCollection() || isArray()) {\n \t\t\treturn ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), other.getElementTypeDescriptor());\n \t\t}",
    "output": "TypeDescriptor avoids merged annotations for equality comparisons"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -381,9 +381,12 @@ protected ModelAndView doResolveHandlerMethodException(HttpServletRequest reques\n \t\t\t}\n \t\t}\n \t\tcatch (Throwable invocationEx) {\n-\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t// Any other than the original exception is unintended here,\n+\t\t\t// probably an accident (e.g. failed assertion or the like).\n+\t\t\tif (invocationEx != exception && logger.isWarnEnabled()) {\n \t\t\t\tlogger.warn(\"Failed to invoke @ExceptionHandler method: \" + exceptionHandlerMethod, invocationEx);\n \t\t\t}\n+\t\t\t// Continue with default processing of the original exception...\n \t\t\treturn null;\n \t\t}\n ",
    "output": "No warn logging for propagated original exception Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java\n--- a/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java\n@@ -51,6 +51,7 @@\n  * @author Arjen Poutsma\n  * @author Rossen Stoyanchev\n  * @author Brian Clozel\n+ * @author Mark Paluch\n  * @since 4.1.2\n  */\n public class Netty4ClientHttpRequestFactory implements ClientHttpRequestFactory,\n@@ -174,8 +175,7 @@ private Netty4ClientHttpRequest createRequestInternal(URI uri, HttpMethod httpMe\n \t}\n \n \tprivate Bootstrap getBootstrap(URI uri) {\n-\t\tboolean isSecure = (uri.getPort() == 443 ||\n-\t\t\t\t(uri.getPort() == -1 && \"https\".equalsIgnoreCase(uri.getScheme())));\n+\t\tboolean isSecure = (uri.getPort() == 443 || \"https\".equalsIgnoreCase(uri.getScheme()));\n \t\tif (isSecure) {\n \t\t\tif (this.sslBootstrap == null) {\n \t\t\t\tthis.sslBootstrap = buildBootstrap(true);",
    "output": "Fix TLS detection in URLs for Netty Client RequestFactory Do not check on non-specified port when scheme is https. Enables SSL for https URIs with a specified port. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -2464,7 +2464,8 @@ public String readClass(final int index, final char[] buf) {\n         // computes the start index of the CONSTANT_Class item in b\n         // and reads the CONSTANT_Utf8 item designated by\n         // the first two bytes of this CONSTANT_Class item\n-        return readUTF8(items[readUnsignedShort(index)], buf);\n+        String name = readUTF8(items[readUnsignedShort(index)], buf);\n+        return (name != null ? name.intern() : null);\n     }\n \n     /**",
    "output": "ASM-generated class names get interned for better memory allocation Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -648,7 +648,7 @@ private static Method[] getDeclaredMethods(Class<?> clazz) {\n \t\t\t\tdeclaredMethodsCache.put(clazz, (result.length == 0 ? NO_METHODS : result));\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n-\t\t\t\tthrow new IllegalStateException(\"Failed to introspect Class [\" + clazz +\n+\t\t\t\tthrow new IllegalStateException(\"Failed to introspect Class [\" + clazz.getName() +\n \t\t\t\t\t\t\"] from ClassLoader [\" + clazz.getClassLoader() + \"]\", ex);\n \t\t\t}\n \t\t}\n@@ -747,7 +747,7 @@ private static Field[] getDeclaredFields(Class<?> clazz) {\n \t\t\t\tdeclaredFieldsCache.put(clazz, (result.length == 0 ? NO_FIELDS : result));\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n-\t\t\t\tthrow new IllegalStateException(\"Failed to introspect Class [\" + clazz +\n+\t\t\t\tthrow new IllegalStateException(\"Failed to introspect Class [\" + clazz.getName() +\n \t\t\t\t\t\t\"] from ClassLoader [\" + clazz.getClassLoader() + \"]\", ex);\n \t\t\t}\n \t\t}",
    "output": "Consistent references to plain class names in exception messages Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java\n@@ -212,7 +212,7 @@ public void unresolvedViewName() throws Exception {\n \n \t\tStepVerifier.create(mono)\n \t\t\t\t.expectNextCount(0)\n-\t\t\t\t.expectErrorMatch(err -> err.getMessage().equals(\"Could not resolve view with name 'account'.\"))\n+\t\t\t\t.expectErrorMatches(err -> err.getMessage().equals(\"Could not resolve view with name 'account'.\"))\n \t\t\t\t.verify();\n \t}\n ",
    "output": "Rename expectErrorMatchto expectErrorMatches"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java\n@@ -212,7 +212,7 @@ public void unresolvedViewName() throws Exception {\n \n \t\tStepVerifier.create(mono)\n \t\t\t\t.expectNextCount(0)\n-\t\t\t\t.expectErrorWith(err -> err.getMessage().equals(\"Could not resolve view with name 'account'.\"))\n+\t\t\t\t.expectErrorMatch(err -> err.getMessage().equals(\"Could not resolve view with name 'account'.\"))\n \t\t\t\t.verify();\n \t}\n ",
    "output": "Rename expectErrorWithto expectErrorMatch"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java\n@@ -289,6 +289,23 @@ public void handleMonoWithWildcardBodyType() throws Exception {\n \t\tassertResponseBody(\"\\\"body\\\"\");\n \t}\n \n+\t@Test // SPR-14877\n+\tpublic void handleMonoWithWildcardBodyTypeAndNullBody() throws Exception {\n+\n+\t\tthis.exchange.getAttributes().put(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE,\n+\t\t\t\tCollections.singleton(MediaType.APPLICATION_JSON));\n+\n+\t\tHandlerResult result = new HandlerResult(new TestController(), Mono.just(notFound().build()),\n+\t\t\t\tResolvableMethod.onClass(TestController.class)\n+\t\t\t\t\t\t.name(\"monoResponseEntityWildcard\")\n+\t\t\t\t\t\t.resolveReturnType());\n+\n+\t\tthis.resultHandler.handleResult(this.exchange, result).block(Duration.ofSeconds(5));\n+\n+\t\tassertEquals(HttpStatus.NOT_FOUND, this.response.getStatusCode());\n+\t\tassertNull(this.response.getBody());\n+\t}\n+\n \n \tprivate void testHandle(Object returnValue, ResolvableType type) {\n \t\tHandlerResult result = handlerResult(returnValue, type);",
    "output": "Add ResponseEntity test"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n@@ -237,7 +237,7 @@ protected PropertiesHolder getMergedProperties(Locale locale) {\n \t\t\treturn mergedHolder;\n \t\t}\n \t\tProperties mergedProps = newProperties();\n-\t\tmergedHolder = new PropertiesHolder(mergedProps, -1);\n+\t\tlong latestTimestamp = -1;\n \t\tString[] basenames = StringUtils.toStringArray(getBasenameSet());\n \t\tfor (int i = basenames.length - 1; i >= 0; i--) {\n \t\t\tList<String> filenames = calculateAllFilenames(basenames[i], locale);\n@@ -246,9 +246,13 @@ protected PropertiesHolder getMergedProperties(Locale locale) {\n \t\t\t\tPropertiesHolder propHolder = getProperties(filename);\n \t\t\t\tif (propHolder.getProperties() != null) {\n \t\t\t\t\tmergedProps.putAll(propHolder.getProperties());\n+\t\t\t\t\tif (propHolder.getFileTimestamp() > latestTimestamp) {\n+\t\t\t\t\t\tlatestTimestamp = propHolder.getFileTimestamp();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tmergedHolder = new PropertiesHolder(mergedProps, latestTimestamp);\n \t\tPropertiesHolder existing = this.cachedMergedProperties.putIfAbsent(locale, mergedHolder);\n \t\tif (existing != null) {\n \t\t\tmergedHolder = existing;",
    "output": "ReloadableResourceBundleMessageSource sets file timestamp on merged holder Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -688,6 +688,16 @@ public AnnotatedElementAdapter(Annotation[] annotations) {\n \t\t\tthis.annotations = annotations;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {\n+\t\t\tfor (Annotation annotation : getAnnotations()) {\n+\t\t\t\tif (annotation.annotationType() == annotationClass) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t}\n+\n \t\t@Override\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationClass) {",
    "output": "AnnotatedElementAdapter explicitly declares isAnnotationPresent method Issue: (cherry picked from commit 17863df)"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java\n@@ -273,7 +273,7 @@ protected List<SyncHandlerMethodArgumentResolver> getDefaultInitBinderArgumentRe\n \t\tresolvers.add(new ServerWebExchangeArgumentResolver());\n \n \t\t// Custom resolvers\n-\t\tif (getCustomArgumentResolvers() != null) {\n+\t\tif (getCustomInitBinderArgumentResolvers() != null) {\n \t\t\tresolvers.addAll(getCustomInitBinderArgumentResolvers());\n \t\t}\n ",
    "output": "Fix NPE in custom @InitBinder resolver initialization Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/Type.java b/spring-core/src/main/java/org/springframework/asm/Type.java\n--- a/spring-core/src/main/java/org/springframework/asm/Type.java\n+++ b/spring-core/src/main/java/org/springframework/asm/Type.java\n@@ -562,7 +562,7 @@ public String getClassName() {\n             }\n             return sb.toString();\n         case OBJECT:\n-            return new String(buf, off, len).replace('/', '.');\n+            return new String(buf, off, len).replace('/', '.').intern();\n         default:\n             return null;\n         }\n@@ -577,7 +577,7 @@ public String getClassName() {\n      * @return the internal name of the class corresponding to this object type.\n      */\n     public String getInternalName() {\n-        return new String(buf, off, len);\n+        return new String(buf, off, len).intern();\n     }\n \n     /**",
    "output": "ASM-generated class names get interned for better memory allocation Issue: (cherry picked from commit d859826)"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java\n@@ -122,6 +122,7 @@ public void emptyBodyWithStringNotRequired() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void emptyBodyWithMono() throws Exception {\n \t\tResolvableType type = forClassWithGenerics(Mono.class, String.class);\n \n@@ -135,6 +136,7 @@ public void emptyBodyWithMono() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void emptyBodyWithFlux() throws Exception {\n \t\tResolvableType type = forClassWithGenerics(Flux.class, String.class);\n \n@@ -247,7 +249,6 @@ private Predicate<MethodParameter> requestBody(boolean required) {\n \t}\n \n \n-\t@SuppressWarnings(\"unused\")\n \tvoid handle(\n \t\t\t@RequestBody String string,\n \t\t\t@RequestBody Mono<String> mono,",
    "output": "Clean up warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java\n@@ -354,10 +354,12 @@ public AccessorLValue(PropertyOrFieldReference propertyOrFieldReference, TypedVa\n \n \t\t@Override\n \t\tpublic TypedValue getValue() {\n-\t\t\tTypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);\n-\t\t\tif (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {\n-\t\t\t\tCompilablePropertyAccessor accessor = (CompilablePropertyAccessor) this.ref.cachedReadAccessor;\n-\t\t\t\tthis.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());\n+\t\t\tTypedValue value =\n+\t\t\t\t\tthis.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);\n+\t\t\tPropertyAccessor accessorToUse = this.ref.cachedReadAccessor;\n+\t\t\tif (accessorToUse instanceof CompilablePropertyAccessor) {\n+\t\t\t\tthis.ref.exitTypeDescriptor =\n+\t\t\t\t\t\tCodeFlow.toDescriptor(((CompilablePropertyAccessor) accessorToUse).getPropertyType());\n \t\t\t}\n \t\t\treturn value;\n \t\t}",
    "output": "AccessorLValue reliably downcasts to CompilablePropertyAccessor in concurrent scenarios Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,12 +22,13 @@\n  * @author Mark Fisher\n  * @since 4.0\n  */\n+@FunctionalInterface\n public interface MessageChannel {\n \n \t/**\n \t * Constant for sending a message without a prescribed timeout.\n \t */\n-\tpublic static final long INDEFINITE_TIMEOUT = -1;\n+\tlong INDEFINITE_TIMEOUT = -1;\n \n \n \t/**\n@@ -40,7 +41,9 @@ public interface MessageChannel {\n \t * @param message the message to send\n \t * @return whether or not the message was sent\n \t */\n-\tboolean send(Message<?> message);\n+\tdefault boolean send(Message<?> message) {\n+\t\treturn send(message, INDEFINITE_TIMEOUT);\n+\t}\n \n \t/**\n \t * Send a message, blocking until either the message is accepted or the",
    "output": "MessageChannel declares send(Message) as default method Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -90,12 +90,14 @@ public int getBufferSize() {\n \t@Override\n \tpublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException {\n \n+\t\t// Start async before Read/WriteListener registration\n+\t\tAsyncContext asyncContext = servletRequest.startAsync();\n+\n \t\tServletServerHttpRequest request = new ServletServerHttpRequest(\n \t\t\t\t((HttpServletRequest) servletRequest), getDataBufferFactory(), getBufferSize());\n \t\tServletServerHttpResponse response = new ServletServerHttpResponse(\n \t\t\t\t((HttpServletResponse) servletResponse), getDataBufferFactory(), getBufferSize());\n \n-\t\tAsyncContext asyncContext = servletRequest.startAsync();\n \t\tasyncContext.addListener(new EventHandlingAsyncListener(request, response));\n \n \t\tHandlerResultSubscriber resultSubscriber = new HandlerResultSubscriber(asyncContext);",
    "output": "Fix failing tests Issue: ,"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java\n--- a/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java\n+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java\n@@ -43,6 +43,8 @@ public class MockServerHttpRequest implements ServerHttpRequest {\n \n \tprivate URI url;\n \n+\tprivate String contextPath = \"\";\n+\n \tprivate final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n \n \tprivate final HttpHeaders headers = new HttpHeaders();\n@@ -100,6 +102,15 @@ public URI getURI() {\n \t\treturn this.url;\n \t}\n \n+\tpublic void setContextPath(String contextPath) {\n+\t\tthis.contextPath = contextPath;\n+\t}\n+\n+\t@Override\n+\tpublic String getContextPath() {\n+\t\treturn this.contextPath;\n+\t}\n+\n \tpublic MockServerHttpRequest addHeader(String name, String value) {\n \t\tgetHeaders().add(name, value);\n \t\treturn this;",
    "output": "Sync MockServerHttpRequest in spring-test/spring-web"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java\n@@ -218,7 +218,10 @@ public void onSubscribe(AbstractResponseBodyProcessor processor, Subscription su\n \n \t\t\t@Override\n \t\t\tpublic void onNext(AbstractResponseBodyProcessor processor, DataBuffer dataBuffer) {\n-\t\t\t\tif (processor.changeState(this, RECEIVED)) {\n+\t\t\t\tif (dataBuffer.readableByteCount() == 0) {\n+\t\t\t\t\tprocessor.subscription.request(1);\n+\t\t\t\t}\n+\t\t\t\telse if (processor.changeState(this, RECEIVED)) {\n \t\t\t\t\tprocessor.receiveBuffer(dataBuffer);\n \t\t\t\t\tprocessor.writeIfPossible();\n \t\t\t\t}",
    "output": "Improve AbstractResponseBodyProcessor.onNext(..) If the provided DataBuffer is empty then request the next DataBuffer"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java\n@@ -146,7 +146,7 @@ public Mono<Void> setComplete() {\n \t * @return a completion publisher\n \t */\n \tprotected Mono<Void> doCommit() {\n-\t\treturn doCommit(null);\n+\t\treturn (this.state.get() == State.NEW ? doCommit(null) : Mono.empty());\n \t}\n \n \t/**\n@@ -158,8 +158,7 @@ protected Mono<Void> doCommit() {\n \tprotected Mono<Void> doCommit(Supplier<? extends Mono<Void>> writeAction) {\n \t\tif (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Can't set the status \" + statusCode.toString() +\n-\t\t\t\t\t\t\" because the HTTP response has already been committed\");\n+\t\t\t\tlogger.debug(\"Skipping doCommit (response already committed).\");\n \t\t\t}\n \t\t\treturn Mono.empty();\n \t\t}",
    "output": "Check status in AbstractServerHttpResponse setComplete"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/SimpleNativeJdbcExtractor.java\n@@ -35,10 +35,6 @@\n  * flags to \"true\". If none of the statement types is wrapped - or you solely need\n  * Connection unwrapping in the first place -, the defaults are fine.\n  *\n- * <p>SimpleNativeJdbcExtractor is a common choice for use with OracleLobHandler, which\n- * just needs Connection unwrapping via the {@link #getNativeConnectionFromStatement}\n- * method. This usage will work with almost any connection pool.\n- *\n  * <p>For full usage with JdbcTemplate, i.e. to also provide Statement unwrapping:\n  * <ul>\n  * <li>Use a default SimpleNativeJdbcExtractor for Resin and SJSAS (no JDBC",
    "output": "Remove OracleLobHandler from documentation Now that OracleLobHandler has finally been removed it should also be removed from the documentation. This commit includes the following changes * remove OracleLobHandler references from Javadoc * remove OracleLobHandler references from Asciidoctor Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java b/spring-context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java\n--- a/spring-context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java\n+++ b/spring-context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -42,7 +42,7 @@\n @SuppressWarnings(\"serial\")\n public abstract class AbstractPropertyBindingResult extends AbstractBindingResult {\n \n-\tprivate ConversionService conversionService;\n+\tprivate transient ConversionService conversionService;\n \n \n \t/**",
    "output": "BindingResult does not hold on to ConversionService when serialized in session Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n--- a/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.validation.beanvalidation;\n \n+import java.io.Serializable;\n import java.util.HashSet;\n import java.util.LinkedHashSet;\n import java.util.LinkedList;\n@@ -310,7 +311,8 @@ public ExecutableValidator forExecutables() {\n \t * Wrapper for a String attribute which can be resolved via a {@code MessageSource},\n \t * falling back to the original attribute as a default value otherwise.\n \t */\n-\tprivate static class ResolvableAttribute implements MessageSourceResolvable {\n+\t@SuppressWarnings(\"serial\")\n+\tprivate static class ResolvableAttribute implements MessageSourceResolvable, Serializable {\n \n \t\tprivate final String resolvableString;\n ",
    "output": "SpringValidatorAdapter declares ResolvableAttribute as serializable Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -615,8 +615,8 @@ private URL determineDefaultPersistenceUnitRootUrl() {\n \t\t\treturn null;\n \t\t}\n \t\ttry {\n-\t\t\tResource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation);\n-\t\t\treturn res.getURL();\n+\t\t\tURL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL();\n+\t\t\treturn (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url);\n \t\t}\n \t\tcatch (IOException ex) {\n \t\t\tthrow new PersistenceException(\"Unable to resolve persistence unit root URL\", ex);",
    "output": "DefaultPersistenceUnitManager extracts jar file from default persistence unit root URL Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java\n@@ -480,8 +480,8 @@ public void afterConnectionClosed() {\n \t\t\tlogger.debug(\"Connection closed session id=\" + this.sessionId);\n \t\t}\n \t\tif (!this.closing) {\n-\t\t\thandleFailure(new ConnectionLostException(\"Connection closed\"));\n \t\t\tresetConnection();\n+\t\t\thandleFailure(new ConnectionLostException(\"Connection closed\"));\n \t\t}\n \t}\n \n@@ -671,8 +671,8 @@ public void run() {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(error);\n \t\t\t}\n-\t\t\thandleFailure(new IllegalStateException(error));\n \t\t\tresetConnection();\n+\t\t\thandleFailure(new IllegalStateException(error));\n \t\t}\n \t}\n ",
    "output": "Reset connection before delegating to handler Resetting the connection first before invoking a failure callback on the application handler ensures that any checks to isConnected will return false. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -715,7 +715,7 @@ public static Locale parseLocaleString(String localeString) {\n \tprivate static void validateLocalePart(String localePart) {\n \t\tfor (int i = 0; i < localePart.length(); i++) {\n \t\t\tchar ch = localePart.charAt(i);\n-\t\t\tif (ch != '_' && ch != ' ' && !Character.isLetterOrDigit(ch)) {\n+\t\t\tif (ch != ' ' && ch != '_' && ch != '#' && !Character.isLetterOrDigit(ch)) {\n \t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");\n \t\t\t}\n\ndiff --git a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java\n@@ -692,4 +692,9 @@ public void testParseLocaleWithVariantContainingCountryCode() {\n \t\tassertEquals(\"Variant containing country code not extracted correctly\", variant, locale.getVariant());\n \t}\n \n+\t@Test  // SPR-14718\n+\tpublic void testParseJava7Variant() {\n+\t\tassertEquals(\"sr_#LATN\", StringUtils.parseLocaleString(\"sr_#LATN\").toString());\n+\t}\n+\n }",
    "output": "StringUtils.parseLocaleString accepts Java 7 variants Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java\n@@ -30,6 +30,7 @@\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.DataBufferFactory;\n import org.springframework.core.io.buffer.NettyDataBufferFactory;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseCookie;\n import org.springframework.http.ZeroCopyHttpOutputMessage;\n@@ -85,6 +86,10 @@ protected Mono<Void> writeAndFlushWithInternal(\n \n \t@Override\n \tprotected void writeHeaders() {\n+\t\t// TODO: temporarily, see https://github.com/reactor/reactor-netty/issues/2\n+\t\tif(getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)){\n+\t\t\tthis.channel.responseTransfer(false);\n+\t\t}\n \t\tfor (String name : getHeaders().keySet()) {\n \t\t\tfor (String value : getHeaders().get(name)) {\n \t\t\t\tthis.channel.responseHeaders().add(name, value);",
    "output": "Workaround for Content-Length issue in Reactor Netty Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/PathResourceTests.java\n@@ -312,7 +312,6 @@ public void getReadableByteChannel() throws Exception {\n \t@Test\n \tpublic void getReadableByteChannelForDir() throws Exception {\n \t\tPathResource resource = new PathResource(TEST_DIR);\n-\t\tthrown.expect(NoSuchFileException.class);\n \t\tresource.readableChannel();\n \t}\n ",
    "output": "Follow up fix for PR"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -768,7 +768,7 @@ public void afterConnectionClosed() {\n \t\tpublic ListenableFuture<Void> forward(final Message<?> message, final StompHeaderAccessor accessor) {\n \t\t\tTcpConnection<byte[]> conn = this.tcpConnection;\n \n-\t\t\tif (!this.isStompConnected) {\n+\t\t\tif (!this.isStompConnected || conn == null) {\n \t\t\t\tif (this.isRemoteClientSession) {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\tlogger.debug(\"TCP connection closed already, ignoring \" +",
    "output": "Check both connection and connected flag Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n@@ -93,17 +93,19 @@ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolv\n \t/**\n \t * Log the given key as found in the given {@link PropertySource}, resulting in\n \t * the given value.\n-\t * <p>The default implementation writes a debug log message, including the value.\n-\t * Subclasses may override this to change the log level and/or the log message.\n+\t * <p>The default implementation writes a debug log message with key and source.\n+\t * As of 4.3.3, this does not log the value anymore in order to avoid accidental\n+\t * logging of sensitive settings. Subclasses may override this method to change\n+\t * the log level and/or log message, including the property's value if desired.\n \t * @param key the key found\n \t * @param propertySource the {@code PropertySource} that the key has been found in\n \t * @param value the corresponding value\n \t * @since 4.3.1\n \t */\n \tprotected void logKeyFound(String key, PropertySource<?> propertySource, Object value) {\n \t\tif (logger.isDebugEnabled()) {\n-\t\t\tlogger.debug(String.format(\"Found key '%s' in [%s] with type [%s] and value '%s'\",\n-\t\t\t\t\tkey, propertySource.getName(), value.getClass().getSimpleName(), value));\n+\t\t\tlogger.debug(String.format(\"Found key '%s' in [%s] with type [%s]\",\n+\t\t\t\t\tkey, propertySource.getName(), value.getClass().getSimpleName()));\n \t\t}\n \t}\n ",
    "output": "PropertySourcesPropertyResolver does not log retrieved value by default Issue: (cherry picked from commit fbe7ddb)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -205,6 +205,9 @@ public void setEnvironment(Environment environment) {\n \tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n \t\tAssert.notNull(resourceLoader, \"ResourceLoader must not be null\");\n \t\tthis.resourceLoader = resourceLoader;\n+\t\tif (!this.setMetadataReaderFactoryCalled) {\n+\t\t\tthis.metadataReaderFactory = new CachingMetadataReaderFactory(resourceLoader);\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Configuration class processing uses MetadataReaderFactory for current ResourceLoader Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java\n@@ -48,10 +48,13 @@ public DataAccessException translateExceptionIfPossible(RuntimeException ex) {\n \t\tif (ex instanceof HibernateException) {\n \t\t\treturn convertHibernateAccessException((HibernateException) ex);\n \t\t}\n-\t\tif (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) {\n-\t\t\treturn convertHibernateAccessException((HibernateException) ex.getCause());\n+\t\tif (ex instanceof PersistenceException) {\n+\t\t\tif (ex.getCause() instanceof HibernateException) {\n+\t\t\t\treturn convertHibernateAccessException((HibernateException) ex.getCause());\n+\t\t\t}\n+\t\t\treturn EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);\n \t\t}\n-\t\treturn EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);\n+\t\treturn null;\n \t}\n \n \t/**",
    "output": "HibernateExceptionTranslator avoids JPA IllegalState/ArgumentException translation Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java\n--- a/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java\n+++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n  * @see org.springframework.context.ApplicationEvent\n  * @see org.springframework.context.event.EventPublicationInterceptor\n  */\n+@FunctionalInterface\n public interface ApplicationEventPublisher {\n \n \t/**\n@@ -37,7 +38,9 @@ public interface ApplicationEventPublisher {\n \t * @param event the event to publish\n \t * @see org.springframework.web.context.support.RequestHandledEvent\n \t */\n-\tvoid publishEvent(ApplicationEvent event);\n+\tdefault void publishEvent(ApplicationEvent event) {\n+\t\tpublishEvent((Object) event);\n+\t}\n \n \t/**\n \t * Notify all <strong>matching</strong> listeners registered with this",
    "output": "ApplicationEventPublisher as functional interface Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java\n@@ -164,7 +164,7 @@ public ReadableByteChannel apply(ReadableByteChannel channel, SynchronousSink<Da\n \t\t\ttry {\n \t\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(chunkSize);\n \t\t\t\tint read;\n-\t\t\t\tif ((read = channel.read(byteBuffer)) > 0) {\n+\t\t\t\tif ((read = channel.read(byteBuffer)) >= 0) {\n \t\t\t\t\tbyteBuffer.flip();\n \t\t\t\t\tboolean release = true;\n \t\t\t\t\tDataBuffer dataBuffer = this.dataBufferFactory.allocateBuffer(read);",
    "output": "Fix bug in reading Flux from Channel Fixed bug where the returned Flux from DataBufferUtils.readwould be completed prematurely if the channel was not ready to read, but did not reach the end of the file either"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java\n--- a/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java\n@@ -433,7 +433,9 @@ protected Object convertFromMessage(Message message, JavaType targetJavaType)\n \tprotected JavaType getJavaTypeForMessage(Message message) throws JMSException {\n \t\tString typeId = message.getStringProperty(this.typeIdPropertyName);\n \t\tif (typeId == null) {\n-\t\t\tthrow new MessageConversionException(\"Could not find type id property [\" + this.typeIdPropertyName + \"]\");\n+\t\t\tthrow new MessageConversionException(\n+\t\t\t\t\t\"Could not find type id property [\" + this.typeIdPropertyName + \"] on message [\" +\n+\t\t\t\t\tmessage.getJMSMessageID() + \"] from destination [\" + message.getJMSDestination() + \"]\");\n \t\t}\n \t\tClass<?> mappedClass = this.idClassMappings.get(typeId);\n \t\tif (mappedClass != null) {",
    "output": "MappingJackson2MessageConverter adds message id and destination to type resolution exception Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/codec/Encoder.java b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java\n--- a/spring-core/src/main/java/org/springframework/core/codec/Encoder.java\n+++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java\n@@ -20,6 +20,7 @@\n \n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import org.springframework.core.ResolvableType;\n import org.springframework.core.io.buffer.DataBuffer;\n@@ -50,7 +51,9 @@ public interface Encoder<T> {\n \t/**\n \t * Encode a stream of Objects of type {@code T} into a {@link DataBuffer}\n \t * output stream.\n-\t * @param inputStream the input stream of Objects to encode\n+\t * @param inputStream the input stream of Objects to encode. If the input should be\n+\t * encoded as a single value rather than as a stream of elements, an instance of\n+\t * {@link Mono} should be used.\n \t * @param bufferFactory for creating output stream {@code DataBuffer}'s\n \t * @param elementType the expected type of elements in the input stream;\n \t * this type must have been previously passed to the {@link #canEncode}",
    "output": "Improve Encoder Javadoc"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java b/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n@@ -103,8 +103,13 @@ public ApplicationContext getApplicationContext() {\n \t\tif (context instanceof ConfigurableApplicationContext) {\n \t\t\t@SuppressWarnings(\"resource\")\n \t\t\tConfigurableApplicationContext cac = (ConfigurableApplicationContext) context;\n-\t\t\tAssert.state(cac.isActive(), () -> \"The ApplicationContext loaded for [\" + mergedContextConfiguration\n-\t\t\t\t\t+ \"] is not active. Ensure that the context has not been closed programmatically.\");\n+\t\t\tAssert.state(cac.isActive(), () ->\n+\t\t\t\t\t\"The ApplicationContext loaded for [\" + mergedContextConfiguration +\n+\t\t\t\t\t\"] is not active. This may be due to one of the following reasons: \" +\n+\t\t\t\t\t\"1) the context was closed programmatically by user code; \" +\n+\t\t\t\t\t\"2) the context was closed during parallel test execution either \" +\n+\t\t\t\t\t\"according to @DirtiesContext semantics or due to automatic eviction \" +\n+\t\t\t\t\t\"from the ContextCache due to a maximum cache size policy.\");\n \t\t}\n \t\treturn context;\n \t}",
    "output": "Improve exception msg for inactive test ApplicationContext This commit improves the exception message thrown when a test's ApplicationContext is no longer active by explaining that the cause may be due to parallel test execution. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java\n@@ -79,10 +79,6 @@ public Mono<Void> write(Publisher<?> inputStream, ResolvableType type,\n \t\tDataBufferFactory bufferFactory = outputMessage.bufferFactory();\n \t\tFlux<Publisher<DataBuffer>> body = encode(inputStream, bufferFactory, type);\n \n-\t\t//  Keep the SSE connection open even for cold stream in order to avoid\n-\t\t// unexpected browser reconnection\n-\t\tbody = body.concatWith(Flux.never());\n-\n \t\treturn outputMessage.writeAndFlushWith(body);\n \t}\n ",
    "output": "Let users control SSE stream completion This commit avoid merging automatically the SSE stream with Flux.never. Since browsers automatically reconnect when the HTTP connection is closed, it is now the user responsability to optionally perform a concatWith(Flux.never) on streams that complete in order to avoid receiving the data multiple times on client side. The behavior with hot streams that never complete does not change. Issue"
  },
  {
    "input": "diff --git a/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java\n--- a/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java\n+++ b/spring-context-indexer/src/main/java/org/springframework/context/index/IndexedStereotypesProvider.java\n@@ -22,8 +22,6 @@\n import javax.lang.model.element.AnnotationMirror;\n import javax.lang.model.element.Element;\n import javax.lang.model.element.ElementKind;\n-import javax.lang.model.type.DeclaredType;\n-import javax.lang.model.type.TypeMirror;\n \n /**\n  * A {@link StereotypesProvider} implementation that extracts the stereotypes\n\ndiff --git a/spring-context-indexer/src/test/java/org/springframework/context/index/CandidateComponentsIndexerTests.java b/spring-context-indexer/src/test/java/org/springframework/context/index/CandidateComponentsIndexerTests.java\n--- a/spring-context-indexer/src/test/java/org/springframework/context/index/CandidateComponentsIndexerTests.java\n+++ b/spring-context-indexer/src/test/java/org/springframework/context/index/CandidateComponentsIndexerTests.java\n@@ -57,7 +57,6 @@\n import org.springframework.context.index.sample.type.SpecializedRepo;\n import org.springframework.context.index.test.TestCompiler;\n import org.springframework.stereotype.Component;\n-import org.springframework.stereotype.Repository;\n \n import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.*;",
    "output": "Delete unused imports in spring-context-indexer"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java\n@@ -210,14 +210,7 @@ private static Field findSpringMethodRuleField(Class<?> testClass) {\n \t */\n \tstatic TestContextManager getTestContextManager(Class<?> testClass) {\n \t\tAssert.notNull(testClass, \"testClass must not be null\");\n-\t\tsynchronized (testContextManagerCache) {\n-\t\t\tTestContextManager testContextManager = testContextManagerCache.get(testClass);\n-\t\t\tif (testContextManager == null) {\n-\t\t\t\ttestContextManager = new TestContextManager(testClass);\n-\t\t\t\ttestContextManagerCache.put(testClass, testContextManager);\n-\t\t\t}\n-\t\t\treturn testContextManager;\n-\t\t}\n+\t\treturn testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new);\n \t}\n \n ",
    "output": "Use Map.computeIfAbsentin SpringClassRule Replace manual synchronization block in SpringClassRule with Java 8's Map.computeIfAbsent. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java\n@@ -106,7 +106,7 @@ private boolean readAndPublish() throws IOException {\n \t\twhile (hasDemand()) {\n \t\t\tDataBuffer dataBuffer = read();\n \t\t\tif (dataBuffer != null) {\n-\t\t\t\tOperators.getAndSub(this.demand, 1L);\n+\t\t\t\tgetAndSub(this.demand, 1L);\n \t\t\t\tthis.subscriber.onNext(dataBuffer);\n \t\t\t}\n \t\t\telse {\n@@ -116,6 +116,29 @@ private boolean readAndPublish() throws IOException {\n \t\treturn false;\n \t}\n \n+\t/**\n+\t * Concurrent substraction bound to 0 and Long.MAX_VALUE.\n+\t * Any concurrent write will \"happen\" before this operation.\n+\t *\n+\t * @param sequence current atomic to update\n+\t * @param toSub    delta to sub\n+\t * @return value before subscription, 0 or Long.MAX_VALUE\n+\t */\n+\tprivate static long getAndSub(AtomicLong sequence, long toSub) {\n+\t\tlong r;\n+\t\tlong u;\n+\t\tdo {\n+\t\t\tr = sequence.get();\n+\t\t\tif (r == 0 || r == Long.MAX_VALUE) {\n+\t\t\t\treturn r;\n+\t\t\t}\n+\t\t\tu = Operators.subOrZero(r, toSub);\n+\t\t} while (!sequence.compareAndSet(r, u));\n+\n+\t\treturn r;\n+\t}\n+\n+\n \tprotected abstract void checkOnDataAvailable();\n \n \t/**",
    "output": "Copied getAndSubover from Reactor Operators.getAndSub was removed in Reactor 3.0.1, this commit copies the implementation over to AbstractRequestBodyPublisher, which used it"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -1357,11 +1357,6 @@ public void toStringForSynthesizedAnnotations() throws Exception {\n \t\tassertNotNull(synthesizedWebMapping2);\n \n \t\tassertThat(webMappingWithAliases.toString(), is(not(synthesizedWebMapping1.toString())));\n-\n-\t\t// The unsynthesized annotation for handleMappedWithSamePathAndValueAttributes()\n-\t\t// should produce the same toString() results as synthesized annotations for\n-\t\t// handleMappedWithPathAttribute()\n-\t\tassertToStringForWebMappingWithPathAndValue(webMappingWithPathAndValue);\n \t\tassertToStringForWebMappingWithPathAndValue(synthesizedWebMapping1);\n \t\tassertToStringForWebMappingWithPathAndValue(synthesizedWebMapping2);\n \t}",
    "output": "Annotation tests should not rely on JDK-specific toStringrepresentation Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartResolver.java b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -160,8 +160,11 @@ protected MultipartParsingResult parseRequest(HttpServletRequest request) throws\n \t\tcatch (FileUploadBase.SizeLimitExceededException ex) {\n \t\t\tthrow new MaxUploadSizeExceededException(fileUpload.getSizeMax(), ex);\n \t\t}\n+\t\tcatch (FileUploadBase.FileSizeLimitExceededException ex) {\n+\t\t\tthrow new MaxUploadSizeExceededException(fileUpload.getFileSizeMax(), ex);\n+\t\t}\n \t\tcatch (FileUploadException ex) {\n-\t\t\tthrow new MultipartException(\"Could not parse multipart servlet request\", ex);\n+\t\t\tthrow new MultipartException(\"Failed to parse multipart servlet request\", ex);\n \t\t}\n \t}\n ",
    "output": "CommonsMultipartResolver explicitly converts FileSizeLimitExceededException Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -515,11 +515,6 @@ protected boolean isInvalidPath(String path) {\n \t * @return the corresponding media type, or {@code null} if none found\n \t */\n \tprotected MediaType getMediaType(HttpServletRequest request, Resource resource) {\n-\t\t// For backwards compatibility\n-\t\tMediaType mediaType = getMediaType(resource);\n-\t\tif (mediaType != null) {\n-\t\t\treturn mediaType;\n-\t\t}\n \t\treturn this.pathExtensionStrategy.getMediaTypeForResource(resource);\n \t}\n ",
    "output": "Fix compile issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java\n@@ -96,7 +96,7 @@ public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory buffe\n \t\tMono<DataBuffer> endArray = Mono.just(bufferFactory.wrap(END_ARRAY_BUFFER));\n \n \t\tFlux<DataBuffer> array = Flux.from(inputStream)\n-\t\t\t\t.flatMap(value -> {\n+\t\t\t\t.concatMap(value -> {\n \t\t\t\t\tDataBuffer arraySeparator = bufferFactory.wrap(SEPARATOR_BUFFER);\n \t\t\t\t\treturn Flux.just(encodeValue(value, bufferFactory, elementType), arraySeparator);\n \t\t\t\t});",
    "output": "Ensure correct array elements order in Jackson2JsonEncoder Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java\n@@ -82,7 +82,9 @@ private ConditionEvaluationResult evaluateDisabledIf(ExtensionContext extensionC\n \t\tOptional<DisabledIf> disabledIf = findMergedAnnotation(element, DisabledIf.class);\n \t\tAssert.state(disabledIf.isPresent(), () -> \"@DisabledIf must be present on \" + element);\n \n-\t\tString expression = disabledIf.get().expression().trim();\n+\t\tString expression = disabledIf.map(DisabledIf::expression).filter(StringUtils::hasText).orElseThrow(\n+\t\t\t() -> new IllegalStateException(\n+\t\t\t\tString.format(\"The expression in @DisabledIf on [%s] must not be blank\", element)));\n \n \t\tif (isDisabled(expression, extensionContext)) {\n \t\t\tString reason = disabledIf.map(DisabledIf::reason).filter(StringUtils::hasText).orElseGet(",
    "output": "Disallow empty expression in @DisabledIf This commit ensures that a user provides a non-empty expression in declarations of @DisabledIf. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -227,13 +227,7 @@ private Object evaluateJsonPath(String content) throws ParseException {\n \t\ttry {\n \t\t\treturn this.jsonPath.read(content);\n \t\t}\n-\t\tcatch (InvalidPathException ex) {\n-\t\t\tthrow new AssertionError(message + ex.getMessage());\n-\t\t}\n-\t\tcatch (ArrayIndexOutOfBoundsException ex) {\n-\t\t\tthrow new AssertionError(message + ex.getMessage());\n-\t\t}\n-\t\tcatch (IndexOutOfBoundsException ex) {\n+\t\tcatch (InvalidPathException | IndexOutOfBoundsException ex) {\n \t\t\tthrow new AssertionError(message + ex.getMessage());\n \t\t}\n \t}",
    "output": "Simplify exception handling in JsonPathExpectationsHelper"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -240,9 +240,10 @@ protected final BeanFactory getBeanFactory() {\n \t */\n \t@Override\n \tpublic void afterPropertiesSet() {\n-\t\tif (getTransactionManager() == null && getBeanFactory() == null) {\n+\t\tif (getTransactionManager() == null && this.beanFactory == null) {\n \t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"Setting the property 'transactionManager' or running in a BeanFactory is required\");\n+\t\t\t\t\t\"Set the 'transactionManager' property or make sure to run within a BeanFactory \" +\n+\t\t\t\t\t\"containing a PlatformTransactionManager bean!\");\n \t\t}\n \t\tif (getTransactionAttributeSource() == null) {\n \t\t\tthrow new IllegalStateException(",
    "output": "Refined exception message Issue: (cherry picked from commit ab68673)"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/NamedBeanHolder.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/NamedBeanHolder.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/NamedBeanHolder.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/NamedBeanHolder.java\n@@ -17,6 +17,7 @@\n package org.springframework.beans.factory.config;\n \n import org.springframework.beans.factory.NamedBean;\n+import org.springframework.util.Assert;\n \n /**\n  * A simple holder for a given bean name plus bean instance.\n@@ -34,20 +35,26 @@ public class NamedBeanHolder<T> implements NamedBean {\n \n \t/**\n \t * Create a new holder for the given bean name plus instance.\n+\t * @param beanName the name of the bean\n+\t * @param beanInstance the corresponding bean instance\n \t */\n \tpublic NamedBeanHolder(String beanName, T beanInstance) {\n+\t\tAssert.notNull(beanName, \"Bean name must not be null\");\n \t\tthis.beanName = beanName;\n \t\tthis.beanInstance = beanInstance;\n \t}\n \n \n+\t/**\n+\t * Return the name of the bean (never {@code null}).\n+\t */\n \t@Override\n \tpublic String getBeanName() {\n \t\treturn this.beanName;\n \t}\n \n \t/**\n-\t * Return the corresponding bean instance.\n+\t * Return the corresponding bean instance (can be {@code null}).\n \t */\n \tpublic T getBeanInstance() {\n \t\treturn this.beanInstance;",
    "output": "NamedBeanHolder enforces bean name Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java b/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java\n@@ -143,6 +143,18 @@ public void setPersistenceUnitName(String persistenceUnitName) {\n \t\tthis.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);\n \t}\n \n+\t/**\n+\t * Set the default persistence unit root location, to be applied\n+\t * if no unit-specific persistence unit root could be determined.\n+\t * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>\n+\t * <p>Default is \"classpath:\", that is, the root of the current classpath\n+\t * (nearest root directory). To be overridden if unit-specific resolution\n+\t * does not work and the classpath root is not appropriate either.\n+\t */\n+\tpublic void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {\n+\t\tthis.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation);\n+\t}\n+\n \t/**\n \t * Set whether to use Spring-based scanning for entity classes in the classpath\n \t * instead of using JPA's standard scanning of jar files with {@code persistence.xml}",
    "output": "Add setter for defaultPersistenceUnitRootLocation This commit adds a setter for the default persistence unit's defaultPersistenceUnitRootLocation attribute"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -49,16 +49,19 @@ public class ServletHttpHandlerAdapter extends HttpServlet {\n \n \tprivate static Log logger = LogFactory.getLog(ServletHttpHandlerAdapter.class);\n \n-\tprivate HttpHandler handler;\n+\tprivate final HttpHandler handler;\n \n \t// Servlet is based on blocking I/O, hence the usage of non-direct, heap-based buffers\n \t// (i.e. 'false' as constructor argument)\n \tprivate DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory(false);\n \n \tprivate int bufferSize = DEFAULT_BUFFER_SIZE;\n \n-\n-\tpublic void setHandler(HttpHandler handler) {\n+\t/**\n+\t * Create a new {@code ServletHttpHandlerAdapter} with the given HTTP handler.\n+\t * @param handler the handler\n+     */\n+\tpublic ServletHttpHandlerAdapter(HttpHandler handler) {\n \t\tAssert.notNull(handler, \"'handler' must not be null\");\n \t\tthis.handler = handler;\n \t}",
    "output": "Add HttpHandler contructor argument"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java\n@@ -82,11 +82,9 @@ protected Mono<Void> writeWithInternal(Publisher<DataBuffer> body) {\n \tprotected Mono<Void> writeAndFlushWithInternal(\n \t\t\tPublisher<Publisher<DataBuffer>> body) {\n \t\tFlux<ByteBuf> bodyWithFlushSignals = Flux.from(body).\n-\t\t\t\tflatMap(publisher -> {\n-\t\t\t\t\treturn Flux.from(publisher).\n-\t\t\t\t\t\t\tmap(NettyDataBufferFactory::toByteBuf).\n-\t\t\t\t\t\t\tconcatWith(Mono.just(FLUSH_SIGNAL));\n-\t\t\t\t});\n+\t\t\t\tflatMap(publisher -> Flux.from(publisher).\n+\t\t\t\t\t\tmap(NettyDataBufferFactory::toByteBuf).\n+\t\t\t\t\t\tconcatWith(Mono.just(FLUSH_SIGNAL)));\n \t\tObservable<ByteBuf> content = RxJava1Adapter.publisherToObservable(bodyWithFlushSignals);\n \t\tResponseContentWriter<ByteBuf> writer = this.response.write(content, bb -> bb == FLUSH_SIGNAL);\n \t\treturn RxJava1Adapter.observableToFlux(writer).then();",
    "output": "Use abbreviated expression lambda instead of statement lambda"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -17,9 +17,9 @@\n package org.springframework.transaction.interceptor;\n \n import java.lang.reflect.Method;\n-import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -86,7 +86,7 @@ public abstract class TransactionAspectSupport implements BeanFactoryAware, Init\n \t\t\tnew NamedThreadLocal<>(\"Current aspect-driven transaction\");\n \n \n-\tprivate final Map<Object, PlatformTransactionManager> transactionManagerCache =\n+\tprivate final ConcurrentMap<Object, PlatformTransactionManager> transactionManagerCache =\n \t\t\tnew ConcurrentHashMap<>();\n \n \t/**",
    "output": "Aligned ConcurrentMap declaration with 4.3.x branch"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n--- a/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n+++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n@@ -128,6 +128,21 @@ protected final Cache lookupCache(String name) {\n \t\treturn this.cacheMap.get(name);\n \t}\n \n+\t/**\n+\t * Dynamically register an additional Cache with this manager.\n+\t * @param cache the Cache to register\n+\t * @deprecated as of Spring 4.3, in favor of {@link #getMissingCache(String)}\n+\t */\n+\t@Deprecated\n+\tprotected final void addCache(Cache cache) {\n+\t\tString name = cache.getName();\n+\t\tsynchronized (this.cacheMap) {\n+\t\t\tif (this.cacheMap.put(name, decorateCache(cache)) == null) {\n+\t\t\t\tupdateCacheNames(name);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \t/**\n \t * Update the exposed {@link #cacheNames} set with the given name.\n \t * <p>This will always be called within a full {@link #cacheMap} lock",
    "output": "Keep deprecated addCache method (e.g. for Spring Data Redis) Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java\n@@ -153,6 +153,7 @@ protected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source sour\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")  // on JDK 9\n \tprotected Source processSource(Source source) {\n \t\tif (source instanceof StreamSource) {\n \t\t\tStreamSource streamSource = (StreamSource) source;\n\ndiff --git a/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java\n@@ -187,6 +187,7 @@ private DOMSource readDOMSource(InputStream body) throws IOException {\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")  // on JDK 9\n \tprivate SAXSource readSAXSource(InputStream body) throws IOException {\n \t\ttry {\n \t\t\tXMLReader xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader();",
    "output": "Reintroduced XMLReaderFactory deprecation markers on JDK 9 Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java\n@@ -19,7 +19,6 @@\n import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.security.Principal;\n import java.util.Arrays;",
    "output": "Delete unused imports in spring-test"
  },
  {
    "input": "diff --git a/spring-orm/src/test/java/org/springframework/orm/jpa/support/PersistenceInjectionTests.java b/spring-orm/src/test/java/org/springframework/orm/jpa/support/PersistenceInjectionTests.java\n--- a/spring-orm/src/test/java/org/springframework/orm/jpa/support/PersistenceInjectionTests.java\n+++ b/spring-orm/src/test/java/org/springframework/orm/jpa/support/PersistenceInjectionTests.java\n@@ -30,8 +30,6 @@\n import javax.persistence.PersistenceProperty;\n import javax.persistence.PersistenceUnit;\n \n-import org.hibernate.ejb.HibernateEntityManager;\n-\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -715,7 +713,8 @@ public static class DefaultPrivatePersistenceContextField {\n \tpublic static class DefaultVendorSpecificPrivatePersistenceContextField {\n \n \t\t@PersistenceContext\n-\t\tprivate HibernateEntityManager em;\n+\t\t@SuppressWarnings(\"deprecation\")\n+\t\tprivate org.hibernate.ejb.HibernateEntityManager em;\n \t}\n \n \n@@ -896,4 +895,5 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n \t\t\tthrow new IllegalStateException();\n \t\t}\n \t}\n+\n }",
    "output": "Suppress deprecation warning in PersistenceInjectionTests"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java\n@@ -153,7 +153,6 @@ protected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source sour\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")\n \tprotected Source processSource(Source source) {\n \t\tif (source instanceof StreamSource) {\n \t\t\tStreamSource streamSource = (StreamSource) source;\n\ndiff --git a/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java\n@@ -187,7 +187,6 @@ private DOMSource readDOMSource(InputStream body) throws IOException {\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")\n \tprivate SAXSource readSAXSource(InputStream body) throws IOException {\n \t\ttry {\n \t\t\tXMLReader xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader();",
    "output": "Clean up deprecation warnings in spring-web"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java\n@@ -87,7 +87,7 @@ public void sseAsString() throws Exception {\n \n \t\tTestSubscriber\n \t\t\t\t.subscribe(result)\n-\t\t\t\t.await()\n+\t\t\t\t.await(Duration.ofSeconds(5))\n \t\t\t\t.assertValues(\"data:foo 0\", \"data:foo 1\");\n \t}\n \n@@ -104,7 +104,7 @@ public void sseAsPerson() throws Exception {\n \n \t\tTestSubscriber\n \t\t\t\t.subscribe(result)\n-\t\t\t\t.await()\n+\t\t\t\t.await(Duration.ofSeconds(5))\n \t\t\t\t.assertValues(\"data:{\\\"name\\\":\\\"foo 0\\\"}data:{\\\"name\\\":\\\"foo 1\\\"}\");\n \t}\n \n@@ -120,7 +120,7 @@ public void sseAsEvent() throws Exception {\n \n \t\tTestSubscriber\n \t\t\t\t.subscribe(result)\n-\t\t\t\t.await()\n+\t\t\t\t.await(Duration.ofSeconds(5))\n \t\t\t\t.assertValues(\n \t\t\t\t\t\t\"id:0:bardata:foo\",\n \t\t\t\t\t\t\"id:1:bardata:foo\"",
    "output": "Add timeout settings in SseIntegrationTests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java\n@@ -81,7 +81,7 @@ public abstract class AbstractNestablePropertyAccessor extends AbstractPropertyA\n \n \tprivate String nestedPath = \"\";\n \n-\tprivate Object rootObject;\n+\tObject rootObject;\n \n \t/**\n \t * Map with cached nested Accessors: nested path -> Accessor instance.\n\ndiff --git a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -141,6 +141,7 @@ private BeanWrapperImpl(Object object, String nestedPath, BeanWrapperImpl parent\n \t */\n \tpublic void setBeanInstance(Object object) {\n \t\tthis.wrappedObject = object;\n+\t\tthis.rootObject = object;\n \t\tthis.typeConverterDelegate = new TypeConverterDelegate(this, this.wrappedObject);\n \t\tsetIntrospectionClass(object.getClass());\n \t}",
    "output": "BeanWrapperImpl.setBeanInstance correctly exposes root object Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java\n@@ -16,21 +16,21 @@\n \n package org.springframework.http.server.reactive;\n \n-import io.netty.buffer.ByteBuf;\n+import java.util.function.Function;\n+\n import reactor.core.publisher.Mono;\n-import reactor.io.ipc.ChannelHandler;\n import reactor.io.netty.http.HttpChannel;\n \n import org.springframework.core.io.buffer.NettyDataBufferFactory;\n import org.springframework.util.Assert;\n \n /**\n- * Adapt {@link HttpHandler} to the Reactor Netty {@link ChannelHandler}.\n+ * Adapt {@link HttpHandler} to the Reactor Netty channel handling function.\n  *\n  * @author Stephane Maldini\n  * @since 5.0\n  */\n-public class ReactorHttpHandlerAdapter implements ChannelHandler<ByteBuf, ByteBuf, HttpChannel> {\n+public class ReactorHttpHandlerAdapter implements Function<HttpChannel, Mono<Void>> {\n \n \tprivate final HttpHandler httpHandler;\n ",
    "output": "Upgrade to the latest Reactory Netty snapshot"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java\n@@ -105,7 +105,6 @@ public final class WebAsyncManager {\n \t */\n \tpublic void setAsyncWebRequest(final AsyncWebRequest asyncWebRequest) {\n \t\tAssert.notNull(asyncWebRequest, \"AsyncWebRequest must not be null\");\n-\t\tAssert.state(!isConcurrentHandlingStarted(), \"Can't set AsyncWebRequest with concurrent handling in progress\");\n \t\tthis.asyncWebRequest = asyncWebRequest;\n \t\tthis.asyncWebRequest.addCompletionHandler(new Runnable() {\n \t\t\t@Override",
    "output": "Remove isAsyncStarted assertion Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/JRubyScriptTemplateTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/JRubyScriptTemplateTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/JRubyScriptTemplateTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/JRubyScriptTemplateTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,10 +20,9 @@\n import java.util.Map;\n import javax.servlet.ServletContext;\n \n-import static org.junit.Assert.assertEquals;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import static org.mockito.Mockito.mock;\n \n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -33,11 +32,15 @@\n import org.springframework.mock.web.test.MockServletContext;\n import org.springframework.web.context.WebApplicationContext;\n \n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n /**\n  * Unit tests for ERB templates running on JRuby.\n  *\n  * @author Sebastien Deleuze\n  */\n+@Ignore(\"JRuby not compatible with JDK 9 yet\")\n public class JRubyScriptTemplateTests {\n \n \tprivate WebApplicationContext webAppContext;",
    "output": "Ignore JRuby template tests (not compatible with JDK 9 yet) Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java\n--- a/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java\n+++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java\n@@ -372,6 +372,8 @@ static class MethodInvokeTypeProvider implements TypeProvider {\n \n \t\tprivate final String methodName;\n \n+\t\tprivate final Class<?> declaringClass;\n+\n \t\tprivate final int index;\n \n \t\tprivate transient Method method;\n@@ -381,6 +383,7 @@ static class MethodInvokeTypeProvider implements TypeProvider {\n \t\tpublic MethodInvokeTypeProvider(TypeProvider provider, Method method, int index) {\n \t\t\tthis.provider = provider;\n \t\t\tthis.methodName = method.getName();\n+\t\t\tthis.declaringClass = method.getDeclaringClass();\n \t\t\tthis.index = index;\n \t\t\tthis.method = method;\n \t\t}\n@@ -404,7 +407,7 @@ public Object getSource() {\n \n \t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n \t\t\tinputStream.defaultReadObject();\n-\t\t\tthis.method = ReflectionUtils.findMethod(this.provider.getType().getClass(), this.methodName);\n+\t\t\tthis.method = ReflectionUtils.findMethod(this.declaringClass, this.methodName);\n \t\t\tAssert.state(Type.class == this.method.getReturnType() || Type[].class == this.method.getReturnType());\n \t\t}\n \t}",
    "output": "SerializableTypeWrapper reobtains type accessors from declaring interface Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java\n@@ -43,6 +43,7 @@\n import org.hibernate.cfg.AvailableSettings;\n import org.hibernate.cfg.Configuration;\n import org.hibernate.cfg.Environment;\n+import org.hibernate.context.spi.CurrentTenantIdentifierResolver;\n import org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider;\n import org.hibernate.engine.spi.SessionFactoryImplementor;\n \n@@ -206,6 +207,17 @@ public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantCo\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory.\n+\t * @since 4.3.2\n+\t * @see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER\n+\t */\n+\t@Override\n+\tpublic void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {\n+\t\tgetProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver);\n+\t\tsuper.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver);\n+\t}\n+\n \t/**\n \t * Specify custom type filters for Spring-based scanning for entity classes.\n \t * <p>Default is to search all specified packages for classes annotated with",
    "output": "Reliably pass CurrentTenantIdentifierResolver to SessionFactory Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n--- a/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java\n@@ -38,7 +38,7 @@ public class ReactorClientHttpConnector implements ClientHttpConnector {\n \tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n \t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n \n-\t\treturn reactor.io.netty.http.HttpClient.create(uri.getHost(), uri.getPort())\n+\t\treturn reactor.io.netty.http.HttpClient.create(uri.toString())\n \t\t\t\t.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name()),\n \t\t\t\t\t\turi.toString(),\n \t\t\t\t\t\thttpClientRequest -> requestCallback",
    "output": "Fix default origin port in ReactorClientHttpConnector This commit ensures that a valid port is given to the underlying Netty client when no port is defined in the URL itself. By default, port 80 is used by the Reactor Netty client. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -857,7 +857,7 @@ public Collection<SourceClass> getAnnotationAttributes(String annotationType, St\n \t\tprivate SourceClass getRelated(String className) throws IOException {\n \t\t\tif (this.source instanceof Class<?>) {\n \t\t\t\ttry {\n-\t\t\t\t\tClass<?> clazz = resourceLoader.getClassLoader().loadClass(className);\n+\t\t\t\t\tClass<?> clazz = ((Class<?>) this.source).getClassLoader().loadClass(className);\n \t\t\t\t\treturn asSourceClass(clazz);\n \t\t\t\t}\n \t\t\t\tcatch (ClassNotFoundException ex) {",
    "output": "ConfigurationClassParser load annotations through source class loader Issue: (cherry picked from commit 9e93403)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/MethodParameter.java b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -668,7 +668,7 @@ protected static int findParameterIndex(Parameter parameter) {\n \n \tprivate static int validateIndex(Executable executable, int parameterIndex) {\n \t\tint count = executable.getParameterCount();\n-\t\tAssert.isTrue(parameterIndex < count, () -> \"Parameter index needs to be between 0 and \" + (count - 1));\n+\t\tAssert.isTrue(parameterIndex < count, () -> \"Parameter index needs to be between -1 and \" + (count - 1));\n \t\treturn parameterIndex;\n \t}\n ",
    "output": "Correct parameter index boundary in exception message Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,7 +36,7 @@\n  */\n public class StandardTypeConverter implements TypeConverter {\n \n-\tprivate static ConversionService defaultConversionService;\n+\tprivate static volatile ConversionService defaultConversionService;\n \n \tprivate final ConversionService conversionService;\n \n@@ -45,10 +45,8 @@ public class StandardTypeConverter implements TypeConverter {\n \t * Create a StandardTypeConverter for the default ConversionService.\n \t */\n \tpublic StandardTypeConverter() {\n-\t\tsynchronized (this) {\n-\t\t\tif (defaultConversionService == null) {\n-\t\t\t\tdefaultConversionService = new DefaultConversionService();\n-\t\t\t}\n+\t\tif (defaultConversionService == null) {\n+\t\t\tdefaultConversionService = new DefaultConversionService();\n \t\t}\n \t\tthis.conversionService = defaultConversionService;\n \t}",
    "output": "StandardTypeConverter initializes default ConversionService against volatile field Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java\n@@ -197,13 +197,9 @@ protected void flush() throws IOException {\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"flush\");\n \t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tthis.outputStream.flush();\n-\t\t\t\t\tthis.flushOnNext = false;\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcatch (IOException ignored) {\n-\t\t\t\t}\n+\t\t\t\tthis.outputStream.flush();\n+\t\t\t\tthis.flushOnNext = false;\n+\t\t\t\treturn;\n \t\t\t}\n \t\t\tthis.flushOnNext = true;\n \n@@ -234,10 +230,7 @@ public void onWritePossible() throws IOException {\n \n \t\t\t@Override\n \t\t\tpublic void onError(Throwable ex) {\n-\t\t\t\t// Error on writing to the HTTP stream, so any further writes will probably\n-\t\t\t\t// fail. Let's log instead of calling {@link #writeError}.\n-\t\t\t\tResponseBodyProcessor.this.logger\n-\t\t\t\t\t\t.error(\"ResponseBodyWriteListener error\", ex);\n+\t\t\t\tResponseBodyProcessor.this.onError(ex);\n \t\t\t}\n \t\t}\n \t}",
    "output": "Propagate IOExceptions in Servlet bridge"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n--- a/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java\n@@ -30,6 +30,7 @@\n import com.fasterxml.aalto.AsyncXMLInputFactory;\n import com.fasterxml.aalto.AsyncXMLStreamReader;\n import com.fasterxml.aalto.evt.EventAllocatorImpl;\n+import com.fasterxml.aalto.stax.InputFactoryImpl;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n@@ -116,8 +117,7 @@ public Flux<XMLEvent> decode(Publisher<DataBuffer> inputStream, ResolvableType e\n \tprivate static class AaltoDataBufferToXmlEvent\n \t\t\timplements Function<DataBuffer, Publisher<? extends XMLEvent>> {\n \n-\t\tprivate static final AsyncXMLInputFactory inputFactory =\n-\t\t\t\t(AsyncXMLInputFactory) XmlEventDecoder.inputFactory;\n+\t\tprivate static final AsyncXMLInputFactory inputFactory = new InputFactoryImpl();\n \n \t\tprivate final AsyncXMLStreamReader<AsyncByteBufferFeeder> streamReader =\n \t\t\t\tinputFactory.createAsyncForByteBuffer();",
    "output": "Fix Jaxb2CollectionHttpMessageConverterTests - Added Woodstox before Aalto in the spring-web build, so that Woodstox is used as StAX implementation, and not the less featured Aalto. - Hardcoded Aalto dependency in XmlEventDecoder, instead of relying on the StAX XMLInputFactory"
  },
  {
    "input": "diff --git a/spring-tx/src/test/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessorTests.java b/spring-tx/src/test/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessorTests.java\n--- a/spring-tx/src/test/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessorTests.java\n+++ b/spring-tx/src/test/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -22,6 +22,7 @@\n import org.aspectj.lang.annotation.Aspect;\n import org.aspectj.lang.annotation.Before;\n import org.junit.Test;\n+\n import org.springframework.aop.Advisor;\n import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;\n import org.springframework.aop.framework.Advised;\n@@ -138,7 +139,7 @@ public DataAccessException translateExceptionIfPossible(RuntimeException ex) {\n \t@Aspect\n \tpublic static class LogAllAspect {\n \n-\t\t@Before(\"execution(void *.additionalMethod())\")\n+\t\t@Before(\"execution(void *.additionalMethod(*))\")\n \t\tpublic void log(JoinPoint jp) {\n \t\t\tSystem.out.println(\"Before \" + jp.getSignature().getName());\n \t\t}",
    "output": "Aspect actually applies in PersistenceExceptionTranslationPostProcessorTests Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n@@ -17,8 +17,6 @@\n package org.springframework.test.web.servlet.samples.standalone;\n \n import java.io.StringWriter;\n-import java.nio.charset.Charset;\n-import java.nio.charset.StandardCharsets;\n import java.util.Collection;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n@@ -200,14 +198,11 @@ public void printAsyncResult() throws Exception {\n \n \t@RestController\n \t@RequestMapping(path = \"/{id}\", produces = \"application/json\")\n-\t@SuppressWarnings(\"unused\")\n \tprivate static class AsyncController {\n \n-\t\tprivate final Collection<DeferredResult<Person>> deferredResults =\n-\t\t\t\tnew CopyOnWriteArrayList<>();\n+\t\tprivate final Collection<DeferredResult<Person>> deferredResults = new CopyOnWriteArrayList<>();\n \n-\t\tprivate final Collection<ListenableFutureTask<Person>> futureTasks =\n-\t\t\t\tnew CopyOnWriteArrayList<>();\n+\t\tprivate final Collection<ListenableFutureTask<Person>> futureTasks = new CopyOnWriteArrayList<>();\n \n \n \t\t@RequestMapping(params = \"callable\")",
    "output": "Clean up warnings in AsyncTests"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n@@ -231,7 +231,13 @@ protected void detectHandlerMethods(final Object handler) {\n \t\t\t\tnew MethodIntrospector.MetadataLookup<T>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic T inspect(Method method) {\n-\t\t\t\t\t\treturn getMappingForMethod(method, userType);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\treturn getMappingForMethod(method, userType);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Throwable ex) {\n+\t\t\t\t\t\t\tthrow new IllegalStateException(\"Invalid mapping on handler class [\" +\n+\t\t\t\t\t\t\t\t\thandlerType.getName() + \"]: \" + method, ex);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t});\n ",
    "output": "AbstractHandlerMethodMapping adds type+method info to getMappingForMethod exceptions Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n@@ -16,9 +16,6 @@\n \n package org.springframework.core.env;\n \n-import org.springframework.core.convert.ConversionException;\n-import org.springframework.util.ClassUtils;\n-\n /**\n  * {@link PropertyResolver} implementation that resolves property values against\n  * an underlying set of {@link PropertySources}.\n\ndiff --git a/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java\n@@ -91,7 +91,6 @@ private void notifyFailure(FailureCallback callback) {\n \t * @param callback the success callback to add\n \t * @since 4.1\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n \tpublic void addSuccessCallback(SuccessCallback<? super T> callback) {\n \t\tAssert.notNull(callback, \"'callback' must not be null\");\n \t\tsynchronized (this.mutex) {",
    "output": "Clean up warnings in spring-core"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -65,7 +65,6 @@ private class AsyncHandler implements HttpHandler {\n \t\t@Override\n \t\tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\t\treturn response.writeWith(Flux.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n-\t\t\t                            .useTimer(Schedulers.timer())\n \t\t\t                            .delay(Duration.ofMillis(100))\n \t\t\t                            .publishOn(asyncGroup)\n \t\t\t\t\t.collect(dataBufferFactory::allocateBuffer, (buffer, str) -> buffer.write(str.getBytes())));",
    "output": "Polish timed operators and remove useTimer"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n@@ -366,9 +366,9 @@ public void afterTestClass() throws Exception {\n \t\t\t\tif (logger.isWarnEnabled()) {\n \t\t\t\t\tlogger.warn(\"Caught exception while allowing TestExecutionListener [\" + testExecutionListener +\n \t\t\t\t\t\t\t\"] to process 'after class' callback for test class [\" + testClass + \"]\", ex);\n-\t\t\t\t\tif (afterTestClassException == null) {\n-\t\t\t\t\t\tafterTestClassException = ex;\n-\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (afterTestClassException == null) {\n+\t\t\t\t\tafterTestClassException = ex;\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Ensure TestContextManager always tracks after-class exception This commit fixes a minor bug introduced in 0adc4921ed. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n@@ -31,7 +31,6 @@\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n-import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.test.annotation.Commit;\n import org.springframework.test.annotation.Rollback;\n import org.springframework.test.context.TestContext;",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/ContextCustomizer.java b/spring-test/src/main/java/org/springframework/test/context/ContextCustomizer.java\n--- a/spring-test/src/main/java/org/springframework/test/context/ContextCustomizer.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/ContextCustomizer.java\n@@ -35,6 +35,7 @@\n  * @see ContextCustomizerFactory\n  * @see org.springframework.test.context.support.AbstractContextLoader#customizeContext\n  */\n+@FunctionalInterface\n public interface ContextCustomizer {\n \n \t/**\n\ndiff --git a/spring-test/src/main/java/org/springframework/test/context/ContextCustomizerFactory.java b/spring-test/src/main/java/org/springframework/test/context/ContextCustomizerFactory.java\n--- a/spring-test/src/main/java/org/springframework/test/context/ContextCustomizerFactory.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/ContextCustomizerFactory.java\n@@ -34,6 +34,7 @@\n  * @author Sam Brannen\n  * @since 4.3\n  */\n+@FunctionalInterface\n public interface ContextCustomizerFactory {\n \n \t/**",
    "output": "Annotate ContextCustomizer[Factory] with @FunctionalInterface Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n@@ -50,7 +50,7 @@\n  * <p>Note: If the named Cache instance is found, the properties will be ignored and the\n  * Cache instance will be retrieved from the CacheManager.\n  *\n- * <p>Note: As of Spring 4.1, Spring's EhCache support requires EhCache 2.5 or higher.\n+ * <p>Note: As of Spring 5.0, Spring's EhCache support requires EhCache 2.10 or higher.\n  *\n  * @author Juergen Hoeller\n  * @author Dmitriy Kopylenko\n@@ -84,10 +84,9 @@ public class EhCacheFactoryBean extends CacheConfiguration implements FactoryBea\n \tprivate Ehcache cache;\n \n \n-\t@SuppressWarnings(\"deprecation\")\n \tpublic EhCacheFactoryBean() {\n \t\tsetMaxEntriesLocalHeap(10000);\n-\t\tsetMaxElementsOnDisk(10000000);\n+\t\tsetMaxEntriesLocalDisk(10000000);\n \t\tsetTimeToLiveSeconds(120);\n \t\tsetTimeToIdleSeconds(120);\n \t}",
    "output": "Require EhCache 2.10+ Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit/SpringJUnitJupiterTestSuite.java\n@@ -19,6 +19,7 @@\n import org.junit.platform.runner.IncludeEngines;\n import org.junit.platform.runner.JUnitPlatform;\n import org.junit.platform.runner.SelectPackages;\n+import org.junit.platform.runner.UseTechnicalNames;\n import org.junit.runner.RunWith;\n \n /**\n@@ -36,5 +37,6 @@\n @RunWith(JUnitPlatform.class)\n @IncludeEngines(\"junit-jupiter\")\n @SelectPackages(\"org.springframework.test.context.junit.jupiter\")\n+@UseTechnicalNames\n public class SpringJUnitJupiterTestSuite {\n }",
    "output": "Upgrade to JUnit 5.0.0-M1 Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java\n@@ -81,13 +81,16 @@ public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory buffe\n \t\t\treturn Flux.from(inputStream).map(value -> encodeValue(value, bufferFactory, elementType));\n \t\t}\n \n+\t\tMono<DataBuffer> startArray = Mono.just(bufferFactory.wrap(START_ARRAY_BUFFER));\n+\t\tMono<DataBuffer> endArray = Mono.just(bufferFactory.wrap(END_ARRAY_BUFFER));\n+\n \t\tFlux<DataBuffer> array = Flux.from(inputStream)\n-\t\t\t\t.flatMap(value ->\n-\t\t\t\t\t\tFlux.just(encodeValue(value, bufferFactory, elementType),\n-\t\t\t\t\t\t\t\tbufferFactory.wrap(SEPARATOR_BUFFER)));\n+\t\t\t\t.flatMap(value -> {\n+\t\t\t\t\tDataBuffer arraySeparator = bufferFactory.wrap(SEPARATOR_BUFFER);\n+\t\t\t\t\treturn Flux.just(encodeValue(value, bufferFactory, elementType), arraySeparator);\n+\t\t\t\t});\n \n-\t\treturn Flux.concat(Mono.just(bufferFactory.wrap(START_ARRAY_BUFFER)), array.skipLast(1),\n-\t\t\t\tMono.just(bufferFactory.wrap(END_ARRAY_BUFFER)));\n+\t\treturn Flux.concat(startArray, array.skipLast(1), endArray);\n \t}\n \n \tprivate DataBuffer encodeValue(Object value, DataBufferFactory bufferFactory, ResolvableType type) {",
    "output": "Restore local vars in JacksonJsonEncoder"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n@@ -449,10 +449,10 @@ protected boolean isDependent(String beanName, String dependentBeanName) {\n \t}\n \n \tprivate boolean isDependent(String beanName, String dependentBeanName, Set<String> alreadySeen) {\n-\t\tString canonicalName = canonicalName(beanName);\n \t\tif (alreadySeen != null && alreadySeen.contains(beanName)) {\n \t\t\treturn false;\n \t\t}\n+\t\tString canonicalName = canonicalName(beanName);\n \t\tSet<String> dependentBeans = this.dependentBeanMap.get(canonicalName);\n \t\tif (dependentBeans == null) {\n \t\t\treturn false;",
    "output": "Avoid canonicalName call for already-seen bean name Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java\n@@ -17,6 +17,7 @@\n package org.springframework.web.reactive;\n \n import java.net.URI;\n+import java.time.Duration;\n import java.util.Collections;\n \n import org.junit.Before;\n@@ -171,12 +172,9 @@ public void webExceptionHandler() throws Exception {\n \n \t\tWebExceptionHandler exceptionHandler = new ServerError500ExceptionHandler();\n \t\tWebHandler webHandler = new ExceptionHandlingWebHandler(this.dispatcherHandler, exceptionHandler);\n-\t\tMono<Void> publisher = webHandler.handle(this.exchange);\n-\n-\t\tTestSubscriber.subscribe(publisher)\n-\t\t\t\t.assertErrorWith(ex -> assertEquals(\n-\t\t\t\t\t\tHttpStatus.INTERNAL_SERVER_ERROR, this.exchange.getResponse().getStatusCode()));\n+\t\twebHandler.handle(this.exchange).block(Duration.ofSeconds(5));\n \n+\t\tassertEquals(HttpStatus.INTERNAL_SERVER_ERROR, this.exchange.getResponse().getStatusCode());\n \t}\n \n ",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java\n@@ -129,7 +129,8 @@ private void merge(Map<String, Object> output, Map<String, Object> map) {\n \t\t\tObject value = entry.getValue();\n \t\t\tObject existing = output.get(key);\n \t\t\tif (value instanceof Map && existing instanceof Map) {\n-\t\t\t\tMap<String, Object> result = new LinkedHashMap<>((Map) existing);\n+\t\t\t\t// Inner cast required by Eclipse IDE.\n+\t\t\t\tMap<String, Object> result = new LinkedHashMap<>((Map<String, Object>) existing);\n \t\t\t\tmerge(result, (Map) value);\n \t\t\t\toutput.put(key, result);\n \t\t\t}",
    "output": "Ensure code compiles with Eclipse JDT"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/web/AnnotationConfigWebContextLoaderTests.java b/spring-test/src/test/java/org/springframework/test/context/web/AnnotationConfigWebContextLoaderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/web/AnnotationConfigWebContextLoaderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/web/AnnotationConfigWebContextLoaderTests.java\n@@ -38,7 +38,6 @@ public class AnnotationConfigWebContextLoaderTests {\n \n \n \t@Test\n-\t@SuppressWarnings(\"deprecation\")\n \tpublic void configMustNotContainLocations() throws Exception {\n \t\texpectedException.expect(IllegalStateException.class);\n \t\texpectedException.expectMessage(containsString(\"does not support resource locations\"));",
    "output": "Clean up warnings in spring-test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/support/MethodParameterFactory.java b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/support/MethodParameterFactory.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/support/MethodParameterFactory.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/support/MethodParameterFactory.java\n@@ -37,7 +37,7 @@\n  * @see #createMethodParameter(Parameter)\n  * @see #createSynthesizingMethodParameter(Parameter)\n  */\n-public abstract class MethodParameterFactory {\n+abstract class MethodParameterFactory {\n \n \tprivate MethodParameterFactory() {\n \t\t/* no-op */\n@@ -51,7 +51,7 @@ private MethodParameterFactory() {\n \t * @return a new {@code MethodParameter}\n \t * @see #createSynthesizingMethodParameter(Parameter)\n \t */\n-\tpublic static MethodParameter createMethodParameter(Parameter parameter) {\n+\tstatic MethodParameter createMethodParameter(Parameter parameter) {\n \t\tAssert.notNull(parameter, \"Parameter must not be null\");\n \t\tExecutable executable = parameter.getDeclaringExecutable();\n \t\tif (executable instanceof Method) {\n@@ -71,7 +71,7 @@ public static MethodParameter createMethodParameter(Parameter parameter) {\n \t * in a constructor\n \t * @see #createMethodParameter(Parameter)\n \t */\n-\tpublic static SynthesizingMethodParameter createSynthesizingMethodParameter(Parameter parameter) {\n+\tstatic SynthesizingMethodParameter createSynthesizingMethodParameter(Parameter parameter) {\n \t\tAssert.notNull(parameter, \"Parameter must not be null\");\n \t\tExecutable executable = parameter.getDeclaringExecutable();\n \t\tif (executable instanceof Method) {",
    "output": "Restrict visibility of internal MethodParameterFactory Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/repository/hibernate/HibernatePersonRepository.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,6 +49,7 @@ public Person save(Person person) {\n \t@Override\n \tpublic Person findByName(String name) {\n \t\treturn (Person) this.sessionFactory.getCurrentSession().createQuery(\n-\t\t\t\"from Person person where person.name = :name\").setString(\"name\", name).uniqueResult();\n+\t\t\t\"from Person person where person.name = :name\").setParameter(\"name\", name).getSingleResult();\n \t}\n+\n }",
    "output": "Upgrade test to Hibernate 5.2"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n@@ -25,7 +25,6 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n@@ -150,7 +149,6 @@ public void handleWithErrorSignal() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void streamResult() throws Exception {\n \t\tURI url = new URI(\"http://localhost:\" + port + \"/stream-result\");\n \t\tRequestEntity<Void> request = RequestEntity.get(url).build();",
    "output": "Remove @Ignore on streamResulttest This test was fixed by previous commit that allows to JSON encode correctly streams with more than 2 elements"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java\n@@ -238,6 +238,7 @@ public void buildRequestCookiesMulti() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void buildRequestInputStream() throws Exception {\n \t\tString content = \"some content that has length\";\n \t\twebRequest.setHttpMethod(HttpMethod.POST);",
    "output": "Suppress deprecation warning in spring-test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java\n@@ -18,7 +18,6 @@\n \n import java.net.URI;\n import java.nio.ByteBuffer;\n-import java.time.Duration;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -434,13 +433,7 @@ public Publisher<ByteBuffer> rawResponseBody() {\n \n \t\t@RequestMapping(\"/stream-result\")\n \t\tpublic Publisher<Long> stringStreamResponseBody() {\n-\t\t\t/*\n-\t\t\tTODO: replace the following line with:\n-\t\t    return Flux.interval(Duration.ofMillis(100)).take(5);\n-\t\t    to make the build last shorter. Unfortunately, this hangs the build as of\n-\t\t    20160317.\n-\t\t\t*/\n-\t\t\treturn Flux.interval(Duration.ofSeconds(1)).take(5);\n+\t\t\treturn Flux.interval(100).take(5);\n \t\t}\n \n \t\t@RequestMapping(\"/raw-flux\")",
    "output": "Speed up RequestMappingIntegrationTests Reactor Core + Spring Reactive now handle correctly shorter interval for the stream result test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java\n--- a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectDecoder.java\n@@ -45,7 +45,7 @@\n  *\n  * @author Sebastien Deleuze\n  */\n-public class JsonObjectDecoder extends AbstractDecoder<DataBuffer> {\n+class JsonObjectDecoder extends AbstractDecoder<DataBuffer> {\n \n \tprivate static final int ST_CORRUPTED = -1;\n ",
    "output": "Make JsonObjectDecoder package private"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java\n@@ -251,6 +251,11 @@ void request(AbstractRequestBodyPublisher publisher, long n) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tvoid onDataAvailable(AbstractRequestBodyPublisher publisher) {\n+\t\t\t\t// ignore\n+\t\t\t}\n \t\t},\n \t\t/**\n \t\t * The terminal completed state. Does not respond to any events.",
    "output": "AbstractRequestBodyPublisher.onDataAvailable improvement When in state DATA_AVAILABLE if there are simultaneous invocations of AbstractRequestBodyPublisher.RequestBodySubscription.request and ReadListener.onDataAvailable, the first one will process the available data, the second one should not throw an exception because thus it will signal to web container that there are problems while there are not"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodySubscriber.java\n@@ -18,6 +18,7 @@\n \n import java.io.IOException;\n import java.nio.channels.Channel;\n+import java.util.Objects;\n import java.util.concurrent.atomic.AtomicReference;\n import javax.servlet.WriteListener;\n \n@@ -169,11 +170,13 @@ private enum State {\n \t\t\t@Override\n \t\t\tvoid onSubscribe(AbstractResponseBodySubscriber subscriber,\n \t\t\t\t\tSubscription subscription) {\n-\t\t\t\tif (BackpressureUtils.validate(subscriber.subscription, subscription)) {\n+\t\t\t\tObjects.requireNonNull(subscription, \"Subscription cannot be null\");\n+\t\t\t\tif (subscriber.changeState(this, REQUESTED)) {\n \t\t\t\t\tsubscriber.subscription = subscription;\n-\t\t\t\t\tif (subscriber.changeState(this, REQUESTED)) {\n-\t\t\t\t\t\tsubscription.request(1);\n-\t\t\t\t\t}\n+\t\t\t\t\tsubscription.request(1);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tsuper.onSubscribe(subscriber, subscription);\n \t\t\t\t}\n \t\t\t}\n \t\t},",
    "output": "Make AbstractResponseBodySubscriber.onSubscribe thread-safe When there are simultaneous invocations of onSubscribe, only the first one should succeed, the rest should cancel the provided subscriptions"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -487,7 +487,7 @@ protected boolean isInvalidPath(String path) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n-\t\tif (path.contains(\"../\")) {\n+\t\tif (path.contains(\"..\")) {\n \t\t\tpath = StringUtils.cleanPath(path);\n \t\t\tif (path.contains(\"../\")) {\n \t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "Improve static resource path check"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/converter/reactive/CodecHttpMessageConverter.java b/spring-web-reactive/src/main/java/org/springframework/http/converter/reactive/CodecHttpMessageConverter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/converter/reactive/CodecHttpMessageConverter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/converter/reactive/CodecHttpMessageConverter.java\n@@ -144,6 +144,12 @@ else if (MediaType.APPLICATION_OCTET_STREAM.equals(contentType)) {\n \t\t\t\tcontentTypeToUse = (mediaType != null ? mediaType : contentTypeToUse);\n \t\t\t}\n \t\t\tif (contentTypeToUse != null) {\n+\t\t\t\tif (contentTypeToUse.getCharset() == null) {\n+\t\t\t\t\tMediaType mediaType = getDefaultContentType(type);\n+\t\t\t\t\tif (mediaType != null && mediaType.getCharset() != null) {\n+\t\t\t\t\t\tcontentTypeToUse = new MediaType(contentTypeToUse, mediaType.getCharset());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\theaders.setContentType(contentTypeToUse);\n \t\t\t}\n \t\t}",
    "output": "CodecHttpMessageConverter supports a default charset"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java\n@@ -247,8 +247,11 @@ private static class ResponseBodySubscriber implements Subscriber<DataBuffer> {\n \n \t\tprivate volatile boolean completed = false;\n \n+\t\tprivate volatile boolean flushOnNext = false;\n+\n \t\tprivate Subscription subscription;\n \n+\n \t\tpublic ResponseBodySubscriber(ServletAsyncContextSynchronizer synchronizer,\n \t\t\t\tint bufferSize) {\n \t\t\tthis.synchronizer = synchronizer;\n@@ -321,6 +324,12 @@ public void onWritePossible() throws IOException {\n \t\t\t\tServletOutputStream output = synchronizer.getResponse().getOutputStream();\n \n \t\t\t\tboolean ready = output.isReady();\n+\n+\t\t\t\tif (flushOnNext) {\n+\t\t\t\t\tflush(output);\n+\t\t\t\t\tready = output.isReady();\n+\t\t\t\t}\n+\n \t\t\t\tlogger.trace(\"ready: \" + ready + \" buffer: \" + dataBuffer);\n \n \t\t\t\tif (ready) {\n@@ -370,9 +379,12 @@ private void flush(ServletOutputStream output) {\n \t\t\t\t\tlogger.trace(\"Flushing\");\n \t\t\t\t\ttry {\n \t\t\t\t\t\toutput.flush();\n+\t\t\t\t\t\tflushOnNext = false;\n \t\t\t\t\t}\n \t\t\t\t\tcatch (IOException ignored) {\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tflushOnNext = true;\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Fix Servlet flush Servlet flush will now occur on the next possible write if it cannot be done immediately"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n@@ -362,15 +362,25 @@ public void resetSessionState() {\n \t\t\t}\n \t\t\tif (this.preparedCon != null && this.session.isConnected()) {\n \t\t\t\tConnection conToReset = HibernateConnectionHandle.doGetConnection(this.session);\n-\t\t\t\tif (conToReset != this.preparedCon) {\n+\t\t\t\tif (!isEquivalentConnection(conToReset)) {\n \t\t\t\t\tLogFactory.getLog(HibernateJpaDialect.class).warn(\n-\t\t\t\t\t\t\t\"JDBC Connection to reset not identical to originally prepared Connection - please \" +\n+\t\t\t\t\t\t\t\"JDBC Connection to reset not equivalent to originally prepared Connection - please \" +\n \t\t\t\t\t\t\t\"make sure to use connection release mode ON_CLOSE (the default) and to run against \" +\n \t\t\t\t\t\t\t\"Hibernate 4.2+ (or switch HibernateJpaDialect's prepareConnection flag to false\");\n \t\t\t\t}\n \t\t\t\tDataSourceUtils.resetConnectionAfterTransaction(conToReset, this.previousIsolationLevel);\n \t\t\t}\n \t\t}\n+\n+\t\tprivate boolean isEquivalentConnection(Connection con) {\n+\t\t\ttry {\n+\t\t\t\treturn (con.equals(this.preparedCon) ||\n+\t\t\t\t\t\tcon.unwrap(Connection.class).equals(this.preparedCon.unwrap(Connection.class)));\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n \t}\n \n ",
    "output": "HibernateJpaDialect accepts equivalent connection for proper reset as well Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/web/socket/MockServerContainerContextCustomizer.java b/spring-test/src/main/java/org/springframework/test/context/web/socket/MockServerContainerContextCustomizer.java\n--- a/spring-test/src/main/java/org/springframework/test/context/web/socket/MockServerContainerContextCustomizer.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/web/socket/MockServerContainerContextCustomizer.java\n@@ -39,4 +39,20 @@ public void customizeContext(ConfigurableApplicationContext context, MergedConte\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic boolean equals(Object that) {\n+\t\tif (this == that) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (that == null || this.getClass() != that.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn getClass().hashCode();\n+\t}\n+\n }",
    "output": "Implement equals& hashCodein MockServerContainerContextCustomizer Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringEncoder.java b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringEncoder.java\n--- a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringEncoder.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringEncoder.java\n@@ -53,8 +53,8 @@ public Flux<DataBuffer> encode(Publisher<? extends String> inputStream,\n \t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, MimeType mimeType,\n \t\t\tObject... hints) {\n \t\tCharset charset;\n-\t\tif (mimeType != null && mimeType.getCharSet() != null) {\n-\t\t\tcharset = mimeType.getCharSet();\n+\t\tif (mimeType != null && mimeType.getCharset() != null) {\n+\t\t\tcharset = mimeType.getCharset();\n \t\t}\n \t\telse {\n \t\t\t charset = DEFAULT_CHARSET;",
    "output": "Avoid using deprecated methods in StringEncoder"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java\n@@ -32,7 +32,7 @@\n import org.springframework.mock.env.MockPropertySource;\n import org.springframework.test.context.TestPropertySource;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.CoreMatchers.startsWith;\n import static org.junit.Assert.*;\n import static org.mockito.Matchers.*;",
    "output": "Fix ambiguous static import in TestPropertySourceUtilsTests"
  },
  {
    "input": "diff --git a/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/SpringSessionSynchronization.java b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/SpringSessionSynchronization.java\n--- a/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/SpringSessionSynchronization.java\n+++ b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/SpringSessionSynchronization.java\n@@ -98,7 +98,7 @@ public void beforeCommit(boolean readOnly) throws DataAccessException {\n \t\t\tSession session = getCurrentSession();\n \t\t\t// Read-write transaction -> flush the Hibernate Session.\n \t\t\t// Further check: only flush when not FlushMode.MANUAL.\n-\t\t\tif (!session.getFlushMode().equals(FlushMode.MANUAL)) {\n+\t\t\tif (!FlushMode.MANUAL.equals(SessionFactoryUtils.getFlushMode(session))) {\n \t\t\t\ttry {\n \t\t\t\t\tSessionFactoryUtils.logger.debug(\"Flushing Hibernate Session on transaction synchronization\");\n \t\t\t\t\tsession.flush();",
    "output": "SpringSessionSynchronization uses SessionFactoryUtils.getFlushMode for Hibernate 5.1/5.2 adaptation Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java b/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/MultipartResolutionDelegate.java\n@@ -85,9 +85,10 @@ private static MultipartHttpServletRequest adaptToMultipartHttpServletRequest(Ht\n \n \tpublic static boolean isMultipartArgument(MethodParameter parameter) {\n \t\tClass<?> paramType = parameter.getNestedParameterType();\n-\t\treturn (MultipartFile.class == paramType || isMultipartFileCollection(parameter) ||\n-\t\t\t\tisMultipartFileArray(parameter) || servletPartClass == paramType ||\n-\t\t\t\tisPartCollection(parameter) || isPartArray(parameter));\n+\t\treturn (MultipartFile.class == paramType ||\n+\t\t\t\tisMultipartFileCollection(parameter) || isMultipartFileArray(parameter) ||\n+\t\t\t\t(servletPartClass != null && (servletPartClass == paramType ||\n+\t\t\t\t\t\tisPartCollection(parameter) || isPartArray(parameter))));\n \t}\n \n \tpublic static Object resolveMultipartArgument(String name, MethodParameter parameter, HttpServletRequest request)",
    "output": "MultipartResolutionDelegate skips Part parameter checks on Servlet 2.5 Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -53,7 +53,7 @@ public class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConv\n \tpublic AllEncompassingFormHttpMessageConverter() {\n \t\taddPartConverter(new SourceHttpMessageConverter<Source>());\n \n-\t\tif (jaxb2Present && !jackson2Present) {\n+\t\tif (jaxb2Present && !jackson2XmlPresent) {\n \t\t\taddPartConverter(new Jaxb2RootElementHttpMessageConverter());\n \t\t}\n ",
    "output": "Allow JAXB to be registered next to plain Jackson Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java\n@@ -91,6 +91,10 @@ public void setApplicationContext(ApplicationContext applicationContext) {\n \t\tthis.applicationContext = applicationContext;\n \t}\n \n+\tprotected ApplicationContext getApplicationContext() {\n+\t\treturn this.applicationContext;\n+\t}\n+\n \n \t@Bean\n \tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {",
    "output": "Add protected method to reactive config"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java\n@@ -93,9 +93,7 @@ protected MultiValueMap<String, HttpCookie> initCookies() {\n \n \t@Override\n \tpublic Flux<DataBuffer> getBody() {\n-\t\tObservable<DataBuffer> content =\n-\t\t\t\tthis.request.getContent().map(dataBufferFactory::wrap);\n-\t\tcontent = content.concatWith(Observable.empty()); // See GH issue #58\n+\t\tObservable<DataBuffer> content = this.request.getContent().map(dataBufferFactory::wrap);\n \t\treturn RxJava1ObservableConverter.from(content);\n \t}\n ",
    "output": "Upgrade to RxJava 1.1.5 After the fix for ReactiveX/RxNettywe can remove the workaround to concatenate with an empty Observable for the request body and upgrade to the latest RxJava 1.1.5. Issues"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -89,9 +89,7 @@ protected MultiValueMap<String, HttpCookie> initCookies() {\n \n \t@Override\n \tpublic Flux<DataBuffer> getBody() {\n-\t\treturn this.channel.receive()\n-\t\t                   .retain() //FIXME Rogue reference holding\n-\t\t\t\t.map(dataBufferFactory::wrap);\n+\t\treturn this.channel.receive().retain().map(this.dataBufferFactory::wrap);\n \t}\n \n }",
    "output": "Remove FIXME on retain in ReactorServerHttpRequest The converters release so this is the right thing to do, not a temporary fix"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1504,10 +1504,11 @@ else if (mbd.isLazyInit()) {\n \tprotected void markBeanAsCreated(String beanName) {\n \t\tif (!this.alreadyCreated.contains(beanName)) {\n \t\t\tsynchronized (this.mergedBeanDefinitions) {\n-\t\t\t\tif (this.alreadyCreated.add(beanName)) {\n+\t\t\t\tif (!this.alreadyCreated.contains(beanName)) {\n \t\t\t\t\t// Let the bean definition get re-merged now that we're actually creating\n \t\t\t\t\t// the bean... just in case some of its metadata changed in the meantime.\n \t\t\t\t\tclearMergedBeanDefinition(beanName);\n+\t\t\t\t\tthis.alreadyCreated.add(beanName);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -1518,7 +1519,9 @@ protected void markBeanAsCreated(String beanName) {\n \t * @param beanName the name of the bean\n \t */\n \tprotected void cleanupAfterBeanCreationFailure(String beanName) {\n-\t\tthis.alreadyCreated.remove(beanName);\n+\t\tsynchronized (this.mergedBeanDefinitions) {\n+\t\t\tthis.alreadyCreated.remove(beanName);\n+\t\t}\n \t}\n \n \t/**",
    "output": "AbstractBeanFactory consistently guards add/remove operations against alreadyCreated Set Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1503,10 +1503,13 @@ else if (mbd.isLazyInit()) {\n \t */\n \tprotected void markBeanAsCreated(String beanName) {\n \t\tif (!this.alreadyCreated.contains(beanName)) {\n-\t\t\t// Let the bean definition get re-merged now that we're actually creating\n-\t\t\t// the bean... just in case some of its metadata changed in the meantime.\n-\t\t\tclearMergedBeanDefinition(beanName);\n-\t\t\tthis.alreadyCreated.add(beanName);\n+\t\t\tsynchronized (this.mergedBeanDefinitions) {\n+\t\t\t\tif (this.alreadyCreated.add(beanName)) {\n+\t\t\t\t\t// Let the bean definition get re-merged now that we're actually creating\n+\t\t\t\t\t// the bean... just in case some of its metadata changed in the meantime.\n+\t\t\t\t\tclearMergedBeanDefinition(beanName);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "AbstractBeanFactory.markBeanAsCreatedreliably clears merged bean definition only once Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -302,8 +302,11 @@ protected void processScheduled(Scheduled scheduled, Method method, Object bean)\n \t\t\tString errorMessage =\n \t\t\t\t\t\"Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required\";\n \n-\t\t\tSet<ScheduledTask> tasks =\n-\t\t\t\t\tnew LinkedHashSet<ScheduledTask>(4);\n+\t\t\tSet<ScheduledTask> tasks = this.scheduledTasks.get(bean);\n+\t\t\tif (tasks == null) {\n+\t\t\t\ttasks = new LinkedHashSet<ScheduledTask>(4);\n+\t\t\t\tthis.scheduledTasks.put(bean, tasks);\n+\t\t\t}\n \n \t\t\t// Determine initial delay\n \t\t\tlong initialDelay = scheduled.initialDelay();\n@@ -397,7 +400,6 @@ protected void processScheduled(Scheduled scheduled, Method method, Object bean)\n \n \t\t\t// Check whether we had any attribute set\n \t\t\tAssert.isTrue(processedSchedule, errorMessage);\n-\t\t\tthis.scheduledTasks.put(bean, tasks);\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tthrow new IllegalStateException(",
    "output": "ScheduledAnnotationBeanPostProcessor properly registers multiple tasks per bean Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -123,6 +123,7 @@ public void match(ClientHttpRequest request) throws IOException, AssertionError\n \t/**\n \t * Assert request header values with the given Hamcrest matcher.\n \t */\n+\t@SafeVarargs\n \t@SuppressWarnings(\"unchecked\")\n \tpublic static RequestMatcher header(final String name, final Matcher<? super String>... matchers) {\n \t\treturn new RequestMatcher() {\n@@ -155,8 +156,8 @@ public void match(ClientHttpRequest request) {\n \tprivate static void assertHeaderValueCount(final String name, HttpHeaders headers, int expectedCount) {\n \t\tList<String> actualValues = headers.get(name);\n \t\tAssertionErrors.assertTrue(\"Expected header <\" + name + \">\", actualValues != null);\n-\t\tAssertionErrors.assertTrue(\"Expected header <\" + name + \"> to have at least <\" + expectedCount\n-\t\t\t\t+ \"> values but found \" + actualValues, expectedCount <= actualValues.size());\n+\t\tAssertionErrors.assertTrue(\"Expected header <\" + name + \"> to have at least <\" + expectedCount +\n+\t\t\t\t\"> values but found \" + actualValues, expectedCount <= actualValues.size());\n \t}\n \n \t/**",
    "output": "@SafeVarargs for header(String, Matcher...) method Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1503,11 +1503,10 @@ else if (mbd.isLazyInit()) {\n \t */\n \tprotected void markBeanAsCreated(String beanName) {\n \t\tif (!this.alreadyCreated.contains(beanName)) {\n-\t\t\tthis.alreadyCreated.add(beanName);\n-\n \t\t\t// Let the bean definition get re-merged now that we're actually creating\n \t\t\t// the bean... just in case some of its metadata changed in the meantime.\n \t\t\tclearMergedBeanDefinition(beanName);\n+\t\t\tthis.alreadyCreated.add(beanName);\n \t\t}\n \t}\n ",
    "output": "AbstractBeanFactory.markBeanAsCreatedreliably clears merged bean definition first Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -293,9 +293,8 @@ protected AbstractTilesContainerFactory createContainerFactory(ApplicationContex\n \tprivate class SpringTilesContainerFactory extends BasicTilesContainerFactory {\n \n \t\t@Override\n-\t\tpublic TilesContainer createContainer(ApplicationContext context) {\n-\t\t\tTilesContainer container = super.createContainer(context);\n-\t\t\treturn (useMutableTilesContainer ? new CachingTilesContainer(container) : container);\n+\t\tprotected TilesContainer createDecoratedContainer(TilesContainer originalContainer, ApplicationContext context) {\n+\t\t\treturn (useMutableTilesContainer ? new CachingTilesContainer(originalContainer) : originalContainer);\n \t\t}\n \n \t\t@Override",
    "output": "SpringTilesContainerFactory uses Tiles 3's createDecoratedContainer Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java\n@@ -15,14 +15,11 @@\n  */\n package org.springframework.test.web.client;\n \n-import org.hamcrest.Matchers;\n import org.junit.Test;\n \n import org.springframework.test.web.client.MockRestServiceServer.MockRestServiceServerBuilder;\n import org.springframework.web.client.RestTemplate;\n \n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n ",
    "output": "Delete unused imports"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n@@ -80,7 +80,7 @@ public void setUp() throws Exception {\n \t\tthis.resolver = new RequestHeaderMethodArgumentResolver(conversionService, context.getBeanFactory());\n \n \t\t@SuppressWarnings(\"ConfusingArgumentToVarargsMethod\")\n-\t\tMethod method = ReflectionUtils.findMethod(getClass(), \"params\", null);\n+\t\tMethod method = ReflectionUtils.findMethod(getClass(), \"params\", (Class<?>[]) null);\n \t\tthis.paramNamedDefaultValueStringHeader = new SynthesizingMethodParameter(method, 0);\n \t\tthis.paramNamedValueStringArray = new SynthesizingMethodParameter(method, 1);\n \t\tthis.paramSystemProperty = new SynthesizingMethodParameter(method, 2);\n@@ -190,6 +190,7 @@ public void notFound() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void dateConversion() throws Exception {\n \t\tString rfc1123val = \"Thu, 21 Apr 2016 17:11:08 +0100\";\n \t\tthis.exchange.getRequest().getHeaders().add(\"name\", rfc1123val);",
    "output": "Fix compiler warnings"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java\n@@ -17,14 +17,12 @@\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.nio.ByteBuffer;\n \n import io.netty.handler.codec.http.cookie.Cookie;\n import reactor.core.publisher.Flux;\n import reactor.io.netty.http.HttpChannel;\n \n import org.springframework.core.io.buffer.DataBuffer;\n-import org.springframework.core.io.buffer.DataBufferAllocator;\n import org.springframework.core.io.buffer.NettyDataBufferAllocator;\n import org.springframework.http.HttpCookie;\n import org.springframework.http.HttpHeaders;\n@@ -90,7 +88,9 @@ protected MultiValueMap<String, HttpCookie> initCookies() {\n \n \t@Override\n \tpublic Flux<DataBuffer> getBody() {\n-\t\treturn this.channel.receive().map(allocator::wrap);\n+\t\treturn this.channel.receive()\n+\t\t                   .retain() //FIXME Rogue reference holding\n+\t\t                   .map(allocator::wrap);\n \t}\n \n }",
    "output": "fixme : force retainon incoming bytebuf content"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureAdapter.java b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureAdapter.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureAdapter.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureAdapter.java\n@@ -65,21 +65,11 @@ public void onSuccess(S result) {\n \t\t\t\t\tonFailure(ex);\n \t\t\t\t\treturn;\n \t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tsuccessCallback.onSuccess(adapted);\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable e) {\n-\t\t\t\t\t// Ignore\n-\t\t\t\t}\n+\t\t\t\tsuccessCallback.onSuccess(adapted);\n \t\t\t}\n \t\t\t@Override\n \t\t\tpublic void onFailure(Throwable ex) {\n-\t\t\t\ttry {\n-\t\t\t\t\tfailureCallback.onFailure(ex);\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable t) {\n-\t\t\t\t\t// Ignore\n-\t\t\t\t}\n+\t\t\t\tfailureCallback.onFailure(ex);\n \t\t\t}\n \t\t});\n \t}",
    "output": "ListenableFutureAdapter keeps propagating onSuccess/onFailure exceptions Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/HttpRangeTests.java b/spring-web/src/test/java/org/springframework/http/HttpRangeTests.java\n--- a/spring-web/src/test/java/org/springframework/http/HttpRangeTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/HttpRangeTests.java\n@@ -136,6 +136,7 @@ public void toResourceRegionIllegalLength() {\n \t}\n \n \t@Test(expected = IllegalArgumentException.class)\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void toResourceRegionExceptionLength() {\n \t\tByteArrayResource resource = mock(ByteArrayResource.class);\n \t\tgiven(resource.contentLength()).willThrow(IOException.class);\n\ndiff --git a/spring-web/src/test/java/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolverTests.java b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n--- a/spring-web/src/test/java/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolverTests.java\n@@ -193,6 +193,7 @@ public void notFound() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void dateConversion() throws Exception {\n \t\tString rfc1123val = \"Thu, 21 Apr 2016 17:11:08 +0100\";\n \t\tservletRequest.addHeader(\"name\", rfc1123val);",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java b/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/CharacterEncodingFilter.java\n@@ -113,6 +113,13 @@ public void setEncoding(String encoding) {\n \t\tthis.encoding = encoding;\n \t}\n \n+\t/**\n+\t * Return the configured encoding for requests and/or responses\n+\t */\n+\tpublic String getEncoding() {\n+\t\treturn encoding;\n+\t}\n+\n \t/**\n \t * Set whether the configured {@link #setEncoding encoding} of this filter\n \t * is supposed to override existing request and response encodings.\n@@ -143,6 +150,13 @@ public void setForceRequestEncoding(boolean forceRequestEncoding) {\n \t\tthis.forceRequestEncoding = forceRequestEncoding;\n \t}\n \n+\t/**\n+\t * Return whether the encoding should be forced on requests\n+\t */\n+\tpublic boolean isForceRequestEncoding() {\n+\t\treturn forceRequestEncoding;\n+\t}\n+\n \t/**\n \t * Set whether the configured {@link #setEncoding encoding} of this filter\n \t * is supposed to override existing response encodings.\n@@ -155,6 +169,13 @@ public void setForceResponseEncoding(boolean forceResponseEncoding) {\n \t\tthis.forceResponseEncoding = forceResponseEncoding;\n \t}\n \n+\t/**\n+\t * Return whether the encoding should be forced on responses\n+\t */\n+\tpublic boolean isForceResponseEncoding() {\n+\t\treturn forceResponseEncoding;\n+\t}\n+\n \t@Override\n \tprotected void doFilterInternal(\n \t\t\tHttpServletRequest request, HttpServletResponse response, FilterChain filterChain)",
    "output": "Add convenient getters for force*Encoding attributes Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java b/spring-web-reactive/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java\n@@ -19,8 +19,6 @@\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import reactor.core.publisher.EmitterProcessor;\n-import reactor.core.publisher.FluxProcessor;\n import reactor.core.publisher.Mono;\n \n import org.springframework.http.server.reactive.ServerHttpRequest;\n@@ -89,8 +87,7 @@ public Mono<WebSession> getSession() {\n \t\tif (this.sessionMono == null) {\n \t\t\tsynchronized (this.createSessionLock) {\n \t\t\t\tif (this.sessionMono == null) {\n-\t\t\t\t\tFluxProcessor<WebSession, WebSession> replay = EmitterProcessor.replay(1);\n-\t\t\t\t\tthis.sessionMono = this.sessionManager.getSession(this).subscribeWith(replay).next();\n+\t\t\t\t\tthis.sessionMono = this.sessionManager.getSession(this).cache();\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Split FluxProcessor factories into individual Processor, remove confusing factories"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n@@ -614,6 +614,12 @@ public void start() throws JmsException {\n \t@Override\n \tpublic void stop(Runnable callback) throws JmsException {\n \t\tsynchronized (this.lifecycleMonitor) {\n+\t\t\tif (!isRunning() || this.stopCallback != null) {\n+\t\t\t\t// Not started, already stopped, or previous stop attempt in progress\n+\t\t\t\t// -> return immediately, no stop process to control anymore.\n+\t\t\t\tcallback.run();\n+\t\t\t\treturn;\n+\t\t\t}\n \t\t\tthis.stopCallback = callback;\n \t\t}\n \t\tstop();",
    "output": "DefaultMessageListenerContainer immediately invokes stop callback when not running Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java\n--- a/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java\n+++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java\n@@ -137,10 +137,17 @@ public void spr13081ConfigFailIfCacheResolverReturnsNullCacheName() {\n \tpublic void spr14230AdaptsToOptional() {\n \t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr14230Config.class);\n \t\tSpr14230Service bean = context.getBean(Spr14230Service.class);\n+\t\tCache cache = context.getBean(CacheManager.class).getCache(\"itemCache\");\n \n \t\tTestBean tb = new TestBean(\"tb1\");\n \t\tbean.insertItem(tb);\n \t\tassertSame(tb, bean.findById(\"tb1\").get());\n+\t\tassertSame(tb, cache.get(\"tb1\").get());\n+\n+\t\tcache.clear();\n+\t\tTestBean tb2 = bean.findById(\"tb1\").get();\n+\t\tassertNotSame(tb, tb2);\n+\t\tassertSame(tb2, cache.get(\"tb1\").get());\n \t}\n \n ",
    "output": "Check actual cache value for unwrapped Optional Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -807,7 +807,7 @@ public interface FieldFilter {\n \t/**\n \t * Pre-built FieldFilter that matches all non-static, non-final fields.\n \t */\n-\tpublic static FieldFilter COPYABLE_FIELDS = new FieldFilter() {\n+\tpublic static final FieldFilter COPYABLE_FIELDS = new FieldFilter() {\n \n \t\t@Override\n \t\tpublic boolean matches(Field field) {\n@@ -819,7 +819,7 @@ public boolean matches(Field field) {\n \t/**\n \t * Pre-built MethodFilter that matches all non-bridge methods.\n \t */\n-\tpublic static MethodFilter NON_BRIDGED_METHODS = new MethodFilter() {\n+\tpublic static final MethodFilter NON_BRIDGED_METHODS = new MethodFilter() {\n \n \t\t@Override\n \t\tpublic boolean matches(Method method) {\n@@ -832,7 +832,7 @@ public boolean matches(Method method) {\n \t * Pre-built MethodFilter that matches all non-bridge methods\n \t * which are not declared on {@code java.lang.Object}.\n \t */\n-\tpublic static MethodFilter USER_DECLARED_METHODS = new MethodFilter() {\n+\tpublic static final MethodFilter USER_DECLARED_METHODS = new MethodFilter() {\n \n \t\t@Override\n \t\tpublic boolean matches(Method method) {",
    "output": "\"final\" for public static fields in ReflectionUtils"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java b/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java\n@@ -110,7 +110,7 @@ public Mono<WebSession> getSession(ServerWebExchange exchange) {\n \tprotected Mono<WebSession> validateSession(ServerWebExchange exchange, WebSession session) {\n \t\tif (session.isExpired()) {\n \t\t\tthis.sessionIdResolver.setSessionId(exchange, \"\");\n-\t\t\treturn this.sessionStore.removeSession(session.getId()).then(Mono::empty);\n+\t\t\treturn this.sessionStore.removeSession(session.getId()).cast(WebSession.class);\n \t\t}\n \t\telse {\n \t\t\treturn Mono.just(session);",
    "output": "compile time issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java\n@@ -620,10 +620,9 @@ private void registerWebSocketMessageBrokerStats(RootBeanDefinition broker, Runt\n \t\tif (context.getRegistry().containsBeanDefinition(name)) {\n \t\t\tbeanDef.getPropertyValues().add(\"outboundChannelExecutor\", context.getRegistry().getBeanDefinition(name));\n \t\t}\n-\t\tname = SCHEDULER_BEAN_NAME;\n-\t\tif (context.getRegistry().containsBeanDefinition(name)) {\n-\t\t\tbeanDef.getPropertyValues().add(\"sockJsTaskScheduler\", context.getRegistry().getBeanDefinition(name));\n-\t\t}\n+\t\tObject scheduler = WebSocketNamespaceUtils.registerScheduler(SCHEDULER_BEAN_NAME, context, source);\n+\t\tbeanDef.getPropertyValues().add(\"sockJsTaskScheduler\", scheduler);\n+\n \t\tregisterBeanDefByName(\"webSocketMessageBrokerStats\", beanDef, context, source);\n \t}\n ",
    "output": "XML config properly initialize WS message broker stats Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -191,6 +191,16 @@ public class MediaType extends MimeType implements Serializable {\n \t */\n \tpublic final static String TEXT_HTML_VALUE = \"text/html\";\n \n+\t/**\n+\t * Public constant media type for {@code text/markdown}.\n+\t */\n+\tpublic final static MediaType TEXT_MARKDOWN;\n+\n+\t/**\n+\t * A String equivalent of {@link MediaType#TEXT_MARKDOWN}.\n+\t */\n+\tpublic final static String TEXT_MARKDOWN_VALUE = \"text/markdown\";\n+\n \t/**\n \t * Public constant media type for {@code text/plain}.\n \t *  */\n@@ -230,6 +240,7 @@ public class MediaType extends MimeType implements Serializable {\n \t\tIMAGE_PNG = valueOf(IMAGE_PNG_VALUE);\n \t\tMULTIPART_FORM_DATA = valueOf(MULTIPART_FORM_DATA_VALUE);\n \t\tTEXT_HTML = valueOf(TEXT_HTML_VALUE);\n+\t\tTEXT_MARKDOWN = valueOf(TEXT_MARKDOWN_VALUE);\n \t\tTEXT_PLAIN = valueOf(TEXT_PLAIN_VALUE);\n \t\tTEXT_XML = valueOf(TEXT_XML_VALUE);\n \t}",
    "output": "Add text/markdown MediaType constant Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -23,7 +23,7 @@\n import org.junit.Test;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n-import reactor.core.publisher.SchedulerGroup;\n+import reactor.core.publisher.Computations;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Timer;\n \n@@ -42,7 +42,7 @@\n  */\n public class AsyncIntegrationTests extends AbstractHttpHandlerIntegrationTests {\n \n-\tprivate final Scheduler asyncGroup = SchedulerGroup.async();\n+\tprivate final Scheduler asyncGroup = Computations.parallel();\n \n \tprivate final DataBufferAllocator allocator = new DefaultDataBufferAllocator();\n ",
    "output": "Rename SchedulerGroup to Computations and its methods to avoid confusion"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -24,6 +24,7 @@\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.SchedulerGroup;\n+import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Timer;\n \n import org.springframework.core.io.buffer.DataBufferAllocator;\n@@ -41,7 +42,7 @@\n  */\n public class AsyncIntegrationTests extends AbstractHttpHandlerIntegrationTests {\n \n-\tprivate final SchedulerGroup asyncGroup = SchedulerGroup.async();\n+\tprivate final Scheduler asyncGroup = SchedulerGroup.async();\n \n \tprivate final DataBufferAllocator allocator = new DefaultDataBufferAllocator();\n ",
    "output": "Normalize returns with Scheduler factories in SchedulerGroup"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketSessionDecorator.java b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketSessionDecorator.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketSessionDecorator.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketSessionDecorator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -145,7 +145,7 @@ public boolean isOpen() {\n \n \t@Override\n \tpublic void sendMessage(WebSocketMessage<?> message) throws IOException {\n-\n+\t\tthis.delegate.sendMessage(message);\n \t}\n \n \t@Override",
    "output": "Delegate sendMessage Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n@@ -111,7 +111,7 @@ public Mono<ClientHttpResponse> execute() {\n \t\t\t\t\t\t\t})\n \t\t\t\t\t\t\t.after(() -> {\n \t\t\t\t\t\t\t\tif (body != null) {\n-\t\t\t\t\t\t\t\t\treturn channel.sendBody(body);\n+\t\t\t\t\t\t\t\t\treturn channel.send(body);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\t\treturn channel.sendHeaders();\n\ndiff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java\n@@ -50,7 +50,7 @@ public ReactorClientHttpResponse(HttpInbound channel, DataBufferAllocator alloca\n \n \t@Override\n \tpublic Flux<DataBuffer> getBody() {\n-\t\treturn channel.receiveBody().map(b -> allocator.wrap(b.byteBuffer()));\n+\t\treturn channel.receive().map(b -> allocator.wrap(b.byteBuffer()));\n \t}\n \n \t@Override",
    "output": "Polish reactor-ipc/netty contracts"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java\n--- a/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java\n@@ -245,7 +245,7 @@ public MergedContextConfiguration(Class<?> testClass, String[] locations, Class<\n \t\t\tMergedContextConfiguration parent) {\n \t\tthis(testClass, locations, classes, contextInitializerClasses, activeProfiles,\n \t\t\t\tpropertySourceLocations, propertySourceProperties,\n-\t\t\t\tCollections.<ContextCustomizer> emptySet(), contextLoader,\n+\t\t\t\tEMPTY_CONTEXT_CUSTOMIZERS, contextLoader,\n \t\t\t\tcacheAwareContextLoaderDelegate, parent);\n \t}\n ",
    "output": "Use the defined constant in MergedContextConfiguration"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java\n@@ -118,7 +118,7 @@ public Mono<ClientHttpResponse> execute() {\n \t\t\t\t\t\t\t\t\treturn channel.send(body);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\t\t\treturn channel.writeHeaders();\n+\t\t\t\t\t\t\t\t\treturn channel.sendHeaders();\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t});\n \t\t\t\t})",
    "output": "fix change issue on HttpChannel#writeHeaders to sendHeaders"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n@@ -138,10 +138,10 @@ public boolean canRead(Class<?> clazz, MediaType mediaType) {\n \n \t@Override\n \tpublic boolean canRead(Type type, Class<?> contextClass, MediaType mediaType) {\n-\t\tJavaType javaType = getJavaType(type, contextClass);\n \t\tif (!canRead(mediaType)) {\n \t\t\treturn false;\n \t\t}\n+\t\tJavaType javaType = getJavaType(type, contextClass);\n \t\tif (!logger.isWarnEnabled()) {\n \t\t\treturn this.objectMapper.canDeserialize(javaType);\n \t\t}",
    "output": "Jackson-based message converters consistently check media type first Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -679,6 +679,13 @@ protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactor\n \t */\n \tprotected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n \t\tPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n+\n+\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime\n+\t\t// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)\n+\t\tif (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n+\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n+\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n+\t\t}\n \t}\n \n \t/**",
    "output": "Detect LoadTimeWeaver bean when declared through @Bean method as well Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -67,7 +67,7 @@ public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response)\n \t\t\treturn response.setBody(Flux.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n \t\t\t                            .useTimer(Timer.global())\n \t\t\t                            .delay(Duration.ofMillis(100))\n-\t\t\t                            .dispatchOn(asyncGroup)\n+\t\t\t                            .publishOn(asyncGroup)\n \t\t\t                            .collect(allocator::allocateBuffer,\n \t\t\t                               (buffer, str) -> buffer.write(str.getBytes())));\n \t\t}",
    "output": "sync with dispatchOn change in reactor-core"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -24,7 +24,7 @@\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.SchedulerGroup;\n-import reactor.core.timer.Timer;\n+import reactor.core.scheduler.Timer;\n \n import org.springframework.core.io.buffer.DataBufferAllocator;\n import org.springframework.core.io.buffer.DefaultDataBufferAllocator;",
    "output": "First wave scheduler contract migration"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ClientHttpRequestFactory.java\n@@ -17,6 +17,8 @@\n \n import java.net.URI;\n \n+import org.reactivestreams.Publisher;\n+\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n \n@@ -29,6 +31,8 @@ public interface ClientHttpRequestFactory {\n \n \t/**\n \t * Create a new {@link ClientHttpRequest} for the specified HTTP method, URI and headers\n+\t * <p>The returned request can be {@link ClientHttpRequest#setBody(Publisher) written to},\n+\t * and then executed by calling {@link ClientHttpRequest#execute()}\n \t *\n \t * @param httpMethod the HTTP method to execute\n \t * @param uri the URI to create a request for",
    "output": "Improve ClientHttpRequestFactory javadoc This commit underlines the fact that the request created by a ClientHttpRequestFactory should be augmented with a message body using the `ClientHttpRequest#setBody` method before it is executed"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpResponse.java\n@@ -56,7 +56,7 @@ public RxNettyClientHttpResponse(HttpClientResponse<ByteBuf> response,\n \t\tthis.allocator = allocator;\n \t\tthis.response = response;\n \t\tthis.headers = new HttpHeaders();\n-\t\tthis.response.headerIterator().forEachRemaining(e -> this.headers.set(e.getKey(), e.getValue()));\n+\t\tthis.response.headerIterator().forEachRemaining(e -> this.headers.set(e.getKey().toString(), e.getValue().toString()));\n \t\tthis.cookies = initCookies(response);\n \t}\n ",
    "output": "Upgrade RxNetty to 0.5.2-SNAPSHOT and Tomcat to 8.0.33"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -166,6 +166,17 @@ public BeanDefinitionBuilder setFactoryMethod(String factoryMethod) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Add an indexed constructor arg value. The current index is tracked internally\n+\t * and all additions are at the present point.\n+\t * @deprecated since Spring 2.5, in favor of {@link #addConstructorArgValue}.\n+\t * This variant just remains around for Spring Security 2.x compatibility.\n+\t */\n+\t@Deprecated\n+\tpublic BeanDefinitionBuilder addConstructorArg(Object value) {\n+\t\treturn addConstructorArgValue(value);\n+\t}\n+\n \t/**\n \t * Add an indexed constructor arg value. The current index is tracked internally\n \t * and all additions are at the present point.",
    "output": "BeanDefinitionBuilder keeps providing addConstructorArg(Object) for Spring Security 2.x compatibility Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,7 +58,6 @@ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpRespon\n \n \t\tif (initialRequest) {\n \t\t\twriteFrame(SockJsFrame.openFrame());\n-\t\t\tresetRequest();\n \t\t}\n \t\telse if (!getMessageCache().isEmpty()) {\n \t\t\tflushCache();\n@@ -77,6 +76,11 @@ protected void flushCache() throws SockJsTransportFailureException {\n \t\tSockJsMessageCodec messageCodec = getSockJsServiceConfig().getMessageCodec();\n \t\tSockJsFrame frame = SockJsFrame.messageFrame(messageCodec, messages);\n \t\twriteFrame(frame);\n+\t}\n+\n+\t@Override\n+\tprotected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {\n+\t\tsuper.writeFrame(frame);\n \t\tresetRequest();\n \t}\n ",
    "output": "Call resetRequest after writeFrame for polling sessions Previous refactoring (fcf6ae and also 43d937) in the SockJsSession hierarchy consolidated access to the request and response in the base class AbstractHttpSockJsSession in order to keep synchronization concerns there. However that also unintentionally removed the call to resetRequestafter sending a heartbeat for any of the PollingSockJsSession classes. In general a polling session should call resetRequest after every frame written. This commit brings back the writeFrame override in PollingSockJsSession with an extra call to resetRequest. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java\n@@ -157,7 +157,6 @@ private void executeSqlScripts(TestContext testContext, ExecutionPhase execution\n \t * @param classLevel {@code true} if {@link Sql @Sql} was declared at the\n \t * class level\n \t */\n-\t@SuppressWarnings(\"serial\")\n \tprivate void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)\n \t\t\tthrows Exception {\n \t\tif (executionPhase != sql.executionPhase()) {",
    "output": "Clean up warnings in spring-test"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n@@ -359,14 +359,15 @@ private void scheduleSessionTask() {\n \t\t\tif (this.sessionCleanupTask != null) {\n \t\t\t\treturn;\n \t\t\t}\n-\t\t\tfinal List<String> removedSessionIds = new ArrayList<String>();\n \t\t\tthis.sessionCleanupTask = getTaskScheduler().scheduleAtFixedRate(new Runnable() {\n \t\t\t\t@Override\n \t\t\t\tpublic void run() {\n+\t\t\t\t\tList<String> removedIds = new ArrayList<String>();\n \t\t\t\t\tfor (SockJsSession session : sessions.values()) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tif (session.getTimeSinceLastActive() > getDisconnectDelay()) {\n \t\t\t\t\t\t\t\tsessions.remove(session.getId());\n+\t\t\t\t\t\t\t\tremovedIds.add(session.getId());\n \t\t\t\t\t\t\t\tsession.close();\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n@@ -375,9 +376,8 @@ public void run() {\n \t\t\t\t\t\t\tlogger.debug(\"Failed to close \" + session, ex);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tif (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) {\n-\t\t\t\t\t\tlogger.debug(\"Closed \" + removedSessionIds.size() + \" sessions \" + removedSessionIds);\n-\t\t\t\t\t\tremovedSessionIds.clear();\n+\t\t\t\t\tif (logger.isDebugEnabled() && !removedIds.isEmpty()) {\n+\t\t\t\t\t\tlogger.debug(\"Closed \" + removedIds.size() + \" sessions: \" + removedIds);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}, getDisconnectDelay());",
    "output": "Fix incomplete log message Commit 48236b from 2014 introduced a logging improvement to avoid logging each removed session per line and instead log one line at the end with all removed sessions ids. However that list of removed session ids wasn't populated. This commit fixes that. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n--- a/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,6 +18,8 @@\n \n import java.util.concurrent.Executor;\n \n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.context.ApplicationEvent;\n import org.springframework.context.ApplicationListener;\n@@ -160,7 +162,13 @@ protected void invokeListener(ApplicationListener listener, ApplicationEvent eve\n \t\t\t}\n \t\t}\n \t\telse {\n-\t\t\tlistener.onApplicationEvent(event);\n+\t\t\ttry {\n+\t\t\t\tlistener.onApplicationEvent(event);\n+\t\t\t}\n+\t\t\tcatch (ClassCastException ex) {\n+\t\t\t\t// Possibly a lambda-defined listener which we could not resolve the generic event type for\n+\t\t\t\tLogFactory.getLog(getClass()).debug(\"Non-matching event type for listener: \" + listener, ex);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "SimpleApplicationEventMulticaster leniently handles ClassCastException Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -2182,6 +2182,11 @@ private int readFrameType(final Object[] frame, final int index, int v,\n      * @return a non null Label, which must be equal to labels[offset].\n      */\n     protected Label readLabel(int offset, Label[] labels) {\n+        // SPRING PATCH: leniently handle offset mismatch\n+        if (offset >= labels.length) {\n+            return new Label();\n+        }\n+        // END OF PATCH\n         if (labels[offset] == null) {\n             labels[offset] = new Label();\n         }",
    "output": "ASM ClassReader leniently handles label offset mismatch Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -147,15 +147,19 @@ protected String getModelAttribute() {\n \t * Set the name of the form attribute in the model.\n \t * <p>May be a runtime expression.\n \t * @see #setModelAttribute\n+\t * @deprecated as of Spring 4.3, in favor of {@link #setModelAttribute}\n \t */\n+\t@Deprecated\n \tpublic void setCommandName(String commandName) {\n \t\tthis.modelAttribute = commandName;\n \t}\n \n \t/**\n \t * Get the name of the form attribute in the model.\n \t * @see #getModelAttribute\n+\t * @deprecated as of Spring 4.3, in favor of {@link #getModelAttribute}\n \t */\n+\t@Deprecated\n \tprotected String getCommandName() {\n \t\treturn this.modelAttribute;\n \t}",
    "output": "Deprecate FormTag's \"commandName\" in favor of \"modelAttribute\" Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/test/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessorTests.java b/spring-jms/src/test/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessorTests.java\n--- a/spring-jms/src/test/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessorTests.java\n+++ b/spring-jms/src/test/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -134,12 +134,12 @@ public void sendToAnnotationFoundOnProxy() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"resource\")\n \tpublic void invalidProxy() {\n \t\tthrown.expect(BeanCreationException.class);\n \t\tthrown.expectCause(is(instanceOf(IllegalStateException.class)));\n \t\tthrown.expectMessage(\"handleIt2\");\n-\t\tnew AnnotationConfigApplicationContext(\n-\t\t\t\tConfig.class, ProxyConfig.class, InvalidProxyTestBean.class);\n+\t\tnew AnnotationConfigApplicationContext(Config.class, ProxyConfig.class, InvalidProxyTestBean.class);\n \t}\n \n ",
    "output": "Clean up warnings"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java\n--- a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java\n@@ -39,7 +39,7 @@\n import org.springframework.beans.factory.config.EmbeddedValueResolver;\n import org.springframework.core.MethodIntrospector;\n import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.jms.config.JmsListenerConfigUtils;\n import org.springframework.jms.config.JmsListenerContainerFactory;\n import org.springframework.jms.config.JmsListenerEndpointRegistrar;\n@@ -206,7 +206,7 @@ public Object postProcessAfterInitialization(final Object bean, String beanName)\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic Set<JmsListener> inspect(Method method) {\n \t\t\t\t\t\t\tSet<JmsListener> listenerMethods =\n-\t\t\t\t\t\t\t\t\tAnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class);\n+\t\t\t\t\t\t\t\t\tAnnotatedElementUtils.getMergedRepeatableAnnotations(method, JmsListener.class, JmsListeners.class);\n \t\t\t\t\t\t\treturn (!listenerMethods.isEmpty() ? listenerMethods : null);\n \t\t\t\t\t\t}\n \t\t\t\t\t});",
    "output": "Support @JmsListener as a merged composed annotation Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -43,7 +43,7 @@\n import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.core.MethodIntrospector;\n import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.scheduling.TaskScheduler;\n import org.springframework.scheduling.Trigger;\n import org.springframework.scheduling.config.CronTask;\n@@ -258,7 +258,7 @@ public Object postProcessAfterInitialization(final Object bean, String beanName)\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic Set<Scheduled> inspect(Method method) {\n \t\t\t\t\t\t\tSet<Scheduled> scheduledMethods =\n-\t\t\t\t\t\t\t\t\tAnnotationUtils.getRepeatableAnnotations(method, Scheduled.class, Schedules.class);\n+\t\t\t\t\t\t\t\t\tAnnotatedElementUtils.getMergedRepeatableAnnotations(method, Scheduled.class, Schedules.class);\n \t\t\t\t\t\t\treturn (!scheduledMethods.isEmpty() ? scheduledMethods : null);\n \t\t\t\t\t\t}\n \t\t\t\t\t});",
    "output": "Support @Scheduled as a merged composable annotation Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -26,6 +26,7 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.net.URLConnection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.LinkedHashSet;\n@@ -750,6 +751,7 @@ protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> r\n \t\t\t}\n \t\t\treturn;\n \t\t}\n+\t\tArrays.sort(dirContents);\n \t\tfor (File content : dirContents) {\n \t\t\tString currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, \"/\");\n \t\t\tif (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + \"/\")) {",
    "output": "Consistent alphabetical sorting of directory content Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -326,6 +326,7 @@ private String getMacroOutput(String name) throws Exception {\n \n \t\t// tokenize output and ignore whitespace\n \t\tString output = response.getContentAsString();\n+\t\toutput = output.replace(\"\\r\\n\", \"\\n\");\n \t\treturn output.trim();\n \t}\n ",
    "output": "Revised newline handling tests pass on Windows now Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,7 +64,7 @@\n  * @see Qualifier\n  * @see Value\n  */\n-@Target({ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE})\n+@Target({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface Autowired {",
    "output": "Allow @Autowired to be declared on parameters Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilderTests.java\n@@ -139,7 +139,7 @@ public String contextPath(HttpServletRequest request) {\n \n \t@RestController\n \tstatic class CookieController {\n-\t\t@RequestMapping(\"/\")\n+\t\t@RequestMapping(value=\"/\", produces=\"text/plain\")\n \t\tpublic String cookie(@CookieValue(\"cookie\") String cookie) {\n \t\t\treturn cookie;\n \t\t}\n\ndiff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n@@ -158,7 +158,7 @@ public String contextPath(HttpServletRequest request) {\n \n \t@RestController\n \tstatic class CookieController {\n-\t\t@RequestMapping(\"/\")\n+\t\t@RequestMapping(value=\"/\", produces=\"text/plain\")\n \t\tpublic String cookie(@CookieValue(\"cookie\") String cookie) {\n \t\t\treturn cookie;\n \t\t}",
    "output": "Refine tests for Explicitly define the response type as text/plain to avoid content type confusion. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/webdriver/MockMvcHtmlUnitDriverBuilderTests.java\n@@ -124,7 +124,7 @@ public void cookieManagerShared() throws Exception {\n \t\tassertThat(get(\"http://localhost/\"), equalTo(\"\"));\n \t\tCookie cookie = new Cookie(\"localhost\", \"cookie\", \"cookieManagerShared\");\n \t\totherDriver.getWebClient().getCookieManager().addCookie(cookie);\n-\t\tassertThat(get(\"http://localhost/\"), equalTo(\"cookieManagerShared\"));\n+\t\tassertThat(get(\"http://localhost/\"), containsString(\"cookieManagerShared\"));\n \t}\n \n ",
    "output": "Fix test that failed due to upgrade to HtmlUnit 2.20"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java\n@@ -160,7 +160,8 @@ public static void setField(Object targetObject, Class<?> targetClass, String na\n \t\tAssert.isTrue(targetObject != null || targetClass != null,\n \t\t\t\"Either targetObject or targetClass for the field must be specified\");\n \n-\t\tObject ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);\n+\t\tObject ultimateTargetObject = (targetObject == null ? null\n+\t\t\t\t: AopTestUtils.getUltimateTargetObject(targetObject));\n \n \t\tif (targetClass == null) {\n \t\t\ttargetClass = ultimateTargetObject.getClass();\n@@ -237,7 +238,8 @@ public static Object getField(Object targetObject, Class<?> targetClass, String\n \t\tAssert.isTrue(targetObject != null || targetClass != null,\n \t\t\t\"Either targetObject or targetClass for the field must be specified\");\n \n-\t\tObject ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);\n+\t\tObject ultimateTargetObject = (targetObject == null ? null\n+\t\t\t\t: AopTestUtils.getUltimateTargetObject(targetObject));\n \n \t\tif (targetClass == null) {\n \t\t\ttargetClass = ultimateTargetObject.getClass();",
    "output": "Fix bugs in ReflectionTestUtils related to proxies Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/bind/annotation/DeleteMapping.java b/spring-web/src/main/java/org/springframework/web/bind/annotation/DeleteMapping.java\n--- a/spring-web/src/main/java/org/springframework/web/bind/annotation/DeleteMapping.java\n+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/DeleteMapping.java\n@@ -32,9 +32,6 @@\n  *\n  * <p>Specifically, {@code @DeleteMapping} is a <em>composed annotation</em> that\n  * acts as a shortcut for {@code @RequestMapping(method = RequestMethod.DELETE)}.\n- * Furthermore, this annotation does not support the\n- * {@link RequestMapping#method method}, {@link RequestMapping#consumes consumes},\n- * and {@link RequestMapping#produces produces} attributes of {@code @RequestMapping}.\n  *\n  * @author Sam Brannen\n  * @since 4.3\n@@ -80,4 +77,16 @@\n \t@AliasFor(annotation = RequestMapping.class)\n \tString[] headers() default {};\n \n+\t/**\n+\t * Alias for {@link RequestMapping#consumes}.\n+\t */\n+\t@AliasFor(annotation = RequestMapping.class)\n+\tString[] consumes() default {};\n+\n+\t/**\n+\t * Alias for {@link RequestMapping#produces}.\n+\t */\n+\t@AliasFor(annotation = RequestMapping.class)\n+\tString[] produces() default {};\n+\n }",
    "output": "Support 'produces' and 'consumes' attributes in @DeleteMapping Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n--- a/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java\n@@ -46,6 +46,7 @@ public class ForwardedHeaderFilterTests {\n \n \n \t@Before\n+\t@SuppressWarnings(\"serial\")\n \tpublic void setUp() throws Exception {\n \t\tthis.request = new MockHttpServletRequest();\n \t\tthis.request.setScheme(\"http\");",
    "output": "Suppress warnings Gradle build"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java\n@@ -45,7 +45,7 @@\n  */\n public class WebJarsResourceResolver extends AbstractResourceResolver {\n \n-\tprivate final static String WEBJARS_LOCATION = \"META-INF/resources/webjars\";\n+\tprivate final static String WEBJARS_LOCATION = \"META-INF/resources/webjars/\";\n \n \tprivate final static int WEBJARS_LOCATION_LENGTH = WEBJARS_LOCATION.length();\n ",
    "output": "Remove duplicate slash from resolved WebJar locations This commit updates the WEBJARS_LOCATION in WebJarResourceResolver to avoid getting duplicate slashes in resolved resources locations such as `/webjars//bootstrap/3.3.2/js/bootstrap.min.js`. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n@@ -124,7 +124,7 @@ public TestContextManager(TestContextBootstrapper testContextBootstrapper) {\n \t/**\n \t * Get the {@link TestContext} managed by this {@code TestContextManager}.\n \t */\n-\tprotected final TestContext getTestContext() {\n+\tpublic final TestContext getTestContext() {\n \t\treturn this.testContext;\n \t}\n ",
    "output": "Make TestContextManager.getTestContextpublic This commit changes the visibility of the getTestContextmethod in TestContextManager from 'protected' to 'public' in order to support test method injection in JUnit 5 and similar use cases. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java\n@@ -89,7 +89,7 @@ public ResultMatcher string(final String name, final String value) {\n \t\treturn new ResultMatcher() {\n \t\t\t@Override\n \t\t\tpublic void match(MvcResult result) {\n-\t\t\t\tassertEquals(\"Response header \" + name, result.getResponse().getHeader(name), value);\n+\t\t\t\tassertEquals(\"Response header \" + name, value, result.getResponse().getHeader(name));\n \t\t\t}\n \t\t};\n \t}",
    "output": "Fix HeaderResultMatchers#string(String, String) assert order Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java b/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java\n--- a/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java\n+++ b/spring-core/src/main/java/org/springframework/lang/UsesSunMisc.java\n@@ -0,0 +1,20 @@\n+package org.springframework.lang;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Indicates that the annotated element uses an API from the {@code sun.misc}\n+ * package.\n+ *\n+ * @author Stephane Nicoll\n+ * @since 4.3\n+ */\n+@Retention(RetentionPolicy.CLASS)\n+@Target({ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.TYPE})\n+@Documented\n+public @interface UsesSunMisc {\n+}",
    "output": "Add sun.misc annotation marker This commit adds an annotation that should be used to mark any usage of the `sun.misc` API"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -725,7 +725,7 @@ protected boolean supportsInternal(HandlerMethod handlerMethod) {\n \tprotected ModelAndView handleInternal(HttpServletRequest request,\n \t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n \n-\t\tModelAndView mav = null;\n+\t\tModelAndView mav;\n \t\tcheckRequest(request);\n \n \t\t// Execute invokeHandlerMethod in synchronized block if required.\n@@ -737,8 +737,13 @@ protected ModelAndView handleInternal(HttpServletRequest request,\n \t\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n \t\t\t\t}\n \t\t\t}\n+\t\t\telse {\n+\t\t\t\t// No HttpSession available -> no mutex necessary\n+\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n+\t\t\t}\n \t\t}\n \t\telse {\n+\t\t\t// No synchronization on session demanded at all...\n \t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n \t\t}\n ",
    "output": "RequestMappingHandlerAdapter properly invokes handler method in case of no session as well Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java\n@@ -117,8 +117,8 @@\n public class RequestMappingHandlerAdapter extends AbstractHandlerMethodAdapter\n \t\timplements BeanFactoryAware, InitializingBean {\n \n-\tprivate static final boolean completionStagePresent = ClassUtils.isPresent(\"java.util.concurrent.CompletionStage\",\n-\t\t\tRequestMappingHandlerAdapter.class.getClassLoader());\n+\tprivate static final boolean completionStagePresent = ClassUtils.isPresent(\n+\t\t\t\"java.util.concurrent.CompletionStage\", RequestMappingHandlerAdapter.class.getClassLoader());\n \n \n \tprivate List<HandlerMethodArgumentResolver> customArgumentResolvers;\n@@ -739,8 +739,9 @@ protected ModelAndView handleInternal(HttpServletRequest request,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\n-\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n+\t\telse {\n+\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n+\t\t}\n \n \t\tif (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n \t\t\tapplyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);",
    "output": "RequestMappingHandlerAdapter properly invokes handler method in synchronizeOnSession mode again Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java\n--- a/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java\n+++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -134,7 +134,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {\n \n \t\t@Override\n \t\tpublic long getDelay(TimeUnit unit) {\n-\t\t\treturn unit.convert(System.currentTimeMillis() - this.timer.getScheduledExecutionTime(), TimeUnit.MILLISECONDS);\n+\t\t\treturn unit.convert(this.timer.getScheduledExecutionTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n \t\t}\n \n \t\t@Override",
    "output": "TimerScheduledFuture correctly calculates getDelay result Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n--- a/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java\n@@ -250,14 +250,15 @@ public int available() throws IOException {\n \t\t@Override\n \t\tpublic int read() {\n \t\t\treturn readInternal(\n-\t\t\t\t\tbuffer -> buffer.hasRemaining() ? buffer.get() & 0xFF : -1);\n+\t\t\t\t\tbuffer -> readableByteCount() > 0 ? buffer.get() & 0xFF : -1);\n \t\t}\n \n \t\t@Override\n \t\tpublic int read(byte[] bytes, int off, int len) throws IOException {\n \t\t\treturn readInternal(buffer -> {\n-\t\t\t\tif (buffer.hasRemaining()) {\n-\t\t\t\t\tint minLen = Math.min(len, buffer.remaining());\n+\t\t\t\tint count = readableByteCount();\n+\t\t\t\tif (count > 0) {\n+\t\t\t\t\tint minLen = Math.min(len, count);\n \t\t\t\t\tbuffer.get(bytes, off, minLen);\n \t\t\t\t\treturn minLen;\n \t\t\t\t}",
    "output": "Fix issue with DefaultDataBuffer.asInputStream"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -106,7 +106,7 @@ private class AsyncHandler implements HttpHandler {\n \t\t@Override\n \t\tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\t\treturn response.setBody(Stream.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n-\t\t\t                              .timer(Timer.global())\n+\t\t\t                              .useTimer(Timer.global())\n \t\t\t                              .throttleRequest(100)\n \t\t\t                              .dispatchOn(asyncGroup)\n \t\t\t                              .collect(allocator::allocateBuffer,",
    "output": "sync with reactor-stream update"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java b/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/env/PropertySourceTests.java\n@@ -110,8 +110,7 @@ public void toString_verbosityVariesOnLogLevel() {\n \t\t\t\t\tps.toString(),\n \t\t\t\t\tequalTo(String.format(\"%s [name='%s']\",\n \t\t\t\t\t\t\tps.getClass().getSimpleName(),\n-\t\t\t\t\t\t\tname,\n-\t\t\t\t\t\t\tmap.size())));\n+\t\t\t\t\t\t\tname)));\n \t\t} finally {\n \t\t\tlogger.setLevel(original);\n \t\t}",
    "output": "Fix Format-string method arguments"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n@@ -103,7 +103,7 @@ public ConfigurationClass(MetadataReader metadataReader, ConfigurationClass impo\n \tpublic ConfigurationClass(Class<?> clazz, String beanName) {\n \t\tAssert.hasText(beanName, \"Bean name must not be null\");\n \t\tthis.metadata = new StandardAnnotationMetadata(clazz, true);\n-\t\tthis.resource = new DescriptiveResource(clazz.toString());\n+\t\tthis.resource = new DescriptiveResource(clazz.getName());\n \t\tthis.beanName = beanName;\n \t}\n \n@@ -117,7 +117,7 @@ public ConfigurationClass(Class<?> clazz, String beanName) {\n \t */\n \tpublic ConfigurationClass(Class<?> clazz, ConfigurationClass importedBy) {\n \t\tthis.metadata = new StandardAnnotationMetadata(clazz, true);\n-\t\tthis.resource = new DescriptiveResource(clazz.toString());\n+\t\tthis.resource = new DescriptiveResource(clazz.getName());\n \t\tthis.importedBy.add(importedBy);\n \t}\n ",
    "output": "Consistent descriptions for ConfigurationClass Previously, a ConfigurationClass created from AnnotationMetadata and a ConfigurationClass created from a class would have subtly different descriptions. Given a class named com.example.Foo, the former’s description would be “com.example.Foo”, whereas the latter’s description would be “class com.example.Foo”. This commit updates ConfigurationClass to make the description consistent, preferring the description without “class” in it"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -140,6 +140,9 @@\n public class CommonAnnotationBeanPostProcessor extends InitDestroyAnnotationBeanPostProcessor\n \t\timplements InstantiationAwareBeanPostProcessor, BeanFactoryAware, Serializable {\n \n+\t// Common Annotations 1.1 Resource.lookup() available? Not present on JDK 6...\n+\tprivate static final Method lookupAttribute = ClassUtils.getMethodIfAvailable(Resource.class, \"lookup\");\n+\n \tprivate static Class<? extends Annotation> webServiceRefClass = null;\n \n \tprivate static Class<? extends Annotation> ejbRefClass = null;\n@@ -604,7 +607,9 @@ else if (beanFactory instanceof ConfigurableBeanFactory){\n \t\t\t}\n \t\t\tthis.name = resourceName;\n \t\t\tthis.lookupType = resourceType;\n-\t\t\tthis.mappedName = resource.mappedName();\n+\t\t\tString lookupValue = (lookupAttribute != null ?\n+\t\t\t\t\t(String) ReflectionUtils.invokeMethod(lookupAttribute, resource) : null);\n+\t\t\tthis.mappedName = (StringUtils.hasLength(lookupValue) ? lookupValue : resource.mappedName());\n \t\t\tLazy lazy = ae.getAnnotation(Lazy.class);\n \t\t\tthis.lazyLookup = (lazy != null && lazy.value());\n \t\t}",
    "output": "Support for Common Annotations 1.1 Resource.lookupattribute Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java\n@@ -131,13 +131,13 @@ public interface ConfigurableApplicationContext extends ApplicationContext, Life\n \tvoid addApplicationListener(ApplicationListener<?> listener);\n \n \t/**\n-\t * Register the given resource resolver with this application context,\n+\t * Register the given protocol resolver with this application context,\n \t * allowing for additional resource protocols to be handled.\n \t * <p>Any such resolver will be invoked ahead of this context's standard\n \t * resolution rules. It may therefore also override any default rules.\n \t * @since 4.3\n \t */\n-\tvoid addResourceResolver(ProtocolResolver protocolHandler);\n+\tvoid addProtocolResolver(ProtocolResolver resolver);\n \n \t/**\n \t * Load or refresh the persistent representation of the configuration,",
    "output": "Fix addProtocolResolver signature in ConfigurableApplicationContext"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/RequestMappingHandlerAdapter.java\n@@ -23,7 +23,6 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import io.netty.buffer.UnpooledByteBufAllocator;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import reactor.core.publisher.Mono;\n@@ -37,7 +36,7 @@\n import org.springframework.core.convert.ConversionService;\n import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.core.io.buffer.DataBufferAllocator;\n-import org.springframework.core.io.buffer.NettyDataBufferAllocator;\n+import org.springframework.core.io.buffer.DefaultDataBufferAllocator;\n import org.springframework.ui.ExtendedModelMap;\n import org.springframework.ui.ModelMap;\n import org.springframework.util.ObjectUtils;\n@@ -62,8 +61,7 @@ public class RequestMappingHandlerAdapter implements HandlerAdapter, Initializin\n \n \tprivate ConversionService conversionService = new DefaultConversionService();\n \n-\tprivate DataBufferAllocator allocator =\n-\t\t\tnew NettyDataBufferAllocator(new UnpooledByteBufAllocator(false));\n+\tprivate DataBufferAllocator allocator = new DefaultDataBufferAllocator();\n \n \tprivate final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache =\n \t\t\tnew ConcurrentHashMap<>(64);",
    "output": "Use default buffer allocator in RequestMappingHandlerAdapter This commit removes RequestMappingHandlerAdapter's hard dependency on Netty by switching to the DefaultDataBufferAllocator"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -130,12 +130,13 @@ public boolean isProcessExternalEntities() {\n \t */\n \tprotected Document buildDocument() {\n \t\ttry {\n+\t\t\tDocumentBuilder documentBuilder;\n \t\t\tsynchronized (this.documentBuilderFactoryMonitor) {\n \t\t\t\tif (this.documentBuilderFactory == null) {\n \t\t\t\t\tthis.documentBuilderFactory = createDocumentBuilderFactory();\n \t\t\t\t}\n+\t\t\t\tdocumentBuilder = createDocumentBuilder(this.documentBuilderFactory);\n \t\t\t}\n-\t\t\tDocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);\n \t\t\treturn documentBuilder.newDocument();\n \t\t}\n \t\tcatch (ParserConfigurationException ex) {",
    "output": "AbstractMarshaller defensively uses DocumentBuilderFactory within synchronized block Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -367,8 +367,8 @@ protected ModelAndView doResolveHandlerMethodException(HttpServletRequest reques\n \t\t\texceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception, handlerMethod);\n \t\t}\n \t\tcatch (Exception invocationEx) {\n-\t\t\tif (logger.isErrorEnabled()) {\n-\t\t\t\tlogger.error(\"Failed to invoke @ExceptionHandler method: \" + exceptionHandlerMethod, invocationEx);\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Failed to invoke @ExceptionHandler method: \" + exceptionHandlerMethod, invocationEx);\n \t\t\t}\n \t\t\treturn null;\n \t\t}",
    "output": "Reduce log level for @ExceptionHandler failure Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -312,6 +312,9 @@ protected Resource[] findAllClassPathResources(String location) throws IOExcepti\n \t\t\tpath = path.substring(1);\n \t\t}\n \t\tSet<Resource> result = doFindAllClassPathResources(path);\n+\t\tif (logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(\"Resolved classpath location [\" + location + \"] to resources \" + result);\n+\t\t}\n \t\treturn result.toArray(new Resource[result.size()]);\n \t}\n ",
    "output": "PathMatchingResourcePatternResolver consistently logs retrieval results Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -146,14 +146,18 @@ protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, Meth\n \n \t\tObject arg = readWithMessageConverters(inputMessage, methodParam, paramType);\n \t\tif (arg == null) {\n-\t\t\tif (methodParam.getParameterAnnotation(RequestBody.class).required()) {\n+\t\t\tif (checkRequired(methodParam)) {\n \t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" +\n \t\t\t\t\t\tmethodParam.getMethod().toGenericString());\n \t\t\t}\n \t\t}\n \t\treturn arg;\n \t}\n \n+\tprotected boolean checkRequired(MethodParameter methodParam) {\n+\t\treturn methodParam.getParameterAnnotation(RequestBody.class).required();\n+\t}\n+\n \t@Override\n \tpublic void handleReturnValue(Object returnValue, MethodParameter returnType,\n \t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)",
    "output": "Add protected method for required RequestBody"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -25,7 +25,7 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import reactor.core.publisher.Mono;\n-import reactor.core.publisher.ProcessorGroup;\n+import reactor.core.publisher.SchedulerGroup;\n import reactor.core.timer.Timer;\n import reactor.rx.Stream;\n \n@@ -50,7 +50,7 @@\n @RunWith(Parameterized.class)\n public class AsyncIntegrationTests {\n \n-\tprivate final ProcessorGroup asyncGroup = ProcessorGroup.async();\n+\tprivate final SchedulerGroup asyncGroup = SchedulerGroup.async();\n \n \tprivate final DataBufferAllocator allocator = new DefaultDataBufferAllocator();\n ",
    "output": "sync reactor-core scheduler"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n@@ -131,7 +131,7 @@ public RequestBodyPublisher(HttpServerExchange exchange,\n \t\t@Override\n \t\tpublic void subscribe(Subscriber<? super DataBuffer> subscriber) {\n \t\t\tif (subscriber == null) {\n-\t\t\t\tthrow Exceptions.spec_2_13_exception();\n+\t\t\t\tthrow Exceptions.argumentIsNullException();\n \t\t\t}\n \t\t\tif (this.subscriber != null) {\n \t\t\t\tsubscriber.onError(new IllegalStateException(\"Only one subscriber allowed\"));\n\ndiff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -27,6 +27,7 @@\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.ProcessorGroup;\n import reactor.core.publisher.Processors;\n+import reactor.core.timer.Timer;\n import reactor.rx.Stream;\n \n import org.springframework.core.io.buffer.DataBufferAllocator;",
    "output": "fix timer issues sync reactor-core"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/AsyncIntegrationTests.java\n@@ -27,7 +27,6 @@\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.ProcessorGroup;\n import reactor.core.publisher.Processors;\n-import reactor.core.timer.Timers;\n import reactor.rx.Stream;\n \n import org.springframework.core.io.buffer.DataBufferAllocator;\n@@ -107,7 +106,7 @@ private class AsyncHandler implements HttpHandler {\n \t\t@Override\n \t\tpublic Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {\n \t\t\treturn response.setBody(Stream.just(\"h\", \"e\", \"l\", \"l\", \"o\")\n-\t\t\t                              .timer(Timers.global())\n+\t\t\t                              .timer(Timer.global())\n \t\t\t                              .throttleRequest(100)\n \t\t\t                              .dispatchOn(asyncGroup)\n \t\t\t                              .collect(allocator::allocateBuffer,",
    "output": "fix compile test issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n@@ -216,7 +216,6 @@ private void assertMessageContains(AssertionError error, String expected) {\n \n \n \t@Controller\n-\t@SuppressWarnings(\"unused\")\n \tprivate static class PersonController {\n \n \t\tprivate long timestamp;",
    "output": "Clean up warnings in spring-test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n@@ -1,11 +1,11 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright (c) 2011-2016 Pivotal Software Inc, All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n \n package org.springframework.http.server.reactive.boot;\n \n-import reactor.core.graph.Connectable;\n+import reactor.core.flow.Loopback;\n import reactor.core.state.Completable;\n import reactor.io.buffer.Buffer;\n import reactor.io.net.ReactiveNet;\n@@ -30,7 +30,7 @@\n  * @author Stephane Maldini\n  */\n public class ReactorHttpServer extends HttpServerSupport\n-\t\timplements HttpServer, Connectable, Completable {\n+\t\timplements HttpServer, Loopback, Completable {\n \n \tprivate ReactorHttpHandlerAdapter reactorHandler;\n ",
    "output": "Sync with RSC move graph to flow"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n@@ -1,11 +1,11 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright (c) 2011-2016 Pivotal Software Inc, All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n \n package org.springframework.http.server.reactive.boot;\n \n-import reactor.core.trait.Completable;\n-import reactor.core.trait.Connectable;\n+import reactor.core.graph.Connectable;\n+import reactor.core.state.Completable;\n import reactor.io.buffer.Buffer;\n import reactor.io.net.ReactiveNet;\n ",
    "output": "sync updates with mono"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java\n@@ -109,7 +109,6 @@ public boolean supportsParameter(MethodParameter parameter) {\n \t}\n \n \t@Override\n-\t@UsesJava8\n \tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n \t\t\tNativeWebRequest request, WebDataBinderFactory binderFactory) throws Exception {\n \n@@ -182,6 +181,7 @@ private String getPartName(MethodParameter methodParam, RequestPart requestPart)\n \t/**\n \t * Inner class to avoid hard-coded dependency on Java 8 Optional type...\n \t */\n+\t@UsesJava8\n \tprivate static class OptionalResolver {\n \n \t\tpublic static Object resolveValue(Object value) {",
    "output": "@UsesJava8 declaration on inner class Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java\n@@ -33,6 +33,7 @@\n import org.springframework.web.server.WebServerExchange;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n \n /**",
    "output": "Fix the build that bad boy @smaldini broke"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -129,6 +129,10 @@ protected void doRegisterBeanDefinitions(Element root) {\n \t\t\t\tString[] specifiedProfiles = StringUtils.tokenizeToStringArray(\n \t\t\t\t\t\tprofileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);\n \t\t\t\tif (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {\n+\t\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\t\tlogger.info(\"Skipped XML bean definition file due to specified profiles [\" + profileSpec +\n+\t\t\t\t\t\t\t\t\"] not matching: \" + getReaderContext().getResource());\n+\t\t\t\t\t}\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}",
    "output": "Log profile-based exclusion of XML bean definition file Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java\n@@ -149,7 +149,7 @@ public void match(ClientHttpRequest request) throws IOException, AssertionError\n \tpublic RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {\n \t\treturn new RequestMatcher() {\n \t\t\t@Override\n-\t\t\tpublic void match(ClientHttpRequest request) throws IOException, AssertionError {\n+\t\t\tpublic void match(final ClientHttpRequest request) throws IOException, AssertionError {\n \t\t\t\tHttpInputMessage inputMessage = new HttpInputMessage() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic InputStream getBody() throws IOException {",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java\n@@ -69,11 +69,12 @@ public HttpMethod getMethod() {\n \n \t@Override\n \tprotected URI initUri() throws URISyntaxException {\n-\t\treturn new URI(getServletRequest().getScheme(), null,\n-\t\t\t\tgetServletRequest().getServerName(),\n-\t\t\t\tgetServletRequest().getServerPort(),\n-\t\t\t\tgetServletRequest().getRequestURI(),\n-\t\t\t\tgetServletRequest().getQueryString(), null);\n+\t\tStringBuffer url = this.request.getRequestURL();\n+\t\tString query = this.request.getQueryString();\n+\t\tif (StringUtils.hasText(query)) {\n+\t\t\turl.append('?').append(query);\n+\t\t}\n+\t\treturn new URI(url.toString());\n \t}\n \n \t@Override",
    "output": "Based on fix in core for"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java\n@@ -36,9 +36,9 @@\n import org.xnio.channels.StreamSinkChannel;\n import org.xnio.channels.StreamSourceChannel;\n import reactor.Mono;\n-import reactor.core.error.Exceptions;\n import reactor.core.subscriber.BaseSubscriber;\n import reactor.core.support.BackpressureUtils;\n+import reactor.core.support.Exceptions;\n \n import org.springframework.util.Assert;\n ",
    "output": "upgrade DependencyUtils package"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/AbstractPropertyAccessorTests.java b/spring-beans/src/test/java/org/springframework/beans/AbstractPropertyAccessorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/AbstractPropertyAccessorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/AbstractPropertyAccessorTests.java\n@@ -2209,18 +2209,28 @@ public static void setProp1(String prop1) {\n \t\t}\n \t}\n \n-\tstatic class Spr13837Bean {\n+\tinterface Spr13837 {\n+\n+\t\tInteger getSomething();\n+\n+\t\t<T extends Spr13837> T setSomething(Integer something);\n+\n+\t}\n+\n+\tstatic class Spr13837Bean implements Spr13837 {\n \n \t\tprotected Integer something;\n \n+\t\t@Override\n+\t\tpublic Integer getSomething() {\n+\t\t\treturn this.something;\n+\t\t}\n+\n+\t\t@Override\n \t\tpublic Spr13837Bean setSomething(final Integer something) {\n \t\t\tthis.something = something;\n \t\t\treturn this;\n \t\t}\n-\n-\t\tpublic Integer getSomething() {\n-\t\t\treturn this.something;\n-\t\t}\n \t}\n \n \t@SuppressWarnings(\"serial\")",
    "output": "Refine test Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,7 +82,9 @@ private void assertAdviceWasApplied(Class<?> configClass) {\n \tpublic void withInnerClassAndLambdaExpression() {\n \t\tApplicationContext ctx = new AnnotationConfigApplicationContext(Application.class, CountingAspect.class);\n \t\tctx.getBeansOfType(Runnable.class).forEach((k, v) -> v.run());\n-\t\tassertEquals(2, ctx.getBean(CountingAspect.class).count);\n+\n+\t\t// TODO: returns just 1 as of AspectJ 1.9 beta 3, not detecting the applicable lambda expression anymore\n+\t\t// assertEquals(2, ctx.getBean(CountingAspect.class).count);\n \t}\n \n ",
    "output": "TODO marker for test which fails as of AspectJ 1.9 beta 3 Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java\n@@ -31,6 +31,7 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n \n+import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.core.MethodIntrospector;\n@@ -223,7 +224,9 @@ public T inspect(Method method) {\n \t\t\tlogger.debug(methods.size() + \" request handler methods found on \" + userType + \": \" + methods);\n \t\t}\n \t\tfor (Map.Entry<Method, T> entry : methods.entrySet()) {\n-\t\t\tregisterHandlerMethod(handler, entry.getKey(), entry.getValue());\n+\t\t\tMethod invocableMethod = AopUtils.selectInvocableMethod(entry.getKey(), userType);\n+\t\t\tT mapping = entry.getValue();\n+\t\t\tregisterHandlerMethod(handler, invocableMethod, mapping);\n \t\t}\n \t}\n ",
    "output": "Validate @RequestMapping methods on AOP proxies Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/MediaType.java b/spring-web/src/main/java/org/springframework/http/MediaType.java\n--- a/spring-web/src/main/java/org/springframework/http/MediaType.java\n+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java\n@@ -111,6 +111,16 @@ public class MediaType extends MimeType implements Serializable {\n \t */\n \tpublic final static String APPLICATION_OCTET_STREAM_VALUE = \"application/octet-stream\";\n \n+\t/**\n+\t * Public constant media type for {@code application/pdf}.\n+\t *  */\n+\tpublic final static MediaType APPLICATION_PDF;\n+\n+\t/**\n+\t * A String equivalent of {@link MediaType#APPLICATION_PDF}.\n+\t */\n+\tpublic final static String APPLICATION_PDF_VALUE = \"application/pdf\";\n+\n \t/**\n \t * Public constant media type for {@code application/xhtml+xml}.\n \t *  */\n@@ -212,6 +222,7 @@ public class MediaType extends MimeType implements Serializable {\n \t\tAPPLICATION_JSON = valueOf(APPLICATION_JSON_VALUE);\n \t\tAPPLICATION_JSON_UTF8 = valueOf(APPLICATION_JSON_UTF8_VALUE);\n \t\tAPPLICATION_OCTET_STREAM = valueOf(APPLICATION_OCTET_STREAM_VALUE);\n+\t\tAPPLICATION_PDF = valueOf(APPLICATION_PDF_VALUE);\n \t\tAPPLICATION_XHTML_XML = valueOf(APPLICATION_XHTML_XML_VALUE);\n \t\tAPPLICATION_XML = valueOf(APPLICATION_XML_VALUE);\n \t\tIMAGE_GIF = valueOf(IMAGE_GIF_VALUE);",
    "output": "Add MediaType constants for application/pdf Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java\n@@ -30,9 +30,11 @@\n import org.reactivestreams.Publisher;\n import reactor.Mono;\n \n+import org.springframework.core.MethodParameter;\n import org.springframework.core.Ordered;\n import org.springframework.core.ResolvableType;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n+import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.core.codec.Encoder;\n import org.springframework.core.convert.ConversionService;\n import org.springframework.http.MediaType;\n@@ -120,8 +122,10 @@ public int getOrder() {\n \tpublic boolean supports(HandlerResult result) {\n \t\tObject handler = result.getHandler();\n \t\tif (handler instanceof HandlerMethod) {\n-\t\t\tMethod method = ((HandlerMethod) handler).getMethod();\n-\t\t\treturn AnnotatedElementUtils.isAnnotated(method, ResponseBody.class.getName());\n+\t\t\tMethodParameter returnType = ((HandlerMethod) handler).getReturnType();\n+\t\t\tClass<?> containingClass = returnType.getContainingClass();\n+\t\t\treturn (AnnotationUtils.findAnnotation(containingClass, ResponseBody.class) != null ||\n+\t\t\t\t\treturnType.getMethodAnnotation(ResponseBody.class) != null);\n \t\t}\n \t\treturn false;\n \t}",
    "output": "Support type-level @ResponeBody (and @RestController)"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -272,7 +272,8 @@ else if (method.getName().equals(\"unwrap\")) {\n \t\t\telse if (transactionRequiringMethods.contains(method.getName())) {\n \t\t\t\t// We need a transactional target now, according to the JPA spec.\n \t\t\t\t// Otherwise, the operation would get accepted but remain unflushed...\n-\t\t\t\tif (target == null || !TransactionSynchronizationManager.isActualTransactionActive()) {\n+\t\t\t\tif (target == null || (!TransactionSynchronizationManager.isActualTransactionActive() &&\n+\t\t\t\t\t\t!target.getTransaction().isActive())) {\n \t\t\t\t\tthrow new TransactionRequiredException(\"No EntityManager with actual transaction available \" +\n \t\t\t\t\t\t\t\"for current thread - cannot reliably process '\" + method.getName() + \"' call\");\n \t\t\t\t}",
    "output": "Shared EntityManager does not insist on actualTransactionActive flag anymore Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n@@ -138,7 +138,7 @@ public void setContentLength(int len) {\n \t// Overrides Servlet 3.1 setContentLengthLong(long) at runtime\n \tpublic void setContentLengthLong(long len) {\n \t\tif (len > Integer.MAX_VALUE) {\n-\t\t\tthrow new IllegalArgumentException(\"Content-Length exceeds ShallowEtagHeaderFilter's maximum (\" +\n+\t\t\tthrow new IllegalArgumentException(\"Content-Length exceeds ContentCachingResponseWrapper's maximum (\" +\n \t\t\t\t\tInteger.MAX_VALUE + \"): \" + len);\n \t\t}\n \t\tint lenInt = (int) len;",
    "output": "Improve Content-Length exception message In case ShallowEtagHeaderFilter is not used, the message was confusing"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -132,8 +132,7 @@ private List<Mono<Object>> resolveArguments(ServerHttpRequest request, Object...\n \t\t\t\t\t\t\t.orElseThrow(() -> getArgError(\"No resolver for \", parameter, null));\n \t\t\t\t\ttry {\n \t\t\t\t\t\treturn resolver.resolveArgument(parameter, request)\n-\t\t\t\t\t\t\t\t// TODO Add a defaultIfEmpty alias to Mono to avoid conversion to Flux\n-\t\t\t\t\t\t\t\t.flux().defaultIfEmpty(NO_VALUE).next()\n+\t\t\t\t\t\t\t\t.defaultIfEmpty(NO_VALUE)\n \t\t\t\t\t\t\t\t.otherwise(ex -> Mono.error(getArgError(\"Error resolving \", parameter, ex)));\n \t\t\t\t\t}\n \t\t\t\t\tcatch (Exception ex) {",
    "output": "Use Mono#defaultIfEmpty instead of Flux#defaultIfEmpty"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1475,9 +1475,14 @@ protected Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd\n \t\t\t\t\tlogger.debug(\"Bean currently in creation on FactoryBean type check: \" + ex);\n \t\t\t\t}\n \t\t\t}\n+\t\t\telse if (mbd.isLazyInit()) {\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"Bean creation exception on lazy FactoryBean type check: \" + ex);\n+\t\t\t\t}\n+\t\t\t}\n \t\t\telse {\n \t\t\t\tif (logger.isWarnEnabled()) {\n-\t\t\t\t\tlogger.warn(\"Bean creation exception on FactoryBean type check: \" + ex);\n+\t\t\t\t\tlogger.warn(\"Bean creation exception on non-lazy FactoryBean type check: \" + ex);\n \t\t\t\t}\n \t\t\t}\n \t\t\tonSuppressedException(ex);",
    "output": "Avoid getTypeForFactoryBean warn logging for lazy-init beans Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java\n@@ -24,9 +24,6 @@\n import reactor.core.publisher.convert.RxJava1Converter;\n import rx.Observable;\n \n-import org.springframework.http.server.reactive.HttpHandler;\n-import org.springframework.http.server.reactive.RxNettyServerHttpRequest;\n-import org.springframework.http.server.reactive.RxNettyServerHttpResponse;\n import org.springframework.util.Assert;\n \n /**",
    "output": "Switch to rxnetty-http dependency The \"rxnetty\" artifact is old (October 2015). There is now rxnetty-http and other modules that have more recent snapshots (December 2015)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n@@ -33,6 +33,7 @@\n  * @author Keesun Baik\n  * @author Rossen Stoyanchev\n  * @author Sebastien Deleuze\n+ * @author Brian Clozel\n  * @since 3.2\n  */\n public class StatusResultMatchers {\n@@ -561,6 +562,14 @@ public ResultMatcher isRequestHeaderFieldsTooLarge() {\n \t\treturn matcher(HttpStatus.valueOf(431));\n \t}\n \n+\t/**\n+\t * Assert the response status code is {@code HttpStatus.UNAVAILABLE_FOR_LEGAL_REASONS} (451).\n+\t * @since 4.3\n+\t */\n+\tpublic ResultMatcher isUnavailableForLegalReasons() {\n+\t\treturn matcher(HttpStatus.valueOf(451));\n+\t}\n+\n \t/**\n \t * Assert the response status code is {@code HttpStatus.INTERNAL_SERVER_ERROR} (500).\n \t */",
    "output": "Add missing StatusResultMatcher for HTTP Status 451 Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -277,7 +277,11 @@ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, S\n \t\t\t\t\tif (jdbcDriverName == null) {\n \t\t\t\t\t\tjdbcDriverName = dbmd.getDriverName();\n \t\t\t\t\t}\n-\t\t\t\t\tif (checkGetParameterType) {\n+\t\t\t\t\tif (checkGetParameterType &&\n+\t\t\t\t\t\t\t!(jdbcDriverName.startsWith(\"Oracle\") && dbmd.getDriverMajorVersion() >= 12)) {\n+\t\t\t\t\t\t// Register JDBC driver with no support for getParameterType, except for the\n+\t\t\t\t\t\t// Oracle 12c driver where getParameterType fails for specific statements only\n+\t\t\t\t\t\t// (so an exception thrown above does not indicate general lack of support).\n \t\t\t\t\t\tdriversWithNoSupportForGetParameterType.add(jdbcDriverName);\n \t\t\t\t\t}\n \t\t\t\t\tString databaseProductName = dbmd.getDatabaseProductName();",
    "output": "StatementCreatorUtils always tries getParameterType on Oracle 12c driver Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCache.java\n@@ -22,6 +22,7 @@\n import com.github.benmanes.caffeine.cache.LoadingCache;\n \n import org.springframework.cache.support.AbstractValueAdaptingCache;\n+import org.springframework.lang.UsesJava8;\n import org.springframework.util.Assert;\n \n /**\n@@ -35,6 +36,7 @@\n  * @author Stephane Nicoll\n  * @since 4.3\n  */\n+@UsesJava8\n public class CaffeineCache extends AbstractValueAdaptingCache {\n \n \tprivate final String name;",
    "output": "Flag Caffeine as Java8+ only See also"
  },
  {
    "input": "diff --git a/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java b/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java\n--- a/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java\n+++ b/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,7 @@\n \n import org.junit.Before;\n import org.junit.Test;\n+\n import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n@@ -61,10 +62,10 @@ public void failsWhenJdkProxyAndScheduledMethodNotPresentOnInterface() {\n \t\tctx.register(Config.class, JdkProxyTxConfig.class, RepoConfigA.class);\n \t\ttry {\n \t\t\tctx.refresh();\n-\t\t\tfail(\"expected exception\");\n+\t\t\tfail(\"Should have thrown BeanCreationException\");\n \t\t}\n \t\tcatch (BeanCreationException ex) {\n-\t\t\tassertTrue(ex.getRootCause().getMessage().startsWith(\"@Scheduled method 'scheduled' found\"));\n+\t\t\tassertTrue(ex.getRootCause() instanceof IllegalStateException);\n \t\t}\n \t}\n ",
    "output": "Expect IllegalStateException instead of specific message for @Scheduled proxy mismatch Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java\n@@ -25,6 +25,7 @@\n \n import org.junit.Test;\n import org.reactivestreams.Publisher;\n+import reactor.Publishers;\n import reactor.io.buffer.Buffer;\n import reactor.rx.Promise;\n import reactor.rx.Promises;",
    "output": "test operator log"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java\n@@ -31,14 +31,6 @@\n import javax.websocket.Extension;\n import javax.websocket.server.ServerEndpointConfig;\n \n-import org.springframework.http.server.ServerHttpRequest;\n-import org.springframework.http.server.ServerHttpResponse;\n-import org.springframework.util.ClassUtils;\n-import org.springframework.util.ReflectionUtils;\n-import org.springframework.web.socket.server.HandshakeFailureException;\n-\n-import org.xnio.StreamConnection;\n-\n import io.undertow.server.HttpServerExchange;\n import io.undertow.server.HttpUpgradeListener;\n import io.undertow.servlet.api.InstanceFactory;\n@@ -58,6 +50,13 @@\n import io.undertow.websockets.jsr.handshake.JsrHybi08Handshake;\n import io.undertow.websockets.jsr.handshake.JsrHybi13Handshake;\n import io.undertow.websockets.spi.WebSocketHttpExchange;\n+import org.xnio.StreamConnection;\n+\n+import org.springframework.http.server.ServerHttpRequest;\n+import org.springframework.http.server.ServerHttpResponse;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.ReflectionUtils;\n+import org.springframework.web.socket.server.HandshakeFailureException;\n \n /**\n  * A WebSocket {@code RequestUpgradeStrategy} for use with WildFly and its",
    "output": "Aligned import order"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerExceptionMapperTests.java\n@@ -20,8 +20,6 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.HttpMediaTypeNotAcceptableException;\n import org.springframework.web.ResponseStatusException;\n@@ -45,7 +43,7 @@ public void setUp() throws Exception {\n \n \t@Test\n \tpublic void handlerNotFound() throws Exception {\n-\t\tThrowable ex = new HandlerNotFoundException(HttpMethod.GET, \"/path\", new HttpHeaders());\n+\t\tThrowable ex = new HandlerNotFoundException();\n \t\tex = this.mapper.apply(ex);\n \n \t\tassertEquals(ResponseStatusException.class, ex.getClass());",
    "output": "Fix test failure"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandlerTests.java\n@@ -53,7 +53,7 @@ public void setUp() throws Exception {\n \n \t@Test\n \tpublic void handleErrorSignal() throws Exception {\n-\t\tHttpExceptionHandler exceptionHandler = new UnresolvedExceptionHandler();\n+\t\tHttpExceptionHandler exceptionHandler = new HttpStatusExceptionHandler(HttpStatus.INTERNAL_SERVER_ERROR);\n \t\tHttpHandler targetHandler = new TestHttpHandler(new IllegalStateException(\"boo\"));\n \t\tHttpHandler handler = new ErrorHandlingHttpHandler(targetHandler, exceptionHandler);\n ",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/boot/ReactorHttpServer.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.http.server.reactive.boot;\n \n+import reactor.core.support.ReactiveState;\n import reactor.io.buffer.Buffer;\n import reactor.io.net.ReactiveNet;\n \n@@ -27,7 +28,7 @@\n  * @author Stephane Maldini\n  */\n public class ReactorHttpServer extends HttpServerSupport\n-\t\timplements InitializingBean, HttpServer {\n+\t\timplements InitializingBean, HttpServer, ReactiveState.FeedbackLoop, ReactiveState.ActiveUpstream {\n \n \tprivate ReactorHttpHandlerAdapter reactorHandler;\n \n@@ -50,6 +51,26 @@ public void afterPropertiesSet() throws Exception {\n \t\t\t\tReactiveNet.httpServer());\n \t}\n \n+\t@Override\n+\tpublic Object delegateInput() {\n+\t\treturn reactorServer;\n+\t}\n+\n+\t@Override\n+\tpublic Object delegateOutput() {\n+\t\treturn reactorServer;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isStarted() {\n+\t\treturn running;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isTerminated() {\n+\t\treturn !running;\n+\t}\n+\n \t@Override\n \tpublic void start() {\n \t\tif (!this.running) {",
    "output": "minor reactor server impl to fulfill core introspection"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectEncoder.java b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectEncoder.java\n--- a/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectEncoder.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/JsonObjectEncoder.java\n@@ -112,7 +112,7 @@ protected void doNext(ByteBuffer next) {\n \t\t\tbuffer.flip();\n \n \t\t\tBackpressureUtils.getAndSub(REQUESTED, this, 1L);\n-\t\t\tdownstream().onNext(buffer.byteBuffer());\n+\t\t\tsubscriber.onNext(buffer.byteBuffer());\n \t\t}\n \n \t\tprotected void drainLast(){\n@@ -123,7 +123,7 @@ protected void drainLast(){\n \t\t\t\t\tbuffer.append(\"]\");\n \t\t\t\t}\n \t\t\t\tbuffer.flip();\n-\t\t\t\tdownstream().onNext(buffer.byteBuffer());\n+\t\t\t\tsubscriber.onNext(buffer.byteBuffer());\n \t\t\t\tsuper.doComplete();\n \t\t\t}\n \t\t}",
    "output": "Prepare for a future change to downstreaminner method in reactor-core"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -282,7 +282,8 @@ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, S\n \t\t\t\t\t}\n \t\t\t\t\tString databaseProductName = dbmd.getDatabaseProductName();\n \t\t\t\t\tif (databaseProductName.startsWith(\"Informix\") ||\n-\t\t\t\t\t\t\tjdbcDriverName.startsWith(\"Microsoft SQL Server\")) {\n+\t\t\t\t\t\t\t(jdbcDriverName.startsWith(\"Microsoft\") && jdbcDriverName.contains(\"SQL Server\"))) {\n+\t\t\t\t\t\t\t// \"Microsoft SQL Server JDBC Driver 3.0\" versus \"Microsoft JDBC Driver 4.0 for SQL Server\"\n \t\t\t\t\t\tuseSetObject = true;\n \t\t\t\t\t}\n \t\t\t\t\telse if (databaseProductName.startsWith(\"DB2\") ||",
    "output": "StatementCreatorUtils detects Microsoft SQL Server driver 4.0 as well Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java\n--- a/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java\n@@ -19,6 +19,7 @@\n import java.lang.annotation.Annotation;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n@@ -102,13 +103,16 @@ private ControllerAdviceBean(Object bean, BeanFactory beanFactory) {\n \t\t}\n \n \t\tControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType, ControllerAdvice.class);\n-\t\tif (annotation == null) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"Bean type [\" + beanType.getName() + \"] is not annotated as @ControllerAdvice\");\n+\t\tif (annotation != null) {\n+\t\t\tthis.basePackages = initBasePackages(annotation);\n+\t\t\tthis.assignableTypes = Arrays.asList(annotation.assignableTypes());\n+\t\t\tthis.annotations = Arrays.asList(annotation.annotations());\n+\t\t}\n+\t\telse {\n+\t\t\tthis.basePackages = Collections.emptySet();\n+\t\t\tthis.assignableTypes = Collections.emptyList();\n+\t\t\tthis.annotations = Collections.emptyList();\n \t\t}\n-\t\tthis.basePackages = initBasePackages(annotation);\n-\t\tthis.assignableTypes = Arrays.asList(annotation.assignableTypes());\n-\t\tthis.annotations = Arrays.asList(annotation.annotations());\n \t}\n \n ",
    "output": "ControllerAdviceBean accepts bean types without @ControllerAdvice annotation (as in 3.2) Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java b/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/servlet31/ResponseBodySubscriber.java\n@@ -25,7 +25,6 @@\n import org.apache.commons.logging.LogFactory;\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n-import reactor.io.buffer.Buffer;\n \n import org.springframework.util.Assert;\n \n@@ -88,9 +87,10 @@ public void onWritePossible() throws IOException {\n \n \t\tif (ready) {\n \t\t\tif (this.buffer != null) {\n-\t\t\t\toutput.write(new Buffer(this.buffer).asBytes());\n+\t\t\t\tbyte[] bytes = new byte[this.buffer.remaining()];\n+\t\t\t\tthis.buffer.get(bytes);\n \t\t\t\tthis.buffer = null;\n-\n+\t\t\t\toutput.write(bytes);\n \t\t\t\tif (!subscriberComplete) {\n \t\t\t\t\tthis.subscription.request(1);\n \t\t\t\t}",
    "output": "Remove isolated use of Reactor Buffer"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -63,7 +63,7 @@ public Publisher<Object> invokeForRequest(ReactiveServerHttpRequest request,\n \t\tList<Publisher<Object>> argPublishers = getMethodArguments(request, providedArgs);\n \n \t\tPublisher<Object[]> argValues = (!argPublishers.isEmpty() ?\n-\t\t\t\tPublishers.<Tuple, Object[]>zip(argPublishers, this::unwrapOptionalArgValues) :\n+\t\t\t\tPublishers.zip(argPublishers, this::unwrapOptionalArgValues) :\n \t\t\t\tPublishers.just(new Object[0]));\n \n \t\treturn Publishers.map(argValues, args -> {",
    "output": "Change to Definitive generic signature for Publishers.zip"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -63,7 +63,7 @@ public Publisher<Object> invokeForRequest(ReactiveServerHttpRequest request,\n \t\tList<Publisher<Object>> argPublishers = getMethodArguments(request, providedArgs);\n \n \t\tPublisher<Object[]> argValues = (!argPublishers.isEmpty() ?\n-\t\t\t\tPublishers.zip(argPublishers, this::unwrapOptionalArgValues) :\n+\t\t\t\tPublishers.<Tuple, Object[]>zip(argPublishers, this::unwrapOptionalArgValues) :\n \t\t\t\tPublishers.just(new Object[0]));\n \n \t\treturn Publishers.map(argValues, args -> {",
    "output": "compiler issue ?"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n--- a/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java\n@@ -26,7 +26,6 @@\n import org.reactivestreams.Publisher;\n import reactor.Publishers;\n import reactor.fn.tuple.Tuple;\n-import reactor.rx.Streams;\n \n import org.springframework.core.DefaultParameterNameDiscoverer;\n import org.springframework.core.GenericTypeResolver;\n@@ -64,7 +63,7 @@ public Publisher<Object> invokeForRequest(ReactiveServerHttpRequest request,\n \t\tList<Publisher<Object>> argPublishers = getMethodArguments(request, providedArgs);\n \n \t\tPublisher<Object[]> argValues = (!argPublishers.isEmpty() ?\n-\t\t\t\tStreams.zip(argPublishers, this::unwrapOptionalArgValues) :\n+\t\t\t\tPublishers.zip(argPublishers, this::unwrapOptionalArgValues) :\n \t\t\t\tPublishers.just(new Object[0]));\n \n \t\treturn Publishers.map(argValues, args -> {",
    "output": "Use Publishers.zip instead of Streams.zip"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -574,7 +574,7 @@ private void copyRange(InputStream in, OutputStream out, long start, long end) t\n \t\t\t\tout.write(buffer, 0, (int) bytesToCopy);\n \t\t\t\tbytesToCopy = 0;\n \t\t\t}\n-\t\t\tif (bytesRead < buffer.length) {\n+\t\t\tif (bytesRead == -1) {\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}",
    "output": "Fix inputstream reading for HTTP range requests Prior to this commit, range requests would be served by ResourceHttpRequestHandler by partially reading the inputstream of static resources. In case of resources contained in ZIP/JAR containers, InputStreams may not fill the entire read buffer when calling `inputStream.read(byte[])`. This was the case when using Spring Boot's ZipInflaterInputStream - this would then not read the entire file content and would close the response without writing the expected body length indicated in the \"Content-Length\" header. This commit makes sure that the whole resource is read. Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java\n@@ -66,27 +66,6 @@ protected EhCacheCache getCache() {\n \tprotected Ehcache getNativeCache() {\n \t\treturn nativeCache;\n \t}\n-\t@Test\n-\tpublic void testCachePut() throws Exception {\n-\t\tObject key = \"enescu\";\n-\t\tObject value = \"george\";\n-\n-\t\tassertNull(cache.get(key));\n-\t\tassertNull(cache.get(key, String.class));\n-\t\tassertNull(cache.get(key, Object.class));\n-\n-\t\tcache.put(key, value);\n-\t\tassertEquals(value, cache.get(key).get());\n-\t\tassertEquals(value, cache.get(key, String.class));\n-\t\tassertEquals(value, cache.get(key, Object.class));\n-\t\tassertEquals(value, cache.get(key, null));\n-\n-\t\tcache.put(key, null);\n-\t\tassertNotNull(cache.get(key));\n-\t\tassertNull(cache.get(key).get());\n-\t\tassertNull(cache.get(key, String.class));\n-\t\tassertNull(cache.get(key, Object.class));\n-\t}\n \n \t@Test\n \tpublic void testExpiredElements() throws Exception {",
    "output": "Remove test duplication"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n@@ -106,6 +106,7 @@ public void testWithNonSingletonAspectInstance() throws Exception {\n \t}\n \n \t@Test  // SPR-13328\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void testProxiedVarargsWithEnumArray() throws Exception {\n \t\tAspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean());\n \t\tproxyFactory.addAspect(LoggingAspectOnVarargs.class);\n@@ -114,6 +115,7 @@ public void testProxiedVarargsWithEnumArray() throws Exception {\n \t}\n \n \t@Test  // SPR-13328\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void testUnproxiedVarargsWithEnumArray() throws Exception {\n \t\tAspectJProxyFactory proxyFactory = new AspectJProxyFactory(new TestBean());\n \t\tproxyFactory.addAspect(LoggingAspectOnSetter.class);\n@@ -126,6 +128,7 @@ public interface ITestBean {\n \n \t\tint getAge();\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\t<V extends MyInterface> boolean doWithVarargs(V... args);\n \t}\n ",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n@@ -94,14 +94,14 @@ public static Class<?> determineTargetClass(ConfigurableListableBeanFactory bean\n \t}\n \n \t/**\n-\t * Expose the given target class for the specified bean.\n+\t * Expose the given target class for the specified bean, if possible.\n \t * @param beanFactory the containing ConfigurableListableBeanFactory\n \t * @param beanName the name of the bean\n \t * @param targetClass the corresponding target class\n \t * @since 4.2.3\n \t */\n \tstatic void exposeTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName, Class<?> targetClass) {\n-\t\tif (beanFactory.containsBeanDefinition(beanName)) {\n+\t\tif (beanName != null && beanFactory.containsBeanDefinition(beanName)) {\n \t\t\tbeanFactory.getMergedBeanDefinition(beanName).setAttribute(ORIGINAL_TARGET_CLASS_ATTRIBUTE, targetClass);\n \t\t}\n \t}",
    "output": "Avoid exposeTargetClass attempt if bean name is null Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java b/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n--- a/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java\n@@ -123,7 +123,9 @@ public PrintWriter getWriter() throws IOException {\n \n \t@Override\n \tpublic void setContentLength(int len) {\n-\t\tthis.content.resize(len);\n+\t\tif (len > this.content.size()) {\n+\t\t\tthis.content.resize(len);\n+\t\t}\n \t\tthis.contentLength = len;\n \t}\n \n@@ -134,13 +136,17 @@ public void setContentLengthLong(long len) {\n \t\t\t\t\tInteger.MAX_VALUE + \"): \" + len);\n \t\t}\n \t\tint lenInt = (int) len;\n-\t\tthis.content.resize(lenInt);\n+\t\tif (lenInt > this.content.size()) {\n+\t\t\tthis.content.resize(lenInt);\n+\t\t}\n \t\tthis.contentLength = lenInt;\n \t}\n \n \t@Override\n \tpublic void setBufferSize(int size) {\n-\t\tthis.content.resize(size);\n+\t\tif (size > this.content.size()) {\n+\t\t\tthis.content.resize(size);\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Restore capacity check before trying output stream resize Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -380,7 +380,7 @@ private void addContentDispositionHeader(ServletServerHttpRequest request,\n \t\tString extInPathParams = StringUtils.getFilenameExtension(pathParams);\n \n \t\tif (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {\n-\t\t\theaders.add(HttpHeaders.CONTENT_DISPOSITION, \"attachment;filename=f.txt\");\n+\t\t\theaders.add(HttpHeaders.CONTENT_DISPOSITION, \"inline;filename=f.txt\");\n \t\t}\n \t}\n ",
    "output": "Switch \"attachment\" to \"inline\" on Content-Disposition Issue: ,"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -1285,7 +1285,7 @@ public void stop() {\n \n \t@Override\n \tpublic boolean isRunning() {\n-\t\treturn getLifecycleProcessor().isRunning();\n+\t\treturn (this.lifecycleProcessor != null && this.lifecycleProcessor.isRunning());\n \t}\n \n ",
    "output": "AbstractApplicationContext.isRunningavoids IllegalStateException Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -541,7 +541,10 @@ public void refresh() throws BeansException, IllegalStateException {\n \t\t\t}\n \n \t\t\tcatch (BeansException ex) {\n-\t\t\t\tlogger.warn(\"Exception encountered during context initialization - cancelling refresh attempt\", ex);\n+\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\tlogger.warn(\"Exception encountered during context initialization - \" +\n+\t\t\t\t\t\t\t\"cancelling refresh attempt: \" + ex);\n+\t\t\t\t}\n \n \t\t\t\t// Destroy already created singletons to avoid dangling resources.\n \t\t\t\tdestroyBeans();",
    "output": "Reduced warn log entry without stacktrace for startup exceptions Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -51,6 +51,10 @@ public abstract class ReflectionUtils {\n \t */\n \tprivate static final String CGLIB_RENAMED_METHOD_PREFIX = \"CGLIB$\";\n \n+\tprivate static final Method[] NO_METHODS = {};\n+\n+\tprivate static final Field[] NO_FIELDS = {};\n+\n \t/**\n \t * Cache for {@link Class#getDeclaredMethods()} plus equivalent default methods\n \t * from Java 8 based interfaces, allowing for fast iteration.\n@@ -617,7 +621,7 @@ private static Method[] getDeclaredMethods(Class<?> clazz) {\n \t\t\telse {\n \t\t\t\tresult = declaredMethods;\n \t\t\t}\n-\t\t\tdeclaredMethodsCache.put(clazz, result);\n+\t\t\tdeclaredMethodsCache.put(clazz, (result.length == 0 ? NO_METHODS : result));\n \t\t}\n \t\treturn result;\n \t}\n@@ -705,7 +709,7 @@ private static Field[] getDeclaredFields(Class<?> clazz) {\n \t\tField[] result = declaredFieldsCache.get(clazz);\n \t\tif (result == null) {\n \t\t\tresult = clazz.getDeclaredFields();\n-\t\t\tdeclaredFieldsCache.put(clazz, result);\n+\t\t\tdeclaredFieldsCache.put(clazz, (result.length == 0 ? NO_FIELDS : result));\n \t\t}\n \t\treturn result;\n \t}",
    "output": "Use constants when caching empty arrays Reduce cache memory consumption by using a single constant for empty arrays"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -762,7 +762,7 @@ public static boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodN\n \t */\n \tpublic static Method getMostSpecificMethod(Method method, Class<?> targetClass) {\n \t\tif (method != null && isOverridable(method, targetClass) &&\n-\t\t\t\ttargetClass != null && !targetClass.equals(method.getDeclaringClass())) {\n+\t\t\t\ttargetClass != null && targetClass != method.getDeclaringClass()) {\n \t\t\ttry {\n \t\t\t\tif (Modifier.isPublic(method.getModifiers())) {\n \t\t\t\t\ttry {\n@@ -914,7 +914,7 @@ public static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {\n \t\t}\n \t\tif (lhsType.isPrimitive()) {\n \t\t\tClass<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);\n-\t\t\tif (resolvedPrimitive != null && lhsType.equals(resolvedPrimitive)) {\n+\t\t\tif (lhsType == resolvedPrimitive) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "Class identity comparisons wherever possible Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java\n@@ -211,6 +211,7 @@ protected FileUpload prepareFileUpload(String encoding) {\n \t\tif (encoding != null && !encoding.equals(fileUpload.getHeaderEncoding())) {\n \t\t\tactualFileUpload = newFileUpload(getFileItemFactory());\n \t\t\tactualFileUpload.setSizeMax(fileUpload.getSizeMax());\n+\t\t\tactualFileUpload.setFileSizeMax(fileUpload.getFileSizeMax());\n \t\t\tactualFileUpload.setHeaderEncoding(encoding);\n \t\t}\n ",
    "output": "CommonsFileUploadSupport applies maxUploadSizePerFile to FileUpload copy as well Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -201,6 +201,9 @@ public static boolean isAnnotated(AnnotatedElement element, final String annotat\n \t\tAssert.notNull(element, \"AnnotatedElement must not be null\");\n \t\tAssert.hasLength(annotationName, \"annotationName must not be null or empty\");\n \n+\t\tif (element.getAnnotations().length == 0) {\n+\t\t\treturn false;\n+\t\t}\n \t\treturn Boolean.TRUE.equals(searchWithGetSemantics(element, annotationName, new SimpleAnnotationProcessor<Boolean>() {\n \t\t\t@Override\n \t\t\tpublic Boolean process(AnnotatedElement annotatedElement, Annotation annotation, int metaDepth) {\n@@ -331,6 +334,9 @@ public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement elem\n \tpublic static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, String annotationName,\n \t\t\tboolean classValuesAsString, boolean nestedAnnotationsAsMap) {\n \n+\t\tif (element.getAnnotations().length == 0) {\n+\t\t\treturn null;\n+\t\t}\n \t\tAnnotationAttributes attributes = searchWithGetSemantics(element, annotationName,\n \t\t\t\tnew MergedAnnotationAttributesProcessor(annotationName, classValuesAsString, nestedAnnotationsAsMap));\n \t\tAnnotationUtils.postProcessAnnotationAttributes(element, attributes, classValuesAsString, nestedAnnotationsAsMap);",
    "output": "Add shortcuts for elements with no annotations Improve the performance of the `getMergedAnnotationAttributes` and `isAnnotated` methods in `AnnotatedElementUtils` by returning immediately when the element had no annotations. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -583,11 +583,12 @@ public static <A extends Annotation> A findAnnotation(Method method, Class<A> an\n \t\t\t}\n \n \t\t\tif (result != null) {\n+\t\t\t\tresult = synthesizeAnnotation(result, method);\n \t\t\t\tfindAnnotationCache.put(cacheKey, result);\n \t\t\t}\n \t\t}\n \n-\t\treturn synthesizeAnnotation(result, method);\n+\t\treturn result;\n \t}\n \n \tprivate static <A extends Annotation> A searchOnInterfaces(Method method, Class<A> annotationType, Class<?>... ifcs) {\n@@ -672,11 +673,12 @@ private static <A extends Annotation> A findAnnotation(Class<?> clazz, Class<A>\n \t\tA result = (A) findAnnotationCache.get(cacheKey);\n \t\tif (result == null) {\n \t\t\tresult = findAnnotation(clazz, annotationType, new HashSet<Annotation>());\n-\t\t\tif (result != null) {\n+\t\t\tif (result != null && synthesize) {\n+\t\t\t\tresult = synthesizeAnnotation(result, clazz);\n \t\t\t\tfindAnnotationCache.put(cacheKey, result);\n \t\t\t}\n \t\t}\n-\t\treturn (synthesize ? synthesizeAnnotation(result, clazz) : result);\n+\t\treturn result;\n \t}\n \n \t/**",
    "output": "AnnotationUtils caches findAnnotation results in pre-synthesized form Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -37,7 +37,6 @@\n \n import org.springframework.core.BridgeMethodResolver;\n import org.springframework.util.Assert;\n-import org.springframework.util.ClassUtils;\n import org.springframework.util.ConcurrentReferenceHashMap;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.ReflectionUtils;\n@@ -1277,7 +1276,7 @@ public static <A extends Annotation> A synthesizeAnnotation(A annotation, Annota\n \t\tDefaultAnnotationAttributeExtractor attributeExtractor =\n \t\t\t\tnew DefaultAnnotationAttributeExtractor(annotation, annotatedElement);\n \t\tInvocationHandler handler = new SynthesizedAnnotationInvocationHandler(attributeExtractor);\n-\t\treturn (A) Proxy.newProxyInstance(ClassUtils.getDefaultClassLoader(),\n+\t\treturn (A) Proxy.newProxyInstance(annotation.getClass().getClassLoader(),\n \t\t\t\tnew Class<?>[] {(Class<A>) annotationType, SynthesizedAnnotation.class}, handler);\n \t}\n \n@@ -1323,7 +1322,7 @@ public static <A extends Annotation> A synthesizeAnnotation(Map<String, Object>\n \t\tMapAnnotationAttributeExtractor attributeExtractor =\n \t\t\t\tnew MapAnnotationAttributeExtractor(attributes, annotationType, annotatedElement);\n \t\tInvocationHandler handler = new SynthesizedAnnotationInvocationHandler(attributeExtractor);\n-\t\treturn (A) Proxy.newProxyInstance(ClassUtils.getDefaultClassLoader(),\n+\t\treturn (A) Proxy.newProxyInstance(annotationType.getClassLoader(),\n \t\t\t\tnew Class<?>[] {annotationType, SynthesizedAnnotation.class}, handler);\n \t}\n ",
    "output": "AnnotationUtils defines synthesized proxy class in original annotation's ClassLoader Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n@@ -26,7 +26,7 @@\n  *\n  * @author Arjen Poutsma\n  */\n-public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage, Closeable {\n+public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage {\n \n \t/**\n \t * Return the HTTP status code of the response.\n@@ -46,10 +46,4 @@ public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage, Cl\n \t */\n \tString getStatusText();\n \n-\t/**\n-\t * Close this response, freeing any resources created.\n-\t */\n-\t@Override\n-\tvoid close();\n-\n }",
    "output": "Remove Closeable implementation"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n--- a/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/http/client/ReactiveClientHttpResponse.java\n@@ -17,7 +17,6 @@\n package org.springframework.http.client;\n \n import java.io.Closeable;\n-import java.io.IOException;\n \n import org.springframework.http.HttpStatus;\n import org.springframework.http.ReactiveHttpInputMessage;\n@@ -32,23 +31,20 @@ public interface ReactiveClientHttpResponse extends ReactiveHttpInputMessage, Cl\n \t/**\n \t * Return the HTTP status code of the response.\n \t * @return the HTTP status as an HttpStatus enum value\n-\t * @throws IOException in case of I/O errors\n \t */\n-\tHttpStatus getStatusCode() throws IOException;\n+\tHttpStatus getStatusCode();\n \n \t/**\n \t * Return the HTTP status code of the response as integer\n \t * @return the HTTP status as an integer\n-\t * @throws IOException in case of I/O errors\n \t */\n-\tint getRawStatusCode() throws IOException;\n+\tint getRawStatusCode();\n \n \t/**\n \t * Return the HTTP status text of the response.\n \t * @return the HTTP status text\n-\t * @throws IOException in case of I/O errors\n \t */\n-\tString getStatusText() throws IOException;\n+\tString getStatusText();\n \n \t/**\n \t * Close this response, freeing any resources created.",
    "output": "Remove IOException declaration"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -691,7 +691,7 @@ public void testViewControllersDefaultConfig() {\n \n \t@Test\n \tpublic void testContentNegotiationManager() throws Exception {\n-\t\tloadBeanDefinitions(\"mvc-config-content-negotiation-manager.xml\", 14);\n+\t\tloadBeanDefinitions(\"mvc-config-content-negotiation-manager.xml\", 15);\n \n \t\tRequestMappingHandlerMapping mapping = appContext.getBean(RequestMappingHandlerMapping.class);\n \t\tContentNegotiationManager manager = mapping.getContentNegotiationManager();",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java\n--- a/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java\n@@ -17,6 +17,7 @@\n package org.springframework.reactive.web.dispatch;\n \n import org.reactivestreams.Publisher;\n+import reactor.Publishers;\n \n import org.springframework.core.Ordered;\n import org.springframework.reactive.web.http.ServerHttpRequest;\n@@ -44,6 +45,6 @@ public boolean supports(HandlerResult result) {\n \n \t@Override\n \tpublic Publisher<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {\n-\t\treturn (Publisher<Void>)result.getValue();\n+\t\treturn Publishers.completable((Publisher<?>)result.getValue());\n \t}\n }",
    "output": "Fix SimpleHandlerResultHandler by using Publishers.completable"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilderTests.java\n@@ -97,6 +97,7 @@ public void constructorNullWebRequest() {\n \t// --- buildRequest\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void buildRequestBasicAuth() {\n \t\tString base64Credentials = \"dXNlcm5hbWU6cGFzc3dvcmQ=\";\n \t\tString authzHeaderValue = \"Basic: \" + base64Credentials;",
    "output": "Suppress deprecation warning in HtmlUnitRequestBuilderTests"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/reactive/io/ByteBufferPublisherInputStream.java b/spring-web-reactive/src/main/java/org/springframework/reactive/io/ByteBufferPublisherInputStream.java\n--- a/spring-web-reactive/src/main/java/org/springframework/reactive/io/ByteBufferPublisherInputStream.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/io/ByteBufferPublisherInputStream.java\n@@ -20,7 +20,6 @@\n import org.reactivestreams.Subscription;\n import org.springframework.util.Assert;\n import reactor.Publishers;\n-import reactor.core.error.CancelException;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -140,10 +139,6 @@ private InputStream currentStream() throws IOException {\n \t\t\t\treturn this.currentStream;\n \t\t\t}\n \t\t}\n-\t\tcatch (CancelException ce) {\n-\t\t\tthis.completed = true;\n-\t\t\treturn null;\n-\t\t}\n \t\tcatch (InterruptedException ex) {\n \t\t\tThread.currentThread().interrupt();\n \t\t}",
    "output": "Polish ByteBufferPublisherInputStream exception handling"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/ResponseBodyResultHandler.java b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/ResponseBodyResultHandler.java\n--- a/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/ResponseBodyResultHandler.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/ResponseBodyResultHandler.java\n@@ -142,7 +142,7 @@ else if (Publisher.class.isAssignableFrom(type.getRawClass())) {\n \t\t\treturn response.writeWith(outputStream);\n \t\t}\n \t\treturn Publishers.error(new IllegalStateException(\n-\t\t  \"Return value type not supported: \" + returnType));\n+\t\t  \"Return value type '\" + returnType.getParameterType().getName() + \"' with media type '\" + mediaType + \"' not supported\"  ));\n \t}\n \n \tprivate MediaType resolveMediaType(ServerHttpRequest request) {",
    "output": "More accurate ResponseBodyResultHandler error message"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n@@ -216,7 +216,7 @@ public Object createdEndpoint(ServerEndpointRegistration registration, Component\n \t\t\tObject sessionListener = accessor.getPropertyValue(\"sessionListener\");\n \t\t\tObject clusterContext = accessor.getPropertyValue(\"clusterContext\");\n \t\t\ttry {\n-\t\t\t\tif (constructor.getParameterCount() == 9) {\n+\t\t\t\tif (constructor.getParameterTypes().length == 9) {\n \t\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n \t\t\t\t\t\t\t\"/\", registration.getConfigurator(), sessionListener, clusterContext, null);\n \t\t\t\t}",
    "output": "Polish Constructor.getParameterCount is JDK8+ only!"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java\n@@ -216,8 +216,14 @@ public Object createdEndpoint(ServerEndpointRegistration registration, Component\n \t\t\tObject sessionListener = accessor.getPropertyValue(\"sessionListener\");\n \t\t\tObject clusterContext = accessor.getPropertyValue(\"clusterContext\");\n \t\t\ttry {\n-\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n-\t\t\t\t\t\t\"/\",  registration.getConfigurator(), sessionListener, clusterContext, null);\n+\t\t\t\tif (constructor.getParameterCount() == 9) {\n+\t\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n+\t\t\t\t\t\t\t\"/\", registration.getConfigurator(), sessionListener, clusterContext, null);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\treturn constructor.newInstance(registration.getEndpoint(), registration, provider, container,\n+\t\t\t\t\t\t\t\"/\", registration.getConfigurator(), sessionListener, clusterContext, null, Boolean.TRUE);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new HandshakeFailureException(\"Failed to register \" + registration, ex);",
    "output": "Fix websocket compatibility with Tyrus 1.9 - 1.12 As of Tyrus 1.9, `TyrusEndpointWrapper`'s constructor has a new Boolean argument (which is mandatory). This commit reflectively chooses the right constructor method for Tyrus 1.9+ versions. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.core;\n \n-import java.io.ObjectStreamException;\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.Constructor;\n@@ -859,7 +858,7 @@ VariableResolver asVariableResolver() {\n \t/**\n \t * Custom serialization support for {@link #NONE}.\n \t */\n-\tprivate Object readResolve() throws ObjectStreamException {\n+\tprivate Object readResolve() {\n \t\treturn (this.type == null ? NONE : this);\n \t}\n ",
    "output": "Remove superfluous ObjectStreamException declaration"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -891,7 +891,9 @@ public void registerShutdownHook() {\n \t\t\tthis.shutdownHook = new Thread() {\n \t\t\t\t@Override\n \t\t\t\tpublic void run() {\n-\t\t\t\t\tdoClose();\n+\t\t\t\t\tsynchronized (startupShutdownMonitor) {\n+\t\t\t\t\t\tdoClose();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t};\n \t\t\tRuntime.getRuntime().addShutdownHook(this.shutdownHook);",
    "output": "Shutdown hook triggers doClose within startupShutdownMonitor Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java\n@@ -59,8 +59,8 @@ public InputSource resolveEntity(String publicId, String systemId) throws IOExce\n \t\t}\n \t\tif (systemId != null && systemId.endsWith(DTD_EXTENSION)) {\n \t\t\tint lastPathSeparator = systemId.lastIndexOf(\"/\");\n-\t\t\tint dtdNameStart = systemId.indexOf(DTD_NAME);\n-\t\t\tif (dtdNameStart > lastPathSeparator) {\n+\t\t\tint dtdNameStart = systemId.indexOf(DTD_NAME, lastPathSeparator);\n+\t\t\tif (dtdNameStart != -1) {\n \t\t\t\tString dtdFile = DTD_FILENAME + DTD_EXTENSION;\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"Trying to locate [\" + dtdFile + \"] in Spring jar on classpath\");",
    "output": "Consistently detect spring-beans.dtd reference in last path segment Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java\n@@ -588,7 +588,7 @@ public void closePooledResource(Object pooled) {\n \t\tpublic void httpClientConnect(UndertowClient httpClient, ClientCallback<ClientConnection> listener, URI uri,\n \t\t\t\tXnioWorker worker, OptionMap options) {\n \t\t\tReflectionUtils.invokeMethod(httpClientConnectCallbackMethod, httpClient, listener, uri,\n-\t\t\t\t\tthis.undertowBufferPool, worker, options);\n+\t\t\t\t\tworker, this.undertowBufferPool, options);\n \t\t}\n \n \t\t@Override",
    "output": "Fix undertow httpClientConnect invoke signature Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/main/java/org/springframework/reactive/util/CompletableFutureUtils.java b/spring-web-reactive/src/main/java/org/springframework/reactive/util/CompletableFutureUtils.java\n--- a/spring-web-reactive/src/main/java/org/springframework/reactive/util/CompletableFutureUtils.java\n+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/util/CompletableFutureUtils.java\n@@ -24,6 +24,8 @@\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import reactor.core.error.Exceptions;\n+import reactor.core.error.SpecificationExceptions;\n+import reactor.core.support.BackpressureUtils;\n import reactor.rx.Stream;\n import reactor.rx.action.Action;\n import reactor.rx.subscription.ReactiveSubscription;\n@@ -111,15 +113,19 @@ public void subscribe(final Subscriber<? super T> subscriber) {\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void request(long elements) {\n-\t\t\t\t\t\tAction.checkRequest(elements);\n+\t\t\t\t\t\ttry{\n+\t\t\t\t\t\t\tBackpressureUtils.checkRequest(elements);\n+\t\t\t\t\t\t}catch(SpecificationExceptions.Spec309_NullOrNegativeRequest iae){\n+\t\t\t\t\t\t\tsubscriber.onError(iae);\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n \t\t\t\t\t\tif (isComplete()) return;\n \n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tfuture.whenComplete((result, error) -> {\n \t\t\t\t\t\t\t\tif (error != null) {\n \t\t\t\t\t\t\t\t\tonError(error);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t\tsubscriber.onNext(result);\n \t\t\t\t\t\t\t\t\tonComplete();\n \t\t\t\t\t\t\t\t}",
    "output": "minor fix and update to work on latest 2.1.0.BUILD-SNAPSHOT to use core check in CFUtils"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/AbstractHttpHandlerIntegrationTests.java\n@@ -38,8 +38,8 @@ public static Object[][] arguments() {\n \t\treturn new Object[][] {\n \t\t\t\t{new JettyHttpServer()},\n \t\t\t\t{new TomcatHttpServer()},\n-\t\t\t\t{new ReactorHttpServer()},\n-\t\t\t\t{new RxNettyHttpServer()}\n+\t\t\t\t{new RxNettyHttpServer()},\n+\t\t        {new ReactorHttpServer()}\n \t\t};\n \t}\n ",
    "output": "Upgrade to 2.0.6 snapshot for Header sent too soon fix, which allows DispatcherHandler to assign content-type correctly"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n@@ -19,15 +19,18 @@\n import java.util.Arrays;\n \n import org.apache.commons.logging.LogFactory;\n+\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;\n+\n import org.junit.Ignore;\n import org.junit.Test;\n-import test.aop.PerThisAspect;\n \n import org.springframework.util.SerializationTestUtils;\n \n+import test.aop.PerThisAspect;\n+\n import static org.junit.Assert.*;\n \n /**\n@@ -134,6 +137,7 @@ public void setAge(int age) {\n \t\t\tthis.age = age;\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tpublic <V extends MyInterface> boolean doWithVarargs(V... args) {\n \t\t\treturn true;\n \t\t}",
    "output": "Suppress warnings in Gradle build"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java\n@@ -69,8 +69,9 @@ public class ScriptTemplateView extends AbstractUrlBasedView {\n \n \tprivate static final String DEFAULT_RESOURCE_LOADER_PATH = \"classpath:\";\n \n+\tprivate static final ThreadLocal<ScriptEngine> engineHolder =\n+\t\t\tnew NamedThreadLocal<ScriptEngine>(\"ScriptTemplateView engine\");\n \n-\tprivate final ThreadLocal<ScriptEngine> engineHolder = new NamedThreadLocal<ScriptEngine>(\"ScriptTemplateView engine\");\n \n \tprivate ScriptEngine engine;\n \n@@ -235,10 +236,10 @@ else if (this.engine != null) {\n \n \tprotected ScriptEngine getEngine() {\n \t\tif (Boolean.FALSE.equals(this.sharedEngine)) {\n-\t\t\tScriptEngine engine = this.engineHolder.get();\n+\t\t\tScriptEngine engine = engineHolder.get();\n \t\t\tif (engine == null) {\n \t\t\t\tengine = createEngineFromName();\n-\t\t\t\tthis.engineHolder.set(engine);\n+\t\t\t\tengineHolder.set(engine);\n \t\t\t}\n \t\t\treturn engine;\n \t\t}",
    "output": "Limit the number of ScriptEngine instances to the number of threads This commit makes ThreadLocal<ScriptEngine> engineHolder ScriptTemplateView field static in order to limit the maximum number of ScriptEngine instances to the number of threads, regardless of the number of view instances. Issue"
  },
  {
    "input": "diff --git a/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/EchoHandlerIntegrationTests.java b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/EchoHandlerIntegrationTests.java\n--- a/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/EchoHandlerIntegrationTests.java\n+++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/http/EchoHandlerIntegrationTests.java\n@@ -19,6 +19,7 @@\n import java.net.URI;\n import java.util.Random;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.http.RequestEntity;\n@@ -43,6 +44,7 @@ protected EchoHandler createHttpHandler() {\n \n \n \t@Test\n+\t@Ignore\n \tpublic void echoBytes() throws Exception {\n \t\tRestTemplate restTemplate = new RestTemplate();\n ",
    "output": "ignore for now"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java\n@@ -40,7 +40,7 @@\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.util.Assert;\n-import org.springframework.util.StreamUtils;\n+import org.springframework.util.FileCopyUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.web.servlet.view.AbstractUrlBasedView;\n \n@@ -341,7 +341,8 @@ protected void renderMergedOutputModel(Map<String, Object> model, HttpServletReq\n \n \tprotected String getTemplate(String path) throws IOException {\n \t\tResource resource = this.resourceLoader.getResource(path);\n-\t\treturn StreamUtils.copyToString(resource.getInputStream(), this.charset);\n+\t\tInputStreamReader reader = new InputStreamReader(resource.getInputStream(), this.charset);\n+\t\treturn FileCopyUtils.copyToString(reader);\n \t}\n \n }",
    "output": "Close properly the InputStream in ScriptTemplateView#getTemplateIssue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java\n@@ -39,6 +39,26 @@ public class SseEmitter extends ResponseBodyEmitter {\n \tstatic final MediaType TEXT_PLAIN = new MediaType(\"text\", \"plain\", Charset.forName(\"UTF-8\"));\n \n \n+\t/**\n+\t * Create a new SseEmitter instance.\n+\t */\n+\tpublic SseEmitter() {\n+\t\tsuper();\n+\t}\n+\n+\t/**\n+\t * Create a SseEmitter with a custom timeout value.\n+\t * <p>By default not set in which case the default configured in the MVC\n+\t * Java Config or the MVC namespace is used, or if that's not set, then the\n+\t * timeout depends on the default of the underlying server.\n+\t * @param timeout timeout value in milliseconds\n+\t * @since 4.2.2\n+\t */\n+\tpublic SseEmitter(Long timeout) {\n+\t\tsuper(timeout);\n+\t}\n+\n+\n \t@Override\n \tprotected void extendResponse(ServerHttpResponse outputMessage) {\n \t\tsuper.extendResponse(outputMessage);",
    "output": "SseEmitter exposes super constructor with timeout value Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessagingException.java b/spring-messaging/src/main/java/org/springframework/messaging/MessagingException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessagingException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessagingException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -32,7 +32,7 @@ public class MessagingException extends NestedRuntimeException {\n \n \n \tpublic MessagingException(Message<?> message) {\n-\t\tsuper(\"\");\n+\t\tsuper(null);\n \t\tthis.failedMessage = message;\n \t}\n \n@@ -52,7 +52,7 @@ public MessagingException(Message<?> message, String description) {\n \t}\n \n \tpublic MessagingException(Message<?> message, Throwable cause) {\n-\t\tsuper(\"\", cause);\n+\t\tsuper(null, cause);\n \t\tthis.failedMessage = message;\n \t}\n ",
    "output": "MessagingException provides null description (instead of empty String) to NestedRuntimeException Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -163,14 +163,9 @@ protected boolean isEligibleForEtag(HttpServletRequest request, HttpServletRespo\n \t * @return the ETag header value\n \t * @see org.springframework.util.DigestUtils\n \t */\n-\tprotected String generateETagHeaderValue(InputStream inputStream) {\n+\tprotected String generateETagHeaderValue(InputStream inputStream) throws IOException {\n \t\tStringBuilder builder = new StringBuilder(\"\\\"0\");\n-\t\ttry {\n-\t\t\tDigestUtils.appendMd5DigestAsHex(inputStream, builder);\n-\t\t}\n-\t\tcatch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n+\t\tDigestUtils.appendMd5DigestAsHex(inputStream, builder);\n \t\tbuilder.append('\"');\n \t\treturn builder.toString();\n \t}\n@@ -184,7 +179,7 @@ protected String generateETagHeaderValue(InputStream inputStream) {\n \t * @since 4.2\n \t */\n \tpublic static void disableContentCaching(ServletRequest request) {\n-\t\tAssert.notNull(request);\n+\t\tAssert.notNull(request, \"ServletRequest must not be null\");\n \t\trequest.setAttribute(STREAMING_ATTRIBUTE, true);\n \t}\n ",
    "output": "Fix generateETagHeaderValue's IOException handling Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -667,7 +667,9 @@ private class AggregatedExceptionListener implements ExceptionListener {\n \t\t@Override\n \t\tpublic void onException(JMSException ex) {\n \t\t\tsynchronized (connectionMonitor) {\n-\t\t\t\tfor (ExceptionListener listener : this.delegates) {\n+\t\t\t\t// Iterate over temporary copy in order to avoid ConcurrentModificationException,\n+\t\t\t\t// since listener invocations may in turn trigger registration of listeners...\n+\t\t\t\tfor (ExceptionListener listener : new LinkedHashSet<ExceptionListener>(this.delegates)) {\n \t\t\t\t\tlistener.onException(ex);\n \t\t\t\t}\n \t\t\t}",
    "output": "Avoid ConcurrentModificationException in SingleConnectionFactory's AggregatedExceptionListener Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java b/spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java\n--- a/spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java\n+++ b/spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java\n@@ -58,10 +58,12 @@ public DefaultDeserializer(ClassLoader classLoader) {\n \n \n \t/**\n-\t * Reads the input stream and deserializes into an object.\n+\t * Read from the supplied {@code InputStream} and deserialize the contents\n+\t * into an object.\n \t * @see ObjectInputStream#readObject()\n \t */\n \t@Override\n+\t@SuppressWarnings(\"resource\")\n \tpublic Object deserialize(InputStream inputStream) throws IOException {\n \t\tObjectInputStream objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader);\n \t\ttry {",
    "output": "Suppress warning in DefaultDeserializer"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -1514,7 +1514,7 @@ static List<String> getAttributeAliasNames(Method attribute) {\n \t\tAssert.notNull(attribute, \"attribute must not be null\");\n \n \t\tAliasDescriptor descriptor = AliasDescriptor.from(attribute);\n-\t\treturn (descriptor == null ? Collections.emptyList() : descriptor.getAttributeAliasNames());\n+\t\treturn (descriptor == null ? Collections.<String> emptyList() : descriptor.getAttributeAliasNames());\n \t}\n \n \t/**",
    "output": "Make AnnotationUtils Java 6 source compatible"
  },
  {
    "input": "diff --git a/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/MethodValidationTests.java b/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/MethodValidationTests.java\n--- a/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/MethodValidationTests.java\n+++ b/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/MethodValidationTests.java\n@@ -43,6 +43,7 @@\n  * @author Juergen Hoeller\n  * @since 4.1\n  */\n+@SuppressWarnings(\"rawtypes\")\n public class MethodValidationTests {\n \n \t@Test\n@@ -68,6 +69,7 @@ public void testMethodValidationPostProcessor() {\n \t}\n \n \n+\t@SuppressWarnings(\"unchecked\")\n \tprivate void doTestProxyValidation(MyValidInterface proxy) {\n \t\tassertNotNull(proxy.myValidMethod(\"value\", 5));\n \t\ttry {",
    "output": "Suppress warnings in tests in spring-orm-hibernate4"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/CommonsDbcpNativeJdbcExtractor.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/CommonsDbcpNativeJdbcExtractor.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/CommonsDbcpNativeJdbcExtractor.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/CommonsDbcpNativeJdbcExtractor.java\n@@ -46,7 +46,9 @@\n  *\n  * @author Juergen Hoeller\n  * @since 25.08.2003\n+ * @deprecated as of Spring 4.2, in favor of Commons DBCP 2.x and JDBC 4.x\n  */\n+@Deprecated\n public class CommonsDbcpNativeJdbcExtractor extends NativeJdbcExtractorAdapter {\n \n \tprivate static final String GET_INNERMOST_DELEGATE_METHOD_NAME = \"getInnermostDelegate\";",
    "output": "Deprecate Commons DBCP 1.x support along with Commons Pool 1.x Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n@@ -207,7 +207,7 @@ public boolean containsValue(Object value) {\n \t}\n \n \tpublic Set<Map.Entry<String, Object>> entrySet() {\n-\t\treturn Collections.unmodifiableSet(this.headers.entrySet());\n+\t\treturn Collections.unmodifiableMap(this.headers).entrySet();\n \t}\n \n \tpublic Object get(Object key) {",
    "output": "MessageHeaders returns completely immutable entry set (no entry.setValue call allowed) Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -90,7 +90,8 @@ public GenericTypeAwarePropertyDescriptor(Class<?> beanClass, String propertyNam\n \t\t\t\tSet<Method> ambiguousCandidates = new HashSet<Method>();\n \t\t\t\tfor (Method method : beanClass.getMethods()) {\n \t\t\t\t\tif (method.getName().equals(writeMethodToUse.getName()) &&\n-\t\t\t\t\t\t\t!method.equals(writeMethodToUse) && !method.isBridge()) {\n+\t\t\t\t\t\t\t!method.equals(writeMethodToUse) && !method.isBridge() &&\n+\t\t\t\t\t\t\tmethod.getParameterTypes().length == writeMethodToUse.getParameterTypes().length) {\n \t\t\t\t\t\tambiguousCandidates.add(method);\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Avoid ambiguous property warning for methods with multiple parameters Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpConnection.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.messaging.tcp.reactor;\n \n-import reactor.fn.Functions;\n import reactor.io.net.ChannelStream;\n import reactor.rx.Promise;\n import reactor.rx.Promises;\n@@ -58,13 +57,15 @@ public ListenableFuture<Void> send(Message<P> message) {\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void onReadInactivity(Runnable runnable, long inactivityDuration) {\n-\t\tthis.channelStream.on().readIdle(inactivityDuration, Functions.<Void>consumer(runnable));\n+\t\tthis.channelStream.on().readIdle(inactivityDuration, reactor.fn.Functions.<Void>consumer(runnable));\n \t}\n \n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void onWriteInactivity(Runnable runnable, long inactivityDuration) {\n-\t\tthis.channelStream.on().writeIdle(inactivityDuration, Functions.<Void>consumer(runnable));\n+\t\tthis.channelStream.on().writeIdle(inactivityDuration, reactor.fn.Functions.<Void>consumer(runnable));\n \t}\n \n \t@Override",
    "output": "Upgrade to Reactor 2.0.5"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SocketUtils.java b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n@@ -19,7 +19,7 @@\n import java.net.DatagramSocket;\n import java.net.InetAddress;\n import java.net.ServerSocket;\n-import java.util.Random;\n+import java.security.SecureRandom;\n import java.util.SortedSet;\n import java.util.TreeSet;\n import javax.net.ServerSocketFactory;\n@@ -53,9 +53,6 @@ public class SocketUtils {\n \tpublic static final int PORT_RANGE_MAX = 65535;\n \n \n-\tprivate static final Random random = new Random(System.currentTimeMillis());\n-\n-\n \t/**\n \t * Although {@code SocketUtils} consists solely of static utility methods,\n \t * this constructor is intentionally {@code public}.\n@@ -238,7 +235,7 @@ protected boolean isPortAvailable(int port) {\n \t\t */\n \t\tprivate int findRandomPort(int minPort, int maxPort) {\n \t\t\tint portRange = maxPort - minPort;\n-\t\t\treturn minPort + random.nextInt(portRange);\n+\t\t\treturn minPort + new SecureRandom().nextInt(portRange);\n \t\t}\n \n \t\t/**",
    "output": "Increase randomness in SocketUtils"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java b/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java\n--- a/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/target/CommonsPool2TargetSource.java\n@@ -49,6 +49,7 @@\n  * @author Rob Harrop\n  * @author Juergen Hoeller\n  * @author Stephane Nicoll\n+ * @author Kazuki Shimizu\n  * @since 4.2\n  * @see GenericObjectPool\n  * @see #createObjectPool()\n@@ -66,7 +67,7 @@ public class CommonsPool2TargetSource extends AbstractPoolingTargetSource implem\n \n \tprivate int minIdle = GenericObjectPoolConfig.DEFAULT_MIN_IDLE;\n \n-\tprivate long maxWait = GenericObjectPoolConfig.DEFAULT_MAX_TOTAL;\n+\tprivate long maxWait = GenericObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS;\n \n \tprivate long timeBetweenEvictionRunsMillis = GenericObjectPoolConfig.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;\n \n@@ -126,7 +127,7 @@ public int getMinIdle() {\n \t/**\n \t * Set the maximum waiting time for fetching an object from the pool.\n \t * Default is -1, waiting forever.\n-\t * @see GenericObjectPool#setMaxTotal\n+\t * @see GenericObjectPool#setMaxWaitMillis\n \t */\n \tpublic void setMaxWait(long maxWait) {\n \t\tthis.maxWait = maxWait;",
    "output": "Fix default value of CommonsPool2TargetSource#maxWait Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n@@ -309,9 +309,12 @@ else if (this.protocolHandlers.size() == 1) {\n \t */\n \t@Override\n \tpublic void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {\n+\t\tWebSocketSessionHolder holder = this.sessions.get(session.getId());\n+\t\tif (holder != null) {\n+\t\t\tsession = holder.getSession();\n+\t\t}\n \t\tSubProtocolHandler protocolHandler = findProtocolHandler(session);\n \t\tprotocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel);\n-\t\tWebSocketSessionHolder holder = this.sessions.get(session.getId());\n \t\tif (holder != null) {\n \t\t\tholder.setHasHandledMessages();\n \t\t}",
    "output": "Ensure concurrent WebSocketSession wrapper is used Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java\n@@ -121,6 +121,7 @@ public void handleReturnValue(Object returnValue, MethodParameter returnType,\n \n \t\t// Commit the response and wrap to ignore further header changes\n \t\toutputMessage.getBody();\n+\t\toutputMessage.flush();\n \t\toutputMessage = new StreamingServletServerHttpResponse(outputMessage);\n \n \t\tDeferredResult<?> deferredResult = new DeferredResult<Object>(emitter.getTimeout());",
    "output": "Ensure headers committed immediately for SseEmitter Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n--- a/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java\n@@ -25,7 +25,6 @@\n import org.junit.Ignore;\n import org.junit.Test;\n \n-import org.springframework.core.JdkVersion;\n import org.springframework.core.io.Resource;\n \n import static org.junit.Assert.*;\n@@ -83,7 +82,8 @@ public void testSingleResourceOnFileSystem() throws IOException {\n \tpublic void testSingleResourceInJar() throws IOException {\n \t\tResource[] resources = resolver.getResources(\"java/net/URL.class\");\n \t\tassertEquals(1, resources.length);\n-\t\tString expectedProtocol = (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_19 ? \"jar\" : \"jrt\");\n+\t\t@SuppressWarnings(\"deprecation\")\n+\t\tString expectedProtocol = (org.springframework.core.JdkVersion.getMajorJavaVersion() < org.springframework.core.JdkVersion.JAVA_19 ? \"jar\" : \"jrt\");\n \t\tassertProtocolAndFilename(resources[0], expectedProtocol, \"URL.class\");\n \t}\n ",
    "output": "Suppress warnings regarding deprecated JdkVersion Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -583,15 +583,16 @@ public boolean supports(Type genericType) {\n \t\t\tif (JAXBElement.class == parameterizedType.getRawType() &&\n \t\t\t\t\tparameterizedType.getActualTypeArguments().length == 1) {\n \t\t\t\tboolean isJdk6 = (org.springframework.core.JdkVersion.getMajorJavaVersion() <= org.springframework.core.JdkVersion.JAVA_16);\n+\t\t\t\tboolean isJdk7 = (org.springframework.core.JdkVersion.getMajorJavaVersion() >= org.springframework.core.JdkVersion.JAVA_17);\n \t\t\t\tType typeArgument = parameterizedType.getActualTypeArguments()[0];\n \t\t\t\tif (typeArgument instanceof Class) {\n \t\t\t\t\tClass<?> classArgument = (Class<?>) typeArgument;\n-\t\t\t\t\tif (isJdk6 && classArgument.isArray()) {\n-\t\t\t\t\t\treturn (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||\n-\t\t\t\t\t\t\t\tsupportsInternal(classArgument, false));\n+\t\t\t\t\tif (isJdk7 && classArgument.isArray()) {\n+\t\t\t\t\t\treturn (classArgument.getComponentType() == Byte.TYPE);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n-\t\t\t\t\t\treturn (classArgument.getComponentType() == Byte.TYPE);\n+\t\t\t\t\t\treturn (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||\n+\t\t\t\t\t\t\t\tsupportsInternal(classArgument, false));\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse if (isJdk6 && typeArgument instanceof GenericArrayType) {",
    "output": "Fix regression in Jaxb2Marshaller regarding JdkVersion Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/Order.java b/spring-core/src/main/java/org/springframework/core/annotation/Order.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/Order.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/Order.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.core.annotation;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -47,6 +48,7 @@\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})\n+@Documented\n public @interface Order {\n \n \t/**",
    "output": "Make @Order @Documented"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -962,7 +962,7 @@ protected void doDispatch(HttpServletRequest request, HttpServletResponse respon\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tapplyDefaultViewName(request, mv);\n+\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n \t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n \t\t\t}\n \t\t\tcatch (Exception ex) {",
    "output": "DispatcherServlet passes resolved multipart request into applyDefaultViewName Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n@@ -85,7 +85,6 @@\n  * @see org.springframework.test.context.junit4.rules.SpringClassRule\n  * @see org.springframework.test.context.junit4.rules.SpringMethodRule\n  */\n-@SuppressWarnings(\"deprecation\")\n public class SpringJUnit4ClassRunner extends BlockJUnit4ClassRunner {\n \n \tprivate static final Log logger = LogFactory.getLog(SpringJUnit4ClassRunner.class);\n@@ -351,6 +350,7 @@ protected Class<? extends Throwable> getExpectedException(FrameworkMethod framew\n \t * @see #getJUnitTimeout(FrameworkMethod)\n \t */\n \t@Override\n+\t@SuppressWarnings(\"deprecation\")\n \tprotected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {\n \t\tStatement statement = null;\n \t\tlong springTimeout = getSpringTimeout(frameworkMethod);",
    "output": "Reduce scope of suppressed deprecation warnings in SpringJUnit4ClassRunner"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java\n@@ -183,7 +183,7 @@ public static UriComponentsBuilder fromUri(URI uri) {\n \t * @return the new {@code UriComponentsBuilder}\n \t */\n \tpublic static UriComponentsBuilder fromUriString(String uri) {\n-\t\tAssert.hasLength(uri, \"'uri' must not be empty\");\n+\t\tAssert.notNull(uri, \"'uri' must not be null\");\n \t\tMatcher matcher = URI_PATTERN.matcher(uri);\n \t\tif (matcher.matches()) {\n \t\t\tUriComponentsBuilder builder = new UriComponentsBuilder();",
    "output": "UriComponentsBuilder.fromUriString accepts empty URIs Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n@@ -172,7 +172,7 @@ private String registerResourceHandler(ParserContext parserContext, Element elem\n \t\t\tresourceHandlerDef.getPropertyValues().add(\"cacheSeconds\", cacheSeconds);\n \t\t}\n \n-\t\tElement cacheControlElement = DomUtils.getChildElementByTagName(element, \"cachecontrol\");\n+\t\tElement cacheControlElement = DomUtils.getChildElementByTagName(element, \"cache-control\");\n \t\tif (cacheControlElement != null) {\n \t\t\tCacheControl cacheControl = parseCacheControl(cacheControlElement);\n \t\t\tresourceHandlerDef.getPropertyValues().add(\"cacheControl\", cacheControl);",
    "output": "Rename <mvc:cachecontrol/> to <mvc:cache-control/>"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java\n@@ -34,10 +34,6 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Locale;\n-import java.util.TimeZone;\n-\n /**\n  * Examples of expectations on response header values.\n  *",
    "output": "Delete unused imports in HeaderAssertionTests"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java\n@@ -27,6 +27,8 @@\n import org.apache.catalina.LifecycleListener;\n import org.apache.catalina.connector.Connector;\n import org.apache.catalina.startup.Tomcat;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.coyote.http11.Http11NioProtocol;\n import org.apache.tomcat.util.descriptor.web.FilterDef;\n import org.apache.tomcat.util.descriptor.web.FilterMap;\n@@ -45,6 +47,8 @@\n  */\n public class TomcatWebSocketTestServer implements WebSocketTestServer {\n \n+\tprivate static final Log logger = LogFactory.getLog(TomcatWebSocketTestServer.class);\n+\n \tprivate Tomcat tomcatServer;\n \n \tprivate int port = -1;\n@@ -127,7 +131,9 @@ public void start() throws Exception {\n \t\tthis.context.addLifecycleListener(new LifecycleListener() {\n \t\t\t@Override\n \t\t\tpublic void lifecycleEvent(LifecycleEvent event) {\n-\t\t\t\tSystem.out.println(event.getType());\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"Event: \" + event.getType());\n+\t\t\t\t}\n \t\t\t}\n \t\t});\n \t}",
    "output": "Introduce logging in TomcatWebSocketTestServer This commit replaces calls to System.out.printlnwith explicit logging"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java\n@@ -245,6 +245,7 @@ public void defaultModules() throws JsonProcessingException, UnsupportedEncoding\n \t}\n \n \t@Test // SPR-12634\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void customizeDefaultModulesWithModuleClass() throws JsonProcessingException, UnsupportedEncodingException {\n \t\tthis.factory.setModulesToInstall(CustomIntegerModule.class);\n \t\tthis.factory.afterPropertiesSet();\n\ndiff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/DispatcherServletInitializerTests.java\n@@ -138,6 +138,7 @@ protected WebApplicationContext createRootApplicationContext() {\n \tprivate static class MyBean {\n \t}\n \n+\t@SuppressWarnings(\"serial\")\n \tprivate static class MyDispatcherServlet extends DispatcherServlet {\n \t\tpublic MyDispatcherServlet(WebApplicationContext webApplicationContext) {\n \t\t\tsuper(webApplicationContext);",
    "output": "Suppress build warnings in tests"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -131,7 +131,7 @@ protected Object getCacheKey(Method method, Class<?> targetClass) {\n \t * {@link #getTransactionAttribute} is effectively a caching decorator for this method.\n \t * @see #getTransactionAttribute\n \t */\n-\tprivate TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {\n+\tprotected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {\n \t\t// Don't allow no-public methods as required.\n \t\tif (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {\n \t\t\treturn null;",
    "output": "Allow for overriding of computeTransactionAttribute Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java\n@@ -128,11 +128,8 @@ public void checkFileLocation() throws Exception {\n \t@Test\n \tpublic void resolvePathRootResource() throws Exception {\n \t\tResource webjarsLocation = new ClassPathResource(\"/META-INF/resources/webjars/\", PathResourceResolver.class);\n-\t\tResource actual = this.resolver.resolveResource(null, \"\", Arrays.asList(webjarsLocation), null);\n \t\tString path = this.resolver.resolveUrlPathInternal(\"\", Arrays.asList(webjarsLocation), null);\n \n-\t\tassertNotNull(actual);\n-\t\tassertTrue(actual.exists() && actual.isReadable());\n \t\tassertNull(path);\n \t}\n }",
    "output": "Fix tests Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -104,7 +104,7 @@ public Class<?>[] scanPackages() throws UncategorizedMappingException {\n \n \tprotected boolean isJaxb2Class(MetadataReader reader, MetadataReaderFactory factory) throws IOException {\n \t\tfor (TypeFilter filter : JAXB2_TYPE_FILTERS) {\n-\t\t\tif (filter.match(reader, factory)) {\n+\t\t\tif (filter.match(reader, factory) && !reader.getClassMetadata().isInterface() ) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "JAXB scan skips annotated interfaces Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n--- a/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n@@ -131,7 +131,7 @@ protected Object[] resolveArguments(ApplicationEvent event) {\n \t\tif (declaredEventType == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (this.method.getParameters().length == 0) {\n+\t\tif (this.method.getParameterTypes().length == 0) {\n \t\t\treturn new Object[0];\n \t\t}\n \t\tif (!ApplicationEvent.class.isAssignableFrom(declaredEventType.getRawClass())",
    "output": "Avoid Java8 API"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java\n@@ -100,7 +100,7 @@ public FileUpload getFileUpload() {\n \t}\n \n \t/**\n-\t * Set the maximum allowed size (in bytes) before uploads are refused.\n+\t * Set the maximum allowed size (in bytes) before an upload gets rejected.\n \t * -1 indicates no limit (the default).\n \t * @param maxUploadSize the maximum upload size allowed\n \t * @see org.apache.commons.fileupload.FileUploadBase#setSizeMax\n@@ -109,6 +109,17 @@ public void setMaxUploadSize(long maxUploadSize) {\n \t\tthis.fileUpload.setSizeMax(maxUploadSize);\n \t}\n \n+\t/**\n+\t * Set the maximum allowed size (in bytes) for each individual file before\n+\t * an upload gets rejected. -1 indicates no limit (the default).\n+\t * @param maxUploadSizePerFile the maximum upload size per file\n+\t * @since 4.2\n+\t * @see org.apache.commons.fileupload.FileUploadBase#setFileSizeMax\n+\t */\n+\tpublic void setMaxUploadSizePerFile(long maxUploadSizePerFile) {\n+\t\tthis.fileUpload.setFileSizeMax(maxUploadSizePerFile);\n+\t}\n+\n \t/**\n \t * Set the maximum allowed size (in bytes) before uploads are written to disk.\n \t * Uploaded files will still be received past this amount, but they will not be",
    "output": "CommonsMultipartResolver allows for specifying max upload size per file Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java\n@@ -20,6 +20,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n \n+import org.springframework.core.io.InputStreamSource;\n+\n /**\n  * A representation of an uploaded file received in a multipart request.\n  *\n@@ -34,7 +36,7 @@\n  * @see org.springframework.web.multipart.MultipartHttpServletRequest\n  * @see org.springframework.web.multipart.MultipartResolver\n  */\n-public interface MultipartFile {\n+public interface MultipartFile extends InputStreamSource {\n \n \t/**\n \t * Return the name of the parameter in the multipart form.\n@@ -84,6 +86,7 @@ public interface MultipartFile {\n \t * @return the contents of the file as stream, or an empty stream if empty\n \t * @throws IOException in case of access errors (if the temporary store fails)\n \t */\n+\t@Override\n \tInputStream getInputStream() throws IOException;\n \n \t/**",
    "output": "MultipartFile interface extends InputStreamSource Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -94,7 +94,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \tprivate void updateResponse(HttpServletRequest request, HttpServletResponse response) throws IOException {\n \t\tContentCachingResponseWrapper responseWrapper =\n \t\t\t\tWebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);\n-\t\tAssert.notNull(responseWrapper, \"ShallowEtagResponseWrapper not found\");\n+\t\tAssert.notNull(responseWrapper, \"ContentCachingResponseWrapper not found\");\n \t\tHttpServletResponse rawResponse = (HttpServletResponse) responseWrapper.getResponse();\n \t\tint statusCode = responseWrapper.getStatusCode();\n ",
    "output": "Fix error message typo in ShallowEtagHeaderFilter Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n@@ -214,12 +214,12 @@ public void handleIframeRequest() throws Exception {\n \t\tassertTrue(this.servletResponse.getContentAsString().startsWith(\"<!DOCTYPE html>\\n\"));\n \t\tassertEquals(490, this.servletResponse.getContentLength());\n \t\tassertEquals(\"no-store, no-cache, must-revalidate, max-age=0\", this.response.getHeaders().getCacheControl());\n-\t\tassertEquals(\"\\\"06b486b3208b085d9e3220f456a6caca4\\\"\", this.response.getHeaders().getETag());\n+\t\tassertEquals(\"\\\"0096cbd37f2a5218c33bb0826a7c74cbf\\\"\", this.response.getHeaders().getETag());\n \t}\n \n \t@Test\n \tpublic void handleIframeRequestNotModified() throws Exception {\n-\t\tthis.servletRequest.addHeader(\"If-None-Match\", \"\\\"06b486b3208b085d9e3220f456a6caca4\\\"\");\n+\t\tthis.servletRequest.addHeader(\"If-None-Match\", \"\\\"0096cbd37f2a5218c33bb0826a7c74cbf\\\"\");\n \t\tresetResponseAndHandleRequest(\"GET\", \"/echo/iframe.html\", HttpStatus.NOT_MODIFIED);\n \t}\n ",
    "output": "Fix SockJsServiceTests Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java\n@@ -81,7 +81,7 @@ public abstract class AbstractSockJsService implements SockJsService, CorsConfig\n \n \tprivate String name = \"SockJSService@\" + ObjectUtils.getIdentityHexString(this);\n \n-\tprivate String clientLibraryUrl = \"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\";\n+\tprivate String clientLibraryUrl = \"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js\";\n \n \tprivate int streamBytesLimit = 128 * 1024;\n \n@@ -134,7 +134,7 @@ public String getName() {\n \t * server. Since the iframe needs to load the SockJS javascript client library,\n \t * this property allows specifying where to load it from.\n \t * <p>By default this is set to point to\n-\t * \"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\".\n+\t * \"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js\".\n \t * However, it can also be set to point to a URL served by the application.\n \t * <p>Note that it's possible to specify a relative URL in which case the URL\n \t * must be relative to the iframe URL. For example assuming a SockJS endpoint",
    "output": "Upgrade AbstractSockJsService and ref doc to SockJS client 1.0.0 Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java\n@@ -123,16 +123,15 @@ public void printValue(String label, Object value) {\n \t */\n \tprivate static class LoggingResultHandler implements ResultHandler {\n \n-\t\tprivate final StringWriter stringWriter = new StringWriter();\n-\n-\t\tprivate final ResultHandler printingResultHandler = new PrintWriterPrintingResultHandler(\n-\t\t\tnew PrintWriter(stringWriter, true));\n-\n-\n \t\t@Override\n \t\tpublic void handle(MvcResult result) throws Exception {\n-\t\t\tthis.printingResultHandler.handle(result);\n-\t\t\tlogger.debug(\"MvcResult details:\\n\" + this.stringWriter);\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tStringWriter stringWriter = new StringWriter();\n+\t\t\t\tResultHandler printingResultHandler = new PrintWriterPrintingResultHandler(\n+\t\t\t\t\tnew PrintWriter(stringWriter));\n+\t\t\t\tprintingResultHandler.handle(result);\n+\t\t\t\tlogger.debug(\"MvcResult details:\\n\" + stringWriter);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Polish LoggingResultHandler in Spring MVC Test Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java\n@@ -208,13 +208,14 @@ public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessa\n \t\treturn readJavaType(javaType, inputMessage);\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate Object readJavaType(JavaType javaType, HttpInputMessage inputMessage) {\n \t\ttry {\n \t\t\tif (inputMessage instanceof MappingJacksonInputMessage) {\n \t\t\t\tClass<?> deserializationView = ((MappingJacksonInputMessage)inputMessage).getDeserializationView();\n \t\t\t\tif (deserializationView != null) {\n \t\t\t\t\treturn this.objectMapper.readerWithView(deserializationView)\n-\t\t\t\t\t\t\t.forType(javaType).readValue(inputMessage.getBody());\n+\t\t\t\t\t\t\t.withType(javaType).readValue(inputMessage.getBody());\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn this.objectMapper.readValue(inputMessage.getBody(), javaType);",
    "output": "Restore compatibility with Jackson 2.1 Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -221,6 +221,10 @@ public static MockMultipartHttpServletRequestBuilder fileUpload(URI uri) {\n \t * @param mvcResult the result from the request that started async processing\n \t */\n \tpublic static RequestBuilder asyncDispatch(final MvcResult mvcResult) {\n+\n+\t\t// There must be an async result before dispatching\n+\t\tmvcResult.getAsyncResult();\n+\n \t\treturn new RequestBuilder() {\n \t\t\t@Override\n \t\t\tpublic MockHttpServletRequest buildRequest(ServletContext servletContext) {",
    "output": "Ensure result ready in asyncDispatch in MockMvc Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -219,7 +219,7 @@ public static <A extends Annotation> A getAnnotation(Method method, Class<A> ann\n \t */\n \tpublic static Annotation[] getAnnotations(AnnotatedElement annotatedElement) {\n \t\ttry {\n-\t\t\treturn annotatedElement.getAnnotations();\n+\t\t\treturn synthesizeAnnotationArray(annotatedElement.getAnnotations(), annotatedElement);\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\thandleIntrospectionFailure(annotatedElement, ex);\n@@ -241,7 +241,7 @@ public static Annotation[] getAnnotations(AnnotatedElement annotatedElement) {\n \t */\n \tpublic static Annotation[] getAnnotations(Method method) {\n \t\ttry {\n-\t\t\treturn BridgeMethodResolver.findBridgedMethod(method).getAnnotations();\n+\t\t\treturn synthesizeAnnotationArray(BridgeMethodResolver.findBridgedMethod(method).getAnnotations(), method);\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\thandleIntrospectionFailure(method, ex);\n@@ -1811,6 +1811,9 @@ private static class AnnotationCollector<A extends Annotation> {\n \t\t\tthis.declaredMode = declaredMode;\n \t\t}\n \n+\t\t/**\n+\t\t * @since 4.2\n+\t\t */\n \t\t@SuppressWarnings(\"unchecked\")\n \t\tstatic Class<? extends Annotation> resolveContainerAnnotationType(Class<? extends Annotation> annotationType) {\n \t\t\ttry {",
    "output": "Synthesize annotation arrays within AnnotationUtils Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java\n@@ -101,7 +101,7 @@ protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, Http\n \t\t\treason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());\n \t\t}\n \t\tif (!StringUtils.hasLength(reason)) {\n-\t\t\tresponse.sendError(statusCode);\n+\t\t\tresponse.setStatus(statusCode);\n \t\t}\n \t\telse {\n \t\t\tresponse.sendError(statusCode, reason);",
    "output": "Use .setStatus in ResponseStatusExceptionResolver Before this change ResponseStatusExceptionResolver always used .sendError despite the javadoc on @ResponseStatus#code. This was perhaps justifiable from a HandlerExceptionResolver. Nevertheless .setStatus should be more REST API friendly while still marking the response as an error. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n@@ -747,7 +747,7 @@ else if (this.pattern.charAt(pos) == '*') {\n \t\t\t\t\t\t\tthis.doubleWildcards++;\n \t\t\t\t\t\t\tpos += 2;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\telse if (!this.pattern.substring(pos - 1).equals(\".*\")) {\n+\t\t\t\t\t\telse if (pos > 0 && !this.pattern.substring(pos - 1).equals(\".*\")) {\n \t\t\t\t\t\t\tthis.singleWildcards++;\n \t\t\t\t\t\t\tpos++;\n \t\t\t\t\t\t}\n\ndiff --git a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -479,6 +479,10 @@ public void patternComparator() {\n \n \t\t// longer is better\n \t\tassertEquals(1, comparator.compare(\"/hotels\", \"/hotels2\"));\n+\t\t\n+\t\t//SPR-13139\n+\t\tassertEquals(-1, comparator.compare(\"*\", \"*/**\"));\n+\t\tassertEquals(1, comparator.compare(\"*/**\", \"*\"));\n \t}\n \n \t@Test",
    "output": "Fix exception in AntPathMatcher for leading * Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java\n--- a/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java\n@@ -22,7 +22,6 @@\n import org.springframework.cglib.proxy.Callback;\n import org.springframework.cglib.proxy.Enhancer;\n import org.springframework.cglib.proxy.Factory;\n-import org.springframework.objenesis.ObjenesisException;\n import org.springframework.objenesis.SpringObjenesis;\n \n /**\n@@ -60,7 +59,7 @@ protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callb\n \t\t\ttry {\n \t\t\t\tproxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());\n \t\t\t}\n-\t\t\tcatch (ObjenesisException ex) {\n+\t\t\tcatch (Throwable ex) {\n \t\t\t\tlogger.debug(\"Unable to instantiate proxy using Objenesis, \" +\n \t\t\t\t\t\t\"falling back to regular proxy construction\", ex);\n \t\t\t}\n@@ -73,7 +72,7 @@ protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callb\n \t\t\t\t\t\tproxyClass.getConstructor(this.constructorArgTypes).newInstance(this.constructorArgs) :\n \t\t\t\t\t\tproxyClass.newInstance());\n \t\t\t}\n-\t\t\tcatch (Exception ex) {\n+\t\t\tcatch (Throwable ex) {\n \t\t\t\tthrow new AopConfigException(\"Unable to instantiate proxy using Objenesis, \" +\n \t\t\t\t\t\t\"and regular proxy instantiation via default constructor fails as well\", ex);\n \t\t\t}",
    "output": "ObjenesisCglibAopProxy defensively catches Throwable Issue"
  },
  {
    "input": "diff --git a/spring-aspects/src/test/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspectTests.java b/spring-aspects/src/test/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspectTests.java\n--- a/spring-aspects/src/test/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspectTests.java\n+++ b/spring-aspects/src/test/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspectTests.java\n@@ -18,6 +18,7 @@\n \n import java.lang.reflect.Method;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n \n@@ -140,8 +141,11 @@ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws Interrupted\n \t\tassertThat(defaultThread.get(), not(Thread.currentThread()));\n \t\tassertThat(defaultThread.get().getName(), not(startsWith(\"e1-\")));\n \n-\t\tFuture<Thread> e1Thread = obj.e1Work();\n+\t\tListenableFuture<Thread> e1Thread = obj.e1Work();\n \t\tassertThat(e1Thread.get().getName(), startsWith(\"e1-\"));\n+\n+\t\tCompletableFuture<Thread> e1OtherThread = obj.e1OtherWork();\n+\t\tassertThat(e1OtherThread.get().getName(), startsWith(\"e1-\"));\n \t}\n \n \t@Test\n@@ -278,6 +282,11 @@ public Future<Thread> defaultWork() {\n \t\tpublic ListenableFuture<Thread> e1Work() {\n \t\t\treturn new AsyncResult<Thread>(Thread.currentThread());\n \t\t}\n+\n+\t\t@Async(\"e1\")\n+\t\tpublic CompletableFuture<Thread> e1OtherWork() {\n+\t\t\treturn CompletableFuture.completedFuture(Thread.currentThread());\n+\t\t}\n \t}\n \n ",
    "output": "Test for Java 8's CompletableFuture with Spring's async execution aspect Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java b/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/target/CommonsPoolTargetSourceTests.java\n@@ -44,6 +44,7 @@\n  * @author Rob Harrop\n  * @author Chris Beams\n  */\n+@SuppressWarnings(\"deprecation\")\n public class CommonsPoolTargetSourceTests {\n \n \t/**",
    "output": "Remove deprecated warnings"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java b/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java\n--- a/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/client/OkHttpClientHttpRequestFactoryTests.java\n@@ -33,6 +33,7 @@ protected ClientHttpRequestFactory createRequestFactory() {\n \t@Override\n \t@Test\n \tpublic void httpMethods() throws Exception {\n+\t\tsuper.httpMethods();\n \t\tassertHttpMethod(\"patch\", HttpMethod.PATCH);\n \t}\n ",
    "output": "Add missing super in test"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n@@ -20,7 +20,6 @@\n import org.aspectj.lang.annotation.After;\n import org.aspectj.lang.annotation.Aspect;\n import org.aspectj.lang.annotation.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.beans.factory.support.DefaultListableBeanFactory;",
    "output": "Remove superfluous @Ignore import Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n@@ -26,7 +26,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n \n import org.springframework.core.ResolvableType;\n import org.springframework.core.convert.ConversionException;\n@@ -43,6 +42,7 @@\n import org.springframework.core.convert.converter.GenericConverter.ConvertiblePair;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.ConcurrentReferenceHashMap;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n@@ -89,7 +89,7 @@ public class GenericConversionService implements ConfigurableConversionService {\n \tprivate final Converters converters = new Converters();\n \n \tprivate final Map<ConverterCacheKey, GenericConverter> converterCache =\n-\t\t\tnew ConcurrentHashMap<ConverterCacheKey, GenericConverter>(64);\n+\t\t\tnew ConcurrentReferenceHashMap<ConverterCacheKey, GenericConverter>(64);\n \n \n \t// ConverterRegistry implementation",
    "output": "GenericConversionService uses ConcurrentReferenceHashMap instead of ConcurrentHashMap Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -779,7 +779,16 @@ public Collection<SourceClass> getMemberClasses() throws IOException {\n \t\t\tString[] memberClassNames = sourceReader.getClassMetadata().getMemberClassNames();\n \t\t\tList<SourceClass> members = new ArrayList<SourceClass>(memberClassNames.length);\n \t\t\tfor (String memberClassName : memberClassNames) {\n-\t\t\t\tmembers.add(asSourceClass(memberClassName));\n+\t\t\t\ttry {\n+\t\t\t\t\tmembers.add(asSourceClass(memberClassName));\n+\t\t\t\t}\n+\t\t\t\tcatch (IOException ex) {\n+\t\t\t\t\t// Let's skip it if it's not resolvable - we're just looking for candidates\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Failed to resolve member class [\" + memberClassName +\n+\t\t\t\t\t\t\t\t\"] - not considering it as a configuration class candidate\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t\treturn members;\n \t\t}",
    "output": "ConfigurationClassParser ignores unresolvable member classes Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java\n@@ -80,7 +80,6 @@ private void assertAdviceWasApplied(Class<?> configClass) {\n \t}\n \n \t@Test\n-\t@Ignore  // SPR-11807\n \tpublic void withInnerClassAndLambdaExpression() {\n \t\tApplicationContext ctx = new AnnotationConfigApplicationContext(Application.class, CountingAspect.class);\n \t\tctx.getBeansOfType(Runnable.class).forEach((k, v) -> v.run());",
    "output": "Enable test for AspectJ pointcut matching against lambda-defined bean Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java\n@@ -175,7 +175,7 @@ public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata)\n \t\t}\n \t\tcatch (Throwable ex) {\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Failed to introspect @Bean methods on class [\" + metadata.getClass() + \"]: \" + ex);\n+\t\t\t\tlogger.debug(\"Failed to introspect @Bean methods on class [\" + metadata.getClassName() + \"]: \" + ex);\n \t\t\t}\n \t\t\treturn false;\n \t\t}",
    "output": "Log correct class name for introspection failure Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java\n@@ -161,12 +161,24 @@ public static boolean isLiteConfigurationCandidate(AnnotationMetadata metadata)\n \t\tif (metadata.isInterface()) {\n \t\t\treturn false;\n \t\t}\n+\n+\t\t// Any of the typical annotations found?\n \t\tfor (String indicator : candidateIndicators) {\n \t\t\tif (metadata.isAnnotated(indicator)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n-\t\treturn metadata.hasAnnotatedMethods(Bean.class.getName());\n+\n+\t\t// Finally, let's look for @Bean methods...\n+\t\ttry {\n+\t\t\treturn metadata.hasAnnotatedMethods(Bean.class.getName());\n+\t\t}\n+\t\tcatch (Throwable ex) {\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Failed to introspect @Bean methods on class [\" + metadata.getClass() + \"]: \" + ex);\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t}\n \t}\n \n \t/**",
    "output": "Lite configuration candidate check defensively handles method introspection failure Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n@@ -89,7 +89,7 @@ public JsonPathExpectationsHelper(String expression, Object... args) {\n \t@SuppressWarnings(\"unchecked\")\n \tpublic <T> void assertValue(String content, Matcher<T> matcher) throws ParseException {\n \t\tT value = (T) evaluateJsonPath(content);\n-\t\tassertThat(\"JSON path\" + this.expression, value, matcher);\n+\t\tassertThat(\"JSON path \" + this.expression, value, matcher);\n \t}\n \n \tprivate Object evaluateJsonPath(String content) throws ParseException  {",
    "output": "Fix missing space in assertion message"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -121,6 +121,9 @@ public abstract class AnnotationUtils {\n \tprivate static final Map<Class<? extends Annotation>, Map<String, String>> attributeAliasesCache =\n \t\t\tnew ConcurrentReferenceHashMap<Class<? extends Annotation>, Map<String, String>>(256);\n \n+\tprivate static final Map<Class<? extends Annotation>, List<Method>> attributeMethodsCache =\n+\t\t\tnew ConcurrentReferenceHashMap<Class<? extends Annotation>, List<Method>>(256);\n+\n \tprivate static transient Log logger;\n \n \n@@ -1311,13 +1314,22 @@ static String getAliasedAttributeName(Method attribute, Class<? extends Annotati\n \t * @since 4.2\n \t */\n \tstatic List<Method> getAttributeMethods(Class<? extends Annotation> annotationType) {\n-\t\tList<Method> methods = new ArrayList<Method>();\n+\n+\t\tList<Method> methods = attributeMethodsCache.get(annotationType);\n+\t\tif (methods != null) {\n+\t\t\treturn methods;\n+\t\t}\n+\n+\t\tmethods = new ArrayList<Method>();\n \t\tfor (Method method : annotationType.getDeclaredMethods()) {\n \t\t\tif ((method.getParameterTypes().length == 0) && (method.getReturnType() != void.class)) {\n \t\t\t\tReflectionUtils.makeAccessible(method);\n \t\t\t\tmethods.add(method);\n \t\t\t}\n \t\t}\n+\n+\t\tattributeMethodsCache.put(annotationType, methods);\n+\n \t\treturn methods;\n \t}\n ",
    "output": "Cache attribute methods in AnnotationUtils Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java\n@@ -201,7 +201,7 @@ private String valueToString(Object value) {\n \t\t\treturn \"(this Map)\";\n \t\t}\n \t\tif (value instanceof Object[]) {\n-\t\t\treturn \"[\" + StringUtils.arrayToCommaDelimitedString((Object[]) value) + \"]\";\n+\t\t\treturn \"[\" + StringUtils.arrayToDelimitedString((Object[]) value, \", \") + \"]\";\n \t\t}\n \t\treturn String.valueOf(value);\n \t}",
    "output": "Align AnnotationAttributes.toStringwith contract in Map"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java\n@@ -67,7 +67,8 @@ public SynthesizedAnnotationInvocationHandler(AnnotatedElement annotatedElement,\n \t@Override\n \tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n \t\tString methodName = method.getName();\n-\t\tint parameterCount = method.getParameterCount();\n+\t\tClass<?>[] parameterTypes = method.getParameterTypes();\n+\t\tint parameterCount = parameterTypes.length;\n \n \t\tif (\"toString\".equals(methodName) && (parameterCount == 0)) {\n \t\t\treturn toString(proxy);",
    "output": "Don't use Java 8's Method.getParameterCount"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java\n@@ -312,6 +312,19 @@ protected final void checkAndPrepare(\n \t\tcheckAndPrepare(request, response, this.cacheControl);\n \t}\n \n+\t@Deprecated\n+\tprotected final void checkAndPrepare(\n+\t\t\tHttpServletRequest request, HttpServletResponse response, boolean lastModified)\n+\t\t\tthrows ServletException {\n+\n+\t\tif (lastModified) {\n+\t\t\tcheckAndPrepare(request, response, this.cacheControl.mustRevalidate());\n+\t\t}\n+\t\telse {\n+\t\t\tcheckAndPrepare(request, response);\n+\t\t}\n+\t}\n+\n \tprotected final void checkAndPrepare(\n \t\t\tHttpServletRequest request, HttpServletResponse response, int cacheSeconds) throws ServletException {\n ",
    "output": "Reinstate WebContentGenerator.checkAndPrepare variant Reinstate a variant of the `WebContentGenerator.checkAndPrepare` method for projects that are using it. This variant is now marked as deprecated. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java\n@@ -40,6 +40,7 @@\n import org.springframework.messaging.Message;\n import org.springframework.messaging.MessageDeliveryException;\n import org.springframework.messaging.converter.MessageConversionException;\n+import org.springframework.messaging.converter.StringMessageConverter;\n import org.springframework.messaging.simp.stomp.StompSession.Receiptable;\n import org.springframework.messaging.simp.stomp.StompSession.Subscription;\n import org.springframework.messaging.support.MessageBuilder;\n@@ -85,6 +86,7 @@ public void setUp() throws Exception {\n \t\tthis.sessionHandler = mock(StompSessionHandler.class);\n \t\tthis.connectHeaders = new StompHeaders();\n \t\tthis.session = new DefaultStompSession(this.sessionHandler, this.connectHeaders);\n+\t\tthis.session.setMessageConverter(new StringMessageConverter());\n \n \t\tSettableListenableFuture<Void> future = new SettableListenableFuture<>();\n \t\tfuture.set(null);",
    "output": "Fix failing tests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotation.java\n@@ -24,5 +24,5 @@\n  * @author Sam Brannen\n  * @since 4.2\n  */\n-interface SynthesizedAnnotation {\n+public interface SynthesizedAnnotation {\n }",
    "output": "Make SynthetizedAnnotation public Enable public visibility on SynthetizedAnnotation to allow annotation outside its package to be proxied properly. This commit is pending a unit test that actually reproduces the problem. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -648,7 +648,7 @@ else if (Map.class.isAssignableFrom(type)) {\n \t\t\t\treturn CollectionFactory.createMap(type, (keyDesc != null ? keyDesc.getType() : null), 16);\n \t\t\t}\n \t\t\telse {\n-\t\t\t\treturn type.newInstance();\n+\t\t\t\treturn BeanUtils.instantiate(type);\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Use BeanUtils to instantiate target type Use BeanUtils.instantiate(Class<?>) instead of a raw call to type.newInstanceas the former has more checks. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,7 +18,7 @@\n \n import java.nio.charset.Charset;\n \n-import org.springframework.util.StringUtils;\n+import org.springframework.util.Assert;\n \n /**\n  * Represents a SockJS frame. Provides factory methods to create SockJS frames.\n@@ -49,7 +49,7 @@ public class SockJsFrame {\n \t * @param content the content, must be a non-empty and represent a valid SockJS frame\n \t */\n \tpublic SockJsFrame(String content) {\n-\t\tStringUtils.hasText(content);\n+\t\tAssert.hasText(content);\n \t\tif (\"o\".equals(content)) {\n \t\t\tthis.type = SockJsFrameType.OPEN;\n \t\t\tthis.content = content;",
    "output": "Actual hasText assertion in SockJsFrame Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n--- a/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n+++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -122,7 +122,7 @@ public void resolveAliases(StringValueResolver valueResolver) {\n \t\t\t\tString registeredName = aliasCopy.get(alias);\n \t\t\t\tString resolvedAlias = valueResolver.resolveStringValue(alias);\n \t\t\t\tString resolvedName = valueResolver.resolveStringValue(registeredName);\n-\t\t\t\tif (resolvedAlias.equals(resolvedName)) {\n+\t\t\t\tif (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {\n \t\t\t\t\tthis.aliasMap.remove(alias);\n \t\t\t\t}\n \t\t\t\telse if (!resolvedAlias.equals(alias)) {",
    "output": "SimpleAliasRegistry prevents NPE for alias resolved to null Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/expression/MethodBasedEvaluationContextTests.java b/spring-context/src/test/java/org/springframework/context/expression/MethodBasedEvaluationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/expression/MethodBasedEvaluationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/expression/MethodBasedEvaluationContextTests.java\n@@ -27,9 +27,11 @@\n import static org.junit.Assert.*;\n \n /**\n+ * Unit tests for {@link MethodBasedEvaluationContext}.\n+ *\n  * @author Stephane Nicoll\n  */\n-public class MethodBasedEvaluationContextTest {\n+public class MethodBasedEvaluationContextTests {\n \n \tprivate final ParameterNameDiscoverer paramDiscover = new DefaultParameterNameDiscoverer();\n ",
    "output": "Rename MethodBasedEvaluationContextTest to *Tests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -24,6 +24,7 @@\n import java.util.Map;\n \n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -34,6 +35,7 @@\n  * @author Juergen Hoeller\n  * @author Arjen Poutsma\n  * @author Rossen Stoyanchev\n+ * @author Sam Brannen\n  */\n public class AntPathMatcherTests {\n \n@@ -427,6 +429,12 @@ public void combine() {\n \t\tassertEquals(\"/hotel/booking\", pathMatcher.combine(\"/hotel/\", \"/booking\")); // SPR-12975\n \t}\n \n+\t@Ignore(\"Disabled until SPR-12998 is resolved\")\n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void combineWithTwoFileExtensionPatterns() {\n+\t\tpathMatcher.combine(\"/*.html\", \"/*.txt\");\n+\t}\n+\n \t@Test\n \tpublic void patternComparator() {\n \t\tComparator<String> comparator = pathMatcher.getPatternComparator(\"/hotels/new\");",
    "output": "Introduce failing test case in AntPathMatcherTests Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/MethodWriter.java b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java\n--- a/spring-core/src/main/java/org/springframework/asm/MethodWriter.java\n+++ b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java\n@@ -2706,11 +2706,13 @@ private void resizeInstructions() {\n                 l = l.successor;\n             }\n             // Update the offsets in the uninitialized types\n-            for (i = 0; i < cw.typeTable.length; ++i) {\n-                Item item = cw.typeTable[i];\n-                if (item != null && item.type == ClassWriter.TYPE_UNINIT) {\n-                    item.intVal = getNewOffset(allIndexes, allSizes, 0,\n-                            item.intVal);\n+            if (cw.typeTable != null) {\n+                for (i = 0; i < cw.typeTable.length; ++i) {\n+                    Item item = cw.typeTable[i];\n+                    if (item != null && item.type == ClassWriter.TYPE_UNINIT) {\n+                        item.intVal = getNewOffset(allIndexes, allSizes, 0,\n+                                item.intVal);\n+                    }\n                 }\n             }\n             // The stack map frames are not serialized yet, so we don't need",
    "output": "Fix for ASM issue 317555 Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -690,6 +690,8 @@ public MethodArgumentBuilder(UriComponentsBuilder baseUrl, Method method) {\n \t\t\t}\n \t\t}\n \n+\n+\n \t\tpublic MethodArgumentBuilder arg(int index, Object value) {\n \t\t\tthis.argumentValues[index] = value;\n \t\t\treturn this;",
    "output": "Fix typo Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java\n@@ -189,7 +189,7 @@ public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement elem\n \tpublic static AnnotationAttributes findAnnotationAttributes(AnnotatedElement element,\n \t\t\tClass<? extends Annotation> annotationType) {\n \t\tAssert.notNull(annotationType, \"annotationType must not be null\");\n-\t\treturn findAnnotationAttributes(element, annotationType.getName(), true, true, true, true, false, false);\n+\t\treturn findAnnotationAttributes(element, annotationType.getName());\n \t}\n \n \t/**\n@@ -209,7 +209,7 @@ public static AnnotationAttributes findAnnotationAttributes(AnnotatedElement ele\n \t * not found\n \t */\n \tpublic static AnnotationAttributes findAnnotationAttributes(AnnotatedElement element, String annotationType) {\n-\t\treturn findAnnotationAttributes(element, annotationType, true, true, true, true, false, false);\n+\t\treturn findAnnotationAttributes(element, annotationType, false, false);\n \t}\n \n \t/**\n@@ -697,6 +697,14 @@ public final void postProcess(Annotation annotation, T result) {\n \t\t}\n \t}\n \n+\t/**\n+\t * {@link Processor} that gets the {@code AnnotationAttributes} for the\n+\t * target annotation during the {@link #process} phase and then merges\n+\t * annotation attributes from lower levels in the annotation hierarchy\n+\t * during the {@link #postProcess} phase.\n+\t * @see AnnotationUtils#getAnnotationAttributes(Annotation)\n+\t * @since 4.2\n+\t */\n \tprivate static class MergeAnnotationAttributesProcessor implements Processor<AnnotationAttributes> {\n \n \t\tprivate final boolean classValuesAsString;",
    "output": "Polish internal Javadoc for AnnotatedElementUtils Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java\n@@ -83,7 +83,7 @@ static TransactionalEventListener findAnnotation(Method method) {\n \t\tTransactionalEventListener annotation = AnnotationUtils\n \t\t\t\t.findAnnotation(method, TransactionalEventListener.class);\n \t\tif (annotation == null) {\n-\t\t\tthrow new IllegalStateException(\"No TransactionalEventListener annotation found ou '\" + method + \"'\");\n+\t\t\tthrow new IllegalStateException(\"No TransactionalEventListener annotation found on '\" + method + \"'\");\n \t\t}\n \t\treturn annotation;\n \t}",
    "output": "Fix typo in exception message"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -339,10 +339,11 @@ public Object doInTransaction(TransactionStatus status) {\n \t}\n \n \t/**\n-\t * Clear the cached transaction managers.\n+\t * Clear the cache.\n \t */\n \tprotected void clearTransactionManagerCache() {\n \t\tthis.transactionManagerCache.clear();\n+\t\tthis.beanFactory = null;\n \t}\n \n \t/**",
    "output": "Do not retain BeanFactory ref This is a rework of fd7153f that also now clears the reference to the BeanFactory when the context is disposed. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java b/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/DefaultTestContext.java\n@@ -19,6 +19,7 @@\n import java.lang.reflect.Method;\n \n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.AttributeAccessorSupport;\n import org.springframework.core.style.ToStringCreator;\n import org.springframework.test.annotation.DirtiesContext.HierarchyMode;\n@@ -75,9 +76,18 @@ public DefaultTestContext(Class<?> testClass, MergedContextConfiguration mergedC\n \t * <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate}\n \t * that was supplied when this {@code TestContext} was constructed.\n \t * @see CacheAwareContextLoaderDelegate#loadContext\n+\t * @throws IllegalStateException if the context returned by the context\n+\t * loader delegate is not <em>active</em> (i.e., has been closed).\n \t */\n \tpublic ApplicationContext getApplicationContext() {\n-\t\treturn this.cacheAwareContextLoaderDelegate.loadContext(this.mergedContextConfiguration);\n+\t\tApplicationContext context = this.cacheAwareContextLoaderDelegate.loadContext(this.mergedContextConfiguration);\n+\t\tif (context instanceof ConfigurableApplicationContext) {\n+\t\t\t@SuppressWarnings(\"resource\")\n+\t\t\tConfigurableApplicationContext cac = (ConfigurableApplicationContext) context;\n+\t\t\tAssert.state(cac.isActive(), \"The ApplicationContext loaded for [\" + mergedContextConfiguration\n+\t\t\t\t\t+ \"] is not active. Ensure that the context has not been closed programmatically.\");\n+\t\t}\n+\t\treturn context;\n \t}\n \n \t/**",
    "output": "Ensure that contexts loaded by the TCF are active This commit adds an assertion to DefaultTestContext's getApplicationContextmethod to ensure that a context loaded by the Spring TestContext Framework (TCF) or retrieved from the ContextCache is still active. This extra check helps to avoid situations where developers manually close a cached context instead of relying on the @DirtiesContext support. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java\n@@ -2410,6 +2410,7 @@ public ITestBean convert(String source) {\n \t\t}\n \n \t\t@ResponseStatus(HttpStatus.NOT_FOUND)\n+\t\t@SuppressWarnings(\"serial\")\n \t\tprivate static class NotFoundException extends RuntimeException {\n \t\t}\n \t}",
    "output": "Suppress warning in ServletAnnotationControllerHandlerMethodTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n@@ -46,6 +46,7 @@\n import org.springframework.cglib.transform.TransformingClassGenerator;\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.ReflectionUtils;\n \n@@ -322,7 +323,7 @@ public Object intercept(Object enhancedConfigInstance, Method beanMethod, Object\n \t\t\t\t\t}\n \t\t\t\t\tObject beanInstance = (!ObjectUtils.isEmpty(beanMethodArgs) ?\n \t\t\t\t\t\t\tbeanFactory.getBean(beanName, beanMethodArgs) : beanFactory.getBean(beanName));\n-\t\t\t\t\tif (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {\n+\t\t\t\t\tif (beanInstance != null && !ClassUtils.isAssignableValue(beanMethod.getReturnType(), beanInstance)) {\n \t\t\t\t\t\tString msg = String.format(\"@Bean method %s.%s called as a bean reference \" +\n \t\t\t\t\t\t\t\t\t\"for type [%s] but overridden by non-compatible bean instance of type [%s].\",\n \t\t\t\t\t\t\t\t\tbeanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName(),",
    "output": "Bean type mismatch check accepts assignable values according to ClassUtils Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/util/AssertTests.java b/spring-core/src/test/java/org/springframework/util/AssertTests.java\n--- a/spring-core/src/test/java/org/springframework/util/AssertTests.java\n+++ b/spring-core/src/test/java/org/springframework/util/AssertTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,17 +35,22 @@\n  * @author Erwin Vervaet\n  * @author Rick Evans\n  * @author Arjen Poutsma\n+ * @author Sam Brannen\n  */\n public class AssertTests {\n \n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();\n \n-\t@Test(expected = IllegalArgumentException.class)\n+\n+\t@Test\n \tpublic void instanceOf() {\n-\t\tfinal Set<?> set = new HashSet<Object>();\n-\t\tAssert.isInstanceOf(HashSet.class, set);\n-\t\tAssert.isInstanceOf(HashMap.class, set);\n+\t\tAssert.isInstanceOf(HashSet.class, new HashSet<Object>());\n+\t}\n+\n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void instanceOfWithTypeMismatch() {\n+\t\tAssert.isInstanceOf(HashMap.class, new HashSet<Object>());\n \t}\n \n \t@Test",
    "output": "Isolate thrown exception in AssertTests"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -184,7 +184,8 @@ public void afterSingletonsInstantiated() {\n \t\t\t}\n \t\t\tcatch (NoUniqueBeanDefinitionException ex) {\n \t\t\t\tthrow new IllegalStateException(\"No CacheResolver specified, and no unique bean of type \" +\n-\t\t\t\t\t\t\"CacheManager found. Mark one as primary or declare a specific CacheManager to use.\");\n+\t\t\t\t\t\t\"CacheManager found. Mark one as primary (or give it the name 'cacheManager') or \" +\n+\t\t\t\t\t\t\"declare a specific CacheManager to use, that serves as the default one.\");\n \t\t\t}\n \t\t\tcatch (NoSuchBeanDefinitionException ex) {\n \t\t\t\tthrow new IllegalStateException(\"No CacheResolver specified, and no bean of type CacheManager found. \" +",
    "output": "Improve exception message Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java\n@@ -147,7 +147,8 @@ protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, Meth\n \t\tObject arg = readWithMessageConverters(inputMessage, methodParam, paramType);\n \t\tif (arg == null) {\n \t\t\tif (methodParam.getParameterAnnotation(RequestBody.class).required()) {\n-\t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" + methodParam);\n+\t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" +\n+\t\t\t\t\t\tmethodParam.getMethod().toGenericString());\n \t\t\t}\n \t\t}\n ",
    "output": "Improve error message for missing request body Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -583,6 +583,7 @@ public static AnnotationAttributes getAnnotationAttributes(Annotation annotation\n \t\tfor (Method method : methods) {\n \t\t\tif (method.getParameterTypes().length == 0 && method.getReturnType() != void.class) {\n \t\t\t\ttry {\n+\t\t\t\t\tReflectionUtils.makeAccessible(method);\n \t\t\t\t\tObject value = method.invoke(annotation);\n \t\t\t\t\tattrs.put(method.getName(), adaptValue(value, classValuesAsString, nestedAnnotationsAsMap));\n \t\t\t\t}",
    "output": "AnnotationUtils.getAnnotationAttributes makes Method accessible (analogous to AnnotationUtils.getValue) Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -1055,7 +1055,7 @@ else if (propValue instanceof Map) {\n \t\t\telse {\n \t\t\t\tthrow new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,\n \t\t\t\t\t\t\"Property referenced in indexed property path '\" + propertyName +\n-\t\t\t\t\t\t\"' is neither an array nor a List nor a Map; returned value was [\" + pv.getValue() + \"]\");\n+\t\t\t\t\t\t\"' is neither an array nor a List nor a Map; returned value was [\" + propValue + \"]\");\n \t\t\t}\n \t\t}\n ",
    "output": "BeanWrapperImpl.setPropertyValue throws InvalidPropertyException with correct property value for nested collection case Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java b/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java\n--- a/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/CookieGenerator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -203,6 +203,12 @@ public void removeCookie(HttpServletResponse response) {\n \t\tAssert.notNull(response, \"HttpServletResponse must not be null\");\n \t\tCookie cookie = createCookie(\"\");\n \t\tcookie.setMaxAge(0);\n+\t\tif (isCookieSecure()) {\n+\t\t\tcookie.setSecure(true);\n+\t\t}\n+\t\tif (isCookieHttpOnly()) {\n+\t\t\tcookie.setHttpOnly(true);\n+\t\t}\n \t\tresponse.addCookie(cookie);\n \t\tif (logger.isDebugEnabled()) {\n \t\t\tlogger.debug(\"Removed cookie with name [\" + getCookieName() + \"]\");",
    "output": "CookieGenerator explicitly sets 'secure' and 'httpOnly' flags in removeCookie as well Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java\n@@ -108,7 +108,6 @@ public void exceptionCacheResolverLazilyRequired() {\n \t\ttry {\n \t\t\tDefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class);\n \t\t\tassertSame(context.getBean(\"cacheResolver\"), cos.getCacheResolver());\n-\t\t\tassertNull(cos.getExceptionCacheResolver());\n \n \t\t\tJCacheableService<?> service = context.getBean(JCacheableService.class);\n ",
    "output": "Fix test The rework of 314b069 in a7fec6a has created a lazy proxy to make sure that the need for an exception cache resolver come as late as possible. Unfortunately, the test that was only failing on CI because of an early lookup has not been updated accordingly. This is now the case. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n@@ -223,6 +223,14 @@ protected final MessageBrokerRegistry getBrokerRegistry() {\n \tprotected void configureMessageBroker(MessageBrokerRegistry registry) {\n \t}\n \n+\t/**\n+\t * Provide access to the configured PatchMatcher for access from other\n+\t * configuration classes.\n+\t */\n+\tpublic final PathMatcher getPathMatcher() {\n+\t\treturn getBrokerRegistry().getPathMatcher();\n+\t}\n+\n \t@Bean\n \tpublic SimpAnnotationMethodMessageHandler simpAnnotationMethodMessageHandler() {\n \t\tSimpAnnotationMethodMessageHandler handler = createAnnotationMethodMessageHandler();",
    "output": "Add public access to PathMatcher in WebSocket config Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -824,14 +824,22 @@ else if (oldBeanDefinition.getRole() < beanDefinition.getRole()) {\n \t\t\t\t// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE\n \t\t\t\tif (this.logger.isWarnEnabled()) {\n \t\t\t\t\tthis.logger.warn(\"Overriding user-defined bean definition for bean '\" + beanName +\n-\t\t\t\t\t\t\t\" with a framework-generated bean definition ': replacing [\" +\n+\t\t\t\t\t\t\t\"' with a framework-generated bean definition: replacing [\" +\n \t\t\t\t\t\t\toldBeanDefinition + \"] with [\" + beanDefinition + \"]\");\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse {\n+\t\t\telse if (!beanDefinition.equals(oldBeanDefinition)) {\n \t\t\t\tif (this.logger.isInfoEnabled()) {\n \t\t\t\t\tthis.logger.info(\"Overriding bean definition for bean '\" + beanName +\n-\t\t\t\t\t\t\t\"': replacing [\" + oldBeanDefinition + \"] with [\" + beanDefinition + \"]\");\n+\t\t\t\t\t\t\t\"' with a different definition: replacing [\" + oldBeanDefinition +\n+\t\t\t\t\t\t\t\"] with [\" + beanDefinition + \"]\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tif (this.logger.isDebugEnabled()) {\n+\t\t\t\t\tthis.logger.debug(\"Overriding bean definition for bean '\" + beanName +\n+\t\t\t\t\t\t\t\"' with an equivalent definition: replacing [\" + oldBeanDefinition +\n+\t\t\t\t\t\t\t\"] with [\" + beanDefinition + \"]\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Reduced DefaultListableBeanFactory's override logging to debug level for equivalent bean definition Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpConnection.java b/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpConnection.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpConnection.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpConnection.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,18 +16,19 @@\n \n package org.springframework.messaging.tcp;\n \n+import java.io.Closeable;\n+\n import org.springframework.messaging.Message;\n import org.springframework.util.concurrent.ListenableFuture;\n \n /**\n  * A contract for sending messages and managing a TCP connection.\n  *\n- * @param <P> the type of payload for outbound {@link Message}s\n- *\n  * @author Rossen Stoyanchev\n  * @since 4.0\n+ * @param <P> the type of payload for outbound {@link Message}s\n  */\n-public interface TcpConnection<P> {\n+public interface TcpConnection<P> extends Closeable {\n \n \t/**\n \t * Send the given message.\n@@ -54,6 +55,7 @@ public interface TcpConnection<P> {\n \t/**\n \t * Close the connection.\n \t */\n+\t@Override\n \tvoid close();\n \n }",
    "output": "TcpConnection extends java.io.Closeable Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java\n@@ -146,7 +146,7 @@ public void setHandshakeInterceptors(List<HandshakeInterceptor> interceptors) {\n \t * Return the configured WebSocket handshake request interceptors.\n \t */\n \tpublic List<HandshakeInterceptor> getHandshakeInterceptors() {\n-\t\treturn Collections.unmodifiableList(this.interceptors);\n+\t\treturn this.interceptors;\n \t}\n \n ",
    "output": "Allow modifying HandshakeInterceptor list The getter in TransportHandlingSockJsService now returns a mutable List. The immutable wrapper doesn't make sense since it's possible anyway to modify the list by creating a new list and calling the setter again. It's also consistent with the same field on WebSocketHttpRequestHandler. This is related to work for"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -207,7 +208,8 @@ public HttpHeaders getMultipartHeaders(String paramOrFileName) {\n \t/**\n \t * Spring MultipartFile adapter, wrapping a Servlet 3.0 Part object.\n \t */\n-\tprivate static class StandardMultipartFile implements MultipartFile {\n+\t@SuppressWarnings(\"serial\")\n+\tprivate static class StandardMultipartFile implements MultipartFile, Serializable {\n \n \t\tprivate final Part part;\n ",
    "output": "StandardMultipartFile declares itself as Serializable now Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -437,10 +437,6 @@ public TypeDescriptor getMapValueTypeDescriptor(Object mapValue) {\n \t\treturn narrow(mapValue, getMapValueTypeDescriptor());\n \t}\n \n-\tprivate Class<?> getType(TypeDescriptor typeDescriptor) {\n-\t\treturn (typeDescriptor != null ? typeDescriptor.getType() : null);\n-\t}\n-\n \tprivate TypeDescriptor narrow(Object value, TypeDescriptor typeDescriptor) {\n \t\tif (typeDescriptor != null) {\n \t\t\treturn typeDescriptor.narrow(value);",
    "output": "Delete unused method in TypeDescriptor"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -385,6 +385,10 @@ else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATIO\n \t\t}\n \t\telse {\n \t\t\t// Create \"empty\" transaction: no actual transaction, but potentially synchronization.\n+\t\t\tif (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"Custom isolation level specified but no actual transaction initiated; \" +\n+\t\t\t\t\t\t\"isolation level will effectively be ignored: \" + definition);\n+\t\t\t}\n \t\t\tboolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);\n \t\t\treturn prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);\n \t\t}",
    "output": "AbstractPlatformTransactionManager logs warning for custom isolation level in case of no actual transaction Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,9 +78,11 @@ public boolean containsProperty(String name) {\n \tpublic String[] getPropertyNames() {\n \t\tSet<String> names = new LinkedHashSet<String>();\n \t\tfor (PropertySource<?> propertySource : this.propertySources) {\n-\t\t\tif (propertySource instanceof EnumerablePropertySource) {\n-\t\t\t\tnames.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));\n+\t\t\tif (!(propertySource instanceof EnumerablePropertySource)) {\n+\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Failed to enumerate property names due to non-enumerable property source: \" + propertySource);\n \t\t\t}\n+\t\t\tnames.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));\n \t\t}\n \t\treturn StringUtils.toStringArray(names);\n \t}",
    "output": "CompositePropertySource rejects getPropertyNames call when containing a non-enumerable source Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n@@ -18,7 +18,6 @@\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;\n \n import java.util.Collection;",
    "output": "Delete unused import in AsyncTests"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java\n@@ -33,12 +33,12 @@ public class ScriptStatementFailedException extends ScriptException {\n \t * Construct a new {@code ScriptStatementFailedException}.\n \t * @param stmt the actual SQL statement that failed\n \t * @param stmtNumber the statement number in the SQL script (i.e.,\n-\t * the nth statement present in the resource)\n-\t * @param resource the resource from which the SQL statement was read\n+\t * the n<sup>th</sup> statement present in the resource)\n+\t * @param encodedResource the resource from which the SQL statement was read\n \t * @param cause the underlying cause of the failure\n \t */\n-\tpublic ScriptStatementFailedException(String stmt, int stmtNumber, EncodedResource resource, Throwable cause) {\n-\t\tsuper(buildErrorMessage(stmt, stmtNumber, resource), cause);\n+\tpublic ScriptStatementFailedException(String stmt, int stmtNumber, EncodedResource encodedResource, Throwable cause) {\n+\t\tsuper(buildErrorMessage(stmt, stmtNumber, encodedResource), cause);\n \t}\n \n \t/**",
    "output": "Polish Javadoc for ScriptStatementFailedException constructor Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -32,12 +32,13 @@ public class ScriptStatementFailedException extends ScriptException {\n \t/**\n \t * Construct a new {@code ScriptStatementFailedException}.\n \t * @param statement the actual SQL statement that failed\n-\t * @param lineNumber the line number in the SQL script\n+\t * @param statementNumber the statement number in the SQL script (i.e.,\n+\t * the nth statement present in the resource)\n \t * @param resource the resource from which the SQL statement was read\n \t * @param cause the underlying cause of the failure\n \t */\n-\tpublic ScriptStatementFailedException(String statement, int lineNumber, EncodedResource resource, Throwable cause) {\n-\t\tsuper(\"Failed to execute SQL script statement at line \" + lineNumber + \" of resource \" + resource + \": \"\n+\tpublic ScriptStatementFailedException(String statement, int statementNumber, EncodedResource resource, Throwable cause) {\n+\t\tsuper(\"Failed to execute SQL script statement #\" + statementNumber + \" of resource \" + resource + \": \"\n \t\t\t\t+ statement, cause);\n \t}\n ",
    "output": "Refer to statement numbers in ScriptStatementFailedException ScriptStatementFailedException now properly refers to statement numbers instead of line numbers. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/config/ScheduledTaskRegistrarTests.java b/spring-context/src/test/java/org/springframework/scheduling/config/ScheduledTaskRegistrarTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/config/ScheduledTaskRegistrarTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/config/ScheduledTaskRegistrarTests.java\n@@ -27,7 +27,7 @@\n /**\n  * @author Tobias Montagna-Hay\n  */\n-public class ScheduledTaskRegistrarTest {\n+public class ScheduledTaskRegistrarTests {\n \n \tprivate final ScheduledTaskRegistrar taskRegistrar = new ScheduledTaskRegistrar();\n ",
    "output": "Rename ScheduledTaskRegistrarTest to ScheduledTaskRegistrarTests Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java\n@@ -179,8 +179,10 @@ else if (resource instanceof ServletContextResource) {\n \t\t\tresourcePath = resource.getURL().getPath();\n \t\t\tlocationPath = StringUtils.cleanPath(location.getURL().getPath());\n \t\t}\n-\t\tlocationPath = (StringUtils.getFilenameExtension(locationPath) != null\n-\t\t\t\t|| locationPath.endsWith(\"/\") || locationPath.isEmpty() ? locationPath : locationPath + \"/\");\n+\t\tif(locationPath.equals(resourcePath)) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tlocationPath = (locationPath.endsWith(\"/\") || locationPath.isEmpty() ? locationPath : locationPath + \"/\");\n \t\tif (!resourcePath.startsWith(locationPath)) {\n \t\t\treturn false;\n \t\t}",
    "output": "Polish file locations in resource handling Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -223,7 +223,7 @@ public void setServletContext(ServletContext servletContext) {\n \t */\n \t@Bean\n \tpublic RequestMappingHandlerMapping requestMappingHandlerMapping() {\n-\t\tRequestMappingHandlerMapping handlerMapping = new RequestMappingHandlerMapping();\n+\t\tRequestMappingHandlerMapping handlerMapping = createRequestMappingHandlerMapping();\n \t\thandlerMapping.setOrder(0);\n \t\thandlerMapping.setInterceptors(getInterceptors());\n \t\thandlerMapping.setContentNegotiationManager(mvcContentNegotiationManager());\n@@ -248,6 +248,14 @@ public RequestMappingHandlerMapping requestMappingHandlerMapping() {\n \t\treturn handlerMapping;\n \t}\n \n+\t/**\n+\t * Protected method for plugging in a custom sub-class of\n+\t * {@link RequestMappingHandlerMapping}.\n+\t */\n+\tprotected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {\n+\t\treturn new RequestMappingHandlerMapping();\n+\t}\n+\n \t/**\n \t * Provide access to the shared handler interceptors used to configure\n \t * {@link HandlerMapping} instances with. This method cannot be overridden,",
    "output": "Allow custom RequestMappingHandlerMapping Extract the creation of RequestMappingHandlerMapping into protected method to allow easier use of custom subclasses. Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java b/spring-jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java\n--- a/spring-jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java\n@@ -419,7 +419,7 @@ protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) t\n \t * @return the RemoteAccessException to throw\n \t */\n \tprotected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {\n-\t\tthrow new RemoteAccessException(\"Could not access JMS invoker queue [\" + this.queue + \"]\", ex);\n+\t\treturn new RemoteAccessException(\"Could not access JMS invoker queue [\" + this.queue + \"]\", ex);\n \t}\n \n }",
    "output": "Return exception from convertJmsInvokerAccessExceptionThe convertJmsInvokerAccessExceptionmethod in JmsInvokerClientInterceptor now correctly returns the converted exception instead of throwing it"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.context.ApplicationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.ApplicationEventPublisherAware;\n@@ -200,7 +201,7 @@ else if (webSocketMessage instanceof BinaryMessage) {\n \t\t\t\tbyteBuffer = ((BinaryMessage) webSocketMessage).getPayload();\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tthrow new IllegalArgumentException(\"Unexpected WebSocket message type: \" + webSocketMessage);\n+\t\t\t\treturn;\n \t\t\t}\n \n \t\t\tBufferingStompDecoder decoder = this.decoders.get(session.getId());",
    "output": "Ignore Pong messages in StompSubProtocolHandler Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java\n@@ -29,6 +29,7 @@\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.http.HttpInputMessage;\n import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.lang.UsesJava8;\n import org.springframework.util.Assert;\n import org.springframework.validation.BindingResult;\n import org.springframework.validation.Errors;\n@@ -112,6 +113,7 @@ else if (\"javax.servlet.http.Part\".equals(parameter.getParameterType().getName()\n \t}\n \n \t@Override\n+\t@UsesJava8\n \tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n \t\t\tNativeWebRequest request, WebDataBinderFactory binderFactory) throws Exception {\n ",
    "output": "RequestPartMethodArgumentResolver declares @UsesJava8 now Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/freemarker/FreeMarkerView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/freemarker/FreeMarkerView.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/freemarker/FreeMarkerView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/freemarker/FreeMarkerView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -186,6 +186,7 @@ protected FreeMarkerConfig autodetectConfiguration() throws BeansException {\n \t * {@link ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.\n \t * @see freemarker.template.Configuration#getObjectWrapper()\n \t */\n+\t@SuppressWarnings(\"deprecation\")\n \tprotected ObjectWrapper getObjectWrapper() {\n \t\tObjectWrapper ow = getConfiguration().getObjectWrapper();\n \t\treturn (ow != null ? ow : ObjectWrapper.DEFAULT_WRAPPER);",
    "output": "Latest dependency updates (POI 3.11, FreeMarker 2.3.21)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -573,7 +573,7 @@ protected boolean isSubDelimiter(int c) {\n \t\t * @see <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986, appendix A</a>\n \t\t */\n \t\tprotected boolean isReserved(char c) {\n-\t\t\treturn isGenericDelimiter(c) || isReserved(c);\n+\t\t\treturn isGenericDelimiter(c) || isSubDelimiter(c);\n \t\t}\n \n \t\t/**",
    "output": "Fix reserved set definition according to appendix A of RFC 3986 I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n--- a/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java\n@@ -288,8 +288,8 @@ private String getInvocationErrorMessage(Object bean, String message, Object[] r\n \n \n \tprivate ResolvableType resolveDeclaredEventType() {\n-\t\tParameter[] parameters = this.method.getParameters();\n-\t\tif (parameters.length != 1) {\n+\t\tint count = this.method.getParameterTypes().length;\n+\t\tif (count != 1) {\n \t\t\tthrow new IllegalStateException(\"Only one parameter is allowed \" +\n \t\t\t\t\t\"for event listener method: \" + method);\n \t\t}",
    "output": "Fix usage of Java8 API"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.java b/spring-test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,7 +41,7 @@ public abstract class AnnotationConfigContextLoaderUtils {\n \n \t/**\n \t * Detect the default configuration classes for the supplied test class.\n-\t * <p>The returned class array will contain all static inner classes of\n+\t * <p>The returned class array will contain all static nested classes of\n \t * the supplied class that meet the requirements for {@code @Configuration}\n \t * class implementations as specified in the documentation for\n \t * {@link Configuration @Configuration}.\n@@ -78,7 +78,7 @@ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringCla\n \t\tif (configClasses.isEmpty()) {\n \t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(String.format(\"Could not detect default configuration classes for test class [%s]: \" +\n-\t\t\t\t\t\t\"%s does not declare any static, non-private, non-final, inner classes \" +\n+\t\t\t\t\t\t\"%s does not declare any static, non-private, non-final, nested classes \" +\n \t\t\t\t\t\t\"annotated with @Configuration.\", declaringClass.getName(), declaringClass.getSimpleName()));\n \t\t\t}\n \t\t}",
    "output": "Refer to static nested classes, not static inner classes Various parts of the reference manual as well as the Javadoc for AnnotationConfigContextLoaderUtils improperly refer to \"static inner classes\" even though this terminology does not exist in Java. The Java Language Specification explicitly refers to such classes as \"static nested classes.\" An \"inner class\" must be non-static by definition"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n@@ -211,7 +211,7 @@ public final String getForLookupPath(String lookupPath) {\n \t\t\tResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers());\n \t\t\tString resolved = chain.resolveUrlPath(pathWithinMapping, handler.getLocations());\n \t\t\tif (resolved == null) {\n-\t\t\t\tthrow new IllegalStateException(\"Failed to get public resource URL path for \" + pathWithinMapping);\n+\t\t\t\tcontinue;\n \t\t\t}\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Resolved public resource URL path=\\\"\" + resolved + \"\\\"\");",
    "output": "Remove ISE in ResourceUrlProvider Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n@@ -381,24 +381,28 @@ public void schedulerRepositoryExposure() throws Exception {\n \n \t/**\n \t * SPR-6038: detect HSQL and stop illegal locks being taken.\n+\t * TODO: Against Quartz 2.2, this test's job doesn't actually execute anymore...\n \t */\n \t@Test\n \tpublic void schedulerWithHsqlDataSource() throws Exception {\n-\t\tAssume.group(TestGroup.PERFORMANCE);\n+\t\t// Assume.group(TestGroup.PERFORMANCE);\n \n \t\tDummyJob.param = 0;\n \t\tDummyJob.count = 0;\n \n \t\tClassPathXmlApplicationContext ctx = context(\"databasePersistence.xml\");\n \t\tJdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class));\n-\t\tassertTrue(\"No triggers were persisted\", jdbcTemplate.queryForList(\"SELECT * FROM qrtz_triggers\").size()>0);\n+\t\tassertFalse(\"No triggers were persisted\", jdbcTemplate.queryForList(\"SELECT * FROM qrtz_triggers\").isEmpty());\n+\n+\t\t/*\n \t\tThread.sleep(3000);\n \t\ttry {\n \t\t\tassertTrue(\"DummyJob should have been executed at least once.\", DummyJob.count > 0);\n \t\t}\n \t\tfinally {\n \t\t\tctx.close();\n \t\t}\n+\t\t*/\n \t}\n \n \tprivate ClassPathXmlApplicationContext context(String path) {",
    "output": "Allow schedulerWithHsqlDataSource to pass through reducing it to the trigger table check Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n--- a/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -214,7 +214,14 @@ protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {\n \t\t\tnotifier.fireTestIgnored(description);\n \t\t}\n \t\telse {\n-\t\t\trunLeaf(methodBlock(frameworkMethod), description, notifier);\n+\t\t\tStatement statement;\n+\t\t\ttry {\n+\t\t\t\tstatement = methodBlock(frameworkMethod);\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\tstatement = new Fail(ex);\n+\t\t\t}\n+\t\t\trunLeaf(statement, description, notifier);\n \t\t}\n \t}\n ",
    "output": "Handle exceptions properly in SpringJUnit4ClassRunner JUnit 4.9 introduced a regression in BlockJUnit4ClassRunner.runChildsuch that exceptions thrown from methodBlockcause the current test execution to abort immediately. As a result, the failing test method is unrooted, and subsequent test methods are never invoked. Furthermore, RunListeners registered with JUnit are not properly notified. In conjunction with , SpringJUnit4ClassRunner was updated to use the aforementioned changes to BlockJUnit4ClassRunner.runChild. Consequently, SpringJUnit4ClassRunner now suffers from the same regression. This commit addresses this issue by ensuring that any exceptions thrown during the invocation of methodBlockare properly wrapped in a JUnit Fail Statement. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/JettySockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/JettySockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/JettySockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/JettySockJsIntegrationTests.java\n@@ -17,9 +17,11 @@\n package org.springframework.web.socket.sockjs.client;\n \n import org.eclipse.jetty.client.HttpClient;\n-\n+import org.junit.BeforeClass;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.tests.Assume;\n+import org.springframework.tests.TestGroup;\n import org.springframework.web.socket.JettyWebSocketTestServer;\n import org.springframework.web.socket.client.jetty.JettyWebSocketClient;\n import org.springframework.web.socket.server.RequestUpgradeStrategy;\n@@ -32,6 +34,10 @@\n  */\n public class JettySockJsIntegrationTests extends AbstractSockJsIntegrationTests {\n \n+\t@BeforeClass\n+\tpublic static void setUpOnce() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n+\t}\n \n \t@Override\n \tprotected Class<?> upgradeStrategyConfigClass() {",
    "output": "Assign Jetty SockJS tests to \"performance\" test group This change designates Jetty SockJS integration tests to run as part of the \"performance\", but not the main \"publication\", CI build due to recurring low-level failures suspected to be Jetty issues, e.g. \"java.io.IOException: Cannot append to finished buffer\" or \"java.io.IOException: Out of order Continuation frame encountered\". The tests will still run at once a day with the performance build but should not fail the main build with false negatives. Also note that an Undertow variant of the exact same tests, which hasn't been failing, will continue to run as part of the main build"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java\n@@ -69,7 +69,7 @@ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor t\n \t\t}\n \t\telse {\n \t\t\tObject target = this.conversionService.convert(source, sourceType, new GenericTypeDescriptor(targetType));\n-\t\t\treturn Optional.of(target);\n+\t\t\treturn Optional.ofNullable(target);\n \t\t}\n \t}\n ",
    "output": "ObjectToOptionalConverter uses Optional.ofNullable after ConversionService invocation Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java\n@@ -265,6 +265,8 @@ else if (localeResolver != null) {\n \t\t// context-param in web.xml, if any.\n \t\tthis.defaultHtmlEscape = WebUtils.getDefaultHtmlEscape(this.webApplicationContext.getServletContext());\n \n+\t\t// Determine response-encoded HTML escape setting from the \"responseEncodedHtmlEscape\"\n+\t\t// context-param in web.xml, if any.\n \t\tthis.responseEncodedHtmlEscape = WebUtils.getResponseEncodedHtmlEscape(this.webApplicationContext.getServletContext());\n \n \t\tthis.urlPathHelper = new UrlPathHelper();\n@@ -491,11 +493,11 @@ public Boolean getDefaultHtmlEscape() {\n \t/**\n \t * Is HTML escaping using the response encoding by default?\n \t * If enabled, only XML markup significant characters will be escaped with UTF-* encodings.\n-\t * <p>Falls back to {@code false} in case of no explicit default given.\n+\t * <p>Falls back to {@code true} in case of no explicit default given, as of Spring 4.2.\n \t * @since 4.1.2\n \t */\n \tpublic boolean isResponseEncodedHtmlEscape() {\n-\t\treturn (this.responseEncodedHtmlEscape != null && this.responseEncodedHtmlEscape.booleanValue());\n+\t\treturn (this.responseEncodedHtmlEscape == null || this.responseEncodedHtmlEscape.booleanValue());\n \t}\n \n \t/**",
    "output": "Switch responseEncodedHtmlEscape default to true Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n--- a/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n@@ -199,7 +199,9 @@ private Collection<ApplicationListener<?>> retrieveApplicationListeners(\n \t\t}\n \t\tfor (ApplicationListener<?> listener : listeners) {\n \t\t\tif (supportsEvent(listener, event.getClass(), sourceType)) {\n-\t\t\t\tretriever.applicationListeners.add(listener);\n+\t\t\t\tif (retriever != null) {\n+\t\t\t\t\tretriever.applicationListeners.add(listener);\n+\t\t\t\t}\n \t\t\t\tallListeners.add(listener);\n \t\t\t}\n \t\t}\n@@ -212,7 +214,9 @@ private Collection<ApplicationListener<?>> retrieveApplicationListeners(\n \t\t\t\t\t\tApplicationListener<?> listener =\n \t\t\t\t\t\t\t\tbeanFactory.getBean(listenerBeanName, ApplicationListener.class);\n \t\t\t\t\t\tif (!allListeners.contains(listener) && supportsEvent(listener, event.getClass(), sourceType)) {\n-\t\t\t\t\t\t\tretriever.applicationListenerBeans.add(listenerBeanName);\n+\t\t\t\t\t\t\tif (retriever != null) {\n+\t\t\t\t\t\t\t\tretriever.applicationListenerBeans.add(listenerBeanName);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tallListeners.add(listener);\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Prevent NPE in AbstractApplicationEventMulticaster's non-caching code path Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,7 +70,7 @@ public String resolveStringValue(String strVal) {\n \t@Override\n \tpublic ManagedResource getManagedResource(Class<?> beanClass) throws InvalidMetadataException {\n \t\torg.springframework.jmx.export.annotation.ManagedResource ann =\n-\t\t\t\tbeanClass.getAnnotation(org.springframework.jmx.export.annotation.ManagedResource.class);\n+\t\t\t\tAnnotationUtils.getAnnotation(beanClass, org.springframework.jmx.export.annotation.ManagedResource.class);\n \t\tif (ann == null) {\n \t\t\treturn null;\n \t\t}\n@@ -148,7 +148,7 @@ public ManagedOperationParameter[] getManagedOperationParameters(Method method)\n \n \t@Override\n \tpublic ManagedNotification[] getManagedNotifications(Class<?> clazz) throws InvalidMetadataException {\n-\t\tManagedNotifications notificationsAnn = clazz.getAnnotation(ManagedNotifications.class);\n+\t\tManagedNotifications notificationsAnn = AnnotationUtils.getAnnotation(clazz, ManagedNotifications.class);\n \t\tif (notificationsAnn == null) {\n \t\t\treturn new ManagedNotification[0];\n \t\t}",
    "output": "AnnotationJmxAttributeSource uses AnnotationUtils for consistent meta-annotation handling and diagnostics Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -855,7 +855,13 @@ public void registerScope(String scopeName, Scope scope) {\n \t\tif (SCOPE_SINGLETON.equals(scopeName) || SCOPE_PROTOTYPE.equals(scopeName)) {\n \t\t\tthrow new IllegalArgumentException(\"Cannot replace existing scopes 'singleton' and 'prototype'\");\n \t\t}\n-\t\tthis.scopes.put(scopeName, scope);\n+\t\tScope previous = this.scopes.put(scopeName, scope);\n+\t\tif (previous != null && logger.isInfoEnabled()) {\n+\t\t\tlogger.info(\"Replacing scope '\" + scopeName + \"' from '\" + previous + \"' to '\" + scope);\n+\t\t}\n+\t\telse if (previous == null && logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(\"Registering scope '\" + scopeName + \"' with '\" + scope + \"'\");\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Improve logging of registerScope Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -338,6 +338,13 @@ public Object doInTransaction(TransactionStatus status) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Clear the cached transaction managers.\n+\t */\n+\tprotected void clearTransactionManagerCache() {\n+\t\tthis.transactionManagerCache.clear();\n+\t}\n+\n \t/**\n \t * Determine the specific transaction manager to use for the given transaction.\n \t */",
    "output": "Do not retain cache transaction managers Previously, cache transaction managers may be retained outside the boundaries of an application context with AspectJ since an aspect is basically a singleton for the current class loader. This commit adds a \"clearTransactionManagerCache\" that is similar to the \"clearMetadataCache\" introduced in CacheAspectSupport: whenever the context is disposed, the cache is cleared to remove any reference to a transaction manager defined by that context. Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaVendorAdapter.java\n@@ -76,7 +76,8 @@ else if (getDatabase() != null) {\n \t\t\t\t\tPersistenceUnitProperties.DDL_DATABASE_GENERATION);\n \t\t}\n \t\tif (isShowSql()) {\n-\t\t\tjpaProperties.put(PersistenceUnitProperties.LOGGING_LEVEL, Level.FINE.toString());\n+\t\t\tjpaProperties.put(PersistenceUnitProperties.CATEGORY_LOGGING_LEVEL_ +\n+\t\t\t\t\torg.eclipse.persistence.logging.SessionLog.SQL, Level.FINE.toString());\n \t\t}\n \n \t\treturn jpaProperties;",
    "output": "Refine EclipseLink SQL logging Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -344,7 +344,7 @@ protected PlatformTransactionManager determineTransactionManager(TransactionAttr\n \t\t\treturn this.transactionManager;\n \t\t}\n \t\tString qualifier = txAttr.getQualifier();\n-\t\tif (StringUtils.hasLength(qualifier)) {\n+\t\tif (StringUtils.hasText(qualifier)) {\n \t\t\tPlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);\n \t\t\tif (txManager == null) {\n \t\t\t\ttxManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(\n@@ -353,7 +353,7 @@ protected PlatformTransactionManager determineTransactionManager(TransactionAttr\n \t\t\t}\n \t\t\treturn txManager;\n \t\t}\n-\t\telse if (this.transactionManagerBeanName != null) {\n+\t\telse if (StringUtils.hasText(this.transactionManagerBeanName)) {\n \t\t\tPlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName);\n \t\t\tif (txManager == null) {\n \t\t\t\ttxManager = this.beanFactory.getBean(",
    "output": "Require non-empty values for TxMgr qualifiers & bean names"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java\n@@ -477,8 +477,10 @@ private boolean isConditionPassing(CacheOperationContext context, Object result)\n \n \tprivate Object generateKey(CacheOperationContext context, Object result) {\n \t\tObject key = context.generateKey(result);\n-\t\tAssert.notNull(key, \"Null key returned for cache operation (maybe you are using named params \" +\n-\t\t\t\t\"on classes without debug info?) \" + context.metadata.operation);\n+\t\tif (key == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Null key returned for cache operation (maybe you are \" +\n+\t\t\t\t\t\"using named params on classes without debug info?) \" + context.metadata.operation);\n+\t\t}\n \t\tif (logger.isTraceEnabled()) {\n \t\t\tlogger.trace(\"Computed cache key \" + key + \" for operation \" + context.metadata.operation);\n \t\t}",
    "output": "Improve performance of generateKey Only compute the error message to display when the generated key is actually null instead of using Assert.notNull as the cache operation 'toString' method is non trivial and gets computed regardless of the result. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/tests/Assume.java b/spring-core/src/test/java/org/springframework/tests/Assume.java\n--- a/spring-core/src/test/java/org/springframework/tests/Assume.java\n+++ b/spring-core/src/test/java/org/springframework/tests/Assume.java\n@@ -21,7 +21,7 @@\n import java.util.Set;\n \n import org.apache.commons.logging.Log;\n-import org.junit.internal.AssumptionViolatedException;\n+import org.junit.AssumptionViolatedException;\n \n import org.springframework.util.ClassUtils;\n ",
    "output": "Use public AssumptionViolatedException in Assume JUnit 4.12 created a 'public' version of the previously 'internal' AssumptionViolatedException. This commit upgrades Spring's Assume class to use this new public version"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n@@ -252,7 +252,7 @@ public static HeadersBuilder<?> notFound() {\n \t * @return the created builder\n \t * @since 4.1.3\n \t */\n-\tpublic static HeadersBuilder<?> unprocessableEntity() {\n+\tpublic static BodyBuilder unprocessableEntity() {\n \t\treturn status(HttpStatus.UNPROCESSABLE_ENTITY);\n \t}\n \n\ndiff --git a/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java b/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java\n--- a/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java\n@@ -122,11 +122,11 @@ public void notFound() throws URISyntaxException {\n \n \t@Test\n \tpublic void unprocessableEntity() throws URISyntaxException {\n-\t\tResponseEntity<Void> responseEntity = ResponseEntity.unprocessableEntity().build();\n+\t\tResponseEntity<String> responseEntity = ResponseEntity.unprocessableEntity().body(\"error\");\n \n \t\tassertNotNull(responseEntity);\n \t\tassertEquals(HttpStatus.UNPROCESSABLE_ENTITY, responseEntity.getStatusCode());\n-\t\tassertNull(responseEntity.getBody());\n+\t\tassertEquals(\"error\", responseEntity.getBody());\n \t}\n \n \t@Test",
    "output": "Upgrade unprocessableEntity to allow body Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java\n@@ -370,6 +370,7 @@ public void handle() {\n \n \n \t@ResponseStatus(value = HttpStatus.BAD_REQUEST,  reason = \"exception.user.exists\")\n+\t@SuppressWarnings(\"serial\")\n \tpublic static class UserAlreadyExistsException extends RuntimeException {\n \t}\n ",
    "output": "Remove compiler warning"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java\n@@ -40,8 +40,8 @@ public abstract class OrderUtils {\n \t\t\tpriorityAnnotationType = (Class<? extends Annotation>)\n \t\t\t\t\tClassUtils.forName(\"javax.annotation.Priority\", OrderUtils.class.getClassLoader());\n \t\t}\n-\t\tcatch (ClassNotFoundException ex) {\n-\t\t\t// javax.annotation.Priority not available\n+\t\tcatch (Throwable ex) {\n+\t\t\t// javax.annotation.Priority not available, or present but not loadable (on JDK 6)\n \t\t}\n \t}\n ",
    "output": "OrderUtils defensively checks for presence of javax.annotation.Priority Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/NotReadablePropertyException.java b/spring-beans/src/main/java/org/springframework/beans/NotReadablePropertyException.java\n--- a/spring-beans/src/main/java/org/springframework/beans/NotReadablePropertyException.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/NotReadablePropertyException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -47,4 +47,16 @@ public NotReadablePropertyException(Class<?> beanClass, String propertyName, Str\n \t\tsuper(beanClass, propertyName, msg);\n \t}\n \n+\t/**\n+\t * Create a new NotReadablePropertyException.\n+\t * @param beanClass the offending bean class\n+\t * @param propertyName the offending property\n+\t * @param msg the detail message\n+\t * @param cause the root cause\n+\t * @since 4.0.9\n+\t */\n+\tpublic NotReadablePropertyException(Class<?> beanClass, String propertyName, String msg, Throwable cause) {\n+\t\tsuper(beanClass, propertyName, msg, cause);\n+\t}\n+\n }",
    "output": "NotReadablePropertyException accepts root cause (analogous to NotWritablePropertyException) Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java\n--- a/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java\n@@ -74,9 +74,4 @@ public void testConfigFileParsingError() {\n \t\tnew GenericGroovyApplicationContext(\"org/springframework/context/groovy/applicationContext-error.groovy\");\n \t}\n \n-\t@Test(expected = BeanDefinitionParsingException.class)\n-\tpublic void testConfigFileParsingErrorWhenNamedBeans() {\n-\t\tnew GenericGroovyApplicationContext(\"org/springframework/context/groovy/beans.groovy\");\n-\t}\n-\n }",
    "output": "Remove a Groovy test already covered by testConfigFileParsingErrorThe removed test testConfigFileParsingErrorWhenNamedBeanscould cause a groovyc compilation error, for example when using latest IntelliJ IDEA. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -29,6 +29,7 @@\n \n import org.springframework.http.HttpMethod;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n import org.springframework.util.DigestUtils;\n import org.springframework.util.ResizableByteArrayOutputStream;\n import org.springframework.util.StreamUtils;\n@@ -60,6 +61,11 @@ public class ShallowEtagHeaderFilter extends OncePerRequestFilter {\n \tprivate static final String DIRECTIVE_NO_STORE = \"no-store\";\n \n \n+\t/** Checking for Servlet 3.0+ HttpServletResponse.getHeader(String) */\n+\tprivate static final boolean responseGetHeaderAvailable =\n+\t\t\tClassUtils.hasMethod(HttpServletResponse.class, \"getHeader\", String.class);\n+\n+\n \t/**\n \t * The default value is \"false\" so that the filter may delay the generation of\n \t * an ETag until the last asynchronously dispatched thread.\n@@ -150,7 +156,7 @@ protected boolean isEligibleForEtag(HttpServletRequest request, HttpServletRespo\n \n \t\tif (responseStatusCode >= 200 && responseStatusCode < 300 &&\n \t\t\t\tHttpMethod.GET.name().equals(request.getMethod())) {\n-\t\t\tString cacheControl = response.getHeader(HEADER_CACHE_CONTROL);\n+\t\t\tString cacheControl = (responseGetHeaderAvailable ? response.getHeader(HEADER_CACHE_CONTROL) : null);\n \t\t\tif (cacheControl == null || !cacheControl.contains(DIRECTIVE_NO_STORE)) {\n \t\t\t\treturn true;\n \t\t\t}",
    "output": "ShallowEtagHeaderFilter skips \"Cache-Control\" header check on Servlet 2.5 Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java b/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/client/MockClientHttpRequestFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,7 +29,8 @@\n import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;\n \n /**\n- * Tests for {@link MockClientHttpRequestFactory}.\n+ * Tests for\n+ * {@link org.springframework.test.web.client.MockMvcClientHttpRequestFactory}.\n  *\n  * @author Rossen Stoyanchev\n  */\n@@ -64,7 +65,7 @@ public void noFurtherRequestsExpected() throws Exception {\n \t\t\tthis.factory.createRequest(new URI(\"/foo\"), HttpMethod.GET);\n \t\t}\n \t\tcatch (AssertionError error) {\n-\t\t\tassertEquals(\"No further requests expected\", error.getMessage());\n+\t\t\tassertEquals(\"No further requests expected: HTTP GET /foo\", error.getMessage());\n \t\t}\n \t}\n ",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java\n--- a/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java\n@@ -216,7 +216,7 @@ private RequestMatcherClientHttpRequest createRequestInternal(URI uri, HttpMetho\n \t\t\t\tthis.requestIterator = MockRestServiceServer.this.expectedRequests.iterator();\n \t\t\t}\n \t\t\tif (!this.requestIterator.hasNext()) {\n-\t\t\t\tthrow new AssertionError(\"No further requests expected\");\n+\t\t\t\tthrow new AssertionError(\"No further requests expected: HTTP \" + httpMethod + \" \" + uri);\n \t\t\t}\n \n \t\t\tRequestMatcherClientHttpRequest request = this.requestIterator.next();",
    "output": "Improve exception message Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java\n@@ -59,7 +59,8 @@\n  *\n  * <p>If {@link WebMvcConfigurer} does not expose some advanced setting that\n  * needs to be configured, consider removing the {@code @EnableWebMvc}\n- * annotation and extending directly from {@link WebMvcConfigurationSupport}, e.g.:\n+ * annotation and extending directly from {@link WebMvcConfigurationSupport}\n+ * or {@link DelegatingWebMvcConfiguration}, e.g.:\n  *\n  * <pre class=\"code\">\n  * &#064;Configuration\n@@ -84,10 +85,12 @@\n  * @since 3.1\n  * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurer\n  * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter\n+ * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport\n+ * @see org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.TYPE)\n @Documented\n-@Import({DelegatingWebMvcConfiguration.class})\n+@Import(DelegatingWebMvcConfiguration.class)\n public @interface EnableWebMvc {\n }",
    "output": "Explicitly mention DelegatingWebMvcConfiguration in @EnableWebMvc Javadoc"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -909,6 +909,13 @@ public void destroySingleton(String beanName) {\n \t\tclearByTypeCache();\n \t}\n \n+\t@Override\n+\tpublic void destroySingletons() {\n+\t\tsuper.destroySingletons();\n+\t\tthis.manualSingletonNames.clear();\n+\t\tclearByTypeCache();\n+\t}\n+\n \t/**\n \t * Remove any assumptions about by-type mappings.\n \t */",
    "output": "Explicitly clear manually registered singleton names after destroySingletons call As indicated by our recent Spring Integration test failure, autowiring attempts after context closing did not fail before. After the introduction of the separately managed manualSingletonNames set, the algorithm could run into a situation where a singleton name is still in the manualSingletonNames set but not in the singletonObjects map anymore. As a remedy, destroySingletons needs to explicitly clear the manualSingletonNames set in order to remove references to non-disposable singleton beans as well (which are otherwise left in the set since individual destroySingleton calls only come in for disposable beans with destroy methods). Issue"
  },
  {
    "input": "diff --git a/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n--- a/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n@@ -25,7 +25,6 @@\n import org.hibernate.SessionFactory;\n import org.hibernate.cache.spi.RegionFactory;\n import org.hibernate.cfg.Configuration;\n-import org.hibernate.cfg.NamingStrategy;\n \n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n@@ -86,7 +85,8 @@ public class LocalSessionFactoryBean extends HibernateExceptionTranslator\n \n \tprivate Interceptor entityInterceptor;\n \n-\tprivate NamingStrategy namingStrategy;\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate org.hibernate.cfg.NamingStrategy namingStrategy;\n \n \tprivate Object jtaTransactionManager;\n \n@@ -222,7 +222,8 @@ public void setEntityInterceptor(Interceptor entityInterceptor) {\n \t * physical column and table names given the info in the mapping document.\n \t * @see org.hibernate.cfg.Configuration#setNamingStrategy\n \t */\n-\tpublic void setNamingStrategy(NamingStrategy namingStrategy) {\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic void setNamingStrategy(org.hibernate.cfg.NamingStrategy namingStrategy) {\n \t\tthis.namingStrategy = namingStrategy;\n \t}\n ",
    "output": "Upgrade to Hibernate 4.3.7 (and Netty 4.0.24)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -1097,6 +1097,19 @@ public void setObjectName(ObjectName objectName) {\n \t\t\tthis.objectName = objectName;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic Object getTarget() {\n+\t\t\ttry {\n+\t\t\t\treturn super.getTarget();\n+\t\t\t}\n+\t\t\tcatch (RuntimeException ex) {\n+\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\tlogger.warn(\"Failed to retrieve target for JMX-exposed bean [\" + this.objectName + \"]: \" + ex);\n+\t\t\t\t}\n+\t\t\t\tthrow ex;\n+\t\t\t}\n+\t\t}\n+\n \t\t@Override\n \t\tprotected void postProcessTargetObject(Object targetObject) {\n \t\t\tinjectNotificationPublisherIfNecessary(targetObject, this.modelMBean, this.objectName);",
    "output": "MBeanExporter logs lazy bean retrieval exceptions on the server at warn level Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -1420,8 +1420,8 @@ protected Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd\n \t\t}\n \t\tcatch (BeanCreationException ex) {\n \t\t\t// Can only happen when getting a FactoryBean.\n-\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Ignoring bean creation exception on FactoryBean type check: \" + ex);\n+\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"Bean creation exception on FactoryBean type check: \" + ex);\n \t\t\t}\n \t\t\tonSuppressedException(ex);\n \t\t\treturn null;",
    "output": "AbstractBeanFactory logs bean creation exception on FactoryBean type check at warn level Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java\n@@ -113,6 +113,12 @@ public void teardown() throws Exception {\n \t\tcatch (Throwable t) {\n \t\t\tlogger.error(\"Failed to stop server\", t);\n \t\t}\n+\t\ttry {\n+\t\t\tthis.wac.close();\n+\t\t}\n+\t\tcatch (Throwable t) {\n+\t\t\tlogger.error(\"Failed to close WebApplicationContext\", t);\n+\t\t}\n \t}\n \n \tprotected String getWsBaseUrl() {",
    "output": "Explicitly close Spring context in WS integration test"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java\n@@ -82,7 +82,7 @@ public void start() throws Exception {\n \t@Override\n \tpublic void stop() throws Exception {\n \t\tif (this.jettyServer.isRunning()) {\n-\t\t\tthis.jettyServer.setStopTimeout(0);\n+\t\t\tthis.jettyServer.setStopTimeout(5000);\n \t\t\tthis.jettyServer.stop();\n \t\t}\n \t}\n\ndiff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n@@ -122,6 +122,12 @@ public void teardown() throws Exception {\n \t\tcatch (Throwable t) {\n \t\t\tlogger.error(\"Failed to stop server\", t);\n \t\t}\n+\t\ttry {\n+\t\t\tthis.wac.close();\n+\t\t}\n+\t\tcatch (Throwable t) {\n+\t\t\tlogger.error(\"Failed to close WebApplicationContext\", t);\n+\t\t}\n \t}\n \n \tprotected abstract Class<?> upgradeStrategyConfigClass();",
    "output": "Close Spring context in SockJS integration test setup"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java\n@@ -175,7 +175,7 @@ public void start() {\n \n \t@Override\n \tpublic void stop() {\n-\t\tif (!isRunning()) {\n+\t\tif (isRunning()) {\n \t\t\tthis.running = false;\n \t\t\tfor (Transport transport : this.transports) {\n \t\t\t\tif (transport instanceof Lifecycle) {",
    "output": "Fix condition check in SockJsClient lifecycle method"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n@@ -239,10 +239,12 @@ public static Object getResultSetValue(ResultSet rs, int index) throws SQLExcept\n \t\t\tclassName = obj.getClass().getName();\n \t\t}\n \t\tif (obj instanceof Blob) {\n-\t\t\tobj = rs.getBytes(index);\n+\t\t\tBlob blob = (Blob) obj;\n+\t\t\tobj = blob.getBytes(1, (int) blob.length());\n \t\t}\n \t\telse if (obj instanceof Clob) {\n-\t\t\tobj = rs.getString(index);\n+\t\t\tClob clob = (Clob) obj;\n+\t\t\tobj = clob.getSubString(1, (int) clob.length());\n \t\t}\n \t\telse if (\"oracle.sql.TIMESTAMP\".equals(className) || \"oracle.sql.TIMESTAMPTZ\".equals(className)) {\n \t\t\tobj = rs.getTimestamp(index);",
    "output": "JdbcUtils.getResultSetValue avoids re-retrieval from ResultSet for Blob/Clob content (for Derby compatibility) Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/ClassReader.java b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n--- a/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java\n@@ -928,7 +928,8 @@ private int readMethod(final ClassVisitor classVisitor,\n          */\n         if (WRITER && mv instanceof MethodWriter) {\n             MethodWriter mw = (MethodWriter) mv;\n-            if (mw.cw.cr == this && signature == mw.signature) {\n+            if (mw.cw.cr == this &&\n+\t\t\t\t\t(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {\n                 boolean sameExceptions = false;\n                 if (exceptions == null) {\n                     sameExceptions = mw.exceptionCount == 0;",
    "output": "Defensive String equals comparison in ClassReader Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java\n--- a/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyValue.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,10 +58,10 @@ public class PropertyValue extends BeanMetadataAttributeAccessor implements Seri\n \tvolatile Boolean conversionNecessary;\n \n \t/** Package-visible field for caching the resolved property path tokens */\n-\tvolatile Object resolvedTokens;\n+\ttransient volatile Object resolvedTokens;\n \n \t/** Package-visible field for caching the resolved PropertyDescriptor */\n-\tvolatile PropertyDescriptor resolvedDescriptor;\n+\ttransient volatile PropertyDescriptor resolvedDescriptor;\n \n \n \t/**",
    "output": "PropertyValue declares its cache fields as transient Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -111,10 +111,10 @@ protected static TransactionInfo currentTransactionInfo() throws NoTransactionEx\n \t */\n \tpublic static TransactionStatus currentTransactionStatus() throws NoTransactionException {\n \t\tTransactionInfo info = currentTransactionInfo();\n-\t\tif (info == null) {\n+\t\tif (info == null || info.transactionStatus == null) {\n \t\t\tthrow new NoTransactionException(\"No transaction aspect-managed TransactionStatus in scope\");\n \t\t}\n-\t\treturn currentTransactionInfo().transactionStatus;\n+\t\treturn info.transactionStatus;\n \t}\n \n ",
    "output": "TransactionAspectSupport.currentTransactionStatusreliably throws NoTransactionException Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/xml/UtilNamespaceHandlerTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/xml/UtilNamespaceHandlerTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/xml/UtilNamespaceHandlerTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/UtilNamespaceHandlerTests.java\n@@ -36,6 +36,7 @@\n import org.springframework.tests.beans.CollectingReaderEventListener;\n import org.springframework.tests.sample.beans.CustomEnum;\n import org.springframework.tests.sample.beans.TestBean;\n+import org.springframework.util.LinkedCaseInsensitiveMap;\n \n import static org.junit.Assert.*;\n \n@@ -162,6 +163,13 @@ public void testMapWithRef() {\n \t\tassertEquals(this.beanFactory.getBean(\"testBean\"), map.get(\"bean\"));\n \t}\n \n+\t@Test\n+\tpublic void testMapWithTypes() {\n+\t\tMap map = (Map) this.beanFactory.getBean(\"mapWithTypes\");\n+\t\tassertTrue(map instanceof LinkedCaseInsensitiveMap);\n+\t\tassertEquals(this.beanFactory.getBean(\"testBean\"), map.get(\"bean\"));\n+\t}\n+\n \t@Test\n \tpublic void testNestedCollections() {\n \t\tTestBean bean = (TestBean) this.beanFactory.getBean(\"nestedCollectionsBean\");",
    "output": "Test for <util:map> with LinkedCaseInsensitiveMap and specified key/value types Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -814,8 +814,7 @@ else if (value instanceof Map) {\n \t\t\t\t\t\tClass<?> mapKeyType = GenericCollectionTypeResolver.getMapKeyReturnType(pd.getReadMethod(), i + 1);\n \t\t\t\t\t\t// IMPORTANT: Do not pass full property name in here - property editors\n \t\t\t\t\t\t// must not kick in for map keys but rather only for map values.\n-\t\t\t\t\t\tTypeDescriptor typeDescriptor = (mapKeyType != null ?\n-\t\t\t\t\t\t\t\tTypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));\n+\t\t\t\t\t\tTypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);\n \t\t\t\t\t\tObject convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);\n \t\t\t\t\t\tvalue = map.get(convertedMapKey);\n \t\t\t\t\t}\n@@ -1028,8 +1027,7 @@ else if (propValue instanceof Map) {\n \t\t\t\tMap<Object, Object> map = (Map<Object, Object>) propValue;\n \t\t\t\t// IMPORTANT: Do not pass full property name in here - property editors\n \t\t\t\t// must not kick in for map keys but rather only for map values.\n-\t\t\t\tTypeDescriptor typeDescriptor = (mapKeyType != null ?\n-\t\t\t\t\t\tTypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));\n+\t\t\t\tTypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);\n \t\t\t\tObject convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);\n \t\t\t\tObject oldValue = null;\n \t\t\t\tif (isExtractOldValueForEditor()) {",
    "output": "Remove unnecessary null check Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/ui/ModelMap.java b/spring-context/src/main/java/org/springframework/ui/ModelMap.java\n--- a/spring-context/src/main/java/org/springframework/ui/ModelMap.java\n+++ b/spring-context/src/main/java/org/springframework/ui/ModelMap.java\n@@ -127,9 +127,10 @@ public ModelMap addAllAttributes(Map<String, ?> attributes) {\n \t */\n \tpublic ModelMap mergeAttributes(Map<String, ?> attributes) {\n \t\tif (attributes != null) {\n-\t\t\tfor (String key : attributes.keySet()) {\n+\t\t\tfor (Map.Entry<String, ?> entry : attributes.entrySet()) {\n+\t\t\t\tString key = entry.getKey();\n \t\t\t\tif (!containsKey(key)) {\n-\t\t\t\t\tput(key, attributes.get(key));\n+\t\t\t\t\tput(key, entry.getValue());\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Performance improvement Use entrySet instead of keySet followed by a lookup per key as the former is more efficient. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n@@ -79,13 +79,14 @@ else if (beanFactory.containsBean(qualifier)) {\n \tprivate static <T> T qualifiedBeanOfType(ConfigurableListableBeanFactory bf, Class<T> beanType, String qualifier) {\n \t\tMap<String, T> candidateBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(bf, beanType);\n \t\tT matchingBean = null;\n-\t\tfor (String beanName : candidateBeans.keySet()) {\n+\t\tfor (Map.Entry<String, T> entry : candidateBeans.entrySet()) {\n+\t\t\tString beanName = entry.getKey();\n \t\t\tif (isQualifierMatch(qualifier, beanName, bf)) {\n \t\t\t\tif (matchingBean != null) {\n \t\t\t\t\tthrow new NoSuchBeanDefinitionException(qualifier, \"No unique \" + beanType.getSimpleName() +\n \t\t\t\t\t\t\t\" bean found for qualifier '\" + qualifier + \"'\");\n \t\t\t\t}\n-\t\t\t\tmatchingBean = candidateBeans.get(beanName);\n+\t\t\t\tmatchingBean = entry.getValue();\n \t\t\t}\n \t\t}\n \t\tif (matchingBean != null) {",
    "output": "Better use of key iterator This commit uses an EntrySet instead of looping over the keys and retrieving the value in a separate call. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/SourceHttpMessageConverterTests.java\n@@ -45,8 +45,9 @@\n import org.springframework.util.FileCopyUtils;\n \n import static org.custommonkey.xmlunit.XMLAssert.*;\n+// Do NOT statically import org.junit.Assert.*, since XMLAssert extends junit.framework.Assert\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n /**",
    "output": "Fix JUnit imports in SourceHttpMessageConverterTests When org.junit.Assert.* is statically imported, the class does not compile in Eclipse/STS since XMLAssert extends junit.framework.Assert"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -355,7 +355,7 @@ private static <A extends Annotation> A findAnnotation(Class<?> clazz, Class<A>\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\t// Assuming nested Class values not resolvable within annotation attributes...\n-\t\t\t// We're probably hitting a non-present optional arrangement - let's back out.\n+\t\t\tlogIntrospectionFailure(clazz, ex);\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Consistent use of logIntrospectionFailure Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n--- a/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,7 +24,7 @@\n import org.springframework.aop.Advisor;\n import org.springframework.aop.support.DefaultPointcutAdvisor;\n import org.springframework.core.NamedThreadLocal;\n-import org.springframework.core.Ordered;\n+import org.springframework.core.PriorityOrdered;\n \n /**\n  * Interceptor that exposes the current {@link org.aopalliance.intercept.MethodInvocation}\n@@ -41,7 +41,7 @@\n  * @author Juergen Hoeller\n  */\n @SuppressWarnings(\"serial\")\n-public class ExposeInvocationInterceptor implements MethodInterceptor, Ordered, Serializable {\n+public class ExposeInvocationInterceptor implements MethodInterceptor, PriorityOrdered, Serializable {\n \n \t/** Singleton instance of this class */\n \tpublic static final ExposeInvocationInterceptor INSTANCE = new ExposeInvocationInterceptor();\n@@ -98,7 +98,7 @@ public Object invoke(MethodInvocation mi) throws Throwable {\n \n \t@Override\n \tpublic int getOrder() {\n-\t\treturn Ordered.HIGHEST_PRECEDENCE + 1;\n+\t\treturn PriorityOrdered.HIGHEST_PRECEDENCE + 1;\n \t}\n \n \t/**",
    "output": "ExposeInvocationInterceptor declares itself as PriorityOrdered now Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -117,6 +117,10 @@ protected <T> void writeWithMessageConverters(T returnValue, MethodParameter ret\n \t\t\tthrows IOException, HttpMediaTypeNotAcceptableException {\n \n \t\tClass<?> returnValueClass = getReturnValueType(returnValue, returnType);\n+\t\tif (returnValue == null && Void.class.equals(returnValueClass)) {\n+\t\t\treturn;\n+\t\t}\n+\n \t\tHttpServletRequest servletRequest = inputMessage.getServletRequest();\n \t\tList<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\n \t\tList<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass);",
    "output": "Add check for ResponseEntity<void> with null return value Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaDialect.java b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaDialect.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaDialect.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/EclipseLinkJpaDialect.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -74,12 +74,21 @@ public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {\n \tpublic Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)\n \t\t\tthrows PersistenceException, SQLException, TransactionException {\n \n-\t\tsuper.beginTransaction(entityManager, definition);\n+\t\tUnitOfWork uow = entityManager.unwrap(UnitOfWork.class);\n+\n+\t\tif (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {\n+\t\t\t// Pass custom isolation level on to EclipseLink's DatabaseLogin configuration\n+\t\t\tuow.getLogin().setTransactionIsolation(definition.getIsolationLevel());\n+\t\t}\n+\n+\t\tentityManager.getTransaction().begin();\n+\n \t\tif (!definition.isReadOnly() && !this.lazyDatabaseTransaction) {\n \t\t\t// Begin an early transaction to force EclipseLink to get a JDBC Connection\n \t\t\t// so that Spring can manage transactions with JDBC as well as EclipseLink.\n-\t\t\tentityManager.unwrap(UnitOfWork.class).beginEarlyTransaction();\n+\t\t\tuow.beginEarlyTransaction();\n \t\t}\n+\n \t\treturn null;\n \t}\n ",
    "output": "EclipseLinkJpaDialect passes custom isolation level on to EclipseLink's DatabaseLogin configuration Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java\n@@ -26,8 +26,6 @@\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.messaging.Message;\n-import org.springframework.messaging.MessageChannel;\n-import org.springframework.messaging.SubscribableChannel;\n import org.springframework.messaging.converter.*;\n import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n import org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler;",
    "output": "Delete unused imports in spring-messaging module"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n@@ -256,13 +256,22 @@ public interface HeadersBuilder<B extends HeadersBuilder<B>> {\n \n \t\t/**\n \t\t * Add the given, single header value under the given name.\n-\t\t * @param headerName  the header name\n+\t\t * @param headerName the header name\n \t\t * @param headerValues the header value(s)\n \t\t * @return this builder\n \t\t * @see HttpHeaders#add(String, String)\n \t\t */\n \t\tB header(String headerName, String... headerValues);\n \n+\t\t/**\n+\t\t * Copy the given headers into the entity's headers map.\n+\t\t * @param headers the existing HttpHeaders to copy from\n+\t\t * @return this builder\n+\t\t * @since 4.1.2\n+\t\t * @see HttpHeaders#add(String, String)\n+\t\t */\n+\t\tB headers(HttpHeaders headers);\n+\n \t\t/**\n \t\t * Set the set of allowed {@link HttpMethod HTTP methods}, as specified\n \t\t * by the {@code Allow} header.\n@@ -360,6 +369,12 @@ public BodyBuilder header(String headerName, String... headerValues) {\n \t\t\treturn this;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic BodyBuilder headers(HttpHeaders headers) {\n+\t\t\tthis.headers.putAll(headers);\n+\t\t\treturn this;\n+\t\t}\n+\n \t\t@Override\n \t\tpublic BodyBuilder allow(HttpMethod... allowedMethods) {\n \t\t\tthis.headers.setAllow(new HashSet<HttpMethod>(Arrays.asList(allowedMethods)));",
    "output": "ResponseEntity's HeadersBuilder allows for specifying existing HttpHeaders Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -49,6 +49,7 @@\n import org.springframework.messaging.support.MessageHeaderAccessor;\n import org.springframework.messaging.support.MessageHeaderInitializer;\n import org.springframework.util.Assert;\n+import org.springframework.web.socket.BinaryMessage;\n import org.springframework.web.socket.CloseStatus;\n import org.springframework.web.socket.TextMessage;\n import org.springframework.web.socket.WebSocketMessage;\n@@ -186,9 +187,16 @@ public void handleMessageFromClient(WebSocketSession session,\n \n \t\tList<Message<byte[]>> messages;\n \t\ttry {\n-\t\t\tAssert.isInstanceOf(TextMessage.class,  webSocketMessage);\n-\t\t\tTextMessage textMessage = (TextMessage) webSocketMessage;\n-\t\t\tByteBuffer byteBuffer = ByteBuffer.wrap(textMessage.asBytes());\n+\t\t\tByteBuffer byteBuffer;\n+\t\t\tif (webSocketMessage instanceof TextMessage) {\n+\t\t\t\tbyteBuffer = ByteBuffer.wrap(((TextMessage) webSocketMessage).asBytes());\n+\t\t\t}\n+\t\t\telse if (webSocketMessage instanceof BinaryMessage) {\n+\t\t\t\tbyteBuffer = ((BinaryMessage) webSocketMessage).getPayload();\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthrow new IllegalArgumentException(\"Unexpected WebSocket message type: \" + webSocketMessage);\n+\t\t\t}\n \n \t\t\tBufferingStompDecoder decoder = this.decoders.get(session.getId());\n \t\t\tif (decoder == null) {",
    "output": "Allow binary messages in StompSubProtocolHandler Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java\n@@ -179,7 +179,7 @@ protected Object doGetTransaction() {\n \t\tDataSourceTransactionObject txObject = new DataSourceTransactionObject();\n \t\ttxObject.setSavepointAllowed(isNestedTransactionAllowed());\n \t\tConnectionHolder conHolder =\n-\t\t\t(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);\n+\t\t\t\t(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);\n \t\ttxObject.setConnectionHolder(conHolder, false);\n \t\treturn txObject;\n \t}\n@@ -238,7 +238,10 @@ protected void doBegin(Object transaction, TransactionDefinition definition) {\n \t\t}\n \n \t\tcatch (Throwable ex) {\n-\t\t\tDataSourceUtils.releaseConnection(con, this.dataSource);\n+\t\t\tif (txObject.isNewConnectionHolder()) {\n+\t\t\t\tDataSourceUtils.releaseConnection(con, this.dataSource);\n+\t\t\t\ttxObject.setConnectionHolder(null, false);\n+\t\t\t}\n \t\t\tthrow new CannotCreateTransactionException(\"Could not open JDBC Connection for transaction\", ex);\n \t\t}\n \t}",
    "output": "DataSourceTransactionManager resets ConnectionHolder on doBegin failure Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -1194,6 +1194,10 @@ static ResolvableType forType(Type type, TypeProvider typeProvider, VariableReso\n \t\t}\n \t\t// Check the cache, we may have a ResolvableType that may have already been resolved\n \t\tcache.purgeUnreferencedEntries();\n+\n+\t\tif (type instanceof Class<?>) {\n+\t\t\treturn new ResolvableType(type, typeProvider, variableResolver, null);\n+\t\t}\n \t\tResolvableType key = new ResolvableType(type, typeProvider, variableResolver);\n \t\tResolvableType resolvableType = cache.get(key);\n \t\tif (resolvableType == null) {",
    "output": "Optimize ResolvableType cache Prior to this commit, the ResolvableType static cache was holding a lot of duplicates for simple types. We are using too much metadata to compute the key when the class has no generic information. so setFoo(String foo) and setBar(String bar) would result in two entries in the cache because the TypeProvider is different. On a very simple application 65% of the entries in the cache were duplicate. When the type is a Class with no generic information, the ResolvableType instance is a simple wrapper around it so we might just as well not cache it at all as the cost of finding it back from the cache is higher than creating that simple wrapper. This commit adds an explicit check; if the type is a simple Class we just return a \"resolved\" ResolvableType instance for it. On a few test cases, this reduces the size of the cache by 85% Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java\n@@ -280,7 +280,7 @@ protected boolean hasBeanOfType(Class<?> beanType) {\n \n \n \tprotected int getOrder() {\n-\t\treturn this.order;\n+\t\treturn (this.order != null ? this.order : Ordered.LOWEST_PRECEDENCE);\n \t}\n \n \tprotected List<ViewResolver> getViewResolvers() {",
    "output": "Fix test failure"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n@@ -230,7 +230,7 @@ private void throwSimpleExceptionIfPossible(Object value, AccessException ae) {\n \n \tprivate void updateExitTypeDescriptor() {\n \t\tCachedMethodExecutor executorToCheck = this.cachedExecutor;\n-\t\tif (executorToCheck.get() instanceof ReflectiveMethodExecutor) {\n+\t\tif (executorToCheck != null && executorToCheck.get() instanceof ReflectiveMethodExecutor) {\n \t\t\tMethod method = ((ReflectiveMethodExecutor) executorToCheck.get()).getMethod();\n \t\t\tthis.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType());\n \t\t}",
    "output": "MethodReference accesses cached executor in a thread-safe manner Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java\n@@ -801,9 +801,9 @@ public ViewResolver mvcViewResolver() {\n \t\tconfigureViewResolvers(registry);\n \n \t\tif (registry.getViewResolvers().isEmpty()) {\n-\t\t\tMap<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(\n+\t\t\tString[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n \t\t\t\t\tthis.applicationContext, ViewResolver.class, true, false);\n-\t\t\tif (map.isEmpty()) {\n+\t\t\tif (names.length == 1) {\n \t\t\t\tregistry.getViewResolvers().add(new InternalResourceViewResolver());\n \t\t\t}\n \t\t}",
    "output": "Correct check for ViewResolver beans Check for bean names of type rather than actual beans. Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n@@ -1040,6 +1040,11 @@ public void run() {\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n \t\t\t\tclearResources();\n+\t\t\t\tif (!this.lastMessageSucceeded) {\n+\t\t\t\t\t// We failed more than once in a row or on startup - sleep before\n+\t\t\t\t\t// first recovery attempt.\n+\t\t\t\t\tsleepBeforeRecoveryAttempt();\n+\t\t\t\t}\n \t\t\t\tthis.lastMessageSucceeded = false;\n \t\t\t\tboolean alreadyRecovered = false;\n \t\t\t\tsynchronized (recoveryMonitor) {\n@@ -1191,6 +1196,17 @@ private void clearResources() {\n \t\t\tthis.session = null;\n \t\t}\n \n+\t\t/**\n+\t\t * Apply the back off time once. In a regular scenario, the back off is only applied if we\n+\t\t * failed to recover with the broker. This additional sleep period avoids a burst retry\n+\t\t * scenario when the broker is actually up but something else if failing (i.e. listener\n+\t\t * specific).\n+\t\t */\n+\t\tprivate void sleepBeforeRecoveryAttempt() {\n+\t\t\tBackOffExecution execution = DefaultMessageListenerContainer.this.backOff.start();\n+\t\t\tapplyBackOffTime(execution);\n+\t\t}\n+\n \t\t@Override\n \t\tpublic boolean isLongLived() {\n \t\t\treturn (maxMessagesPerTask < 0);",
    "output": "Restore sleep interval between recovery attempt Commit 6a04831 introduced a regression that lead to burst recovery attempts when the broker is up but the listener is failing for some reason (the most obvious one being that the destination does not exist). Since the sleep period between recovery attempts strategy is more complex, we can't just sleep for a period of time. But we can create an execution and apply it once which should work just fine for most use cases. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/LiveBeansView.java b/spring-context/src/main/java/org/springframework/context/support/LiveBeansView.java\n--- a/spring-context/src/main/java/org/springframework/context/support/LiveBeansView.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/LiveBeansView.java\n@@ -220,6 +220,9 @@ protected boolean isBeanEligible(String beanName, BeanDefinition bd, Configurabl\n \t */\n \tprotected String getEscapedResourceDescription(BeanDefinition bd) {\n \t\tString resourceDescription = bd.getResourceDescription();\n+\t\tif (resourceDescription == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tStringBuilder result = new StringBuilder(resourceDescription.length() + 16);\n \t\tfor (int i = 0; i < resourceDescription.length(); i++) {\n \t\t\tchar character = resourceDescription.charAt(i);",
    "output": "Protect against NPE when escaping LiveBeansView Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -552,9 +552,8 @@ protected void handleTcpConnectionFailure(String error, Throwable ex) {\n \t\t\t\t\tclearConnection();\n \t\t\t\t}\n \t\t\t\tcatch (Throwable ex2) {\n-\t\t\t\t\tif (logger.isErrorEnabled()) {\n-\t\t\t\t\t\tlogger.error(\"Failure while cleaning up state for TCP connection in session \" +\n-\t\t\t\t\t\t\t\tthis.sessionId, ex2);\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Failure while clearing TCP connection state in session \" + this.sessionId, ex2);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -771,7 +770,14 @@ else if (logger.isErrorEnabled()) {\n \t\t */\n \t\tprivate void afterDisconnectSent(StompHeaderAccessor accessor) {\n \t\t\tif (accessor.getReceipt() == null) {\n-\t\t\t\tclearConnection();\n+\t\t\t\ttry {\n+\t\t\t\t\tclearConnection();\n+\t\t\t\t}\n+\t\t\t\tcatch (Throwable ex) {\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Failure while clearing TCP connection state in session \" + this.sessionId, ex);\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "Catch exception while clearing TCP conn to broker When a DISCONNECT is sent to the broker, we proactively close the TCP connection unless the DISCONNECT has a receipt header. Depending on the timing, the broker may also close the connection on its side. That appears to cause an exception in reactor on the CI server, e.g. https://build.spring.io/browse/SPR-PUB-JOB1-1715/test/case/135247530 This change traps the exceptions and prevents it from propagating"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/asm/TypePath.java b/spring-core/src/main/java/org/springframework/asm/TypePath.java\n--- a/spring-core/src/main/java/org/springframework/asm/TypePath.java\n+++ b/spring-core/src/main/java/org/springframework/asm/TypePath.java\n@@ -152,6 +152,9 @@ public static TypePath fromString(final String typePath) {\n                     typeArg = typeArg * 10 + c - '0';\n                     i += 1;\n                 }\n+                if (i < n && typePath.charAt(i) == ';') {\n+                    i += 1;\n+                }\n                 out.put11(TYPE_ARGUMENT, typeArg);\n             }\n         }\n@@ -164,7 +167,7 @@ public static TypePath fromString(final String typePath) {\n      * ARRAY_ELEMENT} steps are represented with '[', {@link #INNER_TYPE\n      * INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND WILDCARD_BOUND} steps\n      * with '*' and {@link #TYPE_ARGUMENT TYPE_ARGUMENT} steps with their type\n-     * argument index in decimal form.\n+     * argument index in decimal form followed by ';'.\n      */\n     @Override\n     public String toString() {\n@@ -182,7 +185,7 @@ public String toString() {\n                 result.append('*');\n                 break;\n             case TYPE_ARGUMENT:\n-                result.append(getStepArgument(i));\n+                result.append(getStepArgument(i)).append(';');\n                 break;\n             default:\n                 result.append('_');",
    "output": "Tracking ASM 5.0.4 development: Fix for ASM issue 317539 Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java\n@@ -324,7 +324,10 @@ public void handleMessage(Message<?> message) throws MessagingException {\n \t\t}\n \t\tWebSocketSessionHolder holder = this.sessions.get(sessionId);\n \t\tif (holder == null) {\n-\t\t\tlogger.error(\"No session for \" + message);\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t// The broker may not have removed the session yet\n+\t\t\t\tlogger.debug(\"No session for \" + message);\n+\t\t\t}\n \t\t\treturn;\n \t\t}\n \t\tWebSocketSession session = holder.getSession();",
    "output": "Lower \"no session\" message log level in SubProtocolWSH Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java b/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java\n@@ -16,12 +16,11 @@\n \n package org.springframework.beans;\n \n-import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n \n-import javax.swing.JPanel;\n-import javax.swing.JTextField;\n+import org.springframework.tests.sample.beans.TestBean;\n \n-import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * Unit tests for {@link DirectFieldAccessor}\n@@ -39,13 +38,13 @@ protected ConfigurablePropertyAccessor createAccessor(Object target) {\n \t@Test\n \tpublic void withShadowedField() throws Exception {\n \t\t@SuppressWarnings(\"serial\")\n-\t\tJPanel p = new JPanel() {\n+\t\tTestBean tb = new TestBean() {\n \t\t\t@SuppressWarnings(\"unused\")\n-\t\t\tJTextField name = new JTextField();\n+\t\t\tStringBuilder name = new StringBuilder();\n \t\t};\n \n-\t\tDirectFieldAccessor dfa = new DirectFieldAccessor(p);\n-\t\tassertEquals(JTextField.class, dfa.getPropertyType(\"name\"));\n+\t\tDirectFieldAccessor dfa = new DirectFieldAccessor(tb);\n+\t\tassertEquals(StringBuilder.class, dfa.getPropertyType(\"name\"));\n \t}\n \n }",
    "output": "Avoid use of fragile Swing classes in tests (for compatibility with JDK 8u40) Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/package-info.java b/spring-test/src/main/java/org/springframework/test/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/package-info.java\n@@ -1,9 +1,8 @@\n-\n /**\n+ * Generic unit testing support classes.\n  *\n- * This package contains the legacy JUnit 3.8 class hierarchy, which as of Spring 3.0\n- * has been deprecated in favor of using the listener-based <em>Spring TestContext Framework</em>.\n- *\n+ * @see org.springframework.test.util\n  */\n+\n package org.springframework.test;\n ",
    "output": "Upgrade package-info for org.springframework.test"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java b/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/package-info.java\n@@ -0,0 +1,7 @@\n+/**\n+ * JDBC support classes for the <em>Spring TestContext Framework</em>,\n+ * including support for declarative SQL script execution via {@code @Sql}.\n+ */\n+\n+package org.springframework.test.context.jdbc;\n+\n\ndiff --git a/spring-test/src/main/java/org/springframework/test/context/util/package-info.java b/spring-test/src/main/java/org/springframework/test/context/util/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/context/util/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/util/package-info.java\n@@ -0,0 +1,6 @@\n+/**\n+ * Common utilities used within the <em>Spring TestContext Framework</em>.\n+ */\n+\n+package org.springframework.test.context.util;\n+",
    "output": "Add missing package-info files in spring-test"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/context/support/StandardServletEnvironmentTests.java b/spring-web/src/test/java/org/springframework/web/context/support/StandardServletEnvironmentTests.java\n--- a/spring-web/src/test/java/org/springframework/web/context/support/StandardServletEnvironmentTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/context/support/StandardServletEnvironmentTests.java\n@@ -16,15 +16,17 @@\n \n package org.springframework.web.context.support;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import javax.naming.NamingException;\n \n import org.junit.Test;\n import org.springframework.core.env.ConfigurableEnvironment;\n-import org.springframework.core.env.StandardEnvironment;\n import org.springframework.core.env.MutablePropertySources;\n import org.springframework.core.env.PropertySource;\n+import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.tests.mock.jndi.SimpleNamingContextBuilder;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.*;\n \n /**\n  * Unit tests for {@link StandardServletEnvironment}.\n@@ -35,7 +37,9 @@\n public class StandardServletEnvironmentTests {\n \n \t@Test\n-\tpublic void propertySourceOrder() {\n+\tpublic void propertySourceOrder() throws Exception {\n+\t\tSimpleNamingContextBuilder.emptyActivatedContextBuilder();\n+\n \t\tConfigurableEnvironment env = new StandardServletEnvironment();\n \t\tMutablePropertySources sources = env.getPropertySources();\n ",
    "output": "Initialize JNDI to fix failing Environment test Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jndi/JndiLocatorDelegateTests.java b/spring-context/src/test/java/org/springframework/jndi/JndiLocatorDelegateTests.java\n--- a/spring-context/src/test/java/org/springframework/jndi/JndiLocatorDelegateTests.java\n+++ b/spring-context/src/test/java/org/springframework/jndi/JndiLocatorDelegateTests.java\n@@ -16,22 +16,35 @@\n \n package org.springframework.jndi;\n \n+import java.lang.reflect.Field;\n+import javax.naming.spi.NamingManager;\n+\n import org.junit.Test;\n \n import static org.hamcrest.Matchers.*;\n-\n import static org.junit.Assert.*;\n \n /**\n  * Tests for {@link JndiLocatorDelegate}.\n  *\n  * @author Phillip Webb\n+ * @author Juergen Hoeller\n  */\n public class JndiLocatorDelegateTests {\n \n \t@Test\n-\tpublic void isDefaultJndiEnvironmentAvailableFalse() {\n-\t\tassertThat(JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable(), equalTo(false));\n+\tpublic void isDefaultJndiEnvironmentAvailableFalse() throws Exception {\n+\t\tField builderField = NamingManager.class.getDeclaredField(\"initctx_factory_builder\");\n+\t\tbuilderField.setAccessible(true);\n+\t\tObject oldBuilder = builderField.get(null);\n+\t\tbuilderField.set(null, null);\n+\n+\t\ttry {\n+\t\t\tassertThat(JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable(), equalTo(false));\n+\t\t}\n+\t\tfinally {\n+\t\t\tbuilderField.set(null, oldBuilder);\n+\t\t}\n \t}\n \n }",
    "output": "Defensive reset/restore of JNDI environment (avoiding test side effects) Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/MapPropertySource.java b/spring-core/src/main/java/org/springframework/core/env/MapPropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/MapPropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/MapPropertySource.java\n@@ -18,6 +18,7 @@\n \n import java.util.Map;\n \n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -43,4 +44,15 @@ public String[] getPropertyNames() {\n \t\treturn StringUtils.toStringArray(this.source.keySet());\n \t}\n \n+\t@Override\n+\tpublic boolean containsProperty(String name) {\n+\t\tAssert.notNull(name, \"Property name must not be null\");\n+\t\tboolean containsProperty = this.source.containsKey(name);\n+\t\tif (logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(String.format(\"PropertySource [%s] %s '%s'\", getName(),\n+\t\t\t\t\t(containsProperty ? \"contains\" : \"does not contain\"), name));\n+\t\t}\n+\t\treturn containsProperty;\n+\t}\n+\n }",
    "output": "Implement containsProperty on MapPropertySource Improve the performance of MapPropertySource by directly implementing the containsProperty property. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -391,10 +391,15 @@ private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {\n \t\t\t\t}\n \t\t\t}\n \t\t\tfor (Method method : targetClass.getDeclaredMethods()) {\n+\t\t\t\tAnnotationAttributes ann = null;\n \t\t\t\tMethod bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);\n-\t\t\t\tAnnotationAttributes ann = BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod) ?\n-\t\t\t\t\t\tfindAutowiredAnnotation(bridgedMethod) : findAutowiredAnnotation(method);\n-\t\t\t\tif (ann != null && !method.isBridge() && method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) {\n+\t\t\t\tif (BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) {\n+\t\t\t\t\tann = findAutowiredAnnotation(bridgedMethod);\n+\t\t\t\t}\n+\t\t\t\telse if (!method.isBridge()) {\n+\t\t\t\t\tann = findAutowiredAnnotation(method);\n+\t\t\t\t}\n+\t\t\t\tif (ann != null && method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) {\n \t\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n \t\t\t\t\t\tif (logger.isWarnEnabled()) {\n \t\t\t\t\t\t\tlogger.warn(\"Autowired annotation is not supported on static methods: \" + method);",
    "output": "Refined exclusion of bridge methods in annotation post-processors (for Java 8 compatibility) Issue: (cherry picked from commit 29abca5)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n--- a/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java\n@@ -451,11 +451,11 @@ protected List<String> calculateFilenamesForLocale(String basename, Locale local\n \t */\n \tprotected PropertiesHolder getProperties(String filename) {\n \t\tPropertiesHolder propHolder = this.cachedProperties.get(filename);\n-\t\tlong originalTimestamp = -1;\n+\t\tlong originalTimestamp = -2;\n \n \t\tif (propHolder != null) {\n \t\t\toriginalTimestamp = propHolder.getRefreshTimestamp();\n-\t\t\tif (originalTimestamp < 0 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {\n+\t\t\tif (originalTimestamp == -1 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {\n \t\t\t\t// Up to date\n \t\t\t\treturn propHolder;\n \t\t\t}",
    "output": "ReloadableResourceBundleMessageSource prevents accidental exposure of incomplete holder Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n--- a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n@@ -303,7 +303,7 @@ private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {\n \t\t\t\tthis.propertyDescriptorCache.put(pd.getName(), pd);\n \t\t\t}\n \n-\t\t\tthis.typeDescriptorCache = new ConcurrentHashMap<PropertyDescriptor, TypeDescriptor>();\n+\t\t\tthis.typeDescriptorCache = new ConcurrentReferenceHashMap<PropertyDescriptor, TypeDescriptor>();\n \t\t}\n \t\tcatch (IntrospectionException ex) {\n \t\t\tthrow new FatalBeanException(\"Failed to obtain BeanInfo for class [\" + beanClass.getName() + \"]\", ex);",
    "output": "CachedIntrospectionResults uses ConcurrentReferenceHashMap for its type descriptor cache Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java\n@@ -17,6 +17,7 @@\n package org.springframework.core.env;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n@@ -75,6 +76,14 @@ public void addFirstPropertySource(PropertySource<?> propertySource) {\n \t\tthis.propertySources.addAll(existing);\n \t}\n \n+\t/**\n+\t * Return all property sources that this composite source holds.\n+\t * @since 4.1.1\n+\t */\n+\tpublic Collection<PropertySource<?>> getPropertySources() {\n+\t\treturn this.propertySources;\n+\t}\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn String.format(\"%s [name='%s', propertySources=%s]\",",
    "output": "CompositePropertySource allows for access to its nested property sources Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -556,7 +556,7 @@ public void setContentType(MediaType mediaType) {\n \t */\n \tpublic MediaType getContentType() {\n \t\tString value = getFirst(CONTENT_TYPE);\n-\t\treturn (value != null ? MediaType.parseMediaType(value) : null);\n+\t\treturn (StringUtils.hasLength(value) ? MediaType.parseMediaType(value) : null);\n \t}\n \n \t/**",
    "output": "Accept empty Content-Type header Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/SocketUtils.java b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java\n@@ -37,7 +37,7 @@\n  * @author Gunnar Hillert\n  * @since 4.0\n  */\n-public abstract class SocketUtils {\n+public class SocketUtils {\n \n \t/**\n \t * The default minimum value for port ranges used when finding an available",
    "output": "Make SocketUtils a concrete class Per the Javadoc for the SocketUtilsconstructor, SocketUtils can be instantiated as a Spring Bean in XML configuration files; however, SocketUtils is currently abstract which prevents such usage. This commit removes the 'abstract' declaration thereby allowing SocketUtils to be instantiated as a Spring bean. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n@@ -25,6 +25,7 @@\n import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n+import java.sql.SQLDataException;\n import java.sql.SQLException;\n import java.sql.SQLFeatureNotSupportedException;\n import java.sql.Statement;\n@@ -196,6 +197,9 @@ else if (Clob.class.equals(requiredType)) {\n \t\t\t\ttry {\n \t\t\t\t\treturn rs.getObject(index, requiredType);\n \t\t\t\t}\n+\t\t\t\tcatch (SQLDataException ex) {\n+\t\t\t\t\tlogger.debug(\"JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method\", ex);\n+\t\t\t\t}\n \t\t\t\tcatch (SQLFeatureNotSupportedException ex) {\n \t\t\t\t\tlogger.debug(\"JDBC driver does not support JDBC 4.1 'getObject(int, Class)' method\", ex);\n \t\t\t\t}",
    "output": "Workaround for Derby's limited support for JDBC 4.1 getObject(index, requiredType) Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -161,6 +161,11 @@ public abstract class FrameworkServlet extends HttpServletBean implements Applic\n \tprivate static final String INIT_PARAM_DELIMITERS = \",; \\t\\n\";\n \n \n+\t/** Checking for Servlet 3.0+ HttpServletResponse.getStatus() */\n+\tprivate static final boolean responseGetStatusAvailable =\n+\t\t\tClassUtils.hasMethod(HttpServletResponse.class, \"getStatus\");\n+\n+\n \t/** ServletContext attribute to find the WebApplicationContext in */\n \tprivate String contextAttribute;\n \n@@ -1054,16 +1059,19 @@ private void resetContextHolders(HttpServletRequest request,\n \t\t}\n \t}\n \n-\tprivate void publishRequestHandledEvent(HttpServletRequest request, HttpServletResponse response, long startTime, Throwable failureCause) {\n+\tprivate void publishRequestHandledEvent(\n+\t\t\tHttpServletRequest request, HttpServletResponse response, long startTime, Throwable failureCause) {\n+\n \t\tif (this.publishEvents) {\n \t\t\t// Whether or not we succeeded, publish an event.\n \t\t\tlong processingTime = System.currentTimeMillis() - startTime;\n+\t\t\tint statusCode = (responseGetStatusAvailable ? response.getStatus() : -1);\n \t\t\tthis.webApplicationContext.publishEvent(\n \t\t\t\t\tnew ServletRequestHandledEvent(this,\n \t\t\t\t\t\t\trequest.getRequestURI(), request.getRemoteAddr(),\n \t\t\t\t\t\t\trequest.getMethod(), getServletConfig().getServletName(),\n \t\t\t\t\t\t\tWebUtils.getSessionId(request), getUsernameForRequest(request),\n-\t\t\t\t\t\t\tprocessingTime, failureCause, response.getStatus()));\n+\t\t\t\t\t\t\tprocessingTime, failureCause, statusCode));\n \t\t}\n \t}\n ",
    "output": "FrameworkServlet skips HttpServletResponse.getStatuscall on Servlet 2.5 Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java\n@@ -19,6 +19,7 @@\n import org.springframework.core.MethodParameter;\n import org.springframework.http.MediaType;\n import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n import org.springframework.http.converter.json.MappingJacksonValue;\n import org.springframework.http.server.ServerHttpRequest;\n@@ -36,7 +37,7 @@ public abstract class AbstractMappingJacksonResponseBodyAdvice implements Respon\n \n \t@Override\n \tpublic boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n-\t\treturn MappingJackson2HttpMessageConverter.class.equals(converterType);\n+\t\treturn AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType);\n \t}\n \n \t@Override",
    "output": "Fix Jackson @JSONView when using XML serialization Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n@@ -82,9 +82,9 @@ public abstract class AbstractSockJsSession implements SockJsSession {\n \tprivate static final Set<String> disconnectedClientExceptions;\n \n \tstatic {\n-\n \t\tSet<String> set = new HashSet<String>(2);\n \t\tset.add(\"ClientAbortException\"); // Tomcat\n+\t\tset.add(\"EOFException\"); // Tomcat\n \t\tset.add(\"EofException\"); // Jetty\n \t\t// java.io.IOException \"Broken pipe\" on WildFly, Glassfish (already covered)\n \t\tdisconnectedClientExceptions = Collections.unmodifiableSet(set);\n@@ -340,7 +340,7 @@ protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureExcept\n \t\t\t\tdisconnect(CloseStatus.SERVER_ERROR);\n \t\t\t}\n \t\t\tcatch (Throwable disconnectFailure) {\n-\t\t\t\tlogger.error(\"Failure while closing \" + this, disconnectFailure);\n+\t\t\t\t// Ignore\n \t\t\t}\n \t\t\ttry {\n \t\t\t\tclose(CloseStatus.SERVER_ERROR);",
    "output": "Adjust logging following SockJS client disconnect Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java\n@@ -143,8 +143,8 @@ protected void detectResourceHandlers(ApplicationContext appContext) {\n \t\tCollections.sort(handlerMappings, new OrderComparator());\n \n \t\tfor (SimpleUrlHandlerMapping hm : handlerMappings) {\n-\t\t\tfor (String pattern : hm.getUrlMap().keySet()) {\n-\t\t\t\tObject handler = hm.getUrlMap().get(pattern);\n+\t\t\tfor (String pattern : hm.getHandlerMap().keySet()) {\n+\t\t\t\tObject handler = hm.getHandlerMap().get(pattern);\n \t\t\t\tif (handler instanceof ResourceHttpRequestHandler) {\n \t\t\t\t\tResourceHttpRequestHandler resourceHandler = (ResourceHttpRequestHandler) handler;\n \t\t\t\t\tif (logger.isDebugEnabled()) {",
    "output": "Fix initialization issue in ResourceUrlProvider Before this change ResourceUrlProvider used getUrlMap to detect ResourceHttpRequestHandler instances, however the map may contain bean names as is the case when using <mvc:resources>. Instead it now uses getHandlerMap"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n@@ -305,9 +305,15 @@ else if (methodName.equals(\"close\")) {\n \t\t\t\tif (active) {\n \t\t\t\t\tsynchronized (this.sessionList) {\n \t\t\t\t\t\tif (this.sessionList.size() < getSessionCacheSize()) {\n-\t\t\t\t\t\t\tlogicalClose((Session) proxy);\n-\t\t\t\t\t\t\t// Remain open in the session list.\n-\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tlogicalClose((Session) proxy);\n+\t\t\t\t\t\t\t\t// Remain open in the session list.\n+\t\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (JMSException ex) {\n+\t\t\t\t\t\t\t\tlogger.trace(\"Logical close of cached JMS Session failed - discarding it\", ex);\n+\t\t\t\t\t\t\t\t// Proceed to physical close from here...\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "CachingConnectionFactory proceeds to physicalClose in case of logicalClose exceptions Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceTransformerSupportTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceTransformerSupportTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceTransformerSupportTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceTransformerSupportTests.java\n@@ -32,16 +32,16 @@\n import javax.servlet.http.HttpServletRequest;\n \n /**\n- * Unit tests for {@code LinkRewriteTransformer}\n+ * Unit tests for {@code ResourceTransformerSupport}.\n  *\n  * @author Brian Clozel\n  * @author Rossen Stoyanchev\n  */\n-public class LinkRewriteTransformerTests {\n+public class ResourceTransformerSupportTests {\n \n \tprivate ResourceTransformerChain transformerChain;\n \n-\tprivate TestTransformer transformer;\n+\tprivate TestResourceTransformerSupport transformer;\n \n \tprivate MockHttpServletRequest request;\n \n@@ -66,7 +66,7 @@ public void setUp() {\n \t\tResourceUrlProvider urlProvider = new ResourceUrlProvider();\n \t\turlProvider.setHandlerMap(Collections.singletonMap(\"/resources/**\", handler));\n \n-\t\tthis.transformer = new TestTransformer();\n+\t\tthis.transformer = new TestResourceTransformerSupport();\n \t\tthis.transformer.setResourceUrlProvider(urlProvider);\n \n \t\tthis.request = new MockHttpServletRequest();\n@@ -116,7 +116,7 @@ public void rewriteRelativePathUpperLevel() throws Exception {\n \t}\n \n \n-\tprivate static class TestTransformer extends ResourceTransformerSupport {\n+\tprivate static class TestResourceTransformerSupport extends ResourceTransformerSupport {\n \n \t\t@Override\n \t\tpublic Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain chain) {",
    "output": "Rename test class to match name of class being tested"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -104,7 +104,7 @@ public ResourceHttpRequestHandler() {\n \t * for serving static resources.\n \t */\n \tpublic void setLocations(List<Resource> locations) {\n-\t\tAssert.notEmpty(locations, \"Locations list must not be empty\");\n+\t\tAssert.notNull(locations, \"Locations list must not be null\");\n \t\tthis.locations.clear();\n \t\tthis.locations.addAll(locations);\n \t}",
    "output": "Remove assertion making locations mandatory This change finishes work started in . Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -808,7 +808,11 @@ public boolean equals(Object obj) {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn ObjectUtils.nullSafeHashCode(this.type);\n+\t\tint hashCode = ObjectUtils.nullSafeHashCode(this.type);\n+\t\thashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(getSource());\n+\t\thashCode = 31 * hashCode + variableResolverSourceHashCode();\n+\t\thashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.componentType);\n+\t\treturn hashCode;\n \t}\n \n \t/**\n@@ -838,6 +842,14 @@ private boolean variableResolverSourceEquals(VariableResolver other) {\n \t\treturn ObjectUtils.nullSafeEquals(this.variableResolver.getSource(), other.getSource());\n \t}\n \n+\tprivate int variableResolverSourceHashCode() {\n+\t\tint hashCode = 0;\n+\t\tif (this.variableResolver != null) {\n+\t\t\thashCode = ObjectUtils.nullSafeHashCode(this.variableResolver.getSource());\n+\t\t}\n+\t\treturn hashCode;\n+\t}\n+\n \tprivate static ResolvableType[] forTypes(Type[] types, VariableResolver owner) {\n \t\tResolvableType[] result = new ResolvableType[types.length];\n \t\tfor (int i = 0; i < types.length; i++) {",
    "output": "Improve ResolvableType.hashCodefor better performance Prior to this commit, when there was a lot of entries in the ResolvableType.cache HashMap, getting a simple value could take a lot of time due to a lot of calls to ResolvableType.equals. ResolvableType.equalsused this.type, getSource, this.variableResolver.getSourceand this.componentType, but ResolvableType.hashCodeused only this.type. With this commit, ResolvableType.hashCodenow uses the same fields than ResolvableType.equals. Performance on the spring-resolvabletype-benchmark project - 8000 us before this commit - 120 us with this commit Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java b/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java\n--- a/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/env/CompositePropertySourceTests.java\n@@ -20,7 +20,6 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.*;\n \n /**\n@@ -39,8 +38,11 @@ public void addFirst() {\n \t\tcomposite.addPropertySource(p3);\n \t\tcomposite.addPropertySource(p1);\n \t\tcomposite.addFirstPropertySource(p1);\n-\t\tassertThat(composite.toString(), containsString(\"MapPropertySource [name='p1'], \"\n-\t\t\t\t+ \"MapPropertySource [name='p2'], MapPropertySource [name='p3']\"));\n+\t\tString s = composite.toString();\n+\t\tint i1 = s.indexOf(\"name='p1'\");\n+\t\tint i2 = s.indexOf(\"name='p2'\");\n+\t\tint i3 = s.indexOf(\"name='p3'\");\n+\t\tassertTrue(\"Bad order: \" + s, ((i1 < i2) && (i2 < i3)));\n \t}\n \n }",
    "output": "Fix failing CompositePropertySourceTests Fix CompositePropertySourceTests which fails when run we debug logging"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FlashMap.java\n@@ -20,6 +20,7 @@\n \n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -146,6 +147,29 @@ public int compareTo(FlashMap other) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (obj != null && obj instanceof FlashMap) {\n+\t\t\tFlashMap other = (FlashMap) obj;\n+\t\t\tif (this.targetRequestParams.equals(other.targetRequestParams) &&\n+\t\t\t\t\tObjectUtils.nullSafeEquals(this.targetRequestPath, other.targetRequestPath)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tint result = super.hashCode();\n+\t\tresult = 31 * result + (this.targetRequestPath != null ? this.targetRequestPath.hashCode() : 0);\n+\t\tresult = 31 * result + this.targetRequestParams.hashCode();\n+\t\treturn result;\n+\t}\n+\n \t@Override\n \tpublic String toString() {\n \t\tStringBuilder sb = new StringBuilder();",
    "output": "Add equals/hashcode to FlashMap Brings consistency with the existing compareTo implementation"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -46,6 +46,7 @@\n  *\n  * @author Arjen Poutsma\n  * @author Rossen Stoyanchev\n+ * @author Juergen Hoeller\n  * @since 3.0\n  */\n public class ShallowEtagHeaderFilter extends OncePerRequestFilter {\n@@ -246,6 +247,17 @@ public void setContentLength(int len) {\n \t\t\t}\n \t\t}\n \n+\t\t// Overrides Servlet 3.1 setContentLengthLong(long) at runtime\n+\t\tpublic void setContentLengthLong(long len) {\n+\t\t\tif (len > Integer.MAX_VALUE) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Content-Length exceeds ShallowEtagHeaderFilter's maximum (\" +\n+\t\t\t\t\t\tInteger.MAX_VALUE + \"): \" + len);\n+\t\t\t}\n+\t\t\tif (len > this.content.capacity()) {\n+\t\t\t\tthis.content.resize((int) len);\n+\t\t\t}\n+\t\t}\n+\n \t\t@Override\n \t\tpublic void setBufferSize(int size) {\n \t\t\tif (size > this.content.capacity()) {",
    "output": "ShallowEtagHeaderFilter supports Servlet 3.1's setContentLengthLong as well Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java\n--- a/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java\n+++ b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java\n@@ -59,7 +59,7 @@ public CompoundComparator() {\n \t * @param comparators the comparators to build into a compound comparator\n \t * @see InvertibleComparator\n \t */\n-\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic CompoundComparator(Comparator... comparators) {\n \t\tAssert.notNull(comparators, \"Comparators must not be null\");\n \t\tthis.comparators = new ArrayList<InvertibleComparator>(comparators.length);",
    "output": "Remove unnecessary @SupressWarnings"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestExecutionListeners.java b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListeners.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestExecutionListeners.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListeners.java\n@@ -75,7 +75,7 @@ static enum MergeMode {\n \t\t * locally declared listeners will simply be appended to the list of default\n \t\t * listeners when merged.\n \t\t */\n-\t\tMERGE_WITH_DEFAULTS,\n+\t\tMERGE_WITH_DEFAULTS\n \t}\n \n \n@@ -133,10 +133,9 @@ static enum MergeMode {\n \t * \t// ...\n \t * }</pre>\n \t *\n-\t * <p>\n-\t * If {@code inheritListeners} is set to {@code false}, the listeners for the\n-\t * annotated class will <em>shadow</em> and effectively replace any listeners\n-\t * defined by a superclass.\n+\t * <p>If {@code inheritListeners} is set to {@code false}, the listeners for\n+\t * the annotated class will <em>shadow</em> and effectively replace any\n+\t * listeners defined by a superclass.\n \t */\n \tboolean inheritListeners() default true;\n ",
    "output": "Polish Javadoc and formatting in @TestExecutionListeners"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java\n@@ -250,7 +250,7 @@ String aString() {\n \t\t\treturn \"regular\";\n \t\t}\n \n-\t\t@Bean\n+\t\t@Bean @Lazy\n \t\tString aString(Integer dependency) {\n \t\t\treturn \"overloaded\" + dependency;\n \t\t}",
    "output": "Fix fragile tests for @Bean method overloading"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java b/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java\n--- a/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/web/WebMergedContextConfiguration.java\n@@ -109,6 +109,7 @@ public WebMergedContextConfiguration(\n \t * {@link #WebMergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], String, ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}\n \t * instead.\n \t */\n+\t@Deprecated\n \tpublic WebMergedContextConfiguration(\n \t\t\tClass<?> testClass,\n \t\t\tString[] locations,",
    "output": "Add @Deprecated to WebMergedContextConfiguration constructor"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java\n@@ -76,6 +76,13 @@ public void setJmsTemplate(JmsTemplate jmsTemplate) {\n \t\tthis.jmsTemplate = jmsTemplate;\n \t}\n \n+\t/**\n+\t * Return the configured {@link JmsTemplate}.\n+\t */\n+\tpublic JmsTemplate getJmsTemplate() {\n+\t\treturn jmsTemplate;\n+\t}\n+\n \t/**\n \t * Set the {@link MessageConverter} to use to convert a {@link Message} from\n \t * the messaging to and from a {@link javax.jms.Message}. By default, a\n\ndiff --git a/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java\n--- a/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java\n+++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java\n@@ -77,6 +77,11 @@ public void setup() {\n \t\tmessagingTemplate = new JmsMessagingTemplate(jmsTemplate);\n \t}\n \n+\t@Test\n+\tpublic void validateJmsTemplate() {\n+\t\tassertSame(this.jmsTemplate, messagingTemplate.getJmsTemplate());\n+\t}\n+\n \t@Test\n \tpublic void send() {\n \t\tDestination destination = new Destination() {};",
    "output": "Add JmsTemplate accessor in JmsMessagingTemplate"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,14 +25,15 @@\n import org.springframework.messaging.converter.MessageConverter;\n \n /**\n- * Annotation that binds a method parameter to the payload of a message. The payload may\n- * be passed through a {@link MessageConverter} to convert it from serialized form with a\n+ * Annotation that binds a method parameter to the payload of a message. Can also\n+ * be used to associate a payload to a method invocation. The payload may be passed\n+ * through a {@link MessageConverter} to convert it from serialized form with a\n  * specific MIME type to an Object matching the target method parameter.\n  *\n  * @author Rossen Stoyanchev\n  * @since 4.0\n  */\n-@Target(ElementType.PARAMETER)\n+@Target({ElementType.PARAMETER, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface Payload {",
    "output": "Use @Payload on method declaration Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n@@ -146,6 +146,25 @@ public static MockHttpServletRequestBuilder options(URI uri) {\n \t\treturn new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, uri);\n \t}\n \n+    /**\n+     * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.\n+     * @param urlTemplate a URL template; the resulting URL will be encoded\n+     * @param urlVariables zero or more URL variables\n+     * @since 4.1\n+     */\n+    public static MockHttpServletRequestBuilder head(String urlTemplate, Object... urlVariables) {\n+        return new MockHttpServletRequestBuilder(HttpMethod.HEAD, urlTemplate, urlVariables);\n+    }\n+\n+    /**\n+     * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.\n+     * @param uri the URL\n+     * @since 4.1\n+     */\n+    public static MockHttpServletRequestBuilder head(URI uri) {\n+        return new MockHttpServletRequestBuilder(HttpMethod.HEAD, uri);\n+    }\n+\n \t/**\n \t * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.\n \t * @param httpMethod the HTTP method",
    "output": "Support HTTP HEAD method in MockMvcRequestBuilders Surprisingly until now the MockMvcRequestBuilders did not have methods for HTTP HEAD. This change adds such methods to the API making it consistent with other HTTP method types. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -593,7 +593,7 @@ private void logResponseStatus(HttpMethod method, URI url, ClientHttpResponse re\n \t\tif (logger.isDebugEnabled()) {\n \t\t\ttry {\n \t\t\t\tlogger.debug(method.name() + \" request for \\\"\" + url + \"\\\" resulted in \" +\n-\t\t\t\t\t\tresponse.getStatusCode() + \" (\" + response.getStatusText() + \")\");\n+\t\t\t\t\t\tresponse.getRawStatusCode() + \" (\" + response.getStatusText() + \")\");\n \t\t\t}\n \t\t\tcatch (IOException e) {\n \t\t\t\t// ignore\n@@ -605,7 +605,7 @@ private void handleResponseError(HttpMethod method, URI url, ClientHttpResponse\n \t\tif (logger.isWarnEnabled()) {\n \t\t\ttry {\n \t\t\t\tlogger.warn(method.name() + \" request for \\\"\" + url + \"\\\" resulted in \" +\n-\t\t\t\t\t\tresponse.getStatusCode() + \" (\" + response.getStatusText() + \"); invoking error handler\");\n+\t\t\t\t\t\tresponse.getRawStatusCode() + \" (\" + response.getStatusText() + \"); invoking error handler\");\n \t\t\t}\n \t\t\tcatch (IOException e) {\n \t\t\t\t// ignore",
    "output": "Use raw status code in RestTemplate logResponseStatus Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/SockJsUrlInfoTests.java\n@@ -40,7 +40,7 @@ public class SockJsUrlInfoTests {\n \tpublic void serverId() throws Exception {\n \t\tSockJsUrlInfo info = new SockJsUrlInfo(new URI(\"http://example.com\"));\n \t\tint serverId = Integer.valueOf(info.getServerId());\n-\t\tassertTrue(\"Invalid serverId: \" + serverId, serverId > 0 && serverId < 1000);\n+\t\tassertTrue(\"Invalid serverId: \" + serverId, serverId >= 0 && serverId < 1000);\n \t}\n \n \t@Test",
    "output": "Fix test condition"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/RuntimeTestWalker.java\n@@ -50,13 +50,13 @@\n  * migrate to {@code ShadowMatch.getVariablesInvolvedInRuntimeTest()}\n  * or some similar operation.\n  *\n- * <p>See <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=151593\"/>.\n+ * <p>See <a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=151593\"/>Bug 151593</a>\n  *\n  * @author Adrian Colyer\n  * @author Ramnivas Laddad\n  * @since 2.0\n  */\n-class RuntimeTestWalker {\n+class RuntimeTestWlalker {\n \n \tprivate static final Field residualTestField;\n ",
    "output": "Fix javadoc typo"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1244,15 +1244,9 @@ protected boolean matchesBeanName(String beanName, String candidateName) {\n \t * on the original bean.\n \t */\n \tprivate boolean isSelfReference(String beanName, String candidateName) {\n-\t\tif (beanName.equals(candidateName)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (candidateName != null && containsBeanDefinition(candidateName)) {\n-\t\t\tif (beanName.equals(getMergedLocalBeanDefinition(candidateName).getFactoryBeanName())) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n+\t\treturn (beanName != null && candidateName != null &&\n+\t\t\t\t(beanName.equals(candidateName) || (containsBeanDefinition(candidateName) &&\n+\t\t\t\t\t\tbeanName.equals(getMergedLocalBeanDefinition(candidateName).getFactoryBeanName()))));\n \t}\n \n \t/**",
    "output": "Self reference detection defensively handles null bean names Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -153,6 +153,7 @@ public Class<?> getType() {\n \n \t/**\n \t * Return the underlying {@link ResolvableType}.\n+\t * @since 4.0\n \t */\n \tpublic ResolvableType getResolvableType() {\n \t\treturn this.resolvableType;\n@@ -163,9 +164,10 @@ public ResolvableType getResolvableType() {\n \t * {@link MethodParameter} or {@link Type} depending on how the {@link TypeDescriptor}\n \t * was constructed. This method is primarily to provide access to additional\n \t * type information or meta-data that alternative JVM languages may provide.\n+\t * @since 4.0\n \t */\n \tpublic Object getSource() {\n-\t\treturn (this.resolvableType == null ? null : this.resolvableType.getSource());\n+\t\treturn (this.resolvableType != null ? this.resolvableType.getSource() : null);\n \t}\n \n \t/**",
    "output": "TypeDescriptor's getResolvableTypeand getSourceare @since 4.0"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java b/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/support/TestableCacheKeyGenerator.java\n@@ -23,6 +23,7 @@ public GeneratedCacheKey generateCacheKey(CacheKeyInvocationContext<? extends An\n \t}\n \n \n+\t@SuppressWarnings(\"serial\")\n \tprivate static class SimpleGeneratedCacheKey extends SimpleKey implements GeneratedCacheKey {\n \n \t\tpublic SimpleGeneratedCacheKey(Object... elements) {",
    "output": "Fix compiler warning"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewControllerRegistration.java\n@@ -61,9 +61,8 @@ public ViewControllerRegistration setStatusCode(HttpStatus statusCode) {\n \t *\n \t * @see org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\n \t */\n-\tpublic ViewControllerRegistration setViewName(String viewName) {\n+\tpublic void setViewName(String viewName) {\n \t\tthis.controller.setViewName(viewName);\n-\t\treturn this;\n \t}\n \n ",
    "output": "Restore method signature in ViewControllerRegistration Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,12 +18,12 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-\n import javax.activation.FileTypeMap;\n import javax.activation.MimetypesFileTypeMap;\n \n import org.springframework.core.io.ByteArrayResource;\n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.InputStreamResource;\n import org.springframework.core.io.Resource;\n import org.springframework.http.HttpInputMessage;\n import org.springframework.http.HttpOutputMessage;\n@@ -78,7 +78,9 @@ protected MediaType getDefaultContentType(Resource resource) {\n \n \t@Override\n \tprotected Long getContentLength(Resource resource, MediaType contentType) throws IOException {\n-\t\treturn resource.contentLength();\n+\t\t// Don't try to determine contentLength on InputStreamResource - cannot be read afterwards...\n+\t\t// Note: custom InputStreamResource subclasses could provide a pre-calculated content length!\n+\t\treturn (InputStreamResource.class.equals(resource.getClass()) ? null : resource.contentLength());\n \t}\n \n \t@Override",
    "output": "ResourceHttpMessageConverter does not call contentLengthon InputStreamResource Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -484,6 +484,8 @@ public void refresh() throws BeansException, IllegalStateException {\n \t\t\t}\n \n \t\t\tcatch (BeansException ex) {\n+\t\t\t\tlogger.warn(\"Exception encountered during context initialization - cancelling refresh attempt\", ex);\n+\n \t\t\t\t// Destroy already created singletons to avoid dangling resources.\n \t\t\t\tdestroyBeans();\n ",
    "output": "AbstractApplicationContext logs initialization exception before trying to cancel refresh attempt Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionContext.java b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionContext.java\n--- a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionContext.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionContext.java\n@@ -132,8 +132,8 @@ void endTransaction() {\n \t\t}\n \n \t\tif (logger.isInfoEnabled()) {\n-\t\t\tlogger.info(String.format(\"%s transaction after test execution for test context %s.\",\n-\t\t\t\t(flaggedForRollback ? \"Rolled back\" : \"Committed\"), this.testContext));\n+\t\t\tlogger.info(String.format(\"%s transaction for test context %s.\", (flaggedForRollback ? \"Rolled back\"\n+\t\t\t\t\t: \"Committed\"), this.testContext));\n \t\t}\n \t}\n ",
    "output": "Polish log statements for TransactionContext"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n@@ -21,6 +21,7 @@\n import org.hamcrest.Matchers;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TestName;\n@@ -143,7 +144,9 @@ protected void initSockJsClient(Transport... transports) {\n \t\tthis.sockJsClient.start();\n \t}\n \n+\t// Temporarily @Ignore failures caused by suspected Jetty bug\n \n+\t@Ignore\n \t@Test\n \tpublic void echoWebSocket() throws Exception {\n \t\ttestEcho(100, createWebSocketTransport());\n@@ -161,6 +164,7 @@ public void echoXhr() throws Exception {\n \t\ttestEcho(100, xhrTransport);\n \t}\n \n+\t@Ignore\n \t@Test\n \tpublic void closeAfterOneMessageWebSocket() throws Exception {\n \t\ttestCloseAfterOneMessage(createWebSocketTransport());",
    "output": "Add @Ignored temporarily to Jetty SockJS tests"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n@@ -277,7 +277,7 @@ public void publishEvent(ApplicationEvent event) {\n \t\t}\n \n \t\tpublic void expectBrokerAvailabilityEvent(boolean isBrokerAvailable) throws InterruptedException {\n-\t\t\tBrokerAvailabilityEvent event = this.eventQueue.poll(10000, TimeUnit.MILLISECONDS);\n+\t\t\tBrokerAvailabilityEvent event = this.eventQueue.poll(20000, TimeUnit.MILLISECONDS);\n \t\t\tassertNotNull(\"Times out waiting for BrokerAvailabilityEvent[\" + isBrokerAvailable + \"]\", event);\n \t\t\tassertEquals(isBrokerAvailable, event.isBrokerAvailable());\n \t\t}",
    "output": "Increase timeout in integration test"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java b/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java\n@@ -54,7 +54,7 @@ public void buildMergedConfigWithBareAnnotations() {\n \t\tassertMergedConfig(\n \t\t\tmergedConfig,\n \t\t\ttestClass,\n-\t\t\tnew String[] { \"classpath:org/springframework/test/context/support/AbstractContextLoaderUtilsTests$BareAnnotations-context.xml\" },\n+\t\t\tnew String[] { \"classpath:org/springframework/test/context/support/AbstractContextConfigurationUtilsTests$BareAnnotations-context.xml\" },\n \t\t\tEMPTY_CLASS_ARRAY, DelegatingSmartContextLoader.class);\n \t}\n ",
    "output": "Fix test broken by previous refactoring"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java\n@@ -37,7 +37,6 @@\n  */\n public class ModelResultMatchers {\n \n-\n \t/**\n \t * Protected constructor.\n \t * Use {@link MockMvcResultMatchers#model()}.\n@@ -196,7 +195,6 @@ public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final Str\n \n \t\treturn new ResultMatcher() {\n \t\t\t@Override\n-\t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\tpublic void match(MvcResult mvcResult) throws Exception {\n \t\t\t\tModelAndView mav = getModelAndView(mvcResult);\n \t\t\t\tBindingResult result = getBindingResult(mav, name);",
    "output": "Remove unnecessary warning suppression in ModelResultMatchers"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -148,7 +148,7 @@ private static boolean exhaustiveCompare(Object boundValue, Object candidate,\n \t\t\tPropertyEditor editor, Map<PropertyEditor, Object> convertedValueCache) {\n \n \t\tString candidateDisplayString = ValueFormatter.getDisplayString(candidate, editor, false);\n-\t\tif (boundValue.getClass().isEnum()) {\n+\t\tif (boundValue != null && boundValue.getClass().isEnum()) {\n \t\t\tEnum<?> boundEnum = (Enum<?>) boundValue;\n \t\t\tString enumCodeAsString = ObjectUtils.getDisplayString(boundEnum.name());\n \t\t\tif (enumCodeAsString.equals(candidateDisplayString)) {",
    "output": "SelectedValueComparator defensively handles null values in exhaustiveCompare Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/client/AbstractSockJsIntegrationTests.java\n@@ -102,6 +102,7 @@ public void setup() throws Exception {\n \t\tthis.wac.register(TestConfig.class, upgradeStrategyConfigClass());\n \t\tthis.wac.refresh();\n \t\tthis.server = createWebSocketTestServer();\n+\t\tthis.server.setup();\n \t\tthis.server.deployConfig(this.wac, this.errorFilter);\n \t\tthis.server.start();\n \t\tthis.baseUrl = \"http://localhost:\" + this.server.getPort();",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/NestedIOException.java b/spring-core/src/main/java/org/springframework/core/NestedIOException.java\n--- a/spring-core/src/main/java/org/springframework/core/NestedIOException.java\n+++ b/spring-core/src/main/java/org/springframework/core/NestedIOException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -60,8 +60,7 @@ public NestedIOException(String msg) {\n \t * @param cause the nested exception\n \t */\n \tpublic NestedIOException(String msg, Throwable cause) {\n-\t\tsuper(msg);\n-\t\tinitCause(cause);\n+\t\tsuper(msg, cause);\n \t}\n \n ",
    "output": "NestedIOException can use IOException constructor with cause argument on JDK 6+"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n@@ -27,10 +27,10 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.messaging.Message;\n import org.springframework.messaging.MessageChannel;\n import org.springframework.messaging.MessageHeaders;\n-import org.springframework.messaging.simp.stomp.StompDecoder;\n import org.springframework.util.Assert;\n import org.springframework.util.IdGenerator;\n import org.springframework.util.MimeType;",
    "output": "Remove unused import (which indicated a package cycle)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -202,8 +202,11 @@ public RestTemplate(List<HttpMessageConverter<?>> messageConverters) {\n \t */\n \tpublic void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\n \t\tAssert.notEmpty(messageConverters, \"'messageConverters' must not be empty\");\n-\t\tthis.messageConverters.clear();\n-\t\tthis.messageConverters.addAll(messageConverters);\n+\t\t// Take getMessageConverters() List as-is when passed in here\n+\t\tif (this.messageConverters != messageConverters) {\n+\t\t\tthis.messageConverters.clear();\n+\t\t\tthis.messageConverters.addAll(messageConverters);\n+\t\t}\n \t}\n \n \t/**",
    "output": "RestTemplate accepts getMessageConvertersList on setMessageConverters again Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java\n@@ -233,7 +233,7 @@ protected Session getSession(Connection con, Integer mode) throws JMSException {\n \t\telse {\n \t\t\tSession targetSession = createSession(con, mode);\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Creating cached JMS Session for mode \" + mode + \": \" + targetSession);\n+\t\t\t\tlogger.debug(\"Registering cached JMS Session for mode \" + mode + \": \" + targetSession);\n \t\t\t}\n \t\t\tsession = getCachedSessionProxy(targetSession, sessionList);\n \t\t}\n@@ -393,7 +393,7 @@ private MessageProducer getCachedProducer(Destination dest) throws JMSException\n \t\t\telse {\n \t\t\t\tproducer = this.target.createProducer(dest);\n \t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Creating cached JMS MessageProducer for destination [\" + dest + \"]: \" + producer);\n+\t\t\t\t\tlogger.debug(\"Registering cached JMS MessageProducer for destination [\" + dest + \"]: \" + producer);\n \t\t\t\t}\n \t\t\t\tthis.cachedProducers.put(cacheKey, producer);\n \t\t\t}\n@@ -439,7 +439,7 @@ private MessageConsumer getCachedConsumer(\n \t\t\t\t\tconsumer = this.target.createConsumer(dest, selector);\n \t\t\t\t}\n \t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Creating cached JMS MessageConsumer for destination [\" + dest + \"]: \" + consumer);\n+\t\t\t\t\tlogger.debug(\"Registering cached JMS MessageConsumer for destination [\" + dest + \"]: \" + consumer);\n \t\t\t\t}\n \t\t\t\tthis.cachedConsumers.put(cacheKey, consumer);\n \t\t\t}",
    "output": "Refined CachingConnectionFactory log messages Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n@@ -370,7 +370,7 @@ public BeanWrapper instantiateUsingFactoryMethod(\n \t\t\tfactoryBean = this.beanFactory.getBean(factoryBeanName);\n \t\t\tif (factoryBean == null) {\n \t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n-\t\t\t\t\t\t\"factory-bean '\" + factoryBeanName + \"' returned null\");\n+\t\t\t\t\t\t\"factory-bean '\" + factoryBeanName + \"' (or a BeanPostProcessor involved) returned null\");\n \t\t\t}\n \t\t\tfactoryClass = factoryBean.getClass();\n \t\t\tisStatic = false;",
    "output": "ConstructorResolver's exception message on null factory-bean hints at potential BeanPostProcessor involvement Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n@@ -282,6 +282,12 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n \t\t\t\t\telse if (args.length == 3) {\n \t\t\t\t\t\treturn sendWithDestinationAndCompletionListenerMethod.invoke(\n \t\t\t\t\t\t\t\ttarget, args[0], args[1], deliveryMode, priority, timeToLive, args[2]);\n+\t\t\t\t\t} else if (args.length == 5) {\n+\t\t\t\t\t\treturn sendWithCompletionListenerMethod.invoke(\n+\t\t\t\t\t\t\t\ttarget, args[0], args[1], args[2], args[3], args[4]);\n+\t\t\t\t\t} else if (args.length == 6) {\n+\t\t\t\t\t\treturn sendWithDestinationAndCompletionListenerMethod.invoke(\n+\t\t\t\t\t\t\t\ttarget, args[0], args[1], args[2], args[3], args[4], args[5]);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn method.invoke(CachedMessageProducer.this, args);",
    "output": "Add support for extra MessageProducer method This commit supports two additional methods of the MessageProducer interface as from JMS 2.0 An integration test infrastructure is necessary to be able to test those scenario: this is taken care of in a separated initiative. Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java b/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachedMessageProducer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -284,7 +284,7 @@ else if (args.length == 3) {\n \t\t\t\t\t\t\t\ttarget, args[0], args[1], deliveryMode, priority, timeToLive, args[2]);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\treturn method.invoke(target, args);\n+\t\t\t\treturn method.invoke(CachedMessageProducer.this, args);\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {\n \t\t\t\tthrow ex.getTargetException();",
    "output": "Jms2MessageProducerInvocationHandler properly delegates to CachedMessageProducer.this Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -232,6 +232,13 @@ public class DispatcherServlet extends FrameworkServlet {\n \t */\n \tpublic static final String FLASH_MAP_MANAGER_ATTRIBUTE = DispatcherServlet.class.getName() + \".FLASH_MAP_MANAGER\";\n \n+\t/**\n+\t * Name of request attribute that exposes an Exception resolved with an\n+\t * {@link HandlerExceptionResolver} but where no view was rendered\n+\t * (e.g. setting the status code).\n+\t */\n+\tpublic static final String EXCEPTION_ATTRIBUTE = DispatcherServlet.class.getName() + \".EXCEPTION\";\n+\n \t/** Log category to use when no mapped handler is found for a request. */\n \tpublic static final String PAGE_NOT_FOUND_LOG_CATEGORY = \"org.springframework.web.servlet.PageNotFound\";\n \n@@ -1165,6 +1172,7 @@ protected ModelAndView processHandlerException(HttpServletRequest request, HttpS\n \t\t}\n \t\tif (exMv != null) {\n \t\t\tif (exMv.isEmpty()) {\n+\t\t\t\trequest.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\t// We might still need view name translation for a plain error model...",
    "output": "Expose handled exception as request attribute This change exposes exceptions handled in the DispatcherServlet with a HandlerExceptionResolver as a request attribute. This is done only when the resolver returns an empty ModelAndView indicating the exception was resolved but not view is required (e.g. status code was set). In such cases the exception may be useful to any handlers in an ERRPR dispatch by the servlet container. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -318,8 +318,9 @@ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType,\n \t\telse if (inValue instanceof SqlValue) {\n \t\t\t((SqlValue) inValue).setValue(ps, paramIndex);\n \t\t}\n-\t\telse if (sqlType == Types.VARCHAR || sqlType == Types.LONGVARCHAR ||\n-\t\t\t\t(sqlType == Types.CLOB && isStringValue(inValue.getClass()))) {\n+\t\telse if (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR ||\n+\t\t\t\tsqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR ||\n+\t\t\t\t((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass()))) {\n \t\t\tps.setString(paramIndex, inValue.toString());\n \t\t}\n \t\telse if (sqlType == Types.DECIMAL || sqlType == Types.NUMERIC) {",
    "output": "StatementCreatorUtils populates NVARCHAR, LONGNVARCHAR, NCLOB via setString as well Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheCustomInterceptorTests.java b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheCustomInterceptorTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheCustomInterceptorTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheCustomInterceptorTests.java\n@@ -134,6 +134,7 @@ public JCacheInterceptor jCacheInterceptor(JCacheOperationSource cacheOperationS\n \t * A test {@link org.springframework.cache.interceptor.CacheInterceptor} that handles special exception\n \t * types.\n \t */\n+\t@SuppressWarnings(\"serial\")\n \tstatic class TestCacheInterceptor extends JCacheInterceptor {\n \n \t\t@Override",
    "output": "Suppress serial warning in JCacheCustomInterceptorTests"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,6 +34,7 @@\n  * Spring's {@link Qualifier @Qualifier} annotation.\n  *\n  * @author Chris Beams\n+ * @author Juergen Hoeller\n  * @since 3.1.2\n  * @see BeanFactoryUtils\n  */\n@@ -90,6 +91,10 @@ private static <T> T qualifiedBeanOfType(ConfigurableListableBeanFactory bf, Cla\n \t\tif (matchingBean != null) {\n \t\t\treturn matchingBean;\n \t\t}\n+\t\telse if (bf.containsBean(qualifier)) {\n+\t\t\t// Fallback: target bean at least found by bean name.\n+\t\t\treturn bf.getBean(qualifier, beanType);\n+\t\t}\n \t\telse {\n \t\t\tthrow new NoSuchBeanDefinitionException(qualifier, \"No matching \" + beanType.getSimpleName() +\n \t\t\t\t\t\" bean found for qualifier '\" + qualifier + \"' - neither qualifier \" + \"match nor bean name match!\");",
    "output": "BeanFactoryAnnotationUtils consistently applies bean name fallback when no BeanDefinition present Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n@@ -271,6 +271,7 @@ public final void close(CloseStatus status) throws IOException {\n \t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(\"Closing SockJS session \" + getId() + \" with \" + status);\n \t\t\t}\n+\t\t\tthis.state = State.CLOSED;\n \t\t\ttry {\n \t\t\t\tif (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {\n \t\t\t\t\ttry {\n@@ -285,7 +286,6 @@ public final void close(CloseStatus status) throws IOException {\n \t\t\t\tdisconnect(status);\n \t\t\t}\n \t\t\tfinally {\n-\t\t\t\tthis.state = State.CLOSED;\n \t\t\t\ttry {\n \t\t\t\t\tthis.handler.afterConnectionClosed(this, status);\n \t\t\t\t}",
    "output": "Avoid multiple invocations of afterConnectionClosed This change ensures the state of a SockJS session is set to CLOSED immediately after close is invoked. This avoids duplicate invocations of afterConnectionClosed in WebSocket transport. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java\n@@ -123,7 +123,7 @@ public void handleInfoGetWildflyNPE() throws Exception {\n \n \t\thandleRequest(\"GET\", \"/echo/info\", HttpStatus.OK);\n \n-\t\tverify(mockResponse.getOutputStream(), times(1));\n+\t\tverify(mockResponse, times(1)).getOutputStream();\n \t}\n \n \t@Test",
    "output": "Fix unit test for Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/test/java/org/springframework/orm/jpa/AbstractContainerEntityManagerFactoryIntegrationTests.java b/spring-orm/src/test/java/org/springframework/orm/jpa/AbstractContainerEntityManagerFactoryIntegrationTests.java\n--- a/spring-orm/src/test/java/org/springframework/orm/jpa/AbstractContainerEntityManagerFactoryIntegrationTests.java\n+++ b/spring-orm/src/test/java/org/springframework/orm/jpa/AbstractContainerEntityManagerFactoryIntegrationTests.java\n@@ -167,7 +167,6 @@ public void testEntityManagerProxyRejectsProgrammaticTxManagement() {\n \n \t// public void testAspectJInjectionOfConfigurableEntity() {\n \t// Person p = new Person();\n-\t// System.err.println(p);\n \t// assertNotNull(\"Was injected\", p.getTestBean());\n \t// assertEquals(\"Ramnivas\", p.getTestBean().getName());\n \t// }\n@@ -246,10 +245,10 @@ public void testQueryNoPersonsSharedNotTransactional() {\n \t\t\tfail(\"Should have thrown IllegalStateException\");\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\t// IllegalStateException expected, but PersistenceException thrown by\n-\t\t\t// Hibernate\n-\t\t\tSystem.err.println(ex);\n-\t\t\tassertTrue(ex.getMessage().indexOf(\"closed\") != -1);\n+\t\t\t// We would typically expect an IllegalStateException, but Hibernate throws a\n+\t\t\t// PersistenceException. So we assert the contents of the exception message\n+\t\t\t// instead.\n+\t\t\tassertTrue(ex.getMessage().contains(\"closed\"));\n \t\t}\n \t\tq = em.createQuery(\"select p from Person as p\");\n \t\tq.setFlushMode(FlushModeType.AUTO);",
    "output": "Delete accidental call to System.err"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/SockJsThreadPoolTaskScheduler.java\n@@ -40,7 +40,7 @@ public class SockJsThreadPoolTaskScheduler extends ThreadPoolTaskScheduler {\n \n \t// Check for setRemoveOnCancelPolicy method - available on JDK 7 and higher\n \tprivate static boolean hasRemoveOnCancelPolicyMethod = ClassUtils.hasMethod(\n-\t\t\tScheduledThreadPoolExecutor.class, \"setRemoveOnCancelPolicy\", Boolean.class);\n+\t\t\tScheduledThreadPoolExecutor.class, \"setRemoveOnCancelPolicy\", boolean.class);\n \n \n \tpublic SockJsThreadPoolTaskScheduler() {",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java\n--- a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java\n+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java\n@@ -44,6 +44,7 @@\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.web.context.request.RequestAttributes;\n import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n import org.springframework.web.portlet.context.ConfigurablePortletApplicationContext;\n import org.springframework.web.portlet.context.PortletApplicationContextUtils;\n import org.springframework.web.portlet.context.PortletRequestAttributes;\n@@ -516,7 +517,8 @@ protected final void processRequest(PortletRequest request, PortletResponse resp\n \t\t// Expose current RequestAttributes to current thread.\n \t\tRequestAttributes previousRequestAttributes = RequestContextHolder.getRequestAttributes();\n \t\tPortletRequestAttributes requestAttributes = null;\n-\t\tif (previousRequestAttributes == null || previousRequestAttributes.getClass().equals(PortletRequestAttributes.class)) {\n+\t\tif (previousRequestAttributes == null || previousRequestAttributes.getClass().equals(PortletRequestAttributes.class) ||\n+\t\t\t\tpreviousRequestAttributes.getClass().equals(ServletRequestAttributes.class)) {\n \t\t\trequestAttributes = new PortletRequestAttributes(request, response);\n \t\t\tRequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);\n \t\t}",
    "output": "FrameworkPortlet exposes local PortletRequestAttributes in case of pre-bound ServletRequestAttributes as well Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -343,12 +343,12 @@ protected Resource[] findPathMatchingResources(String locationPattern) throws IO\n \t\tSet<Resource> result = new LinkedHashSet<Resource>(16);\n \t\tfor (Resource rootDirResource : rootDirResources) {\n \t\t\trootDirResource = resolveRootDirResource(rootDirResource);\n-\t\t\tif (isJarResource(rootDirResource)) {\n-\t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));\n-\t\t\t}\n-\t\t\telse if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n+\t\t\tif (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {\n \t\t\t\tresult.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()));\n \t\t\t}\n+\t\t\telse if (isJarResource(rootDirResource)) {\n+\t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));\n+\t\t\t}\n \t\t\telse {\n \t\t\t\tresult.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));\n \t\t\t}",
    "output": "PathMatchingResourcePatternResolver's findPathMatchingResources needs to check for VFS before checking isJarResource Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -60,7 +60,8 @@ class TypeConverterDelegate {\n \t\ttry {\n \t\t\tClass<?> clazz = ClassUtils.forName(\"java.util.Optional\", TypeConverterDelegate.class.getClassLoader());\n \t\t\tjavaUtilOptionalEmpty = ClassUtils.getMethod(clazz, \"empty\").invoke(null);\n-\t\t} catch (Exception ex) {\n+\t\t}\n+\t\tcatch (Exception ex) {\n \t\t\t// Java 8 not available - conversion to Optional not supported then.\n \t\t}\n \t}\n@@ -257,8 +258,11 @@ else if (convertedValue instanceof String && !requiredType.isInstance(convertedV\n \t\t\t\t\tstandardConversion = true;\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse if (requiredType.equals(javaUtilOptionalEmpty.getClass())) {\n-\t\t\t\tconvertedValue = javaUtilOptionalEmpty;\n+\t\t\telse {\n+\t\t\t\t// convertedValue == null\n+\t\t\t\tif (javaUtilOptionalEmpty != null && requiredType.equals(javaUtilOptionalEmpty.getClass())) {\n+\t\t\t\t\tconvertedValue = javaUtilOptionalEmpty;\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\tif (!ClassUtils.isAssignableValue(requiredType, convertedValue)) {",
    "output": "Defensively check javaUtilOptionalEmpty Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToOptionalConverter.java\n@@ -16,14 +16,15 @@\n \n package org.springframework.core.convert.support;\n \n-import org.springframework.core.convert.ConversionService;\n-import org.springframework.core.convert.TypeDescriptor;\n-import org.springframework.core.convert.converter.ConditionalGenericConverter;\n-\n import java.util.Collections;\n import java.util.Optional;\n import java.util.Set;\n \n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.TypeDescriptor;\n+import org.springframework.core.convert.converter.ConditionalGenericConverter;\n+import org.springframework.lang.UsesJava8;\n+\n /**\n  * Convert an Object to {@code java.util.Optional<T>} if necessary using the\n  * {@code ConversionService} to convert the source Object to the generic type\n@@ -32,6 +33,7 @@\n  * @author Rossen Stoyanchev\n  * @since 4.1\n  */\n+@UsesJava8\n final class ObjectToOptionalConverter implements ConditionalGenericConverter {\n \n \tprivate final ConversionService conversionService;\n@@ -78,4 +80,5 @@ public GenericTypeDescriptor(TypeDescriptor typeDescriptor) {\n \t\t\tsuper(typeDescriptor.getResolvableType().getGeneric(0), null, typeDescriptor.getAnnotations());\n \t\t}\n \t}\n+\n }",
    "output": "ObjectToOptionalConverter needs to be marked as @UsesJava8"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n--- a/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java\n@@ -71,7 +71,7 @@ public boolean set(T value) {\n \t */\n \tpublic boolean setException(Throwable exception) {\n \t\tAssert.notNull(exception, \"'exception' must not be null\");\n-\t\tboolean success = this.settableTask.setValue(exception);\n+\t\tboolean success = this.settableTask.setException(exception);\n \t\tif (success) {\n \t\t\tthis.listenableFuture.run();\n \t\t}\n@@ -151,17 +151,25 @@ private static class SettableTask<T> implements Callable<T> {\n \t\tprivate volatile boolean cancelled = false;\n \n \n-\t\tpublic boolean setValue(Object value) {\n+\t\tpublic boolean setValue(T value) {\n \t\t\tif (this.cancelled) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\treturn this.value.compareAndSet(NO_VALUE, value);\n \t\t}\n \n+\t\tpublic boolean setException(Throwable exception) {\n+\t\t\tif (this.cancelled) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn this.value.compareAndSet(NO_VALUE, exception);\n+\t\t}\n+\n \t\tpublic void setCancelled() {\n \t\t\tthis.cancelled = true;\n \t\t}\n \n+\t\t@SuppressWarnings(\"unchecked\")\n \t\t@Override\n \t\tpublic T call() throws Exception {\n \t\t\tif (value.get() instanceof Exception) {",
    "output": "Add suppress warning in SettableListenableFuture"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -216,14 +216,12 @@ public static String trimAllWhitespace(String str) {\n \t\tif (!hasLength(str)) {\n \t\t\treturn str;\n \t\t}\n-\t\tStringBuilder sb = new StringBuilder(str);\n-\t\tint index = 0;\n-\t\twhile (sb.length() > index) {\n-\t\t\tif (Character.isWhitespace(sb.charAt(index))) {\n-\t\t\t\tsb.deleteCharAt(index);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tindex++;\n+\t\tint len = str.length();\n+\t\tStringBuilder sb = new StringBuilder(str.length());\n+\t\tfor (int i = 0; i < len; i++) {\n+\t\t\tchar c = str.charAt(i);\n+\t\t\tif (!Character.isWhitespace(c)) {\n+\t\t\t\tsb.append(c);\n \t\t\t}\n \t\t}\n \t\treturn sb.toString();",
    "output": "Improve StringUtils#trimAllWhitespace Prior to this commit, StringUtils#trimAllWhitespace(String str) was unecessary slower. Using sb.deleteCharAt(index) leads to a complete copy of the char[]"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/hierarchies/meta/MetaContextHierarchyConfig.java b/spring-test/src/test/java/org/springframework/test/context/hierarchies/meta/MetaContextHierarchyConfig.java\n--- a/spring-test/src/test/java/org/springframework/test/context/hierarchies/meta/MetaContextHierarchyConfig.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/hierarchies/meta/MetaContextHierarchyConfig.java\n@@ -42,7 +42,7 @@\n }\n \n @Configuration\n-@Profile(\"dev\")\n+@DevProfile\n class DevConfig {\n \n \t@Bean\n@@ -52,11 +52,21 @@ public String foo() {\n }\n \n @Configuration\n-@Profile(\"prod\")\n+@ProdProfile\n class ProductionConfig {\n \n \t@Bean\n \tpublic String foo() {\n \t\treturn \"Production Foo\";\n \t}\n-}\n\\ No newline at end of file\n+}\n+\n+@Profile(\"dev\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@interface DevProfile {\n+}\n+\n+@Profile(\"prod\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@interface ProdProfile {\n+}",
    "output": "Unit tests for custom profile annotations on configuration classes Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java\n@@ -235,7 +235,7 @@ public int getEnd() {\n \n \t\t@Override\n \t\tpublic int compareTo(CssLinkInfo other) {\n-\t\t\treturn Integer.compare(this.start, other.start);\n+\t\t\treturn (this.start < other.start ? -1 : (this.start == other.start ? 0 : 1));\n \t\t}\n \n \t\t@Override",
    "output": "Fix animalSniffer warning"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -99,7 +99,12 @@ public ResultSetWrappingSqlRowSet(ResultSet resultSet) throws InvalidResultSetAc\n \t\t\t\tint columnCount = rsmd.getColumnCount();\n \t\t\t\tthis.columnLabelMap = new HashMap<String, Integer>(columnCount);\n \t\t\t\tfor (int i = 1; i <= columnCount; i++) {\n-\t\t\t\t\tthis.columnLabelMap.put(rsmd.getColumnLabel(i), i);\n+\t\t\t\t\tString key = rsmd.getColumnLabel(i);\n+\t\t\t\t\t// Make sure to preserve first matching column for any given name,\n+\t\t\t\t\t// as defined in ResultSet's type-level javadoc (lines 81 to 83).\n+\t\t\t\t\tif (!this.columnLabelMap.containsKey(key)) {\n+\t\t\t\t\t\tthis.columnLabelMap.put(key, i);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "ResultSetWrappingSqlRowSet preserves first matching column per name (as defined in ResultSet's javadoc) Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n@@ -928,6 +928,11 @@ protected void refreshConnectionUntilSuccessful() {\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (!applyBackOffTime(execution)) {\n+\t\t\t\tStringBuilder msg = new StringBuilder();\n+\t\t\t\tmsg.append(\"Stopping container for destination '\")\n+\t\t\t\t\t\t.append(getDestinationDescription())\n+\t\t\t\t\t\t.append(\"' - back off policy does not allow \").append(\"for further attempts.\");\n+\t\t\t\tlogger.error(msg.toString());\n \t\t\t\tstop();\n \t\t\t}\n \t\t}",
    "output": "polishing This commit adds an explicit error message when the BackOff instance has returned BackOffExecution#STOP which basically means that no further attempts are allowed. This error message is a convenience way to notify that the container is about to be shut down. Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java\n--- a/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java\n+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,6 +58,7 @@\n  * @see org.springframework.jdbc.datasource.DataSourceUtils#doGetConnection\n  * @see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection\n  */\n+@SuppressWarnings(\"unchecked\")  // due to a warning in Quartz 2.2's JobStoreCMT\n public class LocalDataSourceJobStore extends JobStoreCMT {\n \n \t/**",
    "output": "Building against Quartz 2.2.1 and JavaMail 1.5.2"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ScheduledFuture;\n \n import org.apache.commons.logging.Log;\n@@ -94,7 +95,7 @@ public abstract class AbstractSockJsSession implements SockJsSession {\n \n \tprivate final WebSocketHandler handler;\n \n-\tprivate final Map<String, Object> attributes;\n+\tprivate final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();\n \n \n \tprivate volatile State state = State.NEW;\n@@ -129,7 +130,10 @@ public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHan\n \t\tthis.id = id;\n \t\tthis.config = config;\n \t\tthis.handler = handler;\n-\t\tthis.attributes = attributes;\n+\n+\t\tif (attributes != null) {\n+\t\t\tthis.attributes.putAll(attributes);\n+\t\t}\n \t}\n \n ",
    "output": "Ensure handshake attrs are copied in SockJS session"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ListenableFutureReturnValueHandler.java\n@@ -50,7 +50,7 @@ public void handleReturnValue(Object returnValue,\n \t\t\treturn;\n \t\t}\n \n-\t\tDeferredResult<Object> deferredResult = new DeferredResult<Object>();\n+\t\tfinal DeferredResult<Object> deferredResult = new DeferredResult<Object>();\n \t\tWebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult, mavContainer);\n \n \t\tListenableFuture<?> future = (ListenableFuture<?>) returnValue;",
    "output": "Fix compile error"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -400,7 +400,11 @@ protected void handleMessageInternal(Message<?> message) {\n \t\t\tif (sessionId == null || SystemStompConnectionHandler.SESSION_ID.equals(sessionId)) {\n \t\t\t\tthrow new MessageDeliveryException(\"Message broker is not active.\");\n \t\t\t}\n-\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\tSimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());\n+\t\t\tif (messageType.equals(SimpMessageType.CONNECT) && logger.isErrorEnabled()) {\n+\t\t\t\tlogger.error(\"Message broker is not active. Ignoring: \" + message);\n+\t\t\t}\n+\t\t\telse if (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"Message broker is not active. Ignoring: \" + message);\n \t\t\t}\n \t\t\treturn;",
    "output": "Log ignored CONNECT messages at error level Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -583,20 +583,23 @@ public void handleMessage(Message<byte[]> message) {\n \t\t\tStompHeaderAccessor headerAccessor =\n \t\t\t\t\tMessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);\n \n+\t\t\theaderAccessor.setSessionId(this.sessionId);\n+\n \t\t\tif (headerAccessor.isHeartbeat()) {\n \t\t\t\tlogger.trace(\"Received broker heartbeat\");\n \t\t\t}\n \t\t\telse if (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"Received message from broker in session '\" + this.sessionId + \"'\");\n \t\t\t}\n+\t\t\telse if (logger.isErrorEnabled() && StompCommand.ERROR == headerAccessor.getCommand()) {\n+\t\t\t\tlogger.error(\"Received STOMP ERROR: \" + message);\n+\t\t\t}\n \n \t\t\tif (StompCommand.CONNECTED == headerAccessor.getCommand()) {\n \t\t\t\tafterStompConnected(headerAccessor);\n \t\t\t}\n \n-\t\t\theaderAccessor.setSessionId(this.sessionId);\n \t\t\theaderAccessor.setImmutable();\n-\n \t\t\tsendMessageToClient(message);\n \t\t}\n ",
    "output": "Log STOMP ERROR frames at error level Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -400,8 +400,8 @@ protected void handleMessageInternal(Message<?> message) {\n \t\t\tif (sessionId == null || SystemStompConnectionHandler.SESSION_ID.equals(sessionId)) {\n \t\t\t\tthrow new MessageDeliveryException(\"Message broker is not active.\");\n \t\t\t}\n-\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(\"Message broker is not active. Ignoring: \" + message);\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Message broker is not active. Ignoring: \" + message);\n \t\t\t}\n \t\t\treturn;\n \t\t}\n@@ -712,8 +712,8 @@ public ListenableFuture<Void> forward(Message<?> message, final StompHeaderAcces\n \n \t\t\tif (!this.isStompConnected) {\n \t\t\t\tif (this.isRemoteClientSession) {\n-\t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Ignoring client message received \" + message +\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Ignoring client message received \" + message +\n \t\t\t\t\t\t\t\t(conn != null ? \"before CONNECTED frame\" : \"after TCP connection closed\"));\n \t\t\t\t\t}\n \t\t\t\t\treturn EMPTY_TASK;",
    "output": "Upgrade log level Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n@@ -168,6 +168,8 @@ public void messageDeliveryExceptionIfSystemSessionForwardFails() throws Excepti\n \t\tlogger.debug(\"Starting test messageDeliveryExceptionIfSystemSessionForwardFails()\");\n \n \t\tstopActiveMqBrokerAndAwait();\n+\t\tthis.eventPublisher.expectBrokerAvailabilityEvent(false);\n+\n \t\tStompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SEND);\n \t\tthis.relay.handleMessage(MessageBuilder.createMessage(\"test\".getBytes(), headers.getMessageHeaders()));\n \t}\n@@ -184,6 +186,7 @@ public void brokerBecomingUnvailableTriggersErrorFrame() throws Exception {\n \n \t\tMessageExchange error = MessageExchangeBuilder.error(sess1).build();\n \t\tstopActiveMqBrokerAndAwait();\n+\t\tthis.eventPublisher.expectBrokerAvailabilityEvent(false);\n \t\tthis.responseHandler.expectMessages(error);\n \t}\n ",
    "output": "Fix one more issue in STOMP broker relay int test"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericBeanDefinition.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericBeanDefinition.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericBeanDefinition.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericBeanDefinition.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -89,7 +89,12 @@ public boolean equals(Object other) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"Generic bean: \" + super.toString();\n+\t\tStringBuilder sb = new StringBuilder(\"Generic bean\");\n+\t\tif (this.parentName != null) {\n+\t\t\tsb.append(\" with parent '\").append(this.parentName).append(\"'\");\n+\t\t}\n+\t\tsb.append(\": \").append(super.toString());\n+\t\treturn sb.toString();\n \t}\n \n }",
    "output": "GenericBeanDefinition's toStringtakes parent definition into account Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -267,7 +267,7 @@ protected final SourceClass doProcessConfigurationClass(ConfigurationClass confi\n \t\t// process superclass, if any\n \t\tif (sourceClass.getMetadata().hasSuperClass()) {\n \t\t\tString superclass = sourceClass.getMetadata().getSuperClassName();\n-\t\t\tif (!this.knownSuperclasses.containsKey(superclass)) {\n+\t\t\tif (!superclass.startsWith(\"java\") && !this.knownSuperclasses.containsKey(superclass)) {\n \t\t\t\tthis.knownSuperclasses.put(superclass, configClass);\n \t\t\t\t// superclass found, return its annotation metadata and recurse\n \t\t\t\ttry {",
    "output": "Configuration class processing explicitly skips java.* classes since we'll never find @Bean annotations there anyway Issue: (cherry picked from commit c8ea80d)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java\n@@ -101,7 +101,7 @@ else if (actualValue != null && expectedValue != null) {\n \t\t\tassertEquals(\"For JSON path \" + this.expression + \" type of value\",\n \t\t\t\t\texpectedValue.getClass(), actualValue.getClass());\n \t\t}\n-\t\tassertEquals(\"JSON path\" + this.expression, expectedValue, actualValue);\n+\t\tassertEquals(\"JSON path \" + this.expression, expectedValue, actualValue);\n \t}\n \n \t/**",
    "output": "Add space separator in JsonPathExpectationsHelper"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n--- a/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java\n@@ -40,7 +40,7 @@\n public class ServletServerHttpResponse implements ServerHttpResponse {\n \n \tprivate static final boolean servlet3Present =\n-\t\t\tClassUtils.isPresent(\"javax.servlet.AsyncContext\", ServletServerHttpResponse.class.getClassLoader());\n+\t\t\tClassUtils.hasMethod(HttpServletResponse.class, \"getHeader\", String.class);\n \n \n \tprivate final HttpServletResponse servletResponse;",
    "output": "ServletServerHttpResponse specifically checks for Servlet 3.0's HttpServletResponse.getHeader(String) method Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/SpringProperties.java b/spring-core/src/main/java/org/springframework/core/SpringProperties.java\n--- a/spring-core/src/main/java/org/springframework/core/SpringProperties.java\n+++ b/spring-core/src/main/java/org/springframework/core/SpringProperties.java\n@@ -55,7 +55,8 @@ public abstract class SpringProperties {\n \tstatic {\n \t\ttry {\n \t\t\tClassLoader cl = SpringProperties.class.getClassLoader();\n-\t\t\tURL url = cl.getResource(PROPERTIES_RESOURCE_LOCATION);\n+\t\t\tURL url = (cl != null ? cl.getResource(PROPERTIES_RESOURCE_LOCATION) :\n+\t\t\t\t\tClassLoader.getSystemResource(PROPERTIES_RESOURCE_LOCATION));\n \t\t\tif (url != null) {\n \t\t\t\tlogger.info(\"Found 'spring.properties' file in local classpath\");\n \t\t\t\tInputStream is = url.openStream();",
    "output": "SpringProperties falls back to ClassLoader.getSystemResource when loaded in bootstrap ClassLoader Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -904,7 +904,7 @@ protected void doDispatch(HttpServletRequest request, HttpServletResponse respon\n \n \t\t\ttry {\n \t\t\t\tprocessedRequest = checkMultipart(request);\n-\t\t\t\tmultipartRequestParsed = processedRequest != request;\n+\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n \n \t\t\t\t// Determine handler for the current request.\n \t\t\t\tmappedHandler = getHandler(processedRequest);\n@@ -1059,6 +1059,10 @@ protected HttpServletRequest checkMultipart(HttpServletRequest request) throws M\n \t\t\t\tlogger.debug(\"Request is already a MultipartHttpServletRequest - if not in a forward, \" +\n \t\t\t\t\t\t\"this typically results from an additional MultipartFilter in web.xml\");\n \t\t\t}\n+\t\t\telse if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) instanceof MultipartException) {\n+\t\t\t\tlogger.debug(\"Multipart resolution failed for current request before - \" +\n+\t\t\t\t\t\t\"skipping re-resolution for undisturbed error rendering\");\n+\t\t\t}\n \t\t\telse {\n \t\t\t\treturn this.multipartResolver.resolveMultipart(request);\n \t\t\t}",
    "output": "DispatcherServlet skips multipart resolution if error page exception attribute indicates MultipartException as root cause Issue"
  },
  {
    "input": "diff --git a/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/ValidatorFactoryTests.java b/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/ValidatorFactoryTests.java\n--- a/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/ValidatorFactoryTests.java\n+++ b/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/ValidatorFactoryTests.java\n@@ -302,7 +302,7 @@ public boolean isValid(ValidPerson value, ConstraintValidatorContext context) {\n \t\t\tboolean valid = (value.name == null || !value.address.street.contains(value.name));\n \t\t\tif (!valid && \"Phil\".equals(value.name)) {\n \t\t\t\tcontext.buildConstraintViolationWithTemplate(\n-\t\t\t\t\t\tcontext.getDefaultConstraintMessageTemplate()).addNode(\"address\").addConstraintViolation().disableDefaultConstraintViolation();\n+\t\t\t\t\t\tcontext.getDefaultConstraintMessageTemplate()).addPropertyNode(\"address\").addConstraintViolation().disableDefaultConstraintViolation();\n \t\t\t}\n \t\t\treturn valid;\n \t\t}\n@@ -356,7 +356,7 @@ public void initialize(InnerValid constraintAnnotation) {\n \t\tpublic boolean isValid(InnerBean bean, ConstraintValidatorContext context) {\n \t\t\tcontext.disableDefaultConstraintViolation();\n \t\t\tif (bean.getValue() == null) {\n-\t\t\t\tcontext.buildConstraintViolationWithTemplate(\"NULL\"). addNode(\"value\").addConstraintViolation();\n+\t\t\t\tcontext.buildConstraintViolationWithTemplate(\"NULL\").addPropertyNode(\"value\").addConstraintViolation();\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\treturn true;",
    "output": "Avoid deprecation warnings in ValidatorFactoryTests ValidatorFactoryTests now uses Bean Validation 1.1 APIs where appropriate"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n--- a/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java\n@@ -387,7 +387,7 @@ private Segment getSegmentForHash(int hash) {\n \tprotected static int calculateShift(int minimumValue, int maximumValue) {\n \t\tint shift = 0;\n \t\tint value = 1;\n-\t\twhile (value < minimumValue && value < minimumValue) {\n+\t\twhile (value < minimumValue && value < maximumValue) {\n \t\t\tvalue <<= 1;\n \t\t\tshift++;\n \t\t}",
    "output": "Fix ConcurrentReferenceHashMap max constraints Update calculateShift to respect the maximum upper bound as well as the minimum value. Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java\n--- a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java\n@@ -66,7 +66,7 @@\n  * @see EnableJms\n  * @see JmsListenerAnnotationBeanPostProcessor\n  */\n-@Target({ElementType.METHOD, ElementType.TYPE})\n+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})\n @Retention(RetentionPolicy.RUNTIME)\n @MessageMapping\n @Documented",
    "output": "polishing JmsLister is intended to be available on method or as a meta-annotation. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java\n@@ -70,7 +70,7 @@ public abstract class ScriptUtils {\n \t * such a script should not actually contain this value; it is merely a\n \t * <em>virtual</em> statement separator.\n \t */\n-\tpublic static final String EOF_STATEMENT_SEPARATOR = \"<<< END OF SCRIPT >>>\";\n+\tpublic static final String EOF_STATEMENT_SEPARATOR = \"^^^ END OF SCRIPT ^^^\";\n \n \t/**\n \t * Default prefix for line comments within SQL scripts.",
    "output": "Make EOF_STATEMENT_SEPARATOR XML friendly Changed the value of ScriptUtils.EOF_STATEMENT_SEPARATOR from \"<<< END OF SCRIPT >>>\" to \"^^^ END OF SCRIPT ^^^\" so that the angle brackets do not have to be escaped in XML configuration files. Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java\n@@ -99,7 +99,8 @@ public boolean isProcessExternalEntities() {\n \n \n \t/**\n-\t * Build a new {@link Document} from this marshaller's {@link DocumentBuilderFactory}.\n+\t * Build a new {@link Document} from this marshaller's {@link DocumentBuilderFactory},\n+\t * as a placeholder for a DOM node.\n \t * @see #createDocumentBuilderFactory()\n \t * @see #createDocumentBuilder(DocumentBuilderFactory)\n \t */\n@@ -114,8 +115,7 @@ protected Document buildDocument() {\n \t\t\treturn documentBuilder.newDocument();\n \t\t}\n \t\tcatch (ParserConfigurationException ex) {\n-\t\t\tthrow new UnmarshallingFailureException(\n-\t\t\t\t\t\"Could not create document placeholder for DOMSource: \" + ex.getMessage(), ex);\n+\t\t\tthrow new UnmarshallingFailureException(\"Could not create document placeholder: \" + ex.getMessage(), ex);\n \t\t}\n \t}\n ",
    "output": "AbstractMarshaller uses general exception message in extracted buildDocumentmethod Issue: (cherry picked from commit f7a17ad)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java\n@@ -41,7 +41,6 @@ public class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConv\n \t\t\t\t\tClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n \n \n-\t@SuppressWarnings(\"deprecation\")\n \tpublic AllEncompassingFormHttpMessageConverter() {\n \t\taddPartConverter(new SourceHttpMessageConverter<Source>());\n \t\tif (jaxb2Present) {\n\ndiff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -146,7 +146,6 @@ public class RestTemplate extends InterceptingHttpAccessor implements RestOperat\n \t * Create a new instance of the {@link RestTemplate} using default settings.\n \t * Default {@link HttpMessageConverter}s are initialized.\n \t */\n-\t@SuppressWarnings(\"deprecation\")\n \tpublic RestTemplate() {\n \t\tthis.messageConverters.add(new ByteArrayHttpMessageConverter());\n \t\tthis.messageConverters.add(new StringHttpMessageConverter());",
    "output": "Clean up warnings due to removal of legacy Jackson support"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n--- a/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n@@ -346,6 +346,7 @@ public void meta() {\n \t\t}\n \t}\n \n+\t@SuppressWarnings({ \"serial\" })\n \tprivate static class AnnotatedComponentSubClass extends AnnotatedComponent {\n \n \t}\n\ndiff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n@@ -1838,6 +1838,7 @@ public void SPR11445_beanReference() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic void SPR11494() {\n \t\tExpression exp = new SpelExpressionParser().parseExpression(\"T(java.util.Arrays).asList('a','b')\");\n \t\tList<String> list = (List<String>) exp.getValue();\n@@ -1992,6 +1993,7 @@ public Object resolve(EvaluationContext context, String beanName) throws AccessE\n \t}\n \n \n+\t@SuppressWarnings({ \"rawtypes\", \"serial\" })\n \tpublic static class MapWithConstant extends HashMap {\n \n \t\tpublic static final int X = 1;",
    "output": "Clean up warnings that show up in Gradle build"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -251,7 +251,17 @@ protected void setHeaders(HttpServletResponse response, Resource resource, Media\n \t * @throws IOException in case of errors while writing the content\n \t */\n \tprotected void writeContent(HttpServletResponse response, Resource resource) throws IOException {\n-\t\tStreamUtils.copy(resource.getInputStream(), response.getOutputStream());\n+\t\tInputStream in = resource.getInputStream();\n+\t\ttry {\n+\t\t\tStreamUtils.copy(in, response.getOutputStream());\n+\t\t}\n+\t\tfinally {\n+\t\t\ttry {\n+\t\t\t\tin.close();\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t}\n+\t\t}\n \t}\n \n ",
    "output": "ResourceHttpRequestHandler explicitly closes a Resource's InputStream Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapterTests.java\n@@ -17,8 +17,11 @@\n package org.springframework.web.socket.adapter.jetty;\n \n import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.UpgradeRequest;\n+import org.eclipse.jetty.websocket.api.UpgradeResponse;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.springframework.web.socket.CloseStatus;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter;\n@@ -45,6 +48,9 @@ public class JettyWebSocketHandlerAdapterTests {\n \t@Before\n \tpublic void setup() {\n \t\tthis.session = mock(Session.class);\n+\t\twhen(this.session.getUpgradeRequest()).thenReturn(Mockito.mock(UpgradeRequest.class));\n+\t\twhen(this.session.getUpgradeResponse()).thenReturn(Mockito.mock(UpgradeResponse.class));\n+\n \t\tthis.webSocketHandler = mock(WebSocketHandler.class);\n \t\tthis.webSocketSession = new JettyWebSocketSession(null, null);\n \t\tthis.adapter = new JettyWebSocketHandlerAdapter(this.webSocketHandler, this.webSocketSession);",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java\n@@ -190,7 +190,6 @@ public EmbeddedDatabaseBuilder setCommentPrefix(String commentPrefix) {\n \t * @return {@code this}, to facilitate method chaining\n \t * @since 4.0.3\n \t * @see #setBlockCommentEndDelimiter\n-\t * @since 4.0.3\n \t */\n \tpublic EmbeddedDatabaseBuilder setBlockCommentStartDelimiter(String blockCommentStartDelimiter) {\n \t\tthis.databasePopulator.setBlockCommentStartDelimiter(blockCommentStartDelimiter);\n@@ -204,7 +203,6 @@ public EmbeddedDatabaseBuilder setBlockCommentStartDelimiter(String blockComment\n \t * @return {@code this}, to facilitate method chaining\n \t * @since 4.0.3\n \t * @see #setBlockCommentStartDelimiter\n-\t * @since 4.0.3\n \t */\n \tpublic EmbeddedDatabaseBuilder setBlockCommentEndDelimiter(String blockCommentEndDelimiter) {\n \t\tthis.databasePopulator.setBlockCommentEndDelimiter(blockCommentEndDelimiter);",
    "output": "Remove duplicate @since tags in EmbeddedDatabaseBuilder"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ClassUtils.java b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -356,7 +356,7 @@ public static boolean isCacheSafe(Class<?> clazz, ClassLoader classLoader) {\n \t\tAssert.notNull(clazz, \"Class must not be null\");\n \t\tClassLoader target = clazz.getClassLoader();\n \t\tif (target == null) {\n-\t\t\treturn false;\n+\t\t\treturn true;\n \t\t}\n \t\tClassLoader cur = classLoader;\n \t\tif (cur == target) {",
    "output": "Consider a null ClassLoader (typically the bootstrap CL) as cache-safe Issue: (cherry picked from commit a4a2e80)"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -205,7 +205,7 @@ private void publishEvent(ApplicationEvent event) {\n \t\t\tthis.eventPublisher.publishEvent(event);\n \t\t}\n \t\tcatch (Throwable ex) {\n-\t\t\tlogger.error(\"Failed to publish event \" + event, ex);\n+\t\t\tlogger.error(\"Error while publishing \" + event, ex);\n \t\t}\n \t}\n ",
    "output": "Provide more accurate error message"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n@@ -581,7 +581,7 @@ public void expectAvailabilityStatusChanges(Boolean... expected) {\n \n \t\tpublic void awaitAndAssert() throws InterruptedException {\n \t\t\tsynchronized(this.monitor) {\n-\t\t\t\tlong endTime = System.currentTimeMillis() + 10000;\n+\t\t\t\tlong endTime = System.currentTimeMillis() + 60000;\n \t\t\t\twhile ((this.expected.size() != this.actual.size()) && (System.currentTimeMillis() < endTime)) {\n \t\t\t\t\tthis.monitor.wait(500);\n \t\t\t\t}",
    "output": "Upgrade test to catch CI server issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java\n@@ -72,6 +72,7 @@ public WebSocketHandler subProtocolWebSocketHandler() {\n \t@Bean\n \tpublic ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {\n \t\tThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();\n+\t\tscheduler.setPoolSize(Runtime.getRuntime().availableProcessors());\n \t\tscheduler.setThreadNamePrefix(\"MessageBrokerSockJS-\");\n \t\treturn scheduler;\n \t}",
    "output": "Adjust SockJS scheduler core pool size Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -81,6 +81,7 @@ public class StompBrokerRelayMessageHandler extends AbstractBrokerMessageHandler\n \tstatic {\n \t\tSimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create(SimpMessageType.HEARTBEAT);\n \t\tHEARTBEAT_MESSAGE = MessageBuilder.withPayload(new byte[] {'\\n'}).setHeaders(headers).build();\n+\t\tEMPTY_TASK.run();\n \t}\n \n ",
    "output": "Fix minor issue in STOMP broker relay"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n--- a/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n@@ -17,7 +17,6 @@\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n@@ -28,7 +27,6 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Controller;",
    "output": "Delete unused imports in spring-test"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/access/el/SpringBeanELResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/access/el/SpringBeanELResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/access/el/SpringBeanELResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/access/el/SpringBeanELResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,7 +18,6 @@\n \n import java.beans.FeatureDescriptor;\n import java.util.Iterator;\n-\n import javax.el.ELContext;\n import javax.el.ELException;\n import javax.el.ELResolver;\n@@ -78,8 +77,14 @@ public void setValue(ELContext elContext, Object base, Object property, Object v\n \t\t\tString beanName = property.toString();\n \t\t\tBeanFactory bf = getBeanFactory(elContext);\n \t\t\tif (bf.containsBean(beanName)) {\n-\t\t\t\tthrow new PropertyNotWritableException(\n-\t\t\t\t\t\t\"Variable '\" + beanName + \"' refers to a Spring bean which by definition is not writable\");\n+\t\t\t\tif (value == bf.getBean(beanName)) {\n+\t\t\t\t\t// Setting the bean reference to the same value is alright - can simply be ignored...\n+\t\t\t\t\telContext.setPropertyResolved(true);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tthrow new PropertyNotWritableException(\n+\t\t\t\t\t\t\t\"Variable '\" + beanName + \"' refers to a Spring bean which by definition is not writable\");\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}",
    "output": "SpringBeanELResolver's setValue should not throw PropertyNotWritableException if provided value is identical to current bean instance Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.java b/spring-websocket/src/main/java/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.java\n@@ -57,11 +57,8 @@ public void handleMessage(WebSocketSession session, WebSocketMessage<?> message)\n \n \t@Override\n \tpublic void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {\n-\t\tif (logger.isDebugEnabled()) {\n-\t\t\tlogger.debug(\"Transport error for \" + session + \": \" + exception);\n-\t\t}\n-\t\telse if (logger.isTraceEnabled()) {\n-\t\t\tlogger.debug(\"Transport error for \" + session, exception);\n+\t\tif (logger.isErrorEnabled()) {\n+\t\t\tlogger.error(\"Transport error for \" + session, exception);\n \t\t}\n \t\tsuper.handleTransportError(session, exception);\n \t}",
    "output": "Adjust log level in LoggingWebSocketHandlerDecorator"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/Log4jWebConfigurer.java b/spring-web/src/main/java/org/springframework/web/util/Log4jWebConfigurer.java\n--- a/spring-web/src/main/java/org/springframework/web/util/Log4jWebConfigurer.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/Log4jWebConfigurer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n \n import org.springframework.util.Log4jConfigurer;\n import org.springframework.util.ResourceUtils;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Convenience class that performs custom log4j initialization for web environments,\n@@ -136,7 +137,7 @@ public static void initLogging(ServletContext servletContext) {\n \n \t\t\t\t// Check whether refresh interval was specified.\n \t\t\t\tString intervalString = servletContext.getInitParameter(REFRESH_INTERVAL_PARAM);\n-\t\t\t\tif (intervalString != null) {\n+\t\t\t\tif (StringUtils.hasText(intervalString)) {\n \t\t\t\t\t// Initialize with refresh interval, i.e. with log4j's watchdog thread,\n \t\t\t\t\t// checking the file in the background.\n \t\t\t\t\ttry {",
    "output": "Log4jWebConfigurer does not try to parse empty \"log4jRefreshInterval\" context-param Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,7 +88,10 @@ public ClassLoader getClassLoader() {\n \t@Override\n \tpublic Resource getResource(String location) {\n \t\tAssert.notNull(location, \"Location must not be null\");\n-\t\tif (location.startsWith(CLASSPATH_URL_PREFIX)) {\n+\t\tif (location.startsWith(\"/\")) {\n+\t\t\treturn getResourceByPath(location);\n+\t\t}\n+\t\telse if (location.startsWith(CLASSPATH_URL_PREFIX)) {\n \t\t\treturn new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());\n \t\t}\n \t\telse {",
    "output": "Optimize DefaultResourceLoader's getResource implementation for \"/...\" paths, not relying on URL parsing exceptions for such a common case anymore Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -278,19 +278,19 @@ private static <A extends Annotation> A findAnnotation(Class<?> clazz, Class<A>\n \t\t\tSet<Annotation> visited) {\n \t\tAssert.notNull(clazz, \"Class must not be null\");\n \n-\t\tA annotation = clazz.getDeclaredAnnotation(annotationType);\n-\t\tif (annotation != null) {\n-\t\t\treturn annotation;\n+\t\tif (isAnnotationDeclaredLocally(annotationType, clazz)) {\n+\t\t\treturn clazz.getAnnotation(annotationType);\n \t\t}\n \t\tfor (Class<?> ifc : clazz.getInterfaces()) {\n-\t\t\tannotation = findAnnotation(ifc, annotationType, visited);\n+\t\t\tA annotation = findAnnotation(ifc, annotationType, visited);\n \t\t\tif (annotation != null) {\n \t\t\t\treturn annotation;\n \t\t\t}\n \t\t}\n \t\tfor (Annotation ann : clazz.getDeclaredAnnotations()) {\n \t\t\tif (!isInJavaLangAnnotationPackage(ann) && visited.add(ann)) {\n-\t\t\t\tannotation = findAnnotation(ann.annotationType(), annotationType, visited);\n+\t\t\t\tA annotation = findAnnotation(ann.annotationType(), annotationType,\n+\t\t\t\t\t\tvisited);\n \t\t\t\tif (annotation != null) {\n \t\t\t\t\treturn annotation;\n \t\t\t\t}",
    "output": "Ensure AnnotationUtils is compatible with Java 6 The previous commit introduced a dependency on Class.getDeclaredAnnotationwhich is a Java 8 API. This commit refactors AnnotationUtils.findAnnotation(Class, Class, Set) to use Class.getAnnotationin conjunction with isAnnotationDeclaredLocallyin order to achieve the same desired behavior. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java b/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java\n@@ -75,7 +75,6 @@ void assertMergedConfig(\n \t\tassertNotNull(mergedConfig.getClasses());\n \t\tassertArrayEquals(expectedClasses, mergedConfig.getClasses());\n \t\tassertNotNull(mergedConfig.getActiveProfiles());\n-\t\tSystem.err.println(expectedContextLoaderClass);\n \t\tif (expectedContextLoaderClass == null) {\n \t\t\tassertNull(mergedConfig.getContextLoader());\n \t\t}",
    "output": "Delete call to System.err in AbstractContextLoaderUtilsTests"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java\n@@ -238,19 +238,6 @@ private static class Animals extends LocationsBar {\n \tprivate static @interface MetaAnimalsConfig {\n \t}\n \n-\t@ActiveProfiles\n-\t@Retention(RetentionPolicy.RUNTIME)\n-\t@Target(ElementType.TYPE)\n-\t// TODO Write test with @MetaProfilesWithOverrides.\n-\tprivate static @interface MetaProfilesWithOverrides {\n-\n-\t\tString[] profiles() default { \"dog\", \"cat\" };\n-\n-\t\tClass<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class;\n-\n-\t\tboolean inheritProfiles() default false;\n-\t}\n-\n \t@ActiveProfiles(resolver = TestClassVerifyingActiveProfilesResolver.class)\n \t@Retention(RetentionPolicy.RUNTIME)\n \t@Target(ElementType.TYPE)",
    "output": "Remove unused code in ContextLoaderUtilsActiveProfilesTests"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -445,7 +445,7 @@ public static class TransactionalClass {\n \t}\n \n \t@Order\n-\tpublic static class TransactionalAndOrderedClass {\n+\tpublic static class TransactionalAndOrderedClass extends TransactionalClass {\n \t}\n \n \tpublic static class SubTransactionalAndOrderedClass extends TransactionalAndOrderedClass {",
    "output": "Fix minor error in AnnotationUtilsTests TransactionalAndOrderedClass now extends TransactionalClass. The tests passed anyway, but they did not actually verify what was meant to be verified"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -36,7 +36,6 @@\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ConcurrentReferenceHashMap;\n-import org.springframework.util.ConcurrentReferenceHashMap.ReferenceType;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n ",
    "output": "Fix unused import warning"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -36,6 +36,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ConcurrentReferenceHashMap;\n+import org.springframework.util.ConcurrentReferenceHashMap.ReferenceType;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n@@ -1129,11 +1130,12 @@ static ResolvableType forType(Type type, TypeProvider typeProvider, VariableReso\n \t\t\treturn NONE;\n \t\t}\n \t\t// Check the cache, we may have a ResolvableType that may have already been resolved\n+\t\tcache.purgeUnreferencedEntries();\n \t\tResolvableType key = new ResolvableType(type, typeProvider, variableResolver);\n \t\tResolvableType resolvableType = cache.get(key);\n \t\tif (resolvableType == null) {\n \t\t\tresolvableType = new ResolvableType(type, typeProvider, variableResolver, null);\n-\t\t\tcache.put(key, resolvableType);\n+\t\t\tcache.put(resolvableType, resolvableType);\n \t\t}\n \t\treturn resolvableType;\n \t}",
    "output": "Regularly purge ResolvableType cache Update ResolvableType to call `purgeUnreferencedEntries` on the cache on each get. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java\n@@ -71,7 +71,7 @@ public void deployConfig(WebApplicationContext cxt) {\n \n \t\ttry {\n \t\t\tthis.server = Undertow.builder()\n-\t\t\t\t\t.addListener(this.port, \"localhost\")\n+\t\t\t\t\t.addHttpListener(this.port, \"localhost\")\n \t\t\t\t\t.setHandler(this.manager.start()).build();\n \t\t}\n \t\tcatch (ServletException ex) {",
    "output": "Upgrade to Undertow 1.0 Final (WildFly 8 Final)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java b/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n--- a/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n@@ -74,7 +74,7 @@ public Object remove(String name) {\n \n \t@Override\n \tpublic void registerDestructionCallback(String name, Runnable callback) {\n-\t\tlogger.warn(\"SimpleThreadScope does not support descruction callbacks. \" +\n+\t\tlogger.warn(\"SimpleThreadScope does not support destruction callbacks. \" +\n \t\t\t\t\"Consider using a RequestScope in a Web environment.\");\n \t}\n ",
    "output": "fix log spelling typo"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/SimpMessagingTemplateTests.java\n@@ -74,7 +74,7 @@ public void convertAndSendToUserWithEncoding() {\n \n \t@Test\n \tpublic void convertAndSendWithCustomHeader() {\n-\t\tMap<String, Object> headers = Collections.singletonMap(\"key\", \"value\");\n+\t\tMap<String, Object> headers = Collections.<String, Object>singletonMap(\"key\", \"value\");\n \t\tthis.messagingTemplate.convertAndSend(\"/foo\", \"data\", headers);\n \n \t\tList<Message<byte[]>> messages = this.messageChannel.getMessages();",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java\n@@ -106,12 +106,10 @@ protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, Dependenc\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif (targetType == null) {\n+\t\tif (targetType == null || (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics())) {\n \t\t\treturn true;\n \t\t}\n-\t\tif (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {\n-\t\t\treturn descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass());\n-\t\t}\n+\t\t// Full check for complex generic type match...\n \t\treturn dependencyType.isAssignableFrom(targetType);\n \t}\n ",
    "output": "Avoid repeated assignability check for raw class on fallback match, since AutowireCandidateResolver is only being called for basic type matches to begin with Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java\n@@ -155,7 +155,7 @@ public void convertAndSendPayloadWithPostProcessorToDestination() {\n \tpublic void convertAndSendNoMatchingConverter() {\n \n \t\tMessageConverter converter = new CompositeMessageConverter(\n-\t\t\t\tArrays.asList(new MappingJackson2MessageConverter()), new DefaultContentTypeResolver());\n+\t\t\t\tArrays.<MessageConverter>asList(new MappingJackson2MessageConverter()), new DefaultContentTypeResolver());\n \t\tthis.template.setMessageConverter(converter);\n \n \t\tthis.headers.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_XML);",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n@@ -84,7 +84,7 @@ public void readXmlRootElementSubclass() throws Exception {\n \t\tbyte[] body = \"<rootElement><type s=\\\"Hello World\\\"/></rootElement>\".getBytes(\"UTF-8\");\n \t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(body);\n \t\tRootElementSubclass result = (RootElementSubclass) converter.read(RootElementSubclass.class, inputMessage);\n-\t\tassertEquals(\"Invalid result\", \"Hello World\", result.type.s);\n+\t\tassertEquals(\"Invalid result\", \"Hello World\", result.getType().s);\n \t}\n \n \t@Test\n@@ -118,9 +118,16 @@ public void writeXmlRootElementSubclass() throws Exception {\n \t@XmlRootElement\n \tpublic static class RootElement {\n \n-\t\t@XmlElement\n-\t\tpublic Type type = new Type();\n+\t\tprivate Type type = new Type();\n \n+\t\tpublic Type getType() {\n+\t\t\treturn this.type;\n+\t\t}\n+\n+\t\t@XmlElement\n+\t\tpublic void setType(Type type) {\n+\t\t\tthis.type = type;\n+\t\t}\n \t}\n \n \t@XmlType",
    "output": "Fix test in Jaxb2RootElementHttpMessageConverterTests"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n--- a/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,7 +37,7 @@\n import org.springframework.http.MockHttpOutputMessage;\n \n /** @author Arjen Poutsma */\n-public class Jaxb2RootElementHttpMessageConverterTest {\n+public class Jaxb2RootElementHttpMessageConverterTests {\n \n \tprivate Jaxb2RootElementHttpMessageConverter converter;\n ",
    "output": "Fix test class name"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n--- a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n@@ -289,20 +289,6 @@ private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {\n \t\t\t}\n \t\t\tthis.beanInfo = beanInfo;\n \n-\t\t\t// Only bother with flushFromCaches if the Introspector actually cached...\n-\t\t\tif (!shouldIntrospectorIgnoreBeaninfoClasses) {\n-\t\t\t\t// Immediately remove class from Introspector cache, to allow for proper\n-\t\t\t\t// garbage collection on class loader shutdown - we cache it here anyway,\n-\t\t\t\t// in a GC-friendly manner. In contrast to CachedIntrospectionResults,\n-\t\t\t\t// Introspector does not use WeakReferences as values of its WeakHashMap!\n-\t\t\t\tClass<?> classToFlush = beanClass;\n-\t\t\t\tdo {\n-\t\t\t\t\tIntrospector.flushFromCaches(classToFlush);\n-\t\t\t\t\tclassToFlush = classToFlush.getSuperclass();\n-\t\t\t\t}\n-\t\t\t\twhile (classToFlush != null);\n-\t\t\t}\n-\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Caching PropertyDescriptors for class [\" + beanClass.getName() + \"]\");\n \t\t\t}",
    "output": "Drop Introspector.flushFromCaches calls completely According to the JDK's documentation and changelog, the Introspector itself safely handles weak references as of JDK 6 update 21 (which is what we require for Spring 4.0). Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java b/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/ResultActions.java\n@@ -37,7 +37,7 @@ public interface ResultActions {\n \t * mockMvc.perform(get(\"/person/1\"))\n \t *   .andExpect(status.isOk())\n \t *   .andExpect(content().mimeType(MediaType.APPLICATION_JSON))\n-\t *   .andExpect(jsonPath(\"$.person.name\").equalTo(\"Jason\"));\n+\t *   .andExpect(jsonPath(\"$.person.name\").value(\"Jason\"));\n \t *\n \t * mockMvc.perform(post(\"/form\"))\n \t *   .andExpect(status.isOk())\n@@ -67,4 +67,4 @@ public interface ResultActions {\n \t */\n \tMvcResult andReturn();\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix code example in JavaDoc equalTo is not a valid method on JsonPathResultMatchers I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -208,7 +208,7 @@ protected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryTo\n \t\t\t\t\tvisitor.visitBeanDefinition(bd);\n \t\t\t\t}\n \t\t\t\tcatch (Exception ex) {\n-\t\t\t\t\tthrow new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage());\n+\t\t\t\t\tthrow new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Preserve visitBeanDefinition stacktrace in BeanDefinitionStoreException Issue: (cherry picked from commit fdd31c0)"
  },
  {
    "input": "diff --git a/spring-jms/src/test/java/org/springframework/jms/support/converter/MappingJacksonMessageConverterTests.java b/spring-jms/src/test/java/org/springframework/jms/support/converter/MappingJacksonMessageConverterTests.java\n--- a/spring-jms/src/test/java/org/springframework/jms/support/converter/MappingJacksonMessageConverterTests.java\n+++ b/spring-jms/src/test/java/org/springframework/jms/support/converter/MappingJacksonMessageConverterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n \n import org.junit.Before;\n import org.junit.Test;\n+\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n@@ -38,6 +39,7 @@\n  * @author Arjen Poutsma\n  * @author Dave Syer\n  */\n+@SuppressWarnings(\"deprecation\")\n public class MappingJacksonMessageConverterTests {\n \n \tprivate MappingJacksonMessageConverter converter;",
    "output": "Suppress warnings in MappingJacksonMsgConvTests"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,10 +25,18 @@\n @SuppressWarnings(\"serial\")\n public class MessageHandlingException extends MessagingException {\n \n+\tpublic MessageHandlingException(Message<?> failedMessage) {\n+\t\tsuper(failedMessage);\n+\t}\n+\n \tpublic MessageHandlingException(Message<?> message, String description) {\n \t\tsuper(message, description);\n \t}\n \n+\tpublic MessageHandlingException(Message<?> failedMessage, Throwable cause) {\n+\t\tsuper(failedMessage, cause);\n+\t}\n+\n \tpublic MessageHandlingException(Message<?> message, String description, Throwable cause) {\n \t\tsuper(message, description, cause);\n \t}",
    "output": "Add constructors to MessageHandlingException Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/testng/transaction/ejb/RollbackForRequiredEjbTxDaoTestNGTests.java b/spring-test/src/test/java/org/springframework/test/context/testng/transaction/ejb/RollbackForRequiredEjbTxDaoTestNGTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/testng/transaction/ejb/RollbackForRequiredEjbTxDaoTestNGTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/testng/transaction/ejb/RollbackForRequiredEjbTxDaoTestNGTests.java\n@@ -37,24 +37,6 @@\n @TransactionConfiguration(defaultRollback = true)\n public class RollbackForRequiredEjbTxDaoTestNGTests extends CommitForRequiredEjbTxDaoTestNGTests {\n \n-\t/**\n-\t * Redeclared to ensure test method execution order. Simply delegates to super.\n-\t */\n-\t@Test\n-\t@Override\n-\tpublic void test1InitialState() {\n-\t\tsuper.test1InitialState();\n-\t}\n-\n-\t/**\n-\t * Redeclared to ensure test method execution order. Simply delegates to super.\n-\t */\n-\t@Test(dependsOnMethods = \"test1InitialState\")\n-\t@Override\n-\tpublic void test2IncrementCount1() {\n-\t\tsuper.test2IncrementCount1();\n-\t}\n-\n \t/**\n \t * Overrides parent implementation in order to change expectations to align with\n \t * behavior associated with \"required\" transactions on repositories/DAOs and",
    "output": "Delete unnecessary redeclaration of test methods This commit deletes methods in RollbackForRequiredEjbTxDaoTestNGTests that were unnecessarily redeclared. The redeclaration is required for JUnit's @FixMethodOrder support but not for TestNG's built-in support for dependent methods. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java\n@@ -22,11 +22,9 @@\n  * @author Mark Fisher\n  * @since 4.0\n  */\n+@SuppressWarnings(\"serial\")\n public class MessageHandlingException extends MessagingException {\n \n-\tprivate static final long serialVersionUID = 690969923668400297L;\n-\n-\n \tpublic MessageHandlingException(Message<?> message, String description) {\n \t\tsuper(message, description);\n \t}\n\ndiff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/MissingSessionUserException.java\n@@ -23,11 +23,9 @@\n  * @author Rossen Stoyanchev\n  * @since 4.0\n  */\n+@SuppressWarnings(\"serial\")\n public class MissingSessionUserException extends MessagingException {\n \n-\tprivate static final long serialVersionUID = -6905878930083523161L;\n-\n-\n \tpublic MissingSessionUserException(Message<?> message) {\n \t\tsuper(message, \"No \\\"user\\\" header in message\");\n \t}",
    "output": "Remove serialVersionUIDs in spring-messaging Exc. Prior to this commit, several spring-messaging exceptions had defined serialVersionUIDs. Those exception aren't supposed to leave the system via Java serialization; also, their deserialization is supported only against the same version of Spring. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java\n@@ -48,7 +48,6 @@ public abstract class AbstractWebSocketClient implements WebSocketClient {\n \n \tstatic {\n \t\tspecialHeaders.add(\"cache-control\");\n-\t\tspecialHeaders.add(\"cookie\");\n \t\tspecialHeaders.add(\"connection\");\n \t\tspecialHeaders.add(\"host\");\n \t\tspecialHeaders.add(\"sec-websocket-extensions\");",
    "output": "Allow setting Cookie header Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java\n--- a/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java\n+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -67,7 +67,7 @@ public void setIncludePatterns(List<String> patterns) {\n \t}\n \n \tpublic void setAspectJAdvisorFactory(AspectJAdvisorFactory aspectJAdvisorFactory) {\n-\t\tAssert.notNull(this.aspectJAdvisorFactory, \"AspectJAdvisorFactory must not be null\");\n+\t\tAssert.notNull(aspectJAdvisorFactory, \"AspectJAdvisorFactory must not be null\");\n \t\tthis.aspectJAdvisorFactory = aspectJAdvisorFactory;\n \t}\n ",
    "output": "Fix assert in setAspectJAdvisorFactoryIssue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n@@ -273,8 +273,9 @@ private void startNewTransaction(TestContext testContext, TransactionContext txC\n \t\ttxContext.startTransaction();\n \t\t++this.transactionsStarted;\n \t\tif (logger.isInfoEnabled()) {\n-\t\t\tlogger.info(\"Began transaction (\" + this.transactionsStarted + \"): transaction manager [\"\n-\t\t\t\t\t+ txContext.transactionManager + \"]; rollback [\" + isRollback(testContext) + \"]\");\n+\t\t\tlogger.info(String.format(\n+\t\t\t\t\"Began transaction (%s) for test context %s; transaction manager [%s]; rollback [%s]\",\n+\t\t\t\tthis.transactionsStarted, testContext, txContext.transactionManager, isRollback(testContext)));\n \t\t}\n \t}\n \n@@ -288,8 +289,9 @@ private void startNewTransaction(TestContext testContext, TransactionContext txC\n \tprivate void endTransaction(TestContext testContext, TransactionContext txContext) throws Exception {\n \t\tboolean rollback = isRollback(testContext);\n \t\tif (logger.isTraceEnabled()) {\n-\t\t\tlogger.trace(\"Ending transaction for test context \" + testContext + \"; transaction manager [\"\n-\t\t\t\t\t+ txContext.transactionStatus + \"]; rollback [\" + rollback + \"]\");\n+\t\t\tlogger.trace(String.format(\n+\t\t\t\t\"Ending transaction for test context %s; transaction status [%s]; rollback [%s]\", testContext,\n+\t\t\t\ttxContext.transactionStatus, rollback));\n \t\t}\n \t\ttxContext.endTransaction(rollback);\n \t\tif (logger.isInfoEnabled()) {",
    "output": "Improve logging in TransactionalTEL This commit makes the logging in TransactionalTestExecutionListener consistent for both starting and ending transactions. Specifically, the current TestContext is now included in the informational log statement when starting a new transaction. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/MethodInvoker.java b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n--- a/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n+++ b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java\n@@ -28,10 +28,6 @@\n  * optionally specify arguments, prepare the invoker. Afterwards, you may\n  * invoke the method any number of times, obtaining the invocation result.\n  *\n- * <p>Typically not used directly but via its subclasses\n- * {@link org.springframework.beans.factory.config.MethodInvokingFactoryBean} and\n- * {@link org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean}.\n- *\n  * @author Colin Sampaleanu\n  * @author Juergen Hoeller\n  * @since 19.02.2004",
    "output": "Remove javadoc references to non-accessible subclasses"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n@@ -92,9 +92,9 @@ public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {\n \t * {@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The\n \t * default value is {@code false}.\n \t */\n-\tpublic void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {\n-\t\tthis.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch;\n-\t\tthis.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch;\n+\tpublic void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {\n+\t\tthis.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch;\n+\t\tthis.useSuffixPatternMatch = useRegisteredSuffixPatternMatch ? true : this.useSuffixPatternMatch;\n \t}\n \n \t/**",
    "output": "Fix a typo in RequestMappingHandlerMapping.java"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java\n@@ -33,6 +33,7 @@\n  *\n  * @author Arjen Poutsma\n  * @author Rossen Stoyanchev\n+ * @author Greg Turnquist\n  * @since 3.2\n  */\n public abstract class MockMvcRequestBuilders {\n@@ -70,6 +71,16 @@ public static MockHttpServletRequestBuilder put(String urlTemplate, Object... ur\n \t\treturn new MockHttpServletRequestBuilder(HttpMethod.PUT, urlTemplate, urlVariables);\n \t}\n \n+\t/**\n+\t * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.\n+\t *\n+\t * @param urlTemplate a URL template; the resulting URL will be encoded\n+\t * @param urlVariables zero or more URL variables\n+\t */\n+\tpublic static MockHttpServletRequestBuilder patch(String urlTemplate, Object... urlVariables) {\n+\t\treturn new MockHttpServletRequestBuilder(HttpMethod.PATCH, urlTemplate, urlVariables);\n+\t}\n+\n \t/**\n \t * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.\n \t *",
    "output": "Add method for HTTP PATCH in MockMvcRequestBuilders is short to avoid having to use MockMvcRequestBuilders.requestand instead have a simple patch(url, params...)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n--- a/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n+++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java\n@@ -227,8 +227,12 @@ public Class<?> getFieldType(String field) {\n \t * @return whether the FieldError matches the given field\n \t */\n \tprotected boolean isMatchingFieldError(String field, FieldError fieldError) {\n-\t\treturn (field.equals(fieldError.getField()) ||\n-\t\t\t\t(field.endsWith(\"*\") && fieldError.getField().startsWith(field.substring(0, field.length() - 1))));\n+\t\tif (field.equals(fieldError.getField())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\t// Optimization: use chatAt instead of endsWith (SPR-11304, VESC-165)\n+\t\tint endIndex = field.length() - 1;\n+\t\treturn (field.charAt(endIndex) == '*' && fieldError.getField().startsWith(field.substring(0, endIndex)));\n \t}\n \n ",
    "output": "Add minor optimization to AbstractErrors Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java\n@@ -275,12 +275,9 @@ protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureExcept\n \t\t\twriteFrameInternal(frame);\n \t\t}\n \t\tcatch (Throwable ex) {\n-\t\t\tif (ex instanceof EOFException || ex instanceof SocketException) {\n-\t\t\t\tlogger.warn(\"Client went away. Terminating connection\");\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tlogger.warn(\"Terminating connection after failure to send message: \" + ex.getMessage());\n-\t\t\t}\n+\t\t\tlogger.error(\"Terminating connection after failure to send message to client. \" +\n+\t\t\t\t\t\"This may be because the client has gone away \" +\n+\t\t\t\t\t\"(see https://java.net/jira/browse/SERVLET_SPEC-44)\", ex);\n \t\t\ttry {\n \t\t\t\tdisconnect(CloseStatus.SERVER_ERROR);\n \t\t\t\tclose(CloseStatus.SERVER_ERROR);",
    "output": "Log stack trace on failure to send message to client Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java\n@@ -54,6 +54,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.PathMatcher;\n+import org.springframework.validation.Errors;\n import org.springframework.validation.Validator;\n \n /**\n@@ -243,7 +244,8 @@ protected List<HandlerMethodArgumentResolver> initArgumentResolvers() {\n \t\tresolvers.add(new MessageMethodArgumentResolver());\n \n \t\tresolvers.addAll(getCustomArgumentResolvers());\n-\t\tresolvers.add(new PayloadArgumentResolver(this.messageConverter, this.validator));\n+\t\tresolvers.add(new PayloadArgumentResolver(this.messageConverter,\n+\t\t\t\tthis.validator != null ? this.validator : new NoopValidator()));\n \n \t\treturn resolvers;\n \t}\n@@ -360,4 +362,14 @@ protected AbstractExceptionHandlerMethodResolver createExceptionHandlerMethodRes\n \t\treturn new AnnotationExceptionHandlerMethodResolver(beanType);\n \t}\n \n+\tprivate static final class NoopValidator implements Validator {\n+\t\t@Override\n+\t\tpublic boolean supports(Class<?> clazz) {\n+\t\t\treturn false;\n+\t\t}\n+\t\t@Override\n+\t\tpublic void validate(Object target, Errors errors) {\n+\t\t}\n+\t};\n+\n }",
    "output": "Fix Validator initialization with a no-op implementation Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java\n--- a/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java\n+++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java\n@@ -36,7 +36,9 @@ public class AlternativeJdkIdGenerator implements IdGenerator {\n \n \n \tpublic AlternativeJdkIdGenerator() {\n-\t\tbyte[] seed = new SecureRandom().generateSeed(8);\n+\t\tSecureRandom secureRandom = new SecureRandom();\n+\t\tbyte[] seed = new byte[8];\n+\t\tsecureRandom.nextBytes(seed);\n \t\tthis.random = new Random(new BigInteger(seed).longValue());\n \t}\n ",
    "output": "Fix issue with use of SecureRandom for id generation Switch to using nextBytes as generateSeed doesn't seem to be always supported by all hardware providers. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n@@ -61,12 +61,6 @@ public GenericMessage(T payload) {\n \t */\n \tpublic GenericMessage(T payload, Map<String, Object> headers) {\n \t\tAssert.notNull(payload, \"payload must not be null\");\n-\t\tif (headers == null) {\n-\t\t\theaders = new HashMap<String, Object>();\n-\t\t}\n-\t\telse {\n-\t\t\theaders = new HashMap<String, Object>(headers);\n-\t\t}\n \t\tthis.headers = new MessageHeaders(headers);\n \t\tthis.payload = payload;\n \t}",
    "output": "Remove unnecessary copying of headers in GenericMessage Since the MessageHeaders constructor is makes a copy of the headers and is protected against a null map, there is no need for the same to be done in GenericMessage. Issue"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java\n--- a/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java\n+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -104,7 +104,9 @@ public TransactionAttribute getTransactionAttribute(Method method, Class<?> targ\n \t\t\t}\n \t\t\telse {\n \t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Adding transactional method '\" + method.getName() + \"' with attribute: \" + txAtt);\n+\t\t\t\t\tClass<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass());\n+\t\t\t\t\tlogger.debug(\"Adding transactional method '\" + classToLog.getSimpleName() + \".\" +\n+\t\t\t\t\t\t\tmethod.getName() + \"' with attribute: \" + txAtt);\n \t\t\t\t}\n \t\t\t\tthis.attributeCache.put(cacheKey, txAtt);\n \t\t\t}\n@@ -225,7 +227,7 @@ public boolean equals(Object other) {\n \n \t\t@Override\n \t\tpublic int hashCode() {\n-\t\t\treturn this.method.hashCode() * 29 + (this.targetClass != null ? this.targetClass.hashCode() : 0);\n+\t\t\treturn this.method.hashCode();\n \t\t}\n \t}\n ",
    "output": "Refined logging to include target class for each transactional method name Also simplified cache key 'hashCode' implementation, relying on 'equals' to differentiate between same method on different target classes. Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -81,7 +81,7 @@ public void addScript(Resource script) {\n \t * Set the scripts to execute to populate the database.\n \t * @param scripts the scripts to execute\n \t */\n-\tpublic void setScripts(Resource[] scripts) {\n+\tpublic void setScripts(Resource... scripts) {\n \t\tthis.scripts = Arrays.asList(scripts);\n \t}\n ",
    "output": "ResourceDatabasePopulator's setScripts takes varargs"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -93,7 +93,7 @@ public class HttpHeaders implements MultiValueMap<String, String>, Serializable\n \n \tprivate static final String PRAGMA = \"Pragma\";\n \n-\tprivate static final String UPGARDE = \"Upgrade\";\n+\tprivate static final String UPGRADE = \"Upgrade\";\n \n \n \tprivate static final String[] DATE_FORMATS = new String[] {\n@@ -547,15 +547,15 @@ public String getPragma() {\n \t * @param upgrade the value of the header\n \t */\n \tpublic void setUpgrade(String upgrade) {\n-\t\tset(UPGARDE, upgrade);\n+\t\tset(UPGRADE, upgrade);\n \t}\n \n \t/**\n \t * Returns the value of the {@code Upgrade} header.\n \t * @return the value of the header\n \t */\n \tpublic String getUpgrade() {\n-\t\treturn getFirst(UPGARDE);\n+\t\treturn getFirst(UPGRADE);\n \t}\n \n \t// Date methods",
    "output": "Fix typo Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java\n--- a/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java\n+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,8 +18,6 @@\n \n import java.lang.reflect.Method;\n \n-import org.springframework.cache.interceptor.KeyGenerator;\n-\n /**\n  * Default key generator. Returns {@value #NO_PARAM_KEY} if no\n  * parameters are provided, the parameter itself if only one is given or\n@@ -36,9 +34,10 @@\n  * @author Costin Leau\n  * @author Chris Beams\n  * @since 3.1\n- * @see SimpleKeyGenerator\n- * @see org.springframework.cache.annotation.CachingConfigurer\n+ * @deprecated as of Spring 4.0, in favor of {@link SimpleKeyGenerator}\n+ * or custom {@link KeyGenerator} implementations based on hash codes\n  */\n+@Deprecated\n public class DefaultKeyGenerator implements KeyGenerator {\n \n \tpublic static final int NO_PARAM_KEY = 0;",
    "output": "Deprecate DefaultKeyGenerator Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java\n--- a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java\n+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -1187,7 +1187,11 @@ protected void doRender(View view, Map<String, ?> model, PortletRequest request,\n \tprotected void doDispatch(PortletRequestDispatcher dispatcher, PortletRequest request, MimeResponse response)\n \t\t\tthrows Exception {\n \n-\t\tif (PortletRequest.RESOURCE_PHASE.equals(request.getAttribute(PortletRequest.LIFECYCLE_PHASE))) {\n+\t\t// In general, we prefer a forward for resource responses, in order to have full Servlet API\n+\t\t// support in the target resource (e.g. on uPortal). However, on Liferay, a resource forward\n+\t\t// displays an empty page, so we have to resort to an include there...\n+\t\tif (PortletRequest.RESOURCE_PHASE.equals(request.getAttribute(PortletRequest.LIFECYCLE_PHASE)) &&\n+\t\t\t\t!dispatcher.getClass().getName().startsWith(\"com.liferay\")) {\n \t\t\tdispatcher.forward(request, response);\n \t\t}\n \t\telse {",
    "output": "DispatcherPortlet never uses a resource forward on Liferay Issue"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java\n--- a/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java\n@@ -151,14 +151,14 @@ else if (containerType.startsWith(\"simple\")) {\n \t\tString prefetch = containerEle.getAttribute(PREFETCH_ATTRIBUTE);\n \t\tif (StringUtils.hasText(prefetch)) {\n \t\t\tif (containerType.startsWith(\"default\")) {\n-\t\t\t\tcontainerDef.getPropertyValues().add(\"maxMessagesPerTask\", new Integer(prefetch));\n+\t\t\t\tcontainerDef.getPropertyValues().add(\"maxMessagesPerTask\", prefetch);\n \t\t\t}\n \t\t}\n \n \t\tString receiveTimeout = containerEle.getAttribute(RECEIVE_TIMEOUT_ATTRIBUTE);\n \t\tif (StringUtils.hasText(receiveTimeout)) {\n \t\t\tif (containerType.startsWith(\"default\")) {\n-\t\t\t\tcontainerDef.getPropertyValues().add(\"receiveTimeout\", new Integer(receiveTimeout));\n+\t\t\t\tcontainerDef.getPropertyValues().add(\"receiveTimeout\", receiveTimeout);\n \t\t\t}\n \t\t}\n ",
    "output": "Actually accept String expressions for \"prefetch\" and \"receive-timeout\" in jms namespace Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n--- a/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n@@ -33,6 +33,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.io.support.SpringFactoriesLoader;\n import org.springframework.util.ClassUtils;\n@@ -265,8 +266,9 @@ private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {\n \t\t\t// This call is slow so we do it once.\n \t\t\tPropertyDescriptor[] pds = this.beanInfo.getPropertyDescriptors();\n \t\t\tfor (PropertyDescriptor pd : pds) {\n-\t\t\t\tif (Class.class.equals(beanClass) && \"classLoader\".equals(pd.getName())) {\n-\t\t\t\t\t// Ignore Class.getClassLoader() method - nobody needs to bind to that\n+\t\t\t\tif (Class.class.equals(beanClass) &&\n+\t\t\t\t\t\t(\"classLoader\".equals(pd.getName()) ||  \"protectionDomain\".equals(pd.getName()))) {\n+\t\t\t\t\t// Ignore Class.getClassLoader() and getProtectionDomain() methods - nobody needs to bind to those\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t\tif (logger.isTraceEnabled()) {",
    "output": "Revised exclusion of java.lang.Class properties Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java\n@@ -119,7 +119,6 @@ protected final void doSend(MessageChannel channel, Message<?> message) {\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tprotected final Message<?> doReceive(MessageChannel channel) {\n \n@@ -230,13 +229,14 @@ public boolean send(Message<?> message) {\n \t\tpublic boolean send(Message<?> message, long timeout) {\n \n \t\t\tthis.replyMessage = message;\n+\t\t\tboolean alreadyReceivedReply = this.hasReceived;\n \t\t\tthis.replyLatch.countDown();\n \n \t\t\tString errorDescription = null;\n \t\t\tif (this.hasTimedOut) {\n \t\t\t\terrorDescription = \"Reply message received but the receiving thread has exited due to a timeout\";\n \t\t\t}\n-\t\t\telse if (this.hasReceived) {\n+\t\t\telse if (alreadyReceivedReply) {\n \t\t\t\terrorDescription = \"Reply message received but the receiving thread has already received a reply\";\n \t\t\t}\n \t\t\telse if (this.hasSendFailed) {",
    "output": "Fix possible GenericMsgTemplate race condition Fix a potential race condition with GenericMessagingTemplate's inner TemporaryReplyChannel class. Prior to this commit the `hasReceived` member variable was read after calling `replyLatch.countDown`. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java\n@@ -28,7 +28,6 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n-import org.apache.commons.logging.Log;\n import org.springframework.beans.BeanUtils;\n import org.springframework.util.Assert;\n import org.springframework.web.util.WebUtils;",
    "output": "Delete unused import in MockAsyncContext"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java b/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java\n--- a/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java\n@@ -47,7 +47,6 @@ public class MBeanServerConnectionFactoryBeanTests extends AbstractMBeanServerTe\n \tpublic void getUrl() {\n \t\tint port = SocketUtils.findAvailableTcpPort(9800, 9900);\n \t\tthis.serviceUrl =  \"service:jmx:jmxmp://localhost:\" + port;\n-\t\tSystem.out.println(port);\n \t}\n \n ",
    "output": "Delete sysout.println call from MBean*Tests"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java\n@@ -165,6 +165,7 @@ private boolean performUpgrade(HttpServletRequest request, HttpServletResponse r\n \n \t\tRequestContext wsRequest = RequestContext.Builder.create().\n \t\t\t\trequestURI(URI.create(wsApp.getPath())).requestPath(wsApp.getPath()).\n+\t\t\t\tuserPrincipal(request.getUserPrincipal()).\n \t\t\t\tconnection(connection).secure(request.isSecure()).build();\n \n \t\tfor (String header : headers.keySet()) {",
    "output": "Add principal in GlassfishRequestUpgradeStrategy"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java\n@@ -107,6 +107,15 @@ public void fromRequestWithForwardedHostAndPortHeader() {\n \t\tassertEquals(443, result.getPort());\n \t}\n \n+\t// SPR-11140\n+\n+\t@Test\n+\tpublic void fromRequestWithForwardedHostMultiValuedHeader() {\n+\t\tthis.request.addHeader(\"X-Forwarded-Host\", \"a.example.org, b.example.org, c.example.org\");\n+\n+\t\tassertEquals(\"a.example.org\", ServletUriComponentsBuilder.fromRequest(this.request).build().getHost());\n+\t}\n+\n \t@Test\n \tpublic void fromContextPath() {\n \t\trequest.setRequestURI(\"/mvc-showcase/data/param\");",
    "output": "Add test case for multivalue x-forwarded host header Issue"
  },
  {
    "input": "diff --git a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n--- a/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n+++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java\n@@ -770,6 +770,7 @@ public void resolveTypeVariableFromTypeWithVariableResolver() throws Exception {\n \t@Test\n \tpublic void resolveTypeWithCustomVariableResolver() throws Exception {\n \t\tVariableResolver variableResolver = mock(VariableResolver.class);\n+\t\tgiven(variableResolver.getSource()).willReturn(this);\n \t\tResolvableType longType = ResolvableType.forClass(Long.class);\n \t\tgiven(variableResolver.resolveVariable((TypeVariable<?>) anyObject())).willReturn(longType);\n ",
    "output": "Fix test following ResolvableType hashcode change"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n@@ -234,6 +234,7 @@ public void afterPropertiesSet() throws CacheException, IOException {\n \t\t\t// Fetch cache region: If none with the given name exists, create one on the fly.\n \t\t\tEhcache rawCache;\n \t\t\tboolean cacheExists = this.cacheManager.cacheExists(cacheName);\n+\n \t\t\tif (cacheExists) {\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(\"Using existing EhCache cache region '\" + cacheName + \"'\");\n@@ -253,6 +254,12 @@ public void afterPropertiesSet() throws CacheException, IOException {\n \t\t\t\t\trawCache.getCacheEventNotificationService().registerListener(listener);\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t\t// Needs to happen after listener registration but before setStatisticsEnabled\n+\t\t\tif (!cacheExists) {\n+\t\t\t\tthis.cacheManager.addCache(rawCache);\n+\t\t\t}\n+\n \t\t\tif (this.statisticsEnabled) {\n \t\t\t\trawCache.setStatisticsEnabled(true);\n \t\t\t}\n@@ -263,9 +270,6 @@ public void afterPropertiesSet() throws CacheException, IOException {\n \t\t\t\trawCache.setDisabled(true);\n \t\t\t}\n \n-\t\t\tif (!cacheExists) {\n-\t\t\t\tthis.cacheManager.addCache(rawCache);\n-\t\t\t}\n \t\t\tEhcache decoratedCache = decorateCache(rawCache);\n \t\t\tif (decoratedCache != rawCache) {\n \t\t\t\tthis.cacheManager.replaceCacheWithDecoratedCache(rawCache, decoratedCache);",
    "output": "EhCacheFactoryBean calls CacheManager.addCache before setStatisticsEnabled: (cherry picked from commit 6ce2eb9)"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/XmlExpectationsHelper.java b/spring-test/src/main/java/org/springframework/test/util/XmlExpectationsHelper.java\n--- a/spring-test/src/main/java/org/springframework/test/util/XmlExpectationsHelper.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/XmlExpectationsHelper.java\n@@ -40,7 +40,6 @@\n  */\n public class XmlExpectationsHelper {\n \n-\n \t/**\n \t * Parse the content as {@link Node} and apply a {@link Matcher}.\n \t */\n@@ -54,8 +53,7 @@ private Document parseXmlString(String xml) throws Exception  {\n \t\tfactory.setNamespaceAware(true);\n \t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();\n \t\tInputSource inputSource = new InputSource(new StringReader(xml));\n-\t\tDocument document = documentBuilder.parse(inputSource);\n-\t\treturn document;\n+\t\treturn documentBuilder.parse(inputSource);\n \t}\n \n \t/**\n@@ -79,7 +77,6 @@ public void assertSource(String content, Matcher<? super Source> matcher) throws\n \t * @see org.springframework.test.web.servlet.result.MockMvcResultMatchers#xpath(String, Map, Object...)\n \t */\n \tpublic void assertXmlEqual(String expected, String actual) throws Exception {\n-\n \t\tXMLUnit.setIgnoreWhitespace(true);\n \t\tXMLUnit.setIgnoreComments(true);\n \t\tXMLUnit.setIgnoreAttributeOrder(true);",
    "output": "Polishing (backported from 3.2.x)"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -690,7 +690,8 @@ public boolean equals(Object obj) {\n \t@Override\n \tpublic int hashCode() {\n \t\tint hashCode = ObjectUtils.nullSafeHashCode(this.type);\n-\t\thashCode = hashCode * 31 + ObjectUtils.nullSafeHashCode(this.variableResolver);\n+\t\thashCode = hashCode * 31 + ObjectUtils.nullSafeHashCode(\n+\t\t\t\tthis.variableResolver == null ? null : this.variableResolver.getSource());\n \t\thashCode = hashCode * 31 + ObjectUtils.nullSafeHashCode(this.componentType);\n \t\treturn hashCode;\n \t}",
    "output": "Fix ResolvableType hashCode generation Fix ResolvableType.hashCodeto use the source of the variable resolver, rather than the resolver itself"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractStandardUpgradeStrategy.java\n@@ -32,6 +32,7 @@\n import org.springframework.http.server.ServerHttpRequest;\n import org.springframework.http.server.ServerHttpResponse;\n import org.springframework.http.server.ServletServerHttpRequest;\n+import org.springframework.util.Assert;\n import org.springframework.web.socket.support.WebSocketExtension;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.adapter.StandardWebSocketHandlerAdapter;\n@@ -64,7 +65,11 @@ public List<WebSocketExtension> getSupportedExtensions(ServerHttpRequest request\n \n \tprotected ServerContainer getContainer(HttpServletRequest request) {\n \t\tServletContext servletContext = request.getServletContext();\n-\t\treturn (ServerContainer) servletContext.getAttribute(\"javax.websocket.server.ServerContainer\");\n+\t\tString attrName = \"javax.websocket.server.ServerContainer\";\n+\t\tServerContainer container = (ServerContainer) servletContext.getAttribute(attrName);\n+\t\tAssert.notNull(container, \"No 'javax.websocket.server.ServerContainer' ServletContext attribute. \" +\n+\t\t\t\t\"Are you running in a Servlet container that supports JSR-356?\");\n+\t\treturn container;\n \t}\n \n \tprotected List<WebSocketExtension> getInstalledExtensions(WebSocketContainer container) {",
    "output": "Add assert AbstractStandardRequestUpgradeStrategy"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java\n@@ -174,7 +174,11 @@ else if (SimpMessageType.MESSAGE.equals(headers.getMessageType())) {\n \t\ttry {\n \t\t\tmessage = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();\n \t\t\tbyte[] bytes = this.stompEncoder.encode((Message<byte[]>) message);\n-\t\t\tsession.sendMessage(new TextMessage(new String(bytes, Charset.forName(\"UTF-8\"))));\n+\n+\t\t\tsynchronized(session) {\n+\t\t\t\tsession.sendMessage(new TextMessage(new String(bytes, Charset.forName(\"UTF-8\"))));\n+\t\t\t}\n+\n \t\t}\n \t\tcatch (Throwable t) {\n \t\t\tsendErrorMessage(session, t);",
    "output": "Fix synchronization issue in StompSubProtocolHandler Two concurrent threads should not send a message on a single WebSocket session at the same time, for example see http://docs.oracle.com/javaee/7/api/javax/websocket/RemoteEndpoint.Basic.html In StompSubProtocolHandler it is quite possible that multiple messages may be broadcast to a single WebSocket client concurrently. This change adds synchronization around the sending of a message to a specific cilent session. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java\n@@ -89,20 +89,20 @@ public AnnotationMBeanExporter mbeanExporter() {\n \n \tprivate void setupDomain(AnnotationMBeanExporter exporter) {\n \t\tString defaultDomain = this.attributes.getString(\"defaultDomain\");\n+\t\tif (defaultDomain != null && this.environment != null) {\n+\t\t\tdefaultDomain = this.environment.resolvePlaceholders(defaultDomain);\n+\t\t}\n \t\tif (StringUtils.hasText(defaultDomain)) {\n-\t\t\tif (this.environment != null) {\n-\t\t\t\tdefaultDomain = this.environment.resolvePlaceholders(defaultDomain);\n-\t\t\t}\n \t\t\texporter.setDefaultDomain(defaultDomain);\n \t\t}\n \t}\n \n \tprivate void setupServer(AnnotationMBeanExporter exporter) {\n \t\tString server = this.attributes.getString(\"server\");\n+\t\tif (server != null && this.environment != null) {\n+\t\t\tserver = this.environment.resolvePlaceholders(server);\n+\t\t}\n \t\tif (StringUtils.hasText(server)) {\n-\t\t\tif (this.environment != null) {\n-\t\t\t\tserver = this.environment.resolvePlaceholders(server);\n-\t\t\t}\n \t\t\texporter.setServer(this.beanFactory.getBean(server, MBeanServer.class));\n \t\t}\n \t\telse {",
    "output": "@EnableMBeanExport supports empty placeholders as well Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/annotation/Rollback.java b/spring-test/src/main/java/org/springframework/test/annotation/Rollback.java\n--- a/spring-test/src/main/java/org/springframework/test/annotation/Rollback.java\n+++ b/spring-test/src/main/java/org/springframework/test/annotation/Rollback.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,23 +17,24 @@\n package org.springframework.test.annotation;\n \n import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n+import static java.lang.annotation.ElementType.*;\n+import static java.lang.annotation.RetentionPolicy.*;\n+\n /**\n- * Test annotation to indicate whether or not the transaction for the annotated\n- * test method should be <em>rolled back</em> after the test method has\n- * completed. If {@code true}, the transaction will be rolled back;\n+ * Test annotation used to indicate whether or not the transaction for the\n+ * annotated test method should be <em>rolled back</em> after the test method\n+ * has completed. If {@code true}, the transaction will be rolled back;\n  * otherwise, the transaction will be committed.\n  *\n  * @author Sam Brannen\n  * @since 2.5\n  */\n @Documented\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.METHOD)\n+@Retention(RUNTIME)\n+@Target({ METHOD, ANNOTATION_TYPE })\n public @interface Rollback {\n \n \t/**",
    "output": "Provide meta-annotation support for @Rollback @Rollback now supports ANNOTATION_TYPE as a target, allowing it to be used as meta-annotation. Note: this change was accidentally omitted from the original commit for . Issue"
  },
  {
    "input": "diff --git a/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/ConfigurableJtaPlatform.java b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/ConfigurableJtaPlatform.java\n--- a/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/ConfigurableJtaPlatform.java\n+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/ConfigurableJtaPlatform.java\n@@ -17,6 +17,7 @@\n package org.springframework.orm.hibernate4;\n \n import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import javax.transaction.Status;\n@@ -136,8 +137,15 @@ public int getCurrentStatus() throws SystemException {\n \n \t@Override\n \tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-\t\tMethod targetMethod = getClass().getMethod(method.getName(), method.getParameterTypes());\n-\t\treturn targetMethod.invoke(this, args);\n+\t\ttry {\n+\t\t\treturn getClass().getMethod(method.getName(), method.getParameterTypes()).invoke(this, args);\n+\t\t}\n+\t\tcatch (InvocationTargetException ex) {\n+\t\t\tthrow ex.getTargetException();\n+\t\t}\n+\t\tcatch (Throwable ex) {\n+\t\t\tthrow new IllegalStateException(\"Failed to delegate to corresponding implementation method\", ex);\n+\t\t}\n \t}\n \n \t/**",
    "output": "Properly handle InvocationTargetException in reflective JtaPlatform implementation"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java b/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n--- a/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/StatusResultMatchers.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -211,7 +211,9 @@ public ResultMatcher isFound() {\n \n \t/**\n \t * Assert the response status code is {@code HttpStatus.MOVED_TEMPORARILY} (302).\n+\t * @see #isFound()\n \t */\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic ResultMatcher isMovedTemporarily() {\n \t\treturn matcher(HttpStatus.MOVED_TEMPORARILY);\n \t}",
    "output": "Suppress deprecation warning in StatusResultMatchers"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n@@ -22,7 +22,6 @@\n \n import org.hibernate.SessionFactory;\n import org.hibernate.exception.ConstraintViolationException;\n-import org.hibernate.exception.GenericJDBCException;\n \n import org.junit.Before;\n import org.junit.Test;",
    "output": "Delete unused package import"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java b/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java\n--- a/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBeanTests.java\n@@ -37,7 +37,7 @@\n  */\n public class MBeanServerConnectionFactoryBeanTests extends AbstractMBeanServerTests {\n \n-\tprivate static final String SERVICE_URL = \"service:jmx:jmxmp://localhost:9876\";\n+\tprivate static final String SERVICE_URL = \"service:jmx:jmxmp://localhost:9878\";\n \n \tprivate JMXServiceURL getServiceUrl() throws MalformedURLException {\n \t\treturn new JMXServiceURL(SERVICE_URL);",
    "output": "Try a different mbean port"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationProcessorPerformanceTests.java b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationProcessorPerformanceTests.java\n--- a/spring-context/src/test/java/org/springframework/context/annotation/AnnotationProcessorPerformanceTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationProcessorPerformanceTests.java\n@@ -139,7 +139,7 @@ public void testPrototypeCreationWithOverriddenAutowiredPropertiesIsFastEnough()\n \t\t}\n \t\tsw.stop();\n \t\t//System.out.println(sw.getTotalTimeMillis());\n-\t\tassertTrue(\"Prototype creation took too long: \" + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000);\n+\t\tassertTrue(\"Prototype creation took too long: \" + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4500);\n \t}\n \n ",
    "output": "Increase performance test timeout"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/package-info.java b/spring-jdbc/src/main/java/org/springframework/jdbc/package-info.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/package-info.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/package-info.java\n@@ -1,3 +1,4 @@\n+\n /**\n  *\n  * The classes in this package make JDBC easier to use and",
    "output": "Put accidentally deleted LF in place"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFish40RequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFish40RequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFish40RequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFish40RequestUpgradeStrategy.java\n@@ -17,11 +17,16 @@\n package org.springframework.web.socket.server.support;\n \n import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.websocket.WebSocketContainer;\n \n import org.glassfish.tyrus.core.EndpointWrapper;\n import org.glassfish.tyrus.spi.SPIEndpoint;\n import org.glassfish.tyrus.websockets.WebSocketApplication;\n import org.springframework.util.ClassUtils;\n+import org.springframework.web.socket.support.WebSocketExtension;\n \n \n /**\n@@ -34,6 +39,14 @@\n  */\n public class GlassFish40RequestUpgradeStrategy extends AbstractGlassFishRequestUpgradeStrategy {\n \n+\tprotected List<WebSocketExtension> getInstalledExtensions(WebSocketContainer container) {\n+\t\ttry {\n+\t\t\treturn super.getInstalledExtensions(container);\n+\t\t}\n+\t\tcatch (UnsupportedOperationException e) {\n+\t\t\treturn new ArrayList<WebSocketExtension>();\n+\t\t}\n+\t}\n \n \tprotected WebSocketApplication createTyrusEndpoint(EndpointWrapper endpoint) {\n \t\ttry {",
    "output": "Handle UnsupportedOperationException from getInstalledExtensions in Glassfish 4.0"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java\n@@ -71,7 +71,7 @@ public final class MessageHeaders implements Map<String, Object>, Serializable {\n \n \tprivate static volatile IdGenerator idGenerator = null;\n \n-\tprivate static volatile IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();\n+\tprivate static final IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();\n \n \t/**\n \t * The key for the Message ID. This is an automatically generated UUID and\n@@ -97,8 +97,7 @@ public final class MessageHeaders implements Map<String, Object>, Serializable {\n \n \tpublic MessageHeaders(Map<String, Object> headers) {\n \t\tthis.headers = (headers != null) ? new HashMap<String, Object>(headers) : new HashMap<String, Object>();\n-\t\tIdGenerator generatorToUse = (idGenerator != null) ? idGenerator : defaultIdGenerator;\n-\t\tthis.headers.put(ID, generatorToUse.generateId());\n+\t\tthis.headers.put(ID, ((idGenerator != null) ? idGenerator : defaultIdGenerator).generateId());\n \t\tthis.headers.put(TIMESTAMP, new Long(System.currentTimeMillis()));\n \t}\n ",
    "output": "Use final keyword in MessageHeaders"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -206,16 +206,16 @@ public abstract class AbstractApplicationContext extends DefaultResourceLoader\n \t * Create a new AbstractApplicationContext with no parent.\n \t */\n \tpublic AbstractApplicationContext() {\n-\t\tthis(null);\n+\t\tthis.resourcePatternResolver = getResourcePatternResolver();\n \t}\n \n \t/**\n \t * Create a new AbstractApplicationContext with the given parent context.\n \t * @param parent the parent context\n \t */\n \tpublic AbstractApplicationContext(ApplicationContext parent) {\n-\t\tthis.parent = parent;\n-\t\tthis.resourcePatternResolver = getResourcePatternResolver();\n+\t\tthis();\n+\t\tsetParent(parent);\n \t}\n \n ",
    "output": "Perform setParent's Environment merging for ClassPathXmlApplicationContext etc constructors with parent argument as well Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/i18n/SimpleLocaleContext.java b/spring-context/src/main/java/org/springframework/context/i18n/SimpleLocaleContext.java\n--- a/spring-context/src/main/java/org/springframework/context/i18n/SimpleLocaleContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/i18n/SimpleLocaleContext.java\n@@ -49,7 +49,7 @@ public Locale getLocale() {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn this.locale.toString();\n+\t\treturn (this.locale != null ? this.locale.toString() : \"-\");\n \t}\n \n }\n\ndiff --git a/spring-context/src/main/java/org/springframework/context/i18n/SimpleTimeZoneAwareLocaleContext.java b/spring-context/src/main/java/org/springframework/context/i18n/SimpleTimeZoneAwareLocaleContext.java\n--- a/spring-context/src/main/java/org/springframework/context/i18n/SimpleTimeZoneAwareLocaleContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/i18n/SimpleTimeZoneAwareLocaleContext.java\n@@ -27,6 +27,7 @@\n  * a Locale but no TimeZone.\n  *\n  * @author Juergen Hoeller\n+ * @author Nicholas Williams\n  * @since 4.0\n  * @see LocaleContextHolder#setLocaleContext\n  * @see LocaleContextHolder#getTimeZone()\n@@ -55,7 +56,7 @@ public TimeZone getTimeZone() {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn super.toString() + \" \" + this.timeZone.toString();\n+\t\treturn super.toString() + \" \" + (this.timeZone != null ? this.timeZone.toString() : \"-\");\n \t}\n \n }",
    "output": "Avoid potential NPE in toStringIssue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -80,7 +80,6 @@\n import org.springframework.core.JdkVersion;\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.core.io.Resource;\n-import org.springframework.core.io.ResourceLoader;\n import org.springframework.oxm.GenericMarshaller;\n import org.springframework.oxm.GenericUnmarshaller;\n import org.springframework.oxm.MarshallingFailureException;\n@@ -168,8 +167,6 @@ public class Jaxb2Marshaller implements MimeMarshaller, MimeUnmarshaller, Generi\n \n \tprivate ClassLoader beanClassLoader;\n \n-\tprivate ResourceLoader resourceLoader;\n-\n \tprivate final Object jaxbContextMonitor = new Object();\n \n \tprivate volatile JAXBContext jaxbContext;",
    "output": "Remove unused resourceLoader field in Jaxb2Marshaller"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/SimpAnnotationMethodIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/SimpAnnotationMethodIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/SimpAnnotationMethodIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/SimpAnnotationMethodIntegrationTests.java\n@@ -138,7 +138,6 @@ public void sendMessageToBrokerAndReceiveReplyViaTopic() throws Exception {\n \t}\n \n \n-\t@SuppressWarnings(\"unused\")\n \t@IntegrationTestController\n \tstatic class SimpleController {\n \n@@ -161,7 +160,6 @@ public void handleException(IllegalArgumentException ex) {\n \n \t}\n \n-\t@SuppressWarnings(\"unused\")\n \t@IntegrationTestController\n \tstatic class IncrementController {\n ",
    "output": "Delete unnecessary @SuppressWarnings(\"unused\")"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n--- a/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java\n@@ -279,7 +279,7 @@ protected AntPathStringMatcher getStringMatcher(String pattern) {\n \t\t}\n \t\tif (matcher == null) {\n \t\t\tmatcher = new AntPathStringMatcher(pattern);\n-\t\t\tif (cachePatterns == null && this.stringMatcherCache.size() == CACHE_TURNOFF_THRESHOLD) {\n+\t\t\tif (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {\n \t\t\t\t// Try to adapt to the runtime situation that we're encountering:\n \t\t\t\t// There are obviously too many different paths coming in here...\n \t\t\t\t// So let's turn off the cache since the patterns are unlikely to be reoccurring.",
    "output": "Refined check for cache turnoff threshold Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/web/MetaAnnotationConfigWacTests.java b/spring-test/src/test/java/org/springframework/test/context/web/MetaAnnotationConfigWacTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/web/MetaAnnotationConfigWacTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/web/MetaAnnotationConfigWacTests.java\n@@ -33,10 +33,10 @@\n  *\n  * @author Sam Brannen\n  * @since 4.0\n- * @see WebTests\n+ * @see WebTest\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n-@WebTests\n+@WebTest\n public class MetaAnnotationConfigWacTests {\n \n \t@Autowired\n\ndiff --git a/spring-test/src/test/java/org/springframework/test/context/web/WebTest.java b/spring-test/src/test/java/org/springframework/test/context/web/WebTest.java\n--- a/spring-test/src/test/java/org/springframework/test/context/web/WebTest.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/web/WebTest.java\n@@ -33,7 +33,7 @@\n @WebAppConfiguration\n @ContextConfiguration\n @Retention(RetentionPolicy.RUNTIME)\n-public @interface WebTests {\n+public @interface WebTest {\n \n \t@Configuration\n \tstatic class Config {",
    "output": "Rename @WebTests to @WebTest @WebTests has been renamed to @WebTest so that the Gradle build does not attempt to run it as a JUnit test"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -271,7 +271,7 @@ private static UriComponents applyContributors(UriComponentsBuilder builder, Met\n \t\t\tcontributor = defaultUriComponentsContributor;\n \t\t}\n \n-\t\tint paramCount = method.getParameterCount();\n+\t\tint paramCount = method.getParameterTypes().length;\n \t\tint argCount = args.length;\n \n \t\tAssert.isTrue(paramCount == argCount,  \"Number of method parameters \" + paramCount +",
    "output": "Replace use of jdk 1.8 api"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/ResolvableType.java b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n--- a/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java\n@@ -365,16 +365,18 @@ public boolean hasUnresolvableGenerics() {\n \t\t\t}\n \t\t}\n \t\tClass<?> resolved = resolve();\n-\t\tType[] ifcs = resolved.getGenericInterfaces();\n-\t\tfor (Type ifc : ifcs) {\n-\t\t\tif (ifc instanceof Class) {\n-\t\t\t\tif (forClass((Class) ifc).hasGenerics()) {\n-\t\t\t\t\treturn true;\n+\t\tif (resolved != null) {\n+\t\t\tType[] ifcs = resolved.getGenericInterfaces();\n+\t\t\tfor (Type ifc : ifcs) {\n+\t\t\t\tif (ifc instanceof Class) {\n+\t\t\t\t\tif (forClass((Class) ifc).hasGenerics()) {\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t}\n-\t\tif (resolved.getGenericSuperclass() != null) {\n-\t\t\treturn getSuperType().hasUnresolvableGenerics();\n+\t\t\tif (resolved.getGenericSuperclass() != null) {\n+\t\t\t\treturn getSuperType().hasUnresolvableGenerics();\n+\t\t\t}\n \t\t}\n \t\treturn false;\n \t}",
    "output": "Avoid NPE in hasUnresolvableGenericsIssue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -98,8 +98,8 @@ public static void setField(Field field, Object target, Object value) {\n \t\t}\n \t\tcatch (IllegalAccessException ex) {\n \t\t\thandleReflectionException(ex);\n-\t\t\tthrow new IllegalStateException(\"Unexpected reflection exception - \" + ex.getClass().getName() + \": \"\n-\t\t\t\t\t+ ex.getMessage());\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\"Unexpected reflection exception - \" + ex.getClass().getName() + \": \" + ex.getMessage());\n \t\t}\n \t}\n \n@@ -153,8 +153,8 @@ public static Method findMethod(Class<?> clazz, String name, Class<?>... paramTy\n \t\twhile (searchType != null) {\n \t\t\tMethod[] methods = (searchType.isInterface() ? searchType.getMethods() : searchType.getDeclaredMethods());\n \t\t\tfor (Method method : methods) {\n-\t\t\t\tif (name.equals(method.getName())\n-\t\t\t\t\t\t&& (paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {\n+\t\t\t\tif (name.equals(method.getName()) &&\n+\t\t\t\t\t\t(paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {\n \t\t\t\t\treturn method;\n \t\t\t\t}\n \t\t\t}",
    "output": "Polishing (cherry picked from commit 6021822)"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/tests/sample/beans/DerivedTestBean.java b/spring-beans/src/test/java/org/springframework/tests/sample/beans/DerivedTestBean.java\n--- a/spring-beans/src/test/java/org/springframework/tests/sample/beans/DerivedTestBean.java\n+++ b/spring-beans/src/test/java/org/springframework/tests/sample/beans/DerivedTestBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -71,6 +71,11 @@ public void setSpouseRef(String name) {\n \t\tsetSpouse(new TestBean(name));\n \t}\n \n+\t@Override\n+\tpublic TestBean getSpouse() {\n+\t\treturn (TestBean) super.getSpouse();\n+\t}\n+\n \n \tpublic void initialize() {\n \t\tthis.initialized = true;",
    "output": "Sneaked in test for covariant return type narrowing in a getter method Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java\n@@ -40,6 +40,8 @@\n import org.springframework.web.context.support.WebApplicationContextUtils;\n import org.springframework.web.method.annotation.RequestParamMethodArgumentResolver;\n import org.springframework.web.method.support.CompositeUriComponentsContributor;\n+import org.springframework.web.servlet.DispatcherServlet;\n+import org.springframework.web.servlet.support.RequestContextUtils;\n import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n@@ -297,10 +299,10 @@ protected static CompositeUriComponentsContributor getConfiguredUriComponentsCon\n \t\t\tlogger.debug(\"Request bound to current thread is not an HttpServletRequest\");\n \t\t\treturn null;\n \t\t}\n-\t\tServletContext servletContext = request.getServletContext();\n-\t\tWebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(servletContext);\n+\t\tWebApplicationContext wac = (WebApplicationContext) request.getAttribute(\n+\t\t\t\tDispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n \t\tif (wac == null) {\n-\t\t\tlogger.debug(\"No WebApplicationContext found: no ContextLoaderListener registered?\");\n+\t\t\tlogger.debug(\"No WebApplicationContext found: not in a DispatcherServlet request?\");\n \t\t\treturn null;\n \t\t}\n \t\ttry {",
    "output": "Upgrade MvcUriComponentsBuilder to use DispServlet WAC Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/StringUtils.java b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/StringUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java\n@@ -688,7 +688,7 @@ public static Locale parseLocaleString(String localeString) {\n \t\tvalidateLocalePart(language);\n \t\tvalidateLocalePart(country);\n \t\tString variant = \"\";\n-\t\tif (parts.length >= 2) {\n+\t\tif (parts.length > 2) {\n \t\t\t// There is definitely a variant, and it is everything after the country\n \t\t\t// code sans the separator between the country code and the variant.\n \t\t\tint endIndexOfCountryCode = localeString.lastIndexOf(country) + country.length();",
    "output": "Fix off-by-one error in parseLocaleString Fix off-by-one error in StringUtils.parseLocaleStringIssue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n@@ -260,7 +260,7 @@ else if (registry instanceof GenericApplicationContext) {\n \t\t}\n \t}\n \n-\tstatic void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) {\n+\tpublic static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) {\n \t\tprocessCommonDefinitionAnnotations(abd, abd.getMetadata());\n \t}\n ",
    "output": "Make processCommonDefinitionAnnotations(AnnotatedBeanDefinition) public Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -19,6 +19,8 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.reflect.Method;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n@@ -161,8 +163,8 @@ public void testDefaultConfig() throws Exception {\n \t\t\ttestController.testBind(now, null, null);\n \t\t\tMvcUrls mvcUrls = this.appContext.getBean(MvcUrls.class);\n \t\t\tUriComponents uriComponents = mvcUrls.linkToMethodOn(testController);\n-\n-\t\t\tassertEquals(\"http://localhost/?date=2013-10-21\", uriComponents.toUriString());\n+\t\t\tDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\t\t\tassertEquals(\"http://localhost/?date=\" + dateFormat.format(now), uriComponents.toUriString());\n \t\t}\n \t\tfinally {\n \t\t\tRequestContextHolder.resetRequestAttributes();",
    "output": "Fix broken test in MvcNamespaceTests The testDefaultConfigmethod in MvcNamespaceTests creates a new Datein its test fixture but then performs an assertion against a hard coded data string of \"2013-10-21\". This test therefore only passed yesterday, on October 21, 2013. This commit addresses this by changing the hard coded date string to one based on the current date. Issue: ,"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/common/LiteralExpression.java b/spring-expression/src/main/java/org/springframework/expression/common/LiteralExpression.java\n--- a/spring-expression/src/main/java/org/springframework/expression/common/LiteralExpression.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/common/LiteralExpression.java\n@@ -27,7 +27,7 @@\n  * string literal. It is used with CompositeStringExpression when representing a template\n  * expression which is made up of pieces - some being real expressions to be handled by an\n  * EL implementation like Spel, and some being just textual elements.\n- * \n+ *\n  * @author Andy Clement\n  * @since 3.0\n  */\n@@ -118,7 +118,7 @@ public String getValue(EvaluationContext context, Object rootObject) throws Eval\n \t@Override\n \tpublic <T> T getValue(EvaluationContext context, Object rootObject, Class<T> desiredResultType) throws EvaluationException {\n \t\tObject value = getValue(context, rootObject);\n-\t\treturn ExpressionUtils.convertTypedValue(null, new TypedValue(value), desiredResultType);\n+\t\treturn ExpressionUtils.convertTypedValue(context, new TypedValue(value), desiredResultType);\n \t}\n \n \t@Override",
    "output": "Propagate EvaluationContext from LiteralExpression Update getValue(EvaluationContext context, Object rootObject, Class<T> desiredResultType) to propagate the EvaluationContext to ExpressionUtils. Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n--- a/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java\n@@ -595,7 +595,7 @@ public void expectAvailabilityStatusChanges(Boolean... expected) {\n \n \t\tpublic void awaitAndAssert() throws InterruptedException {\n \t\t\tsynchronized(this.monitor) {\n-\t\t\t\tlong endTime = System.currentTimeMillis() + 5000;\n+\t\t\t\tlong endTime = System.currentTimeMillis() + 6000;\n \t\t\t\twhile (this.expected.size() != this.actual.size() && System.currentTimeMillis() < endTime) {\n \t\t\t\t\tthis.monitor.wait(500);\n \t\t\t\t}",
    "output": "Increase timeout for Stomp integration tests"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java\n@@ -82,9 +82,15 @@ public T getPayload() {\n \t}\n \n \tpublic String toString() {\n-\t\tStringBuilder sb = new StringBuilder(\"[Headers=\" + this.headers + \"]\");\n-\t\tsb.append(\"[Payload \").append(this.payload.getClass().getSimpleName());\n-\t\tsb.append(\" content=\").append(this.payload).append(\"]\");\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tif (byte[].class.equals(this.payload.getClass())) {\n+\t\t\tsb.append(\"[Payload byte[\").append(((byte[]) this.payload).length).append(\"]]\");\n+\t\t}\n+\t\telse {\n+\t\t\tsb.append(\"[Payload \").append(this.payload.getClass().getSimpleName());\n+\t\t\tsb.append(\" content=\").append(this.payload).append(\"]\");\n+\t\t}\n+\t\tsb.append(\"[Headers=\" + this.headers + \"]\");\n \t\treturn sb.toString();\n \t}\n ",
    "output": "Improve GenericMessage.toStringRestore pringing the payload first and headers second as it has been in SI but also handle specifically the case where the body is a byte array to minimize unnecessary \"noise\" that causes otherwise for STOMP msgs"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java\n@@ -90,7 +90,8 @@ public <T> T convertSendAndReceive(D destination, Object request, Class<T> targe\n \tpublic <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers,\n \t\t\tClass<T> targetClass) {\n \n-\t\treturn this.convertSendAndReceive(destination, request, null);\n+\t\tMessagePostProcessor postProcessor = null;\n+\t\treturn this.convertSendAndReceive(destination, request, headers, targetClass, postProcessor);\n \t}\n \n \t@Override",
    "output": "Fix issue in AbstractMessagingTemplate"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n--- a/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n+++ b/spring-core/src/main/java/org/springframework/core/StandardReflectionParameterNameDiscoverer.java\n@@ -20,8 +20,6 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Parameter;\n \n-import org.springframework.util.ClassUtils;\n-\n /**\n  * {@link ParameterNameDiscoverer} implementation which uses JDK 8's\n  * reflection facilities for introspecting parameter names.",
    "output": "Delete unused import in StdReflParamNameDscoverer"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -231,7 +231,9 @@ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, S\n \t\t\t\tsqlType = ps.getParameterMetaData().getParameterType(paramIndex);\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n-\t\t\t\tlogger.debug(\"JDBC 3.0 getParameterType call not supported\", ex);\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"JDBC 3.0 getParameterType call not supported: \" + ex);\n+\t\t\t\t}\n \t\t\t\t// JDBC driver not compliant with JDBC 3.0\n \t\t\t\t// -> proceed with database-specific checks\n \t\t\t\ttry {",
    "output": "Reduced \"getParameterType call not supported\" log message to single line Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n@@ -239,15 +239,15 @@ protected void registerDefaultFilters() {\n \t\ttry {\n \t\t\tthis.includeFilters.add(new AnnotationTypeFilter(\n \t\t\t\t\t((Class<? extends Annotation>) cl.loadClass(\"javax.annotation.ManagedBean\")), false));\n-\t\t\tlogger.info(\"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\");\n+\t\t\tlogger.debug(\"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\");\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\t// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.\n \t\t}\n \t\ttry {\n \t\t\tthis.includeFilters.add(new AnnotationTypeFilter(\n \t\t\t\t\t((Class<? extends Annotation>) cl.loadClass(\"javax.inject.Named\")), false));\n-\t\t\tlogger.info(\"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\");\n+\t\t\tlogger.debug(\"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\");\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\t// JSR-330 API not available - simply skip.",
    "output": "Change detection logging from info to debug Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java\n--- a/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java\n+++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java\n@@ -202,18 +202,18 @@ protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) thr\n \t */\n \tprotected RemoteAccessException convertHttpInvokerAccessException(Throwable ex) {\n \t\tif (ex instanceof ConnectException) {\n-\t\t\tthrow new RemoteConnectFailureException(\n+\t\t\treturn new RemoteConnectFailureException(\n \t\t\t\t\t\"Could not connect to HTTP invoker remote service at [\" + getServiceUrl() + \"]\", ex);\n \t\t}\n-\t\telse if (ex instanceof ClassNotFoundException || ex instanceof NoClassDefFoundError ||\n+\n+\t\tif (ex instanceof ClassNotFoundException || ex instanceof NoClassDefFoundError ||\n \t\t\t\tex instanceof InvalidClassException) {\n-\t\t\tthrow new RemoteAccessException(\n+\t\t\treturn new RemoteAccessException(\n \t\t\t\t\t\"Could not deserialize result from HTTP invoker remote service [\" + getServiceUrl() + \"]\", ex);\n \t\t}\n-\t\telse {\n-\t\t\tthrow new RemoteAccessException(\n-\t\t\t\t\"Could not access HTTP invoker remote service at [\" + getServiceUrl() + \"]\", ex);\n-\t\t}\n+\n+\t\treturn new RemoteAccessException(\n+\t\t\t\t\t\"Could not access HTTP invoker remote service at [\" + getServiceUrl() + \"]\", ex);\n \t}\n \n }",
    "output": "Return rather than throw converted http exception Fix HttpInvokerClientInterceptor.convertHttpInvokerAccessException to return the translated exception rather than throwing it. This brings the method implementation in line with the Java Doc and the obvious original intent. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java\n@@ -236,7 +236,9 @@ protected RequestCondition<?> getCustomMethodCondition(Method method) {\n \t/**\n \t * Created a RequestMappingInfo from a RequestMapping annotation.\n \t */\n-\tprivate RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition<?> customCondition) {\n+\tprotected RequestMappingInfo createRequestMappingInfo(RequestMapping annotation,\n+\t\t\tRequestCondition<?> customCondition) {\n+\n \t\tString[] patterns = resolveEmbeddedValuesInPatterns(annotation.value());\n \t\treturn new RequestMappingInfo(\n \t\t\t\tnew PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),",
    "output": "Make method in RequestMappingHandlerMapping protected Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java\n@@ -438,7 +438,12 @@ public boolean isReady() {\n \n \t\tpublic void setDisconnected() {\n \t\t\tthis.readyConnection.set(null);\n-\t\t\tthis.connection = null;\n+\n+\t\t\tTcpConnection<Message<byte[]>, Message<byte[]>> localConnection = this.connection;\n+\t\t\tif (localConnection != null) {\n+\t\t\t\tlocalConnection.close();\n+\t\t\t\tthis.connection = null;\n+\t\t\t}\n \t\t}\n \n \t\t@Override\n@@ -499,7 +504,10 @@ protected void connected(StompHeaderAccessor headers, final StompConnection stom\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\tstompConnection.connection.send(MessageBuilder.withPayload(heartbeatPayload).build());\n+\t\t\t\t\t\tTcpConnection<Message<byte[]>, Message<byte[]>> connection = stompConnection.connection;\n+\t\t\t\t\t\tif (connection != null) {\n+\t\t\t\t\t\t\tconnection.send(MessageBuilder.withPayload(heartbeatPayload).build());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t});",
    "output": "Improve handling of missed heartbeats Previously, when a broker heartbeat was mnissed, the STOMP connection would be left in a semi-disconnected state such that, for example, the read and write idle callbacks would still be active, even though the underlying TCP connection had been nulled out. As part of disconnecting the STOMP connection, this commit closes the underlying TCP connection when a heartbeat's missed which cancels the read and write idle callbacks. It also now copes with the underlying TCP connection being null when sending a heartbeat to the broker. This protects again a race condition between the write idle callback being fired, such that a heartbeat needs to be sent, and the connection being nulled out due to it being closed"
  },
  {
    "input": "diff --git a/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java b/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java\n--- a/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java\n+++ b/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java\n@@ -43,6 +43,7 @@\n import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;\n import com.thoughtworks.xstream.io.json.JsonWriter;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.w3c.dom.Document;\n@@ -228,6 +229,7 @@ public void useAttributesForClassStringListMap() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore(\"Fails on JDK 8 build 108\")\n \tpublic void aliasesByTypeStringClassMap() throws Exception {\n \t\tMap<String, Class<?>> aliases = new HashMap<String, Class<?>>();\n \t\taliases.put(\"flight\", Flight.class);\n@@ -241,6 +243,7 @@ public void aliasesByTypeStringClassMap() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore(\"Fails on JDK 8 build 108\")\n \tpublic void aliasesByTypeStringStringMap() throws Exception {\n \t\tMap<String, String> aliases = new HashMap<String, String>();\n \t\taliases.put(\"flight\", Flight.class.getName());",
    "output": "Ignore setAliasesByType tests since they fail on OpenJDK 8 b108 Probably an XStream-internal problem: fails to marshal the flightNumber element"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java\n@@ -379,7 +379,7 @@ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters)\n \t\t\t\t\telse {\n \t\t\t\t\t\tString returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?\n \t\t\t\t\t\t\t\tparNameToUse : getFunctionReturnName());\n-\t\t\t\t\t\tworkParameters.add(new SqlOutParameter(returnNameToUse, meta.getSqlType()));\n+\t\t\t\t\t\tworkParameters.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta));\n \t\t\t\t\t\tif (isFunction()) {\n \t\t\t\t\t\t\tsetFunctionReturnName(returnNameToUse);\n \t\t\t\t\t\t\toutParameterNames.add(returnNameToUse);",
    "output": "Allow cursor returns from SQL functions Update CallMetaDataContext to use the metaDataProvider createDefaultOutParameter method when creating a SqlOutParameter as a result of a SQL function call. This change allows Spring to support Oracle cursor types when returned from functions. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java\n@@ -24,7 +24,7 @@\n import org.apache.catalina.startup.Tomcat;\n import org.apache.coyote.http11.Http11NioProtocol;\n import org.apache.tomcat.util.descriptor.web.ApplicationListener;\n-import org.apache.tomcat.websocket.server.WsListener;\n+import org.apache.tomcat.websocket.server.WsContextListener;\n import org.springframework.util.SocketUtils;\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.servlet.DispatcherServlet;\n@@ -38,7 +38,7 @@\n public class TomcatWebSocketTestServer implements WebSocketTestServer {\n \n \tprivate static final ApplicationListener WS_APPLICATION_LISTENER =\n-\t\t\tnew ApplicationListener(WsListener.class.getName(), false);\n+\t\t\tnew ApplicationListener(WsContextListener.class.getName(), false);\n \n \tprivate final Tomcat tomcatServer;\n ",
    "output": "Switch spring-websocket/messaging to Tomcat 8 RC3"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java\n@@ -139,7 +139,7 @@ public enum SpelMessage {\n \t\t\t\"''{1}'' and ''{2}''\"),\n \n \tPROBLEM_LOCATING_METHOD(Kind.ERROR, 1031,\n-\t\t\t\"Problem locating method {0} cannot on type {1}\"),\n+\t\t\t\"Problem locating method {0} on type {1}\"),\n \n \tSETVALUE_NOT_SUPPORTED(\tKind.ERROR, 1032,\n \t\t\t\"setValue(ExpressionState, Object) not supported for ''{0}''\"),",
    "output": "Fix \"Problem locating method\" SpEL error message Replace \"Problem locating method {0} cannot on type {1}\" with \"Problem locating method {0} on type {1}\". Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n--- a/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java\n@@ -231,7 +231,8 @@ public void afterPropertiesSet() throws CacheException, IOException {\n \n \t\t// Fetch cache region: If none with the given name exists, create one on the fly.\n \t\tEhcache rawCache;\n-\t\tif (this.cacheManager.cacheExists(cacheName)) {\n+\t\tboolean cacheExists = this.cacheManager.cacheExists(cacheName);\n+\t\tif (cacheExists) {\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"Using existing EhCache cache region '\" + cacheName + \"'\");\n \t\t\t}\n@@ -243,7 +244,6 @@ public void afterPropertiesSet() throws CacheException, IOException {\n \t\t\t}\n \t\t\trawCache = createCache();\n \t\t\trawCache.setBootstrapCacheLoader(this.bootstrapCacheLoader);\n-\t\t\tthis.cacheManager.addCache(rawCache);\n \t\t}\n \n \t\tif (this.cacheEventListeners != null) {\n@@ -261,7 +261,9 @@ public void afterPropertiesSet() throws CacheException, IOException {\n \t\t\trawCache.setDisabled(true);\n \t\t}\n \n-\t\t// Decorate cache if necessary.\n+\t\tif (!cacheExists) {\n+\t\t\tthis.cacheManager.addCache(rawCache);\n+\t\t}\n \t\tEhcache decoratedCache = decorateCache(rawCache);\n \t\tif (decoratedCache != rawCache) {\n \t\t\tthis.cacheManager.replaceCacheWithDecoratedCache(rawCache, decoratedCache);",
    "output": "EhCacheFactoryBean calls addCache after listener registration Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java\n@@ -109,7 +109,7 @@ private TypedValue getValueInternal(EvaluationContext evaluationContext,\n \t\t\t\tthrowSimpleExceptionIfPossible(value, ae);\n \n \t\t\t\t// At this point we know it wasn't a user problem so worth a retry if a\n-\t\t\t\t// better candidate can be found\n+\t\t\t\t// better candidate can be found.\n \t\t\t\tthis.cachedExecutor = null;\n \t\t\t}\n \t\t}\n@@ -217,9 +217,7 @@ private void throwSimpleExceptionIfPossible(Object value, AccessException ae) {\n \t\t\t}\n \t\t\tthrow new ExpressionInvocationTargetException(getStartPosition(),\n \t\t\t\t\t\"A problem occurred when trying to execute method '\" + this.name +\n-\t\t\t\t\t\"' on object of type '\" +\n-\t\t\t\t\tvalue.getClass().getName() + \"'\",\n-\t\t\t\t\trootCause);\n+\t\t\t\t\t\"' on object of type [\" + value.getClass().getName() + \"]\", rootCause);\n \t\t}\n \t}\n ",
    "output": "Polished exception message (cherry picked from commit 6110919)"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java\n@@ -185,10 +185,10 @@ protected void handleConnect(WebSocketSession session, Message<?> message) throw\n \n \t\tSet<String> acceptVersions = connectHeaders.getAcceptVersion();\n \t\tif (acceptVersions.contains(\"1.2\")) {\n-\t\t\tconnectedHeaders.setAcceptVersion(\"1.2\");\n+\t\t\tconnectedHeaders.setVersion(\"1.2\");\n \t\t}\n \t\telse if (acceptVersions.contains(\"1.1\")) {\n-\t\t\tconnectedHeaders.setAcceptVersion(\"1.1\");\n+\t\t\tconnectedHeaders.setVersion(\"1.1\");\n \t\t}\n \t\telse if (acceptVersions.isEmpty()) {\n \t\t\t// 1.0",
    "output": "Use correct header for version in CONNECTED frame Previously, the negotiated version was included in the CONNECTED frame using the accept-version header. This is incorrect. The version header should be used"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/Profile.java b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/Profile.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.context.annotation;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -75,11 +76,12 @@\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.TYPE, ElementType.METHOD})\n+@Documented\n @Conditional(ProfileCondition.class)\n public @interface Profile {\n \n \t/**\n-\t * The set of profiles for which this component should be registered.\n+\t * The set of profiles for which the annotated component should be registered.\n \t */\n \tString[] value();\n ",
    "output": "Marked @Profile as @Documented"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java\n@@ -166,6 +166,16 @@ public BeanDefinitionBuilder setFactoryMethod(String factoryMethod) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Add an indexed constructor arg value. The current index is tracked internally\n+\t * and all additions are at the present point.\n+\t * @deprecated since Spring 2.5, in favor of {@link #addConstructorArgValue}\n+\t */\n+\t@Deprecated\n+\tpublic BeanDefinitionBuilder addConstructorArg(Object value) {\n+\t\treturn addConstructorArgValue(value);\n+\t}\n+\n \t/**\n \t * Add an indexed constructor arg value. The current index is tracked internally\n \t * and all additions are at the present point.",
    "output": "Reintroducing deprecated addConstructorArg variant Still used by Spring Security 2.0.x's NamespaceHandler etc"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java\n@@ -173,16 +173,16 @@ public void afterPropertiesSet() {\n \n \t\tinitHandlerMethods();\n \n-\t\t// Annotation-based argument resolution\n-\t\tthis.argumentResolvers.addResolver(new MessageBodyMethodArgumentResolver(this.messageConverter));\n-\n \t\t// Type-based argument resolution\n \t\tthis.argumentResolvers.addResolver(new PrincipalMethodArgumentResolver());\n \t\tthis.argumentResolvers.addResolver(new MessageMethodArgumentResolver());\n \n \t\t// custom arguments\n \t\tthis.argumentResolvers.addResolvers(this.customArgumentResolvers);\n \n+\t\t// catch-all argument resolver\n+\t\tthis.argumentResolvers.addResolver(new MessageBodyMethodArgumentResolver(this.messageConverter));\n+\n \t\t// Annotation-based return value types\n \t\tthis.returnValueHandlers.addHandler(new ReplyToMethodReturnValueHandler(this.dispatchMessagingTemplate));\n \t\tthis.returnValueHandlers.addHandler(new SubscriptionMethodReturnValueHandler(this.webSocketSessionMessagingTemplate));",
    "output": "Fix bug with the order of messaging arg resolvers"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n@@ -69,6 +69,8 @@ public JettyRequestUpgradeStrategy() {\n \t * {@link WebSocketServerFactory#getPolicy()}.\n \t */\n \tpublic JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {\n+\t\tAssert.notNull(factory, \"WebSocketServerFactory is required\");\n+\t\tthis.factory = factory;\n \t\tthis.factory.setCreator(new WebSocketCreator() {\n \t\t\t@Override\n \t\t\tpublic Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {",
    "output": "Fix minor issue in JettyRequestUpgradeStrategy Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java b/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java\n--- a/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java\n+++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java\n@@ -79,8 +79,8 @@ public void getEndpointInstanceSingletonByType() throws Exception {\n \n \t@Test\n \tpublic void getEndpointInstanceSingletonByComponentName() throws Exception {\n-\t\tAlternativeEchoEndpoint expected = this.webAppContext.getBean(AlternativeEchoEndpoint.class);\n-\t\tAlternativeEchoEndpoint actual = this.configurator.getEndpointInstance(AlternativeEchoEndpoint.class);\n+\t\tAnotherEchoEndpoint expected = this.webAppContext.getBean(AnotherEchoEndpoint.class);\n+\t\tAnotherEchoEndpoint actual = this.configurator.getEndpointInstance(AnotherEchoEndpoint.class);\n \t\tassertSame(expected, actual);\n \t}\n \n@@ -115,14 +115,14 @@ public void onOpen(Session session, EndpointConfig config) {\n \t\t}\n \t}\n \n-\t@Component(\"echoEndpoint\")\n-\tprivate static class AlternativeEchoEndpoint extends Endpoint {\n+\t@Component(\"myEchoEndpoint\")\n+\tprivate static class AnotherEchoEndpoint extends Endpoint {\n \n \t\t@SuppressWarnings(\"unused\")\n \t\tprivate final EchoService service;\n \n \t\t@Autowired\n-\t\tpublic AlternativeEchoEndpoint(EchoService service) {\n+\t\tpublic AnotherEchoEndpoint(EchoService service) {\n \t\t\tthis.service = service;\n \t\t}\n ",
    "output": "Fix failing test Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -318,7 +318,9 @@ private void registerMvcSingletons(StubWebApplicationContext cxt) {\n \n \t\tStandaloneConfiguration config = new StandaloneConfiguration();\n \n-\t\tStaticRequestMappingHandlerMapping hm = config.getHandlerMapping(cxt);\n+\t\tStaticRequestMappingHandlerMapping hm = config.getHandlerMapping();\n+\t\thm.setServletContext(cxt.getServletContext());\n+\t\thm.setApplicationContext(cxt);\n \t\thm.registerHandlers(controllers);\n \t\tcxt.addBean(\"requestMappingHandlerMapping\", hm);\n \n@@ -358,11 +360,8 @@ private List<ViewResolver> initViewResolvers(WebApplicationContext wac) {\n \tprivate class StandaloneConfiguration extends WebMvcConfigurationSupport {\n \n \n-\t\tpublic StaticRequestMappingHandlerMapping getHandlerMapping(StubWebApplicationContext cxt) {\n-\n+\t\tpublic StaticRequestMappingHandlerMapping getHandlerMapping() {\n \t\t\tStaticRequestMappingHandlerMapping handlerMapping = new StaticRequestMappingHandlerMapping();\n-\t\t\thandlerMapping.setServletContext(cxt.getServletContext());\n-\t\t\thandlerMapping.setApplicationContext(cxt);\n \t\t\thandlerMapping.setEmbeddedValueResolver(new StaticStringValueResolver(placeHolderValues));\n \t\t\thandlerMapping.setUseSuffixPatternMatch(useSuffixPatternMatch);\n \t\t\thandlerMapping.setUseTrailingSlashMatch(useTrailingSlashPatternMatch);",
    "output": "Fix failing tests Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponents.java b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n@@ -161,6 +161,17 @@ public final UriComponents expand(Object... uriVariableValues) {\n \t\treturn expandInternal(new VarArgsTemplateVariables(uriVariableValues));\n \t}\n \n+\t/**\n+\t * Replaces all URI template variables with the values obtained through the\n+\t * given {@link UriTemplateVariables} instance.\n+\t * @param uriTemplateVars resolves URI template variable values\n+\t * @return the expanded uri components\n+\t */\n+\tpublic final UriComponents expand(UriTemplateVariables uriTemplateVars) {\n+\t\tAssert.notNull(uriTemplateVars, \"'uriTemplateVars' must not be null\");\n+\t\treturn expandInternal(uriTemplateVars);\n+\t}\n+\n \t/**\n \t * Replaces all URI template variables with the values from the given {@link\n \t * UriTemplateVariables}\n@@ -228,7 +239,7 @@ private static String getVariableValueAsString(Object variableValue) {\n \t * Defines the contract for URI Template variables\n \t * @see HierarchicalUriComponents#expand\n \t */\n-\tinterface UriTemplateVariables {\n+\tpublic interface UriTemplateVariables {\n \n \t\tObject getValue(String name);\n \t}",
    "output": "Allow custom expand algorithm in UriComponents Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/GlassFishRequestUpgradeStrategy.java\n@@ -32,7 +32,7 @@\n import org.glassfish.tyrus.core.EndpointWrapper;\n import org.glassfish.tyrus.core.ErrorCollector;\n import org.glassfish.tyrus.core.RequestContext;\n-import org.glassfish.tyrus.server.TyrusEndpoint;\n+import org.glassfish.tyrus.core.TyrusEndpoint;\n import org.glassfish.tyrus.servlet.TyrusHttpUpgradeHandler;\n import org.glassfish.tyrus.websockets.Connection;\n import org.glassfish.tyrus.websockets.Version;",
    "output": "Upgrade spring-websocket to Tyrus 1.2.1 This targets currently nightly snapshots and future release of Glassfish 4.0.1"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java\n@@ -226,7 +226,9 @@ protected void writeToResult(T t, HttpHeaders headers, Result result) throws IOE\n \t * @return the created factory\n \t */\n \tprotected XMLInputFactory createXmlInputFactory() {\n-\t\treturn XMLInputFactory.newInstance();\n+\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n+\t\tinputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false);\n+\t\treturn inputFactory;\n \t}\n \n }",
    "output": "Fix potential security risk when using Spring OXM Disable by default external entity resolution when using Spring OXM with jaxb. This prevents a XML entity from being able to resolve a local file on the host system. See https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java\n--- a/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java\n+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java\n@@ -52,7 +52,7 @@\n  * <p>For concrete usage, check out the {@link SchedulerFactoryBean} and\n  * {@link SchedulerAccessorBean} classes.\n  *\n- * <p>Compatible with Quartz 1.8 as well as Quartz 2.0/2.1, as of Spring 4.0.\n+ * <p>Compatible with Quartz 1.8 as well as Quartz 2.0-2.2, as of Spring 4.0.\n  *\n  * @author Juergen Hoeller\n  * @since 2.5.6\n@@ -383,7 +383,7 @@ private JobDetail findJobDetail(Trigger trigger) {\n \t\telse {\n \t\t\ttry {\n \t\t\t\tMap jobDataMap = (Map) ReflectionUtils.invokeMethod(Trigger.class.getMethod(\"getJobDataMap\"), trigger);\n-\t\t\t\treturn (JobDetail) jobDataMap.get(JobDetailAwareTrigger.JOB_DETAIL_KEY);\n+\t\t\t\treturn (JobDetail) jobDataMap.remove(JobDetailAwareTrigger.JOB_DETAIL_KEY);\n \t\t\t}\n \t\t\tcatch (NoSuchMethodException ex) {\n \t\t\t\tthrow new IllegalStateException(\"Inconsistent Quartz API: \" + ex);",
    "output": "Remove the JobDetail from the job data map after discovering it Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -471,12 +471,12 @@ public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> an\n \t\tMap<String, Object> results = new LinkedHashMap<String, Object>();\n \t\tfor (String beanName : getBeanDefinitionNames()) {\n \t\t\tBeanDefinition beanDefinition = getBeanDefinition(beanName);\n-\t\t\tif (!beanDefinition.isAbstract() && (findAnnotationOnBean(beanName, annotationType) != null)) {\n+\t\t\tif (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {\n \t\t\t\tresults.put(beanName, getBean(beanName));\n \t\t\t}\n \t\t}\n \t\tfor (String beanName : getSingletonNames()) {\n-\t\t\tif (findAnnotationOnBean(beanName, annotationType) != null) {\n+\t\t\tif (!results.containsKey(beanName) && findAnnotationOnBean(beanName, annotationType) != null) {\n \t\t\t\tresults.put(beanName, getBean(beanName));\n \t\t\t}\n \t\t}",
    "output": "Avoid re-retrieval of singleton bean instances Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/TomcatRequestUpgradeStrategy.java\n@@ -20,6 +20,7 @@\n import java.lang.reflect.Method;\n import java.util.Collections;\n \n+import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.websocket.Endpoint;\n@@ -74,8 +75,9 @@ public void upgradeInternal(ServerHttpRequest request, ServerHttpResponse respon\n \t\t\tthrow new HandshakeFailureException(\"Failed to upgrade HttpServletRequest\", ex);\n \t\t}\n \n-\t\t// TODO: use ServletContext attribute when Tomcat is updated\n-\t\tWsServerContainer serverContainer = WsServerContainer.getServerContainer();\n+\t\tString attribute = \"javax.websocket.server.ServerContainer\";\n+\t\tServletContext servletContext = servletRequest.getServletContext();\n+\t\tWsServerContainer serverContainer = (WsServerContainer) servletContext.getAttribute(attribute);\n \n \t\tServerEndpointConfig endpointConfig = new ServerEndpointRegistration(\"/shouldntmatter\", endpoint);\n ",
    "output": "Fix issue in TomcatRequestUpgradeStrategy The method WsServerContainer.getServerContainerwas removed from but remained in Tomcat a little while longer. Instead the ServerContainer is obtained through a ServletContext attribute. Tomcat has now removed this method, hence the need for this fix"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,6 +34,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.FileCopyUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.web.HttpRequestHandler;\n@@ -95,7 +96,7 @@ public void setLocations(List<Resource> locations) {\n \n \t@Override\n \tpublic void afterPropertiesSet() throws Exception {\n-\t\tif (logger.isWarnEnabled()) {\n+\t\tif (logger.isWarnEnabled() && CollectionUtils.isEmpty(this.locations)) {\n \t\t\tlogger.warn(\"Locations list is empty. No resources will be served\");\n \t\t}\n \t}",
    "output": "Fix ResourceHttpRequestHandler empty location log Fix ResourceHttpRequestHandler to only log warning when locations is empty. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n@@ -448,8 +448,8 @@ public String[] getDependenciesForBean(String beanName) {\n \t}\n \n \tpublic void destroySingletons() {\n-\t\tif (logger.isInfoEnabled()) {\n-\t\t\tlogger.info(\"Destroying singletons in \" + this);\n+\t\tif (logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(\"Destroying singletons in \" + this);\n \t\t}\n \t\tsynchronized (this.singletonObjects) {\n \t\t\tthis.singletonsCurrentlyInDestruction = true;",
    "output": "Turn down logging in DefaultSingletonBeanRegistry Reduce INFO level destroy logging to DEBUG Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -28,14 +28,14 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n+\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.BeanInitializationException;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n@@ -1194,7 +1194,16 @@ protected void render(ModelAndView mv, HttpServletRequest request, HttpServletRe\n \t\tif (logger.isDebugEnabled()) {\n \t\t\tlogger.debug(\"Rendering view [\" + view + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n \t\t}\n-\t\tview.render(mv.getModelInternal(), request, response);\n+\t\ttry {\n+\t\t\tview.render(mv.getModelInternal(), request, response);\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"] in DispatcherServlet with name '\"\n+\t\t\t\t\t\t+ getServletName() + \"'\", ex);\n+\t\t\t}\n+\t\t\tthrow ex;\n+\t\t}\n \t}\n \n \t/**",
    "output": "Log view exception in DispatcherServlet Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/format/datetime/standard/DateTimeFormattingTests.java b/spring-context/src/test/java/org/springframework/format/datetime/standard/DateTimeFormattingTests.java\n--- a/spring-context/src/test/java/org/springframework/format/datetime/standard/DateTimeFormattingTests.java\n+++ b/spring-context/src/test/java/org/springframework/format/datetime/standard/DateTimeFormattingTests.java\n@@ -288,7 +288,7 @@ public void testBindInstant() {\n \t\tpropertyValues.add(\"instant\", \"2009-10-31T12:00:00.000Z\");\n \t\tbinder.bind(propertyValues);\n \t\tassertEquals(0, binder.getBindingResult().getErrorCount());\n-\t\tassertEquals(\"2009-10-31T12:00Z\", binder.getBindingResult().getFieldValue(\"instant\"));\n+\t\tassertTrue(binder.getBindingResult().getFieldValue(\"instant\").toString().startsWith(\"2009-10-31T12:00\"));\n \t}\n \n ",
    "output": "OpenJDK 8 build 99: different toStringoutput from Instant"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -609,8 +609,8 @@ protected boolean isBeanEligibleForMetadataCaching(String beanName) {\n \n \t@Override\n \tpublic void preInstantiateSingletons() throws BeansException {\n-\t\tif (this.logger.isInfoEnabled()) {\n-\t\t\tthis.logger.info(\"Pre-instantiating singletons in \" + this);\n+\t\tif (this.logger.isDebugEnabled()) {\n+\t\t\tthis.logger.debug(\"Pre-instantiating singletons in \" + this);\n \t\t}\n \t\tList<String> beanNames;\n \t\tsynchronized (this.beanDefinitionMap) {",
    "output": "Turn down logging in DefaultListableBeanFactory Reduce INFO level startup logging to DEBUG Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java\n@@ -65,7 +65,7 @@ public WebSocketHttpRequestHandler(\tWebSocketHandler webSocketHandler, Handshake\n \t\tAssert.notNull(webSocketHandler, \"webSocketHandler must not be null\");\n \t\tAssert.notNull(handshakeHandler, \"handshakeHandler must not be null\");\n \t\tthis.webSocketHandler = decorateWebSocketHandler(webSocketHandler);\n-\t\tthis.handshakeHandler = new DefaultHandshakeHandler();\n+\t\tthis.handshakeHandler = handshakeHandler;\n \t}\n \n ",
    "output": "Fix minor issue in WebSocketHttpRequestHandler Issue"
  },
  {
    "input": "diff --git a/spring-messaging/src/main/java/org/springframework/messaging/handler/method/HandlerMethod.java b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/HandlerMethod.java\n--- a/spring-messaging/src/main/java/org/springframework/messaging/handler/method/HandlerMethod.java\n+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/HandlerMethod.java\n@@ -206,7 +206,7 @@ public boolean isVoid() {\n \t * @return the annotation, or {@code null} if none found\n \t */\n \tpublic <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {\n-\t\treturn AnnotationUtils.findAnnotation(this.bridgedMethod, annotationType);\n+\t\treturn AnnotationUtils.findAnnotation(this.method, annotationType);\n \t}\n \n \t/**\n\ndiff --git a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java\n@@ -206,7 +206,7 @@ public boolean isVoid() {\n \t * @return the annotation, or {@code null} if none found\n \t */\n \tpublic <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {\n-\t\treturn AnnotationUtils.findAnnotation(this.bridgedMethod, annotationType);\n+\t\treturn AnnotationUtils.findAnnotation(this.method, annotationType);\n \t}\n \n \t/**",
    "output": "Reverse change committed erroneously"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n--- a/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/JettyRequestUpgradeStrategy.java\n@@ -24,8 +24,8 @@\n import org.eclipse.jetty.websocket.api.UpgradeRequest;\n import org.eclipse.jetty.websocket.api.UpgradeResponse;\n import org.eclipse.jetty.websocket.server.HandshakeRFC6455;\n-import org.eclipse.jetty.websocket.server.ServletWebSocketRequest;\n import org.eclipse.jetty.websocket.server.WebSocketServerFactory;\n+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;\n import org.eclipse.jetty.websocket.servlet.WebSocketCreator;\n import org.springframework.http.server.ServerHttpRequest;\n import org.springframework.http.server.ServerHttpResponse;\n@@ -67,8 +67,8 @@ public JettyRequestUpgradeStrategy() {\n \t\tthis.factory.setCreator(new WebSocketCreator() {\n \t\t\t@Override\n \t\t\tpublic Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {\n-\t\t\t\tAssert.isInstanceOf(ServletWebSocketRequest.class, request);\n-\t\t\t\treturn ((ServletWebSocketRequest) request).getServletAttributes().get(WEBSOCKET_LISTENER_ATTR_NAME);\n+\t\t\t\tAssert.isInstanceOf(ServletUpgradeRequest.class, request);\n+\t\t\t\treturn ((ServletUpgradeRequest) request).getServletAttributes().get(WEBSOCKET_LISTENER_ATTR_NAME);\n \t\t\t}\n \t\t});\n \t\ttry {",
    "output": "Upgrade spring-websocket to Jetty 9.0.4"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java b/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n--- a/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n+++ b/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n@@ -142,11 +142,8 @@ public void removeHeaders(String... headerPatterns) {\n \t\tfor (String pattern : headerPatterns) {\n \t\t\tif (StringUtils.hasLength(pattern)){\n \t\t\t\tif (pattern.contains(\"*\")){\n-\t\t\t\t\tfor (String headerName : this.headers.keySet()) {\n-\t\t\t\t\t\tif (PatternMatchUtils.simpleMatch(pattern, headerName)){\n-\t\t\t\t\t\t\theadersToRemove.add(headerName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+\t\t\t\t\theadersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers));\n+\t\t\t\t\theadersToRemove.addAll(getMatchingHeaderNames(pattern, this.originalHeaders));\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\theadersToRemove.add(pattern);\n@@ -158,6 +155,18 @@ public void removeHeaders(String... headerPatterns) {\n \t\t}\n \t}\n \n+\tprivate List<String> getMatchingHeaderNames(String pattern, Map<String, Object> headers) {\n+\t\tList<String> matchingHeaderNames = new ArrayList<String>();\n+\t\tif (headers != null) {\n+\t\t\tfor (Map.Entry<String, Object> header: headers.entrySet()) {\n+\t\t\t\tif (PatternMatchUtils.simpleMatch(pattern,  header.getKey())) {\n+\t\t\t\t\tmatchingHeaderNames.add(header.getKey());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn matchingHeaderNames;\n+\t}\n+\n \t/**\n \t * Remove the value for the given header name.\n \t */",
    "output": "Consider original headers in pattern-based removal When headers are being removed based on pattern matching, both the new header names and the original header names need to be matched against the pattern. Previously, only new headers were being considered resulting in any matching original headers not being removed"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java b/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n--- a/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n+++ b/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java\n@@ -113,6 +113,7 @@ else if (this.originalHeaders != null) {\n \t */\n \tpublic void setHeader(String name, Object value) {\n \t\tAssert.isTrue(!isReadOnly(name), \"The '\" + name + \"' header is read-only.\");\n+\t\tverifyType(name, value);\n \t\tif (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {\n \t\t\tthis.headers.put(name, value);\n \t\t}\n@@ -209,11 +210,19 @@ public void setErrorChannelName(String errorChannelName) {\n \t\tsetHeader(MessageHeaders.ERROR_CHANNEL, errorChannelName);\n \t}\n \n-\n \t@Override\n \tpublic String toString() {\n \t\treturn getClass().getSimpleName() + \" [originalHeaders=\" + this.originalHeaders\n \t\t\t\t+ \", updated headers=\" + this.headers + \"]\";\n \t}\n \n+\tprotected void verifyType(String headerName, Object headerValue) {\n+        if (headerName != null && headerValue != null) {\n+        \tif (MessageHeaders.ERROR_CHANNEL.equals(headerName)\n+                    || MessageHeaders.REPLY_CHANNEL.endsWith(headerName)) {\n+                Assert.isTrue(headerValue instanceof MessageChannel || headerValue instanceof String, \"The '\"\n+                        + headerName + \"' header value must be a MessageChannel or String.\");\n+            }\n+        }\n+    }\n }",
    "output": "Verify types when setting header When a header is being set, verify that the type that's provided is legal for the header that's been set. For example, the error channel's type must be a MessageChannel or a String. The method that performs type verification is protected so that it can be overriden by sub-classes. It is expected that an overriding method will call the super method"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n@@ -73,6 +73,8 @@ public class StompRelayPubSubMessageHandler extends AbstractPubSubMessageHandler\n \n \tprivate MessageConverter payloadConverter;\n \n+\tprivate Environment environment;\n+\n \tprivate TcpClient<String, String> tcpClient;\n \n \tprivate final Map<String, RelaySession> relaySessions = new ConcurrentHashMap<String, RelaySession>();\n@@ -181,9 +183,9 @@ public boolean isRunning() {\n \t@Override\n \tpublic void start() {\n \t\tsynchronized (this.lifecycleMonitor) {\n-\n+\t\t\tthis.environment = new Environment();\n \t\t\tthis.tcpClient = new TcpClient.Spec<String, String>(NettyTcpClient.class)\n-\t\t\t\t\t.using(new Environment())\n+\t\t\t\t\t.using(this.environment)\n \t\t\t\t\t.codec(new DelimitedCodec<String, String>((byte) 0, true, StandardCodecs.STRING_CODEC))\n \t\t\t\t\t.connect(this.relayHost, this.relayPort)\n \t\t\t\t\t.get();\n@@ -214,6 +216,7 @@ public void stop() {\n \t\t\tthis.running = false;\n \t\t\ttry {\n \t\t\t\tthis.tcpClient.close().await(5000, TimeUnit.MILLISECONDS);\n+\t\t\t\tthis.environment.shutdown();\n \t\t\t}\n \t\t\tcatch (InterruptedException e) {\n \t\t\t\t// ignore",
    "output": "Shutdown Reactor env when relay handler is stopped The Reactor Environment (that's used by the TcpClient) manages a number of threads. To ensure that these threads are cleaned up Environment.shutdownmust be called when the Environment is no longer needed"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java\n@@ -1,5 +1,5 @@\n /*\n-\t * Copyright 2002-2012 the original author or authors.\n+\t * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -412,8 +412,19 @@ public void setIfModifiedSince(long ifModifiedSince) {\n \t * Returns the value of the {@code IfModifiedSince} header.\n \t * <p>The date is returned as the number of milliseconds since January 1, 1970 GMT. Returns -1 when the date is unknown.\n \t * @return the header value\n+\t * @deprecated use {@link #getIfModifiedSince()}\n \t */\n+\t@Deprecated\n \tpublic long getIfNotModifiedSince() {\n+\t\treturn getIfModifiedSince();\n+\t}\n+\n+\t/**\n+\t * Returns the value of the {@code If-Modified-Since} header.\n+\t * <p>The date is returned as the number of milliseconds since January 1, 1970 GMT. Returns -1 when the date is unknown.\n+\t * @return the header value\n+\t */\n+\tpublic long getIfModifiedSince() {\n \t\treturn getFirstDate(IF_MODIFIED_SINCE);\n \t}\n ",
    "output": "'Rename' HttpHeaders.getIfNotModifiedSinceEffectively rename HttpHeaders.getIfNotModifiedSinceto getIfModifiedSinceby adding a new method and deprecating the old one. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java\n@@ -83,7 +83,12 @@ public void setValidatedAnnotationType(Class<? extends Annotation> validatedAnno\n \t * <p>Default is the default ValidatorFactory's default Validator.\n \t */\n \tpublic void setValidator(Validator validator) {\n-\t\tthis.validator = validator;\n+\t\tif(validator instanceof LocalValidatorFactoryBean) {\n+\t\t\tthis.validator = ((LocalValidatorFactoryBean) validator).getValidator();\n+\t\t}\n+\t\telse {\n+\t\t\tthis.validator = validator;\n+\t\t}\n \t}\n \n \t/**",
    "output": "Improve method validation support for BV 1.1 Update MethodValidationPostProcessor.setValidator(...) to use LocalValidatorFactoryBean.getValidatorwhen possible. This is required because LocalValidatorFactoryBean does not directly implement the forExecutablesmethod introduced in bean validation v1.1. Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java b/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java\n--- a/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/ReactorMessageChannel.java\n@@ -104,7 +104,7 @@ public boolean unsubscribe(MessageHandler<Message<?>> handler) {\n \t\t\tlogger.trace(\"Channel \" + getName() + \", removing subscription for handler \" + handler);\n \t\t}\n \n-\t\tRegistration<?> registration = this.registrations.get(handler);\n+\t\tRegistration<?> registration = this.registrations.remove(handler);\n \t\tif (registration == null) {\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Channel \" + getName() + \", no subscription for handler \" + handler);",
    "output": "Fix minor issue in ReactorMessageChannel"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java\n@@ -25,6 +25,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Map.Entry;\n+\n import javax.servlet.ServletContext;\n import javax.servlet.ServletRequest;\n import javax.servlet.http.Cookie;\n@@ -188,6 +189,21 @@ public MockHttpServletRequestBuilder accept(MediaType... mediaTypes) {\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the 'Accept' header to the given media type(s).\n+\t *\n+\t * @param mediaTypes one or more media types\n+\t */\n+\tpublic MockHttpServletRequestBuilder accept(String... mediaTypes) {\n+\t\tAssert.notEmpty(mediaTypes, \"No 'Accept' media types\");\n+\t\tList<MediaType> result = new ArrayList<MediaType>(mediaTypes.length);\n+\t\tfor (String mediaType : mediaTypes) {\n+\t\t\tresult.add(MediaType.parseMediaType(mediaType));\n+\t\t}\n+\t\tthis.headers.set(\"Accept\", MediaType.toString(result));\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Set the request body.\n \t *",
    "output": "Add accept(String) method to mock request builder Issue"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java\n@@ -250,13 +250,15 @@ private void sendError(String sessionId, String errorText) {\n \n \t\tpublic void forward(M message, StompHeaders headers) {\n \n-\t\t\tsynchronized(this.monitor) {\n-\t\t\t\tif (!this.isConnected) {\n-\t\t\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\t\t\tlogger.trace(\"Adding to queue message \" + message + \", queue size=\" + this.messageQueue.size());\n+\t\t\tif (!this.isConnected) {\n+\t\t\t\tsynchronized(this.monitor) {\n+\t\t\t\t\tif (!this.isConnected) {\n+\t\t\t\t\t\tthis.messageQueue.add(message);\n+\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n+\t\t\t\t\t\t\tlogger.trace(\"Queued message \" + message + \", queue size=\" + this.messageQueue.size());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\tthis.messageQueue.add(message);\n-\t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}\n ",
    "output": "Improve synchronization checks in STOMP relay session"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageReturnValueHandler.java b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageReturnValueHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageReturnValueHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageReturnValueHandler.java\n@@ -84,6 +84,10 @@ protected Message<?> updateReturnMessage(Message<?> returnMessage, Message<?> me\n \t\treturnHeaders.setSessionId(sessionId);\n \t\treturnHeaders.setSubscriptionId(subscriptionId);\n \n+\t\tif (returnHeaders.getDestination() == null) {\n+\t\t\treturnHeaders.setDestination(headers.getDestination());\n+\t\t}\n+\n \t\tObject payload = returnMessage.getPayload();\n \t\treturn MessageBuilder.fromPayloadAndHeaders(payload, returnHeaders.toMessageHeaders()).build();\n \t}",
    "output": "Received message's destination is default for resp When an annotated handler returns a Message from a @SubscribeEvent or @MessageMapping method and it contains no destination in its headers, use the received message's destination as the response message's destination"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/mock/web/MockMultipartHttpServletRequestTests.java b/spring-test/src/test/java/org/springframework/mock/web/MockMultipartHttpServletRequestTests.java\n--- a/spring-test/src/test/java/org/springframework/mock/web/MockMultipartHttpServletRequestTests.java\n+++ b/spring-test/src/test/java/org/springframework/mock/web/MockMultipartHttpServletRequestTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2006 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -14,12 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.web.multipart;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+package org.springframework.mock.web;\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n@@ -31,10 +26,12 @@\n import java.util.Set;\n \n import org.junit.Test;\n-import org.springframework.mock.web.MockMultipartFile;\n-import org.springframework.mock.web.MockMultipartHttpServletRequest;\n import org.springframework.util.FileCopyUtils;\n import org.springframework.util.ObjectUtils;\n+import org.springframework.web.multipart.MultipartFile;\n+import org.springframework.web.multipart.MultipartHttpServletRequest;\n+\n+import static org.junit.Assert.*;\n \n /**\n  * @author Juergen Hoeller",
    "output": "Move MockMultHtServReqTests to correct package This commit relocates MockMultipartHttpServletRequestTests to the appropriate package"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n@@ -502,15 +502,13 @@ static String[] resolveActiveProfiles(Class<?> testClass) {\n \t\t\t\t\tthrow new IllegalStateException(msg, e);\n \t\t\t\t}\n \n-\t\t\t\tif (resolver != null) {\n-\t\t\t\t\tprofiles = resolver.resolve(declaringClass);\n-\t\t\t\t\tif (profiles == null) {\n-\t\t\t\t\t\tString msg = String.format(\n-\t\t\t\t\t\t\t\"ActiveProfilesResolver [%s] returned a null array of bean definition profiles.\",\n-\t\t\t\t\t\t\tresolverClass.getName());\n-\t\t\t\t\t\tlogger.error(msg);\n-\t\t\t\t\t\tthrow new IllegalStateException(msg);\n-\t\t\t\t\t}\n+\t\t\t\tprofiles = resolver.resolve(declaringClass);\n+\t\t\t\tif (profiles == null) {\n+\t\t\t\t\tString msg = String.format(\n+\t\t\t\t\t\t\"ActiveProfilesResolver [%s] returned a null array of bean definition profiles.\",\n+\t\t\t\t\t\tresolverClass.getName());\n+\t\t\t\t\tlogger.error(msg);\n+\t\t\t\t\tthrow new IllegalStateException(msg);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (valueDeclared) {",
    "output": "Remove superfluous not-null check in ContextLoaderUtils"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java b/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java\n--- a/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java\n+++ b/spring-context/src/main/java/org/springframework/messaging/GenericMessage.java\n@@ -64,11 +64,15 @@ public GenericMessage(T payload, Map<String, Object> headers) {\n \t\telse {\n \t\t\theaders = new HashMap<String, Object>(headers);\n \t\t}\n-\t\tthis.headers = new MessageHeaders(headers);\n+\t\tthis.headers = createMessageHeaders(headers);\n \t\tthis.payload = payload;\n \t}\n \n \n+\tprotected MessageHeaders createMessageHeaders(Map<String, Object> headers) {\n+\t\treturn new MessageHeaders(headers);\n+\t}\n+\n \tpublic MessageHeaders getHeaders() {\n \t\treturn this.headers;\n \t}",
    "output": "Add method to create MessageHeaders in Message"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -87,7 +87,8 @@\n  * @since 3.0\n  */\n public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPostProcessor,\n-\t\tResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, ApplicationContextAware {\n+\t\tResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, ApplicationContextAware,\n+\t\tOrdered {\n \n \tprivate static final String IMPORT_AWARE_PROCESSOR_BEAN_NAME =\n \t\t\tConfigurationClassPostProcessor.class.getName() + \".importAwareProcessor\";\n@@ -374,6 +375,11 @@ public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFact\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic int getOrder() {\n+\t\treturn Ordered.HIGHEST_PRECEDENCE;\n+\t}\n+\n \n \tprivate static class ImportAwareBeanPostProcessor implements PriorityOrdered, BeanFactoryAware, BeanPostProcessor {\n ",
    "output": "Make ConfClassPostPro Ordered.HIGHEST_PRECEDENCE Make ConfigurationClassPostProcessor Ordered.HIGHEST_PRECEDENCE in case several BeanDefinitionRegistryPostProcessors are registered. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java b/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java\n--- a/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java\n+++ b/spring-context/src/main/java/org/springframework/messaging/MessageHeaders.java\n@@ -58,7 +58,7 @@\n  * @author Gary Russell\n  * @since 4.0\n  */\n-public final class MessageHeaders implements Map<String, Object>, Serializable {\n+public class MessageHeaders implements Map<String, Object>, Serializable {\n \n \tprivate static final long serialVersionUID = 8946067357652612145L;\n ",
    "output": "Make MessageHeaders non-final"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java\n--- a/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java\n+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java\n@@ -249,8 +249,8 @@ public MockHttpServletRequest(ServletContext servletContext) {\n \t */\n \tpublic MockHttpServletRequest(ServletContext servletContext, String method, String requestURI) {\n \t\tthis.servletContext = (servletContext != null ? servletContext : new MockServletContext());\n-\t\tthis.method = method;\n-\t\tthis.requestURI = requestURI;\n+\t\tthis.method = (method == null ? \"\" : method);\n+\t\tthis.requestURI = (requestURI == null ? \"\" : requestURI);\n \t\tthis.locales.add(Locale.ENGLISH);\n \t}\n \n@@ -859,7 +859,7 @@ else if (value != null) {\n \t}\n \n \tpublic void setMethod(String method) {\n-\t\tthis.method = method;\n+\t\tthis.method = (method == null ? \"\" : method);\n \t}\n \n \t@Override\n@@ -937,7 +937,7 @@ public String getRequestedSessionId() {\n \t}\n \n \tpublic void setRequestURI(String requestURI) {\n-\t\tthis.requestURI = requestURI;\n+\t\tthis.requestURI = (requestURI == null ? \"\" : requestURI);\n \t}\n \n \t@Override",
    "output": "Ensure method & requestURI are non-null in MHSR Prior to this commit it was possible for the method and requestURI fields in MockHttpServletRequest to be set to null. This commit ensures that the method and requestURI fields are internally stored as empty strings if the user sets them to a null value. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/jdbc/JdbcTestUtilsTests.java b/spring-test/src/test/java/org/springframework/test/jdbc/JdbcTestUtilsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/jdbc/JdbcTestUtilsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/jdbc/JdbcTestUtilsTests.java\n@@ -118,25 +118,24 @@ public void readAndSplitScriptContainingComments() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void testDeleteNoWhere() throws Exception {\n+\tpublic void deleteWithoutWhereClause() throws Exception {\n \t\tgiven(jdbcTemplate.update(\"DELETE FROM person\")).willReturn(10);\n \t\tint deleted = JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, \"person\", null);\n \t\tassertThat(deleted, equalTo(10));\n \t}\n \n \t@Test\n-\tpublic void testDeleteWhere() throws Exception {\n+\tpublic void deleteWithWhereClause() throws Exception {\n \t\tgiven(jdbcTemplate.update(\"DELETE FROM person WHERE name = 'Bob' and age > 25\")).willReturn(10);\n \t\tint deleted = JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, \"person\", \"name = 'Bob' and age > 25\");\n \t\tassertThat(deleted, equalTo(10));\n \t}\n \n \t@Test\n-\tpublic void deleteWhereAndArguments() throws Exception {\n+\tpublic void deleteWithWhereClauseAndArguments() throws Exception {\n \t\tgiven(jdbcTemplate.update(\"DELETE FROM person WHERE name = ? and age > ?\", \"Bob\", 25)).willReturn(10);\n \t\tint deleted = JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, \"person\", \"name = ? and age > ?\", \"Bob\", 25);\n \t\tassertThat(deleted, equalTo(10));\n \t}\n \n-\n }",
    "output": "Polish method names in JdbcTestUtilsTests"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/PathResource.java b/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n--- a/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java\n@@ -58,7 +58,6 @@ public PathResource(Path path) {\n \t}\n \n \t/**\n-\t * Create a new PathResource from a Path handle.\n \t * Create a new PathResource from a Path handle.\n \t * <p>Note: Unlike {@link FileSystemResource}, when building relative resources\n \t * via {@link #createRelative}, the relative path will be built <i>underneath</i> the",
    "output": "Remove duplicate Javadoc line from PathResource Remove duplicate Javadoc comment from PathResource that was accidentally introduced during the merge. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n--- a/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n+++ b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java\n@@ -265,4 +265,23 @@ public void getAppliedPropertySourcesTooEarly() throws Exception {\n \t\tthrown.expect(IllegalStateException.class);\n \t\tppc.getAppliedPropertySources();\n \t}\n+\n+\t@Test\n+\tpublic void multipleLocationsWithDefaultResolvedValue() throws Exception {\n+\t\t// SPR-10619\n+\t\tPropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer();\n+\t\tClassPathResource doesNotHave = new ClassPathResource(\"test.properties\", getClass());\n+\t\tClassPathResource setToTrue = new ClassPathResource(\"placeholder.properties\", getClass());\n+\t\tppc.setLocations(new Resource[] { doesNotHave, setToTrue });\n+\t\tppc.setIgnoreResourceNotFound(true);\n+\t\tppc.setIgnoreUnresolvablePlaceholders(true);\n+\t\tDefaultListableBeanFactory bf = new DefaultListableBeanFactory();\n+\t\tbf.registerBeanDefinition(\"testBean\",\n+\t\t\t\tgenericBeanDefinition(TestBean.class)\n+\t\t\t\t\t.addPropertyValue(\"jedi\", \"${jedi:false}\")\n+\t\t\t\t\t.getBeanDefinition());\n+\t\tppc.postProcessBeanFactory(bf);\n+\t\tassertThat(bf.getBean(TestBean.class).isJedi(), equalTo(true));\n+\t}\n+\n }",
    "output": "Test for property placeholder with defaults Test property placeholder with multiple locations and default values. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n--- a/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java\n@@ -173,9 +173,9 @@ private boolean setResultInternal(Object result) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tthis.result = result;\n-\t\t\tif (this.resultHandler != null) {\n-\t\t\t\tthis.resultHandler.handleResult(this.result);\n-\t\t\t}\n+\t\t}\n+\t\tif (this.resultHandler != null) {\n+\t\t\tthis.resultHandler.handleResult(this.result);\n \t\t}\n \t\treturn true;\n \t}",
    "output": "Fix deadlock issue in DeferredResult Previously DeferredResult locked around the setting of the result including handling up to the part of submitting a dispatch. This can cause a deadlock if a timeout occurs at the same time since the Tomcat timeout thread has its own locking that permits only one thread to do timeout or dispatch processing. The fix reduces the locking to cover only the attempt to set the DeferredResult but not the dispatching. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java\n@@ -16,12 +16,12 @@\n \n package org.springframework.scheduling.support;\n \n-import org.springframework.scheduling.Trigger;\n-import org.springframework.scheduling.TriggerContext;\n-\n import java.util.Date;\n import java.util.TimeZone;\n \n+import org.springframework.scheduling.Trigger;\n+import org.springframework.scheduling.TriggerContext;\n+\n /**\n  * {@link Trigger} implementation for cron expressions.\n  * Wraps a {@link CronSequenceGenerator}.\n@@ -55,6 +55,12 @@ public CronTrigger(String cronExpression, TimeZone timeZone) {\n \t}\n \n \n+\t/**\n+\t * Determine the next execution time according to the given trigger context.\n+\t * <p>Next execution times are calculated based on the\n+\t * {@linkplain TriggerContext#lastCompletionTime completion time} of the\n+\t * previous execution; therefore, overlapping executions won't occur.\n+\t */\n \t@Override\n \tpublic Date nextExecutionTime(TriggerContext triggerContext) {\n \t\tDate date = triggerContext.lastCompletionTime();",
    "output": "Clarified that CronTrigger never schedules overlapping executions Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java\n@@ -85,7 +85,17 @@ protected Long getContentLength(Resource resource, MediaType contentType) throws\n \tprotected void writeInternal(Resource resource, HttpOutputMessage outputMessage)\n \t\t\tthrows IOException, HttpMessageNotWritableException {\n \n-\t\tStreamUtils.copy(resource.getInputStream(), outputMessage.getBody());\n+\t\tInputStream in = resource.getInputStream();\n+\t\ttry {\n+\t\t\tStreamUtils.copy(in, outputMessage.getBody());\n+\t\t}\n+\t\tfinally {\n+\t\t\ttry {\n+\t\t\t\tin.close();\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t}\n+\t\t}\n \t\toutputMessage.getBody().flush();\n \t}\n ",
    "output": "Close InputStream in ResourceHttpMessageConverter Spring 3.2.2 introduced a change to avoid closing the response stream in HttpMessageConverters. However, the InputStream of resources being written, for example as part of a multi-part request should be closed. This change ensures that. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java\n@@ -122,7 +122,7 @@ protected Resource getResourceByPath(String path) {\n \t * ClassPathResource that explicitly expresses a context-relative path\n \t * through implementing the ContextResource interface.\n \t */\n-\tprivate static class ClassPathContextResource extends ClassPathResource implements ContextResource {\n+\tprotected static class ClassPathContextResource extends ClassPathResource implements ContextResource {\n \n \t\tpublic ClassPathContextResource(String path, ClassLoader classLoader) {\n \t\t\tsuper(path, classLoader);",
    "output": "Make Make ClassPathContextResource protected Allow ClassPathContextResource to be accessed by subclasses of DefaultResourceLoader. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,6 +17,7 @@\n package org.springframework.context.annotation;\n \n import org.springframework.beans.factory.support.BeanNameGenerator;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.support.GenericApplicationContext;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.util.Assert;\n@@ -61,6 +62,16 @@ public AnnotationConfigApplicationContext() {\n \t\tthis.scanner = new ClassPathBeanDefinitionScanner(this);\n \t}\n \n+\t/**\n+\t * Create a new AnnotationConfigApplicationContext with the given DefaultListableBeanFactory.\n+\t * @param beanFactory the DefaultListableBeanFactory instance to use for this context\n+\t */\n+\tpublic AnnotationConfigApplicationContext(DefaultListableBeanFactory beanFactory) {\n+\t\tsuper(beanFactory);\n+\t\tthis.reader = new AnnotatedBeanDefinitionReader(this);\n+\t\tthis.scanner = new ClassPathBeanDefinitionScanner(this);\n+\t}\n+\n \t/**\n \t * Create a new AnnotationConfigApplicationContext, deriving bean definitions\n \t * from the given annotated classes and automatically refreshing the context.",
    "output": "Add AnnotationConfigApplicationContext constructor Add AnnotationConfigApplicationContext constructor allow use of a custom DefaultListableBeanFactory. Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n--- a/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,7 +82,7 @@ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader class\n \t\treturn result;\n \t}\n \n-\tprivate static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n+\tpublic static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n \t\tString factoryClassName = factoryClass.getName();\n \t\ttry {\n \t\t\tList<String> result = new ArrayList<String>();",
    "output": "Make SpringFactoriesLoader.loadFactoryNames public Update the SpringFactoriesLoader static loadFactoryNames method from private to public. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/jmx/export/CustomDateEditorRegistrar.java b/spring-context/src/test/java/org/springframework/jmx/export/CustomDateEditorRegistrar.java\n--- a/spring-context/src/test/java/org/springframework/jmx/export/CustomDateEditorRegistrar.java\n+++ b/spring-context/src/test/java/org/springframework/jmx/export/CustomDateEditorRegistrar.java\n@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2002-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.springframework.jmx.export;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.springframework.beans.PropertyEditorRegistrar;\n+import org.springframework.beans.PropertyEditorRegistry;\n+import org.springframework.beans.propertyeditors.CustomDateEditor;\n+\n+/**\n+ * @author Juergen Hoeller\n+ */\n+public class CustomDateEditorRegistrar implements PropertyEditorRegistrar {\n+\n+\t@Override\n+\tpublic void registerCustomEditors(PropertyEditorRegistry registry) {\n+\t\tregistry.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat(\"yyyy/MM/dd\"), true));\n+\t}\n+\n+}",
    "output": "Replace shared editor usage with PropertyEditorRegistrar"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/JdkVersion.java b/spring-core/src/main/java/org/springframework/core/JdkVersion.java\n--- a/spring-core/src/main/java/org/springframework/core/JdkVersion.java\n+++ b/spring-core/src/main/java/org/springframework/core/JdkVersion.java\n@@ -59,6 +59,11 @@ public abstract class JdkVersion {\n \t */\n \tpublic static final int JAVA_18 = 5;\n \n+\t/**\n+\t * Constant identifying the 1.9 JVM (Java 9).\n+\t */\n+\tpublic static final int JAVA_19 = 5;\n+\n \n \tprivate static final String javaVersion;\n \n@@ -67,7 +72,10 @@ public abstract class JdkVersion {\n \tstatic {\n \t\tjavaVersion = System.getProperty(\"java.version\");\n \t\t// version String should look like \"1.4.2_10\"\n-\t\tif (javaVersion.contains(\"1.8.\")) {\n+\t\tif (javaVersion.contains(\"1.9.\")) {\n+\t\t\tmajorJavaVersion = JAVA_19;\n+\t\t}\n+\t\telse if (javaVersion.contains(\"1.8.\")) {\n \t\t\tmajorJavaVersion = JAVA_18;\n \t\t}\n \t\telse if (javaVersion.contains(\"1.7.\")) {",
    "output": "Prepared for JDK 1.9 Aiming for the JdkVersion class to support one generation ahead now, in order for the test suite to properly detect 1.7/1.8+ JVMs even when running against a JDK 1.9 preview at some point"
  },
  {
    "input": "diff --git a/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java b/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java\n--- a/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java\n+++ b/spring-websocket/src/main/java/org/springframework/websocket/HandshakeRequestHandler.java\n@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2002-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.websocket;\n+\n+import org.springframework.http.server.ServerHttpRequest;\n+import org.springframework.http.server.ServerHttpResponse;\n+\n+\n+/**\n+ *\n+ * @author Rossen Stoyanchev\n+ */\n+public interface HandshakeRequestHandler {\n+\n+\n+\tboolean doHandshake(ServerHttpRequest request, ServerHttpResponse response);\n+\n+}",
    "output": "Add spring-websocket module"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n@@ -90,6 +90,7 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tif (useCacheManagerFb) {\n \t\t\t\tcacheManagerFb = new EhCacheManagerFactoryBean();\n \t\t\t\tcacheManagerFb.setConfigLocation(new ClassPathResource(\"testEhcache.xml\", getClass()));\n+\t\t\t\tcacheManagerFb.setCacheManagerName(\"cache\");\n \t\t\t\tcacheManagerFb.afterPropertiesSet();\n \t\t\t\tcacheManagerFbInitialized = true;\n \t\t\t\tcacheFb.setCacheManager(cacheManagerFb.getObject());",
    "output": "Assigned cache manager name in order to avoid EhCache assertion failure in case of multiple tests executed on the same VM"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n@@ -876,7 +876,6 @@ public void testSchedulerWithSpringBeanJobFactoryAndJobSchedulingData() throws E\n \t\tSchedulerFactoryBean bean = new SchedulerFactoryBean();\n \t\tbean.setJobFactory(new SpringBeanJobFactory());\n \t\tbean.setJobSchedulingDataLocation(\"org/springframework/scheduling/quartz/job-scheduling-data.xml\");\n-\t\tbean.setResourceLoader(new FileSystemResourceLoader());\n \t\tbean.afterPropertiesSet();\n \t\tbean.start();\n ",
    "output": "Fix job scheduling data test for Quartz 1.8"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n@@ -81,6 +81,7 @@ public void testEhCacheFactoryBeanWithExplicitCacheManager() throws Exception {\n \tprivate void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exception {\n \t\tCache cache;\n \t\tEhCacheManagerFactoryBean cacheManagerFb = null;\n+\t\tboolean cacheManagerFbInitialized = false;\n \t\ttry {\n \t\t\tEhCacheFactoryBean cacheFb = new EhCacheFactoryBean();\n \t\t\tClass<? extends Ehcache> objectType = cacheFb.getObjectType();\n@@ -90,6 +91,7 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\t\tcacheManagerFb = new EhCacheManagerFactoryBean();\n \t\t\t\tcacheManagerFb.setConfigLocation(new ClassPathResource(\"testEhcache.xml\", getClass()));\n \t\t\t\tcacheManagerFb.afterPropertiesSet();\n+\t\t\t\tcacheManagerFbInitialized = true;\n \t\t\t\tcacheFb.setCacheManager(cacheManagerFb.getObject());\n \t\t\t}\n \n@@ -144,7 +146,7 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tassertTrue(\"overridden diskExpiryThreadIntervalSeconds is correct\", config.getDiskExpiryThreadIntervalSeconds() == 10);\n \t\t}\n \t\tfinally {\n-\t\t\tif (useCacheManagerFb && cacheManagerFb != null) {\n+\t\t\tif (cacheManagerFbInitialized) {\n \t\t\t\tcacheManagerFb.destroy();\n \t\t\t}\n \t\t\telse {",
    "output": "Only call EhCacheManagerFactoryBean's destroymethod when actually initialized"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java b/spring-context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java\n--- a/spring-context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java\n+++ b/spring-context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,8 +80,7 @@ public static Object createJRubyObject(String scriptSource, Class[] interfaces,\n \t\tRuby ruby = initializeRuntime();\n \n \t\tNode scriptRootNode = ruby.parseEval(scriptSource, \"\", null, 0);\n-\t\t// keep using the deprecated runNormally variant for JRuby 1.1/1.2 compatibility...\n-        IRubyObject rubyObject = ruby.runNormally(scriptRootNode, false);\n+        IRubyObject rubyObject = ruby.runNormally(scriptRootNode);\n \n \t\tif (rubyObject instanceof RubyNil) {\n \t\t\tString className = findClassName(scriptRootNode);",
    "output": "Require JRuby 1.6+ (avoiding the use of deprecated API)"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -302,16 +302,16 @@ private class LifecycleGroup {\n \n \t\tprivate final List<LifecycleGroupMember> members = new ArrayList<LifecycleGroupMember>();\n \n-\t\tprivate Map<String, ? extends Lifecycle> lifecycleBeans = getLifecycleBeans();\n-\n-\t\tprivate volatile int smartMemberCount;\n-\n \t\tprivate final int phase;\n \n \t\tprivate final long timeout;\n \n+\t\tprivate final Map<String, ? extends Lifecycle> lifecycleBeans;\n+\n \t\tprivate final boolean autoStartupOnly;\n \n+\t\tprivate volatile int smartMemberCount;\n+\n \t\tpublic LifecycleGroup(int phase, long timeout, Map<String, ? extends Lifecycle> lifecycleBeans, boolean autoStartupOnly) {\n \t\t\tthis.phase = phase;\n \t\t\tthis.timeout = timeout;",
    "output": "Remove unnecessary default value of LifecycleGroup.lifecycleBeans Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java\n@@ -103,13 +103,15 @@ public MethodExecutor resolve(EvaluationContext context, Object targetObject, St\n \t\t\t}\n \n \t\t\t// Sort methods into a sensible order\n-\t\t\tCollections.sort(methods, new Comparator<Method>() {\n-\t\t\t\tpublic int compare(Method m1, Method m2) {\n-\t\t\t\t\tint m1pl = m1.getParameterTypes().length;\n-\t\t\t\t\tint m2pl = m2.getParameterTypes().length;\n-\t\t\t\t\treturn (new Integer(m1pl)).compareTo(m2pl);\n-\t\t\t\t}\n-\t\t\t});\n+\t\t\tif (methods.size() > 1) {\n+\t\t\t\tCollections.sort(methods, new Comparator<Method>() {\n+\t\t\t\t\tpublic int compare(Method m1, Method m2) {\n+\t\t\t\t\t\tint m1pl = m1.getParameterTypes().length;\n+\t\t\t\t\t\tint m2pl = m2.getParameterTypes().length;\n+\t\t\t\t\t\treturn (new Integer(m1pl)).compareTo(m2pl);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n \n \t\t\t// Resolve any bridge methods\n \t\t\tfor (int i = 0; i < methods.size(); i++) {",
    "output": "Fix ReflectiveMethodResolver to avoid potential UnsupportedOperationException on sort Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java b/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n--- a/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n+++ b/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java\n@@ -373,12 +373,6 @@ protected AbstractTilesContainerFactory createContainerFactory(ApplicationContex\n \n \tprivate class SpringCompleteAutoloadTilesContainerFactory extends CompleteAutoloadTilesContainerFactory {\n \n-\t\t@Override\n-\t\tprotected AttributeEvaluatorFactory createAttributeEvaluatorFactory(\n-\t\t\t\tApplicationContext applicationContext, LocaleResolver resolver) {\n-\t\t\treturn new BasicAttributeEvaluatorFactory(new DirectAttributeEvaluator());\n-\t\t}\n-\n \t\t@Override\n \t\tpublic TilesContainer createContainer(ApplicationContext applicationContext) {\n \t\t\tCachingTilesContainer cachingContainer = (CachingTilesContainer) super.createContainer(applicationContext);",
    "output": "Remove Tiles 3 configuration method Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1268,6 +1268,7 @@ private void triggerAfterCompletionWithError(HttpServletRequest request, HttpSer\n \t * @param request current HTTP request\n \t * @param attributesSnapshot the snapshot of the request attributes before the include\n \t */\n+\t@SuppressWarnings(\"unchecked\")\n \tprivate void restoreAttributesAfterInclude(HttpServletRequest request, Map<?,?> attributesSnapshot) {\n \t\tlogger.debug(\"Restoring snapshot of request attributes after include\");\n \n@@ -1282,6 +1283,9 @@ private void restoreAttributesAfterInclude(HttpServletRequest request, Map<?,?>\n \t\t\t}\n \t\t}\n \n+\t\t// Add attributes that may have been removed\n+\t\tattrsToCheck.addAll((Set<String>) attributesSnapshot.keySet());\n+\n \t\t// Iterate over the attributes to check, restoring the original value\n \t\t// or removing the attribute, respectively, if appropriate.\n \t\tfor (String attrName : attrsToCheck) {",
    "output": "Fix issue with restoring included attributes Before this change the DispatcherServlet restored modified and also removed added attributes but did not restore removed attributes. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n@@ -422,8 +422,8 @@ public void testSpecificMinuteSecond() throws Exception {\n \n \t@Test\n \tpublic void testSpecificHourSecond() throws Exception {\n-\t\tCronTrigger trigger = new CronTrigger(\"55 * 2 * * *\", timeZone);\n-\t\tcalendar.set(Calendar.HOUR_OF_DAY, 1);\n+\t\tCronTrigger trigger = new CronTrigger(\"55 * 10 * * *\", timeZone);\n+\t\tcalendar.set(Calendar.HOUR_OF_DAY, 9);\n \t\tcalendar.set(Calendar.SECOND, 54);\n \t\tDate date = calendar.getTime();\n \t\tTriggerContext context1 = getTriggerContext(date);",
    "output": "Fix test for daylight savings glitch"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n--- a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n+++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java\n@@ -28,6 +28,7 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n \n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Controller;\n@@ -58,6 +59,7 @@ public void setup() {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void testCallable() throws Exception {\n \t\tMvcResult mvcResult = this.mockMvc.perform(get(\"/1\").param(\"callable\", \"true\"))\n \t\t\t.andDo(print())\n@@ -73,6 +75,7 @@ public void testCallable() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void testDeferredResult() throws Exception {\n \t\tMvcResult mvcResult = this.mockMvc.perform(get(\"/1\").param(\"deferredResult\", \"true\"))\n \t\t\t.andExpect(request().asyncStarted())",
    "output": "Disable AsyncTests in spring-test-mvc"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.web.servlet.config;\n \n+import java.util.Arrays;\n import java.util.Map;\n \n import org.w3c.dom.Element;\n@@ -89,7 +90,7 @@ private String registerResourceHandler(ParserContext parserContext, Element elem\n \t\t}\n \n \t\tManagedList<String> locations = new ManagedList<String>();\n-\t\tlocations.addAll(StringUtils.commaDelimitedListToSet(locationAttr));\n+\t\tlocations.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(locationAttr)));\n \n \t\tRootBeanDefinition resourceHandlerDef = new RootBeanDefinition(ResourceHttpRequestHandler.class);\n \t\tresourceHandlerDef.setSource(source);",
    "output": "Do not sort the mvc:resources location attribute Update ResourcesBeanDefinitionParser to use ensure that location attribute values remain in the order that they are specified. The order was inadvertently changed in commit 3838d159f3 due to the use of StringUtils.commaDelimitedListToSet which sorts items. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -582,11 +582,10 @@ protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class..\n \t\t\tfor (BeanPostProcessor bp : getBeanPostProcessors()) {\n \t\t\t\tif (bp instanceof SmartInstantiationAwareBeanPostProcessor) {\n \t\t\t\t\tSmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;\n-\t\t\t\t\tClass predictedType = ibp.predictBeanType(beanClass, beanName);\n-\t\t\t\t\tif (predictedType != null && (typesToMatch.length > 1 ||\n-\t\t\t\t\t\t\t(typesToMatch.length > 0 && !FactoryBean.class.equals(typesToMatch[0])) ||\n-\t\t\t\t\t\t\tFactoryBean.class.isAssignableFrom(predictedType))) {\n-\t\t\t\t\t\treturn predictedType;\n+\t\t\t\t\tClass predicted = ibp.predictBeanType(beanClass, beanName);\n+\t\t\t\t\tif (predicted != null && (typesToMatch.length != 1 || !FactoryBean.class.equals(typesToMatch[0]) ||\n+\t\t\t\t\t\t\tFactoryBean.class.isAssignableFrom(predicted))) {\n+\t\t\t\t\t\treturn predicted;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Refined predictBeanType's typesToMatch check for FactoryBeans GroovyScriptFactoryTests passes again now. Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n@@ -1741,7 +1741,7 @@ public void SPR_10125() throws Exception {\n \tpublic void SPR_10210() throws Exception {\n \t\tStandardEvaluationContext context = new StandardEvaluationContext();\n \t\tcontext.setVariable(\"bridgeExample\", new org.springframework.expression.spel.spr10210.D());\n-\t\tExpression parseExpression = parser.parseExpression(\"#bridgeExample.bridgetMethod()\");\n+\t\tExpression parseExpression = parser.parseExpression(\"#bridgeExample.bridgeMethod()\");\n \t\tparseExpression.getValue(context);\n \t}\n \n\ndiff --git a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n@@ -21,7 +21,7 @@\n \n abstract class A extends B<C> {\n \n-\tpublic void bridgetMethod() {\n+\tpublic void bridgeMethod() {\n \t}\n \n }",
    "output": "Fix minor typo Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -126,6 +126,7 @@ private void setUpRequestContextIfNecessary(TestContext testContext) {\n \t\t\t\tRequestContextHolder.setRequestAttributes(servletWebRequest);\n \n \t\t\t\tif (wac instanceof ConfigurableApplicationContext) {\n+\t\t\t\t\t@SuppressWarnings(\"resource\")\n \t\t\t\t\tConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) wac;\n \t\t\t\t\tConfigurableListableBeanFactory bf = configurableApplicationContext.getBeanFactory();\n \t\t\t\t\tbf.registerResolvableDependency(MockHttpServletResponse.class, response);",
    "output": "Suppress warnings for resource leaks"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java\n@@ -76,7 +76,7 @@ public void setDataSource(DataSource dataSource) {\n \t}\n \n \tprivate int countRowsInTable(String tableName) {\n-\t\treturn jdbcTemplate.queryForInt(\"SELECT COUNT(0) FROM \" + tableName);\n+\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + tableName, Integer.class);\n \t}\n \n \tprivate int createPerson(String name) {",
    "output": "Upgrade spring-test re: deprecated queryForIntNow invoking JdbcTemplate's queryForObjectmethod instead of the deprecated queryForIntmethod within the test suite. Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java\n@@ -61,7 +61,7 @@ public class JdbcTestUtils {\n \t * @return the number of rows in the table\n \t */\n \tpublic static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {\n-\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + tableName, int.class);\n+\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + tableName, Integer.class);\n \t}\n \n \t/**\n@@ -83,7 +83,7 @@ public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableN\n \t\tif (StringUtils.hasText(whereClause)) {\n \t\t\tsql += \" WHERE \" + whereClause;\n \t\t}\n-\t\treturn jdbcTemplate.queryForObject(sql, int.class);\n+\t\treturn jdbcTemplate.queryForObject(sql, Integer.class);\n \t}\n \n \t/**",
    "output": "Upgrade JdbcTestUtils re: deprecated queryForIntJdbcTestUtils now invokes JdbcTemplate's queryForObjectmethod instead of the deprecated queryForIntmethod. Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n--- a/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java\n@@ -417,7 +417,10 @@ public final void afterPropertiesSet() throws Exception {\n \t\t}\n \t}\n \n-\tprotected JAXBContext getJaxbContext() {\n+\t/**\n+\t * Return the JAXBContext used by this marshaller, lazily building it if necessary.\n+\t */\n+\tpublic JAXBContext getJaxbContext() {\n \t\tif (this.jaxbContext != null) {\n \t\t\treturn this.jaxbContext;\n \t\t}\n@@ -525,10 +528,8 @@ private Schema loadSchema(Resource[] resources, String schemaLanguage) throws IO\n \n \n \tpublic boolean supports(Class<?> clazz) {\n-\t\tif (this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn supportsInternal(clazz, this.checkForXmlRootElement);\n+\t\treturn ((this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) ||\n+\t\t\t\tsupportsInternal(clazz, this.checkForXmlRootElement));\n \t}\n \n \tpublic boolean supports(Type genericType) {",
    "output": "Make \"getJaxbContext\" method public Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java\n@@ -133,7 +133,6 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tcacheFb.setBeanName(\"undefinedCache2\");\n \t\t\tcacheFb.setMaxElementsInMemory(5);\n \t\t\tcacheFb.setOverflowToDisk(false);\n-\t\t\tcacheFb.setEternal(true);\n \t\t\tcacheFb.setTimeToLive(8);\n \t\t\tcacheFb.setTimeToIdle(7);\n \t\t\tcacheFb.setDiskPersistent(true);\n@@ -145,7 +144,6 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tassertEquals(\"undefinedCache2\", cache.getName());\n \t\t\tassertTrue(\"overridden maxElements is correct\", config.getMaxElementsInMemory() == 5);\n \t\t\tassertFalse(\"overridden overflowToDisk is correct\", config.isOverflowToDisk());\n-\t\t\tassertTrue(\"overridden eternal is correct\", config.isEternal());\n \t\t\tassertTrue(\"default timeToLive is correct\", config.getTimeToLiveSeconds() == 8);\n \t\t\tassertTrue(\"default timeToIdle is correct\", config.getTimeToIdleSeconds() == 7);\n \t\t\tassertTrue(\"overridden diskPersistent is correct\", config.isDiskPersistent());",
    "output": "Fix invalid EhCacheFactoryBean test for EhCache 2.4+ compatibility"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n--- a/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java\n@@ -88,10 +88,6 @@ public boolean containsProperty(String name) {\n \tpublic Object getProperty(String name) {\n \t\tAssert.notNull(name, \"property name must not be null\");\n \t\tString actualName = resolvePropertyName(name);\n-\t\tif (actualName == null) {\n-\t\t\t// at this point we know the property does not exist\n-\t\t\treturn null;\n-\t\t}\n \t\tif (logger.isDebugEnabled() && !name.equals(actualName)) {\n \t\t\tlogger.debug(String.format(\n \t\t\t\t\t\"PropertySource [%s] does not contain '%s', but found equivalent '%s'\",",
    "output": "Remove unnecessary null check in SysEnvPropSource Remove unnecessary null check and dead code from SystemEnvironmentPropertySource. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/HttpStatus.java b/spring-web/src/main/java/org/springframework/http/HttpStatus.java\n--- a/spring-web/src/main/java/org/springframework/http/HttpStatus.java\n+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -125,7 +125,9 @@ public enum HttpStatus {\n \t/**\n \t * {@code 302 Moved Temporarily}.\n \t * @see <a href=\"http://tools.ietf.org/html/rfc1945#section-9.3\">HTTP/1.0</a>\n+\t * @deprecated In favor of {@link #FOUND} which will be returned from {@code HttpStatus.valueOf(302)}\n \t */\n+\t@Deprecated\n \tMOVED_TEMPORARILY(302, \"Moved Temporarily\"),\n \t/**\n \t * {@code 303 See Other}.",
    "output": "Deprecate HttpStatus.MOVED_TEMPORARILY Deprecate HttpStatus.MOVED_TEMPORARILY in favor of HttpStatus.FOUND since HttpStatus.valueOf(302) will always return FOUND. The name of the 302 status code was changed between HTTP 1.0 and HTTP 1.1 but the underlying meaning remains the same. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -683,7 +683,7 @@ class Holder { Class<?> value = null; }\n \t\tif (factoryBeanName != null && factoryMethodName != null) {\n \t\t\t// Try to obtain the FactoryBean's object type without instantiating it at all.\n \t\t\tBeanDefinition fbDef = getBeanDefinition(factoryBeanName);\n-\t\t\tif (fbDef instanceof AbstractBeanDefinition) {\n+\t\t\tif (fbDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) fbDef).hasBeanClass()) {\n \t\t\t\tClass<?> fbClass = ((AbstractBeanDefinition) fbDef).getBeanClass();\n \t\t\t\tif (ClassUtils.isCglibProxyClass(fbClass)) {\n \t\t\t\t\t// CGLIB subclass methods hide generic parameters. look at the superclass.",
    "output": "Protect against 'has not been resolved to a Class' Update AbstractAutowireCapableBeanFactory.getTypeForFactoryBean to check AbstractBeanDefinition.hasBeanClassbefore calling getBeanClass. The protects against a 'Bean class name [<name>] has not been resolved into an actual Class' IllegalStateException. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -583,8 +583,9 @@ protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class..\n \t\t\t\tif (bp instanceof SmartInstantiationAwareBeanPostProcessor) {\n \t\t\t\t\tSmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;\n \t\t\t\t\tClass predictedType = ibp.predictBeanType(beanClass, beanName);\n-\t\t\t\t\tif (predictedType != null && (typesToMatch.length != 1 ||\n-\t\t\t\t\t\t\t!FactoryBean.class.equals(typesToMatch[0]) || FactoryBean.class.isAssignableFrom(predictedType))) {\n+\t\t\t\t\tif (predictedType != null && (typesToMatch.length > 1 ||\n+\t\t\t\t\t\t\t(typesToMatch.length > 0 && !FactoryBean.class.equals(typesToMatch[0])) ||\n+\t\t\t\t\t\t\tFactoryBean.class.isAssignableFrom(predictedType))) {\n \t\t\t\t\t\treturn predictedType;\n \t\t\t\t\t}\n \t\t\t\t}",
    "output": "Protect against ArrayIndexOutOfBoundsException Update logic in AbstractAutowireCapableBeanFactory.predictBeanType to protect against a ArrayIndexOutOfBoundsException. Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -201,15 +201,22 @@ public StandaloneMockMvcBuilder setCustomReturnValueHandlers(HandlerMethodReturn\n \t\treturn this;\n \t}\n \n-\n \t/**\n-\t * Set the HandlerExceptionResolver types to use.\n+\t * Set the HandlerExceptionResolver types to use as a list.\n \t */\n \tpublic StandaloneMockMvcBuilder setHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {\n \t\tthis.handlerExceptionResolvers = exceptionResolvers;\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Set the HandlerExceptionResolver types to use as an array.\n+\t */\n+\tpublic StandaloneMockMvcBuilder setHandlerExceptionResolvers(HandlerExceptionResolver... exceptionResolvers) {\n+\t\tthis.handlerExceptionResolvers = Arrays.asList(exceptionResolvers);\n+\t\treturn this;\n+\t}\n+\n \t/**\n \t * Set up view resolution with the given {@link ViewResolver}s.\n \t * If not set, an {@link InternalResourceViewResolver} is used by default.",
    "output": "Make StandaloneMockMvcBuilder interface consistent The exception resolvers can now be set using a setter that expects varargs, just like other infrastructure beans. Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java\n@@ -24,7 +24,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n\ndiff --git a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java\n@@ -20,4 +20,8 @@\n import org.springframework.expression.spel.spr10210.infra.C;\n \n abstract class A extends B<C> {\n+\n+\tpublic void bridgetMethod() {\n+\t}\n+\n }",
    "output": "Use bridge methods in ReflectiveMethodResolver Fix failing test Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java b/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java\n--- a/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java\n+++ b/spring-context/src/test/java/org/springframework/cache/interceptor/ExpressionEvaluatorTests.java\n@@ -44,7 +44,7 @@\n  * @author Costin Leau\n  * @author Phillip Webb\n  */\n-public class ExpressionEvalutatorTest {\n+public class ExpressionEvaluatorTests {\n \n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();",
    "output": "Fix test class name"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n--- a/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -487,7 +487,7 @@ public void testSpecificDate() throws Exception {\n \t\tassertEquals(calendar.getTime(), date = trigger.nextExecutionTime(context2));\n \t}\n \n-\t@Test(expected=IllegalStateException.class)\n+\t@Test(expected = IllegalArgumentException.class)\n \tpublic void testNonExistentSpecificDate() throws Exception {\n \t\t// TODO: maybe try and detect this as a special case in parser?\n \t\tCronTrigger trigger = new CronTrigger(\"0 0 0 31 6 *\", timeZone);",
    "output": "@Scheduled provides String variants of fixedDelay, fixedRate, initialDelay for placeholder support Issue"
  },
  {
    "input": "diff --git a/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java\n--- a/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java\n+++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java\n@@ -62,6 +62,8 @@\n import org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor;\n import org.springframework.aop.target.HotSwappableTargetSource;\n import org.springframework.aop.target.SingletonTargetSource;\n+import org.springframework.tests.Assume;\n+import org.springframework.tests.TestGroup;\n import org.springframework.tests.TimeStamped;\n import org.springframework.tests.aop.advice.CountingAfterReturningAdvice;\n import org.springframework.tests.aop.advice.CountingBeforeAdvice;\n@@ -170,6 +172,7 @@ public void testValuesStick() {\n \t */\n \t@Test\n \tpublic void testManyProxies() {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n \t\tint howMany = 10000;\n \t\tStopWatch sw = new StopWatch();\n \t\tsw.start(\"Create \" + howMany + \" proxies\");",
    "output": "Add testMany test to TestGroup.PERFORMANCE"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java b/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java\n--- a/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java\n+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableConfigApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.context.support;\n \n import org.springframework.beans.factory.BeanNameAware;\n-\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.util.Assert;\n@@ -114,12 +113,13 @@ protected String[] getDefaultConfigLocations() {\n \n \t/**\n \t * Resolve the given path, replacing placeholders with corresponding\n-\t * system property values if necessary. Applied to config locations.\n+\t * environment property values if necessary. Applied to config locations.\n \t * @param path the original file path\n \t * @return the resolved file path\n+\t * @see org.springframework.core.env.Environment#resolveRequiredPlaceholders(String)\n \t */\n \tprotected String resolvePath(String path) {\n-\t\treturn this.getEnvironment().resolveRequiredPlaceholders(path);\n+\t\treturn getEnvironment().resolveRequiredPlaceholders(path);\n \t}\n \n ",
    "output": "Upgrade resolvePath javadoc to reflect Environment-based placeholder resolution Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n@@ -41,6 +41,7 @@\n  * @since 3.1.3\n  * @see <a href=\"http://tools.ietf.org/html/rfc3986#section-1.2.3\">Hierarchical URIs</a>\n  */\n+@SuppressWarnings(\"serial\")\n final class HierarchicalUriComponents extends UriComponents {\n \n \tprivate static final char PATH_DELIMITER = '/';\n\ndiff --git a/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java\n@@ -33,6 +33,7 @@\n  * @since 3.2\n  * @see <a href=\"http://tools.ietf.org/html/rfc3986#section-1.2.3\">Hierarchical vs Opaque URIs</a>\n  */\n+@SuppressWarnings(\"serial\")\n final class OpaqueUriComponents extends UriComponents {\n \n \tprivate static final MultiValueMap<String, String> QUERY_PARAMS_NONE = new LinkedMultiValueMap<String, String>(0);",
    "output": "Suppress serialization warning"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -68,7 +68,7 @@ public boolean supportsParameter(MethodParameter parameter) {\n \n \tpublic boolean supportsReturnType(MethodParameter returnType) {\n \t\tClass<?> parameterType = returnType.getParameterType();\n-\t\treturn HttpEntity.class.equals(parameterType) || ResponseEntity.class.equals(parameterType);\n+\t\treturn HttpEntity.class.isAssignableFrom(parameterType) || ResponseEntity.class.isAssignableFrom(parameterType);\n \t}\n \n \tpublic Object resolveArgument(",
    "output": "Support sub-types of ResponseEntity Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/UriComponents.java b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.web.util;\n \n+import java.io.Serializable;\n import java.io.UnsupportedEncodingException;\n import java.net.URI;\n import java.util.Arrays;\n@@ -38,7 +39,7 @@\n  * @since 3.1\n  * @see UriComponentsBuilder\n  */\n-public abstract class UriComponents {\n+public abstract class UriComponents implements Serializable {\n \n \tprivate static final String DEFAULT_ENCODING = \"UTF-8\";\n ",
    "output": "Make UriComponents Serializable Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java\n@@ -94,6 +94,11 @@ protected void registerDispatcherServlet(ServletContext servletContext) {\n \n \t\tServletRegistration.Dynamic registration =\n \t\t\t\tservletContext.addServlet(servletName, dispatcherServlet);\n+\n+\t\tAssert.notNull(registration,\n+\t\t\t\t\"Failed to register servlet with name '\" + servletName + \"'.\" +\n+\t\t\t\t\"Check if there is another servlet registered under the same name.\");\n+\n \t\tregistration.setLoadOnStartup(1);\n \t\tregistration.addMapping(getServletMappings());\n \t\tregistration.setAsyncSupported(isAsyncSupported());",
    "output": "Add helpful error message to DispServlet initializer Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -123,7 +123,7 @@ protected <T> void writeWithMessageConverters(T returnValue,\n \t\t\t}\n \t\t}\n \t\tif (compatibleMediaTypes.isEmpty()) {\n-\t\t\tthrow new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);\n+\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\n \t\t}\n \n \t\tList<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);",
    "output": "Fix exception message about producible media types Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/TimedSpringRunnerTests.java\n@@ -25,6 +25,8 @@\n import org.junit.runners.JUnit4;\n import org.springframework.test.annotation.Timed;\n import org.springframework.test.context.TestExecutionListeners;\n+import org.springframework.tests.Assume;\n+import org.springframework.tests.TestGroup;\n \n /**\n  * Verifies proper handling of the following in conjunction with the\n@@ -42,6 +44,7 @@ public class TimedSpringRunnerTests {\n \n \t@Test\n \tpublic void timedTests() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n \t\tClass<TimedSpringRunnerTestCase> testClass = TimedSpringRunnerTestCase.class;\n \t\tTrackingRunListener listener = new TrackingRunListener();\n \t\tRunNotifier notifier = new RunNotifier();",
    "output": "Add TimedSpringRunnerTests to performance test group Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java\n@@ -139,15 +139,18 @@ public Connection getConnection(String username, String password) throws SQLExce\n \t * @see java.sql.Driver#connect(String, java.util.Properties)\n \t */\n \tprotected Connection getConnectionFromDriver(String username, String password) throws SQLException {\n-\t\tProperties props = new Properties();\n-\t\tprops.putAll(getConnectionProperties());\n+\t\tProperties mergedProps = new Properties();\n+\t\tProperties connProps = getConnectionProperties();\n+\t\tif (connProps != null) {\n+\t\t\tmergedProps.putAll(connProps);\n+\t\t}\n \t\tif (username != null) {\n-\t\t\tprops.setProperty(\"user\", username);\n+\t\t\tmergedProps.setProperty(\"user\", username);\n \t\t}\n \t\tif (password != null) {\n-\t\t\tprops.setProperty(\"password\", password);\n+\t\t\tmergedProps.setProperty(\"password\", password);\n \t\t}\n-\t\treturn getConnectionFromDriver(props);\n+\t\treturn getConnectionFromDriver(mergedProps);\n \t}\n \n \t/**",
    "output": "AbstractDriverBasedDataSource does not rely on Properties chaining anymore Issue"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDriverBasedDataSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -139,7 +139,8 @@ public Connection getConnection(String username, String password) throws SQLExce\n \t * @see java.sql.Driver#connect(String, java.util.Properties)\n \t */\n \tprotected Connection getConnectionFromDriver(String username, String password) throws SQLException {\n-\t\tProperties props = new Properties(getConnectionProperties());\n+\t\tProperties props = new Properties();\n+\t\tprops.putAll(getConnectionProperties());\n \t\tif (username != null) {\n \t\t\tprops.setProperty(\"user\", username);\n \t\t}",
    "output": "AbstractDriverBasedDataSource does not rely on Properties chaining anymore Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n--- a/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n+++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,6 @@\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.cache.Cache;\n import org.springframework.cache.CacheManager;\n-import org.springframework.util.Assert;\n \n /**\n  * Abstract base class implementing the common {@link CacheManager} methods.\n@@ -45,10 +44,10 @@ public abstract class AbstractCacheManager implements CacheManager, Initializing\n \n \tpublic void afterPropertiesSet() {\n \t\tCollection<? extends Cache> caches = loadCaches();\n-\t\tAssert.notEmpty(caches, \"loadCaches must not return an empty Collection\");\n-\t\tthis.cacheMap.clear();\n \n \t\t// preserve the initial order of the cache names\n+\t\tthis.cacheMap.clear();\n+\t\tthis.cacheNames.clear();\n \t\tfor (Cache cache : caches) {\n \t\t\tthis.cacheMap.put(cache.getName(), decorateCache(cache));\n \t\t\tthis.cacheNames.add(cache.getName());",
    "output": "AbstractCacheManager accepts no caches defined, allowing for EHCache default cache setup Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java\n--- a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java\n+++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java\n@@ -63,7 +63,7 @@ public void testContentType() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/handleUtf8\"))\n \t\t\t.andExpect(content().contentType(MediaType.valueOf(\"text/plain;charset=UTF-8\")))\n \t\t\t.andExpect(content().contentType(\"text/plain;charset=UTF-8\"))\n-\t\t\t.andExpect(content().contentTypeCompatibleWith(\"text/plan\"))\n+\t\t\t.andExpect(content().contentTypeCompatibleWith(\"text/plain\"))\n \t\t\t.andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_PLAIN));\n \t}\n ",
    "output": "Fix broken test in ContentAssertionTests"
  },
  {
    "input": "diff --git a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n--- a/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java\n@@ -357,7 +357,6 @@ protected Method findSetterForProperty(String propertyName, Class<?> clazz, bool\n \tprivate Method[] getSortedClassMethods(Class<?> clazz) {\n \t\tMethod[] methods = clazz.getMethods();\n \t\tArrays.sort(methods, new Comparator<Method>() {\n-\t\t\t@Override\n \t\t\tpublic int compare(Method o1, Method o2) {\n \t\t\t\treturn (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1);\n \t\t\t}",
    "output": "Remove accidentally committed interface @Override"
  },
  {
    "input": "diff --git a/spring-tx/src/main/java/org/springframework/jca/context/SpringContextResourceAdapter.java b/spring-tx/src/main/java/org/springframework/jca/context/SpringContextResourceAdapter.java\n--- a/spring-tx/src/main/java/org/springframework/jca/context/SpringContextResourceAdapter.java\n+++ b/spring-tx/src/main/java/org/springframework/jca/context/SpringContextResourceAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -33,6 +33,7 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -228,4 +229,17 @@ public XAResource[] getXAResources(ActivationSpec[] activationSpecs) throws Reso\n \t\treturn null;\n \t}\n \n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\treturn (obj instanceof SpringContextResourceAdapter &&\n+\t\t\t\tObjectUtils.nullSafeEquals(getContextConfigLocation(),\n+\t\t\t\t\t\t((SpringContextResourceAdapter) obj).getContextConfigLocation()));\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn ObjectUtils.nullSafeHashCode(getContextConfigLocation());\n+\t}\n+\n }",
    "output": "SpringContextResourceAdapter implements equals/hashCode according to the JCA 1.5 contract Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalCacheProviderProxy.java b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalCacheProviderProxy.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalCacheProviderProxy.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalCacheProviderProxy.java\n@@ -30,7 +30,10 @@\n  * @author Juergen Hoeller\n  * @since 2.5.1\n  * @see LocalSessionFactoryBean#setCacheProvider\n+ * @deprecated as of Spring 3.0, following Hibernate 3.3's deprecation\n+ * of the CacheProvider SPI\n  */\n+@Deprecated\n public class LocalCacheProviderProxy implements CacheProvider {\n \n \tprivate final CacheProvider cacheProvider;",
    "output": "Marked LocalCacheProviderProxy as deprecated (following Hibernate 3.3.'s CacheProvider deprecation)"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/testng/FailingBeforeAndAfterMethodsTests.java b/spring-test/src/test/java/org/springframework/test/context/testng/FailingBeforeAndAfterMethodsTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/testng/FailingBeforeAndAfterMethodsTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/testng/FailingBeforeAndAfterMethodsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -237,8 +237,7 @@ public void testNothing() {\n \n \t\t@BeforeTransaction\n \t\tpublic void beforeTransaction() {\n-\t\t\t// See SPR-8116\n-\t\t\t//org.testng.Assert.fail(\"always failing beforeTransaction()\");\n+\t\t\torg.testng.Assert.fail(\"always failing beforeTransaction()\");\n \t\t}\n \t}\n \n@@ -251,8 +250,7 @@ public void testNothing() {\n \n \t\t@AfterTransaction\n \t\tpublic void afterTransaction() {\n-\t\t\t// See SPR-8116\n-\t\t\t//org.testng.Assert.fail(\"always failing afterTransaction()\");\n+\t\t\torg.testng.Assert.fail(\"always failing afterTransaction()\");\n \t\t}\n \t}\n ",
    "output": "Ensure JUnit & TestNG tests run in spring-test Prior to this commit, the Gradle build configuration only executed TestNG-based tests and effectively disabled all JUnit-based tests in the spring-test module. Furthermore, TestNG-based tests were not properly reported in Bamboo CI builds. This commit ensures that both JUnit and TestNG tests are executed in the Gradle build by defining a new testNG task within the spring-test configuration. The test task now depends on the new testNG task. Furthermore, the testNG task makes use of Gradle 1.3's support for generating test reports for TestNG tests alongside reports for JUnit tests. The net effect is that all tests are executed and reportedly properly in Bamboo builds on the CI server. - Enabled both JUnit and TestNG tests for the spring-test module. - Corrected bugs in FailingBeforeAndAfterMethodsTests introduced in commit 3d1b3868fe3b38f5552883f54111c53f6ee75572. - Deleted the now obsolete .txt file. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/test/java/org/springframework/web/bind/ServletRequestUtilsTests.java b/spring-web/src/test/java/org/springframework/web/bind/ServletRequestUtilsTests.java\n--- a/spring-web/src/test/java/org/springframework/web/bind/ServletRequestUtilsTests.java\n+++ b/spring-web/src/test/java/org/springframework/web/bind/ServletRequestUtilsTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -388,6 +388,7 @@ public void testStringParameter() throws ServletRequestBindingException {\n \n \t@Test\n \tpublic void testGetIntParameterWithDefaultValueHandlingIsFastEnough() {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n \t\tMockHttpServletRequest request = new MockHttpServletRequest();\n \t\tStopWatch sw = new StopWatch();\n \t\tsw.start();",
    "output": "Mark all IsFastEnough tests as performance tests This patch marks remaining/missed tests as ones belonging to performance tests group. Issue"
  },
  {
    "input": "diff --git a/src/test/java/com/foo/ComponentBeanDefinitionParserTests.java b/src/test/java/com/foo/ComponentBeanDefinitionParserTests.java\n--- a/src/test/java/com/foo/ComponentBeanDefinitionParserTests.java\n+++ b/src/test/java/com/foo/ComponentBeanDefinitionParserTests.java\n@@ -30,7 +30,7 @@\n /**\n  * @author Costin Leau\n  */\n-public class ComponentBeanDefinitionParserTest {\n+public class ComponentBeanDefinitionParserTests {\n \n \tprivate static DefaultListableBeanFactory bf;\n ",
    "output": "Move namespace tests to root integration module Prior to this change, spring-beans contained its own META-INF containing spring.handlers and spring.schemas files in src/main/resources; it also had files of the same name within src/test/resources/META-INF, causing 'duplicate resource' warnings and confusion in general. This commit moves the com.foo test package, it's associated namespace parsing tests and test versions of META-INF files to the root project and it's src/test integration testing folder. Issue"
  },
  {
    "input": "diff --git a/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java b/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java\n--- a/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java\n+++ b/spring-aop/src/test/java/org/springframework/aop/target/dynamic/RefreshableTargetSourceTests.java\n@@ -19,6 +19,8 @@\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n+import org.springframework.build.junit.Assume;\n+import org.springframework.build.junit.TestGroup;\n \n /**\n  * @author Rob Harrop\n@@ -75,6 +77,8 @@ public void testWithNoRefreshCheck() throws Exception {\n \n \t@Test\n \tpublic void testRefreshOverTime() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n+\n \t\tCountingRefreshableTargetSource ts = new CountingRefreshableTargetSource(true);\n \t\tts.setRefreshCheckDelay(100);\n ",
    "output": "Add aop target source test to TestGroup.PERFORMANCE Issue"
  },
  {
    "input": "diff --git a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n--- a/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java\n@@ -57,6 +57,8 @@\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.RootBeanDefinition;\n import org.springframework.beans.factory.support.StaticListableBeanFactory;\n+import org.springframework.build.junit.Assume;\n+import org.springframework.build.junit.TestGroup;\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n import org.springframework.context.support.StaticApplicationContext;\n import org.springframework.core.io.FileSystemResourceLoader;\n@@ -964,6 +966,8 @@ public void testSchedulerRepositoryExposure() throws InterruptedException {\n \t// SPR-6038: detect HSQL and stop illegal locks being taken\n \t@Test\n \tpublic void testSchedulerWithHsqlDataSource() throws Exception {\n+\t\tAssume.group(TestGroup.PERFORMANCE);\n+\n \t\tDummyJob.param = 0;\n \t\tDummyJob.count = 0;\n ",
    "output": "Add quartz scheduling test to TestGroup.PERFORMANCE Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -30,7 +30,7 @@\n  * @author Colin Sampaleanu\n  * @author Chris Beams\n  */\n-public final class SingletonBeanFactoryLocatorTests {\n+public class SingletonBeanFactoryLocatorTests {\n \tprivate static final Class<?> CLASS = SingletonBeanFactoryLocatorTests.class;\n \tprivate static final String REF1_XML = CLASS.getSimpleName() + \"-ref1.xml\";\n ",
    "output": "Various updates to support IDEA Remove the 'final' modifier from SingletonBeanFactoryLocatorTests to work around the \"cannot extend final class\" error issued when running all tests. The error was due to confusion with IDEA between the two variants of SingletonBeanFactoryLocatorTests across spring-context and spring-beans. Rename one of the GroovyMessenger classes to GroovyMessenger2. Previously there were multiple Groovy classes named 'GroovyMessenger', causing a compilation error in certain IDE arrangements. Update import-into-idea.md documentation Add various IDEA artifacts to .gitignore - ignore derby.log wherever it is written - ignore IDEA's test-output directory - ignore IDEA's Atlassian connector config file"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java\n--- a/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -736,7 +736,7 @@ protected Message doReceive(Session session, MessageConsumer consumer) throws JM\n \t\t\tJmsResourceHolder resourceHolder =\n \t\t\t\t\t(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory());\n \t\t\tif (resourceHolder != null && resourceHolder.hasTimeout()) {\n-\t\t\t\ttimeout = resourceHolder.getTimeToLiveInMillis();\n+\t\t\t\ttimeout = Math.min(timeout, resourceHolder.getTimeToLiveInMillis());\n \t\t\t}\n \t\t\tMessage message = doReceive(consumer, timeout);\n \t\t\tif (session.getTransacted()) {",
    "output": "JmsTemplate uses configured receiveTimeout if shorter than remaining transaction timeout Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/CachingMapDecorator.java b/spring-core/src/main/java/org/springframework/util/CachingMapDecorator.java\n--- a/spring-core/src/main/java/org/springframework/util/CachingMapDecorator.java\n+++ b/spring-core/src/main/java/org/springframework/util/CachingMapDecorator.java\n@@ -41,7 +41,9 @@\n  * @author Keith Donald\n  * @author Juergen Hoeller\n  * @since 1.2.2\n+ * @deprecated as of Spring 3.2, to be removed along with LabeledEnum support\n  */\n+@Deprecated\n public abstract class CachingMapDecorator<K, V> implements Map<K, V>, Serializable {\n \n \tprivate static Object NULL_VALUE = new Object();",
    "output": "Deprecate CachingMapDecorator (following the deprecation of LabeledEnum support)"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n--- a/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java\n@@ -38,7 +38,7 @@\n  * Extension of {@link UriComponents} for hierarchical URIs.\n  *\n  * @author Arjen Poutsma\n- * @since 3.2\n+ * @since 3.1.3\n  * @see <a href=\"http://tools.ietf.org/html/rfc3986#section-1.2.3\">Hierarchical URIs</a>\n  */\n final class HierarchicalUriComponents extends UriComponents {\n@@ -421,12 +421,10 @@ public boolean equals(Object obj) {\n \t\tif (this == obj) {\n \t\t\treturn true;\n \t\t}\n-\t\tif (!(obj instanceof OpaqueUriComponents)) {\n+\t\tif (!(obj instanceof HierarchicalUriComponents)) {\n \t\t\treturn false;\n \t\t}\n-\n \t\tHierarchicalUriComponents other = (HierarchicalUriComponents) obj;\n-\n \t\tif (ObjectUtils.nullSafeEquals(getScheme(), other.getScheme())) {\n \t\t\treturn false;\n \t\t}\n@@ -448,7 +446,6 @@ public boolean equals(Object obj) {\n \t\tif (ObjectUtils.nullSafeEquals(getFragment(), other.getFragment())) {\n \t\t\treturn false;\n \t\t}\n-\n \t\treturn true;\n \t}\n ",
    "output": "Fix HierarchicalUriComponents equals implementation Issue"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n@@ -23,8 +23,10 @@\n import org.hibernate.SessionFactory;\n import org.hibernate.exception.ConstraintViolationException;\n import org.hibernate.exception.GenericJDBCException;\n+\n import org.junit.Before;\n import org.junit.Test;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;\n@@ -39,7 +41,6 @@\n  * @author Sam Brannen\n  * @since 3.0\n  */\n-@org.junit.Ignore // TODO SPR-8116 (Hibernate classpath-related)\n @ContextConfiguration\n public class HibernateSessionFlushingTests extends AbstractTransactionalJUnit4SpringContextTests {\n ",
    "output": "Fix classpaths regarding slf4j versions - Defined global slf4jVersion as '1.6.1' in the Gradle build. - Replaced dependencies on slf4j-log4j12 with slf4j-jcl where possible; however, spring-test-mvc still depends on jcl-over-slf4j and slf4j-log4j12 (see ). - Reenabled HibernateSessionFlushingTests. - Verified that the following tests pass in the Gradle build and within Eclipse - HibernateSessionFlushingTests - HibernateTransactionManagerTests (Hibernate 3) - HibernateTransactionManagerTests (Hibernate 4) - RequestResponseBodyMethodProcessorTests Issue: ,"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java\n@@ -169,8 +169,9 @@ public StandaloneMockMvcBuilder addMappedInterceptors(String[] pathPatterns, Han\n \t/**\n \t * Set a ContentNegotiationManager.\n \t */\n-\tprotected void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {\n+\tprotected StandaloneMockMvcBuilder setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {\n \t\tthis.contentNegotiationManager = contentNegotiationManager;\n+\t\treturn this;\n \t}\n \n \t/**\n@@ -179,8 +180,9 @@ protected void setContentNegotiationManager(ContentNegotiationManager contentNeg\n \t * complete so that a test can verify the results synchronously.\n \t * @param timeout the timeout value in milliseconds\n \t */\n-\tpublic void setAsyncRequestTimeout(long timeout) {\n+\tpublic StandaloneMockMvcBuilder setAsyncRequestTimeout(long timeout) {\n \t\tthis.asyncRequestTimeout = timeout;\n+\t\treturn this;\n \t}\n \n \t/**\n@@ -203,8 +205,9 @@ public StandaloneMockMvcBuilder setCustomReturnValueHandlers(HandlerMethodReturn\n \t/**\n \t * Set the HandlerExceptionResolver types to use.\n \t */\n-\tpublic void setHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {\n+\tpublic StandaloneMockMvcBuilder setHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {\n \t\tthis.handlerExceptionResolvers = exceptionResolvers;\n+\t\treturn this;\n \t}\n \n \t/**",
    "output": "Polish StandaloneMockMvcBuilder Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java b/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java\n@@ -73,7 +73,7 @@ public ClientHttpResponse executeInternal() throws IOException {\n \n \t\tsetResponse(this.responseCreator.createResponse(this));\n \n-\t\treturn super.execute();\n+\t\treturn super.executeInternal();\n \t}\n \n }",
    "output": "Fix failing test from last commit Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/tags/AbstractTagTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/tags/AbstractTagTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/tags/AbstractTagTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/tags/AbstractTagTests.java\n@@ -41,6 +41,7 @@ public abstract class AbstractTagTests extends TestCase {\n \n \tprotected MockPageContext createPageContext() {\n \t\tMockServletContext sc = new MockServletContext();\n+\t\tsc.addInitParameter(\"springJspExpressionSupport\", \"true\");\n \t\tSimpleWebApplicationContext wac = new SimpleWebApplicationContext();\n \t\twac.setServletContext(sc);\n \t\twac.setNamespace(\"test\");",
    "output": "Deprecate Spring's own JSP expression evaluation Since web applications declaring a Servlet 2.3 web.xml become really rare now, we're finally deprecating Spring's own ExpressionEvaluationUtils class. As a consequence, we're also setting \"springJspExpressionSupport\" to false by default, avoiding the potential double EL evaluation problem on pre-.0 containers. Issue"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java\n--- a/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java\n+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java\n@@ -20,6 +20,7 @@\n import java.util.Map;\n \n import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.mock.web.MockHttpServletRequest;\n@@ -129,7 +130,8 @@ protected final MultiValueMap<String, String> getParamsMultiValueMap(MockHttpSer\n \t}\n \n \tprotected void printAsyncResult(MvcResult result) throws Exception {\n-\t\tthis.printer.printValue(\"Was async started\", result.getRequest().isAsyncStarted());\n+\t\tHttpServletRequest request = result.getRequest();\n+\t\tthis.printer.printValue(\"Was async started\", request.isAsyncStarted());\n \t\tthis.printer.printValue(\"Async result\", result.getAsyncResult(0));\n \t}\n ",
    "output": "Fix failing test from previous commit"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n@@ -397,10 +397,9 @@ private ManagedList<?> getMessageConverters(Element element, Object source, Pars\n \t\tManagedList<? super Object> messageConverters = new ManagedList<Object>();\n \t\tif (convertersElement != null) {\n \t\t\tmessageConverters.setSource(source);\n-\t\t\tfor (Element converter : DomUtils.getChildElementsByTagName(convertersElement, \"bean\")) {\n-\t\t\t\tBeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);\n-\t\t\t\tbeanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);\n-\t\t\t\tmessageConverters.add(beanDef);\n+\t\t\tfor (Element beanElement : DomUtils.getChildElementsByTagName(convertersElement, new String[] { \"bean\", \"ref\" })) {\n+\t\t\t\tObject object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);\n+\t\t\t\tmessageConverters.add(object);\n \t\t\t}\n \t\t}\n ",
    "output": "Support HttpMessageConverter refs in mvc namespace Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java\n@@ -18,15 +18,14 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import javax.servlet.http.HttpServletRequest;\n \n import org.springframework.util.Assert;\n import org.springframework.util.ObjectUtils;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * Implements the {@link RequestCondition} contract by delegating to multiple\n  * {@code RequestCondition} types and using a logical conjunction (' && ') to",
    "output": "Fix Collections import Replace backport Collections class with stock JDK version"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java\n--- a/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java\n@@ -128,6 +128,7 @@ private void setUpRequestContextIfNecessary(TestContext testContext) {\n \t\t\t\tRequestContextHolder.setRequestAttributes(servletWebRequest);\n \n \t\t\t\tif (wac instanceof ConfigurableApplicationContext) {\n+\t\t\t\t\t@SuppressWarnings(\"resource\")\n \t\t\t\t\tConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) wac;\n \t\t\t\t\tConfigurableListableBeanFactory bf = configurableApplicationContext.getBeanFactory();\n \t\t\t\t\tbf.registerResolvableDependency(MockHttpServletResponse.class, response);",
    "output": "Suppress warnings for java.io.Closeable resources Issue"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/util/package-info.java b/spring-test/src/main/java/org/springframework/test/util/package-info.java\n--- a/spring-test/src/main/java/org/springframework/test/util/package-info.java\n+++ b/spring-test/src/main/java/org/springframework/test/util/package-info.java\n@@ -1,6 +1,5 @@\n /**\n- * Helper classes for unit tests with reflective needs.\n+ * General utility classes for use in unit and integration tests.\n  */\n \n-package org.springframework.test.util;\n-\n+package org.springframework.test.util;\n\\ No newline at end of file",
    "output": "Upgrade package-info for test.util package"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java\n@@ -166,7 +166,7 @@ protected void addSingletonFactory(String beanName, ObjectFactory singletonFacto\n \t}\n \n \tpublic Object getSingleton(String beanName) {\n-\t\treturn getSingleton(beanName, true);\n+\t\treturn getSingleton(beanName, isSingletonCurrentlyInCreation(beanName));\n \t}\n \n \t/**\n@@ -179,10 +179,10 @@ public Object getSingleton(String beanName) {\n \t */\n \tprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n \t\tObject singletonObject = this.singletonObjects.get(beanName);\n-\t\tif (singletonObject == null) {\n+\t\tif (singletonObject == null && allowEarlyReference) {\n \t\t\tsynchronized (this.singletonObjects) {\n \t\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n-\t\t\t\tif (singletonObject == null && allowEarlyReference) {\n+\t\t\t\tif (singletonObject == null) {\n \t\t\t\t\tObjectFactory singletonFactory = this.singletonFactories.get(beanName);\n \t\t\t\t\tif (singletonFactory != null) {\n \t\t\t\t\t\tsingletonObject = singletonFactory.getObject();",
    "output": "DefaultSingletonBeanRegistry avoids singletonObjects lock wherever possible for non-singleton factory performance Issue"
  },
  {
    "input": "diff --git a/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java b/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java\n--- a/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java\n+++ b/src/test/java/org/springframework/scheduling/annotation/ScheduledAndTransactionalAnnotationIntegrationTests.java\n@@ -69,7 +69,7 @@ public void succeedsWhenSubclassProxyAndScheduledMethodNotPresentOnInterface() t\n \t\tctx.register(Config.class, SubclassProxyTxConfig.class, RepoConfigA.class);\n \t\tctx.refresh();\n \n-\t\tThread.sleep(10); // allow @Scheduled method to be called several times\n+\t\tThread.sleep(50); // allow @Scheduled method to be called several times\n \n \t\tMyRepository repository = ctx.getBean(MyRepository.class);\n \t\tCallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class);\n@@ -84,7 +84,7 @@ public void succeedsWhenJdkProxyAndScheduledMethodIsPresentOnInterface() throws\n \t\tctx.register(Config.class, JdkProxyTxConfig.class, RepoConfigB.class);\n \t\tctx.refresh();\n \n-\t\tThread.sleep(30); // allow @Scheduled method to be called several times\n+\t\tThread.sleep(50); // allow @Scheduled method to be called several times\n \n \t\tMyRepositoryWithScheduledMethod repository = ctx.getBean(MyRepositoryWithScheduledMethod.class);\n \t\tCallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class);",
    "output": "Increase sleep time in ScheduledATAITests This commit increases the sleep time in ScheduledAndTransactionalAnnotationIntegrationTests with the hope of improving the robustness of the test suite on the CI build server"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/convert/Property.java b/spring-core/src/main/java/org/springframework/core/convert/Property.java\n--- a/spring-core/src/main/java/org/springframework/core/convert/Property.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java\n@@ -37,6 +37,7 @@\n  * The built TypeDescriptor can then be used to convert from/to the property type.\n  *\n  * @author Keith Donald\n+ * @author Phillip Webb\n  * @since 3.1\n  * @see TypeDescriptor#TypeDescriptor(Property)\n  * @see TypeDescriptor#nested(Property, int)\n@@ -53,8 +54,7 @@ public final class Property {\n \n \tprivate final MethodParameter methodParameter;\n \n-\tprivate final Annotation[] annotations;\n-\n+\tprivate Annotation[] annotations;\n \n \tpublic Property(Class<?> objectType, Method readMethod, Method writeMethod) {\n \t\tthis(objectType, readMethod, writeMethod, null);\n@@ -65,13 +65,7 @@ public Property(Class<?> objectType, Method readMethod, Method writeMethod, Stri\n \t\tthis.readMethod = readMethod;\n \t\tthis.writeMethod = writeMethod;\n \t\tthis.methodParameter = resolveMethodParameter();\n-\t\tif (name != null) {\n-\t\t\tthis.name = name;\n-\t\t}\n-\t\telse {\n-\t\t\tthis.name = resolveName();\n-\t\t}\n-\t\tthis.annotations = resolveAnnotations();\n+\t\tthis.name = (name == null ? resolveName() : name);\n \t}\n \n ",
    "output": "Polish Property class"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/test/java/org/springframework/test/context/junit4/spr9799/Spr9799AnnotationConfigTests.java b/spring-test-mvc/src/test/java/org/springframework/test/context/junit4/spr9799/Spr9799AnnotationConfigTests.java\n--- a/spring-test-mvc/src/test/java/org/springframework/test/context/junit4/spr9799/Spr9799AnnotationConfigTests.java\n+++ b/spring-test-mvc/src/test/java/org/springframework/test/context/junit4/spr9799/Spr9799AnnotationConfigTests.java\n@@ -18,7 +18,6 @@\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
    "output": "Delete unused import"
  },
  {
    "input": "diff --git a/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java b/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java\n--- a/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java\n+++ b/spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java\n@@ -351,13 +351,17 @@ protected void processMessage(Message message, Session session) {\n \t */\n \t@Override\n \tprotected void doShutdown() throws JMSException {\n-\t\tlogger.debug(\"Closing JMS MessageConsumers\");\n-\t\tfor (MessageConsumer consumer : this.consumers) {\n-\t\t\tJmsUtils.closeMessageConsumer(consumer);\n-\t\t}\n-\t\tlogger.debug(\"Closing JMS Sessions\");\n-\t\tfor (Session session : this.sessions) {\n-\t\t\tJmsUtils.closeSession(session);\n+\t\tsynchronized (this.consumersMonitor) {\n+\t\t\tif (this.consumers != null) {\n+\t\t\t\tlogger.debug(\"Closing JMS MessageConsumers\");\n+\t\t\t\tfor (MessageConsumer consumer : this.consumers) {\n+\t\t\t\t\tJmsUtils.closeMessageConsumer(consumer);\n+\t\t\t\t}\n+\t\t\t\tlogger.debug(\"Closing JMS Sessions\");\n+\t\t\t\tfor (Session session : this.sessions) {\n+\t\t\t\t\tJmsUtils.closeSession(session);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Add proper synchronization and not-null check to SimpleMessageListenerContainer's doShutdown Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n--- a/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n+++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n@@ -142,7 +142,6 @@ protected String parseStringValue(\n \t\t\t\t}\n \t\t\t\t// Recursive invocation, parsing placeholders contained in the placeholder key.\n \t\t\t\tplaceholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);\n-\n \t\t\t\t// Now obtain the value for the fully resolved key...\n \t\t\t\tString propVal = placeholderResolver.resolvePlaceholder(placeholder);\n \t\t\t\tif (propVal == null && this.valueSeparator != null) {\n@@ -172,9 +171,8 @@ else if (this.ignoreUnresolvablePlaceholders) {\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tthrow new IllegalArgumentException(\"Could not resolve placeholder '\" +\n-\t\t\t\t\t\t\tplaceholder + \"'\" + \" in string value [\" + strVal + \"]\");\n+\t\t\t\t\t\t\tplaceholder + \"'\" + \" in string value \\\"\" + strVal + \"\\\"\");\n \t\t\t\t}\n-\n \t\t\t\tvisitedPlaceholders.remove(originalPlaceholder);\n \t\t\t}\n \t\t\telse {",
    "output": "Polished \"Could not resolve placeholder\" error message"
  },
  {
    "input": "diff --git a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java\n--- a/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java\n+++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java\n@@ -25,6 +25,7 @@\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;\n \n+import org.hamcrest.Matcher;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -60,11 +61,10 @@ public void testHttpStatus() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/badRequest\")).andExpect(status().isBadRequest());\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Test\n \tpublic void testMatcher() throws Exception {\n-\t\tthis.mockMvc.perform(get(\"/badRequest\"))\n-\t\t\t.andExpect(status().is(allOf(greaterThanOrEqualTo(400), lessThan(500))));\n+\t\tMatcher<Integer> matcher = allOf(greaterThanOrEqualTo(400), lessThan(500));\n+\t\tthis.mockMvc.perform(get(\"/badRequest\")).andExpect(status().is(matcher));\n \t}\n \n \t@Test",
    "output": "Upgrade to Hamcrest 1.3"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n--- a/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n@@ -170,13 +170,13 @@ static Class<? extends ContextLoader> resolveContextLoaderClass(Class<?> testCla\n \t\t\t\tlogger.trace(String.format(\"Using default ContextLoader class [%s] for test class [%s]\",\n \t\t\t\t\tdefaultContextLoaderClassName, testClass.getName()));\n \t\t\t}\n-\t\t\treturn (Class<? extends ContextLoader>) ContextLoaderUtils.class.getClassLoader().loadClass(\n-\t\t\t\tdefaultContextLoaderClassName);\n+\t\t\treturn (Class<? extends ContextLoader>) ClassUtils.forName(defaultContextLoaderClassName,\n+\t\t\t\tContextLoaderUtils.class.getClassLoader());\n \t\t}\n-\t\tcatch (ClassNotFoundException ex) {\n+\t\tcatch (Throwable t) {\n \t\t\tthrow new IllegalStateException(\"Could not load default ContextLoader class [\"\n \t\t\t\t\t+ defaultContextLoaderClassName + \"]. Specify @ContextConfiguration's 'loader' \"\n-\t\t\t\t\t+ \"attribute or make the default loader class available.\");\n+\t\t\t\t\t+ \"attribute or make the default loader class available.\", t);\n \t\t}\n \t}\n ",
    "output": "Consistent class loading in ContextLoaderUtils"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AnnotatedConfigClassesWithoutAtConfigurationTests.java b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AnnotatedConfigClassesWithoutAtConfigurationTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AnnotatedConfigClassesWithoutAtConfigurationTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AnnotatedConfigClassesWithoutAtConfigurationTests.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.test.context.junit4.spr9051;\n \n-import static org.hamcrest.Matchers.*;\n-import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.*;\n \n import java.util.Arrays;\n@@ -32,7 +30,6 @@\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n-\n /**\n  * This set of tests refutes the claims made in\n  * <a href=\"https://jira.springsource.org/browse/SPR-9051\" target=\"_blank\">SPR-9051</a>.\n@@ -89,6 +86,7 @@ public LifecycleBean lifecycleBean() {\n \t@Autowired\n \tprivate LifecycleBean lifecycleBean;\n \n+\n \t@Test\n \tpublic void testSPR_9051() throws Exception {\n \t\tassertNotNull(enigma);",
    "output": "Delete unused imports"
  },
  {
    "input": "diff --git a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodesFactoryTests.java b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodesFactoryTests.java\n--- a/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodesFactoryTests.java\n+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLErrorCodesFactoryTests.java\n@@ -57,8 +57,9 @@ public void testDefaultInstanceWithOracle() {\n \tprivate void assertIsOracle(SQLErrorCodes sec) {\n \t\tassertTrue(sec.getBadSqlGrammarCodes().length > 0);\n \t\tassertTrue(sec.getDataIntegrityViolationCodes().length > 0);\n-\t\t// This had better be a Bad SQL Grammar code\n+\t\t// These had better be a Bad SQL Grammar code\n \t\tassertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), \"942\") >= 0);\n+\t\tassertTrue(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), \"6550\") >= 0);\n \t\t// This had better NOT be\n \t\tassertFalse(Arrays.binarySearch(sec.getBadSqlGrammarCodes(), \"9xx42\") >= 0);\n \t}",
    "output": "Support SQL exception translation for Oracle error will now raise a BadSqlGrammarException. Issue"
  },
  {
    "input": "diff --git a/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java\n--- a/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java\n+++ b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java\n@@ -382,8 +382,7 @@ public void numerics() {\n \n \t\tcheckNumberError(\"3.4L\", SpelMessage.REAL_CANNOT_BE_LONG);\n \n-\t\t// Number is parsed as a float, but immediately promoted to a double\n-\t\tcheckNumber(\"3.5f\", 3.5d, Double.class);\n+\t\tcheckNumber(\"3.5f\", 3.5f, Float.class);\n \n \t\tcheckNumber(\"1.2e3\", 1.2e3d, Double.class);\n \t\tcheckNumber(\"1.2e+3\", 1.2e3d, Double.class);",
    "output": "Upgrade SpEL test to reflect native float support Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -2173,11 +2173,13 @@ static class B { }\n \tpublic void testByTypeLookupIsFastEnough() {\n \t\tDefaultListableBeanFactory bf = new DefaultListableBeanFactory();\n \n-\t\tfor (int i=0; i<1000; i++) {\n+\t\tfor (int i = 0; i < 1000; i++) {\n \t\t\tbf.registerBeanDefinition(\"a\"+i, new RootBeanDefinition(A.class));\n \t\t}\n \t\tbf.registerBeanDefinition(\"b\", new RootBeanDefinition(B.class));\n \n+\t\tbf.freezeConfiguration();\n+\n \t\tfor (int i=0; i<10000; i++) {\n \t\t\tbf.getBean(B.class);\n \t\t}",
    "output": "Only cache by-type lookups if configuration has been marked as frozen Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java b/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java\n--- a/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java\n@@ -60,6 +60,7 @@\n import org.springframework.orm.jpa.SharedEntityManagerCreator;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ObjectUtils;\n+import org.springframework.util.StringUtils;\n \n /**\n  * BeanPostProcessor that processes {@link javax.persistence.PersistenceUnit}\n@@ -521,7 +522,7 @@ protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, St\n \t * @throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context\n \t */\n \tprotected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)\n-\t\t\tthrows NoSuchBeanDefinitionException{\n+\t\t\tthrows NoSuchBeanDefinitionException {\n \n \t\tString[] beanNames =\n \t\t\t\tBeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class);\n@@ -535,7 +536,8 @@ protected EntityManagerFactory findDefaultEntityManagerFactory(String requesting\n \t\t}\n \t\telse {\n \t\t\tthrow new NoSuchBeanDefinitionException(\n-\t\t\t\t\tEntityManagerFactory.class, \"expected single bean but found \" + beanNames.length);\n+\t\t\t\t\tEntityManagerFactory.class, \"expected single bean but found \" + beanNames.length + \": \" +\n+\t\t\t\t\tStringUtils.arrayToCommaDelimitedString(beanNames));\n \t\t}\n \t}\n ",
    "output": "Mention matching bean names in exception message in case of non-unique EntityManagerFactory lookup"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -304,16 +304,16 @@ public String[] getBeanNamesForType(Class<?> type) {\n \t}\n \n \tpublic String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {\n-\t\tif (type == null || !allowEagerInit) {\n-\t\t\treturn this.doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n+\t\tif (!isConfigurationFrozen()  || type == null || !allowEagerInit) {\n+\t\t\treturn doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n \t\t}\n \t\tMap<Class<?>, String[]> cache = includeNonSingletons ?\n \t\t\t\tthis.nonSingletonBeanNamesByType : this.singletonBeanNamesByType;\n \t\tString[] resolvedBeanNames = cache.get(type);\n \t\tif (resolvedBeanNames != null) {\n \t\t\treturn resolvedBeanNames;\n \t\t}\n-\t\tresolvedBeanNames = this.doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n+\t\tresolvedBeanNames = doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n \t\tcache.put(type, resolvedBeanNames);\n \t\treturn resolvedBeanNames;\n \t}",
    "output": "Only cache by-type lookups if configuration has been marked as frozen Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -255,7 +255,8 @@ else if (Set.class.equals(collectionType) || Collection.class.equals(collectionT\n \t\t\t\treturn (Collection) collectionType.newInstance();\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Could not instantiate Collection type: \" + collectionType.getName());\n+\t\t\t\tthrow new IllegalArgumentException(\"Could not instantiate Collection type: \" +\n+\t\t\t\t\t\tcollectionType.getName(), ex);\n \t\t\t}\n \t\t}\n \t}\n@@ -322,7 +323,8 @@ else if (MultiValueMap.class.equals(mapType)) {\n \t\t\t\treturn (Map) mapType.newInstance();\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Could not instantiate Map type: \" + mapType.getName());\n+\t\t\t\tthrow new IllegalArgumentException(\"Could not instantiate Map type: \" +\n+\t\t\t\t\t\tmapType.getName(), ex);\n \t\t\t}\n \t\t}\n \t}",
    "output": "Chain exception cause on create failure Propogate root cause of exceptions thrown from createCollection and createMap. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java\n@@ -141,9 +141,8 @@ else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICAT\n \t\t\t}\n \t\t}\n \n-\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n-\n \t\tif (selectedMediaType != null) {\n+\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n \t\t\tfor (HttpMessageConverter<?> messageConverter : messageConverters) {\n \t\t\t\tif (messageConverter.canWrite(returnValueClass, selectedMediaType)) {\n \t\t\t\t\t((HttpMessageConverter<T>) messageConverter).write(returnValue, selectedMediaType, outputMessage);",
    "output": "Fix NPE in AbstractMessageConverterMethodProcessor Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java b/spring-orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java\n@@ -239,7 +239,22 @@ private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory reade\n \t@Override\n \t@SuppressWarnings(\"deprecation\")\n \tpublic SessionFactory buildSessionFactory() throws HibernateException {\n-\t\treturn super.buildSessionFactory();\n+\t\tClassLoader appClassLoader = (ClassLoader) getProperties().get(AvailableSettings.APP_CLASSLOADER);\n+\t\tThread currentThread = Thread.currentThread();\n+\t\tClassLoader threadContextClassLoader = currentThread.getContextClassLoader();\n+\t\tboolean overrideClassLoader =\n+\t\t\t\t(appClassLoader != null && !appClassLoader.equals(threadContextClassLoader));\n+\t\tif (overrideClassLoader) {\n+\t\t\tcurrentThread.setContextClassLoader(appClassLoader);\n+\t\t}\n+\t\ttry {\n+\t\t\treturn super.buildSessionFactory();\n+\t\t}\n+\t\tfinally {\n+\t\t\tif (overrideClassLoader) {\n+\t\t\t\tcurrentThread.setContextClassLoader(threadContextClassLoader);\n+\t\t\t}\n+\t\t}\n \t}\n \n }",
    "output": "Hibernate 4 LocalSessionFactoryBuilder sets thread context ClassLoader (for JBoss 7 compatibility) Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n--- a/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java\n@@ -47,6 +47,7 @@ public class ResponseEntity<T> extends HttpEntity<T> {\n \n \tprivate final HttpStatus statusCode;\n \n+\n \t/**\n \t * Create a new {@code ResponseEntity} with the given status code, and no body nor headers.\n \t * @param statusCode the status code\n@@ -87,12 +88,13 @@ public ResponseEntity(T body, MultiValueMap<String, String> headers, HttpStatus\n \t\tthis.statusCode = statusCode;\n \t}\n \n+\n \t/**\n \t * Return the HTTP status code of the response.\n \t * @return the HTTP status as an HttpStatus enum value\n \t */\n \tpublic HttpStatus getStatusCode() {\n-\t\treturn statusCode;\n+\t\treturn this.statusCode;\n \t}\n \n \t@Override\n@@ -115,9 +117,9 @@ public int hashCode() {\n \t@Override\n \tpublic String toString() {\n \t\tStringBuilder builder = new StringBuilder(\"<\");\n-\t\tbuilder.append(statusCode.toString());\n+\t\tbuilder.append(this.statusCode.toString());\n \t\tbuilder.append(' ');\n-\t\tbuilder.append(statusCode.getReasonPhrase());\n+\t\tbuilder.append(this.statusCode.getReasonPhrase());\n \t\tbuilder.append(',');\n \t\tT body = getBody();\n \t\tHttpHeaders headers = getHeaders();",
    "output": "Consistent \"this.\" reference to local variable"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -301,6 +301,7 @@ private void addOrUpdatePropertyDescriptor(PropertyDescriptor pd, String propert\n \t\t\t}\n \t\t}\n \t\telse {\n+\t\t\tpd.setWriteMethod(null);\n \t\t\tpd.setReadMethod(readMethod);\n \t\t\ttry {\n \t\t\t\tpd.setWriteMethod(writeMethod);\n@@ -310,6 +311,7 @@ private void addOrUpdatePropertyDescriptor(PropertyDescriptor pd, String propert\n \t\t\t\t// fall through -> add property descriptor as best we can\n \t\t\t}\n \t\t\tif (pd instanceof IndexedPropertyDescriptor) {\n+\t\t\t\t((IndexedPropertyDescriptor)pd).setIndexedWriteMethod(null);\n \t\t\t\t((IndexedPropertyDescriptor)pd).setIndexedReadMethod(indexedReadMethod);\n \t\t\t\ttry {\n \t\t\t\t\t((IndexedPropertyDescriptor)pd).setIndexedWriteMethod(indexedWriteMethod);",
    "output": "Avoid further 'type mismatch' errors in ExtendedBeanInfo This change fixes further cases under JDK 6 in which setting a bridged (e.g. String-returning) read method can conflict with an existing corresponding bridge write method that accepts an Object parameter. This appears to be a implementation difference between JDKs 6 and 7, where the JDK 6 Introspector adds bridge methods and JDK 7 does not. The solution here is to consistently null-out any existing write method before setting the read method. We were doing this elsewhere in ExtendedBeanInfo already, but these two changes make the approach consistent throuhout. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java\n--- a/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java\n+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java\n@@ -108,21 +108,27 @@ public boolean isDone() {\n \t}\n \n \tpublic Object get() throws InterruptedException, ExecutionException {\n+\t\tScheduledFuture curr;\n \t\tsynchronized (this.triggerContextMonitor) {\n-\t\t\treturn this.currentFuture.get();\n+\t\t\tcurr = this.currentFuture;\n \t\t}\n+\t\treturn curr.get();\n \t}\n \n \tpublic Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n+\t\tScheduledFuture curr;\n \t\tsynchronized (this.triggerContextMonitor) {\n-\t\t\treturn this.currentFuture.get(timeout, unit);\n+\t\t\tcurr = this.currentFuture;\n \t\t}\n+\t\treturn curr.get(timeout, unit);\n \t}\n \n \tpublic long getDelay(TimeUnit unit) {\n+\t\tScheduledFuture curr;\n \t\tsynchronized (this.triggerContextMonitor) {\n-\t\t\treturn this.currentFuture.getDelay(unit);\n+\t\t\tcurr = this.currentFuture;\n \t\t}\n+\t\treturn curr.getDelay(unit);\n \t}\n \n \tpublic int compareTo(Delayed other) {",
    "output": "Calling cancel on a Future returned by a TaskScheduler works reliably now Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -495,7 +495,8 @@ protected <T> T doExecute(URI url, HttpMethod method, RequestCallback requestCal\n \t\t\t}\n \t\t}\n \t\tcatch (IOException ex) {\n-\t\t\tthrow new ResourceAccessException(\"I/O error: \" + ex.getMessage(), ex);\n+\t\t\tthrow new ResourceAccessException(\"I/O error on \" + method.name() +\n+\t\t\t\t\t\" request for \\\"\" + url + \"\\\":\" + ex.getMessage(), ex);\n \t\t}\n \t\tfinally {\n \t\t\tif (response != null) {",
    "output": "Add URI and method name on ResourceAccess Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -205,8 +205,10 @@ public void setBeanClassLoader(ClassLoader beanClassLoader) {\n \t * Derive further bean definitions from the configuration classes in the registry.\n \t */\n \tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n-\t\tregistry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME,\n-\t\t\t\tnew RootBeanDefinition(ImportAwareBeanPostProcessor.class));\n+\t\tRootBeanDefinition iabpp = new RootBeanDefinition(ImportAwareBeanPostProcessor.class);\n+\t\tiabpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n+\t\tregistry.registerBeanDefinition(IMPORT_AWARE_PROCESSOR_BEAN_NAME, iabpp);\n+\n \t\tint registryId = System.identityHashCode(registry);\n \t\tif (this.registriesPostProcessed.contains(registryId)) {\n \t\t\tthrow new IllegalStateException(\n@@ -217,6 +219,7 @@ public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n \t\t\t\t\t\"postProcessBeanFactory already called for this post-processor against \" + registry);\n \t\t}\n \t\tthis.registriesPostProcessed.add(registryId);\n+\n \t\tprocessConfigBeanDefinitions(registry);\n \t}\n ",
    "output": "ImportAwareBeanPostProcessor registered with ROLE_INFRASTRUCTURE"
  },
  {
    "input": "diff --git a/spring-test/src/test/java/org/springframework/test/context/SpringRunnerContextCacheTests.java b/spring-test/src/test/java/org/springframework/test/context/SpringRunnerContextCacheTests.java\n--- a/spring-test/src/test/java/org/springframework/test/context/SpringRunnerContextCacheTests.java\n+++ b/spring-test/src/test/java/org/springframework/test/context/SpringRunnerContextCacheTests.java\n@@ -18,6 +18,7 @@\n \n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -39,6 +40,7 @@\n  * @since 2.5\n  * @see TestContextCacheKeyTests\n  */\n+@Ignore\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(\"/org/springframework/test/context/junit4/SpringJUnit4ClassRunnerAppCtxTests-context.xml\")\n public class SpringRunnerContextCacheTests {",
    "output": "Ignore SpringRunnerContextCacheTests Avoid order-dependent test method failures on JDK7 Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java\n--- a/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java\n+++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/bind/PortletRequestUtilsTests.java\n@@ -395,7 +395,7 @@ public void testGetFloatParameterWithDefaultValueHandlingIsFastEnough() {\n \t\t\tPortletRequestUtils.getFloatParameter(request, \"nonExistingParam\", 0f);\n \t\t}\n \t\tsw.stop();\n-\t\tassertThat(sw.getTotalTimeMillis(), lessThan(250L));\n+\t\tassertThat(sw.getTotalTimeMillis(), lessThan(350L));\n \t}\n \n \tpublic void testGetDoubleParameterWithDefaultValueHandlingIsFastEnough() {",
    "output": "Upgrade PortletRequestUtilsTests float test timeout Float parameter handling appears to be marginally more expensive under JDK7, with the testGetFloatParameterWithDefaultValueHandlingIsFastEnough test clocking in anywhere from 250 to 315 ms. This violates the current test threshold of 250 ms, so this commit ups the timeout value to 350 ms with the assumption that this is indeed a marginal and therefore overall negligible performance degradation"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -38,6 +38,7 @@\n import org.springframework.beans.factory.config.RuntimeBeanReference;\n import org.springframework.beans.factory.config.TypedStringValue;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -208,7 +209,7 @@ else if (value instanceof TypedStringValue) {\n \t */\n \tprotected Object evaluate(TypedStringValue value) {\n \t\tObject result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition);\n-\t\tif (result != value.getValue()) {\n+\t\tif (!ObjectUtils.nullSafeEquals(result, value.getValue())) {\n \t\t\tvalue.setDynamic();\n \t\t}\n \t\treturn result;",
    "output": "Expression detection properly handles cached String literals Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java\n--- a/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java\n@@ -409,8 +409,11 @@ public void merge(ConfigurableEnvironment parent) {\n \t\tfor (String profile : parent.getActiveProfiles()) {\n \t\t\tthis.activeProfiles.add(profile);\n \t\t}\n-\t\tfor (String profile : parent.getDefaultProfiles()) {\n-\t\t\tthis.defaultProfiles.add(profile);\n+\t\tif (parent.getDefaultProfiles().length > 0) {\n+\t\t\tthis.defaultProfiles.remove(RESERVED_DEFAULT_PROFILE_NAME);\n+\t\t\tfor (String profile : parent.getDefaultProfiles()) {\n+\t\t\t\tthis.defaultProfiles.add(profile);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Remove default profile during environment merge This change fixes a minor bug with the implementation of ConfigurableEnvironment#merge, introduced in . During a merge of two environments A and B, where A has default profiles [prod] and B has default profiles [default] (the so-called 'reserved default profile'), B would complete the merge process having a collection of profiles reading [default, prod], which is incorrect. This commit explicitly ensure's that B's reserved default profile is removed if A has a set of default profiles greater than zero. If A consists only of [default], B will inherit it during the merge correctly; if A consists of [p1, p2], B will result in [p1, p2] as well; if B consists of [p1] and A of [p2, p3], B will result in [p1, p2, p3] post-merge. Issue: ,"
  },
  {
    "input": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java\n@@ -204,6 +204,10 @@ public boolean isWrapperFor(Class<?> iface) throws SQLException {\n \t\t\treturn this.dataSource.isWrapperFor(iface);\n \t\t}\n \n+\t\tpublic Logger getParentLogger() {\n+\t\t\treturn Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+\t\t}\n+\n \t\tpublic void shutdown() {\n \t\t\tshutdownDatabase();\n \t\t}",
    "output": "re-added JDBC 4.1 getParentLogger method"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/util/ResourceUtils.java b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java\n--- a/spring-core/src/main/java/org/springframework/util/ResourceUtils.java\n+++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java\n@@ -336,7 +336,7 @@ public static URI toURI(String location) throws URISyntaxException {\n \t * @param con the URLConnection to set the flag on\n \t */\n \tpublic static void useCachesIfNecessary(URLConnection con) {\n-\t\tcon.setUseCaches(con.getClass().getName().startsWith(\"JNLP\"));\n+\t\tcon.setUseCaches(con.getClass().getSimpleName().startsWith(\"JNLP\"));\n \t}\n \n }",
    "output": "ResourceUtils.useCachesIfNecessarynot correct handle JNLP connections Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1126,7 +1126,7 @@ protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletExcepti\n \t\t\t}\n \t\t}\n \t\tthrow new ServletException(\"No adapter for handler [\" + handler +\n-\t\t\t\t\"]: Does your handler implement a supported interface like Controller?\");\n+\t\t\t\t\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\");\n \t}\n \n \t/**",
    "output": "Upgrade error message in DispatcherServlet Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java\n--- a/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java\n@@ -470,17 +470,18 @@ protected void customizeContext(ServletContext servletContext, ConfigurableWebAp\n \t\t\treturn;\n \t\t}\n \n+\t\tClass<?> contextClass = applicationContext.getClass();\n \t\tArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =\n \t\t\tnew ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>();\n \n \t\tfor (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {\n-\t\t\tClass<?> contextClass = applicationContext.getClass();\n \t\t\tClass<?> initializerContextClass =\n \t\t\t\tGenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);\n \t\t\tAssert.isAssignable(initializerContextClass, contextClass, String.format(\n \t\t\t\t\t\"Could not add context initializer [%s] as its generic parameter [%s] \" +\n \t\t\t\t\t\"is not assignable from the type of application context used by this \" +\n-\t\t\t\t\t\"context loader [%s]\", initializerClass.getName(), initializerContextClass, contextClass));\n+\t\t\t\t\t\"context loader [%s]: \", initializerClass.getName(), initializerContextClass.getName(),\n+\t\t\t\t\tcontextClass.getName()));\n \t\t\tinitializerInstances.add(BeanUtils.instantiateClass(initializerClass));\n \t\t}\n ",
    "output": "Polish Spring MVC ContextLoader This commit polishes the exception message thrown by customizeContextfor greater readability"
  },
  {
    "input": "diff --git a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n--- a/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n+++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -181,8 +181,8 @@ private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {\n \n \t\t// Use defaults?\n \t\tif (declaringClass == null) {\n-\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\tlogger.info(\"@TestExecutionListeners is not present for class [\" + clazz + \"]: using defaults.\");\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"@TestExecutionListeners is not present for class [\" + clazz + \"]: using defaults.\");\n \t\t\t}\n \t\t\tclassesList.addAll(getDefaultTestExecutionListenerClasses());\n \t\t\tdefaultListeners = true;",
    "output": "Reduce log level to DEBUG when @TELs isn't present The default set of TestExecutionListeners is sufficient in most integration testing scenarios; however, the TestContextManager nonetheless logs an INFO message if the @TestExecutionListeners annotation is not present on an integration test class. In order to avoid flooding the logs with messages about the absence of @TestExecutionListeners, this commit reduces the log level for such messages from INFO to DEBUG. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java\n@@ -95,7 +95,7 @@ private static <T> T qualifiedBeanOfType(ConfigurableListableBeanFactory bf, Cla\n \t\telse {\n \t\t\tthrow new IllegalStateException(\"No matching \" + beanType.getSimpleName() +\n \t\t\t\t\t\" bean found for qualifier '\" + qualifier + \"' - neither qualifier \" +\n-\t\t\t\t\t\"match nor bean name match!\");\n+\t\t\t\t\t\"nor bean name matches!\");\n \t\t}\n \t}\n ",
    "output": "Polish error message in BeanFactoryAnnotationUtils"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -35,6 +35,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n@@ -45,7 +46,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n@@ -673,7 +673,8 @@ private boolean useTypeLevelMapping(HttpServletRequest request) {\n \t\t\tif (!hasTypeLevelMapping() || ObjectUtils.isEmpty(getTypeLevelMapping().value())) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\treturn (Boolean) request.getAttribute(HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING);\n+\t\t\tObject value = request.getAttribute(HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING);\n+\t\t\treturn (value != null) ? (Boolean) value : Boolean.TRUE;\n \t\t}\n \n \t\tprivate boolean useSuffixPattern(HttpServletRequest request) {",
    "output": "Use a default for INTROSPECT_TYPE_LEVEL_MAPPING Usually this request attribute is set for all sub-classes of AbstractUrlHandlerMapping and therefore whenever AnnotationMethodHandlerAdapter is used. However, having a default value to fall back on in AnnotationMethodHandlerAdapter is still appropriate in general and also considering the Javadoc of HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING. Issue"
  },
  {
    "input": "diff --git a/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java\n--- a/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java\n+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java\n@@ -217,7 +217,7 @@ protected void doFilterInternal(\n \t\t\t\t\tcloseSession(sessionHolder.getSession(), sessionFactory);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tif (!chain.pop()) {\n+\t\t\t\t\tif (chain.isAsyncStarted()) {\n \t\t\t\t\t\tthrow new IllegalStateException(\"Deferred close is not supported with async requests.\");\n \t\t\t\t\t}\n \t\t\t\t\t// deferred close mode",
    "output": "Fix issue with failing test from previous commit Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -18,6 +18,7 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -58,8 +59,6 @@\n import org.springframework.web.servlet.View;\n import org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * An {@link AbstractHandlerMethodExceptionResolver} that resolves exceptions\n  * through {@code @ExceptionHandler} methods.",
    "output": "Fix issue with incorrect class import Issue"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.springframework.util.CollectionUtils;\n+import org.springframework.web.context.request.async.AbstractDelegatingCallable;\n import org.springframework.web.context.request.async.AsyncExecutionChain;\n \n /**\n@@ -170,7 +171,10 @@ void addDelegatingCallables(HttpServletRequest request, HttpServletResponse resp\n \t\t\t\ttry {\n \t\t\t\t\tAsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptor;\n \t\t\t\t\tAsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request);\n-\t\t\t\t\tchain.addDelegatingCallable(asyncInterceptor.getAsyncCallable(request, response, this.handler));\n+\t\t\t\t\tAbstractDelegatingCallable callable = asyncInterceptor.getAsyncCallable(request, response, this.handler);\n+\t\t\t\t\tif (callable != null) {\n+\t\t\t\t\t\tchain.addDelegatingCallable(callable);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tcatch (Throwable ex) {\n \t\t\t\t\tlogger.error(\"HandlerInterceptor.addAsyncCallables threw exception\", ex);",
    "output": "Reduce logging in HandlerExecutionChain Before this change the HandlerExecitionChain logged errors each time a an AsyncHandlerInterceptor returned a null async Callable, a condition which is acceptable"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n--- a/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleStreamingClientHttpRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -113,6 +113,16 @@ private NonClosingOutputStream(OutputStream out) {\n \t\t\tsuper(out);\n \t\t}\n \n+\t\t@Override\n+\t\tpublic void write(byte[] b) throws IOException {\n+\t\t\tsuper.write(b);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(byte[] b, int off, int let) throws IOException {\n+\t\t\tout.write(b, off, let);\n+\t\t}\n+\n \t\t@Override\n \t\tpublic void close() throws IOException {\n \t\t}",
    "output": "Improve SimpleStreamingClientHttpRequest performance Ensure that NonClosingOutputStream calls with a byte array call the corresponding methods of the underlying OutputStream rather than relying on the default NonClosingOutputStream implementation, which writes one bte at a time. This significantly improves performance. Issues"
  },
  {
    "input": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/PathVariableMapMethodArgumentResolver.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.web.servlet.mvc.method.annotation;\n \n+import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n@@ -30,8 +31,6 @@\n import org.springframework.web.method.support.ModelAndViewContainer;\n import org.springframework.web.servlet.HandlerMapping;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * Resolves {@link Map} method arguments annotated with an @{@link PathVariable}\n  * where the annotation does not specify a path variable name. The created",
    "output": "Fix import issue introduced in prior commit Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n--- a/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n+++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -45,7 +45,7 @@ public PropertySourcesPropertyResolver(PropertySources propertySources) {\n \n \tpublic boolean containsProperty(String key) {\n \t\tfor (PropertySource<?> propertySource : this.propertySources) {\n-\t\t\tif (propertySource.getProperty(key) != null) {\n+\t\t\tif (propertySource.containsProperty(key)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "Refactor PropertyResolver impl for consistency PropertySourcesPropertyResolver#containsProperty now calls #containsProperty on each underlying PropertySource instead of calling #getProperty and checking for null. Issue"
  },
  {
    "input": "diff --git a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java\n--- a/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java\n+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -411,8 +411,8 @@ public int compareTo(Object other) {\n \t\t\t}\n \t\t\telse if (other instanceof RenderMappingPredicate) {\n \t\t\t\tRenderMappingPredicate otherRender = (RenderMappingPredicate) other;\n-\t\t\t\tboolean hasWindowState = \"\".equals(this.windowState);\n-\t\t\t\tboolean otherHasWindowState = \"\".equals(otherRender.windowState);\n+\t\t\t\tboolean hasWindowState = (this.windowState != null);\n+\t\t\t\tboolean otherHasWindowState = (otherRender.windowState != null);\n \t\t\t\tif (hasWindowState != otherHasWindowState) {\n \t\t\t\t\treturn (hasWindowState ? -1 : 1);\n \t\t\t\t}",
    "output": "Fix window state comparison in DAHandlerMapping"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -59,10 +59,13 @@ public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request)\n \t}\n \n \tpublic void cleanupMultipart(MultipartHttpServletRequest request) {\n-\t\t// To be on the safe side: explicitly delete all parts.\n+\t\t// To be on the safe side: explicitly delete the parts,\n+\t\t// but only actual file parts (for Resin compatibility)\n \t\ttry {\n \t\t\tfor (Part part : request.getParts()) {\n-\t\t\t\tpart.delete();\n+\t\t\t\tif (request.getFile(part.getName()) != null) {\n+\t\t\t\t\tpart.delete();\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Fix MultipartResolver Resin compatibility StandardServletMultipartResolver#cleanupMultipart now takes care to delete only actual file parts for Resin compatibility. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/context/support/ServletContextResource.java b/spring-web/src/main/java/org/springframework/web/context/support/ServletContextResource.java\n--- a/spring-web/src/main/java/org/springframework/web/context/support/ServletContextResource.java\n+++ b/spring-web/src/main/java/org/springframework/web/context/support/ServletContextResource.java\n@@ -166,8 +166,8 @@ public URL getURL() throws IOException {\n \t */\n \t@Override\n \tpublic File getFile() throws IOException {\n-\t\tURL url = getURL();\n-\t\tif (ResourceUtils.isFileURL(url)) {\n+\t\tURL url = this.servletContext.getResource(this.path);\n+\t\tif (url != null && ResourceUtils.isFileURL(url)) {\n \t\t\t// Proceed with file system resolution...\n \t\t\treturn super.getFile();\n \t\t}",
    "output": "Handle non-existent files in ServletContextResource ServletContextResource#getFile now falls back to #getRealPath for non-existent files Issue"
  },
  {
    "input": "diff --git a/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java\n--- a/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java\n+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java\n@@ -80,18 +80,14 @@ public void visitEnum(String attributeName, String asmTypeDescriptor, String att\n \t\t\t\tvalueToUse = enumConstant.get(null);\n \t\t\t}\n \t\t}\n-\t\tcatch (Exception ex) {\n-\t\t\tlogNonFatalException(ex);\n+\t\tcatch (ClassNotFoundException ex) {\n+\t\t\tthis.logger.debug(\"Failed to classload enum type while reading annotation metadata\", ex);\n+\t\t}\n+\t\tcatch (IllegalAccessException ex) {\n+\t\t\tthis.logger.warn(\"Could not access enum value while reading annotation metadata\", ex);\n \t\t}\n \t\tthis.attributes.put(attributeName, valueToUse);\n \t}\n-\n-\n-\tprotected void logNonFatalException(Exception ex) {\n-\t\tthis.logger.warn(\"Failed to classload type while reading annotation metadata. \" +\n-\t\t\t\t\"This is a non-fatal error, but certain annotation metadata may be \" +\n-\t\t\t\t\"unavailable.\", ex);\n-\t}\n }\n \n \n@@ -168,7 +164,9 @@ public final void visitEnd() {\n \t\t\tthis.doVisitEnd(annotationClass);\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n-\t\t\tlogNonFatalException(ex);\n+\t\t\tthis.logger.debug(\"Failed to classload type while reading annotation \" +\n+\t\t\t\t\t\"metadata. This is a non-fatal error, but certain annotation \" +\n+\t\t\t\t\t\"metadata may be unavailable.\", ex);\n \t\t}\n \t}\n ",
    "output": "Reduce log level for message re: missing annotation Previously (since Spring 3.1.1) RecursiveAnnotationAttributesVisitor logs at level WARN when ASM parsing encounters an annotation or an (enum used within an annotation) that cannot be classloaded. This is not necessarily indicative of an error, e.g. annotations such as @Nonnull may be used only for static analysis purposes, but because these annotations have runtime retention, they remain present in the bytecode. Per section 9.6.1.2 of the JLS, \"An annotation that is present in the binary may or may not be available at run-time via the reflective libraries of the Java platform.\" This commit lowers the log level of these messages from warn to debug, but leaves at warn level other messages dealing with the ability reflectively read enum values from within annotations. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n--- a/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n+++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java\n@@ -193,7 +193,7 @@ protected String getDetailedErrorMessage(String message) {\n \t * Attempt to resolve a method parameter from the list of provided argument values.\n \t */\n \tprivate Object resolveProvidedArgument(MethodParameter parameter, Object... providedArgs) {\n-\t\tif (providedArgs == null || parameter.hasParameterAnnotations()) {\n+\t\tif (providedArgs == null) {\n \t\t\treturn null;\n \t\t}\n \t\tfor (Object providedArg : providedArgs) {",
    "output": "Fix issue with resolution of WebDataBinder argument There is usually not need to put annotations on a WebDataBinder argument in an `@InitBinder` method. However, the presence of any annotation prevented the successful resolution of the argument. This fix addresses the issue. Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -405,10 +405,16 @@ protected <T> Map<String, T> findAutowireCandidates(Class<T> type) throws BeansE\n \tprotected boolean determineRequiredStatus(Annotation annotation) {\n \t\ttry {\n \t\t\tMethod method = ReflectionUtils.findMethod(annotation.annotationType(), this.requiredParameterName);\n+\t\t\tif (method == null) {\n+\t\t\t\t// annotations like @Inject, @Value and @Resource don't have a method\n+\t\t\t\t// (attribute) named \"required\" -> default to required status\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t\treturn (this.requiredParameterValue == (Boolean) ReflectionUtils.invokeMethod(method, annotation));\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\t// required by default\n+\t\t\t// an exception was thrown during reflective invocation of the required\n+\t\t\t// attribute -> default to required status\n \t\t\treturn true;\n \t\t}\n \t}",
    "output": "Avoid NPE in AutowiredAnnotationBeanPostProcessor Prior to this change, AABPP#determineRequiredStatus never checked the return value of ReflectionUtils#findMethod when searching for a '#required' attribute. This call returns null for annotations such as @Inject, @Value and @Resource, and subsequently causes a NullPointerException to be thrown when ReflectionUtils#invokeMethod is called. The NPE is caught immediately and #determineRequiredStatus returns defaulting to true, but this this approach is inefficient. It is also problematic for users who have set breakpoints on NPE -- they end up debugging into Spring internals, which is a false positive. This commit checks the return value of of ReflectionUtils#findMethod, and in the case of null, eagerly returns true. There is no change to external behavior, simply a more efficient and debugging-friendly implementation. Existing test cases already cover this change, given that it is purely a refactoring. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java\n@@ -148,7 +148,7 @@ protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage)\n \t\ttry {\n \t\t\treturn this.objectMapper.readValue(inputMessage.getBody(), javaType);\n \t\t}\n-\t\tcatch (JsonProcessingException ex) {\n+\t\tcatch (IOException ex) {\n \t\t\tthrow new HttpMessageNotReadableException(\"Could not read JSON: \" + ex.getMessage(), ex);\n \t\t}\n \t}\n\ndiff --git a/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java\n@@ -148,7 +148,7 @@ protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage)\n \t\ttry {\n \t\t\treturn this.objectMapper.readValue(inputMessage.getBody(), javaType);\n \t\t}\n-\t\tcatch (JsonProcessingException ex) {\n+\t\tcatch (IOException ex) {\n \t\t\tthrow new HttpMessageNotReadableException(\"Could not read JSON: \" + ex.getMessage(), ex);\n \t\t}\n \t}",
    "output": "Translate EOF to HttpMessageNotReadableException The MappingJacksonHttpMessageConverter now catches all IOException types raised while reading JSON and translates them into HttpMessageNotReadableException. Issue"
  },
  {
    "input": "diff --git a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n--- a/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2011 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -41,7 +41,7 @@\n  */\n public class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest {\n \n-\tprivate static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+\tprivate static final String CONTENT_DISPOSITION = \"content-disposition\";\n \n \tprivate static final String FILENAME_KEY = \"filename=\";\n ",
    "output": "Make 'Content-Disposition' header case insensitive Previously 'Content-Disposition' was passed to Part.getHeader(String). However the Javadoc for that method specifies the header should be case insensitive. Note that the JavaDoc in tomcat-servlet-api doesn't mention this. It can only be found in the official api JavaDoc http://download.oracle.com/otndocs/jcp/.0-fr-oth-JSpec/ Issue"
  },
  {
    "input": "diff --git a/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n--- a/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java\n@@ -171,7 +171,7 @@ public void afterPropertiesSet() throws ClassNotFoundException, NoSuchFieldExcep\n \t\t\tint lastDotIndex = this.staticField.lastIndexOf('.');\n \t\t\tif (lastDotIndex == -1 || lastDotIndex == this.staticField.length()) {\n \t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\"staticField must be a fully qualified class plus method name: \" +\n+\t\t\t\t\t\t\"staticField must be a fully qualified class plus static field name: \" +\n \t\t\t\t\t\t\"e.g. 'example.MyExampleClass.MY_EXAMPLE_FIELD'\");\n \t\t\t}\n \t\t\tString className = this.staticField.substring(0, lastDotIndex);",
    "output": "Fix typo in util:constant error reporting Issue"
  },
  {
    "input": "diff --git a/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java\n--- a/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java\n+++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java\n@@ -37,7 +37,7 @@ public class JibxUnmarshallerTests extends AbstractUnmarshallerTests {\n \n \tprotected static final String INPUT_STRING_WITH_SPECIAL_CHARACTERS =\n \t\t\t\"<tns:flights xmlns:tns=\\\"http://samples.springframework.org/flight\\\">\" +\n-\t\t\t\t\t\"<tns:flight><tns:airline>Air Liberté</tns:airline><tns:number>42</tns:number></tns:flight></tns:flights>\";\n+\t\t\t\t\t\"<tns:flight><tns:airline>Air Libert\\u00e9</tns:airline><tns:number>42</tns:number></tns:flight></tns:flights>\";\n \n \t@Override\n \tprotected Unmarshaller createUnmarshaller() throws Exception {\n@@ -78,7 +78,7 @@ public void unmarshalStreamSourceInputStreamUsingNonDefaultEncoding() throws Exc\n \t\ttestFlights(flights);\n \n \t\tFlightType flight = ((Flights)flights).getFlight(0);\n-\t\tassertEquals(\"Airline is invalid\", \"Air Liberté\", flight.getAirline());\n+\t\tassertEquals(\"Airline is invalid\", \"Air Libert\\u00e9\", flight.getAirline());\n \t}\n \n }",
    "output": "Fix illegal characters in JibxUnmarshallerTests JibxUnmarshallerTests contained characters; this commit changes those to the \\uXXX notation, as all Java source files should be in"
  },
  {
    "input": "diff --git a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java\n--- a/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java\n+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/freemarker/FreeMarkerMacroTests.java\n@@ -260,6 +260,11 @@ public void testForm16() throws Exception {\n \t\tassertTrue(\"Wrong output: \" + output, output.contains(\"<input type=\\\"checkbox\\\" id=\\\"jedi\\\" name=\\\"jedi\\\" checked=\\\"checked\\\" />\"));\n \t}\n \n+\t@Test\n+\tpublic void testForm17() throws Exception {\n+\t\tassertEquals(\"<input type=\\\"text\\\" id=\\\"spouses0.name\\\" name=\\\"spouses[0].name\\\" value=\\\"Fred\\\"     >\", getMacroOutput(\"FORM17\"));\n+\t}\n+\n \tprivate String getMacroOutput(String name) throws Exception {\n \n \t\tString macro = fetchMacro(name);",
    "output": "Generate bracketless tag id in FreeMarker forms Before this change if FreeMarker Spring form macro was bound to a path which contains square brackets, those brackets would also appear in id of generated tag, making the id invalid. As of this fix all FreeMarker Spring form macros generate tag with id that does not contain square brackets. Issue"
  },
  {
    "input": "diff --git a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n--- a/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java\n@@ -185,7 +185,7 @@ protected AnnotationMetadata doProcessConfigurationClass(\n \t\t\t\tthrow new IllegalArgumentException(\"At least one @PropertySource(value) location is required\");\n \t\t\t}\n \t\t\tfor (int i = 0; i < nLocations; i++) {\n-\t\t\t\tlocations[0] = this.environment.resolveRequiredPlaceholders(locations[0]);\n+\t\t\t\tlocations[i] = this.environment.resolveRequiredPlaceholders(locations[i]);\n \t\t\t}\n \t\t\tClassLoader classLoader = this.resourceLoader.getClassLoader();\n \t\t\tif (!StringUtils.hasText(name)) {",
    "output": "Fix regression in @PropertySource placeholder resolution Changes in commit 41ade68b50b39485b3cf02b9c6fb8eb74962146b introduced a regression causing all but the first location in the @PropertySource#value array to be ignored during ${...} placeholder resolution. This change ensures that all locations are processed and replaced as expected. Issue: ,"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java b/org.springframework.jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java\n@@ -87,6 +87,7 @@\n  * @see TransactionAwareConnectionFactoryProxy\n  * @see org.springframework.jms.core.JmsTemplate\n  */\n+@SuppressWarnings(\"serial\")\n public class JmsTransactionManager extends AbstractPlatformTransactionManager\n \t\timplements ResourceTransactionManager, InitializingBean {\n \n@@ -191,14 +192,6 @@ protected void doBegin(Object transaction, TransactionDefinition definition) {\n \t\t\t\t\tgetConnectionFactory(), txObject.getResourceHolder());\n \t\t}\n \t\tcatch (JMSException ex) {\n-\t\t\tif (session != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tsession.close();\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable ex2) {\n-\t\t\t\t\t// ignore\n-\t\t\t\t}\n-\t\t\t}\n \t\t\tif (con != null) {\n \t\t\t\ttry {\n \t\t\t\t\tcon.close();",
    "output": "Prune dead code from JmsTransactionManager#doBegin"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractResource.java\n@@ -25,7 +25,6 @@\n import java.net.URL;\n \n import org.springframework.core.NestedIOException;\n-import org.springframework.util.FileCopyUtils;\n import org.springframework.util.ResourceUtils;\n \n /**\n@@ -115,7 +114,22 @@ public File getFile() throws IOException {\n \t * @see #getInputStream()\n \t */\n \tpublic long contentLength() throws IOException {\n-\t\treturn FileCopyUtils.copyToByteArray(getInputStream()).length;\n+\t\tInputStream is = getInputStream();\n+\t\ttry {\n+\t\t\tlong size = 0;\n+\t\t\tbyte[] buf = new byte[255];\n+\t\t\tfor (int read = is.read(buf); read != -1;) {\n+\t\t\t\tsize += read;\n+\t\t\t}\n+\t\t\treturn size;\n+\t\t}\n+\t\tfinally {\n+\t\t\ttry {\n+\t\t\t\tis.close();\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t}\n+\t\t}\n \t}\n \n \t/**",
    "output": "use custom InputStream traversal instead of a full byte array"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -433,7 +433,7 @@ protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource,\n \t\tif (con instanceof JarURLConnection) {\n \t\t\t// Should usually be the case for traditional JAR files.\n \t\t\tJarURLConnection jarCon = (JarURLConnection) con;\n-\t\t\tjarCon.setUseCaches(false);\n+\t\t\tjarCon.setUseCaches(jarCon.getClass().getName().startsWith(\"JNLP\"));\n \t\t\tjarFile = jarCon.getJarFile();\n \t\t\tjarFileUrl = jarCon.getJarFileURL().toExternalForm();\n \t\t\tJarEntry jarEntry = jarCon.getJarEntry();",
    "output": "PathMatchingResourcePatternResolver preserves caching for JNLP jar connections"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n@@ -94,7 +94,7 @@ public class MethodInvokingJobDetailFactoryBean extends ArgumentConvertingMethod\n \t\ttry {\n \t\t\tClass jobExecutionContextClass =\n \t\t\t\t\tQuartzJobBean.class.getClassLoader().loadClass(\"org.quartz.JobExecutionContext\");\n-\t\t\tsetResultMethod = jobExecutionContextClass.getMethod(\"setResult\");\n+\t\t\tsetResultMethod = jobExecutionContextClass.getMethod(\"setResult\", Object.class);\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Incompatible Quartz API: \" + ex);",
    "output": "fix MethodInvokingJobDetailFactoryBean for compatibility with Quartz 2.0/2.1"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java b/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/io/ResourceTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.core.io;\n \n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.junit.Assert.*;\n \n import java.io.ByteArrayInputStream;\n@@ -215,13 +216,8 @@ public InputStream getInputStream() {\n \t\tcatch (FileNotFoundException ex) {\n \t\t\tassertTrue(ex.getMessage().indexOf(name) != -1);\n \t\t}\n-\t\ttry {\n-\t\t\tresource.getFilename();\n-\t\t\tfail(\"IllegalStateException should have been thrown\");\n-\t\t}\n-\t\tcatch (IllegalStateException ex) {\n-\t\t\tassertTrue(ex.getMessage().indexOf(name) != -1);\n-\t\t}\n+\n+\t\tassertThat(resource.getFilename(), nullValue());\n \t}\n \n }",
    "output": "Fix false negative test failure in ResourceTests Prior to changes in commit 57851de88e84006afc104c4f22eb2fbaf2e0d3d1, AbstractResource#getFilename threw IllegalStateException unless overridden by a subclass. Following that change, this method now throws null instead, but ResourceTests#testAbstractResourceExceptions had not been updated to reflect, resulting in a false negative failure. This has now been fixed. Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -232,7 +232,7 @@ static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) {\n \t\t}\n \t\tif (abd instanceof AbstractBeanDefinition) {\n \t\t\tif (metadata.isAnnotated(Role.class.getName())) {\n-\t\t\t\tint role = attributesFor(metadata, Role.class).getNumber(\"value\");\n+\t\t\t\tInteger role = attributesFor(metadata, Role.class).getNumber(\"value\");\n \t\t\t\t((AbstractBeanDefinition)abd).setRole(role);\n \t\t\t}\n \t\t}",
    "output": "Compensate for Eclipse vs Sun compiler discrepancy Eclipse allows autoboxing on type inference; Sun javac does not. This means that variables assigned from calls to AnnotationAttributes#getNumber should consistently use object wrappers as opposed to number primitives. There was only one such instance anyway, and has now been updated accordingly"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -547,13 +547,12 @@ public boolean equals(Object obj) {\n \t\tif (!ObjectUtils.nullSafeEquals(getType(), other.getType())) {\n \t\t\treturn false;\n \t\t}\n-\t\tAnnotation[] ann = getAnnotations();\n-\t\tAnnotation[] otherAnn = other.getAnnotations();\n-\t\tif (ann.length != otherAnn.length) {\n+\t\tAnnotation[] annotations = getAnnotations();\n+\t\tif (annotations.length != other.getAnnotations().length) {\n \t\t\treturn false;\n \t\t}\n-\t\tfor (int i = 0; i < ann.length; i++) {\n-\t\t\tif (!ann[i].annotationType().equals(otherAnn[i].annotationType())) {\n+\t\tfor (Annotation ann : annotations) {\n+\t\t\tif (other.getAnnotation(ann.annotationType()) == null) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}",
    "output": "TypeDescriptor equals implementation accepts annotations in any order"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n@@ -258,6 +258,9 @@ public static String substituteNamedParameters(ParsedSql parsedSql, SqlParameter\n \t\t\tactualSql.append(originalSql.substring(lastIndex, startIndex));\n \t\t\tif (paramSource != null && paramSource.hasValue(paramName)) {\n \t\t\t\tObject value = paramSource.getValue(paramName);\n+\t\t\t\tif (value instanceof SqlParameterValue) {\n+\t\t\t\t\tvalue = ((SqlParameterValue) value).getValue();\n+\t\t\t\t}\n \t\t\t\tif (value instanceof Collection) {\n \t\t\t\t\tIterator entryIter = ((Collection) value).iterator();\n \t\t\t\t\tint k = 0;",
    "output": "substituteNamedParameters detects and unwraps SqlParameterValue objects"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n@@ -111,9 +111,9 @@ public HttpHeaders getHeaders() {\n \t\t\t\t\tthis.servletRequest.getCharacterEncoding() != null) {\n \t\t\t\tMediaType oldContentType = this.headers.getContentType();\n \t\t\t\tCharset charSet = Charset.forName(this.servletRequest.getCharacterEncoding());\n-                Map<String, String> params = new HashMap<String, String>(oldContentType.getParameters());\n-                params.put(\"charset\", charSet.toString());\n-                MediaType newContentType = new MediaType(oldContentType.getType(), oldContentType.getSubtype(), params);\n+\t\t\t\tMap<String, String> params = new HashMap<String, String>(oldContentType.getParameters());\n+\t\t\t\tparams.put(\"charset\", charSet.toString());\n+\t\t\t\tMediaType newContentType = new MediaType(oldContentType.getType(), oldContentType.getSubtype(), params);\n \t\t\t\tthis.headers.setContentType(newContentType);\n \t\t\t}\n \t\t\tif (this.headers.getContentLength() == -1 && this.servletRequest.getContentLength() != -1) {",
    "output": "Replace spaces with tabs"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java b/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java\n@@ -142,10 +142,20 @@ private String resolveName() {\n \tprivate MethodParameter resolveMethodParameter() {\n \t\tMethodParameter read = resolveReadMethodParameter();\n \t\tMethodParameter write = resolveWriteMethodParameter();\n-\t\tif (read == null && write == null) {\n-\t\t\tthrow new IllegalStateException(\"Property is neither readable nor writeable\");\n+\t\tif (write == null) {\n+\t\t\tif (read == null) {\n+\t\t\t\tthrow new IllegalStateException(\"Property is neither readable nor writeable\");\n+\t\t\t}\n+\t\t\treturn read;\n+\t\t}\n+\t\tif (read != null) {\n+\t\t\tClass<?> readType = read.getParameterType();\n+\t\t\tClass<?> writeType = write.getParameterType();\n+\t\t\tif (!writeType.equals(readType) && writeType.isAssignableFrom(readType)) {\n+\t\t\t\treturn read;\n+\t\t\t}\n \t\t}\n-\t\treturn (write != null ? write : read);\n+\t\treturn write;\n \t}\n \t\n \tprivate MethodParameter resolveReadMethodParameter() {",
    "output": "restore preference for covariant return type if applicable"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/OrderComparator.java b/org.springframework.core/src/main/java/org/springframework/core/OrderComparator.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/OrderComparator.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/OrderComparator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,7 +40,7 @@ public class OrderComparator implements Comparator<Object> {\n \t/**\n \t * Shared default instance of OrderComparator.\n \t */\n-\tpublic static OrderComparator INSTANCE = new OrderComparator();\n+\tpublic static final OrderComparator INSTANCE = new OrderComparator();\n \n \n \tpublic int compare(Object o1, Object o2) {",
    "output": "INSTANCE constant should be marked as final"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,7 +28,6 @@\n import javax.validation.Validator;\n import javax.validation.ValidatorContext;\n import javax.validation.ValidatorFactory;\n-import javax.validation.spi.ValidationProvider;\n \n import org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator;\n \n@@ -87,7 +86,7 @@ public class LocalValidatorFactoryBean extends SpringValidatorAdapter\n \t * @see javax.validation.Validation#byDefaultProvider()\n \t */\n \t@SuppressWarnings(\"rawtypes\")\n-\tpublic void setProviderClass(Class<? extends ValidationProvider> providerClass) {\n+\tpublic void setProviderClass(Class providerClass) {\n \t\tthis.providerClass = providerClass;\n \t}\n ",
    "output": "remove optional javax.validation.spi dependency"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -170,8 +170,8 @@ public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {\n \t\t\t\t\t\tcontinue ALL_METHODS;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tif (method == pd.getReadMethod()\n-\t\t\t\t\t\t|| (pd instanceof IndexedPropertyDescriptor && method == ((IndexedPropertyDescriptor) pd).getIndexedReadMethod())) {\n+\t\t\t\tif (method.equals(pd.getReadMethod())\n+\t\t\t\t\t\t|| (pd instanceof IndexedPropertyDescriptor && method.equals(((IndexedPropertyDescriptor) pd).getIndexedReadMethod()))) {\n \t\t\t\t\t// yes -> copy it, including corresponding setter method (if any -- may be null)\n \t\t\t\t\tif (pd instanceof IndexedPropertyDescriptor) {\n \t\t\t\t\t\tthis.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod(), ((IndexedPropertyDescriptor)pd).getIndexedReadMethod(), ((IndexedPropertyDescriptor)pd).getIndexedWriteMethod());",
    "output": "Fix method equality bug in ExtendedBeanInfo A number of users reported issues with comparing method identity vs equivalence when discovering JavaBeans property methods in ExtendedBeanInfo. This commit updates the implementation to consistently use '.equals' instead of '=='. Issue: ,"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -787,7 +787,7 @@ else if (strategyAndRegion.length > 0) {\n \t\t\t\tconfigTimeTransactionManagerHolder.remove();\n \t\t\t}\n \t\t\tif (this.cacheRegionFactory != null) {\n-\t\t\t\tconfigTimeCacheProviderHolder.remove();\n+\t\t\t\tconfigTimeRegionFactoryHolder.remove();\n \t\t\t}\n \t\t\tif (this.cacheProvider != null) {\n \t\t\t\tconfigTimeCacheProviderHolder.remove();\n@@ -862,7 +862,7 @@ protected SessionFactory newSessionFactory(Configuration config) throws Hibernat\n \n \t/**\n \t * Return the Configuration object used to build the SessionFactory.\n-\t * Allows access to configuration metadata stored there (rarely needed).\n+\t * Allows for access to configuration metadata stored there (rarely needed).\n \t * @throws IllegalStateException if the Configuration object has not been initialized yet\n \t */\n \tpublic final Configuration getConfiguration() {",
    "output": "fix \"configTimeRegionFactoryHolder\" reset"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java\n@@ -39,7 +39,15 @@ public class EhCacheCacheManager extends AbstractCacheManager {\n \n \n \t/**\n-\t * Set the backing EhCache {@link net.sf.ehcache.CacheManager}.\n+\t * Returns the backing Ehcache {@link net.sf.ehcache.CacheManager}.\n+\t * @return\n+\t */\n+\tpublic net.sf.ehcache.CacheManager getCacheManager() {\n+\t\treturn cacheManager;\n+\t}\n+\n+\t/**\n+\t * Sets the backing EhCache {@link net.sf.ehcache.CacheManager}.\n \t */\n \tpublic void setCacheManager(net.sf.ehcache.CacheManager cacheManager) {\n \t\tthis.cacheManager = cacheManager;\n@@ -75,5 +83,4 @@ public Cache getCache(String name) {\n \t\t}\n \t\treturn cache;\n \t}\n-\n-}\n+}\n\\ No newline at end of file",
    "output": "add getCacheManagerfor access to native class"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -244,7 +244,7 @@ else if (convertedValue instanceof String && !requiredType.isInstance(convertedV\n \t\t}\n \n \t\tif (firstAttemptEx != null) {\n-\t\t\tif (editor == null) {\n+\t\t\tif (editor == null && convertedValue == newValue) {\n \t\t\t\tthrow firstAttemptEx;\n \t\t\t}\n \t\t\tlogger.debug(\"Original ConversionService attempt failed - ignored since \" +",
    "output": "correctly handle ParseException from Formatter for String->String case"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -53,7 +53,7 @@ protected void doParse(Element element, BeanDefinitionBuilder builder) {\n \n \t\tString fileEncoding = element.getAttribute(\"file-encoding\");\n \t\tif (StringUtils.hasLength(fileEncoding)) {\n-\t\t\tbuilder.addPropertyReference(\"fileEncoding\", fileEncoding);\n+\t\t\tbuilder.addPropertyValue(\"fileEncoding\", fileEncoding);\n \t\t}\n \n \t\tString order = element.getAttribute(\"order\");",
    "output": "\"file-encoding\" attribute value is being applied correctly"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java\n@@ -79,10 +79,12 @@ public abstract class QuartzJobBean implements Job {\n \n \tstatic {\n \t\ttry {\n-\t\t\tgetSchedulerMethod = JobExecutionContext.class.getMethod(\"getScheduler\");\n-\t\t\tgetMergedJobDataMapMethod = JobExecutionContext.class.getMethod(\"getMergedJobDataMap\");\n+\t\t\tClass jobExecutionContextClass =\n+\t\t\t\t\tQuartzJobBean.class.getClassLoader().loadClass(\"org.quartz.JobExecutionContext\");\n+\t\t\tgetSchedulerMethod = jobExecutionContextClass.getMethod(\"getScheduler\");\n+\t\t\tgetMergedJobDataMapMethod = jobExecutionContextClass.getMethod(\"getMergedJobDataMap\");\n \t\t}\n-\t\tcatch (NoSuchMethodException ex) {\n+\t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Incompatible Quartz API: \" + ex);\n \t\t}\n \t}",
    "output": "correct fix for QuartzJobBean to work with Quartz 2.0/2.1"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -390,7 +390,7 @@ private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {\n \tprivate SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {\n \t\tSpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo();\n \t\tscannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName);\n-\t\tscannedUnit.excludeUnlistedClasses();\n+\t\tscannedUnit.setExcludeUnlistedClasses(true);\n \t\tif (this.packagesToScan != null) {\n \t\t\tfor (String pkg : this.packagesToScan) {\n \t\t\t\ttry {",
    "output": "fix \"packagesToScan\" to avoid additional provider scan"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -53,7 +53,7 @@ protected void doParse(Element element, BeanDefinitionBuilder builder) {\n \n \t\tString fileEncoding = element.getAttribute(\"file-encoding\");\n \t\tif (StringUtils.hasLength(fileEncoding)) {\n-\t\t\tbuilder.addPropertyReference(\"fileEncoding\", fileEncoding);\n+\t\t\tbuilder.addPropertyValue(\"fileEncoding\", fileEncoding);\n \t\t}\n \n \t\tString order = element.getAttribute(\"order\");",
    "output": "\"file-encoding\" attribute value is being applied correctly"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/QuartzJobBean.java\n@@ -79,10 +79,12 @@ public abstract class QuartzJobBean implements Job {\n \n \tstatic {\n \t\ttry {\n-\t\t\tgetSchedulerMethod = JobExecutionContext.class.getMethod(\"getScheduler\");\n-\t\t\tgetMergedJobDataMapMethod = JobExecutionContext.class.getMethod(\"getMergedJobDataMap\");\n+\t\t\tClass jobExecutionContextClass =\n+\t\t\t\t\tQuartzJobBean.class.getClassLoader().loadClass(\"org.quartz.JobExecutionContext\");\n+\t\t\tgetSchedulerMethod = jobExecutionContextClass.getMethod(\"getScheduler\");\n+\t\t\tgetMergedJobDataMapMethod = jobExecutionContextClass.getMethod(\"getMergedJobDataMap\");\n \t\t}\n-\t\tcatch (NoSuchMethodException ex) {\n+\t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Incompatible Quartz API: \" + ex);\n \t\t}\n \t}",
    "output": "correct fix for QuartzJobBean to work with Quartz 2.0/2.1"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -390,7 +390,7 @@ private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {\n \tprivate SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {\n \t\tSpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo();\n \t\tscannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName);\n-\t\tscannedUnit.excludeUnlistedClasses();\n+\t\tscannedUnit.setExcludeUnlistedClasses(true);\n \t\tif (this.packagesToScan != null) {\n \t\t\tfor (String pkg : this.packagesToScan) {\n \t\t\t\ttry {",
    "output": "fix \"packagesToScan\" to avoid additional provider scan"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/SessionHolder.java b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/SessionHolder.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/SessionHolder.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/SessionHolder.java\n@@ -73,7 +73,6 @@ public FlushMode getPreviousFlushMode() {\n \t@Override\n \tpublic void clear() {\n \t\tsuper.clear();\n-\t\tthis.session = null;\n \t\tthis.transaction = null;\n \t\tthis.previousFlushMode = null;\n \t}",
    "output": "do not reset Session itself on \"clear\" in order to properly interact with Open Session in View"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n@@ -252,13 +252,14 @@ public Object intercept(Object enhancedConfigInstance, Method beanMethod, Object\n \t\t\t// is the same as that of referring to a FactoryBean within XML. See SPR-6602.\n \t\t\tif (factoryContainsBean('&'+beanName) && factoryContainsBean(beanName)) {\n \t\t\t\tObject factoryBean = this.beanFactory.getBean('&'+beanName);\n-\t\t\t    if (factoryBean instanceof ScopedProxyFactoryBean) {\n-\t\t\t    \t// pass through - scoped proxy factory beans are a special case and should not\n-\t\t\t    \t// be further proxied\n-\t\t\t    } else {\n-\t\t\t    \t// it is a candidate FactoryBean - go ahead with enhancement\n-\t\t\t    \treturn enhanceFactoryBean(factoryBean.getClass(), beanName);\n-\t\t\t    }\n+\t\t\t\tif (factoryBean instanceof ScopedProxyFactoryBean) {\n+\t\t\t\t\t// pass through - scoped proxy factory beans are a special case and should not\n+\t\t\t\t\t// be further proxied\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t// it is a candidate FactoryBean - go ahead with enhancement\n+\t\t\t\t\treturn enhanceFactoryBean(factoryBean.getClass(), beanName);\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\tboolean factoryIsCaller = beanMethod.equals(SimpleInstantiationStrategy.getCurrentlyInvokedFactoryMethod());",
    "output": "Polish whitespace in ConfigurationClassEnhancer"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java b/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java\n@@ -86,7 +86,7 @@ public class PersistenceExceptionTranslationPostProcessor extends ProxyConfig\n \t * @param repositoryAnnotationType the desired annotation type\n \t */\n \tpublic void setRepositoryAnnotationType(Class<? extends Annotation> repositoryAnnotationType) {\n-\t\tAssert.notNull(repositoryAnnotationType, \"'requiredAnnotationType' must not be null\");\n+\t\tAssert.notNull(repositoryAnnotationType, \"'repositoryAnnotationType' must not be null\");\n \t\tthis.repositoryAnnotationType = repositoryAnnotationType;\n \t}\n ",
    "output": "fix assertion message"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java\n@@ -128,7 +128,8 @@\n \t * Declares the type filter to be used as an {@linkplain ComponentScan#includeFilters()\n \t * include filter} or {@linkplain ComponentScan#includeFilters() exclude filter}.\n \t */\n-\t@Retention(RetentionPolicy.SOURCE)\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\t@Target({})\n \t@interface Filter {\n \t\t/**\n \t\t * The type of filter to use.",
    "output": "Constrain targets for @Filter declaration For clarity, add @Target({}) to definition of @Filter, constraining it to complex annotation composition only; i.e. it cannot be placed on any element, only within annotations, e.g. @ComponentScan(includeFilters=@Filter(...)) is legal, while @Filter public class MyType { } is not. Also, widen @Retention from SOURCE to RUNTIME, even though it is not technically necessary, as all parsing of @Filter annotations happens via ASM, i.e. at the source level. This change is made primarily for consistency (@ComponentScan's Retention is RUNTIME) and in avoidance of potential confusion or surprise on the part of those casually browsing the code"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n@@ -127,8 +127,13 @@ protected void processConstraintViolations(Set<ConstraintViolation<Object>> viol\n \t\t\t\t\t\t\t\t\terrors.getObjectName(), errorCodes, errorArgs, violation.getMessage());\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\telse {\r\n+\t\t\t\t\t\t\tObject invalidValue = violation.getInvalidValue();\r\n+\t\t\t\t\t\t\tif (!\"\".equals(field) && invalidValue == violation.getLeafBean()) {\r\n+\t\t\t\t\t\t\t\t// bean constraint with property path: retrieve the actual property value\r\n+\t\t\t\t\t\t\t\tinvalidValue = bindingResult.getRawFieldValue(field);\r\n+\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\terror = new FieldError(\r\n-\t\t\t\t\t\t\t\t\terrors.getObjectName(), nestedField, violation.getInvalidValue(), false,\r\n+\t\t\t\t\t\t\t\t\terrors.getObjectName(), nestedField, invalidValue, false,\r\n \t\t\t\t\t\t\t\t\terrorCodes, errorArgs, violation.getMessage());\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\tbindingResult.addError(error);\r",
    "output": "restore SpringValidatorAdapter's ability to handle bean constraints with property paths"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java\n@@ -507,6 +507,13 @@ else if (method.getName().equals(\"hashCode\")) {\n \t\t\t\t\t// Use hashCode of EntityManagerFactory proxy.\n \t\t\t\t\treturn System.identityHashCode(proxy);\n \t\t\t\t}\n+\t\t\t\telse if (method.getName().equals(\"unwrap\")) {\n+\t\t\t\t\t// Handle JPA 2.1 unwrap method - could be a proxy match.\n+\t\t\t\t\tClass targetClass = (Class) args[0];\n+\t\t\t\t\tif (targetClass == null || targetClass.isInstance(proxy)) {\n+\t\t\t\t\t\treturn proxy;\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\treturn this.entityManagerFactoryBean.invokeProxyMethod(method, args);\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {",
    "output": "add support for JPA 2.1 unwrap method on EntityManagerFactory interface"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -16,14 +16,11 @@\n \n package org.springframework.core.annotation;\n \n-import java.io.IOException;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.WeakHashMap;\n ",
    "output": "remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2010 the original author or authors.\r\n+ * Copyright 2002-2011 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -100,9 +100,13 @@ public boolean exists() {\n \t\t\t\t\t\t(con instanceof HttpURLConnection ? (HttpURLConnection) con : null);\r\n \t\t\t\tif (httpCon != null) {\r\n \t\t\t\t\thttpCon.setRequestMethod(\"HEAD\");\r\n-\t\t\t\t\tif (httpCon.getResponseCode() == HttpURLConnection.HTTP_OK) {\r\n+\t\t\t\t\tint code = httpCon.getResponseCode();\r\n+\t\t\t\t\tif (code == HttpURLConnection.HTTP_OK) {\r\n \t\t\t\t\t\treturn true;\r\n \t\t\t\t\t}\r\n+\t\t\t\t\telse if (code == HttpURLConnection.HTTP_NOT_FOUND) {\r\n+\t\t\t\t\t\treturn false;\r\n+\t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t\tif (con.getContentLength() >= 0) {\r\n \t\t\t\t\treturn true;\r",
    "output": "refined Resource \"exists\" check for HTTP URLs to always return false for 404 status"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n@@ -263,8 +263,18 @@ public static void applyTransactionTimeout(Query query, EntityManagerFactory emf\n \t\tEntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf);\n \t\tif (emHolder != null && emHolder.hasTimeout()) {\n \t\t\tint timeoutValue = (int) emHolder.getTimeToLiveInMillis();\n-\t\t\tquery.setHint(\"javax.persistence.lock.timeout\", timeoutValue);\n-\t\t\tquery.setHint(\"javax.persistence.query.timeout\", timeoutValue);\n+\t\t\ttry {\n+\t\t\t\tquery.setHint(\"javax.persistence.lock.timeout\", timeoutValue);\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\t// oh well, at least we tried...\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tquery.setHint(\"javax.persistence.query.timeout\", timeoutValue);\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\t// once again, at least we tried...\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "JPA EntityManagerFactoryUtils silently ignores IllegalArgumentExceptions from setHint calls"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n@@ -307,7 +307,9 @@ public void afterPropertiesSet() throws IOException {\n \t\t\tsfb.addPackages(this.annotatedPackages);\r\n \t\t}\r\n \r\n-\t\tsfb.scanPackages(this.packagesToScan);\r\n+\t\tif (this.packagesToScan != null) {\r\n+\t\t\tsfb.scanPackages(this.packagesToScan);\r\n+\t\t}\r\n \r\n \t\tthis.sessionFactory = sfb.buildSessionFactory();\r\n \t}\r",
    "output": "allow \"packagesToScan\" to be optional on LocalSessionFactoryBean"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java b/org.springframework.core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2009 the original author or authors.\r\n+ * Copyright 2002-2011 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -92,6 +92,16 @@ public V put(String key, V value) {\n \t\treturn super.put(key, value);\r\n \t}\r\n \r\n+\t@Override\r\n+\tpublic void putAll(Map<? extends String, ? extends V> map) {\r\n+\t\tif (map.isEmpty()) {\r\n+\t\t\treturn;\r\n+\t\t}\r\n+\t\tfor (Map.Entry<? extends String, ? extends V> entry : map.entrySet()) {\r\n+\t\t\tput(entry.getKey(), entry.getValue());\r\n+\t\t}\r\n+\t}\r\n+\r\n \t@Override\r\n \tpublic boolean containsKey(Object key) {\r\n \t\treturn (key instanceof String && this.caseInsensitiveKeys.containsKey(convertKey((String) key)));\r",
    "output": "LinkedCaseInsensitiveMap overrides putAll method as well (for IBM JDK 1.6 compatibility; )"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,18 +80,14 @@ public StandardEvaluationContext(Object rootObject) {\n \t}\n \n \n-\tpublic void setRootObject(Object rootObject) {\n-\t\tif (this.rootObject == null) {\n-\t\t\tthis.rootObject = TypedValue.NULL;\n-\t\t} else {\n-\t\t\tthis.rootObject = new TypedValue(rootObject);//, TypeDescriptor.forObject(rootObject));\n-\t\t}\n-\t}\n-\n \tpublic void setRootObject(Object rootObject, TypeDescriptor typeDescriptor) {\n \t\tthis.rootObject = new TypedValue(rootObject, typeDescriptor);\n \t}\n \n+\tpublic void setRootObject(Object rootObject) {\n+\t\tthis.rootObject = (rootObject != null ? new TypedValue(rootObject) : TypedValue.NULL);\n+\t}\n+\n \tpublic TypedValue getRootObject() {\n \t\treturn this.rootObject;\n \t}",
    "output": "fix setRootObject check in StandardEvaluationContext"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n@@ -151,6 +151,11 @@ public int hashCode() {\n \t\treturn getMetadata().getClassName().hashCode();\n \t}\n \n+\t@Override\n+\tpublic String toString() {\n+\t\treturn String.format(\"[ConfigurationClass:beanName=%s,resource=%s]\", this.beanName, this.resource);\n+\t}\n+\n \n \t/**\n \t * Configuration classes must be non-final to accommodate CGLIB subclassing.",
    "output": "Provide ConfigurationClass#toString implementation For ease during debugging; prompted while fixing"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java b/org.springframework.core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java\n@@ -47,7 +47,7 @@\n  *\n  * @author Chris Beams\n  */\n-public class EnvironmentTests {\n+public class StandardEnvironmentTests {\n \n \tprivate static final String ALLOWED_PROPERTY_NAME = \"theanswer\";\n \tprivate static final String ALLOWED_PROPERTY_VALUE = \"42\";",
    "output": "Rename EnvironmentTests => StandardEnvironmentTests"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java\n@@ -117,7 +117,7 @@ String merge(Element element, ReaderContext readerCtx) {\n \tprivate static final String CACHE_EVICT_ELEMENT = \"cache-evict\";\n \tprivate static final String CACHE_PUT_ELEMENT = \"cache-put\";\n \tprivate static final String METHOD_ATTRIBUTE = \"method\";\n-\tprivate static final String DEFS_ELEMENT = \"definitions\";\n+\tprivate static final String DEFS_ELEMENT = \"caching\";\n \n \t@Override\n \tprotected Class<?> getBeanClass(Element element) {",
    "output": "+ add docs + rename cache:definitions to cache:caching (to be consistent with annotations)"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/MediaType.java b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/MediaType.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java\n@@ -575,6 +575,9 @@ public static MediaType parseMediaType(String mediaType) {\n \t\t}\n \t\tString type = fullType.substring(0, subIndex);\n \t\tString subtype = fullType.substring(subIndex + 1, fullType.length());\n+\t\tif (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {\n+\t\t\tthrow new IllegalArgumentException(\"A wildcard type is legal only in '*/*' (all media types).\");\n+\t\t}\n \n \t\tMap<String, String> parameters = null;\n \t\tif (parts.length > 1) {\n\ndiff --git a/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java\n@@ -128,6 +128,11 @@ public void parseMediaTypeNoSubtypeSlash() {\n \t\tMediaType.parseMediaType(\"audio/\");\n \t}\n \n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void parseMediaTypeTypeRange() {\n+\t\tMediaType.parseMediaType(\"*/json\");\n+\t}\n+\n \t@Test(expected = IllegalArgumentException.class)\n \tpublic void parseMediaTypeIllegalType() {\n \t\tMediaType.parseMediaType(\"audio(/basic\");",
    "output": "Flag '*/subtype' as illegal"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/ResourceLoaderClassLoadHelper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -75,6 +75,11 @@ public Class loadClass(String name) throws ClassNotFoundException {\n \t\treturn this.resourceLoader.getClassLoader().loadClass(name);\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> Class<? extends T> loadClass(String name, Class<T> clazz) throws ClassNotFoundException {\n+        return loadClass(name);\n+    }\n+\n \tpublic URL getResource(String name) {\n \t\tResource resource = this.resourceLoader.getResource(name);\n \t\ttry {",
    "output": "add Quartz 2.1 loadClass variant"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractCacheAdviceNamespaceTests.java b/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractCacheAdviceNamespaceTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractCacheAdviceNamespaceTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractCacheAdviceNamespaceTests.java\n@@ -24,7 +24,7 @@\n /**\r\n  * @author Costin Leau\r\n  */\r\n-public abstract class CacheAdviceNamespaceTests extends AbstractAnnotationTests {\r\n+public abstract class AbstractCacheAdviceNamespaceTests extends AbstractAnnotationTests {\r\n \r\n \r\n \t@Override\r",
    "output": "+ rename test (as otherwise it gets picked even if it's abstract)"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/cache/config/CacheAdviceNamespaceTests.java b/org.springframework.context/src/test/java/org/springframework/cache/config/CacheAdviceNamespaceTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/cache/config/CacheAdviceNamespaceTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/cache/config/CacheAdviceNamespaceTests.java\n@@ -24,7 +24,7 @@\n /**\r\n  * @author Costin Leau\r\n  */\r\n-public class CacheAdviceNamespaceTests extends AbstractAnnotationTests {\r\n+public abstract class CacheAdviceNamespaceTests extends AbstractAnnotationTests {\r\n \r\n \r\n \t@Override\r",
    "output": "+ temporarily disable XML defs (since cache-update and cache-definition are not yet supported)"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java\n@@ -336,6 +336,8 @@ public UriComponents expand(Object... uriVariableValues) {\n \t}\n \n \tprivate UriComponents expandInternal(UriTemplateVariables uriVariables) {\n+\t\tAssert.state(!encoded, \"Cannot expand an already encoded UriComponents object\");\n+\t\t\n \t\tString expandedScheme = expandUriComponent(this.scheme, uriVariables);\n \t\tString expandedUserInfo = expandUriComponent(this.userInfo, uriVariables);\n \t\tString expandedHost = expandUriComponent(this.host, uriVariables);\n\ndiff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriComponentsTests.java\n@@ -54,4 +54,9 @@ public void expand() {\n \t\tassertEquals(\"http://example.com/1 2 3 4\", uriComponents.toUriString());\n \t}\n \n+\t@Test(expected = IllegalStateException.class)\n+\tpublic void expandEncoded() {\n+\t\tUriComponentsBuilder.fromPath(\"/{foo}\").build().encode().expand(\"bar\");\n+\t}\n+\n }",
    "output": "Add check for expanding already encoded UriComponents object"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptorUtils.java b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptorUtils.java\n--- a/org.springframework.context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptorUtils.java\n+++ b/org.springframework.context/src/main/java/org/springframework/remoting/rmi/RmiClientInterceptorUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,6 +18,7 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.net.SocketException;\n import java.rmi.ConnectException;\n import java.rmi.ConnectIOException;\n import java.rmi.NoSuchObjectException;\n@@ -211,8 +212,8 @@ public static Exception convertRmiAccessException(\n \tpublic static boolean isConnectFailure(RemoteException ex) {\n \t\treturn (ex instanceof ConnectException || ex instanceof ConnectIOException ||\n \t\t\t\tex instanceof UnknownHostException || ex instanceof NoSuchObjectException ||\n-\t\t\t\tex instanceof StubNotFoundException || isCorbaConnectFailure(ex.getCause()) ||\n-\t\t\t\tORACLE_CONNECTION_EXCEPTION.equals(ex.getClass().getName()));\n+\t\t\t\tex instanceof StubNotFoundException || ex.getCause() instanceof SocketException ||\n+\t\t\t\tisCorbaConnectFailure(ex.getCause()) || ORACLE_CONNECTION_EXCEPTION.equals(ex.getClass().getName()));\n \t}\n \n \t/**",
    "output": "RmiClientInterceptor detects nested SocketException as connect failure as well"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/ByteArrayResource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,6 +80,14 @@ public boolean exists() {\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * This implementation returns the length of the underlying byte array.\n+\t */\n+\t@Override\n+\tpublic long contentLength() {\n+\t\treturn this.byteArray.length;\n+\t}\n+\n \t/**\n \t * This implementation returns a ByteArrayInputStream for the\n \t * underlying byte array.",
    "output": "add proper \"contentLength\" implementation to ByteArrayResource"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n@@ -194,8 +194,8 @@ public void afterPropertiesSet() throws ClassNotFoundException, NoSuchMethodExce\n \t\t// Build JobDetail instance.\n \t\tif (jobDetailImplClass != null) {\n \t\t\t// Using Quartz 2.0 JobDetailImpl class...\n-\t\t\tObject jobDetail = BeanUtils.instantiate(jobDetailImplClass);\n-\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(jobDetail);\n+\t\t\tthis.jobDetail = (JobDetail) BeanUtils.instantiate(jobDetailImplClass);\n+\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this.jobDetail);\n \t\t\tbw.setPropertyValue(\"name\", name);\n \t\t\tbw.setPropertyValue(\"group\", this.group);\n \t\t\tbw.setPropertyValue(\"jobClass\", jobClass);",
    "output": "fix MethodInvokingJobDetailFactoryBean's Quartz 2.0 support"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java\n@@ -97,11 +97,19 @@ public void setStatusCodes(Properties statusCodes) {\n \t\t}\n \t}\n \n+\t/**\n+\t * An alternative to {@link #setStatusCodes(Properties)} for use with \n+\t * Java-based configuration.\n+\t */\n+\tpublic void addStatusCode(String viewName, int statusCode) {\n+\t\tthis.statusCodes.put(viewName, statusCode);\n+\t}\n+\t\n \t/**\n \t * Returns the HTTP status codes provided via {@link #setStatusCodes(Properties)}.\n \t * Keys are view names; values are status codes.\n \t */\n-\tpublic Map<String, Integer> getStatusCodes() {\n+\tpublic Map<String, Integer> getStatusCodesAsMap() {\n \t\treturn Collections.unmodifiableMap(statusCodes);\n \t}\n ",
    "output": "Provide methods to add or get status codes in SimpleMappingExceptionResolver as Map<String, Integer>"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java\n@@ -54,6 +54,7 @@\n  * @see org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor\n  * @see AbstractBeanDefinition#getDestroyMethodName()\n  */\n+@SuppressWarnings(\"serial\")\n class DisposableBeanAdapter implements DisposableBean, Runnable, Serializable {\n \n \tprivate static final Log logger = LogFactory.getLog(DisposableBeanAdapter.class);\n@@ -106,7 +107,7 @@ public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition be\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tClass[] paramTypes = this.destroyMethod.getParameterTypes();\n+\t\t\t\tClass<?>[] paramTypes = this.destroyMethod.getParameterTypes();\n \t\t\t\tif (paramTypes.length > 1) {\n \t\t\t\t\tthrow new BeanDefinitionValidationException(\"Method '\" + destroyMethodName + \"' of bean '\" +\n \t\t\t\t\t\t\tbeanName + \"' has more than one parameter - not supported as destroy method\");\n@@ -239,7 +240,7 @@ private Method findDestroyMethod() {\n \t * assuming a \"force\" parameter), else logging an error.\n \t */\n \tprivate void invokeCustomDestroyMethod(final Method destroyMethod) {\n-\t\tClass[] paramTypes = destroyMethod.getParameterTypes();\n+\t\tClass<?>[] paramTypes = destroyMethod.getParameterTypes();\n \t\tfinal Object[] args = new Object[paramTypes.length];\n \t\tif (paramTypes.length == 1) {\n \t\t\targs[0] = Boolean.TRUE;",
    "output": "Fix warnings in DisposableBeanAdapter"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java\n@@ -154,7 +154,10 @@ public SessionTransactionData(Session session, FlushMode previousFlushMode) {\n \t\t}\n \n \t\tpublic void cleanup() {\n-\t\t\tTransactionSynchronizationManager.unbindResource(this.session.getSessionFactory());\n+\t\t\tSessionFactory sessionFactory = this.session.getSessionFactory();\n+\t\t\tif (TransactionSynchronizationManager.hasResource(sessionFactory)) {\n+\t\t\t\tTransactionSynchronizationManager.unbindResource(sessionFactory);\n+\t\t\t}\n \t\t\tif (this.previousFlushMode != null) {\n \t\t\t\tthis.session.setFlushMode(this.previousFlushMode);\n \t\t\t}",
    "output": "fix unbind failure through appropriate guard"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java\n@@ -152,7 +152,9 @@ public void afterPropertiesSet() {\n \t\tconfig.getProperties().put(Environment.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName());\r\n \t\tconfig.getProperties().put(Environment.DATASOURCE, this.dataSource);\r\n \t\tconfig.getProperties().put(\"hibernate.classLoader.application\", this.resourcePatternResolver.getClassLoader());\r\n-\t\tconfig.addProperties(this.hibernateProperties);\r\n+\t\tif (this.hibernateProperties != null) {\r\n+\t\t\tconfig.addProperties(this.hibernateProperties);\r\n+\t\t}\r\n \t\tscanPackages(config);\r\n \t\tfor (Class<?> annotatedClass : this.annotatedClasses) {\r\n \t\t\tReflectionUtils.invokeMethod(addAnnotatedClassMethod, config, annotatedClass);\r",
    "output": "avoid NPE in case of no \"hibernateProperties\" specified"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java\n@@ -47,7 +47,7 @@\n  * @since 3.1\n  * @see CachedIntrospectionResults\n  */\n-public class ExtendedBeanInfo implements BeanInfo {\n+class ExtendedBeanInfo implements BeanInfo {\n \tprivate final BeanInfo delegate;\n \tprivate final SortedSet<PropertyDescriptor> propertyDescriptors =\n \t\tnew TreeSet<PropertyDescriptor>(new PropertyDescriptorComparator());",
    "output": "Give ExtendedBeanInfo package-private visibility Issue"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java\n@@ -105,7 +105,7 @@ public static ParsedSql parseSqlStatement(final String sql) {\n \t\t\t\t\t// :{x} style parameter\n \t\t\t\t\twhile (j < statement.length && !('}' == statement[j])) {\n \t\t\t\t\t\tj++;\n-\t\t\t\t\t\tif (':' == statement[j] || '{' == statement[j] || isParameterSeparator(statement[j])) {\n+\t\t\t\t\t\tif (':' == statement[j] || '{' == statement[j]) {\n \t\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\"Parameter name contains invalid character '\" + statement[j] + \"' at position \" + i + \" in statement \" + sql);\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
    "output": "Improve named parameter parsing skipping escaped colons like '\\:' and allowing for delimiting parameter names with curly brackets like :{p1}"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java\n@@ -345,10 +345,11 @@ protected int writeTagContent(TagWriter tagWriter) throws JspException {\n \t\ttagWriter.forceBlock();\n \n \t\tif (!isMethodBrowserSupported(getMethod())) {\n+\t\t\tString inputType = \"hidden\";\n \t\t\ttagWriter.startTag(INPUT_TAG);\n-\t\t\twriteOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, \"hidden\");\n+\t\t\twriteOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, inputType);\n \t\t\twriteOptionalAttribute(tagWriter, NAME_ATTRIBUTE, getMethodParameter());\n-\t\t\twriteOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, getMethod());\n+\t\t\twriteOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, processFieldValue(getName(), getMethod(), inputType));\n \t\t\ttagWriter.endTag();\n \t\t}\n ",
    "output": "Add one missing call to RequestDataValueProcessor in FormTag"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n@@ -247,6 +247,7 @@ public static String encodeFragment(String fragment, String encoding) throws Uns\n \t * @param source the source string\n \t * @param encoding the encoding\n \t * @return the decoded URI\n+\t * @throws IllegalArgumentException when the given source contains invalid encoded sequences\n \t * @throws UnsupportedEncodingException when the given encoding parameter is not supported\n \t * @see java.net.URLDecoder#decode(String, String)\n \t */\n@@ -264,6 +265,9 @@ public static String decode(String source, String encoding) throws UnsupportedEn\n \t\t\t\t\tchar hex2 = source.charAt(i + 2);\n \t\t\t\t\tint u = Character.digit(hex1, 16);\n \t\t\t\t\tint l = Character.digit(hex2, 16);\n+\t\t\t\t\tif (u == -1 || l == -1) {\n+\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\n+\t\t\t\t\t}\n \t\t\t\t\tbos.write((char) ((u << 4) + l));\n \t\t\t\t\ti += 2;\n \t\t\t\t\tchanged = true;",
    "output": "UriUrils.decodenot properly rejecting invalid escaped URLs"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java\n@@ -28,7 +28,6 @@\n import org.joda.time.format.DateTimeFormat;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.beans.BeanUtils;\n@@ -190,8 +189,6 @@ public Date convert(DateTime source) {\n \t\t}\n \t}\n \t\n-\t// TODO [SPR-8718] determine why changes to GenericConversionService broke this test\n-\t@Ignore(\"Disabled until SPR-8718 is resolved\")\n \t@Test\n \tpublic void testPrintNull() throws ParseException {\n \t\tformattingService.addFormatterForFieldType(Number.class, new NumberFormatter());",
    "output": "[] re-enabled testPrintNull"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n@@ -69,8 +69,8 @@ public void tearDown() {\n \t\tLocaleContextHolder.setLocale(null);\n \t}\n \n-\t// TODO [SPR-8178] determine why changes to GenericConversionService broke this test\n-\t@Ignore(\"Disabled until SPR-8178 is resolved\")\n+\t// TODO [SPR-8718] determine why changes to GenericConversionService broke this test\n+\t@Ignore(\"Disabled until SPR-8718 is resolved\")\n \t@Test\n \tpublic void testDefaultNumberFormatting() {\n \t\tMutablePropertyValues propertyValues = new MutablePropertyValues();",
    "output": "[] now using correct JIRA ID in the comments"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java\n@@ -56,6 +56,7 @@ public void testGetContextUrlString() throws Exception {\n \t\tassertEquals(\"foo/bar\", context.getContextUrl(\"bar\"));\n \t}\n \n+\t@org.junit.Ignore // TODO: Arjen to address in SPR-5973\n \t@Test\n \tpublic void testGetContextUrlStringMap() throws Exception {\n \t\trequest.setContextPath(\"foo/\");",
    "output": "Temporarily @Ignore failure in RequestContextTests Issue"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.http.client.support;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import org.springframework.http.client.ClientHttpRequestFactory;\n@@ -33,7 +34,7 @@\n  */\n public abstract class InterceptingHttpAccessor extends HttpAccessor {\n \n-\tprivate List<ClientHttpRequestInterceptor> interceptors;\n+\tprivate List<ClientHttpRequestInterceptor> interceptors = new ArrayList<ClientHttpRequestInterceptor>();\n \n \t/**\n \t * Sets the request interceptors that this accessor should use.",
    "output": "Change ClientHttpRequestInterceptor array to List"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java\n@@ -123,7 +123,7 @@ private static boolean supports(SmartContextLoader loader, MergedContextConfigur\n \tpublic void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {\n \n \t\tAssert.notNull(configAttributes, \"configAttributes must not be null\");\n-\t\tAssert.isTrue(configAttributes.hasLocations() && configAttributes.hasClasses(), String.format(\n+\t\tAssert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(\n \t\t\t\"Cannot process locations AND configuration classes for context \"\n \t\t\t\t\t+ \"configuration %s; configure one or the other, but not both.\", configAttributes));\n ",
    "output": "[] Oops! Fixed a minor logic error in DelegatingSmartContextLoader"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java\n@@ -164,8 +164,11 @@ public PropertyValues postProcessPropertyValues(\n \t * @return <code>true</code> to skip the bean; <code>false</code> to process it\n \t */\n \tprotected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {\n-\t\treturn (beanFactory != null && beanFactory.containsBeanDefinition(beanName) &&\n-\t\t\t\tBoolean.TRUE.equals(beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)));\n+\t\tif (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tObject value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE);\n+\t\treturn (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())));\n \t}\n \n \t/**",
    "output": "RequiredAnnotationBeanPostProcessor's skip attribute accepts \"true\" as String value as well"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java b/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java\n@@ -489,6 +489,7 @@ protected void doExecuteListener(Session session, Message message) throws JMSExc\n \t * @throws JMSException if thrown by JMS API methods\n \t * @see #setMessageListener\n \t */\n+\t@SuppressWarnings(\"rawtypes\")\n \tprotected void invokeListener(Session session, Message message) throws JMSException {\n \t\tObject listener = getMessageListener();\n \t\tif (listener instanceof SessionAwareMessageListener) {\n@@ -517,7 +518,7 @@ else if (listener != null) {\n \t * @see SessionAwareMessageListener\n \t * @see #setExposeListenerSession\n \t */\n-\t@SuppressWarnings(\"unchecked\")\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n \tprotected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)\n \t\t\tthrows JMSException {\n \n@@ -700,6 +701,7 @@ else if (logger.isWarnEnabled()) {\n \t * Internal exception class that indicates a rejected message on shutdown.\n \t * Used to trigger a rollback for an external transaction manager in that case.\n \t */\n+\t@SuppressWarnings(\"serial\")\n \tprivate static class MessageRejectedWhileStoppingException extends RuntimeException {\n \n \t}",
    "output": "Polishing Javadoc and suppressing warnings"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/mock/web/MockPageContext.java b/org.springframework.test/src/main/java/org/springframework/mock/web/MockPageContext.java\n--- a/org.springframework.test/src/main/java/org/springframework/mock/web/MockPageContext.java\n+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockPageContext.java\n@@ -52,6 +52,7 @@\n  * @author Juergen Hoeller\n  * @since 1.0.2\n  */\n+@SuppressWarnings(\"deprecation\")\n public class MockPageContext extends PageContext {\n \n \tprivate final ServletContext servletContext;",
    "output": "Suppressing deprecation warnings in MockPageContext"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -1255,7 +1255,10 @@ public Map parseMapElement(Element mapEle, BeanDefinition bd) {\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\t// Child element is what we're looking for.\n-\t\t\t\t\t\tif (valueEle != null) {\n+\t\t\t\t\t\tif (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {\n+\t\t\t\t\t\t\t// the element is a <description> -> ignore it\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse if (valueEle != null) {\n \t\t\t\t\t\t\terror(\"<entry> element must not contain more than one value sub-element\", entryEle);\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse {",
    "output": "Respect <description> within <entry> per beans XSD Prior to this change, a parsing exception would be thrown if a <description> element was placed within a <map><entry/></map> element. The beans XSD has always permitted this arrangement, but BeanDefinitionParserDelegate did not respect it. The latter now simply ignores any <description> element, rather than failing. Issue"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java\n--- a/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java\n+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockMultipartFile.java\n@@ -20,8 +20,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.Iterator;\n \n import org.springframework.util.Assert;\n import org.springframework.util.FileCopyUtils;\n@@ -98,7 +96,6 @@ public MockMultipartFile(String name, String originalFilename, String contentTyp\n \t\tthis(name, originalFilename, contentType, FileCopyUtils.copyToByteArray(contentStream));\n \t}\n \n-\n \tpublic String getName() {\n \t\treturn this.name;\n \t}",
    "output": "Clean up unused imports"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java b/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java\n--- a/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java\n+++ b/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/HibernateJtaTransactionTests.java\n@@ -1685,7 +1685,6 @@ public Object doInHibernate(org.hibernate.Session sess) {\n \t\tsfiControl.verify();\n \t}\n \n-\t@Ignore(\"getting error on UserTransaction mock\")\n \t@Test\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic void testJtaSessionSynchronizationWithSpringTransactionLaterOn() throws Exception {\n@@ -1695,7 +1694,7 @@ public void testJtaSessionSynchronizationWithSpringTransactionLaterOn() throws E\n \t\tTransactionManager tm = (TransactionManager) tmControl.getMock();\n \t\tMockJtaTransaction transaction = new MockJtaTransaction();\n \t\tut.getStatus();\n-\t\tutControl.setReturnValue(Status.STATUS_ACTIVE, 2);\n+\t\tutControl.setReturnValue(Status.STATUS_ACTIVE, 1);\n \t\ttm.getTransaction();\n \t\ttmControl.setReturnValue(transaction, 6);\n ",
    "output": "fix ignored test"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,8 +70,9 @@ public static MethodInvocation currentInvocation() throws IllegalStateException\n \t\tMethodInvocation mi = invocation.get();\n \t\tif (mi == null)\n \t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"No MethodInvocation found: Check that an AOP invocation is in progress, \" +\n-\t\t\t\t\t\"and that the ExposeInvocationInterceptor is in the interceptor chain.\");\n+\t\t\t\t\t\"No MethodInvocation found: Check that an AOP invocation is in progress, and that the \" +\n+\t\t\t\t\t\"ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that \" +\n+\t\t\t\t\t\"advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!\");\n \t\treturn mi;\n \t}\n ",
    "output": "improve ExposeInvocationInterceptor error message with respect to advice ordering"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java\n@@ -108,6 +108,9 @@ else if (generatesDefaults()) {\n \t\t\t\tthrow new IllegalStateException(String.format(\"None of the SmartContextLoader candidates %s \"\n \t\t\t\t\t\t+ \"was able to detect defaults for context configuration [%s].\", candidates, configAttributes));\n \t\t\t}\n+\n+\t\t\t// TODO Throw exception if defaults were generated for both\n+\t\t\t// locations and configuration classes.\n \t\t}\n \t}\n ",
    "output": "[] Added TODO"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n@@ -308,7 +308,6 @@ static MergedContextConfiguration buildMergedContextConfiguration(Class<?> testC\n \n \t\t\tif (contextLoader instanceof SmartContextLoader) {\n \t\t\t\tSmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader;\n-\t\t\t\t// TODO Decide on mutability of locations and classes properties\n \t\t\t\tsmartContextLoader.processContextConfiguration(configAttributes);\n \t\t\t\tlocationsList.addAll(Arrays.asList(configAttributes.getLocations()));\n \t\t\t\tclassesList.addAll(Arrays.asList(configAttributes.getClasses()));",
    "output": "[] deleted resolved TODO"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -174,7 +174,7 @@ public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n \t\t\t\t\t\"postProcessBeanFactory already called for this post-processor against \" + registry);\n \t\t}\n \t\tthis.registriesPostProcessed.add(registryID);\n-\t\tprocessConfigurationClasses(registry);\n+\t\tprocessConfigBeanDefinitions(registry);\n \t}\n \n \t/**\n@@ -191,16 +191,9 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n \t\tif (!this.registriesPostProcessed.contains(factoryID)) {\n \t\t\t// BeanDefinitionRegistryPostProcessor hook apparently not supported...\n \t\t\t// Simply call processConfigurationClasses lazily at this point then.\n-\t\t\tprocessConfigurationClasses((BeanDefinitionRegistry)beanFactory);\n+\t\t\tprocessConfigBeanDefinitions((BeanDefinitionRegistry)beanFactory);\n \t\t}\n-\t}\n-\n-\t/**\n-\t * Find and process all @Configuration classes in the given registry.\n-\t */\n-\tprivate void processConfigurationClasses(BeanDefinitionRegistry registry) {\n-\t\tprocessConfigBeanDefinitions(registry);\n-\t\tenhanceConfigurationClasses((ConfigurableListableBeanFactory)registry);\n+\t\tenhanceConfigurationClasses(beanFactory);\n \t}\n \n \tprivate ConfigurationClassBeanDefinitionReader getConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry) {",
    "output": "Refactor execution of config class enhancement This change returns the invocation order of ConfigurationClassPostProcessor#enhanceConfigurationClasses to its .1 M2 state. An earlier (and now unnecessary) refactoring in service of @Feature method processing caused the change that this now reverts"
  },
  {
    "input": "diff --git a/org.springframework.test/src/test/java/org/springframework/mock/web/MockServletContextTests.java b/org.springframework.test/src/test/java/org/springframework/mock/web/MockServletContextTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/mock/web/MockServletContextTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/mock/web/MockServletContextTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,13 +16,13 @@\n \n package org.springframework.mock.web;\n \n-import static org.junit.Assert.*;\n-\n import java.util.Set;\n \n import org.junit.Ignore;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * @author Juergen Hoeller\n  * @author Chris Beams\n@@ -89,16 +89,4 @@ public void testMinorVersion() {\n \t\tassertEquals(4, sc.getMinorVersion());\n \t}\n \n-\t@Test\n-\tpublic void testIllegalMinorVersion() {\n-\t\tMockServletContext sc = new MockServletContext();\n-\t\tassertEquals(5, sc.getMinorVersion());\n-\t\ttry {\n-\t\t\tsc.setMinorVersion(2);\n-\t\t\tfail(\"expected expection for illegal argument\");\n-\t\t}\n-\t\tcatch (IllegalArgumentException iae) {\n-\t\t\t// expected\n-\t\t}\n-\t}\n }",
    "output": "extended Servlet API mocks for Servlet 3.0 forward compatibility as far as possible; made MockHttpServletResponse compatible with Servlet 3.0 getHeader(s) method returning Strings; added getHeaderValue(s) method to MockHttpServletResponse for raw value access"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n@@ -60,7 +60,7 @@ public void clear() {\n \r\n \tpublic ValueWrapper get(Object key) {\r\n \t\tElement element = cache.get(key);\r\n-\t\treturn (element != null ? new DefaultValueWrapper<Object>(element.getObjectValue()) : null);\r\n+\t\treturn (element != null ? new DefaultValueWrapper(element.getObjectValue()) : null);\r\n \t}\r\n \r\n \tpublic void put(Object key, Object value) {\r",
    "output": "+ fix compilation error"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/interceptor/DefaultValueWrapper.java b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/DefaultValueWrapper.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/interceptor/DefaultValueWrapper.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/DefaultValueWrapper.java\n@@ -23,7 +23,7 @@\n  * \r\n  * @author Costin Leau\r\n  */\r\n-public class DefaultValueWrapper<V> implements ValueWrapper {\r\n+public class DefaultValueWrapper implements ValueWrapper {\r\n \r\n \tprivate final Object value;\r\n \r",
    "output": "+ removed unneeded generic"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java b/org.springframework.aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,7 +16,9 @@\n \n package org.springframework.aop.target;\n \n+import java.io.IOException;\n import java.io.NotSerializableException;\n+import java.io.ObjectInputStream;\n import java.io.ObjectStreamException;\n \n import org.springframework.beans.BeansException;\n@@ -91,6 +93,11 @@ else if (target instanceof DisposableBean) {\n \t// Serialization support\n \t//---------------------------------------------------------------------\n \n+\tprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n+\t\tthrow new NotSerializableException(\"A prototype-based TargetSource itself is not deserializable - \" +\n+\t\t\t\t\"just a disconnected SingletonTargetSource is\");\n+\t}\n+\n \t/**\n \t * Replaces this object with a SingletonTargetSource on serialization.\n \t * Protected as otherwise it won't be invoked for subclasses.",
    "output": "prototype-based TargetSource is only deserializable through a SingletonTargetSource"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -16,7 +16,9 @@\n \n package org.springframework.beans.factory.support;\n \n+import java.io.IOException;\n import java.io.NotSerializableException;\n+import java.io.ObjectInputStream;\n import java.io.ObjectStreamException;\n import java.io.Serializable;\n import java.lang.annotation.Annotation;\n@@ -944,7 +946,7 @@ public String toString() {\n \t// Serialization support\n \t//---------------------------------------------------------------------\n \n-\tprotected Object readResolve() throws ObjectStreamException {\n+\tprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n \t\tthrow new NotSerializableException(\"DefaultListableBeanFactory itself is not deserializable - \" +\n \t\t\t\t\"just a SerializedBeanFactoryReference is\");\n \t}",
    "output": "switched from readResolve to readObject"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -990,10 +990,7 @@ else if (propValue instanceof List) {\n \t\t\t\t\toldValue = list.get(index);\n \t\t\t\t}\n \t\t\t\tObject convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));\n-\t\t\t\tif (index < size) {\n-\t\t\t\t\tlist.set(index, convertedValue);\n-\t\t\t\t}\n-\t\t\t\telse if (index >= size && index < this.autoGrowCollectionLimit) {\n+\t\t\t\tif (index >= size && index < this.autoGrowCollectionLimit) {\n \t\t\t\t\tfor (int i = size; i < index; i++) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tlist.add(null);\n@@ -1007,6 +1004,9 @@ else if (index >= size && index < this.autoGrowCollectionLimit) {\n \t\t\t\t\t}\n \t\t\t\t\tlist.add(convertedValue);\n \t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tlist.set(index, convertedValue);\n+\t\t\t\t}\n \t\t\t}\n \t\t\telse if (propValue instanceof Map) {\n \t\t\t\tPropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);",
    "output": "regular IndexOutOfBoundsException if index beyond auto-grow limit"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/SpringServletContainerInitializer.java b/org.springframework.web/src/main/java/org/springframework/web/SpringServletContainerInitializer.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/SpringServletContainerInitializer.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/SpringServletContainerInitializer.java\n@@ -139,10 +139,12 @@ public void onStartup(Set<Class<?>> webAppInitializerClasses,\n \n \t\tArrayList<WebApplicationInitializer> initializers = new ArrayList<WebApplicationInitializer>();\n \n-\t\tfor (Class<?> waiClass : webAppInitializerClasses) {\n-\t\t\tif (!Modifier.isAbstract(waiClass.getModifiers())) {\n-\t\t\t\t// the class can be instantiated -> add it\n-\t\t\t\tinitializers.add(instantiateClass(waiClass, WebApplicationInitializer.class));\n+\t\tif (webAppInitializerClasses != null) {\n+\t\t\tfor (Class<?> waiClass : webAppInitializerClasses) {\n+\t\t\t\tif (!Modifier.isAbstract(waiClass.getModifiers())) {\n+\t\t\t\t\t// the class can be instantiated -> add it\n+\t\t\t\t\tinitializers.add(instantiateClass(waiClass, WebApplicationInitializer.class));\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "Prevent NPE in SpringServletContainerInitializer Issue"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -944,6 +944,11 @@ public String toString() {\n \t// Serialization support\n \t//---------------------------------------------------------------------\n \n+\tprotected Object readResolve() throws ObjectStreamException {\n+\t\tthrow new NotSerializableException(\"DefaultListableBeanFactory itself is not deserializable - \" +\n+\t\t\t\t\"just a SerializedBeanFactoryReference is\");\n+\t}\n+\n \tprotected Object writeReplace() throws ObjectStreamException {\n \t\tif (this.serializationId != null) {\n \t\t\treturn new SerializedBeanFactoryReference(this.serializationId);",
    "output": "DefaultListableBeanFactory is only deserializable through a SerializedBeanFactoryReference"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java\n@@ -240,7 +240,7 @@ public void testExtendedResourceInjection() {\n \t\tTestBean tb4 = new TestBean();\n \t\tbf.registerSingleton(\"testBean4\", tb4);\n \t\tNestedTestBean tb6 = new NestedTestBean();\n-\t\tbf.registerSingleton(\"value\", new Object());\n+\t\tbf.registerSingleton(\"value\", \"5\");\n \t\tbf.registerSingleton(\"xy\", tb6);\n \t\tbf.registerAlias(\"xy\", \"testBean9\");\n ",
    "output": "getBean(name, type) attempts type conversion if necessary"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java\n@@ -264,12 +264,23 @@ private ExceptionMethodMapping getExceptionMethodMapping(HandlerMethod handlerMe\n \t\tExceptionMethodMapping mapping = exceptionMethodMappingCache.get(handlerType);\n \t\tif (mapping == null) {\n \t\t\tSet<Method> methods = HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHODS);\n+\t\t\textendExceptionHandlerMethods(methods, handlerType);\n \t\t\tmapping = new ExceptionMethodMapping(methods);\n \t\t\texceptionMethodMappingCache.put(handlerType, mapping);\n \t\t}\n \t\treturn mapping;\n \t}\n \n+\t/**\n+\t * Extension hook that subclasses can override to register additional @{@link ExceptionHandler} methods \n+\t * by controller type. By default only @{@link ExceptionHandler} methods from the same controller are\n+\t * included. \n+\t * @param methods the list of @{@link ExceptionHandler} methods detected in the controller allowing to add more \n+\t * @param handlerType the controller type to which the @{@link ExceptionHandler} methods will apply\n+\t */\n+\tprotected void extendExceptionHandlerMethods(Set<Method> methods, Class<?> handlerType) {\n+\t}\n+\t\n \t/**\n \t * MethodFilter that matches {@link ExceptionHandler @ExceptionHandler} methods.\n \t */",
    "output": "extension hook to extend the @ExceptionHandler methods for a controller"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/xml/XMLEventStreamReader.java b/org.springframework.core/src/main/java/org/springframework/util/xml/XMLEventStreamReader.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/xml/XMLEventStreamReader.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/xml/XMLEventStreamReader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n import javax.xml.stream.XMLEventReader;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.Comment;\n import javax.xml.stream.events.Namespace;\n import javax.xml.stream.events.ProcessingInstruction;\n import javax.xml.stream.events.StartDocument;\n@@ -74,6 +75,9 @@ public String getText() {\n \t\tif (event.isCharacters()) {\n \t\t\treturn event.asCharacters().getData();\n \t\t}\n+\t\telse if (event.getEventType() == XMLEvent.COMMENT) {\n+\t\t\treturn ((Comment) event).getText();\n+\t\t}\n \t\telse {\n \t\t\tthrow new IllegalStateException();\n \t\t}",
    "output": "XMLEventStreamReader.getTextfails for COMMENT and ENTITY_REFERENCE events"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n@@ -184,6 +184,7 @@ public void testClearCollectionsTrue() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore(\"Fails on the builder server for some reason\")\n \tpublic void testClearCollectionsFalse() throws Exception {\n \n \t\tFlights flights = new Flights();",
    "output": "Ignoring test failing on build server, though it works locally. No idea why"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -874,11 +874,13 @@ protected final void processRequest(HttpServletRequest request, HttpServletRespo\n \t\t\t\tlogger.trace(\"Cleared thread-bound request context: \" + request);\n \t\t\t}\n \n-\t\t\tif (failureCause != null) {\n-\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tif (failureCause != null) {\n+\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif (this.publishEvents) {\n \t\t\t\t// Whether or not we succeeded, publish an event.",
    "output": "Add missing isDebugEnabled guard in FrameworkServlet Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n@@ -193,7 +193,7 @@ private static class TestBean {\n \t\tprivate BigDecimal[] patternArray;\n \n \t\t@NumberFormat(pattern=\"#,##.00\")\n-\t\tprivate List<BigDecimal>[] patternList;\n+\t\tprivate List<BigDecimal> patternList;\n \n \t\t@NumberFormat(pattern=\"#,##.00\")\n \t\tprivate List<BigDecimal> patternList2;\n@@ -246,11 +246,11 @@ public void setPatternArray(BigDecimal[] patternArray) {\n \t\t\tthis.patternArray = patternArray;\n \t\t}\n \n-\t\tpublic List<BigDecimal>[] getPatternList() {\n+\t\tpublic List<BigDecimal> getPatternList() {\n \t\t\treturn patternList;\n \t\t}\n \n-\t\tpublic void setPatternList(List<BigDecimal>[] patternList) {\n+\t\tpublic void setPatternList(List<BigDecimal> patternList) {\n \t\t\tthis.patternList = patternList;\n \t\t}\n ",
    "output": "fix pattern list test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java\n@@ -61,6 +61,9 @@ public class DefaultContextLoadTimeWeaver implements LoadTimeWeaver, BeanClassLo\n \tprivate LoadTimeWeaver loadTimeWeaver;\n \n \n+\tpublic DefaultContextLoadTimeWeaver() {\n+\t}\n+\n \tpublic DefaultContextLoadTimeWeaver(ClassLoader beanClassLoader) {\n \t\tsetBeanClassLoader(beanClassLoader);\n \t}",
    "output": "Preserve DefaultContextLoadTimeWeaver no-arg ctor Issue"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.http.converter.json;\n \n+import java.io.EOFException;\n import java.io.IOException;\n import java.nio.charset.Charset;\n import java.util.List;\n@@ -137,6 +138,9 @@ protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage)\n \t\tcatch (JsonParseException ex) {\n \t\t\tthrow new HttpMessageNotReadableException(\"Could not read JSON: \" + ex.getMessage(), ex);\n \t\t}\n+\t\tcatch (EOFException ex) {\n+\t\t\tthrow new HttpMessageNotReadableException(\"Could not read JSON: \" + ex.getMessage(), ex);\n+\t\t}\n \t}\n \n \t@Override",
    "output": "JSON (jackson) @RequestBody marshalling throws awkward exception"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/SqlUpdate.java\n@@ -20,6 +20,7 @@\n import javax.sql.DataSource;\n \n import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.InvalidDataAccessApiUsageException;\n import org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException;\n import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n import org.springframework.jdbc.core.namedparam.NamedParameterUtils;\n@@ -177,6 +178,12 @@ public int update(Object... params) throws DataAccessException {\n \t * @return the number of rows affected by the update\n \t */\n \tpublic int update(Object[] params, KeyHolder generatedKeyHolder) throws DataAccessException {\n+\t\tif (!isReturnGeneratedKeys() && getGeneratedKeysColumnNames() == null) {\n+\t\t\tthrow new InvalidDataAccessApiUsageException(\n+\t\t\t\t\t\"The update method taking a KeyHolder should only be used when generated keys have \" +\n+\t\t\t\t\t\"been configured by calling either 'setReturnGeneratedKeys' or \" +\n+\t\t\t\t\t\"'setGeneratedKeysColumnNames'.\");\n+\t\t}\n \t\tvalidateParameters(params);\n \t\tint rowsAffected = getJdbcTemplate().update(newPreparedStatementCreator(params), generatedKeyHolder);\n \t\tcheckRowsAffected(rowsAffected);",
    "output": "add check for existing configuration of generated keys before calling update with a KeyHolder"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -28,6 +28,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.springframework.core.CollectionFactory;\n import org.springframework.core.MethodParameter;\n+import org.springframework.core.convert.ConversionFailedException;\n import org.springframework.core.convert.ConversionService;\n import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.type.filter.TypeFilter;\n@@ -135,7 +136,11 @@ public <T> T convertIfNecessary(String propertyName, Object oldValue, Object new\n \t\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);\n \t\t\tTypeDescriptor targetTypeDesc = typeDescriptor;\n \t\t\tif (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) {\n-\t\t\t\treturn (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);\n+\t\t\t\ttry {\n+\t\t\t\t\treturn (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);\n+\t\t\t\t} catch (ConversionFailedException e) {\n+\t\t\t\t\t// fallback to default conversion logic below\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "catch ConversionFailedException and fallback to default container conversion logic rather than propogate exception"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n@@ -270,7 +270,7 @@ else if (!ObjectUtils.isEmpty(valueProfiles)) {\n \n \t\t\tfor (String profile : profiles) {\n \t\t\t\tif (StringUtils.hasText(profile)) {\n-\t\t\t\t\tactiveProfiles.add(profile);\n+\t\t\t\t\tactiveProfiles.add(profile.trim());\n \t\t\t\t}\n \t\t\t}\n \n\ndiff --git a/org.springframework.test/src/test/java/org/springframework/test/context/ContextLoaderUtilsTests.java b/org.springframework.test/src/test/java/org/springframework/test/context/ContextLoaderUtilsTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/test/context/ContextLoaderUtilsTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/test/context/ContextLoaderUtilsTests.java\n@@ -116,7 +116,7 @@ private static class NoProfilesDeclared {\n \tprivate static class EmptyProfiles {\n \t}\n \n-\t@ActiveProfiles({ \"foo\", \"bar\", \"foo\", \"bar\", \"baz\" })\n+\t@ActiveProfiles({ \"foo\", \"bar\", \"  foo\", \"bar  \", \"baz\" })\n \tprivate static class DuplicatedProfiles {\n \t}\n ",
    "output": "[] Trimming profiles for good measure"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java\n@@ -18,6 +18,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.logging.Log;\n@@ -252,7 +253,15 @@ else if (!ObjectUtils.isEmpty(valueProfiles)) {\n \t\t\t\tprofiles = valueProfiles;\n \t\t\t}\n \n-\t\t\tprofilesList.addAll(0, Arrays.<String> asList(profiles));\n+\t\t\tif (!ObjectUtils.isEmpty(profiles)) {\n+\t\t\t\tCollections.reverse(Arrays.<String> asList(profiles));\n+\n+\t\t\t\tfor (String profile : profiles) {\n+\t\t\t\t\tif (StringUtils.hasText(profile)) {\n+\t\t\t\t\t\tprofilesList.add(0, profile);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n \n \t\t\tdeclaringClass = activateProfiles.inheritProfiles() ? AnnotationUtils.findAnnotationDeclaringClass(\n \t\t\t\tannotationType, declaringClass.getSuperclass()) : null;",
    "output": "[] No longer tracking empty activated profiles"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/remoting/support/RemoteExporter.java b/org.springframework.context/src/main/java/org/springframework/remoting/support/RemoteExporter.java\n--- a/org.springframework.context/src/main/java/org/springframework/remoting/support/RemoteExporter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/remoting/support/RemoteExporter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -166,6 +166,7 @@ protected Object getProxyForService() {\n \t\t\t}\n \t\t}\n \t\tproxyFactory.setTarget(getService());\n+\t\tproxyFactory.setOpaque(true);\n \t\treturn proxyFactory.getProxy(getBeanClassLoader());\n \t}\n ",
    "output": "RemoteExporter uses an opaque proxy for 'serviceInterface' exposure (no AOP interfaces exposed)"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java\n@@ -257,7 +257,7 @@ private static void cleanupTransaction(Object transactionData, EntityManagerFact\n \tpublic static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {\n \t\tEntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf);\n \t\tif (emHolder != null && emHolder.hasTimeout()) {\n-\t\t\tint timeoutValue = emHolder.getTimeToLiveInSeconds();\n+\t\t\tint timeoutValue = (int) emHolder.getTimeToLiveInMillis();\n \t\t\tquery.setHint(\"javax.persistence.lock.timeout\", timeoutValue);\n \t\t\tquery.setHint(\"javax.persistence.query.timeout\", timeoutValue);\n \t\t}",
    "output": "fix JPA 2.0 timeout hints to correctly specify milliseconds"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java\n@@ -80,9 +80,9 @@ public void visitOuterClass(String owner, String name, String desc) {\n \t}\n \n \tpublic void visitInnerClass(String name, String outerName, String innerName, int access) {\n-\t\tString fqName = ClassUtils.convertResourcePathToClassName(name);\n-\t\tString fqOuterName = ClassUtils.convertResourcePathToClassName(outerName);\n \t\tif (outerName != null) {\n+\t\t\tString fqName = ClassUtils.convertResourcePathToClassName(name);\n+\t\t\tString fqOuterName = ClassUtils.convertResourcePathToClassName(outerName);\n \t\t\tif (this.className.equals(fqName)) {\n \t\t\t\tthis.enclosingClassName = fqOuterName;\n \t\t\t\tthis.independentInnerClass = ((access & Opcodes.ACC_STATIC) != 0);",
    "output": "Guard against null in #visitInnerClass Issue: ,"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java b/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java\n--- a/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java\n+++ b/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java\n@@ -63,7 +63,7 @@ public void testCachePut() throws Exception {\n \r\n \t\tassertNull(cache.get(key));\r\n \t\tcache.put(key, value);\r\n-\t\tassertEquals(value, cache.get(key));\r\n+\t\tassertEquals(value, cache.get(key).get());\r\n \t}\r\n \r\n \t@Test\r",
    "output": "revise cache API + update failing test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java b/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java\n--- a/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java\n+++ b/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java\n@@ -135,7 +135,7 @@ public void testMethodName(CacheableService service, String keyName)\n \t\tassertSame(r1, service.name(key));\r\n \t\tCache<Object, Object> cache = cm.getCache(\"default\");\r\n \t\t// assert the method name is used\r\n-\t\tassertTrue(cache.containsKey(keyName));\r\n+\t\tassertNotNull(cache.get(keyName));\r\n \t}\r\n \r\n \tpublic void testRootVars(CacheableService service) {\r\n@@ -145,7 +145,7 @@ public void testRootVars(CacheableService service) {\n \t\tCache<Object, Object> cache = cm.getCache(\"default\");\r\n \t\t// assert the method name is used\r\n \t\tString expectedKey = \"rootVarsrootVars\" + AopProxyUtils.ultimateTargetClass(service) + service;\r\n-\t\tassertTrue(cache.containsKey(expectedKey));\r\n+\t\tassertNotNull(cache.get(expectedKey));\r\n \t}\r\n \r\n \tpublic void testNullArg(CacheableService service) {\r",
    "output": "revise cache API + update failing test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -247,15 +247,17 @@ public void processConfigBeanDefinitions(ConfigurationClassParser parser, Config\n \t\tparser.validate();\n \n \t\t// Handle any @PropertySource annotations\n-\t\tif (!(this.environment instanceof ConfigurableEnvironment)) {\n-\t\t\tlogger.warn(\"Ignoring @PropertySource annotations. \" +\n-\t\t\t\t\t\"Reason: Environment must implement ConfigurableEnvironment\");\n-\t\t}\n-\t\telse {\n-\t\t\tMutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources();\n-\t\t\tStack<PropertySource<?>> parsedPropertySources = parser.getPropertySources();\n-\t\t\twhile (!parsedPropertySources.isEmpty()) {\n-\t\t\t\tenvPropertySources.addLast(parsedPropertySources.pop());\n+\t\tStack<PropertySource<?>> parsedPropertySources = parser.getPropertySources();\n+\t\tif (!parsedPropertySources.isEmpty()) {\n+\t\t\tif (!(this.environment instanceof ConfigurableEnvironment)) {\n+\t\t\t\tlogger.warn(\"Ignoring @PropertySource annotations. \" +\n+\t\t\t\t\t\t\"Reason: Environment must implement ConfigurableEnvironment\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tMutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources();\n+\t\t\t\twhile (!parsedPropertySources.isEmpty()) {\n+\t\t\t\t\tenvPropertySources.addLast(parsedPropertySources.pop());\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
    "output": "Refine ignored @PropertySource log warning If the enclosing environment does not implement ConfigurableEnvironment, then @PropertySource annotations are ignored because there is no way to add them to the Environment. Now checking first to see if there are any @PropertySource annotations present before issuing the warning. Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java\n@@ -124,7 +124,6 @@\n  *     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n  *         taskRegistrar.setScheduler(taskExecutor());\n  *         taskRegistrar.addTriggerTask(\n- *         addTriggerTask(\n  *             new Runnable() {\n  *                 task().work();\n  *             },",
    "output": "Polish @EnableScheduling Javadoc"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java\n@@ -98,6 +98,7 @@ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserCo\n \t\t// Delegate bean definition registration to scanner class.\n \t\tClassPathBeanDefinitionScanner scanner = createScanner(readerContext, useDefaultFilters);\n \t\tscanner.setResourceLoader(readerContext.getResourceLoader());\n+\t\tscanner.setEnvironment(parserContext.getDelegate().getEnvironment());\n \t\tscanner.setBeanDefinitionDefaults(parserContext.getDelegate().getBeanDefinitionDefaults());\n \t\tscanner.setAutowireCandidatePatterns(parserContext.getDelegate().getAutowireCandidatePatterns());\n ",
    "output": "Delegate ComponentScanBDP environment to scanner Enables @Profile filtering within ComponentScanBeanDefinitionParser"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n@@ -19,6 +19,7 @@\n import org.springframework.beans.factory.support.BeanNameGenerator;\n import org.springframework.context.support.GenericApplicationContext;\n import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.util.Assert;\n \n /**\n  * Standalone application context, accepting annotated classes as input - in particular\n@@ -126,6 +127,7 @@ public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver\n \t * @see #refresh()\n \t */\n \tpublic void register(Class<?>... annotatedClasses) {\n+\t\tAssert.notEmpty(annotatedClasses, \"At least one annotated class must be specified\");\n \t\tthis.reader.register(annotatedClasses);\n \t}\n \n@@ -137,6 +139,7 @@ public void register(Class<?>... annotatedClasses) {\n \t * @see #refresh()\n \t */\n \tpublic void scan(String... basePackages) {\n+\t\tAssert.notEmpty(basePackages, \"At least one base package must be specified\");\n \t\tthis.scanner.scan(basePackages);\n \t}\n ",
    "output": "Prevent empty calls to ACAC #register and #scan"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java b/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java\n--- a/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java\n+++ b/org.springframework.context/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java\n@@ -148,6 +148,11 @@ public void testRootVars(CacheableService service) {\n \t\tassertTrue(cache.containsKey(expectedKey));\r\n \t}\r\n \r\n+\tpublic void testNullArg(CacheableService service) {\r\n+\t\tObject r1 = service.cache(null);\r\n+\t\tassertSame(r1, service.cache(null));\r\n+\t}\r\n+\r\n \t@Test\r\n \tpublic void testCacheable() throws Exception {\r\n \t\ttestCacheable(cs);\r\n@@ -226,4 +231,14 @@ public void testRootVars() throws Exception {\n \tpublic void testClassRootVars() throws Exception {\r\n \t\ttestRootVars(ccs);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testNullArg() throws Exception {\r\n+\t\ttestNullArg(cs);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testClassNullArg() throws Exception {\r\n+\t\ttestNullArg(ccs);\r\n+\t}\r\n }\n\\ No newline at end of file",
    "output": "+ add NPE test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/support/DefaultKeyGenerator.java b/org.springframework.context/src/main/java/org/springframework/cache/support/DefaultKeyGenerator.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/support/DefaultKeyGenerator.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/support/DefaultKeyGenerator.java\n@@ -22,15 +22,15 @@\n \r\n /**\r\n  * Default key generator. Returns 0 if no param is given, the param itself if only one is given or a hash code computed\r\n- * from all given params hash code.\r\n+ * from all given params hash code. Uses a constant (53) for null objects.\r\n  * \r\n  * @author Costin Leau\r\n  */\r\n public class DefaultKeyGenerator implements KeyGenerator<Object> {\r\n \r\n \tpublic Object extract(Object target, Method method, Object... params) {\r\n \t\tif (params.length == 1) {\r\n-\t\t\treturn params[0];\r\n+\t\t\treturn (params[0] == null ? 53 : params[0]);\r\n \t\t}\r\n \r\n \t\tif (params.length == 0) {\r\n@@ -40,7 +40,7 @@ public Object extract(Object target, Method method, Object... params) {\n \t\tint hashCode = 17;\r\n \r\n \t\tfor (Object object : params) {\r\n-\t\t\thashCode = 31 * hashCode + object.hashCode();\r\n+\t\t\thashCode = 31 * hashCode + (object == null ? 53 : object.hashCode());\r\n \t\t}\r\n \r\n \t\treturn Integer.valueOf(hashCode);\r",
    "output": "+ add handling for null arguments to prevent NPE in default key generation"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java\n@@ -28,8 +28,7 @@\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.context.request.ServletWebRequest;\n import org.springframework.web.method.support.HandlerMethodReturnValueHandlerContainer;\n-import org.springframework.web.method.support.StubReturnValueHandler;\n-import org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod;\n+import org.springframework.web.servlet.mvc.method.annotation.support.DefaultMethodReturnValueHandler;\n \n /**\n  * Test fixture for {@link ServletInvocableHandlerMethod} unit tests.\n@@ -51,7 +50,7 @@ public void setUp() throws Exception {\n \t@Test\n \tpublic void setResponseStatus() throws Exception {\n \t\tHandlerMethodReturnValueHandlerContainer handlers = new HandlerMethodReturnValueHandlerContainer();\n-\t\thandlers.registerReturnValueHandler(new StubReturnValueHandler(void.class, false));\n+\t\thandlers.registerReturnValueHandler(new DefaultMethodReturnValueHandler(null));\n \n \t\tMethod method = Handler.class.getDeclaredMethod(\"responseStatus\");\n \t\tServletInvocableHandlerMethod handlerMethod = new ServletInvocableHandlerMethod(new Handler(), method);",
    "output": "Fix issue with tests compiling"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java\n@@ -73,7 +73,7 @@\n  * @since 3.0\n  * @see ConfigurationClassParser\n  */\n-class ConfigurationClassBeanDefinitionReader {\n+public class ConfigurationClassBeanDefinitionReader {\n \n \tprivate static final String CONFIGURATION_CLASS_FULL = \"full\";\n ",
    "output": "Make ConfigurationClassBeanDefinitionReader public Issue"
  },
  {
    "input": "diff --git a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/spr3896/DefaultLocationsBaseTests.java\n@@ -21,13 +21,10 @@\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n-\n import org.springframework.beans.Employee;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\n \n /**\n  * <p>\n@@ -43,7 +40,6 @@\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration\n-@TestExecutionListeners( { DependencyInjectionTestExecutionListener.class })\n public class DefaultLocationsBaseTests {\n \n \t@Autowired",
    "output": "Remove unnecessary declaration of @TestExecutionListeners"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/env/MapPropertySource.java b/org.springframework.core/src/main/java/org/springframework/core/env/MapPropertySource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/env/MapPropertySource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/env/MapPropertySource.java\n@@ -27,7 +27,7 @@\n  */\n public class MapPropertySource extends EnumerablePropertySource<Map<String, Object>> {\n \n-\tprotected MapPropertySource(String name, Map<String, Object> source) {\n+\tpublic MapPropertySource(String name, Map<String, Object> source) {\n \t\tsuper(name, source);\n \t}\n ",
    "output": "Increase visibility of MapPropertySource constructor Was protected due to oversight, now public. Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java b/org.springframework.context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/jmx/access/MBeanClientInterceptorTests.java\n@@ -29,6 +29,7 @@\n import javax.management.remote.JMXConnectorServerFactory;\n import javax.management.remote.JMXServiceURL;\n \n+import org.junit.Ignore;\n import org.springframework.jmx.AbstractMBeanServerTests;\n import org.springframework.jmx.IJmxTestBean;\n import org.springframework.jmx.JmxException;\n@@ -185,7 +186,12 @@ public void testInvokeUnexposedMethodWithException() throws Exception {\n \t\t}\n \t}\n \n-\tpublic void testLazyConnectionToRemote() throws Exception {\n+\t// @Ignore has no effect for JUnit 3.8 tests; however, we leave it\n+\t// here so that developers can easily search for ignored tests.\n+\t//\n+\t// Once fixed, renamed to test* instead of ignore*.\n+\t@Ignore(\"Requires jmxremote_optional.jar; see comments in AbstractMBeanServerTests for details.\")\n+\tpublic void ignoreTestLazyConnectionToRemote() throws Exception {\n \t\tif (!runTests)\n \t\t\treturn;\n ",
    "output": "[] re-ignoring JMX tests that require the presence of jmxremote_optional.jar"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java b/org.springframework.context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java\n@@ -80,10 +80,12 @@ public void testRegisterNonNotificationListenerType() throws Exception {\n \t}\n \n \t// Note that @Ignore has no effect for JUnit 3.8 TestCase-based tests,\n-\t// we leave it here to allow developers to easily search for ignored \n+\t// but we leave it here to allow developers to easily search for ignored \n \t// tests. As a work-around, the method is prefixed with \"ignore\"\n \t// instead of \"test\" as required by JUnit 3.x.\n-\t@Ignore(\"NotificationListenerBean constructor does not throw the expected IllegalArgumentException\")\n+\t//\n+\t// See: https://jira.springsource.org/browse/SPR-8091\n+\t@Ignore(\"[SPR-8091] NotificationListenerBean constructor does not throw the expected IllegalArgumentException\")\n \t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n \tpublic void ignoreTestRegisterNullNotificationListenerType() throws Exception {\n \t\tMap listeners = new HashMap();",
    "output": "[] developer notes"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java b/org.springframework.core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java\n@@ -25,6 +25,7 @@\n \n import junit.framework.TestCase;\n \n+import org.junit.Ignore;\n import org.springframework.beans.TestBean;\n \n /**\n@@ -192,7 +193,12 @@ public void testGenerifiedClass() throws Exception {\n \t\t//System.in.read();\n \t}\n \n-\tpublic void testMemUsage() throws Exception {\n+\t/**\n+\t * Ignored because Ubuntu packages OpenJDK with debug symbols enabled.\n+\t * See SPR-8078.\n+\t */\n+\t@Ignore\n+\tpublic void ignore_testClassesWithoutDebugSymbols() throws Exception {\n \t\t// JDK classes don't have debug information (usually)\n \t\tClass clazz = Component.class;\n \t\tString methodName = \"list\";",
    "output": "Ignore fragile test dependent on debug symbols Issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java\n@@ -56,7 +56,7 @@ EvaluationContext createEvaluationContext(Collection<Cache<?, ?>> caches, Method\n \t}\r\n \r\n \tboolean condition(String conditionExpression, Method method, EvaluationContext evalContext) {\r\n-\t\tExpression condExp = conditionCache.get(conditionExpression);\r\n+\t\tExpression condExp = conditionCache.get(method);\r\n \t\tif (condExp == null) {\r\n \t\t\tcondExp = parser.parseExpression(conditionExpression);\r\n \t\t\tconditionCache.put(method, condExp);\r\n@@ -65,7 +65,7 @@ boolean condition(String conditionExpression, Method method, EvaluationContext e\n \t}\r\n \r\n \tObject key(String keyExpression, Method method, EvaluationContext evalContext) {\r\n-\t\tExpression keyExp = keyCache.get(keyExpression);\r\n+\t\tExpression keyExp = keyCache.get(method);\r\n \t\tif (keyExp == null) {\r\n \t\t\tkeyExp = parser.parseExpression(keyExpression);\r\n \t\t\tkeyCache.put(method, keyExp);\r",
    "output": "+ fix bug that prevented internal expression cache from being used"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n--- a/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n+++ b/org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java\n@@ -63,12 +63,6 @@ public boolean containsKey(Object key) {\n \t\treturn (element != null ? true : false);\r\n \t}\r\n \r\n-\tpublic boolean containsValue(Object value) {\r\n-\t\t// force expiry check to guarantee a valid result (otherwise expired elements are considered)\r\n-\t\tcache.evictExpiredElements();\r\n-\t\treturn cache.isValueInCache(value);\r\n-\t}\r\n-\r\n \tpublic Object get(Object key) {\r\n \t\tElement element = cache.get(key);\r\n \t\treturn (element != null ? element.getObjectValue() : null);\r",
    "output": "remove unneeded method"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java\n@@ -214,7 +214,7 @@ else if (arg instanceof TypeVariable) {\n \t * @param typeVariableMap the TypeVariable Map to resolved against\n \t * @return the type if it resolves to a Class, or <code>Object.class</code> otherwise\n \t */\n-\tstatic Class resolveType(Type genericType, Map<TypeVariable, Type> typeVariableMap) {\n+\tpublic static Class resolveType(Type genericType, Map<TypeVariable, Type> typeVariableMap) {\n \t\tType rawType = getRawType(genericType, typeVariableMap);\n \t\treturn (rawType instanceof Class ? (Class) rawType : Object.class);\n \t}\n@@ -247,7 +247,7 @@ static Type getRawType(Type genericType, Map<TypeVariable, Type> typeVariableMap\n \t * {@link Class} for the specified {@link Class}. Searches all super types,\n \t * enclosing types and interfaces.\n \t */\n-\tstatic Map<TypeVariable, Type> getTypeVariableMap(Class clazz) {\n+\tpublic static Map<TypeVariable, Type> getTypeVariableMap(Class clazz) {\n \t\tReference<Map<TypeVariable, Type>> ref = typeVariableCache.get(clazz);\n \t\tMap<TypeVariable, Type> typeVariableMap = (ref != null ? ref.get() : null);\n ",
    "output": "Make GenericTypeResolver.getTypeVariableMap(…) and resolvetype(…) public"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -828,7 +828,7 @@ protected HttpInputMessage createHttpInputMessage(NativeWebRequest webRequest) t\n \t * <p>Throws an UnsupportedOperationException by default.\n \t */\n \tprotected HttpOutputMessage createHttpOutputMessage(NativeWebRequest webRequest) throws Exception {\n-\t\tthrow new UnsupportedOperationException(\"@ResponseBody not supported\");\n+\t\tthrow new UnsupportedOperationException(\"@Body not supported\");\n \t}\n \n \tprotected String parseDefaultValueAttribute(String value) {",
    "output": "@MVC 2.0: AbstractAnnotationMAR -> AbstractNamedValueMAR"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -325,7 +325,7 @@ protected void error(String message, Element source, Throwable cause) {\n \t/**\n \t * Initialize the default lazy-init, autowire, dependency check settings,\n \t * init-method, destroy-method and merge settings. Support nested 'beans'\n-\t * element use cases by falling back to <literal>parent</literal> in case the\n+\t * element use cases by falling back to the given parent in case the\n \t * defaults are not explicitly set locally.\n \t * @see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)\n \t * @see #getDefaults()\n@@ -335,6 +335,15 @@ public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {\n \t\tthis.readerContext.fireDefaultsRegistered(this.defaults);\n \t}\n \n+\t/**\n+\t * Initialize the default settings assuming a {@code null} parent delegate.\n+\t * @deprecated in Spring 3.1 in favor of\n+\t * {@link #initDefaults(Element, BeanDefinitionParserDelegate)}\n+\t */\n+\tpublic void initDefaults(Element root) {\n+\t\tinitDefaults(root, null);\n+\t}\n+\n \t/**\n \t * Populate the given DocumentDefaultsDefinition instance with the default lazy-init,\n \t * autowire, dependency check settings, init-method, destroy-method and merge settings.",
    "output": "Re-introduce and deprecate BDPD.initDefaults(Element) For compatibility with Spring Integration's standalone usage of BeanDefinitionParserDelegate"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,7 +31,7 @@\n  * @author Christian Dupuis\n  * @since 2.5\n  */\n-public class JtaTransactionManagerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser  {\n+class JtaTransactionManagerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser  {\n \n \tprivate static final String WEBLOGIC_JTA_TRANSACTION_MANAGER_CLASS_NAME =\n \t\t\t\"org.springframework.transaction.jta.WebLogicJtaTransactionManager\";",
    "output": "turned to package visibility"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n@@ -19,6 +19,7 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.Suite;\n import org.junit.runners.Suite.SuiteClasses;\n+\n import org.springframework.context.annotation.FeatureMethodEarlyBeanProxyTests;\n \n /**\n@@ -29,7 +30,7 @@\n @RunWith(Suite.class)\n @SuiteClasses({\n \tFeatureMethodEarlyBeanProxyTests.class,\n-\tConfigurationClassWithPlaceholderConfigurerBeanTests.class,\n+\tConfigurationClassWithPlaceholderConfigurerBeanTests.class\n })\n public class FeatureMethodLifecycleIssueTestSuite {\n ",
    "output": "Fix compilation error with javac"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java\n@@ -183,18 +183,6 @@ private RuntimeBeanReference getConversionService(Element element, Object source\n \t\t\tparserContext.registerComponent(new BeanComponentDefinition(conversionDef, conversionName));\n \t\t\tconversionServiceRef = new RuntimeBeanReference(conversionName);\n \t\t}\n-\t\tElement formattersElement = DomUtils.getChildElementByTagName(element, \"formatters\");\n-\t\tif (formattersElement != null) {\n-\t\t\tManagedList<BeanDefinitionHolder> formatters = new ManagedList<BeanDefinitionHolder>();\n-\t\t\tformatters.setSource(source);\n-\t\t\tfor (Element formatter : DomUtils.getChildElementsByTagName(formattersElement, \"bean\")) {\n-\t\t\t\tBeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(formatter);\n-\t\t\t\tbeanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(formatter, beanDef);\n-\t\t\t\tformatters.add(beanDef);\n-\t\t\t}\n-\t\t\tBeanDefinition beanDef = parserContext.getRegistry().getBeanDefinition(conversionServiceRef.getBeanName());\n-\t\t\tbeanDef.getPropertyValues().add(\"formatters\", formatters);\n-\t\t}\n \t\treturn conversionServiceRef;\n \t}\n ",
    "output": "Remove code for parsing mvc:formatters"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java\n@@ -28,7 +28,7 @@\n  * @author Arjen Poutsma\n  * @since 3.0.6\n  */\n-abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {\n+public abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {\n \n \tprivate ByteArrayOutputStream bufferedOutput = new ByteArrayOutputStream();\n \n\ndiff --git a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java\n@@ -28,7 +28,7 @@\n  * @author Arjen Poutsma\n  * @since 3.0\n  */\n-abstract class AbstractClientHttpRequest implements ClientHttpRequest {\n+public abstract class AbstractClientHttpRequest implements ClientHttpRequest {\n \n \tprivate boolean executed = false;\n ",
    "output": "Make abstract requests public again"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/client/BufferingSimpleClientHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/client/BufferingSimpleClientHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/BufferingSimpleClientHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/BufferingSimpleClientHttpRequest.java\n@@ -65,10 +65,17 @@ protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] buffere\n \t\t\t\tthis.connection.addRequestProperty(headerName, headerValue);\n \t\t\t}\n \t\t}\n+\n+\t\tif (this.connection.getDoOutput()) {\n+\t\t\tthis.connection.setFixedLengthStreamingMode(bufferedOutput.length);\n+\t\t}\n+\n \t\tthis.connection.connect();\n-\t\tif (bufferedOutput.length > 0) {\n+\n+\t\tif (this.connection.getDoOutput()) {\n \t\t\tFileCopyUtils.copy(bufferedOutput, this.connection.getOutputStream());\n \t\t}\n+\n \t\treturn new SimpleClientHttpResponse(this.connection);\n \t}\n ",
    "output": "Small performance improvement"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/http/client/StreamingSimpleHttpRequestFactoryTests.java b/org.springframework.web/src/test/java/org/springframework/http/client/StreamingSimpleHttpRequestFactoryTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/http/client/StreamingSimpleHttpRequestFactoryTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/http/client/StreamingSimpleHttpRequestFactoryTests.java\n@@ -33,7 +33,7 @@ public class StreamingSimpleHttpRequestFactoryTests extends AbstractHttpRequestF\n \t@Override\n \tprotected ClientHttpRequestFactory createRequestFactory() {\n \t\tSimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();\n-\t\tfactory.setStreaming(true);\n+\t\tfactory.setBufferRequestBody(false);\n \t\treturn factory;\n \t}\n ",
    "output": "Sending large payloads with RestTemplate results in an OutOfMemoryError"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/MediaType.java b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/MediaType.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java\n@@ -215,7 +215,7 @@ public MediaType(String type, String subtype) {\n \t * @throws IllegalArgumentException if any of the parameters contain illegal characters\n \t */\n \tpublic MediaType(String type, String subtype, Charset charSet) {\n-\t\tthis(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.toString()));\n+\t\tthis(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()));\n \t}\n \n \t/**",
    "output": "MediaType incorrectly calls the toStringmethod instead of namemethod causing RestTemplate on Android to fail"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -1017,7 +1017,6 @@ else if (propValue instanceof Map) {\n \t\t\t\t}\n \t\t\t\t// Pass full property name and old value in here, since we want full\n \t\t\t\t// conversion ability for map values.\n-\t\t\t\t// TODO method parameter nesting level should be token.keys.length + 1\n \t\t\t\tObject convertedMapValue = convertIfNecessary(\n \t\t\t\t\t\tpropertyName, oldValue, pv.getValue(), mapValueType,\n \t\t\t\t\t\tPropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));",
    "output": "remove addressed TODO"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n@@ -98,6 +98,7 @@ public void listOfListsElementAutogrowObject() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void arrayOfLists() throws Exception {\n \t\t// TODO TypeDescriptor not capable of accessing nested element type for arrays\n \t\trequest.setRequestURI(\"/nested/arrayOfLists\");",
    "output": "failing test case"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n@@ -68,6 +68,14 @@ public void listElementAutogrowObject() throws Exception {\n \t\tadapter.handle(request, response, controller);\n \t}\n \n+\t@Test\n+\t@Ignore\n+\tpublic void listElementAutogrowOutOfMemory() throws Exception {\n+\t\trequest.setRequestURI(\"/nested/listElement\");\n+\t\trequest.addParameter(\"nested.list[1000000000].foo\", \"Nested\");\n+\t\tadapter.handle(request, response, controller);\n+\t}\n+\n \t@Test\n \tpublic void listOfLists() throws Exception {\n \t\trequest.setRequestURI(\"/nested/listOfLists\");\n@@ -90,7 +98,6 @@ public void listOfListsElementAutogrowObject() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void arrayOfLists() throws Exception {\n \t\t// TODO TypeDescriptor not capable of accessing nested element type for arrays\n \t\trequest.setRequestURI(\"/nested/arrayOfLists\");",
    "output": "out of memory test case"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n@@ -8,6 +8,7 @@\n import java.util.Map;\n \n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.core.convert.support.ConversionServiceFactory;\n@@ -91,6 +92,7 @@ public void listOfListsElementAutogrowObject() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void arrayOfLists() throws Exception {\n \t\t// TODO TypeDescriptor not capable of accessing nested element type for arrays\n \t\trequest.setRequestURI(\"/nested/arrayOfLists\");\n@@ -99,6 +101,7 @@ public void arrayOfLists() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void map() throws Exception {\n \t\trequest.setRequestURI(\"/nested/map\");\t\t\n \t\trequest.addParameter(\"nested.map['apple'].foo\", \"bar\");",
    "output": "ignore failing tests temp for array nesting level bug and map autogrow bug"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java\n@@ -101,6 +101,7 @@ public void arrayOfLists() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void map() throws Exception {\n \t\trequest.setRequestURI(\"/nested/map\");\t\t\n \t\trequest.addParameter(\"nested.map['apple'].foo\", \"bar\");",
    "output": "ignore failing test"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -986,7 +986,6 @@ else if (index >= list.size()) {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tlist.add(convertedValue);\n-\t\t\t\t\tSystem.out.println(list);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (propValue instanceof Map) {",
    "output": "remove accidental system.out commit"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -600,7 +600,7 @@ private Object setDefaultValue(String propertyName) {\n \tprivate Object setDefaultValue(PropertyTokenHolder tokens) {\n \t\tPropertyValue pv = createDefaultPropertyValue(tokens);\n \t\tsetPropertyValue(tokens, pv);\n-\t\treturn pv.getValue();\n+\t\treturn getPropertyValue(tokens);\n \t}\n \t\n \tprivate PropertyValue createDefaultPropertyValue(PropertyTokenHolder tokens) {\n@@ -986,6 +986,7 @@ else if (index >= list.size()) {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tlist.add(convertedValue);\n+\t\t\t\t\tSystem.out.println(list);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (propValue instanceof Map) {",
    "output": "fetch property value again after setting default value to protect against object copy"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java\n@@ -364,9 +364,10 @@ public Class getPropertyType(String propertyName) throws BeansException {\n \n \tpublic TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException {\n \t\ttry {\n-\t\t\tBeanWrapper nestedBw = getNestedBeanWrapper(propertyName);\n-\t\t\tPropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedBw, propertyName));\t\t\t\n-\t\t\tPropertyDescriptor pd = getPropertyDescriptorInternal(tokens.actualName);\t\t\t\n+\t\t\tBeanWrapperImpl nestedBw = getBeanWrapperForPropertyPath(propertyName);\n+\t\t\tString finalPath = getFinalPath(nestedBw, propertyName);\n+\t\t\tPropertyTokenHolder tokens = getPropertyNameTokens(finalPath);\n+\t\t\tPropertyDescriptor pd = nestedBw.getCachedIntrospectionResults().getPropertyDescriptor(tokens.actualName);\n \t\t\tif (pd != null) {\n \t\t\t\tif (tokens.keys != null) {\n \t\t\t\t\tif (pd.getReadMethod() != null) {",
    "output": "getPropertyTypeDescriptor implementation optimization"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java\n@@ -16,15 +16,16 @@\n \n package org.springframework.format.number;\n \n+import static org.junit.Assert.assertEquals;\n+\n import java.math.BigDecimal;\n import java.util.List;\n import java.util.Locale;\n \n import org.junit.After;\n-import static org.junit.Assert.*;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n-\n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.core.convert.support.ConversionServiceFactory;\n@@ -115,6 +116,7 @@ public void testPatternFormatting() {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void testPatternArrayFormatting() {\n \t\tMutablePropertyValues propertyValues = new MutablePropertyValues();\n \t\tpropertyValues.add(\"patternArray\", new String[] {\"1,25.00\", \"2,35.00\"});\n@@ -133,6 +135,7 @@ public void testPatternArrayFormatting() {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void testPatternListFormatting() {\n \t\tMutablePropertyValues propertyValues = new MutablePropertyValues();\n \t\tpropertyValues.add(\"patternList\", new String[] {\"1,25.00\", \"2,35.00\"});",
    "output": "temp added ignore on 2 new failing tests until time to investigate"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/AttributeAccessorSupport.java b/org.springframework.core/src/main/java/org/springframework/core/AttributeAccessorSupport.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/AttributeAccessorSupport.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/AttributeAccessorSupport.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,7 +35,7 @@\n public abstract class AttributeAccessorSupport implements AttributeAccessor, Serializable {\n \n \t/** Map with String keys and Object values */\n-\tprivate final Map<String, Object> attributes = new LinkedHashMap<String, Object>();\n+\tprivate final Map<String, Object> attributes = new LinkedHashMap<String, Object>(0);\n \n \n \tpublic void setAttribute(String name, Object value) {",
    "output": "reduced BeanDefinition footprint by initializing Sets and Maps with 0"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -28,6 +28,7 @@\n \n import org.springframework.beans.PropertyEditorRegistry;\n import org.springframework.util.Assert;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -337,13 +338,13 @@ public boolean equals(Object other) {\n \t\t}\n \t\tBindingResult otherResult = (BindingResult) other;\n \t\treturn (getObjectName().equals(otherResult.getObjectName()) &&\n-\t\t\t\tgetTarget().equals(otherResult.getTarget()) &&\n+\t\t\t\tObjectUtils.nullSafeEquals(getTarget(), otherResult.getTarget()) &&\n \t\t\t\tgetAllErrors().equals(otherResult.getAllErrors()));\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn getObjectName().hashCode() * 29 + getTarget().hashCode();\n+\t\treturn getObjectName().hashCode();\n \t}\n \n ",
    "output": "fix AbstractBindingResult to avoid NPE in \"hashCode\" if target is null"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/ProxyCreationContext.java b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/ProxyCreationContext.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/ProxyCreationContext.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/ProxyCreationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2011 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,12 @@ public static String getCurrentProxiedBeanName() {\n \t * @param beanName the name of the bean, or <code>null</code> to reset it\n \t */\n \tstatic void setCurrentProxiedBeanName(String beanName) {\n-\t\tcurrentProxiedBeanName.set(beanName);\n+\t\tif (beanName != null) {\n+\t\t\tcurrentProxiedBeanName.set(beanName);\n+\t\t}\n+\t\telse {\n+\t\t\tcurrentProxiedBeanName.remove();\n+\t\t}\n \t}\n \n }",
    "output": "ProxyCreationContext uses \"ThreadLocal.remove\" over \"ThreadLocal.set(null)\" as well"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java\n@@ -48,6 +48,8 @@ public class ServletServerHttpRequest implements ServerHttpRequest {\n \n \tprivate static final String POST_METHOD = \"POST\";\n \n+\tprivate static final String PUT_METHOD = \"PUT\";\n+\n \tprivate static final String FORM_CHARSET = \"UTF-8\";\n \n \tprivate final HttpServletRequest servletRequest;\n@@ -105,7 +107,7 @@ public InputStream getBody() throws IOException {\n \n \tprivate boolean isFormSubmittal(HttpServletRequest request) {\n \t\treturn FORM_CONTENT_TYPE.equals(request.getContentType()) &&\n-\t\t\t\tPOST_METHOD.equalsIgnoreCase(request.getMethod());\n+\t\t\t\t(POST_METHOD.equalsIgnoreCase(request.getMethod()) || PUT_METHOD.equalsIgnoreCase(request.getMethod()));\n \t}\n \n \tprivate InputStream getFormBody(HttpServletRequest request) throws IOException {",
    "output": "FormHttpMessageConverter.readalways ignores post data when processing request (from Tomcat)"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java\n@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -43,7 +43,6 @@\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n import org.springframework.util.StringUtils;\n-import org.springframework.web.util.WebUtils;\n \n /**\n  * Implementation of {@link HttpMessageConverter} that can handle form data, including multipart form data\n@@ -92,7 +91,7 @@ public class FormHttpMessageConverter implements HttpMessageConverter<MultiValue\n \n \tprivate final Random rnd = new Random();\n \n-\tprivate Charset charset = Charset.forName(WebUtils.DEFAULT_CHARACTER_ENCODING);\n+\tprivate Charset charset = Charset.forName(\"UTF-8\");\n \n \tprivate List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();\n ",
    "output": "FormHttpMessageConverter does not honor the charset in the content type when writing a form and uses a wrong default charset"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n@@ -180,11 +180,10 @@ protected void loadProperties(Properties props) throws IOException {\n \t\t\t\ttry {\n \t\t\t\t\tis = location.getInputStream();\n \n-\t\t\t\t\tif (location instanceof AbstractFileResolvingResource) {\n-\t\t\t\t\t\tString filename = location.getFilename();\n-\t\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n-\t\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n-\t\t\t\t\t\t}\n+\t\t\t\t\tString filename = (location instanceof AbstractFileResolvingResource) ?\n+\t\t\t\t\t\t\tlocation.getFilename() : null;\n+\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n+\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tif (this.fileEncoding != null) {",
    "output": "Fix breaking logic around getFilenamecall"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java\n@@ -23,6 +23,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.springframework.core.io.AbstractFileResolvingResource;\n import org.springframework.core.io.Resource;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.DefaultPropertiesPersister;\n@@ -179,15 +180,11 @@ protected void loadProperties(Properties props) throws IOException {\n \t\t\t\ttry {\n \t\t\t\t\tis = location.getInputStream();\n \n-\t\t\t\t\tString filename = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tfilename = location.getFilename();\n-\t\t\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\t\t\t// resource is not file-based. See SPR-7552.\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n-\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n+\t\t\t\t\tif (location instanceof AbstractFileResolvingResource) {\n+\t\t\t\t\t\tString filename = location.getFilename();\n+\t\t\t\t\t\tif (filename != null && filename.endsWith(XML_FILE_EXTENSION)) {\n+\t\t\t\t\t\t\tthis.propertiesPersister.loadFromXml(props, is);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tif (this.fileEncoding != null) {",
    "output": "Improve fix for detecting non-file based Resources in PropertiesLoaderSupport (, ) Use instanceof check against AbstractFileResolvingResource instead of try/catch around resource.getFilenamecall"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.context.annotation;\n \n-import java.awt.dnd.Autoscroll;\n import java.io.IOException;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n@@ -25,7 +24,6 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import org.springframework.beans.factory.BeanClassLoaderAware;\n import org.springframework.beans.factory.BeanDefinitionStoreException;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -131,10 +129,6 @@ public void setEnvironment(Environment environment) {\n \t\tthis.environment = environment;\n \t}\n \n-\tpublic int getOrder() {\n-\t\treturn Ordered.HIGHEST_PRECEDENCE + 1; // make room for AutoScanningBeanDefinitionRegistrar\n-\t}\n-\n \n \t/**\n \t * Derive further bean definitions from the configuration classes in the registry.",
    "output": "Remove obsolete ConfigurationClassPostProcessor.getOrder"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n@@ -308,9 +308,9 @@ protected Object runReflectiveCall() throws Throwable {\n \n \t\tStatement statement = methodInvoker(frameworkMethod, testInstance);\n \t\tstatement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement);\n-\t\tstatement = withRulesReflectively(frameworkMethod, testInstance, statement);\n \t\tstatement = withBefores(frameworkMethod, testInstance, statement);\n \t\tstatement = withAfters(frameworkMethod, testInstance, statement);\n+\t\tstatement = withRulesReflectively(frameworkMethod, testInstance, statement);\n \t\tstatement = withPotentialRepeat(frameworkMethod, testInstance, statement);\n \t\tstatement = withPotentialTimeout(frameworkMethod, testInstance, statement);\n ",
    "output": "re-order rules and befores"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/GenericXmlApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/GenericXmlApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/GenericXmlApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/GenericXmlApplicationContext.java\n@@ -18,6 +18,7 @@\n \r\n import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\r\n import org.springframework.core.env.ConfigurableEnvironment;\r\n+import org.springframework.core.io.ClassPathResource;\r\n import org.springframework.core.io.Resource;\r\n \r\n /**\r",
    "output": "Minor post-merge cleanup"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParser.java\n@@ -34,6 +34,7 @@\n  * \n  * @author Mark Fisher\n  * @author Juergen Hoeller\n+ * @author Ramnivas Laddad\n  * @since 3.0\n  */\n public class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {\n@@ -48,7 +49,7 @@ public class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParse\n \t * The bean name of the internally managed transaction aspect (mode=\"aspectj\").\n \t */\n \tpublic static final String ASYNC_EXECUTION_ASPECT_BEAN_NAME =\n-\t\t\t\"org.springframework.transaction.config.internalTransactionAspect\";\n+\t\t\t\"org.springframework.scheduling.config.internalAsyncExecutionAspect\";\n \n \tprivate static final String ASYNC_EXECUTION_ASPECT_CLASS_NAME =\n \t\t\t\"org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect\";",
    "output": "Fix configuration of AnnotationAsyncExecutionAspect (was incorrectly under the same name as that for transaction management aspect)"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java\n@@ -567,9 +567,6 @@ protected void inject(Object bean, String beanName, PropertyValues pvs) throws T\n \t\t\t\t\t\t\t\t\t\t\t\tthis.cachedMethodArguments[i] = new RuntimeBeanReference(autowiredBeanName);\n \t\t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\t\t\t\t\tthis.cachedMethodArguments[i] = arguments[i];\n-\t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}",
    "output": "consistent caching of @Autowired arguments in field and method case"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java b/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/support/package-info.java\n@@ -5,5 +5,5 @@\n  * Includes adapters to the Converter SPI.\r\n  *\r\n  */\r\n-package org.springframework.core.io.support;\r\n+package org.springframework.core.serializer.support;\r\n \r",
    "output": "fix package declaration"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java\n@@ -190,7 +190,7 @@ private int findPlaceholderEndIndex(CharSequence buf, int startIndex) {\n \t\t\tif (StringUtils.substringMatch(buf, index, this.placeholderSuffix)) {\n \t\t\t\tif (withinNestedPlaceholder > 0) {\n \t\t\t\t\twithinNestedPlaceholder--;\n-\t\t\t\t\tindex = index + this.placeholderPrefix.length() - 1;\n+\t\t\t\t\tindex = index + this.placeholderSuffix.length();\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\treturn index;",
    "output": "fix findPlaceholderEndIndex to work with a custom suffix as well"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java\n@@ -134,7 +134,8 @@ public void notModified() throws Exception {\n \tpublic void modified() throws Exception {\n \t\tMockHttpServletRequest request = new MockHttpServletRequest();\n \t\trequest.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, \"/foo.css\");\n-\t\trequest.addHeader(\"If-Modified-Since\", new ClassPathResource(\"test/foo.css\", getClass()).getFile().lastModified() - 1);\n+\t\trequest.addHeader(\"If-Modified-Since\",\n+\t\t\t\tnew ClassPathResource(\"test/foo.css\", getClass()).getFile().lastModified() / 1000 * 1000 - 1);\n \t\trequest.setMethod(\"GET\");\n \t\tMockHttpServletResponse response = new MockHttpServletResponse();\n \t\thandler.handleRequest(request, response);",
    "output": "make ResourceHttpRequestHandlerTests more reliable"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java\n@@ -51,16 +51,16 @@ public class DefaultServletHttpRequestHandler implements HttpRequestHandler, Ser\n \n \t/** Default Servlet name used by Tomcat, Jetty, JBoss, and GlassFish */\n \tprivate static final String COMMON_DEFAULT_SERVLET_NAME = \"default\";\n-\t\n+\n \t/** Default Servlet name used by Google App Engine */\n \tprivate static final String GAE_DEFAULT_SERVLET_NAME = \"_ah_default\";\n-\t\n+\n \t/** Default Servlet name used by Resin */\n \tprivate static final String RESIN_DEFAULT_SERVLET_NAME = \"resin-file\";\n-\t\n+\n \t/** Default Servlet name used by WebLogic */\n \tprivate static final String WEBLOGIC_DEFAULT_SERVLET_NAME = \"FileServlet\";\n-\t\n+\n \t/** Default Servlet name used by WebSphere */\n \tprivate static final String WEBSPHERE_DEFAULT_SERVLET_NAME = \"SimpleFileServlet\";\n \n@@ -104,7 +104,7 @@ else if (this.servletContext.getNamedDispatcher(WEBSPHERE_DEFAULT_SERVLET_NAME)\n \t\t\t\tthrow new IllegalStateException(\"Unable to locate the default servlet for serving static content. \" +\n \t\t\t\t\t\t\"Please set the 'defaultServletName' property explicitly.\");\n \t\t\t}\n-\t\t}\t\t\n+\t\t}\n \t}\n \n ",
    "output": "Review recent documentation and default servlet changes - Relocate and fix typos in interface-based @RequestMapping tip- Fix typos in constructor-arg 'name' disambiguation section- Polish whitespace in DefaultServletHttpRequestHandler"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/DefaultServletHttpRequestHandler.java\n@@ -52,6 +52,9 @@ public class DefaultServletHttpRequestHandler implements HttpRequestHandler, Ser\n \t/** Default Servlet name used by Tomcat, Jetty, JBoss, and GlassFish */\n \tprivate static final String COMMON_DEFAULT_SERVLET_NAME = \"default\";\n \t\n+\t/** Default Servlet name used by Google App Engine */\n+\tprivate static final String GAE_DEFAULT_SERVLET_NAME = \"_ah_default\";\n+\t\n \t/** Default Servlet name used by Resin */\n \tprivate static final String RESIN_DEFAULT_SERVLET_NAME = \"resin-file\";\n \t\n@@ -85,6 +88,9 @@ public void setServletContext(ServletContext servletContext) {\n \t\t\tif (this.servletContext.getNamedDispatcher(COMMON_DEFAULT_SERVLET_NAME) != null) {\n \t\t\t\tthis.defaultServletName = COMMON_DEFAULT_SERVLET_NAME;\n \t\t\t}\n+\t\t\telse if (this.servletContext.getNamedDispatcher(GAE_DEFAULT_SERVLET_NAME) != null) {\n+\t\t\t\tthis.defaultServletName = GAE_DEFAULT_SERVLET_NAME;\n+\t\t\t}\n \t\t\telse if (this.servletContext.getNamedDispatcher(RESIN_DEFAULT_SERVLET_NAME) != null) {\n \t\t\t\tthis.defaultServletName = RESIN_DEFAULT_SERVLET_NAME;\n \t\t\t}",
    "output": "DefaultServletHttpRequestHandler fails on Google App Engine"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -135,7 +135,14 @@ protected void initDatabase() {\n \n \t\t// Now populate the database\n \t\tif (this.databasePopulator != null) {\n-\t\t\tpopulateDatabase();\n+\t\t\ttry {\n+\t\t\t\tpopulateDatabase();\n+\t\t\t}\n+\t\t\tcatch (RuntimeException ex) {\n+\t\t\t\t// failed to populate, so leave it as not initialized\n+\t\t\t\tshutdownDatabase();\n+\t\t\t\tthrow ex;\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "EmbeddedDatabaseFactory shuts down database when failing to populate it in initDatabase"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java\n@@ -131,13 +131,13 @@ public final SqlRowSetMetaData getMetaData() {\n \t */\n \tpublic int findColumn(String columnLabel) throws InvalidResultSetAccessException {\n \t\tInteger columnIndex = columnLabelMap.get(columnLabel);\n-\t\ttry {\n-\t\t\tif (columnIndex == null) {\n+\t\tif (columnIndex == null) {\n+\t\t\ttry {\n \t\t\t\tcolumnIndex = this.resultSet.findColumn(columnLabel);\n \t\t\t}\n-\t\t}\n-\t\tcatch (SQLException se) {\n-\t\t\tthrow new InvalidResultSetAccessException(se);\n+\t\t\tcatch (SQLException se) {\n+\t\t\t\tthrow new InvalidResultSetAccessException(se);\n+\t\t\t}\n \t\t}\n \t\treturn columnIndex.intValue();\n \t}",
    "output": "Polished the support for looking up column values by column label"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java\n@@ -484,23 +484,13 @@ private Object resolveRequestParam(String paramName, boolean required, String de\n \t\tif (multipartRequest != null) {\n \t\t\tList<MultipartFile> files = multipartRequest.getFiles(paramName);\n \t\t\tif (!files.isEmpty()) {\n-\t\t\t\tif (files.size() == 1 && !paramType.isArray() && !Collection.class.isAssignableFrom(paramType)) {\n-\t\t\t\t\tparamValue = files.get(0);\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tparamValue = files;\n-\t\t\t\t}\n+\t\t\t\tparamValue = (files.size() == 1 ? files.get(0) : files);\n \t\t\t}\n \t\t}\n \t\tif (paramValue == null) {\n \t\t\tString[] paramValues = webRequest.getParameterValues(paramName);\n \t\t\tif (paramValues != null) {\n-\t\t\t\tif (paramValues.length == 1 && !paramType.isArray() && !Collection.class.isAssignableFrom(paramType)) {\n-\t\t\t\t\tparamValue = paramValues[0];\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tparamValue = paramValues;\n-\t\t\t\t}\n+\t\t\t\tparamValue = (paramValues.length == 1 ? paramValues[0] : paramValues);\n \t\t\t}\n \t\t}\n \t\tif (paramValue == null) {",
    "output": "revised @RequestParam processing to support CSV-to-array/collection binding with ConversionService"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -1326,11 +1326,12 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) {\n \t\t}\n \n \t\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {\n-\t\t\tif (!(bean instanceof BeanPostProcessor) &&\n+\t\t\tif (bean != null && !(bean instanceof BeanPostProcessor) &&\n \t\t\t\t\tthis.beanFactory.getBeanPostProcessorCount() < this.beanPostProcessorTargetCount) {\n \t\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\t\tlogger.info(\"Bean '\" + beanName + \"' is not eligible for getting processed by all \" +\n-\t\t\t\t\t\t\t\"BeanPostProcessors (for example: not eligible for auto-proxying)\");\n+\t\t\t\t\tlogger.info(\"Bean '\" + beanName + \"' of type [\" + bean.getClass() +\n+\t\t\t\t\t\t\t\"] is not eligible for getting processed by all BeanPostProcessors \" +\n+\t\t\t\t\t\t\t\"(for example: not eligible for auto-proxying)\");\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn bean;",
    "output": "add bean type to post-processing log statement"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java\n--- a/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java\n+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java\n@@ -376,12 +376,6 @@ protected void applyDefaultsFromAnnotation(WebService ann) {\n \t\t\tif (StringUtils.hasText(pn)) {\n \t\t\t\tsetPortName(pn);\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tString nm = ann.name();\n-\t\t\t\tif (StringUtils.hasText(nm)) {\n-\t\t\t\t\tsetPortName(nm);\n-\t\t\t\t}\n-\t\t\t}\n \t\t}\n \t}\n ",
    "output": "JaxWsPortClientInterceptor does not fall back to annotation-specified name as portName anymore"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n@@ -97,10 +97,11 @@ public static SQLErrorCodesFactory getInstance() {\n \t * @see #loadResource(String)\n \t */\n \tprotected SQLErrorCodesFactory() {\n-\t\tMap<String, SQLErrorCodes> errorCodes = null;\n+\t\tMap<String, SQLErrorCodes> errorCodes;\n \n \t\ttry {\n \t\t\tDefaultListableBeanFactory lbf = new DefaultListableBeanFactory();\n+\t\t\tlbf.setBeanClassLoader(getClass().getClassLoader());\n \t\t\tXmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf);\n \n \t\t\t// Load default SQL error codes.",
    "output": "JDBC bundle uses local ClassLoader as bean ClassLoader for \"sql-error-codes.xml\" parsing"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java b/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java\n@@ -351,7 +351,7 @@ protected boolean doReceiveAndExecute(\n \t\t\t\t}\n \t\t\t\tnoMessageReceived(invoker, sessionToUse);\n \t\t\t\t// Nevertheless call commit, in order to reset the transaction timeout (if any).\n-\t\t\t\tcommitIfNecessary(session, message);\n+\t\t\t\tcommitIfNecessary(sessionToUse, message);\n \t\t\t\t// Indicate that no message has been received.\n \t\t\t\treturn false;\n \t\t\t}",
    "output": "fix no-message-received commit case for non-cached Sessions"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/xml/AbstractXMLStreamReader.java b/org.springframework.core/src/main/java/org/springframework/util/xml/AbstractXMLStreamReader.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/xml/AbstractXMLStreamReader.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/xml/AbstractXMLStreamReader.java\n@@ -149,7 +149,8 @@ public void require(int expectedType, String namespaceURI, String localName) thr\n \tpublic String getAttributeValue(String namespaceURI, String localName) {\n \t\tfor (int i = 0; i < getAttributeCount(); i++) {\n \t\t\tQName name = getAttributeName(i);\n-\t\t\tif (name.getNamespaceURI().equals(namespaceURI) && name.getLocalPart().equals(localName)) {\n+\t\t\tif (name.getLocalPart().equals(localName) &&\n+\t\t\t\t\t(namespaceURI == null || name.getNamespaceURI().equals(namespaceURI))) {\n \t\t\t\treturn getAttributeValue(i);\n \t\t\t}\n \t\t}",
    "output": "AbstractXmlStreamReader getAttributeValue(String, String) does not handle null namespaceURI properly"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractSingleCheckedElementTag.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractSingleCheckedElementTag.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractSingleCheckedElementTag.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractSingleCheckedElementTag.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -90,7 +90,7 @@ protected int writeTagContent(TagWriter tagWriter) throws JspException {\n \t\tif (resolvedLabel != null) {\n \t\t\ttagWriter.startTag(\"label\");\n \t\t\ttagWriter.writeAttribute(\"for\", id);\n-\t\t\ttagWriter.appendValue(resolvedLabel.toString());\n+\t\t\ttagWriter.appendValue(convertToDisplayString(resolvedLabel));\n \t\t\ttagWriter.endTag();\n \t\t}\n ",
    "output": "consistent converting and escaping of label values (following AbstractMultiCheckedElementTag's )"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTests.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTests.java\n@@ -21,8 +21,10 @@\n import static org.junit.Assert.*;\n import org.junit.Test;\n \n-/** @author Arjen Poutsma */\n-public class UriUtilsTest {\n+/**\n+ * @author Arjen Poutsma\n+ */\n+public class UriUtilsTests {\n \n \tprivate static final String ENC = \"UTF-8\";\n ",
    "output": "rename UriUtilsTest to UriUtilsTests"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java\n@@ -417,7 +417,8 @@ private static String encode(String source, String encoding, BitSet notEncoded)\n \tprivate static byte[] encode(byte[] source, BitSet notEncoded) {\n \t\tAssert.notNull(source, \"'source' must not be null\");\n \t\tByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);\n-\t\tfor (byte b : source) {\n+\t\tfor (int i = 0; i < source.length; i++) {\n+\t\t\tint b = source[i];\n \t\t\tif (b < 0) {\n \t\t\t\tb += 256;\n \t\t\t}",
    "output": "fix accidental change to byte array loop"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/SimpleThreadScope.java b/org.springframework.context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/SimpleThreadScope.java\n@@ -47,7 +47,7 @@ public class SimpleThreadScope implements Scope {\n \n \tprivate static final Log logger = LogFactory.getLog(SimpleThreadScope.class);\n \n-\tprivate static final ThreadLocal<Map<String, Object>> threadScope =\n+\tprivate final ThreadLocal<Map<String, Object>> threadScope =\n \t\t\tnew NamedThreadLocal<Map<String, Object>>(\"SimpleThreadScope\") {\n \t\t\t\t@Override\n \t\t\t\tprotected Map<String, Object> initialValue() {",
    "output": "switched to instance variable"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n@@ -263,7 +263,7 @@ private void splitSqlScript(String script, char delim, List<String> statements)\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t\telse if (c == '\\n' || c == '\\t') {\n-\t\t\t\t\tcontinue;\n+\t\t\t\t\tc = ' ';\n \t\t\t\t}\n \t\t\t}\n \t\t\tsb.append(c);\n\ndiff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java\n@@ -71,7 +71,6 @@ public void testBuildWithCommentsAndFailedDrop() throws Exception {\n \t\tassertTestDatabaseCreated();\n \t}\n \n-\t@Ignore(\"Disabled until SPR-7449 is resolved\")\n \t@Test\n \tpublic void scriptWithEolBetweenTokens() throws Exception {\n \t\tdatabasePopulator.addScript(resourceLoader.getResource(\"users-schema.sql\"));",
    "output": "fix yet another regression with respect to newlines"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java\n@@ -110,6 +110,24 @@ public boolean exists() {\n \t\t}\r\n \t}\r\n \r\n+\t@Override\r\n+\tpublic boolean isReadable() {\r\n+\t\ttry {\r\n+\t\t\tURL url = getURL();\r\n+\t\t\tif (ResourceUtils.isFileURL(url)) {\r\n+\t\t\t\t// Proceed with file system resolution...\r\n+\t\t\t\tFile file = getFile();\r\n+\t\t\t\treturn (file.canRead() && !file.isDirectory());\r\n+\t\t\t}\r\n+\t\t\telse {\r\n+\t\t\t\treturn true;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tcatch (IOException ex) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t}\r\n+\r\n \t@Override\r\n \tpublic int contentLength() throws IOException {\r\n \t\tURL url = getURL();\r",
    "output": "implement file resolution for isReadableas well"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n@@ -254,15 +254,19 @@ private void splitSqlScript(String script, char delim, List<String> statements)\n \t\t\tif (c == '\\'') {\n \t\t\t\tinLiteral = !inLiteral;\n \t\t\t}\n-\t\t\tif ((c == delim || c == '\\n') && !inLiteral) {\n-\t\t\t\tif (sb.length() > 0) {\n-\t\t\t\t\tstatements.add(sb.toString());\n-\t\t\t\t\tsb = new StringBuilder();\n+\t\t\tif (!inLiteral) {\n+\t\t\t\tif (c == delim) {\n+\t\t\t\t\tif (sb.length() > 0) {\n+\t\t\t\t\t\tstatements.add(sb.toString());\n+\t\t\t\t\t\tsb = new StringBuilder();\n+\t\t\t\t\t}\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\telse if (c == '\\n' || c == '\\t') {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tsb.append(c);\n-\t\t\t}\n+\t\t\tsb.append(c);\n \t\t}\n \t\tif (StringUtils.hasText(sb)) {\n \t\t\tstatements.add(sb.toString());",
    "output": "fix accidental regression with respect to newlines"
  },
  {
    "input": "diff --git a/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/AbstractController.java b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/AbstractController.java\n--- a/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/AbstractController.java\n+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/AbstractController.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -188,7 +188,8 @@ public void handleActionRequest(ActionRequest request, ActionResponse response)\n \t\tif (this.synchronizeOnSession) {\n \t\t\tPortletSession session = request.getPortletSession(false);\n \t\t\tif (session != null) {\n-\t\t\t\tsynchronized (session) {\n+\t\t\t\tObject mutex = PortletUtils.getSessionMutex(session);\n+\t\t\t\tsynchronized (mutex) {\n \t\t\t\t\thandleActionRequestInternal(request, response);\n \t\t\t\t\treturn;\n \t\t\t\t}",
    "output": "Portlet AbstractController consistently uses session mutex if \"synchronizeOnSession\" is active"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java\n@@ -140,6 +140,7 @@ public class PropertyPlaceholderConfigurer extends PropertyResourceConfigurer\n \n \tprivate BeanFactory beanFactory;\n \n+\n \t/**\n \t * Set the prefix that a placeholder string starts with.\n \t * The default is \"${\".\n@@ -158,6 +159,16 @@ public void setPlaceholderSuffix(String placeholderSuffix) {\n \t\tthis.placeholderSuffix = placeholderSuffix;\n \t}\n \n+\t/**\n+\t * Specify the separating character between the placeholder variable\n+\t * and the associated default value, or <code>null</code> if no such\n+\t * special character should be processed as a value separator.\n+\t * The default is \":\".\n+\t */\n+\tpublic void setValueSeparator(String valueSeparator) {\n+\t\tthis.valueSeparator = valueSeparator;\n+\t}\n+\n \t/**\n \t * Set the system property mode by the name of the corresponding constant,\n \t * e.g. \"SYSTEM_PROPERTIES_MODE_OVERRIDE\".\n@@ -255,6 +266,7 @@ public void setBeanFactory(BeanFactory beanFactory) {\n \t\tthis.beanFactory = beanFactory;\n \t}\n \n+\n \t@Override\n \tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)\n \t\t\tthrows BeansException {",
    "output": "add missing setter method for the \"valueSeparator\" property"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java\n@@ -21,6 +21,7 @@\n import org.springframework.aop.SpringProxy;\n import org.springframework.aop.TargetClassAware;\n import org.springframework.aop.TargetSource;\n+import org.springframework.aop.support.AopUtils;\n import org.springframework.aop.target.SingletonTargetSource;\n import org.springframework.util.Assert;\n \n@@ -62,6 +63,9 @@ public static Class<?> ultimateTargetClass(Object candidate) {\n \t\t\t}\n \t\t\tcurrent = nested;\n \t\t}\n+\t\tif (result == null) {\n+\t\t\tresult = (AopUtils.isCglibProxy(candidate) ? candidate.getClass().getSuperclass() : candidate.getClass());\n+\t\t}\n \t\treturn result;\n \t}\n ",
    "output": "ultimateTargetClass falls back to raw class instead of returning null"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -189,7 +189,7 @@ public Savepoint createSavepoint() throws SQLException {\n \t@Override\n \tpublic void released() {\n \t\tsuper.released();\n-\t\tif (this.currentConnection != null) {\n+\t\tif (!isOpen() && this.currentConnection != null) {\n \t\t\tthis.connectionHandle.releaseConnection(this.currentConnection);\n \t\t\tthis.currentConnection = null;\n \t\t}",
    "output": "HibernateJpaDialect correctly closes borrowed connections even for nested JDBC executions"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -174,9 +174,7 @@ public class AnnotationMethodHandlerAdapter extends WebContentGenerator\n \n \tprivate ModelAndViewResolver[] customModelAndViewResolvers;\n \n-\tprivate HttpMessageConverter<?>[] messageConverters =\n-\t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),\n-\t\t\t\t\tnew SourceHttpMessageConverter(), new XmlAwareFormHttpMessageConverter()};\n+\tprivate HttpMessageConverter<?>[] messageConverters;\n \n \tprivate int order = Ordered.LOWEST_PRECEDENCE;\n \n@@ -191,6 +189,12 @@ public class AnnotationMethodHandlerAdapter extends WebContentGenerator\n \tpublic AnnotationMethodHandlerAdapter() {\n \t\t// no restriction of HTTP methods by default\n \t\tsuper(false);\n+\n+\t\t// See SPR-7316\n+\t\tStringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n+\t\tstringHttpMessageConverter.setWriteAcceptCharset(false);\n+\t\tmessageConverters = new HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), stringHttpMessageConverter,\n+\t\t\t\tnew SourceHttpMessageConverter(), new XmlAwareFormHttpMessageConverter()};\n \t}\n \n ",
    "output": "remove \"Accept-Charset\" header from response, generated by @ResponseBody"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -460,7 +460,7 @@ protected Collection convertToTypedCollection(\n \t\t\tCollection original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n-\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType) || original.isEmpty()) {\n+\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType)) {\n \t\t\treturn original;\n \t\t}\n \n@@ -542,7 +542,7 @@ protected Map convertToTypedMap(\n \t\t\tMap original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n-\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType) || original.isEmpty()) {\n+\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType)) {\n \t\t\treturn original;\n \t\t}\n ",
    "output": "remove eager skipping of empty collection conversion, for UtilNamespaceHandlerTests to pass again"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -460,7 +460,7 @@ protected Collection convertToTypedCollection(\n \t\t\tCollection original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n-\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType)) {\n+\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType) || original.isEmpty()) {\n \t\t\treturn original;\n \t\t}\n \n@@ -542,7 +542,7 @@ protected Map convertToTypedMap(\n \t\t\tMap original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n-\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType)) {\n+\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType) || original.isEmpty()) {\n \t\t\treturn original;\n \t\t}\n ",
    "output": "skip collection conversion early if empty"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -748,7 +748,7 @@ protected Object resolveCookieValue(String cookieName, Class paramType, NativeWe\n \t\t\t\treturn cookieValue;\n \t\t\t}\n \t\t\telse if (cookieValue != null) {\n-\t\t\t\treturn cookieValue.getValue();\n+\t\t\t\treturn urlPathHelper.decodeRequestString(servletRequest, cookieValue.getValue());\n \t\t\t}\n \t\t\telse {\n \t\t\t\treturn null;",
    "output": "@CookieValue returns decoded cookie value in a Servlet environment"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -225,6 +225,22 @@ public void testBindingWithErrors() throws Exception {\n \t\t}\n \t}\n \n+\tpublic void testBindingWithSystemFieldError() throws Exception {\n+\t\tTestBean rod = new TestBean();\n+\t\tDataBinder binder = new DataBinder(rod, \"person\");\n+\t\tMutablePropertyValues pvs = new MutablePropertyValues();\n+\t\tpvs.add(\"class.classLoader.URLs[0]\", \"http://myserver\");\n+\t\tbinder.setIgnoreUnknownFields(false);\n+\n+\t\ttry {\n+\t\t\tbinder.bind(pvs);\n+\t\t\tfail(\"Should have thrown NotWritablePropertyException\");\n+\t\t}\n+\t\tcatch (NotWritablePropertyException ex) {\n+\t\t\tassertTrue(ex.getMessage().contains(\"classLoader\"));\n+\t\t}\n+\t}\n+\n \tpublic void testBindingWithErrorsAndCustomEditors() throws Exception {\n \t\tTestBean rod = new TestBean();\n \t\tDataBinder binder = new DataBinder(rod, \"person\");",
    "output": "add test for invalid binding to ClassLoader"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java b/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java\n@@ -19,13 +19,18 @@\n import static org.junit.Assert.*;\n import static org.springframework.core.annotation.AnnotationUtils.*;\n \n+import java.io.Serializable;\n+import java.lang.annotation.ElementType;\n import java.lang.annotation.Inherited;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n import java.lang.reflect.Method;\n+import java.util.List;\n \n import org.junit.Test;\n import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationUtils.ParameterAnnotation;\n \n /**\n  * @author Rod Johnson\n@@ -364,7 +369,8 @@ public static interface InterfaceWithAnnotatedMethodParameters {\n \n \t\tvoid foo(String foo, @MyAnnotation(\"foo\") Long bar);\n \n-\t\tvoid bar(@MyAnnotation(\"first\") String first, String second, @MyAnnotation(\"third\") Serializable third);\n+\t\tvoid bar(@MyAnnotation(\"first\") String first, String second,\n+\t\t\t\t@Transactional @MyAnnotation(\"third\") Serializable third);\n \t}\n }\n ",
    "output": "Add missing imports. Added additional annotation to test interface to make sure no ClassCastException appears"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java b/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java\n@@ -41,17 +41,20 @@\n import org.springframework.http.MediaType;\n import org.springframework.http.MockHttpInputMessage;\n import org.springframework.http.MockHttpOutputMessage;\n+import org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n \n-/** @author Arjen Poutsma */\n+/**\n+ * @author Arjen Poutsma\n+ */\n public class FormHttpMessageConverterTests {\n \n \tprivate FormHttpMessageConverter converter;\n \n \t@Before\n \tpublic void setUp() {\n-\t\tconverter = new FormHttpMessageConverter();\n+\t\tconverter = new XmlAwareFormHttpMessageConverter();\n \t}\n \n \t@Test",
    "output": "add XmlAwareFormHttpMessageConverter, taking over the 3.0.2-introduced XML multipart support (avoiding a package cycle)"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -839,12 +839,12 @@ public ModelAndView getModelAndView(Method handlerMethod, Class handlerType, Obj\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {\n-\t\t\t\thandleResponseBody(returnValue, webRequest);\n+\t\t\tif (returnValue instanceof HttpEntity) {\n+\t\t\t\thandleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest);\n \t\t\t\treturn null;\n \t\t\t}\n-\t\t\telse if (returnValue instanceof HttpEntity) {\n-\t\t\t\thandleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest);\n+\t\t\telse if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {\n+\t\t\t\thandleResponseBody(returnValue, webRequest);\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\telse if (returnValue instanceof ModelAndView) {",
    "output": "ResponseEntity having body, headers and HttpStatus mixed up in responseEntity.getBody"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -89,7 +89,7 @@\n  * @author Sam Brannen\n  * @author Chris Beams\n  */\n-public final class DefaultListableBeanFactoryTests {\n+public class DefaultListableBeanFactoryTests {\n \n \tprivate static final Log factoryLog = LogFactory.getLog(DefaultListableBeanFactory.class);\n \n@@ -1280,6 +1280,15 @@ public void testAutowireBeanWithFactoryBeanByType() {\n \t\t\t\tfactoryBean, bean.getFactoryBean());\n \t}\n \n+\t@Test\n+\tpublic void testGetTypeForAbstractFactoryBean() {\n+\t\tDefaultListableBeanFactory lbf = new DefaultListableBeanFactory();\n+\t\tRootBeanDefinition bd = new RootBeanDefinition(FactoryBeanThatShouldntBeCalled.class);\n+\t\tbd.setAbstract(true);\n+\t\tlbf.registerBeanDefinition(\"factoryBean\", bd);\n+\t\tassertNull(lbf.getType(\"factoryBean\"));\n+\t}\n+\n \t/**\n \t * Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>\n \t * be autowired <em>by name</em>, as &amp; is an illegal character in",
    "output": "add test for getType against an abstract FactoryBean"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/DataSourceTransactionManagerTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/DataSourceTransactionManagerTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/DataSourceTransactionManagerTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/DataSourceTransactionManagerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,7 +21,6 @@\n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n import java.sql.Savepoint;\n-\n import javax.sql.DataSource;\n \n import junit.framework.TestCase;\n@@ -463,6 +462,8 @@ public void testParticipatingTransactionWithIncompatibleReadOnly() throws Except\n \t\tconControl.setReturnValue(false, 1);\n \t\tcon.rollback();\n \t\tconControl.setVoidCallable(1);\n+\t\tcon.setReadOnly(true);\n+\t\tconControl.setThrowable(new SQLException(\"read-only not supported\"), 1);\n \t\tcon.isReadOnly();\n \t\tconControl.setReturnValue(false, 1);\n \t\tcon.close();",
    "output": "DataSourceUtils lets timeout exceptions through even for setReadOnly calls (revised; )"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,6 +24,7 @@\n  * This class is intended for internal use by the Simple JDBC classes.\n  *\n  * @author Thomas Risberg\n+ * @author Juergen Hoeller\n  * @since 2.5\n  */\n public class DerbyCallMetaDataProvider extends GenericCallMetaDataProvider {\n@@ -32,11 +33,14 @@ public DerbyCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLEx\n \t\tsuper(databaseMetaData);\n \t}\n \n-\n \t@Override\n \tpublic String metaDataSchemaNameToUse(String schemaName) {\n-\t\t// Use current user schema if no schema specified\n-\t\treturn schemaName == null ? getUserName().toUpperCase() : super.metaDataSchemaNameToUse(schemaName);\n+\t\tif (schemaName != null) {\n+\t\t\treturn super.metaDataSchemaNameToUse(schemaName);\n+\t\t}\n+\t\t// Use current user schema if no schema specified...\n+\t\tString userName = getUserName();\n+\t\treturn (userName != null ? userName.toUpperCase() : null);\n \t}\n \n }",
    "output": "expect user name to be null"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,6 +24,7 @@\n  * This class is intended for internal use by the Simple JDBC classes.\n  *\n  * @author Thomas Risberg\n+ * @author Juergen Hoeller\n  * @since 2.5\n  */\n public class Db2CallMetaDataProvider extends GenericCallMetaDataProvider {\n@@ -63,8 +64,12 @@ public void initializeWithMetaData(DatabaseMetaData databaseMetaData) throws SQL\n \n \t@Override\n \tpublic String metaDataSchemaNameToUse(String schemaName) {\n-\t\t// Use current user schema if no schema specified\n-\t\treturn schemaName == null ? getUserName().toUpperCase() : super.metaDataSchemaNameToUse(schemaName);\n+\t\tif (schemaName != null) {\n+\t\t\treturn super.metaDataSchemaNameToUse(schemaName);\n+\t\t}\n+\t\t// Use current user schema if no schema specified...\n+\t\tString userName = getUserName();\n+\t\treturn (userName != null ? userName.toUpperCase() : null);\n \t}\n \n }",
    "output": "expect user name to be null"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java\n@@ -51,8 +51,7 @@\n public abstract class DataSourceUtils {\n \n \t/**\n-\t * Order value for TransactionSynchronization objects that clean up\n-\t * JDBC Connections.\n+\t * Order value for TransactionSynchronization objects that clean up JDBC Connections.\n \t */\n \tpublic static final int CONNECTION_SYNCHRONIZATION_ORDER = 1000;\n \n@@ -156,7 +155,12 @@ public static Integer prepareConnectionForTransaction(Connection con, Transactio\n \t\t\t\tcon.setReadOnly(true);\n \t\t\t}\n \t\t\tcatch (Throwable ex) {\n-\t\t\t\t// SQLException or UnsupportedOperationException\n+\t\t\t\tif (ex instanceof SQLException && (ex.getClass().getSimpleName().contains(\"Timeout\") ||\n+\t\t\t\t\t\t(ex.getCause() != null && ex.getCause().getClass().getSimpleName().contains(\"Timeout\")))) {\n+\t\t\t\t\t// Assume it's a connection timeout that would otherwise get lost: e.g. from C3P0.\n+\t\t\t\t\tthrow (SQLException) ex;\n+\t\t\t\t}\n+\t\t\t\t// \"read-only not supported\" SQLException or UnsupportedOperationException\n \t\t\t\t// -> ignore, it's just a hint anyway.\n \t\t\t\tlogger.debug(\"Could not set JDBC Connection read-only\", ex);\n \t\t\t}",
    "output": "DataSourceUtils lets timeout exceptions through even for setReadOnly calls"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java\n--- a/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java\n+++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java\n@@ -49,7 +49,7 @@ public class FormattingConversionServiceFactoryBean\n \t\timplements FactoryBean<FormattingConversionService>, InitializingBean {\n \n \tprivate static final boolean jodaTimePresent = ClassUtils.isPresent(\n-\t\t\t\"org.joda.time.DateTime\", FormattingConversionService.class.getClassLoader());\n+\t\t\t\"org.joda.time.LocalDate\", FormattingConversionService.class.getClassLoader());\n \n \tprivate Set<?> converters;\n ",
    "output": "check for \"org.joda.time.LocalDate\" in order to catch JodaTime 1.3 and higher only"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n@@ -604,7 +604,7 @@ private void setParameterValues(PreparedStatement preparedStatement, List<Object\n \t\tint colIndex = 0;\n \t\tfor (Object value : values) {\n \t\t\tcolIndex++;\n-\t\t\tif (columnTypes == null || colIndex < columnTypes.length) {\n+\t\t\tif (columnTypes == null || colIndex > columnTypes.length) {\n \t\t\t\tStatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value);\n \t\t\t}\n \t\t\telse {",
    "output": "fix index test for parameter types"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java\n@@ -89,10 +89,10 @@ public void setBeanClassLoader(ClassLoader classLoader) {\n \t}\n \n \tpublic void afterPropertiesSet() {\n-\t\tthis.asyncAnnotationAdvisor = (this.executor != null) ?\n-\t\t\t\tnew AsyncAnnotationAdvisor(this.executor) : new AsyncAnnotationAdvisor();\n+\t\tthis.asyncAnnotationAdvisor = (this.executor != null ?\n+\t\t\t\tnew AsyncAnnotationAdvisor(this.executor) : new AsyncAnnotationAdvisor());\n \t\tif (this.asyncAnnotationType != null) {\n-\t\t\tthis.asyncAnnotationAdvisor.setAsyncAnnotationType(asyncAnnotationType);\n+\t\t\tthis.asyncAnnotationAdvisor.setAsyncAnnotationType(this.asyncAnnotationType);\n \t\t}\n \t}\n \n@@ -115,7 +115,7 @@ public Object postProcessAfterInitialization(Object bean, String beanName) {\n \t\tClass<?> targetClass = AopUtils.getTargetClass(bean);\n \t\tif (AopUtils.canApply(this.asyncAnnotationAdvisor, targetClass)) {\n \t\t\tif (bean instanceof Advised) {\n-\t\t\t\t((Advised) bean).addAdvisor(this.asyncAnnotationAdvisor);\n+\t\t\t\t((Advised) bean).addAdvisor(0, this.asyncAnnotationAdvisor);\n \t\t\t\treturn bean;\n \t\t\t}\n \t\t\telse {",
    "output": "AsyncAnnotationBeanPostProcessor consistently adds @Async processing as first Advisor in the chain"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -158,8 +158,10 @@ public String getPathWithinServletMapping(HttpServletRequest request) {\n \t\telse {\n \t\t\t// Special case: URI is different from servlet path.\n \t\t\t// Can happen e.g. with index page: URI=\"/\", servletPath=\"/index.html\"\n-\t\t\t// Use servlet path in this case, as it indicates the actual target path.\n-\t\t\treturn servletPath;\n+\t\t\t// Use path info if available, as it indicates an index page within\n+\t\t\t// a servlet mapping. Otherwise, use the full servlet path.\n+\t\t\tString pathInfo = request.getPathInfo();\n+\t\t\treturn (pathInfo != null ? pathInfo : servletPath);\n \t\t}\n \t}\n ",
    "output": "MVC mappings properly apply even to welcome file entries that forward to a DispatcherServlet"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java\n@@ -34,6 +34,7 @@\n import org.springframework.jdbc.core.SqlParameter;\n import org.springframework.jdbc.core.metadata.CallMetaDataContext;\n import org.springframework.jdbc.core.namedparam.SqlParameterSource;\n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n /**\n@@ -203,6 +204,7 @@ public boolean isReturnValueRequired() {\n \t * @param parameter the {@link SqlParameter} to add\n \t */\n \tpublic void addDeclaredParameter(SqlParameter parameter) {\n+\t\tAssert.notNull(parameter, \"The supplied parameter must not be null\");\n \t\tif (!StringUtils.hasText(parameter.getName())) {\n \t\t\tthrow new InvalidDataAccessApiUsageException(\n \t\t\t\t\t\"You must specify a parameter name when declaring parameters for \\\"\" + getProcedureName() + \"\\\"\");",
    "output": "add null check for parameter"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java\n@@ -338,7 +338,7 @@ private URL determineDefaultPersistenceUnitRootUrl() {\n \t */\n \tprotected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {\n \t\tPersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName);\n-\t\tif (Proxy.isProxyClass(pui.getClass())) {\n+\t\tif (pui != null && Proxy.isProxyClass(pui.getClass())) {\n \t\t\t// JPA 2.0 PersistenceUnitInfo decorator with a SpringPersistenceUnitInfo as target\n \t\t\tJpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui);\n \t\t\treturn dec.getTarget();",
    "output": "properly return null from getPersistenceUnitInfo again"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java b/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -286,7 +286,7 @@ public Configuration createConfiguration() throws IOException, TemplateException\n \t\t}\n \n \t\tif (!CollectionUtils.isEmpty(this.freemarkerVariables)) {\n-\t\t\tconfig.setAllSharedVariables(new SimpleHash(this.freemarkerVariables));\n+\t\t\tconfig.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()));\n \t\t}\n \n \t\tif (this.defaultEncoding != null) {",
    "output": "set shared variables with configured ObjectWrapper"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java\n@@ -32,7 +32,6 @@\n import org.springframework.transaction.PlatformTransactionManager;\n import org.springframework.transaction.TransactionStatus;\n import org.springframework.transaction.TransactionSystemException;\n-import org.springframework.transaction.interceptor.TransactionAspectUtils;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.StringUtils;\n \n@@ -238,7 +237,7 @@ public void afterPropertiesSet() {\n \t * Determine the specific transaction manager to use for the given transaction.\n \t */\n \tprotected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr) {\n-\t\tif (this.transactionManager != null || this.beanFactory == null) {\n+\t\tif (this.transactionManager != null || this.beanFactory == null || txAttr == null) {\n \t\t\treturn this.transactionManager;\n \t\t}\n \t\tString qualifier = txAttr.getQualifier();",
    "output": "only retrieve transaction manager bean if necessary"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java b/org.springframework.jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java\n@@ -989,6 +989,9 @@ private boolean executeOngoingLoop() throws JMSException {\n \t\t\t\t\tif (wasWaiting) {\n \t\t\t\t\t\tactiveInvokerCount++;\n \t\t\t\t\t}\n+\t\t\t\t\tif (scheduledInvokers.size() > maxConcurrentConsumers) {\n+\t\t\t\t\t\tactive = false;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (active) {\n \t\t\t\t\tmessageReceived = (invokeListener() || messageReceived);",
    "output": "DefaultMessageListenerContainer reacts to maxConcurrentConsumers reduction for long-lived tasks"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java\n@@ -135,7 +135,7 @@ else if (this.optionSource instanceof Collection) {\n \t\telse if (this.optionSource instanceof Map) {\n \t\t\trenderFromMap(tagWriter);\n \t\t}\n-\t\telse if (this.optionSource instanceof Class && this.optionSource.getClass().isEnum()) {\n+\t\telse if (this.optionSource instanceof Class && ((Class) this.optionSource).isEnum()) {\n \t\t\trenderFromEnum(tagWriter);\n \t\t}\n \t\telse {",
    "output": "fix JSP SelectTag's support for rendering enum constants"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java b/org.springframework.web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java\n@@ -164,7 +164,7 @@ public void wasDefaultServletFolder() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void tomcatDefaultServletFolderWithCompliantSetting() throws Exception {\n+\tpublic void wasDefaultServletFolderWithCompliantSetting() throws Exception {\n \t\trequest.setAttribute(WEBSPHERE_URI_ATTRIBUTE, \"/test/foo/\");\n \t\ttomcatDefaultServletFolder();\n \t}",
    "output": "+ fix method name"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -295,6 +295,7 @@ public void testViewControllersOnWebSphere() throws Exception {\n \t\trequest.setRequestURI(\"/myapp/app/bar\");\n \t\trequest.setContextPath(\"/myapp\");\n \t\trequest.setServletPath(\"/app/\");\n+\t\trequest.setAttribute(\"com.ibm.websphere.servlet.uri_non_decoded\", \"/myapp/app/bar\");\n \t\tHandlerExecutionChain chain = mapping2.getHandler(request);\n \t\tassertEquals(4, chain.getInterceptors().length);\n \t\tassertTrue(chain.getInterceptors()[1] instanceof ConversionServiceExposingInterceptor);",
    "output": "remove trailing servlet path slash on WebSphere only"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java\n@@ -233,8 +233,10 @@ public String getServletPath(HttpServletRequest request) {\n \t\tif (servletPath == null) {\n \t\t\tservletPath = request.getServletPath();\n \t\t}\n-\t\tif (servletPath.length() > 1 && servletPath.endsWith(\"/\")) {\n-\t\t\t// Probably on WebSphere: removing trailing slash...\n+\t\tif (servletPath.length() > 1 && servletPath.endsWith(\"/\") &&\n+\t\t\t\trequest.getAttribute(WEBSPHERE_URI_ATTRIBUTE) != null) {\n+\t\t\t// On WebSphere, for a \"/foo/\" case that would be \"/foo\" on all other servlet containers:\n+\t\t\t// removing trailing slash, proceeding with that slash as final path mapping...\n \t\t\tservletPath = servletPath.substring(0, servletPath.length() - 1);\n \t\t}\n \t\treturn servletPath;",
    "output": "remove trailing servlet path slash on WebSphere only"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java\n@@ -89,6 +89,8 @@ public void decode() throws UnsupportedEncodingException {\n \t\tassertEquals(\"Invalid encoded URI\", \"foobar\", UriUtils.decode(\"foobar\", ENC));\n \t\tassertEquals(\"Invalid encoded URI\", \"foo bar\", UriUtils.decode(\"foo%20bar\", ENC));\n \t\tassertEquals(\"Invalid encoded URI\", \"foo+bar\", UriUtils.decode(\"foo%2bbar\", ENC));\n+\t\tassertEquals(\"Invalid encoded result\", \"T\\u014dky\\u014d\", UriUtils.decode(\"T%C5%8Dky%C5%8D\", ENC));\n+\t\tassertEquals(\"Invalid encoded result\", \"/Z\\u00fcrich\", UriUtils.decode(\"/Z%C3%BCrich\", ENC));\n \t}\n \n \t@Test(expected = IllegalArgumentException.class)",
    "output": "Add more tests"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java\n@@ -103,6 +103,13 @@ public void setPrefixJson(boolean prefixJson) {\n \t\tthis.prefixJson = prefixJson;\n \t}\n \n+\t/**\n+\t * Returns the attributes in the model that should be rendered by this view.\n+\t */\n+\tpublic Set<String> getRenderedAttributes() {\n+\t\treturn renderedAttributes;\n+\t}\n+\n \t/**\n \t * Sets the attributes in the model that should be rendered by this view. When set, all other model attributes will be\n \t * ignored.",
    "output": "MappingJacksonJsonView.renderedAttributes to be made visible to subclasses"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -372,8 +372,13 @@ public static Class<?> getUserClass(Object instance) {\n \t * @return the user-defined class\n \t */\n \tpublic static Class<?> getUserClass(Class<?> clazz) {\n-\t\treturn (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR) ?\n-\t\t\t\tclazz.getSuperclass() : clazz);\n+\t\tif (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n+\t\t\tClass<?> superClass = clazz.getSuperclass();\n+\t\t\tif (superClass != null && !Object.class.equals(superClass)) {\n+\t\t\t\treturn superClass;\n+\t\t\t}\n+\t\t}\n+\t\treturn clazz;\n \t}\n \n \t/**",
    "output": "specific detection of CGLIB subclasses in order to properly handle CGLIB interfaces"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -520,6 +520,10 @@ protected Collection convertToTypedCollection(\n \t\t\tCollection original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n \n \t\tboolean originalAllowed = requiredType.isInstance(original);\n+\t\tif (!originalAllowed && !Collection.class.isAssignableFrom(requiredType)) {\n+\t\t\treturn original;\n+\t\t}\n+\n \t\tMethodParameter methodParam = typeDescriptor.getMethodParameter();\n \t\tClass elementType = null;\n \t\tif (methodParam != null) {\n@@ -594,8 +598,14 @@ protected Collection convertToTypedCollection(\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tprotected Map convertToTypedMap(Map original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n+\tprotected Map convertToTypedMap(\n+\t\t\tMap original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) {\n+\n \t\tboolean originalAllowed = requiredType.isInstance(original);\n+\t\tif (!originalAllowed && !Map.class.isAssignableFrom(requiredType)) {\n+\t\t\treturn original;\n+\t\t}\n+\n \t\tClass keyType = null;\n \t\tClass valueType = null;\n \t\tMethodParameter methodParam = typeDescriptor.getMethodParameter();",
    "output": "typed map and collection conversion routines now eagerly reject non-assignable required types and avoid spurious InvocationException stack traces in debug log"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/validation/beanvalidation/ValidatorFactoryTests.java b/org.springframework.context/src/test/java/org/springframework/validation/beanvalidation/ValidatorFactoryTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/validation/beanvalidation/ValidatorFactoryTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/validation/beanvalidation/ValidatorFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2009 the original author or authors.\r\n+ * Copyright 2002-2010 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -131,7 +131,7 @@ public void testSpringValidationWithClassLevel() throws Exception {\n \r\n \r\n \t@NameAddressValid\r\n-\tprivate static class ValidPerson {\r\n+\tpublic static class ValidPerson {\r\n \r\n \t\t@NotNull\r\n \t\tprivate String name;\r\n@@ -157,7 +157,7 @@ public void setAddress(ValidAddress address) {\n \t}\r\n \r\n \r\n-\tprivate static class ValidAddress {\r\n+\tpublic static class ValidAddress {\r\n \r\n \t\t@NotNull\r\n \t\tprivate String street;\r",
    "output": "enable JPATraversableResolver to introspect test domain classes"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java b/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/TemplateParserContext.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2009 the original author or authors.\r\n+ * Copyright 2002-2010 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -31,8 +31,9 @@ public class TemplateParserContext implements ParserContext {\n \r\n \tprivate final String expressionSuffix;\r\n \r\n+\r\n \t/**\r\n-\t * Creates a new TemplateParserContext with the default #{ prefix and } suffix.\r\n+\t * Create a new TemplateParserContext with the default \"#{\" prefix and \"}\" suffix.\r\n \t */\r\n \tpublic TemplateParserContext() {\r\n \t\tthis(\"#{\", \"}\");\r",
    "output": "fix TemplateParserContext documentation"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java\n@@ -82,6 +82,7 @@ public final BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder defin\n \t\t\t// create proxy factory bean definition\n \t\t\tproxyDefinition.setBeanClass(ProxyFactoryBean.class);\n \t\t\tproxyDefinition.setScope(targetDefinition.getScope());\n+\t\t\tproxyDefinition.setLazyInit(targetDefinition.isLazyInit());\n \t\t\t// set the target\n \t\t\tproxyDefinition.setDecoratedDefinition(targetHolder);\n \t\t\tproxyDefinition.getPropertyValues().add(\"target\", targetHolder);",
    "output": "AbstractInterceptorDrivenBeanDefinitionDecorator preserves lazy-init flag as well"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,7 +78,7 @@ public void setMappings(Properties mappings) {\n \t * @param urlMap map with URLs as keys and beans as values\n \t * @see #setMappings\n \t */\n-\tpublic void setUrlMap(Map<String, Object> urlMap) {\n+\tpublic void setUrlMap(Map<String, ?> urlMap) {\n \t\tthis.urlMap.putAll(urlMap);\n \t}\n \n@@ -89,7 +89,7 @@ public void setUrlMap(Map<String, Object> urlMap) {\n \t * This is particularly useful for adding or overriding entries in child\n \t * bean definitions.\n \t */\n-\tpublic Map getUrlMap() {\n+\tpublic Map<String, ?> getUrlMap() {\n \t\treturn this.urlMap;\n \t}\n ",
    "output": "accept UrlMap with any value type"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java b/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,6 +58,7 @@ public void setMethodParam(String methodParam) {\n \t\tthis.methodParam = methodParam;\n \t}\n \n+\t@Override\n \tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n \t\t\tthrows ServletException, IOException {\n \n@@ -86,6 +87,7 @@ public HttpMethodRequestWrapper(String method, HttpServletRequest request) {\n \t\t\tthis.method = method;\n \t\t}\n \n+\t\t@Override\n \t\tpublic String getMethod() {\n \t\t\treturn this.method;\n \t\t}",
    "output": "Add @Override annotations"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n--- a/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,7 @@\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;\n import static org.junit.Assert.*;\n+import org.junit.Ignore;\n import org.junit.Test;\n import test.aop.PerThisAspect;\n import test.util.SerializationTestUtils;\n@@ -74,6 +75,7 @@ public void testWithInstanceWithNonAspect() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore  // InstantiationModelAwarePointcutAdvisorImpl not serializable yet\n \tpublic void testWithInstance() throws Exception {\n \t\tMultiplyReturnValue aspect = new MultiplyReturnValue();\n \t\tint multiple = 3;",
    "output": "ignore failing serialization test for the time being"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/Spr6972Tests.java b/org.springframework.beans/src/test/java/org/springframework/beans/Spr6972Tests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/Spr6972Tests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/Spr6972Tests.java\n@@ -0,0 +1,36 @@\n+package org.springframework.beans;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.xml.XmlBeanFactory;\n+import org.springframework.core.io.ClassPathResource;\n+\n+public class Spr6972Tests {\n+\t@Test\n+\tpublic void repro() {\n+\t\tBeanFactory bf = new XmlBeanFactory(new ClassPathResource(\"Spr6972Tests-context.xml\", this.getClass()));\n+\t\tTestSpringBean bean = bf.getBean(TestSpringBean.class);\n+\t\tassertTrue(bean.bool);\n+\t\tassertNotNull(bean.map);\n+\t}\n+}\n+\n+class TestSpringBean {\n+\tboolean bool;\n+\tMap<String, String> map;\n+\n+\tpublic TestSpringBean(boolean bool, Map<String, String> map) {\n+\t\tthis.bool = bool;\n+\t\tthis.map = map;\n+\t}\n+\n+\tpublic TestSpringBean(Map<String, String> map) {\n+\t\tthis(true, map);\n+\t}\n+}",
    "output": "failed attempt to reproduce issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractBindingResult.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -130,9 +130,9 @@ public String[] resolveMessageCodes(String errorCode) {\n \t}\n \n \tpublic String[] resolveMessageCodes(String errorCode, String field) {\n-\t\tString fixedField = fixedField(field);\n-\t\tClass fieldType = getFieldType(fixedField);\n-\t\treturn getMessageCodesResolver().resolveMessageCodes(errorCode, getObjectName(), fixedField, fieldType);\n+\t\tClass fieldType = getFieldType(field);\n+\t\treturn getMessageCodesResolver().resolveMessageCodes(\n+\t\t\t\terrorCode, getObjectName(), fixedField(field), fieldType);\n \t}\n \n ",
    "output": "fix double fixedField call for getFieldType"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/test/java/org/springframework/transaction/JtaTransactionManagerTests.java b/org.springframework.transaction/src/test/java/org/springframework/transaction/JtaTransactionManagerTests.java\n--- a/org.springframework.transaction/src/test/java/org/springframework/transaction/JtaTransactionManagerTests.java\n+++ b/org.springframework.transaction/src/test/java/org/springframework/transaction/JtaTransactionManagerTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -1395,7 +1395,7 @@ public void testJtaTransactionManagerWithIllegalStateExceptionOnRollbackOnly() t\n \t\tMockControl utControl = MockControl.createControl(UserTransaction.class);\n \t\tUserTransaction ut = (UserTransaction) utControl.getMock();\n \t\tut.getStatus();\n-\t\tutControl.setReturnValue(Status.STATUS_ACTIVE, 3);\n+\t\tutControl.setReturnValue(Status.STATUS_ACTIVE, 2);\n \t\tut.setRollbackOnly();\n \t\tutControl.setThrowable(new IllegalStateException(\"no existing transaction\"));\n \t\tutControl.replay();",
    "output": "avoid Synchronization List preparations upfront if possible"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n@@ -384,6 +384,15 @@ protected BasicTilesContainer instantiateContainer(TilesApplicationContext conte\n \t\t\treturn (useMutableTilesContainer ? new CachingTilesContainer() : new BasicTilesContainer());\n \t\t}\n \n+\t\t@Override\n+\t\tprotected void registerRequestContextFactory(String className,\n+\t\t\t\tList<TilesRequestContextFactory> factories, TilesRequestContextFactory parent) {\n+\t\t\t// Avoid Tiles 2.2 warn logging when default RequestContextFactory impl class not found\n+\t\t\tif (ClassUtils.isPresent(className, TilesConfigurer.class.getClassLoader())) {\n+\t\t\t\tsuper.registerRequestContextFactory(className, factories, parent);\n+\t\t\t}\n+\t\t}\n+\n \t\t@Override\n \t\tprotected List<URL> getSourceURLs(TilesApplicationContext applicationContext,\n \t\t\t\tTilesRequestContextFactory contextFactory) {",
    "output": "avoid ChainedTilesRequestContextFactory warn logging on Tiles 2.2"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n@@ -50,7 +50,7 @@\n  * @since 3.0\r\n  * @see CronTrigger\r\n  */\r\n-class CronSequenceGenerator {\r\n+public class CronSequenceGenerator {\r\n \r\n \tprivate final BitSet seconds = new BitSet(60);\r\n \r",
    "output": "make CronSequenceGenerator public"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -522,12 +522,13 @@ else if (requestBody != null) {\n \t\tpublic void doWithRequest(ClientHttpRequest httpRequest) throws IOException {\n \t\t\tsuper.doWithRequest(httpRequest);\n \t\t\tif (!requestEntity.hasBody()) {\n+\t\t\t\tHttpHeaders httpHeaders = httpRequest.getHeaders();\n \t\t\t\tHttpHeaders requestHeaders = requestEntity.getHeaders();\n \t\t\t\tif (!requestHeaders.isEmpty()) {\n-\t\t\t\t\thttpRequest.getHeaders().putAll(requestHeaders);\n+\t\t\t\t\thttpHeaders.putAll(requestHeaders);\n \t\t\t\t}\n-\t\t\t\tif (httpRequest.getHeaders().getContentLength() == -1) {\n-\t\t\t\t\thttpRequest.getHeaders().setContentLength(0L);\n+\t\t\t\tif (httpHeaders.getContentLength() == -1) {\n+\t\t\t\t\thttpHeaders.setContentLength(0L);\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {",
    "output": "Fix the build"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -222,7 +222,7 @@ public <T> T getBean(String name, Class<T> requiredType, Object... args) throws\n \t * @throws BeansException if the bean could not be created\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tprivate <T> T doGetBean(\n+\tprotected <T> T doGetBean(\n \t\t\tfinal String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly)\n \t\t\tthrows BeansException {\n ",
    "output": "change doGetBean signature back to protected"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/TaskExecutorFactoryBean.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/TaskExecutorFactoryBean.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/TaskExecutorFactoryBean.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/TaskExecutorFactoryBean.java\n@@ -20,6 +20,7 @@\n import org.springframework.beans.BeanWrapperImpl;\n import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.beans.factory.BeanNameAware;\n+import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.core.JdkVersion;\n@@ -33,7 +34,7 @@\n  * @author Mark Fisher\n  * @since 3.0\n  */\n-public class TaskExecutorFactoryBean implements FactoryBean<TaskExecutor>, BeanNameAware {\n+public class TaskExecutorFactoryBean implements FactoryBean<TaskExecutor>, BeanNameAware, DisposableBean {\n \n \tprivate volatile TaskExecutor target;\n \n@@ -89,6 +90,12 @@ public TaskExecutor getObject() throws Exception {\n \tpublic boolean isSingleton() {\n \t\treturn true;\n \t}\n+\t\n+\tpublic void destroy() throws Exception {\n+\t\tif (this.target instanceof DisposableBean) {\n+\t\t\t((DisposableBean) this.target).destroy();\n+\t\t}\n+\t}\n \n \tprivate void initializeExecutor() throws Exception {\n \t\tsynchronized (this.initializationMonitor) {",
    "output": "RESOLVED - issue , added DisposableBean to TaskExecutorFactoryBean"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPathFactoryBean.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPathFactoryBean.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPathFactoryBean.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPathFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -193,7 +193,8 @@ else if (this.propertyPath == null) {\n \tpublic Object getObject() throws BeansException {\n \t\tBeanWrapper target = this.targetBeanWrapper;\n \t\tif (target != null) {\n-\t\t\tif (logger.isWarnEnabled() && this.beanFactory instanceof ConfigurableBeanFactory &&\n+\t\t\tif (logger.isWarnEnabled() && this.targetBeanName != null &&\n+\t\t\t\t\tthis.beanFactory instanceof ConfigurableBeanFactory &&\n \t\t\t\t\t((ConfigurableBeanFactory) this.beanFactory).isCurrentlyInCreation(this.targetBeanName)) {\n \t\t\t\tlogger.warn(\"Target bean '\" + this.targetBeanName + \"' is still in creation due to a circular \" +\n \t\t\t\t\t\t\"reference - obtained value for property '\" + this.propertyPath + \"' may be outdated!\");",
    "output": "do not call isCurrentlyInCreation with null argument (in order to meet newly enforced assertions within the BeanFactory)"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,7 +52,7 @@ public abstract class AutoProxyUtils {\n \t * @return whether the given bean should be proxied with its target class\n \t */\n \tpublic static boolean shouldProxyTargetClass(ConfigurableListableBeanFactory beanFactory, String beanName) {\n-\t\tif (beanFactory.containsBeanDefinition(beanName)) {\n+\t\tif (beanName != null && beanFactory.containsBeanDefinition(beanName)) {\n \t\t\tBeanDefinition bd = beanFactory.getBeanDefinition(beanName);\n \t\t\treturn Boolean.TRUE.equals(bd.getAttribute(PRESERVE_TARGET_CLASS_ATTRIBUTE));\n \t\t}",
    "output": "fix @Configurable issue with null bean name"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java\n--- a/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java\n+++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianClientInterceptor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -223,6 +223,10 @@ public Object invoke(MethodInvocation invocation) throws Throwable {\n \t\t}\n \t\tcatch (InvocationTargetException ex) {\n \t\t\tThrowable targetEx = ex.getTargetException();\n+\t\t\t// Hessian 4.0 check: another layer of InvocationTargetException. \n+\t\t\tif (targetEx instanceof InvocationTargetException) {\n+\t\t\t\ttargetEx = ((InvocationTargetException) targetEx).getTargetException();\n+\t\t\t}\n \t\t\tif (targetEx instanceof HessianConnectionException) {\n \t\t\t\tthrow convertHessianAccessException(targetEx);\n \t\t\t}",
    "output": "fix exception propagation issue with Hessian 4.0"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -856,7 +856,8 @@ protected void addListener(ApplicationListener listener) {\n \t */\n \tprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n \t\t// Initialize conversion service for this context.\n-\t\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME)) {\n+\t\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n+\t\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n \t\t\tbeanFactory.setConversionService(\n \t\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n \t\t}",
    "output": "\"conversionService\" bean gets ignored if not of type ConversionService"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -147,7 +147,7 @@ private void initProxyClassLoader() {\n \t\t\t\tthis.proxyClassLoader = ((EntityManagerFactoryInfo) this.targetFactory).getBeanClassLoader();\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tthis.proxyClassLoader = EntityManagerFactory.class.getClassLoader();\n+\t\t\t\tthis.proxyClassLoader = this.targetFactory.getClass().getClassLoader();\n \t\t\t}\n \t\t}\n ",
    "output": "use target factory's ClassLoader in case of a raw EntityManagerFactory"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -2209,6 +2209,7 @@ public Object read(Class clazz, HttpInputMessage inputMessage)\n \t\tpublic void write(Object o, MediaType contentType, HttpOutputMessage outputMessage)\n \t\t\t\tthrows IOException, HttpMessageNotWritableException {\n \t\t\toutputMessage.getHeaders().setContentType(contentType);\n+\t\t\toutputMessage.getBody(); // force a header write\n \t\t}\n \t}\n ",
    "output": "AnnotationMethodHandlerAdapter.handleResponseBody prioritizes messageConverter over MediaType"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -193,7 +193,7 @@ public void destroy() throws Exception {\n \t * interface, for a consistent offering of abstract template methods.\n \t * @see org.springframework.beans.factory.FactoryBean#getObjectType()\n \t */\n-\tpublic abstract Class<? extends T> getObjectType();\n+\tpublic abstract Class<?> getObjectType();\n \n \t/**\n \t * Template method that subclasses must override to construct",
    "output": "widened AbstractFactoryBean's \"getObjectType\" signature to return any Class as well"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,8 +17,8 @@\n package org.springframework.jdbc.support;\n \n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.WeakHashMap;\n import javax.sql.DataSource;\n \n import org.apache.commons.logging.Log;\n@@ -85,7 +85,7 @@ public static SQLErrorCodesFactory getInstance() {\n \t/**\n \t * Map to cache the SQLErrorCodes instance per DataSource.\n \t */\n-\tprivate final Map<DataSource, SQLErrorCodes> dataSourceCache = new HashMap<DataSource, SQLErrorCodes>(16);\n+\tprivate final Map<DataSource, SQLErrorCodes> dataSourceCache = new WeakHashMap<DataSource, SQLErrorCodes>(16);\n \n \n \t/**",
    "output": "use WeakHashMap for DataSource-keyed cache"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -61,6 +61,7 @@ public void testContextLoaderListenerWithDefaultContext() {\n \t\tlistener.contextInitialized(event);\n \t\tWebApplicationContext context = (WebApplicationContext) sc.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n \t\tassertTrue(\"Correct WebApplicationContext exposed in ServletContext\", context instanceof XmlWebApplicationContext);\n+\t\tassertTrue(ContextLoader.getCurrentWebApplicationContext() instanceof XmlWebApplicationContext);\n \t\tLifecycleBean lb = (LifecycleBean) context.getBean(\"lifecycle\");\n \t\tassertTrue(\"Has father\", context.containsBean(\"father\"));\n \t\tassertTrue(\"Has rod\", context.containsBean(\"rod\"));\n@@ -70,6 +71,8 @@ public void testContextLoaderListenerWithDefaultContext() {\n \t\tassertFalse(context.containsBean(\"beans1.bean2\"));\n \t\tlistener.contextDestroyed(event);\n \t\tassertTrue(\"Destroyed\", lb.isDestroyed());\n+\t\tassertNull(sc.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE));\n+\t\tassertNull(ContextLoader.getCurrentWebApplicationContext());\n \t}\n \n \t/**",
    "output": "store a static WebApplicationContext reference if the Spring jars get deployed in the same web application as the ContextLoader"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java\n@@ -178,7 +178,7 @@ public void setCompleteAutoload(boolean completeAutoload) {\n \t\t\t\tthis.tilesInitializer = (TilesInitializer) clazz.newInstance();\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n-\t\t\t\tthrow new IllegalStateException(\"Tiles 2.2 not available\", ex);\n+\t\t\t\tthrow new IllegalStateException(\"Tiles-Extras 2.2 not available\", ex);\n \t\t\t}\n \t\t}\n \t\telse {",
    "output": "fix error message"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java\n@@ -97,12 +97,12 @@ public void conversionServiceInApplicationContext() {\n \t\tResourceTestBean tb = ctx.getBean(\"resourceTestBean\", ResourceTestBean.class);\n \t\tassertTrue(tb.getResource() instanceof ClassPathResource);\n \t\tassertTrue(tb.getResourceArray().length > 0);\n-\t\tassertTrue(tb.getResourceArray()[0] instanceof FileSystemResource);\n+\t\tassertTrue(tb.getResourceArray()[0] instanceof ClassPathResource);\n \t\tassertTrue(tb.getResourceMap().size() == 1);\n \t\tassertTrue(tb.getResourceMap().get(\"key1\") instanceof ClassPathResource);\n \t\tassertTrue(tb.getResourceArrayMap().size() == 1);\n \t\tassertTrue(tb.getResourceArrayMap().get(\"key1\").length > 0);\n-\t\tassertTrue(tb.getResourceArrayMap().get(\"key1\")[0] instanceof FileSystemResource);\n+\t\tassertTrue(tb.getResourceArrayMap().get(\"key1\")[0] instanceof ClassPathResource);\n \t}\n \n ",
    "output": "relaxed test conditions"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java\n@@ -96,12 +96,12 @@ public void conversionServiceInApplicationContext() {\n \t\tApplicationContext ctx = new ClassPathXmlApplicationContext(\"conversionService.xml\", getClass());\n \t\tResourceTestBean tb = ctx.getBean(\"resourceTestBean\", ResourceTestBean.class);\n \t\tassertTrue(tb.getResource() instanceof ClassPathResource);\n-\t\tassertTrue(tb.getResourceArray().length > 1);\n+\t\tassertTrue(tb.getResourceArray().length > 0);\n \t\tassertTrue(tb.getResourceArray()[0] instanceof FileSystemResource);\n \t\tassertTrue(tb.getResourceMap().size() == 1);\n \t\tassertTrue(tb.getResourceMap().get(\"key1\") instanceof ClassPathResource);\n \t\tassertTrue(tb.getResourceArrayMap().size() == 1);\n-\t\tassertTrue(tb.getResourceArrayMap().get(\"key1\").length > 1);\n+\t\tassertTrue(tb.getResourceArrayMap().get(\"key1\").length > 0);\n \t\tassertTrue(tb.getResourceArrayMap().get(\"key1\")[0] instanceof FileSystemResource);\n \t}\n ",
    "output": "relaxed test conditions"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -176,6 +176,9 @@ public abstract class AbstractApplicationContext extends DefaultResourceLoader\n \t/** Flag that indicates whether this context is currently active */\n \tprivate boolean active = false;\n \n+\t/** Flag that indicates whether this context has been closed already */\n+\tprivate boolean closed = false;\n+\n \t/** Synchronization monitor for the \"active\" flag */\n \tprivate final Object activeMonitor = new Object();\n \n@@ -964,7 +967,13 @@ public void close() {\n \t * @see #registerShutdownHook()\n \t */\n \tprotected void doClose() {\n-\t\tif (isActive()) {\n+\t\tboolean actuallyClose;\n+\t\tsynchronized (this.activeMonitor) {\n+\t\t\tactuallyClose = this.active && !this.closed;\n+\t\t\tthis.closed = true;\n+\t\t}\n+\n+\t\tif (actuallyClose) {\n \t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\tlogger.info(\"Closing \" + this);\n \t\t\t}",
    "output": "avoid double closing in case of shutdown hook"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n@@ -16,7 +16,6 @@\n \r\n package org.springframework.beans.factory.config;\r\n \r\n-import org.springframework.beans.factory.BeanFactory;\r\n import org.springframework.util.Assert;\r\n \r\n /**\r",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodResolver.java b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodResolver.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodResolver.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodResolver.java\n@@ -90,7 +90,7 @@ else if (method.isAnnotationPresent(ModelAttribute.class)) {\n \t\t\t}, ReflectionUtils.NON_BRIDGED_METHODS);\n \t\t}\n \t\tthis.typeLevelMapping = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);\n-\t\tSessionAttributes sessionAttributes = handlerType.getAnnotation(SessionAttributes.class);\n+\t\tSessionAttributes sessionAttributes = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class);\n \t\tthis.sessionAttributesFound = (sessionAttributes != null);\n \t\tif (this.sessionAttributesFound) {\n \t\t\tthis.sessionAttributeNames.addAll(Arrays.asList(sessionAttributes.value()));",
    "output": "@SessionAttributes works when used on an annotated controller interface with AOP proxying"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -944,7 +944,12 @@ public void close() {\n \t\t\t// If we registered a JVM shutdown hook, we don't need it anymore now:\n \t\t\t// We've already explicitly closed the context.\n \t\t\tif (this.shutdownHook != null) {\n-\t\t\t\tRuntime.getRuntime().removeShutdownHook(this.shutdownHook);\n+\t\t\t\ttry {\n+\t\t\t\t\tRuntime.getRuntime().removeShutdownHook(this.shutdownHook);\n+\t\t\t\t}\n+\t\t\t\tcatch (IllegalStateException ex) {\n+\t\t\t\t\t// ignore - VM is already shutting down\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}",
    "output": "ignore IllegalStateException when removing shutdown hook"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scripting/support/ResourceScriptSource.java b/org.springframework.context/src/main/java/org/springframework/scripting/support/ResourceScriptSource.java\n--- a/org.springframework.context/src/main/java/org/springframework/scripting/support/ResourceScriptSource.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scripting/support/ResourceScriptSource.java\n@@ -79,20 +79,9 @@ public String getScriptAsString() throws IOException {\n \t\tsynchronized (this.lastModifiedMonitor) {\n \t\t\tthis.lastModified = retrieveLastModifiedTime();\n \t\t}\n-\t\tReader reader = null;\n-\t\ttry {\n-\t\t\t// Try to get a FileReader first: generally more reliable.\n-\t\t\treader = new FileReader(getResource().getFile());\n-\t\t}\n-\t\tcatch (IOException ex) {\n-\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Could not open FileReader for \" + this.resource +\n-\t\t\t\t\t\t\" - falling back to InputStreamReader\", ex);\n-\t\t\t}\n-\t\t}\n-\t\tif (reader == null) {\n-\t\t\treader = new InputStreamReader(this.resource.getInputStream());\n-\t\t}\n+\t\t\n+\t\tReader reader = new InputStreamReader(this.resource.getInputStream(), \"UTF-8\");\n+\t\t\n \t\treturn FileCopyUtils.copyToString(reader);\n \t}\n \n@@ -128,5 +117,4 @@ public String suggestedClassName() {\n \tpublic String toString() {\n \t\treturn this.resource.toString();\n \t}\n-\n-}\n+}\n\\ No newline at end of file",
    "output": "+ used as the implicit encoding for reading scripts"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -365,8 +365,8 @@ public List<BeanFactoryPostProcessor> getBeanFactoryPostProcessors() {\n \t}\n \n \tpublic void addApplicationListener(ApplicationListener listener) {\n-\t\tif (isActive()) {\n-\t\t\taddListener(listener);\n+\t\tif (this.applicationEventMulticaster != null) {\n+\t\t\tthis.applicationEventMulticaster.addApplicationListener(listener);\n \t\t}\n \t\telse {\n \t\t\tthis.applicationListeners.add(listener);\n@@ -838,8 +838,13 @@ protected void registerListeners() {\n \t/**\n \t * Subclasses can invoke this method to register a listener.\n \t * Any beans in the context that are listeners are automatically added.\n+\t * <p>Note: This method only works within an active application context,\n+\t * i.e. when an ApplicationEventMulticaster is already available. Generally\n+\t * prefer the use of {@link #addApplicationListener} which is more flexible.\n \t * @param listener the listener to register\n+\t * @deprecated as of Spring 3.0, in favor of {@link #addApplicationListener}\n \t */\n+\t@Deprecated\n \tprotected void addListener(ApplicationListener listener) {\n \t\tgetApplicationEventMulticaster().addApplicationListener(listener);\n \t}",
    "output": "refined addApplicationListener to work any time during the refresh phase"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java\n@@ -101,11 +101,16 @@ public void parseMediaTypeIllegalSubtype() {\n \t\tMediaType.parseMediaType(\"audio/basic)\");\n \t}\n \n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void parseMediaTypeEmptyParameterAttribute() {\n+\t\tMediaType.parseMediaType(\"audio/*;=value\");\n+\t}\n+\n \t@Test(expected = IllegalArgumentException.class)\n \tpublic void parseMediaTypeEmptyParameterValue() {\n \t\tMediaType.parseMediaType(\"audio/*;attr=\");\n \t}\n-\t\n+\n \t@Test(expected = IllegalArgumentException.class)\n \tpublic void parseMediaTypeIllegalParameterAttribute() {\n \t\tMediaType.parseMediaType(\"audio/*;attr<=value\");",
    "output": "The class MediaType has a natural ordering that is inconsistent with equals, which is generally recommended or should otherwise at least be indicated in the javadoc"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.beans.factory.support;\n \n+import java.io.NotSerializableException;\n import java.io.ObjectStreamException;\n import java.io.Serializable;\n import java.lang.annotation.Annotation;\n@@ -929,7 +930,7 @@ protected Object writeReplace() throws ObjectStreamException {\n \t\t\treturn new SerializedBeanFactoryReference(this.serializationId);\n \t\t}\n \t\telse {\n-\t\t\treturn this;\n+\t\t\tthrow new NotSerializableException(\"DefaultListableBeanFactory has no serialization id\");\n \t\t}\n \t}\n ",
    "output": "throw NotSerializableException if no serialization id is available"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -80,6 +80,8 @@ public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPo\n \n \tprivate boolean setMetadataReaderFactoryCalled = false;\n \n+\tprivate boolean postProcessBeanDefinitionRegistryCalled = false;\n+\n \n \t/**\n \t * Set the {@link SourceExtractor} to use for generated bean definitions\n@@ -126,6 +128,7 @@ public int getOrder() {\n \t * Derive further bean definitions from the configuration classes in the registry.\n \t */\n \tpublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n+\t\tthis.postProcessBeanDefinitionRegistryCalled = true;\n \t\tprocessConfigBeanDefinitions(registry);\n \t}\n \n@@ -134,9 +137,15 @@ public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n \t * by replacing them with CGLIB-enhanced subclasses.\n \t */\n \tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n+\t\tif (!this.postProcessBeanDefinitionRegistryCalled) {\n+\t\t\t// BeanDefinitionRegistryPostProcessor hook apparently not supported...\n+\t\t\t// Simply call processConfigBeanDefinitions lazily at this point then.\n+\t\t\tprocessConfigBeanDefinitions((BeanDefinitionRegistry) beanFactory);\n+\t\t}\n \t\tenhanceConfigurationClasses(beanFactory);\n \t}\n \n+\n \t/**\n \t * Build and validate a configuration model based on the registry of\n \t * {@link Configuration} classes.",
    "output": "call processConfigBeanDefinitions lazily if postProcessBeanDefinitionRegistry hasn't been called"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/FactoryBean.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/FactoryBean.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/FactoryBean.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/FactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -90,7 +90,7 @@ public interface FactoryBean<T> {\n \t * or <code>null</code> if not known at the time of the call\n \t * @see ListableBeanFactory#getBeansOfType\n \t */\n-\tClass<? extends T> getObjectType();\n+\tClass<?> getObjectType();\n \n \t/**\n \t * Is the object managed by this factory a singleton? That is,",
    "output": "widened FactoryBean's \"getObjectType\" signature to return any Class<?>"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectFactoryBean.java b/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectFactoryBean.java\n--- a/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectFactoryBean.java\n+++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectFactoryBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,7 @@\n package org.springframework.jndi;\n \n import java.lang.reflect.Method;\n-\n+import java.lang.reflect.Modifier;\n import javax.naming.Context;\n import javax.naming.NamingException;\n \n@@ -295,7 +295,12 @@ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws Na\n \t\t\t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\t\t\"Cannot deactivate 'lookupOnStartup' without specifying a 'proxyInterface' or 'expectedType'\");\n \t\t\t\t}\n-\t\t\t\tproxyFactory.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader));\n+\t\t\t\tClass[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader);\n+\t\t\t\tfor (Class ifc : ifcs) {\n+\t\t\t\t\tif (Modifier.isPublic(ifc.getModifiers())) {\n+\t\t\t\t\t\tproxyFactory.addInterface(ifc);\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif (jof.exposeAccessContext) {\n \t\t\t\tproxyFactory.addAdvice(new JndiContextExposingInterceptor(jof.getJndiTemplate()));",
    "output": "JndiObjectFactoryBean explicitly only chooses public interfaces as default proxy interfaces"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanNameAutoProxyCreator.java b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanNameAutoProxyCreator.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanNameAutoProxyCreator.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanNameAutoProxyCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -84,6 +84,15 @@ protected Object[] getAdvicesAndAdvisorsForBean(Class beanClass, String beanName\n \t\t\t\tif (isMatch(beanName, mappedName)) {\n \t\t\t\t\treturn PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;\n \t\t\t\t}\n+\t\t\t\tBeanFactory beanFactory = getBeanFactory();\n+\t\t\t\tif (beanFactory != null) {\n+\t\t\t\t\tString[] aliases = beanFactory.getAliases(beanName);\n+\t\t\t\t\tfor (String alias : aliases) {\n+\t\t\t\t\t\tif (isMatch(alias, mappedName)) {\n+\t\t\t\t\t\t\treturn PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn DO_NOT_PROXY;",
    "output": "BeanNameAutoProxyCreator detects alias matches for specified bean names as well"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java\n@@ -30,11 +30,12 @@\n  * (i.e. per \".class\" file).\n  *\n  * @author Juergen Hoeller\n+ * @author Costin Leau\n  * @since 2.5\n  */\n public class CachingMetadataReaderFactory extends SimpleMetadataReaderFactory {\n \n-\tprivate static final int MAX_ENTRIES = 50;\n+\tprivate static final int MAX_ENTRIES = 256;\n \n \t@SuppressWarnings(\"serial\")\n \tprivate static final <K, V> Map<K, V> createLRUCache() {",
    "output": "+ increase size to 256"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -322,7 +322,7 @@ public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefin\n \t\t}\n \t\tif (!currentResources.add(encodedResource)) {\n \t\t\tthrow new BeanDefinitionStoreException(\n-\t\t\t\t\t\"Detected recursive loading of \" + encodedResource + \" - check your import definitions!\");\n+\t\t\t\t\t\"Detected cyclic loading of \" + encodedResource + \" - check your import definitions!\");\n \t\t}\n \t\ttry {\n \t\t\tInputStream inputStream = encodedResource.getResource().getInputStream();",
    "output": "change exception wording from \"recursive\" to \"cyclic\""
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java\n@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 2002-2009 the original author or authors.\r\n+ * Copyright 2002-2010 the original author or authors.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -145,6 +145,12 @@ public String getConversationId() {\n \t\t\tassertEquals(42, tb3.age);\r\n \t\t\tassertEquals(\"123 UK\", tb3.country);\r\n \t\t\tassertEquals(\"123 UK\", tb3.countryFactory.getObject());\r\n+\t\t\tSystem.getProperties().put(\"country\", \"US\");\r\n+\t\t\tassertEquals(\"123 UK\", tb3.country);\r\n+\t\t\tassertEquals(\"123 US\", tb3.countryFactory.getObject());\r\n+\t\t\tSystem.getProperties().put(\"country\", \"UK\");\r\n+\t\t\tassertEquals(\"123 UK\", tb3.country);\r\n+\t\t\tassertEquals(\"123 UK\", tb3.countryFactory.getObject());\r\n \t\t\tassertSame(tb0, tb3.tb);\r\n \r\n \t\t\ttb3 = (ValueTestBean) SerializationTestUtils.serializeAndDeserialize(tb3);\r",
    "output": "add test for expression re-evaluation"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -283,7 +283,8 @@ else if (method.getName().equals(\"unwrap\")) {\n \n \t\t\t// Invoke method on actual Query object.\n \t\t\ttry {\n-\t\t\t\treturn method.invoke(this.target, args);\n+\t\t\t\tObject retVal = method.invoke(this.target, args);\n+\t\t\t\treturn (retVal == this.target ? proxy : retVal);\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {\n \t\t\t\tthrow ex.getTargetException();",
    "output": "Query call chaining works with shared EntityManager proxy outside of transaction as well"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/ResourceArrayPropertyEditor.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/ResourceArrayPropertyEditor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/ResourceArrayPropertyEditor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/ResourceArrayPropertyEditor.java\n@@ -23,6 +23,9 @@\n import java.util.Collection;\n import java.util.List;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.core.io.Resource;\n import org.springframework.util.SystemPropertyUtils;\n \n@@ -50,6 +53,8 @@\n  */\n public class ResourceArrayPropertyEditor extends PropertyEditorSupport {\n \n+\tprivate static final Log logger = LogFactory.getLog(ResourceArrayPropertyEditor.class);\n+\n \tprivate final ResourcePatternResolver resourcePatternResolver;\n \n \tprivate final boolean ignoreUnresolvablePlaceholders;\n@@ -122,8 +127,10 @@ public void setValue(Object value) throws IllegalArgumentException {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tcatch (IOException ex) {\n-\t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Could not resolve resource location pattern [\" + pattern + \"]: \" + ex.getMessage());\n+\t\t\t\t\t\t// ignore - might be an unresolved placeholder or non-existing base directory\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"Could not retrieve resources for pattern '\" + pattern + \"': \" + ex);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse if (element instanceof Resource) {",
    "output": "proceed in case of resolution failure for a single resource entry in the list"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -340,6 +340,7 @@ protected Resource[] findPathMatchingResources(String locationPattern) throws IO\n \t\tResource[] rootDirResources = getResources(rootDirPath);\n \t\tSet<Resource> result = new LinkedHashSet<Resource>(16);\n \t\tfor (Resource rootDirResource : rootDirResources) {\n+\t\t\trootDirResource = resolveRootDirResource(rootDirResource);\n \t\t\tif (isJarResource(rootDirResource)) {\n \t\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));\n \t\t\t}",
    "output": "fix resolveRootDirResource regression"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -194,6 +194,7 @@ else if (method.getName().equals(\"toString\")) {\n \t\t\t\telse {\n \t\t\t\t\tsb.append(\" from DataSource [\").append(this.targetDataSource).append(\"]\");\n \t\t\t\t}\n+\t\t\t\treturn sb.toString();\n \t\t\t}\n \t\t\telse if (method.getName().equals(\"isClosed\")) {\n \t\t\t\treturn this.closed;",
    "output": "fix toString handling"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java\n@@ -151,9 +151,9 @@ protected Collection<ApplicationListener> getApplicationListeners(ApplicationEve\n \t\t\t\t\t\t\tallListeners.add(listener);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tOrderComparator.sort(allListeners);\n-\t\t\t\t\tthis.retrieverCache.put(cacheKey, retriever);\n \t\t\t\t}\n+\t\t\t\tOrderComparator.sort(allListeners);\n+\t\t\t\tthis.retrieverCache.put(cacheKey, retriever);\n \t\t\t}\n \t\t\treturn allListeners;\n \t\t}",
    "output": "fix retriever cache putting"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -67,7 +67,7 @@ static Object unwrapResourceIfNecessary(Object resource) {\n \t\t}\n \t\tif (aopAvailable) {\n \t\t\t// now unwrap scoped proxy\n-\t\t\tresourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resource);\n+\t\t\tresourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef);\n \t\t}\n \t\treturn resourceRef;\n \t}",
    "output": "fix scoped proxy unwrapping"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java\n@@ -18,6 +18,7 @@\n \n import static junit.framework.Assert.assertEquals;\n import static junit.framework.Assert.assertNull;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import java.math.BigDecimal;\n@@ -37,7 +38,6 @@\n import java.util.Properties;\n import java.util.Set;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.core.convert.ConversionFailedException;\n import org.springframework.core.convert.ConversionService;\n@@ -595,6 +595,11 @@ public void convertObjectToStringValueOfMethodPresent() {\n \tpublic void convertObjectToStringStringConstructorPresent() {\n \t\tassertEquals(\"123456789\", conversionService.convert(new SSN(\"123456789\"), String.class));\n \t}\n+\t\n+\t@Test\n+\tpublic void convertObjectToStringNotSupported() {\n+\t\tassertFalse(conversionService.canConvert(TestEntity.class, String.class));\n+\t}\n \n \t@Test\n \tpublic void convertObjectToObjectValueOfMethod() {",
    "output": "object to String not supported test case"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToStringConverter.java\n@@ -37,18 +37,18 @@\n  */\n final class ObjectToStringConverter implements ConditionalGenericConverter {\n \n+\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n+\t\treturn Collections.singleton(new ConvertiblePair(Object.class, String.class));\n+\t}\n+\n \tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\tClass sourceClass = sourceType.getObjectType();\n+\t\tClass<?> sourceClass = sourceType.getObjectType();\n \t\treturn Number.class.isAssignableFrom(sourceClass) || Boolean.class.equals(sourceClass) ||\n \t\t\t\tCharacter.class.equals(sourceClass) || CharSequence.class.isAssignableFrom(sourceClass) ||\n \t\t\t\tStringWriter.class.isAssignableFrom(sourceClass) || sourceClass.isEnum() ||\n \t\t\t\tObjectToObjectConverter.hasValueOfMethodOrConstructor(sourceClass, String.class);\n \t}\n \n-\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n-\t\treturn Collections.singleton(new ConvertiblePair(Object.class, String.class));\n-\t}\n-\n \tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n \t\treturn (source != null ? source.toString() : null);\n \t}",
    "output": "remove generic warning"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java\n@@ -116,9 +116,10 @@ protected Object formatFieldValue(String field, Object value) {\n \t\t}\n \t\tif (this.conversionService != null) {\n \t\t\t// Try custom formatter...\n-\t\t\tTypeDescriptor td = getPropertyAccessor().getPropertyTypeDescriptor(fixedField);\n-\t\t\tif (td != null) {\n-\t\t\t\treturn this.conversionService.convert(value, td, TypeDescriptor.valueOf(String.class));\n+\t\t\tTypeDescriptor fieldDesc = getPropertyAccessor().getPropertyTypeDescriptor(fixedField);\n+\t\t\tTypeDescriptor stringDesc = TypeDescriptor.valueOf(String.class);\n+\t\t\tif (fieldDesc != null && this.conversionService.canConvert(fieldDesc, stringDesc)) {\n+\t\t\t\treturn this.conversionService.convert(value, fieldDesc, stringDesc);\n \t\t\t}\n \t\t}\n \t\treturn value;",
    "output": "only try to convert to String if canConvert returns true"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java\n@@ -623,8 +623,17 @@ protected void checkRequiredFields(MutablePropertyValues mpvs) {\n \t\t\t}\n \t\t\tfor (String field : requiredFields) {\n \t\t\t\tPropertyValue pv = propertyValues.get(field);\n-\t\t\t\tif (pv == null || pv.getValue() == null ||\n-\t\t\t\t\t\t(pv.getValue() instanceof String && !StringUtils.hasText((String) pv.getValue()))) {\n+\t\t\t\tboolean empty = (pv == null || pv.getValue() == null);\n+\t\t\t\tif (!empty) {\n+\t\t\t\t\tif (pv.getValue() instanceof String) {\n+\t\t\t\t\t\tempty = !StringUtils.hasText((String) pv.getValue());\n+\t\t\t\t\t}\n+\t\t\t\t\telse if (pv.getValue() instanceof String[]) {\n+\t\t\t\t\t\tString[] values = (String[]) pv.getValue();\n+\t\t\t\t\t\tempty = (values.length == 0 || !StringUtils.hasText(values[0]));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (empty) {\n \t\t\t\t\t// Use bind error processor to create FieldError.\n \t\t\t\t\tgetBindingErrorProcessor().processMissingFieldError(field, getInternalBindingResult());\n \t\t\t\t\t// Remove property from property values to bind:",
    "output": "add special handling of String array values for required fields, e.g. for WebRequestDataBinder"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -1575,13 +1575,23 @@ private static class MyBinderInitializingCommandProvidingFormController extends\n \t\t@InitBinder\n \t\tprivate void initBinder(WebDataBinder binder) {\n \t\t\tbinder.initBeanPropertyAccess();\n+\t\t\tbinder.setRequiredFields(\"sex\");\n \t\t\tLocalValidatorFactoryBean vf = new LocalValidatorFactoryBean();\n \t\t\tvf.afterPropertiesSet();\n \t\t\tbinder.setValidator(vf);\n \t\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n \t\t\tdateFormat.setLenient(false);\n \t\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n \t\t}\n+\n+\t\t@Override\n+\t\t@RequestMapping(\"/myPath.do\")\n+\t\tpublic String myHandle(@ModelAttribute(\"myCommand\") @Valid TestBean tb, BindingResult errors, ModelMap model) {\n+\t\t\tif (!errors.hasFieldErrors(\"sex\")) {\n+\t\t\t\tthrow new IllegalStateException(\"requiredFields not applied\");\n+\t\t\t}\n+\t\t\treturn super.myHandle(tb, errors, model);\n+\t\t}\n \t}\n \n \t@Controller",
    "output": "add unit test for setRequiredFields with @MVC"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java\n--- a/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java\n@@ -71,6 +71,9 @@ class JBossClassLoaderAdapter {\n \t\t\t}\r\n \r\n \t\t\tthis.classLoader = clazzLoader;\r\n+\t\t\t// use the classloader that loaded the classloader to load\r\n+\t\t\t// the types for reflection purposes\r\n+\t\t\tclassLoader = clazzLoader.getClass().getClassLoader();\r\n \r\n \t\t\t// BaseClassLoader#getPolicy\r\n \t\t\tMethod method = clazzLoaderType.getDeclaredMethod(GET_POLICY);\r\n\ndiff --git a/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java\n--- a/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java\n+++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java\n@@ -70,5 +70,4 @@ public ClassLoader getInstrumentableClassLoader() {\n \tpublic ClassLoader getThrowawayClassLoader() {\r\n \t\treturn new SimpleThrowawayClassLoader(getInstrumentableClassLoader());\r\n \t}\r\n-\r\n-}\r\n+}\n\\ No newline at end of file",
    "output": "+ improved JBoss LTW by using the proper class loader for loading reflection types"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java\n@@ -1081,13 +1081,6 @@ public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> an\n \t\treturn getBeanFactory().getBeansWithAnnotation(annotationType);\n \t}\n \n-\tpublic Map<String, Object> getBeansWithAnnotation(\n-\t\t\tClass<? extends Annotation> annotationType, boolean includeNonSingletons, boolean allowEagerInit)\n-\t\t\tthrows BeansException {\n-\n-\t\treturn getBeanFactory().getBeansWithAnnotation(annotationType, includeNonSingletons, allowEagerInit);\n-\t}\n-\n \tpublic <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) {\n \t\treturn getBeanFactory().findAnnotationOnBean(beanName, annotationType);\n \t}",
    "output": "remove getBeansWithAnnotation(Class,boolean,boolean) method from ListableBeanFactory; reimplemented getBeansWithAnnotation(Class) to avoid use of getBeanNamesForType(Object.class)"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -69,6 +69,7 @@\n import org.springframework.core.convert.ConversionService;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.util.StringValueResolver;\n \n@@ -1212,7 +1213,7 @@ public Class run() throws Exception {\n \t}\n \t\n \tprivate Class doResolveBeanClass(RootBeanDefinition mbd, Class... typesToMatch) throws ClassNotFoundException {\n-\t\tif (typesToMatch != null) {\n+\t\tif (!ObjectUtils.isEmpty(typesToMatch)) {\n \t\t\tClassLoader tempClassLoader = getTempClassLoader();\n \t\t\tif (tempClassLoader != null) {\n \t\t\t\tif (tempClassLoader instanceof DecoratingClassLoader) {",
    "output": "fix accidental breakage in bean class resolution with tempClassLoader"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -226,9 +226,10 @@ private Map<String, Lifecycle> getLifecycleBeans() {\n \t\tString[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);\n \t\tfor (String beanName : beanNames) {\n \t\t\tString beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName);\n-\t\t\tString beanNameToCheck = (this.beanFactory.isFactoryBean(beanNameToRegister) ?\n-\t\t\t\t\tBeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);\n-\t\t\tif (this.beanFactory.containsSingleton(beanNameToRegister) ||\n+\t\t\tboolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister);\n+\t\t\tString beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);\n+\t\t\tif ((this.beanFactory.containsSingleton(beanNameToRegister) &&\n+\t\t\t\t\t(!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||\n \t\t\t\t\tSmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {\n \t\t\t\tLifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class);\n \t\t\t\tif (bean != this) {",
    "output": "fix non-Lifecycle-FactoryBean with exposed Lifecycle object case"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -217,13 +217,15 @@ else if (bean instanceof SmartLifecycle) {\n \t}\n \n \tprivate Map<String, Lifecycle> getLifecycleBeans() {\n-\t\tString[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);\n \t\tMap<String, Lifecycle> beans = new LinkedHashMap<String, Lifecycle>();\n-\t\tfor (String beanName : beanNames) {\n-\t\t\tif (this.beanFactory.containsSingleton(beanName) ||\n-\t\t\t\t\tSmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanName))) {\n-\t\t\t\tObject bean = this.beanFactory.getBean(beanName);\n-\t\t\t\tif (!this.equals(bean)) {\n+\t\tMap<String, SmartLifecycle> smartLifecycles =\n+\t\t\t\tthis.beanFactory.getBeansOfType(SmartLifecycle.class, false, true);\n+\t\tbeans.putAll(smartLifecycles);\n+\t\tString[] singletonNames = this.beanFactory.getSingletonNames();\n+\t\tfor (String beanName : singletonNames) {\n+\t\t\tif (!beans.containsKey(beanName)) {\n+\t\t\t\tObject bean = this.beanFactory.getSingleton(beanName);\n+\t\t\t\tif (bean instanceof Lifecycle && !this.equals(bean)) {\n \t\t\t\t\tbeans.put(beanName, (Lifecycle) bean);\n \t\t\t\t}\n \t\t\t}",
    "output": "detect Lifecycle-implementing FactoryBeans as well"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n@@ -121,7 +121,7 @@ public <T> Set<ConstraintViolation<T>> validateProperty(T object, String propert\n \tpublic <T> Set<ConstraintViolation<T>> validateValue(\r\n \t\t\tClass<T> beanType, String propertyName, Object value, Class<?>... groups) {\r\n \r\n-\t\treturn this.targetValidator.validateValue(beanType, propertyName, groups);\r\n+\t\treturn this.targetValidator.validateValue(beanType, propertyName, value, groups);\r\n \t}\r\n \r\n \tpublic BeanDescriptor getConstraintsForClass(Class<?> clazz) {\r",
    "output": "fix Validator delegation code"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -84,7 +84,7 @@ public TypeDescriptor(MethodParameter methodParameter) {\n \t * @param methodParameter the MethodParameter to wrap\n \t * @param type the specific type to expose (may be an array/collection element)\n \t */\n-\tprotected TypeDescriptor(MethodParameter methodParameter, Class type) {\n+\tprotected TypeDescriptor(MethodParameter methodParameter, Class<?> type) {\n \t\tAssert.notNull(methodParameter, \"MethodParameter must not be null\");\n \t\tthis.methodParameter = methodParameter;\n \t\tthis.type = type;",
    "output": "remove generic warning"
  },
  {
    "input": "diff --git a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n--- a/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java\n@@ -154,8 +154,8 @@ else if (method.getName().equals(\"getEntityManagerFactory\")) {\n \t\t\t\t// JPA 2.0: return EntityManagerFactory without creating an EntityManager.\n \t\t\t\treturn this.targetFactory;\n \t\t\t}\n-\t\t\telse if (method.getName().equals(\"getQueryBuilder\") || method.getName().equals(\"getMetamodel\")) {\n-\t\t\t\t// JPA 2.0: return EntityManagerFactory's QueryBuilder/Metamodel (avoid creation of EntityManager)\n+\t\t\telse if (method.getName().equals(\"getCriteriaBuilder\") || method.getName().equals(\"getMetamodel\")) {\n+\t\t\t\t// JPA 2.0: return EntityManagerFactory's CriteriaBuilder/Metamodel (avoid creation of EntityManager)\n \t\t\t\ttry {\n \t\t\t\t\treturn EntityManagerFactory.class.getMethod(method.getName()).invoke(this.targetFactory);\n \t\t\t\t}",
    "output": "upgrade JPA 2.0 support to the final spec (supporting the \"getCriteriaBuilder\" method)"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java\n@@ -169,9 +169,18 @@ public void resetFilters(boolean useDefaultFilters) {\n \tprotected void registerDefaultFilters() {\n \t\tthis.includeFilters.add(new AnnotationTypeFilter(Component.class));\n \t\tClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();\n+\t\ttry {\n+\t\t\tthis.includeFilters.add(new AnnotationTypeFilter(\n+\t\t\t\t\t((Class<? extends Annotation>) cl.loadClass(\"javax.annotation.ManagedBean\"))));\n+\t\t\tlogger.info(\"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\");\n+\t\t}\n+\t\tcatch (ClassNotFoundException ex) {\n+\t\t\t// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.\n+\t\t}\n \t\ttry {\n \t\t\tthis.includeFilters.add(new AnnotationTypeFilter(\n \t\t\t\t\t((Class<? extends Annotation>) cl.loadClass(\"javax.inject.Named\"))));\n+\t\t\tlogger.info(\"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\");\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\t// JSR-330 API not available - simply skip.",
    "output": "component scanning autodetects the new EE 6 \"javax.annotation.ManagedBean\" stereotype"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n@@ -215,7 +215,7 @@ protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDe\n \t// internal helpers\n \n \tprivate GenericConverter.ConvertiblePair getRequiredTypeInfo(Object converter, Class<?> genericIfc) {\n-\t\tClass[] args = GenericTypeResolver.resolveTypeArguments(converter.getClass(), genericIfc);\n+\t\tClass<?>[] args = GenericTypeResolver.resolveTypeArguments(converter.getClass(), genericIfc);\n \t\treturn (args != null ? new GenericConverter.ConvertiblePair(args[0], args[1]) : null);\n \t}\n ",
    "output": "remove generic warning"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java\n@@ -114,7 +114,7 @@ public void register(Class<?>... annotatedClasses) {\n \t * Perform a scan within the specified base packages.\n \t * @param basePackages the packages to check for annotated classes\n \t */\n-\tpublic void scan(String[] basePackages) {\n+\tpublic void scan(String... basePackages) {\n \t\tthis.scanner.scan(basePackages);\n \t}\n ",
    "output": "use varargs for scan method as well"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java\n@@ -44,10 +44,10 @@ public BeanDefinition parse(Element element, ParserContext parserContext) {\n \t\t\tString[] pathPatterns;\n \t\t\tBeanDefinitionHolder interceptorDef;\n \t\t\tif (\"interceptor\".equals(interceptor.getLocalName())) {\n-\t\t\t\tList<Element> paths = DomUtils.getChildElementsByTagName(interceptor, \"path\");\n+\t\t\t\tList<Element> paths = DomUtils.getChildElementsByTagName(interceptor, \"mapping\");\n \t\t\t\tpathPatterns = new String[paths.size()];\n \t\t\t\tfor (int i = 0; i < paths.size(); i++) {\n-\t\t\t\t\tpathPatterns[i] = paths.get(i).getAttribute(\"value\");\n+\t\t\t\t\tpathPatterns[i] = paths.get(i).getAttribute(\"path\");\n \t\t\t\t}\n \t\t\t\tElement interceptorBean = DomUtils.getChildElementByTagName(interceptor, \"bean\");\n \t\t\t\tinterceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptorBean);",
    "output": "rename path element to mapping per code review"
  },
  {
    "input": "diff --git a/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -600,9 +600,12 @@ protected Object resolveCookieValue(String cookieName, Class paramType, NativeWe\n \t\t\tif (Cookie.class.isAssignableFrom(paramType)) {\n \t\t\t\treturn cookieValue;\n \t\t\t}\n-\t\t\telse {\n+\t\t\telse if (cookieValue != null) {\n \t\t\t\treturn cookieValue.getValue();\n \t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
    "output": "NullPointerException when using @CookieValue annotation"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java\n@@ -33,6 +33,7 @@\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.context.Lifecycle;\n import org.springframework.context.LifecycleProcessor;\n+import org.springframework.context.Phased;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.util.Assert;\n \n@@ -220,8 +221,8 @@ private Map<String, Lifecycle> getLifecycleBeans() {\n \t}\n \n \tprivate static int getPhase(Lifecycle bean) {\n-\t\treturn (bean instanceof SmartLifecycle) ?\n-\t\t\t\t((SmartLifecycle) bean).getPhase() : 0;\n+\t\treturn (bean instanceof Phased) ?\n+\t\t\t\t((Phased) bean).getPhase() : 0;\n \t}\n \n ",
    "output": "When determining start/stop order, the DefaultLifecycleProcessor checks for the new Phased interface rather than SmartLifecycle now"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java\n@@ -193,9 +193,6 @@ public static Object invokeMethod(Method method, Object target) {\n \t * @return the invocation result, if any\n \t */\n \tpublic static Object invokeMethod(Method method, Object target, Object... args) {\n-\t\tif (target == null) {\n-\t\t\tthrow new IllegalArgumentException(\"target cannot be null\");\n-\t\t}\n \t\ttry {\n \t\t\treturn method.invoke(target, args);\n \t\t}",
    "output": "remove inappropriate assertion that prevents static method calls"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java\n@@ -46,26 +46,13 @@ public void testParameterizableViewController() throws Exception {\n \t\tString viewName = \"viewName\";\n \t\tParameterizableViewController pvc = new ParameterizableViewController();\n \t\tpvc.setViewName(viewName);\n-\t\tpvc.initApplicationContext();\n \t\t// We don't care about the params.\n \t\tModelAndView mv = pvc.handleRequest(new MockHttpServletRequest(\"GET\", \"foo.html\"), null);\n \t\tassertTrue(\"model has no data\", mv.getModel().size() == 0);\n \t\tassertTrue(\"model has correct viewname\", mv.getViewName().equals(viewName));\n \t\tassertTrue(\"getViewName matches\", pvc.getViewName().equals(viewName));\n \t}\n \n-\tpublic void testParameterizableViewControllerWithPropertyNotSet() {\n-\t\tParameterizableViewController pvc = new ParameterizableViewController();\n-\t\ttry {\n-\t\t\tpvc.initApplicationContext();\n-\t\t\tfail(\"should require viewName property to be set\");\n-\t\t}\n-\t\tcatch (IllegalArgumentException ex){\n-\t\t\t// expected\n-\t\t\tassertTrue(\"meaningful exception message\", ex.getMessage().indexOf(\"viewName\") != -1);\n-\t\t}\n-\t}\n-\n \tpublic void testServletForwardingController() throws Exception {\n \t\tServletForwardingController sfc = new ServletForwardingController();\n \t\tsfc.setServletName(\"action\");",
    "output": "remove now obsolete test case"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -130,6 +130,19 @@ public void testCustomValidator() throws Exception {\n \t\tassertTrue(container.getBean(TestValidator.class).validatorInvoked);\n \t\tassertFalse(handler.recordedValidationError);\n \t}\n+\t\n+\t@Test\n+\tpublic void testInterceptors() throws Exception {\n+\t\tXmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(container);\n+\t\treader.loadBeanDefinitions(new ClassPathResource(\"mvc-config-interceptors.xml\", getClass()));\n+\t\tassertEquals(4, container.getBeanDefinitionCount());\n+\t\tDefaultAnnotationHandlerMapping mapping = container.getBean(DefaultAnnotationHandlerMapping.class);\n+\t\tassertNotNull(mapping);\n+\t\tassertEquals(0, mapping.getOrder());\n+\t\tAnnotationMethodHandlerAdapter adapter = container.getBean(AnnotationMethodHandlerAdapter.class);\n+\t\tassertNotNull(adapter);\n+\t\tassertNotNull(container.getBean(FormattingConversionServiceFactoryBean.class));\n+\t}\n \n \t@Controller\n \tpublic static class TestController {",
    "output": "mvc:interceptors namespace element initial commit"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java\n--- a/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java\n+++ b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSchedulerLifecycleTests.java\n@@ -39,7 +39,6 @@ public void destroyLazyInitSchedulerWithDefaultShutdownOrderDoesNotHang() {\n \t\tsw.start(\"lazyScheduler\");\n \t\tcontext.destroy();\n \t\tsw.stop();\n-\t\tSystem.out.println(sw.getTotalTimeMillis());\n \t\tassertTrue(\"Quartz Scheduler with lazy-init is hanging on destruction: \" +\n \t\t\t\tsw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500);\n \t}\n@@ -52,7 +51,6 @@ public void destroyLazyInitSchedulerWithCustomShutdownOrderDoesNotHang() {\n \t\tsw.start(\"lazyScheduler\");\n \t\tcontext.destroy();\n \t\tsw.stop();\n-\t\tSystem.out.println(sw.getTotalTimeMillis());\n \t\tassertTrue(\"Quartz Scheduler with lazy-init is hanging on destruction: \" +\n \t\t\t\tsw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500);\n \t}",
    "output": "remove printlns from test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaverTests.java b/org.springframework.context/src/test/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaverTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaverTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaverTests.java\n@@ -48,7 +48,7 @@ public class GlassFishLoadTimeWeaverTests {\n \n \tprivate class DummyInstrumentableClassLoader extends SecureClassLoader {\n \n-\t\tstatic String INSTR_CL_NAME = GlassFishClassLoaderAdapter.INSTRUMENTABLE_CLASSLOADER_GLASSFISH_V2;\n+\t\tString INSTR_CL_NAME = GlassFishClassLoaderAdapter.INSTRUMENTABLE_CLASSLOADER_GLASSFISH_V2;\n \n \t\tpublic DummyInstrumentableClassLoader() {\n \t\t\tsuper();",
    "output": "+ fix invalid static field"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java b/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java\n@@ -31,7 +31,6 @@ public class JodaTimeFormattingTests {\n \tpublic void setUp() {\n \t\tJodaTimeFormattingConfigurer configurer = new JodaTimeFormattingConfigurer();\n \t\tconfigurer.installJodaTimeFormatting(conversionService);\n-\t\tSystem.out.println(conversionService);\n \n \t\tbinder = new DataBinder(new JodaTimeBean());\n \t\tbinder.setConversionService(conversionService);",
    "output": "improve toString method"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java\n@@ -120,7 +120,7 @@ public abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccess\n \n \tprivate String scope;\n \n-\tprivate boolean singleton = false;\n+\tprivate boolean singleton = true;\n \n \tprivate boolean prototype = false;\n \n@@ -171,6 +171,7 @@ public abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccess\n \n \tprivate Resource resource;\n \n+\n \t/**\n \t * Create a new AbstractBeanDefinition with default settings.\n \t */",
    "output": "BeanDefinitions return isSingleton=true by default again (for CXF compatibility)"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionTemplate.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionTemplate.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionTemplate.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionTemplate.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.transaction.support;\n \n+import java.lang.reflect.UndeclaredThrowableException;\n+\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -123,7 +125,7 @@ public <T> T execute(TransactionCallback<T> action) throws TransactionException\n \t\t}\n \t\telse {\n \t\t\tTransactionStatus status = this.transactionManager.getTransaction(this);\n-\t\t\tT result = null;\n+\t\t\tT result;\n \t\t\ttry {\n \t\t\t\tresult = action.doInTransaction(status);\n \t\t\t}\n@@ -137,6 +139,11 @@ public <T> T execute(TransactionCallback<T> action) throws TransactionException\n \t\t\t\trollbackOnException(status, err);\n \t\t\t\tthrow err;\n \t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Transactional code threw unexpected exception -> rollback\n+\t\t\t\trollbackOnException(status, ex);\n+\t\t\t\tthrow new UndeclaredThrowableException(ex, \"TransactionCallback threw undeclared checked exception\");\n+\t\t\t}\n \t\t\tthis.transactionManager.commit(status);\n \t\t\treturn result;\n \t\t}",
    "output": "TransactionTemplate catches undeclared checked exception and rethrows it as UndeclaredThrowableException"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java\n@@ -406,7 +406,7 @@ public void add(GenericConverter converter) {\n \t\t\t\tif (this.conditionalConverters == null) {\n \t\t\t\t\tthis.conditionalConverters = new LinkedList<ConditionalGenericConverter>();\n \t\t\t\t}\n-\t\t\t\tthis.conditionalConverters.add((ConditionalGenericConverter) converter);\n+\t\t\t\tthis.conditionalConverters.addFirst((ConditionalGenericConverter) converter);\n \t\t\t} else {\n \t\t\t\tthis.defaultConverter = converter;\n \t\t\t}",
    "output": "default conversion service instance caching and tests"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java\n@@ -549,7 +549,6 @@ public void convertMapToString() {\n \t\tfoo.put(\"1\", \"BAR\");\n \t\tfoo.put(\"2\", \"BAZ\");\n \t\tString result = conversionService.convert(foo, String.class);\n-\t\tSystem.out.println(result);\n \t\tassertTrue(result.contains(\"1=BAR\"));\n \t\tassertTrue(result.contains(\"2=BAZ\"));\n \t}",
    "output": "default conversion service instance caching and tests"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java\n@@ -673,6 +673,7 @@ public void run() {\n \t\t\t\t}\n \t\t\t};\n \t\t\tschedulerThread.setName(\"Quartz Scheduler [\" + scheduler.getSchedulerName() + \"]\");\n+\t\t\tschedulerThread.setDaemon(true);\n \t\t\tschedulerThread.start();\n \t\t}\n \t}",
    "output": "startup thread marked as daemon now"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n@@ -48,6 +48,7 @@ public void testBuildH2() {\n \t}\n \n \n+\t@Test\n \tpublic void testBuildDerby() {\n \t\tEmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder(new ClassRelativeResourceLoader(getClass()));\n \t\tEmbeddedDatabase db = builder.setType(DERBY).addScript(\"db-schema-derby.sql\").addScript(\"db-test-data.sql\").build();",
    "output": "OPEN - issue NoSuchMethodException in DerbyEmbeddedDatabaseConfigurer Added derby test case to EmbeddedDatabaseBuilderTests"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java\n@@ -155,8 +155,8 @@ private void executeSqlScript(Connection connection, EncodedResource resource, b\n \t\t\t\t} catch (SQLException ex) {\n \t\t\t\t\tboolean dropStatement = statement.trim().toLowerCase().startsWith(\"drop\");\n \t\t\t\t\tif (continueOnError || (dropStatement && ignoreFailedDrops)) {\n-\t\t\t\t\t\tif (logger.isWarnEnabled()) {\n-\t\t\t\t\t\t\tlogger.warn(\"Line \" + lineNumber + \" statement failed: \" + statement, ex);\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"Line \" + lineNumber + \" statement failed: \" + statement, ex);\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tthrow ex;",
    "output": "RESOLVED - issue ResourceDatabasePopulator is too verbose when reporting ignored failures http://jira.springframework.org/browse/"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgPreparedStatementSetter.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgPreparedStatementSetter.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgPreparedStatementSetter.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgPreparedStatementSetter.java\n@@ -43,7 +43,7 @@ public void setValues(PreparedStatement ps) throws SQLException {\n \t\tif (this.args != null) {\n \t\t\tfor (int i = 0; i < this.args.length; i++) {\n \t\t\t\tObject arg = this.args[i];\n-\t\t\t\tdoSetValue(ps, i, arg);\n+\t\t\t\tdoSetValue(ps, i + 1, arg);\n \t\t\t}\n \t\t}\n \t}\n@@ -59,10 +59,10 @@ public void setValues(PreparedStatement ps) throws SQLException {\n \tprotected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException {\n \t\tif (argValue instanceof SqlParameterValue) {\n \t\t\tSqlParameterValue paramValue = (SqlParameterValue) argValue;\n-\t\t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition + 1, paramValue, paramValue.getValue());\n+\t\t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue());\n \t\t}\n \t\telse {\n-\t\t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition + 1, SqlTypeValue.TYPE_UNKNOWN, argValue);\n+\t\t\tStatementCreatorUtils.setParameterValue(ps, parameterPosition, SqlTypeValue.TYPE_UNKNOWN, argValue);\n \t\t}\n \t}\n ",
    "output": "create a protected doSetValue method so sub-classes can override the implementation easier"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/util/CookieGenerator.java b/org.springframework.web/src/main/java/org/springframework/web/util/CookieGenerator.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/util/CookieGenerator.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/util/CookieGenerator.java\n@@ -44,6 +44,13 @@ public class CookieGenerator {\n \t */\n \tpublic static final String DEFAULT_COOKIE_PATH = \"/\";\n \n+\t/**\n+\t * Default maximum age of cookies: maximum integer value, i.e. forever.\n+\t * @deprecated in favor of setting no max age value at all in such a case\n+\t */\n+\t@Deprecated\n+\tpublic static final int DEFAULT_COOKIE_MAX_AGE = Integer.MAX_VALUE;\n+\n \n \tprotected final Log logger = LogFactory.getLog(getClass());\n ",
    "output": "reintroduced DEFAULT_COOKIE_MAX_AGE in deprecated form (for binary compatibility; )"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java b/org.springframework.test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.springframework.util.ObjectUtils;\n import org.springframework.web.servlet.ModelAndView;\n \n /**\n@@ -180,8 +181,8 @@ public static void assertSortAndCompareListModelAttribute(\n \t */\n \tpublic static void assertViewName(ModelAndView mav, String expectedName) {\n \t\tassertCondition(mav != null, \"ModelAndView is null\");\n-\t\tassertCondition(expectedName.equals(mav.getViewName()), \"View name is not equal to '\" + expectedName +\n-\t\t\t\t\"' but was '\" + mav.getViewName() + \"'\");\n+\t\tassertCondition(ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()),\n+\t\t\t\t\"View name is not equal to '\" + expectedName + \"' but was '\" + mav.getViewName() + \"'\");\n \t}\n \n ",
    "output": "avoid potential NPE"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java\n@@ -25,6 +25,7 @@\n \n import org.junit.Test;\n import org.springframework.core.convert.ConversionFailedException;\n+import org.springframework.core.convert.ConverterNotFoundException;\n import org.springframework.core.convert.converter.Converter;\n \n /**\n@@ -196,7 +197,7 @@ public void convertObjectToObjectConstructor() {\n \t\tassertEquals(\"123456789\", conversionService.convert(new SSN(\"123456789\"), String.class));\n \t}\n \n-\t@Test(expected=ConversionFailedException.class)\n+\t@Test(expected=ConverterNotFoundException.class)\n \tpublic void convertObjectToObjectNoValueOFMethodOrConstructor() {\n \t\tDefaultConversionService conversionService = new DefaultConversionService();\n \t\tconversionService.convert(new Long(3), SSN.class);",
    "output": "upgrade test to reflect correct behavior"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -43,7 +43,6 @@\n import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.context.support.ResourceBundleMessageSource;\n import org.springframework.context.support.StaticMessageSource;\n-import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.format.number.NumberFormatter;\n import org.springframework.format.support.FormattingConversionService;\n import org.springframework.util.StringUtils;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportResource.java\n@@ -18,7 +18,6 @@\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n-import java.lang.annotation.Inherited;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n@@ -32,7 +31,7 @@\n public @interface ImportResource {\n \n \tString[] value();\n-\t\n+\n \tClass<? extends BeanDefinitionReader> reader() default XmlBeanDefinitionReader.class;\n \n }",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n@@ -79,8 +79,11 @@ private void doTestAnnotationInfo(AnnotationMetadata metadata) {\n \t\tassertEquals(\"myScope\", scopeAttrs.get(\"value\"));\n \t\tMap<String, Object> specialAttrs = metadata.getAnnotationAttributes(SpecialAttr.class.getName());\n \t\tassertEquals(2, specialAttrs.size());\n-\t\tassertEquals(String.class.getName(), specialAttrs.get(\"clazz\"));\n+\t\tassertEquals(String.class, specialAttrs.get(\"clazz\"));\n \t\tassertEquals(Thread.State.NEW, specialAttrs.get(\"state\"));\n+\t\tMap<String, Object> specialAttrsString = metadata.getAnnotationAttributes(SpecialAttr.class.getName(), true);\n+\t\tassertEquals(String.class.getName(), specialAttrsString .get(\"clazz\"));\n+\t\tassertEquals(Thread.State.NEW, specialAttrsString.get(\"state\"));\n \t}\n \n \tprivate void doTestMethodAnnotationInfo(AnnotationMetadata classMetadata) {",
    "output": "AnnotationMetadata returns Class values by default (again), allowing for explicit retrieval of String class names where preferred"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java\n@@ -23,6 +23,7 @@\n \n import org.springframework.core.InfrastructureProxy;\n import org.springframework.util.Assert;\n+import org.springframework.aop.scope.ScopedObject;\n \n /**\n  * Utility methods for triggering specific {@link TransactionSynchronization}\n@@ -55,7 +56,13 @@ public static boolean sameResourceFactory(ResourceTransactionManager tm, Object\n \t */\n \tstatic Object unwrapResourceIfNecessary(Object resource) {\n \t\tAssert.notNull(resource, \"Resource must not be null\");\n-\t\treturn (resource instanceof InfrastructureProxy ? ((InfrastructureProxy) resource).getWrappedObject() : resource);\n+\t\tObject resourceRef = resource;\n+\t\tif (resource instanceof ScopedObject) {\n+\t\t\t// First unwrap a scoped proxy.\n+\t\t\tresourceRef = ((ScopedObject) resource).getTargetObject();\n+\t\t}\n+\t\t// Now unwrap infrastructure proxy\n+\t\treturn (resourceRef instanceof InfrastructureProxy ? ((InfrastructureProxy) resourceRef).getWrappedObject() : resourceRef);\n \t}\n \n ",
    "output": "add unwrapping of scoped proxy tp unwrapResourceIfNecessary"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCall.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCall.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCall.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCall.java\n@@ -165,7 +165,7 @@ public Map<String, Object> execute(Object... args) {\n \t\treturn doExecute(args);\n \t}\n \n-\tpublic Map<String, Object> execute(Map<String, Object> args) {\n+\tpublic Map<String, Object> execute(Map<String, ?> args) {\n \t\treturn doExecute(args);\n \t}\n \n\ndiff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCallOperations.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCallOperations.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCallOperations.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/SimpleJdbcCallOperations.java\n@@ -164,7 +164,7 @@ public interface SimpleJdbcCallOperations {\n \t * @param args Map containing the parameter values to be used in the call.\n \t * @return map of output params.\n \t */\n-\tMap<String, Object> execute(Map<String, Object> args);\n+\tMap<String, Object> execute(Map<String, ?> args);\n \n \t/**\n \t * Execute the stored procedure and return a map of output params, keyed by name as in parameter declarations..",
    "output": "relaxed Map<String, Object> to Map<String, ?> for method parameter"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java\n@@ -31,7 +31,6 @@ public class MvcNamespaceTests {\n \tpublic void setUp() {\n \t\tcontainer = new GenericWebApplicationContext();\n \t\tcontainer.setServletContext(new MockServletContext());\n-\t\t\n \t\tLocaleContextHolder.setLocale(Locale.US);\n \t}\n \t",
    "output": "add test dep to ivy.xml causing build failure"
  },
  {
    "input": "diff --git a/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java\n--- a/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java\n+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java\n@@ -268,7 +268,7 @@ else if (pb == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) {\n \t\tif (debug) {\n \t\t\tlogger.debug(\"Creating new transaction with name [\" + definition.getName() + \"]: \" + definition);\n \t\t}\n-\t\tSuspendedResourcesHolder suspendedResources = (existingTx && !joinTx ? suspend(null) : null);\n+\t\tSuspendedResourcesHolder suspendedResources = (!joinTx ? suspend(null) : null);\n \t\ttry {\n \t\t\tif (definition.getTimeout() > TransactionDefinition.TIMEOUT_DEFAULT) {\n \t\t\t\tthis.uowManager.setUOWTimeout(uowType, definition.getTimeout());",
    "output": "WebSphereUowTransactionManager suspends synchronizations even without existing transaction"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -445,6 +445,20 @@ protected WebApplicationContext createWebApplicationContext(ApplicationContext p\n \t\treturn wac;\n \t}\n \n+\t/**\n+\t * Instantiate the WebApplicationContext for this servlet, either a default\n+\t * {@link org.springframework.web.context.support.XmlWebApplicationContext}\n+\t * or a {@link #setContextClass custom context class}, if set.\n+\t * Delegates to #createWebApplicationContext(ApplicationContext).\n+\t * @param parent the parent WebApplicationContext to use, or <code>null</code> if none\n+\t * @return the WebApplicationContext for this servlet\n+\t * @see org.springframework.web.context.support.XmlWebApplicationContext\n+\t * @see #createWebApplicationContext(ApplicationContext)\n+\t */\n+\tprotected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {\n+\t\treturn createWebApplicationContext((ApplicationContext) parent);\n+\t}\n+\t\n \t/**\n \t * Post-process the given WebApplicationContext before it is refreshed\n \t * and activated as context for this servlet.",
    "output": "+ add old method for backwards compatibility"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java\n@@ -397,7 +397,7 @@ protected WebApplicationContext findWebApplicationContext() {\n \t * @return the WebApplicationContext for this servlet\n \t * @see org.springframework.web.context.support.XmlWebApplicationContext\n \t */\n-\tprotected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {\n+\tprotected WebApplicationContext createWebApplicationContext(ApplicationContext parent) {\n \t\tClass<?> contextClass = getContextClass();\n \t\tif (this.logger.isDebugEnabled()) {\n \t\t\tthis.logger.debug(\"Servlet with name '\" + getServletName() +",
    "output": "+ loosen FrameworkServlet#createWebApplicationContext signature"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -24,12 +24,9 @@\n \n import org.springframework.core.GenericCollectionTypeResolver;\n import org.springframework.core.MethodParameter;\n-import org.springframework.core.style.StylerUtils;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n \n-import com.sun.xml.internal.rngom.ast.builder.Annotations;\n-\n /**\n  * Context about a type to convert to.\n  *",
    "output": "+ removed unused imports"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java\n@@ -22,6 +22,7 @@\n \r\n import org.springframework.util.Assert;\r\n import org.springframework.validation.Errors;\r\n+import org.springframework.validation.FieldError;\r\n import org.springframework.validation.Validator;\r\n \r\n /**\r\n@@ -68,10 +69,14 @@ public boolean supports(Class<?> clazz) {\n \tpublic void validate(Object target, Errors errors) {\r\n \t\tSet<ConstraintViolation<Object>> result = this.targetValidator.validate(target);\r\n \t\tfor (ConstraintViolation<Object> violation : result) {\r\n-\t\t\terrors.rejectValue(violation.getPropertyPath().toString(),\r\n-\t\t\t\t\tviolation.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName(),\r\n-\t\t\t\t\tviolation.getConstraintDescriptor().getAttributes().values().toArray(),\r\n-\t\t\t\t\tviolation.getMessage());\r\n+\t\t\tString field = violation.getPropertyPath().toString();\r\n+\t\t\tFieldError fieldError = errors.getFieldError(field);\r\n+\t\t\tif (fieldError == null || !fieldError.isBindingFailure()) {\r\n+\t\t\t\terrors.rejectValue(field,\r\n+\t\t\t\t\t\tviolation.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName(),\r\n+\t\t\t\t\t\tviolation.getConstraintDescriptor().getAttributes().values().toArray(),\r\n+\t\t\t\t\t\tviolation.getMessage());\r\n+\t\t\t}\r\n \t\t}\r\n \t}\r\n \r",
    "output": "Validator will only register validation failures if no binding failure happened"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/package-info.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/package-info.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/package-info.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/package-info.java\n@@ -0,0 +1,6 @@\n+\n+/**\n+ * Defines the Spring JDBC configuration namespace.\n+ */\n+package org.springframework.jdbc.config;\n+",
    "output": "package info file"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java b/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/conversionservice/ConversionServiceContextConfigTests.java\n@@ -10,7 +10,7 @@ public class ConversionServiceContextConfigTests {\n \t\n \t@Test\n \tpublic void testConfigOk() {\n-\t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"org/springframework/context/conversionservice/conversionservice.xml\");\n+\t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"org/springframework/context/conversionservice/conversionService.xml\");\n \t\tTestClient client = context.getBean(\"testClient\", TestClient.class);\n \t\tassertEquals(2, client.getBars().size());\n \t\tassertEquals(\"value1\", client.getBars().get(0).getValue());",
    "output": "fix failing test due to case issue"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java\n@@ -22,6 +22,7 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import org.joda.time.DateMidnight;\n import org.joda.time.DateTime;\n import org.joda.time.LocalDate;\n import org.joda.time.LocalDateTime;\n@@ -80,11 +81,12 @@ public Parser<DateTime> getParser(A annotation, Class<?> propertyType) {\n \t// internal helpers\n \t\n \tprivate Set<Class<?>> createFieldTypes() {\n-\t\tSet<Class<?>> fieldTypes = new HashSet<Class<?>>(7);\n+\t\tSet<Class<?>> fieldTypes = new HashSet<Class<?>>(8);\n \t\tfieldTypes.add(LocalDate.class);\n \t\tfieldTypes.add(LocalTime.class);\n \t\tfieldTypes.add(LocalDateTime.class);\n \t\tfieldTypes.add(DateTime.class);\n+\t\tfieldTypes.add(DateMidnight.class);\n \t\tfieldTypes.add(Date.class);\n \t\tfieldTypes.add(Calendar.class);\n \t\tfieldTypes.add(Long.class);",
    "output": "add date midnight"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.web.servlet.tags;\n \n-import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;",
    "output": "polish - removing unused import"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n@@ -326,7 +326,7 @@ public void testMultiFieldToFieldMappingWithAssembler() {\n \t\t\t\t// field to multiple fields\n \t\t\t\t.addAssemblerMapping(\"activationDateTime\", new Converter<Map<String, String>, DateTime>() {\n \t\t\t\t\tpublic DateTime convert(Map<String, String> source) {\n-\t\t\t\t\t\tMutableDateTime dateTime = new MutableDateTime(DateTimeZone.UTC);\n+\t\t\t\t\t\tMutableDateTime dateTime = new MutableDateTime(DateTimeZone.forID(\"-04:00\"));\n \t\t\t\t\t\tdateTime.setYear(Integer.parseInt(source.get(\"year\")));\n \t\t\t\t\t\tdateTime.setMonthOfYear(Integer.parseInt(source.get(\"month\")));\n \t\t\t\t\t\tdateTime.setDayOfMonth(Integer.parseInt(source.get(\"day\")));\n@@ -344,7 +344,7 @@ public DateTime convert(Map<String, String> source) {\n \t\tsource.put(\"activationDateTime.hour\", \"12\");\n \t\tsource.put(\"activationDateTime.minute\", \"0\");\n \t\tAccount account = mapper.map(source, new Account());\t\n-\t\tassertEquals(ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC).parseDateTime(\"2009-10-12T12:00:00.000-04:00\"), account\n+\t\tassertEquals(ISODateTimeFormat.dateTime().withOffsetParsed().parseDateTime(\"2009-10-12T12:00:00.000-04:00\"), account\n \t\t\t\t.getActivationDateTime());\t\t\n \t}\n ",
    "output": "fix failing test; take 2"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/MappingTests.java\n@@ -8,7 +8,6 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Map;\n \n import org.joda.time.DateTime;",
    "output": "remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java\n@@ -418,7 +418,7 @@ private Number executeInsertAndReturnKeyInternal(final List<Object> values) {\n \t\t\treturn kh.getKey();\n \t\t}\n \t\telse {\n-\t\t\tthrow new DataIntegrityViolationException(\"Unable to retreive the generated key for the insert: \" +\n+\t\t\tthrow new DataIntegrityViolationException(\"Unable to retrieve the generated key for the insert: \" +\n \t\t\t\t\tgetInsertString());\n \t\t}\n \t}",
    "output": "fix rertieval of generated keys for HSQLDB 1.9 and fixed some typos"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java\n@@ -238,7 +238,7 @@ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, S\n \t\t\t\telse if (databaseProductName.startsWith(\"DB2\") ||\n \t\t\t\t\t\tjdbcDriverName.startsWith(\"jConnect\") ||\n \t\t\t\t\t\tjdbcDriverName.startsWith(\"SQLServer\")||\n-\t\t\t\t\t\tjdbcDriverName.startsWith(\"Apache Derby Embedded\")) {\n+\t\t\t\t\t\tjdbcDriverName.startsWith(\"Apache Derby\")) {\n \t\t\t\t\tsqlType = Types.VARCHAR;\n \t\t\t\t}\n \t\t\t}",
    "output": "fix null handling for all Derby drivers to be the same as for the embedded driver"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java\n--- a/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java\n+++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java\n@@ -250,7 +250,6 @@ public void componentRegistered(ComponentDefinition componentDefinition) {\n \n \tstatic class TestErrorHandler implements ErrorHandler {\n \n-\t\t@Override\n \t\tpublic void handleError(Throwable t) {\n \t\t}\n \t}",
    "output": "remove @Override from interface method"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/velocity/VelocityRenderTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/velocity/VelocityRenderTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/velocity/VelocityRenderTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/velocity/VelocityRenderTests.java\n@@ -106,11 +106,9 @@ public void testSimpleRenderWithError() throws Exception {\n \t\tthrown.expect(NestedServletException.class);\n \n \t\tthrown.expect(new TypeSafeMatcher<Exception>() {\n-\t\t\t@Override\n \t\t\tpublic boolean matchesSafely(Exception item) {\n \t\t\t\treturn item.getCause() instanceof MethodInvocationException;\n \t\t\t}\n-\t\t\t@Override\n \t\t\tpublic void describeTo(Description description) {\n \t\t\t\tdescription.appendText(\"exception has cause of MethodInvocationException\");\n \t\t\t\t\n@@ -140,11 +138,9 @@ public void testSimpleRenderWithIOError() throws Exception {\n \t\tthrown.expect(NestedServletException.class);\n \n \t\tthrown.expect(new TypeSafeMatcher<Exception>() {\n-\t\t\t@Override\n \t\t\tpublic boolean matchesSafely(Exception item) {\n \t\t\t\treturn item.getCause() instanceof IOException;\n \t\t\t}\n-\t\t\t@Override\n \t\t\tpublic void describeTo(Description description) {\n \t\t\t\tdescription.appendText(\"exception has cause of IOException\");\n \t\t\t\t",
    "output": "Java6 @Override removed"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java b/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypedValue.java\n@@ -72,7 +72,7 @@ public TypeDescriptor getTypeDescriptor() {\n \t@Override\r\n \tpublic String toString() {\r\n \t\tStringBuilder str = new StringBuilder();\r\n-\t\tstr.append(\"TypedValue: \").append(this.value).append(\" of type \").append(this.typeDescriptor.asString());\r\n+\t\tstr.append(\"TypedValue: \").append(this.value).append(\" of type \").append(this.getTypeDescriptor().asString());\r\n \t\treturn str.toString();\r\n \t}\r\n \r",
    "output": "avoiding NPE in TypedValue.toString"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/scripting/config/ScriptingDefaultsTests.java b/org.springframework.context/src/test/java/org/springframework/scripting/config/ScriptingDefaultsTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/scripting/config/ScriptingDefaultsTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/scripting/config/ScriptingDefaultsTests.java\n@@ -27,6 +27,7 @@\n \n /**\n  * @author Mark Fisher\n+ * @author Dave Syer\n  */\n public class ScriptingDefaultsTests extends TestCase {\n \n@@ -51,6 +52,12 @@ public void testDefaultInitMethod() {\n \t\tassertTrue(testBean.isInitialized());\n \t}\n \n+\tpublic void testNameAsAlias() {\n+\t\tApplicationContext context = new ClassPathXmlApplicationContext(CONFIG);\n+\t\tITestBean testBean = (ITestBean) context.getBean(\"/url\");\n+\t\tassertTrue(testBean.isInitialized());\n+\t}\n+\n \tpublic void testDefaultDestroyMethod() {\n \t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(CONFIG);\n \t\tITestBean testBean = (ITestBean) context.getBean(\"nonRefreshableTestBean\");",
    "output": "RESOLVED - issue Add name attribute to all namespaces that use AbstractBeanDefinitionParser and declare name= attribute (includes <lang:groovy.../>)"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/util/NestedServletExceptionTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/util/NestedServletExceptionTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/util/NestedServletExceptionTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/util/NestedServletExceptionTests.java\n@@ -0,0 +1,24 @@\n+package org.springframework.web.util;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.core.NestedExceptionUtils;\n+\n+public class NestedServletExceptionTests {\n+\n+\t@Test\n+\tpublic void testNestedServletExceptionString() {\n+\t\tNestedServletException exception = new NestedServletException(\"foo\");\n+\t\tassertEquals(\"foo\", exception.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void testNestedServletExceptionStringThrowable() {\n+\t\tThrowable cause = new RuntimeException();\n+\t\tNestedServletException exception = new NestedServletException(\"foo\", cause);\n+\t\tassertEquals(NestedExceptionUtils.buildMessage(\"foo\", cause), exception.getMessage());\n+\t\tassertEquals(cause, exception.getCause());\n+\t}\n+\n+}",
    "output": "OPEN - issue Velocity MethodInvocationExceptions not properly reported Added test case for exception. This probably fails on a non-Sun JVM?"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n@@ -41,7 +41,7 @@ public ParseException(String expressionString, int position, String message) {\n \t * @param cause the underlying cause of this exception\n \t */ \n \tpublic ParseException(int position, String message, Throwable cause) {\n-\t\tsuper(message);\n+\t\tsuper(position, message, cause);\n \t}\n \t\n \t/**\n@@ -50,7 +50,7 @@ public ParseException(int position, String message, Throwable cause) {\n \t * @param message description of the problem that occurred\n \t */ \n \tpublic ParseException(int position, String message) {\n-\t\tsuper(message);\n+\t\tsuper(position, message);\n \t}\n \n }",
    "output": "fix ParseException constructor calls"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java\n@@ -23,8 +23,8 @@\n import java.util.GregorianCalendar;\n \n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n-\n import org.springframework.scheduling.TriggerContext;\n \n /**\n@@ -316,6 +316,7 @@ public void testIncrementDayOfWeekAndRollover() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void testSpecificMinuteSecond() throws Exception {\n \t\tCronTrigger trigger = new CronTrigger(\"2 5 * * * *\");\n \t\tcalendar.set(Calendar.MINUTE, 4);",
    "output": "commented out test failing nightly snapshot"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/ControllerClassNameHandlerMapping.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -137,7 +137,7 @@ protected String[] generatePathMappings(Class beanClass) {\n \t\tStringBuilder pathMapping = buildPathPrefix(beanClass);\n \t\tString className = ClassUtils.getShortName(beanClass);\n \t\tString path = (className.endsWith(CONTROLLER_SUFFIX) ?\n-\t\t\t\tclassName.substring(0, className.indexOf(CONTROLLER_SUFFIX)) : className);\n+\t\t\t\tclassName.substring(0, className.lastIndexOf(CONTROLLER_SUFFIX)) : className);\n \t\tif (path.length() > 0) {\n \t\t\tif (this.caseSensitive) {\n \t\t\t\tpathMapping.append(path.substring(0, 1).toLowerCase()).append(path.substring(1));",
    "output": "fix extraction of Controller suffix"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java\n@@ -473,8 +473,10 @@ public static boolean isSimpleProperty(Class<?> clazz) {\n \t * @return whether the given type represents a \"simple\" value type\n \t */\n \tpublic static boolean isSimpleValueType(Class<?> clazz) {\n-\t\treturn ClassUtils.isPrimitiveOrWrapper(clazz) || CharSequence.class.isAssignableFrom(clazz) ||\n-\t\t\t\tNumber.class.isAssignableFrom(clazz) || Date.class.isAssignableFrom(clazz) ||\n+\t\treturn ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.isEnum() ||\n+\t\t\t\tCharSequence.class.isAssignableFrom(clazz) ||\n+\t\t\t\tNumber.class.isAssignableFrom(clazz) ||\n+\t\t\t\tDate.class.isAssignableFrom(clazz) ||\n \t\t\t\tclazz.equals(URI.class) || clazz.equals(URL.class) ||\n \t\t\t\tclazz.equals(Locale.class) || clazz.equals(Class.class);\n \t}",
    "output": "Enum counts as simple value type"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/bind/ServletRequestDataBinder.java b/org.springframework.web/src/main/java/org/springframework/web/bind/ServletRequestDataBinder.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/bind/ServletRequestDataBinder.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/bind/ServletRequestDataBinder.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,7 +20,7 @@\n \n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.validation.BindException;\n-import org.springframework.web.multipart.MultipartHttpServletRequest;\n+import org.springframework.web.multipart.MultipartRequest;\n \n /**\n  * Special {@link org.springframework.validation.DataBinder} to perform data binding\n@@ -103,8 +103,8 @@ public ServletRequestDataBinder(Object target, String objectName) {\n \t */\n \tpublic void bind(ServletRequest request) {\n \t\tMutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request);\n-\t\tif (request instanceof MultipartHttpServletRequest) {\n-\t\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n+\t\tif (request instanceof MultipartRequest) {\n+\t\t\tMultipartRequest multipartRequest = (MultipartRequest) request;\n \t\t\tbindMultipartFiles(multipartRequest.getFileMap(), mpvs);\n \t\t}\n \t\tdoBind(mpvs);",
    "output": "check against MultipartRequest mixin interface"
  },
  {
    "input": "diff --git a/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicTestSuite.java b/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicTestSuite.java\n--- a/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicTestSuite.java\n+++ b/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicTestSuite.java\n@@ -17,14 +17,13 @@\n  */\n @RunWith(Suite.class)\n @SuiteClasses({\n-\t\tOwnerTests.class,\n-\t\tSimpleJdbcClinicTests.class,\n-\t\tHibernateClinicTests.class,\n-\t\tEntityManagerClinicTests.class,\n-\t\tHibernateEntityManagerClinicTests.class,\n-\t\tOpenJpaEntityManagerClinicTests.class,\n-\t\tVisitsAtomViewTest.class\n+\tOwnerTests.class,\n+\tSimpleJdbcClinicTests.class,\n+\tHibernateClinicTests.class,\n+\tEntityManagerClinicTests.class,\n+\tHibernateEntityManagerClinicTests.class,\n+\tOpenJpaEntityManagerClinicTests.class,\n+\tVisitsAtomViewTest.class\n })\n-public class PetClinicSuiteTests {\n-\n+public class PetClinicTestSuite {\n }",
    "output": "Rename PetClinicSuiteTests to PetClinicTestSuite so that it doesn't get picked up by Spring Build"
  },
  {
    "input": "diff --git a/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicSuiteTests.java b/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicSuiteTests.java\n--- a/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicSuiteTests.java\n+++ b/org.springframework.samples.petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicSuiteTests.java\n@@ -3,12 +3,12 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.Suite;\n import org.junit.runners.Suite.SuiteClasses;\n-\n import org.springframework.samples.petclinic.hibernate.HibernateClinicTests;\n import org.springframework.samples.petclinic.jdbc.SimpleJdbcClinicTests;\n import org.springframework.samples.petclinic.jpa.EntityManagerClinicTests;\n import org.springframework.samples.petclinic.jpa.HibernateEntityManagerClinicTests;\n import org.springframework.samples.petclinic.jpa.OpenJpaEntityManagerClinicTests;\n+import org.springframework.samples.petclinic.web.VisitsAtomViewTest;\n \n /**\n  * JUnit 4 based test suite for all PetClinic tests.\n@@ -22,7 +22,8 @@\n \t\tHibernateClinicTests.class,\n \t\tEntityManagerClinicTests.class,\n \t\tHibernateEntityManagerClinicTests.class,\n-\t\tOpenJpaEntityManagerClinicTests.class\n+\t\tOpenJpaEntityManagerClinicTests.class,\n+\t\tVisitsAtomViewTest.class\n })\n public class PetClinicSuiteTests {\n ",
    "output": "Pet Clinic test suite now includes VisitsAtomViewTest"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java b/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java\n--- a/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java\n+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/Mapping.java\n@@ -29,6 +29,7 @@\n /**\n  * An individual mapping definition between two fields.\n  * @author Keith Donald\n+ * @since 3.0\n  */\n class Mapping implements MappingConfiguration {\n \n@@ -95,4 +96,9 @@ public String toString() {\n \t\treturn \"[Mapping<\" + getSourceExpressionString() + \" -> \" + getTargetExpressionString() + \">]\";\n \t}\n \n+\t@Override\n+\tpublic void setExclude() {\n+\t\t// TODO Auto-generated method stub\n+\t}\n+\n }\n\\ No newline at end of file",
    "output": "Add an empty implementation of the missing setExcludemethod so that the class compiles"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java b/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java\n@@ -146,6 +146,31 @@ public void mapBeanNested() {\n \t\tassertEquals(\"bar\", target.nested.foo);\n \t}\n \n+\t@Test\n+\tpublic void mapBeanNestedCustomMapper() {\n+\t\tPersonDto source = new PersonDto();\n+\t\tNestedDto nested = new NestedDto();\n+\t\tnested.foo = \"bar\";\n+\t\tsource.setNested(nested);\n+\n+\t\tPerson target = new Person();\n+\n+\t\tSpelMapper nestedMapper = new SpelMapper();\n+\t\tnestedMapper.setAutoMappingEnabled(false);\n+\t\tnestedMapper.addMapping(\"foo\").setConverter(new Converter<String, String>() {\n+\t\t\tpublic String convert(String source) {\n+\t\t\t\treturn source + \" and baz\";\n+\t\t\t}\n+\t\t});\n+\t\tmapper.addNestedMapper(NestedDto.class, Nested.class, nestedMapper);\n+\n+\t\tmapper.setAutoMappingEnabled(false);\n+\t\tmapper.addMapping(\"nested\");\n+\t\tmapper.map(source, target);\n+\n+\t\tassertEquals(\"bar and baz\", target.nested.foo);\n+\t}\n+\n \t@Test\n \tpublic void mapList() {\n \t\tPersonDto source = new PersonDto();",
    "output": "nested bean mapper test"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java\n@@ -570,9 +570,19 @@ protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String s\n \t * @throws IOException if directory contents could not be retrieved\n \t */\n \tprotected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {\n+\t\tif (!rootDir.exists()) {\n+\t\t\t// Silently skip non-existing directories.\n+\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\tlogger.debug(\"Skipping [\" + rootDir.getAbsolutePath() + \"] because it does not exist\");\n+\t\t\t}\n+\t\t\treturn Collections.emptySet();\n+\t\t}\n \t\tif (!rootDir.isDirectory()) {\n-\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"Resource path [\" + rootDir.getAbsolutePath() + \"] does not denote a directory\");\n+\t\t\t// Complain louder if it exists but is no directory.\n+\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\tlogger.warn(\"Skipping [\" + rootDir.getAbsolutePath() + \"] because it does not denote a directory\");\n+\t\t\t}\n+\t\t\treturn Collections.emptySet();\n \t\t}\n \t\tif (!rootDir.canRead()) {\n \t\t\tif (logger.isWarnEnabled()) {",
    "output": "PathMatchingResourcePatternResolver leniently ignores non-existing root directories"
  },
  {
    "input": "diff --git a/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java b/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java\n--- a/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java\n+++ b/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/BeanConfigurerTests.java\n@@ -409,8 +409,8 @@ public void setFriend(TestBean f) {\n \tpublic static class CircularFactoryBean implements FactoryBean{\r\n \r\n \t\tpublic CircularFactoryBean() {\r\n-//\t\t\tValidAutowireByName autowired = new ValidAutowireByName();\r\n-//\t\t\tassertNull(autowired.getRamnivas());\r\n+\t\t\tValidAutowireByName autowired = new ValidAutowireByName();\r\n+\t\t\tassertNull(autowired.getRamnivas());\r\n \t\t}\r\n \r\n \t\tpublic Object getObject() throws Exception {\r",
    "output": "Fix a commented test"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -731,6 +731,7 @@ public ModelAndView getModelAndView(Method handlerMethod,\n \n \t\t\tif (returnValue != null && AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {\n \t\t\t\thandleResponseBody(returnValue, webRequest);\n+\t\t\t\treturn null;\n \t\t\t}\n \n \t\t\tif (returnValue instanceof ModelAndView) {",
    "output": "@ResponseBody with returned String results in unresolvable view ServletException"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n@@ -33,7 +33,10 @@\n import javax.servlet.http.HttpSession;\r\n import javax.servlet.jsp.JspWriter;\r\n import javax.servlet.jsp.PageContext;\r\n+import javax.servlet.jsp.el.ELException;\r\n+import javax.servlet.jsp.el.Expression;\r\n import javax.servlet.jsp.el.ExpressionEvaluator;\r\n+import javax.servlet.jsp.el.FunctionMapper;\r\n import javax.servlet.jsp.el.VariableResolver;\r\n \r\n import org.springframework.util.Assert;\r\n@@ -275,7 +278,15 @@ public JspWriter getOut() {\n \t}\r\n \r\n \tpublic ExpressionEvaluator getExpressionEvaluator() {\r\n-\t\tthrow new UnsupportedOperationException();\r\n+\t\treturn new ExpressionEvaluator() {\r\n+\t\t\tpublic Expression parseExpression(String expression, Class expectedType, FunctionMapper fMapper) throws ELException {\r\n+\t\t\t\tthrow new UnsupportedOperationException();\r\n+\t\t\t}\r\n+\t\t\tpublic Object evaluate(String expression, Class expectedType, VariableResolver vResolver, FunctionMapper fMapper) throws ELException {\r\n+\t\t\t\tString key = expression.substring(2, expression.length() - 1);\r\n+\t\t\t\treturn findAttribute(key);\r\n+\t\t\t}\r\n+\t\t};\r\n \t}\r\n \r\n \tpublic ELContext getELContext() {\r",
    "output": "add simplest possible ExpressionEvaluator"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -54,7 +54,7 @@ public abstract class AbstractBeanDefinitionParser implements BeanDefinitionPars\n \n \tpublic final BeanDefinition parse(Element element, ParserContext parserContext) {\n \t\tAbstractBeanDefinition definition = parseInternal(element, parserContext);\n-\t\tif (!parserContext.isNested()) {\n+\t\tif (definition != null && !parserContext.isNested()) {\n \t\t\ttry {\n \t\t\t\tString id = resolveId(element, definition, parserContext);\n \t\t\t\tif (!StringUtils.hasText(id)) {",
    "output": "AbstractBeanDefinitionParser can deal with null return value as well"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -459,7 +459,6 @@ protected WebApplicationContext createWebApplicationContext(WebApplicationContex\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void commandProvidingFormControllerWithFormatter() throws Exception {\n \t\t@SuppressWarnings(\"serial\") DispatcherServlet servlet = new DispatcherServlet() {\n \t\t\t@Override",
    "output": "remove ignored test now that convert system has been revised"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n--- a/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java\n@@ -904,7 +904,10 @@ private void autodetect(AutodetectCallback callback) {\n \t * Indicates whether or not a particular bean name is present in the excluded beans list.\n \t */\n \tprivate boolean isExcluded(String beanName) {\n-\t\treturn (this.excludedBeans != null && this.excludedBeans.contains(beanName));\n+\t\treturn (this.excludedBeans != null &&\n+\t\t\t\t(this.excludedBeans.contains(beanName) ||\n+\t\t\t\t\t\t(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&\n+\t\t\t\t\t\t\t\tthis.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))));\n \t}\n \n ",
    "output": "specified excluded names matched against unprefixed FactoryBean names as well"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n@@ -166,16 +166,17 @@ protected <T> T convertIfNecessary(\n \t\t// No custom editor but custom ConversionService specified?\n \t\tConversionService conversionService = this.propertyEditorRegistry.getConversionService();\n \t\tif (editor == null && conversionService != null && convertedValue != null) {\n-\t\t\tTypeDescriptor typeDesc;\n+\t\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.valueOf(convertedValue.getClass());\n+\t\t\tTypeDescriptor targetTypeDesc;\n \t\t\tif (methodParam != null) {\n-\t\t\t\ttypeDesc = (descriptor != null ?\n+\t\t\t\ttargetTypeDesc = (descriptor != null ?\n \t\t\t\t\t\tnew BeanTypeDescriptor(methodParam, descriptor) : new TypeDescriptor(methodParam));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\ttypeDesc = TypeDescriptor.valueOf(requiredType);\n+\t\t\t\ttargetTypeDesc = TypeDescriptor.valueOf(requiredType);\n \t\t\t}\n-\t\t\tif (conversionService.matches(convertedValue.getClass(), typeDesc)) {\n-\t\t\t\treturn (T) conversionService.convert(convertedValue, typeDesc);\n+\t\t\tif (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) {\n+\t\t\t\treturn (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);\n \t\t\t}\n \t\t}\n ",
    "output": "upgrade for change in conversion service api; source type desc now required"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToCharacterConverter.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToCharacterConverter.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToCharacterConverter.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToCharacterConverter.java\n@@ -30,6 +30,9 @@ public Character convert(String source) {\n \t\tif (\"\".equals(source)) {\n \t\t\treturn null;\n \t\t}\n+\t\tif (source.length() > 1) {\n+\t\t\tthrow new IllegalArgumentException(\"Can only convert a [String] with length of 1 to a [Character]; string value '\" + source + \"'  has length of \" + source.length());\n+\t\t}\n \t\treturn source.charAt(0);\n \t}\n ",
    "output": "tidying string to char conversion"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/support/jboss/VfsResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/support/jboss/VfsResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/support/jboss/VfsResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/jboss/VfsResource.java\n@@ -25,6 +25,7 @@\n \n import org.jboss.virtual.VirtualFile;\n import org.jboss.virtual.VFSUtils;\n+import org.jboss.virtual.VFS;\n \n import org.springframework.core.io.Resource;\n import org.springframework.core.io.AbstractResource;\n@@ -115,9 +116,8 @@ public File getFile() throws IOException {\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")\n \tpublic Resource createRelative(String relativePath) throws IOException {\n-\t\treturn new VfsResource(file.findChild(relativePath));\n+\t\treturn new VfsResource(VFS.getRoot(new URL(getURL(), relativePath)));\n \t}\n \n \tpublic String getFilename() {",
    "output": "modify createRelative according to David Ward's suggestion for"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java\n@@ -833,9 +833,14 @@ public void testCustomConverter() {\n \t\tDefaultListableBeanFactory lbf = new DefaultListableBeanFactory();\n \t\tDefaultConversionService conversionService = new DefaultConversionService();\n \t\tconversionService.addConverter(new Converter<String, Float>() {\n-\t\t\tpublic Float convert(String source) throws Exception {\n-\t\t\t\tNumberFormat nf = NumberFormat.getInstance(Locale.GERMAN);\n-\t\t\t\treturn nf.parse(source).floatValue();\n+\t\t\tpublic Float convert(String source) {\n+\t\t\t\ttry {\n+\t\t\t\t\tNumberFormat nf = NumberFormat.getInstance(Locale.GERMAN);\n+\t\t\t\t\treturn nf.parse(source).floatValue();\n+\t\t\t\t}\n+\t\t\t\tcatch (ParseException ex) {\n+\t\t\t\t\tthrow new IllegalArgumentException(ex);\n+\t\t\t\t}\n \t\t\t}\n \t\t});\n \t\tlbf.setConversionService(conversionService);",
    "output": "adapted to Converter signature change"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -1408,14 +1408,15 @@ public String getNamespaceURI(Node node) {\n \n \t/**\n \t * Determines whether the name of the supplied node is equal to the supplied name.\n-\t * The default implementation delegates to {@link DomUtils#nodeNameEquals}.\n-\t * Subclasses may override the default implementatino to provide a different mechanism for comparing node names.\n+\t * The default implementation checks the supplied desired name against both {@link Node#getNodeName)\n+\t * and {@link #getLoclName}.\n+\t * Subclasses may override the default implementation to provide a different mechanism for comparing node names.\n \t * @param node the node to compare\n \t * @param desiredName the name to check for\n \t * @return <code>true</code> if the names are equal otherwise <code>false</code>.\n \t */\n \tpublic boolean nodeNameEquals(Node node, String desiredName) {\n-\t\treturn DomUtils.nodeNameEquals(node, desiredName);\n+\t\treturn desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node));\n \t}\n \n \t/**",
    "output": "[] a few more tweaks to the BeanDefinitionParserDelegate public contract"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n--- a/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n+++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java\n@@ -54,11 +54,12 @@\n  * @see javax.validation.ValidatorFactory\r\n  * @see javax.validation.Validator\r\n  * @see javax.validation.Validation#buildDefaultValidatorFactory()\r\n+ * @see javax.validation.ValidatorFactory#getValidator()\r\n  */\r\n public class LocalValidatorFactoryBean extends SpringValidatorAdapter\r\n \t\timplements ValidatorFactory, Validator, ApplicationContextAware, InitializingBean {\r\n \r\n-\tprivate Class<? extends ValidationProvider> providerClass;\r\n+\tprivate Class providerClass;\r\n \r\n \tprivate MessageInterpolator messageInterpolator;\r\n \r\n@@ -153,6 +154,7 @@ public void setApplicationContext(ApplicationContext applicationContext) {\n \t}\r\n \r\n \r\n+\t@SuppressWarnings(\"unchecked\")\r\n \tpublic void afterPropertiesSet() {\r\n \t\tConfiguration configuration = (this.providerClass != null ?\r\n \t\t\t\tValidation.byProvider(this.providerClass).configure() :\r",
    "output": "revised use of generic provider class for Eclipse compile compatibility"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/CronTriggerBean.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.scheduling.quartz;\n \n-import java.text.ParseException;\n import java.util.Date;\n import java.util.Map;\n import java.util.TimeZone;\n@@ -131,7 +130,7 @@ public void setBeanName(String beanName) {\n \t}\n \n \n-\tpublic void afterPropertiesSet() throws ParseException {\n+\tpublic void afterPropertiesSet() throws Exception {\n \t\tif (getName() == null) {\n \t\t\tsetName(this.beanName);\n \t\t}",
    "output": "[] fixed Exception signature in CronTriggerBean.afterPropertiesSet"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanExpressionContext.java\n@@ -27,18 +27,18 @@\n  */\r\n public class BeanExpressionContext {\r\n \r\n-\tprivate final BeanFactory beanFactory;\r\n+\tprivate final ConfigurableBeanFactory beanFactory;\r\n \r\n \tprivate final Scope scope;\r\n \r\n \r\n-\tpublic BeanExpressionContext(BeanFactory beanFactory, Scope scope) {\r\n+\tpublic BeanExpressionContext(ConfigurableBeanFactory beanFactory, Scope scope) {\r\n \t\tAssert.notNull(beanFactory, \"BeanFactory must not be null\");\r\n \t\tthis.beanFactory = beanFactory;\r\n \t\tthis.scope = scope;\r\n \t}\r\n \r\n-\tpublic final BeanFactory getBeanFactory() {\r\n+\tpublic final ConfigurableBeanFactory getBeanFactory() {\r\n \t\treturn this.beanFactory;\r\n \t}\r\n \r",
    "output": "expression parser uses context's ConversionService by default"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java\n@@ -151,11 +151,13 @@ public void configureBean(Object beanInstance) {\n \t\t\tThrowable rootCause = ex.getMostSpecificCause();\n \t\t\tif (rootCause instanceof BeanCurrentlyInCreationException) {\n \t\t\t\tBeanCreationException bce = (BeanCreationException) rootCause;\n-\t\t\t\tif (logger.isDebugEnabled() && this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {\n-\t\t\t\t\tlogger.debug(\"Failed to create target bean '\" + bce.getBeanName() +\n-\t\t\t\t\t\t\t\"' while configuring object of type [\" + beanInstance.getClass().getName() +\n-\t\t\t\t\t\t\t\"] - probably due to a circular reference. This is a common startup situation \" +\n-\t\t\t\t\t\t\t\"and usually not fatal. Proceeding without injection. Original exception: \" + ex);\n+\t\t\t\tif (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {\n+\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\tlogger.debug(\"Failed to create target bean '\" + bce.getBeanName() +\n+\t\t\t\t\t\t\t\t\"' while configuring object of type [\" + beanInstance.getClass().getName() +\n+\t\t\t\t\t\t\t\t\"] - probably due to a circular reference. This is a common startup situation \" +\n+\t\t\t\t\t\t\t\t\"and usually not fatal. Proceeding without injection. Original exception: \" + ex);\n+\t\t\t\t\t}\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}",
    "output": "fix currently-in-creation check to apply with any log level"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java\n@@ -387,7 +387,9 @@ public static String commonDatabaseName(String source) {\n \t\t\tname = \"DB2\";\n \t\t}\n \t\telse if (\"Sybase SQL Server\".equals(source) ||\n-\t\t\t\t\"Adaptive Server Enterprise\".equals(source) || \"sql server\".equals(source) ) {\n+\t\t\t\t\"Adaptive Server Enterprise\".equals(source) || \n+\t\t\t\t\"ASE\".equals(source) || \n+\t\t\t\t\"sql server\".equalsIgnoreCase(source) ) {\n \t\t\tname = \"Sybase\";\n \t\t}\n \t\treturn name;",
    "output": "revised the detection of Sybase"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java\n@@ -1363,7 +1363,7 @@ private BeanDefinitionHolder decorateIfRequired(\n \t\t\tif (handler != null) {\n \t\t\t\treturn handler.decorate(node, originalDef, new ParserContext(this.readerContext, this, containingBd));\n \t\t\t}\n-\t\t\telse if (namespaceUri.startsWith(\"http://www.springframework.org/\")) {\n+\t\t\telse if (namespaceUri != null && namespaceUri.startsWith(\"http://www.springframework.org/\")) {\n \t\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", node);\n \t\t\t}\n \t\t\telse {",
    "output": "[] Fixed NPE in BeanDefinitionParserDelegate when using empty namespace as the default"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/util/ClassUtilsTests.java b/org.springframework.core/src/test/java/org/springframework/util/ClassUtilsTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/util/ClassUtilsTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/util/ClassUtilsTests.java\n@@ -64,6 +64,7 @@ public void testForName() throws ClassNotFoundException {\n \t\tassertEquals(TestBean[].class, ClassUtils.forName(TestBean[].class.getName()));\n \t\tassertEquals(TestBean[][].class, ClassUtils.forName(\"org.springframework.beans.TestBean[][]\"));\n \t\tassertEquals(TestBean[][].class, ClassUtils.forName(TestBean[][].class.getName()));\n+\t\tassertEquals(short[][][].class, ClassUtils.forName(\"[[[S\"));\n \t}\n \n \tpublic void testForNameWithPrimitiveClasses() throws ClassNotFoundException {",
    "output": "[] test case to show that bug is already fixed"
  },
  {
    "input": "diff --git a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/SpringJUnit4SuiteTests.java b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/SpringJUnit4SuiteTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/SpringJUnit4SuiteTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/SpringJUnit4SuiteTests.java\n@@ -21,6 +21,7 @@\n import org.junit.runners.Suite.SuiteClasses;\n import org.springframework.test.context.ClassLevelDirtiesContextTests;\n import org.springframework.test.context.SpringRunnerContextCacheTests;\n+import org.springframework.test.context.junit4.orm.HibernateSessionFlushingTests;\n \n /**\n  * <p>\n@@ -44,7 +45,8 @@\n @RunWith(Suite.class)\n // Note: the following 'multi-line' layout is for enhanced code readability.\n @SuiteClasses( {//\n-StandardJUnit4FeaturesTests.class,//\n+//\n+\tStandardJUnit4FeaturesTests.class,//\n \tStandardJUnit4FeaturesSpringRunnerTests.class,//\n \tExpectedExceptionSpringRunnerTests.class,//\n \tTimedSpringRunnerTests.class,//\n@@ -69,7 +71,8 @@\n \tRollbackOverrideDefaultRollbackTrueTransactionalSpringRunnerTests.class,//\n \tRollbackOverrideDefaultRollbackFalseTransactionalSpringRunnerTests.class,//\n \tBeforeAndAfterTransactionAnnotationTests.class,//\n-\tTimedTransactionalSpringRunnerTests.class //\n+\tTimedTransactionalSpringRunnerTests.class,//\n+\tHibernateSessionFlushingTests.class //\n })\n public class SpringJUnit4SuiteTests {\n \t/* this test case consists entirely of tests loaded as a suite. */",
    "output": "Including HibernateSessionFlushingTests in the suite"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java\n@@ -132,6 +132,11 @@ public String getKind() {\n \t\treturn ProceedingJoinPoint.METHOD_EXECUTION;\n \t}\n \n+\tpublic int getId() {\n+\t\t// TODO: It's just an adapter but returning 0 might still have side effects...\n+\t\treturn 0;\n+\t}\n+\n \tpublic JoinPoint.StaticPart getStaticPart() {\n \t\treturn this;\n \t}",
    "output": "upgrade to AspectJ 1.6.5"
  },
  {
    "input": "diff --git a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n--- a/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n+++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java\n@@ -52,6 +52,14 @@ public class HibernateSessionFlushingTests extends AbstractTransactionalJUnit4Sp\n \tprivate SessionFactory sessionFactory;\n \n \n+\tprotected int countRowsInPersonTable() {\n+\t\treturn countRowsInTable(\"person\");\n+\t}\n+\n+\tprotected void assertPersonCount(int expectedCount) {\n+\t\tassertEquals(\"Verifying number of rows in the 'person' table.\", expectedCount, countRowsInPersonTable());\n+\t}\n+\n \t@Before\n \tpublic void setUp() {\n \t\tassertInTransaction(true);\n@@ -72,7 +80,9 @@ public void findSam() {\n \tpublic void saveJuergenWithDriversLicense() {\n \t\tDriversLicense driversLicense = new DriversLicense(2L, 2222L);\n \t\tPerson juergen = new Person(JUERGEN, driversLicense);\n+\t\tint numRows = countRowsInPersonTable();\n \t\tpersonService.save(juergen);\n+\t\tassertPersonCount(numRows + 1);\n \t\tassertNotNull(\"Should be able to save and retrieve Juergen\", personService.findByName(JUERGEN));\n \t\tassertNotNull(\"Juergen's ID should have been set\", juergen.getId());\n \t}",
    "output": "Add assertPersonCountfunctionality for increased robustness"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java\n@@ -137,7 +137,8 @@ protected final void refreshBeanFactory() throws BeansException {\n \t@Override\n \tprotected void cancelRefresh(BeansException ex) {\n \t\tsynchronized (this.beanFactoryMonitor) {\n-\t\t\tthis.beanFactory.setSerializationId(null);\n+\t\t\tif (this.beanFactory != null)\n+\t\t\t\tthis.beanFactory.setSerializationId(null);\n \t\t}\n \t\tsuper.cancelRefresh(ex);\n \t}",
    "output": "+ fixed NPE when closing up non-initialized contexts"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/OrderItem.java\n@@ -1,40 +0,0 @@\n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.oxm.castor;\n-\n-public class OrderItem {\n-\n-\tprivate String id;\n-\n-\tprivate Integer quantity;\n-\n-\tpublic String getId() {\n-\t\treturn id;\n-\t}\n-\n-\tpublic void setId(String id) {\n-\t\tthis.id = id;\n-\t}\n-\n-\tpublic Integer getQuantity() {\n-\t\treturn quantity;\n-\t}\n-\n-\tpublic void setQuantity(Integer quantity) {\n-\t\tthis.quantity = quantity;\n-\t}\n-}",
    "output": "Remove duplicate OrderItem"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n@@ -83,10 +83,10 @@ public void testSetBothTargetClassesAndMapping() throws IOException {\n \t\tassertEquals(\"Invalid amount of items\", 2, order.getOrderItemCount());\n \t\tOrderItem item = order.getOrderItem(0);\n \t\tassertEquals(\"Invalid items\", \"1\", item.getId());\n-\t\tassertEquals(\"Invalid items\", new Integer(15), item.getQuantity());\n+\t\tassertEquals(\"Invalid items\", 15, (int)item.getQuantity());\n \t\titem = order.getOrderItem(1);\n \t\tassertEquals(\"Invalid items\", \"3\", item.getId());\n-\t\tassertEquals(\"Invalid items\", new Integer(20), item.getQuantity());\n+\t\tassertEquals(\"Invalid items\", 20, (int)item.getQuantity());\n \t}\n \n ",
    "output": "More autoboxing madness"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorUnmarshallerTests.java\n@@ -28,7 +28,9 @@\n import org.springframework.oxm.AbstractUnmarshallerTests;\n import org.springframework.oxm.Unmarshaller;\n \n-/** @author Arjen Poutsma */\n+/**\n+ * @author Arjen Poutsma\n+ */\n public class CastorUnmarshallerTests extends AbstractUnmarshallerTests {\n \n \t@Override\n@@ -43,7 +45,7 @@ protected void testFlights(Object o) {\n \tprotected void testFlight(Object o) {\n \t\tFlight flight = (Flight) o;\n \t\tassertNotNull(\"Flight is null\", flight);\n-\t\tassertEquals(\"Number is invalid\", Long.valueOf(42L), flight.getNumber());\n+\t\tassertEquals(\"Number is invalid\", 42L, (long) flight.getNumber());\n \t}\n \n \t@Override",
    "output": "add superfluous cast to get around ambiguity problem with some compilers"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java\n@@ -681,14 +681,7 @@ private ArgumentsHolder createArgumentArray(\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\targs.arguments[paramIndex] = convertedValue;\n-\t\t\t\tif (mbd.isLenientConstructorResolution()) {\n-\t\t\t\t\targs.rawArguments[paramIndex] = originalValue;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\targs.rawArguments[paramIndex] =\n-\t\t\t\t\t\t\t((sourceValue instanceof TypedStringValue && !((TypedStringValue) sourceValue).hasTargetType()) ?\n-\t\t\t\t\t\t\tconvertedValue : originalValue);\n-\t\t\t\t}\n+\t\t\t\targs.rawArguments[paramIndex] = originalValue;\n \t\t\t}\n \t\t\telse {\n \t\t\t\t// No explicit match found: we're either supposed to autowire or",
    "output": "+ add implicit (String) type for typed string values w/o a specified type"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n@@ -228,7 +228,7 @@ protected Object createTest() throws Exception {\n \t */\n \t@Override\n \tprotected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {\n-\t\tEachTestNotifier eachNotifier = makeNotifier(frameworkMethod, notifier);\n+\t\tEachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier);\n \t\tif (isTestMethodIgnored(frameworkMethod)) {\n \t\t\teachNotifier.fireTestIgnored();\n \t\t\treturn;\n@@ -249,7 +249,15 @@ protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {\n \t\t}\n \t}\n \n-\tprivate EachTestNotifier makeNotifier(FrameworkMethod method, RunNotifier notifier) {\n+\t/**\n+\t * <code>springMakeNotifier()</code> is an exact copy of\n+\t * {@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}\n+\t * <code>makeNotifier()</code> method, but we have decided to prefix it with\n+\t * \"spring\" and keep it <code>private</code> in order to avoid the\n+\t * compatibility clashes that were introduced in JUnit between versions 4.5,\n+\t * 4.6, and 4.7.\n+\t */\n+\tprivate EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {\n \t\tDescription description = describeChild(method);\n \t\treturn new EachTestNotifier(notifier, description);\n \t}",
    "output": "[] Renamed makeNotifierto springMakeNotifierin order to allow compatibility with JUnit 4.5, 4.6, and 4.7"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n--- a/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n@@ -111,7 +111,7 @@ public class XStreamMarshaller extends AbstractMarshaller implements Initializin\n \t/**\n \t * Returns the XStream instance used by this marshaller.\n \t */\n-\tpublic final XStream getXStream() {\n+\tpublic XStream getXStream() {\n \t\treturn xstream;\n \t}\n ",
    "output": "Ability to configure a XStream subclass on XStreamMarshaller"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/model/binder/support/GenericBinderTests.java b/org.springframework.context/src/test/java/org/springframework/model/binder/support/GenericBinderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/model/binder/support/GenericBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/model/binder/support/GenericBinderTests.java\n@@ -31,6 +31,7 @@\n import org.springframework.core.style.ToStringCreator;\n import org.springframework.model.binder.Binder;\n import org.springframework.model.binder.BindingResults;\n+import org.springframework.model.binder.MissingFieldException;\n \n /**\n  * @author Mark Fisher\n@@ -157,6 +158,22 @@ public void messageSource() {\n \t\tLocaleContextHolder.setLocale(null);\n \t}\n \t\n+\t@Test\n+\tpublic void missingFields() {\n+\t\tPerson person = new Person();\n+\t\tMap<String, Object> map = new HashMap<String, Object>();\n+\t\tGenericBinder binder = new GenericBinder();\n+\t\tbinder.setRequiredFields(new String[] { \"name\", \"age\", \"male\" });\n+\t\ttry {\n+\t\t\tbinder.bind(map, person);\n+\t\t} catch (MissingFieldException e) {\n+\t\t\tassertEquals(3, e.getMissing().size());\n+\t\t\tassertEquals(\"name\", e.getMissing().get(0));\n+\t\t\tassertEquals(\"age\", e.getMissing().get(1));\n+\t\t\tassertEquals(\"male\", e.getMissing().get(2));\n+\t\t}\n+\t}\n+\t\n \tpublic static class Person {\n \n \t\tprivate String name;",
    "output": "missing field test case"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/test/java/org/springframework/jms/core/JmsTemplateTests.java b/org.springframework.jms/src/test/java/org/springframework/jms/core/JmsTemplateTests.java\n--- a/org.springframework.jms/src/test/java/org/springframework/jms/core/JmsTemplateTests.java\n+++ b/org.springframework.jms/src/test/java/org/springframework/jms/core/JmsTemplateTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -275,7 +275,7 @@ public void testSessionCallbackWithinSynchronizedTransaction() throws Exception\n \t\ttemplate.setConnectionFactory(scf);\n \n \t\tmockConnection.start();\n-\t\tconnectionControl.setVoidCallable(3);\n+\t\tconnectionControl.setVoidCallable(1);\n \t\t// We're gonna call getTransacted 3 times, i.e. 2 more times.\n \t\tmockSession.getTransacted();\n \t\tsessionControl.setReturnValue(useTransactedSession(), 2);",
    "output": "JMS SingleConnectionFactory uses minimized number of start calls (for Oracle AQ; )"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java b/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n@@ -510,8 +510,10 @@ else if (method.getName().equals(\"setExceptionListener\")) {\n \t\t\telse if (method.getName().equals(\"start\")) {\n \t\t\t\t// Handle start method: track started state.\n \t\t\t\tsynchronized (connectionMonitor) {\n-\t\t\t\t\tthis.target.start();\n-\t\t\t\t\tstarted = true;\n+\t\t\t\t\tif (!started) {\n+\t\t\t\t\t\tthis.target.start();\n+\t\t\t\t\t\tstarted = true;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn null;\n \t\t\t}",
    "output": "JMS SingleConnectionFactory uses minimized number of start calls (for Oracle AQ; )"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -205,12 +205,6 @@ public <T> T getBean(String name, Class<T> requiredType, Object[] args) throws B\n \t\treturn doGetBean(name, requiredType, args, false);\n \t}\n \n-\tprotected <T> T doGetBean(\n-\t\t\tfinal String name, final Class<T> requiredType, final Object[] args, final boolean typeCheckOnly)\n-\t\t\tthrows BeansException {\n-\n-\t\t\treturn doGetBeanRaw(name, requiredType, args, typeCheckOnly);\n-\t}\n \t/**\n \t * Return an instance, which may be shared or independent, of the specified bean.\n \t * @param name the name of the bean to retrieve\n@@ -223,7 +217,7 @@ protected <T> T doGetBean(\n \t * @throws BeansException if the bean could not be created\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tprivate <T> T doGetBeanRaw(\n+\tprivate <T> T doGetBean(\n \t\t\tfinal String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly)\n \t\t\tthrows BeansException {\n ",
    "output": "+ removed unneeded method (one less item off the stack)"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n@@ -30,7 +30,7 @@ public void testBuildH2() {\n \t\tassertDatabaseCreatedAndShutdown(db);\n \t}\n \n-\t@Test\n+\n \tpublic void testBuildDerby() {\n \t\tEmbeddedDatabaseBuilder builder = EmbeddedDatabaseBuilder.relativeTo(getClass());\n \t\tEmbeddedDatabase db = builder.type(DERBY).script(\"db-schema-derby.sql\").script(\"db-test-data.sql\").build();",
    "output": "Upgrade POMS to JUnit 4.6"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/util/xml/AbstractStaxXMLReaderTestCase.java b/org.springframework.core/src/test/java/org/springframework/util/xml/AbstractStaxXMLReaderTestCase.java\n--- a/org.springframework.core/src/test/java/org/springframework/util/xml/AbstractStaxXMLReaderTestCase.java\n+++ b/org.springframework.core/src/test/java/org/springframework/util/xml/AbstractStaxXMLReaderTestCase.java\n@@ -117,9 +117,8 @@ public void contentHandlerNoNamespacesPrefixes() throws SAXException, IOExceptio\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void lexicalHandler() throws SAXException, IOException, XMLStreamException {\n-\t\tMockControl lexicalHandlerControl = MockControl.createControl(LexicalHandler.class);\n+\t\tMockControl lexicalHandlerControl = MockControl.createStrictControl(LexicalHandler.class);\n \t\tlexicalHandlerControl.setDefaultMatcher(new SaxArgumentMatcher());\n \t\tLexicalHandler lexicalHandlerMock = (LexicalHandler) lexicalHandlerControl.getMock();\n \t\tLexicalHandler lexicalHandler = new CopyingLexicalHandler(lexicalHandlerMock);\n@@ -128,7 +127,7 @@ public void lexicalHandler() throws SAXException, IOException, XMLStreamExceptio\n \n \t\tstandardReader.setContentHandler(null);\n \t\tstandardReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", lexicalHandler);\n-\t\tstandardReader.parse(new InputSource(createTestInputStream()));\n+\t\tstandardReader.parse(new InputSource(testLexicalHandlerXml.getInputStream()));\n \t\tlexicalHandlerControl.replay();\n \n \t\tinputFactory.setProperty(\"javax.xml.stream.isCoalescing\", Boolean.FALSE);",
    "output": "Getting rid of @Ignore"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java\n@@ -47,7 +47,7 @@\n  * @since 3.0\r\n  * @see CronTrigger\r\n  */\r\n-public class CronSequenceGenerator {\r\n+class CronSequenceGenerator {\r\n \r\n \tprivate final BitSet seconds = new BitSet(60);\r\n \r",
    "output": "CronSequenceGenerator is now package-protected (only used by CronTrigger)"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java b/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/util/StringKeyedMapAdapterTests.java\n@@ -15,13 +15,13 @@ public class StringKeyedMapAdapterTests extends TestCase {\n \n \tprivate Map contents = new HashMap();\n \n-\tprivate StringKeyedMapAdapter map = new StringKeyedMapAdapter() {\n+\tprivate StringKeyedMapAdapter<Object> map = new StringKeyedMapAdapter<Object>() {\n \n \t\tprotected Object getAttribute(String key) {\n \t\t\treturn contents.get(key);\n \t\t}\n \n-\t\tprotected Iterator getAttributeNames() {\n+\t\tprotected Iterator<String> getAttributeNames() {\n \t\t\treturn contents.keySet().iterator();\n \t\t}\n ",
    "output": "Fix failing test due to compiler differences"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java\n@@ -841,6 +841,11 @@ protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd\n \t\t// Make sure bean class is actually resolved at this point.\n \t\tClass beanClass = resolveBeanClass(mbd, beanName);\n \n+\t\tif (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {\n+\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n+\t\t\t\t\t\"Bean class isn't public, and non-public access not allowed: \" + beanClass.getName());\n+\t\t}\n+\n \t\tif (mbd.getFactoryMethodName() != null)  {\n \t\t\treturn instantiateUsingFactoryMethod(beanName, mbd, args);\n \t\t}",
    "output": "prevent non-public access to bean class as well, if demanded"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java\n@@ -30,6 +30,7 @@\n \n import org.springframework.util.FileCopyUtils;\n import org.springframework.util.Md5HashUtils;\n+import org.springframework.web.util.WebUtils;\n \n /**\n  * {@link javax.servlet.Filter} that generates an <code>ETag</code> value based on the content on the response. This\n@@ -118,7 +119,7 @@ public PrintWriter getWriter() throws IOException {\n \t\t\tif (this.writer == null) {\n \t\t\t\tString characterEncoding = getCharacterEncoding();\n \t\t\t\tthis.writer = (characterEncoding != null ? new ResponsePrintWriter(characterEncoding) :\n-\t\t\t\t\t\tnew ResponsePrintWriter());\n+\t\t\t\t\t\tnew ResponsePrintWriter(WebUtils.DEFAULT_CHARACTER_ENCODING));\n \t\t\t}\n \t\t\treturn this.writer;\n \t\t}",
    "output": "Using correct encoding (-1) instead of JVM default when no character encoding is given"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/MvcBindingLifecycle.java b/org.springframework.context/src/main/java/org/springframework/ui/MvcBindingLifecycle.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/MvcBindingLifecycle.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/MvcBindingLifecycle.java\n@@ -38,6 +38,8 @@ public class MvcBindingLifecycle implements BindingLifecycle<Object> {\n \n \tprivate Object model;\n \n+\tprivate PresentationModel presentationModel;\n+\t\n \tpublic MvcBindingLifecycle(Class<?> modelType, PresentationModelFactory presentationModelFactory,\n \t\t\tModelMap modelMap, Map<String, ? extends Object> fieldValues) {\n \t\tthis.presentationModelFactory = presentationModelFactory;\n@@ -56,7 +58,7 @@ public void execute() {\n \t\t\tbindEagerCommit = true;\n \t\t}\n \t\tmodelMap.addAttribute(model);\n-\t\tPresentationModel presentationModel = presentationModelFactory.getPresentationModel(model);\n+\t\tpresentationModel = presentationModelFactory.getPresentationModel(model);\n \t\tPresentationModelBinder binder = new PresentationModelBinder();\n \t\tbinder.setCommitDirtyValue(bindEagerCommit);\n \t\tbinder.bind(fieldValues, presentationModel);\n@@ -67,7 +69,7 @@ public void execute() {\n \t}\n \n \tpublic boolean hasErrors() {\n-\t\treturn false;\n+\t\treturn presentationModel.hasErrors();\n \t}\n \n \tpublic Object getModel() {",
    "output": "delegate to presentation model"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java b/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java\n--- a/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/GenericBinder.java\n@@ -67,7 +67,6 @@ private EvaluationContextFieldBinder(ExpressionParser parser, EvaluationContext\n \t\t\tthis.context = context;\n \t\t}\n \n-\t\t@Override\n \t\tpublic BindingResult bind(String key, Object value) {\n \t\t\tAlert alert = null;\n \t\t\ttry {",
    "output": "Remove @Override on interface method"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/model/ui/support/PresentationModelBinderTests.java b/org.springframework.context/src/test/java/org/springframework/model/ui/support/PresentationModelBinderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/model/ui/support/PresentationModelBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/model/ui/support/PresentationModelBinderTests.java\n@@ -35,7 +35,7 @@\n import org.springframework.model.ui.format.number.CurrencyFormatter;\n import org.springframework.model.ui.format.number.IntegerFormatter;\n \n-public class GenericBinderTests {\n+public class PresentationModelBinderTests {\n \n \tprivate PresentationModelBinder binder;\n ",
    "output": "presentation model binder tests"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ScopingTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ScopingTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ScopingTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ScopingTests.java\n@@ -320,13 +320,15 @@ public ITestBean scopedInterface() {\n \t\t\treturn tb;\n \t\t}\n \n+\t\t@Bean\n \t\t@MyProxiedScope\n \t\tpublic ITestBean scopedProxyInterface() {\n \t\t\tTestBean tb = new TestBean();\n \t\t\ttb.setName(flag);\n \t\t\treturn tb;\n \t\t}\n \n+\t\t@Bean\n \t\t@MyProxiedScope\n \t\tpublic TestBean scopedProxyClass() {\n \t\t\tTestBean tb = new TestBean();\n@@ -359,7 +361,6 @@ public TestBean singletonWithScopedInterfaceDep() {\n \n \t@Target({ElementType.METHOD})\n \t@Retention(RetentionPolicy.RUNTIME)\n-\t@Bean\n \t@Scope(value=SCOPE, proxyMode=ScopedProxyMode.TARGET_CLASS)\n \t@interface MyProxiedScope {\n \t}",
    "output": "resort to using @Bean directly"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/type/StandardMethodMetadata.java b/org.springframework.core/src/main/java/org/springframework/core/type/StandardMethodMetadata.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/type/StandardMethodMetadata.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/type/StandardMethodMetadata.java\n@@ -97,6 +97,11 @@ public Map<String, Object> getAnnotationAttributes(String annotationType) {\n \t\t\tif (ann.annotationType().getName().equals(annotationType)) {\r\n \t\t\t\treturn AnnotationUtils.getAnnotationAttributes(ann, true);\r\n \t\t\t}\r\n+\t\t\tfor (Annotation metaAnn : ann.annotationType().getAnnotations()) {\r\n+\t\t\t\tif (metaAnn.annotationType().getName().equals(annotationType)) {\r\n+\t\t\t\t\treturn AnnotationUtils.getAnnotationAttributes(metaAnn, true);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n \t\t}\r\n \t\treturn null;\r\n \t}\r",
    "output": "getAnnotationAttributes generally supports meta-annotation lookup"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java\n@@ -75,7 +75,17 @@ public static Annotation[] getAnnotations(Method method) {\n \t * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)\n \t */\n \tpublic static <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {\n-\t\treturn BridgeMethodResolver.findBridgedMethod(method).getAnnotation(annotationType);\n+\t\tMethod resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);\n+\t\tA ann = resolvedMethod.getAnnotation(annotationType);\n+\t\tif (ann == null) {\n+\t\t\tfor (Annotation metaAnn : resolvedMethod.getAnnotations()) {\n+\t\t\t\tann = metaAnn.annotationType().getAnnotation(annotationType);\n+\t\t\t\tif (ann != null) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn ann;\n \t}\n \n \t/**",
    "output": "AnnotationUtils.getAnnotation generally supports meta-annotation lookup"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java\n@@ -50,7 +50,6 @@ public interface Binding {\n \t/**\n \t * If this Binding is visible.\n \t * Used to determine if the user can see the field.\n-\t * A Binding that is not visible cannot have source values applied and cannot be committed. \n \t */\n \tboolean isVisible();\n \t",
    "output": "additional binding metadata"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java\n@@ -117,7 +117,8 @@ private Enhancer newEnhancer(Class<?> superclass) {\n \t */\n \tprivate Class<?> createClass(Enhancer enhancer) {\n \t\tClass<?> subclass = enhancer.createClass();\n-\t\tEnhancer.registerCallbacks(subclass, this.callbackInstances.toArray(new Callback[this.callbackInstances.size()]));\n+\t\t// registering callbacks statically (as opposed to threadlocal) is critical for usage in an OSGi env (SPR-5932)\n+\t\tEnhancer.registerStaticCallbacks(subclass, this.callbackInstances.toArray(new Callback[this.callbackInstances.size()]));\n \t\treturn subclass;\n \t}\n ",
    "output": "Singleton @Bean methods behave like prototypes in a Spring DM environment * s/registerCallbacks/registerStaticCallbacks/ - see issue comments for full details"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.expression.spel;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n@@ -71,8 +72,10 @@ public void testWidening01() {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void testArgumentConversion01() {\n \t\t// Closest ctor will be new String(String) and converter supports Double>String\n+\t\t// TODO currently failing as with new ObjectToArray converter closest constructor matched becomes String(byte[]) which fails...\n \t\tevaluate(\"new String(3.0d)\", \"3.0\", String.class);\n \t}\n ",
    "output": "ignore failing test for now"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArray.java\n@@ -22,6 +22,7 @@\n \n /**\n  * Converts an object to a single-element array.\n+ * TODO - this class throws cryptic exception if it can't convert to required target array element type.\n  * @author Keith Donald\n  * @since 3.0\n  */\n@@ -39,8 +40,9 @@ public ObjectToArray(TypeDescriptor sourceObjectType, TypeDescriptor targetArray\n \t}\n \n \tpublic Object execute(Object source) throws ConversionFailedException {\n-\t\tObject array = Array.newInstance(targetArrayType.getType(), 1);\n-\t\tArray.set(array, 0, elementConverter.execute(source));\t\t\n+\t\tObject array = Array.newInstance(targetArrayType.getElementType(), 1);\n+\t\tObject element = elementConverter.execute(source);\n+\t\tArray.set(array, 0, element);\t\t\n \t\treturn array;\n \t}\n ",
    "output": "fix element type bug"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericTypeConverterTests.java\n@@ -26,11 +26,10 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.core.convert.ConversionFailedException;\n-import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.convert.ConverterNotFoundException;\n+import org.springframework.core.convert.TypeDescriptor;\n import org.springframework.core.convert.converter.Converter;\n \n public class GenericTypeConverterTests {\n@@ -114,22 +113,6 @@ public Integer convert(CharSequence source) throws Exception {\n \t\tassertEquals(new Integer(3), result);\n \t}\n \n-\t@Test\n-\t@Ignore\n-\tpublic void convertNoSuperTargetType() {\n-\t\tconverter.add(new Converter<CharSequence, Number>() {\n-\t\t\tpublic Integer convert(CharSequence source) throws Exception {\n-\t\t\t\treturn Integer.valueOf(source.toString());\n-\t\t\t}\n-\t\t});\n-\t\ttry {\n-\t\t\tconverter.convert(\"3\", Integer.class);\n-\t\t\tfail(\"Should have failed\");\n-\t\t} catch (ConverterNotFoundException e) {\n-\n-\t\t}\n-\t}\n-\n \t@Test\n \tpublic void convertObjectToPrimitive() {\n \t\tconverter.add(new StringToInteger());",
    "output": "remove last ignore"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n@@ -217,8 +217,8 @@ public boolean configuredToGrowCollection() {\n \t\treturn (configuration & SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize)!=0;\r\n \t}\r\n \r\n-\tpublic boolean configuredToCreateCollection() {\r\n-\t\treturn (configuration & SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull)!=0;\r\n+\tpublic boolean configuredToCreateCollectionOrMap() {\r\n+\t\treturn (configuration & SpelExpressionParserConfiguration.CreateObjectIfAttemptToReferenceNull)!=0;\r\n \t}\r\n \r\n }\r",
    "output": "for Keith and his binder: fault in support for maps (if attempt made to reference into null map) and for general objects, e.g. foo.bar if foo was null, attempt to dynamically build foo"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java b/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java\n@@ -509,8 +509,8 @@ else if (method.getName().equals(\"setExceptionListener\")) {\n \t\t\t}\n \t\t\telse if (method.getName().equals(\"start\")) {\n \t\t\t\t// Handle start method: track started state.\n-\t\t\t\tthis.target.start();\n \t\t\t\tsynchronized (connectionMonitor) {\n+\t\t\t\t\tthis.target.start();\n \t\t\t\t\tstarted = true;\n \t\t\t\t}\n \t\t\t\treturn null;",
    "output": "JMS SingleConnectionFactory performs start call within connection monitor (for Oracle AQ)"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java\n@@ -44,16 +44,17 @@ public class SpringLocaleResolver extends DefaultLocaleResolver {\n \n \t@Override\n \tpublic Locale resolveLocale(TilesRequestContext context) {\n-\t\tif (context instanceof ServletTilesRequestContext) {\n-\t\t\treturn RequestContextUtils.getLocale(((ServletTilesRequestContext) context).getRequest());\n-\t\t}\n-\t\telse if (context instanceof JspTilesRequestContext) {\n+\t\tif (context instanceof JspTilesRequestContext) {\n \t\t\tPageContext pc = ((JspTilesRequestContext) context).getPageContext();\n \t\t\treturn RequestContextUtils.getLocale((HttpServletRequest) pc.getRequest());\n \t\t}\n-\t\telse {\n-\t\t\treturn super.resolveLocale(context);\n+\t\telse if (context instanceof ServletTilesRequestContext) {\n+\t\t\tHttpServletRequest request = ((ServletTilesRequestContext) context).getRequest();\n+\t\t\tif (request != null) {\n+\t\t\t\treturn RequestContextUtils.getLocale(request);\n+\t\t\t}\n \t\t}\n+\t\treturn super.resolveLocale(context);\n \t}\n \n }",
    "output": "only call LocaleResolver when encountering an actual HttpServletRequest"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java\n@@ -167,10 +167,10 @@ else if (value instanceof ManagedProperties) {\n \t\t\t\tObject propKey = propEntry.getKey();\n \t\t\t\tObject propValue = propEntry.getValue();\n \t\t\t\tif (propKey instanceof TypedStringValue) {\n-\t\t\t\t\tpropKey = ((TypedStringValue) propKey).getValue();\n+\t\t\t\t\tpropKey = evaluate(((TypedStringValue) propKey).getValue());\n \t\t\t\t}\n \t\t\t\tif (propValue instanceof TypedStringValue) {\n-\t\t\t\t\tpropValue = ((TypedStringValue) propValue).getValue();\n+\t\t\t\t\tpropValue = evaluate(((TypedStringValue) propValue).getValue());\n \t\t\t\t}\n \t\t\t\tcopy.put(propKey, propValue);\n \t\t\t}",
    "output": "test and fix for using expressions in property list keys and values"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java b/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/validation/ValidationResult.java\n@@ -0,0 +1,23 @@\n+package org.springframework.ui.validation;\n+\n+import org.springframework.ui.alert.Alert;\n+\n+public interface ValidationResult {\n+\n+\t/**\n+\t * The name of the model property associated with this validation result.\n+\t */\n+\tString getProperty();\n+\t\n+\t/**\n+\t * Indicates if the validation failed.\n+\t */\n+\tboolean isFailure();\n+\n+\t/**\n+\t * Gets the alert for this validation result, appropriate for rendering the result to the user.\n+\t * An alert describing a successful validation will have info severity.\n+\t * An alert describing a failed validation will have either warning or error severity.\n+\t */\n+\tAlert getAlert();\n+}",
    "output": "add validation result"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java\n@@ -220,11 +220,6 @@ protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {\n \t\t}\n \t}\n \n-\tprivate EachTestNotifier makeNotifier(FrameworkMethod frameworkMethod, RunNotifier notifier) {\n-\t\tDescription description = describeChild(frameworkMethod);\n-\t\treturn new EachTestNotifier(notifier, description);\n-\t}\n-\n \t/**\n \t * Augments the default JUnit behavior\n \t * {@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with",
    "output": "[] Upgraded to JUnit 4.6.0"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java\n@@ -982,7 +982,7 @@ public void bindingCookieValue() throws ServletException, IOException {\n \t\trequest.setCookies(new Cookie(\"date\", \"2008-11-18\"));\n \t\tMockHttpServletResponse response  = new MockHttpServletResponse();\n \t\tservlet.service(request, response);\n-\t\tassertEquals(\"test-1226962800000\", response.getContentAsString());\n+\t\tassertEquals(\"test-108\", response.getContentAsString());\n \t}\n \n \t@Test\n@@ -1706,7 +1706,7 @@ public void initBinder(WebDataBinder binder) {\n \t\tpublic void handle(@CookieValue(\"date\") Date date, Writer writer)\n \t\t\t\tthrows IOException {\n \t\t\tassertEquals(\"Invalid path variable value\", new Date(108, 10, 18), date);\n-\t\t\twriter.write(\"test-\" + date.getTime());\n+\t\t\twriter.write(\"test-\" + date.getYear());\n \t\t}\n \n \t}",
    "output": "Fix the build, stupid java.util.Date"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java b/org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java\n--- a/org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java\n+++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java\n@@ -66,7 +66,7 @@ protected Object createFlights() {\n \t\tFlightType flight = new FlightType();\n \t\tflight.setNumber(42L);\n \t\tflights = new Flights();\n-\t\tflights.getFlight().configureBinding(flight);\n+\t\tflights.getFlight().add(flight);\n \t\treturn flights;\n \t}\n ",
    "output": "eclipse refactor changed code unexpectedly"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/BindingJacksonJsonView.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/BindingJacksonJsonView.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/BindingJacksonJsonView.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/BindingJacksonJsonView.java\n@@ -136,9 +136,8 @@ protected void renderMergedOutputModel(Map<String, Object> model,\n \t */\n \tprotected Map<String, Object> filterModel(Map<String, Object> model) {\n \t\tMap<String, Object> result = new HashMap<String, Object>(model.size());\n-\t\tif (CollectionUtils.isEmpty(renderedAttributes)) {\n-\t\t\trenderedAttributes = model.keySet();\n-\t\t}\n+\t\tSet<String> renderedAttributes =\n+\t\t\t\t!CollectionUtils.isEmpty(this.renderedAttributes) ? this.renderedAttributes : model.keySet();\n \t\tfor (Map.Entry<String, Object> entry : model.entrySet()) {\n \t\t\tif (!(entry instanceof BindingResult) && renderedAttributes.contains(entry.getKey())) {\n \t\t\t\tresult.put(entry.getKey(), entry.getValue());",
    "output": "JSON formatting view for Spring MVC"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java\n@@ -261,7 +261,7 @@ public void setMethodInvoker(MethodInvoker methodInvoker) {\n \t\t@Override\n \t\tprotected void executeInternal(JobExecutionContext context) throws JobExecutionException {\n \t\t\ttry {\n-\t\t\t\tthis.methodInvoker.invoke();\n+\t\t\t\tcontext.setResult(this.methodInvoker.invoke());\n \t\t\t}\n \t\t\tcatch (InvocationTargetException ex) {\n \t\t\t\tif (ex.getTargetException() instanceof JobExecutionException) {",
    "output": "method invocation result gets set as JobExecutionContext result"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n--- a/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n@@ -269,6 +269,16 @@ public void setAnnotatedClasses(Class<?>[] annotatedClasses) {\n \t\tthis.getXStream().processAnnotations(annotatedClasses);\n \t}\n \n+\t/**\n+\t * Set the auto-detection mode of XStream.\n+\t * <p><strong>Note</strong> that auto-detection implies that the XStream is configured while it is processing the\n+\t * XML steams, and thus introduces a potential concurrency problem.\n+\t * @see XStream#autodetectAnnotations(boolean)\n+\t */\n+\tpublic void setAutodetectAnnotations(boolean autodetectAnnotations) {\n+\t\tthis.getXStream().autodetectAnnotations(autodetectAnnotations);\n+\t}\n+\n \t/**\n \t * Set the XStream hierarchical stream driver to be used with stream readers and writers.\n \t */",
    "output": "XStreamMarshaller can not activate XStream automatic annotations detection feature"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java\n@@ -53,7 +53,7 @@ protected void doParse(Element element, ParserContext parserContext, BeanDefinit\n \t\tNodeList childNodes = element.getChildNodes();\n \t\tfor (int i = 0; i < childNodes.getLength(); i++) {\n \t\t\tNode child = childNodes.item(i);\n-\t\t\tif (!(child instanceof Element) || !child.getLocalName().equals(\"task\")) {\n+\t\t\tif (!(child instanceof Element) || !child.getLocalName().equals(\"scheduled\")) {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\tElement taskElement = (Element) child;",
    "output": "The 'task' sub-element of the 'scheduled-tasks' element is now 'scheduled' to be consistent with the @Scheduled annotation (and to avoid task:task)"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/ui/message/MessageBuilderTests.java b/org.springframework.context/src/test/java/org/springframework/ui/message/MessageBuilderTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/ui/message/MessageBuilderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/ui/message/MessageBuilderTests.java\n@@ -4,13 +4,15 @@\n \n import java.util.Locale;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n public class MessageBuilderTests {\n \t\n \tprivate MessageBuilder builder = new MessageBuilder();\n \n \t@Test\n+\t@Ignore\n \tpublic void buildMessage() {\n \t\tMessageResolver resolver = builder.severity(Severity.ERROR).code(\"invalidFormat\").resolvableArg(\"label\", \"mathForm.decimalField\")\n \t\t\t\t.arg(\"format\", \"#,###.##\").defaultText(\"Field must be in format #,###.##\").build();",
    "output": "ignore failing test for now - andy c to look at next wk"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -638,9 +638,12 @@ protected Object resolveCookieValue(String cookieName, Class paramType, NativeWe\n \t\t\tif (Cookie.class.isAssignableFrom(paramType)) {\n \t\t\t\treturn cookieValue;\n \t\t\t}\n-\t\t\telse {\n+\t\t\telse if (cookieValue != null) {\n \t\t\t\treturn cookieValue.getValue();\n \t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
    "output": "NullPointerException when using @CookieValue annotation"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java\n@@ -53,20 +53,6 @@ public Object getValue() {\n \t\treturn value;\n \t}\n \t\n-\t/**\n-\t * Is the user-entered value a String?\n-\t */\n-\tpublic boolean isString() {\n-\t\treturn value instanceof String;\n-\t}\n-\n-\t/**\n-\t * Is the user-entered value a String[]?\n-\t */\n-\tpublic boolean isStringArray() {\n-\t\treturn value instanceof String[];\n-\t}\n-\n \t/**\n \t * Creates a new UserValue list with a single element.\n \t * @param property the property",
    "output": "remove unused field"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java\n--- a/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java\n+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/SimpleJaxWsServiceExporter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,6 +65,10 @@ public void setBaseAddress(String baseAddress) {\n \t@Override\n \tprotected void publishEndpoint(Endpoint endpoint, WebService annotation) {\n \t\tString fullAddress = this.baseAddress + annotation.serviceName();\n+\t\tif (endpoint.getClass().getName().startsWith(\"weblogic.\")) {\n+\t\t\t// Workaround for WebLogic 10.3 \n+\t\t\tfullAddress = fullAddress + \"/\";\n+\t\t}\n \t\tendpoint.publish(fullAddress);\n \t}\n ",
    "output": "add JAX-WS workaround for WebLogic 10.3"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n@@ -16,8 +16,6 @@\n import org.springframework.core.GenericTypeResolver;\n import org.springframework.core.convert.TypeConverter;\n import org.springframework.core.convert.TypeDescriptor;\n-import org.springframework.core.convert.converter.Converter;\n-import org.springframework.core.convert.converter.ConverterFactory;\n import org.springframework.core.convert.support.DefaultTypeConverter;\n import org.springframework.expression.EvaluationContext;\n import org.springframework.expression.EvaluationException;\n@@ -31,6 +29,7 @@\n import org.springframework.ui.format.AnnotationFormatterFactory;\n import org.springframework.ui.format.Formatter;\n \n+@SuppressWarnings(\"unchecked\")\n public class Binder<T> {\n \n \tprivate static final String[] EMPTY_STRING_ARRAY = new String[0];\n@@ -224,7 +223,6 @@ private Object parse(String formatted, Formatter formatter) {\n \t\t\t}\n \t\t}\n \n-\t\t@SuppressWarnings(\"unchecked\")\n \t\tprivate Formatter getFormatter() {\n \t\t\tif (formatter != null) {\n \t\t\t\treturn formatter;\n@@ -336,7 +334,6 @@ private Class getParameterClass(Type parameterType, Class converterClass) {\n \t\t\t\t+ \"] on Formatter [\" + converterClass.getName() + \"]\");\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \tstatic class SimpleAnnotationFormatterFactory implements AnnotationFormatterFactory {\n \n \t\tprivate Formatter formatter;",
    "output": "Add surpress warning unchecked"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java\n@@ -82,7 +82,6 @@ public Object postProcessAfterInitialization(final Object bean, String beanName)\n \t\t\treturn bean;\n \t\t}\n \t\tReflectionUtils.doWithMethods(targetClass, new MethodCallback() {\n-\t\t\t@Override\n \t\t\tpublic void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {\n \t\t\t\tScheduled annotation = AnnotationUtils.getAnnotation(method, Scheduled.class);\n \t\t\t\tif (annotation != null) {\n@@ -126,7 +125,6 @@ public void doWith(Method method) throws IllegalArgumentException, IllegalAccess\n \t\treturn bean;\n \t}\n \n-\t@Override\n \tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n \t\tif (scheduler != null) {\n \t\t\tthis.registrar.setScheduler(scheduler);\n@@ -137,7 +135,6 @@ public void onApplicationEvent(ContextRefreshedEvent event) {\n \t\tthis.registrar.afterPropertiesSet();\n \t}\n \n-\t@Override\n \tpublic void destroy() throws Exception {\n \t\tif (this.registrar != null) {\n \t\t\tthis.registrar.destroy();",
    "output": "remove @Override annotations from interface methods"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n@@ -100,7 +100,7 @@ private static class TestBean implements ITestBean {\n \n \t\tprivate Thread thread;\n \n-\t\tprivate CountDownLatch latch;\n+\t\tprivate final CountDownLatch latch = new CountDownLatch(1);\n \n \t\tpublic Thread getThread() {\n \t\t\treturn this.thread;",
    "output": "fix NPE on latch in test"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java\n@@ -45,6 +45,7 @@ public void proxyCreated() {\n \t\tcontext.refresh();\n \t\tObject target = context.getBean(\"target\");\n \t\tassertTrue(AopUtils.isAopProxy(target));\n+\t\tcontext.close();\n \t}\n \n \t@Test\n@@ -58,9 +59,10 @@ public void invokedAsynchronously() {\n \t\tITestBean testBean = (ITestBean) context.getBean(\"target\");\n \t\ttestBean.test();\n \t\tThread mainThread = Thread.currentThread();\n-\t\ttestBean.await(1000);\n+\t\ttestBean.await(3000);\n \t\tThread asyncThread = testBean.getThread();\n \t\tassertNotSame(mainThread, asyncThread);\n+\t\tcontext.close();\n \t}\n \n \t@Test\n@@ -77,9 +79,10 @@ public void threadNamePrefix() {\n \t\tcontext.refresh();\n \t\tITestBean testBean = (ITestBean) context.getBean(\"target\");\n \t\ttestBean.test();\n-\t\ttestBean.await(1000);\n+\t\ttestBean.await(3000);\n \t\tThread asyncThread = testBean.getThread();\n \t\tassertTrue(asyncThread.getName().startsWith(\"testExecutor\"));\n+\t\tcontext.close();\n \t}\n \n ",
    "output": "closing context at end of test methods"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n--- a/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n@@ -1,20 +1,4 @@\n \n-/*\n- * Copyright 2002-2009 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n /**\n  *\n  * Package providing integration of <a href=\"http://java.sun.com/webservices/jaxb/\">JAXB</a> with Springs O/X Mapping",
    "output": "JAXB2 is using package-info.java now as well"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n--- a/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/package-info.java\n@@ -1,9 +0,0 @@\n-\n-/**\n- *\n- * Package providing integration of <a href=\"http://java.sun.com/webservices/jaxb/\">JAXB</a> with Springs O/X Mapping\n- * support\n- *\n- */\n-package org.springframework.oxm.jaxb;\n-",
    "output": "Fix build breakage by removing oxm.jaxb package-info.java and replacing it with the old package.html. The problem was that the new package-info.java was ending up overriding a generated package-info.java that contains important @XmlSource annotations"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -189,7 +189,7 @@ public Annotation[] getAnnotations() {\n \t\t\t}\n \t\t\treturn cachedFieldAnnotations;\n \t\t} else if (methodParameter != null) {\n-\t\t\treturn methodParameter.getParameterAnnotations();\n+\t\t\treturn methodParameter.getMethod().getAnnotations();\n \t\t} else {\n \t\t\treturn null;\n \t\t}",
    "output": "modify so that when the descriptor represents a method parameter, we retrieve the annotations from the method and not the method parameter (seems to make more sense - certainly in the binding case)"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n--- a/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java\n@@ -41,7 +41,7 @@ public class Binder<T> {\n \t\n \tprivate boolean optimisticBinding = true;\n \n-\tprivate static Formatter<?> defaultFormatter = new Formatter<?>() {\n+\tprivate static Formatter defaultFormatter = new Formatter() {\n \t\t\n \t\tpublic Class<?> getFormattedObjectType() {\n \t\t\treturn String.class;",
    "output": "fix issue that did not compile with sun compiler"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/package-info.java\n@@ -0,0 +1,10 @@\n+\n+/**\n+ * \n+ * Annotation support for the Application Context, including JSR-250 \"common\"\n+ * annotations, component-scanning, and Java-based metadata for creating\n+ * Spring-managed objects.\n+ * \n+ */\n+package org.springframework.context.annotation;\n+\n\ndiff --git a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/package-info.java\n@@ -0,0 +1,8 @@\n+\n+/**\n+ * \n+ * Support classes for reading annotation and class-level metadata.\n+ * \n+ */\n+package org.springframework.core.type.classreading;\n+",
    "output": "Add package declarations and comments to package-info.java files where they had been missing"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java\n@@ -88,8 +88,12 @@ public TypedValue getValueInternal(ExpressionState state) throws EvaluationExcep\n \t\t\t}\n \t\t\treturn new TypedValue(result,op.getTypeDescriptor());\n \t\t} else {\n-\t\t\tif (operand==null && nullSafe) {\n-\t\t\t\treturn TypedValue.NULL_TYPED_VALUE;\n+\t\t\tif (operand==null) {\n+\t\t\t\tif (nullSafe) {\n+\t\t\t\t\treturn TypedValue.NULL_TYPED_VALUE;\n+\t\t\t\t} else {\t\t\t\t\t\n+\t\t\t\t\tthrow new SpelEvaluationException(getStartPosition(),SpelMessages.PROJECTION_NOT_SUPPORTED_ON_TYPE, \"null\");\n+\t\t\t\t}\n \t\t\t} else {\n \t\t\t\tthrow new SpelEvaluationException(getStartPosition(),SpelMessages.PROJECTION_NOT_SUPPORTED_ON_TYPE, operand.getClass().getName());\n \t\t\t}",
    "output": "findbugs issue addressed"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java\n@@ -144,7 +144,7 @@ private class FinalConfigurationProblem extends Problem {\n \n \t\tpublic FinalConfigurationProblem() {\n \t\t\tsuper(String.format(\"@Configuration class '%s' may not be final. Remove the final modifier to continue.\",\n-\t\t\t\t\tgetSimpleName()), new Location(getResource(), ConfigurationClass.this));\n+\t\t\t\t\tgetSimpleName()), new Location(getResource(), getMetadata()));\n \t\t}\n \t}\n \n@@ -155,7 +155,7 @@ private class OverloadedMethodProblem extends Problem {\n \t\tpublic OverloadedMethodProblem(String methodName, int count) {\n \t\t\tsuper(String.format(\"@Configuration class '%s' has %s overloaded factory methods of name '%s'. \" +\n \t\t\t\t\t\"Only one factory method of the same name allowed.\",\n-\t\t\t\t\tgetSimpleName(), count, methodName), new Location(getResource(), ConfigurationClass.this));\n+\t\t\t\t\tgetSimpleName(), count, methodName), new Location(getResource(), getMetadata()));\n \t\t}\n \t}\n ",
    "output": "use the annotation meta data in problem reporting"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -699,6 +699,13 @@ public ModelAndView getModelAndView(Method handlerMethod,\n \t\t\t\tExtendedModelMap implicitModel,\n \t\t\t\tServletWebRequest webRequest) {\n \n+\t\t\tif (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {\n+\t\t\t\tResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);\n+\t\t\t\tHttpServletResponse response = webRequest.getResponse();\n+\t\t\t\tresponse.setStatus(responseStatus.value().value());\n+\t\t\t\tresponseArgumentUsed = true;\n+\t\t\t}\n+\n \t\t\t// Invoke custom resolvers if present...\n \t\t\tif (customModelAndViewResolvers != null) {\n \t\t\t\tfor (ModelAndViewResolver mavResolver : customModelAndViewResolvers) {\n@@ -709,12 +716,6 @@ public ModelAndView getModelAndView(Method handlerMethod,\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {\n-\t\t\t\tResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);\n-\t\t\t\tHttpServletResponse response = webRequest.getResponse();\n-\t\t\t\tresponse.setStatus(responseStatus.value().value());\n-\t\t\t\tresponseArgumentUsed = true;\n-\t\t\t}\n \n \t\t\tif (returnValue instanceof ModelAndView) {\n \t\t\t\tModelAndView mav = (ModelAndView) returnValue;",
    "output": "Rearrange logic in ServletHandlerMethodInvoker.getModelAndView"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ConcurrentNamespaceHandler.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ConcurrentNamespaceHandler.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ConcurrentNamespaceHandler.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ConcurrentNamespaceHandler.java\n@@ -19,12 +19,12 @@\n import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n \n /**\n- * <code>NamespaceHandler</code> for the scheduling namespace. \n+ * <code>NamespaceHandler</code> for the 'concurrent' namespace. \n  * \n  * @author Mark Fisher\n  * @since 3.0\n  */\n-public class SchedulingNamespaceHandler extends NamespaceHandlerSupport {\n+public class ConcurrentNamespaceHandler extends NamespaceHandlerSupport {\n \n \tpublic void init() {\n \t\tthis.registerBeanDefinitionParser(\"scheduled-tasks\", new ScheduledTasksBeanDefinitionParser());",
    "output": "the 'scheduling' namespace is now 'concurrent'"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToEnumFactory.java\n@@ -19,7 +19,7 @@ public StringToEnum(Class<T> enumType) {\n \t\t}\n \t\t\n \t\tpublic T convert(String source) throws Exception {\n-\t\t\treturn Enum.valueOf(enumType, source);\n+\t\t\treturn (T) Enum.valueOf(enumType, source);\n \t\t}\n \t}\n ",
    "output": "add additional cast for javac"
  },
  {
    "input": "diff --git a/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n--- a/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n+++ b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java\n@@ -113,6 +113,7 @@ public class TransactionalTestExecutionListener extends AbstractTestExecutionLis\n \t * @see org.springframework.transaction.annotation.Transactional\n \t * @see org.springframework.test.annotation.NotTransactional\n \t */\n+\t@SuppressWarnings(\"serial\")\n \t@Override\n \tpublic void beforeTestMethod(TestContext testContext) throws Exception {\n \t\tfinal Method testMethod = testContext.getTestMethod();",
    "output": "Suppressing serialization warnings"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java\n@@ -17,7 +17,6 @@\n package org.springframework.context.expression;\r\n \r\n import org.springframework.beans.factory.config.BeanExpressionContext;\r\n-import org.springframework.core.convert.ConversionContext;\r\n import org.springframework.expression.AccessException;\r\n import org.springframework.expression.EvaluationContext;\r\n import org.springframework.expression.PropertyAccessor;\r\n\ndiff --git a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java\n@@ -17,7 +17,6 @@\n package org.springframework.context.expression;\r\n \r\n import org.springframework.beans.factory.BeanFactory;\r\n-import org.springframework.core.convert.ConversionContext;\r\n import org.springframework.expression.AccessException;\r\n import org.springframework.expression.EvaluationContext;\r\n import org.springframework.expression.PropertyAccessor;\r",
    "output": "remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java\n@@ -30,11 +30,11 @@\n import org.springframework.util.ClassUtils;\n \n /**\n- * {@link EmbeddedDatabaseConfigurer} for Apache Derby database.\n+ * {@link EmbeddedDatabaseConfigurer} for the Apache Derby database.\n  * \n  * @author Oliver Gierke\n  */\n-public class DerbyEmbeddedDatabaseConfigurer implements EmbeddedDatabaseConfigurer {\n+final class DerbyEmbeddedDatabaseConfigurer implements EmbeddedDatabaseConfigurer {\n \n \tprivate static final Log logger = LogFactory.getLog(DerbyEmbeddedDatabaseConfigurer.class);\n \t",
    "output": "make package private"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java\n@@ -5,7 +5,6 @@\n import static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.DERBY;\n import static org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType.H2;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.jdbc.core.JdbcTemplate;\n ",
    "output": "remove unused imports"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTasksBeanDefinitionParser.java\n@@ -17,6 +17,7 @@\n package org.springframework.scheduling.config;\n \n import org.springframework.beans.factory.config.RuntimeBeanReference;\n+import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.ManagedMap;\n import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n@@ -105,7 +106,9 @@ private String createRunnableBean(String ref, String method, Element taskElement\n \t\tbuilder.addPropertyValue(\"targetMethod\", method);\n \t\t// Extract the source of the current task\n \t\tbuilder.getRawBeanDefinition().setSource(parserContext.extractSource(taskElement));\n-\t\treturn parserContext.getReaderContext().registerWithGeneratedName(builder.getBeanDefinition());\n+\t\tString generatedName = parserContext.getReaderContext().generateBeanName(builder.getRawBeanDefinition());\n+\t\tparserContext.registerBeanComponent(new BeanComponentDefinition(builder.getBeanDefinition(), generatedName));\n+\t\treturn generatedName;\n \t}\n \n }",
    "output": "minor change to use registerBeanComponent instead of directly registering the BeanDefinition"
  },
  {
    "input": "diff --git a/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java b/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n--- a/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n+++ b/org.springframework.context.support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -383,7 +383,7 @@ protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {\n \t * @see #createConfiguration()\n \t * @see #setPostTemplateLoaders\n \t */\n-\tprotected void postProcessTemplateLoaders(List templateLoaders) {\n+\tprotected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {\n \t}\n \n \t/**",
    "output": "Velocity/FreeMarker/TilesViewResolver only return a view if the target resource exists now"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java\n@@ -85,6 +85,8 @@ public class ConfigurationClassPostProcessor implements BeanFactoryPostProcessor\n \n \tprivate MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory();\n \n+\tprivate boolean setMetadataReaderFactoryCalled = false;\n+\n \n \t/**\n \t * Set the {@link ProblemReporter} to use.\n@@ -96,9 +98,21 @@ public void setProblemReporter(ProblemReporter problemReporter) {\n \t\tthis.problemReporter = problemReporter;\n \t}\n \n+\t/**\n+\t * Set the {@link MetadataReaderFactory} to use.\n+\t * <p>Default is a {@link CachingMetadataReaderFactory} for the specified\n+\t * {@link #setBeanClassLoader bean class loader}.\n+\t */\n+\tpublic void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {\n+\t\tthis.metadataReaderFactory = metadataReaderFactory;\n+\t\tthis.setMetadataReaderFactoryCalled = true;\n+\t}\n+\n \tpublic void setBeanClassLoader(ClassLoader beanClassLoader) {\n \t\tthis.beanClassLoader = beanClassLoader;\n-\t\tthis.metadataReaderFactory = new CachingMetadataReaderFactory(beanClassLoader);\n+\t\tif (!this.setMetadataReaderFactoryCalled) {\n+\t\t\tthis.metadataReaderFactory = new CachingMetadataReaderFactory(beanClassLoader);\n+\t\t}\n \t}\n \n \tpublic int getOrder() {",
    "output": "add setMetadataReaderFactory method"
  },
  {
    "input": "diff --git a/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n--- a/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java\n@@ -57,6 +57,7 @@\n import org.xml.sax.XMLReader;\n import org.xml.sax.ext.LexicalHandler;\n \n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.oxm.MarshallingFailureException;\n import org.springframework.oxm.UncategorizedMappingException;\n import org.springframework.oxm.UnmarshallingFailureException;\n@@ -87,7 +88,7 @@\n  * @see #setConverters\n  * @see #setEncoding\n  */\n-public class XStreamMarshaller extends AbstractMarshaller {\n+public class XStreamMarshaller extends AbstractMarshaller implements InitializingBean {\n \n \t/**\n \t * The default encoding used for stream access: UTF-8.\n@@ -251,6 +252,17 @@ public void setSupportedClasses(Class[] supportedClasses) {\n \t\tthis.supportedClasses = supportedClasses;\n \t}\n \n+\tpublic final void afterPropertiesSet() throws Exception {\n+\t\tcustomizeXStream(getXStream());\n+\t}\n+\n+\t/**\n+\t * Template to allow for customizing of the given {@link XStream}.\n+\t * <p>Default implementation is empty.\n+\t * @param xstream the {@code XStream} instance\n+\t */\n+\tprotected void customizeXStream(XStream xstream) {\n+\t}\n \n \tpublic boolean supports(Class clazz) {\n \t\tif (ObjectUtils.isEmpty(this.supportedClasses)) {",
    "output": "Allow XStreamMarshaller subclasses to customise XStream object"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/event/SmartApplicationListener.java b/org.springframework.context/src/main/java/org/springframework/context/event/SmartApplicationListener.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/event/SmartApplicationListener.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/event/SmartApplicationListener.java\n@@ -27,7 +27,7 @@\n  * @author Juergen Hoeller\r\n  * @since 3.0\r\n  */\r\n-public interface SmartApplicationListener extends ApplicationListener, Ordered {\r\n+public interface SmartApplicationListener extends ApplicationListener<ApplicationEvent>, Ordered {\r\n \r\n \t/**\r\n \t * Determine whether this listener actually supports the given event type.\r",
    "output": "explicitly declared SmartApplicationListener as ApplicationListener<ApplicationEvent>"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java\n--- a/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package org.springframework.scheduling.support;\r\n+package org.springframework.scheduling.config;\r\n \r\n import java.util.LinkedHashSet;\r\n import java.util.Map;\r\n@@ -28,6 +28,7 @@\n import org.springframework.scheduling.TaskScheduler;\r\n import org.springframework.scheduling.Trigger;\r\n import org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;\r\n+import org.springframework.scheduling.support.CronTrigger;\r\n import org.springframework.util.Assert;\r\n \r\n /**\r",
    "output": "move ScheduledTaskRegistrar to new config package (where the scheduling namespace will live as well)"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java\n@@ -948,7 +948,7 @@ public static Class[] getAllInterfacesForClass(Class clazz, ClassLoader classLoa\n \t\twhile (clazz != null) {\n \t\t\tClass[] ifcs = clazz.getInterfaces();\n \t\t\tfor (Class ifc : ifcs) {\n-\t\t\t\tif (!interfaces.contains(ifc) && Modifier.isPublic(ifc.getModifiers()) &&\n+\t\t\t\tif (!interfaces.contains(ifc) &&\n \t\t\t\t\t\t(classLoader == null || isVisible(ifc, classLoader))) {\n \t\t\t\t\tinterfaces.add(ifc);\n \t\t\t\t}",
    "output": "revert non-public proxy interface change"
  },
  {
    "input": "diff --git a/org.springframework.web.portlet/src/test/java/org/springframework/mock/web/MockServletContext.java b/org.springframework.web.portlet/src/test/java/org/springframework/mock/web/MockServletContext.java\n--- a/org.springframework.web.portlet/src/test/java/org/springframework/mock/web/MockServletContext.java\n+++ b/org.springframework.web.portlet/src/test/java/org/springframework/mock/web/MockServletContext.java\n@@ -245,10 +245,7 @@ public InputStream getResourceAsStream(String path) {\n \t}\n \n \tpublic RequestDispatcher getRequestDispatcher(String path) {\n-\t\tif (!path.startsWith(\"/\")) {\n-\t\t\tthrow new IllegalArgumentException(\"RequestDispatcher path at ServletContext level must start with '/'\");\n-\t\t}\n-\t\treturn new MockRequestDispatcher(path);\n+\t\treturn null;\n \t}\n \n \tpublic RequestDispatcher getNamedDispatcher(String path) {",
    "output": "minimized local MockServletContext dependencies"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java\n--- a/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java\n+++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -110,7 +110,7 @@ public static Class getTargetClass(Object candidate) {\n \t\tif (candidate instanceof TargetClassAware) {\n \t\t\treturn ((TargetClassAware) candidate).getTargetClass();\n \t\t}\n-\t\tif (isCglibProxyClass(candidate.getClass())) {\n+\t\tif (isCglibProxy(candidate)) {\n \t\t\treturn candidate.getClass().getSuperclass();\n \t\t}\n \t\treturn candidate.getClass();",
    "output": "revised target class check for non-Spring CGLIB proxy variants"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java\n@@ -79,7 +79,7 @@ private void doTestAnnotationInfo(AnnotationMetadata metadata) {\n \t\tassertEquals(\"myScope\", scopeAttrs.get(\"value\"));\n \t\tMap<String, Object> specialAttrs = metadata.getAnnotationAttributes(SpecialAttr.class.getName());\n \t\tassertEquals(2, specialAttrs.size());\n-\t\tassertEquals(String.class, specialAttrs.get(\"clazz\"));\n+\t\tassertEquals(String.class.getName(), specialAttrs.get(\"clazz\"));\n \t\tassertEquals(Thread.State.NEW, specialAttrs.get(\"state\"));\n \t}\n \t",
    "output": "upgrade AnnotationMetadata tests for change in Class exposure"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java b/org.springframework.context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java\n@@ -17,17 +17,16 @@\n package org.springframework.scripting.groovy;\n \n import static org.junit.Assert.*;\n+import groovy.lang.DelegatingMetaClass;\n+import groovy.lang.GroovyObject;\n \n import java.io.FileNotFoundException;\n import java.util.Arrays;\n import java.util.Map;\n \n-import groovy.lang.DelegatingMetaClass;\n-import groovy.lang.GroovyObject;\n-import junit.framework.TestCase;\n import org.easymock.MockControl;\n+import org.junit.Ignore;\n import org.junit.Test;\n-\n import org.springframework.aop.support.AopUtils;\n import org.springframework.aop.target.dynamic.Refreshable;\n import org.springframework.beans.TestBean;\n@@ -318,6 +317,7 @@ public void testGetScriptedObjectDoesChokeOnNullScriptSourceBeingPassedIn() thro\n \t\t}\n \t}\n \n+\t@Ignore // see http://build.springframework.org/browse/SPR-TRUNKQUICK-908\n \t@Test\n \tpublic void testResourceScriptFromTag() throws Exception {\n \t\tClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(\"groovy-with-xsd.xml\", getClass());",
    "output": "Temporarily ignoring GroovyScriptFactoryTests#testResourceScriptFromTag in order to allow more important fixes to roll out"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassAnnotation.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassAnnotation.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassAnnotation.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassAnnotation.java\n@@ -35,7 +35,7 @@\n  * @see ConfigurationClassAnnotationVisitor\n  * @see ConfigurationClassReaderUtils#createMutableAnnotation\n  */\n-interface ConfigurationClassAnnotation extends Annotation {\n+public interface ConfigurationClassAnnotation extends Annotation {\n \n \tvoid setAttributeValue(String attribName, Object attribValue);\n ",
    "output": "(temporarily) increasing visibility of the ConfigurationClassAnnotation interface in an attempt to resolve the issue encountered at http://is.gd/tCud"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java\n@@ -304,15 +304,23 @@ public final MessageSource getMessageSource() {\n \t}\n \n \t/**\n-\t * Return the current locale.\n+\t * Return the model Map that this RequestContext encapsulates, if any.\n+\t * @return the populated model Map, or <code>null</code> if none available\n+\t */\n+\tpublic final Map<String, Object> getModel() {\n+\t\treturn this.model;\n+\t}\n+\n+\t/**\n+\t * Return the current Locale (never <code>null</code>).\n \t */\n \tpublic final Locale getLocale() {\n \t\treturn this.locale;\n \t}\n \n \t/**\n \t * Return the current theme (never <code>null</code>).\n-\t * Resolved lazily for more efficiency when theme support is not used.\n+\t * <p>Resolved lazily for more efficiency when theme support is not being used.\n \t */\n \tpublic final Theme getTheme() {\n \t\tif (this.theme == null) {",
    "output": "exposed public getModel accessor"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java\n@@ -326,21 +326,21 @@ protected void registerHandler(String urlPath, Object handler) throws BeansExcep\n \t\t}\n \t\telse {\n \t\t\tif (urlPath.equals(\"/\")) {\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Root mapping to handler [\" + resolvedHandler + \"]\");\n+\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\tlogger.info(\"Root mapping to handler [\" + resolvedHandler + \"]\");\n \t\t\t\t}\n \t\t\t\tsetRootHandler(resolvedHandler);\n \t\t\t}\n \t\t\telse if (urlPath.equals(\"/*\")) {\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Default mapping to handler [\" + resolvedHandler + \"]\");\n+\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\tlogger.info(\"Default mapping to handler [\" + resolvedHandler + \"]\");\n \t\t\t\t}\n \t\t\t\tsetDefaultHandler(resolvedHandler);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthis.handlerMap.put(urlPath, resolvedHandler);\n-\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\tlogger.debug(\"Mapped URL path [\" + urlPath + \"] onto handler [\" + resolvedHandler + \"]\");\n+\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\tlogger.info(\"Mapped URL path [\" + urlPath + \"] onto handler [\" + resolvedHandler + \"]\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Increased debug level of mapping info"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -424,7 +424,7 @@ protected JRExporterParameter convertToExporterParameter(String fqFieldName) {\n \t\tString fieldName = fqFieldName.substring(index + 1);\n \n \t\ttry {\n-\t\t\tClass cls = ClassUtils.forName(className);\n+\t\t\tClass cls = ClassUtils.forName(className, getApplicationContext().getClassLoader());\n \t\t\tField field = cls.getField(fieldName);\n \n \t\t\tif (JRExporterParameter.class.isAssignableFrom(field.getType())) {",
    "output": "always use application ClassLoader"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java\n@@ -137,7 +137,8 @@ public String getName() {\n \t * Is this type an array type?\n \t */\n \tpublic boolean isArray() {\n-\t\treturn getType().isArray();\n+\t\tClass<?> type = getType();\n+\t\treturn (type==null?false:type.isArray());\n \t}\n \n \t/**\n@@ -280,7 +281,11 @@ public String asString() {\n \t\t\t// TODO should properly handle multi dimensional arrays\n \t\t\tstringValue.append(getArrayComponentType().getName()).append(\"[]\");\n \t\t} else {\n-\t\t\tstringValue.append(getType().getName());\n+\t\t\tClass<?> clazz = getType();\n+\t\t\tif (clazz==null) {\n+\t\t\t\treturn \"null\";\n+\t\t\t}\n+\t\t\tstringValue.append(clazz.getName());\n \t\t\tif (isCollection()) {\n \t\t\t\tClass<?> collectionType = getCollectionElementType();\n \t\t\t\tif (collectionType!=null) {",
    "output": "allow for null"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java\n@@ -154,7 +154,9 @@ public TypedValue operate(Operation op, Object left, Object right) throws Evalua\n \t\t\treturn new TypedValue(returnValue,TypeDescriptor.forObject(returnValue));\r\n \t\t}\r\n \t\telse {\r\n-\t\t\tthrow new SpelException(SpelMessages.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES, op, left, right);\r\n+\t\t\tString leftType = (left==null?\"null\":left.getClass().getName());\r\n+\t\t\tString rightType = (right==null?\"null\":right.getClass().getName());\r\n+\t\t\tthrow new SpelException(SpelMessages.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES, op, leftType, rightType);\r\n \t\t}\r\n \t}\r\n \r",
    "output": "Correct exception message inserts"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java\n@@ -36,7 +36,7 @@\n  *\n  * @author Chris Beams\n  */\n-public class ConfigurationPostProcessorTests {\n+public class ConfigurationClassPostProcessorTests {\n \n \tprivate static final String ORIG_CGLIB_TEST_CLASS = ConfigurationClassPostProcessor.CGLIB_TEST_CLASS;\n \tprivate static final String BOGUS_CGLIB_TEST_CLASS = \"a.bogus.class\";",
    "output": "Rename ConfigurationPostProcessorTests -> ConfigurationClassPostProcessorTests"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java\n@@ -37,6 +37,7 @@\n  *\n  * @author Juergen Hoeller\n  * @author Rob Harrop\n+ * @author Andy Clement\n  * @since 2.0\n  * @see GenericCollectionTypeResolver\n  */\n@@ -176,9 +177,13 @@ void setParameterType(Class parameterType) {\n \t */\n \tpublic Class getParameterType() {\n \t\tif (this.parameterType == null) {\n-\t\t\tthis.parameterType = (this.method != null ?\n+\t\t\tif (parameterIndex < 0) {\n+\t\t\t\tthis.parameterType = (this.method !=null ? this.method.getReturnType():null);\n+\t\t\t} else {\n+\t\t\t\tthis.parameterType = (this.method != null ?\n \t\t\t\t\tthis.method.getParameterTypes()[this.parameterIndex] :\n \t\t\t\t\tthis.constructor.getParameterTypes()[this.parameterIndex]);\n+\t\t\t}\n \t\t}\n \t\treturn this.parameterType;\n \t}",
    "output": "fix support for -1 parameterIndex to access the method return type"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java\n@@ -351,7 +351,14 @@ public void combine() {\n \t\tassertEquals(\"/hotels/*/booking/{booking}\", pathMatcher.combine(\"/hotels/*/booking\", \"{booking}\"));\n \t\tassertEquals(\"/hotel.html\", pathMatcher.combine(\"/*.html\", \"/hotel.html\"));\n \t\ttry {\n-\t\t\tassertEquals(\"/hotel.html\", pathMatcher.combine(\"/*.html\", \"/hotel\"));\n+\t\t\tpathMatcher.combine(\"/*.html\", \"/hotel\");\n+\t\t\tfail(\"IllegalArgumentException expected\");\n+\t\t}\n+\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t// expected\n+\t\t}\n+\t\ttry {\n+\t\t\tpathMatcher.combine(\"/*.html\", \"/*.txt\");\n \t\t\tfail(\"IllegalArgumentException expected\");\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {",
    "output": "More tests for combine"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/CollectionToCollection.java\n@@ -18,7 +18,6 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.springframework.core.GenericCollectionTypeResolver;\n import org.springframework.core.convert.ConversionExecutor;\n import org.springframework.core.convert.TypeDescriptor;\n \n@@ -44,7 +43,7 @@ protected Object doExecute(Object source) throws Exception {\n \t\tConversionExecutor elementConverter = getElementConverter();\n \t\tClass elementType;\n \t\tif (elementConverter == null) {\n-\t\t\telementType = GenericCollectionTypeResolver.getCollectionType(targetCollectionType);\n+\t\t\telementType = getTargetType().getElementType();\n \t\t} else {\n \t\t\telementType = null;\n \t\t}",
    "output": "use type descriptor to determine collection element type"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java\n@@ -59,7 +59,6 @@\n import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;\n import org.springframework.beans.factory.config.Scope;\n-import org.springframework.beans.factory.config.DependencyProxyBuilder;\n import org.springframework.core.DecoratingClassLoader;\n import org.springframework.core.NamedThreadLocal;\n import org.springframework.util.Assert;",
    "output": "Fix the build"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java b/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/service/GenericConversionServiceTests.java\n@@ -35,6 +35,9 @@\n import org.springframework.core.convert.converter.StringToEnum;\n import org.springframework.core.convert.converter.StringToInteger;\n \n+import org.junit.Ignore;\n+\n+@Ignore\n public class GenericConversionServiceTests extends TestCase {\n \n \tprivate GenericConversionService service = new GenericConversionService();",
    "output": "Ignoring broken tests"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java\n@@ -118,4 +118,29 @@ public TestBean testBean() {\n \t\t\treturn new TestBean(name);\n \t\t}\n \t}\n+\n+\t@Test\n+\tpublic void testCustomProperties() {\n+\t\tClassPathXmlApplicationContext factory = new ClassPathXmlApplicationContext(\n+\t\t        \"AutowiredConfigurationTests-custom.xml\", AutowiredConfigurationTests.class);\n+\n+\t\tTestBean testBean = factory.getBean(\"testBean\", TestBean.class);\n+\t\tassertThat(testBean.getName(), equalTo(\"localhost\"));\n+\t}\n+\n+\t@Configuration\n+\tstatic class PropertiesConfig {\n+\n+\t\tprivate String hostname;\n+\n+\t\t@Value(\"#{myProps.hostname}\")\n+\t\tpublic void setHostname(String hostname) {\n+\t\t\tthis.hostname = hostname;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic TestBean testBean() {\n+\t\t\treturn new TestBean(hostname);\n+\t\t}\n+\t}\n }",
    "output": "Add test using custom properties file with util:properties and dereferenced with @Value(\"#{...}\")"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n@@ -28,11 +28,6 @@\n import org.springframework.beans.factory.parsing.FailFastProblemReporter;\n import org.springframework.beans.factory.parsing.Location;\n import org.springframework.beans.factory.parsing.ProblemReporter;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.BeanMethod;\n-import org.springframework.context.annotation.ConfigurationClass;\n-import org.springframework.context.annotation.ModelClass;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.util.ClassUtils;\n \n@@ -63,8 +58,8 @@ public void testWellFormedMethod() {\n \t\tassertThat(beanMethod.getRequiredAnnotation(Bean.class), sameInstance(beanAnno));\n \t\ttry {\n \t\t\tbeanMethod.getRequiredAnnotation(Override.class);\n-\t\t\tfail(\"expected IllegalArgumentException ex\");\n-\t\t} catch (IllegalArgumentException ex) { /* expected */ }\n+\t\t\tfail(\"expected IllegalStateException ex\");\n+\t\t} catch (IllegalStateException ex) { /* expected */ }\n \n \t\t// must call setDeclaringClass() before calling getLocation()\n \t\ttry {",
    "output": "Upgrade BeanMethodTests to reflect change from IllegalArgumentException -> IllegalStateException"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java\n@@ -471,6 +471,14 @@ public void testGenericallyTypedSetOfIntegerBean() throws Exception {\n \t\tAssert.assertEquals(new Integer(30), gb.getGenericListProperty().get(1).iterator().next());\n \t}\n \n+\t@Test\n+\tpublic void testSettingGenericPropertyWithReadOnlyInterface() {\n+\t\tBar bar = new Bar();\n+\t\tBeanWrapper bw = new BeanWrapperImpl(bar);\n+\t\tbw.setPropertyValue(\"version\", \"10\");\n+\t\tAssert.assertEquals(10.0, bar.getVersion());\n+\t}\n+\n \n \tprivate static abstract class BaseGenericCollectionBean {\n \n@@ -565,4 +573,25 @@ private static class DerivedMap extends HashMap<Integer, List<Long>> {\n \n \t}\n \n+\n+\tpublic interface Foo {\n+\n+\t\tNumber getVersion();\n+\t}\n+\n+\n+\tpublic class Bar implements Foo {\n+\n+\t\tprivate double version;\n+\n+\t\tpublic Double getVersion() {\n+\t\t\treturn this.version;\n+\t\t}\n+\n+\t\tpublic void setVersion(Double theDouble) {\n+\t\t\tthis.version = theDouble;\n+\t\t}\n+\t}\n+\n+\n }",
    "output": "add further generic property resolution test"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1055,8 +1055,11 @@ protected ModelAndView processHandlerException(\n \n \t\t// Check registerer HandlerExceptionResolvers...\n \t\tModelAndView exMv = null;\n-\t\tfor (Iterator<HandlerExceptionResolver> it = this.handlerExceptionResolvers.iterator(); exMv == null && it.hasNext();) {\n-\t\t\texMv = it.next().resolveException(request, response, handler, ex);\n+\t\tfor (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n+\t\t\texMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n+\t\t\tif (exMv != null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \t\tif (exMv != null) {\n \t\t\tif (exMv.isEmpty()) {",
    "output": "Make looping over handlerExceptionResolvers more explicit"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SetValueTests.java\n@@ -19,6 +19,7 @@\n import org.springframework.expression.EvaluationException;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParseException;\n+import org.springframework.expression.spel.support.StandardEvaluationContext;\n \n /**\n  * Tests set value expressions.\n@@ -70,9 +71,10 @@ protected void setValue(String expression, Object value) {\n \t\t\tif (DEBUG) {\n \t\t\t\tSpelUtilities.printAbstractSyntaxTree(System.out, e);\n \t\t\t}\n-\t\t\tassertTrue(\"Expression is not writeable but should be\", e.isWritable(eContext));\n-\t\t\te.setValue(eContext, value);\n-\t\t\tassertEquals(\"Retrieved value was not equal to set value\", value, e.getValue(eContext));\n+\t\t\tStandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext();\n+\t\t\tassertTrue(\"Expression is not writeable but should be\", e.isWritable(lContext));\n+\t\t\te.setValue(lContext, value);\n+\t\t\tassertEquals(\"Retrieved value was not equal to set value\", value, e.getValue(lContext));\n \t\t} catch (EvaluationException ee) {\n \t\t\tee.printStackTrace();\n \t\t\tfail(\"Unexpected Exception: \" + ee.getMessage());",
    "output": "Fix SPEL tests when using maven. With the maven test runner expression.spel.SetValueTests is run before expression.spel.EvaluationTests. The order is reversed in eclipse/spring-build. Static variables are modifed in SetValueTests that cause EvaluationTests to fail if it is run first. Make a simple fix so SetValueTests uses a local evaluation context variable instead of a static variable"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java\n@@ -1059,6 +1059,9 @@ protected ModelAndView processHandlerException(\n \t\t\texMv = it.next().resolveException(request, response, handler, ex);\n \t\t}\n \t\tif (exMv != null) {\n+\t\t\tif (exMv.isEmpty()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\n \t\t\t}",
    "output": "DispatcherServlet.processHandlerException checks whether the ModelAndView is empty before rendering it"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n@@ -143,6 +143,10 @@ private void enhanceConfigurationClasses() {\n \n \t\tBeanDefinitionRegistry configBeanDefs = getConfigurationBeanDefinitions(true);\n \n+\t\tif (configBeanDefs.getBeanDefinitionCount() == 0)\n+\t\t\t// nothing to enhance -> return immediately\n+\t\t\treturn;\n+\n \t\tassertCglibIsPresent(configBeanDefs);\n \n \t\tConfigurationEnhancer enhancer = new ConfigurationEnhancer(beanFactory);",
    "output": "don't assert that CGLIB must be present unless there is at least one @Configuration class found"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/support/ConfigurationClassPostProcessor.java\n@@ -170,9 +170,8 @@ private void assertCglibIsPresent(BeanDefinitionRegistry configBeanDefs) {\n \t\t\tClass.forName(CGLIB_TEST_CLASS);\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tthrow new IllegalStateException(\"CGLIB is required to process @Configuration classes. \" +\n-\t\t\t\t\t\"Either add CGLIB v2.2.3 to the classpath or remove the following \" +\n-\t\t\t\t\t\"@Configuration bean definitions: [\"\n-\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(configBeanDefs.getBeanDefinitionNames()) + \"]\");\n+\t\t\t\t\t\"Either add CGLIB to the classpath or remove the following @Configuration bean definitions: [\" +\n+\t\t\t\t\tStringUtils.arrayToCommaDelimitedString(configBeanDefs.getBeanDefinitionNames()) + \"]\");\n \t\t}\n \t}\n ",
    "output": "fix tests in .test package that were failing due to missing CGLIB dependency"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -141,8 +141,11 @@ static CachedIntrospectionResults forClass(Class beanClass) throws BeansExceptio\n \t\tif (results == null) {\n \t\t\t// can throw BeansException\n \t\t\tresults = new CachedIntrospectionResults(beanClass);\n+\t\t\t// On JDK 1.5 and higher, it is almost always safe to cache the bean class...\n+\t\t\t// The sole exception is a custom BeanInfo class being provided in a non-safe ClassLoader.\n \t\t\tif (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) ||\n-\t\t\t\t\tisClassLoaderAccepted(beanClass.getClassLoader())) {\n+\t\t\t\t\tisClassLoaderAccepted(beanClass.getClassLoader()) ||\n+\t\t\t\t\t!ClassUtils.isPresent(beanClass.getName() + \"BeanInfo\", beanClass.getClassLoader())) {\n \t\t\t\tclassCache.put(beanClass, results);\n \t\t\t}\n \t\t\telse {",
    "output": "CachedIntrospectionResults always caches bean classes except in case of custom BeanInfo"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java\n--- a/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java\n+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java\n@@ -88,9 +88,10 @@ public class InterfaceBasedMBeanInfoAssembler extends AbstractConfigurableMBeanI\n \t */\n \tpublic void setManagedInterfaces(Class[] managedInterfaces) {\n \t\tif (managedInterfaces != null) {\n-\t\t\tfor (Class ifc : managedInterfaces) {\n+\t\t\tfor (Class<?> ifc : managedInterfaces) {\n \t\t\t\tif (!ifc.isInterface()) {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Management interface [\" + ifc.getName() + \"] is no interface\");\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"Management interface [\" + ifc.getName() + \"] is not an interface\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Improve error message: s/is no interface/is not an interface"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java b/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java\n@@ -119,7 +119,7 @@ public static WebApplicationContext getWebApplicationContext(ServletContext sc,\n \t * as used by the WebApplicationContext.\n \t * @param beanFactory the BeanFactory to configure\n \t */\n-\tstatic void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {\n+\tpublic static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {\n \t\tbeanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope());\n \t\tbeanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false));\n \t\tbeanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true));",
    "output": "Make WebApplicationContextUtils:registerWebApplicationScopes public. Changed core's org.springframework.asm OSGi import to proper version numbers"
  },
  {
    "input": "diff --git a/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java\n--- a/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java\n+++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java\n@@ -121,4 +121,14 @@ public void matchDuplicate() throws Exception {\n \t\tMap<String, String> expected = Collections.singletonMap(\"c\", \"cheeseburger\");\n \t\tassertEquals(\"Invalid match\", expected, result);\n \t}\n+\n+\t@Test\n+\tpublic void matchMultipleInOneSegment() throws Exception {\n+\t\ttemplate = new UriTemplate(\"/{foo}-{bar}\");\n+\t\tMap<String, String> result = template.match(\"/12-34\");\n+\t\tMap<String, String> expected = new HashMap<String, String>(2);\n+\t\texpected.put(\"foo\", \"12\");\n+\t\texpected.put(\"bar\", \"34\");\n+\t\tassertEquals(\"Invalid match\", expected, result);\n+\t}\n }\n\\ No newline at end of file",
    "output": "Add test for multiple template variables in one path segment"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConstructorArgumentValues.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,8 +17,8 @@\n package org.springframework.beans.factory.config;\n \n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -42,7 +42,7 @@\n  */\n public class ConstructorArgumentValues {\n \n-\tprivate final Map<Integer, ValueHolder> indexedArgumentValues = new HashMap<Integer, ValueHolder>();\n+\tprivate final Map<Integer, ValueHolder> indexedArgumentValues = new LinkedHashMap<Integer, ValueHolder>();\n \n \tprivate final List<ValueHolder> genericArgumentValues = new LinkedList<ValueHolder>();\n ",
    "output": "ConstructorArgumentValues exposed indexed arguments in the order of definition"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java\n@@ -17,18 +17,19 @@\n \n /**\n  * Converts a String to a Enum using {@link Enum#valueOf(Class, String)}.\n- * \n+ *\n  * @author Keith Donald\n+ * @since 3.0\n  */\n @SuppressWarnings(\"unchecked\")\n public class StringToEnum implements SuperTwoWayConverter<String, Enum> {\n \n \tpublic <RT extends Enum> RT convert(String source, Class<RT> targetClass) throws Exception {\n-\t\treturn Enum.valueOf(targetClass, source);\n+\t\treturn (RT) Enum.valueOf(targetClass, source);\n \t}\n \n \tpublic <RS extends String> RS convertBack(Enum target, Class<RS> sourceClass) throws Exception {\n \t\treturn (RS) target.name();\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "add superfluous cast as a workaround for the Sun Javac compiler"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java\n--- a/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java\n+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java\n@@ -16,13 +16,11 @@\n \n package org.springframework.jdbc.object;\n \n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.util.Map;\n \n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.util.Assert;\n-import org.springframework.dao.InvalidDataAccessApiUsageException;\n+import org.springframework.dao.InvalidDataAccessResourceUsageException;\n \n public class GenericSqlQuery extends SqlQuery {\n \n@@ -49,10 +47,10 @@ protected RowMapper newRowMapper(Object[] parameters, Map context) {\n \t\t\treturn (RowMapper) rowMapperClass.newInstance();\n \t\t}\n \t\tcatch (InstantiationException e) {\n-\t\t\tthrow new InvalidDataAccessApiUsageException(\"Unable to instantiate RowMapper\", e);\n+\t\t\tthrow new InvalidDataAccessResourceUsageException(\"Unable to instantiate RowMapper\", e);\n \t\t}\n \t\tcatch (IllegalAccessException e) {\n-\t\t\tthrow new InvalidDataAccessApiUsageException(\"Unable to instantiate RowMapper\", e);\n+\t\t\tthrow new InvalidDataAccessResourceUsageException(\"Unable to instantiate RowMapper\", e);\n \t\t}\n \t}\n }",
    "output": "change exception class thrown for problems configuring GenericSqlQuery class"
  },
  {
    "input": "diff --git a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/GenericStoredProcedureTests.java b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/GenericStoredProcedureTests.java\n--- a/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/GenericStoredProcedureTests.java\n+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/GenericStoredProcedureTests.java\n@@ -55,7 +55,7 @@ protected void setUp() throws Exception {\n \t\tsuper.setUp();\n \t\tmockCallable = createMock(CallableStatement.class);\n \t\tbf = new XmlBeanFactory(\n-\t\t\t\tnew ClassPathResource(\"org/springframework/jdbc/support/GenericStoredProcedureTests-context.xml\"));\n+\t\t\t\tnew ClassPathResource(\"org/springframework/jdbc/object/GenericStoredProcedureTests-context.xml\"));\n \t\tTestDataSourceWrapper testDataSource = (TestDataSourceWrapper) bf.getBean(\"dataSource\");\n \t\ttestDataSource.setTarget(mockDataSource);\n \t}",
    "output": "move the application context file to correct directory"
  },
  {
    "input": "diff --git a/org.springframework.config.java/src/test/java/org/springframework/config/java/support/ConfigurationPostProcessorTests.java b/org.springframework.config.java/src/test/java/org/springframework/config/java/support/ConfigurationPostProcessorTests.java\n--- a/org.springframework.config.java/src/test/java/org/springframework/config/java/support/ConfigurationPostProcessorTests.java\n+++ b/org.springframework.config.java/src/test/java/org/springframework/config/java/support/ConfigurationPostProcessorTests.java\n@@ -47,9 +47,7 @@ public class ConfigurationPostProcessorTests {\n \t */\n \t@Test\n \tpublic void testFailFastIfCglibNotPresent() {\n-\t\t@Configuration class Config {\n-\t\t\tpublic @Bean String name() { return \"foo\"; }\n-\t\t}\n+\t\t@Configuration class Config { }\n \n \t\tDefaultListableBeanFactory factory = new DefaultListableBeanFactory();\n ",
    "output": "Eliminated all compilation warnings"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/Scope.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/Scope.java\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/Scope.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Scope.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -31,9 +31,10 @@\n  * '<code>singleton</code>', '<code>prototype</code>', and so forth.\n  * \n  * @author Mark Fisher\n+ * @author Chris Beams\n  * @since 2.5\n  */\n-@Target(ElementType.TYPE)\n+@Target({ElementType.TYPE, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface Scope {",
    "output": "@Scope is now allowed on methods (for use in conjunction with @Bean)"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java b/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/comparator/ComparableComparator.java\n@@ -18,8 +18,6 @@\n \n import java.util.Comparator;\n \n-import org.springframework.util.Assert;\n-\n /**\n  * Comparator that adapts Comparables to the Comparator interface.\n  * Mainly for internal use in other Comparators, when supposed",
    "output": "remove aopalliance errant dependency; removed unused import"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToCharacter.java b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToCharacter.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToCharacter.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToCharacter.java\n@@ -23,7 +23,7 @@\n public class StringToCharacter implements Converter<String, Character> {\n \n \tpublic Character convert(String source) throws Exception {\n-\t\tif (source.length() > 1) {\n+\t\tif (source.length() != 1) {\n \t\t\tthrow new IllegalArgumentException(\"To be a Character the String '\" + source + \"' must have a length of 1\");\n \t\t}\n \t\treturn new Character(source.charAt(0));",
    "output": "assert of length 1"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -35,6 +35,7 @@\n import org.springframework.http.converter.FormHttpMessageConverter;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.http.converter.StringHttpMessageConverter;\n+import org.springframework.http.converter.xml.SourceHttpMessageConverter;\n import org.springframework.util.Assert;\n import org.springframework.web.util.UriTemplate;\n \n@@ -93,7 +94,7 @@ public class RestTemplate extends HttpAccessor implements RestOperations {\n \n \tprivate HttpMessageConverter<?>[] messageConverters =\n \t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),\n-\t\t\t\t\tnew FormHttpMessageConverter()};\n+\t\t\t\t\tnew FormHttpMessageConverter(), new SourceHttpMessageConverter()};\n \n \tprivate ResponseErrorHandler errorHandler = new DefaultResponseErrorHandler();\n ",
    "output": "Add SourceHttpMessageConverter as a default"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n--- a/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n+++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java\n@@ -20,9 +20,9 @@\n import java.io.InputStream;\n import java.net.HttpURLConnection;\n \n-import org.springframework.util.StringUtils;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n+import org.springframework.util.StringUtils;\n \n /**\n  * {@link ClientHttpResponse} implementation that uses standard J2SE facilities.\n@@ -38,7 +38,7 @@ final class SimpleClientHttpResponse implements ClientHttpResponse {\n \tprivate HttpHeaders headers;\n \n \n-\tpublic SimpleClientHttpResponse(HttpURLConnection connection) {\n+\tSimpleClientHttpResponse(HttpURLConnection connection) {\n \t\tthis.connection = connection;\n \t}\n ",
    "output": "RestTemplate does not do HTTP GET if it should"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java\n@@ -32,6 +32,7 @@\n import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.http.client.support.HttpAccessor;\n import org.springframework.http.converter.ByteArrayHttpMessageConverter;\n+import org.springframework.http.converter.FormHttpMessageConverter;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.http.converter.StringHttpMessageConverter;\n import org.springframework.util.Assert;\n@@ -91,7 +92,8 @@ public class RestTemplate extends HttpAccessor implements RestOperations {\n \tprivate final ResponseExtractor<HttpHeaders> headersExtractor = new HeadersExtractor();\n \n \tprivate HttpMessageConverter<?>[] messageConverters =\n-\t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter()};\n+\t\t\tnew HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),\n+\t\t\t\t\tnew FormHttpMessageConverter()};\n \n \tprivate ResponseErrorHandler errorHandler = new DefaultResponseErrorHandler();\n ",
    "output": "Add Form converter as a default"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java\n@@ -167,13 +167,11 @@ public void handleSpecific(Writer writer) throws IOException {\n \t\t\twriter.write(\"specific\");\n \t\t}\n \n-/*\n \t\t@RequestMapping(\"/hotels/{hotel}\")\n \t\tpublic void handleVars(@PathVariable(\"hotel\") String hotel, Writer writer) throws IOException {\n \t\t\tassertEquals(\"Invalid path variable value\", \"42\", hotel);\n \t\t\twriter.write(\"variables\");\n \t\t}\n-*/\n \n \t\t@RequestMapping(\"/hotels/*\")\n \t\tpublic void handleWildCard(Writer writer) throws IOException {",
    "output": "Uncommented test case"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java\n--- a/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java\n+++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -80,6 +80,8 @@ public PropertyValue(PropertyValue original) {\n \t\tthis.name = original.getName();\n \t\tthis.value = original.getValue();\n \t\tthis.source = original.getSource();\n+\t\tthis.converted = original.converted;\n+\t\tthis.convertedValue = original.convertedValue;\n \t\tthis.conversionNecessary = original.conversionNecessary;\n \t\tthis.resolvedTokens = original.resolvedTokens;\n \t\tthis.resolvedDescriptor = original.resolvedDescriptor;",
    "output": "pre-converted property values are preserved more eagerly for re-created beans"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/io/UrlResource.java b/org.springframework.core/src/main/java/org/springframework/core/io/UrlResource.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/io/UrlResource.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/io/UrlResource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.HttpURLConnection;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URL;\n@@ -120,7 +121,16 @@ private URL getCleanedUrl(URL originalUrl, String originalPath) {\n \tpublic InputStream getInputStream() throws IOException {\n \t\tURLConnection con = this.url.openConnection();\n \t\tcon.setUseCaches(false);\n-\t\treturn con.getInputStream();\n+\t\ttry {\n+\t\t\treturn con.getInputStream();\n+\t\t}\n+\t\tcatch (IOException ex) {\n+\t\t\t// Close the HTTP connection (if applicable).\n+\t\t\tif (con instanceof HttpURLConnection) {\n+\t\t\t\t((HttpURLConnection) con).disconnect();\n+\t\t\t}\n+\t\t\tthrow ex;\n+\t\t}\n \t}\n \n \t/**",
    "output": "UrlResource eagerly closes HTTP connections in case of \"getInputStream\" failure"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java b/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/adapter/MessageListenerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,6 @@\n package org.springframework.jms.listener.adapter;\n \n import java.lang.reflect.InvocationTargetException;\n-\n import javax.jms.Destination;\n import javax.jms.InvalidDestinationException;\n import javax.jms.JMSException;\n@@ -366,11 +365,12 @@ else if (!(delegate instanceof MessageListener)) {\n \t}\n \n \tpublic String getSubscriptionName() {\n-\t\tif (this.delegate instanceof SubscriptionNameProvider) {\n-\t\t\treturn ((SubscriptionNameProvider) this.delegate).getSubscriptionName();\n+\t\tObject delegate = getDelegate();\n+\t\tif (delegate != this && delegate instanceof SubscriptionNameProvider) {\n+\t\t\treturn ((SubscriptionNameProvider) delegate).getSubscriptionName();\n \t\t}\n \t\telse {\n-\t\t\treturn this.delegate.getClass().getName();\n+\t\t\treturn delegate.getClass().getName();\n \t\t}\n \t}\n ",
    "output": "fix MessageListenerAdapter's \"getSubscriptionName\" to work without delegate as well"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java b/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java\n@@ -46,10 +46,10 @@ public abstract class RequestContextHolder  {\n \tprivate static final boolean jsfPresent =\n \t\t\tClassUtils.isPresent(\"javax.faces.context.FacesContext\", RequestContextHolder.class.getClassLoader());\n \n-\tprivate static final ThreadLocal requestAttributesHolder = new NamedThreadLocal(\"Request attributes\");\n+\tprivate static final ThreadLocal<RequestAttributes> requestAttributesHolder = new NamedThreadLocal<RequestAttributes>(\"Request attributes\");\n \n-\tprivate static final ThreadLocal inheritableRequestAttributesHolder =\n-\t\t\tnew NamedInheritableThreadLocal(\"Request context\");\n+\tprivate static final ThreadLocal<RequestAttributes> inheritableRequestAttributesHolder =\n+\t\t\tnew NamedInheritableThreadLocal<RequestAttributes>(\"Request context\");\n \n \n \t/**\n@@ -93,9 +93,9 @@ public static void setRequestAttributes(RequestAttributes attributes, boolean in\n \t * or <code>null</code> if none bound\n \t */\n \tpublic static RequestAttributes getRequestAttributes() {\n-\t\tRequestAttributes attributes = (RequestAttributes) requestAttributesHolder.get();\n+\t\tRequestAttributes attributes = requestAttributesHolder.get();\n \t\tif (attributes == null) {\n-\t\t\tattributes = (RequestAttributes) inheritableRequestAttributesHolder.get();\n+\t\t\tattributes = inheritableRequestAttributesHolder.get();\n \t\t}\n \t\treturn attributes;\n \t}",
    "output": "Make threadlocals generic"
  },
  {
    "input": "diff --git a/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java\n--- a/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java\n+++ b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java\n@@ -62,6 +62,8 @@ public class DbcpDataSourceFactory implements FactoryBean<DataSource>, Disposabl\n \n     private Resource dataLocation;\n \n+    private Resource dropLocation;\n+\n     /**\n      * The object created by this factory.\n      */\n@@ -115,6 +117,14 @@ public void setDataLocation(Resource testDataLocation) {\n         this.dataLocation = testDataLocation;\n     }\n \n+    /**\n+     * Sets the location of the file containing the drop scripts for the database.\n+     * @param testDataLocation the location of the data file\n+     */\n+    public void setDropLocation(Resource testDropLocation) {\n+        this.dropLocation = testDropLocation;\n+    }\n+\n     // implementing FactoryBean\n \n     // this method is called by Spring to expose the DataSource as a bean\n@@ -163,6 +173,14 @@ private BasicDataSource createDataSource() {\n \n     private void populateDataSource() {\n         DatabasePopulator populator = new DatabasePopulator(dataSource);\n+        if (dropLocation != null) {\n+            try {\n+        \t\tpopulator.populate(this.dropLocation);\n+            } \n+            catch (Exception e) {\n+               \t// ignore\n+            }\n+        }\n         populator.populate(this.schemaLocation);\n         populator.populate(this.dataLocation);\n     }",
    "output": "fix broken unit test related to"
  },
  {
    "input": "diff --git a/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java\n--- a/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/SimplePropertyNamespaceHandlerWithExpressionLanguageTests.java\n@@ -18,8 +18,8 @@\n \n import static org.junit.Assert.assertEquals;\n import org.junit.Test;\n-import test.beans.ITestBean;\n \n+import org.springframework.beans.ITestBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n ",
    "output": "Fix usage of wrong TestBean package"
  },
  {
    "input": "diff --git a/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/hibernate/HibernateClinic.java b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/hibernate/HibernateClinic.java\n--- a/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/hibernate/HibernateClinic.java\n+++ b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/hibernate/HibernateClinic.java\n@@ -5,6 +5,7 @@\n import org.hibernate.SessionFactory;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n import org.springframework.samples.petclinic.Clinic;\n import org.springframework.samples.petclinic.Owner;\n import org.springframework.samples.petclinic.Pet;\n@@ -13,7 +14,6 @@\n import org.springframework.samples.petclinic.Visit;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.dao.DataAccessException;\n \n /**\n  * Hibernate implementation of the Clinic interface.\n@@ -35,9 +35,12 @@\n @Transactional\n public class HibernateClinic implements Clinic {\n \n-\t@Autowired\n \tprivate SessionFactory sessionFactory;\n-\n+\t\n+\t@Autowired\n+\tpublic HibernateClinic(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n \n \t@Transactional(readOnly = true)\n \t@SuppressWarnings(\"unchecked\")",
    "output": "HibernateClinic in PetClinic sample should use constructor-injection instead of field injection"
  },
  {
    "input": "diff --git a/org.springframework.core/src/test/java/org/springframework/util/xml/StaxStreamContentHandlerTests.java b/org.springframework.core/src/test/java/org/springframework/util/xml/StaxStreamContentHandlerTests.java\n--- a/org.springframework.core/src/test/java/org/springframework/util/xml/StaxStreamContentHandlerTests.java\n+++ b/org.springframework.core/src/test/java/org/springframework/util/xml/StaxStreamContentHandlerTests.java\n@@ -20,7 +20,7 @@\n import javax.xml.stream.XMLOutputFactory;\n import javax.xml.stream.XMLStreamException;\n \n-public class StaxStreamContentHandlerTest extends AbstractStaxContentHandlerTestCase {\n+public class StaxStreamContentHandlerTests extends AbstractStaxContentHandlerTestCase {\n \n \t@Override\n \tprotected AbstractStaxContentHandler createStaxContentHandler(Writer writer) throws XMLStreamException {",
    "output": "Test -> Tests"
  },
  {
    "input": "diff --git a/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/CallCountingInterceptor.java b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/CallCountingInterceptor.java\n--- a/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/CallCountingInterceptor.java\n+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/CallCountingInterceptor.java\n@@ -0,0 +1,26 @@\n+\n+package org.springframework.aop.aspectj;\n+\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+/**\n+ * @author robh\n+ */\n+class CallCountingInterceptor implements MethodInterceptor {\n+\n+\tprivate int count;\n+\n+\tpublic Object invoke(MethodInvocation methodInvocation) throws Throwable {\n+\t\tcount++;\n+\t\treturn methodInvocation.proceed();\n+\t}\n+\n+\tpublic int getCount() {\n+\t\treturn count;\n+\t}\n+\n+\tpublic void reset() {\n+\t\tthis.count = 0;\n+\t}\n+}",
    "output": "move unit tests from .testsuite -> .aop"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockPageContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2007 the original author or authors.\n+ * Copyright 2002-2008 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,7 @@\n import java.io.IOException;\n import java.util.Enumeration;\n import java.util.Hashtable;\n-\n+import javax.el.ELContext;\n import javax.servlet.Servlet;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n@@ -275,6 +275,10 @@ public ExpressionEvaluator getExpressionEvaluator() {\n \t\treturn new MockExpressionEvaluator(this);\n \t}\n \n+\tpublic ELContext getELContext() {\n+\t\tthrow new UnsupportedOperationException(\"getELContext\");\n+\t}\n+\n \tpublic VariableResolver getVariableResolver() {\n \t\treturn null;\n \t}",
    "output": "consistent compilation against Servlet 2.5, JSP 2.1 and JUnit 4.5"
  },
  {
    "input": "diff --git a/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java b/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n--- a/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n+++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java\n@@ -252,8 +252,13 @@ public static void rollbackIfNecessary(Session session) throws JMSException {\n \tpublic static String buildExceptionMessage(JMSException ex) {\n \t\tString message = ex.getMessage();\n \t\tException linkedEx = ex.getLinkedException();\n-\t\tif (linkedEx != null && message.indexOf(linkedEx.getMessage()) == -1) {\n-\t\t\tmessage = message + \"; nested exception is \" + linkedEx;\n+\t\tif (linkedEx != null) {\n+\t\t\tif (message == null) {\n+\t\t\t\tmessage = linkedEx.toString();\n+\t\t\t}\n+\t\t\telse if (!message.contains(linkedEx.getMessage())) {\n+\t\t\t\tmessage = message + \"; nested exception is \" + linkedEx;\n+\t\t\t}\n \t\t}\n \t\treturn message;\n \t}",
    "output": "fix buildExceptionMessage to avoid potential NPE"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n--- a/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java\n@@ -504,7 +504,9 @@ public Method resolveHandlerMethod(HttpServletRequest request) throws ServletExc\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (targetHandlerMethods.size() == 1) {\n-\t\t\t\textractHandlerMethodUriTemplates(targetPathMatches.values().iterator().next(), lookupPath, request);\n+\t\t\t\tif (targetPathMatches.size() == 1) {\n+\t\t\t\t\textractHandlerMethodUriTemplates(targetPathMatches.values().iterator().next(), lookupPath, request);\n+\t\t\t\t}\n \t\t\t\treturn targetHandlerMethods.values().iterator().next();\n \t\t\t}\n \t\t\telse if (!targetHandlerMethods.isEmpty()) {\n@@ -527,7 +529,9 @@ else if (!targetHandlerMethods.isEmpty()) {\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\textractHandlerMethodUriTemplates(bestPathMatch, lookupPath, request);\n+\t\t\t\tif (bestPathMatch != null) {\n+\t\t\t\t\textractHandlerMethodUriTemplates(bestPathMatch, lookupPath, request);\n+\t\t\t\t}\n \t\t\t\treturn targetHandlerMethods.get(bestMappingMatch);\n \t\t\t}\n \t\t\telse {",
    "output": "URI Templates support relative @RequestMappings (on class level, with more specific mapping on method level)"
  },
  {
    "input": "diff --git a/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperTests.java b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperTests.java\n--- a/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperTests.java\n+++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperTests.java\n@@ -35,8 +35,8 @@\n import java.util.TreeMap;\n import java.util.TreeSet;\n \n-import junit.framework.TestCase;\n import junit.framework.Assert;\n+import junit.framework.TestCase;\n import org.apache.commons.logging.LogFactory;\n import org.hibernate.FlushMode;\n \n@@ -1092,7 +1092,7 @@ public void testLargeMatchingPrimitiveArray() {\n \t\t\tbw.setPropertyValue(\"array\", input);\n \t\t}\n \t\tsw.stop();\n-\t\tassertTrue(\"Took too long\", sw.getLastTaskTimeMillis() < 100);\n+\t\tassertTrue(\"Took too long\", sw.getLastTaskTimeMillis() < 125);\n \n \t\tbw.registerCustomEditor(int.class, \"array.somePath\", new CustomNumberEditor(Integer.class, false));\n \t\tsw.start(\"array3\");",
    "output": "Increased timings of performance test, because the 100 ms does not work on our CI server"
  },
  {
    "input": "diff --git a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java\n--- a/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java\n+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtilsTests.java\n@@ -0,0 +1,29 @@\n+package org.springframework.web.servlet.mvc.annotation;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+/** @author Arjen Poutsma */\n+public class ServletAnnotationMappingUtilsTests {\n+\n+\t@Test\n+\tpublic void checkRequestMethodMatch() {\n+\t\tRequestMethod[] methods = new RequestMethod[]{RequestMethod.GET, RequestMethod.POST};\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/\");\n+\t\tboolean result = ServletAnnotationMappingUtils.checkRequestMethod(methods, request);\n+\t\tassertTrue(\"Invalid request method result\", result);\n+\t}\n+\n+\t@Test\n+\tpublic void checkRequestMethodNoMatch() {\n+\t\tRequestMethod[] methods = new RequestMethod[]{RequestMethod.GET, RequestMethod.POST};\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"PUT\", \"/\");\n+\t\tboolean result = ServletAnnotationMappingUtils.checkRequestMethod(methods, request);\n+\t\tassertFalse(\"Invalid request method result\", result);\n+\t}\n+\n+}",
    "output": "Add test for ServletAnnotationMappingUtils"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java b/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/NamedInheritableThreadLocal.java\n@@ -26,7 +26,7 @@\n  * @since 2.5.2\n  * @see NamedThreadLocal\n  */\n-public class NamedInheritableThreadLocal extends InheritableThreadLocal {\n+public class NamedInheritableThreadLocal<T> extends InheritableThreadLocal<T> {\n \n \tprivate final String name;\n \n\ndiff --git a/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java b/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/NamedThreadLocal.java\n@@ -26,7 +26,7 @@\n  * @since 2.5.2\n  * @see NamedInheritableThreadLocal\n  */\n-public class NamedThreadLocal extends ThreadLocal {\n+public class NamedThreadLocal<T> extends ThreadLocal<T> {\n \n \tprivate final String name;\n ",
    "output": "Make ThreadLocals generic"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java b/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java\n--- a/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java\n+++ b/org.springframework.core/src/main/java/org/springframework/util/Md5HashUtils.java\n@@ -28,7 +28,7 @@\n public abstract class Md5HashUtils {\n \n \tprivate static final char[] HEX_CHARS =\n-\t\t\t{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',};\n+\t\t\t{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n \n \t/**\n \t * Calculates the MD5 hash of the given bytes.",
    "output": "Add MD5 hashing utils"
  },
  {
    "input": "diff --git a/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java\n--- a/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java\n+++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java\n@@ -18,7 +18,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.IdentityHashMap;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java b/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java\n--- a/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java\n+++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java\n@@ -57,7 +57,7 @@ public String getParameter(String paramName) {\n \t}\n \n \tpublic String[] getParameterValues(String paramName) {\n-\t\treturn (String[]) getExternalContext().getRequestParameterMap().get(paramName);\n+\t\treturn (String[]) getExternalContext().getRequestParameterValuesMap().get(paramName);\n \t}\n \n \tpublic Map getParameterMap() {",
    "output": "Change use of getRequestParameterMapto getRequestParameterValuesMap"
  },
  {
    "input": "diff --git a/org.springframework.context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java b/org.springframework.context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java\n--- a/org.springframework.context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java\n+++ b/org.springframework.context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java\n@@ -85,14 +85,23 @@ public static Object createJRubyObject(String scriptSource, Class[] interfaces)\n \tpublic static Object createJRubyObject(String scriptSource, Class[] interfaces, ClassLoader classLoader) {\n \t\tRuby ruby = initializeRuntime();\n \n+\t\tNode scriptRootNode = null;\n+\t\t/* TODO: make this JRuby 1.1 compliant\n+\t\t\n \t\tNode scriptRootNode = (oldParseMethod != null ?\n \t\t\t\t(Node) ReflectionUtils.invokeMethod(oldParseMethod, ruby, new Object[] {scriptSource, \"\", null}) :\n \t\t\t\truby.parse(scriptSource, \"\", null, 0));\n+\t\t*/\n+\t\tIRubyObject rubyObject = null;\n+\t\t/** TODO: make this JRuby 1.1 compliant \n \t\tIRubyObject rubyObject = ruby.eval(scriptRootNode);\n+\t\t*/\n \n \t\tif (rubyObject instanceof RubyNil) {\n \t\t\tString className = findClassName(scriptRootNode);\n+\t\t\t/** TODO: make this JRuby 1.1 compliant \n \t\t\trubyObject = ruby.evalScript(\"\\n\" + className + \".new\");\n+\t\t\t*/\n \t\t}\n \t\t// still null?\n \t\tif (rubyObject instanceof RubyNil) {",
    "output": "Disable JRuby for now, needs to be made 1.1 compliant"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n@@ -166,7 +166,6 @@ public void testMathOperatorDivide03() {\n \t\tevaluateAndAskForReturnType(\"8/4\", new Double(2.0), Double.class);\n \t}\n \n-\t// TODO decide about a conversion like this, should we support it and coerce silently?\n \t// public void testMathOperatorDivide04() {\n \t// evaluateAndAskForReturnType(\"8.4 / 4\", \"2\", Integer.class);\n \t// }\n@@ -364,7 +363,6 @@ public void testSelectionError_NonBooleanSelectionCriteria() {\n \t\t\t\tSpelMessages.RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN);\n \t}\n \n-\t// TODO Is $index within projection/selection useful or just cute?\n \tpublic void testSelectionUsingIndex() {\n \t\tevaluate(\"{1,2,3,4,5,6,7,8,9,10}.?{$index > 5 }\", \"[7, 8, 9, 10]\", ArrayList.class);\n \t}",
    "output": "move TODOs to readme"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java\n@@ -19,12 +19,13 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n \n import org.antlr.runtime.Token;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.spel.ExpressionState;\n import org.springframework.expression.spel.SpelException;\n import org.springframework.expression.spel.SpelMessages;\n-import org.springframework.expression.spel.ExpressionState;\n \n /**\n  * Represents a date literal value in an expression (a java.util.Date object).\n@@ -47,7 +48,9 @@ public Date getValue(ExpressionState state) throws EvaluationException {\n \t\t\tif (getChildCount() > 1) {\n \t\t\t\tformatter = new SimpleDateFormat((String) getChild(1).getValue(state));\n \t\t\t} else {\n-\t\t\t\tformatter = DateFormat.getDateTimeInstance();\n+\t\t\t\t// http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html\n+\t\t\t\t// this is something of this format: \"Wed, 4 Jul 2001 12:08:56 GMT\"\n+\t\t\t\tformatter = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.UK);\n \t\t\t}\n \t\t}\n \t\tString valueToParse = (String) getChild(0).getValue(state);",
    "output": "Make GMT the default Locale"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java\n@@ -56,11 +56,11 @@ public void testCombinations01() {\n \t}\n \n \tpublic void testBooleanErrors01() {\n-\t\tevaluateAndCheckError(\"1 or false\", SpelMessages.TYPE_CONVERSION_ERROR, 0);\n-\t\tevaluateAndCheckError(\"false or 39\", SpelMessages.TYPE_CONVERSION_ERROR, 9);\n+\t\tevaluateAndCheckError(\"1.0 or false\", SpelMessages.TYPE_CONVERSION_ERROR, 0);\n+\t\tevaluateAndCheckError(\"false or 39.4\", SpelMessages.TYPE_CONVERSION_ERROR, 9);\n \t\tevaluateAndCheckError(\"true and 'hello'\", SpelMessages.TYPE_CONVERSION_ERROR, 9);\n \t\tevaluateAndCheckError(\" 'hello' and 'goodbye'\", SpelMessages.TYPE_CONVERSION_ERROR, 1);\n-\t\tevaluateAndCheckError(\"!35\", SpelMessages.TYPE_CONVERSION_ERROR, 1);\n+\t\tevaluateAndCheckError(\"!35.2\", SpelMessages.TYPE_CONVERSION_ERROR, 1);\n \t\tevaluateAndCheckError(\"! 'foob'\", SpelMessages.TYPE_CONVERSION_ERROR, 2);\n \t}\n }",
    "output": "fix some tests that will now break because int/long can be treated as boolean. May need to change again if real numbers get the same treatment"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n@@ -376,6 +376,16 @@ public void testTernaryOperator02() {\n \t\tevaluate(\"{2}.#isEven(#this[0]) == 'y'?'it is even':'it is odd'\", \"it is even\", String.class);\n \t}\n \n+\tpublic void testTernaryOperator03() {\n+\t\tevaluateAndCheckError(\"'hello'?1:2\", SpelMessages.TYPE_CONVERSION_ERROR); // cannot convert String to boolean\n+\t}\n+\n+\tpublic void testTernaryOperator04() {\n+\t\t// an int becomes TRUE if not 0, otherwise FALSE\n+\t\tevaluate(\"12?1:2\", 1, Integer.class); // int to boolean\n+\t\tevaluate(\"1L?1:2\", 1, Integer.class); // long to boolean\n+\t}\n+\n \t// Indexer\n \tpublic void testCutProcessor01() {\n \t\tevaluate(\"{1,2,3,4,5}.cut(1,3)\", \"[2, 3, 4]\", ArrayList.class);",
    "output": "new tests for ternary - checking conversion of numbers to boolean and correct error when condition result not convertable to boolean"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java\n@@ -15,7 +15,6 @@\n  */\n package org.springframework.expression;\n \n-// TODO (asc) This class needs a better name? I might have used EvaluationException if it wasn't also used for parsing issues\n /**\n  * Base class for exceptions occurring during expression parsing and evaluation.\n  * ",
    "output": "remove fixed TODO task"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelMessages.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelMessages.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelMessages.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelMessages.java\n@@ -105,7 +105,8 @@ public enum SpelMessages {\n \t\t\t1062, \"Method call of ''{0}'' is ambiguous, supported type conversions allow multiple variants to match\"), EXCEPTION_DURING_PROPERTY_WRITE(\r\n \t\t\tKind.ERROR, 1063, \"A problem occurred whilst attempting to set the property ''{0}'': ''{1}''\"), NOT_AN_INTEGER(\r\n \t\t\tKind.ERROR, 1064, \"The value ''{0}'' cannot be parsed as an int\"), NOT_A_LONG(Kind.ERROR, 1065,\r\n-\t\t\t\"The value ''{0}'' cannot be parsed as a long\"), ;\r\n+\t\t\t\"The value ''{0}'' cannot be parsed as a long\"), PARSE_PROBLEM(Kind.ERROR, 1066,\r\n+\t\t\t\"Error occurred during expression parse: {0}\"), ;\r\n \r\n \tprivate Kind kind;\r\n \tprivate int code;\r",
    "output": "Parser error message improvements: new messages"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java\n@@ -20,7 +20,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n-import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -97,7 +97,9 @@ private static void createTestClassloader(StandardEvaluationContext testContext)\n \t * @param testContext the evaluation context in which to set the root object\n \t */\n \tprivate static void setupRootContextObject(StandardEvaluationContext testContext) {\n-\t\tInventor tesla = new Inventor(\"Nikola Tesla\", new Date(1856, 7, 9), \"Serbian\");\n+\t\tGregorianCalendar c = new GregorianCalendar();\n+\t\tc.set(1856, 7, 9);\n+\t\tInventor tesla = new Inventor(\"Nikola Tesla\", c.getTime(), \"Serbian\");\n \t\ttesla.setPlaceOfBirth(new PlaceOfBirth(\"SmilJan\"));\n \t\ttesla.setInventions(new String[] { \"Telephone repeater\", \"Rotating magnetic field principle\",\n \t\t\t\t\"Polyphase alternating-current system\", \"Induction motor\", \"Alternating-current power transmission\",",
    "output": "Avoid calling deprecated Date ctor"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressionsParser.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressionsParser.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressionsParser.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressionsParser.java\n@@ -20,7 +20,7 @@\n import org.antlr.runtime.tree.RewriteRuleTokenStream;\n import org.antlr.runtime.tree.TreeAdaptor;\n \n-@SuppressWarnings({\"unused\",\"cast\"})\n+@SuppressWarnings({\"unused\",\"cast\",\"unchecked\"})\n public class SpringExpressionsParser extends Parser {\n \tpublic static final String[] tokenNames = new String[] { \"<invalid>\", \"<EOR>\", \"<DOWN>\", \"<UP>\", \"EXPRESSIONLIST\",\n \t\t\t\"INTEGER_LITERAL\", \"EXPRESSION\", \"QUALIFIED_IDENTIFIER\", \"REFERENCE\", \"PROPERTY_OR_FIELD\", \"INDEXER\",",
    "output": "Suppress unchecked warning in generated code"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java\n@@ -284,7 +284,7 @@ public void testInlineMapCreation01() {\n \t}\n \n \tpublic void testInlineMapCreation02() {\n-\t\tevaluate(\"#{1:'January', 2:'February', 3:'March'}\", \"{2=February, 1=January, 3=March}\", HashMap.class);\n+\t\tevaluate(\"#{1:'January', 2:'February', 3:'March'}.size()\", 3, Integer.class);//\"{2=February, 1=January, 3=March}\", HashMap.class);\n \t}\n \n \tpublic void testInlineMapCreation03() {",
    "output": "Change test so expected results match actual on both windows and Mac"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/PropertyAccessTests.java\n@@ -17,8 +17,8 @@\n \n import org.springframework.expression.AccessException;\n import org.springframework.expression.EvaluationContext;\n-import org.springframework.expression.Expression;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.Expression;\n import org.springframework.expression.PropertyAccessor;\n import org.springframework.expression.spel.reflection.ReflectionPropertyResolver;\n import org.springframework.expression.spel.standard.StandardEvaluationContext;\n@@ -69,7 +69,7 @@ static class StringyPropertyAccessor implements PropertyAccessor {\n \n \t\tint flibbles = 7;\n \t\t\n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn new Class[]{String.class};\n \t\t}\n ",
    "output": "Fix generics warnings"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java\n@@ -267,7 +267,7 @@ static class FruitColourAccessor implements PropertyAccessor {\n \t\t/**\n \t\t * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it\n \t\t */\n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n \t\t\n@@ -344,7 +344,7 @@ static class VegetableColourAccessor extends CacheablePropertyAccessor {\n \t\t/**\n \t\t * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it\n \t\t */\n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Fix generics warning"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java\n--- a/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java\n+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java\n@@ -19,8 +19,8 @@\n \n import org.springframework.expression.AccessException;\n import org.springframework.expression.EvaluationContext;\n-import org.springframework.expression.Expression;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.Expression;\n import org.springframework.expression.MethodExecutor;\n import org.springframework.expression.MethodResolver;\n import org.springframework.expression.PropertyAccessor;\n@@ -136,7 +136,7 @@ public void write(EvaluationContext context, Object target, Object name, Object\n \t\t\t\tthrows AccessException {\n \t\t}\n \n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n \t\t\n@@ -164,7 +164,7 @@ public void write(EvaluationContext context, Object target, Object name, Object\n \t\t\t\tthrows AccessException {\n \t\t}\n \n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n ",
    "output": "Fix generics warnings"
  },
  {
    "input": "diff --git a/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java\n--- a/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java\n+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionUtils.java\n@@ -79,9 +79,6 @@ public static DiscoveredMethod findMethod(TypeConverter typeConverter, String na\n \t\t\t\t\tif (matchInfo.kind == ArgsMatchKind.EXACT) {\r\n \t\t\t\t\t\treturn new DiscoveredMethod(method, null);\r\n \t\t\t\t\t} else if (matchInfo.kind == ArgsMatchKind.CLOSE) {\r\n-\t\t\t\t\t\tif (matchRequiringConversion!=null) {\r\n-\t\t\t\t\t\t\tint stop = 1;\r\n-\t\t\t\t\t\t}\r\n \t\t\t\t\t\tcloseMatch = method;\r\n \t\t\t\t\t} else if (matchInfo.kind == ArgsMatchKind.REQUIRES_CONVERSION) {\r\n \t\t\t\t\t\tif (matchRequiringConversion!=null) {\r",
    "output": "Remove unused code"
  }
]