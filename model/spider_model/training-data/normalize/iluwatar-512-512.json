[
  {
    "input": "diff --git a/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java b/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java\n--- a/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java\n+++ b/microservices-distributed-tracing/product-microservice/src/test/java/com/iluwatar/product/microservice/ProductControllerTest.java\n@@ -36,7 +36,7 @@ class ProductControllerTest {\n   private ProductController productController;\n \n   @BeforeEach\n-  public void setUp() {\n+  void setUp() {\n     productController = new ProductController();\n   }\n ",
    "output": "Upgrade microservices distributed tracing"
  },
  {
    "input": "diff --git a/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java b/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java\n--- a/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java\n+++ b/bloc/src/test/java/com/iluwatar/bloc/BlocUiTest.java\n@@ -32,7 +32,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-public class BlocUiTest {\n+class BlocUiTest {\n \n   private JFrame frame;\n   private JLabel counterLabel;\n@@ -43,7 +43,7 @@ public class BlocUiTest {\n   private StateListener<State> stateListener;\n \n   @BeforeEach\n-  public void setUp() {\n+  void setUp() {\n     bloc = new Bloc(); // Re-initialize the Bloc for each test\n \n     frame = new JFrame(\"BloC example\");\n@@ -83,25 +83,25 @@ public void setUp() {\n   }\n \n   @AfterEach\n-  public void tearDown() {\n+  void tearDown() {\n     frame.dispose();\n     bloc = new Bloc(); // Reset Bloc state after each test to avoid state carryover\n   }\n \n   @Test\n-  public void testIncrementButton() {\n+  void testIncrementButton() {\n     simulateButtonClick(incrementButton);\n     assertEquals(\"Counter: 1\", counterLabel.getText());\n   }\n \n   @Test\n-  public void testDecrementButton() {\n+  void testDecrementButton() {\n     simulateButtonClick(decrementButton);\n     assertEquals(\"Counter: -1\", counterLabel.getText());\n   }\n \n   @Test\n-  public void testToggleListenerButton() {\n+  void testToggleListenerButton() {\n     // Disable listener\n     simulateButtonClick(toggleListenerButton);\n     simulateButtonClick(incrementButton);",
    "output": "Upgrade bloc pattern"
  },
  {
    "input": "diff --git a/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java b/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n--- a/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n+++ b/microservices-api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java\n@@ -45,6 +45,7 @@ public class ImageClientImpl implements ImageClient {\n    */\n   @Override\n   public String getImagePath() {\n+\n     var httpClient = HttpClient.newHttpClient();\n     var httpGet =\n         HttpRequest.newBuilder().GET().uri(URI.create(\"http://localhost:50005/image-path\")).build();",
    "output": "Upgrade client-side ui composition"
  },
  {
    "input": "diff --git a/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java b/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java\n--- a/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java\n+++ b/backpressure/src/main/java/com/iluwatar/backpressure/Publisher.java\n@@ -30,6 +30,8 @@\n /** This class is the publisher that generates the data stream. */\n public class Publisher {\n \n+  private Publisher() {}\n+\n   /**\n    * On message method will trigger when the subscribed event is published.\n    *",
    "output": "Upgrade backpressure description"
  },
  {
    "input": "diff --git a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n--- a/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n+++ b/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java\n@@ -114,12 +114,16 @@ void shouldUpdateExistingValue() {\n     final String originalValue = \"originalValue\";\n     final String updatedValue = \"updatedValue\";\n \n+    // Initializing the value\n     document.put(key, originalValue);\n \n+    // Verifying that the initial value is retrieved correctly\n+    assertEquals(originalValue, document.get(key));\n+\n     // Updating the value\n     document.put(key, updatedValue);\n \n-    //Verifying that the updated value is retrieved correctly\n+    // Verifying that the updated value is retrieved correctly\n     assertEquals(updatedValue, document.get(key));\n   }\n }",
    "output": "Add to AbstractDocumentTest verification of originalValue in document"
  },
  {
    "input": "diff --git a/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java b/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java\n--- a/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java\n+++ b/serialized-entity/src/main/java/com/iluwatar/serializedentity/App.java\n@@ -48,11 +48,10 @@\n  */\n @Slf4j\n public class App {\n-  private static final String DB_URL = \"jdbc:h2:mem:testdb\";\n \n-  private App() {\n+  private static final String DB_URL = \"jdbc:h2:~/testdb\";\n \n-  }\n+  private App() {}\n \n   /**\n    * Program entry point.",
    "output": "Upgrade serialized entity"
  },
  {
    "input": "diff --git a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n@@ -67,12 +67,12 @@ public class ApplicationRoleObject {\n   public static void main(String[] args) {\n     var customer = Customer.newCustomer(BORROWER, INVESTOR);\n \n-    LOGGER.info(\" the new customer created : {}\", customer);\n+    LOGGER.info(\"New customer created : {}\", customer);\n \n     var hasBorrowerRole = customer.hasRole(BORROWER);\n-    LOGGER.info(\" customer has a borrowed role - {}\", hasBorrowerRole);\n+    LOGGER.info(\"Customer has a borrower role - {}\", hasBorrowerRole);\n     var hasInvestorRole = customer.hasRole(INVESTOR);\n-    LOGGER.info(\" customer has an investor role - {}\", hasInvestorRole);\n+    LOGGER.info(\"Customer has an investor role - {}\", hasInvestorRole);\n \n     customer.getRole(INVESTOR, InvestorRole.class)\n         .ifPresent(inv -> {",
    "output": "Upgrade role object"
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java b/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java\n--- a/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java\n+++ b/private-class-data/src/main/java/com/iluwatar/privateclassdata/StewData.java\n@@ -28,5 +28,4 @@\n  * Stew ingredients.\n  */\n \n-public record StewData(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {\n-}\n+public record StewData(int numPotatoes, int numCarrots, int numMeat, int numPeppers) {}",
    "output": "Upgrade private class data"
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n--- a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n+++ b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.object.pool;\n \n import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -35,6 +36,7 @@ public class Oliphaunt {\n \n   private static final AtomicInteger counter = new AtomicInteger(0);\n \n+  @Getter\n   private final int id;\n \n   /**\n@@ -49,10 +51,6 @@ public Oliphaunt() {\n     }\n   }\n \n-  public int getId() {\n-    return id;\n-  }\n-\n   @Override\n   public String toString() {\n     return String.format(\"Oliphaunt id=%d\", id);",
    "output": "Upgrade object pool"
  },
  {
    "input": "diff --git a/identity-map/src/main/java/com/iluwatar/identitymap/App.java b/identity-map/src/main/java/com/iluwatar/identitymap/App.java\n--- a/identity-map/src/main/java/com/iluwatar/identitymap/App.java\n+++ b/identity-map/src/main/java/com/iluwatar/identitymap/App.java\n@@ -68,6 +68,5 @@ public static void main(String[] args) {\n     LOGGER.info(finder.getPerson(5).toString());\n     // Find the person in the map.\n     LOGGER.info(finder.getPerson(2).toString());\n-\n   }\n }",
    "output": "Upgrade identity map"
  },
  {
    "input": "diff --git a/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java b/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java\n--- a/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java\n+++ b/event-sourcing/src/main/java/com/iluwatar/event/sourcing/app/App.java\n@@ -49,8 +49,6 @@\n  * After the shut-down, system state is recovered by re-creating the past events from event\n  * journals. Then state is printed so a user can view the last state is same with the state before a\n  * system shut-down.\n- *\n- * <p>Created by Serdar Hamzaogullari on 06.08.2017.\n  */\n @Slf4j\n public class App {\n@@ -112,6 +110,4 @@ public static void main(String[] args) {\n     LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_DAENERYS).toString());\n     LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_JON).toString());\n   }\n-\n-\n }",
    "output": "Upgrade event sourcing"
  },
  {
    "input": "diff --git a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n--- a/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n+++ b/double-dispatch/src/main/java/com/iluwatar/doubledispatch/App.java\n@@ -56,25 +56,25 @@ public class App {\n    */\n   public static void main(String[] args) {\n     // initialize game objects and print their status\n+    LOGGER.info(\"Init objects and print their status\");\n     var objects = List.of(\n         new FlamingAsteroid(0, 0, 5, 5),\n         new SpaceStationMir(1, 1, 2, 2),\n         new Meteoroid(10, 10, 15, 15),\n         new SpaceStationIss(12, 12, 14, 14)\n     );\n     objects.forEach(o -> LOGGER.info(o.toString()));\n-    LOGGER.info(\"\");\n \n     // collision check\n+    LOGGER.info(\"Collision check\");\n     objects.forEach(o1 -> objects.forEach(o2 -> {\n       if (o1 != o2 && o1.intersectsWith(o2)) {\n         o1.collision(o2);\n       }\n     }));\n-    LOGGER.info(\"\");\n \n     // output eventual object statuses\n+    LOGGER.info(\"Print object status after collision checks\");\n     objects.forEach(o -> LOGGER.info(o.toString()));\n-    LOGGER.info(\"\");\n   }\n }",
    "output": "Upgrade double dispatch"
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n@@ -80,5 +80,4 @@ public static void main(String[] args) {\n     var app = new App();\n     app.run();\n   }\n-\n }",
    "output": "Upgrade dirty flag"
  },
  {
    "input": "diff --git a/version-number/src/main/java/com/iluwatar/versionnumber/Book.java b/version-number/src/main/java/com/iluwatar/versionnumber/Book.java\n--- a/version-number/src/main/java/com/iluwatar/versionnumber/Book.java\n+++ b/version-number/src/main/java/com/iluwatar/versionnumber/Book.java\n@@ -24,19 +24,21 @@\n  */\n package com.iluwatar.versionnumber;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Model class for Book entity.\n  */\n+@Getter\n+@Setter\n public class Book {\n   private long id;\n   private String title = \"\";\n   private String author = \"\";\n-\n   private long version = 0; // version number\n \n-  public Book() {\n-\n-  }\n+  public Book() {}\n \n   /**\n    * We need this copy constructor to copy book representation in {@link BookRepository}.\n@@ -47,36 +49,4 @@ public Book(Book book) {\n     this.author = book.author;\n     this.version = book.version;\n   }\n-\n-  public long getId() {\n-    return id;\n-  }\n-\n-  public void setId(long id) {\n-    this.id = id;\n-  }\n-\n-  public String getTitle() {\n-    return title;\n-  }\n-\n-  public void setTitle(String title) {\n-    this.title = title;\n-  }\n-\n-  public String getAuthor() {\n-    return author;\n-  }\n-\n-  public void setAuthor(String author) {\n-    this.author = author;\n-  }\n-\n-  public long getVersion() {\n-    return version;\n-  }\n-\n-  public void setVersion(long version) {\n-    this.version = version;\n-  }\n }",
    "output": "Upgrade version number"
  },
  {
    "input": "diff --git a/update-method/src/main/java/com/iluwatar/updatemethod/World.java b/update-method/src/main/java/com/iluwatar/updatemethod/World.java\n--- a/update-method/src/main/java/com/iluwatar/updatemethod/World.java\n+++ b/update-method/src/main/java/com/iluwatar/updatemethod/World.java\n@@ -27,7 +27,6 @@\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Random;\n import lombok.extern.slf4j.Slf4j;\n \n /**",
    "output": "Upgrade method docs"
  },
  {
    "input": "diff --git a/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java b/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java\n--- a/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java\n+++ b/type-object/src/main/java/com/iluwatar/typeobject/CellPool.java\n@@ -29,13 +29,14 @@\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * The CellPool class allows the reuse of crushed cells instead of creation of new cells each time.\n  * The reused cell is given a new candy to hold using the randomCode field which holds all the\n  * candies available.\n  */\n-\n+@Slf4j\n public class CellPool {\n   private static final SecureRandom RANDOM = new SecureRandom();\n   public static final String FRUIT = \"fruit\";\n@@ -49,7 +50,7 @@ public class CellPool {\n     try {\n       this.randomCode = assignRandomCandytypes();\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n       //manually initialising this.randomCode\n       this.randomCode = new Candy[5];\n       randomCode[0] = new Candy(\"cherry\", FRUIT, Type.REWARD_FRUIT, 20);",
    "output": "Upgrade type object"
  },
  {
    "input": "diff --git a/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java b/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java\n--- a/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java\n+++ b/thread-local-storage/src/main/java/com/iluwatar/AbstractThreadLocalExample.java\n@@ -28,10 +28,12 @@\n import java.util.concurrent.locks.LockSupport;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Class with main logic.\n  */\n+@Slf4j\n public abstract class AbstractThreadLocalExample implements Runnable {\n \n   private static final SecureRandom RND = new SecureRandom();",
    "output": "Upgrade thread local storage"
  },
  {
    "input": "diff --git a/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java b/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java\n--- a/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java\n+++ b/template-method/src/test/java/com/iluwatar/templatemethod/StealingMethodTest.java\n@@ -146,7 +146,7 @@ void testSteal() {\n     assertEquals(3, appender.getLogSize());\n   }\n \n-  private class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n+  private static class InMemoryAppender extends AppenderBase<ILoggingEvent> {\n     private final List<ILoggingEvent> log = new LinkedList<>();\n \n     public InMemoryAppender() {",
    "output": "Upgrade template method"
  },
  {
    "input": "diff --git a/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java b/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java\n--- a/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java\n+++ b/table-module/src/test/java/com/iluwatar/tablemodule/UserTableModuleTest.java\n@@ -86,9 +86,7 @@ void registerShouldFail() throws SQLException {\n     var userTableModule = new UserTableModule(dataSource);\n     var user = new User(1, \"123456\", \"123456\");\n     userTableModule.registerUser(user);\n-    assertThrows(SQLException.class, () -> {\n-      userTableModule.registerUser(user);\n-    });\n+    assertThrows(SQLException.class, () -> userTableModule.registerUser(user));\n   }\n \n   @Test\n\ndiff --git a/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java b/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java\n--- a/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java\n+++ b/table-module/src/test/java/com/iluwatar/tablemodule/UserTest.java\n@@ -45,7 +45,8 @@ void testCanEqual2() {\n   @Test\n   void testEquals1() {\n     var user = new User(1, \"janedoe\", \"iloveyou\");\n-    assertNotEquals(\"42\", user);\n+    assertNotEquals(user, new User(123, \"abcd\",\n+        \"qwerty\"));\n   }\n \n   @Test",
    "output": "Upgrade table module"
  },
  {
    "input": "diff --git a/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java b/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/SingleTableInheritance.java\n@@ -81,7 +81,7 @@ public static void main(String[] args) {\n    * @param args program runtime arguments\n    */\n   @Override\n-  public void run(String... args) throws Exception {\n+  public void run(String... args) {\n \n     Logger log = LoggerFactory.getLogger(SingleTableInheritance.class);\n \n\ndiff --git a/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java b/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java\n--- a/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java\n+++ b/single-table-inheritance/src/main/java/com/iluwatar/entity/PassengerVehicle.java\n@@ -45,10 +45,4 @@ protected PassengerVehicle(String manufacturer, String model, int noOfPassengers\n     super(manufacturer, model);\n     this.noOfPassengers = noOfPassengers;\n   }\n-\n-  @Override\n-  public String toString() {\n-    return super.toString();\n-  }\n-\n }",
    "output": "Upgrade single table inheritance"
  },
  {
    "input": "diff --git a/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java b/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java\n--- a/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java\n+++ b/service-to-worker/src/main/java/com/iluwatar/servicetoworker/GiantController.java\n@@ -24,8 +24,6 @@\n  */\n package com.iluwatar.servicetoworker;\n \n-import lombok.Getter;\n-\n /**\n  * GiantController can update the giant data and redraw it using the view. Singleton object that\n  * intercepts all requests and performs common functions.",
    "output": "Upgrade service to worker"
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n--- a/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n+++ b/object-pool/src/main/java/com/iluwatar/object/pool/Oliphaunt.java\n@@ -24,11 +24,12 @@\n  */\n package com.iluwatar.object.pool;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicInteger;import lombok.extern.slf4j.Slf4j;\n \n /**\n  * Oliphaunts are expensive to create.\n  */\n+@Slf4j\n public class Oliphaunt {\n \n   private static final AtomicInteger counter = new AtomicInteger(0);\n@@ -43,7 +44,7 @@ public Oliphaunt() {\n     try {\n       Thread.sleep(1000);\n     } catch (InterruptedException e) {\n-      e.printStackTrace();\n+      LOGGER.error(\"Error occurred: \", e);\n     }\n   }\n ",
    "output": "Upgrade object pool"
  },
  {
    "input": "diff --git a/marker/src/main/java/App.java b/marker/src/main/java/App.java\n--- a/marker/src/main/java/App.java\n+++ b/marker/src/main/java/App.java\n@@ -22,18 +22,18 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-import org.slf4j.Logger;\n+\n import org.slf4j.LoggerFactory;\n \n /**\n  * Created by Alexis on 28-Apr-17. With Marker interface idea is to make empty interface and extend\n  * it. Basically it is just to identify the special objects from normal objects. Like in case of\n  * serialization , objects that need to be serialized must implement serializable interface (it is\n- * empty interface) and down the line writeObject() method must be checking if it is a instance of\n+ * empty interface) and down the line writeObject() method must be checking if it is an instance of\n  * serializable or not.\n  *\n  * <p>Marker interface vs annotation Marker interfaces and marker annotations both have their uses,\n- * neither of them is obsolete or always better then the other one. If you want to define a type\n+ * neither of them is obsolete or always better than the other one. If you want to define a type\n  * that does not have any new methods associated with it, a marker interface is the way to go. If\n  * you want to mark program elements other than classes and interfaces, to allow for the possibility\n  * of adding more information to the marker in the future, or to fit the marker into a framework",
    "output": "Add marker explanation"
  },
  {
    "input": "diff --git a/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java b/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java\n--- a/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java\n+++ b/game-loop/src/main/java/com/iluwatar/gameloop/Bullet.java\n@@ -24,22 +24,19 @@\n  */\n package com.iluwatar.gameloop;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * Bullet object class.\n  */\n public class Bullet {\n \n+  @Getter\n+  @Setter\n   private float position;\n \n   public Bullet() {\n     position = 0.0f;\n   }\n-\n-  public float getPosition() {\n-    return position;\n-  }\n-\n-  public void setPosition(float position) {\n-    this.position = position;\n-  }\n }",
    "output": "Improve game loop"
  },
  {
    "input": "diff --git a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n--- a/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n+++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java\n@@ -30,6 +30,7 @@\n import javax.sound.sampled.AudioSystem;\n import javax.sound.sampled.LineUnavailableException;\n import javax.sound.sampled.UnsupportedAudioFileException;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -49,6 +50,7 @@ public class Audio {\n \n   private volatile Thread updateThread = null;\n \n+  @Getter\n   private final PlayMessage[] pendingAudio = new PlayMessage[MAX_PENDING];\n \n   // Visible only for testing purposes\n@@ -81,8 +83,8 @@ public synchronized boolean isServiceRunning() {\n   }\n \n   /**\n-   * Starts the thread for the Update Method pattern if it was not started previously. Also when the\n-   * thread is is ready initializes the indexes of the queue\n+   * Starts the thread for the Update Method pattern if it was not started previously. Also, when the\n+   * thread is ready initializes the indexes of the queue\n    */\n   public void init() {\n     if (updateThread == null) {\n@@ -164,14 +166,4 @@ public AudioInputStream getAudioStream(String filePath)\n       throws UnsupportedAudioFileException, IOException {\n     return AudioSystem.getAudioInputStream(new File(filePath).getAbsoluteFile());\n   }\n-\n-  /**\n-   * Returns with the message array of the queue.\n-   *\n-   * @return PlayMessage[]\n-   */\n-  public PlayMessage[] getPendingAudio() {\n-    return pendingAudio;\n-  }\n-\n }",
    "output": "Improve event queue docs"
  },
  {
    "input": "diff --git a/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java b/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java\n--- a/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java\n+++ b/dynamic-proxy/src/main/java/com/iluwatar/dynamicproxy/tinyrestclient/TinyRestClient.java\n@@ -132,7 +132,7 @@ private HttpRequest.BodyPublisher buildBodyPublisher(Method method, Object[] arg\n \n   private Object getResponse(Method method, HttpResponse<String> httpResponse) {\n     var rawData = httpResponse.body();\n-    Type returnType = null;\n+    Type returnType;\n     try {\n       returnType = method.getGenericReturnType();\n     } catch (Exception e) {",
    "output": "Upgrade dynamic proxy docs"
  },
  {
    "input": "diff --git a/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java b/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java\n--- a/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java\n+++ b/chain-of-responsibility/src/main/java/com/iluwatar/chain/Request.java\n@@ -25,10 +25,12 @@\n package com.iluwatar.chain;\n \n import java.util.Objects;\n+import lombok.Getter;\n \n /**\n  * Request.\n  */\n+@Getter\n public class Request {\n \n   /**\n@@ -59,41 +61,13 @@ public Request(final RequestType requestType, final String requestDescription) {\n     this.requestDescription = Objects.requireNonNull(requestDescription);\n   }\n \n-  /**\n-   * Get a description of the request.\n-   *\n-   * @return A human readable description of the request\n-   */\n-  public String getRequestDescription() {\n-    return requestDescription;\n-  }\n-\n-  /**\n-   * Get the type of this request, used by each person in the chain of command to see if they should\n-   * or can handle this particular request.\n-   *\n-   * @return The request type\n-   */\n-  public RequestType getRequestType() {\n-    return requestType;\n-  }\n-\n   /**\n    * Mark the request as handled.\n    */\n   public void markHandled() {\n     this.handled = true;\n   }\n \n-  /**\n-   * Indicates if this request is handled or not.\n-   *\n-   * @return <tt>true</tt> when the request is handled, <tt>false</tt> if not\n-   */\n-  public boolean isHandled() {\n-    return this.handled;\n-  }\n-\n   @Override\n   public String toString() {\n     return getRequestDescription();",
    "output": "Improve Chain of Responsibility docs"
  },
  {
    "input": "diff --git a/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java b/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java\n--- a/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java\n+++ b/business-delegate/src/test/java/com/iluwatar/business/delegate/AppTest.java\n@@ -25,7 +25,6 @@\n package com.iluwatar.business.delegate;\n \n import org.junit.jupiter.api.Test;\n-import java.io.IOException;\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n ",
    "output": "Improve Business Delegate documentation"
  },
  {
    "input": "diff --git a/balking/src/main/java/com/iluwatar/balking/WashingMachine.java b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n--- a/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n+++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java\n@@ -25,6 +25,7 @@\n package com.iluwatar.balking;\n \n import java.util.concurrent.TimeUnit;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -34,6 +35,8 @@\n public class WashingMachine {\n \n   private final DelayProvider delayProvider;\n+\n+  @Getter\n   private WashingMachineState washingMachineState;\n \n   /**\n@@ -60,10 +63,6 @@ public WashingMachine(DelayProvider delayProvider) {\n     this.washingMachineState = WashingMachineState.ENABLED;\n   }\n \n-  public WashingMachineState getWashingMachineState() {\n-    return washingMachineState;\n-  }\n-\n   /**\n    * Method responsible for washing if the object is in appropriate state.\n    */\n@@ -83,7 +82,7 @@ public void wash() {\n   }\n \n   /**\n-   * Method responsible of ending the washing by changing machine state.\n+   * Method is responsible for ending the washing by changing machine state.\n    */\n   public synchronized void endOfWashing() {\n     washingMachineState = WashingMachineState.ENABLED;",
    "output": "Improve Balking pattern docs"
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceStatus.java\n@@ -24,6 +24,8 @@\n  */\n package com.iluwatar.ambassador;\n \n+import lombok.Getter;\n+\n /**\n  * Holds information regarding the status of the Remote Service.\n  *\n@@ -36,13 +38,10 @@\n public enum RemoteServiceStatus {\n   FAILURE(-1);\n \n+  @Getter\n   private final long remoteServiceStatusValue;\n \n   RemoteServiceStatus(long remoteServiceStatusValue) {\n     this.remoteServiceStatusValue = remoteServiceStatusValue;\n   }\n-\n-  public long getRemoteServiceStatusValue() {\n-    return remoteServiceStatusValue;\n-  }\n }",
    "output": "Improve Ambassador pattern description"
  },
  {
    "input": "diff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/App.java\n@@ -24,6 +24,7 @@\n  */\n package com.iluwatar.abstractfactory;\n \n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /**\n@@ -41,14 +42,11 @@\n  * both concrete implementations to create a king, a castle, and an army.\n  */\n @Slf4j\n+@Getter\n public class App implements Runnable {\n \n   private final Kingdom kingdom = new Kingdom();\n \n-  public Kingdom getKingdom() {\n-    return kingdom;\n-  }\n-\n   /**\n    * Program entry point.\n    *\n\ndiff --git a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n--- a/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n+++ b/abstract-factory/src/main/java/com/iluwatar/abstractfactory/Kingdom.java\n@@ -57,7 +57,6 @@ public static KingdomFactory makeFactory(KingdomType type) {\n       return switch (type) {\n         case ELF -> new ElfKingdomFactory();\n         case ORC -> new OrcKingdomFactory();\n-        default -> throw new IllegalArgumentException(\"KingdomType not supported.\");\n       };\n     }\n   }",
    "output": "Upgrade abstract factory"
  },
  {
    "input": "diff --git a/factory-kit/src/main/java/com/iluwatar/factorykit/App.java b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n--- a/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n+++ b/factory-kit/src/main/java/com/iluwatar/factorykit/App.java\n@@ -59,6 +59,6 @@ public static void main(String[] args) {\n     list.add(factory.create(WeaponType.SPEAR));\n     list.add(factory.create(WeaponType.SWORD));\n     list.add(factory.create(WeaponType.BOW));\n-    list.stream().forEach(weapon -> LOGGER.info(\"{}\", weapon.toString()));\n+    list.forEach(weapon -> LOGGER.info(\"{}\", weapon.toString()));\n   }\n }",
    "output": "Use simple forEach"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -44,9 +44,9 @@ private ThreadSafeLazyLoadedIvoryTower() {\n    * The instance doesn't get created until the method is called for the first time.\n    */\n   public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n-      if (instance == null) {\n-          instance = new ThreadSafeLazyLoadedIvoryTower();\n-      }\n+    if (instance == null) {\n+      instance = new ThreadSafeLazyLoadedIvoryTower();\n+    }\n     return instance;\n   }\n }",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/monad/src/main/java/com/iluwatar/monad/Validator.java b/monad/src/main/java/com/iluwatar/monad/Validator.java\n--- a/monad/src/main/java/com/iluwatar/monad/Validator.java\n+++ b/monad/src/main/java/com/iluwatar/monad/Validator.java\n@@ -78,7 +78,7 @@ public static <T> Validator<T> of(T t) {\n    * @param message    error message when object is invalid\r\n    * @return this\r\n    */\r\n-  public Validator<T> validate(Predicate<T> validation, String message) {\r\n+  public Validator<T> validate(Predicate<? super T> validation, String message) {\r\n     if (!validation.test(obj)) {\r\n       exceptions.add(new IllegalStateException(message));\r\n     }\r\n@@ -97,8 +97,8 @@ public Validator<T> validate(Predicate<T> validation, String message) {\n    * @return this\r\n    */\r\n   public <U> Validator<T> validate(\r\n-      Function<T, U> projection,\r\n-      Predicate<U> validation,\r\n+      Function<? super T, ? extends U> projection,\r\n+      Predicate<? super U> validation,\r\n       String message\r\n   ) {\r\n     return validate(projection.andThen(validation::test)::apply, message);\r",
    "output": "Improve monad methods"
  },
  {
    "input": "diff --git a/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java b/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java\n--- a/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java\n+++ b/page-object/test-automation/src/main/java/com/iluwatar/pageobject/AlbumListPage.java\n@@ -80,11 +80,11 @@ public boolean isAt() {\n    */\n   public AlbumPage selectAlbum(String albumTitle) {\n     // uses XPath to find list of html anchor tags with the class album in it\n-    var albumLinks = (List<HtmlAnchor>) page.getByXPath(\"//tr[@class='album']//a\");\n+    var albumLinks = (List<Object>) page.getByXPath(\"//tr[@class='album']//a\");\n     for (var anchor : albumLinks) {\n-      if (anchor.getTextContent().equals(albumTitle)) {\n+      if (((HtmlAnchor) anchor).getTextContent().equals(albumTitle)) {\n         try {\n-          anchor.click();\n+          ((HtmlAnchor) anchor).click();\n           return new AlbumPage(webClient);\n         } catch (IOException e) {\n           LOGGER.error(\"An error occured on selectAlbum\", e);",
    "output": "Fix for maven warnings\n* fix for maven warnings\n* Removed unwanted dependency and htmlunit upgraded to latest\nCo-authored-by: Mohana Rao S V <mohana.rao.s.v@tietoevry.com>"
  },
  {
    "input": "diff --git a/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java b/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java\n--- a/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java\n+++ b/leader-followers/src/main/java/com/iluwatar/leaderfollowers/Worker.java\n@@ -57,9 +57,11 @@ public void run() {\n       try {\n         if (workCenter.getLeader() != null && !workCenter.getLeader().equals(this)) {\n           synchronized (workCenter) {\n-            workCenter.wait();\n+            if (workCenter.getLeader() != null && !workCenter.getLeader().equals(this)) {\n+              workCenter.wait();\n+              continue;\n+            }\n           }\n-          continue;\n         }\n         final Task task = taskSet.getTask();\n         synchronized (workCenter) {",
    "output": "Use double check to fix concurrent problem\nCo-authored-by: zhangwenhe <zhangwh@ehualu.com>"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java\n@@ -36,16 +36,12 @@ public final class ThreadSafeDoubleCheckLocking {\n \n   private static volatile ThreadSafeDoubleCheckLocking instance;\n \n-  private static boolean flag = true;\n-\n   /**\n    * private constructor to prevent client from instantiating.\n    */\n   private ThreadSafeDoubleCheckLocking() {\n     // to prevent instantiating by Reflection call\n-    if (flag) {\n-      flag = false;\n-    } else {\n+    if (instance != null) {\n       throw new IllegalStateException(\"Already initialized.\");\n     }\n   }\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -34,9 +34,7 @@ public final class ThreadSafeLazyLoadedIvoryTower {\n \n   private ThreadSafeLazyLoadedIvoryTower() {\n     // Protect against instantiation via reflection\n-    if (instance == null) {\n-      instance = this;\n-    } else {\n+    if (instance != null) {\n       throw new IllegalStateException(\"Already initialized.\");\n     }\n   }",
    "output": "Remove unnecessary and possibly not threadsafe flag"
  },
  {
    "input": "diff --git a/bridge/src/main/java/com/iluwatar/bridge/Hammer.java b/bridge/src/main/java/com/iluwatar/bridge/Hammer.java\n--- a/bridge/src/main/java/com/iluwatar/bridge/Hammer.java\n+++ b/bridge/src/main/java/com/iluwatar/bridge/Hammer.java\n@@ -43,7 +43,7 @@ public void wield() {\n \n   @Override\n   public void swing() {\n-    LOGGER.info(\"The hammer is swinged.\");\n+    LOGGER.info(\"The hammer is swung.\");\n     enchantment.apply();\n   }\n \n\ndiff --git a/bridge/src/main/java/com/iluwatar/bridge/Sword.java b/bridge/src/main/java/com/iluwatar/bridge/Sword.java\n--- a/bridge/src/main/java/com/iluwatar/bridge/Sword.java\n+++ b/bridge/src/main/java/com/iluwatar/bridge/Sword.java\n@@ -43,7 +43,7 @@ public void wield() {\n \n   @Override\n   public void swing() {\n-    LOGGER.info(\"The sword is swinged.\");\n+    LOGGER.info(\"The sword is swung.\");\n     enchantment.apply();\n   }\n ",
    "output": "Change 'swinged' to 'swung' in sword.java and hammer.java of bridge pattern\n* minor (non-coding) change\n* Update Sword.java"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/command/Goblin.java b/command/src/main/java/com/iluwatar/command/Goblin.java\n--- a/command/src/main/java/com/iluwatar/command/Goblin.java\n+++ b/command/src/main/java/com/iluwatar/command/Goblin.java\n@@ -23,16 +23,11 @@\n \n package com.iluwatar.command;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * Goblin is the target of the spells.\n  */\n public class Goblin extends Target {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Goblin.class);\n-\n   public Goblin() {\n     setSize(Size.NORMAL);\n     setVisibility(Visibility.VISIBLE);\n\ndiff --git a/command/src/main/java/com/iluwatar/command/Wizard.java b/command/src/main/java/com/iluwatar/command/Wizard.java\n--- a/command/src/main/java/com/iluwatar/command/Wizard.java\n+++ b/command/src/main/java/com/iluwatar/command/Wizard.java\n@@ -25,16 +25,12 @@\n \n import java.util.Deque;\n import java.util.LinkedList;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Wizard is the invoker of the commands.\n  */\n public class Wizard {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(Wizard.class);\n-\n   private final Deque<Runnable> undoStack = new LinkedList<>();\n   private final Deque<Runnable> redoStack = new LinkedList<>();\n ",
    "output": "Remove unused logger objects"
  },
  {
    "input": "diff --git a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n--- a/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n+++ b/dirty-flag/src/test/java/org/dirty/flag/DirtyFlagTest.java\n@@ -36,7 +36,7 @@ class DirtyFlagTest {\n   void testIsDirty() {\n     var df = new DataFetcher();\n     var countries = df.fetch();\n-    Assertions.assertTrue(countries.isEmpty());\n+    Assertions.assertFalse(countries.isEmpty());\n   }\n \n   @Test",
    "output": "Fix a test-case issue within the dirty-flag module"
  },
  {
    "input": "diff --git a/extension-objects/src/main/java/concreteextensions/Soldier.java b/extension-objects/src/main/java/concreteextensions/Soldier.java\n--- a/extension-objects/src/main/java/concreteextensions/Soldier.java\n+++ b/extension-objects/src/main/java/concreteextensions/Soldier.java\n@@ -42,7 +42,7 @@ public Soldier(SoldierUnit soldierUnit) {\n \n   @Override\n   public void soldierReady() {\n-    LOGGER.info(\"[Solider] \" + unit.getName() + \"  is ready!\");\n+    LOGGER.info(\"[Soldier] \" + unit.getName() + \" is ready!\");\n   }\n \n   public SoldierUnit getUnit() {",
    "output": "Fix a whitespace and spelling issue that was causing the test case to fail"
  },
  {
    "input": "diff --git a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n--- a/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileSelectorJFrame.java\n@@ -23,9 +23,13 @@\n \n package com.iluwatar.model.view.presenter;\n \n+import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;\n+import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;\n+\n import java.awt.Color;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+\n import javax.swing.JButton;\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n@@ -35,10 +39,6 @@\n import javax.swing.JTextArea;\n import javax.swing.JTextField;\n \n-import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;\n-import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;\n-import static javax.swing.WindowConstants.EXIT_ON_CLOSE;\n-\n /**\n  * This class is the GUI implementation of the View component in the Model-View-Presenter pattern.\n  */",
    "output": "Fix an issue with the order of imports that was causing build failures"
  },
  {
    "input": "diff --git a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n--- a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n+++ b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n@@ -26,7 +26,6 @@\n import com.iluwatar.masterworker.Input;\n import com.iluwatar.masterworker.Result;\n import com.iluwatar.masterworker.system.systemworkers.Worker;\n-import java.util.Dictionary;\n import java.util.Hashtable;\n import java.util.List;\n \n@@ -40,7 +39,7 @@\n public abstract class Master {\n   private final int numOfWorkers;\n   private final List<Worker> workers;\n-  private final Dictionary<Integer, Result<?>> allResultData;\n+  private final Hashtable<Integer, Result<?>> allResultData;\n   private int expectedNumResults;\n   private Result<?> finalResult;\n \n@@ -56,7 +55,7 @@ public Result<?> getFinalResult() {\n     return this.finalResult;\n   }\n \n-  Dictionary<Integer, Result<?>> getAllResultData() {\n+  Hashtable<Integer, Result<?>> getAllResultData() {\n     return this.allResultData;\n   }\n ",
    "output": "Remove usage of Dictionary"
  },
  {
    "input": "diff --git a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n--- a/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n+++ b/master-worker-pattern/src/main/java/com/iluwatar/masterworker/system/systemmaster/Master.java\n@@ -75,14 +75,21 @@ public void doWork(Input<?> input) {\n   }\n \n   private void divideWork(Input<?> input) {\n-    List<? extends Input<?>> dividedInput = input.divideData(numOfWorkers);\n+    var dividedInput = input.divideData(numOfWorkers);\n     if (dividedInput != null) {\n       this.expectedNumResults = dividedInput.size();\n       for (var i = 0; i < this.expectedNumResults; i++) {\n         //ith division given to ith worker in this.workers\n         this.workers.get(i).setReceivedData(this, dividedInput.get(i));\n         this.workers.get(i).start();\n       }\n+      for (var i = 0; i < this.expectedNumResults; i++) {\n+        try {\n+          this.workers.get(i).join();\n+        } catch (InterruptedException e) {\n+          System.err.println(\"Error while executing thread\");\n+        }\n+      }\n     }\n   }\n ",
    "output": "Fix test cases for master-worker-pattern"
  },
  {
    "input": "diff --git a/command/src/main/java/com/iluwatar/command/Command.java b/command/src/main/java/com/iluwatar/command/Command.java\n--- a/command/src/main/java/com/iluwatar/command/Command.java\n+++ b/command/src/main/java/com/iluwatar/command/Command.java\n@@ -27,13 +27,11 @@\n  * Interface for Commands.\r\n  */\r\n public interface Command {\r\n+  void execute(Target target);\r\n \r\n-  public void execute(Target target);\r\n+  void undo();\r\n \r\n-  public void undo();\r\n-\r\n-  public void redo();\r\n-\r\n-  public String toString();\r\n+  void redo();\r\n \r\n+  String toString();\r\n }\r",
    "output": "Remove unwanted modifiers"
  },
  {
    "input": "diff --git a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n--- a/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n+++ b/transaction-script/src/test/java/com/ashishtrivedi16/transactionscript/HotelDaoImplTest.java\n@@ -57,6 +57,7 @@ public class HotelDaoImplTest {\n   public void createSchema() throws SQLException {\n     try (var connection = DriverManager.getConnection(DB_URL);\n          var statement = connection.createStatement()) {\n+      statement.execute(RoomSchemaSql.DELETE_SCHEMA_SQL);\n       statement.execute(RoomSchemaSql.CREATE_SCHEMA_SQL);\n     }\n   }",
    "output": "Fix a test"
  },
  {
    "input": "diff --git a/pipeline/src/main/java/com/iluwatar/pipeline/App.java b/pipeline/src/main/java/com/iluwatar/pipeline/App.java\n--- a/pipeline/src/main/java/com/iluwatar/pipeline/App.java\n+++ b/pipeline/src/main/java/com/iluwatar/pipeline/App.java\n@@ -59,8 +59,9 @@ public static void main(String[] args) {\n       then is expected to receive an input of char[] array since that is the type being returned\n       by the previous handler, ConvertToCharArrayHandler.\n      */\n-    new Pipeline<>(new RemoveAlphabetsHandler())\n+    var filters = new Pipeline<>(new RemoveAlphabetsHandler())\n         .addHandler(new RemoveDigitsHandler())\n         .addHandler(new ConvertToCharArrayHandler());\n+    filters.execute(\"GoYankees123!\");\n   }\n }",
    "output": "Add explanation to Pipeline"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/Customer.java b/dao/src/main/java/com/iluwatar/dao/Customer.java\n--- a/dao/src/main/java/com/iluwatar/dao/Customer.java\n+++ b/dao/src/main/java/com/iluwatar/dao/Customer.java\n@@ -35,7 +35,7 @@ public class Customer {\n   /**\n    * Creates an instance of customer.\n    */\n-  public Customer(final int id, final String firstName, final String lastName) {\n+  public Customer(int id, String firstName, String lastName) {\n     this.id = id;\n     this.firstName = firstName;\n     this.lastName = lastName;",
    "output": "Add explanation for Dao"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -27,15 +27,13 @@\n  * <p>Thread-safe Singleton class. The instance is lazily initialized and thus needs synchronization\n  * mechanism.</p>\n  *\n- * <p>Note: if created by reflection then a singleton will not be created but multiple options\n- * in the same classloader</p>\n  */\n public final class ThreadSafeLazyLoadedIvoryTower {\n \n-  private static ThreadSafeLazyLoadedIvoryTower instance;\n+  private static volatile ThreadSafeLazyLoadedIvoryTower instance;\n \n   private ThreadSafeLazyLoadedIvoryTower() {\n-    // protect against instantiation via reflection\n+    // Protect against instantiation via reflection\n     if (instance == null) {\n       instance = this;\n     } else {\n@@ -44,13 +42,16 @@ private ThreadSafeLazyLoadedIvoryTower() {\n   }\n \n   /**\n-   * The instance gets created only when it is called for first time. Lazy-loading\n+   * The instance doesn't get created until the method is called for the first time\n    */\n   public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n     if (instance == null) {\n-      instance = new ThreadSafeLazyLoadedIvoryTower();\n+      synchronized (ThreadSafeLazyLoadedIvoryTower.class) {\n+        if (instance == null) {\n+          instance = new ThreadSafeLazyLoadedIvoryTower();\n+        }\n+      }\n     }\n-\n     return instance;\n   }\n }",
    "output": "Improve lazy loaded Singleton example"
  },
  {
    "input": "diff --git a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n--- a/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n+++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java\n@@ -23,7 +23,8 @@\n \n package com.iluwatar.trampoline;\n \n-import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Trampoline pattern allows to define recursive algorithms by iterative loop.\n@@ -32,9 +33,10 @@\n  * and to interleave the execution of functions without hard coding them together or even using\n  * threads.\n  */\n-@Slf4j\n public class TrampolineApp {\n \n+  private static final Logger log = LoggerFactory.getLogger(TrampolineApp.class);\n+\n   /**\n    * Main program for showing pattern. It does loop with factorial function.\n    */",
    "output": "Remove lombok dependency"
  },
  {
    "input": "diff --git a/ambassador/src/main/java/com/iluwatar/ambassador/App.java b/ambassador/src/main/java/com/iluwatar/ambassador/App.java\n--- a/ambassador/src/main/java/com/iluwatar/ambassador/App.java\n+++ b/ambassador/src/main/java/com/iluwatar/ambassador/App.java\n@@ -45,8 +45,8 @@ public class App {\n    * Entry point.\n    */\n   public static void main(String[] args) {\n-    Client host1 = new Client();\n-    Client host2 = new Client();\n+    var host1 = new Client();\n+    var host2 = new Client();\n     host1.useService(12);\n     host2.useService(73);\n   }",
    "output": "Upgrade Ambassador readme"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n@@ -41,7 +41,8 @@ public final class InitializingOnDemandHolderIdiom {\n   /**\n    * Private constructor.\n    */\n-  private InitializingOnDemandHolderIdiom() {}\n+  private InitializingOnDemandHolderIdiom() {\n+  }\n \n   /**\n    * Sigleton instance.\n\ndiff --git a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n@@ -31,7 +31,8 @@ public final class IvoryTower {\n   /**\r\n    * Private constructor so nobody can instantiate the class.\r\n    */\r\n-  private IvoryTower() {}\r\n+  private IvoryTower() {\r\n+  }\r\n \r\n   /**\r\n    * Static to class instance of the class.\r",
    "output": "Fix remaining Checkstyle errors for Singleton"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/sampledata/SampleData.java\n@@ -102,8 +102,7 @@ public static void submitTickets(LotteryService lotteryService, int numTickets)\n   }\n \n   private static PlayerDetails getRandomPlayerDetails() {\n-    Random random = new Random();\n-    int idx = random.nextInt(PLAYERS.size());\n+    int idx = RANDOM.nextInt(PLAYERS.size());\n     return PLAYERS.get(idx);\n   }\n }\n\ndiff --git a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n--- a/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n+++ b/typeobjectpattern/src/main/java/com/iluwatar/typeobject/CellPool.java\n@@ -71,8 +71,7 @@ Cell getNewCell() {\n   }\n   \n   void addNewCell(Cell c) {\n-    Random rand = new Random();\n-    c.candy = randomCode[rand.nextInt(randomCode.length)]; //changing candytype to new\n+    c.candy = randomCode[RANDOM.nextInt(randomCode.length)]; //changing candytype to new\n     this.pool.add(c);\n     pointer++;\n   }",
    "output": "Fix the two remaining SonarCloud errors The two remaining files were still creating a Random everytime the method was called. These were missed in the previous commit because the previous commit had fixed only one of the methods; in other words, there were multiple methods that were creating the Random object on each call"
  },
  {
    "input": "diff --git a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n--- a/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n+++ b/role-object/src/main/java/com/iluwatar/roleobject/ApplicationRoleObject.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar.roleobject;\n+\n+public class ApplicationRoleObject {\n+    public static void main(String[] args) {\n+        System.out.println(\"Role-object\");\n+    }\n+}",
    "output": "Add to init"
  },
  {
    "input": "diff --git a/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java\n--- a/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java\n+++ b/spatial-partition/src/main/java/com/iluwatar/spatialpartition/Rect.java\n@@ -28,14 +28,14 @@\n  */\n \n public class Rect {\n-  int x; \n-  int y; \n-  int width;\n-  int height;\n+  double x;\n+  double y;\n+  double width;\n+  double height;\n \n   //(x,y) - centre of rectangle\n \n-  Rect(int x, int y, int width, int height) {\n+  Rect(double x, double y, double width, double height) {\n     this.x = x;\n     this.y = y;\n     this.width = width;",
    "output": "Fix intermittent test failure"
  },
  {
    "input": "diff --git a/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java b/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n--- a/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n+++ b/twin/src/test/java/com/iluwatar/twin/BallThreadTest.java\n@@ -84,7 +84,7 @@ public void testResume() {\n       verifyZeroInteractions(ballItem);\n \n       ballThread.resumeMe();\n-      sleep(200);\n+      sleep(300);\n       verify(ballItem, atLeastOnce()).draw();\n       verify(ballItem, atLeastOnce()).move();\n ",
    "output": "Fix for BallThreadTest#testResume\n* Fix for flaky test\n* Remove other file changes\n* Remove other file changes\n* Remove other file changes not related to bug"
  },
  {
    "input": "diff --git a/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java b/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java\n--- a/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java\n+++ b/facade/src/main/java/com/iluwatar/facade/DwarvenMineWorker.java\n@@ -86,7 +86,7 @@ public void action(Action... actions) {\n \r\n   public abstract String name();\r\n \r\n-  static enum Action {\r\n+  enum Action {\r\n     GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK\r\n   }\r\n }\r",
    "output": "Remove unnecessary static modifier on enum definition"
  },
  {
    "input": "diff --git a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayerTest.java\n@@ -52,7 +52,7 @@ public void testGoToBattle() {\n    * Verify if the dragon slayer uses the new strategy during battle after a change of strategy\n    */\n   @Test\n-  public void testChangeStrategy() throws Exception {\n+  public void testChangeStrategy() {\n     final DragonSlayingStrategy initialStrategy = mock(DragonSlayingStrategy.class);\n     final DragonSlayer dragonSlayer = new DragonSlayer(initialStrategy);\n ",
    "output": "Remove redundant Exception from throws list in DragonSlayerTest"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java\n@@ -22,13 +22,12 @@\n  */\n package com.iluwatar.hexagonal.domain;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.PrimitiveIterator;\n import java.util.Random;\n import java.util.Set;\n+import java.util.Iterator;\n \n /**\n  *\n@@ -85,11 +84,10 @@ public Set<Integer> getNumbers() {\n    * @return numbers as comma separated string\n    */\n   public String getNumbersAsString() {\n-    List<Integer> list = new ArrayList<>();\n-    list.addAll(numbers);\n     StringBuilder builder = new StringBuilder();\n+    Iterator<Integer> iterator = numbers.iterator();\n     for (int i = 0; i < NUM_NUMBERS; i++) {\n-      builder.append(list.get(i));\n+      builder.append(iterator.next());\n       if (i < NUM_NUMBERS - 1) {\n         builder.append(\",\");\n       }",
    "output": "Fix redundant list alloc in LotteryNumbers"
  },
  {
    "input": "diff --git a/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n--- a/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n+++ b/execute-around/src/main/java/com/iluwatar/execute/around/SimpleFileWriter.java\n@@ -37,11 +37,8 @@ public class SimpleFileWriter {\n    * Constructor\n    */\n   public SimpleFileWriter(String filename, FileWriterAction action) throws IOException {\n-    FileWriter writer = new FileWriter(filename);\n-    try {\n+    try (FileWriter writer = new FileWriter(filename)) {\n       action.writeFile(writer);\n-    } finally {\n-      writer.close();\n     }\n   }\n }",
    "output": "Use try-with-resources\nReplace try statements that close a resource in the finally block with a\ntry-with-resources statement [1].\nThis commit was created automatically by Diffblue refactorings (https://www.diffblue.com/).\n[1] https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n@@ -25,6 +25,6 @@\n /**\n  * ZoomVisitor interface\n  */\n-public interface ZoomVisitor extends ModemVisitor{\n+public interface ZoomVisitor extends ModemVisitor {\n   void visit(Zoom zoom);\n }\n\ndiff --git a/retry/src/main/java/com/iluwatar/retry/Retry.java b/retry/src/main/java/com/iluwatar/retry/Retry.java\n--- a/retry/src/main/java/com/iluwatar/retry/Retry.java\n+++ b/retry/src/main/java/com/iluwatar/retry/Retry.java\n@@ -105,6 +105,7 @@ public T perform() throws BusinessException {\n           //ignore\n         }\n       }\n-    } while (true);\n+    }\n+    while (true);\n   }\n }",
    "output": "Fix minor changes suggested by Checkstyle"
  },
  {
    "input": "diff --git a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n--- a/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n+++ b/reactor/src/main/java/com/iluwatar/reactor/app/AppClient.java\n@@ -51,7 +51,7 @@ public class AppClient {\n \n   /**\n    * App client entry.\n-   * \n+   *\n    * @throws IOException if any I/O error occurs.\n    */\n   public static void main(String[] args) throws IOException {\n@@ -61,7 +61,7 @@ public static void main(String[] args) throws IOException {\n \n   /**\n    * Starts the logging clients.\n-   * \n+   *\n    * @throws IOException if any I/O error occurs.\n    */\n   public void start() throws IOException {\n@@ -106,7 +106,7 @@ static class TcpLoggingClient implements Runnable {\n \n     /**\n      * Creates a new TCP logging client.\n-     * \n+     *\n      * @param clientName the name of the client to be sent in logging requests.\n      * @param serverPort the port on which client will send logging requests.\n      */\n@@ -115,6 +115,7 @@ public TcpLoggingClient(String clientName, int serverPort) {\n       this.serverPort = serverPort;\n     }\n \n+    @Override\n     public void run() {\n       try (Socket socket = new Socket(InetAddress.getLocalHost(), serverPort)) {\n         OutputStream outputStream = socket.getOutputStream();\n@@ -154,7 +155,7 @@ static class UdpLoggingClient implements Runnable {\n \n     /**\n      * Creates a new UDP logging client.\n-     * \n+     *\n      * @param clientName the name of the client to be sent in logging requests.\n      * @param port the port on which client will send logging requests.\n      * @throws UnknownHostException if localhost is unknown",
    "output": "Add Annotation 'Override' to com.iluwatar.reactor.app.AppClient.TcpLoggingClient.run method"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/service/LotteryConsoleServiceImpl.java\n@@ -1,6 +1,5 @@\n package com.iluwatar.hexagonal.service;\n \n-import com.google.inject.Inject;\n import com.iluwatar.hexagonal.banking.WireTransfers;\n import com.iluwatar.hexagonal.domain.*;\n import org.slf4j.Logger;",
    "output": "Fix import not used"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/HayesVisitor.java\n@@ -25,6 +25,6 @@\n /**\n  * HayesVisitor interface\n  */\n-public interface HayesVisitor {\n+public interface HayesVisitor extends ModemVisitor {\n   void visit(Hayes hayes);\n }\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ZoomVisitor.java\n@@ -25,6 +25,6 @@\n /**\n  * ZoomVisitor interface\n  */\n-public interface ZoomVisitor {\n+public interface ZoomVisitor extends ModemVisitor{\n   void visit(Zoom zoom);\n }",
    "output": "Upgrade HayesVisitor and ZoomVisitor"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n--- a/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n+++ b/acyclic-visitor/src/test/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitorTest.java\n@@ -62,14 +62,4 @@ public void testVisitForZoom() {\n     assertThat(logger.getLoggingEvents()).extracting(\"level\", \"message\").contains(\n         tuple(INFO, zoom + \" used with Unix configurator.\"));\n   }\n-  \n-  @Test\n-  public void testVisitForHayes() {\n-    ConfigureForUnixVisitor conUnix = new ConfigureForUnixVisitor();\n-    Hayes hayes = mock(Hayes.class);\n-    \n-    Assertions.assertThrows(ClassCastException.class, () -> {\n-      ((HayesVisitor)conUnix).visit(hayes);\n-    });    \n-  }\n }",
    "output": "Remove test case"
  },
  {
    "input": "diff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java\n@@ -32,10 +32,6 @@ public class Hayes extends Modem {\n   \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n \n-  public Hayes() {\n-\n-  }\n-\n   /**\n    * Accept visitor\n    */\n\ndiff --git a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n--- a/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java\n@@ -32,10 +32,6 @@ public class Zoom extends Modem {\n   \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigureForDosVisitor.class);\n \n-  public Zoom() {\n-    \n-  }\n-\n   /**\n    * Accept visitor\n    */",
    "output": "Remove default constructors"
  },
  {
    "input": "diff --git a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n--- a/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n+++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java\n@@ -22,29 +22,27 @@\n  */\n package com.iluwatar.throttling;\n \n-import com.iluwatar.throttling.timer.ThrottleTimerImpl;\n import com.iluwatar.throttling.timer.Throttler;\n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n /**\n  * B2BServiceTest class to test the B2BService\n  */\n public class B2BServiceTest {\n \n-  @Disabled\n   @Test\n   public void dummyCustomerApiTest() {\n     Tenant tenant = new Tenant(\"testTenant\", 2);\n-    Throttler timer = new ThrottleTimerImpl(100);\n+    // In order to assure that throttling limits will not be reset, we use an empty throttling implementation\n+    Throttler timer = () -> {};\n     B2BService service = new B2BService(timer);\n \n     for (int i = 0; i < 5; i++) {\n       service.dummyCustomerApi(tenant);\n     }\n     long counter = CallsCount.getCount(tenant.getName());\n-    assertTrue(counter == 2, \"Counter limit must be reached\");\n+    assertEquals(2, counter, \"Counter limit must be reached\");\n   }\n }",
    "output": "Fix flaky tests for throttling pattern"
  },
  {
    "input": "diff --git a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n--- a/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n+++ b/dirty-flag/src/main/java/com/iluwatar/dirtyflag/App.java\n@@ -27,9 +27,6 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  *\n  * This application demonstrates the <b>Dirty Flag</b> pattern. The dirty flag behavioral pattern allows you to avoid\n@@ -51,9 +48,6 @@\n  * when needed. {@link World} mainly serves the data to the front-end.\n  */\n public class App {\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n-\n   /**\n    * Program execution point\n    */",
    "output": "Remove unused var"
  },
  {
    "input": "diff --git a/command/src/test/java/com/iluwatar/command/CommandTest.java b/command/src/test/java/com/iluwatar/command/CommandTest.java\n--- a/command/src/test/java/com/iluwatar/command/CommandTest.java\n+++ b/command/src/test/java/com/iluwatar/command/CommandTest.java\n@@ -81,13 +81,13 @@ public void testCommand() {\n    * @param goblin a goblin object whose state is to be verified against other parameters\n    * @param expectedName expectedName of the goblin\n    * @param expectedSize expected size of the goblin\n-   * @param expectedVisibilty exepcted visibility of the goblin\n+   * @param expectedVisibility expected visibility of the goblin\n    */\n   private void verifyGoblin(Goblin goblin, String expectedName, Size expectedSize,\n-      Visibility expectedVisibilty) {\n+      Visibility expectedVisibility) {\n     assertEquals(\"Goblin's name must be same as expectedName\", expectedName, goblin.toString());\n     assertEquals(\"Goblin's size must be same as expectedSize\", expectedSize, goblin.getSize());\n-    assertEquals(\"Goblin's visibility must be same as expectedVisibility\", expectedVisibilty,\n+    assertEquals(\"Goblin's visibility must be same as expectedVisibility\", expectedVisibility,\n         goblin.getVisibility());\n   }\n }",
    "output": "Fix typo\n'exepcted'->'expected'\n'expectedVisibilty'->'expectedVisibility'"
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java\n@@ -35,10 +35,10 @@\n \n public class LoadBalancer {\n   private static List<Server> servers = new ArrayList<>();\n-  private static int id;\n   private static int lastServedId;\n \n   static {\n+    int id = 0;\n     servers.add(new Server(\"localhost\", 8081, ++id));\n     servers.add(new Server(\"localhost\", 8080, ++id));\n     servers.add(new Server(\"localhost\", 8082, ++id));\n@@ -67,14 +67,12 @@ public static int getLastServedId() {\n   /**\n    * Handle request\n    */\n-  public void serverRequest(Request request) {\n+  public synchronized void serverRequest(Request request) {\n     if (lastServedId >= servers.size()) {\n       lastServedId = 0;\n     }\n     Server server = servers.get(lastServedId++);\n     server.serve(request);\n   }\n-\n-\n-\n+  \n }",
    "output": "Add synchronized keyword to method that reads from server poll"
  },
  {
    "input": "diff --git a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n--- a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n+++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n@@ -1,7 +1,6 @@\n package com.iluwatar.eip.aggregator.routes;\n \n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.processor.aggregate.AggregationStrategy;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n ",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n--- a/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n+++ b/eip-aggregator/src/main/java/com/iluwatar/eip/aggregator/routes/AggregatorRoute.java\n@@ -32,6 +32,8 @@ public class AggregatorRoute extends RouteBuilder {\n   @Override\n   public void configure() throws Exception {\n     // Main route\n-    from(\"{{entry}}\").aggregate(constant(true), aggregator).completionSize(3).completionInterval(2000).to(\"{{endpoint}}\");\n+    from(\"{{entry}}\").aggregate(constant(true), aggregator)\n+        .completionSize(3).completionInterval(2000)\n+        .to(\"{{endpoint}}\");\n   }\n }",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/App.java b/converter/src/main/java/com/iluwatar/converter/App.java\n--- a/converter/src/main/java/com/iluwatar/converter/App.java\n+++ b/converter/src/main/java/com/iluwatar/converter/App.java\n@@ -41,10 +41,7 @@ public class App {\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n-    Converter<UserDto, User> userConverter = new Converter<>(\n-        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive(),\n-          userDto.getEmail()),\n-        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive(), user.getUserId()));\n+    Converter<UserDto, User> userConverter = new UserConverter();\n \n     UserDto dtoUser = new UserDto(\"John\", \"Doe\", true, \"whatever[at]wherever.com\");\n     User user = userConverter.convertFromDto(dtoUser);",
    "output": "Use UserConverter instead of rewriting its ctor"
  },
  {
    "input": "diff --git a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n--- a/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n+++ b/eip-wire-tap/src/main/java/com/iluwatar/eip/wiretap/App.java\n@@ -25,7 +25,7 @@ public class App {\n    *\n    * @param args command line args\n    */\n-  public static void main(String[] args) throws Exception{\n+  public static void main(String[] args) throws Exception {\n     // Run Spring Boot application and obtain ApplicationContext\n     ConfigurableApplicationContext context = SpringApplication.run(App.class, args);\n ",
    "output": "Fix CheckStyle issue"
  },
  {
    "input": "diff --git a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n--- a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n+++ b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/AppTest.java\n@@ -0,0 +1,15 @@\n+package com.iluwatar.eip.wiretap;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test for App class\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void testMain() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}\n\ndiff --git a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java\n--- a/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java\n+++ b/eip-wire-tap/src/test/java/com/iluwatar/eip/wiretap/routes/WireTapRouteTest.java\n@@ -1,4 +1,4 @@\n-package com.iluwatar.eip.wiretap;\n+package com.iluwatar.eip.wiretap.routes;\n \n import org.apache.camel.EndpointInject;\n import org.apache.camel.Message;",
    "output": "Add test class for App"
  },
  {
    "input": "diff --git a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n--- a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n+++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n@@ -56,7 +56,7 @@ public static Collection<Object[]> data() {\n   /**\n    * The tested prototype instance\n    */\n-  private final Prototype testedPrototype;\n+  private final P testedPrototype;\n \n   /**\n    * The expected {@link Prototype#toString()} value\n@@ -69,7 +69,7 @@ public static Collection<Object[]> data() {\n    * @param testedPrototype  The tested prototype instance\n    * @param expectedToString The expected {@link Prototype#toString()} value\n    */\n-  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n+  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }",
    "output": "Fix unused generic type in PrototypeTest"
  },
  {
    "input": "diff --git a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n--- a/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java\n@@ -95,7 +95,7 @@ public void testElfBlacksmithWithSpear() {\n    */\n   private void verifyWeapon(Weapon weapon, WeaponType expectedWeaponType, Class<?> clazz) {\n     assertTrue(\"Weapon must be an object of: \" + clazz.getName(), clazz.isInstance(weapon));\n-    assertEquals(\"Weapon must be of weaponType: \" + clazz.getName(), expectedWeaponType,\n+    assertEquals(\"Weapon must be of weaponType: \" + expectedWeaponType, expectedWeaponType,\n         weapon.getWeaponType());\n   }\n }",
    "output": "Fix test message"
  },
  {
    "input": "diff --git a/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java\n--- a/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java\n+++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java\n@@ -44,15 +44,15 @@ protected final void testBasicWeaponActions(final Weapon weapon) {\n     assertNotNull(weapon.getEnchantment());\n \n     weapon.swing();\n-    verify(enchantment, times(1)).apply();\n+    verify(enchantment).apply();\n     verifyNoMoreInteractions(enchantment);\n \n     weapon.wield();\n-    verify(enchantment, times(1)).onActivate();\n+    verify(enchantment).onActivate();\n     verifyNoMoreInteractions(enchantment);\n \n     weapon.unwield();\n-    verify(enchantment, times(1)).onDeactivate();\n+    verify(enchantment).onDeactivate();\n     verifyNoMoreInteractions(enchantment);\n \n   }",
    "output": "Remove redundant times(1) params for verify()"
  },
  {
    "input": "diff --git a/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java\n--- a/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java\n+++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java\n@@ -55,7 +55,7 @@ public synchronized void checkIn(T instance) {\n   }\n \n   @Override\n-  public String toString() {\n+  public synchronized String toString() {\n     return String.format(\"Pool available=%d inUse=%d\", available.size(), inUse.size());\n   }\n }",
    "output": "Make toString synchronized"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java b/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java\n--- a/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java\n+++ b/adapter/src/main/java/com/iluwatar/adapter/FishingBoatAdapter.java\n@@ -22,9 +22,6 @@\n  */\n package com.iluwatar.adapter;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  *\n  * Adapter class. Adapts the interface of the device ({@link FishingBoat}) into {@link RowingBoat}\n@@ -33,8 +30,6 @@\n  */\n public class FishingBoatAdapter implements RowingBoat {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(FishingBoatAdapter.class);\n-\n   private FishingBoat boat;\n \n   public FishingBoatAdapter() {",
    "output": "Fix PMD issue"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java\n@@ -23,6 +23,9 @@ private Author getAuthorByUsername(String username) {\n       query.setParameter(\"username\", username);\n       author = (Author) query.uniqueResult();\n     }\n+    if (author == null) {\n+      throw new NullPointerException(\"Author \" + username + \" doesn't exist!\");\n+    }\n     return author;\n   }\n \n@@ -33,6 +36,9 @@ private Book getBookByTitle(String title) {\n       query.setParameter(\"title\", title);\n       book = (Book) query.uniqueResult();\n     }\n+    if (book == null) {\n+      throw new NullPointerException(\"Book \" + title + \" doesn't exist!\");\n+    }\n     return book;\n   }\n ",
    "output": "Add check on null objects"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/IQueryService.java\n@@ -1,5 +1,6 @@\n package com.iluwatar.cqrs.queries;\n \n+import java.math.BigInteger;\n import java.util.List;\n \n import com.iluwatar.cqrs.dto.AuthorDTO;\n@@ -9,12 +10,12 @@ public interface IQueryService {\n \n   public abstract AuthorDTO getAuthorByUsername(String username);\n \n-  public abstract Double getBookPrice(String title);\n+  public abstract BookDTO getBook(String title);\n \n   public abstract List<BookDTO> getAuthorBooks(String username);\n \n-  public abstract long getAuthorBooksCount(String username);\n+  public abstract BigInteger getAuthorBooksCount(String username);\n \n-  public abstract long getAuthorsCount();\n+  public abstract BigInteger getAuthorsCount();\n \n }",
    "output": "Change long with BigIntger and replace getBook()"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java b/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/dto/BookDTO.java\n@@ -23,4 +23,9 @@ public double getPrice() {\n     return price;\n   }\n \n+  @Override\n+  public String toString() {\n+    return \"BookDTO [title=\" + title + \", price=\" + price + \"]\";\n+  }\n+\n }",
    "output": "Add toString() to BookDTO"
  },
  {
    "input": "diff --git a/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java b/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java\n--- a/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java\n+++ b/cqrs/src/main/java/com/iluwatar/cqrs/util/HibernateUtil.java\n@@ -0,0 +1,36 @@\n+package com.iluwatar.cqrs.util;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.boot.MetadataSources;\n+import org.hibernate.boot.registry.StandardServiceRegistry;\n+import org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n+\n+/**\n+ * \n+ * @author Sabiq Ihab\n+ *\n+ */\n+public class HibernateUtil {\n+\n+  private static final SessionFactory SESSIONFACTORY = buildSessionFactory();\n+\n+  private static SessionFactory buildSessionFactory() {\n+    // A SessionFactory is set up once for an application!\n+    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure() // configures settings //\n+                                                                                              // from hibernate.cfg.xml\n+        .build();\n+    try {\n+      return new MetadataSources(registry).buildMetadata().buildSessionFactory();\n+    } catch (Throwable ex) {\n+      StandardServiceRegistryBuilder.destroy(registry);\n+      // TODO HibernateUtil : change print with logger\n+      System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n+      throw new ExceptionInInitializerError(ex);\n+    }\n+  }\n+\n+  public static SessionFactory getSessionFactory() {\n+    return SESSIONFACTORY;\n+  }\n+\n+}",
    "output": "Add hibernate.cfg and HibernateUtil class"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -33,7 +33,12 @@ public final class ThreadSafeLazyLoadedIvoryTower {\n \n   private static ThreadSafeLazyLoadedIvoryTower instance;\n \n-  private ThreadSafeLazyLoadedIvoryTower() {}\n+  private ThreadSafeLazyLoadedIvoryTower() {\n+  // to prevent instantiating by Reflection call\n+    if (instance != null) {\n+      throw new IllegalStateException(\"Already initialized.\");\n+    }\n+  }\n \n   /**\n    * The instance gets created only when it is called for first time. Lazy-loading",
    "output": "Upgrade ThreadSafeLazyLoadedivoryTower Added null check in private constructor to prevent instantiating by Reflection call"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/App.java\n@@ -25,6 +25,7 @@\n \n import com.iluwatar.featuretoggle.pattern.Service;\n import com.iluwatar.featuretoggle.pattern.propertiesversion.PropertiesFeatureToggleVersion;\n+import com.iluwatar.featuretoggle.pattern.tieredversion.TieredFeatureToggleVersion;\n import com.iluwatar.featuretoggle.user.User;\n import com.iluwatar.featuretoggle.user.UserGroup;\n import org.slf4j.Logger;\n@@ -85,15 +86,17 @@ public static void main(String[] args) {\n     LOGGER.info(welcomeMessageturnedOff);\n \n     // --------------------------------------------\n+    \n+    Service service2 = new TieredFeatureToggleVersion();\n \n     final User paidUser = new User(\"Jamie Coder\");\n     final User freeUser = new User(\"Alan Defect\");\n \n     UserGroup.addUserToPaidGroup(paidUser);\n     UserGroup.addUserToFreeGroup(freeUser);\n \n-    final String welcomeMessagePaidUser = service.getWelcomeMessage(paidUser);\n-    final String welcomeMessageFreeUser = service.getWelcomeMessage(freeUser);\n+    final String welcomeMessagePaidUser = service2.getWelcomeMessage(paidUser);\n+    final String welcomeMessageFreeUser = service2.getWelcomeMessage(freeUser);\n     LOGGER.info(welcomeMessageFreeUser);\n     LOGGER.info(welcomeMessagePaidUser);\n   }",
    "output": "Fix Block 3 case"
  },
  {
    "input": "diff --git a/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java b/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java\n--- a/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java\n+++ b/event-queue/src/test/java/com/iluwatar/event/queue/AudioTest.java\n@@ -62,9 +62,9 @@ public void testPlaySound() throws UnsupportedAudioFileException, IOException, I\n    */\n   @Test\n   public void testQueue() throws UnsupportedAudioFileException, IOException, InterruptedException {\n-    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.wav\"), -10.0f);\n-    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.wav\"), -10.0f);\n-    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.wav\"), -10.0f);\n+    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.aif\"), -10.0f);\n+    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.aif\"), -10.0f);\n+    Audio.playSound(Audio.getAudioStream(\"./etc/Bass-Drum-1.aif\"), -10.0f);\n     assertTrue(Audio.getPendingAudio().length > 0);\n     // test that service is started\n     assertTrue(Audio.isServiceRunning());",
    "output": "Add travis supported sound files"
  },
  {
    "input": "diff --git a/tls/src/main/java/com/iluwatar/tls/App.java b/tls/src/main/java/com/iluwatar/tls/App.java\n--- a/tls/src/main/java/com/iluwatar/tls/App.java\n+++ b/tls/src/main/java/com/iluwatar/tls/App.java\n@@ -104,7 +104,7 @@ public static void main(String[] args) {\n       System.out.println(\"The List exceptionList contains \" + counterExceptions + \" exceptions\");\n \n     } catch (Exception e) {\n-      System.out.println(\"Abnormal end of program. Program throws exception: \"); \n+      System.out.println(\"Abnormal end of program. Program throws exception: \" + e); \n     }\n     executor.shutdown();\n   }",
    "output": "Upgrade App.java Correction of correction ;-)"
  },
  {
    "input": "diff --git a/tls/src/main/java/com/iluwatar/tls/App.java b/tls/src/main/java/com/iluwatar/tls/App.java\n--- a/tls/src/main/java/com/iluwatar/tls/App.java\n+++ b/tls/src/main/java/com/iluwatar/tls/App.java\n@@ -104,7 +104,7 @@ public static void main(String[] args) {\n       System.out.println(\"The List exceptionList contains \" + counterExceptions + \" exceptions\");\n \n     } catch (Exception e) {\n-      // no action here \n+      System.out.println(\"Abnormal end of program. Program throws exception: \"); \n     }\n     executor.shutdown();\n   }",
    "output": "Upgrade App.java Correction of error detected by maven-pmd-plugin"
  },
  {
    "input": "diff --git a/converter/src/main/java/com/iluwatar/converter/App.java b/converter/src/main/java/com/iluwatar/converter/App.java\n--- a/converter/src/main/java/com/iluwatar/converter/App.java\n+++ b/converter/src/main/java/com/iluwatar/converter/App.java\n@@ -48,7 +48,7 @@ public static void main(String[] args) {\n \n     UserDto dtoUser = new UserDto(\"John\", \"Doe\", true, \"whatever[at]wherever.com\");\n     User user = userConverter.convertFromDto(dtoUser);\n-    UserDto dtoUserCopy = userConverter.convertFromEntity(user);\n+    System.out.println(\"Entity converted from DTO:\" + user);\n \n     ArrayList<User> users = Lists.newArrayList(new User(\"Camile\", \"Tough\", false, \"124sad\"),\n         new User(\"Marti\", \"Luther\", true, \"42309fd\"), new User(\"Kate\", \"Smith\", true, \"if0243\"));",
    "output": "Fix pmd violation"
  },
  {
    "input": "diff --git a/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java\n--- a/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java\n+++ b/dao/src/main/java/com/iluwatar/dao/CustomerSchemaSql.java\n@@ -22,10 +22,13 @@\n  */\n package com.iluwatar.dao;\n \n-public interface CustomerSchemaSql {\n+public final class CustomerSchemaSql {\n \n-  String CREATE_SCHEMA_SQL = \"CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), \" \n+  private CustomerSchemaSql() {}\n+\n+  public static final String CREATE_SCHEMA_SQL = \"CREATE TABLE CUSTOMERS (ID NUMBER, FNAME VARCHAR(100), \" \n       + \"LNAME VARCHAR(100))\";\n   \n-  String DELETE_SCHEMA_SQL = \"DROP TABLE CUSTOMERS\";\n+  public static final String DELETE_SCHEMA_SQL = \"DROP TABLE CUSTOMERS\";\n+  \n }",
    "output": "Change constant interface pattern with a Noninstantiable class"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java\n@@ -27,22 +27,24 @@\n  */\r\n public final class IvoryTower {\r\n \r\n-  /**\r\n-   * Static to class instance of the class.\r\n-   */\r\n-  private static final IvoryTower INSTANCE = new IvoryTower();\r\n-\r\n   /**\r\n    * Private constructor so nobody can instantiate the class.\r\n    */\r\n   private IvoryTower() {}\r\n \r\n+  private static class IvoryTowerHolder {\r\n+    /**\r\n+   * Static to class instance of the class.\r\n+   */\r\n+    private static final IvoryTower INSTANCE = new IvoryTower();\r\n+  }\r\n+\r\n   /**\r\n    * To be called by user to obtain instance of the class.\r\n    *\r\n    * @return instance of the singleton.\r\n    */\r\n   public static IvoryTower getInstance() {\r\n-    return INSTANCE;\r\n+    return IvoryTowerHolder.INSTANCE;\r\n   }\r\n }\r",
    "output": "Add initialization on demand holder idiom"
  },
  {
    "input": "diff --git a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java\n--- a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java\n+++ b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageQueueTest.java\n@@ -23,7 +23,7 @@\n package org.queue.load.leveling;\n \n import org.junit.Test;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * \n\ndiff --git a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java\n--- a/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java\n+++ b/queue-load-leveling/src/test/java/org/queue/load/leveling/MessageTest.java\n@@ -23,7 +23,7 @@\n package org.queue.load.leveling;\n \n import org.junit.Test;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * ",
    "output": "Remove unused imports in tests"
  },
  {
    "input": "diff --git a/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java b/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java\n--- a/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java\n+++ b/queue-load-leveling/src/main/java/org/queue/load/leveling/Task.java\n@@ -26,5 +26,5 @@\n  * \n */\n public interface Task {\n-  public void submit(Message msg);\n+  void submit(Message msg);\n }",
    "output": "Fix PMD issue"
  },
  {
    "input": "diff --git a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java\n--- a/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java\n+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/IEvent.java\n@@ -18,10 +18,10 @@\n \n public interface IEvent {\n \n-  public void start();\n+  void start();\n \n-  public void stop();\n+  void stop();\n \n-  public void status();\n+  void status();\n \n }",
    "output": "Remove PUBLIC modifiers from IEvent"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/InitializingOnDemandHolderIdiom.java\n@@ -53,7 +53,7 @@ public static InitializingOnDemandHolderIdiom getInstance() {\n    * Provides the lazy-loaded Singleton instance.\n    */\n   private static class HelperHolder {\n-    public static final InitializingOnDemandHolderIdiom INSTANCE =\n+    private static final InitializingOnDemandHolderIdiom INSTANCE =\n         new InitializingOnDemandHolderIdiom();\n   }\n }",
    "output": "Change access level to private"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeLazyLoadedIvoryTower.java\n@@ -38,7 +38,7 @@ private ThreadSafeLazyLoadedIvoryTower() {}\n   /**\n    * The instance gets created only when it is called for first time. Lazy-loading\n    */\n-  public  static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n+  public static synchronized ThreadSafeLazyLoadedIvoryTower getInstance() {\n \n     if (instance == null) {\n       instance = new ThreadSafeLazyLoadedIvoryTower();",
    "output": "Remove extra space"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/App.java\n@@ -69,7 +69,7 @@\n  */\n public class App {\n   \n-  private static List<PlayerDetails> allPlayerDetails;\n+  private static final List<PlayerDetails> allPlayerDetails;\n   \n   static {\n     allPlayerDetails = new ArrayList<>();",
    "output": "Add final keyword"
  },
  {
    "input": "diff --git a/page-object/src/main/java/com/iluwatar/pageobject/App.java b/page-object/src/main/java/com/iluwatar/pageobject/App.java\n--- a/page-object/src/main/java/com/iluwatar/pageobject/App.java\n+++ b/page-object/src/main/java/com/iluwatar/pageobject/App.java\n@@ -69,25 +69,21 @@ private App() {\n    */\n   public static void main(String[] args) {\n \n-    String currentWorkingDir = System.getProperty(\"user.dir\");\n-    File applicationFile = new File(currentWorkingDir\n-        + \"/page-object/src/main/resources/sample-ui/login.html\");\n+    try {\n+      File applicationFile = new File(App.class.getClassLoader().getResource(\"sample-ui/login.html\").getPath());\n \n-    // should work for unix like OS (mac, unix etc...)\n-    if (Desktop.isDesktopSupported()) {\n-      try {\n+      // should work for unix like OS (mac, unix etc...)\n+      if (Desktop.isDesktopSupported()) {\n         Desktop.getDesktop().open(applicationFile);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n-      }\n-    } else {\n-      // java Desktop not supported - above unlikely to work for Windows so try following instead...\n-      try {\n+\n+      } else {\n+        // java Desktop not supported - above unlikely to work for Windows so try following instead...\n         Runtime.getRuntime().exec(\"cmd.exe start \" + applicationFile);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n       }\n \n+    } catch (IOException ex) {\n+      ex.printStackTrace();\n     }\n+\n   }\n }",
    "output": "Fix app launch"
  },
  {
    "input": "diff --git a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n--- a/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n+++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/administration/LotteryAdministrationImpl.java\n@@ -45,6 +45,10 @@\n  */\n public class LotteryAdministrationImpl implements LotteryAdministration {\n \n+  private static final int WIN_AMOUNT = 100000;\n+\n+  private static final String PRIZE_PAYER_BANK_ACCOUNT = \"123-123\";\n+  \n   private final LotteryTicketRepository repository;\n \n   private final LotteryService service = new LotteryServiceImpl();\n@@ -69,8 +73,8 @@ public LotteryNumbers performLottery() {\n     for (LotteryTicketId id: tickets.keySet()) {\n       LotteryTicketCheckResult result = service.checkTicketForPrize(id, numbers);\n       if (result.equals(CheckResult.WIN_PRIZE)) {\n-        bank.transferFunds(1000, \"123-123\", tickets.get(id).getPlayerDetails().getBankAccount());\n-        notifications.notifyPrize(tickets.get(id).getPlayerDetails(), 1000);\n+        bank.transferFunds(WIN_AMOUNT, PRIZE_PAYER_BANK_ACCOUNT, tickets.get(id).getPlayerDetails().getBankAccount());\n+        notifications.notifyPrize(tickets.get(id).getPlayerDetails(), WIN_AMOUNT);\n       } else if (result.equals(CheckResult.NO_PRIZE)) {\n         notifications.notifyNoWin(tickets.get(id).getPlayerDetails());\n       }",
    "output": "Add constants for win sum and prize payer's bank account"
  },
  {
    "input": "diff --git a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n--- a/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n+++ b/strategy/src/test/java/com/iluwatar/strategy/DragonSlayingStrategyTest.java\n@@ -52,7 +52,7 @@ public static Collection<Object[]> data() {\n     return Arrays.asList(\n         new Object[]{\n             new MeleeStrategy(),\n-            \"With your Excalibur you severe the dragon's head!\"\n+            \"With your Excalibur you sever the dragon's head!\"\n         },\n         new Object[]{\n             new ProjectileStrategy(),",
    "output": "Upgrade failing test cases"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/repository/App.java b/repository/src/main/java/com/iluwatar/repository/App.java\n--- a/repository/src/main/java/com/iluwatar/repository/App.java\n+++ b/repository/src/main/java/com/iluwatar/repository/App.java\n@@ -100,6 +100,8 @@ public static void main(String[] args) {\n       System.out.println(person);\n     }\n \n+    repository.deleteAll();\n+    \n     context.close();\n \n   }",
    "output": "Fix missing table error"
  },
  {
    "input": "diff --git a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n--- a/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n+++ b/feature-toggle/src/main/java/com/iluwatar/featuretoggle/user/UserGroup.java\n@@ -11,6 +11,7 @@ public class UserGroup {\n   private static List<User> freeGroup = new ArrayList<>();\n   private static List<User> paidGroup = new ArrayList<>();\n \n+\n   /**\n    *\n    * @param user {@link User} to be added to the free group\n\ndiff --git a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n--- a/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n+++ b/feature-toggle/src/test/java/com/iluwatar/featuretoggle/pattern/propertiesversion/PropertiesFeatureToggleVersionTest.java\n@@ -13,6 +13,18 @@\n \n public class PropertiesFeatureToggleVersionTest {\n \n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNullPropertiesPassed() throws Exception {\n+    new PropertiesFeatureToggleVersion(null);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNonBooleanProperty() throws Exception {\n+    final Properties properties = new Properties();\n+    properties.setProperty(\"enhancedWelcome\",\"Something\");\n+    new PropertiesFeatureToggleVersion(properties);\n+  }\n+\n   @Test\n   public void testFeatureTurnedOn() throws Exception {\n     final Properties properties = new Properties();",
    "output": "Add tests for Properties"
  },
  {
    "input": "diff --git a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n--- a/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n+++ b/multiton/src/test/java/com/iluwatar/multiton/NazgulTest.java\n@@ -0,0 +1,29 @@\n+package com.iluwatar.multiton;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+/**\n+ * Date: 12/22/15 - 22:28 AM\n+ *\n+ * @author Jeroen Meulemeester\n+ */\n+public class NazgulTest {\n+\n+  /**\n+   * Verify if {@link Nazgul#getInstance(NazgulName)} returns the correct Nazgul multiton instance\n+   */\n+  @Test\n+  public void testGetInstance() {\n+    for (final NazgulName name : NazgulName.values()) {\n+      final Nazgul nazgul = Nazgul.getInstance(name);\n+      assertNotNull(nazgul);\n+      assertSame(nazgul, Nazgul.getInstance(name));\n+      assertEquals(name, nazgul.getName());\n+    }\n+  }\n+\n+}",
    "output": "Add tests for multiton pattern"
  },
  {
    "input": "diff --git a/callback/src/main/java/com/iluwatar/callback/SimpleTask.java b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java\n--- a/callback/src/main/java/com/iluwatar/callback/SimpleTask.java\n+++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java\n@@ -9,7 +9,7 @@ public class SimpleTask extends Task {\n \n \t@Override\n \tpublic void execute() {\n-\t\tSystem.out.println(\"Perform some important activity.\");\n+\t\tSystem.out.println(\"Perform some important activity and after call the callback method.\");\n \t}\n \n }",
    "output": "Add unit test to show that the callback method is called"
  },
  {
    "input": "diff --git a/callback/src/test/java/com/iluwatar/callback/AppTest.java b/callback/src/test/java/com/iluwatar/callback/AppTest.java\n--- a/callback/src/test/java/com/iluwatar/callback/AppTest.java\n+++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java\n@@ -2,18 +2,38 @@\n \n import org.junit.Test;\n \n-import com.iluwatar.callback.App;\n+import static org.junit.Assert.assertEquals;\n \n /**\n- * \n- * Application test\n+ * Add a field as a counter. Every time the callback method is called increment this\n+ * field. Unit test checks that the field is being incremented.\n  *\n+ * Could be done with mock objects as well where the call method call is verified.\n  */\n public class AppTest {\n \n+    private Integer callingCount = 0;\n+\n \t@Test\n \tpublic void test() {\n-\t\tString[] args = {};\n-\t\tApp.main(args);\n+        Callback callback = new Callback() {\n+            @Override\n+            public void call() {\n+                callingCount++;\n+            }\n+        };\n+\n+        Task task = new SimpleTask();\n+\n+        assertEquals(\"Initial calling count of 0\", new Integer(0), callingCount);\n+\n+        task.executeWith(callback);\n+\n+        assertEquals(\"Callback called once\", new Integer(1), callingCount);\n+\n+        task.executeWith(callback);\n+\n+        assertEquals(\"Callback called twice\", new Integer(2), callingCount);\n+\n \t}\n }",
    "output": "Add unit test to show that the callback method is called"
  },
  {
    "input": "diff --git a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n--- a/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n+++ b/singleton/src/test/java/com/iluwatar/singleton/LazyLoadedSingletonThreadSafetyTest.java\n@@ -75,6 +75,9 @@ public void test_MultipleCallsReturnTheSameObjectInDifferentThreads() throws Int\n     @SuppressWarnings(\"unchecked\")\n     public void test_HoleInSingletonCreationIfUsingReflection() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n         Field[] f = ThreadSafeLazyLoadedIvoryTower.class.getDeclaredFields();\n+        for (Field ff : f) {\n+            System.out.println(ff.getDeclaringClass());\n+        }\n         assertEquals(\"One field only in ThreadSafeLazyLoadedIvoryTower\", 1, f.length);\n         f[0].setAccessible(true);\n ",
    "output": "Add additional unit tests to show that singletons can be created in single thread environment and multithread environment. Also add a test to demonstrate a whole with Singleton when instantiating using reflection\nAdd some logging. Tests pass locally but not on github?"
  },
  {
    "input": "diff --git a/monostate/src/main/java/com/iluwatar/monostate/Request.java b/monostate/src/main/java/com/iluwatar/monostate/Request.java\n--- a/monostate/src/main/java/com/iluwatar/monostate/Request.java\n+++ b/monostate/src/main/java/com/iluwatar/monostate/Request.java\n@@ -10,7 +10,6 @@ public class Request {\n   public final String value;\n \n   public Request(String value) {\n-    super();\n     this.value = value;\n   }\n }",
    "output": "Make changes according to feedback issue"
  },
  {
    "input": "diff --git a/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java b/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n--- a/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n+++ b/dao/src/test/java/com/iluwatar/dao/CustomerDaoImplTest.java\n@@ -84,7 +84,7 @@ public void getExistinCustomerById() {\n \n   @Test\n   public void getNonExistinCustomerById() {\n-    final int nonExistingId = 999;\n+    final int nonExistingId = getNonExistingCustomerId();\n     assertNull(impl.getCustomerById(nonExistingId));\n   }\n ",
    "output": "Remove magic number"
  },
  {
    "input": "diff --git a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java\n--- a/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java\n+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java\n@@ -7,7 +7,7 @@\n \n public class AppTest {\n \n-\tprivate App app = new App();;\n+\tprivate App app = new App();\n \tprivate KingdomFactory elfFactory;\n \tprivate KingdomFactory orcFactory;\n \t",
    "output": "Remove erroneous semi-colon"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -21,9 +21,10 @@\n  * doesn't pull info off some random channel; it selects what channel to get information\n  * from based on what type of information it wants.\n  * <p>\n- * In this example we use Apache Camel to establish a direct synchronous Message Channel \n- * that delivers messages to console output. No actual messages are sent, only the established \n- * routes are printed to standard output.\n+ * In this example we use Apache Camel to establish two different Message Channels. The first\n+ * one reads from standard input and delivers messages to Direct endpoint. The second Message  \n+ * Channel is established from the Direct component to console output. No actual messages are sent, \n+ * only the established routes are printed to standard output.\n  * \n  */\n public class App {\n@@ -40,6 +41,7 @@ public static void main(String[] args) throws Exception {\n \n \t\t\t@Override\n \t\t\tpublic void configure() throws Exception {\n+\t\t\t\tfrom(\"stream:in\").to(\"direct:greetings\");\n \t\t\t\tfrom(\"direct:greetings\").to(\"stream:out\");\n \t\t\t}\n \t\t});",
    "output": "Add second message channel"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -1,7 +1,6 @@\n package com.iluwatar.message.channel;\n \n import org.apache.camel.CamelContext;\n-import org.apache.camel.ProducerTemplate;\n import org.apache.camel.builder.RouteBuilder;\n import org.apache.camel.impl.DefaultCamelContext;\n \n@@ -19,9 +18,7 @@ public void configure() throws Exception {\n \t\t});\n \t\t\n \t\tcontext.start();\n-\t\tProducerTemplate template = context.createProducerTemplate();\n-\t\ttemplate.sendBody(\"direct:greetings\", \"jou man\");\n-\t\tThread.sleep(1000);\n+\t\tcontext.getRoutes().stream().forEach((r) -> System.out.println(r));\n \t\tcontext.stop();\n \t}\n }",
    "output": "Improve example code and add class diagram"
  },
  {
    "input": "diff --git a/message-channel/src/main/java/com/iluwatar/message/channel/App.java b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n--- a/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n+++ b/message-channel/src/main/java/com/iluwatar/message/channel/App.java\n@@ -1,8 +1,14 @@\n package com.iluwatar.message.channel;\n \n+import org.apache.camel.CamelContext;\n+import org.apache.camel.impl.DefaultCamelContext;\n+\n public class App {\n \t\n-\tpublic static void main(String[] args) {\n-\t\tSystem.out.println(\"Hello World!\");\n+\tpublic static void main(String[] args) throws Exception {\n+\t\tCamelContext context = new DefaultCamelContext();\n+\t\tcontext.start();\n+\t\tThread.sleep(10000);\n+\t\tcontext.stop();\n \t}\n }\n\ndiff --git a/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n--- a/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n+++ b/message-channel/src/test/java/com/iluwatar/message/channel/AppTest.java\n@@ -10,7 +10,7 @@\n public class AppTest {\n \t\n \t@Test\n-\tpublic void test() {\n+\tpublic void test() throws Exception {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}",
    "output": "Add Camel dependency"
  },
  {
    "input": "diff --git a/layers/src/test/java/com/iluwatar/layers/AppTest.java b/layers/src/test/java/com/iluwatar/layers/AppTest.java\n--- a/layers/src/test/java/com/iluwatar/layers/AppTest.java\n+++ b/layers/src/test/java/com/iluwatar/layers/AppTest.java\n@@ -0,0 +1,19 @@\n+package com.iluwatar.layers;\n+\n+import org.junit.Test;\n+\n+import com.iluwatar.layers.App;\n+\n+/**\n+ * \n+ * Application test\n+ *\n+ */\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add missing test for Layers example"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/App.java b/repository/src/main/java/com/iluwatar/App.java\n--- a/repository/src/main/java/com/iluwatar/App.java\n+++ b/repository/src/main/java/com/iluwatar/App.java\n@@ -5,6 +5,7 @@\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n \n public class App {\n+\t\n \tpublic static void main(String[] args) {\n \t\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n \t\t\t\t\"applicationContext.xml\");",
    "output": "Change Hibernate to create-drop mode"
  },
  {
    "input": "diff --git a/repository/src/main/java/com/iluwatar/App.java b/repository/src/main/java/com/iluwatar/App.java\n--- a/repository/src/main/java/com/iluwatar/App.java\n+++ b/repository/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+        System.out.println( \"Hello World!\" );\n+    }\n+}\n\ndiff --git a/repository/src/test/java/com/iluwatar/AppTest.java b/repository/src/test/java/com/iluwatar/AppTest.java\n--- a/repository/src/test/java/com/iluwatar/AppTest.java\n+++ b/repository/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Repository example"
  },
  {
    "input": "diff --git a/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java b/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java\n--- a/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java\n+++ b/intercepting-filter/src/test/java/com/iluwatar/interceptingfilter/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar.interceptingfilter;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add unit test for Intercepting Filter"
  },
  {
    "input": "diff --git a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java\n@@ -1,7 +1,6 @@\n package com.iluwatar;\n \n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.ObjectInputStream;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/private-class-data/src/main/java/com/iluwatar/App.java b/private-class-data/src/main/java/com/iluwatar/App.java\n--- a/private-class-data/src/main/java/com/iluwatar/App.java\n+++ b/private-class-data/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\r\n+\r\n+public class App {\r\n+\t\r\n+    public static void main( String[] args ) {\r\n+    }\r\n+}\r\n\ndiff --git a/private-class-data/src/test/java/com/iluwatar/AppTest.java b/private-class-data/src/test/java/com/iluwatar/AppTest.java\n--- a/private-class-data/src/test/java/com/iluwatar/AppTest.java\n+++ b/private-class-data/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class AppTest {\r\n+\r\n+\t@Test\r\n+\tpublic void test() {\r\n+\t\tString[] args = {};\r\n+\t\tApp.main(args);\r\n+\t}\t\r\n+}\r",
    "output": "Add skeleton for Private Class Data pattern"
  },
  {
    "input": "diff --git a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n--- a/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n+++ b/resource-acquisition-is-initialization/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n--- a/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n+++ b/resource-acquisition-is-initialization/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Resource Acquisition Is Initialization pattern"
  },
  {
    "input": "diff --git a/multiton/src/main/java/com/iluwatar/App.java b/multiton/src/main/java/com/iluwatar/App.java\n--- a/multiton/src/main/java/com/iluwatar/App.java\n+++ b/multiton/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/multiton/src/test/java/com/iluwatar/AppTest.java b/multiton/src/test/java/com/iluwatar/AppTest.java\n--- a/multiton/src/test/java/com/iluwatar/AppTest.java\n+++ b/multiton/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Multiton example"
  },
  {
    "input": "diff --git a/model-view-controller/src/main/java/com/iluwatar/App.java b/model-view-controller/src/main/java/com/iluwatar/App.java\n--- a/model-view-controller/src/main/java/com/iluwatar/App.java\n+++ b/model-view-controller/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,8 @@\n+package com.iluwatar;\n+\n+public class App {\n+\t\n+    public static void main( String[] args ) {\n+        System.out.println( \"Hello World!\" );\n+    }\n+}\n\ndiff --git a/model-view-controller/src/test/java/com/iluwatar/AppTest.java b/model-view-controller/src/test/java/com/iluwatar/AppTest.java\n--- a/model-view-controller/src/test/java/com/iluwatar/AppTest.java\n+++ b/model-view-controller/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,12 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for MVC"
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/generic/GHobbits.java b/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n--- a/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n+++ b/observer/src/main/java/com/iluwatar/generic/GHobbits.java\n@@ -4,7 +4,7 @@\n \n public class GHobbits implements Race {\n     @Override\n-    public void update(GWeather o, WeatherType weatherType) {\n+    public void update(GWeather weather, WeatherType weatherType) {\n         switch (weatherType) {\n             case COLD:\n                 System.out.println(\"The hobbits are shivering in the cold weather.\");",
    "output": "Upgrade GHobbits.java Make GWeather argument more clear"
  },
  {
    "input": "diff --git a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n@@ -1,7 +1,10 @@\n package com.iluwatar;\n \n+import java.io.File;\n import java.io.IOException;\n \n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n \n \n@@ -12,4 +15,13 @@ public void test() throws ClassNotFoundException, IOException {\n \t\tString[] args = {};\n \t\tApp.main(args);\n \t}\n+\t\n+\t@Before\n+\t@After\n+\tpublic void cleanup() {\n+\t\tFile file1 = new File(\"fish1.out\");\n+\t\tfile1.delete();\n+\t\tFile file2 = new File(\"fish2.out\");\n+\t\tfile2.delete();\n+\t}\t\n }",
    "output": "Add test cleanup"
  },
  {
    "input": "diff --git a/tolerant-reader/src/main/java/com/iluwatar/App.java b/tolerant-reader/src/main/java/com/iluwatar/App.java\n--- a/tolerant-reader/src/main/java/com/iluwatar/App.java\n+++ b/tolerant-reader/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,7 @@\n+package com.iluwatar;\n+\n+public class App \n+{\n+    public static void main( String[] args ) {\n+    }\n+}\n\ndiff --git a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n--- a/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n+++ b/tolerant-reader/src/test/java/com/iluwatar/AppTest.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\n+\n+import org.junit.Test;\n+\n+\n+public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n+}",
    "output": "Add skeleton for Tolerant Reader"
  },
  {
    "input": "diff --git a/service-layer/src/test/java/com/iluwatar/AppTest.java b/service-layer/src/test/java/com/iluwatar/AppTest.java\n--- a/service-layer/src/test/java/com/iluwatar/AppTest.java\n+++ b/service-layer/src/test/java/com/iluwatar/AppTest.java\n@@ -1,4 +1,12 @@\n package com.iluwatar;\n \n+import org.junit.Test;\n+\n public class AppTest {\n+\t\n+\t@Test\n+\tpublic void test() {\n+\t\tString[] args = {};\n+\t\tApp.main(args);\n+\t}\n }",
    "output": "Add unit test"
  },
  {
    "input": "diff --git a/adapter/src/main/java/com/iluwatar/App.java b/adapter/src/main/java/com/iluwatar/App.java\n--- a/adapter/src/main/java/com/iluwatar/App.java\n+++ b/adapter/src/main/java/com/iluwatar/App.java\n@@ -15,7 +15,7 @@\n public class App {\r\n \r\n \tpublic static void main(String[] args) {\r\n-\t\tGnomeEngineeringManager manager = new GnomeEngineeringManager();\r\n+\t\tEngineer manager = new GnomeEngineeringManager();\r\n \t\tmanager.operateDevice();\r\n \t}\r\n }\r",
    "output": "Change the adapter pattern, manager class type to Interface"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/EnumIvoryTower.java\n@@ -3,9 +3,11 @@\n /**\n  *\n  * Enum Singleton class.\n+ * Effective Java 2nd Edition (Joshua Bloch) p. 18\n  *\n  */\n public enum EnumIvoryTower {\n+\t\n     INSTANCE;\n \n     @Override",
    "output": "Add book reference to singleton enum implementation"
  },
  {
    "input": "diff --git a/observer/src/main/java/com/iluwatar/App.java b/observer/src/main/java/com/iluwatar/App.java\n--- a/observer/src/main/java/com/iluwatar/App.java\n+++ b/observer/src/main/java/com/iluwatar/App.java\n@@ -24,9 +24,10 @@ public static void main(String[] args) {\n \t\tweather.timePasses();\r\n \r\n \t\t// Generic observer inspired by Java Generics and Collection by Naftalin & Wadler\r\n+\t\tSystem.out.println(\"\\n--Running generic version--\");\r\n \t\tGWeather gWeather = new GWeather();\r\n-\t\tgWeather.addObserver(new GHobbits());\r\n \t\tgWeather.addObserver(new GOrcs());\r\n+\t\tgWeather.addObserver(new GHobbits());\r\n \r\n \t\tgWeather.timePasses();\r\n \t\tgWeather.timePasses();\r",
    "output": "Add message to observer app"
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -10,11 +10,11 @@ public String toString() {\n \t\tcase ENEMY:\r\n \t\t\treturn \"spotted enemies\";\r\n \t\tcase GOLD:\r\n-            return \"found gold\";\r\n+\t\t\treturn \"found gold\";\r\n \t\tcase HUNT:\r\n-            return \"hunted a rabbit\";\r\n+\t\t\treturn \"hunted a rabbit\";\r\n \t\tcase TALE:\r\n-            return \"tells a tale\";\r\n+\t\t\treturn \"tells a tale\";\r\n \t\t}\r\n \t\treturn \"\";\r\n \t}\r",
    "output": "Fix spaces instead of tabs"
  },
  {
    "input": "diff --git a/mediator/src/main/java/com/iluwatar/Action.java b/mediator/src/main/java/com/iluwatar/Action.java\n--- a/mediator/src/main/java/com/iluwatar/Action.java\n+++ b/mediator/src/main/java/com/iluwatar/Action.java\n@@ -6,23 +6,16 @@ public enum Action {\n \r\n \tpublic String toString() {\r\n \r\n-\t\tString s = \"\";\r\n \t\tswitch (this) {\r\n \t\tcase ENEMY:\r\n-\t\t\ts = \"spotted enemies\";\r\n-\t\t\tbreak;\r\n+\t\t\treturn \"spotted enemies\";\r\n \t\tcase GOLD:\r\n-\t\t\ts = \"found gold\";\r\n-\t\t\tbreak;\r\n+            return \"found gold\";\r\n \t\tcase HUNT:\r\n-\t\t\ts = \"hunted a rabbit\";\r\n-\t\t\tbreak;\r\n+            return \"hunted a rabbit\";\r\n \t\tcase TALE:\r\n-\t\t\ts = \"tells a tale\";\r\n-\t\t\tbreak;\r\n-\t\tdefault:\r\n-\t\t\tbreak;\r\n+            return \"tells a tale\";\r\n \t\t}\r\n-\t\treturn s;\r\n-\t};\r\n+\t\treturn \"\";\r\n+\t}\r\n }\r",
    "output": "Improve a toString method. Makes it more readable and deletes an useless semicolon"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java b/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/ThreadSafeLazyLoadedIvoryTower.java\n@@ -8,6 +8,9 @@\n public class ThreadSafeLazyLoadedIvoryTower {\n \n \tprivate static ThreadSafeLazyLoadedIvoryTower instance = null;\n+\t\n+\tprivate ThreadSafeLazyLoadedIvoryTower() {\n+\t}\n \n \tpublic synchronized static ThreadSafeLazyLoadedIvoryTower getInstance() {\n \t\t/*",
    "output": "Add private constructor to ThreadSafeLazyLoadedIvoryTower"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/IvoryTower.java b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n@@ -7,14 +7,11 @@\n  */\r\n public class IvoryTower {\r\n \r\n-\tprivate static IvoryTower instance;\r\n+\tprivate static IvoryTower instance = new IvoryTower();\r\n \t\r\n \tprivate IvoryTower() {}\r\n \r\n \tpublic static IvoryTower getInstance() {\r\n-\t\tif(instance ==  null){\r\n-\t\t\tinstance = new IvoryTower();\t\r\n-\t\t}\r\n \t\treturn instance;\r\n \t}\r\n }\r",
    "output": "Remove the lazy instantiation from singleton to avoid threading problems"
  },
  {
    "input": "diff --git a/double-checked-locking/src/main/java/com/iluwatar/Item.java b/double-checked-locking/src/main/java/com/iluwatar/Item.java\n--- a/double-checked-locking/src/main/java/com/iluwatar/Item.java\n+++ b/double-checked-locking/src/main/java/com/iluwatar/Item.java\n@@ -1,5 +1,6 @@\n package com.iluwatar;\n \n public class Item {\n-\n+\tString name;\n+\tint level;\n }",
    "output": "Add simple attributes to the Item"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/IvoryTower.java b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n@@ -13,7 +13,7 @@ private IvoryTower() {}\n \r\n \tpublic static IvoryTower getInstance() {\r\n \t\tif(instance ==  null){\r\n-\t\t\tinstance = IvoryTower();\t\r\n+\t\t\tinstance = new IvoryTower();\t\r\n \t\t}\r\n \t\treturn instance;\r\n \t}\r",
    "output": "Upgrade IvoryTower.java fixed the issue with class creation"
  },
  {
    "input": "diff --git a/singleton/src/main/java/com/iluwatar/App.java b/singleton/src/main/java/com/iluwatar/App.java\n--- a/singleton/src/main/java/com/iluwatar/App.java\n+++ b/singleton/src/main/java/com/iluwatar/App.java\n@@ -0,0 +1,14 @@\n+package com.iluwatar;\r\n+\r\n+public class App \r\n+{\r\n+    public static void main( String[] args )\r\n+    {\r\n+    \t\r\n+    \tIvoryTower ivoryTower1 = IvoryTower.getInstance();\r\n+    \tIvoryTower ivoryTower2 = IvoryTower.getInstance();\r\n+    \tSystem.out.println(\"ivoryTower1=\" + ivoryTower1);\r\n+    \tSystem.out.println(\"ivoryTower2=\" + ivoryTower2);\r\n+    \t\r\n+    }\r\n+}\r\n\ndiff --git a/singleton/src/main/java/com/iluwatar/IvoryTower.java b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n--- a/singleton/src/main/java/com/iluwatar/IvoryTower.java\n+++ b/singleton/src/main/java/com/iluwatar/IvoryTower.java\n@@ -0,0 +1,13 @@\n+package com.iluwatar;\r\n+\r\n+public class IvoryTower {\r\n+\r\n+\tprivate static IvoryTower instance = new IvoryTower();\r\n+\t\r\n+\tprivate IvoryTower() {\r\n+\t}\r\n+\r\n+\tpublic static IvoryTower getInstance() {\r\n+\t\treturn instance;\r\n+\t}\r\n+}\r",
    "output": "Add singleton sample"
  }
]