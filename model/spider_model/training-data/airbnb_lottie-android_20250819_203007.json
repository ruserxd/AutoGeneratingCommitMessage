[
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -25,7 +25,7 @@ public class L {\n \n   private static boolean traceEnabled = false;\n   private static boolean networkCacheEnabled = true;\n-  private static boolean disablePathInterpolatorCache = true;\n+  private static boolean disablePathInterpolatorCache = false;\n   private static AsyncUpdates defaultAsyncUpdates = AsyncUpdates.AUTOMATIC;\n \n   private static LottieNetworkFetcher fetcher;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n@@ -45,7 +45,7 @@ public static final class Builder {\n     private LottieNetworkCacheProvider cacheProvider;\n     private boolean enableSystraceMarkers = false;\n     private boolean enableNetworkCache = true;\n-    private boolean disablePathInterpolatorCache = true;\n+    private boolean disablePathInterpolatorCache = false;\n     private AsyncUpdates defaultAsyncUpdates = AsyncUpdates.AUTOMATIC;\n     private ReducedMotionOption reducedMotionOption = new SystemReducedMotionOption();\n ",
    "output": "Enable path interpolator cache by default (#2646)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java b/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java\n@@ -42,7 +42,7 @@ public DefaultLottieFetchResult(@NonNull HttpURLConnection connection) {\n     try {\n       return isSuccessful() ? null :\n           \"Unable to fetch \" + connection.getURL() + \". Failed with \" + connection.getResponseCode() + \"\\n\" + getErrorFromConnection(connection);\n-    } catch (IOException e) {\n+    } catch (IOException | NullPointerException e) {\n       Logger.warning(\"get error failed \", e);\n       return e.getMessage();\n     }",
    "output": "In DefaultLottieFetchResult, catch NPE from getErrorFromConnection() (#2643)\n\nFixes #2642"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n@@ -95,6 +95,9 @@ public class ImageLayer extends BaseLayer {\n \n     if (renderOffScreen) {\n       offscreenLayer.finish();\n+      if (offscreenLayer.finishDecrementsCanvasSaveCount()) {\n+        return; // Don't need a restore() call since it's handled by OffscreenLayer\n+      }\n     }\n \n     targetCanvas.restore();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java b/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java\n@@ -553,4 +553,12 @@ private void renderHardwareShadow(Canvas targetCanvas, DropShadow shadow) {\n     targetCanvas.drawRenderNode(shadowRenderNode);\n     targetCanvas.restore();\n   }\n+\n+  /**\n+   * Whether calling finish() will decrement the save count of the [Canvas] returned by [start()].\n+   */\n+  public boolean finishDecrementsCanvasSaveCount() {\n+    // endRecording() will decrement the save count of the Canvas returned by beginRecording()\n+    return currentStrategy == RenderStrategy.RENDER_NODE;\n+  }\n }",
    "output": "Fix crash when drawing shadow on image using RenderNode (#2635)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java b/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java\n@@ -186,7 +186,11 @@ private Bitmap allocateBitmap(RectF bounds, Bitmap.Config cfg) {\n     // still being relatively speedy to blit and operate on.\n     int width = (int)Math.ceil(bounds.width() * 1.05);\n     int height = (int)Math.ceil(bounds.height() * 1.05);\n-    return Bitmap.createBitmap(width, height, cfg);\n+\n+    // In certain cases the provided bounds can have a width or height of 0, which will cause a runtime crash\n+    // when we try to allocate a Bitmap. To guard against this, use a minimum size of 1x1.\n+    // See https://github.com/airbnb/lottie-android/issues/2620\n+    return Bitmap.createBitmap(Math.max(width, 1), Math.max(height, 1), cfg);\n   }\n \n   private void deallocateBitmap(Bitmap bitmap) {",
    "output": "Guard against Bitmap allocations of size 0 (#2626)\n\nFixes https://github.com/airbnb/lottie-android/issues/2620, which only occurs on Android 12 devices."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n@@ -111,8 +111,8 @@ public class ImageLayer extends BaseLayer {\n         if (bitmap != null) {\n           outBounds.set(0, 0, bitmap.getWidth() * scale, bitmap.getHeight() * scale);\n         } else {\n-          // If the bitmap is null, we aren't rendering anything, so set outBounds to an empty rectangle\n-          outBounds.set(0, 0, 0, 0);\n+          // If the bitmap is null, fall back to using the width and height of the LottieImageAsset\n+          outBounds.set(0, 0, lottieImageAsset.getWidth() * scale, lottieImageAsset.getHeight() * scale);\n         }\n       }\n       boundsMatrix.mapRect(outBounds);",
    "output": "Partially revert previous change to ImageLayer.getBounds() (#2623)\n\nThe changes in https://github.com/airbnb/lottie-android/pull/2578 set the bounds returned by `ImageLayer.getBounds()` to have 0 width and 0 height if there is no Bitmap available. This change instead calls the previous version of the logic which reads the width and height of the `LottieImageAsset`."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n@@ -107,7 +107,13 @@ public class ImageLayer extends BaseLayer {\n       if (lottieDrawable.getMaintainOriginalImageBounds()) {\n         outBounds.set(0, 0, lottieImageAsset.getWidth() * scale, lottieImageAsset.getHeight() * scale);\n       } else {\n-        outBounds.set(0, 0, getBitmap().getWidth() * scale, getBitmap().getHeight() * scale);\n+        Bitmap bitmap = getBitmap();\n+        if (bitmap != null) {\n+          outBounds.set(0, 0, bitmap.getWidth() * scale, bitmap.getHeight() * scale);\n+        } else {\n+          // If the bitmap is null, we aren't rendering anything, so set outBounds to an empty rectangle\n+          outBounds.set(0, 0, 0, 0);\n+        }\n       }\n       boundsMatrix.mapRect(outBounds);\n     }",
    "output": "Prevent NPE in ImageLayer.getBounds() (#2578)\n\nCo-authored-by: Allen Chen <allen.chen@airbnb.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -193,6 +193,14 @@ private LinearGradient getLinearGradient() {\n     GradientColor gradientColor = colorAnimation.getValue();\n     int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n+\n+    // Add check for minimum colors\n+    if (colors.length < 2) {\n+      // If only one color, duplicate it to create a solid color gradient\n+      colors = new int[]{colors[0], colors[0]};\n+      positions = new float[]{0f, 1f};\n+    }\n+    \n     gradient = new LinearGradient(startPoint.x, startPoint.y, endPoint.x, endPoint.y, colors,\n         positions, Shader.TileMode.CLAMP);\n     linearGradientCache.put(gradientHash, gradient);\n@@ -210,13 +218,21 @@ private RadialGradient getRadialGradient() {\n     GradientColor gradientColor = colorAnimation.getValue();\n     int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n+    \n+    // Add check for minimum colors\n+    if (colors.length < 2) {\n+        // If only one color, duplicate it to create a solid color gradient\n+        colors = new int[]{colors[0], colors[0]};\n+        positions = new float[]{0f, 1f};\n+    }\n+    \n     float x0 = startPoint.x;\n     float y0 = startPoint.y;\n     float x1 = endPoint.x;\n     float y1 = endPoint.y;\n     float r = (float) Math.hypot(x1 - x0, y1 - y0);\n     if (r <= 0) {\n-      r = 0.001f;\n+        r = 0.001f;\n     }\n     gradient = new RadialGradient(x0, y0, r, colors, positions, Shader.TileMode.CLAMP);\n     radialGradientCache.put(gradientHash, gradient);",
    "output": "Fix radial gradient crash (#2611)\n\nFixes #2610"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -28,15 +28,24 @@\n  */\n @SuppressWarnings(\"UnusedReturnValue\")\n public class LottieTask<T> {\n+  static final String DIRECT_EXECUTOR_PROPERTY_NAME = \"lottie.testing.directExecutor\";\n \n   /**\n-   * Set this to change the executor that LottieTasks are run on. This will be the executor that composition parsing and url\n-   * fetching happens on.\n+   * The executor which runs {@code LottieTask}s such as composition parsing and url fetching.\n    * <p>\n-   * You may change this to run deserialization synchronously for testing.\n+   * You may change this to run synchronously for testing. Additionally, if the\n+   * {@code lottie.testing.directExecutor} system property is set to \"true\", the initial value\n+   * will be a synchronous executor suitable for use in tests.\n    */\n   @SuppressWarnings(\"WeakerAccess\")\n-  public static Executor EXECUTOR = Executors.newCachedThreadPool(new LottieThreadFactory());\n+  public static Executor EXECUTOR;\n+  static {\n+    if (\"true\".equals(System.getProperty(DIRECT_EXECUTOR_PROPERTY_NAME))) {\n+      EXECUTOR = Runnable::run;\n+    } else {\n+      EXECUTOR = Executors.newCachedThreadPool(new LottieThreadFactory());\n+    }\n+  }\n \n   /* Preserve add order. */\n   private final Set<LottieListener<T>> successListeners = new LinkedHashSet<>(1);\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java\n@@ -10,13 +10,15 @@\n \n import com.airbnb.lottie.network.LottieFetchResult;\n \n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n \n import java.io.InputStream;\n import java.util.Objects;\n+import java.util.concurrent.Executor;\n \n public class LottieInitializeTest extends BaseTest {\n \n@@ -28,11 +30,18 @@ public class LottieInitializeTest extends BaseTest {\n \n   private final Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n \n+  private final Executor originalExecutor = LottieTask.EXECUTOR;\n+\n   @Before\n   public void setExecutor() {\n     LottieTask.EXECUTOR = Runnable::run;\n   }\n \n+  @After\n+  public void resetExecutor() {\n+    LottieTask.EXECUTOR = originalExecutor;\n+  }\n+\n   @Test\n   public void fetchAfterSecondInitialize() {\n     initializeLottie(temporaryFolder1);\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java\n@@ -7,9 +7,15 @@\n import org.mockito.junit.MockitoJUnit;\n import org.mockito.junit.MockitoRule;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n@@ -87,4 +93,44 @@ public void testAddListenerAfter() {\n     verify(successListener, times(1)).onResult(5);\n     verifyNoInteractions(failureListener);\n   }\n+\n+  @Test\n+  public void executorIsRealThreadPoolByDefault() {\n+    AtomicBoolean isDirect = new AtomicBoolean();\n+    LottieTask.EXECUTOR.execute(() -> isDirect.set(true));\n+    assertFalse(isDirect.get());\n+  }\n+\n+  @Test\n+  public void executorIsDirectWhenTestingPropertySetToTrue() throws Exception {\n+    // Use a custom ClassLoader to force a new class instance which will cause the\n+    // static initializers to run and observe the new system property set below.\n+    String lottieTaskName = LottieTask.class.getName();\n+    ClassLoader customLoader = new ClassLoader() {\n+      @Override public Class<?> loadClass(String name) throws ClassNotFoundException {\n+        if (name.equals(lottieTaskName)) {\n+          try (InputStream in = ClassLoader.getSystemResourceAsStream(lottieTaskName.replace('.', '/') + \".class\")) {\n+            byte[] bytes = new byte[10 * 1024 * 1024];\n+            int read  = in.read(bytes);\n+            return defineClass(name, bytes, 0, read);\n+          } catch (IOException e) {\n+            throw new ClassNotFoundException(name, e);\n+          }\n+        }\n+        return super.loadClass(name);\n+      }\n+    };\n+\n+    System.setProperty(LottieTask.DIRECT_EXECUTOR_PROPERTY_NAME, \"true\");\n+    try {\n+      Class<?> c = customLoader.loadClass(lottieTaskName);\n+      Executor e = (Executor) c.getField(\"EXECUTOR\").get(null);\n+\n+      AtomicBoolean isDirect = new AtomicBoolean();\n+      e.execute(() -> isDirect.set(true));\n+      assertTrue(isDirect.get());\n+    } finally {\n+      System.clearProperty(LottieTask.DIRECT_EXECUTOR_PROPERTY_NAME);\n+    }\n+  }\n }",
    "output": "Support system property to set a testing executor (#2613)\n\nCloses #2612"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -360,7 +360,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha, @Nullable\n         }\n         clearCanvas(canvas);\n         //noinspection ConstantConditions\n-        matteLayer.draw(canvas, parentMatrix, alpha, null);\n+        matteLayer.draw(canvas, parentMatrix, parentAlpha, null);\n         if (L.isTraceEnabled()) {\n           L.beginSection(\"Layer#restoreLayer\");\n         }",
    "output": "Only apply parent layer alpha to mattes (#2598)\n\nFixes #2570"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -350,7 +350,13 @@ private void drawTextWithFont(DocumentData documentData, Font font, Canvas canva\n \n         canvas.save();\n \n-        if (offsetCanvas(canvas, documentData, lineIndex, line.width)) {\n+        float lineWidth =\n+            (textAnimation == null &&\n+                textSizeCallbackAnimation == null &&\n+                trackingCallbackAnimation == null) ?\n+                line.width :\n+                fillPaint.measureText(line.text);\n+        if (offsetCanvas(canvas, documentData, lineIndex, lineWidth)) {\n           drawFontTextLine(line.text, documentData, canvas, tracking, characterIndexAtStartOfLine, parentAlpha);\n         }\n ",
    "output": "Re-measure line height when justifying dynamic text (#2597)\n\nFixes #2592"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n@@ -57,10 +57,13 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n     while (reader.hasNext()) {\n       switch (reader.selectName(NAMES)) {\n         case 0:\n-          unscaledWidth = reader.nextInt();\n+          // width/height should be an int. However, some exporters export doubles and we don't want to crash.\n+          // Given that this is non-spec compliant, truncating to int is probably better than rounding to avoid\n+          // the extra work in the vast majority of cases.\n+          unscaledWidth = (int) reader.nextDouble();\n           break;\n         case 1:\n-          unscaledHeight = reader.nextInt();\n+          unscaledHeight = (int) reader.nextDouble();\n           break;\n         case 2:\n           startFrame = (float) reader.nextDouble();",
    "output": "Parse as width/height as double (#2596)\n\nFixes #2552"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n@@ -125,8 +125,8 @@ public float getEndProgress() {\n       } else {\n         float startProgress = getStartProgress();\n         float durationFrames = endFrame - startFrame;\n-        float durationProgress = durationFrames / composition.getDurationFrames();\n-        endProgress = startProgress + durationProgress;\n+        double durationProgress = durationFrames / (double) composition.getDurationFrames();\n+        endProgress = (float) (startProgress + durationProgress);\n       }\n     }\n     return endProgress;\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/value/KeyframeTest.java b/lottie/src/test/java/com/airbnb/lottie/value/KeyframeTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/value/KeyframeTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/value/KeyframeTest.java\n@@ -0,0 +1,40 @@\n+package com.airbnb.lottie.value;\n+\n+import static org.junit.Assert.*;\n+\n+import android.graphics.Rect;\n+import android.view.animation.LinearInterpolator;\n+import androidx.collection.LongSparseArray;\n+import androidx.collection.SparseArrayCompat;\n+import com.airbnb.lottie.LottieComposition;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class KeyframeTest {\n+\n+  @Test\n+  public void testStartFrame() {\n+    LottieComposition composition = new LottieComposition();\n+    composition.init(\n+        new Rect(),\n+        0f,\n+        504.99f,\n+        60f,\n+        new ArrayList<>(),\n+        new LongSparseArray<>(),\n+        new HashMap<>(),\n+        new HashMap<>(),\n+        1f,\n+        new SparseArrayCompat<>(),\n+        new HashMap<>(),\n+        new ArrayList<>(),\n+        0,\n+        0\n+    );\n+    Keyframe<Float> keyframe1 = new Keyframe<>(composition, 200f, 321f, new LinearInterpolator(), 28f, 48f);\n+    Keyframe<Float> keyframe2 = new Keyframe<>(composition, 321f, 300f, new LinearInterpolator(), 48f, 56f);\n+    assertEquals(keyframe2.getStartProgress(), keyframe1.getEndProgress(), 0f);\n+  }\n+}",
    "output": "Fix floating point errors calculating keyframe end progress (#2588)\n\nThis fixed a really tricky bug that led to the wrong keyframe being used due to a floating point rounding error.\r\nGiven specific composition start frames and the existing floating point rounding, you could wind up with the following situation:\r\n\r\nKeyframe 1 has an endFrame of 48 and an endProgress of 0.095051385\r\nKeyframe 2 has a startFrame of 48 and a startProgress of 0.09505139\r\nThe Keyframe.containsProgress check intentionally leaves the upper end of the range open to make it unambiguous that the progress on the boundary of two keyframes should use the latter one.\r\n\r\nHowever, due to this floating point error, there was a gap and if the progress == the endProgress of the first keyframe, it wouldn't match either.\r\n\r\nI was able to reconstruct this specific scenario with a unit test and confirmed that this fixed it. However, it is not impossible that there are other scenarios in which this could happen. However, I would rather avoid allocating doubles for everything which is more expensive unless we find a specific repro again"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -710,8 +710,10 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(@Nullab\n             return null;\n           }\n           Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n-          bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n-          asset.setBitmap(bitmap);\n+          if (bitmap != null) {\n+            bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n+            asset.setBitmap(bitmap);\n+          }\n         }\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -106,7 +106,19 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n         Logger.warning(\"data URL did not have correct base64 format.\", e);\n         return null;\n       }\n-      bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n+\n+      try {\n+        bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n+      } catch (IllegalArgumentException e) {\n+        Logger.warning(\"Unable to decode image `\" + id + \"`.\", e);\n+        return null;\n+      }\n+\n+      if (bitmap == null) {\n+        Logger.warning(\"Decoded image `\" + id + \"` is null.\");\n+        return null;\n+      }\n+\n       Bitmap resizedBitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n       return putBitmap(id, resizedBitmap);\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -280,7 +280,7 @@ public static float getAnimationScale(@NonNull Context context) {\n    * Resize the bitmap to exactly the same size as the specified dimension, changing the aspect ratio if needed.\n    * Returns the original bitmap if the dimensions already match.\n    */\n-  public static Bitmap resizeBitmapIfNeeded(Bitmap bitmap, int width, int height) {\n+  public static Bitmap resizeBitmapIfNeeded(@NonNull Bitmap bitmap, int width, int height) {\n     if (bitmap.getWidth() == width && bitmap.getHeight() == height) {\n       return bitmap;\n     }",
    "output": "Fix NPE a Bitmap reference at the Utils.resizeBitmapIfNeeded (#2573)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -105,18 +105,14 @@ public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n \n     lastFrameTimeNs = frameTimeNanos;\n \n-    if (!useCompositionFrameRate || frameRaw != previousFrameRaw) {\n-      notifyUpdate();\n-    }\n     if (ended) {\n       if (getRepeatCount() != INFINITE && repeatCount >= getRepeatCount()) {\n         frameRaw = speed < 0 ? getMinFrame() : getMaxFrame();\n         frame = frameRaw;\n         removeFrameCallback();\n+        checkNotifyUpdate(previousFrameRaw);\n         notifyEnd(isReversed());\n       } else {\n-        notifyRepeat();\n-        repeatCount++;\n         if (getRepeatMode() == REVERSE) {\n           speedReversedForRepeatMode = !speedReversedForRepeatMode;\n           reverseAnimationSpeed();\n@@ -125,7 +121,12 @@ public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n           frame = frameRaw;\n         }\n         lastFrameTimeNs = frameTimeNanos;\n+        checkNotifyUpdate(previousFrameRaw);\n+        notifyRepeat();\n+        repeatCount++;\n       }\n+    } else {\n+      checkNotifyUpdate(previousFrameRaw);\n     }\n \n     verifyFrame();\n@@ -134,6 +135,12 @@ public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n     }\n   }\n \n+  private void checkNotifyUpdate(float previousFrameRaw) {\n+    if (!useCompositionFrameRate || frameRaw != previousFrameRaw) {\n+      notifyUpdate();\n+    }\n+  }\n+\n   private float getFrameDurationNs() {\n     if (composition == null) {\n       return Float.MAX_VALUE;",
    "output": "Fix blinking issue when loop the animation in minFrame and maxFrame (#2497)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n@@ -51,6 +51,10 @@ public BaseKeyframeAnimation<Float, Float> getRoundedCorners() {\n     return roundedCorners;\n   }\n \n+  @Override public void addUpdateListener(BaseKeyframeAnimation.AnimationListener listener) {\n+    roundedCorners.addUpdateListener(listener);\n+  }\n+\n   /**\n    * Rounded corner algorithm:\n    * Iterate through each vertex.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n@@ -62,6 +62,7 @@ private void invalidate() {\n         if (shapeModifierContents == null) {\n           shapeModifierContents = new ArrayList<>();\n         }\n+        ((ShapeModifierContent) content).addUpdateListener(this);\n         shapeModifierContents.add((ShapeModifierContent) content);\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeModifierContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeModifierContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeModifierContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeModifierContent.java\n@@ -1,7 +1,9 @@\n package com.airbnb.lottie.animation.content;\n \n+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n import com.airbnb.lottie.model.content.ShapeData;\n \n public interface ShapeModifierContent extends Content {\n+  void addUpdateListener(BaseKeyframeAnimation.AnimationListener listener);\n   ShapeData modifyShape(ShapeData shapeData);\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -158,7 +158,7 @@ public A getValue() {\n     A value;\n \n     float linearProgress = getLinearCurrentKeyframeProgress();\n-    if (valueCallback == null && keyframesWrapper.isCachedValueEnabled(linearProgress)) {\n+    if (valueCallback == null && keyframesWrapper.isCachedValueEnabled(linearProgress) && !skipCache()) {\n       return cachedGetValue;\n     }\n     final Keyframe<K> keyframe = getCurrentKeyframe();\n@@ -176,6 +176,10 @@ public A getValue() {\n     return value;\n   }\n \n+  protected boolean skipCache() {\n+    return false;\n+  }\n+\n   public float getProgress() {\n     return progress;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n@@ -1,9 +1,7 @@\n package com.airbnb.lottie.animation.keyframe;\n \n import android.graphics.Path;\n-\n import androidx.annotation.Nullable;\n-\n import com.airbnb.lottie.animation.content.ShapeModifierContent;\n import com.airbnb.lottie.model.content.ShapeData;\n import com.airbnb.lottie.utils.MiscUtils;\n@@ -23,6 +21,15 @@ public ShapeKeyframeAnimation(List<Keyframe<ShapeData>> keyframes) {\n     super(keyframes);\n   }\n \n+  @Override protected boolean skipCache() {\n+    // If there are shape modifiers but no animation on the shape itself, the shape animation\n+    // will think nothing changed and will keep returning its cached value.\n+    // Ideally, we would have a dirty flag rather than permanently disabling the cache\n+    // when there is a modifier. However, because shape modifiers can be reused across multiple\n+    // other contents, it isn't trivial to know when to flip dirty to false.\n+    return shapeModifiers != null && !shapeModifiers.isEmpty();\n+  }\n+\n   @Override public Path getValue(Keyframe<ShapeData> keyframe, float keyframeProgress) {\n     ShapeData startShapeData = keyframe.startValue;\n     ShapeData endShapeData = keyframe.endValue;",
    "output": "Fix rounded corner animations when the underlying shape doesn't animate (#2567)\n\nPreviously, if there was a rounded corners animation but no animation on the shape, the shape would never be marked as dirty and would keep returning the cached value.\r\n\r\n#2561"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1745,8 +1745,8 @@ private void drawDirectlyToCanvas(Canvas canvas) {\n       float scaleX = bounds.width() / (float) composition.getBounds().width();\n       float scaleY = bounds.height() / (float) composition.getBounds().height();\n \n-      renderingMatrix.preScale(scaleX, scaleY);\n       renderingMatrix.preTranslate(bounds.left, bounds.top);\n+      renderingMatrix.preScale(scaleX, scaleY);\n     }\n     compositionLayer.draw(canvas, renderingMatrix, alpha, null);\n   }",
    "output": "Apply left/top bounds before scaling (#2565)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -746,7 +746,7 @@ public void resolveKeyPath(\n         accumulator.add(matteCurrentPartialKeyPath.resolve(matteLayer));\n       }\n \n-      if (keyPath.propagateToChildren(getName(), depth)) {\n+      if (keyPath.matches(matteLayer.getName(), depth) && keyPath.propagateToChildren(getName(), depth)) {\n         int newDepth = depth + keyPath.incrementDepthBy(matteLayer.getName(), depth);\n         matteLayer.resolveChildKeyPath(keyPath, newDepth, accumulator, matteCurrentPartialKeyPath);\n       }",
    "output": "Fix resolving key path for matte layers (#2544)\n\nThis PR adds the check for matte layer name before going deeper during key path resolution.\r\n\r\nWithout the fix the key path matches children inside the matte layer even though it should not, for example:\r\n\r\n'layer_1.group_1.child_1' could match 'layer_1.**matte_1**.group_1.child_1'\r\n\r\nWith the fix it is not possible anymore.\r\n\r\nCo-authored-by: Alexander Dorokhov <dorokhov17@yandex-team.ru>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -86,12 +86,27 @@ public static void setMaxCacheSize(int size) {\n     LottieCompositionCache.getInstance().resize(size);\n   }\n \n+  /**\n+   * Like {@link #clearCache(Context, boolean)} but defaults to clearing the network cache.\n+   *\n+   * @see #clearCache(Context, boolean)\n+   */\n   public static void clearCache(Context context) {\n+    clearCache(context, true);\n+  }\n+\n+  /**\n+   * Clears any pending animations, animations that are parsed and in-memory, and\n+   * optionally, any animations loaded from the network that are cached to disk.\n+   */\n+  public static void clearCache(Context context, boolean includeNetwork) {\n     taskCache.clear();\n     LottieCompositionCache.getInstance().clear();\n-    final NetworkCache networkCache = L.networkCache(context);\n-    if (networkCache != null) {\n-      networkCache.clear();\n+    if (includeNetwork) {\n+      final NetworkCache networkCache = L.networkCache(context);\n+      if (networkCache != null) {\n+        networkCache.clear();\n+      }\n     }\n   }\n ",
    "output": "Add an option to not clear the network cache (#2559)\n\nFixes #2498"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -225,7 +225,40 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n       return new LottieResult<>(cachedComposition);\n     }\n     try {\n-      BufferedSource source = Okio.buffer(source(context.getAssets().open(fileName)));\n+      return fromInputStreamSync(context, context.getAssets().open(fileName), cacheKey);\n+    } catch (IOException e) {\n+      return new LottieResult<>(e);\n+    }\n+  }\n+\n+  /**\n+   * Use this when you have an input stream but aren't sure if it is a json, zip, or gzip file.\n+   * This will read the file headers to see if it starts with the gzip or zip magic bytes.\n+   * @param context is optional and only needed if your zip file contains ttf or otf fonts. If yours doesn't, you may pass null.\n+   *                Embedded fonts may be .ttf or .otf files, can be in subdirectories, but must have the same name as the\n+   *                font family (fFamily) in your animation file.\n+   */\n+  public static LottieTask<LottieComposition> fromInputStream(@Nullable Context context, InputStream inputStream, @Nullable String cacheKey) {\n+    // Prevent accidentally leaking an Activity.\n+    final Context appContext = context == null ? null : context.getApplicationContext();\n+    return cache(cacheKey, () -> fromInputStreamSync(appContext, inputStream, cacheKey), null);\n+  }\n+\n+  /**\n+   * Use this when you have an input stream but aren't sure if it is a json, zip, or gzip file.\n+   * This will read the file headers to see if it starts with the gzip or zip magic bytes.\n+   * @param context is optional and only needed if your zip file contains ttf or otf fonts. If yours doesn't, you may pass null.\n+   *                Embedded fonts may be .ttf or .otf files, can be in subdirectories, but must have the same name as the\n+   *                font family (fFamily) in your animation file.\n+   */\n+  @WorkerThread\n+  public static LottieResult<LottieComposition> fromInputStreamSync(@Nullable Context context, InputStream inputStream, @Nullable String cacheKey) {\n+    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n+    if (cachedComposition != null) {\n+      return new LottieResult<>(cachedComposition);\n+    }\n+    try {\n+      BufferedSource source = Okio.buffer(source(inputStream));\n       if (isZipCompressed(source)) {\n         return fromZipStreamSync(context, new ZipInputStream(source.inputStream()), cacheKey);\n       } else if (isGzipCompressed(source)) {\n@@ -553,7 +586,8 @@ public static LottieResult<LottieComposition> fromZipStreamSync(@Nullable Contex\n   }\n \n   @WorkerThread\n-  private static LottieResult<LottieComposition> fromZipStreamSyncInternal(@Nullable Context context, ZipInputStream inputStream, @Nullable String cacheKey) {\n+  private static LottieResult<LottieComposition> fromZipStreamSyncInternal(@Nullable Context context, ZipInputStream inputStream,\n+      @Nullable String cacheKey) {\n     LottieComposition composition = null;\n     Map<String, Bitmap> images = new HashMap<>();\n     Map<String, Typeface> fonts = new HashMap<>();\n@@ -583,7 +617,8 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(@Nullab\n           String fontFamily = fileName.split(\"\\\\.\")[0];\n \n           if (context == null) {\n-            return new LottieResult<>(new IllegalStateException(\"Unable to extract font \" + fontFamily + \" please pass a non-null Context parameter\"));\n+            return new LottieResult<>(\n+                new IllegalStateException(\"Unable to extract font \" + fontFamily + \" please pass a non-null Context parameter\"));\n           }\n \n           File tempFile = new File(context.getCacheDir(), fileName);",
    "output": "Unify the parsing of generic input streams (#2558)\n\nFixes #2490"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -70,7 +70,9 @@\n  */\n @SuppressWarnings({\"WeakerAccess\"})\n public class LottieDrawable extends Drawable implements Drawable.Callback, Animatable {\n+\n   private interface LazyCompositionTask {\n+\n     void run(LottieComposition composition);\n   }\n \n@@ -96,10 +98,10 @@ private enum OnVisibleAction {\n   /**\n    * The marker to use if \"reduced motion\" is enabled.\n    * Supported marker names are case insensitive, and include:\n-   *   - reduced motion\n-   *   - reducedMotion\n-   *   - reduced_motion\n-   *   - reduced-motion\n+   * - reduced motion\n+   * - reducedMotion\n+   * - reduced_motion\n+   * - reduced-motion\n    */\n   private static final List<String> ALLOWED_REDUCED_MOTION_MARKERS = Arrays.asList(\n       \"reduced motion\",\n@@ -179,7 +181,9 @@ private enum OnVisibleAction {\n    */\n   private boolean isDirty = false;\n \n-  /** Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}. */\n+  /**\n+   * Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}.\n+   */\n   @Nullable private AsyncUpdates asyncUpdates;\n   private final ValueAnimator.AnimatorUpdateListener progressUpdateListener = animation -> {\n     if (getAsyncUpdatesEnabled()) {\n@@ -250,6 +254,7 @@ private enum OnVisibleAction {\n   @IntDef({RESTART, REVERSE})\n   @Retention(RetentionPolicy.SOURCE)\n   public @interface RepeatMode {\n+\n   }\n \n   /**\n@@ -766,13 +771,14 @@ public void draw(Canvas canvas, Matrix matrix) {\n         }\n       }\n \n-      if (useSoftwareRendering) {\n-        canvas.save();\n-        canvas.concat(matrix);\n-        renderAndDrawAsBitmap(canvas, compositionLayer);\n-        canvas.restore();\n+      if (safeMode) {\n+        try {\n+          draw(canvas, matrix, compositionLayer, alpha);\n+        } catch (Throwable e) {\n+          Logger.error(\"Lottie crashed in draw!\", e);\n+        }\n       } else {\n-        compositionLayer.draw(canvas, matrix, alpha);\n+        draw(canvas, matrix, compositionLayer, alpha);\n       }\n       isDirty = false;\n     } catch (InterruptedException e) {\n@@ -787,6 +793,17 @@ public void draw(Canvas canvas, Matrix matrix) {\n     }\n   }\n \n+  private void draw(Canvas canvas, Matrix matrix, CompositionLayer compositionLayer, int alpha) {\n+    if (useSoftwareRendering) {\n+      canvas.save();\n+      canvas.concat(matrix);\n+      renderAndDrawAsBitmap(canvas, compositionLayer);\n+      canvas.restore();\n+    } else {\n+      compositionLayer.draw(canvas, matrix, alpha);\n+    }\n+  }\n+\n   // <editor-fold desc=\"animator\">\n \n   @MainThread",
    "output": "[Compose] Fix safe mode for Compose (#2557)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1245,7 +1245,7 @@ boolean isAnimatingOrWillAnimateOnVisible() {\n     }\n   }\n \n-  public boolean animationsEnabled(Context context) {\n+  public boolean animationsEnabled(@Nullable Context context) {\n     if (ignoreSystemAnimationsDisabled) {\n       return true;\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/ReducedMotionOption.java b/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/ReducedMotionOption.java\n--- a/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/ReducedMotionOption.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/ReducedMotionOption.java\n@@ -1,11 +1,12 @@\n package com.airbnb.lottie.configurations.reducemotion;\n \n import android.content.Context;\n+import androidx.annotation.Nullable;\n \n public interface ReducedMotionOption {\n \n   /**\n    * Returns the current reduced motion mode.\n    */\n-  ReducedMotionMode getCurrentReducedMotionMode(Context context);\n+  ReducedMotionMode getCurrentReducedMotionMode(@Nullable Context context);\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/SystemReducedMotionOption.java b/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/SystemReducedMotionOption.java\n--- a/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/SystemReducedMotionOption.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/SystemReducedMotionOption.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie.configurations.reducemotion;\n \n import android.content.Context;\n+import androidx.annotation.Nullable;\n import com.airbnb.lottie.utils.Utils;\n \n /**\n@@ -18,8 +19,8 @@\n public class SystemReducedMotionOption implements ReducedMotionOption {\n \n   @Override\n-  public ReducedMotionMode getCurrentReducedMotionMode(Context context) {\n-    if (Utils.getAnimationScale(context) != 0f) {\n+  public ReducedMotionMode getCurrentReducedMotionMode(@Nullable Context context) {\n+    if (context == null || Utils.getAnimationScale(context) != 0f) {\n       return ReducedMotionMode.STANDARD_MOTION;\n     } else {\n       return ReducedMotionMode.REDUCED_MOTION;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -14,6 +14,7 @@\n import android.os.Build;\n import android.provider.Settings;\n \n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.L;\n@@ -262,7 +263,7 @@ public static float dpScale() {\n     return Resources.getSystem().getDisplayMetrics().density;\n   }\n \n-  public static float getAnimationScale(Context context) {\n+  public static float getAnimationScale(@NonNull Context context) {\n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n       return Settings.Global.getFloat(context.getContentResolver(),\n           Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);",
    "output": "Adding null check for context before calling `Utils.getAnimationScale` (#2546)\n\nWhen calling reduce motion check we need to pass context, we read context in LottieDrawable using `getContext` method. getContext method can return a nullable context, since the code is in java we don't get any compile time error when passing the null context around. \r\n\r\nThis resulted in issue where we end up calling `getContentResolver` on a null object in case where context is null. https://github.com/airbnb/lottie-android/pull/2536\r\n\r\nThis PR fixes it by adding a null check before calling `Utils.getAnimationScale(context)`\r\n\r\nCo-authored-by: Pranay Airan <pranay.airan@airbnb.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n@@ -70,21 +70,29 @@ public void setYValueCallback(@Nullable LottieValueCallback<Float> yValueCallbac\n     if (xValueCallback != null) {\n       Keyframe<Float> xKeyframe = xAnimation.getCurrentKeyframe();\n       if (xKeyframe != null) {\n-        float progress = xAnimation.getInterpolatedCurrentKeyframeProgress();\n         Float endFrame = xKeyframe.endFrame;\n         xCallbackValue =\n-            xValueCallback.getValueInternal(xKeyframe.startFrame, endFrame == null ? xKeyframe.startFrame : endFrame, xKeyframe.startValue,\n-                xKeyframe.endValue, keyframeProgress, keyframeProgress, progress);\n+            xValueCallback.getValueInternal(xKeyframe.startFrame,\n+                endFrame == null ? xKeyframe.startFrame : endFrame,\n+                xKeyframe.startValue,\n+                xKeyframe.endValue,\n+                xAnimation.getInterpolatedCurrentKeyframeProgress(),\n+                xAnimation.getLinearCurrentKeyframeProgress(),\n+                xAnimation.getProgress());\n       }\n     }\n     if (yValueCallback != null) {\n       Keyframe<Float> yKeyframe = yAnimation.getCurrentKeyframe();\n       if (yKeyframe != null) {\n-        float progress = yAnimation.getInterpolatedCurrentKeyframeProgress();\n         Float endFrame = yKeyframe.endFrame;\n         yCallbackValue =\n-            yValueCallback.getValueInternal(yKeyframe.startFrame, endFrame == null ? yKeyframe.startFrame : endFrame, yKeyframe.startValue,\n-                yKeyframe.endValue, keyframeProgress, keyframeProgress, progress);\n+            yValueCallback.getValueInternal(yKeyframe.startFrame,\n+                endFrame == null ? yKeyframe.startFrame : endFrame,\n+                yKeyframe.startValue,\n+                yKeyframe.endValue,\n+                yAnimation.getInterpolatedCurrentKeyframeProgress(),\n+                yAnimation.getLinearCurrentKeyframeProgress(),\n+                yAnimation.getProgress());\n       }\n     }\n ",
    "output": "Fix SplitDimensionPathKeyframeAnimation value callbacks arguments (#2543)\n\nCo-authored-by: Alexander Dorokhov <dorokhov17@yandex-team.ru>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -823,15 +823,15 @@ public void playAnimation() {\n     }\n \n     computeRenderMode();\n-    if (animationsEnabled() || getRepeatCount() == 0) {\n+    if (animationsEnabled(getContext()) || getRepeatCount() == 0) {\n       if (isVisible()) {\n         animator.playAnimation();\n         onVisibleAction = OnVisibleAction.NONE;\n       } else {\n         onVisibleAction = OnVisibleAction.PLAY;\n       }\n     }\n-    if (!animationsEnabled()) {\n+    if (!animationsEnabled(getContext())) {\n       Marker markerForAnimationsDisabled = getMarkerForAnimationsDisabled();\n       if (markerForAnimationsDisabled != null) {\n         setFrame((int) markerForAnimationsDisabled.startFrame);\n@@ -853,7 +853,8 @@ public void playAnimation() {\n    *\n    * @return The first non-null marker from the list of allowed reduced motion markers, or null if no such marker is found.\n    */\n-  private Marker getMarkerForAnimationsDisabled() {\n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  public Marker getMarkerForAnimationsDisabled() {\n     Marker marker = null;\n     for (String markerName : ALLOWED_REDUCED_MOTION_MARKERS) {\n       marker = composition.getMarker(markerName);\n@@ -885,15 +886,15 @@ public void resumeAnimation() {\n     }\n \n     computeRenderMode();\n-    if (animationsEnabled() || getRepeatCount() == 0) {\n+    if (animationsEnabled(getContext()) || getRepeatCount() == 0) {\n       if (isVisible()) {\n         animator.resumeAnimation();\n         onVisibleAction = OnVisibleAction.NONE;\n       } else {\n         onVisibleAction = OnVisibleAction.RESUME;\n       }\n     }\n-    if (!animationsEnabled()) {\n+    if (!animationsEnabled(getContext())) {\n       setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n       animator.endAnimation();\n       if (!isVisible()) {\n@@ -1244,12 +1245,12 @@ boolean isAnimatingOrWillAnimateOnVisible() {\n     }\n   }\n \n-  private boolean animationsEnabled() {\n+  public boolean animationsEnabled(Context context) {\n     if (ignoreSystemAnimationsDisabled) {\n       return true;\n     }\n     return systemAnimationsEnabled &&\n-        L.getReducedMotionOption().getCurrentReducedMotionMode(getContext()) == ReducedMotionMode.STANDARD_MOTION;\n+        L.getReducedMotionOption().getCurrentReducedMotionMode(context) == ReducedMotionMode.STANDARD_MOTION;\n   }\n \n   /**",
    "output": "[a11y] Adding reduce motion logic to LottieAnimation for compose usage (#2542)\n\nOur changes in https://github.com/airbnb/lottie-android/pull/2536 didn't work for `LottieAnimation` in compose. While LottieAnimation does use LottieDrawable, it has it's own animator and draws on canvas directly. \r\n\r\nThis PR addresses that issue by making some logic of reduce motion readable outside LottieDrawable and consuming that logic in `LottieAnimation` \r\n\r\nI tested this by adding a sample lottie file with reduce motion marker locally, see the attached video. \r\n\r\nhttps://github.com/user-attachments/assets/eb33333f-86b8-46fa-9bbb-82bff8a8c7fe\r\n\r\nCo-authored-by: Pranay Airan <pranay.airan@airbnb.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n@@ -22,11 +22,8 @@ public PathKeyframeAnimation(List<? extends Keyframe<PointF>> keyframes) {\n   @Override public PointF getValue(Keyframe<PointF> keyframe, float keyframeProgress) {\n     PathKeyframe pathKeyframe = (PathKeyframe) keyframe;\n     Path path = pathKeyframe.getPath();\n-    if (path == null) {\n-      return keyframe.startValue;\n-    }\n \n-    if (valueCallback != null) {\n+    if (valueCallback != null && keyframe.endFrame != null) {\n       PointF value = valueCallback.getValueInternal(pathKeyframe.startFrame, pathKeyframe.endFrame,\n           pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress(),\n           keyframeProgress, getProgress());\n@@ -35,6 +32,10 @@ pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress\n       }\n     }\n \n+    if (path == null) {\n+      return keyframe.startValue;\n+    }\n+\n     if (pathMeasureKeyframe != pathKeyframe) {\n       pathMeasure.setPath(path, false);\n       pathMeasureKeyframe = pathKeyframe;",
    "output": "Fix value callback is not called for PathKeyframeAnimation (#2540)\n\nCo-authored-by: Alexander Dorokhov <dorokhov17@yandex-team.ru>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/DropShadowKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/DropShadowKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/DropShadowKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/DropShadowKeyframeAnimation.java\n@@ -11,8 +11,13 @@\n \n \n public class DropShadowKeyframeAnimation implements BaseKeyframeAnimation.AnimationListener {\n+\n   private static final float DEG_TO_RAD = (float) (Math.PI / 180.0);\n \n+  // We scale the \"Softness\" value by a constant factor so that the Paint.setShadowLayer() call\n+  // gives results that more closely match After Effects\n+  private static final float AFTER_EFFECT_SOFTNESS_SCALE_FACTOR = 0.33f;\n+\n   private final BaseLayer layer;\n   private final BaseKeyframeAnimation.AnimationListener listener;\n   private final BaseKeyframeAnimation<Integer, Integer> color;\n@@ -57,6 +62,7 @@ public DropShadowKeyframeAnimation(BaseKeyframeAnimation.AnimationListener liste\n   /**\n    * Applies a shadow to the provided Paint object, which will be applied to the Canvas behind whatever is drawn\n    * (a shape, bitmap, path, etc.)\n+   *\n    * @param parentAlpha A value between 0 and 255 representing the combined alpha of all parents of this drop shadow effect.\n    *                    E.g. The layer via transform, the fill/stroke via its opacity, etc.\n    */\n@@ -85,7 +91,7 @@ public void applyTo(Paint paint, Matrix parentMatrix, int parentAlpha) {\n     int color = Color.argb(opacity, Color.red(baseColor), Color.green(baseColor), Color.blue(baseColor));\n \n     // Paint.setShadowLayer() removes the shadow if radius is 0, so we use a small nonzero value in that case\n-    float radius = Math.max(this.radius.getValue() * scaleX, Float.MIN_VALUE);\n+    float radius = Math.max(this.radius.getValue() * scaleX * AFTER_EFFECT_SOFTNESS_SCALE_FACTOR, Float.MIN_VALUE);\n \n     if (paintRadius == radius && paintX == x && paintY == y && paintColor == color) {\n       return;\n@@ -97,8 +103,8 @@ public void applyTo(Paint paint, Matrix parentMatrix, int parentAlpha) {\n     paint.setShadowLayer(radius, x, y, color);\n   }\n \n-  public void setColorCallback(@Nullable  LottieValueCallback<Integer> callback) {\n-   color.setValueCallback(callback);\n+  public void setColorCallback(@Nullable LottieValueCallback<Integer> callback) {\n+    color.setValueCallback(callback);\n   }\n \n   public void setOpacityCallback(@Nullable final LottieValueCallback<Float> callback) {",
    "output": "Apply scaling factor to drop shadow softness (#2541)\n\nDirectly using the \"Softness\" value from the Lottie file (after accounting for dp and layer scaling) as the `radius` argument to `Paint.setShadowLayer()` results in shadows that are too soft. Since the underlying implementation calls into JNI code and is undocumented, we can only take a best guess as to how the After Effects softness value should be mapped to this argument. The [Lottie web implementation](https://github.com/airbnb/lottie-web/blob/master/player/js/elements/svgElements/effects/SVGDropShadowEffect.js#L63) multiplies the value by a constant factor of 0.25, so we take a similar approach here, using a value of 0.33 to achieve a close match to a reference image.\r\n\r\n<img width=500 src=\"https://github.com/user-attachments/assets/2d160061-77a0-43a2-945c-1d94d7422a2a\">"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -138,6 +138,9 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n   }\n \n   public boolean hasSameContext(Context context) {\n+    if (context == null) {\n+      return this.context == null;\n+    }\n     Context contextToCompare = this.context instanceof Application ? context.getApplicationContext() : context;\n     return contextToCompare == this.context;\n   }",
    "output": "Fix NPE in ImageAssetManager#hasSameContext (#2503) (#2532)\n\nCo-authored-by: Corey Wu <coreywu@meta.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -166,15 +166,15 @@ public abstract class BaseStrokeContent\n     }\n     int alpha = (int) ((parentAlpha / 255f * ((IntegerKeyframeAnimation) opacityAnimation).getIntValue() / 100f) * 255);\n     paint.setAlpha(clamp(alpha, 0, 255));\n-    paint.setStrokeWidth(((FloatKeyframeAnimation) widthAnimation).getFloatValue() * Utils.getScale(parentMatrix));\n+    paint.setStrokeWidth(((FloatKeyframeAnimation) widthAnimation).getFloatValue());\n     if (paint.getStrokeWidth() <= 0) {\n       // Android draws a hairline stroke for 0, After Effects doesn't.\n       if (L.isTraceEnabled()) {\n         L.endSection(\"StrokeContent#draw\");\n       }\n       return;\n     }\n-    applyDashPatternIfNeeded(parentMatrix);\n+    applyDashPatternIfNeeded();\n \n     if (colorFilterAnimation != null) {\n       paint.setColorFilter(colorFilterAnimation.getValue());\n@@ -194,19 +194,21 @@ public abstract class BaseStrokeContent\n       dropShadowAnimation.applyTo(paint, parentMatrix, Utils.mixOpacities(parentAlpha, alpha));\n     }\n \n+    canvas.save();\n+    canvas.concat(parentMatrix);\n     for (int i = 0; i < pathGroups.size(); i++) {\n       PathGroup pathGroup = pathGroups.get(i);\n \n \n       if (pathGroup.trimPath != null) {\n-        applyTrimPath(canvas, pathGroup, parentMatrix);\n+        applyTrimPath(canvas, pathGroup);\n       } else {\n         if (L.isTraceEnabled()) {\n           L.beginSection(\"StrokeContent#buildPath\");\n         }\n         path.reset();\n         for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {\n-          path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n+          path.addPath(pathGroup.paths.get(j).getPath());\n         }\n         if (L.isTraceEnabled()) {\n           L.endSection(\"StrokeContent#buildPath\");\n@@ -218,12 +220,13 @@ public abstract class BaseStrokeContent\n         }\n       }\n     }\n+    canvas.restore();\n     if (L.isTraceEnabled()) {\n       L.endSection(\"StrokeContent#draw\");\n     }\n   }\n \n-  private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatrix) {\n+  private void applyTrimPath(Canvas canvas, PathGroup pathGroup) {\n     if (L.isTraceEnabled()) {\n       L.beginSection(\"StrokeContent#applyTrimPath\");\n     }\n@@ -235,7 +238,7 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     }\n     path.reset();\n     for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {\n-      path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n+      path.addPath(pathGroup.paths.get(j).getPath());\n     }\n     float animStartValue = pathGroup.trimPath.getStart().getValue() / 100f;\n     float animEndValue = pathGroup.trimPath.getEnd().getValue() / 100f;\n@@ -262,7 +265,6 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     float currentLength = 0;\n     for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {\n       trimPathPath.set(pathGroup.paths.get(j).getPath());\n-      trimPathPath.transform(parentMatrix);\n       pm.setPath(trimPathPath, false);\n       float length = pm.getLength();\n       if (endLength > totalLength && endLength - totalLength < currentLength + length &&\n@@ -336,7 +338,7 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     }\n   }\n \n-  private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n+  private void applyDashPatternIfNeeded() {\n     if (L.isTraceEnabled()) {\n       L.beginSection(\"StrokeContent#applyDashPattern\");\n     }\n@@ -347,7 +349,6 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n       return;\n     }\n \n-    float scale = Utils.getScale(parentMatrix);\n     for (int i = 0; i < dashPatternAnimations.size(); i++) {\n       dashPatternValues[i] = dashPatternAnimations.get(i).getValue();\n       // If the value of the dash pattern or gap is too small, the number of individual sections\n@@ -363,9 +364,8 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n           dashPatternValues[i] = 0.1f;\n         }\n       }\n-      dashPatternValues[i] *= scale;\n     }\n-    float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue() * scale;\n+    float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue();\n     paint.setPathEffect(new DashPathEffect(dashPatternValues, offset));\n     if (L.isTraceEnabled()) {\n       L.endSection(\"StrokeContent#applyDashPattern\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n@@ -76,7 +76,6 @@ public GradientStrokeContent(\n     } else {\n       shader = getRadialGradient();\n     }\n-    shader.setLocalMatrix(parentMatrix);\n     paint.setShader(shader);\n \n     super.draw(canvas, parentMatrix, parentAlpha);",
    "output": "Apply transformation for the stroke on the canvas so the skew is also… (#2531)\n\nI noticed that the Android implementation had trouble with applying a skew on a stroke, so this attempts to fix that issue.\r\n\r\nThe issue was that since the transformation was applied to the path, it didn’t take any properties from the paint into consideration. As a result, the skew was not applied to the width of the line. By applying the transformation on the canvas, this issue is resolved.\r\n\r\nExample Lottie which wasn’t rendered correctly (should have skewed lines):\r\n[Skewed-Stroke.json](https://github.com/user-attachments/files/16495718/Skewed-Stroke.json)\r\n\r\nCo-authored-by: Mirko <m.volkers@wearetriple.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -553,7 +553,7 @@ public static LottieResult<LottieComposition> fromZipStreamSync(@Nullable Contex\n   }\n \n   @WorkerThread\n-  private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context context, ZipInputStream inputStream, @Nullable String cacheKey) {\n+  private static LottieResult<LottieComposition> fromZipStreamSyncInternal(@Nullable Context context, ZipInputStream inputStream, @Nullable String cacheKey) {\n     LottieComposition composition = null;\n     Map<String, Bitmap> images = new HashMap<>();\n     Map<String, Typeface> fonts = new HashMap<>();\n@@ -581,6 +581,11 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n           String[] splitName = entryName.split(\"/\");\n           String fileName = splitName[splitName.length - 1];\n           String fontFamily = fileName.split(\"\\\\.\")[0];\n+\n+          if (context == null) {\n+            return new LottieResult<>(new IllegalStateException(\"Unable to extract font \" + fontFamily + \" please pass a non-null Context parameter\"));\n+          }\n+\n           File tempFile = new File(context.getCacheDir(), fileName);\n           try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n             try (OutputStream output = new FileOutputStream(tempFile)) {",
    "output": "LottieCompositionFactory: Avoid NPE when animation contains a Font Family and Context is null. (#2530)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -11,7 +11,6 @@\n import android.graphics.BitmapFactory;\n import android.graphics.Typeface;\n import android.util.Base64;\n-import android.util.Log;\n \n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n@@ -48,6 +47,7 @@\n \n import okio.BufferedSource;\n import okio.Okio;\n+import okio.Source;\n \n /**\n  * Helpers to create or cache a LottieComposition.\n@@ -363,7 +363,7 @@ public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStrea\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStream stream, @Nullable String cacheKey, boolean close) {\n-    return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey, close);\n+    return fromJsonSourceSync(source(stream), cacheKey, close);\n   }\n \n   /**\n@@ -384,7 +384,7 @@ public static LottieTask<LottieComposition> fromJson(final JSONObject json, @Nul\n    */\n   @Deprecated\n   @WorkerThread\n-  public static LottieResult<LottieComposition> fromJsonSync(JSONObject json, @Nullable String cacheKey) {\n+  public static LottieResult<LottieComposition> fromJsonSync(final JSONObject json, @Nullable String cacheKey) {\n     return fromJsonStringSync(json.toString(), cacheKey);\n   }\n \n@@ -402,26 +402,41 @@ public static LottieTask<LottieComposition> fromJsonString(final String json, @N\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonStringSync(String json, @Nullable String cacheKey) {\n     ByteArrayInputStream stream = new ByteArrayInputStream(json.getBytes());\n-    return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey);\n+    return fromJsonSourceSync(source(stream), cacheKey);\n+  }\n+\n+  public static LottieTask<LottieComposition> fromJsonSource(final Source source, @Nullable final String cacheKey) {\n+    return cache(cacheKey, () -> fromJsonSourceSync(source, cacheKey), () -> Utils.closeQuietly(source));\n+  }\n+\n+  @WorkerThread\n+  public static LottieResult<LottieComposition> fromJsonSourceSync(final Source source, @Nullable String cacheKey) {\n+    return fromJsonSourceSync(source, cacheKey, true);\n+  }\n+\n+  @WorkerThread\n+  public static LottieResult<LottieComposition> fromJsonSourceSync(final Source source, @Nullable String cacheKey,\n+      boolean close) {\n+    return fromJsonReaderSyncInternal(JsonReader.of(buffer(source)), cacheKey, close);\n   }\n \n   public static LottieTask<LottieComposition> fromJsonReader(final JsonReader reader, @Nullable final String cacheKey) {\n     return cache(cacheKey, () -> fromJsonReaderSync(reader, cacheKey), () -> Utils.closeQuietly(reader));\n   }\n \n   @WorkerThread\n-  public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey) {\n+  public static LottieResult<LottieComposition> fromJsonReaderSync(final JsonReader reader, @Nullable String cacheKey) {\n     return fromJsonReaderSync(reader, cacheKey, true);\n   }\n \n   @WorkerThread\n-  public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey,\n+  public static LottieResult<LottieComposition> fromJsonReaderSync(final JsonReader reader, @Nullable String cacheKey,\n       boolean close) {\n     return fromJsonReaderSyncInternal(reader, cacheKey, close);\n   }\n \n   private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n-      com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n+      JsonReader reader, @Nullable String cacheKey, boolean close) {\n     try {\n       final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n       if (cachedComposition != null) {\n@@ -556,7 +571,7 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n         } else if (entry.getName().equalsIgnoreCase(\"manifest.json\")) { //ignore .lottie manifest\n           inputStream.closeEntry();\n         } else if (entry.getName().contains(\".json\")) {\n-          com.airbnb.lottie.parser.moshi.JsonReader reader = JsonReader.of(buffer(source(inputStream)));\n+          JsonReader reader = JsonReader.of(buffer(source(inputStream)));\n           composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();\n         } else if (entryName.contains(\".png\") || entryName.contains(\".webp\") || entryName.contains(\".jpg\") || entryName.contains(\".jpeg\")) {\n           String[] splitName = entryName.split(\"/\");\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n@@ -19,7 +19,8 @@\n import static okio.Okio.buffer;\n import static okio.Okio.source;\n import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertSame;\n+\n+import okio.Source;\n \n @SuppressWarnings(\"ReferenceEquality\")\n public class LottieCompositionFactoryTest extends BaseTest {\n@@ -67,6 +68,14 @@ public void testLoadInvalidJsonString() {\n         assertNull(result.getValue());\n     }\n \n+    @Test\n+    public void testLoadJsonSource() {\n+        Source source = source(new ByteArrayInputStream(JSON.getBytes()));\n+        LottieResult<LottieComposition> result = LottieCompositionFactory.fromJsonSourceSync(source, \"json\");\n+        assertNull(result.getException());\n+        assertNotNull(result.getValue());\n+    }\n+\n     @Test\n     public void testLoadJsonReader() {\n         JsonReader reader = JsonReader.of(buffer(source(new ByteArrayInputStream(JSON.getBytes()))));",
    "output": "LottieCompositionFactory: Add factory methods that take an okio Source. (#2527)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -231,7 +231,7 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n       } else if (isGzipCompressed(source)) {\n         return fromJsonInputStreamSync(new GZIPInputStream(source.inputStream()), cacheKey);\n       }\n-      return fromJsonInputStreamSync(source.inputStream(), cacheKey);\n+      return fromJsonReaderSync(JsonReader.of(source), cacheKey);\n     } catch (IOException e) {\n       return new LottieResult<>(e);\n     }\n@@ -312,7 +312,7 @@ public static LottieResult<LottieComposition> fromRawResSync(Context context, @R\n           return new LottieResult<>(e);\n         }\n       }\n-      return fromJsonInputStreamSync(source.inputStream(), cacheKey);\n+      return fromJsonReaderSync(JsonReader.of(source), cacheKey);\n     } catch (Resources.NotFoundException e) {\n       return new LottieResult<>(e);\n     }",
    "output": "LottieCompositionFactory: Reduce Source -> InputStream -> Source conversion. (#2529)\n\nfromJsonInputStreamSync() would just convert the InputStream back into a Source."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -567,8 +567,7 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n           String fileName = splitName[splitName.length - 1];\n           String fontFamily = fileName.split(\"\\\\.\")[0];\n           File tempFile = new File(context.getCacheDir(), fileName);\n-          FileOutputStream fos = new FileOutputStream(tempFile);\n-          try {\n+          try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n             try (OutputStream output = new FileOutputStream(tempFile)) {\n               byte[] buffer = new byte[4 * 1024];\n               int read;",
    "output": "LottieCompositionFactory#fromZipStreamSyncInternal close FileOutputStream. (#2528)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -71,12 +71,15 @@ public class LottieComposition {\n    */\n   private int maskAndMatteCount = 0;\n \n+  private int unscaledWidth;\n+  private int unscaledHeight;\n+\n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n       List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,\n       List<Layer>> precomps, Map<String, LottieImageAsset> images, float imagesDpScale,\n       SparseArrayCompat<FontCharacter> characters, Map<String, Font> fonts,\n-      List<Marker> markers) {\n+      List<Marker> markers, int unscaledWidth, int unscaledHeight) {\n     this.bounds = bounds;\n     this.startFrame = startFrame;\n     this.endFrame = endFrame;\n@@ -89,6 +92,8 @@ public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n     this.characters = characters;\n     this.fonts = fonts;\n     this.markers = markers;\n+    this.unscaledWidth = unscaledWidth;\n+    this.unscaledHeight = unscaledHeight;\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n@@ -232,6 +237,13 @@ public float getDurationFrames() {\n     return endFrame - startFrame;\n   }\n \n+  public int getUnscaledWidth() {\n+    return unscaledWidth;\n+  }\n+\n+  public int getUnscaledHeight() {\n+    return unscaledHeight;\n+  }\n \n   @NonNull\n   @Override\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n@@ -44,8 +44,8 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n     float frameRate = 0f;\n     final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n     final List<Layer> layers = new ArrayList<>();\n-    int width = 0;\n-    int height = 0;\n+    int unscaledWidth = 0;\n+    int unscaledHeight = 0;\n     Map<String, List<Layer>> precomps = new HashMap<>();\n     Map<String, LottieImageAsset> images = new HashMap<>();\n     Map<String, Font> fonts = new HashMap<>();\n@@ -57,10 +57,10 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n     while (reader.hasNext()) {\n       switch (reader.selectName(NAMES)) {\n         case 0:\n-          width = reader.nextInt();\n+          unscaledWidth = reader.nextInt();\n           break;\n         case 1:\n-          height = reader.nextInt();\n+          unscaledHeight = reader.nextInt();\n           break;\n         case 2:\n           startFrame = (float) reader.nextDouble();\n@@ -102,12 +102,12 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n           reader.skipValue();\n       }\n     }\n-    int scaledWidth = (int) (width * scale);\n-    int scaledHeight = (int) (height * scale);\n+    int scaledWidth = (int) (unscaledWidth * scale);\n+    int scaledHeight = (int) (unscaledHeight * scale);\n     Rect bounds = new Rect(0, 0, scaledWidth, scaledHeight);\n \n     composition.init(bounds, startFrame, endFrame, frameRate, layers, layerMap, precomps,\n-        images, Utils.dpScale(), characters, fonts, markers);\n+        images, Utils.dpScale(), characters, fonts, markers, unscaledWidth, unscaledHeight);\n \n     return composition;\n   }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -4,10 +4,6 @@\n import android.graphics.Rect;\n import androidx.collection.LongSparseArray;\n import androidx.collection.SparseArrayCompat;\n-import com.airbnb.lottie.model.Font;\n-import com.airbnb.lottie.model.FontCharacter;\n-import com.airbnb.lottie.model.Marker;\n-import com.airbnb.lottie.model.layer.Layer;\n \n import org.junit.Before;\n import org.junit.Test;\n@@ -16,7 +12,6 @@\n \n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n \n import static junit.framework.Assert.assertEquals;\n import static org.mockito.ArgumentMatchers.any;\n@@ -39,7 +34,7 @@ private LottieComposition createComposition(int startFrame, int endFrame) {\n     composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<>(),\n         new LongSparseArray<>(0), new HashMap<>(0),\n         new HashMap<>(0), 1f, new SparseArrayCompat<>(0),\n-        new HashMap<>(0), new ArrayList<>());\n+        new HashMap<>(0), new ArrayList<>(), 0, 0);\n     return composition;\n   }\n \n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -5,10 +5,6 @@\n import android.graphics.Rect;\n import androidx.collection.LongSparseArray;\n import androidx.collection.SparseArrayCompat;\n-import com.airbnb.lottie.model.Font;\n-import com.airbnb.lottie.model.FontCharacter;\n-import com.airbnb.lottie.model.Marker;\n-import com.airbnb.lottie.model.layer.Layer;\n import com.airbnb.lottie.utils.LottieValueAnimator;\n import org.junit.Before;\n import org.junit.Test;\n@@ -17,7 +13,6 @@\n \n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static junit.framework.Assert.assertEquals;\n@@ -63,7 +58,7 @@ private LottieComposition createComposition(int startFrame, int endFrame) {\n     composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<>(),\n         new LongSparseArray<>(0), new HashMap<>(0),\n         new HashMap<>(0), 1f, new SparseArrayCompat<>(0),\n-        new HashMap<>(0), new ArrayList<>());\n+        new HashMap<>(0), new ArrayList<>(), 0, 0);\n     return composition;\n   }\n ",
    "output": "LottieComposition: Add getUnscaledHeight & getUnscaledWidth functions. (#2514)\n\nUse case: I just want to know the unscaled original height / width of the LottieAnimation. I want to do my own scaling by calculating for instance given an aspect ratio or weighted settings, how big/small I can stretch the animation."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -403,14 +403,32 @@ public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n    * instead of using merge paths.\n    */\n   public void enableMergePathsForKitKatAndAbove(boolean enable) {\n-    lottieDrawable.enableMergePathsForKitKatAndAbove(enable);\n+    lottieDrawable.enableFeatureFlag(LottieFeatureFlag.MergePathsApi19, enable);\n   }\n \n   /**\n    * Returns whether merge paths are enabled for KitKat and above.\n    */\n   public boolean isMergePathsEnabledForKitKatAndAbove() {\n-    return lottieDrawable.isMergePathsEnabledForKitKatAndAbove();\n+    return lottieDrawable.isFeatureFlagEnabled(LottieFeatureFlag.MergePathsApi19);\n+  }\n+\n+  /**\n+   * Enable the specified feature for this LottieView.\n+   * <p>\n+   * Features guarded by LottieFeatureFlags are experimental or only supported by a subset of API levels.\n+   * Please ensure that the animation supported by the enabled feature looks acceptable across all\n+   * targeted API levels.\n+   */\n+  public void enableFeatureFlag(LottieFeatureFlag flag, boolean enable) {\n+    lottieDrawable.enableFeatureFlag(flag, enable);\n+  }\n+\n+  /**\n+   * Returns whether the specified feature is enabled.\n+   */\n+  public boolean isFeatureFlagEnabled(LottieFeatureFlag flag) {\n+    return lottieDrawable.isFeatureFlagEnabled(flag);\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -26,7 +26,6 @@\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -142,7 +142,7 @@ private enum OnVisibleAction {\n   FontAssetDelegate fontAssetDelegate;\n   @Nullable\n   TextDelegate textDelegate;\n-  private boolean enableMergePaths;\n+  private final LottieFeatureFlags lottieFeatureFlags = new LottieFeatureFlags();\n   private boolean maintainOriginalImageBounds = false;\n   private boolean clipToCompositionBounds = true;\n   @Nullable\n@@ -285,34 +285,51 @@ public boolean hasMatte() {\n     return compositionLayer != null && compositionLayer.hasMatte();\n   }\n \n+  @Deprecated\n   public boolean enableMergePathsForKitKatAndAbove() {\n-    return enableMergePaths;\n+    return lottieFeatureFlags.isFlagEnabled(LottieFeatureFlag.MergePathsApi19);\n   }\n \n   /**\n    * Enable this to get merge path support for devices running KitKat (19) and above.\n+   * Deprecated: Use enableFeatureFlag(LottieFeatureFlags.FeatureFlag.MergePathsApi19, enable)\n    * <p>\n    * Merge paths currently don't work if the the operand shape is entirely contained within the\n    * first shape. If you need to cut out one shape from another shape, use an even-odd fill type\n    * instead of using merge paths.\n    */\n+  @Deprecated\n   public void enableMergePathsForKitKatAndAbove(boolean enable) {\n-    if (enableMergePaths == enable) {\n-      return;\n+    boolean changed = lottieFeatureFlags.enableFlag(LottieFeatureFlag.MergePathsApi19, enable);\n+    if (composition != null && changed) {\n+      buildCompositionLayer();\n     }\n+  }\n \n-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n-      Logger.warning(\"Merge paths are not supported pre-Kit Kat.\");\n-      return;\n-    }\n-    enableMergePaths = enable;\n-    if (composition != null) {\n+  /**\n+   * @deprecated Replaced by {@link #enableFeatureFlag(LottieFeatureFlag, boolean)}\n+   */\n+  @Deprecated\n+  public boolean isMergePathsEnabledForKitKatAndAbove() {\n+    return lottieFeatureFlags.isFlagEnabled(LottieFeatureFlag.MergePathsApi19);\n+  }\n+\n+  /**\n+   * Enable the specified feature for this drawable.\n+   * <p>\n+   * Features guarded by LottieFeatureFlags are experimental or only supported by a subset of API levels.\n+   * Please ensure that the animation supported by the enabled feature looks acceptable across all\n+   * targeted API levels.\n+   */\n+  public void enableFeatureFlag(LottieFeatureFlag flag, boolean enable) {\n+    boolean changed = lottieFeatureFlags.enableFlag(flag, enable);\n+    if (composition != null && changed) {\n       buildCompositionLayer();\n     }\n   }\n \n-  public boolean isMergePathsEnabledForKitKatAndAbove() {\n-    return enableMergePaths;\n+  public boolean isFeatureFlagEnabled(LottieFeatureFlag flag) {\n+    return lottieFeatureFlags.isFlagEnabled(flag);\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlag.java b/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlag.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlag.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlag.java\n@@ -0,0 +1,18 @@\n+package com.airbnb.lottie;\n+\n+import android.os.Build;\n+\n+public enum LottieFeatureFlag {\n+  /**\n+   * Merge paths currently don't work if the the operand shape is entirely contained within the\n+   * first shape. If you need to cut out one shape from another shape, use an even-odd fill type\n+   * instead of using merge paths.\n+   */\n+  MergePathsApi19(Build.VERSION_CODES.KITKAT);\n+\n+  public final int minRequiredSdkVersion;\n+\n+  LottieFeatureFlag(int minRequiredSdkVersion) {\n+    this.minRequiredSdkVersion = minRequiredSdkVersion;\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlags.java b/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlags.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlags.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieFeatureFlags.java\n@@ -0,0 +1,34 @@\n+package com.airbnb.lottie;\n+\n+import android.annotation.SuppressLint;\n+import android.os.Build;\n+\n+import com.airbnb.lottie.utils.Logger;\n+\n+import java.util.HashSet;\n+\n+class LottieFeatureFlags {\n+\n+  private final HashSet<LottieFeatureFlag> enabledFlags = new HashSet<>();\n+\n+  /**\n+   * Returns true if the flag was changed.\n+   */\n+  @SuppressLint(\"DefaultLocale\")\n+  public boolean enableFlag(LottieFeatureFlag flag, boolean enable) {\n+    if (enable) {\n+      if (Build.VERSION.SDK_INT < flag.minRequiredSdkVersion) {\n+        Logger.warning(String.format(\"%s is not supported pre SDK %d\", flag.name(), flag.minRequiredSdkVersion));\n+        return false;\n+      }\n+      return enabledFlags.add(flag);\n+    } else {\n+      return enabledFlags.remove(flag);\n+    }\n+  }\n+\n+  public boolean isFlagEnabled(LottieFeatureFlag flag) {\n+    return enabledFlags.contains(flag);\n+  }\n+\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java b/lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java\n@@ -4,6 +4,7 @@\n \n import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.LottieDrawable;\n+import com.airbnb.lottie.LottieFeatureFlag;\n import com.airbnb.lottie.animation.content.Content;\n import com.airbnb.lottie.animation.content.MergePathsContent;\n import com.airbnb.lottie.model.layer.BaseLayer;\n@@ -60,7 +61,7 @@ public boolean isHidden() {\n   }\n \n   @Override @Nullable public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {\n-    if (!drawable.enableMergePathsForKitKatAndAbove()) {\n+    if (!drawable.isFeatureFlagEnabled(LottieFeatureFlag.MergePathsApi19)) {\n       Logger.warning(\"Animation contains merge paths but they are disabled.\");\n       return null;\n     }",
    "output": "Add generalized Lottie Feature Flags API (#2512)\n\nCurrently there are individual methods for enabling and disabling Merge Paths in Lottie. This PR aims to generalize these functions as we consider adding more features guarded behind opt-in flags."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -640,7 +640,9 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n             Logger.warning(\"data URL did not have correct base64 format.\", e);\n             return null;\n           }\n-          asset.setBitmap(BitmapFactory.decodeByteArray(data, 0, data.length, opts));\n+          Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n+          bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n+          asset.setBitmap(bitmap);\n         }\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -107,7 +107,8 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n         return null;\n       }\n       bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n-      return putBitmap(id, bitmap);\n+      Bitmap resizedBitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n+      return putBitmap(id, resizedBitmap);\n     }\n \n     InputStream is;",
    "output": "Fix base64 image asset not fit container's size (#2501)\n\nCurrently, I am encountering a similar issue to [#1200](https://github.com/airbnb/lottie-android/issues/1200), but in the case where the asset is a base64 image, it has not been fixed yet."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java\n@@ -20,21 +20,23 @@ Integer getValue(Keyframe<Integer> keyframe, float keyframeProgress) {\n    * Optimization to avoid autoboxing.\n    */\n   int getIntValue(Keyframe<Integer> keyframe, float keyframeProgress) {\n-    if (keyframe.startValue == null || keyframe.endValue == null) {\n+    if (keyframe.startValue == null) {\n       throw new IllegalStateException(\"Missing values for keyframe.\");\n     }\n \n+    int endValue = keyframe.endValue == null ? keyframe.getStartValueInt() : keyframe.getEndValueInt();\n+\n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n       Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n-          keyframe.startValue, keyframe.endValue,\n+          keyframe.startValue, endValue,\n           keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n       if (value != null) {\n         return value;\n       }\n     }\n \n-    return MiscUtils.lerp(keyframe.getStartValueInt(), keyframe.getEndValueInt(), keyframeProgress);\n+    return MiscUtils.lerp(keyframe.getStartValueInt(), endValue, keyframeProgress);\n   }\n \n   /**",
    "output": "Allow missing end values for integer animations (#2487)\n\nFixes #2480"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -112,7 +112,8 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n     Keyframe<K> keyframe = getCurrentKeyframe();\n     // Keyframe should not be null here but there seems to be a Xiaomi Android 10 specific crash.\n     // https://github.com/airbnb/lottie-android/issues/2050\n-    if (keyframe == null || keyframe.isStatic()) {\n+    // https://github.com/airbnb/lottie-android/issues/2483\n+    if (keyframe == null || keyframe.isStatic() || keyframe.interpolator == null) {\n       return 0f;\n     }\n     //noinspection ConstantConditions",
    "output": "Add an additional null check in BaseKeyframeAnimation (#2486)\n\nFixes #2483"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -219,13 +219,13 @@ public boolean hasImages() {\n   public Map<String, LottieImageAsset> getImages() {\n     float dpScale = Utils.dpScale();\n     if (dpScale != imagesDpScale) {\n-      imagesDpScale = dpScale;\n       Set<Map.Entry<String, LottieImageAsset>> entries = images.entrySet();\n \n       for (Map.Entry<String, LottieImageAsset> entry : entries) {\n         images.put(entry.getKey(), entry.getValue().copyWithScale(imagesDpScale / dpScale));\n       }\n     }\n+    imagesDpScale = dpScale;\n     return images;\n   }\n ",
    "output": "Fix image scaling when the display scale changes (#2475)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie.animation.keyframe;\n \n+import android.annotation.SuppressLint;\n import androidx.annotation.FloatRange;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n@@ -16,7 +17,9 @@\n  * @param <A> Animation type\n  */\n public abstract class BaseKeyframeAnimation<K, A> {\n+\n   public interface AnimationListener {\n+\n     void onValueChanged();\n   }\n \n@@ -116,6 +119,7 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n     return keyframe.interpolator.getInterpolation(getLinearCurrentKeyframeProgress());\n   }\n \n+  @SuppressLint(\"Range\")\n   @FloatRange(from = 0f, to = 1f)\n   private float getStartDelayProgress() {\n     if (cachedStartDelayProgress == -1f) {\n@@ -124,6 +128,7 @@ private float getStartDelayProgress() {\n     return cachedStartDelayProgress;\n   }\n \n+  @SuppressLint(\"Range\")\n   @FloatRange(from = 0f, to = 1f)\n   float getEndProgress() {\n     if (cachedEndProgress == -1f) {\n@@ -196,6 +201,7 @@ private static <T> KeyframesWrapper<T> wrap(List<? extends Keyframe<T>> keyframe\n   }\n \n   private interface KeyframesWrapper<T> {\n+\n     boolean isEmpty();\n \n     boolean isValueChanged(float progress);\n@@ -212,6 +218,7 @@ private interface KeyframesWrapper<T> {\n   }\n \n   private static final class EmptyKeyframeWrapper<T> implements KeyframesWrapper<T> {\n+\n     @Override\n     public boolean isEmpty() {\n       return true;\n@@ -244,6 +251,7 @@ public boolean isCachedValueEnabled(float progress) {\n   }\n \n   private static final class SingleKeyframeWrapper<T> implements KeyframesWrapper<T> {\n+\n     @NonNull\n     private final Keyframe<T> keyframe;\n     private float cachedInterpolatedProgress = -1f;\n@@ -288,6 +296,7 @@ public boolean isCachedValueEnabled(float progress) {\n   }\n \n   private static final class KeyframesWrapperImpl<T> implements KeyframesWrapper<T> {\n+\n     private final List<? extends Keyframe<T>> keyframes;\n     @NonNull\n     private Keyframe<T> currentKeyframe;",
    "output": "Upgrade a bunch of dependencies (#2472)\n\nFixes #2471"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -137,18 +137,24 @@ public LottieResult<T> getResult() {\n \n   private void notifyListeners() {\n     // Listeners should be called on the main thread.\n-    handler.post(() -> {\n-      // Local reference in case it gets set on a background thread.\n-      LottieResult<T> result = LottieTask.this.result;\n-      if (result == null) {\n-        return;\n-      }\n-      if (result.getValue() != null) {\n-        notifySuccessListeners(result.getValue());\n-      } else {\n-        notifyFailureListeners(result.getException());\n-      }\n-    });\n+    if (Looper.myLooper() == Looper.getMainLooper()) {\n+      notifyListenersInternal();\n+    } else {\n+      handler.post(this::notifyListenersInternal);\n+    }\n+  }\n+\n+  private void notifyListenersInternal() {\n+    // Local reference in case it gets set on a background thread.\n+    LottieResult<T> result = LottieTask.this.result;\n+    if (result == null) {\n+      return;\n+    }\n+    if (result.getValue() != null) {\n+      notifySuccessListeners(result.getValue());\n+    } else {\n+      notifyFailureListeners(result.getException());\n+    }\n   }\n \n   private synchronized void notifySuccessListeners(T value) {",
    "output": "Call LottieTask listeners synchronously when already on the main thread (#2470)\n\nWhen we are already on the main thread, there is no need to post listeners to the main thread again.\r\n\r\nAs a side effect, this fixes #2449. The listener was called twice because it was called synchronously in addListener because it was already done and then because of the post, it was called again.\r\n\r\nFixes #2449"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java b/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java\n@@ -8,7 +8,8 @@\n @RestrictTo(RestrictTo.Scope.LIBRARY)\n public enum FileExtension {\n   JSON(\".json\"),\n-  ZIP(\".zip\");\n+  ZIP(\".zip\"),\n+  GZIP(\".gz\");\n \n   public final String extension;\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n@@ -76,6 +76,8 @@ Pair<FileExtension, InputStream> fetch(String url) {\n     FileExtension extension;\n     if (cachedFile.getAbsolutePath().endsWith(\".zip\")) {\n       extension = FileExtension.ZIP;\n+    } else if (cachedFile.getAbsolutePath().endsWith(\".gz\")) {\n+      extension = FileExtension.GZIP;\n     } else {\n       extension = FileExtension.JSON;\n     }\n@@ -143,6 +145,10 @@ private File getCachedFile(String url) throws FileNotFoundException {\n     if (zipFile.exists()) {\n       return zipFile;\n     }\n+    File gzipFile = new File(parentDir(), filenameForUrl(url, FileExtension.GZIP, false));\n+    if (gzipFile.exists()) {\n+      return gzipFile;\n+    }\n     return null;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -17,6 +17,7 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.zip.GZIPInputStream;\n import java.util.zip.ZipInputStream;\n \n @RestrictTo(RestrictTo.Scope.LIBRARY)\n@@ -59,10 +60,19 @@ private LottieComposition fetchFromCache(Context context, @NonNull String url, @\n     FileExtension extension = cacheResult.first;\n     InputStream inputStream = cacheResult.second;\n     LottieResult<LottieComposition> result;\n-    if (extension == FileExtension.ZIP) {\n-      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), cacheKey);\n-    } else {\n-      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey);\n+    switch (extension) {\n+      case ZIP:\n+        result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), cacheKey);\n+        break;\n+      case GZIP:\n+        try {\n+          result = LottieCompositionFactory.fromJsonInputStreamSync(new GZIPInputStream(inputStream), cacheKey);\n+        } catch (IOException e) {\n+          result = new LottieResult<>(e);\n+        }\n+        break;\n+      default:\n+        result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey);\n     }\n     if (result.getValue() != null) {\n       return result.getValue();\n@@ -117,6 +127,12 @@ private LottieResult<LottieComposition> fromInputStream(Context context, @NonNul\n       Logger.debug(\"Handling zip response.\");\n       extension = FileExtension.ZIP;\n       result = fromZipStream(context, url, inputStream, cacheKey);\n+    } else if (contentType.contains(\"application/gzip\") ||\n+        contentType.contains(\"application/x-gzip\") ||\n+        url.split(\"\\\\?\")[0].endsWith(\".tgs\")) {\n+      Logger.debug(\"Handling gzip response.\");\n+      extension = FileExtension.GZIP;\n+      result = fromGzipStream(url, inputStream, cacheKey);\n     } else {\n       Logger.debug(\"Received json response.\");\n       extension = FileExtension.JSON;\n@@ -140,6 +156,16 @@ private LottieResult<LottieComposition> fromZipStream(Context context, @NonNull\n     return LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(new FileInputStream(file)), url);\n   }\n \n+  @NonNull\n+  private LottieResult<LottieComposition> fromGzipStream(@NonNull String url, @NonNull InputStream inputStream, @Nullable String cacheKey)\n+      throws IOException {\n+    if (cacheKey == null || networkCache == null) {\n+      return LottieCompositionFactory.fromJsonInputStreamSync(new GZIPInputStream(inputStream), null);\n+    }\n+    File file = networkCache.writeTempCacheFile(url, inputStream, FileExtension.GZIP);\n+    return LottieCompositionFactory.fromJsonInputStreamSync(new GZIPInputStream(new FileInputStream(file)), url);\n+  }\n+\n   @NonNull\n   private LottieResult<LottieComposition> fromJsonStream(@NonNull String url, @NonNull InputStream inputStream, @Nullable String cacheKey)\n       throws IOException {",
    "output": "Add support for gzipped and tgs files from network (#2454)\n\nIn addition to [#2435](https://github.com/airbnb/lottie-android/pull/2435), added support for loading gziped and tgs files from the network, similar to zip files."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -641,6 +641,9 @@ public void setComposition(@NonNull LottieComposition composition) {\n \n     ignoreUnschedule = true;\n     boolean isNewComposition = lottieDrawable.setComposition(composition);\n+    if (autoPlay) {\n+      lottieDrawable.playAnimation();\n+    }\n     ignoreUnschedule = false;\n     if (getDrawable() == lottieDrawable && !isNewComposition) {\n       // We can avoid re-setting the drawable, and invalidating the view, since the composition\n@@ -1080,6 +1083,7 @@ public <T> void addValueCallback(KeyPath keyPath, T property,\n \n   @MainThread\n   public void cancelAnimation() {\n+    autoPlay = false;\n     userActionsTaken.add(UserActionTaken.PLAY_OPTION);\n     lottieDrawable.cancelAnimation();\n   }",
    "output": "Respect autoPlay when setting a new composition (#2469)\n\nFixes #2464"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -43,7 +43,7 @@\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n- * bodymovin (https://github.com/bodymovin/bodymovin).\n+ * bodymovin (<a href=\"https://github.com/airbnb/lottie-web\">github.com/airbnb/lottie-web</a>).\n  * <p>\n  * You may set the animation in one of two ways:\n  * 1) Attrs: {@link R.styleable#LottieAnimationView_lottie_fileName}\n@@ -139,10 +139,6 @@ public WeakFailureListener(LottieAnimationView target) {\n   private final Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n \n   @Nullable private LottieTask<LottieComposition> compositionTask;\n-  /**\n-   * Can be null because it is created async\n-   */\n-  @Nullable private LottieComposition composition;\n \n   public LottieAnimationView(Context context) {\n     super(context);\n@@ -269,16 +265,22 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n   }\n \n   @Override public void setImageResource(int resId) {\n+    this.animationResId = 0;\n+    animationName = null;\n     cancelLoaderTask();\n     super.setImageResource(resId);\n   }\n \n   @Override public void setImageDrawable(Drawable drawable) {\n+    this.animationResId = 0;\n+    animationName = null;\n     cancelLoaderTask();\n     super.setImageDrawable(drawable);\n   }\n \n   @Override public void setImageBitmap(Bitmap bm) {\n+    this.animationResId = 0;\n+    animationName = null;\n     cancelLoaderTask();\n     super.setImageBitmap(bm);\n   }\n@@ -607,7 +609,8 @@ public void setFallbackResource(@DrawableRes int fallbackResource) {\n \n   private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {\n     LottieResult<LottieComposition> result = compositionTask.getResult();\n-    if (result != null && result.getValue() == composition) {\n+    LottieDrawable lottieDrawable = this.lottieDrawable;\n+    if (result != null && lottieDrawable == getDrawable() && lottieDrawable.getComposition() == result.getValue()) {\n       return;\n     }\n     userActionsTaken.add(UserActionTaken.SET_ANIMATION);\n@@ -636,7 +639,6 @@ public void setComposition(@NonNull LottieComposition composition) {\n     }\n     lottieDrawable.setCallback(this);\n \n-    this.composition = composition;\n     ignoreUnschedule = true;\n     boolean isNewComposition = lottieDrawable.setComposition(composition);\n     ignoreUnschedule = false;\n@@ -663,7 +665,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n   }\n \n   @Nullable public LottieComposition getComposition() {\n-    return composition;\n+    return getDrawable() == lottieDrawable ? lottieDrawable.getComposition() : null;\n   }\n \n   /**\n@@ -930,7 +932,7 @@ public boolean isAnimating() {\n    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes\n    * from After Effects. If your images look like they could be represented with vector shapes,\n    * see if it is possible to convert them to shape layers and re-export your animation. Check\n-   * the documentation at http://airbnb.io/lottie for more information about importing shapes from\n+   * the documentation at <a href=\"http://airbnb.io/lottie\">airbnb.io/lottie</a> for more information about importing shapes from\n    * Sketch or Illustrator to avoid this.\n    */\n   public void setImageAssetsFolder(String imageAssetsFolder) {\n@@ -981,7 +983,7 @@ public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes\n    * from After Effects. If your images look like they could be represented with vector shapes,\n    * see if it is possible to convert them to shape layers and re-export your animation. Check\n-   * the documentation at http://airbnb.io/lottie for more information about importing shapes from\n+   * the documentation at <a href=\"http://airbnb.io/lottie\">airbnb.io/lottie</a> for more information about importing shapes from\n    * Sketch or Illustrator to avoid this.\n    */\n   public void setImageAssetDelegate(ImageAssetDelegate assetDelegate) {\n@@ -1122,6 +1124,7 @@ private void setProgressInternal(\n   }\n \n   public long getDuration() {\n+    LottieComposition composition = getComposition();\n     return composition != null ? (long) composition.getDuration() : 0;\n   }\n \n@@ -1135,7 +1138,6 @@ public PerformanceTracker getPerformanceTracker() {\n   }\n \n   private void clearComposition() {\n-    composition = null;\n     lottieDrawable.clearComposition();\n   }\n \n@@ -1247,7 +1249,7 @@ public void disableExtraScaleModeInFitXY() {\n   }\n \n   public boolean addLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {\n-    LottieComposition composition = this.composition;\n+    LottieComposition composition = getComposition();\n     if (composition != null) {\n       lottieOnCompositionLoadedListener.onCompositionLoaded(composition);\n     }",
    "output": "Remove LottieAnimationView.composition so it doesn't get out of sync (#2468)\n\nFixes #2467"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -7,6 +7,7 @@\n import androidx.annotation.RestrictTo;\n \n import com.airbnb.lottie.utils.Logger;\n+import com.airbnb.lottie.utils.LottieThreadFactory;\n \n import java.util.ArrayList;\n import java.util.LinkedHashSet;\n@@ -35,7 +36,7 @@ public class LottieTask<T> {\n    * You may change this to run deserialization synchronously for testing.\n    */\n   @SuppressWarnings(\"WeakerAccess\")\n-  public static Executor EXECUTOR = Executors.newCachedThreadPool();\n+  public static Executor EXECUTOR = Executors.newCachedThreadPool(new LottieThreadFactory());\n \n   /* Preserve add order. */\n   private final Set<LottieListener<T>> successListeners = new LinkedHashSet<>(1);\n@@ -64,7 +65,7 @@ public LottieTask(T result) {\n         setResult(new LottieResult<>(e));\n       }\n     } else {\n-      EXECUTOR.execute(new LottieFutureTask(runnable));\n+      EXECUTOR.execute(new LottieFutureTask<T>(this, runnable));\n     }\n   }\n \n@@ -173,22 +174,45 @@ private synchronized void notifyFailureListeners(Throwable e) {\n     }\n   }\n \n-  private class LottieFutureTask extends FutureTask<LottieResult<T>> {\n-    LottieFutureTask(Callable<LottieResult<T>> callable) {\n+  private static class LottieFutureTask<T> extends FutureTask<LottieResult<T>> {\n+\n+    private LottieTask<T> lottieTask;\n+\n+    LottieFutureTask(LottieTask<T> task, Callable<LottieResult<T>> callable) {\n       super(callable);\n+      lottieTask = task;\n     }\n \n     @Override\n     protected void done() {\n-      if (isCancelled()) {\n-        // We don't need to notify and listeners if the task is cancelled.\n-        return;\n-      }\n-\n       try {\n-        setResult(get());\n-      } catch (InterruptedException | ExecutionException e) {\n-        setResult(new LottieResult<>(e));\n+        if (isCancelled()) {\n+          // We don't need to notify and listeners if the task is cancelled.\n+          return;\n+        }\n+\n+        try {\n+          lottieTask.setResult(get());\n+        } catch (InterruptedException | ExecutionException e) {\n+          lottieTask.setResult(new LottieResult<>(e));\n+        }\n+      } finally {\n+        // LottieFutureTask can be held in memory for up to 60 seconds after the task is done, which would\n+        // result in holding on to the associated LottieTask instance and leaking its listeners. To avoid\n+        // that, we clear our the reference to the LottieTask instance.\n+        //\n+        // How is LottieFutureTask held for up to 60 seconds? It's a bug in how the VM cleans up stack\n+        // local variables. When you have a loop that polls a blocking queue and assigns the result\n+        // to a local variable, after looping the local variable will still reference the previous value\n+        // until the queue returns the next result.\n+        //\n+        // Executors.newCachedThreadPool() relies on a SynchronousQueue and creates a cached thread pool\n+        // with a default keep alice of 60 seconds. After a given worker thread runs a task, that thread\n+        // will wait for up to 60 seconds for a new task to come, and while waiting it's also accidentally\n+        // keeping a reference to the previous task.\n+        //\n+        // See commit d577e728e9bccbafc707af3060ea914caa73c14f in AOSP for how that was fixed for Looper.\n+        lottieTask = null;\n       }\n     }\n   }",
    "output": "Fix LottieTask leak (#2465)\n\nI investigated leaks with `RememberLottieComposition` and `LottieAnimationView`, initially thinking that we might need to stop listening to LottieTask when a view or composition gets detached / removed.\r\n\r\nHowever, after looking at a heap dump, I realized that the LottieTask was actually finished. It had delivered its result so it didn't have any reason to stay in memory.\r\n\r\nThis moved my suspicion to SynchronousQueue as Android has had issues with queues & worker threads on several occasions (see code for details).\r\n\r\nAlso updated the cached thread pool to create threads named \"lottie\".\r\n\r\nLeaks:\r\n\r\n```\r\n┬───\r\n│ GC Root: Thread object\r\n│\r\n├─ java.lang.Thread instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181913 objects\r\n│    Thread name: 'pool-88-thread-2'\r\n│    ↓ Thread<Java Local>\r\n│            ~~~~~~~~~~~~\r\n├─ java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181909 objects\r\n│    ↓ SynchronousQueue$TransferStack$SNode.match\r\n│                                           ~~~~~\r\n├─ java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181908 objects\r\n│    ↓ SynchronousQueue$TransferStack$SNode.item\r\n│                                           ~~~~\r\n├─ com.airbnb.lottie.LottieTask$LottieFutureTask instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181907 objects\r\n│    ↓ LottieTask$LottieFutureTask.this$0\r\n│                                  ~~~~~~\r\n├─ com.airbnb.lottie.LottieTask instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181905 objects\r\n│    ↓ LottieTask.failureListeners\r\n│                 ~~~~~~~~~~~~~~~~\r\n├─ java.util.LinkedHashSet instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 113 B in 5 objects\r\n│    ↓ LinkedHashSet[element()]\r\n│                   ~~~~~~~~~~~\r\n├─ com.airbnb.lottie.compose.RememberLottieCompositionKt$await$2$2 instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 12 B in 1 objects\r\n│    Anonymous class implementing com.airbnb.lottie.LottieListener\r\n│    ↓ RememberLottieCompositionKt$await$2$2.$cont\r\n│                                            ~~~~~\r\n├─ kotlinx.coroutines.CancellableContinuationImpl instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181892 objects\r\n│    ↓ CancellableContinuationImpl.delegate\r\n│                                  ~~~~~~~~\r\n├─ androidx.compose.ui.test.FrameDeferringContinuationInterceptor$FrameDeferredContinuation instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181888 objects\r\n│    ↓ FrameDeferringContinuationInterceptor$FrameDeferredContinuation.continuation\r\n│                                                                      ~~~~~~~~~~~~\r\n├─ androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181887 objects\r\n│    ↓ ApplyingContinuationInterceptor$SendApplyContinuation.continuation\r\n│                                                            ~~~~~~~~~~~~\r\n├─ com.airbnb.lottie.compose.RememberLottieCompositionKt$lottieComposition$1 instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181886 objects\r\n│    Anonymous subclass of kotlin.coroutines.jvm.internal.ContinuationImpl\r\n│    ↓ BaseContinuationImpl.completion\r\n│                           ~~~~~~~~~~\r\n├─ com.airbnb.lottie.compose.RememberLottieCompositionKt$rememberLottieComposition$3 instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 6.2 MB in 181885 objects\r\n│    Anonymous subclass of kotlin.coroutines.jvm.internal.SuspendLambda\r\n│    $context instance of com.squareup.ui.market.core.theme.MarketContextWrapper, wrapping activity com.squareup.ui.main.MainActivity with mDestroyed = true\r\n│    ↓ RememberLottieCompositionKt$rememberLottieComposition$3.$context\r\n│                                                              ~~~~~~~~\r\n╰→ com.squareup.ui.market.core.theme.MarketContextWrapper instance\r\n​     Leaking: YES (MarketContextWrapper wraps an Activity with Activity.mDestroyed true)\r\n​     Retaining 6.2 MB in 181845 objects\r\n​     mBase instance of com.squareup.ui.market.core.theme.MarketContextWrapper, wrapping activity com.squareup.ui.main.MainActivity with mDestroyed = true\r\n```\r\n\r\n```\r\n┬───\r\n│ GC Root: Thread object\r\n│\r\n├─ java.lang.Thread instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 8.1 MB in 257497 objects\r\n│    Thread name: 'pool-38-thread-1'\r\n│    ↓ Thread<Java Local>\r\n│            ~~~~~~~~~~~~\r\n├─ java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 8.1 MB in 257493 objects\r\n│    ↓ SynchronousQueue$TransferStack$SNode.match\r\n│                                           ~~~~~\r\n├─ java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 8.1 MB in 257492 objects\r\n│    ↓ SynchronousQueue$TransferStack$SNode.item\r\n│                                           ~~~~\r\n├─ com.airbnb.lottie.LottieTask$LottieFutureTask instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 8.1 MB in 257491 objects\r\n│    ↓ LottieTask$LottieFutureTask.this$0\r\n│                                  ~~~~~~\r\n├─ com.airbnb.lottie.LottieTask instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 8.1 MB in 257489 objects\r\n│    ↓ LottieTask.failureListeners\r\n│                 ~~~~~~~~~~~~~~~~\r\n├─ java.util.LinkedHashSet instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 101 B in 4 objects\r\n│    ↓ LinkedHashSet[element()]\r\n│                   ~~~~~~~~~~~\r\n├─ com.airbnb.lottie.LottieAnimationView$1 instance\r\n│    Leaking: UNKNOWN\r\n│    Retaining 12 B in 1 objects\r\n│    Anonymous class implementing com.airbnb.lottie.LottieListener\r\n│    ↓ LottieAnimationView$1.this$0\r\n│                            ~~~~~~\r\n╰→ com.airbnb.lottie.LottieAnimationView instance\r\n​     Leaking: YES (View.mContext references a destroyed activity)\r\n​     Retaining 8.1 MB in 257476 objects\r\n​     View not part of a window view hierarchy\r\n​     View.mAttachInfo is null (view detached)\r\n​     View.mWindowAttachCount = 1\r\n​     mContext instance of flow.path.FlowPathContextWrapper, wrapping activity com.squareup.ui.main.MainActivity with mDestroyed = true\r\n```"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n@@ -45,17 +45,14 @@ pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress\n \n     float length = pathMeasure.getLength();\n \n-    if (keyframeProgress < 0) {\n-      pathMeasure.getPosTan(0, pos, tangent);\n-      float tangentAmount = keyframeProgress * length;\n-      point.set(pos[0] + tangent[0] * tangentAmount, pos[1] + tangent[1] * tangentAmount);\n-    } else if (keyframeProgress > 1) {\n-      pathMeasure.getPosTan(length, pos, tangent);\n-      float tangentAmount = (keyframeProgress - 1) * length;\n-      point.set(pos[0] + tangent[0] * tangentAmount, pos[1] + tangent[1] * tangentAmount);\n-    } else {\n-      pathMeasure.getPosTan(keyframeProgress * length, pos, null);\n-      point.set(pos[0], pos[1]);\n+    float distance =  keyframeProgress * length;\n+    pathMeasure.getPosTan(distance, pos, tangent);\n+    point.set(pos[0], pos[1]);\n+\n+    if (distance < 0) {\n+      point.offset(tangent[0] * distance, tangent[1] * distance);\n+    } else if (distance > length) {\n+      point.offset(tangent[0] * (distance - length), tangent[1] * (distance - length));\n     }\n     return point;\n   }",
    "output": "Better tangent extrapolation implementation when using bounce easings (#2459)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n@@ -11,6 +11,7 @@\n public class PathKeyframeAnimation extends KeyframeAnimation<PointF> {\n   private final PointF point = new PointF();\n   private final float[] pos = new float[2];\n+  private final float[] tangent = new float[2];\n   private final PathMeasure pathMeasure = new PathMeasure();\n   private PathKeyframe pathMeasureKeyframe;\n \n@@ -39,8 +40,23 @@ pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress\n       pathMeasureKeyframe = pathKeyframe;\n     }\n \n-    pathMeasure.getPosTan(keyframeProgress * pathMeasure.getLength(), pos, null);\n-    point.set(pos[0], pos[1]);\n+    // allow bounce easings to calculate positions outside the path\n+    // by using the tangent at the extremities\n+\n+    float length = pathMeasure.getLength();\n+\n+    if (keyframeProgress < 0) {\n+      pathMeasure.getPosTan(0, pos, tangent);\n+      float tangentAmount = keyframeProgress * length;\n+      point.set(pos[0] + tangent[0] * tangentAmount, pos[1] + tangent[1] * tangentAmount);\n+    } else if (keyframeProgress > 1) {\n+      pathMeasure.getPosTan(length, pos, tangent);\n+      float tangentAmount = (keyframeProgress - 1) * length;\n+      point.set(pos[0] + tangent[0] * tangentAmount, pos[1] + tangent[1] * tangentAmount);\n+    } else {\n+      pathMeasure.getPosTan(keyframeProgress * length, pos, null);\n+      point.set(pos[0], pos[1]);\n+    }\n     return point;\n   }\n }",
    "output": "Allow bounce easings along a path to return a position outside of the path (#2457)\n\nDon't clamp interpolated distance along path to 'progress' value between 0 and 1.\r\n\r\nBounce in / Bounce out easings can transform the progress to negative values or values higher than 1. `getPosTan` unfortunately clamps the input to be between 0 and 1, so we need to handle the t < 0 and t > 1 cases separately.\r\n\r\n\r\nThis is for the same issue I helped fix in the flutter library as well here: https://github.com/xvrh/lottie-flutter/pull/330\r\n\r\nExpected result (both bounce-in and bounce out) along linear and curved paths: \r\n\r\nhttps://github.com/airbnb/lottie-android/assets/632735/6a25e139-fc81-4c3b-b3f3-be118c56db06"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -51,6 +51,7 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n@@ -91,6 +92,21 @@ private enum OnVisibleAction {\n    */\n   private static final boolean invalidateSelfOnMainThread = Build.VERSION.SDK_INT <= Build.VERSION_CODES.N_MR1;\n \n+  /**\n+   * The marker to use if \"reduced motion\" is enabled.\n+   * Supported marker names are case insensitive, and include:\n+   *   - reduced motion\n+   *   - reducedMotion\n+   *   - reduced_motion\n+   *   - reduced-motion\n+   */\n+  private static final List<String> ALLOWED_REDUCED_MOTION_MARKERS = Arrays.asList(\n+      \"reduced motion\",\n+      \"reduced_motion\",\n+      \"reduced-motion\",\n+      \"reducedmotion\"\n+  );\n+\n   private LottieComposition composition;\n   private final LottieValueAnimator animator = new LottieValueAnimator();\n \n@@ -794,14 +810,38 @@ public void playAnimation() {\n       }\n     }\n     if (!animationsEnabled()) {\n-      setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n+      Marker markerForAnimationsDisabled = getMarkerForAnimationsDisabled();\n+      if (markerForAnimationsDisabled != null) {\n+        setFrame((int) markerForAnimationsDisabled.startFrame);\n+      } else {\n+        setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n+      }\n       animator.endAnimation();\n       if (!isVisible()) {\n         onVisibleAction = OnVisibleAction.NONE;\n       }\n     }\n   }\n \n+\n+  /**\n+   * This method is used to get the marker for animations when system animations are disabled.\n+   * It iterates over the list of allowed reduced motion markers and returns the first non-null marker it finds.\n+   * If no non-null marker is found, it returns null.\n+   *\n+   * @return The first non-null marker from the list of allowed reduced motion markers, or null if no such marker is found.\n+   */\n+  private Marker getMarkerForAnimationsDisabled() {\n+    Marker marker = null;\n+    for (String markerName : ALLOWED_REDUCED_MOTION_MARKERS) {\n+      marker = composition.getMarker(markerName);\n+      if (marker != null) {\n+        break;\n+      }\n+    }\n+    return marker;\n+  }\n+\n   @MainThread\n   public void endAnimation() {\n     lazyCompositionTasks.clear();\n@@ -1185,7 +1225,12 @@ private boolean animationsEnabled() {\n   /**\n    * Tell Lottie that system animations are disabled. When using {@link LottieAnimationView} or Compose {@code LottieAnimation}, this is done\n    * automatically. However, if you are using LottieDrawable on its own, you should set this to false when\n-   * {@link com.airbnb.lottie.utils.Utils#getAnimationScale(Context)} is 0.\n+   * {@link com.airbnb.lottie.utils.Utils#getAnimationScale(Context)} is 0. If the animation is provided a \"reduced motion\"\n+   * marker name, they will be shown instead of the first or last frame. Supported marker names are case insensitive, and include:\n+   * - reduced motion\n+   * - reducedMotion\n+   * - reduced_motion\n+   * - reduced-motion\n    */\n   public void setSystemAnimationsAreEnabled(Boolean areEnabled) {\n     systemAnimationsEnabled = areEnabled;",
    "output": "[a11y] Check for reduced motion frame names (#2451)\n\nBrings parity to the android for the changes in iOS airbnb/lottie-ios/pull/2110\r\n\r\nThis PR adds support for respecting the system \"reduction motion\" option.\r\n\r\n\r\n### Animations Enabled\r\n\r\n\r\nhttps://github.com/airbnb/lottie-android/assets/1218420/d29b62f6-db07-49f9-a7de-221949eef646\r\n\r\n\r\n### Animations Disabled\r\n\r\n\r\nhttps://github.com/airbnb/lottie-android/assets/1218420/2f346a78-d637-4c4a-8f60-8aa4e69e140d\r\n\r\nCo-authored-by: Gabriel Peal <gpeal@users.noreply.github.com>\r\nCo-authored-by: Steven Bassett <steven.bassett@airbnb.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -15,7 +15,6 @@\n import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.Log;\n-\n import androidx.annotation.AttrRes;\n import androidx.annotation.DrawableRes;\n import androidx.annotation.FloatRange;\n@@ -26,7 +25,6 @@\n import androidx.annotation.RequiresApi;\n import androidx.appcompat.content.res.AppCompatResources;\n import androidx.appcompat.widget.AppCompatImageView;\n-\n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.utils.Logger;\n import com.airbnb.lottie.utils.Utils;\n@@ -36,7 +34,6 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n-import java.io.PushbackInputStream;\n import java.lang.ref.WeakReference;\n import java.util.HashSet;\n import java.util.List;\n@@ -609,6 +606,10 @@ public void setFallbackResource(@DrawableRes int fallbackResource) {\n   }\n \n   private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {\n+    LottieResult<LottieComposition> result = compositionTask.getResult();\n+    if (result != null && result.getValue() == composition) {\n+      return;\n+    }\n     userActionsTaken.add(UserActionTaken.SET_ANIMATION);\n     clearComposition();\n     cancelLoaderTask();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -704,7 +704,7 @@ private static LottieTask<LottieComposition> cache(@Nullable final String cacheK\n     LottieTask<LottieComposition> task = null;\n     final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n     if (cachedComposition != null) {\n-      task = new LottieTask<>(() -> new LottieResult<>(cachedComposition));\n+      task = new LottieTask<>(cachedComposition);\n     }\n     if (cacheKey != null && taskCache.containsKey(cacheKey)) {\n       task = taskCache.get(cacheKey);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -25,7 +25,8 @@\n  * <p>\n  * A task will produce a single result or a single failure.\n  */\n-@SuppressWarnings(\"UnusedReturnValue\") public class LottieTask<T> {\n+@SuppressWarnings(\"UnusedReturnValue\")\n+public class LottieTask<T> {\n \n   /**\n    * Set this to change the executor that LottieTasks are run on. This will be the executor that composition parsing and url\n@@ -48,6 +49,10 @@ public LottieTask(Callable<LottieResult<T>> runnable) {\n     this(runnable, false);\n   }\n \n+  public LottieTask(T result) {\n+    setResult(new LottieResult<>(result));\n+  }\n+\n   /**\n    * runNow is only used for testing.\n    */\n@@ -124,6 +129,11 @@ public synchronized LottieTask<T> removeFailureListener(LottieListener<Throwable\n     return this;\n   }\n \n+  @Nullable\n+  public LottieResult<T> getResult() {\n+    return result;\n+  }\n+\n   private void notifyListeners() {\n     // Listeners should be called on the main thread.\n     handler.post(() -> {",
    "output": "Make all LottieAnimationView setters idempotent (#2441)\n\nFixes #2326"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n@@ -1,10 +1,9 @@\n package com.airbnb.lottie.animation.content;\n \n import android.graphics.Path;\n+import android.graphics.PathMeasure;\n import android.graphics.PointF;\n-\n import androidx.annotation.Nullable;\n-\n import com.airbnb.lottie.LottieDrawable;\n import com.airbnb.lottie.LottieProperty;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n@@ -28,6 +27,9 @@ public class PolystarContent\n   private static final float POLYSTAR_MAGIC_NUMBER = .47829f;\n   private static final float POLYGON_MAGIC_NUMBER = .25f;\n   private final Path path = new Path();\n+  private final Path lastSegmentPath = new Path();\n+  private final PathMeasure lastSegmentPathMeasure = new PathMeasure();\n+  private final float[] lastSegmentPosition = new float[2];\n \n   private final String name;\n   private final LottieDrawable lottieDrawable;\n@@ -291,8 +293,28 @@ private void createPolygonPath() {\n         float cp1y = radius * roundedness * POLYGON_MAGIC_NUMBER * cp1Dy;\n         float cp2x = radius * roundedness * POLYGON_MAGIC_NUMBER * cp2Dx;\n         float cp2y = radius * roundedness * POLYGON_MAGIC_NUMBER * cp2Dy;\n-        path.cubicTo(previousX - cp1x, previousY - cp1y, x + cp2x, y + cp2y, x, y);\n+\n+        if (i == numPoints - 1) {\n+          // When there is a huge stroke, it will flash if the path ends where it starts.\n+          // We want the final bezier curve to end *slightly* before the start.\n+          // The close() call at the end will complete the polystar.\n+          // https://github.com/airbnb/lottie-android/issues/2329\n+          lastSegmentPath.reset();\n+          lastSegmentPath.moveTo(previousX, previousY);\n+          lastSegmentPath.cubicTo(previousX - cp1x, previousY - cp1y, x + cp2x, y + cp2y, x, y);\n+          lastSegmentPathMeasure.setPath(lastSegmentPath, false);\n+          lastSegmentPathMeasure.getPosTan(lastSegmentPathMeasure.getLength() * 0.9999f, lastSegmentPosition, null);\n+          path.cubicTo(previousX - cp1x, previousY - cp1y, x + cp2x, y + cp2y,lastSegmentPosition[0], lastSegmentPosition[1]);\n+        } else {\n+          path.cubicTo(previousX - cp1x, previousY - cp1y, x + cp2x, y + cp2y, x, y);\n+        }\n       } else {\n+        if (i == numPoints - 1) {\n+          // When there is a huge stroke, it will flash if the path ends where it starts.\n+          // The close() call should make the path effectively equivalent.\n+          // https://github.com/airbnb/lottie-android/issues/2329\n+          continue;\n+        }\n         path.lineTo(x, y);\n       }\n ",
    "output": "Fix rendering artifacts for large strokes on polygons (#2440)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -215,6 +215,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setClipToCompositionBounds(ta.getBoolean(R.styleable.LottieAnimationView_lottie_clipToCompositionBounds, true));\n     }\n \n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_clipTextToBoundingBox)) {\n+      setClipTextToBoundingBox(ta.getBoolean(R.styleable.LottieAnimationView_lottie_clipTextToBoundingBox, false));\n+    }\n+\n     if (ta.hasValue(R.styleable.LottieAnimationView_lottie_defaultFontFileExtension)) {\n       setDefaultFontFileExtension(ta.getString(R.styleable.LottieAnimationView_lottie_defaultFontFileExtension));\n     }\n@@ -1217,6 +1221,21 @@ public void setApplyingOpacityToLayersEnabled(boolean isApplyingOpacityToLayersE\n     lottieDrawable.setApplyingOpacityToLayersEnabled(isApplyingOpacityToLayersEnabled);\n   }\n \n+  /**\n+   * @see #setClipTextToBoundingBox(boolean)\n+   */\n+  public boolean getClipTextToBoundingBox() {\n+    return lottieDrawable.getClipTextToBoundingBox();\n+  }\n+\n+  /**\n+   * When true, if there is a bounding box set on a text layer (paragraph text), any text\n+   * that overflows past its height will not be drawn.\n+   */\n+  public void setClipTextToBoundingBox(boolean clipTextToBoundingBox) {\n+    lottieDrawable.setClipTextToBoundingBox(clipTextToBoundingBox);\n+  }\n+\n   /**\n    * This API no longer has any effect.\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -135,6 +135,7 @@ private enum OnVisibleAction {\n   private boolean performanceTrackingEnabled;\n   private boolean outlineMasksAndMattes;\n   private boolean isApplyingOpacityToLayersEnabled;\n+  private boolean clipTextToBoundingBox = false;\n \n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n   /**\n@@ -539,6 +540,24 @@ public boolean isApplyingOpacityToLayersEnabled() {\n     return isApplyingOpacityToLayersEnabled;\n   }\n \n+  /**\n+   * @see #setClipTextToBoundingBox(boolean)\n+   */\n+  public boolean getClipTextToBoundingBox() {\n+    return clipTextToBoundingBox;\n+  }\n+\n+  /**\n+   * When true, if there is a bounding box set on a text layer (paragraph text), any text\n+   * that overflows past its height will not be drawn.\n+   */\n+  public void setClipTextToBoundingBox(boolean clipTextToBoundingBox) {\n+    if (clipTextToBoundingBox != this.clipTextToBoundingBox) {\n+      this.clipTextToBoundingBox = clipTextToBoundingBox;\n+      invalidateSelf();\n+    }\n+  }\n+\n   private void buildCompositionLayer() {\n     LottieComposition composition = this.composition;\n     if (composition == null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -35,6 +35,7 @@\n import java.util.Map;\n \n public class TextLayer extends BaseLayer {\n+\n   // Capacity is 2 because emojis are 2 characters. Some are longer in which case, the capacity will\n   // be expanded but that should be pretty rare.\n   private final StringBuilder stringBuilder = new StringBuilder(2);\n@@ -203,8 +204,9 @@ private void drawTextWithGlyphs(\n \n         canvas.save();\n \n-        offsetCanvas(canvas, documentData, lineIndex, line.width);\n-        drawGlyphTextLine(line.text, documentData, font, canvas, parentScale, fontScale, tracking);\n+        if (offsetCanvas(canvas, documentData, lineIndex, line.width)) {\n+          drawGlyphTextLine(line.text, documentData, font, canvas, parentScale, fontScale, tracking);\n+        }\n \n         canvas.restore();\n       }\n@@ -271,20 +273,24 @@ private void drawTextWithFont(DocumentData documentData, Font font, Canvas canva\n \n         canvas.save();\n \n-        offsetCanvas(canvas, documentData, lineIndex, line.width);\n-        drawFontTextLine(line.text, documentData, canvas, tracking);\n+        if (offsetCanvas(canvas, documentData, lineIndex, line.width)) {\n+          drawFontTextLine(line.text, documentData, canvas, tracking);\n+        }\n \n         canvas.restore();\n       }\n     }\n   }\n \n-  private void offsetCanvas(Canvas canvas, DocumentData documentData, int lineIndex, float lineWidth) {\n+  private boolean offsetCanvas(Canvas canvas, DocumentData documentData, int lineIndex, float lineWidth) {\n     PointF position = documentData.boxPosition;\n     PointF size = documentData.boxSize;\n     float dpScale = Utils.dpScale();\n     float lineStartY = position == null ? 0f : documentData.lineHeight * dpScale + position.y;\n     float lineOffset = (lineIndex * documentData.lineHeight * dpScale) + lineStartY;\n+    if (lottieDrawable.getClipTextToBoundingBox() && size != null && position != null && lineOffset >= position.y + size.y + documentData.size) {\n+      return false;\n+    }\n     float lineStart = position == null ? 0f : position.x;\n     float boxWidth = size == null ? 0f : size.x;\n     switch (documentData.justification) {\n@@ -298,6 +304,7 @@ private void offsetCanvas(Canvas canvas, DocumentData documentData, int lineInde\n         canvas.translate(lineStart + boxWidth / 2f - lineWidth / 2f, lineOffset);\n         break;\n     }\n+    return true;\n   }\n \n   @Nullable\n@@ -608,6 +615,7 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n   }\n \n   private static class TextSubLine {\n+\n     private String text = \"\";\n     private float width = 0f;\n ",
    "output": "Add an option to clip text if it goes beyond the Y bounds of paragraph text (#2412)\n\nFixes #2384"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.Bitmap;\n import android.graphics.ColorFilter;\n+import android.graphics.Path;\n import android.graphics.PointF;\n import android.graphics.Typeface;\n \n@@ -220,4 +221,15 @@ public interface LottieProperty {\n    * Replace the text for a text layer.\n    */\n   CharSequence TEXT = \"dynamic_text\";\n+\n+  /**\n+   * Replace a path. This can only be used on path contents. For other shapes such as rectangles and polystars,\n+   * use LottieProperties corresponding to their specific properties.\n+   * <p>\n+   * If you need to do any operations on the path such as morphing, use the Jetpack androidx.graphics.path library.\n+   * <p>\n+   * In After Effects, any of those other shapes can be converted to a bezier path by right clicking it and\n+   * selecting \"Convert To Bezier Path\".\n+   */\n+  Path PATH = new Path();\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n@@ -5,16 +5,20 @@\n import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.LottieDrawable;\n+import com.airbnb.lottie.LottieProperty;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n import com.airbnb.lottie.animation.keyframe.ShapeKeyframeAnimation;\n+import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.model.content.ShapePath;\n import com.airbnb.lottie.model.content.ShapeTrimPath;\n import com.airbnb.lottie.model.layer.BaseLayer;\n+import com.airbnb.lottie.utils.MiscUtils;\n+import com.airbnb.lottie.value.LottieValueCallback;\n \n import java.util.ArrayList;\n import java.util.List;\n \n-public class ShapeContent implements PathContent, BaseKeyframeAnimation.AnimationListener {\n+public class ShapeContent implements PathContent, BaseKeyframeAnimation.AnimationListener, KeyPathElementContent {\n   private final Path path = new Path();\n \n   private final String name;\n@@ -65,7 +69,7 @@ private void invalidate() {\n   }\n \n   @Override public Path getPath() {\n-    if (isPathValid) {\n+    if (isPathValid && !shapeAnimation.hasValueCallback()) {\n       return path;\n     }\n \n@@ -94,4 +98,17 @@ private void invalidate() {\n   @Override public String getName() {\n     return name;\n   }\n+\n+  @Override public void resolveKeyPath(\n+      KeyPath keyPath, int depth, List<KeyPath> accumulator, KeyPath currentPartialKeyPath) {\n+    MiscUtils.resolveKeyPath(keyPath, depth, accumulator, currentPartialKeyPath, this);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {\n+    if (property == LottieProperty.PATH) {\n+      shapeAnimation.setValueCallback((LottieValueCallback<Path>) callback);\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -168,6 +168,10 @@ public void setValueCallback(@Nullable LottieValueCallback<A> valueCallback) {\n     }\n   }\n \n+  public boolean hasValueCallback() {\n+    return valueCallback != null;\n+  }\n+\n   /**\n    * keyframeProgress will be [0, 1] unless the interpolator has overshoot in which case, this\n    * should be able to handle values outside of that range.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n@@ -14,6 +14,8 @@\n public class ShapeKeyframeAnimation extends BaseKeyframeAnimation<ShapeData, Path> {\n   private final ShapeData tempShapeData = new ShapeData();\n   private final Path tempPath = new Path();\n+  private Path valueCallbackStartPath;\n+  private Path valueCallbackEndPath;\n \n   private List<ShapeModifierContent> shapeModifiers;\n \n@@ -33,6 +35,20 @@ public ShapeKeyframeAnimation(List<Keyframe<ShapeData>> keyframes) {\n       }\n     }\n     MiscUtils.getPathFromData(modifiedShapeData, tempPath);\n+    if (valueCallback != null) {\n+      if (valueCallbackStartPath == null) {\n+        valueCallbackStartPath = new Path();\n+        valueCallbackEndPath = new Path();\n+      }\n+      MiscUtils.getPathFromData(startShapeData, valueCallbackStartPath);\n+      if (endShapeData != null) {\n+        MiscUtils.getPathFromData(endShapeData, valueCallbackEndPath);\n+      }\n+\n+      return valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n+          valueCallbackStartPath, endShapeData ==  null ? valueCallbackStartPath : valueCallbackEndPath,\n+          keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+    }\n     return tempPath;\n   }\n ",
    "output": "Allow shape contents to have dynamic properties for its path (#2439)\n\nFixes #2389"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -19,15 +19,18 @@\n import com.airbnb.lottie.parser.moshi.JsonReader;\n import com.airbnb.lottie.utils.Logger;\n import com.airbnb.lottie.utils.MiscUtils;\n+import com.airbnb.lottie.utils.Utils;\n \n import org.json.JSONObject;\n \n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * After Effects/Bodymovin composition model. This is the serialized model from which the\n@@ -44,6 +47,7 @@ public class LottieComposition {\n   private final HashSet<String> warnings = new HashSet<>();\n   private Map<String, List<Layer>> precomps;\n   private Map<String, LottieImageAsset> images;\n+  private float imagesDpScale;\n   /**\n    * Map of font names to fonts\n    */\n@@ -71,7 +75,7 @@ public class LottieComposition {\n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n       List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,\n-      List<Layer>> precomps, Map<String, LottieImageAsset> images,\n+      List<Layer>> precomps, Map<String, LottieImageAsset> images, float imagesDpScale,\n       SparseArrayCompat<FontCharacter> characters, Map<String, Font> fonts,\n       List<Marker> markers) {\n     this.bounds = bounds;\n@@ -82,6 +86,7 @@ public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n     this.layerMap = layerMap;\n     this.precomps = precomps;\n     this.images = images;\n+    this.imagesDpScale = imagesDpScale;\n     this.characters = characters;\n     this.fonts = fonts;\n     this.markers = markers;\n@@ -208,8 +213,19 @@ public boolean hasImages() {\n    * Returns a map of image asset id to {@link LottieImageAsset}. These assets contain image metadata exported\n    * from After Effects or other design tool. The resulting Bitmaps can be set directly on the image asset so\n    * they can be loaded once and reused across compositions.\n+   *\n+   * If the context dp scale has changed since the last time images were retrieved, images will be rescaled.\n    */\n   public Map<String, LottieImageAsset> getImages() {\n+    float dpScale = Utils.dpScale();\n+    if (dpScale != imagesDpScale) {\n+      imagesDpScale = dpScale;\n+      Set<Map.Entry<String, LottieImageAsset>> entries = images.entrySet();\n+\n+      for (Map.Entry<String, LottieImageAsset> entry : entries) {\n+        images.put(entry.getKey(), entry.getValue().copyWithScale(imagesDpScale / dpScale));\n+      }\n+    }\n     return images;\n   }\n \n@@ -237,6 +253,7 @@ public String toString() {\n    */\n   @Deprecated\n   public static class Factory {\n+\n     private Factory() {\n     }\n \n@@ -363,6 +380,7 @@ public static LottieComposition fromJsonSync(JsonReader reader) {\n \n     @SuppressWarnings(\"deprecation\")\n     private static final class ListenerAdapter implements LottieListener<LottieComposition>, Cancellable {\n+\n       private final OnCompositionLoadedListener listener;\n       private boolean cancelled = false;\n \n@@ -382,4 +400,4 @@ private ListenerAdapter(OnCompositionLoadedListener listener) {\n       }\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java b/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n@@ -70,6 +70,19 @@ public void setBitmap(@Nullable Bitmap bitmap) {\n     this.bitmap = bitmap;\n   }\n \n+  /**\n+   * Returns a new {@link LottieImageAsset} with the same properties as this one but with the\n+   * dimensions and bitmap scaled.\n+   */\n+  public LottieImageAsset copyWithScale(float scale) {\n+    LottieImageAsset newAsset = new LottieImageAsset((int) (width * scale), (int) (height * scale), id, fileName, dirName);\n+    if (bitmap != null) {\n+      Bitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, newAsset.width, newAsset.height, true);\n+      newAsset.setBitmap(scaledBitmap);\n+    }\n+    return newAsset;\n+  }\n+\n   /**\n    * Returns whether this asset has an embedded Bitmap or whether the fileName is a base64 encoded bitmap.\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java\n@@ -107,7 +107,7 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n     Rect bounds = new Rect(0, 0, scaledWidth, scaledHeight);\n \n     composition.init(bounds, startFrame, endFrame, frameRate, layers, layerMap, precomps,\n-        images, characters, fonts, markers);\n+        images, Utils.dpScale(), characters, fonts, markers);\n \n     return composition;\n   }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -36,10 +36,10 @@ public void setup() {\n   @SuppressWarnings(\"SameParameterValue\")\n   private LottieComposition createComposition(int startFrame, int endFrame) {\n     LottieComposition composition = new LottieComposition();\n-    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),\n-            new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),\n-            new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),\n-            new HashMap<String, Font>(0), new ArrayList<Marker>());\n+    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<>(),\n+        new LongSparseArray<>(0), new HashMap<>(0),\n+        new HashMap<>(0), 1f, new SparseArrayCompat<>(0),\n+        new HashMap<>(0), new ArrayList<>());\n     return composition;\n   }\n \n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -60,10 +60,10 @@ private LottieValueAnimator createAnimator() {\n \n   private LottieComposition createComposition(int startFrame, int endFrame) {\n     LottieComposition composition = new LottieComposition();\n-    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),\n-            new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),\n-            new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),\n-            new HashMap<String, Font>(0), new ArrayList<Marker>());\n+    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<>(),\n+        new LongSparseArray<>(0), new HashMap<>(0),\n+        new HashMap<>(0), 1f, new SparseArrayCompat<>(0),\n+        new HashMap<>(0), new ArrayList<>());\n     return composition;\n   }\n ",
    "output": "Scale image if the dp scale changes (#2438)\n\nFixes #2216"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -11,6 +11,7 @@\n import android.graphics.BitmapFactory;\n import android.graphics.Typeface;\n import android.util.Base64;\n+import android.util.Log;\n \n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n@@ -41,7 +42,7 @@\n import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.zip.GZIPInputStream;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n@@ -57,6 +58,7 @@\n  */\n @SuppressWarnings({\"WeakerAccess\", \"unused\", \"NullAway\"})\n public class LottieCompositionFactory {\n+\n   /**\n    * Keep a map of cache keys to in-progress tasks and return them for new requests.\n    * Without this, simultaneous requests to parse a composition will trigger multiple parallel\n@@ -69,7 +71,8 @@ public class LottieCompositionFactory {\n    * reference magic bytes for zip compressed files.\n    * useful to determine if an InputStream is a zip file or not\n    */\n-  private static final byte[] MAGIC = new byte[]{0x50, 0x4b, 0x03, 0x04};\n+  private static final byte[] ZIP_MAGIC = new byte[]{0x50, 0x4b, 0x03, 0x04};\n+  private static final byte[] GZIP_MAGIC = new byte[]{0x1f, (byte) 0x8b, 0x08};\n \n \n   private LottieCompositionFactory() {\n@@ -222,10 +225,13 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n       return new LottieResult<>(cachedComposition);\n     }\n     try {\n-      if (fileName.endsWith(\".zip\") || fileName.endsWith(\".lottie\")) {\n-        return fromZipStreamSync(context, new ZipInputStream(context.getAssets().open(fileName)), cacheKey);\n+      BufferedSource source = Okio.buffer(source(context.getAssets().open(fileName)));\n+      if (isZipCompressed(source)) {\n+        return fromZipStreamSync(context, new ZipInputStream(source.inputStream()), cacheKey);\n+      } else if (isGzipCompressed(source)) {\n+        return fromJsonInputStreamSync(new GZIPInputStream(source.inputStream()), cacheKey);\n       }\n-      return fromJsonInputStreamSync(context.getAssets().open(fileName), cacheKey);\n+      return fromJsonInputStreamSync(source.inputStream(), cacheKey);\n     } catch (IOException e) {\n       return new LottieResult<>(e);\n     }\n@@ -298,6 +304,13 @@ public static LottieResult<LottieComposition> fromRawResSync(Context context, @R\n       BufferedSource source = Okio.buffer(source(context.getResources().openRawResource(rawRes)));\n       if (isZipCompressed(source)) {\n         return fromZipStreamSync(context, new ZipInputStream(source.inputStream()), cacheKey);\n+      } else if (isGzipCompressed(source)) {\n+        try {\n+          return fromJsonInputStreamSync(new GZIPInputStream(source.inputStream()), cacheKey);\n+        } catch (IOException e) {\n+          // This shouldn't happen because we check the header for magic bytes.\n+          return new LottieResult<>(e);\n+        }\n       }\n       return fromJsonInputStreamSync(source.inputStream(), cacheKey);\n     } catch (Resources.NotFoundException e) {\n@@ -402,7 +415,8 @@ public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lott\n   }\n \n   @WorkerThread\n-  public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n+  public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey,\n+      boolean close) {\n     return fromJsonReaderSyncInternal(reader, cacheKey, close);\n   }\n \n@@ -641,9 +655,20 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n    * Check if a given InputStream points to a .zip compressed file\n    */\n   private static Boolean isZipCompressed(BufferedSource inputSource) {\n+    return matchesMagicBytes(inputSource, ZIP_MAGIC);\n+  }\n+\n+  /**\n+   * Check if a given InputStream points to a .gzip compressed file\n+   */\n+  private static Boolean isGzipCompressed(BufferedSource inputSource) {\n+    return matchesMagicBytes(inputSource, GZIP_MAGIC);\n+  }\n+\n+  private static Boolean matchesMagicBytes(BufferedSource inputSource, byte[] magic) {\n     try {\n       BufferedSource peek = inputSource.peek();\n-      for (byte b : MAGIC) {\n+      for (byte b : magic) {\n         if (peek.readByte() != b) {\n           return false;\n         }",
    "output": "Add support for gzipped json files (#2435)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java\n@@ -18,6 +18,7 @@\n import com.airbnb.lottie.value.LottieValueCallback;\n \n public class SolidLayer extends BaseLayer {\n+\n   private final RectF rect = new RectF();\n   private final Paint paint = new LPaint();\n   private final float[] points = new float[8];\n@@ -41,12 +42,17 @@ public class SolidLayer extends BaseLayer {\n       return;\n     }\n \n+    Integer color = colorAnimation == null ? null : colorAnimation.getValue();\n+    if (color != null) {\n+      paint.setColor(color);\n+    } else {\n+      paint.setColor(layerModel.getSolidColor());\n+    }\n+\n     int opacity = transform.getOpacity() == null ? 100 : transform.getOpacity().getValue();\n     int alpha = (int) (parentAlpha / 255f * (backgroundAlpha / 255f * opacity / 100f) * 255);\n     paint.setAlpha(alpha);\n-    if (colorAnimation != null) {\n-      paint.setColor(colorAnimation.getValue());\n-    }\n+\n     if (colorFilterAnimation != null) {\n       paint.setColorFilter(colorFilterAnimation.getValue());\n     }",
    "output": "Handle null color callbacks in SolidLayer (#2434)\n\nFixes https://github.com/airbnb/lottie-android/issues/2422"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java\n@@ -25,7 +25,7 @@ public ShapeKeyframeAnimation(List<Keyframe<ShapeData>> keyframes) {\n     ShapeData startShapeData = keyframe.startValue;\n     ShapeData endShapeData = keyframe.endValue;\n \n-    tempShapeData.interpolateBetween(startShapeData, endShapeData, keyframeProgress);\n+    tempShapeData.interpolateBetween(startShapeData, endShapeData == null ? startShapeData : endShapeData, keyframeProgress);\n     ShapeData modifiedShapeData = tempShapeData;\n     if (shapeModifiers != null) {\n       for (int i = shapeModifiers.size() - 1; i >= 0; i--) {",
    "output": "Handle null animated shape end values (#2433)\n\nFixes #2430"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n@@ -28,6 +28,19 @@ public int getSize() {\n   }\n \n   public void lerp(GradientColor gc1, GradientColor gc2, float progress) {\n+    // Fast return in case start and end is the same\n+    // or if progress is at start/end or out of [0,1] bounds\n+    if (gc1.equals(gc2)) {\n+      copyFrom(gc1);\n+      return;\n+    } else if (progress <= 0f) {\n+      copyFrom(gc1);\n+      return;\n+    } else if (progress >= 1f) {\n+      copyFrom(gc2);\n+      return;\n+    }\n+\n     if (gc1.colors.length != gc2.colors.length) {\n       throw new IllegalArgumentException(\"Cannot interpolate between gradients. Lengths vary (\" +\n           gc1.colors.length + \" vs \" + gc2.colors.length + \")\");\n@@ -56,6 +69,25 @@ public GradientColor copyWithPositions(float[] positions) {\n     return new GradientColor(positions, colors);\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    GradientColor that = (GradientColor) o;\n+    return Arrays.equals(positions, that.positions) && Arrays.equals(colors, that.colors);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = Arrays.hashCode(positions);\n+    result = 31 * result + Arrays.hashCode(colors);\n+    return result;\n+  }\n+\n   private int getColorForPosition(float position) {\n     int existingIndex = Arrays.binarySearch(positions, position);\n     if (existingIndex >= 0) {\n@@ -76,4 +108,11 @@ private int getColorForPosition(float position) {\n     float fraction = (position - startPosition) / (endPosition - startPosition);\n     return GammaEvaluator.evaluate(fraction, startColor, endColor);\n   }\n+\n+  private void copyFrom(GradientColor other) {\n+    for (int i = 0; i < other.colors.length; i++) {\n+      positions[i] = other.positions[i];\n+      colors[i] = other.colors[i];\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -189,12 +189,16 @@ int getColorInBetweenColorStops(float position, float opacity, float[] colorStop\n       float distanceBetweenColors = colorStopPositions[i] - colorStopPositions[i - 1];\n       float distanceToLowerColor = position - colorStopPositions[i - 1];\n       float percentage = distanceToLowerColor / distanceBetweenColors;\n+\n       int upperColor = colorStopColors[i];\n       int lowerColor = colorStopColors[i - 1];\n+      int intermediateColor = GammaEvaluator.evaluate(percentage, lowerColor, upperColor);\n+\n       int a = (int) (opacity * 255);\n-      int r = GammaEvaluator.evaluate(percentage, Color.red(lowerColor), Color.red(upperColor));\n-      int g = GammaEvaluator.evaluate(percentage, Color.green(lowerColor), Color.green(upperColor));\n-      int b = GammaEvaluator.evaluate(percentage, Color.blue(lowerColor), Color.blue(upperColor));\n+      int r = Color.red(intermediateColor);\n+      int g = Color.green(intermediateColor);\n+      int b = Color.blue(intermediateColor);\n+\n       return Color.argb(a, r, g, b);\n     }\n     throw new IllegalArgumentException(\"Unreachable code.\");\n@@ -269,7 +273,6 @@ protected static float[] mergeUniqueElements(float[] arrayA, float[] arrayB) {\n       return mergedNotTruncated;\n     }\n \n-\n     return Arrays.copyOf(mergedNotTruncated, mergedNotTruncated.length - numDuplicates);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java b/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java\n@@ -25,9 +25,16 @@ private static float EOCF_sRGB(float srgb) {\n   }\n \n   public static int evaluate(float fraction, int startInt, int endInt) {\n+    // Fast return in case start and end is the same\n+    // or if fraction is at start/end or out of [0,1] bounds\n     if (startInt == endInt) {\n       return startInt;\n+    } else if (fraction <= 0f) {\n+      return startInt;\n+    } else if (fraction >= 1f) {\n+      return endInt;\n     }\n+\n     float startA = ((startInt >> 24) & 0xff) / 255.0f;\n     float startR = ((startInt >> 16) & 0xff) / 255.0f;\n     float startG = ((startInt >> 8) & 0xff) / 255.0f;\n@@ -61,4 +68,4 @@ public static int evaluate(float fraction, int startInt, int endInt) {\n \n     return Math.round(a) << 24 | Math.round(r) << 16 | Math.round(g) << 8 | Math.round(b);\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/model/content/GradientColorTest.java b/lottie/src/test/java/com/airbnb/lottie/model/content/GradientColorTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/model/content/GradientColorTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/model/content/GradientColorTest.java\n@@ -0,0 +1,46 @@\n+package com.airbnb.lottie.model.content;\n+\n+import junit.framework.TestCase;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+public class GradientColorTest extends TestCase {\n+\n+  private final GradientColor start = new GradientColor(new float[]{0f, 1f}, new int[]{0xFF000000, 0xFF020202});\n+\n+  private final GradientColor end = new GradientColor(new float[]{0f, 1f}, new int[]{0xFF020202, 0xFF040404});\n+\n+  private final GradientColor gradient = new GradientColor(new float[2], new int[2]);\n+\n+  @Test\n+  public void testLerpWithOutOfBoundsNegativeProgress() {\n+    gradient.lerp(start, end, -42f);\n+    assertEquals(start, gradient);\n+  }\n+\n+  @Test\n+  public void testLerpWithZeroProgress() {\n+    gradient.lerp(start, end, 0f);\n+    assertEquals(start, gradient);\n+  }\n+\n+  @Test\n+  public void testLerpWithHalfProgress() {\n+    gradient.lerp(start, end, 0.5f);\n+    GradientColor half = new GradientColor(new float[]{0f, 1f}, new int[]{0xFF010101, 0xFF030303});\n+    assertEquals(half, gradient);\n+  }\n+\n+  @Test\n+  public void testLerpWithOneProgress() {\n+    gradient.lerp(start, end, 1f);\n+    assertEquals(end, gradient);\n+  }\n+\n+  @Test\n+  public void testLerpWithOutOfBoundsPositiveProgress() {\n+    gradient.lerp(start, end, 42f);\n+    assertEquals(end, gradient);\n+  }\n+}",
    "output": "GradientColorKeyframeAnimation does not handle progress outside [0,1]  (#2427)\n\n- Closes #2426\r\n- Improve performance by running GammaEvaluator once\r\n\r\nCo-authored-by: Sven Obser <barmer-ecare@obser.info>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n@@ -11,6 +11,7 @@\n import android.graphics.RectF;\n \n import androidx.annotation.Nullable;\n+import androidx.core.graphics.PaintCompat;\n \n import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieDrawable;\n@@ -31,6 +32,7 @@\n \n public class FillContent\n     implements DrawingContent, BaseKeyframeAnimation.AnimationListener, KeyPathElementContent {\n+\n   private final Path path = new Path();\n   private final Paint paint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n   private final BaseLayer layer;\n@@ -66,6 +68,8 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi\n       return;\n     }\n \n+    PaintCompat.setBlendMode(paint, layer.getBlendMode().toNativeBlendMode());\n+\n     path.setFillType(fill.getFillType());\n \n     colorAnimation = fill.getColor().createAnimation();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/LBlendMode.java b/lottie/src/main/java/com/airbnb/lottie/model/content/LBlendMode.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/LBlendMode.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/LBlendMode.java\n@@ -0,0 +1,68 @@\n+package com.airbnb.lottie.model.content;\n+\n+import androidx.annotation.Nullable;\n+import androidx.core.graphics.BlendModeCompat;\n+\n+/**\n+ * Lottie BlendMode,\n+ * not to be confused with Paint.BlendMode in android graphics core,\n+ * which we will rely on for rendering.\n+ */\n+public enum LBlendMode {\n+  NORMAL,\n+  MULTIPLY,\n+  SCREEN,\n+  OVERLAY,\n+  DARKEN,\n+  LIGHTEN,\n+  COLOR_DODGE,\n+  COLOR_BURN,\n+  HARD_LIGHT,\n+  SOFT_LIGHT,\n+  DIFFERENCE,\n+  EXCLUSION,\n+  HUE,\n+  SATURATION,\n+  COLOR,\n+  LUMINOSITY,\n+  ADD,\n+  HARD_MIX;\n+\n+  @Nullable\n+  public BlendModeCompat toNativeBlendMode() {\n+    switch (this) {\n+      case NORMAL:\n+        return null;\n+      case SCREEN:\n+        return BlendModeCompat.SCREEN;\n+      case OVERLAY:\n+        return BlendModeCompat.OVERLAY;\n+      case DARKEN:\n+        return BlendModeCompat.DARKEN;\n+      case LIGHTEN:\n+        return BlendModeCompat.LIGHTEN;\n+      case ADD:\n+        return BlendModeCompat.PLUS;\n+\n+      // Blend modes below were not added to the platform until Q.\n+      // To prevent unexpected issues where animations look correct\n+      // during development but silently break for users with older devices\n+      // we won't support any of these until Q is widely used.\n+      case MULTIPLY:\n+      case COLOR_DODGE:\n+      case COLOR_BURN:\n+      case HARD_LIGHT:\n+      case SOFT_LIGHT:\n+      case DIFFERENCE:\n+      case EXCLUSION:\n+      case HUE:\n+      case SATURATION:\n+      case COLOR:\n+      case LUMINOSITY:\n+      case HARD_MIX:\n+      default:\n+        return null;\n+    }\n+  }\n+\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -28,6 +28,7 @@\n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.model.KeyPathElement;\n import com.airbnb.lottie.model.content.BlurEffect;\n+import com.airbnb.lottie.model.content.LBlendMode;\n import com.airbnb.lottie.model.content.Mask;\n import com.airbnb.lottie.model.content.ShapeData;\n import com.airbnb.lottie.parser.DropShadowEffect;\n@@ -628,6 +629,10 @@ public BlurEffect getBlurEffect() {\n     return layerModel.getBlurEffect();\n   }\n \n+  public LBlendMode getBlendMode() {\n+    return layerModel.getBlendMode();\n+  }\n+\n   public BlurMaskFilter getBlurMaskFilter(float radius) {\n     if (blurMaskFilterRadius == radius) {\n       return blurMaskFilter;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -9,6 +9,7 @@\n import com.airbnb.lottie.model.animatable.AnimatableTransform;\n import com.airbnb.lottie.model.content.BlurEffect;\n import com.airbnb.lottie.model.content.ContentModel;\n+import com.airbnb.lottie.model.content.LBlendMode;\n import com.airbnb.lottie.model.content.Mask;\n import com.airbnb.lottie.parser.DropShadowEffect;\n import com.airbnb.lottie.value.Keyframe;\n@@ -61,6 +62,8 @@ public enum MatteType {\n   private final boolean hidden;\n   @Nullable private final BlurEffect blurEffect;\n   @Nullable private final DropShadowEffect dropShadowEffect;\n+  private final LBlendMode blendMode;\n+\n \n   public Layer(List<ContentModel> shapes, LottieComposition composition, String layerName, long layerId,\n       LayerType layerType, long parentId, @Nullable String refId, List<Mask> masks,\n@@ -69,7 +72,7 @@ public Layer(List<ContentModel> shapes, LottieComposition composition, String la\n       @Nullable AnimatableTextFrame text, @Nullable AnimatableTextProperties textProperties,\n       List<Keyframe<Float>> inOutKeyframes, MatteType matteType,\n       @Nullable AnimatableFloatValue timeRemapping, boolean hidden, @Nullable BlurEffect blurEffect,\n-      @Nullable DropShadowEffect dropShadowEffect) {\n+      @Nullable DropShadowEffect dropShadowEffect, LBlendMode blendMode) {\n     this.shapes = shapes;\n     this.composition = composition;\n     this.layerName = layerName;\n@@ -94,6 +97,7 @@ public Layer(List<ContentModel> shapes, LottieComposition composition, String la\n     this.hidden = hidden;\n     this.blurEffect = blurEffect;\n     this.dropShadowEffect = dropShadowEffect;\n+    this.blendMode = blendMode;\n   }\n \n   LottieComposition getComposition() {\n@@ -188,6 +192,11 @@ public boolean isHidden() {\n     return hidden;\n   }\n \n+  @Nullable\n+  public LBlendMode getBlendMode() {\n+    return blendMode;\n+  }\n+\n   @Nullable public BlurEffect getBlurEffect() {\n     return blurEffect;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -8,6 +8,7 @@\n import com.airbnb.lottie.model.animatable.AnimatableTextFrame;\n import com.airbnb.lottie.model.animatable.AnimatableTextProperties;\n import com.airbnb.lottie.model.animatable.AnimatableTransform;\n+import com.airbnb.lottie.model.content.LBlendMode;\n import com.airbnb.lottie.model.content.BlurEffect;\n import com.airbnb.lottie.model.content.ContentModel;\n import com.airbnb.lottie.model.content.Mask;\n@@ -50,7 +51,8 @@ private LayerParser() {\n       \"tm\", // 20\n       \"cl\", // 21\n       \"hd\", // 22\n-      \"ao\"  // 23\n+      \"ao\", // 23\n+      \"bm\"  // 24\n   );\n \n   public static Layer parse(LottieComposition composition) {\n@@ -60,7 +62,8 @@ public static Layer parse(LottieComposition composition) {\n         Layer.LayerType.PRE_COMP, -1, null, Collections.<Mask>emptyList(),\n         new AnimatableTransform(), 0, 0, 0, 0, 0,\n         bounds.width(), bounds.height(), null, null, Collections.<Keyframe<Float>>emptyList(),\n-        Layer.MatteType.NONE, null, false, null, null);\n+        Layer.MatteType.NONE, null, false, null, null,\n+        LBlendMode.NORMAL);\n   }\n \n   private static final JsonReader.Options TEXT_NAMES = JsonReader.Options.of(\n@@ -97,6 +100,7 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n     boolean autoOrient = false;\n \n     Layer.MatteType matteType = Layer.MatteType.NONE;\n+    LBlendMode blendMode = LBlendMode.NORMAL;\n     AnimatableTransform transform = null;\n     AnimatableTextFrame text = null;\n     AnimatableTextProperties textProperties = null;\n@@ -261,6 +265,15 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n         case 23:\n           autoOrient = reader.nextInt() == 1;\n           break;\n+        case 24:\n+          int blendModeIndex = reader.nextInt();\n+          if (blendModeIndex >= LBlendMode.values().length) {\n+            composition.addWarning(\"Unsupported Blend Mode: \" + blendModeIndex);\n+            blendMode = LBlendMode.NORMAL;\n+            break;\n+          }\n+          blendMode = LBlendMode.values()[blendModeIndex];\n+          break;\n         default:\n           reader.skipName();\n           reader.skipValue();\n@@ -298,6 +311,6 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n     return new Layer(shapes, composition, layerName, layerId, layerType, parentId, refId,\n         masks, transform, solidWidth, solidHeight, solidColor, timeStretch, startFrame,\n         preCompWidth, preCompHeight, text, textProperties, inOutKeyframes, matteType,\n-        timeRemapping, hidden, blurEffect, dropShadowEffect);\n+        timeRemapping, hidden, blurEffect, dropShadowEffect, blendMode);\n   }\n }",
    "output": "Add support for layer blend mode \"bm\" for NORMAL, SCREEN, OVERLAY, DARKEN, LIGHTEN, and ADD (#2408)\n\nAdds support for \"bm\" (BlendMode) on layers. Possibly addresses #1055\r\nMight need a little bit of a refactor. Relies on `Paint.setBlendMode()` available in android Q and up.\r\n\r\n\r\n## Sample before & after\r\n![IMAGE 2023-10-30 12:28:18](https://github.com/airbnb/lottie-android/assets/141772/faad31e8-2fd7-496c-9304-ca81451c6d46)\r\n![Screenshot 2023-10-30 at 12 27 39](https://github.com/airbnb/lottie-android/assets/141772/746ef507-284d-4eec-a632-ad5fe59eaaa0)\r\n\r\nCo-authored-by: Gabriel Peal <gpeal@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n@@ -44,12 +44,16 @@ public class TransformKeyframeAnimation {\n   @Nullable private BaseKeyframeAnimation<?, Float> startOpacity;\n   @Nullable private BaseKeyframeAnimation<?, Float> endOpacity;\n \n+  private final boolean autoOrient;\n+\n+\n   public TransformKeyframeAnimation(AnimatableTransform animatableTransform) {\n     anchorPoint = animatableTransform.getAnchorPoint() == null ? null : animatableTransform.getAnchorPoint().createAnimation();\n     position = animatableTransform.getPosition() == null ? null : animatableTransform.getPosition().createAnimation();\n     scale = animatableTransform.getScale() == null ? null : animatableTransform.getScale().createAnimation();\n     rotation = animatableTransform.getRotation() == null ? null : animatableTransform.getRotation().createAnimation();\n     skew = animatableTransform.getSkew() == null ? null : (FloatKeyframeAnimation) animatableTransform.getSkew().createAnimation();\n+    autoOrient = animatableTransform.isAutoOrient();\n     if (skew != null) {\n       skewMatrix1 = new Matrix();\n       skewMatrix2 = new Matrix();\n@@ -174,16 +178,36 @@ public Matrix getMatrix() {\n       }\n     }\n \n-    BaseKeyframeAnimation<Float, Float> rotation = this.rotation;\n-    if (rotation != null) {\n-      float rotationValue;\n-      if (rotation instanceof ValueCallbackKeyframeAnimation) {\n-        rotationValue = rotation.getValue();\n-      } else {\n-        rotationValue = ((FloatKeyframeAnimation) rotation).getFloatValue();\n+    // If autoOrient is true, the rotation should follow the derivative of the position rather\n+    // than the rotation property.\n+    if (autoOrient) {\n+      if (position != null) {\n+        float currentProgress = position.getProgress();\n+        PointF startPosition = position.getValue();\n+        // Store the start X and Y values because the pointF will be overwritten by the next getValue call.\n+        float startX = startPosition.x;\n+        float startY = startPosition.y;\n+        // 1) Find the next position value.\n+        // 2) Create a vector from the current position to the next position.\n+        // 3) Find the angle of that vector to the X axis (0 degrees).\n+        position.setProgress(currentProgress + 0.0001f);\n+        PointF nextPosition = position.getValue();\n+        position.setProgress(currentProgress);\n+        double rotationValue = Math.toDegrees(Math.atan2(nextPosition.y - startY, nextPosition.x - startX));\n+        matrix.preRotate((float) rotationValue);\n       }\n-      if (rotationValue != 0f) {\n-        matrix.preRotate(rotationValue);\n+    } else {\n+      BaseKeyframeAnimation<Float, Float> rotation = this.rotation;\n+      if (rotation != null) {\n+        float rotationValue;\n+        if (rotation instanceof ValueCallbackKeyframeAnimation) {\n+          rotationValue = rotation.getValue();\n+        } else {\n+          rotationValue = ((FloatKeyframeAnimation) rotation).getFloatValue();\n+        }\n+        if (rotationValue != 0f) {\n+          matrix.preRotate(rotationValue);\n+        }\n       }\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java\n@@ -34,6 +34,8 @@ public class AnimatableTransform implements ModifierContent, ContentModel {\n   @Nullable\n   private final AnimatableFloatValue endOpacity;\n \n+  private boolean autoOrient = false;\n+\n   public AnimatableTransform() {\n     this(null, null, null, null, null, null, null, null, null);\n   }\n@@ -54,6 +56,13 @@ public AnimatableTransform(@Nullable AnimatablePathValue anchorPoint,\n     this.skewAngle = skewAngle;\n   }\n \n+  /**\n+   * This is set as a property of the layer so it is parsed and set separately.\n+   */\n+  public void setAutoOrient(boolean autoOrient) {\n+    this.autoOrient = autoOrient;\n+  }\n+\n   @Nullable\n   public AnimatablePathValue getAnchorPoint() {\n     return anchorPoint;\n@@ -99,6 +108,10 @@ public AnimatableFloatValue getSkewAngle() {\n     return skewAngle;\n   }\n \n+  public boolean isAutoOrient() {\n+    return autoOrient;\n+  }\n+\n   public TransformKeyframeAnimation createAnimation() {\n     return new TransformKeyframeAnimation(this);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -27,29 +27,30 @@ private LayerParser() {\n   }\n \n   private static final JsonReader.Options NAMES = JsonReader.Options.of(\n-      \"nm\", // 0\n-      \"ind\", // 1\n-      \"refId\", // 2\n-      \"ty\", // 3\n+      \"nm\",     // 0\n+      \"ind\",    // 1\n+      \"refId\",  // 2\n+      \"ty\",     // 3\n       \"parent\", // 4\n-      \"sw\", // 5\n-      \"sh\", // 6\n-      \"sc\", // 7\n-      \"ks\", // 8\n-      \"tt\", // 9\n+      \"sw\",     // 5\n+      \"sh\",     // 6\n+      \"sc\",     // 7\n+      \"ks\",     // 8\n+      \"tt\",     // 9\n       \"masksProperties\", // 10\n       \"shapes\", // 11\n-      \"t\", // 12\n+      \"t\",  // 12\n       \"ef\", // 13\n       \"sr\", // 14\n       \"st\", // 15\n-      \"w\", // 16\n-      \"h\", // 17\n+      \"w\",  // 16\n+      \"h\",  // 17\n       \"ip\", // 18\n       \"op\", // 19\n       \"tm\", // 20\n       \"cl\", // 21\n-      \"hd\" // 22\n+      \"hd\", // 22\n+      \"ao\"  // 23\n   );\n \n   public static Layer parse(LottieComposition composition) {\n@@ -93,6 +94,7 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n     boolean hidden = false;\n     BlurEffect blurEffect = null;\n     DropShadowEffect dropShadowEffect = null;\n+    boolean autoOrient = false;\n \n     Layer.MatteType matteType = Layer.MatteType.NONE;\n     AnimatableTransform transform = null;\n@@ -256,6 +258,9 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n         case 22:\n           hidden = reader.nextBoolean();\n           break;\n+        case 23:\n+          autoOrient = reader.nextInt() == 1;\n+          break;\n         default:\n           reader.skipName();\n           reader.skipValue();\n@@ -284,6 +289,12 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n       composition.addWarning(\"Convert your Illustrator layers to shape layers.\");\n     }\n \n+    if (autoOrient) {\n+      if (transform == null) {\n+        transform = new AnimatableTransform();\n+      }\n+      transform.setAutoOrient(autoOrient);\n+    }\n     return new Layer(shapes, composition, layerName, layerId, layerType, parentId, refId,\n         masks, transform, solidWidth, solidHeight, solidColor, timeStretch, startFrame,\n         preCompWidth, preCompHeight, text, textProperties, inOutKeyframes, matteType,",
    "output": "Implement auto-orient (#2416)\n\nFixes #1401"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -36,11 +36,13 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n+import java.io.PushbackInputStream;\n import java.lang.ref.WeakReference;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.zip.ZipInputStream;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -508,6 +510,9 @@ public void setAnimationFromJson(String jsonString, @Nullable String cacheKey) {\n    * Sets the animation from an arbitrary InputStream.\n    * This will load and deserialize the file asynchronously.\n    * <p>\n+   * If this is a Zip file, wrap your InputStream with a ZipInputStream to use the overload\n+   * designed for zip files.\n+   * <p>\n    * This is particularly useful for animations loaded from the network. You can fetch the\n    * bodymovin json from the network and pass it directly here.\n    * <p>\n@@ -517,6 +522,19 @@ public void setAnimation(InputStream stream, @Nullable String cacheKey) {\n     setCompositionTask(LottieCompositionFactory.fromJsonInputStream(stream, cacheKey));\n   }\n \n+  /**\n+   * Sets the animation from a ZipInputStream.\n+   * This will load and deserialize the file asynchronously.\n+   * <p>\n+   * This is particularly useful for animations loaded from the network. You can fetch the\n+   * bodymovin json from the network and pass it directly here.\n+   * <p>\n+   * Auto-closes the stream.\n+   */\n+  public void setAnimation(ZipInputStream stream, @Nullable String cacheKey) {\n+    setCompositionTask(LottieCompositionFactory.fromZipStream(stream, cacheKey));\n+  }\n+\n   /**\n    * Load a lottie animation from a url. The url can be a json file or a zip file. Use a zip file if you have images. Simply zip them together and\n    * lottie",
    "output": "Add a LottieAnimationView overload for ZipInputStream (#2411)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n@@ -25,7 +25,10 @@ public int getIntValue(Keyframe<Integer> keyframe, float keyframeProgress) {\n       throw new IllegalStateException(\"Missing values for keyframe.\");\n     }\n \n-    if (valueCallback != null) {\n+    // keyframe.endFrame should not be null under normal operation.\n+    // It is not clear why this would be null and when it does, it seems to be extremely rare.\n+    // https://github.com/airbnb/lottie-android/issues/2361\n+    if (valueCallback != null && keyframe.endFrame != null) {\n       //noinspection ConstantConditions\n       Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, keyframe.startValue,\n           keyframe.endValue, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());",
    "output": "Fix a NPE in ColorKeyframeAnimation (#2407)\n\nIt is not clear to me why or how this would happen. endFrame is technically nullable because of the order that parsing happens but it should be non-null by the time parsing finishes. This should be safe enough to add to fix this NPE though.\r\n\r\nFixes #2361"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/GradientColorKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/GradientColorKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/GradientColorKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/GradientColorKeyframeAnimation.java\n@@ -10,12 +10,22 @@ public class GradientColorKeyframeAnimation extends KeyframeAnimation<GradientCo\n \n   public GradientColorKeyframeAnimation(List<Keyframe<GradientColor>> keyframes) {\n     super(keyframes);\n-    GradientColor startValue = keyframes.get(0).startValue;\n-    int size = startValue == null ? 0 : startValue.getSize();\n+    // Not all keyframes that this GradientColor are used for will have the same length.\n+    // AnimatableGradientColorValue.ensureInterpolatableKeyframes may add extra positions\n+    // for some keyframes but not others to ensure that it is interpolatable.\n+    // Ensure that there is enough space for the largest keyframe.\n+    int size = 0;\n+    for (int i = 0; i < keyframes.size(); i++) {\n+      GradientColor startValue = keyframes.get(i).startValue;\n+      if (startValue != null) {\n+        size = Math.max(size, startValue.getSize());\n+      }\n+    }\n     gradientColor = new GradientColor(new float[size], new int[size]);\n   }\n \n   @Override GradientColor getValue(Keyframe<GradientColor> keyframe, float keyframeProgress) {\n+    //noinspection DataFlowIssue\n     gradientColor.lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);\n     return gradientColor;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n@@ -37,6 +37,15 @@ public void lerp(GradientColor gc1, GradientColor gc2, float progress) {\n       positions[i] = MiscUtils.lerp(gc1.positions[i], gc2.positions[i], progress);\n       colors[i] = GammaEvaluator.evaluate(progress, gc1.colors[i], gc2.colors[i]);\n     }\n+\n+    // Not all keyframes that this GradientColor are used for will have the same length.\n+    // AnimatableGradientColorValue.ensureInterpolatableKeyframes may add extra positions\n+    // for some keyframes but not others to ensure that it is interpolatable.\n+    // If there are extra positions here, just duplicate the last value in the gradient.\n+    for (int i = gc1.colors.length; i < positions.length; i++) {\n+      positions[i] = positions[gc1.colors.length - 1];\n+      colors[i] = colors[gc1.colors.length - 1];\n+    }\n   }\n \n   public GradientColor copyWithPositions(float[] positions) {",
    "output": "Fixe varying opacity stops across keyframes in the same gradient (#2406)\n\nFixes #2298"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n@@ -112,7 +112,7 @@ public BaseKeyframeAnimation<Float, Float> getRoundedCorners() {\n       PointF nextVertex = startingCurve.getVertex();\n \n       // We can't round the corner of the end of a non-closed curve.\n-      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 && i == startingCurves.size() - 1);\n+      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 || i == startingCurves.size() - 1);\n       if (inPoint.equals(vertex) && outPoint.equals(vertex) && !isEndOfCurve) {\n         // This vertex is a point. Round its corners\n         float dxToPreviousVertex = vertex.x - previousVertex.x;\n@@ -186,7 +186,7 @@ private ShapeData getShapeData(ShapeData startingShapeData) {\n       PointF inPoint = (i == 0 && !isClosed) ? vertex : previousCurve.getControlPoint2();\n       PointF outPoint = startingCurve.getControlPoint1();\n \n-      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 && i == startingCurves.size() - 1);\n+      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 || i == startingCurves.size() - 1);\n       if (inPoint.equals(vertex) && outPoint.equals(vertex) && !isEndOfCurve) {\n         vertices += 2;\n       } else {",
    "output": "Fixed rounded corners for non-closed curves (#2405)\n\nFixes #2403"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -33,7 +33,6 @@\n import androidx.annotation.RestrictTo;\n \n import com.airbnb.lottie.animation.LPaint;\n-import com.airbnb.lottie.animation.keyframe.PathKeyframe;\n import com.airbnb.lottie.manager.FontAssetManager;\n import com.airbnb.lottie.manager.ImageAssetManager;\n import com.airbnb.lottie.model.Font;\n@@ -336,7 +335,7 @@ public boolean getClipToCompositionBounds() {\n    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes\n    * from After Effects. If your images look like they could be represented with vector shapes,\n    * see if it is possible to convert them to shape layers and re-export your animation. Check\n-   * the documentation at http://airbnb.io/lottie for more information about importing shapes from\n+   * the documentation at <a href=\"http://airbnb.io/lottie\">airbnb.io/lottie</a> for more information about importing shapes from\n    * Sketch or Illustrator to avoid this.\n    */\n   public void setImagesAssetsFolder(@Nullable String imageAssetsFolder) {\n@@ -460,7 +459,7 @@ public boolean getAsyncUpdatesEnabled() {\n    * <p/>\n    * Sets the current value for {@link AsyncUpdates}. Refer to the docs for {@link AsyncUpdates} for more info.\n    */\n-  public void setAsyncUpdates(AsyncUpdates asyncUpdates) {\n+  public void setAsyncUpdates(@Nullable AsyncUpdates asyncUpdates) {\n     this.asyncUpdates = asyncUpdates;\n   }\n \n@@ -1318,7 +1317,7 @@ public List<KeyPath> resolveKeyPath(KeyPath keyPath) {\n    * <p>\n    * Internally, this will check if the {@link KeyPath} has already been resolved with\n    * {@link #resolveKeyPath(KeyPath)} and will resolve it if it hasn't.\n-   *\n+   * <p>\n    * Set the callback to null to clear it.\n    */\n   public <T> void addValueCallback(",
    "output": "Upgraded a bunch of dependencies (#2382)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -16,6 +16,8 @@\n import android.graphics.drawable.Animatable;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n+import android.os.Handler;\n+import android.os.Looper;\n import android.view.View;\n import android.view.ViewGroup;\n import android.view.ViewParent;\n@@ -83,6 +85,13 @@ private enum OnVisibleAction {\n     RESUME,\n   }\n \n+  /**\n+   * Prior to Oreo, you could only call invalidateDrawable() from the main thread.\n+   * This means that when async updates are enabled, we must post the invalidate call to the main thread.\n+   * Newer devices can call invalidate directly from whatever thread asyncUpdates runs on.\n+   */\n+  private static final boolean invalidateSelfOnMainThread = Build.VERSION.SDK_INT <= Build.VERSION_CODES.N_MR1;\n+\n   private LottieComposition composition;\n   private final LottieValueAnimator animator = new LottieValueAnimator();\n \n@@ -146,6 +155,13 @@ private enum OnVisibleAction {\n   private Matrix softwareRenderingOriginalCanvasMatrix;\n   private Matrix softwareRenderingOriginalCanvasMatrixInverse;\n \n+  /**\n+   * True if the drawable has not been drawn since the last invalidateSelf.\n+   * We can do this to prevent things like bounds from getting recalculated\n+   * many times.\n+   */\n+  private boolean isDirty = false;\n+\n   /** Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}. */\n   @Nullable private AsyncUpdates asyncUpdates;\n   private final ValueAnimator.AnimatorUpdateListener progressUpdateListener = animation -> {\n@@ -181,6 +197,9 @@ private enum OnVisibleAction {\n    */\n   private static final Executor setProgressExecutor = new ThreadPoolExecutor(0, 2, 35, TimeUnit.MILLISECONDS,\n       new LinkedBlockingQueue<>(), new LottieThreadFactory());\n+  private Handler mainThreadHandler;\n+  private Runnable invalidateSelfRunnable;\n+\n   private final Runnable updateProgressRunnable = () -> {\n     CompositionLayer compositionLayer = this.compositionLayer;\n     if (compositionLayer == null) {\n@@ -189,6 +208,19 @@ private enum OnVisibleAction {\n     try {\n       setProgressDrawLock.acquire();\n       compositionLayer.setProgress(animator.getAnimatedValueAbsolute());\n+      // Refer to invalidateSelfOnMainThread for more info.\n+      if (invalidateSelfOnMainThread && isDirty) {\n+        if (mainThreadHandler == null) {\n+          mainThreadHandler = new Handler(Looper.getMainLooper());\n+          invalidateSelfRunnable = () -> {\n+            final Callback callback = getCallback();\n+            if (callback != null) {\n+              callback.invalidateDrawable(this);\n+            }\n+          };\n+        }\n+        mainThreadHandler.post(invalidateSelfRunnable);\n+      }\n     } catch (InterruptedException e) {\n       // Do nothing.\n     } finally {\n@@ -198,13 +230,6 @@ private enum OnVisibleAction {\n   private float lastDrawnProgress = -Float.MAX_VALUE;\n   private static final float MAX_DELTA_MS_ASYNC_SET_PROGRESS = 3 / 60f * 1000;\n \n-  /**\n-   * True if the drawable has not been drawn since the last invalidateSelf.\n-   * We can do this to prevent things like bounds from getting recalculated\n-   * many times.\n-   */\n-  private boolean isDirty = false;\n-\n   @IntDef({RESTART, REVERSE})\n   @Retention(RetentionPolicy.SOURCE)\n   public @interface RepeatMode {\n@@ -561,6 +586,11 @@ public void invalidateSelf() {\n       return;\n     }\n     isDirty = true;\n+\n+    // Refer to invalidateSelfOnMainThread for more info.\n+    if (invalidateSelfOnMainThread && Looper.getMainLooper() != Looper.myLooper()) {\n+      return;\n+    }\n     final Callback callback = getCallback();\n     if (callback != null) {\n       callback.invalidateDrawable(this);",
    "output": "Fix asyncUpdates for Nougat and below (#2380)\n\nFixes #2355"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n@@ -221,15 +221,15 @@ public Matrix getMatrix() {\n     BaseKeyframeAnimation<ScaleXY, ScaleXY> scale = this.scale;\n     if (scale != null) {\n       ScaleXY scaleTransform = scale.getValue();\n-      if (scaleTransform.getScaleX() != 1f || scaleTransform.getScaleY() != 1f) {\n+      if (scaleTransform != null && (scaleTransform.getScaleX() != 1f || scaleTransform.getScaleY() != 1f)) {\n         matrix.preScale(scaleTransform.getScaleX(), scaleTransform.getScaleY());\n       }\n     }\n \n     BaseKeyframeAnimation<PointF, PointF> anchorPoint = this.anchorPoint;\n     if (anchorPoint != null) {\n       PointF anchorPointValue = anchorPoint.getValue();\n-      if (anchorPointValue != null && anchorPointValue.x != 0 || anchorPointValue.y != 0) {\n+      if (anchorPointValue != null && (anchorPointValue.x != 0 || anchorPointValue.y != 0)) {\n         matrix.preTranslate(-anchorPointValue.x, -anchorPointValue.y);\n       }\n     }",
    "output": "Add an additional null check to TransformKeyframeAnimation (#2381)\n\nFixes #2354"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -151,6 +151,10 @@ public static LottieResult<LottieComposition> fromUrlSync(Context context, Strin\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromUrlSync(Context context, String url, @Nullable String cacheKey) {\n+    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n+    if (cachedComposition != null) {\n+      return new LottieResult<>(cachedComposition);\n+    }\n     LottieResult<LottieComposition> result = L.networkFetcher(context).fetchSync(context, url, cacheKey);\n     if (cacheKey != null && result.getValue() != null) {\n       LottieCompositionCache.getInstance().put(cacheKey, result.getValue());\n@@ -213,6 +217,10 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromAssetSync(Context context, String fileName, @Nullable String cacheKey) {\n+    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n+    if (cachedComposition != null) {\n+      return new LottieResult<>(cachedComposition);\n+    }\n     try {\n       if (fileName.endsWith(\".zip\") || fileName.endsWith(\".lottie\")) {\n         return fromZipStreamSync(context, new ZipInputStream(context.getAssets().open(fileName)), cacheKey);\n@@ -282,6 +290,10 @@ public static LottieResult<LottieComposition> fromRawResSync(Context context, @R\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromRawResSync(Context context, @RawRes int rawRes, @Nullable String cacheKey) {\n+    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n+    if (cachedComposition != null) {\n+      return new LottieResult<>(cachedComposition);\n+    }\n     try {\n       BufferedSource source = Okio.buffer(source(context.getResources().openRawResource(rawRes)));\n       if (isZipCompressed(source)) {\n@@ -376,8 +388,6 @@ public static LottieTask<LottieComposition> fromJsonString(final String json, @N\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonStringSync(String json, @Nullable String cacheKey) {\n-\n-\n     ByteArrayInputStream stream = new ByteArrayInputStream(json.getBytes());\n     return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey);\n   }\n@@ -399,6 +409,10 @@ public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lott\n   private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n       com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n     try {\n+      final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n+      if (cachedComposition != null) {\n+        return new LottieResult<>(cachedComposition);\n+      }\n       LottieComposition composition = LottieCompositionMoshiParser.parse(reader);\n       if (cacheKey != null) {\n         LottieCompositionCache.getInstance().put(cacheKey, composition);\n@@ -516,6 +530,10 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n     Map<String, Typeface> fonts = new HashMap<>();\n \n     try {\n+      final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n+      if (cachedComposition != null) {\n+        return new LottieResult<>(cachedComposition);\n+      }\n       ZipEntry entry = inputStream.getNextEntry();\n       while (entry != null) {\n         final String entryName = entry.getName();\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n@@ -18,6 +18,7 @@\n import static junit.framework.Assert.assertNull;\n import static okio.Okio.buffer;\n import static okio.Okio.source;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertSame;\n \n @SuppressWarnings(\"ReferenceEquality\")\n@@ -45,6 +46,20 @@ public void testLoadJsonString() {\n         assertNotNull(result.getValue());\n     }\n \n+  @Test\n+  public void testLoadJsonStringHitsCache() {\n+    LottieResult<LottieComposition> result1 = LottieCompositionFactory.fromJsonStringSync(JSON, \"json\");\n+    LottieResult<LottieComposition> result2 = LottieCompositionFactory.fromJsonStringSync(JSON, \"json\");\n+    assertEquals(result1, result2);\n+  }\n+\n+  @Test\n+  public void testLoadDifferentJsonStringsDoesntHitsCache() {\n+    LottieResult<LottieComposition> result1 = LottieCompositionFactory.fromJsonStringSync(JSON, \"jso1\");\n+    LottieResult<LottieComposition> result2 = LottieCompositionFactory.fromJsonStringSync(JSON, \"json2\");\n+    assertNotEquals(result1, result2);\n+  }\n+\n     @Test\n     public void testLoadInvalidJsonString() {\n         LottieResult<LottieComposition> result = LottieCompositionFactory.fromJsonStringSync(NOT_JSON, \"not_json\");",
    "output": "Check cache for LottieCompositionFactory sync methods (#2379)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -5,7 +5,6 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.annotation.RestrictTo;\n-import androidx.core.os.TraceCompat;\n \n import com.airbnb.lottie.network.DefaultLottieNetworkFetcher;\n import com.airbnb.lottie.network.LottieNetworkCacheProvider;\n@@ -25,6 +24,7 @@ public class L {\n   private static boolean traceEnabled = false;\n   private static boolean networkCacheEnabled = true;\n   private static boolean disablePathInterpolatorCache = true;\n+  private static AsyncUpdates defaultAsyncUpdates = AsyncUpdates.AUTOMATIC;\n \n   private static LottieNetworkFetcher fetcher;\n   private static LottieNetworkCacheProvider cacheProvider;\n@@ -131,4 +131,12 @@ public static void setDisablePathInterpolatorCache(boolean disablePathInterpolat\n   public static boolean getDisablePathInterpolatorCache() {\n     return disablePathInterpolatorCache;\n   }\n+\n+  public static void setDefaultAsyncUpdates(AsyncUpdates asyncUpdates) {\n+    L.defaultAsyncUpdates = asyncUpdates;\n+  }\n+\n+  public static AsyncUpdates getDefaultAsyncUpdates() {\n+    return L.defaultAsyncUpdates;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Lottie.java b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n@@ -21,5 +21,6 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {\n     L.setTraceEnabled(lottieConfig.enableSystraceMarkers);\n     L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);\n     L.setDisablePathInterpolatorCache(lottieConfig.disablePathInterpolatorCache);\n+    L.setDefaultAsyncUpdates(lottieConfig.defaultAsyncUpdates);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n@@ -20,14 +20,17 @@ public class LottieConfig {\n   final boolean enableSystraceMarkers;\n   final boolean enableNetworkCache;\n   final boolean disablePathInterpolatorCache;\n+  final AsyncUpdates defaultAsyncUpdates;\n \n   private LottieConfig(@Nullable LottieNetworkFetcher networkFetcher, @Nullable LottieNetworkCacheProvider cacheProvider,\n-      boolean enableSystraceMarkers, boolean enableNetworkCache, boolean disablePathInterpolatorCache) {\n+      boolean enableSystraceMarkers, boolean enableNetworkCache, boolean disablePathInterpolatorCache,\n+      AsyncUpdates defaultAsyncUpdates) {\n     this.networkFetcher = networkFetcher;\n     this.cacheProvider = cacheProvider;\n     this.enableSystraceMarkers = enableSystraceMarkers;\n     this.enableNetworkCache = enableNetworkCache;\n     this.disablePathInterpolatorCache = disablePathInterpolatorCache;\n+    this.defaultAsyncUpdates = defaultAsyncUpdates;\n   }\n \n   public static final class Builder {\n@@ -39,6 +42,7 @@ public static final class Builder {\n     private boolean enableSystraceMarkers = false;\n     private boolean enableNetworkCache = true;\n     private boolean disablePathInterpolatorCache = true;\n+    private AsyncUpdates defaultAsyncUpdates = AsyncUpdates.AUTOMATIC;\n \n     /**\n      * Lottie has a default network fetching stack built on {@link java.net.HttpURLConnection}. However, if you would like to hook into your own\n@@ -127,9 +131,20 @@ public Builder setDisablePathInterpolatorCache(boolean disable) {\n       return this;\n     }\n \n+    /**\n+     * Sets the default value for async updates.\n+     * @see LottieDrawable#setAsyncUpdates(AsyncUpdates)\n+     */\n+    @NonNull\n+    public Builder setDefaultAsyncUpdates(AsyncUpdates asyncUpdates) {\n+      defaultAsyncUpdates = asyncUpdates;\n+      return this;\n+    }\n+\n     @NonNull\n     public LottieConfig build() {\n-      return new LottieConfig(networkFetcher, cacheProvider, enableSystraceMarkers, enableNetworkCache, disablePathInterpolatorCache);\n+      return new LottieConfig(networkFetcher, cacheProvider, enableSystraceMarkers, enableNetworkCache, disablePathInterpolatorCache,\n+          defaultAsyncUpdates);\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -31,6 +31,7 @@\n import androidx.annotation.RestrictTo;\n \n import com.airbnb.lottie.animation.LPaint;\n+import com.airbnb.lottie.animation.keyframe.PathKeyframe;\n import com.airbnb.lottie.manager.FontAssetManager;\n import com.airbnb.lottie.manager.ImageAssetManager;\n import com.airbnb.lottie.model.Font;\n@@ -145,7 +146,8 @@ private enum OnVisibleAction {\n   private Matrix softwareRenderingOriginalCanvasMatrix;\n   private Matrix softwareRenderingOriginalCanvasMatrixInverse;\n \n-  private AsyncUpdates asyncUpdates = AsyncUpdates.AUTOMATIC;\n+  /** Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}. */\n+  @Nullable private AsyncUpdates asyncUpdates;\n   private final ValueAnimator.AnimatorUpdateListener progressUpdateListener = animation -> {\n     if (getAsyncUpdatesEnabled()) {\n       // Render a new frame.\n@@ -411,7 +413,11 @@ public void setRenderMode(RenderMode renderMode) {\n    * Returns the current value of {@link AsyncUpdates}. Refer to the docs for {@link AsyncUpdates} for more info.\n    */\n   public AsyncUpdates getAsyncUpdates() {\n-    return asyncUpdates;\n+    AsyncUpdates asyncUpdates = this.asyncUpdates;\n+    if (asyncUpdates != null) {\n+      return asyncUpdates;\n+    }\n+    return L.getDefaultAsyncUpdates();\n   }\n \n   /**\n@@ -421,7 +427,7 @@ public AsyncUpdates getAsyncUpdates() {\n    * whether automatic is defaulting to enabled or not.\n    */\n   public boolean getAsyncUpdatesEnabled() {\n-    return asyncUpdates == AsyncUpdates.ENABLED;\n+    return getAsyncUpdates() == AsyncUpdates.ENABLED;\n   }\n \n   /**",
    "output": "Allow configuring a default global value for async updates (#2356)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -177,6 +177,14 @@ int getColorInBetweenColorStops(float position, float opacity, float[] colorStop\n       if (colorStopPosition < position && i != colorStopPositions.length - 1) {\n         continue;\n       }\n+      if (i == colorStopPositions.length - 1 && position >= colorStopPosition) {\n+        return Color.argb(\n+            (int) (opacity * 255),\n+            Color.red(colorStopColors[i]),\n+            Color.green(colorStopColors[i]),\n+            Color.blue(colorStopColors[i])\n+        );\n+      }\n       // We found the position in which position is between i - 1 and i.\n       float distanceBetweenColors = colorStopPositions[i] - colorStopPositions[i - 1];\n       float distanceToLowerColor = position - colorStopPositions[i - 1];\n@@ -264,4 +272,4 @@ protected static float[] mergeUniqueElements(float[] arrayA, float[] arrayB) {\n \n     return Arrays.copyOf(mergedNotTruncated, mergedNotTruncated.length - numDuplicates);\n   }\n-}\n\\ No newline at end of file\n+}",
    "output": "Fix gradient interpolation for opacity stops beyond the last color stop (#2377)\n\nFixes #2353"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n@@ -38,7 +38,7 @@ public void clear() {\n     if (parentDir.exists()) {\n       File[] files = parentDir.listFiles();\n       if (files != null && files.length > 0) {\n-        for (File file : parentDir.listFiles()) {\n+        for (File file : files) {\n           file.delete();\n         }\n       }",
    "output": "Fix Potential NPE In NetworkCache.clearCache (#2364)\n\nCo-authored-by: Nathan Shurtz <n.shurtz@fetchrewards.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1620,7 +1620,7 @@ private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compo\n     int renderWidth = (int) Math.ceil(softwareRenderingTransformedBounds.width());\n     int renderHeight = (int) Math.ceil(softwareRenderingTransformedBounds.height());\n \n-    if (renderWidth == 0 || renderHeight == 0) {\n+    if (renderWidth <= 0 || renderHeight <= 0) {\n       return;\n     }\n ",
    "output": "Fix IllegalArgumentException when createBitmap (#2351)\n\nIllegalArgumentException is thrown when creating bitmap in ensureSoftwareRenderingBitmap() if the getIntrinsicWidth or getIntrinsicHeight returns -1. So, returns when renderWidth or renderHeight is negative to avoid the crash\r\n\r\nFixes https://github.com/airbnb/lottie-android/issues/2350"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -333,22 +333,14 @@ public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStrea\n     return fromJsonInputStreamSync(stream, cacheKey, true);\n   }\n \n-\n   /**\n    * Return a LottieComposition for the given InputStream to json.\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStream stream, @Nullable String cacheKey, boolean close) {\n-    try {\n-      return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey);\n-    } finally {\n-      if (close) {\n-        closeQuietly(stream);\n-      }\n-    }\n+    return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey, close);\n   }\n \n-\n   /**\n    * @see #fromJsonSync(JSONObject, String)\n    */\n@@ -394,12 +386,15 @@ public static LottieTask<LottieComposition> fromJsonReader(final JsonReader read\n     return cache(cacheKey, () -> fromJsonReaderSync(reader, cacheKey), () -> Utils.closeQuietly(reader));\n   }\n \n-\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey) {\n-    return fromJsonReaderSyncInternal(reader, cacheKey, true);\n+    return fromJsonReaderSync(reader, cacheKey, true);\n   }\n \n+  @WorkerThread\n+  public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n+    return fromJsonReaderSyncInternal(reader, cacheKey, close);\n+  }\n \n   private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n       com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {",
    "output": "Add close param to LottieCompositionFactory.fromJsonReader (#2342)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n@@ -123,6 +123,10 @@ static ShapeStroke parse(\n     // Telegram sometimes omits opacity.\n     // https://github.com/airbnb/lottie-android/issues/1600\n     opacity = opacity == null ? new AnimatableIntegerValue(Collections.singletonList(new Keyframe<>(100))) : opacity;\n+    // Unclear why these are omitted sometimes but default to After Effects default value\n+    // https://github.com/airbnb/lottie-android/issues/2325\n+    capType = capType == null ? ShapeStroke.LineCapType.BUTT : capType;\n+    joinType = joinType == null ? ShapeStroke.LineJoinType.MITER : joinType;\n     return new ShapeStroke(\n         name, offset, lineDashPattern, color, opacity, width, capType, joinType, miterLimit, hidden);\n   }",
    "output": "Add default values for stroke line cap and join types (#2337)\n\nFixes #2325"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -128,7 +128,7 @@ void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n     canvas.concat(parentMatrix);\n \n-    configurePaint(documentData, parentMatrix);\n+    configurePaint(documentData, parentAlpha);\n \n     if (lottieDrawable.useTextGlyphs()) {\n       drawTextWithGlyphs(documentData, parentMatrix, font, canvas);\n@@ -139,7 +139,7 @@ void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.restore();\n   }\n \n-  private void configurePaint(DocumentData documentData, Matrix parentMatrix) {\n+  private void configurePaint(DocumentData documentData, int parentAlpha) {\n     if (colorCallbackAnimation != null) {\n       fillPaint.setColor(colorCallbackAnimation.getValue());\n     } else if (colorAnimation != null) {\n@@ -156,7 +156,7 @@ private void configurePaint(DocumentData documentData, Matrix parentMatrix) {\n       strokePaint.setColor(documentData.strokeColor);\n     }\n     int opacity = transform.getOpacity() == null ? 100 : transform.getOpacity().getValue();\n-    int alpha = opacity * 255 / 100;\n+    int alpha = opacity * 255 / 100 * parentAlpha / 255;\n     fillPaint.setAlpha(alpha);\n     strokePaint.setAlpha(alpha);\n ",
    "output": "[Text] Apply parentAlpha when rendering text (#2336)\n\nFixes #2317"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -74,11 +74,21 @@ private static LottieTrace getTrace() {\n   }\n \n   public static void setFetcher(LottieNetworkFetcher customFetcher) {\n+    if ((fetcher == null && customFetcher == null) || (fetcher != null && fetcher.equals(customFetcher))) {\n+      return;\n+    }\n+\n     fetcher = customFetcher;\n+    networkFetcher = null;\n   }\n \n   public static void setCacheProvider(LottieNetworkCacheProvider customProvider) {\n+    if ((cacheProvider == null && customProvider == null) || (cacheProvider != null && cacheProvider.equals(customProvider))) {\n+      return;\n+    }\n+\n     cacheProvider = customProvider;\n+    networkCache = null;\n   }\n \n   @NonNull\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Lottie.java b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n@@ -20,7 +20,6 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {\n     L.setCacheProvider(lottieConfig.cacheProvider);\n     L.setTraceEnabled(lottieConfig.enableSystraceMarkers);\n     L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);\n-    L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);\n     L.setDisablePathInterpolatorCache(lottieConfig.disablePathInterpolatorCache);\n   }\n }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieInitializeTest.java\n@@ -0,0 +1,128 @@\n+package com.airbnb.lottie;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import com.airbnb.lottie.network.LottieFetchResult;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+public class LottieInitializeTest extends BaseTest {\n+\n+  @Rule\n+  public final TemporaryFolder temporaryFolder1 = new TemporaryFolder();\n+\n+  @Rule\n+  public final TemporaryFolder temporaryFolder2 = new TemporaryFolder();\n+\n+  private final Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+\n+  @Before\n+  public void setExecutor() {\n+    LottieTask.EXECUTOR = Runnable::run;\n+  }\n+\n+  @Test\n+  public void fetchAfterSecondInitialize() {\n+    initializeLottie(temporaryFolder1);\n+    // Fetching here causes the resource to be cached in temporaryFolder1:\n+    LottieResult<LottieComposition> result1 = LottieCompositionFactory.fromUrlSync(context, \"resources://test1.json\");\n+    assertNotNull(result1.getValue());\n+\n+    // Manually delete to simulate the end of a test:\n+    temporaryFolder1.delete();\n+\n+    initializeLottie(temporaryFolder2);\n+    // Fetching here fails if L.setCacheProvider doesn't reset both its internal networkFetcher and its internal networkCache, because\n+    // temporaryFolder1 has been deleted:\n+    LottieResult<LottieComposition> result2 = LottieCompositionFactory.fromUrlSync(context, \"resources://test1.json\");\n+    assertNotNull(result2.getValue());\n+  }\n+\n+  private void initializeLottie(TemporaryFolder temporaryFolder) {\n+    LottieConfig lottieConfig = new LottieConfig.Builder()\n+        .setNetworkCacheDir(temporaryFolder.getRoot())\n+        .setNetworkFetcher(url -> {\n+          if (url.startsWith(\"resources://\")) {\n+            InputStream stream = Objects.requireNonNull(getClass().getClassLoader())\n+                .getResourceAsStream(url.substring(\"resources://\".length()));\n+            if (stream != null) {\n+              return new LottieFetchSuccess(stream);\n+            }\n+          }\n+\n+          return new LottieFetchFailure(\"Could not load <$url>\");\n+        })\n+        .build();\n+    Lottie.initialize(lottieConfig);\n+  }\n+\n+  private static class LottieFetchSuccess implements LottieFetchResult {\n+\n+    @NonNull private final InputStream jsonStream;\n+\n+    LottieFetchSuccess(@NonNull InputStream jsonStream) {\n+      this.jsonStream = jsonStream;\n+    }\n+\n+    @Override public boolean isSuccessful() {\n+      return true;\n+    }\n+\n+    @Override @NonNull public InputStream bodyByteStream() {\n+      return jsonStream;\n+    }\n+\n+    @Override public String contentType() {\n+      return \"application/json\";\n+    }\n+\n+    @Override @Nullable public String error() {\n+      return null;\n+    }\n+\n+    @Override public void close() {\n+      // No-op\n+    }\n+  }\n+\n+  private static class LottieFetchFailure implements LottieFetchResult {\n+\n+    @NonNull private final String errorMessage;\n+\n+    LottieFetchFailure(@NonNull String errorMessage) {\n+      this.errorMessage = errorMessage;\n+    }\n+\n+    @Override public boolean isSuccessful() {\n+      return false;\n+    }\n+\n+    @Override @NonNull public InputStream bodyByteStream() {\n+      throw new RuntimeException(\"LottieFetchFailure has no body\");\n+    }\n+\n+    @Override @Nullable public String contentType() {\n+      return null;\n+    }\n+\n+    @Override public String error() {\n+      return errorMessage;\n+    }\n+\n+    @Override public void close() {\n+      // No-op\n+    }\n+  }\n+}",
    "output": "Support re-initialize (#2323)\n\nCloses #2245"
  },
  {
    "input": "diff --git a/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieTaskTest.java\n@@ -1,15 +1,18 @@\n package com.airbnb.lottie;\n \n-import org.junit.Before;\n import org.junit.Ignore;\n+import org.junit.Rule;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n import java.util.concurrent.Callable;\n import java.util.concurrent.Semaphore;\n \n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n \n public class LottieTaskTest extends BaseTest {\n \n@@ -18,18 +21,16 @@ public class LottieTaskTest extends BaseTest {\n   @Mock\n   public LottieListener<Throwable> failureListener;\n \n-  @Before\n-  public void setup() {\n-    MockitoAnnotations.initMocks(this);\n-  }\n+  @Rule\n+  public MockitoRule rule = MockitoJUnit.rule();\n \n   @Test\n   public void testListener() {\n     new LottieTask<>(() -> new LottieResult<>(5), true)\n         .addListener(successListener)\n         .addFailureListener(failureListener);\n     verify(successListener, times(1)).onResult(5);\n-    verifyZeroInteractions(failureListener);\n+    verifyNoInteractions(failureListener);\n   }\n \n   @Test\n@@ -40,7 +41,7 @@ public void testException() {\n     }, true)\n         .addListener(successListener)\n         .addFailureListener(failureListener);\n-    verifyZeroInteractions(successListener);\n+    verifyNoInteractions(successListener);\n     verify(failureListener, times(1)).onResult(exception);\n   }\n \n@@ -69,8 +70,8 @@ public void testRemoveListener() {\n     } catch (InterruptedException e) {\n       throw new IllegalStateException(e);\n     }\n-    verifyZeroInteractions(successListener);\n-    verifyZeroInteractions(failureListener);\n+    verifyNoInteractions(successListener);\n+    verifyNoInteractions(failureListener);\n   }\n \n   @Test\n@@ -84,6 +85,6 @@ public void testAddListenerAfter() {\n     task.addListener(successListener);\n     task.addFailureListener(failureListener);\n     verify(successListener, times(1)).onResult(5);\n-    verifyZeroInteractions(failureListener);\n+    verifyNoInteractions(failureListener);\n   }\n }",
    "output": "Bump dependencies, remove all deprecations, improve CI builds (#2316)\n\nAnother set of build updates. I'll try to comment out each of them. And again, a reminder, please let me know if these are not aligned with the direction this project heads to :)\r\n\r\nI have a couple more ideas of things that could be improved. A few examples:\r\n\r\nintroducing static code analysis for Kotlin files\r\nrunning more checks on the CI (building sample apps, running UI tests)\r\nSample app, the one available on Google Play, does not work properly when scanning QR codes\r\nImprove testability by fixing the re-initialization (one of the opened non-rendering issues)\r\nand maybe, eventually, once I get more familiar with how Lottie library works internally, I'll be able to fix the bug reported if it is even fixable 😅"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -418,7 +418,6 @@ private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n     }\n   }\n \n-\n   /**\n    * In this overload, embedded fonts will NOT be parsed. If your zip file has custom fonts, use the overload\n    * that takes Context as the first parameter.\n@@ -427,40 +426,91 @@ public static LottieTask<LottieComposition> fromZipStream(final ZipInputStream i\n     return fromZipStream(null, inputStream, cacheKey);\n   }\n \n+  /**\n+   * In this overload, embedded fonts will NOT be parsed. If your zip file has custom fonts, use the overload\n+   * that takes Context as the first parameter.\n+   */\n+  public static LottieTask<LottieComposition> fromZipStream(final ZipInputStream inputStream, @Nullable final String cacheKey, boolean close) {\n+    return fromZipStream(null, inputStream, cacheKey, close);\n+  }\n+\n   /**\n    * @see #fromZipStreamSync(Context, ZipInputStream, String)\n    */\n   public static LottieTask<LottieComposition> fromZipStream(Context context, final ZipInputStream inputStream, @Nullable final String cacheKey) {\n     return cache(cacheKey, () -> fromZipStreamSync(context, inputStream, cacheKey), () -> closeQuietly(inputStream));\n   }\n \n+  /**\n+   * @see #fromZipStreamSync(Context, ZipInputStream, String)\n+   */\n+  public static LottieTask<LottieComposition> fromZipStream(Context context, final ZipInputStream inputStream,\n+      @Nullable final String cacheKey, boolean close) {\n+    return cache(cacheKey, () -> fromZipStreamSync(context, inputStream, cacheKey), close ? () -> closeQuietly(inputStream) : null);\n+  }\n+\n   /**\n    * Parses a zip input stream into a Lottie composition.\n    * Your zip file should just be a folder with your json file and images zipped together.\n    * It will automatically store and configure any images inside the animation if they exist.\n    * <p>\n    * In this overload, embedded fonts will NOT be parsed. If your zip file has custom fonts, use the overload\n    * that takes Context as the first parameter.\n+   * <p>\n+   * The ZipInputStream will be automatically closed at the end. If you would like to keep it open, use the overload\n+   * with a close parameter and pass in false.\n    */\n   public static LottieResult<LottieComposition> fromZipStreamSync(ZipInputStream inputStream, @Nullable String cacheKey) {\n-    return fromZipStreamSync(null, inputStream, cacheKey);\n+    return fromZipStreamSync(inputStream, cacheKey, true);\n+  }\n+\n+  /**\n+   * Parses a zip input stream into a Lottie composition.\n+   * Your zip file should just be a folder with your json file and images zipped together.\n+   * It will automatically store and configure any images inside the animation if they exist.\n+   * <p>\n+   * In this overload, embedded fonts will NOT be parsed. If your zip file has custom fonts, use the overload\n+   * that takes Context as the first parameter.\n+   */\n+  public static LottieResult<LottieComposition> fromZipStreamSync(ZipInputStream inputStream, @Nullable String cacheKey, boolean close) {\n+    return fromZipStreamSync(null, inputStream, cacheKey, close);\n   }\n \n   /**\n    * Parses a zip input stream into a Lottie composition.\n    * Your zip file should just be a folder with your json file and images zipped together.\n    * It will automatically store and configure any images inside the animation if they exist.\n+   * <p>\n+   * The ZipInputStream will be automatically closed at the end. If you would like to keep it open, use the overload\n+   * with a close parameter and pass in false.\n    *\n    * @param context is optional and only needed if your zip file contains ttf or otf fonts. If yours doesn't, you may pass null.\n    *                Embedded fonts may be .ttf or .otf files, can be in subdirectories, but must have the same name as the\n    *                font family (fFamily) in your animation file.\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromZipStreamSync(@Nullable Context context, ZipInputStream inputStream, @Nullable String cacheKey) {\n+    return fromZipStreamSync(context, inputStream, cacheKey, true);\n+  }\n+\n+  /**\n+   * Parses a zip input stream into a Lottie composition.\n+   * Your zip file should just be a folder with your json file and images zipped together.\n+   * It will automatically store and configure any images inside the animation if they exist.\n+   *\n+   * @param context is optional and only needed if your zip file contains ttf or otf fonts. If yours doesn't, you may pass null.\n+   *                Embedded fonts may be .ttf or .otf files, can be in subdirectories, but must have the same name as the\n+   *                font family (fFamily) in your animation file.\n+   */\n+  @WorkerThread\n+  public static LottieResult<LottieComposition> fromZipStreamSync(@Nullable Context context, ZipInputStream inputStream,\n+      @Nullable String cacheKey, boolean close) {\n     try {\n       return fromZipStreamSyncInternal(context, inputStream, cacheKey);\n     } finally {\n-      closeQuietly(inputStream);\n+      if (close) {\n+        closeQuietly(inputStream);\n+      }\n     }\n   }\n ",
    "output": "Add close parameters to LottieCompositionFactory.fromZipStream (#2319)\n\nCloses #2252"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1323,7 +1323,7 @@ public <T> void addValueCallback(\n    */\n   public <T> void addValueCallback(KeyPath keyPath, T property,\n       final SimpleLottieValueCallback<T> callback) {\n-    addValueCallback(keyPath, property, new LottieValueCallback<>() {\n+    addValueCallback(keyPath, property, new LottieValueCallback<T>() {\n       @Override\n       public T getValue(LottieFrameInfo<T> frameInfo) {\n         return callback.getValue(frameInfo);",
    "output": "Modernize build (Java 8 compatiblity, fix build warnings, remove dead code) (#2297)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n@@ -17,6 +17,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n \n /**\n  * Helper class to save and restore animations fetched from an URL to the app disk cache.\n@@ -156,6 +158,42 @@ private File parentDir() {\n   }\n \n   private static String filenameForUrl(String url, FileExtension extension, boolean isTemp) {\n-    return \"lottie_cache_\" + url.replaceAll(\"\\\\W+\", \"\") + (isTemp ? extension.tempExtension() : extension.extension);\n+    String prefix = \"lottie_cache_\";\n+    String suffix = (isTemp ? extension.tempExtension() : extension.extension);\n+    String sanitizedUrl = url.replaceAll(\"\\\\W+\", \"\");\n+    // The max filename on Android is 255 chars.\n+    int maxUrlLength = 255 - prefix.length() - suffix.length();\n+    if (sanitizedUrl.length() > maxUrlLength) {\n+      // If the url is too long, use md5 as the cache key instead.\n+      // md5 is preferable to substring because it is impossible to know\n+      // which parts of the url are significant. If it is the end chars\n+      // then substring could cause multiple animations to use the same\n+      // cache key.\n+      // md5 is probably better for everything but:\n+      //     1. It is slower and unnecessary in most cases.\n+      //     2. Upon upgrading, if the cache key algorithm changes,\n+      //        all old cached animations will get orphaned.\n+      sanitizedUrl = getMD5(sanitizedUrl, maxUrlLength);\n+    }\n+\n+    return prefix + sanitizedUrl + suffix;\n+  }\n+\n+  private static String getMD5(String input, int maxLength) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(\"MD5\");\n+    } catch (NoSuchAlgorithmException e) {\n+      // For some reason, md5 doesn't exist, return a substring.\n+      // This should never happen.\n+      return input.substring(0, maxLength);\n+    }\n+    byte[] messageDigest = md.digest(input.getBytes());\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < messageDigest.length; i++) {\n+      byte b = messageDigest[i];\n+      sb.append(String.format(\"%02x\", b));\n+    }\n+    return sb.toString();\n   }\n }",
    "output": "Allow loading URLs that are more than 255 chars (#2311)\n\nFixes #2309"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -36,6 +36,7 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -74,18 +75,49 @@\n     throw new IllegalStateException(\"Unable to parse composition\", throwable);\n   };\n \n-  private final LottieListener<LottieComposition> loadedListener = this::setComposition;\n+  private final LottieListener<LottieComposition> loadedListener = new WeakSuccessListener(this);\n \n-  private final LottieListener<Throwable> wrappedFailureListener = new LottieListener<Throwable>() {\n-    @Override\n-    public void onResult(Throwable result) {\n-      if (fallbackResource != 0) {\n-        setImageResource(fallbackResource);\n+  private static class WeakSuccessListener implements LottieListener<LottieComposition> {\n+\n+    private final WeakReference<LottieAnimationView> targetReference;\n+\n+    public WeakSuccessListener(LottieAnimationView target) {\n+      this.targetReference = new WeakReference<>(target);\n+    }\n+\n+    @Override public void onResult(LottieComposition result) {\n+      LottieAnimationView targetView = targetReference.get();\n+      if (targetView == null) {\n+        return;\n       }\n-      LottieListener<Throwable> l = failureListener == null ? DEFAULT_FAILURE_LISTENER : failureListener;\n+      targetView.setComposition(result);\n+    }\n+  }\n+\n+  private final LottieListener<Throwable> wrappedFailureListener = new WeakFailureListener(this);\n+\n+  private static class WeakFailureListener implements LottieListener<Throwable> {\n+\n+    private final WeakReference<LottieAnimationView> targetReference;\n+\n+    public WeakFailureListener(LottieAnimationView target) {\n+      this.targetReference = new WeakReference<>(target);\n+    }\n+\n+    @Override public void onResult(Throwable result) {\n+      LottieAnimationView targetView = targetReference.get();\n+      if (targetView == null) {\n+        return;\n+      }\n+\n+      if (targetView.fallbackResource != 0) {\n+        targetView.setImageResource(targetView.fallbackResource);\n+      }\n+      LottieListener<Throwable> l = targetView.failureListener == null ? DEFAULT_FAILURE_LISTENER : targetView.failureListener;\n       l.onResult(result);\n     }\n-  };\n+  }\n+\n   @Nullable private LottieListener<Throwable> failureListener;\n   @DrawableRes private int fallbackResource = 0;\n ",
    "output": "Do not hold strong reference to LottieAnimationView in success/failure listeners (#2293)\n\nFixes https://github.com/airbnb/lottie-android/issues/2292\r\n\r\nI followed `LeakCanary` hints, identified 2 listeners that were kept in the static map and fixed them by holding a weak reference to a target object (using private static classes). \r\n\r\nAs far as I understood the flow, there should be no behavior change, other than not having a memory leak. The view can be immediately garbage collected, without altering existing behavior (the resource will continue being fetched in background)."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -1,20 +1,23 @@\n package com.airbnb.lottie.manager;\n+\n+import android.app.Application;\n import android.content.Context;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n import android.graphics.drawable.Drawable;\n-import androidx.annotation.Nullable;\n import android.text.TextUtils;\n import android.util.Base64;\n import android.view.View;\n \n+import androidx.annotation.Nullable;\n+\n import com.airbnb.lottie.ImageAssetDelegate;\n import com.airbnb.lottie.LottieImageAsset;\n import com.airbnb.lottie.utils.Logger;\n import com.airbnb.lottie.utils.Utils;\n+\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.HashMap;\n import java.util.Map;\n \n public class ImageAssetManager {\n@@ -134,7 +137,8 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n   }\n \n   public boolean hasSameContext(Context context) {\n-    return context == null && this.context == null || this.context.equals(context);\n+    Context contextToCompare = this.context instanceof Application ? context.getApplicationContext() : context;\n+    return contextToCompare == this.context;\n   }\n \n   private Bitmap putBitmap(String key, @Nullable Bitmap bitmap) {",
    "output": "Check for Application context when comparing contexts for ImageAssetManager (#2289)\n\nI think the root problem for #2281 is that there are 182 720p images played a bitmap sequences. However, while looking into it, I did discover this Context comparison issue. However, the 182 720p images are the real issue for the animation in #2282."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -568,13 +568,6 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context\n       }\n     }\n \n-    // Ensure that all bitmaps have been set.\n-    for (Map.Entry<String, LottieImageAsset> entry : composition.getImages().entrySet()) {\n-      if (entry.getValue().getBitmap() == null) {\n-        return new LottieResult<>(new IllegalStateException(\"There is no image for \" + entry.getValue().getFileName()));\n-      }\n-    }\n-\n     if (cacheKey != null) {\n       LottieCompositionCache.getInstance().put(cacheKey, composition);\n     }",
    "output": "Remove restriction that zip files must provide all images (#2287)\n\nFixes #2261"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -314,6 +314,17 @@ public static LottieTask<LottieComposition> fromJsonInputStream(final InputStrea\n     return cache(cacheKey, () -> fromJsonInputStreamSync(stream, cacheKey), () -> closeQuietly(stream));\n   }\n \n+  /**\n+   * @see #fromJsonInputStreamSync(InputStream, String, boolean)\n+   */\n+  public static LottieTask<LottieComposition> fromJsonInputStream(final InputStream stream, @Nullable final String cacheKey, boolean close) {\n+    return cache(cacheKey, () -> fromJsonInputStreamSync(stream, cacheKey, close), () -> {\n+      if (close) {\n+        closeQuietly(stream);\n+      }\n+    });\n+  }\n+\n   /**\n    * Return a LottieComposition for the given InputStream to json.\n    */\n@@ -323,8 +334,11 @@ public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStrea\n   }\n \n \n+  /**\n+   * Return a LottieComposition for the given InputStream to json.\n+   */\n   @WorkerThread\n-  private static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStream stream, @Nullable String cacheKey, boolean close) {\n+  public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStream stream, @Nullable String cacheKey, boolean close) {\n     try {\n       return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey);\n     } finally {\n@@ -424,23 +438,23 @@ public static LottieTask<LottieComposition> fromZipStream(Context context, final\n    * Parses a zip input stream into a Lottie composition.\n    * Your zip file should just be a folder with your json file and images zipped together.\n    * It will automatically store and configure any images inside the animation if they exist.\n-   *\n+   * <p>\n    * In this overload, embedded fonts will NOT be parsed. If your zip file has custom fonts, use the overload\n    * that takes Context as the first parameter.\n    */\n   public static LottieResult<LottieComposition> fromZipStreamSync(ZipInputStream inputStream, @Nullable String cacheKey) {\n     return fromZipStreamSync(null, inputStream, cacheKey);\n   }\n \n-    /**\n-     * Parses a zip input stream into a Lottie composition.\n-     * Your zip file should just be a folder with your json file and images zipped together.\n-     * It will automatically store and configure any images inside the animation if they exist.\n-     *\n-     * @param context is optional and only needed if your zip file contains ttf or otf fonts. If yours doesn't, you may pass null.\n-     *                Embedded fonts may be .ttf or .otf files, can be in subdirectories, but must have the same name as the\n-     *                font family (fFamily) in your animation file.\n-     */\n+  /**\n+   * Parses a zip input stream into a Lottie composition.\n+   * Your zip file should just be a folder with your json file and images zipped together.\n+   * It will automatically store and configure any images inside the animation if they exist.\n+   *\n+   * @param context is optional and only needed if your zip file contains ttf or otf fonts. If yours doesn't, you may pass null.\n+   *                Embedded fonts may be .ttf or .otf files, can be in subdirectories, but must have the same name as the\n+   *                font family (fFamily) in your animation file.\n+   */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromZipStreamSync(@Nullable Context context, ZipInputStream inputStream, @Nullable String cacheKey) {\n     try {",
    "output": "Allow for non-closing input stream parsing (#2286)\n\nFixes #2252"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -12,6 +12,7 @@\n import com.airbnb.lottie.network.LottieNetworkFetcher;\n import com.airbnb.lottie.network.NetworkCache;\n import com.airbnb.lottie.network.NetworkFetcher;\n+import com.airbnb.lottie.utils.LottieTrace;\n \n import java.io.File;\n \n@@ -21,20 +22,16 @@ public class L {\n   public static boolean DBG = false;\n   public static final String TAG = \"LOTTIE\";\n \n-  private static final int MAX_DEPTH = 20;\n   private static boolean traceEnabled = false;\n   private static boolean networkCacheEnabled = true;\n   private static boolean disablePathInterpolatorCache = true;\n-  private static String[] sections;\n-  private static long[] startTimeNs;\n-  private static int traceDepth = 0;\n-  private static int depthPastMaxDepth = 0;\n \n   private static LottieNetworkFetcher fetcher;\n   private static LottieNetworkCacheProvider cacheProvider;\n \n   private static volatile NetworkFetcher networkFetcher;\n   private static volatile NetworkCache networkCache;\n+  private static ThreadLocal<LottieTrace> lottieTrace;\n \n   private L() {\n   }\n@@ -44,9 +41,8 @@ public static void setTraceEnabled(boolean enabled) {\n       return;\n     }\n     traceEnabled = enabled;\n-    if (traceEnabled) {\n-      sections = new String[MAX_DEPTH];\n-      startTimeNs = new long[MAX_DEPTH];\n+    if (traceEnabled && lottieTrace == null) {\n+      lottieTrace = new ThreadLocal<>();\n     }\n   }\n \n@@ -58,34 +54,23 @@ public static void beginSection(String section) {\n     if (!traceEnabled) {\n       return;\n     }\n-    if (traceDepth == MAX_DEPTH) {\n-      depthPastMaxDepth++;\n-      return;\n-    }\n-    sections[traceDepth] = section;\n-    startTimeNs[traceDepth] = System.nanoTime();\n-    TraceCompat.beginSection(section);\n-    traceDepth++;\n+    getTrace().beginSection(section);\n   }\n \n   public static float endSection(String section) {\n-    if (depthPastMaxDepth > 0) {\n-      depthPastMaxDepth--;\n-      return 0;\n-    }\n     if (!traceEnabled) {\n       return 0;\n     }\n-    traceDepth--;\n-    if (traceDepth == -1) {\n-      throw new IllegalStateException(\"Can't end trace section. There are none.\");\n-    }\n-    if (!section.equals(sections[traceDepth])) {\n-      throw new IllegalStateException(\"Unbalanced trace call \" + section +\n-          \". Expected \" + sections[traceDepth] + \".\");\n+    return getTrace().endSection(section);\n+  }\n+\n+  private static LottieTrace getTrace() {\n+    LottieTrace trace = lottieTrace.get();\n+    if (trace == null) {\n+      trace = new LottieTrace();\n+      lottieTrace.set(trace);\n     }\n-    TraceCompat.endSection();\n-    return (System.nanoTime() - startTimeNs[traceDepth]) / 1000000f;\n+    return trace;\n   }\n \n   public static void setFetcher(LottieNetworkFetcher customFetcher) {\n@@ -121,11 +106,8 @@ public static NetworkCache networkCache(@NonNull final Context context) {\n       synchronized (NetworkCache.class) {\n         local = networkCache;\n         if (local == null) {\n-          networkCache = local = new NetworkCache(cacheProvider != null ? cacheProvider : new LottieNetworkCacheProvider() {\n-            @Override @NonNull public File getCacheDir() {\n-              return new File(appContext.getCacheDir(), \"lottie_network_cache\");\n-            }\n-          });\n+          networkCache = local = new NetworkCache(cacheProvider != null ? cacheProvider :\n+              () -> new File(appContext.getCacheDir(), \"lottie_network_cache\"));\n         }\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -46,7 +46,9 @@ public void addUpdateListener(AnimationListener listener) {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    L.beginSection(\"BaseKeyframeAnimation#setProgress\");\n     if (keyframesWrapper.isEmpty()) {\n+      L.endSection(\"BaseKeyframeAnimation#setProgress\");\n       return;\n     }\n     if (progress < getStartDelayProgress()) {\n@@ -56,18 +58,22 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n \n     if (progress == this.progress) {\n+      L.endSection(\"BaseKeyframeAnimation#setProgress\");\n       return;\n     }\n     this.progress = progress;\n     if (keyframesWrapper.isValueChanged(progress)) {\n       notifyListeners();\n     }\n+    L.endSection(\"BaseKeyframeAnimation#setProgress\");\n   }\n \n   public void notifyListeners() {\n+    L.beginSection(\"BaseKeyframeAnimation#notifyListeners\");\n     for (int i = 0; i < listeners.size(); i++) {\n       listeners.get(i).onValueChanged();\n     }\n+    L.endSection(\"BaseKeyframeAnimation#notifyListeners\");\n   }\n \n   protected Keyframe<K> getCurrentKeyframe() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -571,22 +571,34 @@ private void setVisible(boolean visible) {\n   }\n \n   void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    L.beginSection(\"BaseLayer#setProgress\");\n     // Time stretch should not be applied to the layer transform.\n+    L.beginSection(\"BaseLayer#setProgress.transform\");\n     transform.setProgress(progress);\n+    L.endSection(\"BaseLayer#setProgress.transform\");\n     if (mask != null) {\n+      L.beginSection(\"BaseLayer#setProgress.mask\");\n       for (int i = 0; i < mask.getMaskAnimations().size(); i++) {\n         mask.getMaskAnimations().get(i).setProgress(progress);\n       }\n+      L.endSection(\"BaseLayer#setProgress.mask\");\n     }\n     if (inOutAnimation != null) {\n+      L.beginSection(\"BaseLayer#setProgress.inout\");\n       inOutAnimation.setProgress(progress);\n+      L.endSection(\"BaseLayer#setProgress.inout\");\n     }\n     if (matteLayer != null) {\n+      L.beginSection(\"BaseLayer#setProgress.matte\");\n       matteLayer.setProgress(progress);\n+      L.endSection(\"BaseLayer#setProgress.matte\");\n     }\n+    L.beginSection(\"BaseLayer#setProgress.animations.\" + animations.size());\n     for (int i = 0; i < animations.size(); i++) {\n       animations.get(i).setProgress(progress);\n     }\n+    L.endSection(\"BaseLayer#setProgress.animations.\" + animations.size());\n+    L.endSection(\"BaseLayer#setProgress\");\n   }\n \n   private void buildParentLayerListIfNeeded() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -4,6 +4,7 @@\n import android.graphics.Matrix;\n import android.graphics.Paint;\n import android.graphics.RectF;\n+import android.util.Log;\n \n import androidx.annotation.FloatRange;\n import androidx.annotation.Nullable;\n@@ -142,6 +143,7 @@ public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n   }\n \n   @Override public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    L.beginSection(\"CompositionLayer#setProgress\");\n     super.setProgress(progress);\n     if (timeRemapping != null) {\n       // The duration has 0.01 frame offset to show end of animation properly.\n@@ -162,6 +164,7 @@ public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n     for (int i = layers.size() - 1; i >= 0; i--) {\n       layers.get(i).setProgress(progress);\n     }\n+    L.endSection(\"CompositionLayer#setProgress\");\n   }\n \n   public boolean hasMasks() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieTrace.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieTrace.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieTrace.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieTrace.java\n@@ -0,0 +1,42 @@\n+package com.airbnb.lottie.utils;\n+\n+import androidx.core.os.TraceCompat;\n+\n+public class LottieTrace {\n+  private static final int MAX_DEPTH = 20;\n+\n+  private final String[] sections = new String[MAX_DEPTH];\n+  private final long[] startTimeNs = new long[MAX_DEPTH];\n+  private int traceDepth = 0;\n+  private int depthPastMaxDepth = 0;\n+\n+  public void beginSection(String section) {\n+    if (traceDepth == MAX_DEPTH) {\n+      depthPastMaxDepth++;\n+      return;\n+    }\n+    sections[traceDepth] = section;\n+    startTimeNs[traceDepth] = System.nanoTime();\n+    //noinspection deprecation\n+    TraceCompat.beginSection(section);\n+    traceDepth++;\n+  }\n+\n+  public float endSection(String section) {\n+    if (depthPastMaxDepth > 0) {\n+      depthPastMaxDepth--;\n+      return 0;\n+    }\n+    traceDepth--;\n+    if (traceDepth == -1) {\n+      throw new IllegalStateException(\"Can't end trace section. There are none.\");\n+    }\n+    if (!section.equals(sections[traceDepth])) {\n+      throw new IllegalStateException(\"Unbalanced trace call \" + section +\n+          \". Expected \" + sections[traceDepth] + \".\");\n+    }\n+    //noinspection deprecation\n+    TraceCompat.endSection();\n+    return (System.nanoTime() - startTimeNs[traceDepth]) / 1000000f;\n+  }\n+}",
    "output": "Added more systrace markers and made LottieTrace multi-thread compatible (#2275)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -282,8 +282,9 @@ private void drawTextWithFont(DocumentData documentData, Font font, Canvas canva\n   private void offsetCanvas(Canvas canvas, DocumentData documentData, int lineIndex, float lineWidth) {\n     PointF position = documentData.boxPosition;\n     PointF size = documentData.boxSize;\n-    float lineStartY = position == null ? 0f : position.y;\n-    float lineOffset = (lineIndex * documentData.lineHeight * Utils.dpScale()) + lineStartY;\n+    float dpScale = Utils.dpScale();\n+    float lineStartY = position == null ? 0f : documentData.lineHeight * dpScale + position.y;\n+    float lineOffset = (lineIndex * documentData.lineHeight * dpScale) + lineStartY;\n     float lineStart = position == null ? 0f : position.x;\n     float boxWidth = size == null ? 0f : size.x;\n     switch (documentData.justification) {\n@@ -334,7 +335,8 @@ private void drawFontTextLine(String text, DocumentData documentData, Canvas can\n     }\n   }\n \n-  private List<TextSubLine> splitGlyphTextIntoLines(String textLine, float boxWidth, Font font, float fontScale, float tracking, boolean usingGlyphs) {\n+  private List<TextSubLine> splitGlyphTextIntoLines(String textLine, float boxWidth, Font font, float fontScale, float tracking,\n+      boolean usingGlyphs) {\n     int lineCount = 0;\n \n     float currentLineWidth = 0;",
    "output": "Update point text y offset (#2243)\n\nAfter several hours and a bunch of test files, I've been able to get the y position of point text to be accurate in most cases and closer in the rest. I can't quite get a hold of the right algorithm to get it to be 100% correct all the time but this is an improvement.\r\n\r\nIf any external contributors wants to continue iterating on this, feel free to. Just add more animations to the snapshot-test module if you do.\r\n\r\nMostly fixes #2201"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -282,7 +282,8 @@ private void drawTextWithFont(DocumentData documentData, Font font, Canvas canva\n   private void offsetCanvas(Canvas canvas, DocumentData documentData, int lineIndex, float lineWidth) {\n     PointF position = documentData.boxPosition;\n     PointF size = documentData.boxSize;\n-    float lineOffset = lineIndex * documentData.lineHeight * Utils.dpScale();\n+    float lineStartY = position == null ? 0f : position.y;\n+    float lineOffset = (lineIndex * documentData.lineHeight * Utils.dpScale()) + lineStartY;\n     float lineStart = position == null ? 0f : position.x;\n     float boxWidth = size == null ? 0f : size.x;\n     switch (documentData.justification) {",
    "output": "Update text rendering y position (#2225)\n\nThis PR updates text positioning to use the box position y value (ps)\r\n\r\nThis already works on iOS, I think this is because it uses the position object directly."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java\n@@ -11,6 +11,8 @@\n public abstract class BaseLottieAnimator extends ValueAnimator {\n   private final Set<ValueAnimator.AnimatorUpdateListener> updateListeners = new CopyOnWriteArraySet<>();\n   private final Set<AnimatorListener> listeners = new CopyOnWriteArraySet<>();\n+  private final Set<Animator.AnimatorPauseListener> pauseListeners = new CopyOnWriteArraySet<>();\n+\n \n   @Override public long getStartDelay() {\n     throw new UnsupportedOperationException(\"LottieAnimator does not support getStartDelay.\");\n@@ -62,6 +64,14 @@ void notifyStart(boolean isReverse) {\n     }\n   }\n \n+  @Override public void addPauseListener(AnimatorPauseListener listener) {\n+    pauseListeners.add(listener);\n+  }\n+\n+  @Override public void removePauseListener(AnimatorPauseListener listener) {\n+    pauseListeners.remove(listener);\n+  }\n+\n   void notifyRepeat() {\n     for (Animator.AnimatorListener listener : listeners) {\n       listener.onAnimationRepeat(this);\n@@ -89,4 +99,20 @@ void notifyUpdate() {\n       listener.onAnimationUpdate(this);\n     }\n   }\n+\n+  void notifyPause() {\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n+      for (AnimatorPauseListener pauseListener : pauseListeners) {\n+        pauseListener.onAnimationPause(this);\n+      }\n+    }\n+  }\n+\n+  void notifyResume() {\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n+      for (AnimatorPauseListener pauseListener : pauseListeners) {\n+        pauseListener.onAnimationResume(this);\n+      }\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -238,6 +238,7 @@ public void endAnimation() {\n   @MainThread\n   public void pauseAnimation() {\n     removeFrameCallback();\n+    notifyPause();\n   }\n \n   @MainThread\n@@ -250,6 +251,7 @@ public void resumeAnimation() {\n     } else if (!isReversed() && getFrame() == getMaxFrame()) {\n       setFrame(getMinFrame());\n     }\n+    notifyResume();\n   }\n \n   @MainThread\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/utils/LottieValueAnimatorTest.java b/lottie/src/test/java/com/airbnb/lottie/utils/LottieValueAnimatorTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/utils/LottieValueAnimatorTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/utils/LottieValueAnimatorTest.java\n@@ -0,0 +1,47 @@\n+package com.airbnb.lottie.utils;\n+\n+import android.animation.Animator;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import com.airbnb.lottie.BaseTest;\n+\n+import org.junit.Test;\n+\n+public class LottieValueAnimatorTest extends BaseTest {\n+  @Test\n+  public void callOfPauseAnimationShouldFireCallbackOnAnimationPause() {\n+    // Set\n+    Animator.AnimatorPauseListener listener = mock(Animator.AnimatorPauseListener.class);\n+\n+    LottieValueAnimator animator = new LottieValueAnimator();\n+    animator.addPauseListener(listener);\n+\n+    // Do\n+    animator.pauseAnimation();\n+\n+    // Check\n+    verify(listener, times(1)).onAnimationPause(eq(animator));\n+    verify(listener, times(0)).onAnimationResume(any());\n+  }\n+\n+  @Test\n+  public void callOfResumeAnimationShouldFireCallbackOnAnimationResume() {\n+    // Set\n+    Animator.AnimatorPauseListener listener = mock(Animator.AnimatorPauseListener.class);\n+\n+    LottieValueAnimator animator = new LottieValueAnimator();\n+    animator.addPauseListener(listener);\n+\n+    // Do\n+    animator.resumeAnimation();\n+\n+    // Check\n+    verify(listener, times(0)).onAnimationPause(any());\n+    verify(listener, times(1)).onAnimationResume(eq(animator));\n+  }\n+}",
    "output": "Fix AnimatorPauseListener callbacks (#2210)\n\nLottieValueAnimator doesn't utilize a base implementation of pause and resume methods of Animator.\r\nThe result is undispatched events to AnimatorPauseListener."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -60,9 +60,9 @@ private LottieComposition fetchFromCache(Context context, @NonNull String url, @\n     InputStream inputStream = cacheResult.second;\n     LottieResult<LottieComposition> result;\n     if (extension == FileExtension.ZIP) {\n-      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), url);\n+      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), cacheKey);\n     } else {\n-      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, url);\n+      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey);\n     }\n     if (result.getValue() != null) {\n       return result.getValue();",
    "output": "Use the correct cache key when parsing NetworkFetcher animations (#2198)\n\nFixes #2187"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n@@ -229,7 +229,7 @@ public Matrix getMatrix() {\n     BaseKeyframeAnimation<PointF, PointF> anchorPoint = this.anchorPoint;\n     if (anchorPoint != null) {\n       PointF anchorPointValue = anchorPoint.getValue();\n-      if (anchorPointValue.x != 0 || anchorPointValue.y != 0) {\n+      if (anchorPointValue != null && anchorPointValue.x != 0 || anchorPointValue.y != 0) {\n         matrix.preTranslate(-anchorPointValue.x, -anchorPointValue.y);\n       }\n     }",
    "output": "Add an extra null check for transform anchorPosition (#2197)\n\nNot sure why this is happening but it seems similar to #1955.\r\n\r\nFixes #2194"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -24,6 +24,7 @@ public class L {\n   private static final int MAX_DEPTH = 20;\n   private static boolean traceEnabled = false;\n   private static boolean networkCacheEnabled = true;\n+  private static boolean disablePathInterpolatorCache = true;\n   private static String[] sections;\n   private static long[] startTimeNs;\n   private static int traceDepth = 0;\n@@ -130,4 +131,12 @@ public static NetworkCache networkCache(@NonNull final Context context) {\n     }\n     return local;\n   }\n+\n+  public static void setDisablePathInterpolatorCache(boolean disablePathInterpolatorCache) {\n+    L.disablePathInterpolatorCache = disablePathInterpolatorCache;\n+  }\n+\n+  public static boolean getDisablePathInterpolatorCache() {\n+    return disablePathInterpolatorCache;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Lottie.java b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n@@ -20,5 +20,7 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {\n     L.setCacheProvider(lottieConfig.cacheProvider);\n     L.setTraceEnabled(lottieConfig.enableSystraceMarkers);\n     L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);\n+    L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);\n+    L.setDisablePathInterpolatorCache(lottieConfig.disablePathInterpolatorCache);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n@@ -19,13 +19,15 @@ public class LottieConfig {\n   @Nullable final LottieNetworkCacheProvider cacheProvider;\n   final boolean enableSystraceMarkers;\n   final boolean enableNetworkCache;\n+  final boolean disablePathInterpolatorCache;\n \n   private LottieConfig(@Nullable LottieNetworkFetcher networkFetcher, @Nullable LottieNetworkCacheProvider cacheProvider,\n-      boolean enableSystraceMarkers, boolean enableNetworkCache) {\n+      boolean enableSystraceMarkers, boolean enableNetworkCache, boolean disablePathInterpolatorCache) {\n     this.networkFetcher = networkFetcher;\n     this.cacheProvider = cacheProvider;\n     this.enableSystraceMarkers = enableSystraceMarkers;\n     this.enableNetworkCache = enableNetworkCache;\n+    this.disablePathInterpolatorCache = disablePathInterpolatorCache;\n   }\n \n   public static final class Builder {\n@@ -36,6 +38,7 @@ public static final class Builder {\n     private LottieNetworkCacheProvider cacheProvider;\n     private boolean enableSystraceMarkers = false;\n     private boolean enableNetworkCache = true;\n+    private boolean disablePathInterpolatorCache = true;\n \n     /**\n      * Lottie has a default network fetching stack built on {@link java.net.HttpURLConnection}. However, if you would like to hook into your own\n@@ -111,9 +114,22 @@ public Builder setEnableNetworkCache(boolean enable) {\n       return this;\n     }\n \n+    /**\n+     * When parsing animations, Lottie has a path interpolator cache. This cache allows Lottie to reuse PathInterpolators\n+     * across an animation. This is desirable in most cases. However, when shared across screenshot tests, it can cause slight\n+     * deviations in the rendering due to underlying approximations in the PathInterpolator.\n+     *\n+     * The cache is enabled by default and should probably only be disabled for screenshot tests.\n+     */\n+    @NonNull\n+    public Builder setDisablePathInterpolatorCache(boolean disable) {\n+      disablePathInterpolatorCache = disable;\n+      return this;\n+    }\n+\n     @NonNull\n     public LottieConfig build() {\n-      return new LottieConfig(networkFetcher, cacheProvider, enableSystraceMarkers, enableNetworkCache);\n+      return new LottieConfig(networkFetcher, cacheProvider, enableSystraceMarkers, enableNetworkCache, disablePathInterpolatorCache);\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n@@ -8,6 +8,8 @@\n import androidx.collection.SparseArrayCompat;\n import androidx.core.view.animation.PathInterpolatorCompat;\n \n+import com.airbnb.lottie.L;\n+import com.airbnb.lottie.Lottie;\n import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n import com.airbnb.lottie.utils.MiscUtils;\n@@ -332,7 +334,7 @@ private static Interpolator interpolatorFor(PointF cp1, PointF cp2) {\n     cp2.x = MiscUtils.clamp(cp2.x, -1f, 1f);\n     cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n     int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);\n-    WeakReference<Interpolator> interpolatorRef = getInterpolator(hash);\n+    WeakReference<Interpolator> interpolatorRef = L.getDisablePathInterpolatorCache() ? null : getInterpolator(hash);\n     if (interpolatorRef != null) {\n       interpolator = interpolatorRef.get();\n     }\n@@ -350,13 +352,15 @@ private static Interpolator interpolatorFor(PointF cp1, PointF cp2) {\n           interpolator = new LinearInterpolator();\n         }\n       }\n-      try {\n-        putInterpolator(hash, new WeakReference<>(interpolator));\n-      } catch (ArrayIndexOutOfBoundsException e) {\n-        // It is not clear why but SparseArrayCompat sometimes fails with this:\n-        //     https://github.com/airbnb/lottie-android/issues/452\n-        // Because this is not a critical operation, we can safely just ignore it.\n-        // I was unable to repro this to attempt a proper fix.\n+      if (!L.getDisablePathInterpolatorCache()) {\n+        try {\n+          putInterpolator(hash, new WeakReference<>(interpolator));\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+          // It is not clear why but SparseArrayCompat sometimes fails with this:\n+          //     https://github.com/airbnb/lottie-android/issues/452\n+          // Because this is not a critical operation, we can safely just ignore it.\n+          // I was unable to repro this to attempt a proper fix.\n+        }\n       }\n     }\n     return interpolator;",
    "output": "[Snapshot tests] Disable the path interpolator cache (#2195)\n\nThis should prevent the large diffs in the snapshot tests"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -216,6 +216,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n         )\n     );\n \n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_useCompositionFrameRate)) {\n+      setUseCompositionFrameRate(ta.getBoolean(R.styleable.LottieAnimationView_lottie_useCompositionFrameRate, false));\n+    }\n+\n     ta.recycle();\n \n     lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n@@ -333,6 +337,19 @@ public void setIgnoreDisabledSystemAnimations(boolean ignore) {\n     lottieDrawable.setIgnoreDisabledSystemAnimations(ignore);\n   }\n \n+  /**\n+   * Lottie files can specify a target frame rate. By default, Lottie ignores it and re-renders\n+   * on every frame. If that behavior is undesirable, you can set this to true to use the composition\n+   * frame rate instead.\n+   * <p>\n+   * Note: composition frame rates are usually lower than display frame rates\n+   * so this will likely make your animation feel janky. However, it may be desirable\n+   * for specific situations such as pixel art that are intended to have low frame rates.\n+   */\n+  public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n+    lottieDrawable.setUseCompositionFrameRate(useCompositionFrameRate);\n+  }\n+\n   /**\n    * Enable this to get merge path support for devices running KitKat (19) and above.\n    * <p>\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1009,6 +1009,19 @@ public void setIgnoreDisabledSystemAnimations(boolean ignore) {\n     ignoreSystemAnimationsDisabled = ignore;\n   }\n \n+  /**\n+   * Lottie files can specify a target frame rate. By default, Lottie ignores it and re-renders\n+   * on every frame. If that behavior is undesirable, you can set this to true to use the composition\n+   * frame rate instead.\n+   * <p>\n+   * Note: composition frame rates are usually lower than display frame rates\n+   * so this will likely make your animation feel janky. However, it may be desirable\n+   * for specific situations such as pixel art that are intended to have low frame rates.\n+   */\n+  public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n+    animator.setUseCompositionFrameRate(useCompositionFrameRate);\n+  }\n+\n   /**\n    * Use this if you can't bundle images with your app. This may be useful if you download the\n    * animations from the network or have the images saved to an SD Card. In that case, Lottie\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -21,12 +21,14 @@ public class LottieValueAnimator extends BaseLottieAnimator implements Choreogra\n   private float speed = 1f;\n   private boolean speedReversedForRepeatMode = false;\n   private long lastFrameTimeNs = 0;\n+  private float frameRaw = 0;\n   private float frame = 0;\n   private int repeatCount = 0;\n   private float minFrame = Integer.MIN_VALUE;\n   private float maxFrame = Integer.MAX_VALUE;\n   @Nullable private LottieComposition composition;\n   @VisibleForTesting protected boolean running = false;\n+  private boolean useCompositionFrameRate = false;\n \n   public LottieValueAnimator() {\n   }\n@@ -78,6 +80,10 @@ public float getFrame() {\n     return running;\n   }\n \n+  public void setUseCompositionFrameRate(boolean useCompositionFrameRate) {\n+    this.useCompositionFrameRate = useCompositionFrameRate;\n+  }\n+\n   @Override public void doFrame(long frameTimeNanos) {\n     postFrameCallback();\n     if (composition == null || !isRunning()) {\n@@ -89,16 +95,21 @@ public float getFrame() {\n     float frameDuration = getFrameDurationNs();\n     float dFrames = timeSinceFrame / frameDuration;\n \n-    frame += isReversed() ? -dFrames : dFrames;\n-    boolean ended = !MiscUtils.contains(frame, getMinFrame(), getMaxFrame());\n-    frame = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n+    float newFrameRaw = frameRaw + (isReversed() ? -dFrames : dFrames);\n+    boolean ended = !MiscUtils.contains(newFrameRaw, getMinFrame(), getMaxFrame());\n+    float previousFrameRaw = frameRaw;\n+    frameRaw = MiscUtils.clamp(newFrameRaw, getMinFrame(), getMaxFrame());\n+    frame = useCompositionFrameRate ? (float) Math.floor(frameRaw) : frameRaw;\n \n     lastFrameTimeNs = frameTimeNanos;\n \n-    notifyUpdate();\n+    if (!useCompositionFrameRate || frameRaw != previousFrameRaw) {\n+      notifyUpdate();\n+    }\n     if (ended) {\n       if (getRepeatCount() != INFINITE && repeatCount >= getRepeatCount()) {\n-        frame = speed < 0 ? getMinFrame() : getMaxFrame();\n+        frameRaw = speed < 0 ? getMinFrame() : getMaxFrame();\n+        frame = frameRaw;\n         removeFrameCallback();\n         notifyEnd(isReversed());\n       } else {\n@@ -108,7 +119,8 @@ public float getFrame() {\n           speedReversedForRepeatMode = !speedReversedForRepeatMode;\n           reverseAnimationSpeed();\n         } else {\n-          frame = isReversed() ? getMaxFrame() : getMinFrame();\n+          frameRaw = isReversed() ? getMaxFrame() : getMinFrame();\n+          frame = frameRaw;\n         }\n         lastFrameTimeNs = frameTimeNanos;\n       }\n@@ -146,15 +158,17 @@ public void setComposition(LottieComposition composition) {\n     }\n     float frame = this.frame;\n     this.frame = 0f;\n+    this.frameRaw = 0f;\n     setFrame((int) frame);\n     notifyUpdate();\n   }\n \n   public void setFrame(float frame) {\n-    if (this.frame == frame) {\n+    if (this.frameRaw == frame) {\n       return;\n     }\n-    this.frame = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n+    this.frameRaw = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n+    this.frame = useCompositionFrameRate ? ((float) Math.floor(frameRaw)) : frameRaw;\n     lastFrameTimeNs = 0;\n     notifyUpdate();\n   }\n@@ -232,9 +246,9 @@ public void resumeAnimation() {\n     postFrameCallback();\n     lastFrameTimeNs = 0;\n     if (isReversed() && getFrame() == getMinFrame()) {\n-      frame = getMaxFrame();\n+      setFrame(getMaxFrame());\n     } else if (!isReversed() && getFrame() == getMaxFrame()) {\n-      frame = getMinFrame();\n+      setFrame(getMinFrame());\n     }\n   }\n ",
    "output": "Allow rendering at the composition frame rate (#2184)\n\nFixes #1206"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -116,11 +116,11 @@ public long getId() {\n     return layerId;\n   }\n \n-  String getName() {\n+  public String getName() {\n     return layerName;\n   }\n \n-  @Nullable String getRefId() {\n+  public @Nullable String getRefId() {\n     return refId;\n   }\n ",
    "output": "Make Layer name and refId public (#2188)\n\nI'm running tests against my animation json files and I want to make sure that all the layers I expect to be there are actually there, but I'm hitting issues with the visibility of these two functions."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1255,11 +1255,6 @@ public LottieImageAsset getLottieImageAssetForId(String id) {\n   }\n \n   private ImageAssetManager getImageAssetManager() {\n-    if (getCallback() == null) {\n-      // We can't get a bitmap since we can't get a Context from the callback.\n-      return null;\n-    }\n-\n     if (imageAssetManager != null && !imageAssetManager.hasSameContext(getContext())) {\n       imageAssetManager = null;\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -19,7 +19,7 @@\n \n public class ImageAssetManager {\n   private static final Object bitmapHashLock = new Object();\n-  private final Context context;\n+  @Nullable private final Context context;\n   private final String imagesFolder;\n   @Nullable private ImageAssetDelegate delegate;\n   private final Map<String, LottieImageAsset> imageAssets;\n@@ -31,16 +31,14 @@ public ImageAssetManager(Drawable.Callback callback, String imagesFolder,\n     } else {\n       this.imagesFolder = imagesFolder;\n     }\n+    this.imageAssets = imageAssets;\n+    setDelegate(delegate);\n     if (!(callback instanceof View)) {\n-      Logger.warning(\"LottieDrawable must be inside of a view for images to work.\");\n-      this.imageAssets = new HashMap<>();\n       context = null;\n       return;\n     }\n \n     context = ((View) callback).getContext().getApplicationContext();\n-    this.imageAssets = imageAssets;\n-    setDelegate(delegate);\n   }\n \n   public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n@@ -84,6 +82,12 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n       }\n       return bitmap;\n     }\n+    Context context = this.context;\n+    if (context == null) {\n+      // If there is no context, the image has to be embedded or provided via\n+      // a delegate.\n+      return null;\n+    }\n \n     String filename = asset.getFileName();\n     BitmapFactory.Options opts = new BitmapFactory.Options();",
    "output": "Allow ImageAssetDelegate to be used with a LottieDrawable that doesn't have a callback (#2183)\n\nFixes #2112"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1419,6 +1419,7 @@ private void drawDirectlyToCanvas(Canvas canvas) {\n       float scaleY = bounds.height() / (float) composition.getBounds().height();\n \n       renderingMatrix.preScale(scaleX, scaleY);\n+      renderingMatrix.preTranslate(bounds.left, bounds.top);\n     }\n     compositionLayer.draw(canvas, renderingMatrix, alpha);\n   }",
    "output": "Take left/top bounds into account (#2182)\n\nFixes #2098"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -7,6 +7,7 @@\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n import android.graphics.ColorFilter;\n+import android.graphics.Typeface;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n import android.os.Parcel;\n@@ -37,6 +38,7 @@\n import java.io.InputStream;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n /**\n@@ -351,9 +353,9 @@ public boolean isMergePathsEnabledForKitKatAndAbove() {\n \n   /**\n    * Sets whether or not Lottie should clip to the original animation composition bounds.\n-   *\n+   * <p>\n    * When set to true, the parent view may need to disable clipChildren so Lottie can render outside of the LottieAnimationView bounds.\n-   *\n+   * <p>\n    * Defaults to true.\n    */\n   public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n@@ -362,7 +364,7 @@ public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n \n   /**\n    * Gets whether or not Lottie should clip to the original animation composition bounds.\n-   *\n+   * <p>\n    * Defaults to true.\n    */\n   public boolean getClipToCompositionBounds() {\n@@ -861,7 +863,7 @@ public String getImageAssetsFolder() {\n   /**\n    * When true, dynamically set bitmaps will be drawn with the exact bounds of the original animation, regardless of the bitmap size.\n    * When false, dynamically set bitmaps will be drawn at the top left of the original image but with its own bounds.\n-   *\n+   * <p>\n    * Defaults to false.\n    */\n   public void setMaintainOriginalImageBounds(boolean maintainOriginalImageBounds) {\n@@ -871,7 +873,7 @@ public void setMaintainOriginalImageBounds(boolean maintainOriginalImageBounds)\n   /**\n    * When true, dynamically set bitmaps will be drawn with the exact bounds of the original animation, regardless of the bitmap size.\n    * When false, dynamically set bitmaps will be drawn at the top left of the original image but with its own bounds.\n-   *\n+   * <p>\n    * Defaults to false.\n    */\n   public boolean getMaintainOriginalImageBounds() {\n@@ -909,7 +911,7 @@ public void setImageAssetDelegate(ImageAssetDelegate assetDelegate) {\n    * where FONT_NAME is the fFamily specified in your Lottie file.\n    * If your fonts have a different extension, you can override the\n    * default here.\n-   *\n+   * <p>\n    * Alternatively, you can use {@link #setFontAssetDelegate(FontAssetDelegate)}\n    * for more control.\n    *\n@@ -926,6 +928,21 @@ public void setFontAssetDelegate(FontAssetDelegate assetDelegate) {\n     lottieDrawable.setFontAssetDelegate(assetDelegate);\n   }\n \n+  /**\n+   * Set a map from font name keys to Typefaces.\n+   * The keys can be in the form:\n+   * * fontFamily\n+   * * fontFamily-fontStyle\n+   * * fontName\n+   * All 3 are defined as fName, fFamily, and fStyle in the Lottie file.\n+   * <p>\n+   * If you change a value in fontMap, create a new map or call\n+   * {@link #invalidate()}. Setting the same map again will noop.\n+   */\n+  public void setFontMap(@Nullable Map<String, Typeface> fontMap) {\n+    lottieDrawable.setFontMap(fontMap);\n+  }\n+\n   /**\n    * Set this to replace animation text with custom text at runtime\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -51,6 +51,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * This can be used to show an lottie animation in any place that would normally take a drawable.\n@@ -106,6 +107,8 @@ public void onAnimationUpdate(ValueAnimator animation) {\n   private ImageAssetDelegate imageAssetDelegate;\n   @Nullable\n   private FontAssetManager fontAssetManager;\n+  @Nullable\n+  private Map<String, Typeface> fontMap;\n   /**\n    * Will be set if manually overridden by {@link #setDefaultFontFileExtension(String)}.\n    * This must be stored as a field in case it is set before the font asset delegate\n@@ -222,7 +225,7 @@ public boolean isMergePathsEnabledForKitKatAndAbove() {\n \n   /**\n    * Sets whether or not Lottie should clip to the original animation composition bounds.\n-   *\n+   * <p>\n    * Defaults to true.\n    */\n   public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n@@ -238,7 +241,7 @@ public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n \n   /**\n    * Gets whether or not Lottie should clip to the original animation composition bounds.\n-   *\n+   * <p>\n    * Defaults to true.\n    */\n   public boolean getClipToCompositionBounds() {\n@@ -1034,6 +1037,25 @@ public void setFontAssetDelegate(FontAssetDelegate assetDelegate) {\n     }\n   }\n \n+  /**\n+   * Set a map from font name keys to Typefaces.\n+   * The keys can be in the form:\n+   * * fontFamily\n+   * * fontFamily-fontStyle\n+   * * fontName\n+   * All 3 are defined as fName, fFamily, and fStyle in the Lottie file.\n+   * <p>\n+   * If you change a value in fontMap, create a new map or call\n+   * {@link #invalidateSelf()}. Setting the same map again will noop.\n+   */\n+  public void setFontMap(@Nullable Map<String, Typeface> fontMap) {\n+    if (fontMap == this.fontMap) {\n+      return;\n+    }\n+    this.fontMap = fontMap;\n+    invalidateSelf();\n+  }\n+\n   public void setTextDelegate(@SuppressWarnings(\"NullableProblems\") TextDelegate textDelegate) {\n     this.textDelegate = textDelegate;\n   }\n@@ -1044,7 +1066,7 @@ public TextDelegate getTextDelegate() {\n   }\n \n   public boolean useTextGlyphs() {\n-    return textDelegate == null && composition.getCharacters().size() > 0;\n+    return fontMap == null && textDelegate == null && composition.getCharacters().size() > 0;\n   }\n \n   public LottieComposition getComposition() {\n@@ -1253,6 +1275,22 @@ private ImageAssetManager getImageAssetManager() {\n   @Nullable\n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public Typeface getTypeface(Font font) {\n+    Map<String, Typeface> fontMap = this.fontMap;\n+    if (fontMap != null) {\n+      String key = font.getFamily();\n+      if (fontMap.containsKey(key)) {\n+        return fontMap.get(key);\n+      }\n+      key = font.getName();\n+      if (fontMap.containsKey(key)) {\n+        return fontMap.get(key);\n+      }\n+      key = font.getFamily() + \"-\" + font.getStyle();\n+      if (fontMap.containsKey(key)) {\n+        return fontMap.get(key);\n+      }\n+    }\n+\n     FontAssetManager assetManager = getFontAssetManager();\n     if (assetManager != null) {\n       return assetManager.getTypeface(font);\n@@ -1282,7 +1320,7 @@ private FontAssetManager getFontAssetManager() {\n    * where FONT_NAME is the fFamily specified in your Lottie file.\n    * If your fonts have a different extension, you can override the\n    * default here.\n-   *\n+   * <p>\n    * Alternatively, you can use {@link #setFontAssetDelegate(FontAssetDelegate)}\n    * for more control.\n    *\n@@ -1387,7 +1425,7 @@ private void drawDirectlyToCanvas(Canvas canvas) {\n \n   /**\n    * Software accelerated render path.\n-   *\n+   * <p>\n    * This draws the animation to an internally managed bitmap and then draws the bitmap to the original canvas.\n    *\n    * @see LottieAnimationView#setRenderMode(RenderMode)",
    "output": "Allow setting a map of typefaces instead of a callback (#2180)\n\nFixes https://github.com/airbnb/lottie-android/issues/2119"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -241,9 +241,18 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n       matrix.preConcat(parentLayers.get(i).transform.getMatrix());\n     }\n     L.endSection(\"Layer#parentMatrix\");\n-    int opacity = transform.getOpacity() == null ? 100 : transform.getOpacity().getValue();\n-    int alpha = (int)\n-        ((parentAlpha / 255f * (float) opacity / 100f) * 255);\n+    // It is unclear why but getting the opacity here would sometimes NPE.\n+    // The extra code here is designed to avoid this.\n+    // https://github.com/airbnb/lottie-android/issues/2083\n+    int opacity = 100;\n+    BaseKeyframeAnimation<?, Integer> opacityAnimation = transform.getOpacity();\n+    if (opacityAnimation != null) {\n+      Integer opacityValue = opacityAnimation.getValue();\n+      if (opacityValue != null) {\n+        opacity = opacityValue;\n+      }\n+    }\n+    int alpha = (int) ((parentAlpha / 255f * (float) opacity / 100f) * 255);\n     if (!hasMatteOnThisLayer() && !hasMasksOnThisLayer()) {\n       matrix.preConcat(transform.getMatrix());\n       L.beginSection(\"Layer#drawLayer\");",
    "output": "Add NPE protections around transform opacity (#2179)\n\nIt isn't clear why the underlying issue is happening but if it's isolated and device specific, it's easier to add this harmless checking code rather than get to the bottom of this one.\r\n\r\nFixes #2083"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -184,7 +184,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n     }\n \n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n-    setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n+\n+    boolean hasProgress = ta.hasValue(R.styleable.LottieAnimationView_lottie_progress);\n+    setProgressInternal(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0f), hasProgress);\n+\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n         R.styleable.LottieAnimationView_lottie_enableMergePathsForKitKatAndAbove, false));\n     if (ta.hasValue(R.styleable.LottieAnimationView_lottie_colorFilter)) {\n@@ -294,7 +297,7 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setAnimation(animationResId);\n     }\n     if (!userActionsTaken.contains(UserActionTaken.SET_PROGRESS)) {\n-      setProgress(ss.progress);\n+      setProgressInternal(ss.progress, false);\n     }\n     if (!userActionsTaken.contains(UserActionTaken.PLAY_OPTION) && ss.isAnimating) {\n       playAnimation();\n@@ -996,7 +999,15 @@ public int getFrame() {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-    userActionsTaken.add(UserActionTaken.SET_PROGRESS);\n+    setProgressInternal(progress, true);\n+  }\n+\n+  private void setProgressInternal(\n+      @FloatRange(from = 0f, to = 1f) float progress,\n+      boolean fromUser) {\n+    if (fromUser) {\n+      userActionsTaken.add(UserActionTaken.SET_PROGRESS);\n+    }\n     lottieDrawable.setProgress(progress);\n   }\n ",
    "output": "Fix LottieAnimationView.setProgress called from the view init method prevents the progress from being restored from the saved state (#2072)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -3,6 +3,7 @@\n import android.content.Context;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n import androidx.annotation.RestrictTo;\n import androidx.core.os.TraceCompat;\n \n@@ -22,6 +23,7 @@ public class L {\n \n   private static final int MAX_DEPTH = 20;\n   private static boolean traceEnabled = false;\n+  private static boolean networkCacheEnabled = true;\n   private static String[] sections;\n   private static long[] startTimeNs;\n   private static int traceDepth = 0;\n@@ -47,6 +49,10 @@ public static void setTraceEnabled(boolean enabled) {\n     }\n   }\n \n+  public static void setNetworkCacheEnabled(boolean enabled) {\n+    networkCacheEnabled = enabled;\n+  }\n+\n   public static void beginSection(String section) {\n     if (!traceEnabled) {\n       return;\n@@ -103,8 +109,11 @@ public static NetworkFetcher networkFetcher(@NonNull Context context) {\n     return local;\n   }\n \n-  @NonNull\n+  @Nullable\n   public static NetworkCache networkCache(@NonNull final Context context) {\n+    if (!networkCacheEnabled) {\n+      return null;\n+    }\n     final Context appContext = context.getApplicationContext();\n     NetworkCache local = networkCache;\n     if (local == null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Lottie.java b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Lottie.java\n@@ -19,5 +19,6 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {\n     L.setFetcher(lottieConfig.networkFetcher);\n     L.setCacheProvider(lottieConfig.cacheProvider);\n     L.setTraceEnabled(lottieConfig.enableSystraceMarkers);\n+    L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -18,6 +18,7 @@\n \n import com.airbnb.lottie.model.Font;\n import com.airbnb.lottie.model.LottieCompositionCache;\n+import com.airbnb.lottie.network.NetworkCache;\n import com.airbnb.lottie.parser.LottieCompositionMoshiParser;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n import com.airbnb.lottie.utils.Logger;\n@@ -27,7 +28,6 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -86,7 +86,10 @@ public static void setMaxCacheSize(int size) {\n   public static void clearCache(Context context) {\n     taskCache.clear();\n     LottieCompositionCache.getInstance().clear();\n-    L.networkCache(context).clear();\n+    final NetworkCache networkCache = L.networkCache(context);\n+    if (networkCache != null) {\n+      networkCache.clear();\n+    }\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieConfig.java\n@@ -18,12 +18,14 @@ public class LottieConfig {\n   @Nullable final LottieNetworkFetcher networkFetcher;\n   @Nullable final LottieNetworkCacheProvider cacheProvider;\n   final boolean enableSystraceMarkers;\n+  final boolean enableNetworkCache;\n \n   private LottieConfig(@Nullable LottieNetworkFetcher networkFetcher, @Nullable LottieNetworkCacheProvider cacheProvider,\n-      boolean enableSystraceMarkers) {\n+      boolean enableSystraceMarkers, boolean enableNetworkCache) {\n     this.networkFetcher = networkFetcher;\n     this.cacheProvider = cacheProvider;\n     this.enableSystraceMarkers = enableSystraceMarkers;\n+    this.enableNetworkCache = enableNetworkCache;\n   }\n \n   public static final class Builder {\n@@ -33,6 +35,7 @@ public static final class Builder {\n     @Nullable\n     private LottieNetworkCacheProvider cacheProvider;\n     private boolean enableSystraceMarkers = false;\n+    private boolean enableNetworkCache = true;\n \n     /**\n      * Lottie has a default network fetching stack built on {@link java.net.HttpURLConnection}. However, if you would like to hook into your own\n@@ -98,9 +101,19 @@ public Builder setEnableSystraceMarkers(boolean enable) {\n       return this;\n     }\n \n+    /**\n+     * Disable this if you want to completely disable internal Lottie cache for retrieving network animations.\n+     * Internal network cache is enabled by default.\n+     */\n+    @NonNull\n+    public Builder setEnableNetworkCache(boolean enable) {\n+      enableNetworkCache = enable;\n+      return this;\n+    }\n+\n     @NonNull\n     public LottieConfig build() {\n-      return new LottieConfig(networkFetcher, cacheProvider, enableSystraceMarkers);\n+      return new LottieConfig(networkFetcher, cacheProvider, enableSystraceMarkers, enableNetworkCache);\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -22,12 +22,12 @@\n @RestrictTo(RestrictTo.Scope.LIBRARY)\n public class NetworkFetcher {\n \n-  @NonNull\n+  @Nullable\n   private final NetworkCache networkCache;\n   @NonNull\n   private final LottieNetworkFetcher fetcher;\n \n-  public NetworkFetcher(@NonNull NetworkCache networkCache, @NonNull LottieNetworkFetcher fetcher) {\n+  public NetworkFetcher(@Nullable NetworkCache networkCache, @NonNull LottieNetworkFetcher fetcher) {\n     this.networkCache = networkCache;\n     this.fetcher = fetcher;\n   }\n@@ -48,7 +48,7 @@ public LottieResult<LottieComposition> fetchSync(Context context, @NonNull Strin\n   @Nullable\n   @WorkerThread\n   private LottieComposition fetchFromCache(Context context, @NonNull String url, @Nullable String cacheKey) {\n-    if (cacheKey == null) {\n+    if (cacheKey == null || networkCache == null) {\n       return null;\n     }\n     Pair<FileExtension, InputStream> cacheResult = networkCache.fetch(url);\n@@ -123,7 +123,7 @@ private LottieResult<LottieComposition> fromInputStream(Context context, @NonNul\n       result = fromJsonStream(url, inputStream, cacheKey);\n     }\n \n-    if (cacheKey != null && result.getValue() != null) {\n+    if (cacheKey != null && result.getValue() != null && networkCache != null) {\n       networkCache.renameTempFile(url, extension);\n     }\n \n@@ -133,7 +133,7 @@ private LottieResult<LottieComposition> fromInputStream(Context context, @NonNul\n   @NonNull\n   private LottieResult<LottieComposition> fromZipStream(Context context, @NonNull String url, @NonNull InputStream inputStream, @Nullable String cacheKey)\n       throws IOException {\n-    if (cacheKey == null) {\n+    if (cacheKey == null || networkCache == null) {\n       return LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), null);\n     }\n     File file = networkCache.writeTempCacheFile(url, inputStream, FileExtension.ZIP);\n@@ -143,7 +143,7 @@ private LottieResult<LottieComposition> fromZipStream(Context context, @NonNull\n   @NonNull\n   private LottieResult<LottieComposition> fromJsonStream(@NonNull String url, @NonNull InputStream inputStream, @Nullable String cacheKey)\n       throws IOException {\n-    if (cacheKey == null) {\n+    if (cacheKey == null || networkCache == null) {\n       return LottieCompositionFactory.fromJsonInputStreamSync(inputStream, null);\n     }\n     File file = networkCache.writeTempCacheFile(url, inputStream, FileExtension.JSON);",
    "output": "Add the LottieConfig.Builder.setEnableNetworkCache() method to completely disable internal network cache if needed (#2158)\n\n**Rationale**\r\nWe'd like to implement more sophisticated caching strategy for animations fetched from network. This could be implemented on the network fetcher level e.g. using the OkHttp's cache or the \"stale-while-revalidate\" strategy.\r\nFor this to work the internal Lottie network cache has to be completely disabled.\r\nThe option to do so is implemented in this PR.\r\n\r\n**Implementation**\r\nBy default the internal cache is enabled to maintain backward compatibility. \r\nWe've added the `LottieConfig.Builder.setEnableNetworkCache()` method to override the default behavior."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -179,6 +179,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setClipToCompositionBounds(ta.getBoolean(R.styleable.LottieAnimationView_lottie_clipToCompositionBounds, true));\n     }\n \n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_defaultFontFileExtension)) {\n+      setDefaultFontFileExtension(ta.getString(R.styleable.LottieAnimationView_lottie_defaultFontFileExtension));\n+    }\n+\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n     setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n@@ -897,6 +901,21 @@ public void setImageAssetDelegate(ImageAssetDelegate assetDelegate) {\n     lottieDrawable.setImageAssetDelegate(assetDelegate);\n   }\n \n+  /**\n+   * By default, Lottie will look in src/assets/fonts/FONT_NAME.ttf\n+   * where FONT_NAME is the fFamily specified in your Lottie file.\n+   * If your fonts have a different extension, you can override the\n+   * default here.\n+   *\n+   * Alternatively, you can use {@link #setFontAssetDelegate(FontAssetDelegate)}\n+   * for more control.\n+   *\n+   * @see #setFontAssetDelegate(FontAssetDelegate)\n+   */\n+  public void setDefaultFontFileExtension(String extension) {\n+    lottieDrawable.setDefaultFontFileExtension(extension);\n+  }\n+\n   /**\n    * Use this to manually set fonts.\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -106,6 +106,12 @@ public void onAnimationUpdate(ValueAnimator animation) {\n   private ImageAssetDelegate imageAssetDelegate;\n   @Nullable\n   private FontAssetManager fontAssetManager;\n+  /**\n+   * Will be set if manually overridden by {@link #setDefaultFontFileExtension(String)}.\n+   * This must be stored as a field in case it is set before the font asset delegate\n+   * has been created.\n+   */\n+  @Nullable String defaultFontFileExtension;\n   @Nullable\n   FontAssetDelegate fontAssetDelegate;\n   @Nullable\n@@ -1262,11 +1268,34 @@ private FontAssetManager getFontAssetManager() {\n \n     if (fontAssetManager == null) {\n       fontAssetManager = new FontAssetManager(getCallback(), fontAssetDelegate);\n+      String defaultExtension = this.defaultFontFileExtension;\n+      if (defaultExtension != null) {\n+        fontAssetManager.setDefaultFontFileExtension(defaultFontFileExtension);\n+      }\n     }\n \n     return fontAssetManager;\n   }\n \n+  /**\n+   * By default, Lottie will look in src/assets/fonts/FONT_NAME.ttf\n+   * where FONT_NAME is the fFamily specified in your Lottie file.\n+   * If your fonts have a different extension, you can override the\n+   * default here.\n+   *\n+   * Alternatively, you can use {@link #setFontAssetDelegate(FontAssetDelegate)}\n+   * for more control.\n+   *\n+   * @see #setFontAssetDelegate(FontAssetDelegate)\n+   */\n+  public void setDefaultFontFileExtension(String extension) {\n+    defaultFontFileExtension = extension;\n+    FontAssetManager fam = getFontAssetManager();\n+    if (fam != null) {\n+      fam.setDefaultFontFileExtension(extension);\n+    }\n+  }\n+\n   @Nullable\n   private Context getContext() {\n     Callback callback = getCallback();",
    "output": "Allow setting a default font file extension (#2166)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -33,10 +33,15 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n@@ -58,6 +63,7 @@ public class LottieCompositionFactory {\n    * parse tasks prior to the cache getting populated.\n    */\n   private static final Map<String, LottieTask<LottieComposition>> taskCache = new HashMap<>();\n+  private static final Set<LottieTaskIdleListener> taskIdleListeners = new HashSet<>();\n \n   /**\n    * reference magic bytes for zip compressed files.\n@@ -83,6 +89,21 @@ public static void clearCache(Context context) {\n     L.networkCache(context).clear();\n   }\n \n+  /**\n+   * Use this to register a callback for when the composition factory is idle or not.\n+   * This can be used to provide data to an espresso idling resource.\n+   * Refer to FragmentVisibilityTests and its LottieIdlingResource in the Lottie repo for\n+   * an example.\n+   */\n+  public static void registerLottieTaskIdleListener(LottieTaskIdleListener listener) {\n+    taskIdleListeners.add(listener);\n+    listener.onIdleChanged(taskCache.size() == 0);\n+  }\n+\n+  public static void unregisterLottieTaskIdleListener(LottieTaskIdleListener listener) {\n+    taskIdleListeners.remove(listener);\n+  }\n+\n   /**\n    * Fetch an animation from an http url. Once it is downloaded once, Lottie will cache the file to disk for\n    * future use. Because of this, you may call `fromUrl` ahead of time to warm the cache if you think you\n@@ -596,19 +617,35 @@ private static LottieTask<LottieComposition> cache(\n       task.addListener(result -> {\n         taskCache.remove(cacheKey);\n         resultAlreadyCalled.set(true);\n+        if (taskCache.size() == 0) {\n+          notifyTaskCacheIdleListeners(true);\n+        }\n       });\n       task.addFailureListener(result -> {\n         taskCache.remove(cacheKey);\n         resultAlreadyCalled.set(true);\n+        if (taskCache.size() == 0) {\n+          notifyTaskCacheIdleListeners(true);\n+        }\n       });\n       // It is technically possible for the task to finish and for the listeners to get called\n       // before this code runs. If this happens, the task will be put in taskCache but never removed.\n       // This would require this thread to be sleeping at exactly this point in the code\n       // for long enough for the task to finish and call the listeners. Unlikely but not impossible.\n       if (!resultAlreadyCalled.get()) {\n         taskCache.put(cacheKey, task);\n+        if (taskCache.size() == 1) {\n+          notifyTaskCacheIdleListeners(false);\n+        }\n       }\n     }\n     return task;\n   }\n+\n+  private static void notifyTaskCacheIdleListeners(boolean idle) {\n+    List<LottieTaskIdleListener> listeners = new ArrayList<>(taskIdleListeners);\n+    for (int i = 0; i < listeners.size(); i++) {\n+      listeners.get(i).onIdleChanged(idle);\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTaskIdleListener.java b/lottie/src/main/java/com/airbnb/lottie/LottieTaskIdleListener.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTaskIdleListener.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTaskIdleListener.java\n@@ -0,0 +1,11 @@\n+package com.airbnb.lottie;\n+\n+/**\n+ * Register this listener via {@link LottieCompositionFactory#registerLottieTaskIdleListener(LottieTaskIdleListener)}.\n+ *\n+ * Can be used to create an espresso idle resource. Refer to {@link LottieCompositionFactory#registerLottieTaskIdleListener(LottieTaskIdleListener)}\n+ * for more information.\n+ */\n+public interface LottieTaskIdleListener {\n+  void onIdleChanged(boolean idle);\n+}",
    "output": "Enable configuring a global idling resource (#2161)\n\nFixes #1972"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java\n@@ -115,6 +115,10 @@ public ContentGroup(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeG\n     }\n   }\n \n+  public List<Content> getContents() {\n+    return contents;\n+  }\n+\n   List<PathContent> getPathList() {\n     if (pathContents == null) {\n       pathContents = new ArrayList<>();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java\n@@ -131,6 +131,12 @@ public RepeaterContent(LottieDrawable lottieDrawable, BaseLayer layer, Repeater\n   @Override public void resolveKeyPath(\n       KeyPath keyPath, int depth, List<KeyPath> accumulator, KeyPath currentPartialKeyPath) {\n     MiscUtils.resolveKeyPath(keyPath, depth, accumulator, currentPartialKeyPath, this);\n+    for (int i = 0; i < contentGroup.getContents().size(); i++) {\n+      Content content = contentGroup.getContents().get(i);\n+      if (content instanceof KeyPathElementContent) {\n+        MiscUtils.resolveKeyPath(keyPath, depth, accumulator, currentPartialKeyPath, (KeyPathElementContent) content);\n+      }\n+    }\n   }\n \n   @SuppressWarnings(\"unchecked\")",
    "output": "Allow repeater contents to have dynamic properties (#2164)\n\nFixes #2143"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java\n@@ -161,9 +161,9 @@ public BaseKeyframeAnimation<Float, Float> getRoundedCorners() {\n         // oriented point to CubicCurveData (path segments).\n         CubicCurveData previousCurveData = modifiedCurves.get(floorMod(modifiedCurvesIndex - 1, modifiedCurves.size()));\n         CubicCurveData currentCurveData = modifiedCurves.get(modifiedCurvesIndex);\n-        previousCurveData.setControlPoint2(previousCurve.getVertex().x, previousCurve.getVertex().y);\n+        previousCurveData.setControlPoint2(previousCurve.getControlPoint2().x, previousCurve.getControlPoint2().y);\n         previousCurveData.setVertex(previousCurve.getVertex().x, previousCurve.getVertex().y);\n-        currentCurveData.setControlPoint1(startingCurve.getVertex().x, startingCurve.getVertex().y);\n+        currentCurveData.setControlPoint1(startingCurve.getControlPoint1().x, startingCurve.getControlPoint1().y);\n         modifiedCurvesIndex++;\n       }\n     }",
    "output": "Fix rounded corners modifying already rounded corners (#2165)\n\nRounded corners should noop for corners that already have control points\r\n\r\nFixes #2149"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -38,7 +38,7 @@ public ImageAssetManager(Drawable.Callback callback, String imagesFolder,\n       return;\n     }\n \n-    context = ((View) callback).getContext();\n+    context = ((View) callback).getContext().getApplicationContext();\n     this.imageAssets = imageAssets;\n     setDelegate(delegate);\n   }",
    "output": "Only store application context in ImageAssetManager (#2163)\n\nFixes #2108"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java\n@@ -1,7 +1,5 @@\n package com.airbnb.lottie.animation.keyframe;\n \n-import androidx.annotation.Nullable;\n-\n import com.airbnb.lottie.model.DocumentData;\n import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.LottieFrameInfo;\n@@ -39,7 +37,7 @@ public DocumentData getValue(LottieFrameInfo<DocumentData> frameInfo) {\n         DocumentData baseDocumentData = frameInfo.getInterpolatedKeyframeProgress() == 1f ? frameInfo.getEndValue() : frameInfo.getStartValue();\n         documentData.set(text, baseDocumentData.fontName, baseDocumentData.size, baseDocumentData.justification, baseDocumentData.tracking,\n             baseDocumentData.lineHeight, baseDocumentData.baselineShift, baseDocumentData.color, baseDocumentData.strokeColor,\n-            baseDocumentData.strokeWidth, baseDocumentData.strokeOverFill);\n+            baseDocumentData.strokeWidth, baseDocumentData.strokeOverFill, baseDocumentData.boxPosition);\n         return documentData;\n       }\n     });\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -2,7 +2,10 @@\n \n import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n \n+import android.graphics.PointF;\n+\n import androidx.annotation.ColorInt;\n+import androidx.annotation.Nullable;\n import androidx.annotation.RestrictTo;\n \n @RestrictTo(LIBRARY)\n@@ -25,20 +28,21 @@ public enum Justification {\n   @ColorInt public int strokeColor;\n   public float strokeWidth;\n   public boolean strokeOverFill;\n+  @Nullable public PointF boxPosition;\n \n \n   public DocumentData(String text, String fontName, float size, Justification justification, int tracking,\n       float lineHeight, float baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n-      float strokeWidth, boolean strokeOverFill) {\n-    set(text, fontName, size, justification, tracking, lineHeight, baselineShift, color, strokeColor, strokeWidth, strokeOverFill);\n+      float strokeWidth, boolean strokeOverFill, PointF boxPosition) {\n+    set(text, fontName, size, justification, tracking, lineHeight, baselineShift, color, strokeColor, strokeWidth, strokeOverFill, boxPosition);\n   }\n \n   public DocumentData() {\n   }\n \n   public void set(String text, String fontName, float size, Justification justification, int tracking,\n       float lineHeight, float baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n-      float strokeWidth, boolean strokeOverFill) {\n+      float strokeWidth, boolean strokeOverFill, PointF positionOffset) {\n     this.text = text;\n     this.fontName = fontName;\n     this.size = size;\n@@ -50,6 +54,7 @@ public void set(String text, String fontName, float size, Justification justific\n     this.strokeColor = strokeColor;\n     this.strokeWidth = strokeWidth;\n     this.strokeOverFill = strokeOverFill;\n+    this.boxPosition = positionOffset;\n   }\n \n   @Override public int hashCode() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -20,7 +20,6 @@\n import com.airbnb.lottie.animation.keyframe.TextKeyframeAnimation;\n import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;\n import com.airbnb.lottie.model.DocumentData;\n-import com.airbnb.lottie.model.DocumentData.Justification;\n import com.airbnb.lottie.model.Font;\n import com.airbnb.lottie.model.FontCharacter;\n import com.airbnb.lottie.model.animatable.AnimatableTextProperties;\n@@ -193,12 +192,15 @@ private void drawTextGlyphs(\n       canvas.save();\n \n       // Apply horizontal justification\n-      applyJustification(documentData.justification, canvas, textLineWidth);\n+      applyJustification(documentData, canvas, textLineWidth);\n \n       // Center text vertically\n       float multilineTranslateY = (textLineCount - 1) * lineHeight / 2;\n       float translateY = l * lineHeight - multilineTranslateY;\n       canvas.translate(0, translateY);\n+      if (documentData.boxPosition != null) {\n+        canvas.translate(documentData.boxPosition.x, documentData.boxPosition.y);\n+      }\n \n       // Draw each line\n       drawGlyphTextLine(textLine, documentData, parentMatrix, font, canvas, parentScale, fontScale);\n@@ -277,7 +279,7 @@ private void drawTextWithFont(DocumentData documentData, Font font, Canvas canva\n       canvas.save();\n \n       // Apply horizontal justification\n-      applyJustification(documentData.justification, canvas, textLineWidth);\n+      applyJustification(documentData, canvas, textLineWidth);\n \n       // Center text vertically\n       float multilineTranslateY = (textLineCount - 1) * lineHeight / 2;\n@@ -341,16 +343,22 @@ private float getTextLineWidthForGlyphs(\n     return textLineWidth;\n   }\n \n-  private void applyJustification(Justification justification, Canvas canvas, float textLineWidth) {\n-    switch (justification) {\n+  private void applyJustification(DocumentData documentData, Canvas canvas, float textLineWidth) {\n+    float lineStart = 0f;\n+    float lineTop = 0f;\n+    if (documentData.boxPosition != null) {\n+      lineStart = documentData.boxPosition.x;\n+      lineTop = documentData.boxPosition.y;\n+    }\n+    switch (documentData.justification) {\n       case LEFT_ALIGN:\n-        // Do nothing. Default is left aligned.\n+        canvas.translate(-lineStart, -lineTop);\n         break;\n       case RIGHT_ALIGN:\n-        canvas.translate(-textLineWidth, 0);\n+        canvas.translate(-lineStart - textLineWidth, -lineTop);\n         break;\n       case CENTER:\n-        canvas.translate(-textLineWidth / 2, 0);\n+        canvas.translate(-lineStart - textLineWidth / 2, -lineTop);\n         break;\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java\n@@ -55,7 +55,7 @@ static AnimatableShapeValue parseShapeData(\n \n   static AnimatableTextFrame parseDocumentData(\n       JsonReader reader, LottieComposition composition) throws IOException {\n-    return new AnimatableTextFrame(parse(reader, composition, DocumentDataParser.INSTANCE));\n+    return new AnimatableTextFrame(parse(reader, Utils.dpScale(), composition, DocumentDataParser.INSTANCE));\n   }\n \n   static AnimatableColorValue parseColor(\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n@@ -1,6 +1,8 @@\n package com.airbnb.lottie.parser;\n \n \n+import android.graphics.PointF;\n+\n import com.airbnb.lottie.model.DocumentData;\n import com.airbnb.lottie.model.DocumentData.Justification;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n@@ -20,7 +22,8 @@ public class DocumentDataParser implements ValueParser<DocumentData> {\n       \"fc\", // 7\n       \"sc\", // 8\n       \"sw\", // 9\n-      \"of\"  // 10\n+      \"of\", // 10\n+      \"ps\" // 11\n   );\n \n   private DocumentDataParser() {\n@@ -39,6 +42,7 @@ public DocumentData parse(JsonReader reader, float scale) throws IOException {\n     int strokeColor = 0;\n     float strokeWidth = 0f;\n     boolean strokeOverFill = true;\n+    PointF boxPosition = null;\n \n     reader.beginObject();\n     while (reader.hasNext()) {\n@@ -81,6 +85,11 @@ public DocumentData parse(JsonReader reader, float scale) throws IOException {\n         case 10:\n           strokeOverFill = reader.nextBoolean();\n           break;\n+        case 11:\n+          reader.beginArray();\n+          boxPosition = new PointF((float) reader.nextDouble() * scale, (float) reader.nextDouble() * scale);\n+          reader.endArray();\n+          break;\n         default:\n           reader.skipName();\n           reader.skipValue();\n@@ -89,6 +98,6 @@ public DocumentData parse(JsonReader reader, float scale) throws IOException {\n     reader.endObject();\n \n     return new DocumentData(text, fontName, size, justification, tracking, lineHeight,\n-        baselineShift, fillColor, strokeColor, strokeWidth, strokeOverFill);\n+        baselineShift, fillColor, strokeColor, strokeWidth, strokeOverFill, boxPosition);\n   }\n }",
    "output": "Support box position in Document Data (#2139)\n\nFixes #2131"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValue.java b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValue.java\n@@ -5,13 +5,49 @@\n import com.airbnb.lottie.model.content.GradientColor;\n import com.airbnb.lottie.value.Keyframe;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n public class AnimatableGradientColorValue extends BaseAnimatableValue<GradientColor,\n     GradientColor> {\n-  public AnimatableGradientColorValue(\n-      List<Keyframe<GradientColor>> keyframes) {\n-    super(keyframes);\n+  public AnimatableGradientColorValue(List<Keyframe<GradientColor>> keyframes) {\n+    super(ensureInterpolatableKeyframes(keyframes));\n+  }\n+\n+  private static List<Keyframe<GradientColor>> ensureInterpolatableKeyframes(List<Keyframe<GradientColor>> keyframes) {\n+    for (int i = 0; i < keyframes.size(); i++) {\n+      keyframes.set(i, ensureInterpolatableKeyframe(keyframes.get(i)));\n+    }\n+    return keyframes;\n+  }\n+\n+  private static Keyframe<GradientColor> ensureInterpolatableKeyframe(Keyframe<GradientColor> keyframe) {\n+    GradientColor startValue = keyframe.startValue;\n+    GradientColor endValue = keyframe.endValue;\n+    if (startValue == null || endValue == null || startValue.getPositions().length == endValue.getPositions().length) {\n+      return keyframe;\n+    }\n+    float[] mergedPositions = mergePositions(startValue.getPositions(), endValue.getPositions());\n+    // The start/end has opacity stops which required adding extra positions in between the existing colors.\n+    return keyframe.copyWith(startValue.copyWithPositions(mergedPositions), endValue.copyWithPositions(mergedPositions));\n+  }\n+\n+  static float[] mergePositions(float[] startPositions, float[] endPositions) {\n+    float[] mergedArray = new float[startPositions.length + endPositions.length];\n+    System.arraycopy(startPositions, 0, mergedArray, 0, startPositions.length);\n+    System.arraycopy(endPositions, 0, mergedArray, startPositions.length, endPositions.length);\n+    Arrays.sort(mergedArray);\n+    int uniqueValues = 0;\n+    float lastValue = Float.NaN;\n+    for (int i = 0; i < mergedArray.length; i++) {\n+      if (mergedArray[i] != lastValue) {\n+        mergedArray[uniqueValues] = mergedArray[i];\n+        uniqueValues++;\n+        lastValue = mergedArray[i];\n+      }\n+    }\n+    return Arrays.copyOfRange(mergedArray, 0, uniqueValues);\n   }\n \n   @Override public BaseKeyframeAnimation<GradientColor, GradientColor> createAnimation() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientColor.java\n@@ -3,6 +3,8 @@\n import com.airbnb.lottie.utils.GammaEvaluator;\n import com.airbnb.lottie.utils.MiscUtils;\n \n+import java.util.Arrays;\n+\n \n public class GradientColor {\n   private final float[] positions;\n@@ -36,4 +38,33 @@ public void lerp(GradientColor gc1, GradientColor gc2, float progress) {\n       colors[i] = GammaEvaluator.evaluate(progress, gc1.colors[i], gc2.colors[i]);\n     }\n   }\n+\n+  public GradientColor copyWithPositions(float[] positions) {\n+    int[] colors = new int[positions.length];\n+    for (int i = 0; i < positions.length; i++) {\n+      colors[i] = getColorForPosition(positions[i]);\n+    }\n+    return new GradientColor(positions, colors);\n+  }\n+\n+  private int getColorForPosition(float position) {\n+    int existingIndex = Arrays.binarySearch(positions, position);\n+    if (existingIndex >= 0) {\n+      return colors[existingIndex];\n+    }\n+    // binarySearch returns -insertionPoint - 1 if it is not found.\n+    int insertionPoint = -(existingIndex + 1);\n+    if (insertionPoint == 0) {\n+      return colors[0];\n+    } else if (insertionPoint == colors.length - 1) {\n+      return colors[colors.length - 1];\n+    }\n+    float startPosition = positions[insertionPoint - 1];\n+    float endPosition = positions[insertionPoint];\n+    int startColor = colors[insertionPoint - 1];\n+    int endColor = colors[insertionPoint];\n+\n+    float fraction = (position - startPosition) / (endPosition - startPosition);\n+    return GammaEvaluator.evaluate(fraction, startColor, endColor);\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java\n@@ -65,8 +65,9 @@ static AnimatableColorValue parseColor(\n \n   static AnimatableGradientColorValue parseGradientColor(\n       JsonReader reader, LottieComposition composition, int points) throws IOException {\n-    return new AnimatableGradientColorValue(\n+    AnimatableGradientColorValue animatableGradientColorValue = new AnimatableGradientColorValue(\n         parse(reader, composition, new GradientColorParser(points)));\n+    return animatableGradientColorValue;\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -4,6 +4,7 @@\n \n import com.airbnb.lottie.model.content.GradientColor;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n+import com.airbnb.lottie.utils.GammaEvaluator;\n import com.airbnb.lottie.utils.MiscUtils;\n \n import java.io.IOException;\n@@ -167,7 +168,7 @@ private GradientColor addOpacityStopsToGradientIfNeeded(GradientColor gradientCo\n     return new GradientColor(newPositions, newColors);\n   }\n \n-  private int getColorInBetweenColorStops(float position, float opacity, float[] colorStopPositions, int[] colorStopColors) {\n+  int getColorInBetweenColorStops(float position, float opacity, float[] colorStopPositions, int[] colorStopColors) {\n     if (colorStopColors.length < 2 || position == colorStopPositions[0]) {\n       return colorStopColors[0];\n     }\n@@ -183,9 +184,9 @@ private int getColorInBetweenColorStops(float position, float opacity, float[] c\n       int upperColor = colorStopColors[i];\n       int lowerColor = colorStopColors[i - 1];\n       int a = (int) (opacity * 255);\n-      int r = MiscUtils.lerp(Color.red(lowerColor), Color.red(upperColor), percentage);\n-      int g = MiscUtils.lerp(Color.green(lowerColor), Color.green(upperColor), percentage);\n-      int b = MiscUtils.lerp(Color.blue(lowerColor), Color.blue(upperColor), percentage);\n+      int r = GammaEvaluator.evaluate(percentage, Color.red(lowerColor), Color.red(upperColor));\n+      int g = GammaEvaluator.evaluate(percentage, Color.green(lowerColor), Color.green(upperColor));\n+      int b = GammaEvaluator.evaluate(percentage, Color.blue(lowerColor), Color.blue(upperColor));\n       return Color.argb(a, r, g, b);\n     }\n     throw new IllegalArgumentException(\"Unreachable code.\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n@@ -90,6 +90,21 @@ public Keyframe(@SuppressWarnings(\"NullableProblems\") T value) {\n     endFrame = Float.MAX_VALUE;\n   }\n \n+  private Keyframe(T startValue, T endValue) {\n+    composition = null;\n+    this.startValue = startValue;\n+    this.endValue = endValue;\n+    interpolator = null;\n+    xInterpolator = null;\n+    yInterpolator = null;\n+    startFrame = Float.MIN_VALUE;\n+    endFrame = Float.MAX_VALUE;\n+  }\n+\n+  public Keyframe<T> copyWith(T startValue, T endValue) {\n+    return new Keyframe<T>(startValue, endValue);\n+  }\n+\n   public float getStartProgress() {\n     if (composition == null) {\n       return 0f;\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValueTest.java b/lottie/src/test/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValueTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValueTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValueTest.java\n@@ -0,0 +1,22 @@\n+package com.airbnb.lottie.model.animatable;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+public class AnimatableGradientColorValueTest {\n+  @Test\n+  public void testMergeTheSame() {\n+    assertArrayEquals(new float[]{1, 2}, AnimatableGradientColorValue.mergePositions(new float[]{1, 2}, new float[]{1, 2}), 0f);\n+  }\n+\n+  @Test\n+  public void testMergeDifferent() {\n+    assertArrayEquals(new float[]{1, 2, 3, 4}, AnimatableGradientColorValue.mergePositions(new float[]{1, 2}, new float[]{3, 4}), 0f);\n+  }\n+\n+  @Test\n+  public void testMergeOneOverlap() {\n+    assertArrayEquals(new float[]{1, 2, 3}, AnimatableGradientColorValue.mergePositions(new float[]{1, 2}, new float[]{2, 3}), 0f);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Allow interpolating between gradients with different opacity stops (#2160)\n\nFixes #2104"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -51,8 +51,8 @@ public enum MatteType {\n   private final int solidColor;\n   private final float timeStretch;\n   private final float startFrame;\n-  private final int preCompWidth;\n-  private final int preCompHeight;\n+  private final float preCompWidth;\n+  private final float preCompHeight;\n   @Nullable private final AnimatableTextFrame text;\n   @Nullable private final AnimatableTextProperties textProperties;\n   @Nullable private final AnimatableFloatValue timeRemapping;\n@@ -65,7 +65,7 @@ public enum MatteType {\n   public Layer(List<ContentModel> shapes, LottieComposition composition, String layerName, long layerId,\n       LayerType layerType, long parentId, @Nullable String refId, List<Mask> masks,\n       AnimatableTransform transform, int solidWidth, int solidHeight, int solidColor,\n-      float timeStretch, float startFrame, int preCompWidth, int preCompHeight,\n+      float timeStretch, float startFrame, float preCompWidth, float preCompHeight,\n       @Nullable AnimatableTextFrame text, @Nullable AnimatableTextProperties textProperties,\n       List<Keyframe<Float>> inOutKeyframes, MatteType matteType,\n       @Nullable AnimatableFloatValue timeRemapping, boolean hidden, @Nullable BlurEffect blurEffect,\n@@ -124,11 +124,11 @@ String getName() {\n     return refId;\n   }\n \n-  int getPreCompWidth() {\n+  float getPreCompWidth() {\n     return preCompWidth;\n   }\n \n-  int getPreCompHeight() {\n+  float getPreCompHeight() {\n     return preCompHeight;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -82,8 +82,8 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n     int solidWidth = 0;\n     int solidHeight = 0;\n     int solidColor = 0;\n-    int preCompWidth = 0;\n-    int preCompHeight = 0;\n+    float preCompWidth = 0;\n+    float preCompHeight = 0;\n     long parentId = -1;\n     float timeStretch = 1f;\n     float startFrame = 0f;\n@@ -236,10 +236,10 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n           startFrame = (float) reader.nextDouble();\n           break;\n         case 16:\n-          preCompWidth = (int) (reader.nextInt() * Utils.dpScale());\n+          preCompWidth = (float) (reader.nextDouble() * Utils.dpScale());\n           break;\n         case 17:\n-          preCompHeight = (int) (reader.nextInt() * Utils.dpScale());\n+          preCompHeight = (float) (reader.nextDouble() * Utils.dpScale());\n           break;\n         case 18:\n           inFrame = (float) reader.nextDouble();",
    "output": "Allow decimals for precomp size (#2138)\n\nFixes #2121"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -118,7 +118,11 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     try {\n       bitmap = BitmapFactory.decodeStream(is, null, opts);\n     } catch (IllegalArgumentException e) {\n-      Logger.warning(\"Unable to decode image.\", e);\n+      Logger.warning(\"Unable to decode image `\" + id + \"`.\", e);\n+      return null;\n+    }\n+    if (bitmap == null) {\n+      Logger.warning(\"Decoded image `\" + id + \"` is null.\");\n       return null;\n     }\n     bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());",
    "output": "Fix ImageAssetManager.bitmapForId NPE crash (#2117)\n\nIn Android docs, BitmapFactory.decodeStream may return null so it must be handled correctly.\r\n\r\nCo-authored-by: TechQI <TechQI@126.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/FontAssetDelegate.java b/lottie/src/main/java/com/airbnb/lottie/FontAssetDelegate.java\n--- a/lottie/src/main/java/com/airbnb/lottie/FontAssetDelegate.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/FontAssetDelegate.java\n@@ -17,10 +17,24 @@ public Typeface fetchFont(String fontFamily) {\n     return null;\n   }\n \n+  /**\n+   * Override this if you want to return a Typeface from a font family and style.\n+   */\n+  public Typeface fetchFont(String fontFamily, String fontStyle, String fontName) {\n+    return null;\n+  }\n+\n   /**\n    * Override this if you want to specify the asset path for a given font family.\n    */\n   public String getFontPath(String fontFamily) {\n     return null;\n   }\n+\n+  /**\n+   * Override this if you want to specify the asset path for a given font family and style.\n+   */\n+  public String getFontPath(String fontFamily, String fontStyle, String fontName) {\n+    return null;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/FontAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/FontAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/FontAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/FontAssetManager.java\n@@ -76,12 +76,20 @@ private Typeface getFontFamily(Font font) {\n     }\n \n     Typeface typeface = null;\n+    String fontStyle = font.getStyle();\n+    String fontName = font.getName();\n     if (delegate != null) {\n-      typeface = delegate.fetchFont(fontFamily);\n+      typeface = delegate.fetchFont(fontFamily, fontStyle, fontName);\n+      if (typeface == null) {\n+        typeface = delegate.fetchFont(fontFamily);\n+      }\n     }\n \n     if (delegate != null && typeface == null) {\n-      String path = delegate.getFontPath(fontFamily);\n+      String path = delegate.getFontPath(fontFamily, fontStyle, fontName);\n+      if (path == null) {\n+        path = delegate.getFontPath(fontFamily);\n+      }\n       if (path != null) {\n         typeface = Typeface.createFromAsset(assetManager, path);\n       }",
    "output": "Add fontStyle / fontName argument for FontAssetDelegate (#2103)\n\nNew functions are fully backward compatible."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -142,14 +142,12 @@ private GradientColor addOpacityStopsToGradientIfNeeded(GradientColor gradientCo\n       }\n     }\n \n-    int newColorPoints = colorPoints + opacityStops;\n-    float[] newPositions = new float[newColorPoints];\n+    // Pre-SKIA (Oreo) devices render artifacts when there is two stops in the same position.\n+    // As a result, we have to de-dupe the merge color and opacity stop positions.\n+    float[] newPositions = mergeUniqueElements(gradientColor.getPositions(), opacityStopPositions);\n+    int newColorPoints = newPositions.length;\n     int[] newColors = new int[newColorPoints];\n \n-    System.arraycopy(gradientColor.getPositions(), 0, newPositions, 0, colorPoints);\n-    System.arraycopy(opacityStopPositions, 0, newPositions, colorPoints, opacityStops);\n-    Arrays.sort(newPositions);\n-\n     for (int i = 0; i < newColorPoints; i++) {\n       float position = newPositions[i];\n       int colorStopIndex = Arrays.binarySearch(colorStopPositions, position);\n@@ -223,4 +221,46 @@ private int getColorInBetweenOpacityStops(float position, int color, float[] opa\n     }\n     throw new IllegalArgumentException(\"Unreachable code.\");\n   }\n+\n+  /**\n+   * Takes two sorted float arrays and merges their elements while removing duplicates.\n+   */\n+  protected static float[] mergeUniqueElements(float[] arrayA, float[] arrayB) {\n+    if (arrayA.length == 0) {\n+      return arrayB;\n+    } else if (arrayB.length == 0) {\n+      return arrayA;\n+    }\n+\n+    int aIndex = 0;\n+    int bIndex = 0;\n+    int numDuplicates = 0;\n+    // This will be the merged list but may be longer than what is needed if there are duplicates.\n+    // If there are, the 0 elements at the end need to be truncated.\n+    float[] mergedNotTruncated = new float[arrayA.length + arrayB.length];\n+    for (int i = 0; i < mergedNotTruncated.length; i++) {\n+      final float a = aIndex < arrayA.length ? arrayA[aIndex] : Float.NaN;\n+      final float b = bIndex < arrayB.length ? arrayB[bIndex] : Float.NaN;\n+\n+      if (Float.isNaN(b) || a < b) {\n+        mergedNotTruncated[i] = a;\n+        aIndex++;\n+      } else if (Float.isNaN(a) || b < a) {\n+        mergedNotTruncated[i] = b;\n+        bIndex++;\n+      } else {\n+        mergedNotTruncated[i] = a;\n+        aIndex++;\n+        bIndex++;\n+        numDuplicates++;\n+      }\n+    }\n+\n+    if (numDuplicates == 0) {\n+      return mergedNotTruncated;\n+    }\n+\n+\n+    return Arrays.copyOf(mergedNotTruncated, mergedNotTruncated.length - numDuplicates);\n+  }\n }\n\\ No newline at end of file\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/parser/GradientColorParserTest.java b/lottie/src/test/java/com/airbnb/lottie/parser/GradientColorParserTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/parser/GradientColorParserTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/parser/GradientColorParserTest.java\n@@ -0,0 +1,32 @@\n+package com.airbnb.lottie.parser;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import org.junit.Test;\n+\n+public class GradientColorParserTest {\n+\n+  @Test public void testNoDistinctShort() {\n+    assertMerged(new float[]{1}, new float[]{2}, new float[]{1, 2});\n+  }\n+\n+  @Test public void testNoDistinct() {\n+    assertMerged(new float[]{1, 2, 3}, new float[]{4, 5, 6}, new float[]{1, 2, 3, 4, 5, 6});\n+  }\n+\n+  @Test public void testWithDistinct() {\n+    assertMerged(new float[]{1, 2, 3, 5}, new float[]{4, 5, 6}, new float[]{1, 2, 3, 4, 5, 6});\n+  }\n+\n+  @Test public void testWithDistinctInterleavingValues() {\n+    assertMerged(new float[]{2, 4, 5, 6, 8, 10}, new float[]{1, 3, 4, 5, 7, 9}, new float[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n+  }\n+\n+  @Test public void testIdentical() {\n+    assertMerged(new float[]{2, 3}, new float[]{2, 3}, new float[]{2, 3});\n+  }\n+\n+  private void assertMerged(float[] arrayA, float[] arrayB, float[] merged) {\n+    assertArrayEquals(merged, GradientColorParser.mergeUniqueElements(arrayA, arrayB), 0f);\n+  }\n+}\n\\ No newline at end of file",
    "output": "De-dupe gradient stops (#2081)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -583,6 +583,7 @@ public void playAnimation() {\n     if (animationsEnabled() || getRepeatCount() == 0) {\n       if (isVisible()) {\n         animator.playAnimation();\n+        onVisibleAction = OnVisibleAction.NONE;\n       } else {\n         onVisibleAction = OnVisibleAction.PLAY;\n       }\n@@ -620,6 +621,7 @@ public void resumeAnimation() {\n     if (animationsEnabled() || getRepeatCount() == 0) {\n       if (isVisible()) {\n         animator.resumeAnimation();\n+        onVisibleAction = OnVisibleAction.NONE;\n       } else {\n         onVisibleAction = OnVisibleAction.RESUME;\n       }",
    "output": "Clear onVisibleAction once the action is taken (#2066)\n\nThe root cause of #2053 is that once the fragment was paused and resumed, the onResumeAction was set to RESUME and never cleared. The compass view in the linked project triggered a relayout on every frame which caused the visibility action run over and over again. The animation itself happens to have an empty first frame so it appeared as if the animation disappeared.\r\n\r\nFixes #2053"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -123,6 +123,9 @@ private GradientColor addOpacityStopsToGradientIfNeeded(GradientColor gradientCo\n       return gradientColor;\n     }\n \n+    // When there are opacity stops, we create a merged list of color stops and opacity stops.\n+    // For a given color stop, we linearly interpolate the opacity for the two opacity stops around it.\n+    // For a given opacity stop, we linearly interpolate the color for the two color stops around it.\n     float[] colorStopPositions = gradientColor.getPositions();\n     int[] colorStopColors = gradientColor.getColors();\n \n@@ -154,14 +157,13 @@ private GradientColor addOpacityStopsToGradientIfNeeded(GradientColor gradientCo\n       if (colorStopIndex < 0 || opacityIndex > 0) {\n         // This is a stop derived from an opacity stop.\n         if (opacityIndex < 0) {\n-          throw new IllegalArgumentException(\"Unable to find opacity stop position for \" + position);\n-          // TODO: use this backup instead…\n-          // opacityIndex = -(opacityIndex + 1);\n+          // The formula here is derived from the return value for binarySearch. When an item isn't found, it returns -insertionPoint - 1.\n+          opacityIndex = -(opacityIndex + 1);\n         }\n         newColors[i] = getColorInBetweenColorStops(position, opacityStopOpacities[opacityIndex], colorStopPositions, colorStopColors);\n       } else {\n         // This os a step derived from a color stop.\n-        newColors[i] = getColorWithOpacityStops(colorStopColors[colorStopIndex], position, opacityStopPositions, opacityStopOpacities);\n+        newColors[i] = getColorInBetweenOpacityStops(position, colorStopColors[colorStopIndex], opacityStopPositions, opacityStopOpacities);\n       }\n     }\n     return new GradientColor(newPositions, newColors);\n@@ -191,7 +193,7 @@ private int getColorInBetweenColorStops(float position, float opacity, float[] c\n     throw new IllegalArgumentException(\"Unreachable code.\");\n   }\n \n-  private int getColorWithOpacityStops(int color, float position, float[] opacityStopPositions, float[] opacityStopOpacities) {\n+  private int getColorInBetweenOpacityStops(float position, int color, float[] opacityStopPositions, float[] opacityStopOpacities) {\n     if (opacityStopOpacities.length < 2 || position <= opacityStopPositions[0]) {\n       int a = (int) (opacityStopOpacities[0] * 255);\n       int r = Color.red(color);",
    "output": "Improved docs for gradient parser (#2065)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -2,14 +2,13 @@\n \n import android.graphics.Color;\n \n-import androidx.annotation.IntRange;\n-\n import com.airbnb.lottie.model.content.GradientColor;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n import com.airbnb.lottie.utils.MiscUtils;\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n public class GradientColorParser implements com.airbnb.lottie.parser.ValueParser<GradientColor> {\n@@ -105,7 +104,7 @@ public GradientColor parse(JsonReader reader, float scale)\n     }\n \n     GradientColor gradientColor = new GradientColor(positions, colors);\n-    addOpacityStopsToGradientIfNeeded(gradientColor, array);\n+    gradientColor = addOpacityStopsToGradientIfNeeded(gradientColor, array);\n     return gradientColor;\n   }\n \n@@ -118,47 +117,108 @@ public GradientColor parse(JsonReader reader, float scale)\n    * This should be a good approximation is nearly all cases. However, if there are many more\n    * opacity stops than color stops, information will be lost.\n    */\n-  private void addOpacityStopsToGradientIfNeeded(GradientColor gradientColor, List<Float> array) {\n+  private GradientColor addOpacityStopsToGradientIfNeeded(GradientColor gradientColor, List<Float> array) {\n     int startIndex = colorPoints * 4;\n     if (array.size() <= startIndex) {\n-      return;\n+      return gradientColor;\n     }\n \n+    float[] colorStopPositions = gradientColor.getPositions();\n+    int[] colorStopColors = gradientColor.getColors();\n+\n     int opacityStops = (array.size() - startIndex) / 2;\n-    double[] positions = new double[opacityStops];\n-    double[] opacities = new double[opacityStops];\n+    float[] opacityStopPositions = new float[opacityStops];\n+    float[] opacityStopOpacities = new float[opacityStops];\n \n     for (int i = startIndex, j = 0; i < array.size(); i++) {\n       if (i % 2 == 0) {\n-        positions[j] = array.get(i);\n+        opacityStopPositions[j] = array.get(i);\n       } else {\n-        opacities[j] = array.get(i);\n+        opacityStopOpacities[j] = array.get(i);\n         j++;\n       }\n     }\n \n-    for (int i = 0; i < gradientColor.getSize(); i++) {\n-      int color = gradientColor.getColors()[i];\n-      color = Color.argb(\n-          getOpacityAtPosition(gradientColor.getPositions()[i], positions, opacities),\n-          Color.red(color),\n-          Color.green(color),\n-          Color.blue(color)\n-      );\n-      gradientColor.getColors()[i] = color;\n+    int newColorPoints = colorPoints + opacityStops;\n+    float[] newPositions = new float[newColorPoints];\n+    int[] newColors = new int[newColorPoints];\n+\n+    System.arraycopy(gradientColor.getPositions(), 0, newPositions, 0, colorPoints);\n+    System.arraycopy(opacityStopPositions, 0, newPositions, colorPoints, opacityStops);\n+    Arrays.sort(newPositions);\n+\n+    for (int i = 0; i < newColorPoints; i++) {\n+      float position = newPositions[i];\n+      int colorStopIndex = Arrays.binarySearch(colorStopPositions, position);\n+      int opacityIndex = Arrays.binarySearch(opacityStopPositions, position);\n+      if (colorStopIndex < 0 || opacityIndex > 0) {\n+        // This is a stop derived from an opacity stop.\n+        if (opacityIndex < 0) {\n+          throw new IllegalArgumentException(\"Unable to find opacity stop position for \" + position);\n+          // TODO: use this backup instead…\n+          // opacityIndex = -(opacityIndex + 1);\n+        }\n+        newColors[i] = getColorInBetweenColorStops(position, opacityStopOpacities[opacityIndex], colorStopPositions, colorStopColors);\n+      } else {\n+        // This os a step derived from a color stop.\n+        newColors[i] = getColorWithOpacityStops(colorStopColors[colorStopIndex], position, opacityStopPositions, opacityStopOpacities);\n+      }\n+    }\n+    return new GradientColor(newPositions, newColors);\n+  }\n+\n+  private int getColorInBetweenColorStops(float position, float opacity, float[] colorStopPositions, int[] colorStopColors) {\n+    if (colorStopColors.length < 2 || position == colorStopPositions[0]) {\n+      return colorStopColors[0];\n+    }\n+    for (int i = 1; i < colorStopPositions.length; i++) {\n+      float colorStopPosition = colorStopPositions[i];\n+      if (colorStopPosition < position && i != colorStopPositions.length - 1) {\n+        continue;\n+      }\n+      // We found the position in which position is between i - 1 and i.\n+      float distanceBetweenColors = colorStopPositions[i] - colorStopPositions[i - 1];\n+      float distanceToLowerColor = position - colorStopPositions[i - 1];\n+      float percentage = distanceToLowerColor / distanceBetweenColors;\n+      int upperColor = colorStopColors[i];\n+      int lowerColor = colorStopColors[i - 1];\n+      int a = (int) (opacity * 255);\n+      int r = MiscUtils.lerp(Color.red(lowerColor), Color.red(upperColor), percentage);\n+      int g = MiscUtils.lerp(Color.green(lowerColor), Color.green(upperColor), percentage);\n+      int b = MiscUtils.lerp(Color.blue(lowerColor), Color.blue(upperColor), percentage);\n+      return Color.argb(a, r, g, b);\n     }\n+    throw new IllegalArgumentException(\"Unreachable code.\");\n   }\n \n-  @IntRange(from = 0, to = 255)\n-  private int getOpacityAtPosition(double position, double[] positions, double[] opacities) {\n-    for (int i = 1; i < positions.length; i++) {\n-      double lastPosition = positions[i - 1];\n-      double thisPosition = positions[i];\n-      if (positions[i] >= position) {\n-        double progress = MiscUtils.clamp((position - lastPosition) / (thisPosition - lastPosition), 0, 1);\n-        return (int) (255 * MiscUtils.lerp(opacities[i - 1], opacities[i], progress));\n+  private int getColorWithOpacityStops(int color, float position, float[] opacityStopPositions, float[] opacityStopOpacities) {\n+    if (opacityStopOpacities.length < 2 || position <= opacityStopPositions[0]) {\n+      int a = (int) (opacityStopOpacities[0] * 255);\n+      int r = Color.red(color);\n+      int g = Color.green(color);\n+      int b = Color.blue(color);\n+      return Color.argb(a, r, g, b);\n+    }\n+    for (int i = 1; i < opacityStopPositions.length; i++) {\n+      float opacityStopPosition = opacityStopPositions[i];\n+      if (opacityStopPosition < position && i != opacityStopPositions.length - 1) {\n+        continue;\n+      }\n+      final int a;\n+      if (opacityStopPosition <= position) {\n+        a = (int) (opacityStopOpacities[i] * 255);\n+      } else {\n+        // We found the position in which position in between i - 1 and i.\n+        float distanceBetweenOpacities = opacityStopPositions[i] - opacityStopPositions[i - 1];\n+        float distanceToLowerOpacity = position - opacityStopPositions[i - 1];\n+        float percentage = distanceToLowerOpacity / distanceBetweenOpacities;\n+        a = (int) (MiscUtils.lerp(opacityStopOpacities[i - 1], opacityStopOpacities[i], percentage) * 255);\n       }\n+      int r = Color.red(color);\n+      int g = Color.green(color);\n+      int b = Color.blue(color);\n+      return Color.argb(a, r, g, b);\n     }\n-    return (int) (255 * opacities[opacities.length - 1]);\n+    throw new IllegalArgumentException(\"Unreachable code.\");\n   }\n }\n\\ No newline at end of file",
    "output": "Add support for gradient opacity stops (#2062)\n\nFixes #2054"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -691,7 +691,7 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre\n       lazyCompositionTasks.add(c -> setMaxProgress(maxProgress));\n       return;\n     }\n-    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));\n+    animator.setMaxFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -138,8 +138,8 @@ public void setComposition(LottieComposition composition) {\n \n     if (keepMinAndMaxFrames) {\n       setMinAndMaxFrames(\n-          (int) Math.max(this.minFrame, composition.getStartFrame()),\n-          (int) Math.min(this.maxFrame, composition.getEndFrame())\n+          Math.max(this.minFrame, composition.getStartFrame()),\n+          Math.min(this.maxFrame, composition.getEndFrame())\n       );\n     } else {\n       setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -67,7 +67,7 @@ public void testMaxFrame() {\n     LottieDrawable drawable = new LottieDrawable();\n     drawable.setComposition(composition);\n     drawable.setMaxProgress(0.25f);\n-    assertEquals(121.99f, drawable.getMaxFrame());\n+    assertEquals(121f, drawable.getMaxFrame());\n   }\n \n   @Test",
    "output": "Remove rounding from setMaxFrame (#2064)\n\nFixes #2042\r\nFixes #2044"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -101,7 +101,9 @@ float getLinearCurrentKeyframeProgress() {\n    */\n   protected float getInterpolatedCurrentKeyframeProgress() {\n     Keyframe<K> keyframe = getCurrentKeyframe();\n-    if (keyframe.isStatic()) {\n+    // Keyframe should not be null here but there seems to be a Xiaomi Android 10 specific crash.\n+    // https://github.com/airbnb/lottie-android/issues/2050\n+    if (keyframe == null || keyframe.isStatic()) {\n       return 0f;\n     }\n     //noinspection ConstantConditions",
    "output": "Fix a Xiaomi specific crash (#2061)\n\nFixes #2050"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -549,11 +549,12 @@ public void draw(Canvas canvas, Matrix matrix) {\n   @MainThread\n   @Override\n   public void start() {\n-    // Don't auto play when in edit mode.\n     Callback callback = getCallback();\n-    if (callback instanceof View && !((View) callback).isInEditMode()) {\n-      playAnimation();\n+    if (callback instanceof View && ((View) callback).isInEditMode()) {\n+      // Don't auto play when in edit mode.\n+      return;\n     }\n+    playAnimation();\n   }\n \n   @MainThread",
    "output": "Fix LottieDrawable#start for non-View callbacks (#2056)\n\nPreviously, the start function would be a noop if your callback was something other than a View instance.\r\n\r\nWith this change, if you use a non-View Callback (such as a Drawable), start will still call playAnimation; if the Callback was a View, it must still not be in edit mode to call playAnimation."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java b/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java\n@@ -2,6 +2,7 @@\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.annotation.RestrictTo;\n \n import com.airbnb.lottie.utils.Logger;\n \n@@ -11,6 +12,7 @@\n import java.io.InputStreamReader;\n import java.net.HttpURLConnection;\n \n+@RestrictTo(RestrictTo.Scope.LIBRARY)\n public class DefaultLottieFetchResult implements LottieFetchResult {\n \n   @NonNull\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieNetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieNetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieNetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieNetworkFetcher.java\n@@ -1,11 +1,13 @@\n package com.airbnb.lottie.network;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.RestrictTo;\n \n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.net.URL;\n \n+@RestrictTo(RestrictTo.Scope.LIBRARY)\n public class DefaultLottieNetworkFetcher implements LottieNetworkFetcher {\n \n   @Override\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java b/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java\n@@ -1,10 +1,11 @@\n package com.airbnb.lottie.network;\n \n-import com.airbnb.lottie.utils.Logger;\n+import androidx.annotation.RestrictTo;\n \n /**\n  * Helpers for known Lottie file types.\n  */\n+@RestrictTo(RestrictTo.Scope.LIBRARY)\n public enum FileExtension {\n   JSON(\".json\"),\n   ZIP(\".zip\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n@@ -5,6 +5,7 @@\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.annotation.RestrictTo;\n import androidx.annotation.WorkerThread;\n \n import com.airbnb.lottie.utils.Logger;\n@@ -20,6 +21,7 @@\n /**\n  * Helper class to save and restore animations fetched from an URL to the app disk cache.\n  */\n+@RestrictTo(RestrictTo.Scope.LIBRARY)\n public class NetworkCache {\n \n   @NonNull\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -4,6 +4,7 @@\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.annotation.RestrictTo;\n import androidx.annotation.WorkerThread;\n \n import com.airbnb.lottie.LottieComposition;\n@@ -17,6 +18,7 @@\n import java.io.InputStream;\n import java.util.zip.ZipInputStream;\n \n+@RestrictTo(RestrictTo.Scope.LIBRARY)\n public class NetworkFetcher {\n \n   @NonNull\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/package-info.java b/lottie/src/main/java/com/airbnb/lottie/network/package-info.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/package-info.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/package-info.java\n@@ -1,6 +0,0 @@\n-@RestrictTo(LIBRARY)\n-package com.airbnb.lottie.network;\n-\n-import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n-\n-import androidx.annotation.RestrictTo;\n\\ No newline at end of file",
    "output": "Fix RestrictTo permissions for the networking package (#2049)\n\nFixes https://github.com/airbnb/lottie-android/issues/2046"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1354,6 +1354,9 @@ private void drawDirectlyToCanvas(Canvas canvas) {\n    * @see LottieAnimationView#setRenderMode(RenderMode)\n    */\n   private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compositionLayer) {\n+    if (composition == null || compositionLayer == null) {\n+      return;\n+    }\n     ensureSoftwareRenderingObjectsInitialized();\n \n     //noinspection deprecation",
    "output": "Check composition exists when using software rendering (#2025)\n\nTo reproduce crash, add the following to the IssueReproActivity:\r\n```\r\nbinding.animationView.setCacheComposition(false)\r\nbinding.animationView.renderMode = RenderMode.SOFTWARE\r\nbinding.animationView.postDelayed({ binding.animationView.setAnimation(R.raw.heart) }, 1000)\r\n```\r\n\r\nWhen it tries to render with null composition, `getIntrinsicWidth()` and `getIntrinsicHeight()` return `-1`, and both `renderWidth` and `renderHeight` end up being negative, which results in a crash:\r\n```\r\n    java.lang.IllegalArgumentException: width must be > 0\r\n        at android.graphics.Bitmap.checkWidthHeight(Bitmap.java:378)\r\n        at android.graphics.Bitmap.createBitmap(Bitmap.java:684)\r\n        at android.graphics.Bitmap.createBitmap(Bitmap.java:653)\r\n        at com.airbnb.lottie.LottieDrawable.ensureSoftwareRenderingBitmap(LottieDrawable.java:1452)\r\n        at com.airbnb.lottie.LottieDrawable.renderAndDrawAsBitmap(LottieDrawable.java:1400)\r\n        at com.airbnb.lottie.LottieDrawable.draw(LottieDrawable.java:515)\r\n```\r\nIt does not crash if renderMode is hardware.\r\n\r\nFixes #2026"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -518,6 +518,7 @@ public void draw(@NonNull Canvas canvas) {\n       }\n     }\n \n+    isDirty = false;\n     L.endSection(\"Drawable#draw\");\n   }\n \n@@ -540,6 +541,7 @@ public void draw(Canvas canvas, Matrix matrix) {\n     } else {\n       compositionLayer.draw(canvas, matrix, alpha);\n     }\n+    isDirty = false;\n   }\n \n   // <editor-fold desc=\"animator\">\n@@ -1412,7 +1414,6 @@ private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compo\n       softwareRenderingOriginalCanvasMatrix.invert(softwareRenderingOriginalCanvasMatrixInverse);\n       softwareRenderingOriginalCanvasMatrixInverse.mapRect(softwareRenderingDstBoundsRectF, softwareRenderingTransformedBounds);\n       convertRect(softwareRenderingDstBoundsRectF, softwareRenderingDstBoundsRect);\n-      isDirty = false;\n     }\n \n     softwareRenderingSrcBoundsRect.set(0, 0, renderWidth, renderHeight);",
    "output": "Fix clearing dirty flag (#2023)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n@@ -33,6 +33,7 @@ public class PolystarContent\n   private final LottieDrawable lottieDrawable;\n   private final PolystarShape.Type type;\n   private final boolean hidden;\n+  private final boolean isReversed;\n   private final BaseKeyframeAnimation<?, Float> pointsAnimation;\n   private final BaseKeyframeAnimation<?, PointF> positionAnimation;\n   private final BaseKeyframeAnimation<?, Float> rotationAnimation;\n@@ -51,6 +52,7 @@ public PolystarContent(LottieDrawable lottieDrawable, BaseLayer layer,\n     name = polystarShape.getName();\n     type = polystarShape.getType();\n     hidden = polystarShape.isHidden();\n+    isReversed = polystarShape.isReversed();\n     pointsAnimation = polystarShape.getPoints().createAnimation();\n     positionAnimation = polystarShape.getPosition().createAnimation();\n     rotationAnimation = polystarShape.getRotation().createAnimation();\n@@ -148,6 +150,9 @@ private void createStarPath() {\n     currentAngle = Math.toRadians(currentAngle);\n     // adjust current angle for partial points\n     float anglePerPoint = (float) (2 * Math.PI / points);\n+    if (isReversed) {\n+      anglePerPoint *= -1;\n+    }\n     float halfAnglePerPoint = anglePerPoint / 2.0f;\n     float partialPointAmount = points - (int) points;\n     if (partialPointAmount != 0) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java b/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n@@ -40,12 +40,13 @@ public static Type forValue(int value) {\n   private final AnimatableFloatValue innerRoundedness;\n   private final AnimatableFloatValue outerRoundedness;\n   private final boolean hidden;\n+  private final boolean isReversed;\n \n   public PolystarShape(String name, Type type, AnimatableFloatValue points,\n       AnimatableValue<PointF, PointF> position,\n       AnimatableFloatValue rotation, AnimatableFloatValue innerRadius,\n       AnimatableFloatValue outerRadius, AnimatableFloatValue innerRoundedness,\n-      AnimatableFloatValue outerRoundedness, boolean hidden) {\n+      AnimatableFloatValue outerRoundedness, boolean hidden, boolean isReversed) {\n     this.name = name;\n     this.type = type;\n     this.points = points;\n@@ -56,6 +57,7 @@ public PolystarShape(String name, Type type, AnimatableFloatValue points,\n     this.innerRoundedness = innerRoundedness;\n     this.outerRoundedness = outerRoundedness;\n     this.hidden = hidden;\n+    this.isReversed = isReversed;\n   }\n \n   public String getName() {\n@@ -98,6 +100,10 @@ public boolean isHidden() {\n     return hidden;\n   }\n \n+  public boolean isReversed() {\n+    return isReversed;\n+  }\n+\n   @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {\n     return new PolystarContent(drawable, layer, this);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n@@ -81,7 +81,7 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)\n         model = ShapeTrimPathParser.parse(reader, composition);\n         break;\n       case \"sr\":\n-        model = PolystarShapeParser.parse(reader, composition);\n+        model = PolystarShapeParser.parse(reader, composition, d);\n         break;\n       case \"mm\":\n         model = MergePathsParser.parse(reader);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n@@ -21,14 +21,15 @@ class PolystarShapeParser {\n       \"os\",\n       \"ir\",\n       \"is\",\n-      \"hd\"\n+      \"hd\",\n+      \"d\"\n   );\n \n   private PolystarShapeParser() {\n   }\n \n   static PolystarShape parse(\n-      JsonReader reader, LottieComposition composition) throws IOException {\n+      JsonReader reader, LottieComposition composition, int d) throws IOException {\n     String name = null;\n     PolystarShape.Type type = null;\n     AnimatableFloatValue points = null;\n@@ -39,6 +40,7 @@ static PolystarShape parse(\n     AnimatableFloatValue innerRadius = null;\n     AnimatableFloatValue innerRoundedness = null;\n     boolean hidden = false;\n+    boolean reversed = d == 3;\n \n     while (reader.hasNext()) {\n       switch (reader.selectName(NAMES)) {\n@@ -72,6 +74,10 @@ static PolystarShape parse(\n         case 9:\n           hidden = reader.nextBoolean();\n           break;\n+        case 10:\n+          // \"d\" is 2 for normal and 3 for reversed.\n+          reversed = reader.nextInt() == 3;\n+          break;\n         default:\n           reader.skipName();\n           reader.skipValue();\n@@ -80,6 +86,6 @@ static PolystarShape parse(\n \n     return new PolystarShape(\n         name, type, points, position, rotation, innerRadius, outerRadius,\n-        innerRoundedness, outerRoundedness, hidden);\n+        innerRoundedness, outerRoundedness, hidden, reversed);\n   }\n }",
    "output": "Add support for reversed polystar paths (#2003)\n\nFixes #1863"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n@@ -33,7 +33,6 @@ public class PolystarContent\n   private final LottieDrawable lottieDrawable;\n   private final PolystarShape.Type type;\n   private final boolean hidden;\n-  private final boolean isReversed;\n   private final BaseKeyframeAnimation<?, Float> pointsAnimation;\n   private final BaseKeyframeAnimation<?, PointF> positionAnimation;\n   private final BaseKeyframeAnimation<?, Float> rotationAnimation;\n@@ -52,7 +51,6 @@ public PolystarContent(LottieDrawable lottieDrawable, BaseLayer layer,\n     name = polystarShape.getName();\n     type = polystarShape.getType();\n     hidden = polystarShape.isHidden();\n-    isReversed = polystarShape.isReversed();\n     pointsAnimation = polystarShape.getPoints().createAnimation();\n     positionAnimation = polystarShape.getPosition().createAnimation();\n     rotationAnimation = polystarShape.getRotation().createAnimation();\n@@ -150,9 +148,6 @@ private void createStarPath() {\n     currentAngle = Math.toRadians(currentAngle);\n     // adjust current angle for partial points\n     float anglePerPoint = (float) (2 * Math.PI / points);\n-    if (isReversed) {\n-      anglePerPoint *= -1;\n-    }\n     float halfAnglePerPoint = anglePerPoint / 2.0f;\n     float partialPointAmount = points - (int) points;\n     if (partialPointAmount != 0) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java b/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n@@ -40,13 +40,12 @@ public static Type forValue(int value) {\n   private final AnimatableFloatValue innerRoundedness;\n   private final AnimatableFloatValue outerRoundedness;\n   private final boolean hidden;\n-  private final boolean isReversed;\n \n   public PolystarShape(String name, Type type, AnimatableFloatValue points,\n       AnimatableValue<PointF, PointF> position,\n       AnimatableFloatValue rotation, AnimatableFloatValue innerRadius,\n       AnimatableFloatValue outerRadius, AnimatableFloatValue innerRoundedness,\n-      AnimatableFloatValue outerRoundedness, boolean hidden, boolean isReversed) {\n+      AnimatableFloatValue outerRoundedness, boolean hidden) {\n     this.name = name;\n     this.type = type;\n     this.points = points;\n@@ -57,7 +56,6 @@ public PolystarShape(String name, Type type, AnimatableFloatValue points,\n     this.innerRoundedness = innerRoundedness;\n     this.outerRoundedness = outerRoundedness;\n     this.hidden = hidden;\n-    this.isReversed = isReversed;\n   }\n \n   public String getName() {\n@@ -100,10 +98,6 @@ public boolean isHidden() {\n     return hidden;\n   }\n \n-  public boolean isReversed() {\n-    return isReversed;\n-  }\n-\n   @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {\n     return new PolystarContent(drawable, layer, this);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n@@ -81,7 +81,7 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)\n         model = ShapeTrimPathParser.parse(reader, composition);\n         break;\n       case \"sr\":\n-        model = PolystarShapeParser.parse(reader, composition, d);\n+        model = PolystarShapeParser.parse(reader, composition);\n         break;\n       case \"mm\":\n         model = MergePathsParser.parse(reader);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n@@ -21,15 +21,14 @@ class PolystarShapeParser {\n       \"os\",\n       \"ir\",\n       \"is\",\n-      \"hd\",\n-      \"d\"\n+      \"hd\"\n   );\n \n   private PolystarShapeParser() {\n   }\n \n   static PolystarShape parse(\n-      JsonReader reader, LottieComposition composition, int d) throws IOException {\n+      JsonReader reader, LottieComposition composition) throws IOException {\n     String name = null;\n     PolystarShape.Type type = null;\n     AnimatableFloatValue points = null;\n@@ -40,7 +39,6 @@ static PolystarShape parse(\n     AnimatableFloatValue innerRadius = null;\n     AnimatableFloatValue innerRoundedness = null;\n     boolean hidden = false;\n-    boolean reversed = d == 3;\n \n     while (reader.hasNext()) {\n       switch (reader.selectName(NAMES)) {\n@@ -74,10 +72,6 @@ static PolystarShape parse(\n         case 9:\n           hidden = reader.nextBoolean();\n           break;\n-        case 10:\n-          // \"d\" is 2 for normal and 3 for reversed.\n-          reversed = reader.nextInt() == 3;\n-          break;\n         default:\n           reader.skipName();\n           reader.skipValue();\n@@ -86,6 +80,6 @@ static PolystarShape parse(\n \n     return new PolystarShape(\n         name, type, points, position, rotation, innerRadius, outerRadius,\n-        innerRoundedness, outerRoundedness, hidden, reversed);\n+        innerRoundedness, outerRoundedness, hidden);\n   }\n }",
    "output": "Revert \"Add support for reversed polystar paths\"\n\nThis reverts commit 1a4ff2aedf3cea8b52fa9f63e7c32fccb8753eeb."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n@@ -33,6 +33,7 @@ public class PolystarContent\n   private final LottieDrawable lottieDrawable;\n   private final PolystarShape.Type type;\n   private final boolean hidden;\n+  private final boolean isReversed;\n   private final BaseKeyframeAnimation<?, Float> pointsAnimation;\n   private final BaseKeyframeAnimation<?, PointF> positionAnimation;\n   private final BaseKeyframeAnimation<?, Float> rotationAnimation;\n@@ -51,6 +52,7 @@ public PolystarContent(LottieDrawable lottieDrawable, BaseLayer layer,\n     name = polystarShape.getName();\n     type = polystarShape.getType();\n     hidden = polystarShape.isHidden();\n+    isReversed = polystarShape.isReversed();\n     pointsAnimation = polystarShape.getPoints().createAnimation();\n     positionAnimation = polystarShape.getPosition().createAnimation();\n     rotationAnimation = polystarShape.getRotation().createAnimation();\n@@ -148,6 +150,9 @@ private void createStarPath() {\n     currentAngle = Math.toRadians(currentAngle);\n     // adjust current angle for partial points\n     float anglePerPoint = (float) (2 * Math.PI / points);\n+    if (isReversed) {\n+      anglePerPoint *= -1;\n+    }\n     float halfAnglePerPoint = anglePerPoint / 2.0f;\n     float partialPointAmount = points - (int) points;\n     if (partialPointAmount != 0) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java b/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java\n@@ -40,12 +40,13 @@ public static Type forValue(int value) {\n   private final AnimatableFloatValue innerRoundedness;\n   private final AnimatableFloatValue outerRoundedness;\n   private final boolean hidden;\n+  private final boolean isReversed;\n \n   public PolystarShape(String name, Type type, AnimatableFloatValue points,\n       AnimatableValue<PointF, PointF> position,\n       AnimatableFloatValue rotation, AnimatableFloatValue innerRadius,\n       AnimatableFloatValue outerRadius, AnimatableFloatValue innerRoundedness,\n-      AnimatableFloatValue outerRoundedness, boolean hidden) {\n+      AnimatableFloatValue outerRoundedness, boolean hidden, boolean isReversed) {\n     this.name = name;\n     this.type = type;\n     this.points = points;\n@@ -56,6 +57,7 @@ public PolystarShape(String name, Type type, AnimatableFloatValue points,\n     this.innerRoundedness = innerRoundedness;\n     this.outerRoundedness = outerRoundedness;\n     this.hidden = hidden;\n+    this.isReversed = isReversed;\n   }\n \n   public String getName() {\n@@ -98,6 +100,10 @@ public boolean isHidden() {\n     return hidden;\n   }\n \n+  public boolean isReversed() {\n+    return isReversed;\n+  }\n+\n   @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {\n     return new PolystarContent(drawable, layer, this);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n@@ -81,7 +81,7 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)\n         model = ShapeTrimPathParser.parse(reader, composition);\n         break;\n       case \"sr\":\n-        model = PolystarShapeParser.parse(reader, composition);\n+        model = PolystarShapeParser.parse(reader, composition, d);\n         break;\n       case \"mm\":\n         model = MergePathsParser.parse(reader);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/PolystarShapeParser.java\n@@ -21,14 +21,15 @@ class PolystarShapeParser {\n       \"os\",\n       \"ir\",\n       \"is\",\n-      \"hd\"\n+      \"hd\",\n+      \"d\"\n   );\n \n   private PolystarShapeParser() {\n   }\n \n   static PolystarShape parse(\n-      JsonReader reader, LottieComposition composition) throws IOException {\n+      JsonReader reader, LottieComposition composition, int d) throws IOException {\n     String name = null;\n     PolystarShape.Type type = null;\n     AnimatableFloatValue points = null;\n@@ -39,6 +40,7 @@ static PolystarShape parse(\n     AnimatableFloatValue innerRadius = null;\n     AnimatableFloatValue innerRoundedness = null;\n     boolean hidden = false;\n+    boolean reversed = d == 3;\n \n     while (reader.hasNext()) {\n       switch (reader.selectName(NAMES)) {\n@@ -72,6 +74,10 @@ static PolystarShape parse(\n         case 9:\n           hidden = reader.nextBoolean();\n           break;\n+        case 10:\n+          // \"d\" is 2 for normal and 3 for reversed.\n+          reversed = reader.nextInt() == 3;\n+          break;\n         default:\n           reader.skipName();\n           reader.skipValue();\n@@ -80,6 +86,6 @@ static PolystarShape parse(\n \n     return new PolystarShape(\n         name, type, points, position, rotation, innerRadius, outerRadius,\n-        innerRoundedness, outerRoundedness, hidden);\n+        innerRoundedness, outerRoundedness, hidden, reversed);\n   }\n }",
    "output": "Add support for reversed polystar paths"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -14,7 +14,6 @@\n import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.Log;\n-import android.view.View;\n \n import androidx.annotation.AttrRes;\n import androidx.annotation.DrawableRes;\n@@ -26,7 +25,6 @@\n import androidx.annotation.RequiresApi;\n import androidx.appcompat.content.res.AppCompatResources;\n import androidx.appcompat.widget.AppCompatImageView;\n-import androidx.core.view.ViewCompat;\n \n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.utils.Logger;\n@@ -104,6 +102,10 @@ public void onResult(Throwable result) {\n   private boolean cacheComposition = true;\n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n   private boolean useSoftwareRendering = false;\n+  /**\n+   * Keeps track of explicit user actions taken and prevents onRestoreInstanceState from overwriting already set values.\n+   */\n+  private final Set<UserActionTaken> userActionsTaken = new HashSet<>();\n   private final Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n   /**\n    * Prevents a StackOverflowException on 4.4 in which getDrawingCache() calls buildDrawingCache().\n@@ -284,20 +286,28 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n     SavedState ss = (SavedState) state;\n     super.onRestoreInstanceState(ss.getSuperState());\n     animationName = ss.animationName;\n-    if (!TextUtils.isEmpty(animationName)) {\n+    if (!userActionsTaken.contains(UserActionTaken.SET_ANIMATION) && !TextUtils.isEmpty(animationName)) {\n       setAnimation(animationName);\n     }\n     animationResId = ss.animationResId;\n-    if (animationResId != 0) {\n+    if (!userActionsTaken.contains(UserActionTaken.SET_ANIMATION) && animationResId != 0) {\n       setAnimation(animationResId);\n     }\n-    setProgress(ss.progress);\n-    if (ss.isAnimating) {\n+    if (!userActionsTaken.contains(UserActionTaken.SET_PROGRESS)) {\n+      setProgress(ss.progress);\n+    }\n+    if (!userActionsTaken.contains(UserActionTaken.PLAY_OPTION) && ss.isAnimating) {\n       playAnimation();\n     }\n-    lottieDrawable.setImagesAssetsFolder(ss.imageAssetsFolder);\n-    setRepeatMode(ss.repeatMode);\n-    setRepeatCount(ss.repeatCount);\n+    if (!userActionsTaken.contains(UserActionTaken.SET_IMAGE_ASSETS)) {\n+      setImageAssetsFolder(ss.imageAssetsFolder);\n+    }\n+    if (!userActionsTaken.contains(UserActionTaken.SET_REPEAT_MODE)) {\n+      setRepeatMode(ss.repeatMode);\n+    }\n+    if (!userActionsTaken.contains(UserActionTaken.SET_REPEAT_COUNT)) {\n+      setRepeatCount(ss.repeatCount);\n+    }\n   }\n \n   @Override protected void onAttachedToWindow() {\n@@ -513,6 +523,7 @@ public void setFallbackResource(@DrawableRes int fallbackResource) {\n   }\n \n   private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {\n+    userActionsTaken.add(UserActionTaken.SET_ANIMATION);\n     clearComposition();\n     cancelLoaderTask();\n     this.compositionTask = compositionTask\n@@ -589,6 +600,7 @@ public boolean hasMatte() {\n    */\n   @MainThread\n   public void playAnimation() {\n+    userActionsTaken.add(UserActionTaken.PLAY_OPTION);\n     lottieDrawable.playAnimation();\n     computeRenderMode();\n   }\n@@ -599,6 +611,7 @@ public void playAnimation() {\n    */\n   @MainThread\n   public void resumeAnimation() {\n+    userActionsTaken.add(UserActionTaken.PLAY_OPTION);\n     lottieDrawable.resumeAnimation();\n     computeRenderMode();\n   }\n@@ -781,6 +794,7 @@ public void loop(boolean loop) {\n    * @param mode {@link LottieDrawable#RESTART} or {@link LottieDrawable#REVERSE}\n    */\n   public void setRepeatMode(@LottieDrawable.RepeatMode int mode) {\n+    userActionsTaken.add(UserActionTaken.SET_REPEAT_MODE);\n     lottieDrawable.setRepeatMode(mode);\n   }\n \n@@ -803,6 +817,7 @@ public int getRepeatMode() {\n    * @param count the number of times the animation should be repeated\n    */\n   public void setRepeatCount(int count) {\n+    userActionsTaken.add(UserActionTaken.SET_REPEAT_COUNT);\n     lottieDrawable.setRepeatCount(count);\n   }\n \n@@ -965,6 +980,7 @@ public float getScale() {\n \n   @MainThread\n   public void cancelAnimation() {\n+    userActionsTaken.add(UserActionTaken.PLAY_OPTION);\n     lottieDrawable.cancelAnimation();\n     computeRenderMode();\n   }\n@@ -993,6 +1009,7 @@ public int getFrame() {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    userActionsTaken.add(UserActionTaken.SET_PROGRESS);\n     lottieDrawable.setProgress(progress);\n   }\n \n@@ -1194,4 +1211,13 @@ public SavedState[] newArray(int size) {\n           }\n         };\n   }\n+\n+  private enum UserActionTaken {\n+    SET_ANIMATION,\n+    SET_PROGRESS,\n+    SET_REPEAT_MODE,\n+    SET_REPEAT_COUNT,\n+    SET_IMAGE_ASSETS,\n+    PLAY_OPTION,\n+  }\n }",
    "output": "Prevent LottieAnimationView from overwriting user actions when restoring from saved instance state (#2002)\n\nFixes #1841"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -459,6 +459,7 @@ private boolean isModifier(int codePoint) {\n         Character.getType(codePoint) == Character.MODIFIER_SYMBOL ||\n         Character.getType(codePoint) == Character.NON_SPACING_MARK ||\n         Character.getType(codePoint) == Character.OTHER_SYMBOL ||\n+        Character.getType(codePoint) == Character.DIRECTIONALITY_NONSPACING_MARK ||\n         Character.getType(codePoint) == Character.SURROGATE;\n   }\n ",
    "output": "Improve support for Hindi and other languages that use DIRECTIONALITY_NONSPACING_MARK (#2001)\n\nFixes #1396"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -219,16 +219,25 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {\n       path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n     }\n+    float animStartValue = pathGroup.trimPath.getStart().getValue() / 100f;\n+    float animEndValue = pathGroup.trimPath.getEnd().getValue() / 100f;\n+    float animOffsetValue = pathGroup.trimPath.getOffset().getValue() / 360f;\n+\n+    // If the start-end is ~100, consider it to be the full path.\n+    if (animStartValue < 0.01f && animEndValue > 0.99f) {\n+      canvas.drawPath(path, paint);\n+      L.endSection(\"StrokeContent#applyTrimPath\");\n+      return;\n+    }\n+\n     pm.setPath(path, false);\n     float totalLength = pm.getLength();\n     while (pm.nextContour()) {\n       totalLength += pm.getLength();\n     }\n-    float offsetLength = totalLength * pathGroup.trimPath.getOffset().getValue() / 360f;\n-    float startLength =\n-        totalLength * (pathGroup.trimPath.getStart().getValue() / 100f) + offsetLength;\n-    float endLength =\n-        totalLength * (pathGroup.trimPath.getEnd().getValue() / 100f) + offsetLength;\n+    float offsetLength = totalLength * animOffsetValue;\n+    float startLength = totalLength * animStartValue + offsetLength;\n+    float endLength = Math.min(totalLength * animEndValue + offsetLength, startLength + totalLength - 1f);\n \n     float currentLength = 0;\n     for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n@@ -10,17 +10,17 @@\n public class DocumentDataParser implements ValueParser<DocumentData> {\n   public static final DocumentDataParser INSTANCE = new DocumentDataParser();\n   private static final JsonReader.Options NAMES = JsonReader.Options.of(\n-      \"t\",\n-      \"f\",\n-      \"s\",\n-      \"j\",\n-      \"tr\",\n-      \"lh\",\n-      \"ls\",\n-      \"fc\",\n-      \"sc\",\n-      \"sw\",\n-      \"of\"\n+      \"t\",  // 0\n+      \"f\",  // 1\n+      \"s\",  // 2\n+      \"j\",  // 3\n+      \"tr\", // 4\n+      \"lh\", // 5\n+      \"ls\", // 6\n+      \"fc\", // 7\n+      \"sc\", // 8\n+      \"sw\", // 9\n+      \"of\"  // 10\n   );\n \n   private DocumentDataParser() {",
    "output": "Improve stroke with offset (#1999)\n\nFixes #1784"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/Marker.java b/lottie/src/main/java/com/airbnb/lottie/model/Marker.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Marker.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Marker.java\n@@ -13,6 +13,18 @@ public Marker(String name, float startFrame, float durationFrames) {\n     this.startFrame = startFrame;\n   }\n \n+  public String getName() {\n+    return name;\n+  }\n+\n+  public float getStartFrame() {\n+    return startFrame;\n+  }\n+\n+  public float getDurationFrames() {\n+    return durationFrames;\n+  }\n+\n   public boolean matchesName(String name) {\n     if (this.name.equalsIgnoreCase(name)) {\n       return true;",
    "output": "Add getters for Marker fields (#1998)\n\nFixes #1990"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -262,6 +262,11 @@ public float getMaxFrame() {\n     return maxFrame == Integer.MAX_VALUE ? composition.getEndFrame() : maxFrame;\n   }\n \n+  @Override void notifyCancel() {\n+    super.notifyCancel();\n+    notifyEnd(isReversed());\n+  }\n+\n   protected void postFrameCallback() {\n     if (isRunning()) {\n       removeFrameCallback(false);",
    "output": "Notify AnimationListener onEnd when animations are cancelled (#1994)\n\nLottie now behaves the same way as ValueAnimator in the platform.\r\n\r\nFixes #1963"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -184,6 +184,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setSpeed(ta.getFloat(R.styleable.LottieAnimationView_lottie_speed, 1f));\n     }\n \n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_clipToCompositionBounds)) {\n+      setClipToCompositionBounds(ta.getBoolean(R.styleable.LottieAnimationView_lottie_clipToCompositionBounds, true));\n+    }\n+\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n     setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n@@ -332,6 +336,26 @@ public boolean isMergePathsEnabledForKitKatAndAbove() {\n     return lottieDrawable.isMergePathsEnabledForKitKatAndAbove();\n   }\n \n+  /**\n+   * Sets whether or not Lottie should clip to the original animation composition bounds.\n+   *\n+   * When set to true, the parent view may need to disable clipChildren so Lottie can render outside of the LottieAnimationView bounds.\n+   *\n+   * Defaults to true.\n+   */\n+  public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n+    lottieDrawable.setClipToCompositionBounds(clipToCompositionBounds);\n+  }\n+\n+  /**\n+   * Gets whether or not Lottie should clip to the original animation composition bounds.\n+   *\n+   * Defaults to true.\n+   */\n+  public boolean getClipToCompositionBounds() {\n+    return lottieDrawable.getClipToCompositionBounds();\n+  }\n+\n   /**\n    * If set to true, all future compositions that are set will be cached so that they don't need to be parsed\n    * next time they are loaded. This won't apply to compositions that have already been loaded.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -112,6 +112,7 @@ public void onAnimationUpdate(ValueAnimator animation) {\n   @Nullable\n   TextDelegate textDelegate;\n   private boolean enableMergePaths;\n+  private boolean clipToCompositionBounds = true;\n   @Nullable\n   private CompositionLayer compositionLayer;\n   private int alpha = 255;\n@@ -208,6 +209,27 @@ public boolean isMergePathsEnabledForKitKatAndAbove() {\n     return enableMergePaths;\n   }\n \n+  /**\n+   * Sets whether or not Lottie should clip to the original animation composition bounds.\n+   *\n+   * Defaults to true.\n+   */\n+  public void setClipToCompositionBounds(boolean clipToCompositionBounds) {\n+    if (clipToCompositionBounds != this.clipToCompositionBounds) {\n+      this.clipToCompositionBounds = clipToCompositionBounds;\n+      invalidateSelf();\n+    }\n+  }\n+\n+  /**\n+   * Gets whether or not Lottie should clip to the original animation composition bounds.\n+   *\n+   * Defaults to true.\n+   */\n+  public boolean getClipToCompositionBounds() {\n+    return clipToCompositionBounds;\n+  }\n+\n   /**\n    * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n    * located because bodymovin uses the name filenames across all compositions (img_#).\n@@ -434,7 +456,6 @@ public void draw(@NonNull Canvas canvas) {\n     } else {\n       drawInternal(canvas);\n     }\n-    isDirty = false;\n \n     L.endSection(\"Drawable#draw\");\n   }\n@@ -445,6 +466,7 @@ private void drawInternal(@NonNull Canvas canvas) {\n     } else {\n       drawWithOriginalAspectRatio(canvas);\n     }\n+    isDirty = false;\n   }\n \n   private boolean boundsMatchesCompositionAspectRatio() {\n@@ -860,6 +882,7 @@ public int getRepeatCount() {\n   }\n \n \n+  @SuppressWarnings(\"unused\")\n   public boolean isLooping() {\n     return animator.getRepeatCount() == ValueAnimator.INFINITE;\n   }\n@@ -1221,7 +1244,10 @@ public void draw(Canvas canvas, Matrix matrix) {\n     }\n \n     if (softwareRenderingEnabled) {\n-      renderAndDrawAsBitmap(canvas, compositionLayer, matrix);\n+      canvas.save();\n+      canvas.concat(matrix);\n+      renderAndDrawAsBitmap(canvas, compositionLayer);\n+      canvas.restore();\n     } else {\n       compositionLayer.draw(canvas, matrix, alpha);\n     }\n@@ -1235,7 +1261,7 @@ private void drawWithNewAspectRatio(Canvas canvas) {\n     }\n \n     if (softwareRenderingEnabled) {\n-      renderAndDrawAsBitmap(canvas, compositionLayer, null);\n+      renderAndDrawAsBitmap(canvas, compositionLayer);\n     } else {\n       Rect bounds = getBounds();\n       // In fitXY mode, the scale doesn't take effect.\n@@ -1257,7 +1283,7 @@ private void drawWithOriginalAspectRatio(Canvas canvas) {\n     }\n \n     if (softwareRenderingEnabled) {\n-      renderAndDrawAsBitmap(canvas, compositionLayer, null);\n+      renderAndDrawAsBitmap(canvas, compositionLayer);\n     } else {\n       renderingMatrix.reset();\n       renderingMatrix.preScale(scale, scale);\n@@ -1272,23 +1298,38 @@ private void drawWithOriginalAspectRatio(Canvas canvas) {\n    * @see LottieDrawable#useSoftwareRendering(boolean)\n    * @see LottieAnimationView#setRenderMode(RenderMode)\n    */\n-  private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compositionLayer, @Nullable Matrix parentMatrix) {\n+  private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compositionLayer) {\n     ensureSoftwareRenderingObjectsInitialized();\n \n     //noinspection deprecation\n     originalCanvas.getMatrix(softwareRenderingOriginalCanvasMatrix);\n     softwareRenderingOriginalCanvasMatrix.invert(softwareRenderingOriginalCanvasMatrixInverse);\n     renderingMatrix.set(softwareRenderingOriginalCanvasMatrix);\n-    if (parentMatrix != null) {\n-      renderingMatrix.postConcat(parentMatrix);\n-    }\n \n-    // Determine what bounds the animation will render to after taking into account the canvas and parent matrix.\n-    softwareRenderingTransformedBounds.set(0f, 0f, getIntrinsicWidth(), getIntrinsicHeight());\n+    // The bounds are usually intrinsicWidth x intrinsicHeight. If they are different, an external source is scaling this drawable.\n+    // This is how ImageView.ScaleType.FIT_XY works.\n+    Rect bounds = getBounds();\n+    float scaleX = bounds.width() / (float) getIntrinsicWidth();\n+    float scaleY = bounds.height() / (float) getIntrinsicHeight();\n+\n+    if (clipToCompositionBounds) {\n+      // Only render the intrinsic (composition) bounds.\n+      softwareRenderingTransformedBounds.set(0f, 0f, getIntrinsicWidth(), getIntrinsicHeight());\n+    } else {\n+      // Find the full bounds of the animation.\n+      softwareRenderingTransformedBounds.set(0f, 0f, 0f, 0f);\n+      compositionLayer.getBounds(softwareRenderingTransformedBounds, null, false);\n+    }\n+    softwareRenderingTransformedBounds.set(\n+        softwareRenderingTransformedBounds.left * scaleX,\n+        softwareRenderingTransformedBounds.top * scaleY,\n+        softwareRenderingTransformedBounds.right * scaleX,\n+        softwareRenderingTransformedBounds.bottom * scaleY\n+    );\n+\n+    // Transform the animation bounds to the bounds that they will render to on the canvas.\n     renderingMatrix.mapRect(softwareRenderingTransformedBounds);\n \n-    // We only need to render the portion of the animation that intersects with the canvas's bounds.\n-    softwareRenderingTransformedBounds.intersect(0f, 0f, originalCanvas.getWidth(), originalCanvas.getHeight());\n \n     int renderWidth = (int) Math.ceil(softwareRenderingTransformedBounds.width());\n     int renderHeight = (int) Math.ceil(softwareRenderingTransformedBounds.height());\n@@ -1303,10 +1344,7 @@ private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compo\n \n     if (isDirty) {\n       softwareRenderingBitmap.eraseColor(0);\n-      renderingMatrix.preScale(scale, scale);\n-      // The bounds are usually intrinsicWidth x intrinsicHeight. If they are different, an external source is scaling this drawable.\n-      // This is how ImageView.ScaleType.FIT_XY works.\n-      renderingMatrix.preScale(getBounds().width() / (float) getIntrinsicWidth(), getBounds().height() / (float) getIntrinsicHeight());\n+      renderingMatrix.preScale(scale * scaleX, scale * scaleY);\n       // We want to render the smallest bitmap possible. If the animation doesn't start at the top left, we translate the canvas and shrink the\n       // bitmap to avoid allocating and copying the empty space on the left and top. renderWidth and renderHeight take this into account.\n       renderingMatrix.postTranslate(-softwareRenderingTransformedBounds.left, -softwareRenderingTransformedBounds.top);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -112,7 +112,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     int childAlpha = isDrawingWithOffScreen ? 255 : parentAlpha;\n     for (int i = layers.size() - 1; i >= 0; i--) {\n       boolean nonEmptyClip = true;\n-      if (!newClipRect.isEmpty()) {\n+      if (lottieDrawable.getClipToCompositionBounds() && !newClipRect.isEmpty()) {\n         nonEmptyClip = canvas.clipRect(newClipRect);\n       }\n       if (nonEmptyClip) {",
    "output": "Allow Lottie to render the full animation, even if it extends beyond the original composition bounds (#1993)\n\nSince the beginning of time, Lottie has only rendered the bounds of the original composition. This PR adds a new API to enable rendering the full animation, even if it extends beyond the original composition bounds.\r\n\r\nThis API defaults to off to retain backwards compatibility.\r\n\r\nFixes #1825"
  },
  {
    "input": "diff --git a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n@@ -105,14 +105,6 @@ public void testNullMultipleTimesSync() {\n         assertNotSame(task1, task2);\n     }\n \n-    @Test\n-    public void testCacheWorks() {\n-        JsonReader reader = JsonReader.of(buffer(source(getNeverCompletingInputStream())));\n-        LottieTask<LottieComposition> task1 = LottieCompositionFactory.fromJsonReader(reader, \"foo\");\n-        LottieTask<LottieComposition> task2 = LottieCompositionFactory.fromJsonReader(reader, \"foo\");\n-        assertSame(task1, task2);\n-    }\n-\n     @Test\n     public void testZeroCacheWorks() {\n         JsonReader reader = JsonReader.of(buffer(source(getNeverCompletingInputStream())));",
    "output": "Add a test, remove an invalid test and add sample animations to the issue repro apps (#1992)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -55,6 +55,17 @@ public GradientColor parse(JsonReader reader, float scale)\n     while (reader.hasNext()) {\n       array.add((float) reader.nextDouble());\n     }\n+    if (array.size() == 4 && array.get(0) == 1f) {\n+      // If a gradient color only contains one color at position 1, add a second stop with the same\n+      // color at position 0. Android's LinearGradient shader requires at least two colors.\n+      // https://github.com/airbnb/lottie-android/issues/1967\n+      array.set(0, 0f);\n+      array.add(1f);\n+      array.add(array.get(1));\n+      array.add(array.get(2));\n+      array.add(array.get(3));\n+      colorPoints = 2;\n+    }\n     if (isArray) {\n       reader.endArray();\n     }",
    "output": "Handle cases in which the Lottie file only has a single color (#1985)\n\nFixes #1967"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -40,7 +40,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.concurrent.Callable;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -63,25 +62,19 @@\n  *\n  * @see <a href=\"http://airbnb.io/lottie\">Full Documentation</a>\n  */\n-@SuppressWarnings({\"WeakerAccess\"}) public class LottieAnimationView extends AppCompatImageView {\n+@SuppressWarnings({\"WeakerAccess\", \"unused\"}) public class LottieAnimationView extends AppCompatImageView {\n \n   private static final String TAG = LottieAnimationView.class.getSimpleName();\n-  private static final LottieListener<Throwable> DEFAULT_FAILURE_LISTENER = new LottieListener<Throwable>() {\n-    @Override public void onResult(Throwable throwable) {\n-      // By default, fail silently for network errors.\n-      if (Utils.isNetworkException(throwable)) {\n-        Logger.warning(\"Unable to load composition.\", throwable);\n-        return;\n-      }\n-      throw new IllegalStateException(\"Unable to parse composition\", throwable);\n+  private static final LottieListener<Throwable> DEFAULT_FAILURE_LISTENER = throwable -> {\n+    // By default, fail silently for network errors.\n+    if (Utils.isNetworkException(throwable)) {\n+      Logger.warning(\"Unable to load composition.\", throwable);\n+      return;\n     }\n+    throw new IllegalStateException(\"Unable to parse composition\", throwable);\n   };\n \n-  private final LottieListener<LottieComposition> loadedListener = new LottieListener<LottieComposition>() {\n-    @Override public void onResult(LottieComposition composition) {\n-      setComposition(composition);\n-    }\n-  };\n+  private final LottieListener<LottieComposition> loadedListener = this::setComposition;\n \n   private final LottieListener<Throwable> wrappedFailureListener = new LottieListener<Throwable>() {\n     @Override\n@@ -204,7 +197,7 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       ColorStateList csl = AppCompatResources.getColorStateList(getContext(), colorRes);\n       SimpleColorFilter filter = new SimpleColorFilter(csl.getDefaultColor());\n       KeyPath keyPath = new KeyPath(\"**\");\n-      LottieValueCallback<ColorFilter> callback = new LottieValueCallback<ColorFilter>(filter);\n+      LottieValueCallback<ColorFilter> callback = new LottieValueCallback<>(filter);\n       addValueCallback(keyPath, LottieProperty.COLOR_FILTER, callback);\n     }\n     if (ta.hasValue(R.styleable.LottieAnimationView_lottie_scale)) {\n@@ -424,12 +417,8 @@ public void setAnimation(@RawRes final int rawRes) {\n \n   private LottieTask<LottieComposition> fromRawRes(@RawRes final int rawRes) {\n     if (isInEditMode()) {\n-      return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {\n-        @Override public LottieResult<LottieComposition> call() {\n-          return cacheComposition\n-              ? LottieCompositionFactory.fromRawResSync(getContext(), rawRes) : LottieCompositionFactory.fromRawResSync(getContext(), rawRes, null);\n-        }\n-      }, true);\n+      return new LottieTask<>(() -> cacheComposition\n+          ? LottieCompositionFactory.fromRawResSync(getContext(), rawRes) : LottieCompositionFactory.fromRawResSync(getContext(), rawRes, null), true);\n     } else {\n       return cacheComposition ?\n           LottieCompositionFactory.fromRawRes(getContext(), rawRes) : LottieCompositionFactory.fromRawRes(getContext(), rawRes, null);\n@@ -444,12 +433,8 @@ public void setAnimation(final String assetName) {\n \n   private LottieTask<LottieComposition> fromAssets(final String assetName) {\n     if (isInEditMode()) {\n-      return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {\n-        @Override public LottieResult<LottieComposition> call() {\n-          return cacheComposition ?\n-              LottieCompositionFactory.fromAssetSync(getContext(), assetName) : LottieCompositionFactory.fromAssetSync(getContext(), assetName, null);\n-        }\n-      }, true);\n+      return new LottieTask<>(() -> cacheComposition ?\n+          LottieCompositionFactory.fromAssetSync(getContext(), assetName) : LottieCompositionFactory.fromAssetSync(getContext(), assetName, null), true);\n     } else {\n       return cacheComposition ?\n           LottieCompositionFactory.fromAsset(getContext(), assetName) : LottieCompositionFactory.fromAsset(getContext(), assetName, null);\n@@ -1150,6 +1135,7 @@ public void setApplyingOpacityToLayersEnabled(boolean isApplyingOpacityToLayersE\n    */\n   @Deprecated\n   public void disableExtraScaleModeInFitXY() {\n+    //noinspection deprecation\n     lottieDrawable.disableExtraScaleModeInFitXY();\n   }\n ",
    "output": "Cleanup warnings in LottieAnimationView (#1983)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -484,7 +484,6 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n    * Check if a given InputStream points to a .zip compressed file\n    */\n   private static Boolean isZipCompressed(BufferedSource inputSource) {\n-\n     try {\n       BufferedSource peek = inputSource.peek();\n       for (byte b : MAGIC) {\n@@ -494,11 +493,13 @@ private static Boolean isZipCompressed(BufferedSource inputSource) {\n       }\n       peek.close();\n       return true;\n+    } catch (NoSuchMethodError e) {\n+      // This happens in the Android Studio layout preview.\n+      return false;\n     } catch (Exception e) {\n       Logger.error(\"Failed to check zip file header\", e);\n       return false;\n     }\n-\n   }\n \n   @Nullable",
    "output": "Fix Android Studio layout preview (#1984)\n\nFixes #1974"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -66,7 +66,6 @@ protected float[] initialValue() {\n   };\n \n   private static final float INV_SQRT_2 = (float) (Math.sqrt(2) / 2.0);\n-  private static float dpScale = -1;\n \n   private Utils() {\n   }\n@@ -250,10 +249,7 @@ public static int hashFor(float a, float b, float c, float d) {\n   }\n \n   public static float dpScale() {\n-    if (dpScale == -1) {\n-      dpScale = Resources.getSystem().getDisplayMetrics().density;\n-    }\n-    return dpScale;\n+    return Resources.getSystem().getDisplayMetrics().density;\n   }\n \n   public static float getAnimationScale(Context context) {",
    "output": "Don't cache dpScale in Utils (#1915)\n\nIt's possible for the screen density to change when moving between windows or screens. In this case lottie renders animations the wrong size. Android already does a pretty good job of caching and updating the system context so just let it do it's job."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -332,6 +332,10 @@ public boolean isApplyingOpacityToLayersEnabled() {\n   }\n \n   private void buildCompositionLayer() {\n+    LottieComposition composition = this.composition;\n+    if (composition == null) {\n+      return;\n+    }\n     compositionLayer = new CompositionLayer(\n         this, LayerParser.parse(composition), composition.getLayers(), composition);\n     if (outlineMasksAndMattes) {",
    "output": "Fix a potential NPE race conditions (#1959)\n\nThis PR addresses the issue #1958 , although the crash is pretty hard to reproducible, the enhancement will definitely make it more robust.\r\n\r\nThe issue was in com.airbnb.lottie.LottieDrawable#buildCompositionLayer method.\r\nThe related code is:\r\n\r\n  private void buildCompositionLayer() {\r\n    compositionLayer = new CompositionLayer(\r\n        this, LayerParser.parse(composition), composition.getLayers(), composition);\r\n    if (outlineMasksAndMattes) {\r\n      compositionLayer.setOutlineMasksAndMattes(true);\r\n    }\r\n  }\r\nThe crash exception stack prints:\r\n\r\nFatal Exception: java.lang.NullPointerException: Attempt to invoke virtual method 'java.util.List com.airbnb.lottie.LottieComposition.getLayers()' on a null object reference\r\n       at com.airbnb.lottie.LottieDrawable.buildCompositionLayer(LottieDrawable.java:298)\r\n       ...\r\nAs we can see, the exception occurs at composition.getLayers(), but before executing this statement, the LayerParser.parse(composition) statement also refers to the composition object, which was fine, but after that this object had been set to null, thus caused NPE.\r\n\r\nI think this issue is very similar to the issues resolved in PR #1917"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n@@ -169,7 +169,7 @@ public Matrix getMatrix() {\n     BaseKeyframeAnimation<?, PointF> position = this.position;\n     if (position != null) {\n       PointF positionValue = position.getValue();\n-      if (positionValue.x != 0 || positionValue.y != 0) {\n+      if (positionValue != null && (positionValue.x != 0 || positionValue.y != 0)) {\n         matrix.preTranslate(positionValue.x, positionValue.y);\n       }\n     }",
    "output": "Fix a rare NPE race condition in TransformKeyframeAnimation (#1955)\n\nFixes #1945"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -107,7 +107,10 @@ private LottieResult<LottieComposition> fromInputStream(@NonNull String url, @No\n       // in the result which is more useful than failing here.\n       contentType = \"application/json\";\n     }\n-    if (contentType.contains(\"application/zip\") || url.split(\"\\\\?\")[0].endsWith(\".lottie\")) {\n+    if (contentType.contains(\"application/zip\") ||\n+        contentType.contains(\"application/x-zip\") ||\n+        contentType.contains(\"application/x-zip-compressed\") ||\n+        url.split(\"\\\\?\")[0].endsWith(\".lottie\")) {\n       Logger.debug(\"Handling zip response.\");\n       extension = FileExtension.ZIP;\n       result = fromZipStream(url, inputStream, cacheKey);",
    "output": "Add x-zip and x-zip-compressed as recognized .zip header mime types (#1954)\n\nFixes #1950"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/LPaint.java b/lottie/src/main/java/com/airbnb/lottie/animation/LPaint.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/LPaint.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/LPaint.java\n@@ -1,8 +1,11 @@\n package com.airbnb.lottie.animation;\n \n+import static com.airbnb.lottie.utils.MiscUtils.clamp;\n+\n import android.graphics.Paint;\n import android.graphics.PorterDuff;\n import android.graphics.PorterDuffXfermode;\n+import android.os.Build;\n import android.os.LocaleList;\n \n import androidx.annotation.NonNull;\n@@ -35,4 +38,21 @@ public LPaint(int flags, PorterDuff.Mode porterDuffMode) {\n   public void setTextLocales(@NonNull LocaleList locales) {\n     // Do nothing.\n   }\n+\n+  /**\n+   * Overrides {@link android.graphics.Paint#setAlpha(int)} to avoid\n+   * unnecessary {@link android.graphics.ColorSpace.Named ColorSpace$Named[] }\n+   * allocations when calling this method in Android 29 or lower.\n+   *\n+   * @param alpha set the alpha component [0..255] of the paint's color.\n+   */\n+  @Override\n+  public void setAlpha(int alpha) {\n+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n+      int color = getColor();\n+      setColor((clamp(alpha, 0, 255) << 24) | (color & 0xFFFFFF));\n+    } else {\n+      super.setAlpha(clamp(alpha, 0, 255));\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n@@ -98,9 +98,9 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi\n       return;\n     }\n     L.beginSection(\"FillContent#draw\");\n-    paint.setColor(((ColorKeyframeAnimation) colorAnimation).getIntValue());\n+    int color = ((ColorKeyframeAnimation) this.colorAnimation).getIntValue();\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n-    paint.setAlpha(clamp(alpha, 0, 255));\n+    paint.setColor((clamp(alpha, 0, 255) << 24) | (color & 0xFFFFFF));\n \n     if (colorFilterAnimation != null) {\n       paint.setColorFilter(colorFilterAnimation.getValue());",
    "output": "Replaced Paint.setAlpha() with Paint.setColor() to reduce unnecessary allocations (#1929)\n\nResolves #1928\r\n\r\nThis pull request attempts to remove ColorSpace.Named[] allocations when calling Paint.setAlpha(). These changes will fix the issue only when using RGB colors."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n@@ -64,7 +64,13 @@ private void invalidate() {\n       return path;\n     }\n \n-    path.set(shapeAnimation.getValue());\n+    Path shapeAnimationPath = shapeAnimation.getValue();\n+    if (shapeAnimationPath == null) {\n+      // It is unclear why this ever returns null but it seems to in rare cases.\n+      // https://github.com/airbnb/lottie-android/issues/1632\n+      return path;\n+    }\n+    path.set(shapeAnimationPath);\n     path.setFillType(Path.FillType.EVEN_ODD);\n \n     trimPaths.apply(path);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -340,6 +340,12 @@ private void intersectBoundsWithMask(RectF rect, Matrix matrix) {\n       Mask mask = this.mask.getMasks().get(i);\n       BaseKeyframeAnimation<?, Path> maskAnimation = this.mask.getMaskAnimations().get(i);\n       Path maskPath = maskAnimation.getValue();\n+      if (maskPath == null) {\n+        // This should never happen but seems to happen occasionally.\n+        // There is no known repro for this but is is probably best to just skip this mask if that is the case.\n+        // https://github.com/airbnb/lottie-android/issues/1879\n+        continue;\n+      }\n       path.set(maskPath);\n       path.transform(matrix);\n ",
    "output": "Prevent two rare crashes (#1939)\n\nFixes #1632\r\nFixes #1879\r\nFixes #1815"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java b/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java\n@@ -17,6 +17,7 @@\n public class TextDelegate {\n \n   private final Map<String, String> stringMap = new HashMap<>();\n+\n   @Nullable private final LottieAnimationView animationView;\n   @Nullable private final LottieDrawable drawable;\n   private boolean cacheText = true;\n@@ -41,6 +42,17 @@ public TextDelegate(@SuppressWarnings(\"NullableProblems\") LottieDrawable drawabl\n     animationView = null;\n   }\n \n+  /**\n+   * Override this to replace the animation text with something dynamic. This can be used for\n+   * translations or custom data.\n+   * @param layerName the name of the layer with text\n+   * @param input the string at the layer with text\n+   * @return a String to use for the specific data, by default this is the same as getText(input)\n+   */\n+  public String getText(String layerName, String input) {\n+    return getText(input);\n+  }\n+\n   /**\n    * Override this to replace the animation text with something dynamic. This can be used for\n    * translations or custom data.\n@@ -82,11 +94,11 @@ public void invalidateAllText() {\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public final String getTextInternal(String input) {\n+  public final String getTextInternal(String layerName, String input) {\n     if (cacheText && stringMap.containsKey(input)) {\n       return stringMap.get(input);\n     }\n-    String text = getText(input);\n+    String text = getText(layerName, input);\n     if (cacheText) {\n       stringMap.put(input, text);\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -245,7 +245,7 @@ private void drawTextWithFont(\n     String text = documentData.text;\n     TextDelegate textDelegate = lottieDrawable.getTextDelegate();\n     if (textDelegate != null) {\n-      text = textDelegate.getTextInternal(text);\n+      text = textDelegate.getTextInternal(getName(), text);\n     }\n     fillPaint.setTypeface(typeface);\n     float textSize;",
    "output": "Provide a second overload to TextDelegate.getText that provides layerName (#1931)\n\nIf multiple text layers have the same text, it is impossible to disambiguate which one you are setting the text for. This commit adds a second overload for TextDelegate.getText that lets you receive the layerName in addition to the text.\r\n\r\nFixex #1932"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n@@ -24,19 +24,17 @@ public int getIntValue(Keyframe<Integer> keyframe, float keyframeProgress) {\n     if (keyframe.startValue == null || keyframe.endValue == null) {\n       throw new IllegalStateException(\"Missing values for keyframe.\");\n     }\n-    int startColor = keyframe.startValue;\n-    int endColor = keyframe.endValue;\n \n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n-      Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, startColor,\n-          endColor, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, keyframe.startValue,\n+          keyframe.endValue, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n       if (value != null) {\n         return value;\n       }\n     }\n \n-    return GammaEvaluator.evaluate(MiscUtils.clamp(keyframeProgress, 0f, 1f), startColor, endColor);\n+    return GammaEvaluator.evaluate(MiscUtils.clamp(keyframeProgress, 0f, 1f), keyframe.startValue, keyframe.endValue);\n   }\n \n   /**",
    "output": "Removed unnecessary int cast to avoid Integer allocations (#1927)\n\nThis pull request attempts to reduce Integer allocations when using an animation that has a ValueCallback to change some colors.\r\n\r\nResolves #1926"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -226,9 +226,9 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     }\n     float offsetLength = totalLength * pathGroup.trimPath.getOffset().getValue() / 360f;\n     float startLength =\n-        totalLength * pathGroup.trimPath.getStart().getValue() / 100f + offsetLength;\n+        totalLength * (pathGroup.trimPath.getStart().getValue() / 100f) + offsetLength;\n     float endLength =\n-        totalLength * pathGroup.trimPath.getEnd().getValue() / 100f + offsetLength;\n+        totalLength * (pathGroup.trimPath.getEnd().getValue() / 100f) + offsetLength;\n \n     float currentLength = 0;\n     for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {",
    "output": "Enforce order of operations to avoid rounding errors (#1897)\n\nPreviously, the calculation of endLength could suffer from rounding errors. While most of the time, these errors are not a big deal, when the end value is 100, this can result in endLength being larger than totalLength, causing unexpected behavior where the animation reverts to an initial state when it should be showing the final state. By forcing the order of operations, we can get the answer we expect / need.\r\n\r\nCo-authored-by: Scott Weber <sweber@duosecurity.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -601,7 +601,7 @@ public BlurMaskFilter getBlurMaskFilter(float radius) {\n     if (blurMaskFilterRadius == radius) {\n       return blurMaskFilter;\n     }\n-    blurMaskFilter = new BlurMaskFilter(radius, BlurMaskFilter.Blur.NORMAL);\n+    blurMaskFilter = new BlurMaskFilter(radius / 2f, BlurMaskFilter.Blur.NORMAL);\n     blurMaskFilterRadius = radius;\n     return blurMaskFilter;\n   }",
    "output": "Fix blur scale (#1861)\n\nFixed empirically. Probably needs more tuning though."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1200,6 +1200,14 @@ private float getMaxScale(@NonNull Canvas canvas) {\n     return Math.min(maxScaleX, maxScaleY);\n   }\n \n+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n+  public void draw(Canvas canvas, Matrix matrix) {\n+    if (compositionLayer == null) {\n+      return;\n+    }\n+    compositionLayer.draw(canvas, matrix, alpha);\n+  }\n+\n   private void drawWithNewAspectRatio(Canvas canvas) {\n     if (compositionLayer == null) {\n       return;",
    "output": "[Compose] Add support for ContentScale and Alignment (#1844)\n\nLottieAnimation's behavior now perfectly matches the behavior of ContentScale and Alignment in Image."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.ColorFilter;\n import android.graphics.PointF;\n+import android.graphics.Typeface;\n \n import com.airbnb.lottie.value.LottieValueCallback;\n import com.airbnb.lottie.value.ScaleXY;\n@@ -164,4 +165,6 @@ public interface LottieProperty {\n   ColorFilter COLOR_FILTER = new ColorFilter();\n \n   Integer[] GRADIENT_COLOR = new Integer[0];\n+\n+  Typeface TYPEFACE = Typeface.DEFAULT;\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Font.java b/lottie/src/main/java/com/airbnb/lottie/model/Font.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Font.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Font.java\n@@ -2,6 +2,9 @@\n \n import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n \n+import android.graphics.Typeface;\n+\n+import androidx.annotation.Nullable;\n import androidx.annotation.RestrictTo;\n \n @RestrictTo(LIBRARY)\n@@ -12,6 +15,9 @@ public class Font {\n   private final String style;\n   private final float ascent;\n \n+  @Nullable\n+  private Typeface typeface;\n+\n   public Font(String family, String name, String style, float ascent) {\n     this.family = family;\n     this.name = name;\n@@ -34,4 +40,13 @@ public String getStyle() {\n   @SuppressWarnings(\"unused\") float getAscent() {\n     return ascent;\n   }\n+\n+  @Nullable\n+  public Typeface getTypeface() {\n+    return typeface;\n+  }\n+\n+  public void setTypeface(@Nullable Typeface typeface) {\n+    this.typeface = typeface;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -47,7 +47,7 @@ public class TextLayer extends BaseLayer {\n     setStyle(Style.STROKE);\n   }};\n   private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n-  private final LongSparseArray<String> codePointCache = new LongSparseArray<String>();\n+  private final LongSparseArray<String> codePointCache = new LongSparseArray<>();\n   private final TextKeyframeAnimation textAnimation;\n   private final LottieDrawable lottieDrawable;\n   private final LottieComposition composition;\n@@ -71,6 +71,8 @@ public class TextLayer extends BaseLayer {\n   private BaseKeyframeAnimation<Float, Float> textSizeAnimation;\n   @Nullable\n   private BaseKeyframeAnimation<Float, Float> textSizeCallbackAnimation;\n+  @Nullable\n+  private BaseKeyframeAnimation<Typeface, Typeface> typefaceCallbackAnimation;\n \n   TextLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n     super(lottieDrawable, layerModel);\n@@ -236,8 +238,7 @@ private void drawGlyphTextLine(String text, DocumentData documentData, Matrix pa\n \n   private void drawTextWithFont(\n       DocumentData documentData, Font font, Matrix parentMatrix, Canvas canvas) {\n-    float parentScale = Utils.getScale(parentMatrix);\n-    Typeface typeface = lottieDrawable.getTypeface(font.getFamily(), font.getStyle());\n+    Typeface typeface = getTypeface(font);\n     if (typeface == null) {\n       return;\n     }\n@@ -298,6 +299,21 @@ private void drawTextWithFont(\n     }\n   }\n \n+  @Nullable\n+  private Typeface getTypeface(Font font) {\n+    if (typefaceCallbackAnimation != null) {\n+      Typeface callbackTypeface = typefaceCallbackAnimation.getValue();\n+      if (callbackTypeface != null) {\n+        return callbackTypeface;\n+      }\n+    }\n+    Typeface drawableTypeface = lottieDrawable.getTypeface(font.getFamily(), font.getStyle());\n+    if (drawableTypeface != null) {\n+      return drawableTypeface;\n+    }\n+    return font.getTypeface();\n+  }\n+\n   private List<String> getTextLines(String text) {\n     // Split full text by carriage return character\n     String formattedText = text.replaceAll(\"\\r\\n\", \"\\r\")\n@@ -517,6 +533,18 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n         textSizeCallbackAnimation.addUpdateListener(this);\n         addAnimation(textSizeCallbackAnimation);\n       }\n+    } else if (property == LottieProperty.TYPEFACE) {\n+      if (typefaceCallbackAnimation != null) {\n+        removeAnimation(typefaceCallbackAnimation);\n+      }\n+\n+      if (callback == null) {\n+        typefaceCallbackAnimation = null;\n+      } else {\n+        typefaceCallbackAnimation = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Typeface>) callback);\n+        typefaceCallbackAnimation.addUpdateListener(this);\n+        addAnimation(typefaceCallbackAnimation);\n+      }\n     }\n   }\n }",
    "output": "[Compose] Allow setting and remapping fonts (#1842)\n\nThis PR adds 4 APIs to load typefaces in lottie-compose:\r\n1) Using default paths. Fonts are in /assets/fonts/FAMILY_NAME.ttf\r\n2) Overriding the assets subfolder or font file extension\r\n3) Remapping family names to font files in assets\r\n4) Dynamic properties\r\n\r\nThe dynamic properties API can also be used with lottie-android."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -1026,7 +1026,7 @@ public List<KeyPath> resolveKeyPath(KeyPath keyPath) {\n    * {@link #resolveKeyPath(KeyPath)} and will resolve it if it hasn't.\n    */\n   public <T> void addValueCallback(\n-      final KeyPath keyPath, final T property, final LottieValueCallback<T> callback) {\n+      final KeyPath keyPath, final T property, @Nullable final LottieValueCallback<T> callback) {\n     if (compositionLayer == null) {\n       lazyCompositionTasks.add(new LazyCompositionTask() {\n         @Override",
    "output": "[Compose] Added the ability to set dynamic properties (#1831)\n\nExample usage can be seen on DynamicPropertiesExamplesPage.kt.\r\n\r\nThanks to Compose's impressive snapshot system, states that are read during the drawing pass via the dynamic properties callback are automatically registered so invalidation happens correctly by default."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -105,14 +105,15 @@ public static NetworkFetcher networkFetcher(@NonNull Context context) {\n \n   @NonNull\n   public static NetworkCache networkCache(@NonNull final Context context) {\n+    final Context appContext = context.getApplicationContext();\n     NetworkCache local = networkCache;\n     if (local == null) {\n       synchronized (NetworkCache.class) {\n         local = networkCache;\n         if (local == null) {\n           networkCache = local = new NetworkCache(cacheProvider != null ? cacheProvider : new LottieNetworkCacheProvider() {\n             @Override @NonNull public File getCacheDir() {\n-              return new File(context.getCacheDir(), \"lottie_network_cache\");\n+              return new File(appContext.getCacheDir(), \"lottie_network_cache\");\n             }\n           });\n         }",
    "output": "Use app context in NetworkFetcher (#1832)\n\nFixes #1798"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -17,6 +17,7 @@\n import com.airbnb.lottie.model.layer.Layer;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n import com.airbnb.lottie.utils.Logger;\n+import com.airbnb.lottie.utils.MiscUtils;\n \n import org.json.JSONObject;\n \n@@ -150,6 +151,16 @@ public float getEndFrame() {\n     return endFrame;\n   }\n \n+  public float getFrameForProgress(float progress) {\n+    return MiscUtils.lerp(startFrame, endFrame, progress);\n+  }\n+\n+  public float getProgressForFrame(float frame) {\n+    float framesSinceStart = frame - startFrame;\n+    float frameRange = endFrame - startFrame;\n+    return framesSinceStart / frameRange;\n+  }\n+\n   public float getFrameRate() {\n     return frameRate;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -818,7 +818,7 @@ public void run(LottieComposition composition) {\n       return;\n     }\n     L.beginSection(\"Drawable#setProgress\");\n-    animator.setFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));\n+    animator.setFrame(composition.getFrameForProgress(progress));\n     L.endSection(\"Drawable#setProgress\");\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -174,9 +174,13 @@ public void setMinAndMaxFrames(float minFrame, float maxFrame) {\n     }\n     float compositionMinFrame = composition == null ? -Float.MAX_VALUE : composition.getStartFrame();\n     float compositionMaxFrame = composition == null ? Float.MAX_VALUE : composition.getEndFrame();\n-    this.minFrame = MiscUtils.clamp(minFrame, compositionMinFrame, compositionMaxFrame);\n-    this.maxFrame = MiscUtils.clamp(maxFrame, compositionMinFrame, compositionMaxFrame);\n-    setFrame((int) MiscUtils.clamp(frame, minFrame, maxFrame));\n+    float newMinFrame = MiscUtils.clamp(minFrame, compositionMinFrame, compositionMaxFrame);\n+    float newMaxFrame = MiscUtils.clamp(maxFrame, compositionMinFrame, compositionMaxFrame);\n+    if (newMinFrame != this.minFrame || newMaxFrame != this.maxFrame) {\n+      this.minFrame = newMinFrame;\n+      this.maxFrame = newMaxFrame;\n+      setFrame((int) MiscUtils.clamp(frame, newMinFrame, newMaxFrame));\n+    }\n   }\n \n   public void reverseAnimationSpeed() {\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionTest.java\n@@ -0,0 +1,29 @@\n+package com.airbnb.lottie;\n+\n+import static junit.framework.TestCase.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class LottieCompositionTest extends BaseTest {\n+  private static final String JSON = \"{\\\"v\\\":\\\"4.11.1\\\",\\\"fr\\\":60,\\\"ip\\\":0,\\\"op\\\":180,\\\"w\\\":300,\\\"h\\\":300,\\\"nm\\\":\\\"Comp 1\\\",\\\"ddd\\\":0,\\\"assets\\\":[],\" +\n+      \"\\\"layers\\\":[{\\\"ddd\\\":0,\\\"ind\\\":1,\\\"ty\\\":4,\\\"nm\\\":\\\"Shape Layer 1\\\",\\\"sr\\\":1,\\\"ks\\\":{\\\"o\\\":{\\\"a\\\":0,\\\"k\\\":100,\\\"ix\\\":11},\\\"r\\\":{\\\"a\\\":0,\" +\n+      \"\\\"k\\\":0,\\\"ix\\\":10},\\\"p\\\":{\\\"a\\\":0,\\\"k\\\":[150,150,0],\\\"ix\\\":2},\\\"a\\\":{\\\"a\\\":0,\\\"k\\\":[0,0,0],\\\"ix\\\":1},\\\"s\\\":{\\\"a\\\":0,\\\"k\\\":[100,100,100],\" +\n+      \"\\\"ix\\\":6}},\\\"ao\\\":0,\\\"shapes\\\":[{\\\"ty\\\":\\\"rc\\\",\\\"d\\\":1,\\\"s\\\":{\\\"a\\\":0,\\\"k\\\":[100,100],\\\"ix\\\":2},\\\"p\\\":{\\\"a\\\":0,\\\"k\\\":[0,0],\\\"ix\\\":3},\" +\n+      \"\\\"r\\\":{\\\"a\\\":0,\\\"k\\\":0,\\\"ix\\\":4},\\\"nm\\\":\\\"Rectangle Path 1\\\",\\\"mn\\\":\\\"ADBE Vector Shape - Rect\\\",\\\"hd\\\":false},{\\\"ty\\\":\\\"fl\\\",\" +\n+      \"\\\"c\\\":{\\\"a\\\":0,\\\"k\\\":[0.928262987324,0,0,1],\\\"ix\\\":4},\\\"o\\\":{\\\"a\\\":0,\\\"k\\\":100,\\\"ix\\\":5},\\\"r\\\":1,\\\"nm\\\":\\\"Fill 1\\\",\\\"mn\\\":\\\"ADBE Vector \" +\n+      \"Graphic - Fill\\\",\\\"hd\\\":false}],\\\"ip\\\":0,\\\"op\\\":180,\\\"st\\\":0,\\\"bm\\\":0}]}\";\n+\n+  @Test\n+  public void testGetFrameForProgress() {\n+    LottieResult<LottieComposition> result = LottieCompositionFactory.fromJsonStringSync(JSON, null);\n+    //noinspection ConstantConditions\n+    assertEquals(66.59f, result.getValue().getFrameForProgress(0.37f), 0.01f);\n+  }\n+\n+  @Test\n+  public void testGetProgressForFrame() {\n+    LottieResult<LottieComposition> result = LottieCompositionFactory.fromJsonStringSync(JSON, null);\n+    //noinspection ConstantConditions\n+    assertEquals(0.5f, result.getValue().getProgressForFrame(90), 0.01f);\n+  }\n+}",
    "output": "[Compose] Breaking Change: Major Compose API Refactor (#1827)\n\nThis PR is a major update to the Lottie Compose APIs.\r\nNotable changes:\r\n* LottieAnimation composable now just takes a composition, progress as a Float, and base properties such as ImageAssetDelegate, mergePaths, etc.\r\n* Animating the composition can be done either with a manual animation, gesture, etc or via the new animateLottieComposition() function or LottieAnimatable class.\r\n* LottieAnimation contains overloads that make it easier to just pass in a LottieCompositionSpec or animation parameters and under the hood, it will wrap lottieComposition() and animateLottieComposition()."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -2,6 +2,7 @@\n \n import android.animation.Animator;\n import android.animation.ValueAnimator;\n+import android.annotation.SuppressLint;\n import android.content.Context;\n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n@@ -845,6 +846,7 @@ public void setRepeatMode(@RepeatMode int mode) {\n    *\n    * @return either one of {@link #REVERSE} or {@link #RESTART}\n    */\n+  @SuppressLint(\"WrongConstant\")\n   @RepeatMode\n   public int getRepeatMode() {\n     return animator.getRepeatMode();",
    "output": "[Compose] Beta 9 (#1826)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -553,17 +553,11 @@ void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         mask.getMaskAnimations().get(i).setProgress(progress);\n       }\n     }\n-    if (layerModel.getTimeStretch() != 0) {\n-      progress /= layerModel.getTimeStretch();\n-    }\n     if (inOutAnimation != null) {\n-      // Time stretch needs to be divided again for the inOutAnimation.\n-      inOutAnimation.setProgress(progress / layerModel.getTimeStretch());\n+      inOutAnimation.setProgress(progress);\n     }\n     if (matteLayer != null) {\n-      // The matte layer's time stretch is pre-calculated.\n-      float matteTimeStretch = matteLayer.layerModel.getTimeStretch();\n-      matteLayer.setProgress(progress * matteTimeStretch);\n+      matteLayer.setProgress(progress);\n     }\n     for (int i = 0; i < animations.size(); i++) {\n       animations.get(i).setProgress(progress);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -147,7 +147,8 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     if (timeRemapping == null) {\n       progress -= layerModel.getStartProgress();\n     }\n-    if (layerModel.getTimeStretch() != 0) {\n+    //Time stretch needs to be divided if is not \"__container\"\n+    if (layerModel.getTimeStretch() != 0 && !\"__container\".equals(layerModel.getName())) {\n       progress /= layerModel.getTimeStretch();\n     }\n     for (int i = layers.size() - 1; i >= 0; i--) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -248,12 +248,6 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n     }\n     reader.endObject();\n \n-    // Bodymovin pre-scales the in frame and out frame by the time stretch. However, that will\n-    // cause the stretch to be double counted since the in out animation gets treated the same\n-    // as all other animations and will have stretch applied to it again.\n-    inFrame /= timeStretch;\n-    outFrame /= timeStretch;\n-\n     List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();\n     // Before the in frame\n     if (inFrame > 0) {",
    "output": "Fixed a bug in time stretch (#1818)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java b/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextDelegate.java\n@@ -1,16 +1,18 @@\n package com.airbnb.lottie;\n \n import androidx.annotation.Nullable;\n+import androidx.annotation.RestrictTo;\n import androidx.annotation.VisibleForTesting;\n \n import java.util.HashMap;\n import java.util.Map;\n \n /**\n- * Extend this class to replace animation text with custom text. This can be useful to handle\n- * translations.\n+ * To replace static text in an animation at runtime, create an instance of this class and call {@link #setText(String, String)} to\n+ * replace the hard coded animation text (input) with the text of your choosing (output).\n  * <p>\n- * The only method you should have to override is {@link #getText(String)}.\n+ * Alternatively, extend this class and override {@link #getText(String)} and if the text hasn't already been set\n+ * by {@link #setText(String, String)} then it will call {@link #getText(String)}.\n  */\n public class TextDelegate {\n \n@@ -43,7 +45,7 @@ public TextDelegate(@SuppressWarnings(\"NullableProblems\") LottieDrawable drawabl\n    * Override this to replace the animation text with something dynamic. This can be used for\n    * translations or custom data.\n    */\n-  private String getText(String input) {\n+  public String getText(String input) {\n     return input;\n   }\n \n@@ -72,13 +74,14 @@ public void invalidateText(String input) {\n   }\n \n   /**\n-   * Invalidates all cached strings\n+   * Invalidates all cached strings.\n    */\n   public void invalidateAllText() {\n     stringMap.clear();\n     invalidate();\n   }\n \n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public final String getTextInternal(String input) {\n     if (cacheText && stringMap.containsKey(input)) {\n       return stringMap.get(input);",
    "output": "Made TextDelegate.getText public and updates its docs (#1792)\n\nFixes #1774"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n@@ -201,7 +201,11 @@ private static <T> Keyframe<T> parseMultiDimensionalKeyframe(LottieComposition c\n                   } else {\n                     reader.beginArray();\n                     xCp1x = (float) reader.nextDouble();\n-                    yCp1x = (float) reader.nextDouble();\n+                    if (reader.peek() == JsonReader.Token.NUMBER) {\n+                      yCp1x = (float) reader.nextDouble();\n+                    } else {\n+                      yCp1x = xCp1x;\n+                    }\n                     reader.endArray();\n                   }\n                   break;\n@@ -212,7 +216,11 @@ private static <T> Keyframe<T> parseMultiDimensionalKeyframe(LottieComposition c\n                   } else {\n                     reader.beginArray();\n                     xCp1y = (float) reader.nextDouble();\n-                    yCp1y = (float) reader.nextDouble();\n+                    if (reader.peek() == JsonReader.Token.NUMBER) {\n+                      yCp1y = (float) reader.nextDouble();\n+                    } else {\n+                      yCp1y = xCp1y;\n+                    }\n                     reader.endArray();\n                   }\n                   break;\n@@ -243,7 +251,11 @@ private static <T> Keyframe<T> parseMultiDimensionalKeyframe(LottieComposition c\n                   } else {\n                     reader.beginArray();\n                     xCp2x = (float) reader.nextDouble();\n-                    yCp2x = (float) reader.nextDouble();\n+                    if (reader.peek() == JsonReader.Token.NUMBER) {\n+                      yCp2x = (float) reader.nextDouble();\n+                    } else {\n+                      yCp2x = xCp2x;\n+                    }\n                     reader.endArray();\n                   }\n                   break;\n@@ -254,7 +266,11 @@ private static <T> Keyframe<T> parseMultiDimensionalKeyframe(LottieComposition c\n                   } else {\n                     reader.beginArray();\n                     xCp2y = (float) reader.nextDouble();\n-                    yCp2y = (float) reader.nextDouble();\n+                    if (reader.peek() == JsonReader.Token.NUMBER) {\n+                      yCp2y = (float) reader.nextDouble();\n+                    } else {\n+                      yCp2y = xCp2y;\n+                    }\n                     reader.endArray();\n                   }\n                   break;",
    "output": "Improve animations exported with Flow (#1771)\n\nFlow exports split keyframes with single values for control points. The intention is for you to use the same value for the in and out point for them.\r\n\r\nFixes #1750"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -441,7 +441,7 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n         } else if (entry.getName().contains(\".json\")) {\n           com.airbnb.lottie.parser.moshi.JsonReader reader = JsonReader.of(buffer(source(inputStream)));\n           composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();\n-        } else if (entryName.contains(\".png\") || entryName.contains(\".webp\")) {\n+        } else if (entryName.contains(\".png\") || entryName.contains(\".webp\") || entryName.contains(\".jpg\") || entryName.contains(\".jpeg\")) {\n           String[] splitName = entryName.split(\"/\");\n           String name = splitName[splitName.length - 1];\n           images.put(name, BitmapFactory.decodeStream(inputStream));",
    "output": "Add support for jpgs in zip files (#1769)\n\nFixes #1767"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -72,8 +72,13 @@ public GradientColor parse(JsonReader reader, float scale)\n       double value = array.get(i);\n       switch (i % 4) {\n         case 0:\n-          // position\n-          positions[colorIndex] = (float) value;\n+          // Positions should monotonically increase. If they don't, it can cause rendering problems on some phones.\n+          // https://github.com/airbnb/lottie-android/issues/1675\n+          if (colorIndex > 0 && positions[colorIndex - 1] >= (float) value) {\n+            positions[colorIndex] = (float) value + 0.01f;\n+          } else {\n+            positions[colorIndex] = (float) value;\n+          }\n           break;\n         case 1:\n           r = (int) (value * 255);",
    "output": "Prevent duplicate positions in gradient fills (#1768)\n\nFixes #1675"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -23,6 +23,7 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.annotation.RequiresApi;\n+import androidx.annotation.RestrictTo;\n \n import com.airbnb.lottie.manager.FontAssetManager;\n import com.airbnb.lottie.manager.ImageAssetManager;\n@@ -75,6 +76,15 @@ public void onAnimationUpdate(ValueAnimator animation) {\n       }\n     }\n   };\n+\n+  /**\n+   * ImageAssetManager created externally. By Compose, for example.\n+   */\n+  @Nullable\n+  private ImageAssetManager imageAssetManagerOverride;\n+  /**\n+   * ImageAssetManager created automatically by Lottie for views.\n+   */\n   @Nullable\n   private ImageAssetManager imageAssetManager;\n   @Nullable\n@@ -1095,7 +1105,18 @@ public Bitmap getImageAsset(String id) {\n     return null;\n   }\n \n+  /**\n+   * Use by Lottie internally when outside of a normal View tree such as for Jetpack Compose.\n+   */\n+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n+  void setImageAssetManager(@Nullable ImageAssetManager imageAssetManager) {\n+    this.imageAssetManagerOverride = imageAssetManager;\n+  }\n+\n   private ImageAssetManager getImageAssetManager() {\n+    if (imageAssetManagerOverride != null) {\n+      return imageAssetManagerOverride;\n+    }\n     if (getCallback() == null) {\n       // We can't get a bitmap since we can't get a Context from the callback.\n       return null;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -24,16 +24,16 @@ public class ImageAssetManager {\n   private static final Object bitmapHashLock = new Object();\n \n   private final Context context;\n-  private String imagesFolder;\n+  private final String imagesFolder;\n   @Nullable private ImageAssetDelegate delegate;\n   private final Map<String, LottieImageAsset> imageAssets;\n \n   public ImageAssetManager(Drawable.Callback callback, String imagesFolder,\n       ImageAssetDelegate delegate, Map<String, LottieImageAsset> imageAssets) {\n-    this.imagesFolder = imagesFolder;\n-    if (!TextUtils.isEmpty(imagesFolder) &&\n-        this.imagesFolder.charAt(this.imagesFolder.length() - 1) != '/') {\n-      this.imagesFolder += '/';\n+    if (!TextUtils.isEmpty(imagesFolder) && imagesFolder.charAt(imagesFolder.length() - 1) != '/') {\n+      this.imagesFolder = imagesFolder + '/';\n+    } else {\n+      this.imagesFolder = imagesFolder;\n     }\n \n     if (!(callback instanceof View)) {\n@@ -48,6 +48,17 @@ public ImageAssetManager(Drawable.Callback callback, String imagesFolder,\n     setDelegate(delegate);\n   }\n \n+  public ImageAssetManager(Context context, String imagesFolder, ImageAssetDelegate delegate, Map<String, LottieImageAsset> imageAssets) {\n+    this.context = context;\n+    if (!TextUtils.isEmpty(imagesFolder) && imagesFolder.charAt(imagesFolder.length() - 1) != '/') {\n+      this.imagesFolder = imagesFolder + '/';\n+    } else {\n+      this.imagesFolder = imagesFolder;\n+    }\n+    this.imageAssets = imageAssets;\n+    setDelegate(delegate);\n+  }\n+\n   public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     this.delegate = assetDelegate;\n   }",
    "output": "[Compose] Add support for images (#1766)\n\nBecause this requires a new Lottie API, this will only work with a 3.6.2-SNAPSHOT or newer.\r\n\r\nFixes #1730"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -219,6 +219,13 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setRenderMode(RenderMode.values()[renderModeOrdinal]);\n     }\n \n+    setIgnoreDisabledSystemAnimations(\n+        ta.getBoolean(\n+            R.styleable.LottieAnimationView_lottie_ignoreDisabledSystemAnimations,\n+            false\n+        )\n+    );\n+\n     ta.recycle();\n \n     lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n@@ -353,6 +360,17 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n     super.onDetachedFromWindow();\n   }\n \n+  /**\n+   * Allows ignoring system animations settings, therefore allowing animations to run even if they are disabled.\n+   *\n+   * Defaults to false.\n+   *\n+   * @param ignore if true animations will run even when they are disabled in the system settings.\n+   */\n+  public void setIgnoreDisabledSystemAnimations(boolean ignore) {\n+    lottieDrawable.setIgnoreDisabledSystemAnimations(ignore);\n+  }\n+\n   /**\n    * Enable this to get merge path support for devices running KitKat (19) and above.\n    *\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -59,7 +59,11 @@ private interface LazyCompositionTask {\n   private LottieComposition composition;\n   private final LottieValueAnimator animator = new LottieValueAnimator();\n   private float scale = 1f;\n+\n+  //Call animationsEnabled() instead of using these fields directly\n   private boolean systemAnimationsEnabled = true;\n+  private boolean ignoreSystemAnimationsDisabled = false;\n+\n   private boolean safeMode = false;\n \n   private final ArrayList<LazyCompositionTask> lazyCompositionTasks = new ArrayList<>();\n@@ -445,10 +449,10 @@ public void run(LottieComposition composition) {\n       return;\n     }\n \n-    if (systemAnimationsEnabled || getRepeatCount() == 0) {\n+    if (animationsEnabled() || getRepeatCount() == 0) {\n       animator.playAnimation();\n     }\n-    if (!systemAnimationsEnabled) {\n+    if (!animationsEnabled()) {\n       setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n       animator.endAnimation();\n     }\n@@ -476,10 +480,10 @@ public void run(LottieComposition composition) {\n       return;\n     }\n \n-    if (systemAnimationsEnabled || getRepeatCount() == 0) {\n+    if (animationsEnabled() || getRepeatCount() == 0) {\n       animator.resumeAnimation();\n     }\n-    if (!systemAnimationsEnabled) {\n+    if (!animationsEnabled()) {\n       setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n       animator.endAnimation();\n     }\n@@ -866,12 +870,27 @@ public boolean isAnimating() {\n     return animator.isRunning();\n   }\n \n+  private boolean animationsEnabled() {\n+    return systemAnimationsEnabled || ignoreSystemAnimationsDisabled;\n+  }\n+\n   void setSystemAnimationsAreEnabled(Boolean areEnabled) {\n     systemAnimationsEnabled = areEnabled;\n   }\n \n // </editor-fold>\n \n+  /**\n+   * Allows ignoring system animations settings, therefore allowing animations to run even if they are disabled.\n+   *\n+   * Defaults to false.\n+   *\n+   * @param ignore if true animations will run even when they are disabled in the system settings.\n+   */\n+  public void setIgnoreDisabledSystemAnimations(boolean ignore) {\n+    ignoreSystemAnimationsDisabled = ignore;\n+  }\n+\n   /**\n    * Set the scale on the current composition. The only cost of this function is re-rendering the\n    * current frame so you may call it frequent to scale something up or down.",
    "output": "[New API] Added override for system animations enabled behavior (#1747)\n\nAllow overriding the default behavior of respecting when system animations are disabled.\r\nXML: app:lottie_ignoreDisabledSystemAnimations=\"true\"\r\nCode: setIgnoreDisabledSystemAnimations(boolean)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -107,6 +107,11 @@ public void onResult(Throwable result) {\n   private boolean playAnimationWhenShown = false;\n   private boolean wasAnimatingWhenNotShown = false;\n   private boolean wasAnimatingWhenDetached = false;\n+  /**\n+   * When we set a new composition, we set LottieDrawable to null then back again so that ImageView re-checks its bounds.\n+   * However, this causes the drawable to get unscheduled briefly. Normally, we would pause the animation but in this case, we don't want to.\n+   */\n+  private boolean ignoreUnschedule = false;\n \n   private boolean autoPlay = false;\n   private boolean cacheComposition = true;\n@@ -238,10 +243,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n   }\n \n   @Override public void unscheduleDrawable(Drawable who) {\n-    if (who == lottieDrawable && lottieDrawable.isAnimating()) {\n-      cancelAnimation();\n-    } else if (who instanceof LottieDrawable && ((LottieDrawable) who).isAnimating()) {\n-      ((LottieDrawable) who).cancelAnimation();\n+    if (!ignoreUnschedule && who == lottieDrawable && lottieDrawable.isAnimating()) {\n+      pauseAnimation();\n+    } else if (!ignoreUnschedule && who instanceof LottieDrawable && ((LottieDrawable) who).isAnimating()) {\n+      ((LottieDrawable) who).pauseAnimation();\n     }\n     super.unscheduleDrawable(who);\n   }\n@@ -327,7 +332,7 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n \n   @Override protected void onAttachedToWindow() {\n     super.onAttachedToWindow();\n-    if (!isInEditMode() &&( autoPlay || wasAnimatingWhenDetached)) {\n+    if (!isInEditMode() && (autoPlay || wasAnimatingWhenDetached)) {\n       playAnimation();\n       // Autoplay from xml should only apply once.\n       autoPlay = false;\n@@ -555,7 +560,9 @@ public void setComposition(@NonNull LottieComposition composition) {\n     lottieDrawable.setCallback(this);\n \n     this.composition = composition;\n+    ignoreUnschedule = true;\n     boolean isNewComposition = lottieDrawable.setComposition(composition);\n+    ignoreUnschedule = false;\n     enableOrDisableHardwareLayer();\n     if (getDrawable() == lottieDrawable && !isNewComposition) {\n       // We can avoid re-setting the drawable, and invalidating the view, since the composition",
    "output": "Ignore unscheduleDrawable when updating a composition (#1737)\n\nFixes #1727"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -113,7 +113,12 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n       Logger.warning(\"Unable to open asset.\", e);\n       return null;\n     }\n-    bitmap = BitmapFactory.decodeStream(is, null, opts);\n+    try {\n+      bitmap = BitmapFactory.decodeStream(is, null, opts);\n+    } catch (IllegalArgumentException e) {\n+      Logger.warning(\"Unable to decode image.\", e);\n+      return null;\n+    }\n     bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n     return putBitmap(id, bitmap);\n   }",
    "output": "Fail quietly if ImageAssetManager fails to decode a bitmap (#1729)\n\nFixes #1718"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -214,9 +214,6 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setRenderMode(RenderMode.values()[renderModeOrdinal]);\n     }\n \n-    if (getScaleType() != null) {\n-      lottieDrawable.setScaleType(getScaleType());\n-    }\n     ta.recycle();\n \n     lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n@@ -965,13 +962,6 @@ public float getScale() {\n     return lottieDrawable.getScale();\n   }\n \n-  @Override public void setScaleType(ScaleType scaleType) {\n-    super.setScaleType(scaleType);\n-    if (lottieDrawable != null) {\n-      lottieDrawable.setScaleType(scaleType);\n-    }\n-  }\n-\n   @MainThread\n   public void cancelAnimation() {\n     wasAnimatingWhenDetached = false;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -33,10 +33,8 @@\n import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Set;\n \n import androidx.annotation.FloatRange;\n import androidx.annotation.IntDef;\n@@ -51,10 +49,8 @@\n  *\n  * @see <a href=\"http://airbnb.io/lottie\">Full Documentation</a>\n  */\n-@SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+@SuppressWarnings({\"WeakerAccess\"})\n public class LottieDrawable extends Drawable implements Drawable.Callback, Animatable {\n-  private static final String TAG = LottieDrawable.class.getSimpleName();\n-\n   private interface LazyCompositionTask {\n     void run(LottieComposition composition);\n   }\n@@ -66,7 +62,6 @@ private interface LazyCompositionTask {\n   private boolean systemAnimationsEnabled = true;\n   private boolean safeMode = false;\n \n-  private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   private final ArrayList<LazyCompositionTask> lazyCompositionTasks = new ArrayList<>();\n   private final ValueAnimator.AnimatorUpdateListener  progressUpdateListener = new ValueAnimator.AnimatorUpdateListener() {\n     @Override\n@@ -77,8 +72,6 @@ public void onAnimationUpdate(ValueAnimator animation) {\n     }\n   };\n   @Nullable\n-  private ImageView.ScaleType scaleType;\n-  @Nullable\n   private ImageAssetManager imageAssetManager;\n   @Nullable\n   private String imageAssetsFolder;\n@@ -183,10 +176,6 @@ public boolean isMergePathsEnabledForKitKatAndAbove() {\n    * `setImageAssetsFolder(\"airbnb_loader/\");`.\n    * <p>\n    * <p>\n-   * If you use LottieDrawable directly, you MUST call {@link #recycleBitmaps()} when you\n-   * are done. Calling {@link #recycleBitmaps()} doesn't have to be final and {@link LottieDrawable}\n-   * will recreate the bitmaps if needed but they will leak if you don't recycle them.\n-   * <p>\n    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes\n    * from After Effects. If your images look like they could be represented with vector shapes,\n    * see if it is possible to convert them to shape layers and re-export your animation. Check\n@@ -219,7 +208,6 @@ public boolean setComposition(LottieComposition composition) {\n     animator.setComposition(composition);\n     setProgress(animator.getAnimatedFraction());\n     setScale(scale);\n-    updateBounds();\n \n     // We copy the tasks to a new ArrayList so that if this method is called from multiple threads,\n     // then there won't be two iterators iterating and removing at the same time.\n@@ -399,13 +387,25 @@ public void draw(@NonNull Canvas canvas) {\n   }\n \n   private void drawInternal(@NonNull Canvas canvas) {\n-    if (ImageView.ScaleType.FIT_XY == scaleType) {\n+    if (!boundsMatchesCompositionAspectRatio()) {\n       drawWithNewAspectRatio(canvas);\n     } else {\n       drawWithOriginalAspectRatio(canvas);\n     }\n   }\n \n+  private boolean boundsMatchesCompositionAspectRatio() {\n+    LottieComposition composition = this.composition;\n+    if (composition == null || getBounds().isEmpty()) {\n+      return true;\n+    }\n+    return aspectRatio(getBounds()) == aspectRatio(composition.getBounds());\n+  }\n+\n+  private float aspectRatio(Rect rect) {\n+    return rect.width() / (float) rect.height();\n+  }\n+\n // <editor-fold desc=\"animator\">\n \n   @MainThread\n@@ -655,8 +655,8 @@ public void run(LottieComposition composition) {\n     }\n     int startFrame = (int) startMarker.startFrame;\n \n-    Marker endMarker = composition.getMarker(endMarkerName);\n-    if (endMarkerName == null) {\n+    final Marker endMarker = composition.getMarker(endMarkerName);\n+    if (endMarker == null) {\n       throw new IllegalArgumentException(\"Cannot find marker with name \" + endMarkerName + \".\");\n     }\n     int endFrame = (int) (endMarker.startFrame + (playEndMarkerStartFrame ? 1f : 0f));\n@@ -859,6 +859,7 @@ public boolean isLooping() {\n   public boolean isAnimating() {\n     // On some versions of Android, this is called from the LottieAnimationView constructor, before animator was created.\n     // https://github.com/airbnb/lottie-android/issues/1430\n+    //noinspection ConstantConditions\n     if (animator == null) {\n       return false;\n     }\n@@ -885,7 +886,6 @@ void setSystemAnimationsAreEnabled(Boolean areEnabled) {\n    */\n   public void setScale(float scale) {\n     this.scale = scale;\n-    updateBounds();\n   }\n \n   /**\n@@ -899,8 +899,7 @@ public void setScale(float scale) {\n    * the documentation at http://airbnb.io/lottie for more information about importing shapes from\n    * Sketch or Illustrator to avoid this.\n    */\n-  public void setImageAssetDelegate(\n-      @SuppressWarnings(\"NullableProblems\") ImageAssetDelegate assetDelegate) {\n+  public void setImageAssetDelegate(ImageAssetDelegate assetDelegate) {\n     this.imageAssetDelegate = assetDelegate;\n     if (imageAssetManager != null) {\n       imageAssetManager.setDelegate(assetDelegate);\n@@ -910,8 +909,7 @@ public void setImageAssetDelegate(\n   /**\n    * Use this to manually set fonts.\n    */\n-  public void setFontAssetDelegate(\n-      @SuppressWarnings(\"NullableProblems\") FontAssetDelegate assetDelegate) {\n+  public void setFontAssetDelegate(FontAssetDelegate assetDelegate) {\n     this.fontAssetDelegate = assetDelegate;\n     if (fontAssetManager != null) {\n       fontAssetManager.setDelegate(assetDelegate);\n@@ -939,15 +937,6 @@ public LottieComposition getComposition() {\n     return composition;\n   }\n \n-  private void updateBounds() {\n-    if (composition == null) {\n-      return;\n-    }\n-    float scale = getScale();\n-    setBounds(0, 0, (int) (composition.getBounds().width() * scale),\n-        (int) (composition.getBounds().height() * scale));\n-  }\n-\n   public void cancelAnimation() {\n     lazyCompositionTasks.clear();\n     animator.cancel();\n@@ -993,7 +982,7 @@ public List<KeyPath> resolveKeyPath(KeyPath keyPath) {\n \n   /**\n    * Add an property callback for the specified {@link KeyPath}. This {@link KeyPath} can resolve\n-   * to multiple contents. In that case, the callbacks's value will apply to all of them.\n+   * to multiple contents. In that case, the callback's value will apply to all of them.\n    * <p>\n    * Internally, this will check if the {@link KeyPath} has already been resolved with\n    * {@link #resolveKeyPath(KeyPath)} and will resolve it if it hasn't.\n@@ -1164,10 +1153,6 @@ public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what) {\n     callback.unscheduleDrawable(this, what);\n   }\n \n-  void setScaleType(ImageView.ScaleType scaleType) {\n-    this.scaleType = scaleType;\n-  }\n-\n   /**\n    * If the composition is larger than the canvas, we have to use a different method to scale it up.\n    * See the comments in {@link #draw(Canvas)} for more info.\n@@ -1265,49 +1250,4 @@ private void drawWithOriginalAspectRatio(Canvas canvas) {\n       canvas.restoreToCount(saveCount);\n     }\n   }\n-\n-  private static class ColorFilterData {\n-\n-    final String layerName;\n-    @Nullable\n-    final String contentName;\n-    @Nullable\n-    final ColorFilter colorFilter;\n-\n-    ColorFilterData(@Nullable String layerName, @Nullable String contentName,\n-                    @Nullable ColorFilter colorFilter) {\n-      this.layerName = layerName;\n-      this.contentName = contentName;\n-      this.colorFilter = colorFilter;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-      int hashCode = 17;\n-      if (layerName != null) {\n-        hashCode = hashCode * 31 * layerName.hashCode();\n-      }\n-\n-      if (contentName != null) {\n-        hashCode = hashCode * 31 * contentName.hashCode();\n-      }\n-      return hashCode;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-      if (this == obj) {\n-        return true;\n-      }\n-\n-      if (!(obj instanceof ColorFilterData)) {\n-        return false;\n-      }\n-\n-      final ColorFilterData other = (ColorFilterData) obj;\n-\n-      return hashCode() == other.hashCode() && colorFilter == other.colorFilter;\n-\n-    }\n-  }\n }",
    "output": "Don't set LottieDrawable bounds from within itself (#1713)\n\nDrawables should provide intrinsic bounds to its consumers and should respect the bounds set on it. LottieDrawable was not conforming to this because it was settings its own bounds to the composition bounds. This caused issues like that reported in #1542.\r\n\r\nFixes #1542"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -69,6 +69,10 @@ public interface LottieProperty {\n   PointF TRANSFORM_ANCHOR_POINT = new PointF();\n   /** In Px */\n   PointF TRANSFORM_POSITION = new PointF();\n+  /** When split dimensions is enabled. In Px */\n+  Float TRANSFORM_POSITION_X = 15f;\n+  /** When split dimensions is enabled. In Px */\n+  Float TRANSFORM_POSITION_Y = 16f;\n   /** In Px */\n   PointF ELLIPSE_SIZE = new PointF();\n   /** In Px */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n@@ -3,14 +3,22 @@\n import android.graphics.PointF;\n \n import com.airbnb.lottie.value.Keyframe;\n+import com.airbnb.lottie.value.LottieValueCallback;\n \n import java.util.Collections;\n \n+import androidx.annotation.Nullable;\n+\n public class SplitDimensionPathKeyframeAnimation extends BaseKeyframeAnimation<PointF, PointF> {\n   private final PointF point = new PointF();\n+  private final PointF pointWithCallbackValues = new PointF();\n   private final BaseKeyframeAnimation<Float, Float> xAnimation;\n   private final BaseKeyframeAnimation<Float, Float> yAnimation;\n \n+  @Nullable protected LottieValueCallback<Float> xValueCallback;\n+  @Nullable protected LottieValueCallback<Float> yValueCallback;\n+\n+\n   public SplitDimensionPathKeyframeAnimation(\n       BaseKeyframeAnimation<Float, Float> xAnimation,\n       BaseKeyframeAnimation<Float, Float> yAnimation) {\n@@ -22,6 +30,26 @@ public SplitDimensionPathKeyframeAnimation(\n     setProgress(getProgress());\n   }\n \n+  public void setXValueCallback(@Nullable LottieValueCallback<Float> xValueCallback) {\n+    if (this.xValueCallback != null) {\n+      this.xValueCallback.setAnimation(null);\n+    }\n+    this.xValueCallback = xValueCallback;\n+    if (xValueCallback != null) {\n+      xValueCallback.setAnimation(this);\n+    }\n+  }\n+\n+  public void setYValueCallback(@Nullable LottieValueCallback<Float> yValueCallback) {\n+    if (this.yValueCallback != null) {\n+      this.yValueCallback.setAnimation(null);\n+    }\n+    this.yValueCallback = yValueCallback;\n+    if (yValueCallback != null) {\n+      yValueCallback.setAnimation(this);\n+    }\n+  }\n+\n   @Override public void setProgress(float progress) {\n     xAnimation.setProgress(progress);\n     yAnimation.setProgress(progress);\n@@ -36,6 +64,40 @@ public SplitDimensionPathKeyframeAnimation(\n   }\n \n   @Override PointF getValue(Keyframe<PointF> keyframe, float keyframeProgress) {\n-    return point;\n+    Float xCallbackValue = null;\n+    Float yCallbackValue = null;\n+\n+    if (xValueCallback != null) {\n+      Keyframe<Float> xKeyframe = xAnimation.getCurrentKeyframe();\n+      if (xKeyframe != null) {\n+          float progress = xAnimation.getInterpolatedCurrentKeyframeProgress();\n+          Float endFrame = xKeyframe.endFrame;\n+          xCallbackValue = xValueCallback.getValueInternal(xKeyframe.startFrame, endFrame == null ? xKeyframe.startFrame : endFrame, xKeyframe.startValue,\n+              xKeyframe.endValue, keyframeProgress, keyframeProgress, progress);\n+      }\n+    }\n+    if (yValueCallback != null) {\n+      Keyframe<Float> yKeyframe = yAnimation.getCurrentKeyframe();\n+      if (yKeyframe != null) {\n+        float progress = yAnimation.getInterpolatedCurrentKeyframeProgress();\n+        Float endFrame = yKeyframe.endFrame;\n+        yCallbackValue = yValueCallback.getValueInternal(yKeyframe.startFrame, endFrame == null ? yKeyframe.startFrame : endFrame, yKeyframe.startValue,\n+            yKeyframe.endValue, keyframeProgress, keyframeProgress, progress);\n+      }\n+    }\n+\n+    if (xCallbackValue == null) {\n+      pointWithCallbackValues.set(point.x, 0f);\n+    } else {\n+      pointWithCallbackValues.set(xCallbackValue, 0f);\n+    }\n+\n+    if (yCallbackValue == null) {\n+      pointWithCallbackValues.set(pointWithCallbackValues.x, point.y);\n+    } else {\n+      pointWithCallbackValues.set(pointWithCallbackValues.x, yCallbackValue);\n+    }\n+\n+    return pointWithCallbackValues;\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n@@ -17,6 +17,8 @@\n import static com.airbnb.lottie.LottieProperty.TRANSFORM_END_OPACITY;\n import static com.airbnb.lottie.LottieProperty.TRANSFORM_OPACITY;\n import static com.airbnb.lottie.LottieProperty.TRANSFORM_POSITION;\n+import static com.airbnb.lottie.LottieProperty.TRANSFORM_POSITION_X;\n+import static com.airbnb.lottie.LottieProperty.TRANSFORM_POSITION_Y;\n import static com.airbnb.lottie.LottieProperty.TRANSFORM_ROTATION;\n import static com.airbnb.lottie.LottieProperty.TRANSFORM_SCALE;\n import static com.airbnb.lottie.LottieProperty.TRANSFORM_SKEW;\n@@ -278,6 +280,10 @@ public <T> boolean applyValueCallback(T property, @Nullable LottieValueCallback<\n       } else {\n         position.setValueCallback((LottieValueCallback<PointF>) callback);\n       }\n+    } else if (property == TRANSFORM_POSITION_X && position instanceof SplitDimensionPathKeyframeAnimation) {\n+      ((SplitDimensionPathKeyframeAnimation) position).setXValueCallback((LottieValueCallback<Float>) callback);\n+    } else if (property == TRANSFORM_POSITION_Y && position instanceof SplitDimensionPathKeyframeAnimation) {\n+      ((SplitDimensionPathKeyframeAnimation) position).setYValueCallback((LottieValueCallback<Float>) callback);\n     } else if (property == TRANSFORM_SCALE) {\n       if (scale == null) {\n         scale = new ValueCallbackKeyframeAnimation(callback, new ScaleXY());",
    "output": "Allow controlling split dimension transform positions with dynamic properties (#1714)\n\nFixes #1645"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -566,8 +566,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n       return;\n     } else if (!isNewComposition) {\n       // The current drawable isn't lottieDrawable but the drawable already has the right composition.\n-      setImageDrawable(null);\n-      setImageDrawable(lottieDrawable);\n+      setLottieDrawable();\n     }\n \n     // This is needed to makes sure that the animation is properly played/paused for the current visibility state.\n@@ -958,8 +957,7 @@ public <T> void addValueCallback(KeyPath keyPath, T property,\n   public void setScale(float scale) {\n     lottieDrawable.setScale(scale);\n     if (getDrawable() == lottieDrawable) {\n-      setImageDrawable(null);\n-      setImageDrawable(lottieDrawable);\n+      setLottieDrawable();\n     }\n   }\n \n@@ -1162,6 +1160,18 @@ public void removeAllLottieOnCompositionLoadedListener() {\n     lottieOnCompositionLoadedListeners.clear();\n   }\n \n+  private void setLottieDrawable() {\n+    boolean wasAnimating = isAnimating();\n+    // Set the drawable to null first because the underlying LottieDrawable's intrinsic bounds can change\n+    // if the composition changes.\n+    setImageDrawable(null);\n+    setImageDrawable(lottieDrawable);\n+    if (wasAnimating) {\n+      // This is necessary because lottieDrawable will get unscheduled and canceled when the drawable is set to null.\n+      lottieDrawable.resumeAnimation();\n+    }\n+  }\n+\n   private static class SavedState extends BaseSavedState {\n     String animationName;\n     int animationResId;",
    "output": "Resume animations if the drawable gets reset (#1712)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -226,7 +226,11 @@ public boolean setComposition(LottieComposition composition) {\n     Iterator<LazyCompositionTask> it = new ArrayList<>(lazyCompositionTasks).iterator();\n     while (it.hasNext()) {\n       LazyCompositionTask t = it.next();\n-      t.run(composition);\n+      // The task should never be null but it appears to happen in rare cases. Maybe it's an oem-specific or ART bug.\n+      // https://github.com/airbnb/lottie-android/issues/1702\n+      if (t != null) {\n+        t.run(composition);\n+      }\n       it.remove();\n     }\n     lazyCompositionTasks.clear();",
    "output": "Wrap lazy composition tasks with a null check (#1711)\n\nI can't figure out why this would happen but if it is happening, it's better to potentially have an undesirable animation missing some lazy composition tasks rather than crash.\r\n\r\nFixes #1702"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java\n@@ -221,7 +221,7 @@ private boolean hasTwoOrMoreDrawableContent() {\n \n   @Override public void resolveKeyPath(\n       KeyPath keyPath, int depth, List<KeyPath> accumulator, KeyPath currentPartialKeyPath) {\n-    if (!keyPath.matches(getName(), depth)) {\n+    if (!keyPath.matches(getName(), depth) && !\"__container\".equals(getName())) {\n       return;\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -592,6 +592,18 @@ public void setContents(List<Content> contentsBefore, List<Content> contentsAfte\n   @Override\n   public void resolveKeyPath(\n       KeyPath keyPath, int depth, List<KeyPath> accumulator, KeyPath currentPartialKeyPath) {\n+    if (matteLayer != null) {\n+      KeyPath matteCurrentPartialKeyPath = currentPartialKeyPath.addKey(matteLayer.getName());\n+      if (keyPath.fullyResolvesTo(matteLayer.getName(), depth)) {\n+        accumulator.add(matteCurrentPartialKeyPath.resolve(matteLayer));\n+      }\n+\n+      if (keyPath.propagateToChildren(getName(), depth)) {\n+        int newDepth = depth + keyPath.incrementDepthBy(matteLayer.getName(), depth);\n+        matteLayer.resolveChildKeyPath(keyPath, newDepth, accumulator, matteCurrentPartialKeyPath);\n+      }\n+    }\n+\n     if (!keyPath.matches(getName(), depth)) {\n       return;\n     }",
    "output": "Allow targeting mattes with KeyPaths (#1710)\n\nFixes #974"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -3,10 +3,10 @@\n import android.animation.Animator;\n import android.animation.ValueAnimator;\n import android.content.Context;\n+import android.content.res.ColorStateList;\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n-import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n@@ -25,6 +25,7 @@\n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n import androidx.annotation.RequiresApi;\n+import androidx.appcompat.content.res.AppCompatResources;\n import androidx.appcompat.widget.AppCompatImageView;\n import androidx.core.view.ViewCompat;\n \n@@ -194,8 +195,9 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n         R.styleable.LottieAnimationView_lottie_enableMergePathsForKitKatAndAbove, false));\n     if (ta.hasValue(R.styleable.LottieAnimationView_lottie_colorFilter)) {\n-      SimpleColorFilter filter = new SimpleColorFilter(\n-          ta.getColor(R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT));\n+      int colorRes = ta.getResourceId(R.styleable.LottieAnimationView_lottie_colorFilter, -1);\n+      ColorStateList csl = AppCompatResources.getColorStateList(getContext(), colorRes);\n+      SimpleColorFilter filter = new SimpleColorFilter(csl.getDefaultColor());\n       KeyPath keyPath = new KeyPath(\"**\");\n       LottieValueCallback<ColorFilter> callback = new LottieValueCallback<ColorFilter>(filter);\n       addValueCallback(keyPath, LottieProperty.COLOR_FILTER, callback);",
    "output": "Add support for color state lists and theme attributes in color filters (#1708)\n\nFixes #1551"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -238,6 +238,15 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n     super.setImageBitmap(bm);\n   }\n \n+  @Override public void unscheduleDrawable(Drawable who) {\n+    if (who == lottieDrawable && lottieDrawable.isAnimating()) {\n+      cancelAnimation();\n+    } else if (who instanceof LottieDrawable && ((LottieDrawable) who).isAnimating()) {\n+      ((LottieDrawable) who).cancelAnimation();\n+    }\n+    super.unscheduleDrawable(who);\n+  }\n+\n   @Override public void invalidateDrawable(@NonNull Drawable dr) {\n     if (getDrawable() == lottieDrawable) {\n       // We always want to invalidate the root drawable so it redraws the whole drawable.",
    "output": "Cancel animations when LottieDrawable is unschedules"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -256,7 +256,10 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n \n     L.endSection(\"Layer#computeBounds\");\n \n-    if (!rect.isEmpty()) {\n+    // Ensure that what we are drawing is >=1px of width and height.\n+    // On older devices, drawing to an offscreen buffer of <1px would draw back as a black bar.\n+    // https://github.com/airbnb/lottie-android/issues/1625\n+    if (rect.width() >= 1f && rect.height() >= 1f) {\n       L.beginSection(\"Layer#saveLayer\");\n       contentPaint.setAlpha(255);\n       Utils.saveLayerCompat(canvas, rect, contentPaint);",
    "output": "Don't render masks or mattes of <1px (#1704)\n\nFixes #1625"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -553,6 +553,10 @@ public void setComposition(@NonNull LottieComposition composition) {\n       // We can avoid re-setting the drawable, and invalidating the view, since the composition\n       // hasn't changed.\n       return;\n+    } else if (!isNewComposition) {\n+      // The current drawable isn't lottieDrawable but the drawable already has the right composition.\n+      setImageDrawable(null);\n+      setImageDrawable(lottieDrawable);\n     }\n \n     // This is needed to makes sure that the animation is properly played/paused for the current visibility state.",
    "output": "Reset LottieDrawable when setting the same composition a second time (#1703)\n\nFixes #1696"
  },
  {
    "input": "diff --git a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n@@ -3,11 +3,11 @@\n import com.airbnb.lottie.model.LottieCompositionCache;\n \n import com.airbnb.lottie.parser.moshi.JsonReader;\n-import org.apache.tools.ant.filters.StringInputStream;\n import org.junit.Before;\n import org.junit.Test;\n import org.robolectric.RuntimeEnvironment;\n \n+import java.io.ByteArrayInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -54,15 +54,15 @@ public void testLoadInvalidJsonString() {\n \n     @Test\n     public void testLoadJsonReader() {\n-        JsonReader reader = JsonReader.of(buffer(source(new StringInputStream(JSON))));\n+        JsonReader reader = JsonReader.of(buffer(source(new ByteArrayInputStream(JSON.getBytes()))));\n         LottieResult<LottieComposition> result = LottieCompositionFactory.fromJsonReaderSync(reader, \"json\");\n         assertNull(result.getException());\n         assertNotNull(result.getValue());\n     }\n \n     @Test\n     public void testLoadInvalidJsonReader() {\n-        JsonReader reader = JsonReader.of(buffer(source(new StringInputStream(NOT_JSON))));\n+        JsonReader reader = JsonReader.of(buffer(source(new ByteArrayInputStream(NOT_JSON.getBytes()))));\n         LottieResult<LottieComposition> result = LottieCompositionFactory.fromJsonReaderSync(reader, \"json\");\n         assertNotNull(result.getException());\n         assertNull(result.getValue());\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/MeanCalculatorTest.java b/lottie/src/test/java/com/airbnb/lottie/MeanCalculatorTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/MeanCalculatorTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/MeanCalculatorTest.java\n@@ -5,8 +5,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.IsEqual.equalTo;\n \n public class MeanCalculatorTest {\n \n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/PerformanceTrackerTest.java b/lottie/src/test/java/com/airbnb/lottie/PerformanceTrackerTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/PerformanceTrackerTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/PerformanceTrackerTest.java\n@@ -7,9 +7,9 @@\n \n import java.util.List;\n \n-import static junit.framework.Assert.assertTrue;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.assertThat;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.IsEqual.equalTo;\n \n public class PerformanceTrackerTest {\n \n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java b/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java\n@@ -2,8 +2,8 @@\n \n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.*;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n \n public class GammaEvaluatorTest {\n   @Test",
    "output": "[Compose] Upgrade to Alpha 9 (#1699)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java\n@@ -11,6 +11,9 @@ public TextKeyframeAnimation(List<Keyframe<DocumentData>> keyframes) {\n   }\n \n   @Override DocumentData getValue(Keyframe<DocumentData> keyframe, float keyframeProgress) {\n-    return keyframe.startValue;\n+    if (keyframeProgress != 1.0f || keyframe.endValue == null)\n+      return keyframe.startValue;\n+    else\n+      return keyframe.endValue;\n   }\n }",
    "output": "Display last animated text value (#1689)\n\nWhen using animated text, the last value was not shown. Issue can be reproduce with this json: https://assets7.lottiefiles.com/packages/lf20_fteywrno.json\r\n\r\nCo-authored-by: Frantisek Nagy <frantisek.nagy@erstegroup.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -141,12 +141,10 @@ public Layer layerModelForId(long id) {\n     return (long) (getDurationFrames() / frameRate * 1000);\n   }\n \n-  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n   public float getStartFrame() {\n     return startFrame;\n   }\n \n-  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n   public float getEndFrame() {\n     return endFrame;\n   }",
    "output": "Fix lint (#1684)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java b/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n@@ -58,4 +58,11 @@ public String getFileName() {\n   public void setBitmap(@Nullable Bitmap bitmap) {\n     this.bitmap = bitmap;\n   }\n+\n+  /**\n+   * Returns whether this asset has an embedded Bitmap or whether the fileName is a base64 encoded bitmap.\n+   */\n+  public boolean hasBitmap() {\n+    return bitmap != null || (fileName.startsWith(\"data:\") && fileName.indexOf(\"base64,\") > 0);\n+  }\n }",
    "output": "[Sample] Fixed a few bugs in the sample app (#1674)\n\nFixes #1671"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -257,7 +257,10 @@ public void setPerformanceTrackingEnabled(boolean enabled) {\n    *\n    * DO NOT leave this enabled in production.\n    */\n-  void setOutlineMasksAndMattes(boolean outline) {\n+  public void setOutlineMasksAndMattes(boolean outline) {\n+    if (outlineMasksAndMattes == outline) {\n+      return;\n+    }\n     outlineMasksAndMattes = outline;\n     if (compositionLayer != null) {\n       compositionLayer.setOutlineMasksAndMattes(outline);",
    "output": "[Compose] Added more functionality to the player and sample (#1670)\n\nAdded apply opacity to layers, outline masks and mattes, and enabled merge paths by default. Also fixed some bugs in the sample app and added the ability load a file from a url."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -24,6 +24,7 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n+import androidx.annotation.RequiresApi;\n import androidx.appcompat.widget.AppCompatImageView;\n import androidx.core.view.ViewCompat;\n \n@@ -759,6 +760,16 @@ public void removeAllAnimatorListeners() {\n     lottieDrawable.removeAllAnimatorListeners();\n   }\n \n+  @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n+  public void addAnimatorPauseListener(Animator.AnimatorPauseListener listener) {\n+    lottieDrawable.addAnimatorPauseListener(listener);\n+  }\n+\n+  @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n+  public void removeAnimatorPauseListener(Animator.AnimatorPauseListener listener) {\n+    lottieDrawable.removeAnimatorPauseListener(listener);\n+  }\n+\n   /**\n    * @see #setRepeatCount(int)\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -44,6 +44,7 @@\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.annotation.RequiresApi;\n \n /**\n  * This can be used to show an lottie animation in any place that would normally take a drawable.\n@@ -742,6 +743,12 @@ public void removeAllAnimatorListeners() {\n     animator.removeAllListeners();\n   }\n \n+  @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n+  public void addAnimatorPauseListener(Animator.AnimatorPauseListener listener) { animator.addPauseListener(listener); }\n+\n+  @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n+  public void removeAnimatorPauseListener(Animator.AnimatorPauseListener listener) { animator.removePauseListener(listener); }\n+\n   /**\n    * Sets the progress to the specified frame.\n    * If the composition isn't set yet, the progress will be set to the frame when",
    "output": "Add Animator.AnimatorPauseListener support (#1662)\n\nResolves #1644 by adding methods to LottieAnimationView and LottieDrawable"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -9,7 +9,7 @@\n import com.airbnb.lottie.model.LottieCompositionCache;\n import com.airbnb.lottie.parser.LottieCompositionMoshiParser;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n-\n+import com.airbnb.lottie.utils.Logger;\n import com.airbnb.lottie.utils.Utils;\n \n import org.json.JSONObject;\n@@ -27,8 +27,10 @@\n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n import androidx.annotation.WorkerThread;\n+import okio.BufferedSource;\n+import okio.Okio;\n \n-import static com.airbnb.lottie.parser.moshi.JsonReader.*;\n+import static com.airbnb.lottie.parser.moshi.JsonReader.of;\n import static com.airbnb.lottie.utils.Utils.closeQuietly;\n import static okio.Okio.buffer;\n import static okio.Okio.source;\n@@ -49,6 +51,13 @@ public class LottieCompositionFactory {\n    */\n   private static final Map<String, LottieTask<LottieComposition>> taskCache = new HashMap<>();\n \n+  /**\n+   * reference magic bytes for zip compressed files.\n+   * useful to determine if an InputStream is a zip file or not\n+   */\n+  private static final byte[] MAGIC = new byte[] { 0x50, 0x4b, 0x03, 0x04 };\n+\n+\n   private LottieCompositionFactory() {\n   }\n \n@@ -181,7 +190,7 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromAssetSync(Context context, String fileName, @Nullable String cacheKey) {\n     try {\n-      if (fileName.endsWith(\".zip\")) {\n+      if (fileName.endsWith(\".zip\") || fileName.endsWith(\".lottie\")) {\n         return fromZipStreamSync(new ZipInputStream(context.getAssets().open(fileName)), cacheKey);\n       }\n       return fromJsonInputStreamSync(context.getAssets().open(fileName), cacheKey);\n@@ -253,7 +262,11 @@ public static LottieResult<LottieComposition> fromRawResSync(Context context, @R\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromRawResSync(Context context, @RawRes int rawRes, @Nullable String cacheKey) {\n     try {\n-      return fromJsonInputStreamSync(context.getResources().openRawResource(rawRes), cacheKey);\n+      BufferedSource source = Okio.buffer(source(context.getResources().openRawResource(rawRes)));\n+      if (isZipCompressed(source)) {\n+        return fromZipStreamSync(new ZipInputStream(source.inputStream()), cacheKey);\n+      }\n+      return fromJsonInputStreamSync(source.inputStream(), cacheKey);\n     } catch (Resources.NotFoundException e) {\n       return new LottieResult<>(e);\n     }\n@@ -423,6 +436,8 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n         final String entryName = entry.getName();\n         if (entryName.contains(\"__MACOSX\")) {\n           inputStream.closeEntry();\n+        } else if (entry.getName().equalsIgnoreCase(\"manifest.json\")) { //ignore .lottie manifest\n+          inputStream.closeEntry();\n         } else if (entry.getName().contains(\".json\")) {\n           com.airbnb.lottie.parser.moshi.JsonReader reader = of(buffer(source(inputStream)));\n           composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();\n@@ -465,6 +480,26 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n     return new LottieResult<>(composition);\n   }\n \n+  /**\n+   * Check if a given InputStream points to a .zip compressed file\n+   */\n+  private static Boolean isZipCompressed(BufferedSource inputSource) {\n+\n+    try {\n+      BufferedSource peek = inputSource.peek();\n+      for (byte b: MAGIC) {\n+        if(peek.readByte() != b)\n+          return false;\n+      }\n+      peek.close();\n+      return true;\n+    } catch (Exception e) {\n+      Logger.error(\"Failed to check zip file header\", e);\n+      return false;\n+    }\n+\n+  }\n+\n   @Nullable\n   private static LottieImageAsset findImageAssetForFileName(LottieComposition composition, String fileName) {\n     for (LottieImageAsset asset : composition.getImages().values()) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -108,7 +108,7 @@ private LottieResult<LottieComposition> fromInputStream(@NonNull String url, @No\n       // in the result which is more useful than failing here.\n       contentType = \"application/json\";\n     }\n-    if (contentType.contains(\"application/zip\")) {\n+    if (contentType.contains(\"application/zip\") || url.split(\"\\\\?\")[0].endsWith(\".lottie\")) {\n       Logger.debug(\"Handling zip response.\");\n       extension = FileExtension.ZIP;\n       result = fromZipStream(url, inputStream, cacheKey);",
    "output": "Add support for dotLottie  (#1660)\n\nFix parsing .lottie files\r\nthe dotLottie format  (dotlottie.io) is a zip file with animation.json bundled along with image resources, and manifest\r\n\r\n**Changes**\r\n* update zipStreamSync() to handle dotLottie use case\r\n  * ignore manifest.json otherwise lottie will try to use it\r\n\r\n* update network loader to check for .lottie and treat it as a .zip\r\n\r\n* add support for .lottie and in rawRes\r\n  * use magic header to determine files and use zipStreamSync() instead of fromJsonSync()\r\n  * this has the bonus side effect of allowing .zip files in rawRes as well (which doesn't appear to have been supported before)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -369,6 +369,16 @@ public void  setCacheComposition(boolean cacheComposition) {\n     this.cacheComposition = cacheComposition;\n   }\n \n+  /**\n+   * Enable this to debug slow animations by outlining masks and mattes. The performance overhead of the masks and mattes will\n+   * be proportional to the surface area of all of the masks/mattes combined.\n+   *\n+   * DO NOT leave this enabled in production.\n+   */\n+  public void setOutlineMasksAndMattes(boolean outline) {\n+    lottieDrawable.setOutlineMasksAndMattes(outline);\n+  }\n+\n   /**\n    * Sets the animation from a file in the raw directory.\n    * This will load and deserialize the file asynchronously.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -94,6 +94,7 @@ public void onAnimationUpdate(ValueAnimator animation) {\n   private CompositionLayer compositionLayer;\n   private int alpha = 255;\n   private boolean performanceTrackingEnabled;\n+  private boolean outlineMasksAndMattes;\n   private boolean isApplyingOpacityToLayersEnabled;\n   private boolean isExtraScaleEnabled = true;\n   /**\n@@ -249,6 +250,19 @@ public void setPerformanceTrackingEnabled(boolean enabled) {\n     }\n   }\n \n+  /**\n+   * Enable this to debug slow animations by outlining masks and mattes. The performance overhead of the masks and mattes will\n+   * be proportional to the surface area of all of the masks/mattes combined.\n+   *\n+   * DO NOT leave this enabled in production.\n+   */\n+  void setOutlineMasksAndMattes(boolean outline) {\n+    outlineMasksAndMattes = outline;\n+    if (compositionLayer != null) {\n+      compositionLayer.setOutlineMasksAndMattes(outline);\n+    }\n+  }\n+\n   @Nullable\n   public PerformanceTracker getPerformanceTracker() {\n     if (composition != null) {\n@@ -296,6 +310,9 @@ public boolean isApplyingOpacityToLayersEnabled() {\n   private void buildCompositionLayer() {\n     compositionLayer = new CompositionLayer(\n         this, LayerParser.parse(composition), composition.getLayers(), composition);\n+    if (outlineMasksAndMattes) {\n+      compositionLayer.setOutlineMasksAndMattes(true);\n+    }\n   }\n \n   public void clearComposition() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -97,6 +97,9 @@ static BaseLayer forModel(\n   final TransformKeyframeAnimation transform;\n   private boolean visible = true;\n \n+  private boolean outlineMasksAndMattes;\n+  @Nullable private Paint outlineMasksAndMattesPaint;\n+\n   BaseLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n     this.lottieDrawable = lottieDrawable;\n     this.layerModel = layerModel;\n@@ -125,6 +128,19 @@ static BaseLayer forModel(\n     setupInOutAnimations();\n   }\n \n+  /**\n+   * Enable this to debug slow animations by outlining masks and mattes. The performance overhead of the masks and mattes will\n+   * be proportional to the surface area of all of the masks/mattes combined.\n+   *\n+   * DO NOT leave this enabled in production.\n+   */\n+  void setOutlineMasksAndMattes(boolean outline) {\n+    if (outline && outlineMasksAndMattesPaint == null) {\n+      outlineMasksAndMattesPaint = new LPaint();\n+    }\n+    outlineMasksAndMattes = outline;\n+  }\n+\n   @Override\n   public void onValueChanged() {\n     invalidateSelf();\n@@ -229,13 +245,6 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"Layer#computeBounds\");\n     getBounds(rect, matrix, false);\n \n-    // Uncomment this to draw matte outlines.\n-    /* Paint paint = new LPaint();\n-    paint.setColor(Color.RED);\n-    paint.setStyle(Paint.Style.STROKE);\n-    paint.setStrokeWidth(3);\n-    canvas.drawRect(rect, paint); */\n-\n     intersectBoundsWithMatte(rect, parentMatrix);\n \n     matrix.preConcat(transform.getMatrix());\n@@ -282,6 +291,16 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n       L.endSection(\"Layer#restoreLayer\");\n     }\n \n+    if (outlineMasksAndMattes && outlineMasksAndMattesPaint != null) {\n+      outlineMasksAndMattesPaint.setStyle(Paint.Style.STROKE);\n+      outlineMasksAndMattesPaint.setColor(0xFFFC2803);\n+      outlineMasksAndMattesPaint.setStrokeWidth(4);\n+      canvas.drawRect(rect, outlineMasksAndMattesPaint);\n+      outlineMasksAndMattesPaint.setStyle(Paint.Style.FILL);\n+      outlineMasksAndMattesPaint.setColor(0x50EBEBEB);\n+      canvas.drawRect(rect, outlineMasksAndMattesPaint);\n+    }\n+\n     recordRenderTime(L.endSection(drawTraceName));\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -88,6 +88,13 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     }\n   }\n \n+  @Override public void setOutlineMasksAndMattes(boolean outline) {\n+    super.setOutlineMasksAndMattes(outline);\n+    for (BaseLayer layer : layers) {\n+      layer.setOutlineMasksAndMattes(outline);\n+    }\n+  }\n+\n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"CompositionLayer#draw\");\n     newClipRect.set(0, 0, layerModel.getPreCompWidth(), layerModel.getPreCompHeight());",
    "output": "Added the ability to outline masks and mattes (#1658)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -86,7 +86,11 @@ public static LottieTask<LottieComposition> fromUrl(final Context context, final\n     return cache(cacheKey, new Callable<LottieResult<LottieComposition>>() {\n       @Override\n       public LottieResult<LottieComposition> call() {\n-        return L.networkFetcher(context).fetchSync(url, cacheKey);\n+        LottieResult<LottieComposition> result = L.networkFetcher(context).fetchSync(url, cacheKey);\n+        if (cacheKey != null && result.getValue() != null) {\n+          LottieCompositionCache.getInstance().put(cacheKey, result.getValue());\n+        }\n+        return result;\n       }\n     });\n   }\n@@ -109,7 +113,11 @@ public static LottieResult<LottieComposition> fromUrlSync(Context context, Strin\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromUrlSync(Context context, String url, @Nullable String cacheKey) {\n-    return L.networkFetcher(context).fetchSync(url, cacheKey);\n+    LottieResult<LottieComposition> result = L.networkFetcher(context).fetchSync(url, cacheKey);\n+    if (cacheKey != null && result.getValue() != null) {\n+      LottieCompositionCache.getInstance().put(cacheKey, result.getValue());\n+    }\n+    return result;\n   }\n \n   /**",
    "output": "Cache compositions loaded by url in memory (#1657)\n\nFixes #1648"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -16,13 +16,6 @@\n import android.view.View;\n import android.widget.ImageView;\n \n-import androidx.annotation.FloatRange;\n-import androidx.annotation.IntDef;\n-import androidx.annotation.IntRange;\n-import androidx.annotation.MainThread;\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n import com.airbnb.lottie.manager.FontAssetManager;\n import com.airbnb.lottie.manager.ImageAssetManager;\n import com.airbnb.lottie.model.KeyPath;\n@@ -45,6 +38,13 @@\n import java.util.List;\n import java.util.Set;\n \n+import androidx.annotation.FloatRange;\n+import androidx.annotation.IntDef;\n+import androidx.annotation.IntRange;\n+import androidx.annotation.MainThread;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n /**\n  * This can be used to show an lottie animation in any place that would normally take a drawable.\n  *\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.*;\n import android.os.Build;\n+\n import androidx.annotation.CallSuper;\n import androidx.annotation.FloatRange;\n import androidx.annotation.Nullable;",
    "output": "Initial implementation of Lottie Compose (#1652)\n\nThis PR kicks off the work required to use Lottie with [Jetpack Compose](https://developer.android.com/jetpack/compose).\r\nThe API here will almost certainly change over time but I feel confident that this is a solid starting point with which to begin further API discussions.\r\n\r\nThe three primitives are:\r\n* LottieAnimation: the `@Composable` that does the rendering aka replacement for LottieDrawable or LottieAnimationView.\r\n* LottieAnimationSpec: a specification for where an animation should come from, whether it be from resources or the internet.\r\n* LottieAnimationState: the current animation state (playing, progress, repeatCount, etc) and the ability to control the animation(start(), stop(), etc).\r\n\r\nIts most basic usage is:\r\n```\r\n@Composable\r\nfun MyComposable() {\r\n  val animationSpec = remember { LottieAnimationSpec.Url(\"https://...\") }\r\n  LottieAnimation(animationSpec)\r\n}\r\n```\r\n\r\nOr slightly more advanced:\r\n```\r\n@Composable\r\nfun MyComposable(loaded: Boolean) {\r\n  val animationSpec = remember { LottieAnimationSpec.Url(animationData.file) }\r\n  val animationState = rememberLottieAnimationState()\r\n  onCommit(loaded) {\r\n    if (loaded) animationState.play()\r\n  }\r\n  LottieAnimation(animationSpec, animationState)\r\n}\r\n```"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -256,6 +256,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n          colorCallbackAnimation = null;\n        } else {\n          //noinspection rawtypes\n+         linearGradientCache.clear();\n+         radialGradientCache.clear();\n          colorCallbackAnimation = new ValueCallbackKeyframeAnimation<>(callback);\n          colorCallbackAnimation.addUpdateListener(this);\n          layer.addAnimation(colorCallbackAnimation);",
    "output": "Clear hashed gradient objects when a new value callback is set. (#1639)\n\nFixes #1608"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -30,6 +30,8 @@ public enum MatteType {\n     NONE,\n     ADD,\n     INVERT,\n+    LUMA,\n+    LUMA_INVERTED,\n     UNKNOWN\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -132,7 +132,20 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n           transform = AnimatableTransformParser.parse(reader, composition);\n           break;\n         case 9:\n-          matteType = Layer.MatteType.values()[reader.nextInt()];\n+          int matteTypeIndex = reader.nextInt();\n+          if (matteTypeIndex >= Layer.MatteType.values().length) {\n+            composition.addWarning(\"Unsupported matte type: \" + matteTypeIndex);\n+            break;\n+          }\n+          matteType = Layer.MatteType.values()[matteTypeIndex];\n+          switch (matteType) {\n+            case LUMA:\n+              composition.addWarning(\"Unsupported matte type: Luma\");\n+              break;\n+            case LUMA_INVERTED:\n+              composition.addWarning(\"Unsupported matte type: Luma Inverted\");\n+              break;\n+          }\n           composition.incrementMatteOrMaskCount(1);\n           break;\n         case 10:",
    "output": "Added warnings for unsupportd matte types (#1638)\n\nFixes #1633"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -116,7 +116,7 @@ public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents\n   void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n     if (!lottieDrawable.useTextGlyphs()) {\n-      canvas.setMatrix(parentMatrix);\n+      canvas.concat(parentMatrix);\n     }\n     DocumentData documentData = textAnimation.getValue();\n     Font font = composition.getFonts().get(documentData.fontName);\n@@ -260,13 +260,25 @@ private void drawTextWithFont(\n     // Line height\n     float lineHeight = documentData.lineHeight * Utils.dpScale();\n \n+    // Calculate tracking\n+    float tracking = documentData.tracking / 10f;\n+    if (trackingCallbackAnimation != null) {\n+      tracking += trackingCallbackAnimation.getValue();\n+    } else if (trackingAnimation != null) {\n+      tracking += trackingAnimation.getValue();\n+    }\n+    tracking = tracking * Utils.dpScale() * textSize / 100.0f;\n+\n     // Split full text in multiple lines\n     List<String> textLines = getTextLines(text);\n     int textLineCount = textLines.size();\n     for (int l = 0; l < textLineCount; l++) {\n \n       String textLine = textLines.get(l);\n-      float textLineWidth = strokePaint.measureText(textLine);\n+      // We have to manually add the tracking between characters as the strokePaint ignores it\n+      float textLineWidth = strokePaint.measureText(textLine) + (textLine.length() - 1) * tracking;\n+\n+      canvas.save();\n \n       // Apply horizontal justification\n       applyJustification(documentData.justification, canvas, textLineWidth);\n@@ -277,10 +289,10 @@ private void drawTextWithFont(\n       canvas.translate(0, translateY);\n \n       // Draw each line\n-      drawFontTextLine(textLine, documentData, canvas, parentScale);\n+      drawFontTextLine(textLine, documentData, canvas, tracking);\n \n       // Reset canvas\n-      canvas.setMatrix(parentMatrix);\n+      canvas.restore();\n     }\n   }\n \n@@ -292,20 +304,13 @@ private List<String> getTextLines(String text) {\n     return Arrays.asList(textLinesArray);\n   }\n \n-  private void drawFontTextLine(String text, DocumentData documentData, Canvas canvas, float parentScale) {\n+  private void drawFontTextLine(String text, DocumentData documentData, Canvas canvas, float tracking) {\n     for (int i = 0; i < text.length(); ) {\n       String charString = codePointToString(text, i);\n       i += charString.length();\n       drawCharacterFromFont(charString, documentData, canvas);\n-      float charWidth = fillPaint.measureText(charString, 0, 1);\n-      // Add tracking\n-      float tracking = documentData.tracking / 10f;\n-      if (trackingCallbackAnimation != null) {\n-        tracking += trackingCallbackAnimation.getValue();\n-      } else if (trackingAnimation != null) {\n-        tracking += trackingAnimation.getValue();\n-      }\n-      float tx = charWidth + tracking * parentScale;\n+      float charWidth = fillPaint.measureText(charString);\n+      float tx = charWidth + tracking;\n       canvas.translate(tx, 0);\n     }\n   }",
    "output": "Fix scaling and tracking for dynamic text (#1635)\n\nClose #1183. Close #1310.\r\n\r\nThis has a couple of related bugfixes.\r\n\r\nFix the scale/positioning of the text relative to the parent (from PR #1583, thanks @pikaMouse)\r\nInclude text tracking values in the line width used for text alignment\r\nScale the text tracking values based on the font size rather than the parent size (parent size adjustment is already handled when we're calculating tracking values)\r\nInclude all bytes for multibyte characters when calculating canvas offsets for characters."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -139,7 +139,7 @@ private int getOpacityAtPosition(double position, double[] positions, double[] o\n       double lastPosition = positions[i - 1];\n       double thisPosition = positions[i];\n       if (positions[i] >= position) {\n-        double progress = (position - lastPosition) / (thisPosition - lastPosition);\n+        double progress = MiscUtils.clamp((position - lastPosition) / (thisPosition - lastPosition), 0, 1);\n         return (int) (255 * MiscUtils.lerp(opacities[i - 1], opacities[i], progress));\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n@@ -85,6 +85,10 @@ public static float clamp(float number, float min, float max) {\n     return Math.max(min, Math.min(max, number));\n   }\n \n+  public static double clamp(double number, double min, double max) {\n+    return Math.max(min, Math.min(max, number));\n+  }\n+\n   public static boolean contains(float number, float rangeMin, float rangeMax) {\n     return number >= rangeMin && number <= rangeMax;\n   }",
    "output": "Clamp gradient color opacity (#1636)\n\nFixes an issue where color positions that came before any opacity positions in a gradient color array were interpolated to negative values, throwing off the conversion into a color."
  },
  {
    "input": "diff --git a/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/TestColorFilterActivity.java b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/TestColorFilterActivity.java\n--- a/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/TestColorFilterActivity.java\n+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/TestColorFilterActivity.java\n@@ -1,13 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import androidx.annotation.Nullable;\n-import androidx.appcompat.app.AppCompatActivity;\n-\n-public class TestColorFilterActivity extends AppCompatActivity {\n-\n-  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-    setContentView(R.layout.activity_test_color_filter);\n-  }\n-}\n\\ No newline at end of file",
    "output": "[Sample App] Modernized sample app (#1622)\n\nUpgraded all dependencies, migrated RxJava to coroutines, and ViewBinding"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -207,7 +207,7 @@ public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes\n    *\n    * Pass null as the cache key to skip caching.\n    */\n-  public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes, @Nullable String cacheKey) {\n+  public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes, @Nullable final String cacheKey) {\n     // Prevent accidentally leaking an Activity.\n     final WeakReference<Context> contextRef = new WeakReference<>(context);\n     final Context appContext = context.getApplicationContext();\n@@ -216,7 +216,7 @@ public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes\n       public LottieResult<LottieComposition> call() {\n         @Nullable Context originalContext = contextRef.get();\n         Context context = originalContext != null ? originalContext : appContext;\n-        return fromRawResSync(context, rawRes);\n+        return fromRawResSync(context, rawRes, cacheKey);\n       }\n     });\n   }",
    "output": "Add cacheKey to LottieCompositionFactory call (#1617)\n\nFixes #1556"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java\n@@ -20,7 +20,12 @@ private ColorParser() {}\n     double r = reader.nextDouble();\n     double g = reader.nextDouble();\n     double b = reader.nextDouble();\n-    double a = reader.nextDouble();\n+    double a = 1;\n+    // Sometimes, Lottie editors only export rgb instead of rgba.\n+    // https://github.com/airbnb/lottie-android/issues/1601\n+    if (reader.peek() == JsonReader.Token.NUMBER) {\n+      a = reader.nextDouble();\n+    }\n     if (isArray) {\n       reader.endArray();\n     }",
    "output": "More leniently parse colors (#1612)\n\nFixes #1601"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java\n@@ -10,8 +10,10 @@\n import com.airbnb.lottie.model.content.GradientFill;\n import com.airbnb.lottie.model.content.GradientType;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n+import com.airbnb.lottie.value.Keyframe;\n \n import java.io.IOException;\n+import java.util.Collections;\n \n class GradientFillParser {\n   private static final JsonReader.Options NAMES = JsonReader.Options.of(\n@@ -89,6 +91,9 @@ static GradientFill parse(\n       }\n     }\n \n+    // Telegram sometimes omits opacity.\n+    // https://github.com/airbnb/lottie-android/issues/1600\n+    opacity = opacity == null ? new AnimatableIntegerValue(Collections.singletonList(new Keyframe<>(100))) : opacity;\n     return new GradientFill(\n         name, gradientType, fillType, color, opacity, startPoint, endPoint, null, null, hidden);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n@@ -10,9 +10,11 @@\n import com.airbnb.lottie.model.content.GradientType;\n import com.airbnb.lottie.model.content.ShapeStroke;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n+import com.airbnb.lottie.value.Keyframe;\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n class GradientStrokeParser {\n@@ -149,6 +151,9 @@ static GradientStroke parse(\n       }\n     }\n \n+    // Telegram sometimes omits opacity.\n+    // https://github.com/airbnb/lottie-android/issues/1600\n+    opacity = opacity == null ? new AnimatableIntegerValue(Collections.singletonList(new Keyframe<>(100))) : opacity;\n     return new GradientStroke(\n         name, gradientType, color, opacity, startPoint, endPoint, width, capType, joinType,\n         miterLimit, lineDashPattern, offset, hidden);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeFillParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeFillParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeFillParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeFillParser.java\n@@ -6,8 +6,10 @@\n import com.airbnb.lottie.model.animatable.AnimatableIntegerValue;\n import com.airbnb.lottie.model.content.ShapeFill;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n+import com.airbnb.lottie.value.Keyframe;\n \n import java.io.IOException;\n+import java.util.Collections;\n \n class ShapeFillParser {\n   private static final JsonReader.Options NAMES = JsonReader.Options.of(\n@@ -57,6 +59,9 @@ static ShapeFill parse(\n       }\n     }\n \n+    // Telegram sometimes omits opacity.\n+    // https://github.com/airbnb/lottie-android/issues/1600\n+    opacity = opacity == null ? new AnimatableIntegerValue(Collections.singletonList(new Keyframe<>(100))) : opacity;\n     Path.FillType fillType = fillTypeInt == 1 ? Path.FillType.WINDING : Path.FillType.EVEN_ODD;\n     return new ShapeFill(name, fillEnabled, fillType, color, opacity, hidden);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n@@ -7,9 +7,11 @@\n import com.airbnb.lottie.model.animatable.AnimatableIntegerValue;\n import com.airbnb.lottie.model.content.ShapeStroke;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n+import com.airbnb.lottie.value.Keyframe;\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n class ShapeStrokeParser {\n@@ -118,6 +120,9 @@ static ShapeStroke parse(\n       }\n     }\n \n+    // Telegram sometimes omits opacity.\n+    // https://github.com/airbnb/lottie-android/issues/1600\n+    opacity = opacity == null ? new AnimatableIntegerValue(Collections.singletonList(new Keyframe<>(100))) : opacity;\n     return new ShapeStroke(\n         name, offset, lineDashPattern, color, opacity, width, capType, joinType, miterLimit, hidden);\n   }",
    "output": "More leniently parse opacity (#1613)\n\nImproves support for Telegram animations\r\n\r\nFixes #1600"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -39,6 +39,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.Callable;\n \n import static com.airbnb.lottie.RenderMode.HARDWARE;\n \n@@ -138,33 +139,31 @@ public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr\n \n   private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n     TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView, defStyleAttr, 0);\n-    if (!isInEditMode()) {\n-      cacheComposition = ta.getBoolean(R.styleable.LottieAnimationView_lottie_cacheComposition, true);\n-      boolean hasRawRes = ta.hasValue(R.styleable.LottieAnimationView_lottie_rawRes);\n-      boolean hasFileName = ta.hasValue(R.styleable.LottieAnimationView_lottie_fileName);\n-      boolean hasUrl = ta.hasValue(R.styleable.LottieAnimationView_lottie_url);\n-      if (hasRawRes && hasFileName) {\n-        throw new IllegalArgumentException(\"lottie_rawRes and lottie_fileName cannot be used at \" +\n-            \"the same time. Please use only one at once.\");\n-      } else if (hasRawRes) {\n-        int rawResId = ta.getResourceId(R.styleable.LottieAnimationView_lottie_rawRes, 0);\n-        if (rawResId != 0) {\n-          setAnimation(rawResId);\n-        }\n-      } else if (hasFileName) {\n-        String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n-        if (fileName != null) {\n-          setAnimation(fileName);\n-        }\n-      } else if (hasUrl) {\n-        String url = ta.getString(R.styleable.LottieAnimationView_lottie_url);\n-        if (url != null) {\n-          setAnimationFromUrl(url);\n-        }\n+    cacheComposition = ta.getBoolean(R.styleable.LottieAnimationView_lottie_cacheComposition, true);\n+    boolean hasRawRes = ta.hasValue(R.styleable.LottieAnimationView_lottie_rawRes);\n+    boolean hasFileName = ta.hasValue(R.styleable.LottieAnimationView_lottie_fileName);\n+    boolean hasUrl = ta.hasValue(R.styleable.LottieAnimationView_lottie_url);\n+    if (hasRawRes && hasFileName) {\n+      throw new IllegalArgumentException(\"lottie_rawRes and lottie_fileName cannot be used at \" +\n+          \"the same time. Please use only one at once.\");\n+    } else if (hasRawRes) {\n+      int rawResId = ta.getResourceId(R.styleable.LottieAnimationView_lottie_rawRes, 0);\n+      if (rawResId != 0) {\n+        setAnimation(rawResId);\n+      }\n+    } else if (hasFileName) {\n+      String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n+      if (fileName != null) {\n+        setAnimation(fileName);\n+      }\n+    } else if (hasUrl) {\n+      String url = ta.getString(R.styleable.LottieAnimationView_lottie_url);\n+      if (url != null) {\n+        setAnimationFromUrl(url);\n       }\n-\n-      setFallbackResource(ta.getResourceId(R.styleable.LottieAnimationView_lottie_fallbackRes, 0));\n     }\n+\n+    setFallbackResource(ta.getResourceId(R.styleable.LottieAnimationView_lottie_fallbackRes, 0));\n     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n       wasAnimatingWhenDetached = true;\n       autoPlay = true;\n@@ -318,7 +317,7 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n \n   @Override protected void onAttachedToWindow() {\n     super.onAttachedToWindow();\n-    if (autoPlay || wasAnimatingWhenDetached) {\n+    if (!isInEditMode() &&( autoPlay || wasAnimatingWhenDetached)) {\n       playAnimation();\n       // Autoplay from xml should only apply once.\n       autoPlay = false;\n@@ -376,17 +375,42 @@ public void  setCacheComposition(boolean cacheComposition) {\n   public void setAnimation(@RawRes final int rawRes) {\n     this.animationResId = rawRes;\n     animationName = null;\n-    LottieTask<LottieComposition> task = cacheComposition ?\n-        LottieCompositionFactory.fromRawRes(getContext(), rawRes) : LottieCompositionFactory.fromRawRes(getContext(), rawRes, null);\n-    setCompositionTask(task);\n+    setCompositionTask(fromRawRes(rawRes));\n+  }\n+\n+\n+  private LottieTask<LottieComposition> fromRawRes(@RawRes final int rawRes) {\n+    if (isInEditMode()) {\n+      return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {\n+        @Override public LottieResult<LottieComposition> call() throws Exception {\n+          return cacheComposition\n+              ? LottieCompositionFactory.fromRawResSync(getContext(), rawRes) : LottieCompositionFactory.fromRawResSync(getContext(), rawRes, null);\n+        }\n+      }, true);\n+    } else {\n+      return cacheComposition ?\n+          LottieCompositionFactory.fromRawRes(getContext(), rawRes) : LottieCompositionFactory.fromRawRes(getContext(), rawRes, null);\n+    }\n   }\n \n   public void setAnimation(final String assetName) {\n     this.animationName = assetName;\n     animationResId = 0;\n-    LottieTask<LottieComposition> task = cacheComposition ?\n-        LottieCompositionFactory.fromAsset(getContext(), assetName) : LottieCompositionFactory.fromAsset(getContext(), assetName, null);\n-    setCompositionTask(task);\n+    setCompositionTask(fromAssets(assetName));\n+  }\n+\n+  private LottieTask<LottieComposition> fromAssets(final String assetName) {\n+    if (isInEditMode()) {\n+      return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {\n+        @Override public LottieResult<LottieComposition> call() throws Exception {\n+          return cacheComposition ?\n+              LottieCompositionFactory.fromAssetSync(getContext(), assetName) : LottieCompositionFactory.fromAssetSync(getContext(), assetName, null);\n+        }\n+      }, true);\n+    } else {\n+      return cacheComposition ?\n+          LottieCompositionFactory.fromAsset(getContext(), assetName) : LottieCompositionFactory.fromAsset(getContext(), assetName, null);\n+    }\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -386,7 +386,11 @@ private void drawInternal(@NonNull Canvas canvas) {\n   @MainThread\n   @Override\n   public void start() {\n-    playAnimation();\n+    // Don't auto play when in edit mode.\n+    Callback callback = getCallback();\n+    if (callback instanceof View && !((View) callback).isInEditMode()) {\n+      playAnimation();\n+    }\n   }\n \n   @MainThread\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/moshi/JsonUtf8Reader.java b/lottie/src/main/java/com/airbnb/lottie/parser/moshi/JsonUtf8Reader.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/moshi/JsonUtf8Reader.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/moshi/JsonUtf8Reader.java\n@@ -95,7 +95,8 @@ final class JsonUtf8Reader extends JsonReader {\n       throw new NullPointerException(\"source == null\");\n     }\n     this.source = source;\n-    this.buffer = source.getBuffer();\n+    // Don't use source.getBuffer(). Because android studio use old version okio instead of your own okio.\n+    this.buffer = source.buffer();\n     pushScope(JsonScope.EMPTY_DOCUMENT);\n   }\n ",
    "output": "Enable xml preview in Android Studio. (#1572)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -34,10 +34,37 @@\n public final class Utils {\n   public static final int SECOND_IN_NANOS = 1000000000;\n \n-  private static final PathMeasure pathMeasure = new PathMeasure();\n-  private static final Path tempPath = new Path();\n-  private static final Path tempPath2 = new Path();\n-  private static final float[] points = new float[4];\n+  /**\n+   * Wrap in Local Thread is necessary for prevent race condition in multi-threaded mode\n+   */\n+  private static final ThreadLocal<PathMeasure> threadLocalPathMeasure = new ThreadLocal<PathMeasure>() {\n+    @Override\n+    protected PathMeasure initialValue() {\n+      return new PathMeasure();\n+    }\n+  };\n+\n+  private static final ThreadLocal<Path> threadLocalTempPath = new ThreadLocal<Path>() {\n+    @Override\n+    protected Path initialValue() {\n+      return new Path();\n+    }\n+  };\n+\n+  private static final ThreadLocal<Path> threadLocalTempPath2 = new ThreadLocal<Path>() {\n+    @Override\n+    protected Path initialValue() {\n+      return new Path();\n+    }\n+  };\n+\n+  private static final ThreadLocal<float[]> threadLocalPoints = new ThreadLocal<float[]>() {\n+    @Override\n+    protected float[] initialValue() {\n+      return new float[4];\n+    }\n+  };\n+\n   private static final float INV_SQRT_2 = (float) (Math.sqrt(2) / 2.0);\n   private static float dpScale = -1;\n \n@@ -71,6 +98,8 @@ public static void closeQuietly(Closeable closeable) {\n   }\n \n   public static float getScale(Matrix matrix) {\n+    final float[] points = threadLocalPoints.get();\n+\n     points[0] = 0;\n     points[1] = 0;\n     // Use 1/sqrt(2) so that the hypotenuse is of length 1.\n@@ -84,6 +113,8 @@ public static float getScale(Matrix matrix) {\n   }\n \n   public static boolean hasZeroScaleAxis(Matrix matrix) {\n+    final float[] points = threadLocalPoints.get();\n+\n     points[0] = 0;\n     points[1] = 0;\n     // Random numbers. The only way these should map to the same thing as 0,0 is if the scale is 0.\n@@ -109,6 +140,10 @@ public static void applyTrimPathIfNeeded(Path path, @Nullable TrimPathContent tr\n   public static void applyTrimPathIfNeeded(\n       Path path, float startValue, float endValue, float offsetValue) {\n     L.beginSection(\"applyTrimPathIfNeeded\");\n+    final PathMeasure pathMeasure = threadLocalPathMeasure.get();\n+    final Path tempPath = threadLocalTempPath.get();\n+    final Path tempPath2 = threadLocalTempPath2.get();\n+\n     pathMeasure.setPath(path, false);\n \n     float length = pathMeasure.getLength();",
    "output": "Fix blinking black in multithreading mode (#1575)\n\nCo-authored-by: Nikita Bukhal <n.bukhal@corp.vk.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -1064,6 +1064,8 @@ private void enableOrDisableHardwareLayer() {\n           useHardwareLayer = false;\n         } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n           useHardwareLayer = false;\n+        } else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.N || Build.VERSION.SDK_INT == Build.VERSION_CODES.N_MR1) {\n+          useHardwareLayer = false;\n         }\n         layerType = useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE;\n         break;",
    "output": "Disable hardware rendering for Android 7 to avoid native crashes in libhwui.so and libc.so (#1586)\n\nCo-authored-by: Orit Malki <orit@yokee.tv>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -16,6 +16,7 @@\n import android.util.Log;\n import android.view.View;\n \n+import androidx.annotation.AttrRes;\n import androidx.annotation.DrawableRes;\n import androidx.annotation.FloatRange;\n import androidx.annotation.MainThread;\n@@ -122,21 +123,21 @@ public void onResult(Throwable result) {\n \n   public LottieAnimationView(Context context) {\n     super(context);\n-    init(null);\n+    init(null, R.attr.lottieAnimationViewStyle);\n   }\n \n   public LottieAnimationView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n-    init(attrs);\n+    init(attrs, R.attr.lottieAnimationViewStyle);\n   }\n \n   public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr) {\n     super(context, attrs, defStyleAttr);\n-    init(attrs);\n+    init(attrs, defStyleAttr);\n   }\n \n-  private void init(@Nullable AttributeSet attrs) {\n-    TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);\n+  private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n+    TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView, defStyleAttr, 0);\n     if (!isInEditMode()) {\n       cacheComposition = ta.getBoolean(R.styleable.LottieAnimationView_lottie_cacheComposition, true);\n       boolean hasRawRes = ta.hasValue(R.styleable.LottieAnimationView_lottie_rawRes);",
    "output": "Add lottieAnimationViewStyle attribute to set a default style in themes (#1524)\n\nFixes #1523, with an enhancement."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -98,8 +98,11 @@ public void onResult(Throwable result) {\n   private boolean isInitialized;\n   private String animationName;\n   private @RawRes int animationResId;\n+\n+  private boolean playAnimationWhenShown = false;\n   private boolean wasAnimatingWhenNotShown = false;\n   private boolean wasAnimatingWhenDetached = false;\n+\n   private boolean autoPlay = false;\n   private boolean cacheComposition = true;\n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n@@ -299,8 +302,11 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n     if (isShown()) {\n       if (wasAnimatingWhenNotShown) {\n         resumeAnimation();\n-        wasAnimatingWhenNotShown = false;\n+      } else if (playAnimationWhenShown) {\n+        playAnimation();\n       }\n+      wasAnimatingWhenNotShown = false;\n+      playAnimationWhenShown = false;\n     } else {\n       if (isAnimating()) {\n         pauseAnimation();\n@@ -543,7 +549,7 @@ public void playAnimation() {\n       lottieDrawable.playAnimation();\n       enableOrDisableHardwareLayer();\n     } else {\n-      wasAnimatingWhenNotShown = true;\n+      playAnimationWhenShown = true;\n     }\n   }\n \n@@ -557,6 +563,7 @@ public void resumeAnimation() {\n       lottieDrawable.resumeAnimation();\n       enableOrDisableHardwareLayer();\n     } else {\n+      playAnimationWhenShown = false;\n       wasAnimatingWhenNotShown = true;\n     }\n   }\n@@ -895,7 +902,9 @@ public float getScale() {\n \n   @MainThread\n   public void cancelAnimation() {\n+    wasAnimatingWhenDetached = false;\n     wasAnimatingWhenNotShown = false;\n+    playAnimationWhenShown = false;\n     lottieDrawable.cancelAnimation();\n     enableOrDisableHardwareLayer();\n   }\n@@ -905,6 +914,7 @@ public void pauseAnimation() {\n     autoPlay = false;\n     wasAnimatingWhenDetached = false;\n     wasAnimatingWhenNotShown = false;\n+    playAnimationWhenShown = false;\n     lottieDrawable.pauseAnimation();\n     enableOrDisableHardwareLayer();\n   }",
    "output": "Play, not resume, animation when playAnimation() is called when isShown() is false (#1521)\n\nFixes #1517"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -375,7 +375,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n       // Pre-Pie, offscreen buffers were opaque which meant that outer border of a mask\n       // might get drawn depending on the result of float rounding.\n-      canvas.drawColor(Color.TRANSPARENT);\n+      clearCanvas(canvas);\n     }\n     L.endSection(\"Layer#saveLayer\");\n     for (int i = 0; i < mask.getMasks().size(); i++) {",
    "output": "Properly clear canvas for masks pre-Pie (#1505)\n\nFixes #1489"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -502,11 +502,6 @@ public void setComposition(@NonNull LottieComposition composition) {\n       return;\n     }\n \n-    // If you set a different composition on the view, the bounds will not update unless\n-    // the drawable is different than the original.\n-    setImageDrawable(null);\n-    setImageDrawable(lottieDrawable);\n-\n     // This is needed to makes sure that the animation is properly played/paused for the current visibility state.\n     // It is possible that the drawable had a lazy composition task to play the animation but this view subsequently\n     // became invisible. Comment this out and run the espresso tests to see a failing test.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -231,6 +231,14 @@ public boolean setComposition(LottieComposition composition) {\n \n     composition.setPerformanceTrackingEnabled(performanceTrackingEnabled);\n \n+    // Ensure that ImageView updates the drawable width/height so it can\n+    // properly calculate its drawable matrix.\n+    Callback callback = getCallback();\n+    if (callback instanceof ImageView) {\n+      ((ImageView) callback).setImageDrawable(null);\n+      ((ImageView) callback).setImageDrawable(this);\n+    }\n+\n     return true;\n   }\n ",
    "output": "Ensure ImageView updates Drawable bounds when not using LottieAnimationView (#1504)\n\nFixes #1492"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java\n@@ -25,11 +25,14 @@ private ColorParser() {}\n       reader.endArray();\n     }\n \n-    if (r <= 1 && g <= 1 && b <= 1 && a <= 1) {\n+    if (r <= 1 && g <= 1 && b <= 1) {\n       r *= 255;\n       g *= 255;\n       b *= 255;\n-      a *= 255;\n+      // It appears as if sometimes, Telegram Lottie stickers are exported with rgb [0,1] and a [0,255].\n+      // This shouldn't happen but we can gracefully handle it when it does.\n+      // https://github.com/airbnb/lottie-android/issues/1478\n+      if (a <= 1) a *= 255;\n     }\n \n     return Color.argb((int) a, (int) r, (int) g, (int) b);",
    "output": "Accept alpha [0,255] (#1503)\n\nFixes #1478"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -147,6 +147,7 @@ public void setComposition(LottieComposition composition) {\n     float frame = this.frame;\n     this.frame = 0f;\n     setFrame((int) frame);\n+    notifyUpdate();\n   }\n \n   public void setFrame(float frame) {",
    "output": "Always notify update when a composition is set (#1501)\n\nFixes #1498"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -81,6 +81,8 @@ static BaseLayer forModel(\n   @Nullable\n   private MaskKeyframeAnimation mask;\n   @Nullable\n+  private FloatKeyframeAnimation inOutAnimation;\n+  @Nullable\n   private BaseLayer matteLayer;\n   /**\n    * This should only be used by {@link #buildParentLayerListIfNeeded()}\n@@ -145,8 +147,7 @@ void setParentLayer(@Nullable BaseLayer parentLayer) {\n \n   private void setupInOutAnimations() {\n     if (!layerModel.getInOutKeyframes().isEmpty()) {\n-      final FloatKeyframeAnimation inOutAnimation =\n-          new FloatKeyframeAnimation(layerModel.getInOutKeyframes());\n+      inOutAnimation = new FloatKeyframeAnimation(layerModel.getInOutKeyframes());\n       inOutAnimation.setIsDiscrete();\n       inOutAnimation.addUpdateListener(new BaseKeyframeAnimation.AnimationListener() {\n         @Override\n@@ -524,6 +525,10 @@ void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     if (layerModel.getTimeStretch() != 0) {\n       progress /= layerModel.getTimeStretch();\n     }\n+    if (inOutAnimation != null) {\n+      // Time stretch needs to be divided again for the inOutAnimation.\n+      inOutAnimation.setProgress(progress / layerModel.getTimeStretch());\n+    }\n     if (matteLayer != null) {\n       // The matte layer's time stretch is pre-calculated.\n       float matteTimeStretch = matteLayer.layerModel.getTimeStretch();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -137,13 +137,12 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n       float remappedFrames = timeRemapping.getValue() * layerModel.getComposition().getFrameRate() - compositionDelayFrames;\n       progress = remappedFrames / durationFrames;\n     }\n-    if (layerModel.getTimeStretch() != 0) {\n-      progress /= layerModel.getTimeStretch();\n-    }\n-\n     if (timeRemapping == null) {\n       progress -= layerModel.getStartProgress();\n     }\n+    if (layerModel.getTimeStretch() != 0) {\n+      progress /= layerModel.getTimeStretch();\n+    }\n     for (int i = layers.size() - 1; i >= 0; i--) {\n       layers.get(i).setProgress(progress);\n     }",
    "output": "Fix time stretch and time remapping when there is a start offset (#1472)\n\nFixes #1454\r\nFixes #1456"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java\n@@ -137,8 +137,23 @@ private static <T> Keyframe<T> parseKeyframe(LottieComposition composition, Json\n         interpolator = interpolatorRef.get();\n       }\n       if (interpolatorRef == null || interpolator == null) {\n-        interpolator = PathInterpolatorCompat.create(\n-            cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n+        cp1.x /= scale;\n+        cp1.y /= scale;\n+        cp2.x /= scale;\n+        cp2.y /= scale;\n+        try {\n+          interpolator = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+        } catch (IllegalArgumentException e) {\n+          if (e.getMessage().equals(\"The Path cannot loop back on itself.\")) {\n+            // If a control point extends beyond the previous/next point then it will cause the value of the interpolator to no\n+            // longer monotonously increase. This clips the control point bounds to prevent that from happening.\n+            // NOTE: this will make the rendered animation behave slightly differently than the original.\n+            interpolator = PathInterpolatorCompat.create(Math.min(cp1.x, 1f), cp1.y, Math.max(cp2.x, 0f), cp2.y);\n+          } else {\n+            // We failed to create the interpolator. Fall back to linear.\n+            interpolator = new LinearInterpolator();\n+          }\n+        }\n         try {\n           putInterpolator(hash, new WeakReference<>(interpolator));\n         } catch (ArrayIndexOutOfBoundsException e) {",
    "output": "Clip interpolators so they can't loop back on themselves (#1471)\n\nFixes #1457"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -25,7 +25,7 @@ public interface AnimationListener {\n   private boolean isDiscrete = false;\n \n   private final KeyframesWrapper<K> keyframesWrapper;\n-  private float progress = 0f;\n+  protected float progress = 0f;\n   @Nullable protected LottieValueCallback<A> valueCallback;\n \n   @Nullable private A cachedGetValue = null;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ValueCallbackKeyframeAnimation.java\n@@ -22,6 +22,10 @@ public ValueCallbackKeyframeAnimation(LottieValueCallback<A> valueCallback, @Nul\n     this.valueCallbackValue = valueCallbackValue;\n   }\n \n+  @Override public void setProgress(float progress) {\n+    this.progress = progress;\n+  }\n+\n   /**\n    * If this doesn't return 1, then {@link #setProgress(float)} will always clamp the progress\n    * to 0.",
    "output": "Fix progress for ValueCallbackKeyframeAnimation (#1469)\n\nProgress was not getting correctly set for value callback animations which made it impossible to do dynamic calculations based on progress."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java\n@@ -1,30 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.app.Activity;\n-import android.view.LayoutInflater;\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.robolectric.Robolectric;\n-import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.annotation.Config;\n-\n-@RunWith(RobolectricTestRunner.class)\n-@Config\n-@Ignore\n-public class LottieAnimationViewTest {\n-\n-  private Activity activity;\n-\n-  @Before\n-  public void setup(){\n-    activity = Robolectric.buildActivity(Activity.class).create().get();\n-  }\n-\n-  @Test\n-  public void inflateShouldNotCrash() {\n-    LayoutInflater.from(activity).inflate(R.layout.lottie_activity_main, null);\n-  }\n-}\n\ndiff --git a/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/FontFragment.java b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/FontFragment.java\n--- a/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/FontFragment.java\n+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/FontFragment.java\n@@ -1,42 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import androidx.annotation.Nullable;\n-import androidx.fragment.app.Fragment;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-\n-import com.airbnb.lottie.LottieAnimationView;\n-import com.airbnb.lottie.TextDelegate;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-import butterknife.OnTextChanged;\n-\n-public class FontFragment extends Fragment {\n-\n-  public static FontFragment newInstance() {\n-      return new FontFragment();\n-  }\n-\n-  @BindView(R.id.dynamic_text) LottieAnimationView nameAnimationView;\n-\n-  private TextDelegate textDelegate;\n-\n-  @Nullable @Override\n-  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n-      @Nullable Bundle savedInstanceState) {\n-    View view = inflater.inflate(R.layout.fragment_font, container, false);\n-    ButterKnife.bind(this, view);\n-\n-    textDelegate = new TextDelegate(nameAnimationView);\n-    nameAnimationView.setTextDelegate(textDelegate);\n-\n-    return view;\n-  }\n-\n-  @OnTextChanged(R.id.name_edit_text) void onNameChanged(CharSequence name) {\n-    textDelegate.setText(\"NAME\", name.toString());\n-  }\n-}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -141,12 +141,12 @@ public Layer layerModelForId(long id) {\n     return (long) (getDurationFrames() / frameRate * 1000);\n   }\n \n-  @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n   public float getStartFrame() {\n     return startFrame;\n   }\n \n-  @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n   public float getEndFrame() {\n     return endFrame;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -103,7 +103,7 @@ public interface LottieProperty {\n   /** [0,100] */\n   Float TRANSFORM_START_OPACITY = 12f;\n   /** [0,100] */\n-  Float TRANSFORM_END_OPACITY = 12f;\n+  Float TRANSFORM_END_OPACITY = 12.1f;\n   /** The time value in seconds */\n   Float TIME_REMAP = 13f;\n   /** In Dp */\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/BaseTest.java b/lottie/src/test/java/com/airbnb/lottie/BaseTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/BaseTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/BaseTest.java\n@@ -1,12 +1,14 @@\n package com.airbnb.lottie;\n \n+import android.os.Build;\n+\n import org.junit.Ignore;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n import org.robolectric.annotation.Config;\n \n @RunWith(RobolectricTestRunner.class)\n-@Config\n+@Config(sdk = Build.VERSION_CODES.P)\n @Ignore\n public class BaseTest {\n }",
    "output": "Fix the build and upgrade dependencies (#1473)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieAnimationViewTest.java\n@@ -0,0 +1,30 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.app.Activity;\n+import android.view.LayoutInflater;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config\n+@Ignore\n+public class LottieAnimationViewTest {\n+\n+  private Activity activity;\n+\n+  @Before\n+  public void setup(){\n+    activity = Robolectric.buildActivity(Activity.class).create().get();\n+  }\n+\n+  @Test\n+  public void inflateShouldNotCrash() {\n+    LayoutInflater.from(activity).inflate(R.layout.lottie_activity_main, null);\n+  }\n+}",
    "output": "Add unit test for XML initialized Lottie view. (#1437)\n\nTo prevent issue like #1432 from happening again, add a unit test to verify the Lottie view initialization process via XML.\r\n\r\nOne nit of this PR is the XML test file is included in aar. If there's better option to exclude it from release package, please advise."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -247,6 +247,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n \n     if (!rect.isEmpty()) {\n       L.beginSection(\"Layer#saveLayer\");\n+      contentPaint.setAlpha(255);\n       Utils.saveLayerCompat(canvas, rect, contentPaint);\n       L.endSection(\"Layer#saveLayer\");\n ",
    "output": "Fix opacity used in save layer (#1458)\n\ncontentPaint.alpha is changed multiple times without reset it back. This will lead to Utils.saveLayerCompat call with incorrect alpha.\r\nIn our case it should be 255, but if last mask was applied with 0 alpha (e.g. in applyAddMask), next draw will be transparent, because layer will be saved with 0 alpha.\r\n\r\nFix is to set proper alpha before saving layer."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -106,6 +106,8 @@ public interface LottieProperty {\n   Float TRANSFORM_END_OPACITY = 12f;\n   /** The time value in seconds */\n   Float TIME_REMAP = 13f;\n+  /** In Dp */\n+  Float TEXT_SIZE = 14f;\n \n   ColorFilter COLOR_FILTER = new ColorFilter();\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -16,20 +16,20 @@ public enum Justification {\n \n   public final String text;\n   @SuppressWarnings(\"WeakerAccess\") public final String fontName;\n-  public final double size;\n+  public final float size;\n   @SuppressWarnings(\"WeakerAccess\") public final Justification justification;\n   public final int tracking;\n-  @SuppressWarnings(\"WeakerAccess\") public final double lineHeight;\n-  public final double baselineShift;\n+  @SuppressWarnings(\"WeakerAccess\") public final float lineHeight;\n+  public final float baselineShift;\n   @ColorInt public final int color;\n   @ColorInt public final int strokeColor;\n-  public final double strokeWidth;\n+  public final float strokeWidth;\n   public final boolean strokeOverFill;\n \n \n-  public DocumentData(String text, String fontName, double size, Justification justification, int tracking,\n-      double lineHeight, double baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n-      double strokeWidth, boolean strokeOverFill) {\n+  public DocumentData(String text, String fontName, float size, Justification justification, int tracking,\n+      float lineHeight, float baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n+      float strokeWidth, boolean strokeOverFill) {\n     this.text = text;\n     this.fontName = fontName;\n     this.size = size;\n@@ -51,7 +51,7 @@ public DocumentData(String text, String fontName, double size, Justification jus\n     result = (int) (31 * result + size);\n     result = 31 * result + justification.ordinal();\n     result = 31 * result + tracking;\n-    temp = Double.doubleToLongBits(lineHeight);\n+    temp = Float.floatToRawIntBits(lineHeight);\n     result = 31 * result + (int) (temp ^ (temp >>> 32));\n     result = 31 * result + color;\n     return result;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -57,6 +57,8 @@ public class TextLayer extends BaseLayer {\n   private BaseKeyframeAnimation<Float, Float> strokeWidthAnimation;\n   @Nullable\n   private BaseKeyframeAnimation<Float, Float> trackingAnimation;\n+  @Nullable\n+  private BaseKeyframeAnimation<Float, Float> textSizeAnimation;\n \n   TextLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n     super(lottieDrawable, layerModel);\n@@ -134,7 +136,7 @@ void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n       strokePaint.setStrokeWidth(strokeWidthAnimation.getValue());\n     } else {\n       float parentScale = Utils.getScale(parentMatrix);\n-      strokePaint.setStrokeWidth((float) (documentData.strokeWidth * Utils.dpScale() * parentScale));\n+      strokePaint.setStrokeWidth(documentData.strokeWidth * Utils.dpScale() * parentScale);\n     }\n \n     if (lottieDrawable.useTextGlyphs()) {\n@@ -148,13 +150,14 @@ void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n \n   private void drawTextGlyphs(\n       DocumentData documentData, Matrix parentMatrix, Font font, Canvas canvas) {\n-    float fontScale = (float) documentData.size / 100f;\n+    float textSize = textSizeAnimation == null ? documentData.size : textSizeAnimation.getValue();\n+    float fontScale = textSize / 100f;\n     float parentScale = Utils.getScale(parentMatrix);\n \n     String text = documentData.text;\n \n     // Line height\n-    float lineHeight = (float) documentData.lineHeight * Utils.dpScale();\n+    float lineHeight = documentData.lineHeight * Utils.dpScale();\n \n     // Split full text in multiple lines\n     List<String> textLines = getTextLines(text);\n@@ -217,12 +220,13 @@ private void drawTextWithFont(\n       text = textDelegate.getTextInternal(text);\n     }\n     fillPaint.setTypeface(typeface);\n-    fillPaint.setTextSize((float) (documentData.size * Utils.dpScale()));\n+    float textSize = textSizeAnimation == null ? documentData.size : textSizeAnimation.getValue();\n+    fillPaint.setTextSize(textSize * Utils.dpScale());\n     strokePaint.setTypeface(fillPaint.getTypeface());\n     strokePaint.setTextSize(fillPaint.getTextSize());\n \n     // Line height\n-    float lineHeight = (float) documentData.lineHeight * Utils.dpScale();\n+    float lineHeight = documentData.lineHeight * Utils.dpScale();\n \n     // Split full text in multiple lines\n     List<String> textLines = getTextLines(text);\n@@ -312,7 +316,7 @@ private void drawCharacterAsGlyph(\n       Path path = contentGroups.get(j).getPath();\n       path.computeBounds(rectF, false);\n       matrix.set(parentMatrix);\n-      matrix.preTranslate(0, (float) -documentData.baselineShift * Utils.dpScale());\n+      matrix.preTranslate(0, -documentData.baselineShift * Utils.dpScale());\n       matrix.preScale(fontScale, fontScale);\n       path.transform(matrix);\n       if (documentData.strokeOverFill) {\n@@ -472,6 +476,17 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n           addAnimation(trackingAnimation);\n         }\n       }\n+    } else if (property == LottieProperty.TEXT_SIZE) {\n+      if (callback == null) {\n+        if (textSizeAnimation != null) {\n+          removeAnimation(textSizeAnimation);\n+        }\n+        textSizeAnimation = null;\n+      } else {\n+        textSizeAnimation = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Float>) callback);\n+        textSizeAnimation.addUpdateListener(this);\n+        addAnimation(textSizeAnimation);\n+      }\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n@@ -30,14 +30,14 @@ private DocumentDataParser() {\n   public DocumentData parse(JsonReader reader, float scale) throws IOException {\n     String text = null;\n     String fontName = null;\n-    double size = 0;\n+    float size = 0f;\n     Justification justification = Justification.CENTER;\n     int tracking = 0;\n-    double lineHeight = 0;\n-    double baselineShift = 0;\n+    float lineHeight = 0f;\n+    float baselineShift = 0f;\n     int fillColor = 0;\n     int strokeColor = 0;\n-    double strokeWidth = 0;\n+    float strokeWidth = 0f;\n     boolean strokeOverFill = true;\n \n     reader.beginObject();\n@@ -50,7 +50,7 @@ public DocumentData parse(JsonReader reader, float scale) throws IOException {\n           fontName = reader.nextString();\n           break;\n         case 2:\n-          size = reader.nextDouble();\n+          size = (float) reader.nextDouble();\n           break;\n         case 3:\n           int justificationInt = reader.nextInt();\n@@ -64,10 +64,10 @@ public DocumentData parse(JsonReader reader, float scale) throws IOException {\n           tracking = reader.nextInt();\n           break;\n         case 5:\n-          lineHeight = reader.nextDouble();\n+          lineHeight = (float) reader.nextDouble();\n           break;\n         case 6:\n-          baselineShift = reader.nextDouble();\n+          baselineShift = (float) reader.nextDouble();\n           break;\n         case 7:\n           fillColor = JsonUtils.jsonToColor(reader);\n@@ -76,7 +76,7 @@ public DocumentData parse(JsonReader reader, float scale) throws IOException {\n           strokeColor = JsonUtils.jsonToColor(reader);\n           break;\n         case 9:\n-          strokeWidth = reader.nextDouble();\n+          strokeWidth = (float) reader.nextDouble();\n           break;\n         case 10:\n           strokeOverFill = reader.nextBoolean();",
    "output": "Added a dynamic property for text size (#1447)\n\nAlso made DocumentData float values to be more consistent with the rest of the codebase.\r\n\r\nFixes #1421"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -600,6 +600,18 @@ public void setMinAndMaxFrame(String markerName) {\n     lottieDrawable.setMinAndMaxFrame(markerName);\n   }\n \n+  /**\n+   * Sets the minimum and maximum frame to the start marker start and the maximum frame to the end marker start.\n+   * playEndMarkerStartFrame determines whether or not to play the frame that the end marker is on. If the end marker\n+   * represents the end of the section that you want, it should be true. If the marker represents the beginning of the\n+   * next section, it should be false.\n+   *\n+   * @throws IllegalArgumentException if either marker is not found.\n+   */\n+  public void setMinAndMaxFrame(final String startMarkerName, final String endMarkerName, final boolean playEndMarkerStartFrame) {\n+    lottieDrawable.setMinAndMaxFrame(startMarkerName, endMarkerName, playEndMarkerStartFrame);\n+  }\n+\n   /**\n    * @see #setMinFrame(int)\n    * @see #setMaxFrame(int)\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -591,6 +591,39 @@ public void run(LottieComposition composition) {\n     setMinAndMaxFrame(startFrame, startFrame + (int) marker.durationFrames);\n   }\n \n+  /**\n+   * Sets the minimum and maximum frame to the start marker start and the maximum frame to the end marker start.\n+   * playEndMarkerStartFrame determines whether or not to play the frame that the end marker is on. If the end marker\n+   * represents the end of the section that you want, it should be true. If the marker represents the beginning of the\n+   * next section, it should be false.\n+   *\n+   * @throws IllegalArgumentException if either marker is not found.\n+   */\n+  public void setMinAndMaxFrame(final String startMarkerName, final String endMarkerName, final boolean playEndMarkerStartFrame) {\n+    if (composition == null) {\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override\n+        public void run(LottieComposition composition) {\n+          setMinAndMaxFrame(startMarkerName, endMarkerName, playEndMarkerStartFrame);\n+        }\n+      });\n+      return;\n+    }\n+    Marker startMarker = composition.getMarker(startMarkerName);\n+    if (startMarker == null) {\n+      throw new IllegalArgumentException(\"Cannot find marker with name \" + startMarkerName + \".\");\n+    }\n+    int startFrame = (int) startMarker.startFrame;\n+\n+    Marker endMarker = composition.getMarker(endMarkerName);\n+    if (endMarkerName == null) {\n+      throw new IllegalArgumentException(\"Cannot find marker with name \" + endMarkerName + \".\");\n+    }\n+    int endFrame = (int) (endMarker.startFrame + (playEndMarkerStartFrame ? 1f : 0f));\n+\n+    setMinAndMaxFrame(startFrame, endFrame);\n+  }\n+\n   /**\n    * @see #setMinFrame(int)\n    * @see #setMaxFrame(int)",
    "output": "Add setMinAndMaxFrame with 2 markers (#1448)\n\nFixes #1395"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -911,6 +911,21 @@ private void clearComposition() {\n     lottieDrawable.clearComposition();\n   }\n \n+  /**\n+   * If you are experiencing a device specific crash that happens during drawing, you can set this to true\n+   * for those devices. If set to true, draw will be wrapped with a try/catch which will cause Lottie to\n+   * render an empty frame rather than crash your app.\n+   *\n+   * Ideally, you will never need this and the vast majority of apps and animations won't. However, you may use\n+   * this for very specific cases if absolutely necessary.\n+   *\n+   * There is no XML attr for this because it should be set programmatically and only for specific devices that\n+   * are known to be problematic.\n+   */\n+  public void setSafeMode(boolean safeMode) {\n+    lottieDrawable.setSafeMode(safeMode);\n+  }\n+\n   /**\n    * If rendering via software, Android will fail to generate a bitmap if the view is too large. Rather than displaying\n    * nothing, fallback on hardware acceleration which may incur a performance hit.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -63,6 +63,7 @@ private interface LazyCompositionTask {\n   private final LottieValueAnimator animator = new LottieValueAnimator();\n   private float scale = 1f;\n   private boolean systemAnimationsEnabled = true;\n+  private boolean safeMode = false;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   private final ArrayList<LazyCompositionTask> lazyCompositionTasks = new ArrayList<>();\n@@ -300,6 +301,18 @@ public void clearComposition() {\n     invalidateSelf();\n   }\n \n+  /**\n+   * If you are experiencing a device specific crash that happens during drawing, you can set this to true\n+   * for those devices. If set to true, draw will be wrapped with a try/catch which will cause Lottie to\n+   * render an empty frame rather than crash your app.\n+   *\n+   * Ideally, you will never need this and the vast majority of apps and animations won't. However, you may use\n+   * this for very specific cases if absolutely necessary.\n+   */\n+  public void setSafeMode(boolean safeMode) {\n+    this.safeMode = safeMode;\n+  }\n+\n   @Override\n   public void invalidateSelf() {\n     if (isDirty) {\n@@ -339,13 +352,25 @@ public void draw(@NonNull Canvas canvas) {\n \n     L.beginSection(\"Drawable#draw\");\n \n+    if (safeMode) {\n+      try {\n+        drawInternal(canvas);\n+      } catch (Throwable e) {\n+        Logger.error(\"Lottie crashed in draw!\", e);\n+      }\n+    } else {\n+      drawInternal(canvas);\n+    }\n+\n+    L.endSection(\"Drawable#draw\");\n+  }\n+\n+  private void drawInternal(@NonNull Canvas canvas) {\n     if (ImageView.ScaleType.FIT_XY == scaleType) {\n       drawWithNewAspectRatio(canvas);\n     } else {\n       drawWithOriginalAspectRatio(canvas);\n     }\n-\n-    L.endSection(\"Drawable#draw\");\n   }\n \n // <editor-fold desc=\"animator\">\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieLogger.java b/lottie/src/main/java/com/airbnb/lottie/LottieLogger.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieLogger.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieLogger.java\n@@ -12,4 +12,6 @@ public interface LottieLogger {\n   void warning(String message);\n \n   void warning(String message, Throwable exception);\n+\n+  void error(String message, Throwable exception);\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LogcatLogger.java b/lottie/src/main/java/com/airbnb/lottie/utils/LogcatLogger.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LogcatLogger.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LogcatLogger.java\n@@ -43,4 +43,10 @@ public void warning(String message, Throwable exception) {\n \n     loggedMessages.add(message);\n   }\n+\n+  @Override public void error(String message, Throwable exception) {\n+    if (L.DBG) {\n+      Log.d(L.TAG, message, exception);\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Logger.java b/lottie/src/main/java/com/airbnb/lottie/utils/Logger.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Logger.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Logger.java\n@@ -29,4 +29,8 @@ public static void warning(String message) {\n   public static void warning(String message, Throwable exception) {\n     INSTANCE.warning(message, exception);\n   }\n+\n+  public static void error(String message, Throwable exception) {\n+    INSTANCE.error(message, exception);\n+  }\n }",
    "output": "Add a safeMode API (#1449)\n\nThis allows you to wrap draw with a try/catch for specific problematic devices. Please read its doc before using.\r\n\r\n#1422"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -23,6 +23,7 @@\n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n import androidx.appcompat.widget.AppCompatImageView;\n+import androidx.core.view.ViewCompat;\n \n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n@@ -247,7 +248,7 @@ private void init(@Nullable AttributeSet attrs) {\n     ss.animationName = animationName;\n     ss.animationResId = animationResId;\n     ss.progress = lottieDrawable.getProgress();\n-    ss.isAnimating = lottieDrawable.isAnimating();\n+    ss.isAnimating = lottieDrawable.isAnimating() || (!ViewCompat.isAttachedToWindow(this) && wasAnimatingWhenDetached);\n     ss.imageAssetsFolder = lottieDrawable.getImageAssetsFolder();\n     ss.repeatMode = lottieDrawable.getRepeatMode();\n     ss.repeatCount = lottieDrawable.getRepeatCount();",
    "output": "Save play state in SavedState even if view was detached from the window first (#1442)\n\nTest failed before but passes now\r\n\r\nFixes #1428"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -23,13 +23,8 @@\n \n import java.io.Closeable;\n import java.io.InterruptedIOException;\n-import java.net.BindException;\n-import java.net.ConnectException;\n-import java.net.NoRouteToHostException;\n-import java.net.PortUnreachableException;\n import java.net.ProtocolException;\n import java.net.SocketException;\n-import java.net.SocketTimeoutException;\n import java.net.UnknownHostException;\n import java.net.UnknownServiceException;\n import java.nio.channels.ClosedChannelException;\n@@ -43,7 +38,7 @@ public final class Utils {\n   private static final Path tempPath = new Path();\n   private static final Path tempPath2 = new Path();\n   private static final float[] points = new float[4];\n-  private static final float SQRT_2 = (float) Math.sqrt(2);\n+  private static final float INV_SQRT_2 = (float) (Math.sqrt(2) / 2.0);\n   private static float dpScale = -1;\n \n   private Utils() {\n@@ -78,15 +73,14 @@ public static void closeQuietly(Closeable closeable) {\n   public static float getScale(Matrix matrix) {\n     points[0] = 0;\n     points[1] = 0;\n-    // Use sqrt(2) so that the hypotenuse is of length 1.\n-    points[2] = SQRT_2;\n-    points[3] = SQRT_2;\n+    // Use 1/sqrt(2) so that the hypotenuse is of length 1.\n+    points[2] = INV_SQRT_2;\n+    points[3] = INV_SQRT_2;\n     matrix.mapPoints(points);\n     float dx = points[2] - points[0];\n     float dy = points[3] - points[1];\n \n-    // TODO: figure out why the result needs to be divided by 2.\n-    return (float) Math.hypot(dx, dy) / 2f;\n+    return (float) Math.hypot(dx, dy);\n   }\n \n   public static boolean hasZeroScaleAxis(Matrix matrix) {",
    "output": "Solved TODO of Utils.getScale() (#1446)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java b/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java\n@@ -7,7 +7,8 @@ public class Mask {\n   public enum MaskMode {\n     MASK_MODE_ADD,\n     MASK_MODE_SUBTRACT,\n-    MASK_MODE_INTERSECT\n+    MASK_MODE_INTERSECT,\n+    MASK_MODE_NONE\n   }\n \n   private final MaskMode maskMode;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -310,6 +310,9 @@ private void intersectBoundsWithMask(RectF rect, Matrix matrix) {\n       path.transform(matrix);\n \n       switch (mask.getMaskMode()) {\n+        case MASK_MODE_NONE:\n+          // Mask mode none will just render the original content so it is the whole bounds.\n+          return;\n         case MASK_MODE_SUBTRACT:\n           // If there is a subtract mask, the mask could potentially be the size of the entire\n           // canvas so we can't use the mask bounds.\n@@ -378,6 +381,16 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n       BaseKeyframeAnimation<ShapeData, Path> maskAnimation = this.mask.getMaskAnimations().get(i);\n       BaseKeyframeAnimation<Integer, Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);\n       switch (mask.getMaskMode()) {\n+        case MASK_MODE_NONE:\n+          // None mask should have no effect. If all masks are NONE, fill the\n+          // mask canvas with a rectangle so it fully covers the original layer content.\n+          // However, if there are other masks, they should be the only ones that have an effect so\n+          // this should noop.\n+          if (areAllMasksNone()) {\n+            contentPaint.setAlpha(255);\n+            canvas.drawRect(rect, contentPaint);\n+          }\n+          break;\n         case MASK_MODE_ADD:\n           if (mask.isInverted()) {\n             applyInvertedAddMask(canvas, matrix, mask, maskAnimation, opacityAnimation);\n@@ -411,6 +424,19 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n     L.endSection(\"Layer#restoreLayer\");\n   }\n \n+  private boolean areAllMasksNone() {\n+    if (mask.getMaskAnimations().isEmpty()) {\n+      return false;\n+    }\n+    boolean areAllMasksNone = true;\n+    for (int i = 0; i < mask.getMasks().size(); i++) {\n+      if (mask.getMasks().get(i).getMaskMode() != Mask.MaskMode.MASK_MODE_NONE) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n   private void applyAddMask(Canvas canvas, Matrix matrix, Mask mask,\n       BaseKeyframeAnimation<ShapeData, Path> maskAnimation, BaseKeyframeAnimation<Integer, Integer> opacityAnimation) {\n     Path maskPath = maskAnimation.getValue();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java\n@@ -32,6 +32,9 @@ static Mask parse(\n             case \"s\":\n               maskMode = Mask.MaskMode.MASK_MODE_SUBTRACT;\n               break;\n+            case \"n\":\n+              maskMode = Mask.MaskMode.MASK_MODE_NONE;\n+              break;\n             case \"i\":\n               composition.addWarning(\n                   \"Animation contains intersect masks. They are not supported but will be treated like add masks.\");",
    "output": "Add support for mask mode none (#1440)\n\nFixes #1427"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -1,18 +1,16 @@\n package com.airbnb.lottie.animation.keyframe;\n \n-import android.util.Log;\n+import androidx.annotation.FloatRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.L;\n import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n-import java.security.Key;\n import java.util.ArrayList;\n import java.util.List;\n \n-import androidx.annotation.FloatRange;\n-import androidx.annotation.Nullable;\n-\n /**\n  * @param <K> Keyframe type\n  * @param <A> Animation type\n@@ -26,21 +24,17 @@ public interface AnimationListener {\n   final List<AnimationListener> listeners = new ArrayList<>(1);\n   private boolean isDiscrete = false;\n \n-  private final List<? extends Keyframe<K>> keyframes;\n+  private final KeyframesWrapper<K> keyframesWrapper;\n   private float progress = 0f;\n   @Nullable protected LottieValueCallback<A> valueCallback;\n \n-  @Nullable private Keyframe<K> cachedKeyframe;\n-\n-  @Nullable private Keyframe<K> cachedGetValueKeyframe;\n-  private float cachedGetValueProgress = -1f;\n   @Nullable private A cachedGetValue = null;\n \n   private float cachedStartDelayProgress = -1f;\n   private float cachedEndProgress = -1f;\n \n   BaseKeyframeAnimation(List<? extends Keyframe<K>> keyframes) {\n-    this.keyframes = keyframes;\n+    keyframesWrapper = wrap(keyframes);\n   }\n \n   public void setIsDiscrete() {\n@@ -52,12 +46,9 @@ public void addUpdateListener(AnimationListener listener) {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-    if (keyframes.isEmpty()) {\n+    if (keyframesWrapper.isEmpty()) {\n       return;\n     }\n-    // Must use hashCode() since the actual object instance will be returned\n-    // from getValue() below with the new values.\n-    Keyframe<K> previousKeyframe = getCurrentKeyframe();\n     if (progress < getStartDelayProgress()) {\n       progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n@@ -68,10 +59,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n       return;\n     }\n     this.progress = progress;\n-    // Just trigger a change but don't compute values if there is a value callback.\n-    Keyframe<K> newKeyframe = getCurrentKeyframe();\n-\n-    if (previousKeyframe != newKeyframe || !newKeyframe.isStatic()) {\n+    if (keyframesWrapper.isValueChanged(progress)) {\n       notifyListeners();\n     }\n   }\n@@ -84,22 +72,7 @@ public void notifyListeners() {\n \n   protected Keyframe<K> getCurrentKeyframe() {\n     L.beginSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n-    if (cachedKeyframe != null && cachedKeyframe.containsProgress(progress)) {\n-      L.endSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n-      return cachedKeyframe;\n-    }\n-\n-    Keyframe<K> keyframe = keyframes.get(keyframes.size() - 1);\n-    if (progress < keyframe.getStartProgress()) {\n-      for (int i = keyframes.size() - 1; i >= 0; i--) {\n-        keyframe = keyframes.get(i);\n-        if (keyframe.containsProgress(progress)) {\n-          break;\n-        }\n-      }\n-    }\n-\n-    cachedKeyframe = keyframe;\n+    final Keyframe<K> keyframe = keyframesWrapper.getCurrentKeyframe();\n     L.endSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n     return keyframe;\n   }\n@@ -138,28 +111,26 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n   @FloatRange(from = 0f, to = 1f)\n   private float getStartDelayProgress() {\n       if (cachedStartDelayProgress == -1f) {\n-            cachedStartDelayProgress = keyframes.isEmpty() ? 0f : keyframes.get(0).getStartProgress();\n+        cachedStartDelayProgress = keyframesWrapper.getStartDelayProgress();\n       }\n       return cachedStartDelayProgress;\n   }\n \n   @FloatRange(from = 0f, to = 1f)\n   float getEndProgress() {\n       if (cachedEndProgress == -1f) {\n-        cachedEndProgress = keyframes.isEmpty() ? 1f : keyframes.get(keyframes.size() - 1).getEndProgress();\n+        cachedEndProgress = keyframesWrapper.getEndProgress();\n       }\n       return cachedEndProgress;\n   }\n \n   public A getValue() {\n-    Keyframe<K> keyframe = getCurrentKeyframe();\n     float progress = getInterpolatedCurrentKeyframeProgress();\n-    if (valueCallback == null && keyframe == cachedGetValueKeyframe && cachedGetValueProgress == progress) {\n+    if (valueCallback == null && keyframesWrapper.isCachedValueEnabled(progress)) {\n       return cachedGetValue;\n     }\n \n-    cachedGetValueKeyframe = keyframe;\n-    cachedGetValueProgress = progress;\n+    final Keyframe<K> keyframe = getCurrentKeyframe();\n     A value = getValue(keyframe, progress);\n     cachedGetValue = value;\n \n@@ -185,4 +156,177 @@ public void setValueCallback(@Nullable LottieValueCallback<A> valueCallback) {\n    * should be able to handle values outside of that range.\n    */\n   abstract A getValue(Keyframe<K> keyframe, float keyframeProgress);\n+\n+  private static <T> KeyframesWrapper<T> wrap(List<? extends Keyframe<T>> keyframes) {\n+    if (keyframes.isEmpty()) {\n+      return new EmptyKeyframeWrapper<>();\n+    }\n+    if (keyframes.size() == 1) {\n+      return new SingleKeyframeWrapper<>(keyframes);\n+    }\n+    return new KeyframesWrapperImpl<>(keyframes);\n+  }\n+\n+  private interface KeyframesWrapper<T> {\n+    boolean isEmpty();\n+\n+    boolean isValueChanged(float progress);\n+\n+    Keyframe<T> getCurrentKeyframe();\n+\n+    @FloatRange(from = 0f, to = 1f)\n+    float getStartDelayProgress();\n+\n+    @FloatRange(from = 0f, to = 1f)\n+    float getEndProgress();\n+\n+    boolean isCachedValueEnabled(float interpolatedProgress);\n+  }\n+\n+  private static final class EmptyKeyframeWrapper<T> implements KeyframesWrapper<T> {\n+    @Override\n+    public boolean isEmpty() {\n+      return true;\n+    }\n+\n+    @Override\n+    public boolean isValueChanged(float progress) {\n+      return false;\n+    }\n+\n+    @Override\n+    public Keyframe<T> getCurrentKeyframe() {\n+      throw new IllegalStateException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public float getStartDelayProgress() {\n+      return 0f;\n+    }\n+\n+    @Override\n+    public float getEndProgress() {\n+      return 1f;\n+    }\n+\n+    @Override\n+    public boolean isCachedValueEnabled(float interpolatedProgress) {\n+      throw new IllegalStateException(\"not implemented\");\n+    }\n+  }\n+\n+  private static final class SingleKeyframeWrapper<T> implements KeyframesWrapper<T> {\n+    @NonNull\n+    private final Keyframe<T> keyframe;\n+    private float cachedInterpolatedProgress = -1f;\n+\n+    SingleKeyframeWrapper(List<? extends Keyframe<T>> keyframes) {\n+      this.keyframe = keyframes.get(0);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean isValueChanged(float progress) {\n+      return !keyframe.isStatic();\n+    }\n+\n+    @Override\n+    public Keyframe<T> getCurrentKeyframe() {\n+      return keyframe;\n+    }\n+\n+    @Override\n+    public float getStartDelayProgress() {\n+      return keyframe.getStartProgress();\n+    }\n+\n+    @Override\n+    public float getEndProgress() {\n+      return keyframe.getEndProgress();\n+    }\n+\n+    @Override\n+    public boolean isCachedValueEnabled(float interpolatedProgress) {\n+      if (cachedInterpolatedProgress == interpolatedProgress) {\n+        return true;\n+      }\n+      cachedInterpolatedProgress = interpolatedProgress;\n+      return false;\n+    }\n+  }\n+\n+  private static final class KeyframesWrapperImpl<T> implements KeyframesWrapper<T> {\n+    private final List<? extends Keyframe<T>> keyframes;\n+    @NonNull\n+    private Keyframe<T> currentKeyframe;\n+    private Keyframe<T> cachedCurrentKeyframe = null;\n+    private float cachedInterpolatedProgress = -1f;\n+\n+    KeyframesWrapperImpl(List<? extends Keyframe<T>> keyframes) {\n+      this.keyframes = keyframes;\n+      currentKeyframe = findKeyframe(0);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean isValueChanged(float progress) {\n+      if (currentKeyframe.containsProgress(progress)) {\n+        return !currentKeyframe.isStatic();\n+      }\n+      currentKeyframe = findKeyframe(progress);\n+      return true;\n+    }\n+\n+    private Keyframe<T> findKeyframe(float progress) {\n+      Keyframe<T> keyframe = keyframes.get(keyframes.size() - 1);\n+      if (progress >= keyframe.getStartProgress()) {\n+        return keyframe;\n+      }\n+      for (int i = keyframes.size() - 2; i >= 1; i--) {\n+        keyframe = keyframes.get(i);\n+        if (currentKeyframe == keyframe) {\n+          continue;\n+        }\n+        if (keyframe.containsProgress(progress)) {\n+          return keyframe;\n+        }\n+      }\n+      return keyframes.get(0);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public Keyframe<T> getCurrentKeyframe() {\n+      return currentKeyframe;\n+    }\n+\n+    @Override\n+    public float getStartDelayProgress() {\n+      return keyframes.get(0).getStartProgress();\n+    }\n+\n+    @Override\n+    public float getEndProgress() {\n+      return keyframes.get(keyframes.size() - 1).getEndProgress();\n+    }\n+\n+    @Override\n+    public boolean isCachedValueEnabled(float interpolatedProgress) {\n+      if (cachedCurrentKeyframe == currentKeyframe\n+              && cachedInterpolatedProgress == interpolatedProgress) {\n+        return true;\n+      }\n+      cachedCurrentKeyframe = currentKeyframe;\n+      cachedInterpolatedProgress = interpolatedProgress;\n+      return false;\n+    }\n+  }\n }",
    "output": "Add KeyframesWrapper to improve setProgress() performance (#1426)\n\nTo improve performance of BaseKeyframeAnimation.getCurrentKeyframe() called by setProgress() of BaseKeyframeAnimation who has only one Keyframe, SingleKeyframeWrapper was implemented with KeyframeWrapper interface.\r\nAt LottieLogo1.json, processing time of setProgress() was reduced about 70%."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -204,6 +204,9 @@ private void init(@Nullable AttributeSet attrs) {\n       setRenderMode(RenderMode.values()[renderModeOrdinal]);\n     }\n \n+    if (getScaleType() != null) {\n+      lottieDrawable.setScaleType(getScaleType());\n+    }\n     ta.recycle();\n \n     lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n@@ -844,7 +847,9 @@ public float getScale() {\n \n   @Override public void setScaleType(ScaleType scaleType) {\n     super.setScaleType(scaleType);\n-    lottieDrawable.setScaleType(scaleType);\n+    if (lottieDrawable != null) {\n+      lottieDrawable.setScaleType(scaleType);\n+    }\n   }\n \n   @MainThread",
    "output": "Fix NPE when set ScaleType in xml. (#1433)\n\nFixes #1432"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -753,6 +753,11 @@ public boolean isLooping() {\n   }\n \n   public boolean isAnimating() {\n+    // On some versions of Android, this is called from the LottieAnimationView constructor, before animator was created.\n+    // https://github.com/airbnb/lottie-android/issues/1430\n+    if (animator == null) {\n+      return false;\n+    }\n     return animator.isRunning();\n   }\n ",
    "output": "Prevent a NPE when creating LottieAnimationView (#1434)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -842,6 +842,11 @@ public float getScale() {\n     return lottieDrawable.getScale();\n   }\n \n+  @Override public void setScaleType(ScaleType scaleType) {\n+    super.setScaleType(scaleType);\n+    lottieDrawable.setScaleType(scaleType);\n+  }\n+\n   @MainThread\n   public void cancelAnimation() {\n     wasAnimatingWhenNotShown = false;\n@@ -955,6 +960,21 @@ public void setApplyingOpacityToLayersEnabled(boolean isApplyingOpacityToLayersE\n     lottieDrawable.setApplyingOpacityToLayersEnabled(isApplyingOpacityToLayersEnabled);\n   }\n \n+  /**\n+   * Disable the extraScale mode in {@link #draw(Canvas)} function when scaleType is FitXY. It doesn't affect the rendering with other scaleTypes.\n+   *\n+   * <p>When there are 2 animation layout side by side, the default extra scale mode might leave 1 pixel not drawn between 2 animation, and\n+   * disabling the extraScale mode can fix this problem</p>\n+   *\n+   * <b>Attention:</b> Disable the extra scale mode can downgrade the performance and may lead to larger memory footprint. Please only disable this\n+   * mode when using animation with a reasonable dimension (smaller than screen size).\n+   *\n+   * @see LottieDrawable#drawWithNewAspectRatio(Canvas)\n+   */\n+  public void disableExtraScaleModeInFitXY() {\n+    lottieDrawable.disableExtraScaleModeInFitXY();\n+  }\n+\n   private void enableOrDisableHardwareLayer() {\n     int layerType = LAYER_TYPE_SOFTWARE;\n     switch (renderMode) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -8,11 +8,13 @@\n import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n import android.graphics.PixelFormat;\n+import android.graphics.Rect;\n import android.graphics.Typeface;\n import android.graphics.drawable.Animatable;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n import android.view.View;\n+import android.widget.ImageView;\n \n import androidx.annotation.FloatRange;\n import androidx.annotation.IntDef;\n@@ -73,6 +75,8 @@ public void onAnimationUpdate(ValueAnimator animation) {\n     }\n   };\n   @Nullable\n+  private ImageView.ScaleType scaleType;\n+  @Nullable\n   private ImageAssetManager imageAssetManager;\n   @Nullable\n   private String imageAssetsFolder;\n@@ -90,6 +94,7 @@ public void onAnimationUpdate(ValueAnimator animation) {\n   private int alpha = 255;\n   private boolean performanceTrackingEnabled;\n   private boolean isApplyingOpacityToLayersEnabled;\n+  private boolean isExtraScaleEnabled = true;\n   /**\n    * True if the drawable has not been drawn since the last invalidateSelf.\n    * We can do this to prevent things like bounds from getting recalculated\n@@ -260,6 +265,21 @@ public void setApplyingOpacityToLayersEnabled(boolean isApplyingOpacityToLayersE\n     this.isApplyingOpacityToLayersEnabled = isApplyingOpacityToLayersEnabled;\n   }\n \n+  /**\n+   * Disable the extraScale mode in {@link #draw(Canvas)} function when scaleType is FitXY. It doesn't affect the rendering with other scaleTypes.\n+   *\n+   * <p>When there are 2 animation layout side by side, the default extra scale mode might leave 1 pixel not drawn between 2 animation, and\n+   * disabling the extraScale mode can fix this problem</p>\n+   *\n+   * <b>Attention:</b> Disable the extra scale mode can downgrade the performance and may lead to larger memory footprint. Please only disable this\n+   * mode when using animation with a reasonable dimension (smaller than screen size).\n+   *\n+   * @see #drawWithNewAspectRatio(Canvas)\n+   */\n+  public void disableExtraScaleModeInFitXY() {\n+    this.isExtraScaleEnabled = false;\n+  }\n+\n   public boolean isApplyingOpacityToLayersEnabled() {\n     return isApplyingOpacityToLayersEnabled;\n   }\n@@ -316,50 +336,16 @@ public int getOpacity() {\n   @Override\n   public void draw(@NonNull Canvas canvas) {\n     isDirty = false;\n-    L.beginSection(\"Drawable#draw\");\n-    if (compositionLayer == null) {\n-      return;\n-    }\n \n-    float scale = this.scale;\n-    float extraScale = 1f;\n-    float maxScale = getMaxScale(canvas);\n-    if (scale > maxScale) {\n-      scale = maxScale;\n-      extraScale = this.scale / scale;\n-    }\n-\n-    int saveCount = -1;\n-    if (extraScale > 1) {\n-      // This is a bit tricky...\n-      // We can't draw on a canvas larger than ViewConfiguration.get(context).getScaledMaximumDrawingCacheSize()\n-      // which works out to be roughly the size of the screen because Android can't generate a\n-      // bitmap large enough to render to.\n-      // As a result, we cap the scale such that it will never be wider/taller than the screen\n-      // and then only render in the top left corner of the canvas. We then use extraScale\n-      // to scale up the rest of the scale. However, since we rendered the animation to the top\n-      // left corner, we need to scale up and translate the canvas to zoom in on the top left\n-      // corner.\n-      saveCount = canvas.save();\n-      float halfWidth = composition.getBounds().width() / 2f;\n-      float halfHeight = composition.getBounds().height() / 2f;\n-      float scaledHalfWidth = halfWidth * scale;\n-      float scaledHalfHeight = halfHeight * scale;\n+    L.beginSection(\"Drawable#draw\");\n \n-      canvas.translate(\n-          getScale() * halfWidth - scaledHalfWidth,\n-          getScale() * halfHeight - scaledHalfHeight);\n-      canvas.scale(extraScale, extraScale, scaledHalfWidth, scaledHalfHeight);\n+    if (ImageView.ScaleType.FIT_XY == scaleType) {\n+      drawWithNewAspectRatio(canvas);\n+    } else {\n+      drawWithOriginalAspectRatio(canvas);\n     }\n \n-    matrix.reset();\n-    matrix.preScale(scale, scale);\n-    compositionLayer.draw(canvas, matrix, alpha);\n     L.endSection(\"Drawable#draw\");\n-\n-    if (saveCount > 0) {\n-      canvas.restoreToCount(saveCount);\n-    }\n   }\n \n // <editor-fold desc=\"animator\">\n@@ -1066,6 +1052,10 @@ public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what) {\n     callback.unscheduleDrawable(this, what);\n   }\n \n+  void setScaleType(ImageView.ScaleType scaleType) {\n+    this.scaleType = scaleType;\n+  }\n+\n   /**\n    * If the composition is larger than the canvas, we have to use a different method to scale it up.\n    * See the comments in {@link #draw(Canvas)} for more info.\n@@ -1076,6 +1066,94 @@ private float getMaxScale(@NonNull Canvas canvas) {\n     return Math.min(maxScaleX, maxScaleY);\n   }\n \n+  private void drawWithNewAspectRatio(Canvas canvas) {\n+    if (compositionLayer == null) {\n+      return;\n+    }\n+\n+    int saveCount = -1;\n+    Rect bounds = getBounds();\n+    // In fitXY mode, the scale doesn't take effect.\n+    float scaleX = bounds.width() / (float) composition.getBounds().width();\n+    float scaleY = bounds.height() / (float) composition.getBounds().height();\n+\n+    if (isExtraScaleEnabled) {\n+      float maxScale = Math.min(scaleX, scaleY);\n+      float extraScale = 1f;\n+      if (maxScale < 1f) {\n+        extraScale = extraScale / maxScale;\n+        scaleX = scaleX / extraScale;\n+        scaleY = scaleY / extraScale;\n+      }\n+\n+      if (extraScale > 1) {\n+        saveCount = canvas.save();\n+        float halfWidth = bounds.width() / 2f;\n+        float halfHeight = bounds.height() / 2f;\n+        float scaledHalfWidth = halfWidth * maxScale;\n+        float scaledHalfHeight = halfHeight * maxScale;\n+\n+        canvas.translate(\n+            halfWidth - scaledHalfWidth,\n+            halfHeight - scaledHalfHeight);\n+        canvas.scale(extraScale, extraScale, scaledHalfWidth, scaledHalfHeight);\n+      }\n+    }\n+\n+    matrix.reset();\n+    matrix.preScale(scaleX, scaleY);\n+    compositionLayer.draw(canvas, matrix, alpha);\n+\n+    if (saveCount > 0) {\n+      canvas.restoreToCount(saveCount);\n+    }\n+  }\n+\n+  private void drawWithOriginalAspectRatio(Canvas canvas) {\n+    if (compositionLayer == null) {\n+      return;\n+    }\n+\n+    float scale = this.scale;\n+    float extraScale = 1f;\n+    float maxScale = getMaxScale(canvas);\n+    if (scale > maxScale) {\n+      scale = maxScale;\n+      extraScale = this.scale / scale;\n+    }\n+\n+    int saveCount = -1;\n+    if (extraScale > 1) {\n+      // This is a bit tricky...\n+      // We can't draw on a canvas larger than ViewConfiguration.get(context).getScaledMaximumDrawingCacheSize()\n+      // which works out to be roughly the size of the screen because Android can't generate a\n+      // bitmap large enough to render to.\n+      // As a result, we cap the scale such that it will never be wider/taller than the screen\n+      // and then only render in the top left corner of the canvas. We then use extraScale\n+      // to scale up the rest of the scale. However, since we rendered the animation to the top\n+      // left corner, we need to scale up and translate the canvas to zoom in on the top left\n+      // corner.\n+      saveCount = canvas.save();\n+      float halfWidth = composition.getBounds().width() / 2f;\n+      float halfHeight = composition.getBounds().height() / 2f;\n+      float scaledHalfWidth = halfWidth * scale;\n+      float scaledHalfHeight = halfHeight * scale;\n+\n+      canvas.translate(\n+          getScale() * halfWidth - scaledHalfWidth,\n+          getScale() * halfHeight - scaledHalfHeight);\n+      canvas.scale(extraScale, extraScale, scaledHalfWidth, scaledHalfHeight);\n+    }\n+\n+    matrix.reset();\n+    matrix.preScale(scale, scale);\n+    compositionLayer.draw(canvas, matrix, alpha);\n+\n+    if (saveCount > 0) {\n+      canvas.restoreToCount(saveCount);\n+    }\n+  }\n+\n   private static class ColorFilterData {\n \n     final String layerName;",
    "output": "Support ScaleType.FIT_XY. (#1418)\n\nFixes #801 \r\nFixes #1384"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -402,6 +402,7 @@ public void run(LottieComposition composition) {\n     }\n     if (!systemAnimationsEnabled) {\n       setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n+      animator.endAnimation();\n     }\n   }\n \n@@ -426,9 +427,14 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n-    if (systemAnimationsEnabled) {\n+\n+    if (systemAnimationsEnabled || getRepeatCount() == 0) {\n       animator.resumeAnimation();\n     }\n+    if (!systemAnimationsEnabled) {\n+      setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n+      animator.endAnimation();\n+    }\n   }\n \n   /**\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -1,22 +1,38 @@\n package com.airbnb.lottie;\n \n+import android.animation.Animator;\n import android.graphics.Rect;\n import androidx.collection.LongSparseArray;\n import androidx.collection.SparseArrayCompat;\n import com.airbnb.lottie.model.Font;\n import com.airbnb.lottie.model.FontCharacter;\n import com.airbnb.lottie.model.Marker;\n import com.airbnb.lottie.model.layer.Layer;\n+\n+import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n \n import static junit.framework.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n \n public class LottieDrawableTest extends BaseTest {\n \n+  @Mock Animator.AnimatorListener animatorListener;\n+\n+  @Before\n+  public void setup() {\n+    MockitoAnnotations.initMocks(this);\n+  }\n+\n   @SuppressWarnings(\"SameParameterValue\")\n   private LottieComposition createComposition(int startFrame, int endFrame) {\n     LottieComposition composition = new LottieComposition();\n@@ -63,4 +79,28 @@ public void testMinMaxFrame() {\n     assertEquals(121f, drawable.getMinFrame());\n     assertEquals(182.99f, drawable.getMaxFrame());\n   }\n+\n+  @Test\n+  public void testPlayWhenSystemAnimationDisabled() {\n+    LottieComposition composition = createComposition(31, 391);\n+    LottieDrawable drawable = new LottieDrawable();\n+    drawable.addAnimatorListener(animatorListener);\n+    drawable.setSystemAnimationsAreEnabled(false);\n+    drawable.setComposition(composition);\n+    drawable.playAnimation();\n+    assertEquals(391, drawable.getFrame());\n+    verify(animatorListener, atLeastOnce()).onAnimationEnd(any(Animator.class), eq(false));\n+  }\n+\n+  @Test\n+  public void testResumeWhenSystemAnimationDisabled() {\n+    LottieComposition composition = createComposition(31, 391);\n+    LottieDrawable drawable = new LottieDrawable();\n+    drawable.addAnimatorListener(animatorListener);\n+    drawable.setSystemAnimationsAreEnabled(false);\n+    drawable.setComposition(composition);\n+    drawable.resumeAnimation();\n+    assertEquals(391, drawable.getFrame());\n+    verify(animatorListener, atLeastOnce()).onAnimationEnd(any(Animator.class), eq(false));\n+  }\n }",
    "output": "Improve testability when systemAnimation is disabled. (#1420)\n\n- render the very last frame.\r\n- call animation end in case app listens to the callback."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java b/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/GammaEvaluator.java\n@@ -4,7 +4,7 @@\n  * Use this instead of {@link android.animation.ArgbEvaluator} because it interpolates through the gamma color\n  * space which looks better to us humans.\n  * <p>\n- * Writted by Romain Guy and Francois Blavoet.\n+ * Written by Romain Guy and Francois Blavoet.\n  * https://androidstudygroup.slack.com/archives/animation/p1476461064000335\n  */\n public class GammaEvaluator {\n@@ -25,6 +25,9 @@ private static float EOCF_sRGB(float srgb) {\n   }\n \n   public static int evaluate(float fraction, int startInt, int endInt) {\n+    if (startInt == endInt) {\n+      return startInt;\n+    }\n     float startA = ((startInt >> 24) & 0xff) / 255.0f;\n     float startR = ((startInt >> 16) & 0xff) / 255.0f;\n     float startG = ((startInt >> 8) & 0xff) / 255.0f;\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java b/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/utils/GammaEvaluatorTest.java\n@@ -0,0 +1,16 @@\n+package com.airbnb.lottie.utils;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.*;\n+\n+public class GammaEvaluatorTest {\n+  @Test\n+  public void testEvaluateForSameColorValues() {\n+    for (int color = 0x000000; color <= 0xffffff; color++) {\n+      int actual = GammaEvaluator.evaluate(0.3f, color, color);\n+      assertThat(actual, is(color));\n+    }\n+  }\n+}",
    "output": "Early return for GammaEvaluator.evaluate() (#1397)\n\nIf startInt and endInt are same valule, the method always returns startInt (or endInt) value."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -18,6 +18,7 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.Callable;\n@@ -128,14 +129,19 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n    * Parse an animation from raw/res. This is recommended over putting your animation in assets because\n    * it uses a hard reference to R.\n    * The resource id will be used as a cache key so future usages won't parse the json again.\n+   * Note: to correctly load dark mode (-night) resources, make sure you pass Activity as a context (instead of e.g. the application context).\n+   * The Activity won't be leaked.\n    */\n   public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes) {\n     // Prevent accidentally leaking an Activity.\n+    final WeakReference<Context> contextRef = new WeakReference<>(context);\n     final Context appContext = context.getApplicationContext();\n     return cache(rawResCacheKey(context, rawRes), new Callable<LottieResult<LottieComposition>>() {\n       @Override\n       public LottieResult<LottieComposition> call() {\n-        return fromRawResSync(appContext, rawRes);\n+        @Nullable Context originalContext = contextRef.get();\n+        Context context = originalContext != null ? originalContext : appContext;\n+        return fromRawResSync(context, rawRes);\n       }\n     });\n   }\n@@ -144,6 +150,8 @@ public LottieResult<LottieComposition> call() {\n    * Parse an animation from raw/res. This is recommended over putting your animation in assets because\n    * it uses a hard reference to R.\n    * The resource id will be used as a cache key so future usages won't parse the json again.\n+   * Note: to correctly load dark mode (-night) resources, make sure you pass Activity as a context (instead of e.g. the application context).\n+   * The Activity won't be leaked.\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromRawResSync(Context context, @RawRes int rawRes) {\n@@ -270,7 +278,9 @@ private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n       com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n     try {\n       LottieComposition composition = LottieCompositionMoshiParser.parse(reader);\n-      LottieCompositionCache.getInstance().put(cacheKey, composition);\n+      if (cacheKey != null) {\n+        LottieCompositionCache.getInstance().put(cacheKey, composition);\n+      }\n       return new LottieResult<>(composition);\n     } catch (Exception e) {\n       return new LottieResult<>(e);\n@@ -352,7 +362,9 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n       }\n     }\n \n-    LottieCompositionCache.getInstance().put(cacheKey, composition);\n+    if (cacheKey != null) {\n+      LottieCompositionCache.getInstance().put(cacheKey, composition);\n+    }\n     return new LottieResult<>(composition);\n   }\n \n@@ -390,9 +402,6 @@ public LottieResult<LottieComposition> call() {\n     task.addListener(new LottieListener<LottieComposition>() {\n       @Override\n       public void onResult(LottieComposition result) {\n-        if (cacheKey != null) {\n-          LottieCompositionCache.getInstance().put(cacheKey, result);\n-        }\n         taskCache.remove(cacheKey);\n       }\n     });",
    "output": "Always use original context (Activity) when obtaining cache key and resource stream to correctly load and handle raw-night resources when the dark mode is on (#1361)\n\nApplication context isn't reliable source of information about dark mode (uiMode is UI_MODE_NIGHT_NO when the dark mode is on - Activity carries the correct information) and can incorrectly return default resource instead of the -night variant.\r\n\r\nFixes #1305"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -16,6 +16,7 @@\n import android.util.Log;\n import android.view.View;\n \n+import androidx.annotation.DrawableRes;\n import androidx.annotation.FloatRange;\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n@@ -79,7 +80,18 @@\n     }\n   };\n \n-  private LottieListener<Throwable> failureListener = DEFAULT_FAILURE_LISTENER;\n+  private final LottieListener<Throwable> wrappedFailureListener = new LottieListener<Throwable>() {\n+    @Override\n+    public void onResult(Throwable result) {\n+      if (fallbackResource != 0) {\n+        setImageResource(fallbackResource);\n+      }\n+      LottieListener<Throwable> l = failureListener == null ? DEFAULT_FAILURE_LISTENER : failureListener;\n+      l.onResult(result);\n+    }\n+  };\n+  @Nullable private LottieListener<Throwable> failureListener;\n+  @DrawableRes private int fallbackResource = 0;\n \n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private boolean isInitialized;\n@@ -143,6 +155,8 @@ private void init(@Nullable AttributeSet attrs) {\n           setAnimationFromUrl(url);\n         }\n       }\n+\n+      setFallbackResource(ta.getResourceId(R.styleable.LottieAnimationView_lottie_fallbackRes, 0));\n     }\n     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n       wasAnimatingWhenDetached = true;\n@@ -388,44 +402,46 @@ public void setAnimationFromUrl(String url) {\n \n   /**\n    * Set a default failure listener that will be called if any of the setAnimation APIs fail for any reason.\n-   * This can be used to replace the default behavior which is to crash.\n+   * This can be used to replace the default behavior.\n+   *\n+   * The default behavior will log any network errors and rethrow all other exceptions.\n+   *\n+   * If you are loading an animation from the network, errors may occur if your user has no internet.\n+   * You can use this listener to retry the download or you can have it default to an error drawable\n+   * with {@link #setFallbackResource(int)}.\n+   *\n+   * Unless you are using {@link #setAnimationFromUrl(String)}, errors are unexpected.\n    *\n-   * @see #resetFailureListener()\n+   * Set the listener to null to revert to the default behavior.\n    */\n-  public void setFailureListener(LottieListener<Throwable> failureListener) {\n-    if (compositionTask != null) {\n-      compositionTask.removeFailureListener(this.failureListener);\n-      compositionTask.addFailureListener(failureListener);\n-    }\n+  public void setFailureListener(@Nullable LottieListener<Throwable> failureListener) {\n     this.failureListener = failureListener;\n   }\n \n   /**\n-   * Clears the failure listener set with {@link #setFailureListener(LottieListener)} and restores the default behavior\n-   * which is to crash.\n+   * Set a drawable that will be rendered if the LottieComposition fails to load for any reason.\n+   * Unless you are using {@link #setAnimationFromUrl(String)}, this is an unexpected error and\n+   * you should handle it with {@link #setFailureListener(LottieListener)}.\n+   *\n+   * If this is a network animation, you may use this to show an error to the user or\n+   * you can use a failure listener to retry the download.\n    */\n-  public void resetFailureListener() {\n-    if (failureListener == DEFAULT_FAILURE_LISTENER) {\n-      return;\n-    }\n-    if (compositionTask != null) {\n-      compositionTask.removeFailureListener(failureListener);\n-    }\n-    this.failureListener = DEFAULT_FAILURE_LISTENER;\n+  public void setFallbackResource(@DrawableRes int fallbackResource) {\n+    this.fallbackResource = fallbackResource;\n   }\n \n   private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {\n     clearComposition();\n     cancelLoaderTask();\n     this.compositionTask = compositionTask\n             .addListener(loadedListener)\n-            .addFailureListener(failureListener);\n+            .addFailureListener(wrappedFailureListener);\n   }\n \n   private void cancelLoaderTask() {\n     if (compositionTask != null) {\n       compositionTask.removeListener(loadedListener);\n-      compositionTask.removeFailureListener(failureListener);\n+      compositionTask.removeFailureListener(wrappedFailureListener);\n     }\n   }\n ",
    "output": "Add a fallback resource when compositions fail to load (#1350)\n\nThis may happen either with invalid inputs or when network loading fails."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -248,8 +248,6 @@ public static Bitmap resizeBitmapIfNeeded(Bitmap bitmap, int width, int height)\n     if (bitmap.getWidth() == width && bitmap.getHeight() == height) {\n       return bitmap;\n     }\n-    float scaleWidth = ((float) width) / bitmap.getWidth();\n-    float scaleHeight = ((float) height) / bitmap.getHeight();\n     Bitmap resizedBitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\n     bitmap.recycle();\n     return resizedBitmap;",
    "output": "Remove unused code #1380 (#1385)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -187,7 +187,7 @@ private void init(@Nullable AttributeSet attrs) {\n       if (renderModeOrdinal >= RenderMode.values().length) {\n         renderModeOrdinal = RenderMode.AUTOMATIC.ordinal();\n       }\n-      renderMode = RenderMode.values()[renderModeOrdinal];\n+      setRenderMode(RenderMode.values()[renderModeOrdinal]);\n     }\n \n     ta.recycle();\n@@ -893,12 +893,15 @@ private void clearComposition() {\n    */\n   @Override\n   public void buildDrawingCache(boolean autoScale) {\n+    L.beginSection(\"buildDrawingCache\");\n     buildDrawingCacheDepth++;\n     super.buildDrawingCache(autoScale);\n-    if (buildDrawingCacheDepth == 1 && getLayerType() == LAYER_TYPE_SOFTWARE && getDrawingCache(autoScale) == null) {\n+    if (buildDrawingCacheDepth == 1 && getWidth() > 0 && getHeight() > 0 &&\n+        getLayerType() == LAYER_TYPE_SOFTWARE && getDrawingCache(autoScale) == null) {\n       setRenderMode(HARDWARE);\n     }\n     buildDrawingCacheDepth--;\n+    L.endSection(\"buildDrawingCache\");\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -681,7 +681,9 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n+    L.beginSection(\"Drawable#setProgress\");\n     animator.setFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));\n+    L.endSection(\"Drawable#setProgress\");\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -2,6 +2,7 @@\n \n import android.util.Log;\n \n+import com.airbnb.lottie.L;\n import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n@@ -82,7 +83,9 @@ public void notifyListeners() {\n   }\n \n   protected Keyframe<K> getCurrentKeyframe() {\n+    L.beginSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n     if (cachedKeyframe != null && cachedKeyframe.containsProgress(progress)) {\n+      L.endSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n       return cachedKeyframe;\n     }\n \n@@ -97,6 +100,7 @@ protected Keyframe<K> getCurrentKeyframe() {\n     }\n \n     cachedKeyframe = keyframe;\n+    L.endSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n     return keyframe;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -168,13 +168,15 @@ private void invalidateSelf() {\n \n   @SuppressLint(\"WrongConstant\")\n   private void saveLayerCompat(Canvas canvas, RectF rect, Paint paint, boolean all) {\n+    L.beginSection(\"BaseLayer#saveLayer\");\n     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n       // This method was deprecated in API level 26 and not recommended since 22, but its\n       // 2-parameter replacement is only available starting at API level 21.\n       canvas.saveLayer(rect, paint, all ? Canvas.ALL_SAVE_FLAG : SAVE_FLAGS);\n     } else {\n       canvas.saveLayer(rect, paint);\n     }\n+    L.endSection(\"BaseLayer#saveLayer\");\n   }\n \n   public void addAnimation(@Nullable BaseKeyframeAnimation<?, ?> newAnimation) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -7,6 +7,7 @@\n import androidx.annotation.VisibleForTesting;\n import android.view.Choreographer;\n \n+import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieComposition;\n \n /**\n@@ -82,6 +83,7 @@ public float getFrame() {\n       return;\n     }\n \n+    L.beginSection(\"LottieValueAnimator#doFrame\");\n     long now = frameTimeNanos;\n     long timeSinceFrame = lastFrameTimeNs == 0 ? 0 : now - lastFrameTimeNs;\n     float frameDuration = getFrameDurationNs();\n@@ -113,6 +115,7 @@ public float getFrame() {\n     }\n \n     verifyFrame();\n+    L.endSection(\"LottieValueAnimator#doFrame\");\n   }\n \n   private float getFrameDurationNs() {",
    "output": "Fixed render mode (#1377)\n\nThis change (https://github.com/airbnb/lottie-android/pull/1190) was supposed to revert to software rendering when the device can't allocate a hardware buffer large enough for the animation. However, this would also trigger before a composition loads and the view was set to wrap_content. The width and heigh would be 0 which would cause Android to noop the drawing cache. However, the previous logic here would think that the drawing cache failed to allocate because it was too large.\r\n\r\nI also added some systrace markers and added a default animation view to the issue repro module.\r\n\r\nFixes #1374"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -116,10 +116,13 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n   @Override public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     super.setProgress(progress);\n     if (timeRemapping != null) {\n-      float duration = lottieDrawable.getComposition().getDuration();\n-      float compositionDelayTime = layerModel.getComposition().getStartFrame() / layerModel.getComposition().getFrameRate() * 1000;\n-      long remappedTime = (long) (timeRemapping.getValue() * 1000 - compositionDelayTime);\n-      progress = remappedTime / duration;\n+      // The duration has 0.01 frame offset to show end of animation properly.\n+      // https://github.com/airbnb/lottie-android/pull/766\n+      // Ignore this offset for calculating time-remapping because time-remapping value is based on original duration.\n+      float durationFrames = lottieDrawable.getComposition().getDurationFrames() + 0.01f;\n+      float compositionDelayFrames = layerModel.getComposition().getStartFrame();\n+      float remappedFrames = timeRemapping.getValue() * layerModel.getComposition().getFrameRate() - compositionDelayFrames;\n+      progress = remappedFrames / durationFrames;\n     }\n     if (layerModel.getTimeStretch() != 0) {\n       progress /= layerModel.getTimeStretch();",
    "output": "Fix rounding-off error on progress calculation with time-remapped layer (#1372)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -117,14 +117,17 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     super.setProgress(progress);\n     if (timeRemapping != null) {\n       float duration = lottieDrawable.getComposition().getDuration();\n-      long remappedTime = (long) (timeRemapping.getValue() * 1000);\n+      float compositionDelayTime = layerModel.getComposition().getStartFrame() / layerModel.getComposition().getFrameRate() * 1000;\n+      long remappedTime = (long) (timeRemapping.getValue() * 1000 - compositionDelayTime);\n       progress = remappedTime / duration;\n     }\n     if (layerModel.getTimeStretch() != 0) {\n       progress /= layerModel.getTimeStretch();\n     }\n \n-    progress -= layerModel.getStartProgress();\n+    if (timeRemapping == null) {\n+      progress -= layerModel.getStartProgress();\n+    }\n     for (int i = layers.size() - 1; i >= 0; i--) {\n       layers.get(i).setProgress(progress);\n     }",
    "output": "Fix progress calculation logic when the layer is time-remapped layer (#1368)\n\nThere are 2 problem on progress calculating with the layer that is applied time-remapping.\r\n\r\nIf the layer with time-remapping is placed on the way of animation, the progress calculation becomes wrong.\r\nThe value that is got from timeRemapping is already adjusted with layerModel.getStartProgress().\r\nIf the root layer is started from on the way (LottieComposition#startFrame isn't 0), the child layer with time-remapping is drawn wrongly.\r\nThe value that is got from timeRemapping isn't adjusted with LottieComposition#startFrame"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.Canvas;\n import android.graphics.Color;\n+import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n import android.graphics.Paint;\n import android.graphics.Path;\n@@ -16,6 +17,7 @@\n import com.airbnb.lottie.animation.content.ContentGroup;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n import com.airbnb.lottie.animation.keyframe.TextKeyframeAnimation;\n+import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;\n import com.airbnb.lottie.model.DocumentData;\n import com.airbnb.lottie.model.DocumentData.Justification;\n import com.airbnb.lottie.model.Font;\n@@ -411,14 +413,66 @@ private boolean isModifier(int codePoint) {\n   @Override\n   public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {\n     super.addValueCallback(property, callback);\n-    if (property == LottieProperty.COLOR && colorAnimation != null) {\n-      colorAnimation.setValueCallback((LottieValueCallback<Integer>) callback);\n-    } else if (property == LottieProperty.STROKE_COLOR && strokeColorAnimation != null) {\n-      strokeColorAnimation.setValueCallback((LottieValueCallback<Integer>) callback);\n-    } else if (property == LottieProperty.STROKE_WIDTH && strokeWidthAnimation != null) {\n-      strokeWidthAnimation.setValueCallback((LottieValueCallback<Float>) callback);\n-    } else if (property == LottieProperty.TEXT_TRACKING && trackingAnimation != null) {\n-      trackingAnimation.setValueCallback((LottieValueCallback<Float>) callback);\n+    if (property == LottieProperty.COLOR) {\n+      if (colorAnimation != null) {\n+        colorAnimation.setValueCallback((LottieValueCallback<Integer>) callback);\n+      } else {\n+        if (callback == null) {\n+          if (colorAnimation != null) {\n+            removeAnimation(colorAnimation);\n+          }\n+          colorAnimation = null;\n+        } else {\n+          colorAnimation = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Integer>) callback);\n+          colorAnimation.addUpdateListener(this);\n+          addAnimation(colorAnimation);\n+        }\n+      }\n+    } else if (property == LottieProperty.STROKE_COLOR) {\n+      if (strokeColorAnimation != null) {\n+        strokeColorAnimation.setValueCallback((LottieValueCallback<Integer>) callback);\n+      } else {\n+        if (callback == null) {\n+          if (strokeColorAnimation != null) {\n+            removeAnimation(strokeColorAnimation);\n+          }\n+          strokeColorAnimation = null;\n+        } else {\n+          strokeColorAnimation = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Integer>) callback);\n+          strokeColorAnimation.addUpdateListener(this);\n+          addAnimation(strokeColorAnimation);\n+        }\n+      }\n+    } else if (property == LottieProperty.STROKE_WIDTH) {\n+      if (strokeWidthAnimation != null) {\n+        strokeWidthAnimation.setValueCallback((LottieValueCallback<Float>) callback);\n+      } else {\n+        if (callback == null) {\n+          if (strokeWidthAnimation != null) {\n+            removeAnimation(strokeWidthAnimation);\n+          }\n+          strokeWidthAnimation = null;\n+        } else {\n+          strokeWidthAnimation = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Float>) callback);\n+          strokeWidthAnimation.addUpdateListener(this);\n+          addAnimation(strokeWidthAnimation);\n+        }\n+      }\n+    } else if (property == LottieProperty.TEXT_TRACKING) {\n+      if (trackingAnimation != null) {\n+        trackingAnimation.setValueCallback((LottieValueCallback<Float>) callback);\n+      } else {\n+        if (callback == null) {\n+          if (trackingAnimation != null) {\n+            removeAnimation(trackingAnimation);\n+          }\n+          trackingAnimation = null;\n+        } else {\n+          trackingAnimation = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Float>) callback);\n+          trackingAnimation.addUpdateListener(this);\n+          addAnimation(trackingAnimation);\n+        }\n+      }\n     }\n   }\n }",
    "output": "Allow dynamic properties on text without animators (#1353)\n\nFixes #1342"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -40,7 +40,7 @@\n  * In-progress tasks will also be held so they can be returned for subsequent requests for the same\n  * animation prior to the cache being populated.\n  */\n-@SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+@SuppressWarnings({\"WeakerAccess\", \"unused\", \"NullAway\"})\n public class LottieCompositionFactory {\n   /**\n    * Keep a map of cache keys to in-progress tasks and return them for new requests.",
    "output": "Add nullaway (#1355)\n\nIt won't do much right now as most errors are off but they can now be turned on and fixed one by one.\r\nFixes #1330"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -1,9 +1,11 @@\n package com.airbnb.lottie;\n \n import android.content.Context;\n+import android.content.res.Configuration;\n import android.content.res.Resources;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n+import android.os.Build;\n \n import com.airbnb.lottie.model.LottieCompositionCache;\n import com.airbnb.lottie.network.NetworkFetcher;\n@@ -130,7 +132,7 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n   public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes) {\n     // Prevent accidentally leaking an Activity.\n     final Context appContext = context.getApplicationContext();\n-    return cache(rawResCacheKey(rawRes), new Callable<LottieResult<LottieComposition>>() {\n+    return cache(rawResCacheKey(context, rawRes), new Callable<LottieResult<LottieComposition>>() {\n       @Override\n       public LottieResult<LottieComposition> call() {\n         return fromRawResSync(appContext, rawRes);\n@@ -146,14 +148,22 @@ public LottieResult<LottieComposition> call() {\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromRawResSync(Context context, @RawRes int rawRes) {\n     try {\n-      return fromJsonInputStreamSync(context.getResources().openRawResource(rawRes), rawResCacheKey(rawRes));\n+      return fromJsonInputStreamSync(context.getResources().openRawResource(rawRes), rawResCacheKey(context, rawRes));\n     } catch (Resources.NotFoundException e) {\n       return new LottieResult<>(e);\n     }\n   }\n \n-  private static String rawResCacheKey(@RawRes int resId) {\n-    return \"rawRes_\" + resId;\n+  private static String rawResCacheKey(Context context, @RawRes int resId) {\n+    return \"rawRes\" + (isNightMode(context) ? \"_night_\" : \"_day_\") + resId;\n+  }\n+\n+  /**\n+   * It is important to include day/night in the cache key so that if it changes, the cache won't return an animation from the wrong bucket.\n+   */\n+  private static boolean isNightMode(Context context) {\n+    int nightModeMasked = context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n+    return nightModeMasked == Configuration.UI_MODE_NIGHT_YES;\n   }\n \n   /**",
    "output": "Include day/night mode in cache keys (#1352)\n\nFixes #1305"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -68,6 +68,14 @@ private interface LazyCompositionTask {\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   private final ArrayList<LazyCompositionTask> lazyCompositionTasks = new ArrayList<>();\n+  private final ValueAnimator.AnimatorUpdateListener  progressUpdateListener = new ValueAnimator.AnimatorUpdateListener() {\n+    @Override\n+    public void onAnimationUpdate(ValueAnimator animation) {\n+      if (compositionLayer != null) {\n+        compositionLayer.setProgress(animator.getAnimatedValueAbsolute());\n+      }\n+    }\n+  };\n   @Nullable\n   private ImageAssetManager imageAssetManager;\n   @Nullable\n@@ -114,14 +122,7 @@ private interface LazyCompositionTask {\n   public static final int INFINITE = ValueAnimator.INFINITE;\n \n   public LottieDrawable() {\n-    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n-      @Override\n-      public void onAnimationUpdate(ValueAnimator animation) {\n-        if (compositionLayer != null) {\n-          compositionLayer.setProgress(animator.getAnimatedValueAbsolute());\n-        }\n-      }\n-    });\n+    animator.addUpdateListener(progressUpdateListener);\n   }\n \n   /**\n@@ -629,6 +630,7 @@ public void removeAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener up\n \n   public void removeAllUpdateListeners() {\n     animator.removeAllUpdateListeners();\n+    animator.addUpdateListener(progressUpdateListener);\n   }\n \n   public void addAnimatorListener(Animator.AnimatorListener listener) {",
    "output": "Prevent removeAllUdpateListeners from breaking the world (#1354)\n\nFixes #1337"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -295,6 +295,7 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n       playAnimation();\n       // Autoplay from xml should only apply once.\n       autoPlay = false;\n+      wasAnimatingWhenDetached = false;\n     }\n     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n       // This is needed to mimic newer platform behavior.",
    "output": "Fixed endless recycler view animation. #1340\n\nAdditionally - adjusted \"testPausesWhenScrolledOffScreenAndResumesWhenComesBack\" test.\r\n\r\nSee more details: #1324"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -407,7 +407,9 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n-    animator.resumeAnimation();\n+    if (systemAnimationsEnabled) {\n+      animator.resumeAnimation();\n+    }\n   }\n \n   /**",
    "output": "Don't resume animation when system animation is disabled. (#1349)\n\nWhile the playAnimation() api call respects systemAnimationsEnabled flag, resumeAnimation() ignores it. Add the condition check to fix the case."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -90,6 +90,14 @@\n   private boolean autoPlay = false;\n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n   private Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n+  /**\n+   * Prevents a StackOverflowException on 4.4 in which getDrawingCache() calls buildDrawingCache().\n+   * This isn't a great solution but it works and has very little performance overhead.\n+   * At some point in the future, the original goal of falling back to hardware rendering when\n+   * the animation is set to software rendering but it is too large to fit in a software bitmap\n+   * should be reevaluated.\n+   */\n+  private int buildDrawingCacheDepth = 0;\n \n   @Nullable private LottieTask<LottieComposition> compositionTask;\n   /** Can be null because it is created async */\n@@ -884,10 +892,12 @@ private void clearComposition() {\n    */\n   @Override\n   public void buildDrawingCache(boolean autoScale) {\n+    buildDrawingCacheDepth++;\n     super.buildDrawingCache(autoScale);\n-    if (getLayerType() == LAYER_TYPE_SOFTWARE && getDrawingCache(autoScale) == null) {\n+    if (buildDrawingCacheDepth == 1 && getLayerType() == LAYER_TYPE_SOFTWARE && getDrawingCache(autoScale) == null) {\n       setRenderMode(HARDWARE);\n     }\n+    buildDrawingCacheDepth--;\n   }\n \n   /**",
    "output": "Prevent a StackOverflowException on 4.4 (#1332)\n\nFixes #1298"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -44,7 +44,6 @@ public class GradientFillContent\n   private final BaseLayer layer;\n   private final LongSparseArray<LinearGradient> linearGradientCache = new LongSparseArray<>();\n   private final LongSparseArray<RadialGradient> radialGradientCache = new LongSparseArray<>();\n-  private final Matrix shaderMatrix = new Matrix();\n   private final Path path = new Path();\n   private final Paint paint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n   private final RectF boundsRect = new RectF();\n@@ -116,8 +115,7 @@ public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer,\n     } else {\n       shader = getRadialGradient();\n     }\n-    shaderMatrix.set(parentMatrix);\n-    shader.setLocalMatrix(shaderMatrix);\n+    shader.setLocalMatrix(parentMatrix);\n     paint.setShader(shader);\n \n     if (colorFilterAnimation != null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n@@ -75,6 +75,7 @@ public GradientStrokeContent(\n     } else {\n       shader = getRadialGradient();\n     }\n+    shader.setLocalMatrix(parentMatrix);\n     paint.setShader(shader);\n \n     super.draw(canvas, parentMatrix, parentAlpha);\n@@ -95,10 +96,10 @@ private LinearGradient getLinearGradient() {\n     GradientColor gradientColor = colorAnimation.getValue();\n     int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n-    int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n-    int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n-    int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n-    int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n+    float x0 = startPoint.x;\n+    float y0 = startPoint.y;\n+    float x1 = endPoint.x;\n+    float y1 = endPoint.y;\n     gradient = new LinearGradient(x0, y0, x1, y1, colors, positions, Shader.TileMode.CLAMP);\n     linearGradientCache.put(gradientHash, gradient);\n     return gradient;\n@@ -115,10 +116,10 @@ private RadialGradient getRadialGradient() {\n     GradientColor gradientColor = colorAnimation.getValue();\n     int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n-    int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n-    int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n-    int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n-    int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n+    float x0 = startPoint.x;\n+    float y0 = startPoint.y;\n+    float x1 = endPoint.x;\n+    float y1 = endPoint.y;\n     float r = (float) Math.hypot(x1 - x0, y1 - y0);\n     gradient = new RadialGradient(x0, y0, r, colors, positions, Shader.TileMode.CLAMP);\n     radialGradientCache.put(gradientHash, gradient);",
    "output": "Apply parent matrix to gradient stroke (#1333)\n\nFixes the second half of #1188\r\n@Moes81"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -11,35 +11,33 @@\n import android.os.Build;\n import android.os.Parcel;\n import android.os.Parcelable;\n+import android.text.TextUtils;\n+import android.util.AttributeSet;\n+import android.util.Log;\n+import android.view.View;\n+\n import androidx.annotation.FloatRange;\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n import androidx.appcompat.widget.AppCompatImageView;\n-import okio.Okio;\n-\n-import android.text.TextUtils;\n-import android.util.AttributeSet;\n-import android.util.Log;\n-import android.view.View;\n \n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.parser.moshi.JsonReader;\n+import com.airbnb.lottie.utils.Logger;\n import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieFrameInfo;\n import com.airbnb.lottie.value.LottieValueCallback;\n import com.airbnb.lottie.value.SimpleLottieValueCallback;\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n-import java.io.StringReader;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n import static com.airbnb.lottie.RenderMode.HARDWARE;\n-import static com.airbnb.lottie.RenderMode.SOFTWARE;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -64,18 +62,24 @@\n @SuppressWarnings({\"unused\", \"WeakerAccess\"}) public class LottieAnimationView extends AppCompatImageView {\n \n   private static final String TAG = LottieAnimationView.class.getSimpleName();\n+  private static final LottieListener<Throwable> DEFAULT_FAILURE_LISTENER = new LottieListener<Throwable>() {\n+    @Override public void onResult(Throwable throwable) {\n+      // By default, fail silently for network errors.\n+      if (Utils.isNetworkException(throwable)) {\n+        Logger.warning(\"Unable to load composition.\", throwable);\n+        return;\n+      }\n+      throw new IllegalStateException(\"Unable to parse composition\", throwable);\n+    }\n+  };\n \n   private final LottieListener<LottieComposition> loadedListener = new LottieListener<LottieComposition>() {\n     @Override public void onResult(LottieComposition composition) {\n       setComposition(composition);\n     }\n   };\n \n-  private final LottieListener<Throwable> failureListener = new LottieListener<Throwable>() {\n-    @Override public void onResult(Throwable throwable) {\n-      throw new IllegalStateException(\"Unable to parse composition\", throwable);\n-    }\n-  };\n+  private LottieListener<Throwable> failureListener = DEFAULT_FAILURE_LISTENER;\n \n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private boolean isInitialized;\n@@ -373,6 +377,34 @@ public void setAnimationFromUrl(String url) {\n     setCompositionTask(LottieCompositionFactory.fromUrl(getContext(), url));\n   }\n \n+  /**\n+   * Set a default failure listener that will be called if any of the setAnimation APIs fail for any reason.\n+   * This can be used to replace the default behavior which is to crash.\n+   *\n+   * @see #resetFailureListener()\n+   */\n+  public void setFailureListener(LottieListener<Throwable> failureListener) {\n+    if (compositionTask != null) {\n+      compositionTask.removeFailureListener(this.failureListener);\n+      compositionTask.addFailureListener(failureListener);\n+    }\n+    this.failureListener = failureListener;\n+  }\n+\n+  /**\n+   * Clears the failure listener set with {@link #setFailureListener(LottieListener)} and restores the default behavior\n+   * which is to crash.\n+   */\n+  public void resetFailureListener() {\n+    if (failureListener == DEFAULT_FAILURE_LISTENER) {\n+      return;\n+    }\n+    if (compositionTask != null) {\n+      compositionTask.removeFailureListener(failureListener);\n+    }\n+    this.failureListener = DEFAULT_FAILURE_LISTENER;\n+  }\n+\n   private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {\n     clearComposition();\n     cancelLoaderTask();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -22,6 +22,19 @@\n import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;\n \n import java.io.Closeable;\n+import java.io.InterruptedIOException;\n+import java.net.BindException;\n+import java.net.ConnectException;\n+import java.net.NoRouteToHostException;\n+import java.net.PortUnreachableException;\n+import java.net.ProtocolException;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.net.UnknownServiceException;\n+import java.nio.channels.ClosedChannelException;\n+\n+import javax.net.ssl.SSLException;\n \n public final class Utils {\n   public static final int SECOND_IN_NANOS = 1000000000;\n@@ -242,6 +255,16 @@ public static Bitmap resizeBitmapIfNeeded(Bitmap bitmap, int width, int height)\n     return resizedBitmap;\n   }\n \n+  /**\n+   * From http://vaibhavblogs.org/2012/12/common-java-networking-exceptions/\n+   */\n+  public static boolean isNetworkException(Throwable e) {\n+    return e instanceof SocketException || e instanceof ClosedChannelException ||\n+        e instanceof InterruptedIOException || e instanceof ProtocolException ||\n+        e instanceof SSLException || e instanceof UnknownHostException ||\n+        e instanceof UnknownServiceException;\n+  }\n+\n   /**\n    * For testing purposes only. DO NOT USE IN PRODUCTION.\n    */",
    "output": "Add custom failure listener support to LottieAnimationView and log network failures (#1321)\n\nThis changes the default failure behavior for network errors to log instead of crash.\r\nIt also gives you the ability to set and clear failure listeners to handle this yourself.\r\nFixes #1302"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -379,6 +379,11 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {\n   private void applyMasks(Canvas canvas, Matrix matrix) {\n     L.beginSection(\"Layer#saveLayer\");\n     saveLayerCompat(canvas, rect, dstInPaint, false);\n+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n+      // Pre-Pie, offscreen buffers were opaque which meant that outer border of a mask\n+      // might get drawn depending on the result of float rounding.\n+      canvas.drawColor(Color.TRANSPARENT);\n+    }\n     L.endSection(\"Layer#saveLayer\");\n     for (int i = 0; i < mask.getMasks().size(); i++) {\n       Mask mask = this.mask.getMasks().get(i);\n@@ -394,10 +399,9 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n           break;\n         case MASK_MODE_SUBTRACT:\n           if (i == 0) {\n-            // TODO: make a paint for this.\n-            Paint paint = new Paint();\n-            paint.setColor(Color.BLACK);\n-            canvas.drawRect(rect, paint);\n+            contentPaint.setColor(Color.BLACK);\n+            contentPaint.setAlpha(255);\n+            canvas.drawRect(rect, contentPaint);\n           }\n           if (mask.isInverted()) {\n             applyInvertedSubtractMask(canvas, matrix, mask, maskAnimation, opacityAnimation);",
    "output": "Clear mask canvases on pre-Pie (#1327)\n\nFixes #1253"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -141,20 +141,16 @@ private LottieResult<LottieComposition> getResultFromConnection(HttpURLConnectio\n       // in the result which is more useful than failing here.\n       contentType = \"application/json\";\n     }\n-    switch (contentType) {\n-      case \"application/zip\":\n-        Logger.debug(\"Handling zip response.\");\n-        extension = FileExtension.ZIP;\n-        file = networkCache.writeTempCacheFile(connection.getInputStream(), extension);\n-        result = LottieCompositionFactory.fromZipStreamSync(new ZipInputStream(new FileInputStream(file)), url);\n-        break;\n-      case \"application/json\":\n-      default:\n-        Logger.debug(\"Received json response.\");\n-        extension = FileExtension.JSON;\n-        file = networkCache.writeTempCacheFile(connection.getInputStream(), extension);\n-        result = LottieCompositionFactory.fromJsonInputStreamSync(new FileInputStream(new File(file.getAbsolutePath())), url);\n-        break;\n+    if (contentType.contains(\"application/zip\")) {\n+      Logger.debug(\"Handling zip response.\");\n+      extension = FileExtension.ZIP;\n+      file = networkCache.writeTempCacheFile(connection.getInputStream(), extension);\n+      result = LottieCompositionFactory.fromZipStreamSync(new ZipInputStream(new FileInputStream(file)), url);\n+    } else {\n+      Logger.debug(\"Received json response.\");\n+      extension = FileExtension.JSON;\n+      file = networkCache.writeTempCacheFile(connection.getInputStream(), extension);\n+      result = LottieCompositionFactory.fromJsonInputStreamSync(new FileInputStream(new File(file.getAbsolutePath())), url);\n     }\n \n     if (result.getValue() != null) {",
    "output": "Fuzzy match content types (#1320)\n\nFixes #1288"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -32,6 +32,7 @@\n import com.airbnb.lottie.value.SimpleLottieValueCallback;\n \n import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n import java.io.StringReader;\n import java.util.HashSet;\n import java.util.List;\n@@ -346,18 +347,18 @@ public void setAnimationFromJson(String jsonString) {\n    * JSONObject never has to be done.\n    */\n   public void setAnimationFromJson(String jsonString, @Nullable String cacheKey) {\n-    setAnimation(JsonReader.of(Okio.buffer(Okio.source(new ByteArrayInputStream(jsonString.getBytes())))), cacheKey);\n+    setAnimation(new ByteArrayInputStream(jsonString.getBytes()), cacheKey);\n   }\n \n   /**\n-   * Sets the animation from a JSONReader.\n+   * Sets the animation from an arbitrary InputStream.\n    * This will load and deserialize the file asynchronously.\n    * <p>\n    * This is particularly useful for animations loaded from the network. You can fetch the\n    * bodymovin json from the network and pass it directly here.\n    */\n-  public void setAnimation(JsonReader reader, @Nullable String cacheKey) {\n-    setCompositionTask(LottieCompositionFactory.fromJsonReader(reader, cacheKey));\n+  public void setAnimation(InputStream stream, @Nullable String cacheKey) {\n+    setCompositionTask(LottieCompositionFactory.fromJsonInputStream(stream, cacheKey));\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/moshi/package-info.java b/lottie/src/main/java/com/airbnb/lottie/parser/moshi/package-info.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/moshi/package-info.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/moshi/package-info.java\n@@ -0,0 +1,6 @@\n+@RestrictTo(LIBRARY)\n+package com.airbnb.lottie.parser.moshi;\n+\n+import androidx.annotation.RestrictTo;\n+\n+import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n\\ No newline at end of file",
    "output": "Replace LottieAnimiationView JsonReader API with just InputStream and hide visibility of the Lottie Moshi JSON parsing classes. (#1279)\n\nThis PR also hides the visibility of the Lottie Moshi JSON parsing classes.\r\nFixes #1270"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -295,7 +295,7 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n       }\n       dashPatternValues[i] *= scale;\n     }\n-    float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue();\n+    float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue() * scale;\n     paint.setPathEffect(new DashPathEffect(dashPatternValues, offset));\n     L.endSection(\"StrokeContent#applyDashPattern\");\n   }",
    "output": "Apply scale to dash pattern offset (#1281)\n\nThanks @karip for the animation and fix.\r\nFixes #798"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -77,6 +77,7 @@\n   };\n \n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n+  private boolean isInitialized;\n   private String animationName;\n   private @RawRes int animationResId;\n   private boolean wasAnimatingWhenNotShown = false;\n@@ -181,6 +182,7 @@ private void init(@Nullable AttributeSet attrs) {\n     lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n \n     enableOrDisableHardwareLayer();\n+    isInitialized = true;\n   }\n \n   @Override public void setImageResource(int resId) {\n@@ -252,7 +254,13 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n     // This can happen on older versions of Android because onVisibilityChanged gets called from the\n     // constructor of View so this will get called before lottieDrawable gets initialized.\n     // https://github.com/airbnb/lottie-android/issues/1143\n-    if (lottieDrawable == null) {\n+    // A simple null check on lottieDrawable would not work because when using Proguard optimization, a\n+    // null check on a final field gets removed. As \"usually\" final fields cannot be null.\n+    // However because this is called by super (View) before the initializer of the LottieAnimationView\n+    // is called, it actually can be null here.\n+    // Working around this by using a non final boolean that is set to true after the class initializer\n+    // has run.\n+    if (!isInitialized) {\n       return;\n     }\n     if (isShown()) {",
    "output": "Use non final init member to work around Proguard removing null check on final field when optimizing. (#1274)\n\nThe null check added by #1148 gets removed by Proguard optimization (as it is overly aggressive in removing null checks on final fields.\r\n\r\nUse non final init member to work around Proguard removing null check on final field when optimizing."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -677,7 +677,7 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n-    setFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));\n+    animator.setFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -146,7 +146,7 @@ public void setComposition(LottieComposition composition) {\n     setFrame((int) frame);\n   }\n \n-  public void setFrame(int frame) {\n+  public void setFrame(float frame) {\n     if (this.frame == frame) {\n       return;\n     }",
    "output": "Allow progress to be set in between frames (#1261)\n\nFixes #1250"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -168,6 +168,14 @@ private void init(@Nullable AttributeSet attrs) {\n       lottieDrawable.setScale(ta.getFloat(R.styleable.LottieAnimationView_lottie_scale, 1f));\n     }\n \n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_renderMode)) {\n+      int renderModeOrdinal = ta.getInt(R.styleable.LottieAnimationView_lottie_renderMode, RenderMode.AUTOMATIC.ordinal());\n+      if (renderModeOrdinal >= RenderMode.values().length) {\n+        renderModeOrdinal = RenderMode.AUTOMATIC.ordinal();\n+      }\n+      renderMode = RenderMode.values()[renderModeOrdinal];\n+    }\n+\n     ta.recycle();\n \n     lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n@@ -861,24 +869,29 @@ public void setRenderMode(RenderMode renderMode) {\n   }\n \n   private void enableOrDisableHardwareLayer() {\n+    int layerType = LAYER_TYPE_SOFTWARE;\n     switch (renderMode) {\n       case HARDWARE:\n-        setLayerType(LAYER_TYPE_HARDWARE, null);\n+        layerType = LAYER_TYPE_HARDWARE;\n         break;\n       case SOFTWARE:\n-        setLayerType(LAYER_TYPE_SOFTWARE, null);\n+        layerType = LAYER_TYPE_SOFTWARE;\n         break;\n       case AUTOMATIC:\n         boolean useHardwareLayer = true;\n         if (composition != null && composition.hasDashPattern() && Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n           useHardwareLayer = false;\n         } else if (composition != null && composition.getMaskAndMatteCount() > 4) {\n           useHardwareLayer = false;\n+        } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n+          useHardwareLayer = false;\n         }\n-        setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n+        layerType = useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE;\n         break;\n     }\n-\n+    if (layerType != getLayerType()) {\n+      setLayerType(layerType, null);\n+    }\n   }\n \n   public boolean addLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {",
    "output": "Fixed renderMode attr (#1263)\n\nSomehow this was never implemented when adding the renderMode API\r\n#1254"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -396,6 +396,11 @@ public void setComposition(@NonNull LottieComposition composition) {\n     setImageDrawable(null);\n     setImageDrawable(lottieDrawable);\n \n+    // This is needed to makes sure that the animation is properly played/paused for the current visibility state.\n+    // It is possible that the drawable had a lazy composition task to play the animation but this view subsequently\n+    // became invisible. Comment this out and run the espresso tests to see a failing test.\n+    onVisibilityChanged(this, getVisibility());\n+\n     requestLayout();\n \n     for (LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener : lottieOnCompositionLoadedListeners) {\n@@ -772,6 +777,7 @@ public void cancelAnimation() {\n \n   @MainThread\n   public void pauseAnimation() {\n+    autoPlay = false;\n     wasAnimatingWhenDetached = false;\n     wasAnimatingWhenNotShown = false;\n     lottieDrawable.pauseAnimation();\n@@ -876,6 +882,10 @@ private void enableOrDisableHardwareLayer() {\n   }\n \n   public boolean addLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {\n+    LottieComposition composition = this.composition;\n+    if (composition != null) {\n+      lottieOnCompositionLoadedListener.onCompositionLoaded(composition);\n+    }\n     return lottieOnCompositionLoadedListeners.add(lottieOnCompositionLoadedListener);\n   }\n ",
    "output": "Fix another visibility bug and added espresso tests (#1249)\n\nFixes #1216 and adds tests so hopefully this won't happen again.\r\nI haven't had time to get these tests on CI yet but they pass on API 19, 24, and 28."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -251,6 +251,10 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     matrix.preConcat(transform.getMatrix());\n     intersectBoundsWithMask(rect, matrix);\n \n+    if (!rect.intersect(0, 0, canvas.getWidth(), canvas.getHeight())) {\n+      rect.set(0, 0, 0, 0);\n+    }\n+\n     L.endSection(\"Layer#computeBounds\");\n \n     if (!rect.isEmpty()) {",
    "output": "Clip masks and mattes to the canvas (#1246)\n\nThis fixes #1199 and improves performance by never saving a layer outside of the canvas. Thanks to @pmecho for the repro steps!"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n@@ -64,7 +64,7 @@ public void addFrameListener(FrameListener frameListener) {\n   }\n \n   @SuppressWarnings(\"unused\") public void removeFrameListener(FrameListener frameListener) {\n-    frameListeners.add(frameListener);\n+    frameListeners.remove(frameListener);\n   }\n \n   public void clearRenderTimes() {",
    "output": "Fix copy paste error (#1245)\n\nFixes #1242"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -259,8 +259,15 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n \n   @Override protected void onAttachedToWindow() {\n     super.onAttachedToWindow();\n-    if (autoPlay && wasAnimatingWhenDetached) {\n+    if (autoPlay || wasAnimatingWhenDetached) {\n       playAnimation();\n+      // Autoplay from xml should only apply once.\n+      autoPlay = false;\n+    }\n+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n+      // This is needed to mimic newer platform behavior.\n+      // https://stackoverflow.com/a/53625860/715633\n+      onVisibilityChanged(this, getVisibility());\n     }\n   }\n ",
    "output": "Fix old platform behavior (#1244)\n\nThe platform check fixes #1243 #1241\r\nThe other logic makes wasAnimatingWhenDetached work even if autoPlay is false."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -83,7 +83,7 @@ public float getFrame() {\n     }\n \n     long now = frameTimeNanos;\n-    long timeSinceFrame = now - lastFrameTimeNs;\n+    long timeSinceFrame = lastFrameTimeNs == 0 ? 0 : now - lastFrameTimeNs;\n     float frameDuration = getFrameDurationNs();\n     float dFrames = timeSinceFrame / frameDuration;\n \n@@ -151,7 +151,7 @@ public void setFrame(int frame) {\n       return;\n     }\n     this.frame = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n-    lastFrameTimeNs = System.nanoTime();\n+    lastFrameTimeNs = 0;\n     notifyUpdate();\n   }\n \n@@ -202,7 +202,7 @@ public void playAnimation() {\n     running = true;\n     notifyStart(isReversed());\n     setFrame((int) (isReversed() ? getMaxFrame() : getMinFrame()));\n-    lastFrameTimeNs = System.nanoTime();\n+    lastFrameTimeNs = 0;\n     repeatCount = 0;\n     postFrameCallback();\n   }\n@@ -222,7 +222,7 @@ public void pauseAnimation() {\n   public void resumeAnimation() {\n     running = true;\n     postFrameCallback();\n-    lastFrameTimeNs = System.nanoTime();\n+    lastFrameTimeNs = 0;\n     if (isReversed() && getFrame() == getMinFrame()) {\n       frame = getMaxFrame();\n     } else if (!isReversed() && getFrame() == getMaxFrame()) {",
    "output": "Fix: incorrect System.nano() usage leads to the animation to end prematurely (#1227)\n\nSetting System.nanoTime() to lastFrameTimeNs outside doFrame callback may lead to negative timeSinceFrame value. This causes the animation to end right after it started."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -14,6 +14,7 @@\n import com.airbnb.lottie.network.NetworkFetcher;\n import com.airbnb.lottie.parser.LottieCompositionParser;\n \n+import com.airbnb.lottie.utils.Utils;\n import org.json.JSONObject;\n \n import java.io.IOException;\n@@ -314,7 +315,7 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n     for (Map.Entry<String, Bitmap> e : images.entrySet()) {\n       LottieImageAsset imageAsset = findImageAssetForFileName(composition, e.getKey());\n       if (imageAsset != null) {\n-        imageAsset.setBitmap(e.getValue());\n+        imageAsset.setBitmap(Utils.resizeBitmapIfNeeded(e.getValue(), imageAsset.getWidth(), imageAsset.getHeight()));\n       }\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -12,6 +12,7 @@\n import com.airbnb.lottie.ImageAssetDelegate;\n import com.airbnb.lottie.LottieImageAsset;\n import com.airbnb.lottie.utils.Logger;\n+import com.airbnb.lottie.utils.Utils;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -113,6 +114,7 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n       return null;\n     }\n     bitmap = BitmapFactory.decodeStream(is, null, opts);\n+    bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n     return putBitmap(id, bitmap);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -227,6 +227,21 @@ public static float getAnimationScale(Context context) {\n     }\n   }\n \n+  /**\n+   * Resize the bitmap to exactly the same size as the specified dimension, changing the aspect ratio if needed.\n+   * Returns the original bitmap if the dimensions already match.\n+   */\n+  public static Bitmap resizeBitmapIfNeeded(Bitmap bitmap, int width, int height) {\n+    if (bitmap.getWidth() == width && bitmap.getHeight() == height) {\n+      return bitmap;\n+    }\n+    float scaleWidth = ((float) width) / bitmap.getWidth();\n+    float scaleHeight = ((float) height) / bitmap.getHeight();\n+    Bitmap resizedBitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\n+    bitmap.recycle();\n+    return resizedBitmap;\n+  }\n+\n   /**\n    * For testing purposes only. DO NOT USE IN PRODUCTION.\n    */",
    "output": "Resize bitmaps to the size specified in JSON (#1225)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -135,7 +135,13 @@ private LottieResult<LottieComposition> getResultFromConnection(HttpURLConnectio\n     File file;\n     FileExtension extension;\n     LottieResult<LottieComposition> result = null;\n-    switch (connection.getContentType()) {\n+    String contentType = connection.getContentType();\n+    if (contentType == null) {\n+      // Assume JSON for best effort parsing. If it fails, it will just deliver the parse exception\n+      // in the result which is more useful than failing here.\n+      contentType = \"application/json\";\n+    }\n+    switch (contentType) {\n       case \"application/zip\":\n         Logger.debug(\"Handling zip response.\");\n         extension = FileExtension.ZIP;",
    "output": "Default null content type to application/json (#1223)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -96,7 +96,7 @@ public float getFrame() {\n     notifyUpdate();\n     if (ended) {\n       if (getRepeatCount() != INFINITE && repeatCount >= getRepeatCount()) {\n-        frame = getMaxFrame();\n+        frame = speed < 0 ? getMinFrame() : getMaxFrame();\n         removeFrameCallback();\n         notifyEnd(isReversed());\n       } else {",
    "output": "Set correct frame when animation ends and speed is < 0 (#1222)\n\nFixes #1207"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -94,34 +94,47 @@ private LottieResult fetchFromNetworkInternal() throws IOException {\n       connection.connect();\n \n       if (connection.getErrorStream() != null || connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-\n-        int responseCode = connection.getResponseCode();\n-        BufferedReader r = new BufferedReader(new InputStreamReader(connection.getErrorStream()));\n-        StringBuilder error = new StringBuilder();\n-        String line;\n-\n-        try {\n-          while ((line = r.readLine()) != null) {\n-            error.append(line).append('\\n');\n-          }\n-        } catch (Exception e) {\n-          throw e;\n-        } finally {\n-          r.close();\n-        }\n-\n-        return new LottieResult<>(new IllegalArgumentException(\"Unable to fetch \" + url + \". Failed with \" +\n-            responseCode + \"\\n\" + error));\n+        String error = getErrorFromConnection(connection);\n+        return new LottieResult<>(new IllegalArgumentException(\"Unable to fetch \" + url + \". Failed with \" + connection.getResponseCode() + \"\\n\" + error));\n       }\n+\n+      LottieResult<LottieComposition> result = getResultFromConnection(connection);\n+      Logger.debug(\"Completed fetch from network. Success: \" + (result.getValue() != null));\n+      return result;\n     } catch (Exception e) {\n       return new LottieResult<>(e);\n     } finally {\n       connection.disconnect();\n     }\n+  }\n+\n+  private String getErrorFromConnection(HttpURLConnection connection) throws IOException {\n+    int responseCode = connection.getResponseCode();\n+    BufferedReader r = new BufferedReader(new InputStreamReader(connection.getErrorStream()));\n+    StringBuilder error = new StringBuilder();\n+    String line;\n \n+    try {\n+      while ((line = r.readLine()) != null) {\n+        error.append(line).append('\\n');\n+      }\n+    } catch (Exception e) {\n+      throw e;\n+    } finally {\n+      try {\n+        r.close();\n+      } catch (Exception e) {\n+        // Do nothing.\n+      }\n+    }\n+    return error.toString();\n+  }\n+\n+  @Nullable\n+  private LottieResult<LottieComposition> getResultFromConnection(HttpURLConnection connection) throws IOException {\n     File file;\n     FileExtension extension;\n-    LottieResult<LottieComposition> result;\n+    LottieResult<LottieComposition> result = null;\n     switch (connection.getContentType()) {\n       case \"application/zip\":\n         Logger.debug(\"Handling zip response.\");\n@@ -141,8 +154,6 @@ private LottieResult fetchFromNetworkInternal() throws IOException {\n     if (result.getValue() != null) {\n       networkCache.renameTempFile(extension);\n     }\n-\n-    Logger.debug(\"Completed fetch from network. Success: \" + (result.getValue() != null));\n     return result;\n   }\n }",
    "output": "Close url connection at the right time (#1221)\n\n@dloic, #1162 broke all url loading because you closed the connection before it was actually done being used. This fixes it though.\r\n\r\nFixes #1219"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -276,6 +276,7 @@ public void invalidateSelf() {\n   @Override\n   public void setAlpha(@IntRange(from = 0, to = 255) int alpha) {\n     this.alpha = alpha;\n+    invalidateSelf();\n   }\n \n   @Override",
    "output": "invalidateSelf after setAlpha"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -762,6 +762,7 @@ public void cancelAnimation() {\n \n   @MainThread\n   public void pauseAnimation() {\n+    wasAnimatingWhenDetached = false;\n     wasAnimatingWhenNotShown = false;\n     lottieDrawable.pauseAnimation();\n     enableOrDisableHardwareLayer();",
    "output": "Set wasAnimatingWhenDetached to false at pause() (#1217)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -82,7 +82,7 @@ public float getFrame() {\n       return;\n     }\n \n-    long now = System.nanoTime();\n+    long now = frameTimeNanos;\n     long timeSinceFrame = now - lastFrameTimeNs;\n     float frameDuration = getFrameDurationNs();\n     float dFrames = timeSinceFrame / frameDuration;",
    "output": "Refer to the frameTimeNanos from Choreographer (#1215)\n\nThis is to fix #1214 . Please check out the root cause analysis in #1214 ."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -286,13 +286,14 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n     try {\n       ZipEntry entry = inputStream.getNextEntry();\n       while (entry != null) {\n-        if (entry.getName().contains(\"__MACOSX\")) {\n+        final String entryName = entry.getName();\n+        if (entryName.contains(\"__MACOSX\")) {\n           inputStream.closeEntry();\n-        } else if (entry.getName().contains(\".json\")) {\n+        } else if (entryName.contains(\".json\")) {\n           JsonReader reader = new JsonReader(new InputStreamReader(inputStream));\n           composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();\n-        } else if (entry.getName().contains(\".png\")) {\n-          String[] splitName = entry.getName().split(\"/\");\n+        } else if (entryName.contains(\".png\") || entryName.contains(\".webp\")) {\n+          String[] splitName = entryName.split(\"/\");\n           String name = splitName[splitName.length - 1];\n           images.put(name, BitmapFactory.decodeStream(inputStream));\n         } else {",
    "output": "Added WebP support to ZIP asset parsing (#1198)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -34,6 +34,9 @@\n import java.util.List;\n import java.util.Set;\n \n+import static com.airbnb.lottie.RenderMode.HARDWARE;\n+import static com.airbnb.lottie.RenderMode.SOFTWARE;\n+\n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n  * bodymovin (https://github.com/bodymovin/bodymovin).\n@@ -806,6 +809,21 @@ private void clearComposition() {\n     lottieDrawable.clearComposition();\n   }\n \n+  /**\n+   * If rendering via software, Android will fail to generate a bitmap if the view is too large. Rather than displaying\n+   * nothing, fallback on hardware acceleration which may incur a performance hit.\n+   *\n+   * @see #setRenderMode(RenderMode)\n+   * @see com.airbnb.lottie.LottieDrawable#draw(android.graphics.Canvas)\n+   */\n+  @Override\n+  public void buildDrawingCache(boolean autoScale) {\n+    super.buildDrawingCache(autoScale);\n+    if (getLayerType() == LAYER_TYPE_SOFTWARE && getDrawingCache(autoScale) == null) {\n+      setRenderMode(HARDWARE);\n+    }\n+  }\n+\n   /**\n    * Call this to set whether or not to render with hardware or software acceleration.\n    * Lottie defaults to Automatic which will use hardware acceleration unless:",
    "output": "Have software rendering fallback on hardware acceleration when too large (#1190)\n\nIn cases where LottieAnimationView is large and software rendering is used, Android may not be able to generate a bitmap large enough which causes nothing to be shown. Rather than have this happen, fall back on hardware acceleration which is supported > api 11. Potentially taking a perf hit and displaying is better than a blank screen and not displaying at all.\r\n\r\nEncountered this where upon rotation on a tablet, the view became big enough that generation of the bitmap failed."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -24,6 +24,7 @@\n import android.view.View;\n \n import com.airbnb.lottie.model.KeyPath;\n+import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieFrameInfo;\n import com.airbnb.lottie.value.LottieValueCallback;\n import com.airbnb.lottie.value.SimpleLottieValueCallback;\n@@ -163,6 +164,8 @@ private void init(@Nullable AttributeSet attrs) {\n \n     ta.recycle();\n \n+    lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);\n+\n     enableOrDisableHardwareLayer();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -64,6 +64,7 @@ private interface LazyCompositionTask {\n   private LottieComposition composition;\n   private final LottieValueAnimator animator = new LottieValueAnimator();\n   private float scale = 1f;\n+  private boolean systemAnimationsEnabled = true;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   private final ArrayList<LazyCompositionTask> lazyCompositionTasks = new ArrayList<>();\n@@ -375,7 +376,13 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n-    animator.playAnimation();\n+\n+    if (systemAnimationsEnabled || getRepeatCount() == 0) {\n+      animator.playAnimation();\n+    }\n+    if (!systemAnimationsEnabled) {\n+      setFrame((int) (getSpeed() < 0 ? getMinFrame() : getMaxFrame()));\n+    }\n   }\n \n   @MainThread\n@@ -732,6 +739,10 @@ public boolean isAnimating() {\n     return animator.isRunning();\n   }\n \n+  void setSystemAnimationsAreEnabled(Boolean areEnabled) {\n+    systemAnimationsEnabled = areEnabled;\n+  }\n+\n // </editor-fold>\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie.utils;\n \n+import android.content.Context;\n import android.content.res.Resources;\n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n@@ -10,6 +11,8 @@\n import android.graphics.PathMeasure;\n import android.graphics.PointF;\n import android.graphics.RectF;\n+import android.os.Build;\n+import android.provider.Settings;\n \n import androidx.annotation.Nullable;\n \n@@ -213,6 +216,17 @@ public static float dpScale() {\n     return dpScale;\n   }\n \n+  public static float getAnimationScale(Context context) {\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+      return Settings.Global.getFloat(context.getContentResolver(),\n+              Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);\n+    } else {\n+      //noinspection deprecation\n+      return Settings.System.getFloat(context.getContentResolver(),\n+              Settings.System.ANIMATOR_DURATION_SCALE, 1.0f);\n+    }\n+  }\n+\n   /**\n    * For testing purposes only. DO NOT USE IN PRODUCTION.\n    */",
    "output": "Respect disabled system animations (#1187)\n\nIf systemAnimationScale == 0, the lottie animation will play then immediately jump to the last frame, or only jump to the last frame if it is a loop animation.\r\nThis solution handles if the dev move the animation at some percentage, change first or last frame or play the animation in reverse.\r\n\r\nReally useful for testing purpose in order to not overload the main thread\r\n\r\nUnittest are OK, I couldn't start the uiTest as it require the AWS key.\r\n\r\nI couldn't add unittest as it obviously doesn't try to start the animations in it\r\n\r\nFixes #1129"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -72,7 +72,7 @@\n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private String animationName;\n   private @RawRes int animationResId;\n-  private boolean wasAnimatingWhenVisibilityChanged = false;\n+  private boolean wasAnimatingWhenNotShown = false;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n@@ -238,14 +238,15 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n     if (lottieDrawable == null) {\n       return;\n     }\n-    if (visibility == VISIBLE) {\n-      if (wasAnimatingWhenVisibilityChanged) {\n+    if (isShown()) {\n+      if (wasAnimatingWhenNotShown) {\n         resumeAnimation();\n+        wasAnimatingWhenNotShown = false;\n       }\n     } else {\n-      wasAnimatingWhenVisibilityChanged = isAnimating();\n       if (isAnimating()) {\n         pauseAnimation();\n+        wasAnimatingWhenNotShown = true;\n       }\n     }\n   }\n@@ -411,8 +412,12 @@ public boolean hasMatte() {\n    */\n   @MainThread\n   public void playAnimation() {\n-    lottieDrawable.playAnimation();\n-    enableOrDisableHardwareLayer();\n+    if (isShown()) {\n+      lottieDrawable.playAnimation();\n+      enableOrDisableHardwareLayer();\n+    } else {\n+      wasAnimatingWhenNotShown = true;\n+    }\n   }\n \n   /**\n@@ -421,8 +426,12 @@ public void playAnimation() {\n    */\n   @MainThread\n   public void resumeAnimation() {\n-    lottieDrawable.resumeAnimation();\n-    enableOrDisableHardwareLayer();\n+    if (isShown()) {\n+      lottieDrawable.resumeAnimation();\n+      enableOrDisableHardwareLayer();\n+    } else {\n+      wasAnimatingWhenNotShown = true;\n+    }\n   }\n \n   /**\n@@ -740,12 +749,14 @@ public float getScale() {\n \n   @MainThread\n   public void cancelAnimation() {\n+    wasAnimatingWhenNotShown = false;\n     lottieDrawable.cancelAnimation();\n     enableOrDisableHardwareLayer();\n   }\n \n   @MainThread\n   public void pauseAnimation() {\n+    wasAnimatingWhenNotShown = false;\n     lottieDrawable.pauseAnimation();\n     enableOrDisableHardwareLayer();\n   }",
    "output": "Fix issues about visibility changes (#1174)\n\n1) The animation could be played although it is not visible.\r\nonVisibilityChanged callback will be called even when\r\nthe visibility of an ancestor of the view has changed.\r\nSo we need to check the visibility with isShown(),\r\nnot with visibility == View.VISIBLE in onVisibilityChanged callback.\r\n\r\n2) playAnimation() and resumeAnimation() could be called while not visible.\r\nplayAnimation() and resumeAnimation() should be blocked\r\nif the view is not visible, and the animation should be\r\nresumed when the view goes visible.\r\nSo, we need to set wasAnimatingWhenNotShown=true\r\nin playAnimation() and resumeAnimation() when the view is not visible.\r\n\r\n3) pauseAnimation() and cancelAnimation() were not worked when the activity is in background.\r\nThe animation could be resumed by onVisibilityChanged() callback.\r\nWe need to reset wasAnimatingWhenNotShown=false in pauseAnimation() and cancelAnimation().\r\n\r\nFixes #1173"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -181,7 +181,7 @@ public Marker getMarker(String markerName) {\n     int size = markers.size();\n     for (int i = 0; i < markers.size(); i++) {\n       Marker marker = markers.get(i);\n-      if (markerName.equals(marker.name)) {\n+      if (marker.matchesName(markerName)) {\n         return marker;\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Marker.java b/lottie/src/main/java/com/airbnb/lottie/model/Marker.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Marker.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Marker.java\n@@ -1,8 +1,9 @@\n package com.airbnb.lottie.model;\n \n public class Marker {\n+  private static String CARRIAGE_RETURN = \"\\r\";\n \n-  public final String name;\n+  private final String name;\n   public final float startFrame;\n   public final float durationFrames;\n \n@@ -11,4 +12,17 @@ public Marker(String name, float startFrame, float durationFrames) {\n     this.durationFrames = durationFrames;\n     this.startFrame = startFrame;\n   }\n+\n+  public boolean matchesName(String name) {\n+    if (this.name.equalsIgnoreCase(name)) {\n+      return true;\n+    }\n+\n+    // It is easy for a designer to accidentally include an extra newline which will cause the name to not match what they would\n+    // expect. This is a convenience to precent unneccesary confusion.\n+    if (this.name.endsWith(CARRIAGE_RETURN) && this.name.substring(0, this.name.length() - 1).equalsIgnoreCase(name)) {\n+      return true;\n+    }\n+    return false;\n+  }\n }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/model/MarkerTest.java b/lottie/src/test/java/com/airbnb/lottie/model/MarkerTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/model/MarkerTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/model/MarkerTest.java\n@@ -0,0 +1,14 @@\n+package com.airbnb.lottie.model;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class MarkerTest {\n+\n+  @Test\n+  public void testMarkerWithCarriageReturn() {\n+    Marker marker = new Marker(\"Foo\\r\", 0f, 0f);\n+    assertTrue(marker.matchesName(\"foo\"));\n+  }\n+}\n\\ No newline at end of file",
    "output": "Match trailing carriage returns and ignore case for marker names (#1164)\n\nFixes #1163"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -234,7 +234,9 @@ private int[] applyDynamicColorsIfNeeded(int[] colors) {\n   @SuppressWarnings(\"unchecked\")\n   @Override\n   public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {\n-     if (property == LottieProperty.COLOR_FILTER) {\n+    if (property == LottieProperty.OPACITY) {\n+      opacityAnimation.setValueCallback((LottieValueCallback<Integer>) callback);\n+    } else if (property == LottieProperty.COLOR_FILTER) {\n        if (callback == null) {\n          colorFilterAnimation = null;\n        } else {",
    "output": "Added support for gradient fill opacity (#1155)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -108,4 +108,6 @@ public interface LottieProperty {\n   Float TIME_REMAP = 13f;\n \n   ColorFilter COLOR_FILTER = new ColorFilter();\n+\n+  Integer[] GRADIENT_COLOR = new Integer[0];\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -41,7 +41,7 @@ public abstract class BaseStrokeContent\n   private final Path trimPathPath = new Path();\n   private final RectF rect = new RectF();\n   private final LottieDrawable lottieDrawable;\n-  private final BaseLayer layer;\n+  protected final BaseLayer layer;\n   private final List<PathGroup> pathGroups = new ArrayList<>();\n   private final float[] dashPatternValues;\n   final Paint paint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -55,6 +55,7 @@ public class GradientFillContent\n   private final BaseKeyframeAnimation<PointF, PointF> startPointAnimation;\n   private final BaseKeyframeAnimation<PointF, PointF> endPointAnimation;\n   @Nullable private BaseKeyframeAnimation<ColorFilter, ColorFilter> colorFilterAnimation;\n+  @Nullable private ValueCallbackKeyframeAnimation colorCallbackAnimation;\n   private final LottieDrawable lottieDrawable;\n   private final int cacheSteps;\n \n@@ -159,7 +160,7 @@ private LinearGradient getLinearGradient() {\n     PointF startPoint = startPointAnimation.getValue();\n     PointF endPoint = endPointAnimation.getValue();\n     GradientColor gradientColor = colorAnimation.getValue();\n-    int[] colors = gradientColor.getColors();\n+    int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n     gradient = new LinearGradient(startPoint.x, startPoint.y, endPoint.x, endPoint.y, colors,\n         positions, Shader.TileMode.CLAMP);\n@@ -176,7 +177,7 @@ private RadialGradient getRadialGradient() {\n     PointF startPoint = startPointAnimation.getValue();\n     PointF endPoint = endPointAnimation.getValue();\n     GradientColor gradientColor = colorAnimation.getValue();\n-    int[] colors = gradientColor.getColors();\n+    int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n     float x0 = startPoint.x;\n     float y0 = startPoint.y;\n@@ -208,6 +209,23 @@ private int getGradientHash() {\n     return hash;\n   }\n \n+  private int[] applyDynamicColorsIfNeeded(int[] colors) {\n+    if (colorCallbackAnimation != null) {\n+      Integer[] dynamicColors = (Integer[]) colorCallbackAnimation.getValue();\n+      if (colors.length == dynamicColors.length) {\n+        for (int i = 0; i < colors.length; i++) {\n+          colors[i] = dynamicColors[i];\n+        }\n+      } else {\n+        colors = new int[dynamicColors.length];\n+        for (int i = 0; i < dynamicColors.length; i++) {\n+          colors[i] = dynamicColors[i];\n+        }\n+      }\n+    }\n+    return colors;\n+  }\n+\n   @Override public void resolveKeyPath(\n       KeyPath keyPath, int depth, List<KeyPath> accumulator, KeyPath currentPartialKeyPath) {\n     MiscUtils.resolveKeyPath(keyPath, depth, accumulator, currentPartialKeyPath, this);\n@@ -225,6 +243,17 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n          colorFilterAnimation.addUpdateListener(this);\n          layer.addAnimation(colorFilterAnimation);\n        }\n+     } else if (property == LottieProperty.GRADIENT_COLOR) {\n+       if (callback == null) {\n+         if (colorCallbackAnimation != null) {\n+           layer.removeAnimation(colorCallbackAnimation);\n+         }\n+         colorCallbackAnimation = null;\n+       } else {\n+         colorCallbackAnimation = new ValueCallbackKeyframeAnimation<>(callback);\n+         colorCallbackAnimation.addUpdateListener(this);\n+         layer.addAnimation(colorCallbackAnimation);\n+       }\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n@@ -7,14 +7,18 @@\n import android.graphics.RadialGradient;\n import android.graphics.RectF;\n import android.graphics.Shader;\n+import androidx.annotation.Nullable;\n import androidx.collection.LongSparseArray;\n \n import com.airbnb.lottie.LottieDrawable;\n+import com.airbnb.lottie.LottieProperty;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n+import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;\n import com.airbnb.lottie.model.content.GradientColor;\n import com.airbnb.lottie.model.content.GradientStroke;\n import com.airbnb.lottie.model.content.GradientType;\n import com.airbnb.lottie.model.layer.BaseLayer;\n+import com.airbnb.lottie.value.LottieValueCallback;\n \n public class GradientStrokeContent extends BaseStrokeContent {\n   /**\n@@ -33,6 +37,7 @@ public class GradientStrokeContent extends BaseStrokeContent {\n   private final BaseKeyframeAnimation<GradientColor, GradientColor> colorAnimation;\n   private final BaseKeyframeAnimation<PointF, PointF> startPointAnimation;\n   private final BaseKeyframeAnimation<PointF, PointF> endPointAnimation;\n+  @Nullable private ValueCallbackKeyframeAnimation colorCallbackAnimation;\n \n   public GradientStrokeContent(\n       final LottieDrawable lottieDrawable, BaseLayer layer, GradientStroke stroke) {\n@@ -63,11 +68,14 @@ public GradientStrokeContent(\n       return;\n     }\n     getBounds(boundsRect, parentMatrix, false);\n+\n+    Shader shader;\n     if (type == GradientType.LINEAR) {\n-      paint.setShader(getLinearGradient());\n+      shader = getLinearGradient();\n     } else {\n-      paint.setShader(getRadialGradient());\n+      shader = getRadialGradient();\n     }\n+    paint.setShader(shader);\n \n     super.draw(canvas, parentMatrix, parentAlpha);\n   }\n@@ -85,7 +93,7 @@ private LinearGradient getLinearGradient() {\n     PointF startPoint = startPointAnimation.getValue();\n     PointF endPoint = endPointAnimation.getValue();\n     GradientColor gradientColor = colorAnimation.getValue();\n-    int[] colors = gradientColor.getColors();\n+    int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n     int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n     int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n@@ -105,7 +113,7 @@ private RadialGradient getRadialGradient() {\n     PointF startPoint = startPointAnimation.getValue();\n     PointF endPoint = endPointAnimation.getValue();\n     GradientColor gradientColor = colorAnimation.getValue();\n-    int[] colors = gradientColor.getColors();\n+    int[] colors = applyDynamicColorsIfNeeded(gradientColor.getColors());\n     float[] positions = gradientColor.getPositions();\n     int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n     int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n@@ -133,4 +141,38 @@ private int getGradientHash() {\n     }\n     return hash;\n   }\n+\n+  private int[] applyDynamicColorsIfNeeded(int[] colors) {\n+    if (colorCallbackAnimation != null) {\n+      Integer[] dynamicColors = (Integer[]) colorCallbackAnimation.getValue();\n+      if (colors.length == dynamicColors.length) {\n+        for (int i = 0; i < colors.length; i++) {\n+          colors[i] = dynamicColors[i];\n+        }\n+      } else {\n+        colors = new int[dynamicColors.length];\n+        for (int i = 0; i < dynamicColors.length; i++) {\n+          colors[i] = dynamicColors[i];\n+        }\n+      }\n+    }\n+    return colors;\n+  }\n+\n+  @Override\n+  public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {\n+    super.addValueCallback(property, callback);\n+    if (property == LottieProperty.GRADIENT_COLOR) {\n+      if (callback == null) {\n+        if (colorCallbackAnimation != null) {\n+          layer.removeAnimation(colorCallbackAnimation);\n+        }\n+        colorCallbackAnimation = null;\n+      } else {\n+        colorCallbackAnimation = new ValueCallbackKeyframeAnimation<>(callback);\n+        colorCallbackAnimation.addUpdateListener(this);\n+        layer.addAnimation(colorCallbackAnimation);\n+      }\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -183,6 +183,10 @@ public void addAnimation(@Nullable BaseKeyframeAnimation<?, ?> newAnimation) {\n     animations.add(newAnimation);\n   }\n \n+  public void removeAnimation(BaseKeyframeAnimation<?, ?> animation) {\n+    animations.remove(animation);\n+  }\n+\n   @CallSuper\n   @Override\n   public void getBounds(",
    "output": "Added support for dynamic gradient colors (#1153)\n\nOther dynamic properties can be added later but adding support for colors is the most valuable right now.\r\n#905"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -8,6 +8,7 @@\n import android.graphics.RectF;\n import android.graphics.Typeface;\n import androidx.annotation.Nullable;\n+import androidx.collection.LongSparseArray;\n import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.LottieDrawable;\n import com.airbnb.lottie.LottieProperty;\n@@ -23,14 +24,17 @@\n import com.airbnb.lottie.model.content.ShapeGroup;\n import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieValueCallback;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n public class TextLayer extends BaseLayer {\n-  private final char[] tempCharArray = new char[1];\n+  // Capacity is 2 because emojis are 2 characters. Some are longer in which case, the capacity will\n+  // be expanded but that should be pretty rare.\n+  private final StringBuilder stringBuilder = new StringBuilder(2);\n   private final RectF rectF = new RectF();\n   private final Matrix matrix = new Matrix();\n   private final Paint fillPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n@@ -40,13 +44,18 @@ public class TextLayer extends BaseLayer {\n     setStyle(Style.STROKE);\n   }};\n   private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n+  private final LongSparseArray<String> codePointCache = new LongSparseArray<String>();\n   private final TextKeyframeAnimation textAnimation;\n   private final LottieDrawable lottieDrawable;\n   private final LottieComposition composition;\n-  @Nullable private BaseKeyframeAnimation<Integer, Integer> colorAnimation;\n-  @Nullable private BaseKeyframeAnimation<Integer, Integer> strokeColorAnimation;\n-  @Nullable private BaseKeyframeAnimation<Float, Float> strokeWidthAnimation;\n-  @Nullable private BaseKeyframeAnimation<Float, Float> trackingAnimation;\n+  @Nullable\n+  private BaseKeyframeAnimation<Integer, Integer> colorAnimation;\n+  @Nullable\n+  private BaseKeyframeAnimation<Integer, Integer> strokeColorAnimation;\n+  @Nullable\n+  private BaseKeyframeAnimation<Float, Float> strokeWidthAnimation;\n+  @Nullable\n+  private BaseKeyframeAnimation<Float, Float> trackingAnimation;\n \n   TextLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n     super(lottieDrawable, layerModel);\n@@ -83,13 +92,15 @@ public class TextLayer extends BaseLayer {\n     }\n   }\n \n-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {\n+  @Override\n+  public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {\n     super.getBounds(outBounds, parentMatrix, applyParents);\n     // TODO: use the correct text bounds.\n     outBounds.set(0, 0, composition.getBounds().width(), composition.getBounds().height());\n   }\n \n-  @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n+  @Override\n+  void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n     if (!lottieDrawable.useTextGlyphs()) {\n       canvas.setMatrix(parentMatrix);\n@@ -171,7 +182,7 @@ private void drawTextGlyphs(\n   }\n \n   private void drawGlyphTextLine(String text, DocumentData documentData, Matrix parentMatrix,\n-                                 Font font, Canvas canvas, float parentScale, float fontScale) {\n+      Font font, Canvas canvas, float parentScale, float fontScale) {\n     for (int i = 0; i < text.length(); i++) {\n       char c = text.charAt(i);\n       int characterHash = FontCharacter.hashFor(c, font.getFamily(), font.getStyle());\n@@ -245,11 +256,11 @@ private List<String> getTextLines(String text) {\n   }\n \n   private void drawFontTextLine(String text, DocumentData documentData, Canvas canvas, float parentScale) {\n-    for (int i = 0; i < text.length(); i++) {\n-      char character = text.charAt(i);\n-      drawCharacterFromFont(character, documentData, canvas);\n-      tempCharArray[0] = character;\n-      float charWidth = fillPaint.measureText(tempCharArray, 0, 1);\n+    for (int i = 0; i < text.length(); ) {\n+      String charString = codePointToString(text, i);\n+      i += charString.length();\n+      drawCharacterFromFont(charString, documentData, canvas);\n+      float charWidth = fillPaint.measureText(charString, 0, 1);\n       // Add tracking\n       float tracking = documentData.tracking / 10f;\n       if (trackingAnimation != null) {\n@@ -323,25 +334,24 @@ private void drawGlyph(Path path, Paint paint, Canvas canvas) {\n     canvas.drawPath(path, paint);\n   }\n \n-  private void drawCharacterFromFont(char c, DocumentData documentData, Canvas canvas) {\n-    tempCharArray[0] = c;\n+  private void drawCharacterFromFont(String character, DocumentData documentData, Canvas canvas) {\n     if (documentData.strokeOverFill) {\n-      drawCharacter(tempCharArray, fillPaint, canvas);\n-      drawCharacter(tempCharArray, strokePaint, canvas);\n+      drawCharacter(character, fillPaint, canvas);\n+      drawCharacter(character, strokePaint, canvas);\n     } else {\n-      drawCharacter(tempCharArray, strokePaint, canvas);\n-      drawCharacter(tempCharArray, fillPaint, canvas);\n+      drawCharacter(character, strokePaint, canvas);\n+      drawCharacter(character, fillPaint, canvas);\n     }\n   }\n \n-  private void drawCharacter(char[] character, Paint paint, Canvas canvas) {\n+  private void drawCharacter(String character, Paint paint, Canvas canvas) {\n     if (paint.getColor() == Color.TRANSPARENT) {\n       return;\n     }\n     if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0) {\n       return;\n     }\n-    canvas.drawText(character, 0, 1, 0, 0, paint);\n+    canvas.drawText(character, 0, character.length(), 0, 0, paint);\n   }\n \n   private List<ContentGroup> getContentsForCharacter(FontCharacter character) {\n@@ -359,6 +369,44 @@ private List<ContentGroup> getContentsForCharacter(FontCharacter character) {\n     return contents;\n   }\n \n+  private String codePointToString(String text, int startIndex) {\n+    int firstCodePoint = text.codePointAt(startIndex);\n+    int firstCodePointLength = Character.charCount(firstCodePoint);\n+    int key = firstCodePoint;\n+    int index = startIndex + firstCodePointLength;\n+    while (index < text.length()) {\n+      int nextCodePoint = text.codePointAt(index);\n+      if (!isModifier(nextCodePoint)) {\n+        break;\n+      }\n+      int nextCodePointLength = Character.charCount(nextCodePoint);\n+      index += nextCodePointLength;\n+      key = key * 31 + nextCodePoint;\n+    }\n+\n+    if (codePointCache.containsKey(key)) {\n+      return codePointCache.get(key);\n+    }\n+\n+    stringBuilder.setLength(0);\n+    for (int i = startIndex; i < index; ) {\n+      int codePoint = text.codePointAt(i);\n+      stringBuilder.appendCodePoint(codePoint);\n+      i += Character.charCount(codePoint);\n+    }\n+    String str = stringBuilder.toString();\n+    codePointCache.put(key, str);\n+    return str;\n+  }\n+\n+  private boolean isModifier(int codePoint) {\n+    return Character.getType(codePoint) == Character.FORMAT ||\n+        Character.getType(codePoint) == Character.MODIFIER_SYMBOL ||\n+        Character.getType(codePoint) == Character.NON_SPACING_MARK ||\n+        Character.getType(codePoint) == Character.OTHER_SYMBOL ||\n+        Character.getType(codePoint) == Character.SURROGATE;\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n   @Override\n   public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {",
    "output": "Added support for emoji in TextDelegates (#1150)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieProperty.java\n@@ -65,18 +65,19 @@ public interface LottieProperty {\n   Integer TRANSFORM_OPACITY = 3;\n   /** [0,100] */\n   Integer OPACITY = 4;\n-\n   /** In Px */\n   PointF TRANSFORM_ANCHOR_POINT = new PointF();\n   /** In Px */\n   PointF TRANSFORM_POSITION = new PointF();\n   /** In Px */\n   PointF ELLIPSE_SIZE = new PointF();\n   /** In Px */\n+  PointF RECTANGLE_SIZE = new PointF();\n+  /** In degrees */\n+  Float CORNER_RADIUS = 0f;\n+  /** In Px */\n   PointF POSITION = new PointF();\n-\n   ScaleXY TRANSFORM_SCALE = new ScaleXY();\n-\n   /** In degrees */\n   Float TRANSFORM_ROTATION = 1f;\n   /** 0-85 */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java\n@@ -6,6 +6,7 @@\n import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.LottieDrawable;\n+import com.airbnb.lottie.LottieProperty;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;\n import com.airbnb.lottie.model.KeyPath;\n@@ -153,8 +154,13 @@ private void invalidate() {\n     MiscUtils.resolveKeyPath(keyPath, depth, accumulator, currentPartialKeyPath, this);\n   }\n \n-  @Override\n-  public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {\n-\n+  @Override public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> callback) {\n+    if (property == LottieProperty.RECTANGLE_SIZE) {\n+        sizeAnimation.setValueCallback((LottieValueCallback<PointF>) callback);\n+    } else if (property == LottieProperty.POSITION) {\n+        positionAnimation.setValueCallback((LottieValueCallback<PointF>) callback);\n+    } else if (property == LottieProperty.CORNER_RADIUS) {\n+        cornerRadiusAnimation.setValueCallback((LottieValueCallback<Float>) callback);\n+    }\n   }\n }",
    "output": "Added radius, size & position value callbacks for rectangle (#1146)\n\nFixes #894"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -139,6 +139,10 @@ public abstract class BaseStrokeContent\n \n   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"StrokeContent#draw\");\n+    if (Utils.hasZeroScaleAxis(parentMatrix)) {\n+      L.endSection(\"StrokeContent#draw\");\n+      return;\n+    }\n     int alpha = (int) ((parentAlpha / 255f * ((IntegerKeyframeAnimation) opacityAnimation).getIntValue() / 100f) * 255);\n     paint.setAlpha(clamp(alpha, 0, 255));\n     paint.setStrokeWidth(((FloatKeyframeAnimation) widthAnimation).getFloatValue() * Utils.getScale(parentMatrix));\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -73,6 +73,19 @@ public static float getScale(Matrix matrix) {\n     return (float) Math.hypot(dx, dy) / 2f;\n   }\n \n+  public static boolean hasZeroScaleAxis(Matrix matrix) {\n+    points[0] = 0;\n+    points[1] = 0;\n+    // Random numbers. The only way these should map to the same thing as 0,0 is if the scale is 0.\n+    points[2] = 37394.729378f;\n+    points[3] = 39575.2343807f;\n+    matrix.mapPoints(points);\n+    if (points[0] == points[2] || points[1] == points[3]) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n   public static void applyTrimPathIfNeeded(Path path, @Nullable TrimPathContent trimPath) {\n     if (trimPath == null || trimPath.isHidden()) {\n       return;",
    "output": "Prevent zero scale strokes from drawing (#1149)\n\nFixes #1142"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -232,6 +232,12 @@ private void init(@Nullable AttributeSet attrs) {\n \n   @Override\n   protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n+    // This can happen on older versions of Android because onVisibilityChanged gets called from the\n+    // constructor of View so this will get called before lottieDrawable gets initialized.\n+    // https://github.com/airbnb/lottie-android/issues/1143\n+    if (lottieDrawable == null) {\n+      return;\n+    }\n     if (visibility == VISIBLE) {\n       if (wasAnimatingWhenVisibilityChanged) {\n         resumeAnimation();",
    "output": "Prevent a crash on older versions of Android (#1148)\n\nFixes #1143"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -19,7 +19,7 @@ public enum Justification {\n   public final double size;\n   @SuppressWarnings(\"WeakerAccess\") public final Justification justification;\n   public final int tracking;\n-  @SuppressWarnings(\"WeakerAccess\") final double lineHeight;\n+  @SuppressWarnings(\"WeakerAccess\") public final double lineHeight;\n   public final double baselineShift;\n   @ColorInt public final int color;\n   @ColorInt public final int strokeColor;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -24,6 +24,7 @@\n import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieValueCallback;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -138,10 +139,39 @@ private void drawTextGlyphs(\n     float fontScale = (float) documentData.size / 100f;\n     float parentScale = Utils.getScale(parentMatrix);\n \n-    float totalTextWidth = getTotalTextWidthForGlyphs(documentData, font, fontScale, parentScale);\n-    applyJustification(documentData.justification, canvas, totalTextWidth);\n-\n     String text = documentData.text;\n+\n+    // Line height\n+    float lineHeight = (float) documentData.lineHeight * Utils.dpScale();\n+\n+    // Split full text in multiple lines\n+    List<String> textLines = getTextLines(text);\n+    int textLineCount = textLines.size();\n+    for (int l = 0; l < textLineCount; l++) {\n+\n+      String textLine = textLines.get(l);\n+      float textLineWidth = getTextLineWidthForGlyphs(textLine, font, fontScale, parentScale);\n+\n+      canvas.save();\n+\n+      // Apply horizontal justification\n+      applyJustification(documentData.justification, canvas, textLineWidth);\n+\n+      // Center text vertically\n+      float multilineTranslateY = (textLineCount - 1) * lineHeight / 2;\n+      float translateY = l * lineHeight - multilineTranslateY;\n+      canvas.translate(0, translateY);\n+\n+      // Draw each line\n+      drawGlyphTextLine(textLine, documentData, parentMatrix, font, canvas, parentScale, fontScale);\n+\n+      // Reset canvas\n+      canvas.restore();\n+    }\n+  }\n+\n+  private void drawGlyphTextLine(String text, DocumentData documentData, Matrix parentMatrix,\n+                                 Font font, Canvas canvas, float parentScale, float fontScale) {\n     for (int i = 0; i < text.length(); i++) {\n       char c = text.charAt(i);\n       int characterHash = FontCharacter.hashFor(c, font.getFamily(), font.getStyle());\n@@ -179,9 +209,42 @@ private void drawTextWithFont(\n     strokePaint.setTypeface(fillPaint.getTypeface());\n     strokePaint.setTextSize(fillPaint.getTextSize());\n \n-    float totalTextWidth = strokePaint.measureText(text);\n-    applyJustification(documentData.justification, canvas, totalTextWidth);\n+    // Line height\n+    float lineHeight = (float) documentData.lineHeight * Utils.dpScale();\n+\n+    // Split full text in multiple lines\n+    List<String> textLines = getTextLines(text);\n+    int textLineCount = textLines.size();\n+    for (int l = 0; l < textLineCount; l++) {\n+\n+      String textLine = textLines.get(l);\n+      float textLineWidth = strokePaint.measureText(textLine);\n+\n+      // Apply horizontal justification\n+      applyJustification(documentData.justification, canvas, textLineWidth);\n+\n+      // Center text vertically\n+      float multilineTranslateY = (textLineCount - 1) * lineHeight / 2;\n+      float translateY = l * lineHeight - multilineTranslateY;\n+      canvas.translate(0, translateY);\n+\n+      // Draw each line\n+      drawFontTextLine(textLine, documentData, canvas, parentScale);\n+\n+      // Reset canvas\n+      canvas.setMatrix(parentMatrix);\n+    }\n+  }\n+\n+  private List<String> getTextLines(String text) {\n+    // Split full text by carriage return character\n+    String formattedText = text.replaceAll(\"\\r\\n\", \"\\r\")\n+        .replaceAll(\"\\n\", \"\\r\");\n+    String[] textLinesArray = formattedText.split(\"\\r\");\n+    return Arrays.asList(textLinesArray);\n+  }\n \n+  private void drawFontTextLine(String text, DocumentData documentData, Canvas canvas, float parentScale) {\n     for (int i = 0; i < text.length(); i++) {\n       char character = text.charAt(i);\n       drawCharacterFromFont(character, documentData, canvas);\n@@ -197,31 +260,31 @@ private void drawTextWithFont(\n     }\n   }\n \n-  private float getTotalTextWidthForGlyphs(\n-      DocumentData documentData, Font font, float fontScale, float parentScale) {\n-    float totalWidth = 0;\n-    for (int i = 0; i < documentData.text.length(); i++) {\n-      char c = documentData.text.charAt(i);\n+  private float getTextLineWidthForGlyphs(\n+      String textLine, Font font, float fontScale, float parentScale) {\n+    float textLineWidth = 0;\n+    for (int i = 0; i < textLine.length(); i++) {\n+      char c = textLine.charAt(i);\n       int characterHash = FontCharacter.hashFor(c, font.getFamily(), font.getStyle());\n       FontCharacter character = composition.getCharacters().get(characterHash);\n       if (character == null) {\n         continue;\n       }\n-      totalWidth += character.getWidth() * fontScale * Utils.dpScale() * parentScale;\n+      textLineWidth += character.getWidth() * fontScale * Utils.dpScale() * parentScale;\n     }\n-    return totalWidth;\n+    return textLineWidth;\n   }\n \n-  private void applyJustification(Justification justification, Canvas canvas, float totalTextWidth) {\n+  private void applyJustification(Justification justification, Canvas canvas, float textLineWidth) {\n     switch (justification) {\n       case LEFT_ALIGN:\n         // Do nothing. Default is left aligned.\n         break;\n       case RIGHT_ALIGN:\n-        canvas.translate(-totalTextWidth, 0);\n+        canvas.translate(-textLineWidth, 0);\n         break;\n       case CENTER:\n-        canvas.translate(-totalTextWidth / 2, 0);\n+        canvas.translate(-textLineWidth / 2, 0);\n         break;\n     }\n   }",
    "output": "Add support for multiline text (#1138)\n\nFixes #401"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -292,15 +292,6 @@ public int getOpacity() {\n     return PixelFormat.TRANSLUCENT;\n   }\n \n-  private void drawRect(Canvas canvas, float lp, float tp, float rp, float bp, @Nullable PorterDuff.Mode mode, int color) {\n-    Paint paint = new Paint();\n-    paint.setColor(color);\n-    if (mode != null) {\n-      paint.setXfermode(new PorterDuffXfermode(mode));\n-    }\n-    canvas.drawRect(canvas.getWidth() * lp, canvas.getHeight() * tp, canvas.getWidth() * rp, canvas.getHeight() * bp, paint);\n-  }\n-\n   @Override\n   public void draw(@NonNull Canvas canvas) {\n     isDirty = false;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -66,11 +66,7 @@ static BaseLayer forModel(\n   private final Matrix matrix = new Matrix();\n   private final Paint contentPaint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint dstInPaint = new LPaint(Paint.ANTI_ALIAS_FLAG, PorterDuff.Mode.DST_IN);\n-  private final Paint addMaskPaint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint addInvMaskLayerPaint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint addInvMaskPaintClear = new LPaint(Paint.ANTI_ALIAS_FLAG, PorterDuff.Mode.CLEAR);\n-  private final Paint subtractMaskStartingPaintNormal = new LPaint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint subtractMaskPaintDstOut = new LPaint(Paint.ANTI_ALIAS_FLAG, PorterDuff.Mode.DST_OUT);\n+  private final Paint dstOutPaint = new LPaint(Paint.ANTI_ALIAS_FLAG, PorterDuff.Mode.DST_OUT);\n   private final Paint mattePaint = new LPaint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint clearPaint = new LPaint(PorterDuff.Mode.CLEAR);\n   private final RectF rect = new RectF();\n@@ -101,8 +97,6 @@ static BaseLayer forModel(\n     this.lottieDrawable = lottieDrawable;\n     this.layerModel = layerModel;\n     drawTraceName = layerModel.getName() + \"#draw\";\n-    addMaskPaint.setColor(Color.BLUE);\n-    subtractMaskStartingPaintNormal.setColor(Color.BLACK);\n     if (layerModel.getMatteType() == Layer.MatteType.INVERT) {\n       mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n     } else {\n@@ -371,7 +365,6 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {\n   private void applyMasks(Canvas canvas, Matrix matrix) {\n     L.beginSection(\"Layer#saveLayer\");\n     saveLayerCompat(canvas, rect, dstInPaint, false);\n-//    canvas.drawRect(rect.left, rect.top, rect.right, rect.bottom, subtractMaskStartingPaintNormal);\n     L.endSection(\"Layer#saveLayer\");\n     for (int i = 0; i < mask.getMasks().size(); i++) {\n       Mask mask = this.mask.getMasks().get(i);\n@@ -399,7 +392,11 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n           }\n           break;\n         case MASK_MODE_INTERSECT:\n-          applyIntersectMask(canvas, matrix, mask, maskAnimation, opacityAnimation);\n+          if (mask.isInverted()) {\n+            applyInvertedIntersectMask(canvas, matrix, mask, maskAnimation, opacityAnimation);\n+          } else {\n+            applyIntersectMask(canvas, matrix, mask, maskAnimation, opacityAnimation);\n+          }\n           break;\n       }\n     }\n@@ -413,19 +410,19 @@ private void applyAddMask(Canvas canvas, Matrix matrix, Mask mask,\n     Path maskPath = maskAnimation.getValue();\n     path.set(maskPath);\n     path.transform(matrix);\n-    addMaskPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n-    canvas.drawPath(path, addMaskPaint);\n+    contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n+    canvas.drawPath(path, contentPaint);\n   }\n \n   private void applyInvertedAddMask(Canvas canvas, Matrix matrix, Mask mask,\n       BaseKeyframeAnimation<ShapeData, Path> maskAnimation, BaseKeyframeAnimation<Integer, Integer> opacityAnimation) {\n-    saveLayerCompat(canvas, rect, addInvMaskLayerPaint, true);\n-    canvas.drawRect(rect, addInvMaskLayerPaint);\n+    saveLayerCompat(canvas, rect, contentPaint, true);\n+    canvas.drawRect(rect, contentPaint);\n     Path maskPath = maskAnimation.getValue();\n     path.set(maskPath);\n     path.transform(matrix);\n-    addMaskPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n-    canvas.drawPath(path, addInvMaskPaintClear);\n+    contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n+    canvas.drawPath(path, dstOutPaint);\n     canvas.restore();\n   }\n \n@@ -434,18 +431,18 @@ private void applySubtractMask(Canvas canvas, Matrix matrix, Mask mask,\n     Path maskPath = maskAnimation.getValue();\n     path.set(maskPath);\n     path.transform(matrix);\n-    canvas.drawPath(path, subtractMaskPaintDstOut);\n+    canvas.drawPath(path, dstOutPaint);\n   }\n \n   private void applyInvertedSubtractMask(Canvas canvas, Matrix matrix, Mask mask,\n       BaseKeyframeAnimation<ShapeData, Path> maskAnimation, BaseKeyframeAnimation<Integer, Integer> opacityAnimation) {\n-    saveLayerCompat(canvas, rect, subtractMaskPaintDstOut, true);\n-    canvas.drawRect(rect, subtractMaskStartingPaintNormal);\n-    subtractMaskPaintDstOut.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n+    saveLayerCompat(canvas, rect, dstOutPaint, true);\n+    canvas.drawRect(rect, contentPaint);\n+    dstOutPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n     Path maskPath = maskAnimation.getValue();\n     path.set(maskPath);\n     path.transform(matrix);\n-    canvas.drawPath(path, subtractMaskPaintDstOut);\n+    canvas.drawPath(path, dstOutPaint);\n     canvas.restore();\n   }\n \n@@ -460,6 +457,18 @@ private void applyIntersectMask(Canvas canvas, Matrix matrix, Mask mask,\n     canvas.restore();\n   }\n \n+  private void applyInvertedIntersectMask(Canvas canvas, Matrix matrix, Mask mask,\n+      BaseKeyframeAnimation<ShapeData, Path> maskAnimation, BaseKeyframeAnimation<Integer, Integer> opacityAnimation) {\n+    saveLayerCompat(canvas, rect, dstInPaint, true);\n+    canvas.drawRect(rect, contentPaint);\n+    dstOutPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n+    Path maskPath = maskAnimation.getValue();\n+    path.set(maskPath);\n+    path.transform(matrix);\n+    canvas.drawPath(path, dstOutPaint);\n+    canvas.restore();\n+  }\n+\n   boolean hasMasksOnThisLayer() {\n     return mask != null && !mask.getMaskAnimations().isEmpty();\n   }",
    "output": "Added support for inverted intersect masks (#1137)\n\nAlso cleaned up some stuff from the original masks PR."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -450,7 +450,7 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n-    animator.setMaxFrame(maxFrame);\n+    animator.setMaxFrame(maxFrame + 0.99f);\n   }\n \n   /**\n@@ -555,7 +555,8 @@ public void run(LottieComposition composition) {\n       });\n       return;\n     }\n-    animator.setMinAndMaxFrames(minFrame, maxFrame);\n+    // Adding 0.99 ensures that the maxFrame itself gets played.\n+    animator.setMinAndMaxFrames(minFrame, maxFrame + 0.99f);\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -159,11 +159,11 @@ public void setMinFrame(int minFrame) {\n     setMinAndMaxFrames(minFrame, (int) maxFrame);\n   }\n \n-  public void setMaxFrame(int maxFrame) {\n-    setMinAndMaxFrames((int) minFrame, maxFrame);\n+  public void setMaxFrame(float maxFrame) {\n+    setMinAndMaxFrames(minFrame, maxFrame);\n   }\n \n-  public void setMinAndMaxFrames(int minFrame, int maxFrame) {\n+  public void setMinAndMaxFrames(float minFrame, float maxFrame) {\n     if (minFrame > maxFrame) {\n       throw new IllegalArgumentException(String.format(\"minFrame (%s) must be <= maxFrame (%s)\", minFrame, maxFrame));\n     }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -51,7 +51,7 @@ public void testMaxFrame() {\n     LottieDrawable drawable = new LottieDrawable();\n     drawable.setComposition(composition);\n     drawable.setMaxProgress(0.25f);\n-    assertEquals(121f, drawable.getMaxFrame());\n+    assertEquals(121.99f, drawable.getMaxFrame());\n   }\n \n   @Test\n@@ -61,6 +61,6 @@ public void testMinMaxFrame() {\n     drawable.setComposition(composition);\n     drawable.setMinAndMaxProgress(0.25f, 0.42f);\n     assertEquals(121f, drawable.getMinFrame());\n-    assertEquals(182f, drawable.getMaxFrame());\n+    assertEquals(182.99f, drawable.getMaxFrame());\n   }\n }",
    "output": "Prevent setMaxFrame from truncating the last frame. (#1126)\n\nLottie should render the max frame. However, setting the max frame truncated it to an int so the frame itself would never render.\r\nI can confirm that this fixes #1034. Calling `getProgress()` from `onAninmationEnd()` yielded 0.996 before and 1.0 now. The animation attached in #1034 also fully disappears by the end of the animation."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -232,14 +232,14 @@ private void init(@Nullable AttributeSet attrs) {\n \n   @Override\n   protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n-    if (visibility == VISIBLE && wasAnimatingWhenVisibilityChanged) {\n-      resumeAnimation();\n+    if (visibility == VISIBLE) {\n+      if (wasAnimatingWhenVisibilityChanged) {\n+        resumeAnimation();\n+      }\n     } else {\n+      wasAnimatingWhenVisibilityChanged = isAnimating();\n       if (isAnimating()) {\n-        wasAnimatingWhenVisibilityChanged = true;\n         pauseAnimation();\n-      } else {\n-        wasAnimatingWhenVisibilityChanged = false;\n       }\n     }\n   }",
    "output": "Fix not animating the first time (#1125)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n@@ -11,17 +11,23 @@\n public class PathKeyframe extends Keyframe<PointF> {\n   @Nullable private Path path;\n \n+  private final Keyframe<PointF> pointKeyFrame;\n+\n   public PathKeyframe(LottieComposition composition, Keyframe<PointF> keyframe) {\n     super(composition, keyframe.startValue, keyframe.endValue, keyframe.interpolator,\n         keyframe.startFrame, keyframe.endFrame);\n+    this.pointKeyFrame = keyframe;\n+    createPath();\n+  }\n \n+  public void createPath() {\n     // This must use equals(float, float) because PointF didn't have an equals(PathF) method\n     // until KitKat...\n     boolean equals = endValue != null && startValue != null &&\n         startValue.equals(endValue.x, endValue.y);\n     //noinspection ConstantConditions\n     if (endValue != null && !equals) {\n-      path = Utils.createPath(startValue, endValue, keyframe.pathCp1, keyframe.pathCp2);\n+      path = Utils.createPath(startValue, endValue, pointKeyFrame.pathCp1, pointKeyFrame.pathCp2);\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java\n@@ -74,6 +74,8 @@ public static AnimatableTransform parse(\n           rotation = AnimatableValueParser.parseFloat(reader, composition, false);\n           if (rotation.getKeyframes().isEmpty()) {\n             rotation.getKeyframes().add(new Keyframe(composition, 0f, 0f, null, 0f, composition.getEndFrame()));\n+          } else if (rotation.getKeyframes().get(0).startValue == null) {\n+            rotation.getKeyframes().set(0, new Keyframe(composition, 0f, 0f, null, 0f, composition.getEndFrame()));\n           }\n           break;\n         case \"o\":\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframesParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframesParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/KeyframesParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframesParser.java\n@@ -4,6 +4,7 @@\n import android.util.JsonToken;\n \n import com.airbnb.lottie.LottieComposition;\n+import com.airbnb.lottie.animation.keyframe.PathKeyframe;\n import com.airbnb.lottie.value.Keyframe;\n \n import java.io.IOException;\n@@ -33,8 +34,7 @@ static <T> List<Keyframe<T>> parse(JsonReader reader,\n \n             if (reader.peek() == JsonToken.NUMBER) {\n               // For properties in which the static value is an array of numbers.\n-              keyframes.add(\n-                  KeyframeParser.parse(reader, composition, scale, valueParser, false));\n+              keyframes.add(KeyframeParser.parse(reader, composition, scale, valueParser, false));\n             } else {\n               while (reader.hasNext()) {\n                 keyframes.add(KeyframeParser.parse(reader, composition, scale, valueParser, true));\n@@ -59,14 +59,22 @@ static <T> List<Keyframe<T>> parse(JsonReader reader,\n    * The json doesn't include end frames. The data can be taken from the start frame of the next\n    * keyframe though.\n    */\n-  public static void setEndFrames(List<? extends Keyframe<?>> keyframes) {\n+  public static <T> void setEndFrames(List<? extends Keyframe<T>> keyframes) {\n     int size = keyframes.size();\n     for (int i = 0; i < size - 1; i++) {\n       // In the json, the keyframes only contain their starting frame.\n-      keyframes.get(i).endFrame = keyframes.get(i + 1).startFrame;\n+      Keyframe<T> keyframe = keyframes.get(i);\n+      Keyframe<T> nextKeyframe = keyframes.get(i + 1);\n+      keyframe.endFrame = nextKeyframe.startFrame;\n+      if (keyframe.endValue == null && nextKeyframe.startValue != null) {\n+        keyframe.endValue = nextKeyframe.startValue;\n+        if (keyframe instanceof PathKeyframe) {\n+          ((PathKeyframe) keyframe).createPath();\n+        }\n+      }\n     }\n     Keyframe<?> lastKeyframe = keyframes.get(size - 1);\n-    if (lastKeyframe.startValue == null) {\n+    if ((lastKeyframe.startValue == null || lastKeyframe.endValue == null) && keyframes.size() > 1) {\n       // The only purpose the last keyframe has is to provide the end frame of the previous\n       // keyframe.\n       //noinspection SuspiciousMethodCalls\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java\n@@ -13,7 +13,7 @@ public class Keyframe<T> {\n \n   @Nullable private final LottieComposition composition;\n   @Nullable public final T startValue;\n-  @Nullable public final T endValue;\n+  @Nullable public T endValue;\n   @Nullable public final Interpolator interpolator;\n   public final float startFrame;\n   @Nullable public Float endFrame;",
    "output": "Support animations without end values in each keyframe (#1104)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -34,13 +34,10 @@ public class LottieTask<T> {\n   @SuppressWarnings(\"WeakerAccess\")\n   public static Executor EXECUTOR = Executors.newCachedThreadPool();\n \n-  @Nullable private Thread taskObserver;\n-\n   /* Preserve add order. */\n   private final Set<LottieListener<T>> successListeners = new LinkedHashSet<>(1);\n   private final Set<LottieListener<Throwable>> failureListeners = new LinkedHashSet<>(1);\n   private final Handler handler = new Handler(Looper.getMainLooper());\n-  private final FutureTask<LottieResult<T>> task;\n \n   @Nullable private volatile LottieResult<T> result = null;\n \n@@ -54,17 +51,14 @@ public LottieTask(Callable<LottieResult<T>> runnable) {\n    */\n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   LottieTask(Callable<LottieResult<T>> runnable, boolean runNow) {\n-    task = new FutureTask<>(runnable);\n-\n     if (runNow) {\n       try {\n         setResult(runnable.call());\n       } catch (Throwable e) {\n         setResult(new LottieResult<T>(e));\n       }\n     } else {\n-      EXECUTOR.execute(task);\n-      startTaskObserverIfNeeded();\n+      EXECUTOR.execute(new LottieFutureTask(runnable));\n     }\n   }\n \n@@ -86,7 +80,6 @@ public synchronized LottieTask<T> addListener(LottieListener<T> listener) {\n     }\n \n     successListeners.add(listener);\n-    startTaskObserverIfNeeded();\n     return this;\n   }\n \n@@ -97,7 +90,6 @@ public synchronized LottieTask<T> addListener(LottieListener<T> listener) {\n    */\n   public synchronized LottieTask<T> removeListener(LottieListener<T> listener) {\n     successListeners.remove(listener);\n-    stopTaskObserverIfNeeded();\n     return this;\n   }\n \n@@ -112,7 +104,6 @@ public synchronized LottieTask<T> addFailureListener(LottieListener<Throwable> l\n     }\n \n     failureListeners.add(listener);\n-    startTaskObserverIfNeeded();\n     return this;\n   }\n \n@@ -123,15 +114,14 @@ public synchronized LottieTask<T> addFailureListener(LottieListener<Throwable> l\n    */\n   public synchronized LottieTask<T> removeFailureListener(LottieListener<Throwable> listener) {\n     failureListeners.remove(listener);\n-    stopTaskObserverIfNeeded();\n     return this;\n   }\n \n   private void notifyListeners() {\n     // Listeners should be called on the main thread.\n     handler.post(new Runnable() {\n       @Override public void run() {\n-        if (result == null || task.isCancelled()) {\n+        if (result == null) {\n           return;\n         }\n         // Local reference in case it gets set on a background thread.\n@@ -154,7 +144,7 @@ private synchronized void notifySuccessListeners(T value) {\n     }\n   }\n \n-  private void notifyFailureListeners(Throwable e) {\n+  private synchronized void notifyFailureListeners(Throwable e) {\n     // Allows listeners to remove themselves in onResult.\n     // Otherwise we risk ConcurrentModificationException.\n     List<LottieListener<Throwable>> listenersCopy = new ArrayList<>(failureListeners);\n@@ -168,51 +158,23 @@ private void notifyFailureListeners(Throwable e) {\n     }\n   }\n \n-  /**\n-   * We monitor the task with an observer thread to determine when it is done and should notify\n-   * the appropriate listeners.\n-   */\n-  private synchronized void startTaskObserverIfNeeded() {\n-    if (taskObserverAlive() || result != null) {\n-      return;\n+  private class LottieFutureTask extends FutureTask<LottieResult<T>> {\n+    LottieFutureTask(Callable<LottieResult<T>> callable) {\n+      super(callable);\n     }\n-    taskObserver = new Thread(\"LottieTaskObserver\") {\n-      private boolean taskComplete = false;\n \n-      @Override public void run() {\n-        while (true) {\n-          if (isInterrupted() || taskComplete) {\n-            return;\n-          }\n-          if (task.isDone()) {\n-            try {\n-              setResult(task.get());\n-            } catch (InterruptedException | ExecutionException e) {\n-              setResult(new LottieResult<T>(e));\n-            }\n-            taskComplete = true;\n-            stopTaskObserverIfNeeded();\n-          }\n-        }\n+    @Override\n+    protected void done() {\n+      if (isCancelled()) {\n+        // We don't need to notify and listeners if the task is cancelled.\n+        return;\n       }\n-    };\n-    taskObserver.start();\n-  }\n \n-  /**\n-   * We can stop observing the task if there are no more listeners or if the task is complete.\n-   */\n-  private synchronized void stopTaskObserverIfNeeded() {\n-    if (!taskObserverAlive()) {\n-      return;\n-    }\n-    if (successListeners.isEmpty() || result != null) {\n-      taskObserver.interrupt();\n-      taskObserver = null;\n+      try {\n+        setResult(get());\n+      } catch (InterruptedException | ExecutionException e) {\n+        setResult(new LottieResult<T>(e));\n+      }\n     }\n   }\n-\n-  private boolean taskObserverAlive() {\n-    return taskObserver != null && taskObserver.isAlive();\n-  }\n }",
    "output": "Replace task observer thread with FutureTask subclass (#1083)\n\nI noticed that the observer thread approach that was being used to check when LottieTasks are done has indeterminate delay for reporting finished tasks, since the thread polls the task. It also adds overhead to create a thread for each task.\r\n\r\nDigging into it, it looks like we can simply use FutureTask's `done` function to know when the task is done.\r\n\r\nWith this change the sample app seems to run perfectly, so functionality seems to be the same."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/CompoundTrimPathContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/CompoundTrimPathContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/CompoundTrimPathContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/CompoundTrimPathContent.java\n@@ -0,0 +1,22 @@\n+package com.airbnb.lottie.animation.content;\n+\n+import android.graphics.Path;\n+\n+import com.airbnb.lottie.utils.Utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CompoundTrimPathContent {\n+    private List<TrimPathContent> contents = new ArrayList<>();\n+\n+    void addTrimPath(TrimPathContent trimPath) {\n+        contents.add(trimPath);\n+    }\n+\n+    public void apply(Path path) {\n+        for (int i = contents.size() - 1; i >= 0; i--) {\n+            Utils.applyTrimPathIfNeeded(path, contents.get(i));\n+        }\n+    }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.Path;\n import android.graphics.PointF;\n+\n import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.LottieDrawable;\n@@ -12,7 +13,6 @@\n import com.airbnb.lottie.model.content.ShapeTrimPath;\n import com.airbnb.lottie.model.layer.BaseLayer;\n import com.airbnb.lottie.utils.MiscUtils;\n-import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n import java.util.List;\n@@ -29,7 +29,7 @@ public class EllipseContent\n   private final BaseKeyframeAnimation<?, PointF> positionAnimation;\n   private final CircleShape circleShape;\n \n-  @Nullable private TrimPathContent trimPath;\n+  private CompoundTrimPathContent trimPaths = new CompoundTrimPathContent();\n   private boolean isPathValid;\n \n   public EllipseContent(LottieDrawable lottieDrawable, BaseLayer layer, CircleShape circleShape) {\n@@ -58,9 +58,9 @@ private void invalidate() {\n   @Override public void setContents(List<Content> contentsBefore, List<Content> contentsAfter) {\n     for (int i = 0; i < contentsBefore.size(); i++) {\n       Content content = contentsBefore.get(i);\n-      if (content instanceof TrimPathContent &&\n-          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {\n-        trimPath = (TrimPathContent) content;\n+      if (content instanceof TrimPathContent && ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {\n+        TrimPathContent trimPath = (TrimPathContent) content;\n+        trimPaths.addTrimPath(trimPath);\n         trimPath.addListener(this);\n       }\n     }\n@@ -110,7 +110,7 @@ private void invalidate() {\n \n     path.close();\n \n-    Utils.applyTrimPathIfNeeded(path, trimPath);\n+    trimPaths.apply(path);\n \n     isPathValid = true;\n     return path;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n@@ -41,7 +41,7 @@ public class PolystarContent\n   @Nullable private final BaseKeyframeAnimation<?, Float> innerRoundednessAnimation;\n   private final BaseKeyframeAnimation<?, Float> outerRoundednessAnimation;\n \n-  @Nullable private TrimPathContent trimPath;\n+  private CompoundTrimPathContent trimPaths = new CompoundTrimPathContent();\n   private boolean isPathValid;\n \n   public PolystarContent(LottieDrawable lottieDrawable, BaseLayer layer,\n@@ -99,7 +99,8 @@ private void invalidate() {\n       Content content = contentsBefore.get(i);\n       if (content instanceof TrimPathContent &&\n           ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {\n-        trimPath = (TrimPathContent) content;\n+        TrimPathContent trimPath = (TrimPathContent) content;\n+        trimPaths.addTrimPath(trimPath);\n         trimPath.addListener(this);\n       }\n     }\n@@ -128,7 +129,7 @@ private void invalidate() {\n \n     path.close();\n \n-    Utils.applyTrimPathIfNeeded(path, trimPath);\n+    trimPaths.apply(path);\n \n     isPathValid = true;\n     return path;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java\n@@ -30,7 +30,7 @@ public class RectangleContent\n   private final BaseKeyframeAnimation<?, PointF> sizeAnimation;\n   private final BaseKeyframeAnimation<?, Float> cornerRadiusAnimation;\n \n-  @Nullable private TrimPathContent trimPath;\n+  private CompoundTrimPathContent trimPaths = new CompoundTrimPathContent();\n   private boolean isPathValid;\n \n   public RectangleContent(LottieDrawable lottieDrawable, BaseLayer layer, RectangleShape rectShape) {\n@@ -68,7 +68,8 @@ private void invalidate() {\n       Content content = contentsBefore.get(i);\n       if (content instanceof TrimPathContent &&\n           ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {\n-        trimPath = (TrimPathContent) content;\n+        TrimPathContent trimPath = (TrimPathContent) content;\n+        trimPaths.addTrimPath(trimPath);\n         trimPath.addListener(this);\n       }\n     }\n@@ -142,7 +143,7 @@ private void invalidate() {\n     }\n     path.close();\n \n-    Utils.applyTrimPathIfNeeded(path, trimPath);\n+    trimPaths.apply(path);\n \n     isPathValid = true;\n     return path;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java\n@@ -1,7 +1,6 @@\n package com.airbnb.lottie.animation.content;\n \n import android.graphics.Path;\n-import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.LottieDrawable;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n@@ -21,7 +20,7 @@ public class ShapeContent implements PathContent, BaseKeyframeAnimation.Animatio\n   private final BaseKeyframeAnimation<?, Path> shapeAnimation;\n \n   private boolean isPathValid;\n-  @Nullable private TrimPathContent trimPath;\n+  private CompoundTrimPathContent trimPaths = new CompoundTrimPathContent();\n \n   public ShapeContent(LottieDrawable lottieDrawable, BaseLayer layer, ShapePath shape) {\n     name = shape.getName();\n@@ -47,7 +46,8 @@ private void invalidate() {\n       if (content instanceof TrimPathContent &&\n           ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {\n         // Trim path individually will be handled by the stroke where paths are combined.\n-        trimPath = (TrimPathContent) content;\n+        TrimPathContent trimPath = (TrimPathContent) content;\n+        trimPaths.addTrimPath(trimPath);\n         trimPath.addListener(this);\n       }\n     }\n@@ -68,7 +68,7 @@ private void invalidate() {\n     path.set(shapeAnimation.getValue());\n     path.setFillType(Path.FillType.EVEN_ODD);\n \n-    Utils.applyTrimPathIfNeeded(path, trimPath);\n+    trimPaths.apply(path);\n \n     isPathValid = true;\n     return path;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -2,7 +2,6 @@\n \n import android.content.res.Resources;\n import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n import android.graphics.Canvas;\n import android.graphics.Color;\n import android.graphics.Matrix;\n@@ -31,13 +30,14 @@ public final class Utils {\n   private static final float SQRT_2 = (float) Math.sqrt(2);\n   private static float dpScale = -1;\n \n-  private Utils() {}\n+  private Utils() {\n+  }\n \n   public static Path createPath(PointF startPoint, PointF endPoint, PointF cp1, PointF cp2) {\n     Path path = new Path();\n     path.moveTo(startPoint.x, startPoint.y);\n \n-    if (cp1 != null  && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) {\n+    if (cp1 != null && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) {\n       path.cubicTo(\n           startPoint.x + cp1.x, startPoint.y + cp1.y,\n           endPoint.x + cp2.x, endPoint.y + cp2.y,",
    "output": "Allow multiple trim paths to operate on the same content (#1103)\n\nWithout this, multiple trim paths would overwrite each other. In the case of #1087, there was a trim path inside the content group and outside of it. However, the outside one had the desired visual effect but was overwritten by the one inside the group which had no effect.\r\nFixes #1087"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -305,7 +305,6 @@ public void draw(@NonNull Canvas canvas) {\n     }\n \n     int saveCount = -1;\n-    // The .001 accounts for floating point errors.\n     if (extraScale > 1) {\n       // This is a bit tricky...\n       // We can't draw on a canvas larger than ViewConfiguration.get(context).getScaledMaximumDrawingCacheSize()",
    "output": "Optimized test coroutines (#1110)\n\nDownloading, parsing, and snapshotting now all happen on individual coroutines on with the correct dispatchers which allows things to happen in parallel. This should also prevent the wrong bitmap from getting snapshotted which happened before."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -8,7 +8,6 @@\n import android.graphics.RectF;\n import android.graphics.Typeface;\n import androidx.annotation.Nullable;\n-\n import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.LottieDrawable;\n import com.airbnb.lottie.LottieProperty;\n@@ -24,7 +23,6 @@\n import com.airbnb.lottie.model.content.ShapeGroup;\n import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieValueCallback;\n-\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -165,7 +163,6 @@ private void drawTextGlyphs(\n \n   private void drawTextWithFont(\n       DocumentData documentData, Font font, Matrix parentMatrix, Canvas canvas) {\n-    float fontScale = (float) documentData.size / 100f;\n     float parentScale = Utils.getScale(parentMatrix);\n     Typeface typeface = lottieDrawable.getTypeface(font.getFamily(), font.getStyle());\n     if (typeface == null) {\n@@ -181,7 +178,7 @@ private void drawTextWithFont(\n     strokePaint.setTypeface(fillPaint.getTypeface());\n     strokePaint.setTextSize(fillPaint.getTextSize());\n \n-    float totalTextWidth = fillPaint.measureText(text) * fontScale * Utils.dpScale() * parentScale;\n+    float totalTextWidth = strokePaint.measureText(text);\n     applyJustification(documentData.justification, canvas, totalTextWidth);\n \n     for (int i = 0; i < text.length(); i++) {",
    "output": "Fix adjustment scale for text alignment when drawing text with fonts (#1115)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -238,12 +238,21 @@ public static LottieTask<LottieComposition> fromJsonReader(final JsonReader read\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonReaderSync(JsonReader reader, @Nullable String cacheKey) {\n+    return fromJsonReaderSyncInternal(reader, cacheKey, true);\n+  }\n+\n+  private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n+          JsonReader reader, @Nullable String cacheKey, boolean close) {\n     try {\n       LottieComposition composition = LottieCompositionParser.parse(reader);\n       LottieCompositionCache.getInstance().put(cacheKey, composition);\n       return new LottieResult<>(composition);\n     } catch (Exception e) {\n       return new LottieResult<>(e);\n+    } finally {\n+      if (close) {\n+        closeQuietly(reader);\n+      }\n     }\n   }\n \n@@ -280,7 +289,8 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n         if (entry.getName().contains(\"__MACOSX\")) {\n           inputStream.closeEntry();\n         } else if (entry.getName().contains(\".json\")) {\n-          composition = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey, false).getValue();\n+          JsonReader reader = new JsonReader(new InputStreamReader(inputStream));\n+          composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();\n         } else if (entry.getName().contains(\".png\")) {\n           String[] splitName = entry.getName().split(\"/\");\n           String name = splitName[splitName.length - 1];",
    "output": "Close JsonReader after parsing (#1101)\n\nOther streams are closed so this makes it consistent with that.\r\n\r\nFixes #1068"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -21,6 +21,7 @@\n import android.util.AttributeSet;\n import android.util.JsonReader;\n import android.util.Log;\n+import android.view.View;\n \n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.value.LottieFrameInfo;\n@@ -71,6 +72,7 @@\n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private String animationName;\n   private @RawRes int animationResId;\n+  private boolean wasAnimatingWhenVisibilityChanged = false;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n   private RenderMode renderMode = RenderMode.Automatic;\n@@ -228,6 +230,20 @@ private void init(@Nullable AttributeSet attrs) {\n     setRepeatCount(ss.repeatCount);\n   }\n \n+  @Override\n+  protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n+    if (visibility == VISIBLE && wasAnimatingWhenVisibilityChanged) {\n+      resumeAnimation();\n+    } else {\n+      if (isAnimating()) {\n+        wasAnimatingWhenVisibilityChanged = true;\n+        pauseAnimation();\n+      } else {\n+        wasAnimatingWhenVisibilityChanged = false;\n+      }\n+    }\n+  }\n+\n   @Override protected void onAttachedToWindow() {\n     super.onAttachedToWindow();\n     if (autoPlay && wasAnimatingWhenDetached) {",
    "output": "Pause Lottie when visibility changes (#1098)\n\nonAttachedToWindow and onDetachedFromWindow aren't sufficient for LottieAnimationView to properly pause and resume. We must do the same from onVisibilityChanged as well or we risk Lottie animating when the app is in the background.\r\n\r\nFixes #987\r\nThanks @florianPOLARSTEPS"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -327,7 +327,7 @@ private static LottieImageAsset findImageAssetForFileName(LottieComposition comp\n    */\n   private static LottieTask<LottieComposition> cache(\n           @Nullable final String cacheKey, Callable<LottieResult<LottieComposition>> callable) {\n-    final LottieComposition cachedComposition = LottieCompositionCache.getInstance().get(cacheKey);\n+    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);\n     if (cachedComposition != null) {\n       return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {\n         @Override\n@@ -336,7 +336,7 @@ public LottieResult<LottieComposition> call() {\n         }\n       });\n     }\n-    if (taskCache.containsKey(cacheKey)) {\n+    if (cacheKey != null && taskCache.containsKey(cacheKey)) {\n       return taskCache.get(cacheKey);\n     }\n \n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java\n@@ -16,6 +16,7 @@\n import java.io.StringReader;\n \n import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n import static junit.framework.Assert.assertNotNull;\n import static junit.framework.Assert.assertNull;\n \n@@ -80,4 +81,20 @@ public void testLoadInvalidRawResName() {\n     assertNotNull(result.getException());\n     assertNull(result.getValue());\n   }\n+\n+  @Test\n+  public void testNullMultipleTimesAsync() {\n+    JsonReader reader = new JsonReader(new StringReader(JSON));\n+    LottieTask<LottieComposition> task1 = LottieCompositionFactory.fromJsonReader(reader, null);\n+    LottieTask<LottieComposition> task2 = LottieCompositionFactory.fromJsonReader(reader, null);\n+    assertFalse(task1 == task2);\n+  }\n+\n+  @Test\n+  public void testNullMultipleTimesSync() {\n+    JsonReader reader = new JsonReader(new StringReader(JSON));\n+    LottieResult<LottieComposition> task1 = LottieCompositionFactory.fromJsonReaderSync(reader, null);\n+    LottieResult<LottieComposition> task2 = LottieCompositionFactory.fromJsonReaderSync(reader, null);\n+    assertFalse(task1 == task2);\n+  }\n }",
    "output": "Prevent returning cache values when null cache key is set (#1097)\n\nPreviously, setting a null cache key could return a cached task or result. This explicitly prevents that from happening. The new tests failed before and pass now.\r\nFixes #1092"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -51,6 +51,9 @@ public void addUpdateListener(AnimationListener listener) {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    if (keyframes.isEmpty()) {\n+      return;\n+    }\n     // Must use hashCode() since the actual object instance will be returned\n     // from getValue() below with the new values.\n     Keyframe<K> previousKeyframe = getCurrentKeyframe();",
    "output": "Prevent an OOBE (#1084)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -73,6 +73,7 @@\n   private @RawRes int animationResId;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n+  private RenderMode renderMode = RenderMode.Automatic;\n   private Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n \n   @Nullable private LottieTask<LottieComposition> compositionTask;\n@@ -744,12 +745,44 @@ private void clearComposition() {\n     lottieDrawable.clearComposition();\n   }\n \n+  /**\n+   * Call this to set whether or not to render with hardware or software acceleration.\n+   * Lottie defaults to Automatic which will use hardware acceleration unless:\n+   * 1) There are dash paths and the device is pre-Pie.\n+   * 2) There are more than 4 masks and mattes and the device is pre-Pie.\n+   *    Hardware acceleration is generally faster for those devices unless\n+   *    there are many large mattes and masks in which case there is a ton\n+   *    of GPU uploadTexture thrashing which makes it much slower.\n+   *\n+   * In most cases, hardware rendering will be faster, even if you have mattes and masks.\n+   * However, if you have multiple mattes and masks (especially large ones) then you\n+   * should test both render modes. You should also test on pre-Pie and Pie+ devices\n+   * because the underlying rendering enginge changed significantly.\n+   */\n+  public void setRenderMode(RenderMode renderMode) {\n+    this.renderMode = renderMode;\n+    enableOrDisableHardwareLayer();\n+  }\n+\n   private void enableOrDisableHardwareLayer() {\n-    boolean useHardwareLayer = true;\n-    if (composition != null && composition.hasDashPattern() && Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n-      useHardwareLayer = false;\n+    switch (renderMode) {\n+      case Hardware:\n+        setLayerType(LAYER_TYPE_HARDWARE, null);\n+        break;\n+      case Software:\n+        setLayerType(LAYER_TYPE_SOFTWARE, null);\n+        break;\n+      case Automatic:\n+        boolean useHardwareLayer = true;\n+        if (composition != null && composition.hasDashPattern() && Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n+          useHardwareLayer = false;\n+        } else if (composition != null && composition.getMaskAndMatteCount() > 4) {\n+          useHardwareLayer = false;\n+        }\n+        setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n+        break;\n     }\n-    setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n+\n   }\n \n   public boolean addLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -55,6 +55,12 @@ public class LottieComposition {\n    * Used to determine if an animation can be drawn with hardware acceleration.\n    */\n   private boolean hasDashPattern;\n+  /**\n+   * Counts the number of mattes and masks. Before Android switched to SKIA\n+   * for drawing in Oreo (API 28), using hardware acceleration with mattes and masks\n+   * was only faster until you had ~4 masks after which it would actually become slower.\n+   */\n+  private int maskAndMatteCount = 0;\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n@@ -84,13 +90,27 @@ public void setHasDashPattern(boolean hasDashPattern) {\n     this.hasDashPattern = hasDashPattern;\n   }\n \n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  public void incrementMatteOrMaskCount(int amount) {\n+    maskAndMatteCount += amount;\n+  }\n+\n   /**\n    * Used to determine if an animation can be drawn with hardware acceleration.\n    */\n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public boolean hasDashPattern() {\n     return hasDashPattern;\n   }\n \n+  /**\n+   * Used to determine if an animation can be drawn with hardware acceleration.\n+   */\n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  public int getMaskAndMatteCount() {\n+    return maskAndMatteCount;\n+  }\n+\n   public ArrayList<String> getWarnings() {\n     return new ArrayList<>(Arrays.asList(warnings.toArray(new String[warnings.size()])));\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/RenderMode.java b/lottie/src/main/java/com/airbnb/lottie/RenderMode.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RenderMode.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RenderMode.java\n@@ -0,0 +1,13 @@\n+package com.airbnb.lottie;\n+\n+/**\n+ * Controls how Lottie should render.\n+ * Defaults to {@link RenderMode#Automatic}.\n+ *\n+ * @see LottieAnimationView#setRenderMode(RenderMode) for more information.\n+ */\n+public enum RenderMode {\n+    Automatic,\n+    Hardware,\n+    Software\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -100,12 +100,14 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro\n           break;\n         case \"tt\":\n           matteType = Layer.MatteType.values()[reader.nextInt()];\n+          composition.incrementMatteOrMaskCount(1);\n           break;\n         case \"masksProperties\":\n           reader.beginArray();\n           while (reader.hasNext()) {\n             masks.add(MaskParser.parse(reader, composition));\n           }\n+          composition.incrementMatteOrMaskCount(masks.size());\n           reader.endArray();\n           break;\n         case \"shapes\":",
    "output": "New RenderMode API (#1072)\n\nWhile testing, I discovered that animations with lots of/large masks and mattes perform significantly worse with hardware acceleration than software acceleration on pre-Pie devices because of RenderNode#textureUpload. It is really hard to detect this dynamically so I'm leaving the default on automatic (with an additional heuristic for >4 mattes and masks) but having an option to set it to hardware/software manually.\r\n\r\n#381"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -1,17 +1,23 @@\n package com.airbnb.lottie.model;\n \n+import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n+\n import androidx.annotation.ColorInt;\n import androidx.annotation.RestrictTo;\n \n-import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n-\n @RestrictTo(LIBRARY)\n public class DocumentData {\n \n+  public enum Justification {\n+    LeftAlign,\n+    RightAlign,\n+    Center\n+  }\n+\n   public final String text;\n   @SuppressWarnings(\"WeakerAccess\") public final String fontName;\n   public final double size;\n-  @SuppressWarnings(\"WeakerAccess\") final int justification;\n+  @SuppressWarnings(\"WeakerAccess\") public final Justification justification;\n   public final int tracking;\n   @SuppressWarnings(\"WeakerAccess\") final double lineHeight;\n   public final double baselineShift;\n@@ -21,7 +27,7 @@ public class DocumentData {\n   public final boolean strokeOverFill;\n \n \n-  public DocumentData(String text, String fontName, double size, int justification, int tracking,\n+  public DocumentData(String text, String fontName, double size, Justification justification, int tracking,\n       double lineHeight, double baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n       double strokeWidth, boolean strokeOverFill) {\n     this.text = text;\n@@ -43,7 +49,7 @@ public DocumentData(String text, String fontName, double size, int justification\n     result = text.hashCode();\n     result = 31 * result + fontName.hashCode();\n     result = (int) (31 * result + size);\n-    result = 31 * result + justification;\n+    result = 31 * result + justification.ordinal();\n     result = 31 * result + tracking;\n     temp = Double.doubleToLongBits(lineHeight);\n     result = 31 * result + (int) (temp ^ (temp >>> 32));\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -17,6 +17,7 @@\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n import com.airbnb.lottie.animation.keyframe.TextKeyframeAnimation;\n import com.airbnb.lottie.model.DocumentData;\n+import com.airbnb.lottie.model.DocumentData.Justification;\n import com.airbnb.lottie.model.Font;\n import com.airbnb.lottie.model.FontCharacter;\n import com.airbnb.lottie.model.animatable.AnimatableTextProperties;\n@@ -64,7 +65,6 @@ public class TextLayer extends BaseLayer {\n       addAnimation(colorAnimation);\n     }\n \n-\n     if (textProperties != null && textProperties.stroke != null) {\n       strokeColorAnimation = textProperties.stroke.createAnimation();\n       strokeColorAnimation.addUpdateListener(this);\n@@ -138,9 +138,11 @@ private void drawTextGlyphs(\n       DocumentData documentData, Matrix parentMatrix, Font font, Canvas canvas) {\n     float fontScale = (float) documentData.size / 100f;\n     float parentScale = Utils.getScale(parentMatrix);\n-    String text = documentData.text;\n \n+    float totalTextWidth = getTotalTextWidthForGlyphs(documentData, font, fontScale, parentScale);\n+    applyJustification(documentData.justification, canvas, totalTextWidth);\n \n+    String text = documentData.text;\n     for (int i = 0; i < text.length(); i++) {\n       char c = text.charAt(i);\n       int characterHash = FontCharacter.hashFor(c, font.getFamily(), font.getStyle());\n@@ -163,6 +165,7 @@ private void drawTextGlyphs(\n \n   private void drawTextWithFont(\n       DocumentData documentData, Font font, Matrix parentMatrix, Canvas canvas) {\n+    float fontScale = (float) documentData.size / 100f;\n     float parentScale = Utils.getScale(parentMatrix);\n     Typeface typeface = lottieDrawable.getTypeface(font.getFamily(), font.getStyle());\n     if (typeface == null) {\n@@ -177,6 +180,10 @@ private void drawTextWithFont(\n     fillPaint.setTextSize((float) (documentData.size * Utils.dpScale()));\n     strokePaint.setTypeface(fillPaint.getTypeface());\n     strokePaint.setTextSize(fillPaint.getTextSize());\n+\n+    float totalTextWidth = fillPaint.measureText(text) * fontScale * Utils.dpScale() * parentScale;\n+    applyJustification(documentData.justification, canvas, totalTextWidth);\n+\n     for (int i = 0; i < text.length(); i++) {\n       char character = text.charAt(i);\n       drawCharacterFromFont(character, documentData, canvas);\n@@ -192,6 +199,35 @@ private void drawTextWithFont(\n     }\n   }\n \n+  private float getTotalTextWidthForGlyphs(\n+      DocumentData documentData, Font font, float fontScale, float parentScale) {\n+    float totalWidth = 0;\n+    for (int i = 0; i < documentData.text.length(); i++) {\n+      char c = documentData.text.charAt(i);\n+      int characterHash = FontCharacter.hashFor(c, font.getFamily(), font.getStyle());\n+      FontCharacter character = composition.getCharacters().get(characterHash);\n+      if (character == null) {\n+        continue;\n+      }\n+      totalWidth += character.getWidth() * fontScale * Utils.dpScale() * parentScale;\n+    }\n+    return totalWidth;\n+  }\n+\n+  private void applyJustification(Justification justification, Canvas canvas, float totalTextWidth) {\n+    switch (justification) {\n+      case LeftAlign:\n+        // Do nothing. Default is left aligned.\n+        break;\n+      case RightAlign:\n+        canvas.translate(-totalTextWidth, 0);\n+        break;\n+      case Center:\n+        canvas.translate(-totalTextWidth / 2, 0);\n+        break;\n+    }\n+  }\n+\n   private void drawCharacterAsGlyph(\n       FontCharacter character,\n       Matrix parentMatrix,\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n@@ -4,6 +4,7 @@\n \n import com.airbnb.lottie.model.DocumentData;\n \n+import com.airbnb.lottie.model.DocumentData.Justification;\n import java.io.IOException;\n \n public class DocumentDataParser implements ValueParser<DocumentData> {\n@@ -15,7 +16,7 @@ private DocumentDataParser() {}\n     String text = null;\n     String fontName = null;\n     double size = 0;\n-    int justification = 0;\n+    Justification justification = Justification.Center;\n     int tracking = 0;\n     double lineHeight = 0;\n     double baselineShift = 0;\n@@ -37,7 +38,12 @@ private DocumentDataParser() {}\n           size = reader.nextDouble();\n           break;\n         case \"j\":\n-          justification = reader.nextInt();\n+          int justificationInt = reader.nextInt();\n+          if (justificationInt > Justification.Center.ordinal() || justificationInt < 0) {\n+            justification = Justification.Center;\n+          } else {\n+            justification = Justification.values()[justificationInt];\n+          }\n           break;\n         case \"tr\":\n           tracking = reader.nextInt();",
    "output": "Add support for naive text alignment. (#1067)\n\nFixes #388"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -183,6 +183,9 @@ private RadialGradient getRadialGradient() {\n     float x1 = endPoint.x;\n     float y1 = endPoint.y;\n     float r = (float) Math.hypot(x1 - x0, y1 - y0);\n+    if (r <= 0) {\n+      r = 0.001f;\n+    }\n     gradient = new RadialGradient(x0, y0, r, colors, positions, Shader.TileMode.CLAMP);\n     radialGradientCache.put(gradientHash, gradient);\n     return gradient;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n@@ -185,7 +185,7 @@ public boolean fullyResolvesTo(String key, int depth) {\n   @SuppressWarnings(\"SimplifiableIfStatement\")\n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public boolean propagateToChildren(String key, int depth) {\n-    if (key.equals(\"__container\")) {\n+    if (\"__container\".equals(key)) {\n       return true;\n     }\n     return depth < keys.size() - 1 || keys.get(depth).equals(\"**\");\n@@ -196,7 +196,7 @@ public boolean propagateToChildren(String key, int depth) {\n    * and for the contents of a ShapeLayer).\n    */\n   private boolean isContainer(String key) {\n-    return key.equals(\"__container\");\n+    return \"__container\".equals(key);\n   }\n \n   private boolean endsWithGlobstar() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java\n@@ -51,7 +51,8 @@ public AnimatableTransform(AnimatablePathValue anchorPoint,\n             !(position instanceof AnimatableSplitDimensionPathValue) &&\n             position.isStatic() && position.getKeyframes().get(0).startValue.equals(0f, 0f) &&\n             scale.isStatic() && scale.getKeyframes().get(0).startValue.equals(1f, 1f) &&\n-            rotation.isStatic() && rotation.getKeyframes().get(0).startValue == 0f;\n+            (rotation.isStatic() && rotation.getKeyframes().get(0).startValue == 0f ||\n+                    rotation.keyframes.isEmpty());\n   }\n \n   public AnimatablePathValue getAnchorPoint() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/animatable/BaseAnimatableValue.java b/lottie/src/main/java/com/airbnb/lottie/model/animatable/BaseAnimatableValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/animatable/BaseAnimatableValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/BaseAnimatableValue.java\n@@ -28,7 +28,7 @@ public List<Keyframe<V>> getKeyframes() {\n \n   @Override\n   public boolean isStatic() {\n-    return keyframes.size() == 1 && keyframes.get(0).isStatic();\n+    return keyframes.isEmpty() || (keyframes.size() == 1 && keyframes.get(0).isStatic());\n   }\n \n   @Override public String toString() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n@@ -63,7 +63,7 @@ public void interpolateBetween(ShapeData shapeData1, ShapeData shapeData2,\n         curves.add(new CubicCurveData());\n       }\n     } else if (curves.size() > points) {\n-      for (int i = points; i < curves.size(); i++) {\n+      for (int i = curves.size() - 1; i >= points; i--) {\n         curves.remove(curves.size() - 1);\n       }\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/AnimatableTransformParser.java\n@@ -13,6 +13,7 @@\n import com.airbnb.lottie.model.animatable.AnimatableScaleValue;\n import com.airbnb.lottie.model.animatable.AnimatableTransform;\n import com.airbnb.lottie.model.animatable.AnimatableValue;\n+import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.ScaleXY;\n \n import java.io.IOException;\n@@ -58,7 +59,20 @@ public static AnimatableTransform parse(\n         case \"rz\":\n           composition.addWarning(\"Lottie doesn't support 3D layers.\");\n         case \"r\":\n+          /**\n+           * Sometimes split path rotation gets exported like:\n+           *         \"rz\": {\n+           *           \"a\": 1,\n+           *           \"k\": [\n+           *             {}\n+           *           ]\n+           *         },\n+           * which doesn't parse to a real keyframe.\n+           */\n           rotation = AnimatableValueParser.parseFloat(reader, composition, false);\n+          if (rotation.getKeyframes().isEmpty()) {\n+            rotation.getKeyframes().add(new Keyframe(composition, 0f, 0f, null, 0f, composition.getEndFrame()));\n+          }\n           break;\n         case \"o\":\n           opacity = AnimatableValueParser.parseInteger(reader, composition);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ScaleXYParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ScaleXYParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ScaleXYParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ScaleXYParser.java\n@@ -28,4 +28,5 @@ private ScaleXYParser() {\n     }\n     return new ScaleXY(sx / 100f * scale, sy / 100f * scale);\n   }\n+\n }",
    "output": "Updated testing (#1064)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -5,6 +5,7 @@\n import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n+import java.security.Key;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -52,7 +53,7 @@ public void addUpdateListener(AnimationListener listener) {\n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     // Must use hashCode() since the actual object instance will be returned\n     // from getValue() below with the new values.\n-    int previousValue = valueCallback == null ? getValue().hashCode() : 0;\n+    Keyframe<K> previousKeyframe = getCurrentKeyframe();\n     if (progress < getStartDelayProgress()) {\n       progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n@@ -64,9 +65,9 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n     this.progress = progress;\n     // Just trigger a change but don't compute values if there is a value callback.\n-    int newValue = valueCallback == null ? getValue().hashCode() : -1;\n+    Keyframe<K> newKeyframe = getCurrentKeyframe();\n \n-    if (previousValue != newValue) {\n+    if (previousKeyframe != newKeyframe || !newKeyframe.isStatic()) {\n       notifyListeners();\n     }\n   }",
    "output": "Skip listeners based on keyframes (#1061)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -84,6 +84,12 @@ public class TextLayer extends BaseLayer {\n     }\n   }\n \n+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {\n+    super.getBounds(outBounds, parentMatrix, applyParents);\n+    // TODO: use the correct text bounds.\n+    outBounds.set(0, 0, composition.getBounds().width(), composition.getBounds().height());\n+  }\n+\n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n     if (!lottieDrawable.useTextGlyphs()) {",
    "output": "Allow text to be used as a mask (#1052)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -189,6 +189,7 @@ public boolean setComposition(LottieComposition composition) {\n       return false;\n     }\n \n+    isDirty = false;\n     clearComposition();\n     this.composition = composition;\n     buildCompositionLayer();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -141,8 +141,9 @@ public void setComposition(LottieComposition composition) {\n     } else {\n       setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());\n     }\n+    float frame = this.frame;\n+    this.frame = 0f;\n     setFrame((int) frame);\n-    lastFrameTimeNs = System.nanoTime();\n   }\n \n   public void setFrame(int frame) {",
    "output": "Ensure animator updates when a new composition is set"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n@@ -57,11 +57,15 @@ public void interpolateBetween(ShapeData shapeData1, ShapeData shapeData2,\n           shapeData1.getCurves().size() + \"\\tShape 2: \" + shapeData2.getCurves().size());\n     }\n     \n-    if (curves.isEmpty()) {\n-      int points = Math.min(shapeData1.getCurves().size(), shapeData2.getCurves().size());\n-      for (int i = 0; i < points; i++) {\n+    int points = Math.min(shapeData1.getCurves().size(), shapeData2.getCurves().size());\n+    if (curves.size() < points) {\n+      for (int i = curves.size(); i < points; i++) {\n         curves.add(new CubicCurveData());\n       }\n+    } else if (curves.size() > points) {\n+      for (int i = points; i < curves.size(); i++) {\n+        curves.remove(curves.size() - 1);\n+      }\n     }\n \n     PointF initialPoint1 = shapeData1.getInitialPoint();",
    "output": "Be more lenient with shapes that have a different number of control points (#1051)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -52,7 +52,7 @@ public void addUpdateListener(AnimationListener listener) {\n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     // Must use hashCode() since the actual object instance will be returned\n     // from getValue() below with the new values.\n-    int previousValue = valueCallback == null ? 0 : getValue().hashCode();\n+    int previousValue = valueCallback == null ? getValue().hashCode() : 0;\n     if (progress < getStartDelayProgress()) {\n       progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n@@ -64,7 +64,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n     this.progress = progress;\n     // Just trigger a change but don't compute values if there is a value callback.\n-    int newValue = valueCallback == null ? -1 : getValue().hashCode();\n+    int newValue = valueCallback == null ? getValue().hashCode() : -1;\n \n     if (previousValue != newValue) {\n       notifyListeners();",
    "output": "Flipped equality check (#1050)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -34,6 +34,9 @@ public interface AnimationListener {\n   private float cachedGetValueProgress = -1f;\n   @Nullable private A cachedGetValue = null;\n \n+  private float cachedStartDelayProgress = -1f;\n+  private float cachedEndProgress = -1f;\n+\n   BaseKeyframeAnimation(List<? extends Keyframe<K>> keyframes) {\n     this.keyframes = keyframes;\n   }\n@@ -126,12 +129,18 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n \n   @FloatRange(from = 0f, to = 1f)\n   private float getStartDelayProgress() {\n-    return keyframes.isEmpty() ? 0f : keyframes.get(0).getStartProgress();\n+      if (cachedStartDelayProgress == -1f) {\n+            cachedStartDelayProgress = keyframes.isEmpty() ? 0f : keyframes.get(0).getStartProgress();\n+      }\n+      return cachedStartDelayProgress;\n   }\n \n   @FloatRange(from = 0f, to = 1f)\n   float getEndProgress() {\n-    return keyframes.isEmpty() ? 1f : keyframes.get(keyframes.size() - 1).getEndProgress();\n+      if (cachedEndProgress == -1f) {\n+        cachedEndProgress = keyframes.isEmpty() ? 1f : keyframes.get(keyframes.size() - 1).getEndProgress();\n+      }\n+      return cachedEndProgress;\n   }\n \n   public A getValue() {",
    "output": "Optimize start and end progress (#1049)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -8,14 +8,14 @@\n import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.drawable.Drawable;\n+import android.os.Build;\n import android.os.Parcel;\n import android.os.Parcelable;\n import androidx.annotation.FloatRange;\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.annotation.RawRes;\n-import androidx.annotation.VisibleForTesting;\n import androidx.appcompat.widget.AppCompatImageView;\n import android.text.TextUtils;\n import android.util.AttributeSet;\n@@ -73,7 +73,6 @@\n   private @RawRes int animationResId;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n-  private boolean useHardwareLayer = false;\n   private Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n \n   @Nullable private LottieTask<LottieComposition> compositionTask;\n@@ -261,54 +260,6 @@ public boolean isMergePathsEnabledForKitKatAndAbove() {\n     return lottieDrawable.isMergePathsEnabledForKitKatAndAbove();\n   }\n \n-  /**\n-   * @see #useHardwareAcceleration(boolean)\n-   */\n-  @Deprecated\n-  public void useExperimentalHardwareAcceleration() {\n-    useHardwareAcceleration(true);\n-  }\n-\n-\n-  /**\n-   * @see #useHardwareAcceleration(boolean)\n-   */\n-  @Deprecated\n-  public void useExperimentalHardwareAcceleration(boolean use) {\n-    useHardwareAcceleration(use);\n-  }\n-\n-  /**\n-   * @see #useHardwareAcceleration(boolean)\n-   */\n-  public void useHardwareAcceleration() {\n-    useHardwareAcceleration(true);\n-  }\n-\n-  /**\n-   * Enable hardware acceleration for this view.\n-   * READ THIS BEFORE ENABLING HARDWARE ACCELERATION:\n-   * 1) Test your animation on the minimum API level you support. Some drawing features such as\n-   *    dashes and stroke caps have min api levels\n-   *    (https://developer.android.com/guide/topics/graphics/hardware-accel.html#unsupported)\n-   * 2) Enabling hardware acceleration is not always more performant. Check it with your specific\n-   *    animation only if you are having performance issues with software rendering.\n-   * 3) Software rendering is safer and will be consistent across devices. Manufacturers can\n-   *    potentially break hardware rendering with bugs in their SKIA engine. Lottie cannot do\n-   *    anything about that.\n-   */\n-  public void useHardwareAcceleration(boolean use) {\n-    if (useHardwareLayer == use) {\n-      return;\n-    }\n-    useHardwareLayer = use;\n-    enableOrDisableHardwareLayer();\n-  }\n-\n-  public boolean getUseHardwareAcceleration() {\n-    return useHardwareLayer;\n-  }\n-\n   /**\n    * Sets the animation from a file in the raw directory.\n    * This will load and deserialize the file asynchronously.\n@@ -794,7 +745,10 @@ private void clearComposition() {\n   }\n \n   private void enableOrDisableHardwareLayer() {\n-    boolean useHardwareLayer = this.useHardwareLayer && lottieDrawable.isAnimating();\n+    boolean useHardwareLayer = true;\n+    if (composition != null && composition.hasDashPattern() && Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n+      useHardwareLayer = false;\n+    }\n     setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -51,7 +51,12 @@ public class LottieComposition {\n   private float startFrame;\n   private float endFrame;\n   private float frameRate;\n+  /**\n+   * Used to determine if an animation can be drawn with hardware acceleration.\n+   */\n+  private boolean hasDashPattern;\n \n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n       List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,\n       List<Layer>> precomps, Map<String, LottieImageAsset> images,\n@@ -74,6 +79,18 @@ public void addWarning(String warning) {\n     warnings.add(warning);\n   }\n \n+  @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  public void setHasDashPattern(boolean hasDashPattern) {\n+    this.hasDashPattern = hasDashPattern;\n+  }\n+\n+  /**\n+   * Used to determine if an animation can be drawn with hardware acceleration.\n+   */\n+  public boolean hasDashPattern() {\n+    return hasDashPattern;\n+  }\n+\n   public ArrayList<String> getWarnings() {\n     return new ArrayList<>(Arrays.asList(warnings.toArray(new String[warnings.size()])));\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n@@ -109,6 +109,7 @@ static GradientStroke parse(\n             if (n.equals(\"o\")) {\n               offset = val;\n             } else if (n.equals(\"d\") || n.equals(\"g\")) {\n+              composition.setHasDashPattern(true);\n               lineDashPattern.add(val);\n             }\n           }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n@@ -83,6 +83,7 @@ static ShapeStroke parse(\n                 break;\n               case \"d\":\n               case \"g\":\n+                composition.setHasDashPattern(true);\n                 lineDashPattern.add(val);\n                 break;\n             }",
    "output": "[Breaking Change] Automatic hardware acceleration detection (#1048)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -71,6 +71,12 @@ private interface LazyCompositionTask {\n   @Nullable private CompositionLayer compositionLayer;\n   private int alpha = 255;\n   private boolean performanceTrackingEnabled;\n+  /**\n+   * True if the drawable has not been drawn since the last invalidateSelf.\n+   * We can do this to prevent things like bounds from getting recalculated\n+   * many times.\n+   */\n+  private boolean isDirty = false;\n \n   @IntDef({RESTART, REVERSE})\n   @Retention(RetentionPolicy.SOURCE)\n@@ -238,6 +244,10 @@ public void clearComposition() {\n   }\n \n   @Override public void invalidateSelf() {\n+    if (isDirty) {\n+      return;\n+    }\n+    isDirty = true;\n     final Callback callback = getCallback();\n     if (callback != null) {\n       callback.invalidateDrawable(this);\n@@ -261,6 +271,7 @@ public void clearComposition() {\n   }\n \n   @Override public void draw(@NonNull Canvas canvas) {\n+    isDirty = false;\n     L.beginSection(\"Drawable#draw\");\n     if (compositionLayer == null) {\n       return;",
    "output": "Optimize invalidateSelf (#1047)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java\n@@ -24,7 +24,7 @@ static GradientFill parse(\n     GradientType gradientType = null;\n     AnimatablePointValue startPoint = null;\n     AnimatablePointValue endPoint = null;\n-    Path.FillType fillType = null;\n+    Path.FillType fillType = Path.FillType.WINDING;\n     boolean hidden = false;\n \n     while (reader.hasNext()) {",
    "output": "Add a default gradient fill type (#1042)\n\nFixes #1032"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java\n@@ -128,6 +128,6 @@ private File getCachedFile(String url) throws FileNotFoundException {\n   }\n \n   private static String filenameForUrl(String url, FileExtension extension, boolean isTemp) {\n-    return \"lottie_cache_\" + url.replaceAll(\"\\\\W+\", \"\") + (isTemp ? extension.extension : extension.tempExtension());\n+    return \"lottie_cache_\" + url.replaceAll(\"\\\\W+\", \"\") + (isTemp ? extension.tempExtension(): extension.extension);\n   }\n }",
    "output": "resove bug local cache not working (#1040)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetDelegate.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetDelegate.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetDelegate.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetDelegate.java\n@@ -1,12 +1,13 @@\n package com.airbnb.lottie;\n \n import android.graphics.Bitmap;\n+import androidx.annotation.Nullable;\n \n /**\n  * Delegate to handle the loading of bitmaps that are not packaged in the assets of your app.\n  *\n  * @see LottieDrawable#setImageAssetDelegate(ImageAssetDelegate)\n  */\n public interface ImageAssetDelegate {\n-  Bitmap fetchBitmap(LottieImageAsset asset);\n+  @Nullable Bitmap fetchBitmap(LottieImageAsset asset);\n }",
    "output": "Annotate fetchBitmap as @Nullable (#1037)\n\nAccording to the example in https://airbnb.io/lottie/android/images.html#providing-your-own-images, fetchBitmap() can return null and Lottie will keep asking until a non-null Bitmap is returned."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -1,14 +1,14 @@\n package com.airbnb.lottie.animation.keyframe;\n \n-import androidx.annotation.FloatRange;\n-import androidx.annotation.Nullable;\n-\n-import com.airbnb.lottie.value.LottieValueCallback;\n import com.airbnb.lottie.value.Keyframe;\n+import com.airbnb.lottie.value.LottieValueCallback;\n \n import java.util.ArrayList;\n import java.util.List;\n \n+import androidx.annotation.FloatRange;\n+import androidx.annotation.Nullable;\n+\n /**\n  * @param <K> Keyframe type\n  * @param <A> Animation type\n@@ -28,6 +28,10 @@ public interface AnimationListener {\n \n   @Nullable private Keyframe<K> cachedKeyframe;\n \n+  @Nullable private Keyframe<K> cachedGetValueKeyframe;\n+  private float cachedGetValueProgress = -1f;\n+  @Nullable private A cachedGetValue = null;\n+\n   BaseKeyframeAnimation(List<? extends Keyframe<K>> keyframes) {\n     this.keyframes = keyframes;\n   }\n@@ -41,6 +45,9 @@ public void addUpdateListener(AnimationListener listener) {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    // Must use hashCode() since the actual object instance will be returned\n+    // from getValue() below with the new values.\n+    int previousValue = valueCallback == null ? 0 : getValue().hashCode();\n     if (progress < getStartDelayProgress()) {\n       progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n@@ -51,8 +58,12 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n       return;\n     }\n     this.progress = progress;\n+    // Just trigger a change but don't compute values if there is a value callback.\n+    int newValue = valueCallback == null ? -1 : getValue().hashCode();\n \n-    notifyListeners();\n+    if (previousValue != newValue) {\n+      notifyListeners();\n+    }\n   }\n \n   public void notifyListeners() {\n@@ -122,7 +133,18 @@ float getEndProgress() {\n   }\n \n   public A getValue() {\n-    return getValue(getCurrentKeyframe(), getInterpolatedCurrentKeyframeProgress());\n+    Keyframe<K> keyframe = getCurrentKeyframe();\n+    float progress = getInterpolatedCurrentKeyframeProgress();\n+    if (valueCallback == null && keyframe == cachedGetValueKeyframe && cachedGetValueProgress == progress) {\n+      return cachedGetValue;\n+    }\n+\n+    cachedGetValueKeyframe = keyframe;\n+    cachedGetValueProgress = progress;\n+    A value = getValue(keyframe, progress);\n+    cachedGetValue = value;\n+\n+    return value;\n   }\n \n   public float getProgress() {",
    "output": "Only update listeners when animation changed (#1035)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -145,7 +145,7 @@ private void notifyListeners() {\n     });\n   }\n \n-  private void notifySuccessListeners(T value) {\n+  private synchronized void notifySuccessListeners(T value) {\n     // Allows listeners to remove themselves in onResult.\n     // Otherwise we risk ConcurrentModificationException.\n     List<LottieListener<T>> listenersCopy = new ArrayList<>(successListeners);\n@@ -197,7 +197,6 @@ private synchronized void startTaskObserverIfNeeded() {\n       }\n     };\n     taskObserver.start();\n-    L.debug(\"Starting TaskObserver thread\");\n   }\n \n   /**\n@@ -210,7 +209,6 @@ private synchronized void stopTaskObserverIfNeeded() {\n     if (successListeners.isEmpty() || result != null) {\n       taskObserver.interrupt();\n       taskObserver = null;\n-      L.debug(\"Stopping TaskObserver thread\");\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieCompositionCache.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieCompositionCache.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieCompositionCache.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieCompositionCache.java\n@@ -37,4 +37,8 @@ public void put(@Nullable String cacheKey, LottieComposition composition) {\n     }\n     cache.put(cacheKey, composition);\n   }\n+\n+  public void clear() {\n+    cache.evictAll();\n+  }\n }",
    "output": "Added prod animations from S3 (#1031)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie.animation.keyframe;\n \n import com.airbnb.lottie.utils.GammaEvaluator;\n+import com.airbnb.lottie.utils.MiscUtils;\n import com.airbnb.lottie.value.Keyframe;\n \n import java.util.List;\n@@ -27,6 +28,6 @@ public ColorKeyframeAnimation(List<Keyframe<Integer>> keyframes) {\n       }\n     }\n \n-    return GammaEvaluator.evaluate(keyframeProgress, startColor, endColor);\n+    return GammaEvaluator.evaluate(MiscUtils.clamp(keyframeProgress, 0f, 1f), startColor, endColor);\n   }\n }",
    "output": "Prevent interpolating before the start color/after the end color (#1027)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java\n@@ -52,8 +52,13 @@ private LottieCompositionFactory() {\n    * future use. Because of this, you may call `fromUrl` ahead of time to warm the cache if you think you\n    * might need an animation in the future.\n    */\n-  public static LottieTask<LottieComposition> fromUrl(Context context, String url) {\n-    return NetworkFetcher.fetch(context, url);\n+  public static LottieTask<LottieComposition> fromUrl(final Context context, final String url) {\n+    String urlCacheKey = \"url_\" + url;\n+    return cache(urlCacheKey, new Callable<LottieResult<LottieComposition>>() {\n+      @Override public LottieResult<LottieComposition> call() {\n+        return NetworkFetcher.fetchSync(context, url);\n+      }\n+    });\n   }\n \n   /**\n@@ -318,7 +323,7 @@ private static LottieImageAsset findImageAssetForFileName(LottieComposition comp\n   /**\n    * First, check to see if there are any in-progress tasks associated with the cache key and return it if there is.\n    * If not, create a new task for the callable.\n-   * Then, add the new task to the task cache and set up listeners to it gets cleared when done.\n+   * Then, add the new task to the task cache and set up listeners so it gets cleared when done.\n    */\n   private static LottieTask<LottieComposition> cache(\n           @Nullable final String cacheKey, Callable<LottieResult<LottieComposition>> callable) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n--- a/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java\n@@ -9,7 +9,6 @@\n import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.LottieCompositionFactory;\n import com.airbnb.lottie.LottieResult;\n-import com.airbnb.lottie.LottieTask;\n \n import java.io.BufferedReader;\n import java.io.File;\n@@ -19,7 +18,6 @@\n import java.io.InputStreamReader;\n import java.net.HttpURLConnection;\n import java.net.URL;\n-import java.util.concurrent.Callable;\n import java.util.zip.ZipInputStream;\n \n public class NetworkFetcher {\n@@ -29,10 +27,6 @@ public class NetworkFetcher {\n \n   private final NetworkCache networkCache;\n \n-  public static LottieTask<LottieComposition> fetch(Context context, String url) {\n-    return new NetworkFetcher(context, url).fetch();\n-  }\n-\n   public static LottieResult<LottieComposition> fetchSync(Context context, String url) {\n     return new NetworkFetcher(context, url).fetchSync();\n   }\n@@ -43,14 +37,6 @@ private NetworkFetcher(Context context, String url) {\n     networkCache = new NetworkCache(appContext, url);\n   }\n \n-  private LottieTask<LottieComposition> fetch() {\n-    return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {\n-      @Override public LottieResult<LottieComposition> call() throws Exception {\n-        return fetchSync();\n-      }\n-    });\n-  }\n-\n   @WorkerThread\n   public LottieResult<LottieComposition> fetchSync() {\n     LottieComposition result = fetchFromCache();",
    "output": "Added memory cache layer for async network requests (#986)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -163,25 +163,16 @@ private void init(@Nullable AttributeSet attrs) {\n   }\n \n   @Override public void setImageResource(int resId) {\n-    recycleBitmaps();\n     cancelLoaderTask();\n     super.setImageResource(resId);\n   }\n \n   @Override public void setImageDrawable(Drawable drawable) {\n-    setImageDrawable(drawable, true);\n-  }\n-\n-  private void setImageDrawable(Drawable drawable, boolean recycle) {\n-    if (recycle && drawable != lottieDrawable) {\n-      recycleBitmaps();\n-    }\n     cancelLoaderTask();\n     super.setImageDrawable(drawable);\n   }\n \n   @Override public void setImageBitmap(Bitmap bm) {\n-    recycleBitmaps();\n     cancelLoaderTask();\n     super.setImageBitmap(bm);\n   }\n@@ -247,16 +238,9 @@ private void setImageDrawable(Drawable drawable, boolean recycle) {\n       cancelAnimation();\n       wasAnimatingWhenDetached = true;\n     }\n-    recycleBitmaps();\n     super.onDetachedFromWindow();\n   }\n \n-  @VisibleForTesting void recycleBitmaps() {\n-    // AppCompatImageView constructor will set the image when set from xml\n-    // before LottieDrawable has been initialized\n-    lottieDrawable.recycleBitmaps();\n-  }\n-\n   /**\n    * Enable this to get merge path support for devices running KitKat (19) and above.\n    *\n@@ -744,8 +728,8 @@ public <T> void addValueCallback(KeyPath keyPath, T property,\n   public void setScale(float scale) {\n     lottieDrawable.setScale(scale);\n     if (getDrawable() == lottieDrawable) {\n-      setImageDrawable(null, false);\n-      setImageDrawable(lottieDrawable, false);\n+      setImageDrawable(null);\n+      setImageDrawable(lottieDrawable);\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -177,19 +177,6 @@ public void setImagesAssetsFolder(@Nullable String imageAssetsFolder) {\n     return imageAssetsFolder;\n   }\n \n-  /**\n-   * If you have image assets and use {@link LottieDrawable} directly, you must call this yourself.\n-   *\n-   * Calling recycleBitmaps() doesn't have to be final and {@link LottieDrawable}\n-   * will recreate the bitmaps if needed but they will leak if you don't recycle them.\n-   *\n-   */\n-  public void recycleBitmaps() {\n-    if (imageAssetManager != null) {\n-      imageAssetManager.recycleBitmaps();\n-    }\n-  }\n-\n   /**\n    * Create a composition with {@link LottieCompositionFactory}\n    *\n@@ -244,7 +231,6 @@ private void buildCompositionLayer() {\n   }\n \n   public void clearComposition() {\n-    recycleBitmaps();\n     if (animator.isRunning()) {\n       animator.cancel();\n     }\n@@ -848,7 +834,6 @@ private ImageAssetManager getImageAssetManager() {\n     }\n \n     if (imageAssetManager != null && !imageAssetManager.hasSameContext(getContext())) {\n-      imageAssetManager.recycleBitmaps();\n       imageAssetManager = null;\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -117,20 +117,6 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     return putBitmap(id, bitmap);\n   }\n \n-  public void recycleBitmaps() {\n-    synchronized (bitmapHashLock) {\n-      for (Map.Entry<String, LottieImageAsset> entry : imageAssets.entrySet()) {\n-        LottieImageAsset asset = entry.getValue();\n-        Bitmap bitmap = asset.getBitmap();\n-        if (bitmap != null) {\n-          bitmap.recycle();\n-          asset.setBitmap(null);\n-        }\n-      }\n-    }\n-  }\n-\n-\n   public boolean hasSameContext(Context context) {\n     return context == null && this.context == null || this.context.equals(context);\n   }",
    "output": "Remove bitmap recycling (#1013)\n\nFixes #1002"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -138,6 +138,10 @@ private void init(@Nullable AttributeSet attrs) {\n           LottieDrawable.INFINITE));\n     }\n \n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_speed)) {\n+      setSpeed(ta.getFloat(R.styleable.LottieAnimationView_lottie_speed, 1f));\n+    }\n+\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n     setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(",
    "output": "Added an attr for speed (#1012)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -61,7 +61,9 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n       asset.setBitmap(null);\n       return ret;\n     }\n-    return putBitmap(id, bitmap);\n+    Bitmap prevBitmap = imageAssets.get(id).getBitmap();\n+    putBitmap(id, bitmap);\n+    return prevBitmap;\n   }\n \n   @Nullable public Bitmap bitmapForId(String id) {",
    "output": "Fixed the bug of ImageAssetManager.updateBitmap not return the expected result. (#982)\n\nChange-Id: Icd78af15a5c82b9b58270ade8906dd971d2738ad\r\nSigned-off-by: dongshangyong <dongshangyong@bytedance.com>"
  },
  {
    "input": "diff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -169,10 +169,10 @@ public void testSetFrameIntegrity() {\n \n     // setFrame < minFrame should clamp to minFrame\n     animator.setFrame(100);\n-    assertEquals(200, animator.getFrame());\n+    assertEquals(200f, animator.getFrame());\n \n     animator.setFrame(900);\n-    assertEquals(800, animator.getFrame());\n+    assertEquals(800f, animator.getFrame());\n   }\n \n   @Test(expected = IllegalArgumentException.class)",
    "output": "Fixed test"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -163,6 +163,9 @@ public void setMaxFrame(int maxFrame) {\n   }\n \n   public void setMinAndMaxFrames(int minFrame, int maxFrame) {\n+    if (minFrame > maxFrame) {\n+      throw new IllegalArgumentException(String.format(\"minFrame (%s) must be <= maxFrame (%s)\", minFrame, maxFrame));\n+    }\n     float compositionMinFrame = composition == null ? -Float.MAX_VALUE : composition.getStartFrame();\n     float compositionMaxFrame = composition == null ? Float.MAX_VALUE : composition.getEndFrame();\n     this.minFrame = MiscUtils.clamp(minFrame, compositionMinFrame, compositionMaxFrame);\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -163,6 +163,23 @@ public void testMinAndMaxBothSet() {\n     assertClose(0.8f, animator.getAnimatedValueAbsolute());\n   }\n \n+  @Test\n+  public void testSetFrameIntegrity() {\n+    animator.setMinAndMaxFrames(200, 800);\n+\n+    // setFrame < minFrame should clamp to minFrame\n+    animator.setFrame(100);\n+    assertEquals(200, animator.getFrame());\n+\n+    animator.setFrame(900);\n+    assertEquals(800, animator.getFrame());\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testMinAndMaxFrameIntegrity() {\n+    animator.setMinAndMaxFrames(800, 200);\n+  }\n+\n   @Test\n   public void testDefaultAnimator() {\n     testAnimator(new VerifyListener() {",
    "output": "Don't allow minFrame > maxFrame in LottieValueAnimator (#969)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java\n@@ -1,7 +1,7 @@\n package com.airbnb.lottie.animation.keyframe;\n \n-import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.utils.GammaEvaluator;\n+import com.airbnb.lottie.value.Keyframe;\n \n import java.util.List;\n \n@@ -20,8 +20,11 @@ public ColorKeyframeAnimation(List<Keyframe<Integer>> keyframes) {\n \n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n-      return valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, startColor,\n-          endColor, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, startColor,\n+              endColor, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      if (value != null) {\n+        return value;\n+      }\n     }\n \n     return GammaEvaluator.evaluate(keyframeProgress, startColor, endColor);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/FloatKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/FloatKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/FloatKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/FloatKeyframeAnimation.java\n@@ -18,9 +18,12 @@ public FloatKeyframeAnimation(List<Keyframe<Float>> keyframes) {\n \n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n-      return valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n-          keyframe.startValue, keyframe.endValue,\n-          keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      Float value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n+              keyframe.startValue, keyframe.endValue,\n+              keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      if (value != null) {\n+        return value;\n+      }\n     }\n \n     return MiscUtils.lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/IntegerKeyframeAnimation.java\n@@ -18,9 +18,12 @@ public IntegerKeyframeAnimation(List<Keyframe<Integer>> keyframes) {\n \n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n-      return valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n-          keyframe.startValue, keyframe.endValue,\n-          keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n+              keyframe.startValue, keyframe.endValue,\n+              keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      if (value != null) {\n+        return value;\n+      }\n     }\n \n     return MiscUtils.lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n@@ -26,9 +26,12 @@ public PathKeyframeAnimation(List<? extends Keyframe<PointF>> keyframes) {\n     }\n \n     if (valueCallback != null) {\n-      return valueCallback.getValueInternal(pathKeyframe.startFrame, pathKeyframe.endFrame,\n-          pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress(),\n-          keyframeProgress, getProgress());\n+      PointF value = valueCallback.getValueInternal(pathKeyframe.startFrame, pathKeyframe.endFrame,\n+              pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress(),\n+              keyframeProgress, getProgress());\n+      if (value != null) {\n+        return value;\n+      }\n     }\n \n     if (pathMeasureKeyframe != pathKeyframe) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PointKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PointKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PointKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PointKeyframeAnimation.java\n@@ -23,8 +23,11 @@ public PointKeyframeAnimation(List<Keyframe<PointF>> keyframes) {\n \n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n-      return valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, startPoint,\n-          endPoint, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      PointF value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, startPoint,\n+              endPoint, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      if (value != null) {\n+        return value;\n+      }\n     }\n \n     point.set(startPoint.x + keyframeProgress * (endPoint.x - startPoint.x),\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ScaleKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ScaleKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ScaleKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ScaleKeyframeAnimation.java\n@@ -20,9 +20,12 @@ public ScaleKeyframeAnimation(List<Keyframe<ScaleXY>> keyframes) {\n \n     if (valueCallback != null) {\n       //noinspection ConstantConditions\n-      return valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n-          startTransform, endTransform,\n-          keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      ScaleXY value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame,\n+              startTransform, endTransform,\n+              keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());\n+      if (value != null) {\n+        return value;\n+      }\n     }\n \n     return new ScaleXY(\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n@@ -12,7 +12,7 @@\n  */\n public class LottieValueCallback<T> {\n   private final LottieFrameInfo<T> frameInfo = new LottieFrameInfo<>();\n-  @Nullable BaseKeyframeAnimation<?, ?> animation;\n+  @Nullable private BaseKeyframeAnimation<?, ?> animation;\n \n   /**\n    * This can be set with {@link #setValue(Object)} to use a value instead of deferring\n@@ -29,7 +29,10 @@ public LottieValueCallback(@Nullable T staticValue) {\n \n   /**\n    * Override this if you haven't set a static value in the constructor or with setValue.\n+   *\n+   * Return null to resort to the default value.\n    */\n+  @Nullable\n   public T getValue(LottieFrameInfo<T> frameInfo) {\n     return value;\n   }\n@@ -42,6 +45,7 @@ public final void setValue(@Nullable T value) {\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n+  @Nullable\n   public final T getValueInternal(\n       float startFrame,\n       float endFrame,",
    "output": "Allow returning null from value animator callbacks (#960)\n\nFixes #879"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java\n@@ -35,7 +35,9 @@ public static Layer parse(LottieComposition composition) {\n   }\n \n   public static Layer parse(JsonReader reader, LottieComposition composition) throws IOException {\n-    String layerName = null;\n+    // This should always be set by After Effects. However, if somebody wants to minify\n+    // and optimize their json, the name isn't critical for most cases so it can be removed.\n+    String layerName = \"UNSET\";\n     Layer.LayerType layerType = null;\n     String refId = null;\n     long layerId = 0;",
    "output": "Default layer names to UNSET rather than crashing when unset\n\nSee code comment for more info\nFixes #951"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -32,7 +32,7 @@ public class LottieTask<T> {\n    * You may change this to run deserialization synchronously for testing.\n    */\n   @SuppressWarnings(\"WeakerAccess\")\n-  public Executor EXECUTOR = Executors.newCachedThreadPool();\n+  public static Executor EXECUTOR = Executors.newCachedThreadPool();\n \n   @Nullable private Thread taskObserver;\n ",
    "output": "Make LottieTask#EXECUTOR static\n\nFixes #943"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -17,13 +17,13 @@ public class DocumentData {\n   public final double baselineShift;\n   @ColorInt public final int color;\n   @ColorInt public final int strokeColor;\n-  public final int strokeWidth;\n+  public final double strokeWidth;\n   public final boolean strokeOverFill;\n \n \n   public DocumentData(String text, String fontName, double size, int justification, int tracking,\n       double lineHeight, double baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n-      int strokeWidth, boolean strokeOverFill) {\n+      double strokeWidth, boolean strokeOverFill) {\n     this.text = text;\n     this.fontName = fontName;\n     this.size = size;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -116,7 +116,7 @@ public class TextLayer extends BaseLayer {\n       strokePaint.setStrokeWidth(strokeWidthAnimation.getValue());\n     } else {\n       float parentScale = Utils.getScale(parentMatrix);\n-      strokePaint.setStrokeWidth(documentData.strokeWidth * Utils.dpScale() * parentScale);\n+      strokePaint.setStrokeWidth((float) (documentData.strokeWidth * Utils.dpScale() * parentScale));\n     }\n \n     if (lottieDrawable.useTextGlyphs()) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n@@ -21,7 +21,7 @@ private DocumentDataParser() {}\n     double baselineShift = 0;\n     int fillColor = 0;\n     int strokeColor = 0;\n-    int strokeWidth = 0;\n+    double strokeWidth = 0;\n     boolean strokeOverFill = true;\n \n     reader.beginObject();\n@@ -55,7 +55,7 @@ private DocumentDataParser() {}\n           strokeColor = JsonUtils.jsonToColor(reader);\n           break;\n         case \"sw\":\n-          strokeWidth = reader.nextInt();\n+          strokeWidth = reader.nextDouble();\n           break;\n         case \"of\":\n           strokeOverFill = reader.nextBoolean();",
    "output": "Make text strokeWidth a double (#940)\n\n#397"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -31,6 +31,7 @@\n import org.json.JSONObject;\n \n import java.io.StringReader;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n@@ -85,6 +86,7 @@ public enum CacheStrategy {\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n   private boolean useHardwareLayer = false;\n+  private Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n \n   @Nullable private LottieTask compositionTask;\n   /** Can be null because it is created async */\n@@ -504,6 +506,11 @@ public void setComposition(@NonNull LottieComposition composition) {\n     setImageDrawable(lottieDrawable);\n \n     requestLayout();\n+\n+    for (LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener : lottieOnCompositionLoadedListeners) {\n+        lottieOnCompositionLoadedListener.onCompositionLoaded(composition);\n+    }\n+\n   }\n \n   @Nullable public LottieComposition getComposition() {\n@@ -808,18 +815,18 @@ public <T> void addValueCallback(KeyPath keyPath, T property,\n     });\n   }\n \n-    /**\n-     * Set the scale on the current composition. The only cost of this function is re-rendering the\n-     * current frame so you may call it frequent to scale something up or down.\n-     *\n-     * The smaller the animation is, the better the performance will be. You may find that scaling an\n-     * animation down then rendering it in a larger ImageView and letting ImageView scale it back up\n-     * with a scaleType such as centerInside will yield better performance with little perceivable\n-     * quality loss.\n-     *\n-     * You can also use a fixed view width/height in conjunction with the normal ImageView\n-     * scaleTypes centerCrop and centerInside.\n-     */\n+  /**\n+   * Set the scale on the current composition. The only cost of this function is re-rendering the\n+   * current frame so you may call it frequent to scale something up or down.\n+   *\n+   * The smaller the animation is, the better the performance will be. You may find that scaling an\n+   * animation down then rendering it in a larger ImageView and letting ImageView scale it back up\n+   * with a scaleType such as centerInside will yield better performance with little perceivable\n+   * quality loss.\n+   *\n+   * You can also use a fixed view width/height in conjunction with the normal ImageView\n+   * scaleTypes centerCrop and centerInside.\n+   */\n   public void setScale(float scale) {\n     lottieDrawable.setScale(scale);\n     if (getDrawable() == lottieDrawable) {\n@@ -891,6 +898,18 @@ private void enableOrDisableHardwareLayer() {\n     setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n   }\n \n+  public boolean addLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {\n+    return lottieOnCompositionLoadedListeners.add(lottieOnCompositionLoadedListener);\n+  }\n+\n+  public boolean removeLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {\n+    return lottieOnCompositionLoadedListeners.remove(lottieOnCompositionLoadedListener);\n+  }\n+\n+  public void removeAllLottieOnCompositionLoadedListener() {\n+    lottieOnCompositionLoadedListeners.clear();\n+  }\n+\n   private static class SavedState extends BaseSavedState {\n     String animationName;\n     int animationResId;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieOnCompositionLoadedListener.java b/lottie/src/main/java/com/airbnb/lottie/LottieOnCompositionLoadedListener.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieOnCompositionLoadedListener.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieOnCompositionLoadedListener.java\n@@ -0,0 +1,5 @@\n+package com.airbnb.lottie;\n+\n+public interface LottieOnCompositionLoadedListener {\n+  void onCompositionLoaded(LottieComposition composition);\n+}",
    "output": "Add on composition loaded listener (#928)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -42,7 +42,7 @@ public class LottieTask<T> {\n   private final Handler handler = new Handler(Looper.getMainLooper());\n   private final FutureTask<LottieResult<T>> task;\n \n-  @Nullable private LottieResult<T> result = null;\n+  @Nullable private volatile LottieResult<T> result = null;\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public LottieTask(Callable<LottieResult<T>> runnable) {\n@@ -80,14 +80,12 @@ private void setResult(@Nullable LottieResult<T> result) {\n    * Add a task listener. If the task has completed, the listener will be called synchronously.\n    * @return the task for call chaining.\n    */\n-  public LottieTask<T> addListener(LottieListener<T> listener) {\n+  public synchronized LottieTask<T> addListener(LottieListener<T> listener) {\n     if (result != null && result.getValue() != null) {\n       listener.onResult(result.getValue());\n     }\n \n-    synchronized (successListeners) {\n-      successListeners.add(listener);\n-    }\n+    successListeners.add(listener);\n     startTaskObserverIfNeeded();\n     return this;\n   }\n@@ -97,10 +95,8 @@ public LottieTask<T> addListener(LottieListener<T> listener) {\n    * a listener if neccesary.\n    * @return the task for call chaining.\n    */\n-  public LottieTask<T> removeListener(LottieListener<T> listener) {\n-    synchronized (successListeners) {\n-      successListeners.remove(listener);\n-    }\n+  public synchronized LottieTask<T> removeListener(LottieListener<T> listener) {\n+    successListeners.remove(listener);\n     stopTaskObserverIfNeeded();\n     return this;\n   }\n@@ -110,14 +106,12 @@ public LottieTask<T> removeListener(LottieListener<T> listener) {\n    * occurs. If an exception has already occurred, the listener will be called immediately.\n    * @return the task for call chaining.\n    */\n-  public LottieTask<T> addFailureListener(LottieListener<Throwable> listener) {\n+  public synchronized LottieTask<T> addFailureListener(LottieListener<Throwable> listener) {\n     if (result != null && result.getException() != null) {\n       listener.onResult(result.getException());\n     }\n \n-    synchronized (failureListeners) {\n-      failureListeners.add(listener);\n-    }\n+    failureListeners.add(listener);\n     startTaskObserverIfNeeded();\n     return this;\n   }\n@@ -127,10 +121,8 @@ public LottieTask<T> addFailureListener(LottieListener<Throwable> listener) {\n    * a listener if neccesary.\n    * @return the task for call chaining.\n    */\n-  public LottieTask<T> removeFailureListener(LottieListener<T> listener) {\n-    synchronized (failureListeners) {\n-      failureListeners.remove(listener);\n-    }\n+  public synchronized LottieTask<T> removeFailureListener(LottieListener<T> listener) {\n+    failureListeners.remove(listener);\n     stopTaskObserverIfNeeded();\n     return this;\n   }\n@@ -154,7 +146,7 @@ private void notifyListeners() {\n   }\n \n   private void notifySuccessListeners(T value) {\n-    // Allow listeners to remove themself in onResult.\n+    // Allows listeners to remove themselves in onResult.\n     // Otherwise we risk ConcurrentModificationException.\n     List<LottieListener<T>> listenersCopy = new ArrayList<>(successListeners);\n     for (LottieListener<T> l : listenersCopy) {\n@@ -163,7 +155,7 @@ private void notifySuccessListeners(T value) {\n   }\n \n   private void notifyFailureListeners(Throwable e) {\n-    // Allow listeners to remove themself in onResult.\n+    // Allows listeners to remove themselves in onResult.\n     // Otherwise we risk ConcurrentModificationException.\n     List<LottieListener<Throwable>> listenersCopy = new ArrayList<>(failureListeners);\n     if (listenersCopy.isEmpty()) {\n@@ -180,14 +172,16 @@ private void notifyFailureListeners(Throwable e) {\n    * We monitor the task with an observer thread to determine when it is done and should notify\n    * the appropriate listeners.\n    */\n-  private void startTaskObserverIfNeeded() {\n+  private synchronized void startTaskObserverIfNeeded() {\n     if (taskObserverAlive() || result != null) {\n       return;\n     }\n     taskObserver = new Thread(\"LottieTaskObserver\") {\n+      private boolean taskComplete = false;\n+\n       @Override public void run() {\n         while (true) {\n-          if (isInterrupted()) {\n+          if (isInterrupted() || taskComplete) {\n             return;\n           }\n           if (task.isDone()) {\n@@ -196,6 +190,7 @@ private void startTaskObserverIfNeeded() {\n             } catch (InterruptedException | ExecutionException e) {\n               setResult(new LottieResult<T>(e));\n             }\n+            taskComplete = true;\n             stopTaskObserverIfNeeded();\n           }\n         }\n@@ -208,7 +203,7 @@ private void startTaskObserverIfNeeded() {\n   /**\n    * We can stop observing the task if there are no more listeners or if the task is complete.\n    */\n-  private void stopTaskObserverIfNeeded() {\n+  private synchronized void stopTaskObserverIfNeeded() {\n     if (!taskObserverAlive()) {\n       return;\n     }",
    "output": "Synchronize task threading (#933)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -118,14 +118,13 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n \n   public void recycleBitmaps() {\n     synchronized (bitmapHashLock) {\n-      Iterator<Map.Entry<String, LottieImageAsset>> it = imageAssets.entrySet().iterator();\n-      while (it.hasNext()) {\n-        Map.Entry<String, LottieImageAsset> entry = it.next();\n-        Bitmap bitmap = entry.getValue().getBitmap();\n+      for (Map.Entry<String, LottieImageAsset> entry : imageAssets.entrySet()) {\n+        LottieImageAsset asset = entry.getValue();\n+        Bitmap bitmap = asset.getBitmap();\n         if (bitmap != null) {\n           bitmap.recycle();\n+          asset.setBitmap(null);\n         }\n-        it.remove();\n       }\n     }\n   }",
    "output": "fix recycle asset bitmap improperly (#935)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -3,7 +3,6 @@\n import android.graphics.Canvas;\n import android.graphics.Matrix;\n import android.graphics.RectF;\n-import android.os.Build;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n@@ -94,11 +93,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     for (int i = layers.size() - 1; i >= 0 ; i--) {\n       boolean nonEmptyClip = true;\n       if (!newClipRect.isEmpty()) {\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n-            nonEmptyClip = canvas.clipOutRect(newClipRect);\n-        } else {\n-            nonEmptyClip = canvas.clipRect(newClipRect);\n-        }\n+        nonEmptyClip = canvas.clipRect(newClipRect);\n       }\n       if (nonEmptyClip) {\n         BaseLayer layer = layers.get(i);",
    "output": "Revert \"CompositionLayer: Handle invalid Region.Op on Android Pie\" (#920)\n\n@bmc08gt\r\n\r\nReverts airbnb/lottie-android#919"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -326,6 +326,9 @@ public void useHardwareAcceleration() {\n    *    anything about that.\n    */\n   public void useHardwareAcceleration(boolean use) {\n+    if (useHardwareLayer == use) {\n+      return;\n+    }\n     useHardwareLayer = use;\n     enableOrDisableHardwareLayer();\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -132,6 +132,10 @@ public boolean enableMergePathsForKitKatAndAbove() {\n    * instead of using merge paths.\n    */\n   public void enableMergePathsForKitKatAndAbove(boolean enable) {\n+    if (enableMergePaths == enable) {\n+      return;\n+    }\n+\n     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n       Log.w(TAG, \"Merge paths are not supported pre-Kit Kat.\");\n       return;",
    "output": "Converted sample app to MvRx (#917)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -3,6 +3,7 @@\n import android.graphics.Canvas;\n import android.graphics.Matrix;\n import android.graphics.RectF;\n+import android.os.Build;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n@@ -93,7 +94,11 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     for (int i = layers.size() - 1; i >= 0 ; i--) {\n       boolean nonEmptyClip = true;\n       if (!newClipRect.isEmpty()) {\n-        nonEmptyClip = canvas.clipRect(newClipRect);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            nonEmptyClip = canvas.clipOutRect(newClipRect);\n+        } else {\n+            nonEmptyClip = canvas.clipRect(newClipRect);\n+        }\n       }\n       if (nonEmptyClip) {\n         BaseLayer layer = layers.get(i);",
    "output": "CompositionLayer: Add support for targetSdkVersion = 28 (#919)\n\n* clipRect is deprecated with a Region.Op other than Region.Op.INTERSECT and Region.Op.DIFFERENCE\r\n\r\nSigned-off-by: Brandon McAnsh <bmcansh@powerley.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieTask.java\n@@ -4,7 +4,6 @@\n import android.os.Looper;\n import android.support.annotation.Nullable;\n import android.support.annotation.RestrictTo;\n-import android.support.annotation.VisibleForTesting;\n import android.util.Log;\n \n import java.util.ArrayList;\n@@ -16,7 +15,6 @@\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.FutureTask;\n-import java.util.concurrent.ThreadPoolExecutor;\n \n /**\n  * Helper to run asynchronous tasks with a result.\n@@ -30,8 +28,11 @@ public class LottieTask<T> {\n   /**\n    * Set this to change the executor that LottieTasks are run on. This will be the executor that composition parsing and url\n    * fetching happens on.\n+   *\n+   * You may change this to run deserialization synchronously for testing.\n    */\n-  public final Executor EXECUTOR = Executors.newCachedThreadPool();\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public Executor EXECUTOR = Executors.newCachedThreadPool();\n \n   @Nullable private Thread taskObserver;\n ",
    "output": "Make EXECUTOR non-final (#916)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -66,25 +66,24 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n   }\n \n   @Nullable public Bitmap bitmapForId(String id) {\n-    Bitmap bitmap = imageAssets.get(id).getBitmap();\n+    LottieImageAsset asset = imageAssets.get(id);\n+    if (asset == null) {\n+      return null;\n+    }\n+    Bitmap bitmap = asset.getBitmap();\n     if (bitmap != null) {\n       return bitmap;\n     }\n \n-    LottieImageAsset imageAsset = imageAssets.get(id);\n-    if (imageAsset == null) {\n-      return null;\n-    }\n-\n     if (delegate != null) {\n-      bitmap = delegate.fetchBitmap(imageAsset);\n+      bitmap = delegate.fetchBitmap(asset);\n       if (bitmap != null) {\n         putBitmap(id, bitmap);\n       }\n       return bitmap;\n     }\n \n-    String filename = imageAsset.getFileName();\n+    String filename = asset.getFileName();\n     BitmapFactory.Options opts = new BitmapFactory.Options();\n     opts.inScaled = true;\n     opts.inDensity = 160;\n@@ -122,7 +121,10 @@ public void recycleBitmaps() {\n       Iterator<Map.Entry<String, LottieImageAsset>> it = imageAssets.entrySet().iterator();\n       while (it.hasNext()) {\n         Map.Entry<String, LottieImageAsset> entry = it.next();\n-        entry.getValue().getBitmap().recycle();\n+        Bitmap bitmap = entry.getValue().getBitmap();\n+        if (bitmap != null) {\n+          bitmap.recycle();\n+        }\n         it.remove();\n       }\n     }",
    "output": "Gracefully degrade when null bitmaps are set (#912)\n\nFixes #586\r\nFixes #900"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -114,6 +114,7 @@ private void init(@Nullable AttributeSet attrs) {\n     if (!isInEditMode()) {\n       boolean hasRawRes = ta.hasValue(R.styleable.LottieAnimationView_lottie_rawRes);\n       boolean hasFileName = ta.hasValue(R.styleable.LottieAnimationView_lottie_fileName);\n+      boolean hasUrl = ta.hasValue(R.styleable.LottieAnimationView_lottie_url);\n       if (hasRawRes && hasFileName) {\n         throw new IllegalArgumentException(\"lottie_rawRes and lottie_fileName cannot be used at \" +\n             \"the same time. Please use use only one at once.\");\n@@ -127,6 +128,11 @@ private void init(@Nullable AttributeSet attrs) {\n         if (fileName != null) {\n           setAnimation(fileName);\n         }\n+      } else if (hasUrl) {\n+        String url = ta.getString(R.styleable.LottieAnimationView_lottie_url);\n+        if (url != null) {\n+          setAnimationFromUrl(url);\n+        }\n       }\n     }\n     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n@@ -446,6 +452,22 @@ public void setAnimation(JsonReader reader, @Nullable String cacheKey) {\n         .addFailureListener(failureListener);\n   }\n \n+  /**\n+   * Load a lottie animation from a url. The url can be a json file or a zip file. Use a zip file if you have images. Simply zip them togethre and lottie\n+   * will unzip and link the images automatically.\n+   *\n+   * Under the hood, Lottie uses Java HttpURLConnection because it doesn't require any transitive networking dependencies. It will download the file\n+   * to the application cache under a temporary name. If the file successfully parses to a composition, it will rename the temporary file to one that\n+   * can be accessed immediately for subsequent requests. If the file does not parse to a composition, the temporary file will be deleted.\n+   */\n+  public void setAnimationFromUrl(String url) {\n+    clearComposition();\n+    cancelLoaderTask();\n+    compositionTask = LottieCompositionFactory.fromUrl(getContext(), url)\n+        .addListener(loadedListener)\n+        .addFailureListener(failureListener);\n+  }\n+\n   private void cancelLoaderTask() {\n     if (compositionTask != null) {\n       compositionTask.removeListener(loadedListener);",
    "output": "Added the ability to set a url on LottieAnimationView\n\nFixes #888"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java\n@@ -78,8 +78,8 @@ public PolystarContent(LottieDrawable lottieDrawable, BaseLayer layer,\n     outerRadiusAnimation.addUpdateListener(this);\n     outerRoundednessAnimation.addUpdateListener(this);\n     if (type == PolystarShape.Type.Star) {\n-      outerRadiusAnimation.addUpdateListener(this);\n-      outerRoundednessAnimation.addUpdateListener(this);\n+      innerRadiusAnimation.addUpdateListener(this);\n+      innerRoundednessAnimation.addUpdateListener(this);\n     }\n   }\n ",
    "output": "Update PolystarContent.java (#881)\n\nfix copy paste mistake"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -7,9 +7,11 @@\n import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.PointF;\n+import android.graphics.Rect;\n import android.graphics.drawable.ColorDrawable;\n import android.os.Environment;\n import android.support.annotation.Nullable;\n+import android.util.DisplayMetrics;\n import android.util.Log;\n import android.util.TypedValue;\n import android.view.ViewGroup;\n@@ -26,6 +28,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ThreadPoolExecutor;\n@@ -48,8 +51,7 @@ public class LottieSnapshotProvider extends SnapshotProvider {\n \n   LottieSnapshotProvider(Context context) {\n     this.context = context;\n-    dummyBitmap = BitmapFactory.decodeResource(context.getResources(), com.airbnb.lottie.samples.R\n-        .drawable.airbnb);\n+    dummyBitmap = BitmapFactory.decodeResource(context.getResources(), com.airbnb.lottie.samples.R.drawable.airbnb);\n   }\n \n   @Override\n@@ -92,6 +94,7 @@ private void snapshotAssets(String[] animations) {\n         continue;\n       }\n       remainingTasks += 1;\n+      Log.d(L.TAG, \"Enqueueing \" + animation);\n       executor.execute(new Runnable() {\n         @Override\n         public void run() {\n@@ -103,19 +106,24 @@ public void run() {\n   }\n \n   private void runAnimation(final String name) {\n+    Log.d(L.TAG, \"Running \" + name);\n     LottieResult<LottieComposition> result = LottieCompositionFactory.fromAssetSync(context, name);\n     if (result.getException() != null) throw new IllegalStateException(result.getException());\n     LottieComposition composition = result.getValue();\n-    if (composition.getBounds().width() > 4 * Resources.getSystem().getDisplayMetrics().widthPixels ||\n-        composition.getBounds().height() > 4 * Resources.getSystem().getDisplayMetrics().heightPixels) {\n-      Log.d(\"Happo\", \"\" + name + \" is too large. Skipping (\" + composition.getBounds().width() +\n-          \"x\" + composition.getBounds().height() + \")\");\n+\n+    Rect bounds = composition.getBounds();\n+    int width = bounds.width();\n+    int height = bounds.height();\n+    DisplayMetrics displayMetrics = Resources.getSystem().getDisplayMetrics();\n+    if (width > 4 * displayMetrics.widthPixels || height > 4 * displayMetrics.heightPixels) {\n+      Log.d(\"Happo\", name + \" is too large. Skipping (\" + width + \"x\" + height + \")\");\n       return;\n     }\n     drawComposition(composition, name);\n   }\n \n   private void drawComposition(LottieComposition composition, String name) {\n+    Log.d(L.TAG, \"Drawing \" + name);\n     LottieAnimationView view = new LottieAnimationView(context);\n     view.setImageAssetDelegate(new ImageAssetDelegate() {\n       @Override public Bitmap fetchBitmap(LottieImageAsset asset) {\n@@ -125,6 +133,7 @@ private void drawComposition(LottieComposition composition, String name) {\n     view.setComposition(composition);\n     for (float progress : PROGRESS) {\n       view.setProgress(progress);\n+      Log.d(L.TAG, \"Recording \" + name + \" @ \" + progress);\n       recordSnapshot(view, 1080, \"android\", name, Integer.toString((int) (progress * 100)));\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -4,20 +4,35 @@\n import android.support.v4.os.TraceCompat;\n import android.util.Log;\n \n+import java.util.HashSet;\n+import java.util.Set;\n+\n @RestrictTo(RestrictTo.Scope.LIBRARY)\n public class L {\n   public static final String TAG = \"LOTTIE\";\n   public static final boolean DBG = false;\n \n+  /**\n+   * Set to ensure that we only log each message one time max.\n+   */\n+  private static final Set<String> loggedMessages = new HashSet<>();\n+\n   private static final int MAX_DEPTH = 20;\n   private static boolean traceEnabled = false;\n   private static String[] sections;\n   private static long[] startTimeNs;\n   private static int traceDepth = 0;\n   private static int depthPastMaxDepth = 0;\n \n+  /**\n+   * Warn to logcat. Keeps track of messages so they are only logged once ever.\n+   */\n   public static void warn(String msg) {\n+    if (loggedMessages.contains(msg)) {\n+      return;\n+    }\n     Log.w(TAG, msg);\n+    loggedMessages.add(msg);\n   }\n \n   public static void setTraceEnabled(boolean enabled) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n@@ -2,7 +2,9 @@\n \n import android.graphics.PointF;\n import android.support.annotation.FloatRange;\n+import android.util.Log;\n \n+import com.airbnb.lottie.L;\n import com.airbnb.lottie.model.CubicCurveData;\n import com.airbnb.lottie.utils.MiscUtils;\n \n@@ -49,14 +51,15 @@ public void interpolateBetween(ShapeData shapeData1, ShapeData shapeData2,\n     }\n     closed = shapeData1.isClosed() || shapeData2.isClosed();\n \n-    if (!curves.isEmpty() && curves.size() != shapeData1.getCurves().size()\n-        && curves.size() != shapeData2.getCurves().size()) {\n-      throw new IllegalStateException(\"Curves must have the same number of control points. This: \"\n-          + getCurves().size()\n-          + \"\\tShape 1: \" + shapeData1.getCurves().size() + \"\\tShape 2: \"\n-          + shapeData2.getCurves().size());\n-    } else if (curves.isEmpty()) {\n-      for (int i = shapeData1.getCurves().size() - 1; i >= 0; i--) {\n+\n+    if (shapeData1.getCurves().size() != shapeData2.getCurves().size()) {\n+      L.warn(\"Curves must have the same number of control points. Shape 1: \" +\n+          shapeData1.getCurves().size() + \"\\tShape 2: \" + shapeData2.getCurves().size());\n+    }\n+    \n+    if (curves.isEmpty()) {\n+      int points = Math.min(shapeData1.getCurves().size(), shapeData2.getCurves().size());\n+      for (int i = 0; i < points; i++) {\n         curves.add(new CubicCurveData());\n       }\n     }",
    "output": "Allow shapes with different point counts but warn (#865)\n\nPreviously, Lottie would crash and not even try to render animations with shapes that had a different number of vertices. Now Lottie logs a warnings but renders the first n points where n is the min number of points between the two shapes.\r\n\r\nFixes #856"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -100,6 +100,7 @@ public void run() {\n   }\n \n   private void runAnimation(final String name) {\n+    Log.d(L.TAG, \"Running name\");\n     LottieComposition composition = LottieComposition.Factory.fromFileSync(context, name);\n     if (composition.getBounds().width() > 4 * Resources.getSystem().getDisplayMetrics().widthPixels ||\n         composition.getBounds().height() > 4 * Resources.getSystem().getDisplayMetrics().heightPixels) {\n@@ -131,6 +132,7 @@ public void stopSnapshotting() {\n \n   private void decrementAndCompleteIfDone() {\n     remainingTasks--;\n+    Log.d(L.TAG, \"There are \" + remainingTasks + \" tasks left.\");\n     Log.d(\"Happo\", \"There are \" + remainingTasks + \" remaining tasks.\");\n     if (remainingTasks < 0) {\n       throw new IllegalStateException(\"Remaining tasks cannot be negative.\");",
    "output": "Added logging for happo tests (#855)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -159,11 +159,11 @@ private void invalidateSelf() {\n   }\n \n   @SuppressLint(\"WrongConstant\")\n-  private void saveLayerCompat(Canvas canvas, RectF rect, Paint paint) { \n+  private void saveLayerCompat(Canvas canvas, RectF rect, Paint paint, boolean all) {\n     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n       // This method was deprecated in API level 26 and not recommented since 22, but its\n       // 2-parameter replacement is only available starting at API level 21.\n-      canvas.saveLayer(rect, paint, SAVE_FLAGS);\n+      canvas.saveLayer(rect, paint, all ? Canvas.ALL_SAVE_FLAG : SAVE_FLAGS);\n     } else {\n       canvas.saveLayer(rect, paint);\n     }\n@@ -216,7 +216,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.endSection(\"Layer#computeBounds\");\n \n     L.beginSection(\"Layer#saveLayer\");\n-    saveLayerCompat(canvas, rect, contentPaint);\n+    saveLayerCompat(canvas, rect, contentPaint, true);\n     L.endSection(\"Layer#saveLayer\");\n \n     // Clear the off screen buffer. This is necessary for some phones.\n@@ -232,7 +232,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     if (hasMatteOnThisLayer()) {\n       L.beginSection(\"Layer#drawMatte\");\n       L.beginSection(\"Layer#saveLayer\");\n-      saveLayerCompat(canvas, rect, mattePaint);\n+      saveLayerCompat(canvas, rect, mattePaint, false);\n       L.endSection(\"Layer#saveLayer\");\n       clearCanvas(canvas);\n       //noinspection ConstantConditions\n@@ -370,7 +370,7 @@ private void applyMasks(Canvas canvas, Matrix matrix,\n \n     L.beginSection(\"Layer#drawMask\");\n     L.beginSection(\"Layer#saveLayer\");\n-    saveLayerCompat(canvas, rect, paint);\n+    saveLayerCompat(canvas, rect, paint, false);\n     L.endSection(\"Layer#saveLayer\");\n     clearCanvas(canvas);\n ",
    "output": "Fixing issues in Lollipop introduced by #748 (#824)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -37,8 +37,6 @@ public abstract class BaseLayer\n   private static final int SAVE_FLAGS = Canvas.CLIP_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG |\n       Canvas.MATRIX_SAVE_FLAG;\n \n-  private static boolean hasLoggedIntersectMasks = false;\n-\n   @Nullable\n   static BaseLayer forModel(\n     Layer layerModel, LottieDrawable drawable, LottieComposition composition) {\n@@ -349,11 +347,6 @@ private void applyMasks(Canvas canvas, Matrix matrix,\n         paint = subtractMaskPaint;\n         break;\n       case MaskModeIntersect:\n-        if (!hasLoggedIntersectMasks) {\n-          Log.w(L.TAG, \"Animation contains intersect masks. They are not supported but will be \" +\n-                  \"treated like add masks.\");\n-          hasLoggedIntersectMasks = true;\n-        }\n       case MaskModeAdd:\n       default:\n         // As a hack, we treat all non-subtract masks like add masks. This is not correct but it's\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java\n@@ -34,6 +34,8 @@ static Mask parse(\n               maskMode = Mask.MaskMode.MaskModeSubtract;\n               break;\n             case \"i\":\n+              composition.addWarning(\n+                  \"Animation contains intersect masks. They are not supported but will be treated like add masks.\");\n               maskMode = Mask.MaskMode.MaskModeIntersect;\n               break;\n             default:",
    "output": "Add an intersect mask warning at parse time (#841)\n\nFixes #784"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -107,7 +107,8 @@ static BaseLayer forModel(\n     if (layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {\n       this.mask = new MaskKeyframeAnimation(layerModel.getMasks());\n       for (BaseKeyframeAnimation<?, Path> animation : mask.getMaskAnimations()) {\n-        addAnimation(animation);\n+        // Don't call addAnimation() because progress gets set manually in setProgress to\n+        // properly handle time scale.\n         animation.addUpdateListener(this);\n       }\n       for (BaseKeyframeAnimation<Integer, Integer> animation : mask.getOpacityAnimations()) {\n@@ -416,6 +417,11 @@ private void setVisible(boolean visible) {\n   void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     // Time stretch should not be applied to the layer transform.\n     transform.setProgress(progress);\n+    if (mask != null) {\n+      for (int i = 0; i < mask.getMaskAnimations().size(); i++) {\n+        mask.getMaskAnimations().get(i).setProgress(progress);\n+      }\n+    }\n     if (layerModel.getTimeStretch() != 0) {\n       progress /= layerModel.getTimeStretch();\n     }",
    "output": "Fixed for time stretch applying to masks twice (#842)\n\nSince masks are inside layers, they should not have the time stretch double applied to them.\r\n\r\nFixes #825"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -15,6 +15,7 @@\n import com.airbnb.lottie.LottieDrawable;\n import com.airbnb.lottie.LottieProperty;\n import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;\n+import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;\n import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;\n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.model.animatable.AnimatableFloatValue;\n@@ -50,14 +51,15 @@ public abstract class BaseStrokeContent\n   @Nullable private BaseKeyframeAnimation<ColorFilter, ColorFilter> colorFilterAnimation;\n \n   BaseStrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, Paint.Cap cap,\n-      Paint.Join join, AnimatableIntegerValue opacity, AnimatableFloatValue width,\n+      Paint.Join join, float miterLimit, AnimatableIntegerValue opacity, AnimatableFloatValue width,\n       List<AnimatableFloatValue> dashPattern, AnimatableFloatValue offset) {\n     this.lottieDrawable = lottieDrawable;\n     this.layer = layer;\n \n     paint.setStyle(Paint.Style.STROKE);\n     paint.setStrokeCap(cap);\n     paint.setStrokeJoin(join);\n+    paint.setStrokeMiter(miterLimit);\n \n     opacityAnimation = opacity.createAnimation();\n     widthAnimation = width.createAnimation();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java\n@@ -36,8 +36,8 @@ public class GradientStrokeContent extends BaseStrokeContent {\n   public GradientStrokeContent(\n       final LottieDrawable lottieDrawable, BaseLayer layer, GradientStroke stroke) {\n     super(lottieDrawable, layer, stroke.getCapType().toPaintCap(),\n-        stroke.getJoinType().toPaintJoin(), stroke.getOpacity(), stroke.getWidth(),\n-        stroke.getLineDashPattern(), stroke.getDashOffset());\n+        stroke.getJoinType().toPaintJoin(), stroke.getMiterLimit(), stroke.getOpacity(),\n+        stroke.getWidth(), stroke.getLineDashPattern(), stroke.getDashOffset());\n \n     name = stroke.getName();\n     type = stroke.getGradientType();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java\n@@ -24,8 +24,8 @@ public class StrokeContent extends BaseStrokeContent {\n \n   public StrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeStroke stroke) {\n     super(lottieDrawable, layer, stroke.getCapType().toPaintCap(),\n-        stroke.getJoinType().toPaintJoin(), stroke.getOpacity(), stroke.getWidth(),\n-        stroke.getLineDashPattern(), stroke.getDashOffset());\n+        stroke.getJoinType().toPaintJoin(), stroke.getMiterLimit(), stroke.getOpacity(),\n+        stroke.getWidth(), stroke.getLineDashPattern(), stroke.getDashOffset());\n     this.layer = layer;\n     name = stroke.getName();\n     colorAnimation = stroke.getColor().createAnimation();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientStroke.java b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientStroke.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/GradientStroke.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/GradientStroke.java\n@@ -24,14 +24,16 @@ public class GradientStroke implements ContentModel {\n   private final AnimatableFloatValue width;\n   private final ShapeStroke.LineCapType capType;\n   private final ShapeStroke.LineJoinType joinType;\n+  private final float miterLimit;\n   private final List<AnimatableFloatValue> lineDashPattern;\n   @Nullable private final AnimatableFloatValue dashOffset;\n \n   public GradientStroke(String name, GradientType gradientType,\n       AnimatableGradientColorValue gradientColor,\n       AnimatableIntegerValue opacity, AnimatablePointValue startPoint,\n       AnimatablePointValue endPoint, AnimatableFloatValue width, ShapeStroke.LineCapType capType,\n-      ShapeStroke.LineJoinType joinType, List<AnimatableFloatValue> lineDashPattern,\n+      ShapeStroke.LineJoinType joinType, float miterLimit,\n+      List<AnimatableFloatValue> lineDashPattern,\n       @Nullable AnimatableFloatValue dashOffset) {\n     this.name = name;\n     this.gradientType = gradientType;\n@@ -42,6 +44,7 @@ public GradientStroke(String name, GradientType gradientType,\n     this.width = width;\n     this.capType = capType;\n     this.joinType = joinType;\n+    this.miterLimit = miterLimit;\n     this.lineDashPattern = lineDashPattern;\n     this.dashOffset = dashOffset;\n   }\n@@ -90,6 +93,10 @@ public List<AnimatableFloatValue> getLineDashPattern() {\n     return dashOffset;\n   }\n \n+  public float getMiterLimit() {\n+    return miterLimit;\n+  }\n+\n   @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {\n     return new GradientStrokeContent(drawable, layer, this);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java\n@@ -58,11 +58,12 @@ public Paint.Join toPaintJoin() {\n   private final AnimatableFloatValue width;\n   private final LineCapType capType;\n   private final LineJoinType joinType;\n+  private final float miterLimit;\n \n   public ShapeStroke(String name, @Nullable AnimatableFloatValue offset,\n       List<AnimatableFloatValue> lineDashPattern, AnimatableColorValue color,\n       AnimatableIntegerValue opacity, AnimatableFloatValue width, LineCapType capType,\n-      LineJoinType joinType) {\n+      LineJoinType joinType, float miterLimit) {\n     this.name = name;\n     this.offset = offset;\n     this.lineDashPattern = lineDashPattern;\n@@ -71,6 +72,7 @@ public ShapeStroke(String name, @Nullable AnimatableFloatValue offset,\n     this.width = width;\n     this.capType = capType;\n     this.joinType = joinType;\n+    this.miterLimit = miterLimit;\n   }\n \n   @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {\n@@ -108,4 +110,8 @@ public LineCapType getCapType() {\n   public LineJoinType getJoinType() {\n     return joinType;\n   }\n+\n+  public float getMiterLimit() {\n+    return miterLimit;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientStrokeParser.java\n@@ -31,6 +31,7 @@ static GradientStroke parse(\n     ShapeStroke.LineCapType capType = null;\n     ShapeStroke.LineJoinType joinType = null;\n     AnimatableFloatValue offset = null;\n+    float miterLimit = 0f;\n \n \n     List<AnimatableFloatValue> lineDashPattern = new ArrayList<>();\n@@ -78,6 +79,9 @@ static GradientStroke parse(\n         case \"lj\":\n           joinType = ShapeStroke.LineJoinType.values()[reader.nextInt() - 1];\n           break;\n+        case \"ml\":\n+          miterLimit = (float) reader.nextDouble();\n+          break;\n         case \"d\":\n           reader.beginArray();\n           while (reader.hasNext()) {\n@@ -117,6 +121,6 @@ static GradientStroke parse(\n \n     return new GradientStroke(\n         name, gradientType, color, opacity, startPoint, endPoint, width, capType, joinType,\n-        lineDashPattern, offset);\n+        miterLimit, lineDashPattern, offset);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ShapeStrokeParser.java\n@@ -25,6 +25,7 @@ static ShapeStroke parse(\n     ShapeStroke.LineCapType capType = null;\n     ShapeStroke.LineJoinType joinType = null;\n     AnimatableFloatValue offset = null;\n+    float miterLimit = 0f;\n \n     List<AnimatableFloatValue> lineDashPattern = new ArrayList<>();\n \n@@ -48,6 +49,9 @@ static ShapeStroke parse(\n         case \"lj\":\n           joinType = ShapeStroke.LineJoinType.values()[reader.nextInt() - 1];\n           break;\n+        case \"ml\":\n+          miterLimit =  (float) reader.nextDouble();\n+          break;\n         case \"d\":\n           reader.beginArray();\n           while (reader.hasNext()) {\n@@ -92,6 +96,6 @@ static ShapeStroke parse(\n     }\n \n     return new ShapeStroke(\n-        name, offset, lineDashPattern, color, opacity, width, capType, joinType);\n+        name, offset, lineDashPattern, color, opacity, width, capType, joinType, miterLimit);\n   }\n }",
    "output": "Added support for miter limit (#839)\n\nFixes #797"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -373,7 +373,12 @@ public void resumeAnimation() {\n    */\n   public void setMinFrame(final int minFrame) {\n     if (composition == null) {\n-      lazyCompositionTasks.add(c -> setMinFrame(minFrame));\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override\n+        public void run(LottieComposition composition) {\n+          setMinFrame(minFrame);\n+        }\n+      });\n       return;\n     }\n     animator.setMinFrame(minFrame);\n@@ -406,7 +411,12 @@ public void setMinProgress(final float minProgress) {\n    */\n   public void setMaxFrame(final int maxFrame) {\n     if (composition == null) {\n-      lazyCompositionTasks.add(c -> setMaxFrame(maxFrame));\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override\n+        public void run(LottieComposition composition) {\n+          setMaxFrame(maxFrame);\n+        }\n+      });\n       return;\n     }\n     animator.setMaxFrame(maxFrame);\n@@ -438,9 +448,14 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre\n    * @see #setMinFrame(int)\n    * @see #setMaxFrame(int)\n    */\n-  public void setMinAndMaxFrame(int minFrame, int maxFrame) {\n+  public void setMinAndMaxFrame(final int minFrame, final int maxFrame) {\n     if (composition == null) {\n-      lazyCompositionTasks.add(c -> setMinAndMaxFrame(minFrame, maxFrame));\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override\n+        public void run(LottieComposition composition) {\n+          setMinAndMaxFrame(minFrame, maxFrame);\n+        }\n+      });\n       return;\n     }\n     animator.setMinAndMaxFrames(minFrame, maxFrame);",
    "output": "Reverted some remaining java 8 blocks"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -162,7 +162,7 @@ public void setMaxFrame(int maxFrame) {\n   }\n \n   public void setMinAndMaxFrames(int minFrame, int maxFrame) {\n-    float compositionMinFrame = composition == null ? Float.MIN_VALUE : composition.getStartFrame();\n+    float compositionMinFrame = composition == null ? -Float.MAX_VALUE : composition.getStartFrame();\n     float compositionMaxFrame = composition == null ? Float.MAX_VALUE : composition.getEndFrame();\n     this.minFrame = MiscUtils.clamp(minFrame, compositionMinFrame, compositionMaxFrame);\n     this.maxFrame = MiscUtils.clamp(maxFrame, compositionMinFrame, compositionMaxFrame);",
    "output": "Use -Float.MAX_VALUE instead of Float.MIN_VALUE (#820)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java\n@@ -30,7 +30,7 @@ public class ImageLayer extends BaseLayer {\n \n   @Override public void drawLayer(@NonNull Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     Bitmap bitmap = getBitmap();\n-    if (bitmap == null) {\n+    if (bitmap == null || bitmap.isRecycled()) {\n       return;\n     }\n     float density = Utils.dpScale();",
    "output": "Update ImageLayer.java (#828)\n\nUse a recycled bitmap may produce a crash"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -364,6 +364,10 @@ public void resumeAnimation() {\n    * Sets the minimum frame that the animation will start from when playing or looping.\n    */\n   public void setMinFrame(final int minFrame) {\n+    if (composition == null) {\n+      lazyCompositionTasks.add(c -> setMinFrame(minFrame));\n+      return;\n+    }\n     animator.setMinFrame(minFrame);\n   }\n \n@@ -389,6 +393,10 @@ public void setMinProgress(final float minProgress) {\n    * Sets the maximum frame that the animation will end at when playing or looping.\n    */\n   public void setMaxFrame(final int maxFrame) {\n+    if (composition == null) {\n+      lazyCompositionTasks.add(c -> setMaxFrame(maxFrame));\n+      return;\n+    }\n     animator.setMaxFrame(maxFrame);\n   }\n \n@@ -415,6 +423,10 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre\n    * @see #setMaxFrame(int)\n    */\n   public void setMinAndMaxFrame(int minFrame, int maxFrame) {\n+    if (composition == null) {\n+      lazyCompositionTasks.add(c -> setMinAndMaxFrame(minFrame, maxFrame));\n+      return;\n+    }\n     animator.setMinAndMaxFrames(minFrame, maxFrame);\n   }\n ",
    "output": "fix min & max frame not apply to loaded composition (#827)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -23,7 +23,7 @@ public class LottieValueAnimator extends BaseLottieAnimator implements Choreogra\n   private float minFrame = Integer.MIN_VALUE;\n   private float maxFrame = Integer.MAX_VALUE;\n   @Nullable private LottieComposition composition;\n-  @VisibleForTesting protected boolean isRunning = false;\n+  @VisibleForTesting protected boolean running = false;\n \n   public LottieValueAnimator() {\n   }\n@@ -72,7 +72,7 @@ public float getFrame() {\n   }\n \n   @Override public boolean isRunning() {\n-    return isRunning;\n+    return running;\n   }\n \n   @Override public void doFrame(long frameTimeNanos) {\n@@ -193,6 +193,7 @@ public float getSpeed() {\n   }\n \n   public void playAnimation() {\n+    running = true;\n     notifyStart(isReversed());\n     setFrame((int) (isReversed() ? getMaxFrame() : getMinFrame()));\n     lastFrameTimeNs = System.nanoTime();\n@@ -210,6 +211,7 @@ public void pauseAnimation() {\n   }\n \n   public void resumeAnimation() {\n+    running = true;\n     postFrameCallback();\n     lastFrameTimeNs = System.nanoTime();\n     if (isReversed() && getFrame() == getMinFrame()) {\n@@ -243,14 +245,21 @@ public float getMaxFrame() {\n   }\n \n   protected void postFrameCallback() {\n-    removeFrameCallback();\n-    Choreographer.getInstance().postFrameCallback(this);\n-    isRunning = true;\n+    if (isRunning()) {\n+      removeFrameCallback(false);\n+      Choreographer.getInstance().postFrameCallback(this);\n+    }\n   }\n \n   protected void removeFrameCallback() {\n+    this.removeFrameCallback(true);\n+  }\n+\n+  protected void removeFrameCallback(boolean stopRunning) {\n     Choreographer.getInstance().removeFrameCallback(this);\n-    isRunning = false;\n+    if (stopRunning) {\n+      running = false;\n+    }\n   }\n \n   private void verifyFrame() {\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -55,11 +55,11 @@ private LottieValueAnimator createAnimator() {\n     // Choreographer#postFrameCallback hangs with robolectric.\n     return new LottieValueAnimator() {\n       @Override public void postFrameCallback() {\n-        isRunning = true;\n+        running = true;\n       }\n \n       @Override public void removeFrameCallback() {\n-        isRunning = false;\n+        running = false;\n       }\n     };\n   }",
    "output": "Fixed danglign choreographer callback. (#775)\n\n**This patch fixes the performance issue.**\r\n\r\nI've seen the cases where the previous version of the code was re-adding callbacks to the choreographer in case of cancelation/pause. Now it is designed to make it impossible. It looks like there is a copy of the callbacks stored somewhere in the stack. I've been able to reproduce the problem on Android 6.0 and 7.0.\r\n\r\nThis issue caused application performance degradation and battery drain in the background for us."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -8,6 +8,7 @@\n import android.graphics.PorterDuff;\n import android.graphics.PorterDuffXfermode;\n import android.graphics.RectF;\n+import android.os.Build;\n import android.support.annotation.CallSuper;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n@@ -158,6 +159,17 @@ private void invalidateSelf() {\n     lottieDrawable.invalidateSelf();\n   }\n \n+  @SuppressLint(\"WrongConstant\")\n+  private void saveLayerCompat(Canvas canvas, RectF rect, Paint paint) { \n+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n+      // This method was deprecated in API level 26 and not recommented since 22, but its\n+      // 2-parameter replacement is only available starting at API level 21.\n+      canvas.saveLayer(rect, paint, SAVE_FLAGS);\n+    } else {\n+      canvas.saveLayer(rect, paint);\n+    }\n+  }\n+\n   public void addAnimation(BaseKeyframeAnimation<?, ?> newAnimation) {\n     animations.add(newAnimation);\n   }\n@@ -167,7 +179,7 @@ public void addAnimation(BaseKeyframeAnimation<?, ?> newAnimation) {\n     boundsMatrix.preConcat(transform.getMatrix());\n   }\n \n-  @SuppressLint(\"WrongConstant\") @Override\n+  @Override\n   public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(drawTraceName);\n     if (!visible) {\n@@ -205,7 +217,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.endSection(\"Layer#computeBounds\");\n \n     L.beginSection(\"Layer#saveLayer\");\n-    canvas.saveLayer(rect, contentPaint, Canvas.ALL_SAVE_FLAG);\n+    saveLayerCompat(canvas, rect, contentPaint);\n     L.endSection(\"Layer#saveLayer\");\n \n     // Clear the off screen buffer. This is necessary for some phones.\n@@ -221,7 +233,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     if (hasMatteOnThisLayer()) {\n       L.beginSection(\"Layer#drawMatte\");\n       L.beginSection(\"Layer#saveLayer\");\n-      canvas.saveLayer(rect, mattePaint, SAVE_FLAGS);\n+      saveLayerCompat(canvas, rect, mattePaint);\n       L.endSection(\"Layer#saveLayer\");\n       clearCanvas(canvas);\n       //noinspection ConstantConditions\n@@ -328,7 +340,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n     applyMasks(canvas, matrix, Mask.MaskMode.MaskModeSubtract);\n   }\n \n-  @SuppressLint(\"WrongConstant\") private void applyMasks(Canvas canvas, Matrix matrix,\n+  private void applyMasks(Canvas canvas, Matrix matrix,\n       Mask.MaskMode maskMode) {\n     Paint paint;\n     switch (maskMode) {\n@@ -364,7 +376,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n \n     L.beginSection(\"Layer#drawMask\");\n     L.beginSection(\"Layer#saveLayer\");\n-    canvas.saveLayer(rect, paint, SAVE_FLAGS);\n+    saveLayerCompat(canvas, rect, paint);\n     L.endSection(\"Layer#saveLayer\");\n     clearCanvas(canvas);\n ",
    "output": "Move to using only ALL_SAVE_FLAG with Canvas.saveLayer API (#748)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -136,7 +136,7 @@ private void init(@Nullable AttributeSet attrs) {\n       }\n     }\n     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n-      lottieDrawable.playAnimation();\n+      wasAnimatingWhenDetached = true;\n       autoPlay = true;\n     }\n ",
    "output": "Prevent autoPlay from playing an animation before it is attached to a window\n\nFixes #762"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -535,6 +535,15 @@ private void testStartEndFrameWithStartEndProgress() {\n     view.setMaxProgress(1f);\n     view.setProgress(1f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 1\", params);\n+\n+    composition = LottieComposition.Factory.fromFileSync(context, \"Tests/EndFrame.json\");\n+    view = new LottieAnimationView(context);\n+    view.setComposition(composition);\n+    view.setFrame(29);\n+    recordSnapshot(view, 1080, \"android\", \"EndFrame\", \"End Frame (red)\", params);\n+    view.setFrame(30);\n+    recordSnapshot(view, 1080, \"android\", \"EndFrame\", \"End Frame (blue)\", params);\n+\n   }\n \n   private int dpToPx(int dp) {",
    "output": "Added an end frame test (#765)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -449,10 +449,9 @@ public void setMinAndMaxProgress(\n       });\n       return;\n     }\n-    setMinAndMaxFrame(\n-        (int) (minProgress * composition.getDurationFrames()),\n-        (int) (maxProgress * composition.getDurationFrames())\n-    );\n+\n+    setMinAndMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), minProgress),\n+                      (int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));\n   }\n \n   /**\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -35,11 +35,11 @@ private LottieComposition createComposition(int startFrame, int endFrame) {\n \n   @Test\n   public void testMinFrame() {\n-    LottieComposition composition = createComposition(0, 200);\n+    LottieComposition composition = createComposition(31, 391);\n     LottieDrawable drawable = new LottieDrawable();\n     drawable.setComposition(composition);\n-    drawable.setMinProgress(0.5f);\n-    assertEquals(100f, drawable.getMinFrame());\n+    drawable.setMinProgress(0.42f);\n+    assertEquals(182f, drawable.getMinFrame());\n   }\n \n   @Test\n@@ -53,10 +53,20 @@ public void testMinWithStartFrameFrame() {\n \n   @Test\n   public void testMaxFrame() {\n-    LottieComposition composition = createComposition(0, 200);\n+    LottieComposition composition = createComposition(31, 391);\n+    LottieDrawable drawable = new LottieDrawable();\n+    drawable.setComposition(composition);\n+    drawable.setMaxProgress(0.25f);\n+    assertEquals(121f, drawable.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void testMinMaxFrame() {\n+    LottieComposition composition = createComposition(31, 391);\n     LottieDrawable drawable = new LottieDrawable();\n     drawable.setComposition(composition);\n-    drawable.setMaxProgress(0.5f);\n-    assertEquals(100f, drawable.getMaxFrame());\n+    drawable.setMinAndMaxProgress(0.25f, 0.42f);\n+    assertEquals(121f, drawable.getMinFrame());\n+    assertEquals(182f, drawable.getMaxFrame());\n   }\n }",
    "output": "Use lerp calculation to get the min and max frame. (#764)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -511,12 +511,16 @@ private void testStartEndFrameWithStartEndProgress() {\n     ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\n         ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n     view.setMinProgress(0f);\n+    view.setProgress(0f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 0\", params);\n     view.setMinProgress(0.25f);\n+    view.setProgress(0f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 0.25\", params);\n     view.setMinProgress(0.75f);\n+    view.setProgress(0f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 0.75\", params);\n-    view.setMinProgress(0.1f);\n+    view.setMinProgress(1f);\n+    view.setProgress(0f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 1\", params);\n \n     view.setMaxProgress(0f);\n@@ -528,7 +532,7 @@ private void testStartEndFrameWithStartEndProgress() {\n     view.setMaxProgress(0.75f);\n     view.setProgress(1f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 0.75\", params);\n-    view.setMaxProgress(0.1f);\n+    view.setMaxProgress(1f);\n     view.setProgress(1f);\n     recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 1\", params);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -394,7 +394,7 @@ public void setMinProgress(final float minProgress) {\n        });\n        return;\n      }\n-   setMinFrame((int) MiscUtils.lerp(minProgress, composition.getStartFrame(), composition.getEndFrame()));\n+   setMinFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), minProgress));\n   }\n \n   /**\n@@ -423,7 +423,7 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre\n       });\n       return;\n     }\n-    setMaxFrame((int) MiscUtils.lerp(maxProgress, composition.getStartFrame(), composition.getEndFrame()));\n+    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -21,6 +21,8 @@\n import java.util.Map;\n \n public class ImageAssetManager {\n+  private static final Object bitmapHashLock = new Object();\n+\n   private final Context context;\n   private String imagesFolder;\n   @Nullable private ImageAssetDelegate delegate;\n@@ -58,7 +60,7 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     if (bitmap == null) {\n       return bitmaps.remove(id);\n     }\n-    return bitmaps.put(id, bitmap);\n+    return putBitmap(id, bitmap);\n   }\n \n   @Nullable public Bitmap bitmapForId(String id) {\n@@ -75,7 +77,7 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     if (delegate != null) {\n       bitmap = delegate.fetchBitmap(imageAsset);\n       if (bitmap != null) {\n-        bitmaps.put(id, bitmap);\n+        putBitmap(id, bitmap);\n       }\n       return bitmap;\n     }\n@@ -95,7 +97,7 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n         return null;\n       }\n       bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n-      return bitmaps.put(id, bitmap);\n+      return putBitmap(id, bitmap);\n     }\n \n     InputStream is;\n@@ -110,20 +112,28 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n       return null;\n     }\n     bitmap = BitmapFactory.decodeStream(is, null, opts);\n-    return bitmaps.put(id, bitmap);\n+    return putBitmap(id, bitmap);\n   }\n \n   public void recycleBitmaps() {\n-    Iterator<Map.Entry<String, Bitmap>> it = bitmaps.entrySet().iterator();\n-    while (it.hasNext()) {\n-      Map.Entry<String, Bitmap> entry = it.next();\n-      entry.getValue().recycle();\n-      it.remove();\n+    synchronized (bitmapHashLock) {\n+      Iterator<Map.Entry<String, Bitmap>> it = bitmaps.entrySet().iterator();\n+      while (it.hasNext()) {\n+        Map.Entry<String, Bitmap> entry = it.next();\n+        entry.getValue().recycle();\n+        it.remove();\n+      }\n     }\n   }\n \n   public boolean hasSameContext(Context context) {\n     return context == null && this.context == null ||\n         context != null && this.context.equals(context);\n   }\n+\n+  private Bitmap putBitmap(String key, @Nullable Bitmap bitmap) {\n+    synchronized (bitmapHashLock) {\n+      return bitmaps.put(key, bitmap);\n+    }\n+  }\n }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java\n@@ -0,0 +1,62 @@\n+package com.airbnb.lottie;\n+\n+import android.graphics.Rect;\n+import android.support.v4.util.LongSparseArray;\n+import android.support.v4.util.SparseArrayCompat;\n+\n+import com.airbnb.lottie.model.Font;\n+import com.airbnb.lottie.model.FontCharacter;\n+import com.airbnb.lottie.model.layer.Layer;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(constants = BuildConfig.class)\n+public class LottieDrawableTest {\n+\n+  @SuppressWarnings(\"SameParameterValue\")\n+  private LottieComposition createComposition(int startFrame, int endFrame) {\n+    LottieComposition composition = new LottieComposition();\n+    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),\n+            new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),\n+            new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),\n+            new HashMap<String, Font>(0));\n+    return composition;\n+  }\n+\n+  @Test\n+  public void testMinFrame() {\n+    LottieComposition composition = createComposition(0, 200);\n+    LottieDrawable drawable = new LottieDrawable();\n+    drawable.setComposition(composition);\n+    drawable.setMinProgress(0.5f);\n+    assertEquals(100f, drawable.getMinFrame());\n+  }\n+\n+  @Test\n+  public void testMinWithStartFrameFrame() {\n+    LottieComposition composition = createComposition(100, 200);\n+    LottieDrawable drawable = new LottieDrawable();\n+    drawable.setComposition(composition);\n+    drawable.setMinProgress(0.5f);\n+    assertEquals(150f, drawable.getMinFrame());\n+  }\n+\n+  @Test\n+  public void testMaxFrame() {\n+    LottieComposition composition = createComposition(0, 200);\n+    LottieDrawable drawable = new LottieDrawable();\n+    drawable.setComposition(composition);\n+    drawable.setMaxProgress(0.5f);\n+    assertEquals(100f, drawable.getMaxFrame());\n+  }\n+}",
    "output": "Fixed min/max progress (#754)\n\nThe order of parameters was flipped for lerp.\r\nAdded tests and did an audit of all other lerp calls to make sure they were all fine.\r\nFixes #739"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -436,6 +436,17 @@ private void testDynamicProperties() {\n         LottieProperty.COLOR_FILTER,\n         new LottieValueCallback<ColorFilter>(new SimpleColorFilter(Color.GREEN)));\n \n+    LottieValueCallback<ColorFilter> blueColorFilter = new LottieValueCallback<ColorFilter>(new SimpleColorFilter(Color.GREEN));\n+    LottieAnimationView animationView = new LottieAnimationView(context);\n+    LottieComposition composition = LottieComposition.Factory.fromFileSync(context, \"Tests/Shapes.json\");\n+    animationView.setComposition(composition);\n+    animationView.setProgress(0f);\n+    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n+    animationView.addValueCallback(new KeyPath(\"**\"), LottieProperty.COLOR_FILTER, blueColorFilter);\n+    recordSnapshot(animationView, 1080, \"android\", \"Dynamic Properties\", \"Color Filter before blue\", params);\n+    blueColorFilter.setValue(new SimpleColorFilter(Color.BLUE));\n+    recordSnapshot(animationView, 1080, \"android\", \"Dynamic Properties\", \"Color Filter after blue\", params);\n+\n     testDynamicProperty(\n         \"Null Color Filter\",\n         new KeyPath(\"**\"),\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -38,6 +38,7 @@ public abstract class BaseStrokeContent\n   private final Path trimPathPath = new Path();\n   private final RectF rect = new RectF();\n   private final LottieDrawable lottieDrawable;\n+  private final BaseLayer layer;\n   private final List<PathGroup> pathGroups = new ArrayList<>();\n   private final float[] dashPatternValues;\n   final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n@@ -52,6 +53,7 @@ public abstract class BaseStrokeContent\n       Paint.Join join, AnimatableIntegerValue opacity, AnimatableFloatValue width,\n       List<AnimatableFloatValue> dashPattern, AnimatableFloatValue offset) {\n     this.lottieDrawable = lottieDrawable;\n+    this.layer = layer;\n \n     paint.setStyle(Paint.Style.STROKE);\n     paint.setStrokeCap(cap);\n@@ -309,6 +311,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n       } else {\n         colorFilterAnimation =\n             new ValueCallbackKeyframeAnimation<>((LottieValueCallback<ColorFilter>) callback);\n+        colorFilterAnimation.addUpdateListener(this);\n+        layer.addAnimation(colorFilterAnimation);\n       }\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n@@ -28,6 +28,7 @@ public class FillContent\n     implements DrawingContent, BaseKeyframeAnimation.AnimationListener, KeyPathElementContent {\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final BaseLayer layer;\n   private final String name;\n   private final List<PathContent> paths = new ArrayList<>();\n   private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;\n@@ -36,6 +37,7 @@ public class FillContent\n   private final LottieDrawable lottieDrawable;\n \n   public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFill fill) {\n+    this.layer = layer;\n     name = fill.getName();\n     this.lottieDrawable = lottieDrawable;\n     if (fill.getColor() == null || fill.getOpacity() == null ) {\n@@ -124,6 +126,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n       } else {\n         colorFilterAnimation =\n             new ValueCallbackKeyframeAnimation<>((LottieValueCallback<ColorFilter>) callback);\n+        colorFilterAnimation.addUpdateListener(this);\n+        layer.addAnimation(colorFilterAnimation);\n       }\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -10,6 +10,7 @@\n import android.graphics.RadialGradient;\n import android.graphics.RectF;\n import android.graphics.Shader;\n+import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n \n@@ -37,7 +38,8 @@ public class GradientFillContent\n    * Cache the gradients such that it runs at 30fps.\n    */\n   private static final int CACHE_STEPS_MS = 32;\n-  private final String name;\n+  @NonNull private final String name;\n+  private final BaseLayer layer;\n   private final LongSparseArray<LinearGradient> linearGradientCache = new LongSparseArray<>();\n   private final LongSparseArray<RadialGradient> radialGradientCache = new LongSparseArray<>();\n   private final Matrix shaderMatrix = new Matrix();\n@@ -54,8 +56,8 @@ public class GradientFillContent\n   private final LottieDrawable lottieDrawable;\n   private final int cacheSteps;\n \n-  public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer, GradientFill\n-      fill) {\n+  public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer, GradientFill fill) {\n+    this.layer = layer;\n     name = fill.getName();\n     this.lottieDrawable = lottieDrawable;\n     type = fill.getGradientType();\n@@ -211,6 +213,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n        } else {\n          colorFilterAnimation =\n              new ValueCallbackKeyframeAnimation<>((LottieValueCallback<ColorFilter>) callback);\n+         colorFilterAnimation.addUpdateListener(this);\n+         layer.addAnimation(colorFilterAnimation);\n        }\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java\n@@ -17,6 +17,7 @@\n \n public class StrokeContent extends BaseStrokeContent {\n \n+  private final BaseLayer layer;\n   private final String name;\n   private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;\n   @Nullable private BaseKeyframeAnimation<ColorFilter, ColorFilter> colorFilterAnimation;\n@@ -25,6 +26,7 @@ public StrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, Shape\n     super(lottieDrawable, layer, stroke.getCapType().toPaintCap(),\n         stroke.getJoinType().toPaintJoin(), stroke.getOpacity(), stroke.getWidth(),\n         stroke.getLineDashPattern(), stroke.getDashOffset());\n+    this.layer = layer;\n     name = stroke.getName();\n     colorAnimation = stroke.getColor().createAnimation();\n     colorAnimation.addUpdateListener(this);\n@@ -33,6 +35,9 @@ public StrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, Shape\n \n   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     paint.setColor(colorAnimation.getValue());\n+    if (colorFilterAnimation != null) {\n+      paint.setColorFilter(colorFilterAnimation.getValue());\n+    }\n     super.draw(canvas, parentMatrix, parentAlpha);\n   }\n \n@@ -52,6 +57,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n       } else {\n         colorFilterAnimation =\n             new ValueCallbackKeyframeAnimation<>((LottieValueCallback<ColorFilter>) callback);\n+        colorFilterAnimation.addUpdateListener(this);\n+        layer.addAnimation(colorAnimation);\n       }\n     }\n   }",
    "output": "Properly register ColorFilter animations (#753)\n\nColorFilter animations were not properly registered as animations so they wouldn't update the animation when changed.\r\nFixes #690"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -244,6 +244,7 @@ public void clearComposition() {\n     composition = null;\n     compositionLayer = null;\n     imageAssetManager = null;\n+    animator.clearComposition();\n     invalidateSelf();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -121,13 +121,25 @@ private float getFrameDurationNs() {\n     return Utils.SECOND_IN_NANOS / composition.getFrameRate() / Math.abs(speed);\n   }\n \n+  public void clearComposition() {\n+    this.composition = null;\n+    minFrame = Integer.MIN_VALUE;\n+    maxFrame = Integer.MAX_VALUE;\n+  }\n+\n   public void setComposition(LottieComposition composition) {\n+    // Because the initial composition is loaded async, the first min/max frame may be set\n+    boolean keepMinAndMaxFrames = this.composition == null;\n     this.composition = composition;\n \n-    setMinAndMaxFrames(\n-        (int) Math.max(this.minFrame, composition.getStartFrame()),\n-        (int) Math.min(this.maxFrame, composition.getEndFrame())\n-    );\n+    if (keepMinAndMaxFrames) {\n+      setMinAndMaxFrames(\n+              (int) Math.max(this.minFrame, composition.getStartFrame()),\n+              (int) Math.min(this.maxFrame, composition.getEndFrame())\n+      );\n+    } else {\n+      setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());\n+    }\n     setFrame((int) frame);\n     lastFrameTimeNs = System.nanoTime();\n   }\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -43,8 +43,17 @@ private interface VerifyListener {\n \n   @Before\n   public void setup() {\n+    animator = createAnimator();\n+    composition = createComposition(0, 1000);\n+\n+    animator.setComposition(composition);\n+    spyListener = Mockito.mock(Animator.AnimatorListener.class);\n+    isDone = new AtomicBoolean(false);\n+  }\n+\n+  private LottieValueAnimator createAnimator() {\n     // Choreographer#postFrameCallback hangs with robolectric.\n-    animator = new LottieValueAnimator() {\n+    return new LottieValueAnimator() {\n       @Override public void postFrameCallback() {\n         isRunning = true;\n       }\n@@ -53,14 +62,15 @@ public void setup() {\n         isRunning = false;\n       }\n     };\n-    composition = new LottieComposition();\n-    composition.init(new Rect(), 0, 1000, 1000, new ArrayList<Layer>(),\n-        new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),\n-        new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),\n-        new HashMap<String, Font>(0));\n-    animator.setComposition(composition);\n-    spyListener = Mockito.mock(Animator.AnimatorListener.class);\n-    isDone = new AtomicBoolean(false);\n+  }\n+\n+  private LottieComposition createComposition(int startFrame, int endFrame) {\n+    LottieComposition composition = new LottieComposition();\n+    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),\n+            new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),\n+            new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),\n+            new HashMap<String, Font>(0));\n+    return composition;\n   }\n \n   @Test\n@@ -251,6 +261,107 @@ public void setMaxFrameLargerThanComposition() {\n     assertEquals(animator.getMaxFrame(), composition.getEndFrame());\n   }\n \n+  @Test\n+  public void setMinFrameBeforeComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setMinFrame(100);\n+    animator.setComposition(composition);\n+    assertEquals(100.0f, animator.getMinFrame());\n+  }\n+\n+  @Test\n+  public void setMaxFrameBeforeComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setMaxFrame(100);\n+    animator.setComposition(composition);\n+    assertEquals(100.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void setMinAndMaxFrameBeforeComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setMinAndMaxFrames(100, 900);\n+    animator.setComposition(composition);\n+    assertEquals(100.0f, animator.getMinFrame());\n+    assertEquals(900.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void setMinFrameAfterComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setComposition(composition);\n+    animator.setMinFrame(100);\n+    assertEquals(100.0f, animator.getMinFrame());\n+  }\n+\n+  @Test\n+  public void setMaxFrameAfterComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setComposition(composition);\n+    animator.setMaxFrame(100);\n+    assertEquals(100.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void setMinAndMaxFrameAfterComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setComposition(composition);\n+    animator.setMinAndMaxFrames(100, 900);\n+    assertEquals(100.0f, animator.getMinFrame());\n+    assertEquals(900.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void maxFrameOfNewShorterComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setComposition(composition);\n+    LottieComposition composition2 = createComposition(0, 500);\n+    animator.setComposition(composition2);\n+    assertEquals(500.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void maxFrameOfNewLongerComposition() {\n+    LottieValueAnimator animator = createAnimator();\n+    animator.setComposition(composition);\n+    LottieComposition composition2 = createComposition(0, 1500);\n+    animator.setComposition(composition2);\n+    assertEquals(1500.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void clearComposition() {\n+    animator.clearComposition();\n+    assertEquals(0.0f, animator.getMaxFrame());\n+    assertEquals(0.0f, animator.getMinFrame());\n+  }\n+\n+  @Test\n+  public void resetComposition() {\n+    animator.clearComposition();\n+    animator.setComposition(composition);\n+    assertEquals(0.0f, animator.getMinFrame());\n+    assertEquals(1000.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void resetAndSetMinBeforeComposition() {\n+    animator.clearComposition();\n+    animator.setMinFrame(100);\n+    animator.setComposition(composition);\n+    assertEquals(100.0f, animator.getMinFrame());\n+    assertEquals(1000.0f, animator.getMaxFrame());\n+  }\n+\n+  @Test\n+  public void resetAndSetMinAterComposition() {\n+    animator.clearComposition();\n+    animator.setComposition(composition);\n+    animator.setMinFrame(100);\n+    assertEquals(100.0f, animator.getMinFrame());\n+    assertEquals(1000.0f, animator.getMaxFrame());\n+  }\n+\n   private void testAnimator(final VerifyListener verifyListener) {\n     spyListener = Mockito.spy(new AnimatorListenerAdapter() {\n       @Override public void onAnimationEnd(Animator animation) {",
    "output": "Reset min/max frames unless no composition is set (#752)\n\nThis should handle both cases where:\r\n\r\n1) You set a min/max frame while the composition is still loading #694\r\n2) You change the composition to one with a different length. Fixes #750\r\nAdded a bunch of tests to confirm as well"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java b/lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java\n@@ -1,7 +1,11 @@\n package com.airbnb.lottie.model;\n \n import android.graphics.PointF;\n+import android.support.annotation.RestrictTo;\n \n+import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n+\n+@RestrictTo(LIBRARY)\n public class CubicCurveData {\n   private final PointF controlPoint1;\n   private final PointF controlPoint2;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -1,7 +1,11 @@\n package com.airbnb.lottie.model;\n \n import android.support.annotation.ColorInt;\n+import android.support.annotation.RestrictTo;\n \n+import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n+\n+@RestrictTo(LIBRARY)\n public class DocumentData {\n \n   public final String text;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Font.java b/lottie/src/main/java/com/airbnb/lottie/model/Font.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Font.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Font.java\n@@ -1,5 +1,10 @@\n package com.airbnb.lottie.model;\n \n+import android.support.annotation.RestrictTo;\n+\n+import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n+\n+@RestrictTo(LIBRARY)\n public class Font {\n \n   private final String family;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java b/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n@@ -1,9 +1,14 @@\n package com.airbnb.lottie.model;\n \n+import android.support.annotation.RestrictTo;\n+\n import com.airbnb.lottie.model.content.ShapeGroup;\n \n import java.util.List;\n \n+import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n+\n+@RestrictTo(LIBRARY)\n public class FontCharacter {\n \n   public static int hashFor(char character, String fontFamily, String style) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/KeyPathElement.java b/lottie/src/main/java/com/airbnb/lottie/model/KeyPathElement.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/KeyPathElement.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/KeyPathElement.java\n@@ -1,14 +1,18 @@\n package com.airbnb.lottie.model;\n \n import android.support.annotation.Nullable;\n+import android.support.annotation.RestrictTo;\n \n import com.airbnb.lottie.value.LottieValueCallback;\n \n import java.util.List;\n \n+import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n+\n /**\n  * Any item that can be a part of a {@link KeyPath} should implement this.\n  */\n+@RestrictTo(LIBRARY)\n public interface KeyPathElement {\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/MutablePair.java b/lottie/src/main/java/com/airbnb/lottie/model/MutablePair.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/MutablePair.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/MutablePair.java\n@@ -1,12 +1,16 @@\n package com.airbnb.lottie.model;\n \n import android.support.annotation.Nullable;\n+import android.support.annotation.RestrictTo;\n import android.support.v4.util.Pair;\n \n+import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n+\n /**\n  * Non final version of {@link Pair}\n  * @param <T>\n  */\n+@RestrictTo(LIBRARY)\n public class MutablePair<T> {\n   @Nullable T first;\n   @Nullable T second;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/package-info.java b/lottie/src/main/java/com/airbnb/lottie/model/package-info.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/package-info.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/package-info.java\n@@ -1,6 +0,0 @@\n-@RestrictTo(LIBRARY)\n-package com.airbnb.lottie.model;\n-\n-import android.support.annotation.RestrictTo;\n-\n-import static android.support.annotation.RestrictTo.Scope.LIBRARY;\n\\ No newline at end of file",
    "output": "Fix KeyPath visibility\n\nFixes #728"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -36,6 +36,8 @@ public abstract class BaseLayer\n   private static final int SAVE_FLAGS = Canvas.CLIP_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG |\n       Canvas.MATRIX_SAVE_FLAG;\n \n+  private static boolean hasLoggedIntersectMasks = false;\n+\n   @Nullable\n   static BaseLayer forModel(\n     Layer layerModel, LottieDrawable drawable, LottieComposition composition) {\n@@ -334,8 +336,11 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n         paint = subtractMaskPaint;\n         break;\n       case MaskModeIntersect:\n-        Log.w(L.TAG, \"Animation contains intersect masks. They are not supported but will be \" +\n-            \"treated like add masks.\");\n+        if (!hasLoggedIntersectMasks) {\n+          Log.w(L.TAG, \"Animation contains intersect masks. They are not supported but will be \" +\n+                  \"treated like add masks.\");\n+          hasLoggedIntersectMasks = true;\n+        }\n       case MaskModeAdd:\n       default:\n         // As a hack, we treat all non-subtract masks like add masks. This is not correct but it's",
    "output": "Make intersection mask log less noisy\n\nFixes #742"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java b/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n@@ -16,12 +16,12 @@ public static int hashFor(char character, String fontFamily, String style) {\n \n   private final List<ShapeGroup> shapes;\n   private final char character;\n-  private final int size;\n+  private final double size;\n   private final double width;\n   private final String style;\n   private final String fontFamily;\n \n-  public FontCharacter(List<ShapeGroup> shapes, char character, int size,\n+  public FontCharacter(List<ShapeGroup> shapes, char character, double size,\n       double width, String style, String fontFamily) {\n     this.shapes = shapes;\n     this.character = character;\n@@ -35,7 +35,7 @@ public List<ShapeGroup> getShapes() {\n     return shapes;\n   }\n \n-  int getSize() {\n+  double getSize() {\n     return size;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/FontCharacterParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/FontCharacterParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/FontCharacterParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/FontCharacterParser.java\n@@ -17,7 +17,7 @@ private FontCharacterParser() {}\n   static FontCharacter parse(\n       JsonReader reader, LottieComposition composition) throws IOException {\n     char character = '\\0';\n-    int size = 0;\n+    double size = 0;\n     double width = 0;\n     String style = null;\n     String fontFamily = null;\n@@ -30,7 +30,7 @@ static FontCharacter parse(\n           character = reader.nextString().charAt(0);\n           break;\n         case \"size\":\n-          size = reader.nextInt();\n+          size = reader.nextDouble();\n           break;\n         case \"w\":\n           width = reader.nextDouble();",
    "output": "Make FontCharacter size a double\n\nFixes #727"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -6,6 +6,7 @@\n import android.graphics.drawable.Drawable;\n import android.support.annotation.Nullable;\n import android.text.TextUtils;\n+import android.util.Base64;\n import android.util.Log;\n import android.view.View;\n \n@@ -62,37 +63,54 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n \n   @Nullable public Bitmap bitmapForId(String id) {\n     Bitmap bitmap = bitmaps.get(id);\n-    if (bitmap == null) {\n-      LottieImageAsset imageAsset = imageAssets.get(id);\n-      if (imageAsset == null) {\n-        return null;\n-      }\n-      if (delegate != null) {\n-        bitmap = delegate.fetchBitmap(imageAsset);\n-        if (bitmap != null) {\n-          bitmaps.put(id, bitmap);\n-        }\n-        return bitmap;\n+    if (bitmap != null) {\n+      return bitmap;\n+    }\n+\n+    LottieImageAsset imageAsset = imageAssets.get(id);\n+    if (imageAsset == null) {\n+      return null;\n+    }\n+\n+    if (delegate != null) {\n+      bitmap = delegate.fetchBitmap(imageAsset);\n+      if (bitmap != null) {\n+        bitmaps.put(id, bitmap);\n       }\n+      return bitmap;\n+    }\n+\n+    String filename = imageAsset.getFileName();\n+    BitmapFactory.Options opts = new BitmapFactory.Options();\n+    opts.inScaled = true;\n+    opts.inDensity = 160;\n \n-      InputStream is;\n+    if (filename.startsWith(\"data:\") && filename.indexOf(\"base64,\") > 0) {\n+      // Contents look like a base64 data URI, with the format data:image/png;base64,<data>.\n+      byte[] data;\n       try {\n-        if (TextUtils.isEmpty(imagesFolder)) {\n-          throw new IllegalStateException(\"You must set an images folder before loading an image.\" +\n-              \" Set it with LottieComposition#setImagesFolder or LottieDrawable#setImagesFolder\");\n-        }\n-        is = context.getAssets().open(imagesFolder + imageAsset.getFileName());\n-      } catch (IOException e) {\n-        Log.w(L.TAG, \"Unable to open asset.\", e);\n+        data = Base64.decode(filename.substring(filename.indexOf(',') + 1), Base64.DEFAULT);\n+      } catch (IllegalArgumentException e) {\n+        Log.w(L.TAG, \"data URL did not have correct base64 format.\", e);\n         return null;\n       }\n-      BitmapFactory.Options opts = new BitmapFactory.Options();\n-      opts.inScaled = true;\n-      opts.inDensity = 160;\n-      bitmap = BitmapFactory.decodeStream(is, null, opts);\n-      bitmaps.put(id, bitmap);\n+      bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);\n+      return bitmaps.put(id, bitmap);\n+    }\n+\n+    InputStream is;\n+    try {\n+      if (TextUtils.isEmpty(imagesFolder)) {\n+        throw new IllegalStateException(\"You must set an images folder before loading an image.\" +\n+            \" Set it with LottieComposition#setImagesFolder or LottieDrawable#setImagesFolder\");\n+      }\n+      is = context.getAssets().open(imagesFolder + filename);\n+    } catch (IOException e) {\n+      Log.w(L.TAG, \"Unable to open asset.\", e);\n+      return null;\n     }\n-    return bitmap;\n+    bitmap = BitmapFactory.decodeStream(is, null, opts);\n+    return bitmaps.put(id, bitmap);\n   }\n \n   public void recycleBitmaps() {",
    "output": "Add basic support for base64 URLs. (#749)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n@@ -61,20 +61,15 @@ static int floorMod(float x, float y) {\n     return floorMod((int) x, (int) y);\n   }\n \n-  /**\n-   * Copied from Math.floorMod in the Android platform.\n-   */\n   private static int floorMod(int x, int y) {\n-    return x - floorDiv(x, y) * y;\n+    return x - y * floorDiv(x, y);\n   }\n \n-  /**\n-   * Copied from Math.floorDiv in the Android platform.\n-   */\n   private static int floorDiv(int x, int y) {\n     int r = x / y;\n-    // if the signs are different and modulo not zero, round down\n-    if ((x ^ y) < 0 && (r * y != x)) {\n+    boolean sameSign = (x ^ y) >= 0;\n+    int mod = x % y;\n+    if (!sameSign && mod != 0) {\n       r--;\n     }\n     return r;",
    "output": "Code copied from SDK refactored to comply with project licensing. (#732)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -73,6 +73,7 @@ public void beginSnapshotting() {\n     testScaleTypes();\n     testDynamicProperties();\n     testSwitchingToDrawableAndBack();\n+    testStartEndFrameWithStartEndProgress();\n   }\n \n   private void snapshotAssets(String[] animations) {\n@@ -492,6 +493,35 @@ private void testSwitchingToDrawableAndBack() {\n     recordSnapshot(view, 1080, \"android\", \"Reset Animation\", \"Drawable and back\", params);\n   }\n \n+  private void testStartEndFrameWithStartEndProgress() {\n+    LottieComposition composition = LottieComposition.Factory.fromFileSync(context, \"Tests/StartEndFrame.json\");\n+    LottieAnimationView view = new LottieAnimationView(context);\n+    view.setComposition(composition);\n+    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\n+        ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n+    view.setMinProgress(0f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 0\", params);\n+    view.setMinProgress(0.25f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 0.25\", params);\n+    view.setMinProgress(0.75f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 0.75\", params);\n+    view.setMinProgress(0.1f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"minProgress 1\", params);\n+\n+    view.setMaxProgress(0f);\n+    view.setProgress(1f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 0\", params);\n+    view.setMaxProgress(0.25f);\n+    view.setProgress(1f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 0.25\", params);\n+    view.setMaxProgress(0.75f);\n+    view.setProgress(1f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 0.75\", params);\n+    view.setMaxProgress(0.1f);\n+    view.setProgress(1f);\n+    recordSnapshot(view, 1080, \"android\", \"MinMaxFrame\", \"maxProgress 1\", params);\n+  }\n+\n   private int dpToPx(int dp) {\n     Resources resources = context.getResources();\n     return (int) TypedValue.applyDimension(1, (float) dp, resources.getDisplayMetrics());\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -393,7 +393,7 @@ public void setMinProgress(final float minProgress) {\n        });\n        return;\n      }\n-    setMinFrame((int) (minProgress * composition.getDurationFrames()));\n+   setMinFrame((int) MiscUtils.lerp(minProgress, composition.getStartFrame(), composition.getEndFrame()));\n   }\n \n   /**\n@@ -422,7 +422,7 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre\n       });\n       return;\n     }\n-    setMaxFrame((int) (maxProgress * composition.getDurationFrames()));\n+    setMaxFrame((int) MiscUtils.lerp(maxProgress, composition.getStartFrame(), composition.getEndFrame()));\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -96,8 +96,8 @@ public float getFrame() {\n     if (ended) {\n       if (getRepeatCount() != INFINITE && repeatCount >= getRepeatCount()) {\n         frame = getMaxFrame();\n-        notifyEnd(isReversed());\n         removeFrameCallback();\n+        notifyEnd(isReversed());\n       } else {\n         notifyRepeat();\n         repeatCount++;",
    "output": "Two value animator fixes (#717)\n\n* Take into account start and end frames for min and max progress\r\n* Remove the frame callback before notifying the end listeners so that if they start an animation, the notification frame will not be removed.\r\nFixes #703\r\nFixes #663"
  },
  {
    "input": "diff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -241,7 +241,7 @@ public void testLoopingAnimatorOnceReverse() {\n \n   @Test\n   public void setMinFrameSmallerThanComposition() {\n-    animator.setMaxFrame(-9000);\n+    animator.setMinFrame(-9000);\n     assertEquals(animator.getMinFrame(), composition.getStartFrame());\n   }\n ",
    "output": "Fix small test issue. (#722)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -16,6 +16,7 @@ public class LottieValueAnimator extends BaseLottieAnimator implements Choreogra\n \n \n   private float speed = 1f;\n+  private boolean speedReversedForRepeatMode = false;\n   private long lastFrameTimeNs = 0;\n   private float frame = 0;\n   private int repeatCount = 0;\n@@ -101,6 +102,7 @@ public float getFrame() {\n         notifyRepeat();\n         repeatCount++;\n         if (getRepeatMode() == REVERSE) {\n+          speedReversedForRepeatMode = !speedReversedForRepeatMode;\n           reverseAnimationSpeed();\n         } else {\n           frame = isReversed() ? getMaxFrame() : getMinFrame();\n@@ -163,10 +165,21 @@ public void setSpeed(float speed) {\n     this.speed = speed;\n   }\n \n+  /**\n+   * Returns the current speed. This will be affected by repeat mode REVERSE.\n+   */\n   public float getSpeed() {\n     return speed;\n   }\n \n+  @Override public void setRepeatMode(int value) {\n+    super.setRepeatMode(value);\n+    if (value != REVERSE && speedReversedForRepeatMode) {\n+      speedReversedForRepeatMode = false;\n+      reverseAnimationSpeed();\n+    }\n+  }\n+\n   public void playAnimation() {\n     notifyStart(isReversed());\n     setFrame((int) (isReversed() ? getMaxFrame() : getMinFrame()));\n@@ -200,7 +213,7 @@ public void resumeAnimation() {\n   }\n \n   private boolean isReversed() {\n-    return speed < 0;\n+    return getSpeed() < 0;\n   }\n \n   public float getMinFrame() {",
    "output": "Correct animation speed if it was reversed due to repeatMode REVERSE\n\nFixes #705"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java\n@@ -4,9 +4,7 @@\n import android.support.annotation.IntRange;\n import android.util.JsonReader;\n import android.util.JsonToken;\n-import android.util.Log;\n \n-import com.airbnb.lottie.L;\n import com.airbnb.lottie.model.content.GradientColor;\n import com.airbnb.lottie.utils.MiscUtils;\n \n@@ -66,12 +64,6 @@ public GradientColorParser(int colorPoints) {\n \n     int r = 0;\n     int g = 0;\n-    if (array.size() != colorPoints * 4) {\n-      Log.w(L.TAG, \"Unexpected gradient length: \" + array.size() +\n-          \". Expected \" + (colorPoints * 4) + \". This may affect the appearance of the gradient. \" +\n-          \"Make sure to save your After Effects file before exporting an animation with \" +\n-          \"gradients.\");\n-    }\n     for (int i = 0; i < colorPoints * 4; i++) {\n       int colorIndex = i / 4;\n       double value = array.get(i);",
    "output": "Removed a warning from gradients\n\nWhen this happens, it is often due to an opacity color stop but\nhardly effects rendering. The gradient detection can be improved\nif it becomes a real issue down the line."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -148,8 +148,10 @@ public void setMaxFrame(int maxFrame) {\n   }\n \n   public void setMinAndMaxFrames(int minFrame, int maxFrame) {\n-    this.minFrame = minFrame;\n-    this.maxFrame = maxFrame;\n+    float compositionMinFrame = composition == null ? Float.MIN_VALUE : composition.getStartFrame();\n+    float compositionMaxFrame = composition == null ? Float.MAX_VALUE : composition.getEndFrame();\n+    this.minFrame = MiscUtils.clamp(minFrame, compositionMinFrame, compositionMaxFrame);\n+    this.maxFrame = MiscUtils.clamp(maxFrame, compositionMinFrame, compositionMaxFrame);\n     setFrame((int) MiscUtils.clamp(frame, minFrame, maxFrame));\n   }\n \n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java\n@@ -35,6 +35,7 @@ private interface VerifyListener {\n     void verify(InOrder inOrder);\n   }\n \n+  private LottieComposition composition;\n   private LottieValueAnimator animator;\n   private Animator.AnimatorListener spyListener;\n   private InOrder inOrder;\n@@ -52,7 +53,7 @@ public void setup() {\n         isRunning = false;\n       }\n     };\n-    LottieComposition composition = new LottieComposition();\n+    composition = new LottieComposition();\n     composition.init(new Rect(), 0, 1000, 1000, new ArrayList<Layer>(),\n         new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),\n         new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),\n@@ -238,6 +239,18 @@ public void testLoopingAnimatorOnceReverse() {\n     });\n   }\n \n+  @Test\n+  public void setMinFrameSmallerThanComposition() {\n+    animator.setMaxFrame(-9000);\n+    assertEquals(animator.getMinFrame(), composition.getStartFrame());\n+  }\n+\n+  @Test\n+  public void setMaxFrameLargerThanComposition() {\n+    animator.setMaxFrame(9000);\n+    assertEquals(animator.getMaxFrame(), composition.getEndFrame());\n+  }\n+\n   private void testAnimator(final VerifyListener verifyListener) {\n     spyListener = Mockito.spy(new AnimatorListenerAdapter() {\n       @Override public void onAnimationEnd(Animator animation) {",
    "output": "Clip min and max frames to composition min/max frames\n\nFixes #716"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -121,7 +121,11 @@ private float getFrameDurationNs() {\n \n   public void setComposition(LottieComposition composition) {\n     this.composition = composition;\n-    setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());\n+\n+    setMinAndMaxFrames(\n+        (int) Math.max(this.minFrame, composition.getStartFrame()),\n+        (int) Math.min(this.maxFrame, composition.getEndFrame())\n+    );\n     setFrame((int) frame);\n     lastFrameTimeNs = System.nanoTime();\n   }",
    "output": "Fix race condition with min/max frame (#694)\n\nComposition can be loaded after we have set a custom minFrame and/or maxFrame.\r\nThe composition will override custom values."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -50,8 +50,12 @@\n  * {@link R.attr#lottie_progress}\n  */\n @SuppressWarnings({\"unused\", \"WeakerAccess\"}) public class LottieAnimationView extends AppCompatImageView {\n+\n+  public static final CacheStrategy DEFAULT_CACHE_STRATEGY = CacheStrategy.Weak;\n+\n   private static final String TAG = LottieAnimationView.class.getSimpleName();\n \n+\n   /**\n    * Caching strategy for compositions that will be reused frequently.\n    * Weak or Strong indicates the GC reference strength of the composition in the cache.\n@@ -109,10 +113,10 @@ public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr\n \n   private void init(@Nullable AttributeSet attrs) {\n     TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);\n-    int cacheStrategy = ta.getInt(\n+    int cacheStrategyOrdinal = ta.getInt(\n         R.styleable.LottieAnimationView_lottie_cacheStrategy,\n-        CacheStrategy.Weak.ordinal());\n-    defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n+        DEFAULT_CACHE_STRATEGY.ordinal());\n+    this.defaultCacheStrategy = CacheStrategy.values()[cacheStrategyOrdinal];\n     if (!isInEditMode()) {\n       boolean hasRawRes = ta.hasValue(R.styleable.LottieAnimationView_lottie_rawRes);\n       boolean hasFileName = ta.hasValue(R.styleable.LottieAnimationView_lottie_fileName);",
    "output": "DEFAULT_CACHE_STRATEGY exposed. This is needed in order to make more sophisticated and efficient update for the react-native plugin for Android. (#691)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/CircleShapeParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/CircleShapeParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/CircleShapeParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/CircleShapeParser.java\n@@ -15,11 +15,11 @@ class CircleShapeParser {\n   private CircleShapeParser() {}\n \n   static CircleShape parse(\n-      JsonReader reader, LottieComposition composition) throws IOException {\n+      JsonReader reader, LottieComposition composition, int d) throws IOException {\n     String name = null;\n     AnimatableValue<PointF, PointF> position = null;\n     AnimatablePointValue size = null;\n-    boolean reversed = false;\n+    boolean reversed = d == 3;\n \n     while (reader.hasNext()) {\n       switch (reader.nextName()) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n@@ -20,12 +20,21 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)\n     String type = null;\n \n     reader.beginObject();\n+    // Unfortunately, for an ellipse, d is before \"ty\" which means that it will get parsed\n+    // before we are in the ellipse parser.\n+    // \"d\" is 2 for normal and 3 for reversed.\n+    int d = 2;\n+    typeLoop:\n     while (reader.hasNext()) {\n-      if (reader.nextName().equals(\"ty\")) {\n-        type = reader.nextString();\n-        break;\n-      } else {\n-        reader.skipValue();\n+      switch (reader.nextName()) {\n+        case \"ty\":\n+          type = reader.nextString();\n+          break typeLoop;\n+        case \"d\":\n+          d = reader.nextInt();\n+          break;\n+        default:\n+          reader.skipValue();\n       }\n     }\n \n@@ -57,7 +66,7 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)\n         model = ShapePathParser.parse(reader, composition);\n         break;\n       case \"el\":\n-        model = CircleShapeParser.parse(reader, composition);\n+        model = CircleShapeParser.parse(reader, composition, d);\n         break;\n       case \"rc\":\n         model = RectangleShapeParser.parse(reader, composition);",
    "output": "Fix ellipse shape direction (#687)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -7,6 +7,7 @@\n import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.PointF;\n+import android.graphics.drawable.ColorDrawable;\n import android.os.Environment;\n import android.support.annotation.Nullable;\n import android.util.Log;\n@@ -71,6 +72,7 @@ public void beginSnapshotting() {\n     testFrameBoundary2();\n     testScaleTypes();\n     testDynamicProperties();\n+    testSwitchingToDrawableAndBack();\n   }\n \n   private void snapshotAssets(String[] animations) {\n@@ -479,6 +481,17 @@ private <T> void testDynamicProperty(\n     recordSnapshot(animationView, 1080, \"android\", \"Dynamic Properties\", name, params);\n   }\n \n+  private void testSwitchingToDrawableAndBack() {\n+    LottieComposition composition = LottieComposition.Factory.fromFileSync(context, \"Tests/Shapes.json\");\n+    LottieAnimationView view = new LottieAnimationView(context);\n+    view.setComposition(composition);\n+    view.setImageDrawable(new ColorDrawable(Color.RED));\n+    view.setComposition(composition);\n+    ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\n+        ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n+    recordSnapshot(view, 1080, \"android\", \"Reset Animation\", \"Drawable and back\", params);\n+  }\n+\n   private int dpToPx(int dp) {\n     Resources resources = context.getResources();\n     return (int) TypedValue.applyDimension(1, (float) dp, resources.getDisplayMetrics());\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -480,9 +480,10 @@ public void setComposition(@NonNull LottieComposition composition) {\n     }\n     lottieDrawable.setCallback(this);\n \n+    this.composition = composition;\n     boolean isNewComposition = lottieDrawable.setComposition(composition);\n     enableOrDisableHardwareLayer();\n-    if (!isNewComposition) {\n+    if (getDrawable() == lottieDrawable && !isNewComposition) {\n       // We can avoid re-setting the drawable, and invalidating the view, since the composition\n       // hasn't changed.\n       return;\n@@ -493,8 +494,6 @@ public void setComposition(@NonNull LottieComposition composition) {\n     setImageDrawable(null);\n     setImageDrawable(lottieDrawable);\n \n-    this.composition = composition;\n-\n     requestLayout();\n   }\n ",
    "output": "Update the drawable when the composition is reset to the same one (#676)\n\nPreviously, if you set an animation, switched to a drawable, and switched back to the same animation, LottieDrawable would report that the composition was the same and it would not update the drawable on LottieAnimationView.\r\nFixes #648"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -433,6 +433,12 @@ private void testDynamicProperties() {\n         LottieProperty.COLOR_FILTER,\n         new LottieValueCallback<ColorFilter>(new SimpleColorFilter(Color.GREEN)));\n \n+    testDynamicProperty(\n+        \"Null Color Filter\",\n+        new KeyPath(\"**\"),\n+        LottieProperty.COLOR_FILTER,\n+        new LottieValueCallback<ColorFilter>(null));\n+\n     testDynamicProperty(\n         \"Opacity interpolation (0)\",\n         new KeyPath(\"Shape Layer 1\", \"Rectangle\"),\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n@@ -1,7 +1,6 @@\n package com.airbnb.lottie.value;\n \n \n-import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.annotation.RestrictTo;\n \n@@ -24,18 +23,14 @@ public class LottieValueCallback<T> {\n   public LottieValueCallback() {\n   }\n \n-  public LottieValueCallback(@NonNull T staticValue) {\n+  public LottieValueCallback(@Nullable T staticValue) {\n     value = staticValue;\n   }\n \n   /**\n    * Override this if you haven't set a static value in the constructor or with setValue.\n    */\n   public T getValue(LottieFrameInfo<T> frameInfo) {\n-    if (value == null) {\n-      throw new IllegalArgumentException(\"You must provide a static value in the constructor \" +\n-          \", call setValue, or override getValue.\");\n-    }\n     return value;\n   }\n ",
    "output": "Remove null restriction on value callbacks (#675)\n\nThis prevented you from clearing a ColorFilter\r\nFixes #638"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n@@ -203,6 +203,10 @@ private boolean endsWithGlobstar() {\n     return keys.get(keys.size() - 1).equals(\"**\");\n   }\n \n+  public String keysToString() {\n+    return keys.toString();\n+  }\n+\n   @Override public String toString() {\n     return \"KeyPath{\" + \"keys=\" + keys + \",resolved=\" + (resolvedElement != null) + '}';\n   }",
    "output": "[Sample App] Added a bottom sheet to show all keypaths"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n@@ -40,8 +40,8 @@ public T getValue(LottieFrameInfo<T> frameInfo) {\n   }\n \n   public final void setValue(@Nullable T value) {\n+    this.value = value;\n     if (animation != null) {\n-      this.value = value;\n       animation.notifyListeners();\n     }\n   }",
    "output": "Set the value callback value even if the animation is not set yet\n\nThis fixed an issue where the original addValueCallback has been deferred as\na lazy composition task while the composition is loading so the animation has\nnot yet been set on the value callback.\nFixes #640"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -103,7 +103,7 @@ public float getFrame() {\n         if (getRepeatMode() == REVERSE) {\n           reverseAnimationSpeed();\n         } else {\n-          frame = getMinFrame();\n+          frame = isReversed() ? getMaxFrame() : getMinFrame();\n         }\n         lastFrameTimeNs = now;\n       }",
    "output": "Fixed looping when the animation speed is reversed"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java\n@@ -70,6 +70,9 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)\n         break;\n       case \"mm\":\n         model = MergePathsParser.parse(reader);\n+        composition.addWarning(\"Animation contains merge paths. Merge paths are only \" +\n+            \"supported on KitKat+ and must be manually enabled by calling \" +\n+            \"enableMergePathsForKitKatAndAbove().\");\n         break;\n       case \"rp\":\n         model = RepeaterParser.parse(reader, composition);",
    "output": "Added a warning for merge paths"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -162,11 +162,11 @@ public float getSpeed() {\n   }\n \n   public void playAnimation() {\n-    frame = isReversed() ? getMaxFrame() : getMinFrame();\n+    notifyStart(isReversed());\n+    setFrame((int) (isReversed() ? getMaxFrame() : getMinFrame()));\n     lastFrameTimeNs = System.nanoTime();\n     repeatCount = 0;\n     postFrameCallback();\n-    notifyStart(isReversed());\n   }\n \n   public void endAnimation() {",
    "output": "Properly update the frame when starting an animation"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -121,6 +121,7 @@ private float getFrameDurationNs() {\n \n   public void setComposition(LottieComposition composition) {\n     this.composition = composition;\n+    setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());\n     setFrame((int) frame);\n     lastFrameTimeNs = System.nanoTime();\n   }",
    "output": "Reset min/max frame when composition is set (#674)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -16,7 +16,7 @@ public class LottieValueAnimator extends BaseLottieAnimator implements Choreogra\n \n \n   private float speed = 1f;\n-  private long frameTime = 0;\n+  private long lastFrameTimeNs = 0;\n   private float frame = 0;\n   private int repeatCount = 0;\n   private float minFrame = Integer.MIN_VALUE;\n@@ -81,19 +81,15 @@ public float getFrame() {\n     }\n \n     long now = System.nanoTime();\n-    long timeSinceFrame = now - frameTime;\n+    long timeSinceFrame = now - lastFrameTimeNs;\n     float frameDuration = getFrameDurationNs();\n-    float frames = timeSinceFrame / frameDuration;\n-    int wholeFrames = (int) frames;\n-    if (wholeFrames == 0) {\n-      return;\n-    }\n-    frame += isReversed() ? -wholeFrames : wholeFrames;\n+    float dFrames = timeSinceFrame / frameDuration;\n+\n+    frame += isReversed() ? -dFrames : dFrames;\n     boolean ended = !MiscUtils.contains(frame, getMinFrame(), getMaxFrame());\n     frame = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n \n-    float partialFramesDuration = (frames - wholeFrames) * frameDuration;\n-    frameTime = (long) (now - partialFramesDuration);\n+    lastFrameTimeNs = now;\n \n     notifyUpdate();\n     if (ended) {\n@@ -109,7 +105,7 @@ public float getFrame() {\n         } else {\n           frame = getMinFrame();\n         }\n-        frameTime = now;\n+        lastFrameTimeNs = now;\n       }\n     }\n \n@@ -126,15 +122,15 @@ private float getFrameDurationNs() {\n   public void setComposition(LottieComposition composition) {\n     this.composition = composition;\n     setFrame((int) frame);\n-    frameTime = System.nanoTime();\n+    lastFrameTimeNs = System.nanoTime();\n   }\n \n   public void setFrame(int frame) {\n     if (this.frame == frame) {\n       return;\n     }\n     this.frame = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n-    frameTime = System.nanoTime();\n+    lastFrameTimeNs = System.nanoTime();\n     notifyUpdate();\n   }\n \n@@ -166,7 +162,7 @@ public float getSpeed() {\n \n   public void playAnimation() {\n     frame = isReversed() ? getMaxFrame() : getMinFrame();\n-    frameTime = System.nanoTime();\n+    lastFrameTimeNs = System.nanoTime();\n     repeatCount = 0;\n     postFrameCallback();\n     notifyStart(isReversed());\n@@ -183,7 +179,7 @@ public void pauseAnimation() {\n \n   public void resumeAnimation() {\n     postFrameCallback();\n-    frameTime = System.nanoTime();\n+    lastFrameTimeNs = System.nanoTime();\n     if (isReversed() && getFrame() == getMinFrame()) {\n       frame = getMaxFrame();\n     } else if (!isReversed() && getFrame() == getMaxFrame()) {",
    "output": "Render every frame instead of matching AE fps (#673)\n\nAs of 2.5.0, Lottie would try and match the framerate specified in After Effects. This ends up just making things look janky most of the time. This reverts that to the old behavior of rendering every frame.\r\n\r\nFixes #647"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -125,7 +125,7 @@ private float getFrameDurationNs() {\n \n   public void setComposition(LottieComposition composition) {\n     this.composition = composition;\n-    frame = getMinFrame();\n+    setFrame((int) frame);\n     frameTime = System.nanoTime();\n   }\n ",
    "output": "Ensure that the starting frame is set when setting a new composition"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -541,6 +541,13 @@ public void setMinFrame(int startFrame) {\n     lottieDrawable.setMinFrame(startFrame);\n   }\n \n+  /**\n+   * Returns the minimum frame set by {@link #setMinFrame(int)} or {@link #setMinProgress(float)}\n+   */\n+  public float getMinFrame() {\n+    return lottieDrawable.getMinFrame();\n+  }\n+\n   /**\n    * Sets the minimum progress that the animation will start from when playing or looping.\n    */\n@@ -555,6 +562,13 @@ public void setMaxFrame(int endFrame) {\n     lottieDrawable.setMaxFrame(endFrame);\n   }\n \n+  /**\n+   * Returns the maximum frame set by {@link #setMaxFrame(int)} or {@link #setMaxProgress(float)}\n+   */\n+  public float getMaxFrame() {\n+    return lottieDrawable.getMaxFrame();\n+  }\n+\n   /**\n    * Sets the maximum progress that the animation will end at when playing or looping.\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -368,6 +368,13 @@ public void setMinFrame(final int minFrame) {\n     animator.setMinFrame(minFrame);\n   }\n \n+  /**\n+   * Returns the minimum frame set by {@link #setMinFrame(int)} or {@link #setMinProgress(float)}\n+   */\n+  public float getMinFrame() {\n+    return animator.getMinFrame();\n+  }\n+\n   /**\n    * Sets the minimum progress that the animation will start from when playing or looping.\n    */\n@@ -390,6 +397,13 @@ public void setMaxFrame(final int maxFrame) {\n     animator.setMaxFrame(maxFrame);\n   }\n \n+  /**\n+   * Returns the maximum frame set by {@link #setMaxFrame(int)} or {@link #setMaxProgress(float)}\n+   */\n+  public float getMaxFrame() {\n+    return animator.getMaxFrame();\n+  }\n+\n   /**\n    * Sets the maximum progress that the animation will end at when playing or looping.\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -200,14 +200,14 @@ private boolean isReversed() {\n     return speed < 0;\n   }\n \n-  private float getMinFrame() {\n+  public float getMinFrame() {\n     if (composition == null) {\n       return 0;\n     }\n     return minFrame == Integer.MIN_VALUE ? composition.getStartFrame() : minFrame;\n   }\n \n-  private float getMaxFrame() {\n+  public float getMaxFrame() {\n     if (composition == null) {\n       return 0;\n     }",
    "output": "Exposed getMinFrame and getMaxFrame APIs"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -26,6 +26,7 @@\n import com.airbnb.lottie.model.layer.CompositionLayer;\n import com.airbnb.lottie.parser.LayerParser;\n import com.airbnb.lottie.utils.LottieValueAnimator;\n+import com.airbnb.lottie.utils.MiscUtils;\n import com.airbnb.lottie.value.LottieFrameInfo;\n import com.airbnb.lottie.value.LottieValueCallback;\n import com.airbnb.lottie.value.SimpleLottieValueCallback;\n@@ -496,7 +497,7 @@ public void setFrame(final int frame) {\n       return;\n     }\n \n-    setProgress(frame / composition.getDurationFrames());\n+    animator.setFrame(frame);\n   }\n \n   /**\n@@ -515,7 +516,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) final float progress) {\n       });\n       return;\n     }\n-    animator.setFrame((int) (progress * composition.getDurationFrames() + composition.getStartFrame()));\n+    setFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));\n   }\n \n   /**",
    "output": "Switched internal setFrame/setProgress calls\n\nThis aligns better with the new LottieValueAnimator"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -134,29 +134,22 @@ public void setFrame(int frame) {\n       return;\n     }\n     this.frame = MiscUtils.clamp(frame, getMinFrame(), getMaxFrame());\n-    verifyFrame();\n     frameTime = System.nanoTime();\n     notifyUpdate();\n   }\n \n   public void setMinFrame(int minFrame) {\n-    this.minFrame = minFrame;\n-    if (frame < minFrame) {\n-      frame = minFrame;\n-    }\n+    setMinAndMaxFrames(minFrame, (int) maxFrame);\n   }\n \n   public void setMaxFrame(int maxFrame) {\n-    this.maxFrame = maxFrame;\n-    if (frame > maxFrame) {\n-      frame = maxFrame;\n-    }\n+    setMinAndMaxFrames((int) minFrame, maxFrame);\n   }\n \n   public void setMinAndMaxFrames(int minFrame, int maxFrame) {\n     this.minFrame = minFrame;\n     this.maxFrame = maxFrame;\n-    frame = MiscUtils.clamp(frame, minFrame, maxFrame);\n+    setFrame((int) MiscUtils.clamp(frame, minFrame, maxFrame));\n   }\n \n   public void reverseAnimationSpeed() {",
    "output": "Prevented min/max frames from invalidating the animation"
  },
  {
    "input": "diff --git a/LottieSample/src/release/java/com/airbnb/lotte/samples/LottieApplication.java b/LottieSample/src/release/java/com/airbnb/lotte/samples/LottieApplication.java\n--- a/LottieSample/src/release/java/com/airbnb/lotte/samples/LottieApplication.java\n+++ b/LottieSample/src/release/java/com/airbnb/lotte/samples/LottieApplication.java\n@@ -1,15 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.app.Application;\n-import android.support.v4.util.Pair;\n-\n-public class LottieApplication extends Application implements ILottieApplication {\n-  @Override\n-  public void startRecordingDroppedFrames() {\n-  }\n-\n-  @Override\n-  public Pair<Integer, Long> stopRecordingDroppedFrames() {\n-    return new Pair<>(0, 0L);\n-  }\n-}",
    "output": "[Lottie Sample] Fixed app theme for <v27"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -232,13 +232,20 @@ public static LottieComposition fromFileSync(Context context, String fileName) {\n \n     @Nullable\n     public static LottieComposition fromInputStreamSync(InputStream stream) {\n+      return fromInputStreamSync(stream, true);\n+    }\n+\n+    @Nullable\n+    public static LottieComposition fromInputStreamSync(InputStream stream, boolean close) {\n       LottieComposition composition;\n       try {\n         composition = fromJsonSync(new JsonReader(new InputStreamReader(stream)));\n       } catch (IOException e) {\n         throw new IllegalArgumentException(\"Unable to parse composition.\", e);\n       } finally {\n-        closeQuietly(stream);\n+        if (close) {\n+          closeQuietly(stream);\n+        }\n       }\n       return composition;\n     }",
    "output": "Added an api to create a composition without closing the InputStream"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -177,7 +177,11 @@ private void init(@Nullable AttributeSet attrs) {\n   }\n \n   @Override public void setImageDrawable(Drawable drawable) {\n-    if (drawable != lottieDrawable) {\n+    setImageDrawable(drawable, true);\n+  }\n+\n+  private void setImageDrawable(Drawable drawable, boolean recycle) {\n+    if (recycle && drawable != lottieDrawable) {\n       recycleBitmaps();\n     }\n     cancelLoaderTask();\n@@ -780,8 +784,8 @@ public <T> void addValueCallback(KeyPath keyPath, T property,\n   public void setScale(float scale) {\n     lottieDrawable.setScale(scale);\n     if (getDrawable() == lottieDrawable) {\n-      setImageDrawable(null);\n-      setImageDrawable(lottieDrawable);\n+      setImageDrawable(null, false);\n+      setImageDrawable(lottieDrawable, false);\n     }\n   }\n ",
    "output": "Added an option to setDrawable without recycling bitmaps\n\nThis prevents scaling an animation from recycling bitmaps"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -274,6 +274,13 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n     lottieDrawable.enableMergePathsForKitKatAndAbove(enable);\n   }\n \n+  /**\n+   * Returns whether merge paths are enabled for KitKat and above.\n+   */\n+  public boolean isMergePathsEnabledForKitKatAndAbove() {\n+    return lottieDrawable.isMergePathsEnabledForKitKatAndAbove();\n+  }\n+\n   /**\n    * @see #useHardwareAcceleration(boolean)\n    */\n@@ -315,6 +322,10 @@ public void useHardwareAcceleration(boolean use) {\n     enableOrDisableHardwareLayer();\n   }\n \n+  public boolean getUseHardwareAcceleration() {\n+    return useHardwareLayer;\n+  }\n+\n   /**\n    * Sets the animation from a file in the raw directory.\n    * This will load and deserialize the file asynchronously.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -140,6 +140,10 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n     }\n   }\n \n+  public boolean isMergePathsEnabledForKitKatAndAbove() {\n+    return enableMergePaths;\n+  }\n+\n   /**\n    * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n    * located because bodymovin uses the name filenames across all compositions (img_#).\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n@@ -83,7 +83,7 @@ public void logRenderTimes() {\n     }\n   }\n \n-  @SuppressWarnings(\"WeakerAccess\") public List<Pair<String, Float>> getSortedRenderTimes() {\n+  public List<Pair<String, Float>> getSortedRenderTimes() {\n     if (!enabled) {\n       return Collections.emptyList();\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n@@ -64,8 +64,8 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n           int minorVersion = Integer.parseInt(versions[1]);\n           int patchVersion = Integer.parseInt(versions[2]);\n           if (!Utils.isAtLeastVersion(majorVersion, minorVersion, patchVersion,\n-              4, 5, 0)) {\n-            composition.addWarning(\"Lottie only supports bodymovin >= 4.5.0\");\n+              4, 4, 0)) {\n+            composition.addWarning(\"Lottie only supports bodymovin >= 4.4.0\");\n           }\n           break;\n         case \"layers\":",
    "output": "[Sample App] Added a ton of refinement, warnings, and render times to PlayerFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n--- a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n+++ b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n@@ -1,46 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.app.Application;\n-import android.support.v4.util.Pair;\n-import android.support.v7.app.AppCompatDelegate;\n-import android.view.Gravity;\n-\n-import com.airbnb.lottie.L;\n-import com.codemonkeylabs.fpslibrary.FrameDataCallback;\n-import com.codemonkeylabs.fpslibrary.TinyDancer;\n-\n-public class LottieApplication extends Application implements ILottieApplication {\n-  private int droppedFrames;\n-  private long droppedFramesStartingNs;\n-  private long currentFrameNs;\n-  @Override public void onCreate() {\n-    super.onCreate();\n-    AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);\n-    if (L.DBG) {\n-      TinyDancer.create()\n-          .startingGravity(Gravity.TOP | Gravity.END)\n-          .startingXPosition(0)\n-          .startingYPosition(0)\n-          .addFrameDataCallback(new FrameDataCallback() {\n-            @Override\n-            public void doFrame(long previousFrameNs, long currentFrameNs, int droppedFrames) {\n-              LottieApplication.this.droppedFrames += droppedFrames;\n-              LottieApplication.this.currentFrameNs = currentFrameNs;\n-            }\n-          })\n-          .show(this);\n-    }\n-  }\n-\n-  @Override public void startRecordingDroppedFrames() {\n-    droppedFrames = 0;\n-    droppedFramesStartingNs = currentFrameNs;\n-  }\n-\n-  @Override public Pair<Integer, Long> stopRecordingDroppedFrames() {\n-    long duration = currentFrameNs - droppedFramesStartingNs;\n-    Pair<Integer, Long> ret = new Pair<>(droppedFrames, duration);\n-    droppedFrames = 0;\n-    return ret;\n-  }\n-}",
    "output": "[Sample App] Added PreviewFragment"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -211,7 +211,7 @@ private float getMinFrame() {\n     if (composition == null) {\n       return 0;\n     }\n-    return minFrame == Integer.MIN_VALUE ? 0 : minFrame;\n+    return minFrame == Integer.MIN_VALUE ? composition.getStartFrame() : minFrame;\n   }\n \n   private float getMaxFrame() {",
    "output": "Fix minFrame when composition has a startFrame > 0 (#657)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java\n@@ -5,12 +5,12 @@\n import android.animation.ValueAnimator;\n import android.os.Build;\n \n-import java.util.HashSet;\n import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n \n public abstract class BaseLottieAnimator extends ValueAnimator {\n-  private final Set<ValueAnimator.AnimatorUpdateListener> updateListeners = new HashSet<>();\n-  private final Set<AnimatorListener> listeners = new HashSet<>();\n+  private final Set<ValueAnimator.AnimatorUpdateListener> updateListeners = new CopyOnWriteArraySet<>();\n+  private final Set<AnimatorListener> listeners = new CopyOnWriteArraySet<>();\n \n   @Override public long getStartDelay() {\n     throw new UnsupportedOperationException(\"LottieAnimator does not support getStartDelay.\");",
    "output": "Use thread-safe set for listeners. Closes #639 (#642)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java\n@@ -11,7 +11,6 @@\n  * Allows you to set a callback on a resolved {@link com.airbnb.lottie.model.KeyPath} to modify\n  * its animation values at runtime.\n  */\n-@RestrictTo(RestrictTo.Scope.LIBRARY)\n public class LottieValueCallback<T> {\n   private final LottieFrameInfo<T> frameInfo = new LottieFrameInfo<>();\n   @Nullable BaseKeyframeAnimation<?, ?> animation;",
    "output": "Remove unneccesary @RestrictTo modified on LottieValueCallback\n\nFixes #636"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n@@ -46,7 +46,7 @@ public class KeyPath {\n   @Nullable private KeyPathElement resolvedElement;\n \n   public KeyPath(String... keys) {\n-    this.keys = new ArrayList<>(Arrays.asList(keys));\n+    this.keys = Arrays.asList(keys);\n   }\n \n   /**",
    "output": "Removed unnecessary ArrayList wrapping (#637)\n\nArrays.asLists already creates a List."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java\n@@ -18,6 +18,8 @@ public SplitDimensionPathKeyframeAnimation(\n \n     this.xAnimation = xAnimation;\n     this.yAnimation = yAnimation;\n+    // We need to call an initial setProgress so point gets set with the initial value.\n+    setProgress(getProgress());\n   }\n \n   @Override public void setProgress(float progress) {",
    "output": "Fixed a bug in which the initial value of a split path transform was never set."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -511,7 +511,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) final float progress) {\n       });\n       return;\n     }\n-    animator.setFrame((int) (progress * composition.getDurationFrames()));\n+    animator.setFrame((int) (progress * composition.getDurationFrames() + composition.getStartFrame()));\n   }\n \n   /**",
    "output": "Fix setProgress when startFrame > 0. (#629)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -353,7 +353,7 @@ public void setAnimation(@RawRes final int animationResId, final CacheStrategy c\n       return;\n     }\n \n-    lottieDrawable.cancelAnimation();\n+    clearComposition();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId,\n         new OnCompositionLoadedListener() {\n@@ -402,7 +402,7 @@ public void setAnimation(final String animationName, final CacheStrategy cacheSt\n       return;\n     }\n \n-    lottieDrawable.cancelAnimation();\n+    clearComposition();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName,\n         new OnCompositionLoadedListener() {\n@@ -447,6 +447,7 @@ public void setAnimationFromJson(String jsonString) {\n    * bodymovin json from the network and pass it directly here.\n    */\n   public void setAnimation(JsonReader reader) {\n+    clearComposition();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.Factory.fromJsonReader(reader, loadedListener);\n   }\n@@ -825,6 +826,11 @@ public PerformanceTracker getPerformanceTracker() {\n     return lottieDrawable.getPerformanceTracker();\n   }\n \n+  private void clearComposition() {\n+    composition = null;\n+    lottieDrawable.clearComposition();\n+  }\n+\n   private void enableOrDisableHardwareLayer() {\n     boolean useHardwareLayer = this.useHardwareLayer && lottieDrawable.isAnimating();\n     setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);",
    "output": "Clear the composition when a new one is set (#625)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie;\n \n import android.content.Context;\n+import android.content.res.Resources;\n import android.graphics.Rect;\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n@@ -13,10 +14,12 @@\n \n import com.airbnb.lottie.model.Font;\n import com.airbnb.lottie.model.FontCharacter;\n-import com.airbnb.lottie.parser.AsyncCompositionLoader;\n import com.airbnb.lottie.model.layer.Layer;\n+import com.airbnb.lottie.parser.AsyncCompositionLoader;\n import com.airbnb.lottie.parser.LottieCompositionParser;\n \n+import org.json.JSONObject;\n+\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n@@ -237,6 +240,28 @@ public static LottieComposition fromInputStreamSync(InputStream stream) {\n       return composition;\n     }\n \n+    /**\n+     * Lottie now uses a streaming json parser. Prefer {@link #fromJsonSync(JsonReader)} if possible.\n+     * <p>\n+     * This will call toString() on your entire JSONObject.\n+     */\n+    @Deprecated\n+    public static LottieComposition fromJsonSync(@SuppressWarnings(\"unused\") Resources res, JSONObject json) {\n+      return fromJsonSync(json.toString());\n+    }\n+\n+    /**\n+     * Prefer using a JsonReader directly when possible. Reference the source for the async\n+     * factory methods above.\n+     */\n+    public static LottieComposition fromJsonSync(String string) {\n+      try {\n+        return fromJsonSync(new JsonReader(new StringReader(string)));\n+      } catch (IOException e) {\n+        throw new IllegalArgumentException(e);\n+      }\n+    }\n+\n     public static LottieComposition fromJsonSync(JsonReader reader) throws IOException {\n       return LottieCompositionParser.parse(reader);\n     }",
    "output": "Add back but deprecate fromJsonSync(Resources, JSONObject)\n\n#612"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedFloatValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedFloatValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedFloatValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedFloatValue.java\n@@ -11,8 +11,7 @@ public LottieInterpolatedFloatValue(Float startValue, Float endValue) {\n     super(startValue, endValue);\n   }\n \n-  public LottieInterpolatedFloatValue(Float startValue, Float endValue,\n-      Interpolator interpolator) {\n+  public LottieInterpolatedFloatValue(Float startValue, Float endValue, Interpolator interpolator) {\n     super(startValue, endValue, interpolator);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedIntegerValue.java\n@@ -11,8 +11,7 @@ public LottieInterpolatedIntegerValue(Integer startValue, Integer endValue) {\n     super(startValue, endValue);\n   }\n \n-  public LottieInterpolatedIntegerValue(Integer startValue, Integer endValue,\n-      Interpolator interpolator) {\n+  public LottieInterpolatedIntegerValue(Integer startValue, Integer endValue, Interpolator interpolator) {\n     super(startValue, endValue, interpolator);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedPointValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedPointValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedPointValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedPointValue.java\n@@ -13,8 +13,7 @@ public LottieInterpolatedPointValue(PointF startValue, PointF endValue) {\n     super(startValue, endValue);\n   }\n \n-  public LottieInterpolatedPointValue(PointF startValue, PointF endValue,\n-      Interpolator interpolator) {\n+  public LottieInterpolatedPointValue(PointF startValue, PointF endValue, Interpolator interpolator) {\n     super(startValue, endValue, interpolator);\n   }\n ",
    "output": "Fixed some line wrapping"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -335,7 +335,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n         break;\n       case MaskModeIntersect:\n         Log.w(L.TAG, \"Animation contains intersect masks. They are not supported but will be \" +\n-            \"treated like intersect masks.\");\n+            \"treated like add masks.\");\n       case MaskModeAdd:\n       default:\n         // As a hack, we treat all non-subtract masks like add masks. This is not correct but it's",
    "output": "Fixed a typo in a BaseLayer mask warning"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -71,28 +71,19 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     for (int i = 0; i < layerMap.size(); i++) {\n       long key = layerMap.keyAt(i);\n       BaseLayer layerView = layerMap.get(key);\n-      assertNonNullForGitHubIssue(layerMap, layerView);\n+      // This shouldn't happen but it appears as if sometimes on pre-lollipop devices when\n+      // compiled with d8, layerView is null sometimes.\n+      // https://github.com/airbnb/lottie-android/issues/524\n+      if (layerView == null) {\n+        continue;\n+      }\n       BaseLayer parentLayer = layerMap.get(layerView.getLayerModel().getParentId());\n       if (parentLayer != null) {\n         layerView.setParentLayer(parentLayer);\n       }\n     }\n   }\n \n-  /**\n-   * Extra logging for https://github.com/airbnb/lottie-android/issues/524\n-   */\n-  private void assertNonNullForGitHubIssue(\n-      LongSparseArray<BaseLayer> layerMap, BaseLayer layerView) {\n-    if (layerMap == null) {\n-      throw new NullPointerException(\"layerMap is null!\");\n-    } else if (layerView == null) {\n-      throw new NullPointerException(\"layerView is null!\");\n-    } else if (layerView.getLayerModel() == null) {\n-      throw new NullPointerException(\"layerModel is null!\");\n-    }\n-  }\n-\n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"CompositionLayer#draw\");\n     canvas.save();",
    "output": "Ignore null parent layers\n\nIt isn't clear what the actual issue is here and it may actually\nbe a bug in d8. This should at least prevent the crash.\nWorst case, in these rare cases, a layer may not be parented correctly\nbut it could be resolved in future d8 updates as well.\nFixes #524"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -11,6 +11,7 @@\n import android.support.annotation.CallSuper;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n+import android.util.Log;\n \n import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieComposition;\n@@ -320,16 +321,26 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {\n \n   private void applyMasks(Canvas canvas, Matrix matrix) {\n     applyMasks(canvas, matrix, Mask.MaskMode.MaskModeAdd);\n+    // Treat intersect masks like add masks. This is not correct but it's closer.\n+    applyMasks(canvas, matrix, Mask.MaskMode.MaskModeIntersect);\n     applyMasks(canvas, matrix, Mask.MaskMode.MaskModeSubtract);\n   }\n \n   @SuppressLint(\"WrongConstant\") private void applyMasks(Canvas canvas, Matrix matrix,\n       Mask.MaskMode maskMode) {\n     Paint paint;\n-    if (maskMode == Mask.MaskMode.MaskModeSubtract) {\n-      paint = subtractMaskPaint;\n-    } else {\n-      paint = addMaskPaint;\n+    switch (maskMode) {\n+      case MaskModeSubtract:\n+        paint = subtractMaskPaint;\n+        break;\n+      case MaskModeIntersect:\n+        Log.w(L.TAG, \"Animation contains intersect masks. They are not supported but will be \" +\n+            \"treated like intersect masks.\");\n+      case MaskModeAdd:\n+      default:\n+        // As a hack, we treat all non-subtract masks like add masks. This is not correct but it's\n+        // better than nothing.\n+        paint = addMaskPaint;\n     }\n \n     //noinspection ConstantConditions",
    "output": "Treat intersect masks like add masks (#607)\n\nThis is not always correct but can be very close and is at least\r\nbetter than doing nothing.\r\nLottie will also log when this happens.\r\nFixes #601"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n@@ -162,12 +162,12 @@ private static void parseAssets(JsonReader reader, LottieComposition composition\n         }\n       }\n       reader.endObject();\n-      if (!layers.isEmpty()) {\n-        precomps.put(id, layers);\n-      } else if (imageFileName != null) {\n+      if (imageFileName != null) {\n         LottieImageAsset image =\n             new LottieImageAsset(width, height, id, imageFileName, relativeFolder);\n         images.put(image.getId(), image);\n+      } else {\n+        precomps.put(id, layers);\n       }\n     }\n     reader.endArray();",
    "output": "Fix a crash when a precomp has no layers\n\nFixes #590"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -51,22 +51,15 @@ public class LottieComposition {\n   private float startFrame;\n   private float endFrame;\n   private float frameRate;\n-  /* Bodymovin version */\n-  private int majorVersion;\n-  private int minorVersion;\n-  private int patchVersion;\n-\n-  public void init(Rect bounds, float startFrame, float endFrame, float frameRate, int majorVersion,\n-      int minorVersion, int patchVersion, List<Layer> layers, LongSparseArray<Layer> layerMap,\n-      Map<String, List<Layer>> precomps, Map<String, LottieImageAsset> images,\n+\n+  public void init(Rect bounds, float startFrame, float endFrame, float frameRate,\n+      List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,\n+      List<Layer>> precomps, Map<String, LottieImageAsset> images,\n       SparseArrayCompat<FontCharacter> characters, Map<String, Font> fonts) {\n     this.bounds = bounds;\n     this.startFrame = startFrame;\n     this.endFrame = endFrame;\n     this.frameRate = frameRate;\n-    this.majorVersion = majorVersion;\n-    this.minorVersion = minorVersion;\n-    this.patchVersion = patchVersion;\n     this.layers = layers;\n     this.layerMap = layerMap;\n     this.precomps = precomps;\n@@ -107,21 +100,6 @@ public Layer layerModelForId(long id) {\n     return (long) (frameDuration / frameRate * 1000);\n   }\n \n-  @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public int getMajorVersion() {\n-    return majorVersion;\n-  }\n-\n-  @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public int getMinorVersion() {\n-    return minorVersion;\n-  }\n-\n-  @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public int getPatchVersion() {\n-    return patchVersion;\n-  }\n-\n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n   public float getStartFrame() {\n     return startFrame;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java\n@@ -28,9 +28,6 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n     float startFrame = 0f;\n     float endFrame = 0f;\n     float frameRate = 0f;\n-    int majorVersion = 0;\n-    int minorVersion = 0;\n-    int patchVersion = 0;\n     final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n     final List<Layer> layers = new ArrayList<>();\n     int width = 0;\n@@ -63,10 +60,11 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n         case \"v\":\n           String version = reader.nextString();\n           String[] versions = version.split(\"\\\\.\");\n-          majorVersion = Integer.parseInt(versions[0]);\n-          minorVersion = Integer.parseInt(versions[1]);\n-          patchVersion = Integer.parseInt(versions[2]);\n-          if (!Utils.isAtLeastVersion(composition, 4, 5, 0)) {\n+          int majorVersion = Integer.parseInt(versions[0]);\n+          int minorVersion = Integer.parseInt(versions[1]);\n+          int patchVersion = Integer.parseInt(versions[2]);\n+          if (!Utils.isAtLeastVersion(majorVersion, minorVersion, patchVersion,\n+              4, 5, 0)) {\n             composition.addWarning(\"Lottie only supports bodymovin >= 4.5.0\");\n           }\n           break;\n@@ -92,8 +90,8 @@ public static LottieComposition parse(JsonReader reader) throws IOException {\n     int scaledHeight = (int) (height * scale);\n     Rect bounds = new Rect(0, 0, scaledWidth, scaledHeight);\n \n-    composition.init(bounds, startFrame, endFrame, frameRate, majorVersion, minorVersion,\n-        patchVersion, layers, layerMap, precomps, images, characters, fonts);\n+    composition.init(bounds, startFrame, endFrame, frameRate, layers, layerMap, precomps,\n+        images, characters, fonts);\n \n     return composition;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -12,7 +12,6 @@\n import android.util.DisplayMetrics;\n \n import com.airbnb.lottie.L;\n-import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.animation.content.TrimPathContent;\n \n import java.io.Closeable;\n@@ -152,21 +151,21 @@ public static void applyTrimPathIfNeeded(\n   }\n \n   @SuppressWarnings(\"SameParameterValue\")\n-  public static boolean isAtLeastVersion(LottieComposition composition, int major, int minor, int\n-      patch) {\n-    if (composition.getMajorVersion() < major) {\n+  public static boolean isAtLeastVersion(int major, int minor, int patch, int minMajor, int minMinor, int\n+      minPatch) {\n+    if (major < minMajor) {\n       return false;\n-    } else if (composition.getMajorVersion() > major) {\n+    } else if (major > minMajor) {\n       return true;\n     }\n \n-    if (composition.getMinorVersion() < minor) {\n+    if (minor < minMinor) {\n       return false;\n-    } else if (composition.getMinorVersion() > minor) {\n+    } else if (minor > minMinor) {\n       return true;\n     }\n \n-    return composition.getPatchVersion() >= patch;\n+    return patch >= minPatch;\n   }\n \n   public static int hashFor(float a, float b, float c, float d) {",
    "output": "Fix min bodymoving version check. (#605)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java\n@@ -25,6 +25,12 @@ public PathKeyframeAnimation(List<? extends Keyframe<PointF>> keyframes) {\n       return keyframe.startValue;\n     }\n \n+    if (valueCallback != null) {\n+      return valueCallback.getValue(pathKeyframe.startFrame, pathKeyframe.endFrame,\n+          pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress(),\n+          keyframeProgress, getProgress());\n+    }\n+\n     if (pathMeasureKeyframe != pathKeyframe) {\n       pathMeasure = new PathMeasure(path, false);\n       pathMeasureKeyframe = pathKeyframe;",
    "output": "Enable value callbacks for PathKeyframeAnimation"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -204,6 +204,7 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca\n         timeRemapping = null;\n       } else {\n         timeRemapping = new ValueCallbackKeyframeAnimation<>((LottieValueCallback<Float>) callback);\n+        addAnimation(timeRemapping);\n       }\n     }\n   }",
    "output": "Add time reamapping value callbacks as animations so they get callbacks"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java\n@@ -5,6 +5,7 @@\n import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n import android.graphics.Paint;\n+import android.graphics.Path;\n import android.graphics.RectF;\n import android.support.annotation.Nullable;\n \n@@ -18,6 +19,8 @@ public class SolidLayer extends BaseLayer {\n \n   private final RectF rect = new RectF();\n   private final Paint paint = new Paint();\n+  private final float[] points = new float[8];\n+  private final Path path = new Path();\n   private final Layer layerModel;\n   @Nullable private BaseKeyframeAnimation<ColorFilter, ColorFilter> colorFilterAnimation;\n \n@@ -42,20 +45,34 @@ public class SolidLayer extends BaseLayer {\n       paint.setColorFilter(colorFilterAnimation.getValue());\n     }\n     if (alpha > 0) {\n-      updateRect(parentMatrix);\n-      canvas.drawRect(rect, paint);\n+      points[0] = 0;\n+      points[1] = 0;\n+      points[2] = layerModel.getSolidWidth();\n+      points[3] = 0;\n+      points[4] = layerModel.getSolidWidth();\n+      points[5] = layerModel.getSolidHeight();\n+      points[6] = 0;\n+      points[7] = layerModel.getSolidHeight();\n+\n+      // We can't map rect here because if there is rotation on the transform then we aren't\n+      // actually drawing a rect.\n+      parentMatrix.mapPoints(points);\n+      path.reset();\n+      path.moveTo(points[0], points[1]);\n+      path.lineTo(points[2], points[3]);\n+      path.lineTo(points[4], points[5]);\n+      path.lineTo(points[6], points[7]);\n+      path.lineTo(points[0], points[1]);\n+      path.close();\n+      canvas.drawPath(path, paint);\n     }\n   }\n \n   @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {\n     super.getBounds(outBounds, parentMatrix);\n-    updateRect(boundsMatrix);\n-    outBounds.set(rect);\n-  }\n-\n-  private void updateRect(Matrix matrix) {\n     rect.set(0, 0, layerModel.getSolidWidth(), layerModel.getSolidHeight());\n-    matrix.mapRect(rect);\n+    boundsMatrix.mapRect(rect);\n+    outBounds.set(rect);\n   }\n \n   @SuppressWarnings(\"unchecked\")",
    "output": "Fix rotations on solid layers (#598)\n\nPrior to this, the transform matrix got mapped to a solid layer's bounds. However, if there is a rotation then the final shape won't be a rect so we need to map the points instead.\r\n\r\nFixes #587"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java\n@@ -191,10 +191,6 @@ public boolean propagateToChildren(String key, int depth) {\n     return depth < keys.size() - 1 || keys.get(depth).equals(\"**\");\n   }\n \n-  public int size() {\n-    return keys.size();\n-  }\n-\n   /**\n    * We artificially create some container groups (like a root ContentGroup for the entire animation\n    * and for the contents of a ShapeLayer).\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n--- a/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/parser/DocumentDataParser.java\n@@ -11,10 +11,6 @@ public class DocumentDataParser implements ValueParser<DocumentData> {\n \n   private DocumentDataParser() {}\n \n-  public static DocumentData parse(JsonReader reader) throws IOException {\n-    return INSTANCE.parse(reader, 1f);\n-  }\n-\n   @Override public DocumentData parse(JsonReader reader, float scale) throws IOException {\n     String text = null;\n     String fontName = null;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -10,7 +10,6 @@\n import android.provider.Settings;\n import android.support.annotation.Nullable;\n import android.util.DisplayMetrics;\n-import android.view.WindowManager;\n \n import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieComposition;\n@@ -55,24 +54,6 @@ public static void closeQuietly(Closeable closeable) {\n     }\n   }\n \n-  public static int getScreenWidth(Context context) {\n-    if (displayMetrics == null) {\n-      displayMetrics = new DisplayMetrics();\n-    }\n-    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n-    wm.getDefaultDisplay().getMetrics(displayMetrics);\n-    return displayMetrics.widthPixels;\n-  }\n-\n-  public static int getScreenHeight(Context context) {\n-    if (displayMetrics == null) {\n-      displayMetrics = new DisplayMetrics();\n-    }\n-    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n-    wm.getDefaultDisplay().getMetrics(displayMetrics);\n-    return displayMetrics.heightPixels;\n-  }\n-\n   public static float getScale(Matrix matrix) {\n     points[0] = 0;\n     points[1] = 0;",
    "output": "Removed some unused code"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -500,7 +500,7 @@ public int getFrame() {\n       return 0;\n     }\n \n-    return (int) (getProgress() * composition.getDurationFrames());\n+    return Math.round((getProgress() * composition.getDurationFrames()));\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -51,7 +51,7 @@ public void setValue(@FloatRange(from = 0f, to = 1f) float value) {\n     float range = Math.abs(maxValue - minValue);\n     float animatedPercentage = distFromStart / range;\n     if (getDuration() > 0) {\n-      setCurrentPlayTime((long) (getDuration() * animatedPercentage));\n+      setCurrentPlayTime(Math.round(getDuration() * animatedPercentage));\n     }\n   }\n ",
    "output": "Round a frame when setting a value and retrieving a frame\n\nPreviously, frames were casted to ints/logs. However, this caused\nthem to be successaptable to floating point issues in which a frame\nmay be 49.99998 and rounded down to 49. Rounding the number should\nproduce more reliable frame calculations.\nFixes #591"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java b/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java\n@@ -1,7 +1,9 @@\n package com.airbnb.lottie.model.content;\n \n import android.util.JsonReader;\n+import android.util.Log;\n \n+import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieComposition;\n import com.airbnb.lottie.model.animatable.AnimatableIntegerValue;\n import com.airbnb.lottie.model.animatable.AnimatableShapeValue;\n@@ -12,8 +14,7 @@ public class Mask {\n   public enum MaskMode {\n     MaskModeAdd,\n     MaskModeSubtract,\n-    MaskModeIntersect,\n-    MaskModeUnknown\n+    MaskModeIntersect\n   }\n \n   private final MaskMode maskMode;\n@@ -38,7 +39,8 @@ public static Mask newMask(\n \n       reader.beginObject();\n       while (reader.hasNext()) {\n-        switch (reader.nextName()) {\n+        String mode = reader.nextName();\n+        switch (mode) {\n           case \"mode\":\n             switch (reader.nextString()) {\n               case \"a\":\n@@ -51,7 +53,8 @@ public static Mask newMask(\n                 maskMode = MaskMode.MaskModeIntersect;\n                 break;\n               default:\n-                maskMode = MaskMode.MaskModeUnknown;\n+                Log.w(L.TAG, \"Unknown mask mode \" + mode + \". Defaulting to Add.\");\n+                maskMode = MaskMode.MaskModeAdd;\n             }\n             break;\n           case \"pt\":\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -25,7 +25,6 @@\n import com.airbnb.lottie.model.KeyPath;\n import com.airbnb.lottie.model.KeyPathElement;\n import com.airbnb.lottie.model.content.Mask;\n-import com.airbnb.lottie.utils.Utils;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n import java.util.ArrayList;\n@@ -272,8 +271,6 @@ private void intersectBoundsWithMask(RectF rect, Matrix matrix) {\n         case MaskModeIntersect:\n           // TODO\n           return;\n-        case MaskModeUnknown:\n-          return;\n         case MaskModeAdd:\n         default:\n           path.computeBounds(tempMaskBoundsRect, false);",
    "output": "Default to MaskModeAdd but warn if another is set\n\nWith the new way Lottie handles masks, each type is handled explicitly.\nThe existing behavior defaulted to mask mode add so this restores\nthat behavior."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -17,6 +17,7 @@\n \n import com.airbnb.happo.SnapshotProvider;\n import com.airbnb.lottie.model.KeyPath;\n+import com.airbnb.lottie.value.LottieStaticInterpolatedIntegerValue;\n import com.airbnb.lottie.value.LottieStaticRelativeFloatValue;\n import com.airbnb.lottie.value.LottieStaticRelativePointValue;\n import com.airbnb.lottie.value.LottieStaticValue;\n@@ -417,14 +418,41 @@ private void testDynamicProperties() {\n         new KeyPath(\"**\"),\n         LottieProperty.COLOR_FILTER,\n         new LottieStaticValue<ColorFilter>(new SimpleColorFilter(Color.GREEN)));\n+\n+    testDynamicProperty(\n+        \"Opacity interpolation (0)\",\n+        new KeyPath(\"Shape Layer 1\", \"Rectangle\"),\n+        LottieProperty.TRANSFORM_OPACITY,\n+        new LottieStaticInterpolatedIntegerValue(10, 100),\n+        0f);\n+\n+    testDynamicProperty(\n+        \"Opacity interpolation (0.5)\",\n+        new KeyPath(\"Shape Layer 1\", \"Rectangle\"),\n+        LottieProperty.TRANSFORM_OPACITY,\n+        new LottieStaticInterpolatedIntegerValue(10, 100),\n+        0.5f);\n+\n+    testDynamicProperty(\n+        \"Opacity interpolation (1)\",\n+        new KeyPath(\"Shape Layer 1\", \"Rectangle\"),\n+        LottieProperty.TRANSFORM_OPACITY,\n+        new LottieStaticInterpolatedIntegerValue(10, 100),\n+        1f);\n   }\n \n   private <T> void testDynamicProperty(\n       String name, KeyPath keyPath, T property, LottieValueCallback<T> callback) {\n+    testDynamicProperty(name, keyPath, property, callback, 0f);\n+  }\n+\n+  private <T> void testDynamicProperty(\n+      String name, KeyPath keyPath, T property, LottieValueCallback<T> callback, float progress) {\n     LottieAnimationView animationView = new LottieAnimationView(context);\n     LottieComposition composition =\n         LottieComposition.Factory.fromFileSync(context, \"Tests/Shapes.json\");\n     animationView.setComposition(composition);\n+    animationView.setProgress(progress);\n     ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\n         ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n     animationView.addValueCallback(keyPath, property, callback);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedFloatValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedFloatValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedFloatValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedFloatValue.java\n@@ -0,0 +1,21 @@\n+package com.airbnb.lottie.value;\n+\n+import android.view.animation.Interpolator;\n+\n+import com.airbnb.lottie.utils.MiscUtils;\n+\n+public class LottieStaticInterpolatedFloatValue extends LottieStaticInterpolatedValue<Float> {\n+\n+  public LottieStaticInterpolatedFloatValue(Float startValue, Float endValue) {\n+    super(startValue, endValue);\n+  }\n+\n+  public LottieStaticInterpolatedFloatValue(Float startValue, Float endValue,\n+      Interpolator interpolator) {\n+    super(startValue, endValue, interpolator);\n+  }\n+\n+  @Override Float interpolateValue(Float startValue, Float endValue, float progress) {\n+    return MiscUtils.lerp(startValue, endValue, progress);\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedIntegerValue.java\n@@ -0,0 +1,21 @@\n+package com.airbnb.lottie.value;\n+\n+import android.view.animation.Interpolator;\n+\n+import com.airbnb.lottie.utils.MiscUtils;\n+\n+public class LottieStaticInterpolatedIntegerValue extends LottieStaticInterpolatedValue<Integer> {\n+\n+  public LottieStaticInterpolatedIntegerValue(Integer startValue, Integer endValue) {\n+    super(startValue, endValue);\n+  }\n+\n+  public LottieStaticInterpolatedIntegerValue(Integer startValue, Integer endValue,\n+      Interpolator interpolator) {\n+    super(startValue, endValue, interpolator);\n+  }\n+\n+  @Override Integer interpolateValue(Integer startValue, Integer endValue, float progress) {\n+    return MiscUtils.lerp(startValue, endValue, progress);\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedPointValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedPointValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedPointValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedPointValue.java\n@@ -0,0 +1,27 @@\n+package com.airbnb.lottie.value;\n+\n+import android.graphics.PointF;\n+import android.view.animation.Interpolator;\n+\n+import com.airbnb.lottie.utils.MiscUtils;\n+\n+public class LottieStaticInterpolatedPointValue extends LottieStaticInterpolatedValue<PointF> {\n+  private final PointF point = new PointF();\n+\n+  public LottieStaticInterpolatedPointValue(PointF startValue, PointF endValue) {\n+    super(startValue, endValue);\n+  }\n+\n+  public LottieStaticInterpolatedPointValue(PointF startValue, PointF endValue,\n+      Interpolator interpolator) {\n+    super(startValue, endValue, interpolator);\n+  }\n+\n+  @Override PointF interpolateValue(PointF startValue, PointF endValue, float progress) {\n+    point.set(\n+        MiscUtils.lerp(startValue.x, endValue.x, progress),\n+        MiscUtils.lerp(startValue.y, endValue.y, progress)\n+    );\n+    return point;\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedValue.java b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/value/LottieStaticInterpolatedValue.java\n@@ -0,0 +1,29 @@\n+package com.airbnb.lottie.value;\n+\n+import android.view.animation.Interpolator;\n+import android.view.animation.LinearInterpolator;\n+\n+abstract class LottieStaticInterpolatedValue<T> extends LottieValueCallback<T> {\n+\n+  private final T startValue;\n+  private final T endValue;\n+  private final Interpolator interpolator;\n+\n+  LottieStaticInterpolatedValue(T startValue, T endValue) {\n+    this(startValue, endValue, new LinearInterpolator());\n+  }\n+\n+  LottieStaticInterpolatedValue(T startValue, T endValue, Interpolator interpolator) {\n+    this.startValue = startValue;\n+    this.endValue = endValue;\n+    this.interpolator = interpolator;\n+  }\n+\n+  @Override public T getValue(float startFrame, float endFrame, T startValue, T endValue,\n+      float linearKeyframeProgress, float interpolatedKeyframeProgress, float overallProgress) {\n+    float progress = interpolator.getInterpolation(overallProgress);\n+    return interpolateValue(this.startValue, this.endValue, progress);\n+  }\n+\n+  abstract T interpolateValue(T startValue, T endValue, float progress);\n+}",
    "output": "Added an interpolated lottie value (#589)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java\n@@ -50,7 +50,13 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     this.delegate = assetDelegate;\n   }\n \n+  /**\n+   * Returns the previously set bitmap or null.\n+   */\n   @Nullable public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n+    if (bitmap == null) {\n+      return bitmaps.remove(id);\n+    }\n     return bitmaps.put(id, bitmap);\n   }\n ",
    "output": "Prevent ImageAssetManager entries with null bitmaps\n\nFixes #586"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -9,6 +9,7 @@\n import android.graphics.Matrix;\n import android.graphics.PixelFormat;\n import android.graphics.Typeface;\n+import android.graphics.drawable.Animatable;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n import android.support.annotation.FloatRange;\n@@ -45,7 +46,8 @@\n  * handles bitmap recycling and asynchronous loading\n  * of compositions.\n  */\n-@SuppressWarnings({\"WeakerAccess\", \"unused\"}) public class LottieDrawable extends Drawable implements Drawable.Callback {\n+@SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+public class LottieDrawable extends Drawable implements Drawable.Callback, Animatable {\n   private static final String TAG = LottieDrawable.class.getSimpleName();\n \n   private interface LazyCompositionTask {\n@@ -303,6 +305,18 @@ public void clearComposition() {\n \n // <editor-fold desc=\"animator\">\n \n+  @Override public void start() {\n+    playAnimation();\n+  }\n+\n+  @Override public void stop() {\n+    endAnimation();\n+  }\n+\n+  @Override public boolean isRunning() {\n+    return isAnimating();\n+  }\n+\n   /**\n    * Plays the animation from the beginning. If speed is < 0, it will start at the end\n    * and play towards the beginning\n@@ -319,6 +333,11 @@ public void playAnimation() {\n     animator.playAnimation();\n   }\n \n+  public void endAnimation() {\n+    lazyCompositionTasks.clear();\n+    animator.endAnimation();\n+  }\n+\n   /**\n    * Continues playing the animation from its current position. If speed < 0, it will play backwards\n    * from the current position.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -105,6 +105,10 @@ public void playAnimation() {\n     setValue(isReversed() ? maxValue : minValue);\n   }\n \n+  public void endAnimation() {\n+    end();\n+  }\n+\n   public void pauseAnimation() {\n     float value = this.value;\n     cancel();",
    "output": "Make lottie drawable implement animatable (#580)\n\nThis pull request updates LottieDrawable to implement the Animatable interface. See #579.\r\n\r\nThe implementation behaves the same as it does for AnimatedVectorDrawables: https://github.com/aosp-mirror/platform_frameworks_base/blob/oreo-mr1-release/graphics/java/android/graphics/drawable/AnimatedVectorDrawable.java#L893-L945\r\n\r\nTLDR:\r\n* start() calls playAnimation()\r\n* stop() calls animator.end()\r\n* isRunning() calls isAnimating()"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -574,6 +574,10 @@ public void removeUpdateListener(ValueAnimator.AnimatorUpdateListener updateList\n     lottieDrawable.removeAnimatorUpdateListener(updateListener);\n   }\n \n+  public void removeAllUpdateListeners() {\n+    lottieDrawable.removeAllUpdateListeners();\n+  }\n+\n   public void addAnimatorListener(Animator.AnimatorListener listener) {\n     lottieDrawable.addAnimatorListener(listener);\n   }\n@@ -582,6 +586,10 @@ public void removeAnimatorListener(Animator.AnimatorListener listener) {\n     lottieDrawable.removeAnimatorListener(listener);\n   }\n \n+  public void removeAllAnimatorListeners() {\n+    lottieDrawable.removeAllAnimatorListeners();\n+  }\n+\n   /**\n    * @see #setRepeatCount(int)\n    */\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -439,6 +439,10 @@ public void removeAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener up\n     animator.removeUpdateListener(updateListener);\n   }\n \n+  public void removeAllUpdateListeners() {\n+    animator.removeAllUpdateListeners();\n+  }\n+\n   public void addAnimatorListener(Animator.AnimatorListener listener) {\n     animator.addListener(listener);\n   }\n@@ -447,6 +451,10 @@ public void removeAnimatorListener(Animator.AnimatorListener listener) {\n     animator.removeListener(listener);\n   }\n \n+  public void removeAllAnimatorListeners() {\n+    animator.removeAllListeners();\n+  }\n+\n   /**\n    * Sets the progress to the specified frame.\n    * If the composition isn't set yet, the progress will be set to the frame when",
    "output": "Methods for removing all of animator listeners (#581)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -97,8 +97,10 @@ public void run() {\n \n   private void runAnimation(final String name) {\n     LottieComposition composition = LottieComposition.Factory.fromFileSync(context, name);\n-    if (composition.getBounds().width() > Resources.getSystem().getDisplayMetrics().widthPixels ||\n-        composition.getBounds().height() > Resources.getSystem().getDisplayMetrics().heightPixels) {\n+    if (composition.getBounds().width() > 4 * Resources.getSystem().getDisplayMetrics().widthPixels ||\n+        composition.getBounds().height() > 4 * Resources.getSystem().getDisplayMetrics().heightPixels) {\n+      Log.d(\"Happo\", \"\" + name + \" is too large. Skipping (\" + composition.getBounds().width() +\n+          \"x\" + composition.getBounds().height() + \")\");\n       return;\n     }\n     drawComposition(composition, name);",
    "output": "Allow larger tests"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -67,13 +67,28 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     for (int i = 0; i < layerMap.size(); i++) {\n       long key = layerMap.keyAt(i);\n       BaseLayer layerView = layerMap.get(key);\n+      assertNonNullForGitHubIssue(layerMap, layerView);\n       BaseLayer parentLayer = layerMap.get(layerView.getLayerModel().getParentId());\n       if (parentLayer != null) {\n         layerView.setParentLayer(parentLayer);\n       }\n     }\n   }\n \n+  /**\n+   * Extra logging for https://github.com/airbnb/lottie-android/issues/524\n+   */\n+  private void assertNonNullForGitHubIssue(\n+      LongSparseArray<BaseLayer> layerMap, BaseLayer layerView) {\n+    if (layerMap == null) {\n+      throw new NullPointerException(\"layerMap is null!\");\n+    } else if (layerView == null) {\n+      throw new NullPointerException(\"layerView is null!\");\n+    } else if (layerView.getLayerModel() == null) {\n+      throw new NullPointerException(\"layerModel is null!\");\n+    }\n+  }\n+\n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"CompositionLayer#draw\");\n     canvas.save();",
    "output": "Add logging for #524"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java\n@@ -21,6 +21,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.airbnb.lottie.utils.MiscUtils.clamp;\n+\n public abstract class BaseStrokeContent implements DrawingContent,\n     BaseKeyframeAnimation.AnimationListener {\n \n@@ -124,7 +126,7 @@ public abstract class BaseStrokeContent implements DrawingContent,\n   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"StrokeContent#draw\");\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n-    paint.setAlpha(alpha);\n+    paint.setAlpha(clamp(alpha, 0, 255));\n     paint.setStrokeWidth(widthAnimation.getValue() * Utils.getScale(parentMatrix));\n     if (paint.getStrokeWidth() <= 0) {\n       // Android draws a hairline stroke for 0, After Effects doesn't.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java\n@@ -17,6 +17,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.airbnb.lottie.utils.MiscUtils.clamp;\n+\n public class FillContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n@@ -71,7 +73,7 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi\n     L.beginSection(\"FillContent#draw\");\n     paint.setColor(colorAnimation.getValue());\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n-    paint.setAlpha(alpha);\n+    paint.setAlpha(clamp(alpha, 0, 255));\n \n     path.reset();\n     for (int i = 0; i < paths.size(); i++) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java\n@@ -24,6 +24,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.airbnb.lottie.utils.MiscUtils.clamp;\n+\n public class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {\n   /**\n    * Cache the gradients such that it runs at 30fps.\n@@ -103,7 +105,7 @@ public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer,\n     paint.setShader(shader);\n \n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n-    paint.setAlpha(alpha);\n+    paint.setAlpha(clamp(alpha, 0, 255));\n \n     canvas.drawPath(path, paint);\n     L.endSection(\"GradientFillContent#draw\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java\n@@ -76,6 +76,10 @@ private static int floorDiv(int x, int y) {\n     return r;\n   }\n \n+  public static int clamp(int number, int min, int max) {\n+    return Math.max(min, Math.min(max, number));\n+  }\n+\n   public static float clamp(float number, float min, float max) {\n     return Math.max(min, Math.min(max, number));\n   }",
    "output": "Clamp alpha between 0 and 255 (#561)\n\nFixes #558"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -278,7 +278,7 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n       long endFrame = json.optLong(\"op\", 0);\n       float frameRate = (float) json.optDouble(\"fr\", 0);\n       String version = json.optString(\"v\");\n-      String[] versions = version.split(\"[.]\");\n+      String[] versions = version.split(\"\\\\.\");\n       int major = Integer.parseInt(versions[0]);\n       int minor = Integer.parseInt(versions[1]);\n       int patch = Integer.parseInt(versions[2]);",
    "output": "Use a different method for splitting the version string\n\nI think some devices have a broken regex function that causes\nsplit to fail on the current regex. This version may work better.\nFixes #559"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java\n@@ -2,6 +2,8 @@\n \n import android.content.Context;\n import android.content.res.Resources;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n import android.os.Environment;\n import android.support.annotation.Nullable;\n import android.util.Log;\n@@ -27,11 +29,15 @@ public class LottieSnapshotProvider extends SnapshotProvider {\n   private final BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();\n   private final ThreadPoolExecutor executor = new ThreadPoolExecutor(CORES, CORES, 15, TimeUnit.MINUTES, queue);\n   private final Context context;\n+  // Bitmap to return from an ImageAssetDelegate to make testing animations with images easier.\n+  private final Bitmap dummyBitmap;\n \n   private int remainingTasks = 0;\n \n   LottieSnapshotProvider(Context context) {\n     this.context = context;\n+    dummyBitmap = BitmapFactory.decodeResource(context.getResources(), com.airbnb.lottie.samples.R\n+        .drawable.airbnb);\n   }\n \n   @Override\n@@ -43,6 +49,12 @@ public void beginSnapshotting() {\n         tests[i] = \"Tests/\" + tests[i];\n       }\n       snapshotAssets(tests);\n+\n+      String[] lottiefiles = context.getAssets().list(\"lottiefiles\");\n+      for (int i = 0; i < lottiefiles.length; i++) {\n+        lottiefiles[i] = \"lottiefiles/\" + lottiefiles[i];\n+      }\n+      snapshotAssets(lottiefiles);\n     } catch (IOException e) {\n       onError(e);\n     }\n@@ -84,6 +96,11 @@ private void runAnimation(final String name) {\n \n   private void drawComposition(LottieComposition composition, String name) {\n     LottieAnimationView view = new LottieAnimationView(context);\n+    view.setImageAssetDelegate(new ImageAssetDelegate() {\n+      @Override public Bitmap fetchBitmap(LottieImageAsset asset) {\n+        return dummyBitmap;\n+      }\n+    });\n     view.setComposition(composition);\n     for (float progress : PROGRESS) {\n       view.setProgress(progress);\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -1,14 +1,12 @@\n package com.airbnb.lottie;\n \n import android.Manifest;\n-import android.content.res.Resources;\n import android.os.Build;\n import android.support.test.filters.LargeTest;\n import android.support.test.rule.ActivityTestRule;\n import android.support.test.rule.GrantPermissionRule;\n import android.support.test.runner.AndroidJUnit4;\n import android.text.TextUtils;\n-import android.util.TypedValue;\n \n import com.airbnb.happo.HappoRunner;\n import com.airbnb.lottie.samples.MainActivity;\n@@ -57,8 +55,4 @@ public class LottieTest {\n         com.airbnb.lottie.BuildConfig.VERSION_NAME + androidVersion);\n   }\n \n-  private int dpToPx(int dp) {\n-    Resources resources = mainActivityRule.getActivity().getResources();\n-    return (int) TypedValue.applyDimension(1, (float) dp, resources.getDisplayMetrics());\n-  }\n }",
    "output": "Add lottiefiles animations to happo tests (#560)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -129,7 +129,21 @@ private void init(@Nullable AttributeSet attrs) {\n       lottieDrawable.playAnimation();\n       autoPlay = true;\n     }\n-    lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n+\n+    if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false)) {\n+      lottieDrawable.setRepeatCount(LottieDrawable.INFINITE);\n+    }\n+\n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_repeatMode)) {\n+      setRepeatMode(ta.getInt(R.styleable.LottieAnimationView_lottie_repeatMode,\n+          LottieDrawable.RESTART));\n+    }\n+\n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_repeatCount)) {\n+      setRepeatCount(ta.getInt(R.styleable.LottieAnimationView_lottie_repeatCount,\n+          LottieDrawable.INFINITE));\n+    }\n+\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n     setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n@@ -225,8 +239,9 @@ public void clearColorFilters() {\n     ss.animationResId = animationResId;\n     ss.progress = lottieDrawable.getProgress();\n     ss.isAnimating = lottieDrawable.isAnimating();\n-    ss.isLooping = lottieDrawable.isLooping();\n     ss.imageAssetsFolder = lottieDrawable.getImageAssetsFolder();\n+    ss.repeatMode = lottieDrawable.getRepeatMode();\n+    ss.repeatCount = lottieDrawable.getRepeatCount();\n     return ss;\n   }\n \n@@ -247,11 +262,12 @@ public void clearColorFilters() {\n       setAnimation(animationResId);\n     }\n     setProgress(ss.progress);\n-    loop(ss.isLooping);\n     if (ss.isAnimating) {\n       playAnimation();\n     }\n     lottieDrawable.setImagesAssetsFolder(ss.imageAssetsFolder);\n+    setRepeatMode(ss.repeatMode);\n+    setRepeatCount(ss.repeatCount);\n   }\n \n   @Override protected void onAttachedToWindow() {\n@@ -594,10 +610,57 @@ public void removeAnimatorListener(Animator.AnimatorListener listener) {\n     lottieDrawable.removeAnimatorListener(listener);\n   }\n \n+  /**\n+   * @see #setRepeatCount(int)\n+   */\n+  @Deprecated\n   public void loop(boolean loop) {\n     lottieDrawable.loop(loop);\n   }\n \n+  /**\n+   * Defines what this animation should do when it reaches the end. This\n+   * setting is applied only when the repeat count is either greater than\n+   * 0 or {@link LottieDrawable#INFINITE}. Defaults to {@link LottieDrawable#RESTART}.\n+   *\n+   * @param mode {@link LottieDrawable#RESTART} or {@link LottieDrawable#REVERSE}\n+   */\n+  public void setRepeatMode(@LottieDrawable.RepeatMode int mode) {\n+    lottieDrawable.setRepeatMode(mode);\n+  }\n+\n+  /**\n+   * Defines what this animation should do when it reaches the end.\n+   *\n+   * @return either one of {@link LottieDrawable#REVERSE} or {@link LottieDrawable#RESTART}\n+   */\n+  @LottieDrawable.RepeatMode\n+  public int getRepeatMode() {\n+    return lottieDrawable.getRepeatMode();\n+  }\n+\n+  /**\n+   * Sets how many times the animation should be repeated. If the repeat\n+   * count is 0, the animation is never repeated. If the repeat count is\n+   * greater than 0 or {@link LottieDrawable#INFINITE}, the repeat mode will be taken\n+   * into account. The repeat count is 0 by default.\n+   *\n+   * @param count the number of times the animation should be repeated\n+   */\n+  public void setRepeatCount(int count) {\n+    lottieDrawable.setRepeatCount(count);\n+  }\n+\n+  /**\n+   * Defines how many times the animation should repeat. The default value\n+   * is 0.\n+   *\n+   * @return the number of times the animation should repeat, or {@link LottieDrawable#INFINITE}\n+   */\n+  public int getRepeatCount() {\n+    return lottieDrawable.getRepeatCount();\n+  }\n+\n   public boolean isAnimating() {\n     return lottieDrawable.isAnimating();\n   }\n@@ -732,8 +795,9 @@ private static class SavedState extends BaseSavedState {\n     int animationResId;\n     float progress;\n     boolean isAnimating;\n-    boolean isLooping;\n     String imageAssetsFolder;\n+    int repeatMode;\n+    int repeatCount;\n \n     SavedState(Parcelable superState) {\n       super(superState);\n@@ -744,8 +808,9 @@ private SavedState(Parcel in) {\n       animationName = in.readString();\n       progress = in.readFloat();\n       isAnimating = in.readInt() == 1;\n-      isLooping = in.readInt() == 1;\n       imageAssetsFolder = in.readString();\n+      repeatMode = in.readInt();\n+      repeatCount = in.readInt();\n     }\n \n     @Override\n@@ -754,8 +819,9 @@ public void writeToParcel(Parcel out, int flags) {\n       out.writeString(animationName);\n       out.writeFloat(progress);\n       out.writeInt(isAnimating ? 1 : 0);\n-      out.writeInt(isLooping ? 1 : 0);\n       out.writeString(imageAssetsFolder);\n+      out.writeInt(repeatMode);\n+      out.writeInt(repeatCount);\n     }\n \n     public static final Parcelable.Creator<SavedState> CREATOR =\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -12,6 +12,7 @@\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n import android.support.annotation.FloatRange;\n+import android.support.annotation.IntDef;\n import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n@@ -24,6 +25,8 @@\n import com.airbnb.lottie.model.layer.Layer;\n import com.airbnb.lottie.utils.LottieValueAnimator;\n \n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -63,6 +66,26 @@ private interface LazyCompositionTask {\n   private int alpha = 255;\n   private boolean performanceTrackingEnabled;\n \n+  @IntDef({RESTART, REVERSE})\n+  @Retention(RetentionPolicy.SOURCE)\n+  public @interface RepeatMode {}\n+\n+  /**\n+   * When the animation reaches the end and <code>repeatCount</code> is INFINITE\n+   * or a positive value, the animation restarts from the beginning.\n+   */\n+  public static final int RESTART = ValueAnimator.RESTART;\n+  /**\n+   * When the animation reaches the end and <code>repeatCount</code> is INFINITE\n+   * or a positive value, the animation reverses direction on every iteration.\n+   */\n+  public static final int REVERSE = ValueAnimator.REVERSE;\n+  /**\n+   * This value used used with the {@link #setRepeatCount(int)} property to repeat\n+   * the animation indefinitely.\n+   */\n+  public static final int INFINITE = ValueAnimator.INFINITE;\n+\n   public LottieDrawable() {\n     animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n       @Override public void onAnimationUpdate(ValueAnimator animation) {\n@@ -528,10 +551,59 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n   }\n \n+  /**\n+   *\n+   * @see #setRepeatCount(int)\n+   */\n+  @Deprecated\n   public void loop(boolean loop) {\n     animator.setRepeatCount(loop ? ValueAnimator.INFINITE : 0);\n   }\n \n+  /**\n+   * Defines what this animation should do when it reaches the end. This\n+   * setting is applied only when the repeat count is either greater than\n+   * 0 or {@link #INFINITE}. Defaults to {@link #RESTART}.\n+   *\n+   * @param mode {@link #RESTART} or {@link #REVERSE}\n+   */\n+  public void setRepeatMode(@RepeatMode int mode) {\n+      animator.setRepeatMode(mode);\n+  }\n+\n+  /**\n+   * Defines what this animation should do when it reaches the end.\n+   *\n+   * @return either one of {@link #REVERSE} or {@link #RESTART}\n+   */\n+  @RepeatMode\n+  public int getRepeatMode() {\n+    return animator.getRepeatMode();\n+  }\n+\n+  /**\n+   * Sets how many times the animation should be repeated. If the repeat\n+   * count is 0, the animation is never repeated. If the repeat count is\n+   * greater than 0 or {@link #INFINITE}, the repeat mode will be taken\n+   * into account. The repeat count is 0 by default.\n+   *\n+   * @param count the number of times the animation should be repeated\n+   */\n+  public void setRepeatCount(int count) {\n+    animator.setRepeatCount(count);\n+  }\n+\n+  /**\n+   * Defines how many times the animation should repeat. The default value\n+   * is 0.\n+   *\n+   * @return the number of times the animation should repeat, or {@link #INFINITE}\n+   */\n+  public int getRepeatCount() {\n+    return animator.getRepeatCount();\n+  }\n+\n+\n   public boolean isLooping() {\n     return animator.getRepeatCount() == ValueAnimator.INFINITE;\n   }",
    "output": "Add setRepeatMode API (#525)\n\n\r\nThis PR allows you to define what an animation should do when it reaches the end. This setting is applied only when the loop is enabled.\r\n\r\nThe supported values are:\r\nLottieDrawable.RESTART - The animation restarts from the beginning.\r\nLottieDrawable.REVERSE - The animation plays backward (and then forward again).\r\nThe default behavior is to restart the animation.\r\n\r\nYou can use the new lottie_repeatMode XML attribute to set this value too"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java\n@@ -67,6 +67,20 @@ public void addListener(final BaseKeyframeAnimation.AnimationListener listener)\n     }\n   }\n \n+  public void setProgress(float progress) {\n+    anchorPoint.setProgress(progress);\n+    position.setProgress(progress);\n+    scale.setProgress(progress);\n+    rotation.setProgress(progress);\n+    opacity.setProgress(progress);\n+    if (startOpacity != null) {\n+      startOpacity.setProgress(progress);\n+    }\n+    if (endOpacity != null) {\n+      endOpacity.setProgress(progress);\n+    }\n+  }\n+\n   public BaseKeyframeAnimation<?, Integer> getOpacity() {\n     return opacity;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -98,7 +98,6 @@ static BaseLayer forModel(\n \n     this.transform = layerModel.getTransform().createAnimation();\n     transform.addListener(this);\n-    transform.addAnimationsToLayer(this);\n \n     if (layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {\n       this.mask = new MaskKeyframeAnimation(layerModel.getMasks());\n@@ -390,6 +389,8 @@ private void setVisible(boolean visible) {\n   }\n \n   void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    // Time stretch should not be applied to the layer transform.\n+    transform.setProgress(progress);\n     if (layerModel.getTimeStretch() != 0) {\n       progress /= layerModel.getTimeStretch();\n     }",
    "output": "Don't apply time stretch to a layer transform\n\nFixes #548"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -98,6 +98,7 @@ private void testAnimations() {\n     TestRobot.testLinearAnimation(activity, \"Tests/Stroke.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TextBaseline.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TimeStretch.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/TimeStretchPrecomp.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TrackMattes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TrimPaths.json\");\n     TestRobot.testChangingCompositions(activity, \"TwitterHeart.json\", \"PinJump.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -40,9 +40,9 @@ public void addUpdateListener(AnimationListener listener) {\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     if (progress < getStartDelayProgress()) {\n-      progress = 0f;\n+      progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n-      progress = 1f;\n+      progress = getEndProgress();\n     }\n \n     if (progress == this.progress) {",
    "output": "Fix precomps that are time stretched and longer than their parent\n\nIt is possible to create an composition and then precomp it into a\nshorter composition but time stretch it down to fit the new shorter\nduration. In this case, at the end of the animation, the progress\nfor the precomped layer will be > 1 because its frames extend\npast the end of the original composition. This fixes a keyframe\nfrom clipping at 1 to clipping at its actual end duration which\nmay be > 1."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -96,6 +96,7 @@ private void testAnimations() {\n     TestRobot.testLinearAnimation(activity, \"Tests/ShapeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/SplitDimensions.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Stroke.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/TextBaseline.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TimeStretch.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TrackMattes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TrimPaths.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java\n@@ -14,37 +14,29 @@ public class DocumentData {\n   @SuppressWarnings(\"WeakerAccess\") int justification;\n   public int tracking;\n   @SuppressWarnings(\"WeakerAccess\") double lineHeight;\n+  public double baselineShift;\n   @ColorInt public int color;\n   @ColorInt public int strokeColor;\n   public int strokeWidth;\n   public boolean strokeOverFill;\n \n \n   DocumentData(String text, String fontName, int size, int justification, int tracking,\n-      double lineHeight, @ColorInt int color, @ColorInt int strokeColor, int strokeWidth,\n-      boolean strokeOverFill) {\n+      double lineHeight, double baselineShift, @ColorInt int color, @ColorInt int strokeColor,\n+      int strokeWidth, boolean strokeOverFill) {\n     this.text = text;\n     this.fontName = fontName;\n     this.size = size;\n     this.justification = justification;\n     this.tracking = tracking;\n     this.lineHeight = lineHeight;\n+    this.baselineShift = baselineShift;\n     this.color = color;\n     this.strokeColor = strokeColor;\n     this.strokeWidth = strokeWidth;\n     this.strokeOverFill = strokeOverFill;\n   }\n \n-  void set(DocumentData documentData) {\n-    text = documentData.text;\n-    fontName = documentData.fontName;\n-    size = documentData.size;\n-    justification = documentData.justification;\n-    tracking = documentData.tracking;\n-    lineHeight = documentData.lineHeight;\n-    color = documentData.color;\n-  }\n-\n \n   public static final class Factory {\n \n@@ -58,6 +50,7 @@ public static DocumentData newInstance(JSONObject json) {\n       int justification = json.optInt(\"j\");\n       int tracking = json.optInt(\"tr\");\n       double lineHeight = json.optDouble(\"lh\");\n+      double baselineShift = json.optDouble(\"ls\");\n       JSONArray colorArray = json.optJSONArray(\"fc\");\n       int color = Color.argb(\n           255,\n@@ -77,8 +70,8 @@ public static DocumentData newInstance(JSONObject json) {\n       int strokeWidth = json.optInt(\"sw\");\n       boolean strokeOverFill = json.optBoolean(\"of\");\n \n-      return new DocumentData(text, fontName, size, justification, tracking, lineHeight, color,\n-          strokeColor, strokeWidth, strokeOverFill);\n+      return new DocumentData(text, fontName, size, justification, tracking, lineHeight,\n+          baselineShift, color, strokeColor, strokeWidth, strokeOverFill);\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -195,6 +195,7 @@ private void drawCharacterAsGlyph(\n       Path path = contentGroups.get(j).getPath();\n       path.computeBounds(rectF, false);\n       matrix.set(parentMatrix);\n+      matrix.preTranslate(0, (float) -documentData.baselineShift * composition.getDpScale());\n       matrix.preScale(fontScale, fontScale);\n       path.transform(matrix);\n       if (documentData.strokeOverFill) {",
    "output": "Add support for text baseline"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -86,6 +86,7 @@ private void testAnimations() {\n     TestRobot.testLinearAnimation(activity, \"Tests/KeyframeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Laugh4.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/LoopPlayOnce.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/MaskInv.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/MatteTimeStretchLine.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/MatteTimeStretchScan.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Parenting.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -62,7 +62,8 @@ static BaseLayer forModel(\n   private final Path path = new Path();\n   private final Matrix matrix = new Matrix();\n   private final Paint contentPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final Paint addMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final Paint subtractMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint clearPaint = new Paint();\n   private final RectF rect = new RectF();\n@@ -87,7 +88,8 @@ static BaseLayer forModel(\n     this.layerModel = layerModel;\n     drawTraceName = layerModel.getName() + \"#draw\";\n     clearPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n-    maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+    addMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+    subtractMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n     if (layerModel.getMatteType() == Layer.MatteType.Invert) {\n       mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n     } else {\n@@ -320,30 +322,49 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {\n \n   abstract void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha);\n \n-  @SuppressLint(\"WrongConstant\") private void applyMasks(Canvas canvas, Matrix matrix) {\n+  private void applyMasks(Canvas canvas, Matrix matrix) {\n+    applyMasks(canvas, matrix, Mask.MaskMode.MaskModeAdd);\n+    applyMasks(canvas, matrix, Mask.MaskMode.MaskModeSubtract);\n+  }\n+\n+  @SuppressLint(\"WrongConstant\") private void applyMasks(Canvas canvas, Matrix matrix,\n+      Mask.MaskMode maskMode) {\n+    Paint paint;\n+    if (maskMode == Mask.MaskMode.MaskModeSubtract) {\n+      paint = subtractMaskPaint;\n+    } else {\n+      paint = addMaskPaint;\n+    }\n+\n+    //noinspection ConstantConditions\n+    int size = mask.getMasks().size();\n+\n+    boolean hasMask = false;\n+    for (int i = 0; i < size; i++) {\n+      if (mask.getMasks().get(i).getMaskMode() == maskMode) {\n+        hasMask = true;\n+        break;\n+      }\n+    }\n+    if (!hasMask) {\n+      return;\n+    }\n+\n     L.beginSection(\"Layer#drawMask\");\n     L.beginSection(\"Layer#saveLayer\");\n-    canvas.saveLayer(rect, maskPaint, SAVE_FLAGS);\n+    canvas.saveLayer(rect, paint, SAVE_FLAGS);\n     L.endSection(\"Layer#saveLayer\");\n     clearCanvas(canvas);\n \n-    //noinspection ConstantConditions\n-    int size = mask.getMasks().size();\n     for (int i = 0; i < size; i++) {\n       Mask mask = this.mask.getMasks().get(i);\n+      if (mask.getMaskMode() != maskMode) {\n+        continue;\n+      }\n       BaseKeyframeAnimation<?, Path> maskAnimation = this.mask.getMaskAnimations().get(i);\n       Path maskPath = maskAnimation.getValue();\n       path.set(maskPath);\n       path.transform(matrix);\n-\n-      switch (mask.getMaskMode()) {\n-        case MaskModeSubtract:\n-          path.setFillType(Path.FillType.INVERSE_WINDING);\n-          break;\n-        case MaskModeAdd:\n-        default:\n-          path.setFillType(Path.FillType.WINDING);\n-      }\n       BaseKeyframeAnimation<Integer, Integer> opacityAnimation =\n           this.mask.getOpacityAnimations().get(i);\n       int alpha = contentPaint.getAlpha();",
    "output": "Improve support for subtract masks\n\nFixes #421"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -22,8 +22,10 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n@@ -240,13 +242,13 @@ public static Cancellable fromJson(Resources res, JSONObject json,\n     @Nullable\n     public static LottieComposition fromInputStream(Resources res, InputStream stream) {\n       try {\n-        // TODO: It's not correct to use available() to allocate the byte array.\n-        int size = stream.available();\n-        byte[] buffer = new byte[size];\n-        //noinspection ResultOfMethodCallIgnored\n-        stream.read(buffer);\n-        String json = new String(buffer, \"UTF-8\");\n-        JSONObject jsonObject = new JSONObject(json);\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));\n+        StringBuilder total = new StringBuilder();\n+        String line;\n+        while ((line = bufferedReader.readLine()) != null) {\n+          total.append(line);\n+        }\n+        JSONObject jsonObject = new JSONObject(total.toString());\n         return fromJsonSync(res, jsonObject);\n       } catch (IOException e) {\n         Log.e(L.TAG, \"Failed to load composition.\",\n@@ -390,4 +392,4 @@ private static void addLayer(List<Layer> layers, LongSparseArray<Layer> layerMap\n       layerMap.put(layer.getId(), layer);\n     }\n   }\n-}\n\\ No newline at end of file\n+}",
    "output": "improved input stream reading (#532)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -428,9 +428,18 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) float maxProgress) {\n    * @see #setMinFrame(int)\n    * @see #setMaxFrame(int)\n    */\n-  public void setMinAndMaxFrame(int minFrame, int maxFrame) {\n-    setMinFrame(minFrame);\n-    setMaxFrame(maxFrame);\n+  public void setMinAndMaxFrame(final int minFrame, final int maxFrame) {\n+    if (composition == null) {\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override public void run(LottieComposition composition) {\n+          setMinAndMaxFrame(minFrame, maxFrame);\n+        }\n+      });\n+      return;\n+    }\n+    animator.setMinAndMaxValues(\n+        minFrame / composition.getDurationFrames(),\n+        maxFrame / composition.getDurationFrames());\n   }\n \n   /**\n@@ -440,8 +449,7 @@ public void setMinAndMaxFrame(int minFrame, int maxFrame) {\n   public void setMinAndMaxProgress(\n       @FloatRange(from = 0f, to = 1f) float minProgress,\n       @FloatRange(from = 0f, to = 1f) float maxProgress) {\n-    setMinProgress(minProgress);\n-    setMaxProgress(maxProgress);\n+    animator.setMinAndMaxValues(minProgress, maxProgress);\n   }\n \n   /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -59,6 +59,14 @@ public float getValue() {\n     return value;\n   }\n \n+  public void setMinAndMaxValues(\n+      @FloatRange(from = 0f, to = 1f) float minValue,\n+      @FloatRange(from = 0f, to = 1f) float maxValue) {\n+    this.minValue = minValue;\n+    this.maxValue = maxValue;\n+    updateValues();\n+  }\n+\n   public void setMinValue(@FloatRange(from = 0f, to = 1f) float minValue) {\n     if (minValue >= maxValue) {\n       throw new IllegalArgumentException(\"Min value must be smaller then max value.\");",
    "output": "Set min and max values at the same time\n\nIf you set min or max first, it could fail due to max < min or\nvice versa.\n\nFixes #530"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -155,7 +155,7 @@ public boolean hasImages() {\n     return !images.isEmpty();\n   }\n \n-  Map<String, LottieImageAsset> getImages() {\n+  @SuppressWarnings(\"WeakerAccess\") public Map<String, LottieImageAsset> getImages() {\n     return images;\n   }\n ",
    "output": "Expose LottieComposition#getImages"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -52,16 +52,16 @@ public class LottieComposition {\n   private final HashSet<String> warnings = new HashSet<>();\n   private final PerformanceTracker performanceTracker = new PerformanceTracker();\n   private final Rect bounds;\n-  private final int startFrame;\n-  private final int endFrame;\n+  private final long startFrame;\n+  private final long endFrame;\n   private final float frameRate;\n   private final float dpScale;\n   /* Bodymovin version */\n   private final int majorVersion;\n   private final int minorVersion;\n   private final int patchVersion;\n \n-  private LottieComposition(Rect bounds, int startFrame, int endFrame, float frameRate,\n+  private LottieComposition(Rect bounds, long startFrame, long endFrame, float frameRate,\n       float dpScale, int major, int minor, int patch) {\n     this.bounds = bounds;\n     this.startFrame = startFrame;\n@@ -124,12 +124,12 @@ public int getPatchVersion() {\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public int getStartFrame() {\n+  public long getStartFrame() {\n     return startFrame;\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public int getEndFrame() {\n+  public long getEndFrame() {\n     return endFrame;\n   }\n \n@@ -272,8 +272,8 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n         bounds = new Rect(0, 0, scaledWidth, scaledHeight);\n       }\n \n-      int startFrame = json.optInt(\"ip\", 0);\n-      int endFrame = json.optInt(\"op\", 0);\n+      long startFrame = json.optLong(\"ip\", 0);\n+      long endFrame = json.optLong(\"op\", 0);\n       float frameRate = (float) json.optDouble(\"fr\", 0);\n       String version = json.optString(\"v\");\n       String[] versions = version.split(\"[.]\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n@@ -55,14 +55,14 @@ public static void setEndFrames(List<? extends Keyframe<?>> keyframes) {\n   @Nullable public final T startValue;\n   @Nullable public final T endValue;\n   @Nullable public final Interpolator interpolator;\n-  public final int startFrame;\n-  @Nullable public Integer endFrame;\n+  public final float startFrame;\n+  @Nullable public Float endFrame;\n \n   private float startProgress = Float.MIN_VALUE;\n   private float endProgress = Float.MIN_VALUE;\n \n   public Keyframe(LottieComposition composition, @Nullable T startValue, @Nullable T endValue,\n-      @Nullable Interpolator interpolator, int startFrame, @Nullable Integer endFrame) {\n+      @Nullable Interpolator interpolator, float startFrame, @Nullable Float endFrame) {\n     this.composition = composition;\n     this.startValue = startValue;\n     this.endValue = endValue;\n@@ -144,13 +144,13 @@ public static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition com\n         AnimatableValue.Factory<T> valueFactory) {\n       PointF cp1 = null;\n       PointF cp2 = null;\n-      int startFrame = 0;\n+      float startFrame = 0;\n       T startValue = null;\n       T endValue = null;\n       Interpolator interpolator = null;\n \n       if (json.has(\"t\")) {\n-        startFrame = (int) json.optDouble(\"t\", 0);\n+        startFrame = (float) json.optDouble(\"t\", 0);\n         Object startValueJson = json.opt(\"s\");\n         if (startValueJson != null) {\n           startValue = valueFactory.valueFromObject(startValueJson, scale);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n@@ -18,8 +18,8 @@ public class PathKeyframe extends Keyframe<PointF> {\n   @Nullable private Path path;\n \n   private PathKeyframe(LottieComposition composition, @Nullable PointF startValue,\n-      @Nullable PointF endValue, @Nullable Interpolator interpolator, int startFrame,\n-      @Nullable Integer endFrame) {\n+      @Nullable PointF endValue, @Nullable Interpolator interpolator, float startFrame,\n+      @Nullable Float endFrame) {\n     super(composition, startValue, endValue, interpolator, startFrame, endFrame);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -324,13 +324,13 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n       // Bodymovin pre-scales the in frame and out frame by the time stretch. However, that will\n       // cause the stretch to be double counted since the in out animation gets treated the same\n       // as all other animations and will have stretch applied to it again.\n-      int inFrame = (int) (json.optLong(\"ip\") / timeStretch);\n-      int outFrame = (int) (json.optLong(\"op\") / timeStretch);\n+      float inFrame = json.optLong(\"ip\") / timeStretch;\n+      float outFrame = json.optLong(\"op\") / timeStretch;\n \n       List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();\n       // Before the in frame\n       if (inFrame > 0) {\n-        Keyframe<Float> preKeyframe = new Keyframe<>(composition, 0f, 0f, null, 0, inFrame);\n+        Keyframe<Float> preKeyframe = new Keyframe<>(composition, 0f, 0f, null, 0f, inFrame);\n         inOutKeyframes.add(preKeyframe);\n       }\n \n@@ -341,7 +341,7 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n       inOutKeyframes.add(visibleKeyframe);\n \n       Keyframe<Float> outKeyframe = new Keyframe<>(\n-          composition, 0f, 0f, null, outFrame, Integer.MAX_VALUE);\n+          composition, 0f, 0f, null, outFrame, Float.MAX_VALUE);\n       inOutKeyframes.add(outKeyframe);\n \n       AnimatableFloatValue timeRemapping = null;",
    "output": "Revert \"Use ints for start and end frames\"\n\nThis reverts commit 8c67322a59bdd8f3f27a8510498930f09a344aba."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -232,7 +232,7 @@ public void clearComposition() {\n   }\n \n   @Override public void setColorFilter(@Nullable ColorFilter colorFilter) {\n-    throw new UnsupportedOperationException(\"Use addColorFilter instead.\");\n+    Log.w(L.TAG, \"Use addColorFilter instead.\");\n   }\n \n   /**",
    "output": "Warn instead of crash if setColorFilter is used.\n\nThis causes reusing LottieAnimationView with non-Lottie drawables\nto crash pre-Lollipop\n\nFixes #477"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java b/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java\n@@ -11,12 +11,14 @@ public class LottieImageAsset {\n   private final int height;\n   private final String id;\n   private final String fileName;\n+  private final String dirName;\n \n-  private LottieImageAsset(int width, int height, String id, String fileName) {\n+  private LottieImageAsset(int width, int height, String id, String fileName, String dirName) {\n     this.width = width;\n     this.height = height;\n     this.id = id;\n     this.fileName = fileName;\n+    this.dirName = dirName;\n   }\n \n   static class Factory {\n@@ -25,7 +27,7 @@ private Factory() {\n \n     static LottieImageAsset newInstance(JSONObject imageJson) {\n       return new LottieImageAsset(imageJson.optInt(\"w\"), imageJson.optInt(\"h\"), imageJson.optString(\"id\"),\n-          imageJson.optString(\"p\"));\n+          imageJson.optString(\"p\"), imageJson.optString(\"u\"));\n     }\n   }\n \n@@ -44,4 +46,8 @@ public String getId() {\n   public String getFileName() {\n     return fileName;\n   }\n+\n+  public String getDirName() {\n+    return dirName;\n+  }\n }",
    "output": "Expose image relative directory name (#508)\n\nUseful with custom image asset delegate"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -86,6 +86,8 @@ private void testAnimations() {\n     TestRobot.testLinearAnimation(activity, \"Tests/KeyframeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Laugh4.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/LoopPlayOnce.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/MatteTimeStretchLine.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/MatteTimeStretchScan.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Parenting.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Precomps.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Remap.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java\n@@ -373,7 +373,9 @@ void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n       progress /= layerModel.getTimeStretch();\n     }\n     if (matteLayer != null) {\n-      matteLayer.setProgress(progress);\n+      // The matte layer's time stretch is pre-calculated.\n+      float matteTimeStretch = matteLayer.layerModel.getTimeStretch();\n+      matteLayer.setProgress(progress * matteTimeStretch);\n     }\n     for (int i = 0; i < animations.size(); i++) {\n       animations.get(i).setProgress(progress);",
    "output": "Fix time stretch double calculating for matte layers (#510)\n\nFixes #478"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -49,6 +49,8 @@ private void testAnimations() {\n     TestRobot.testLinearAnimation(activity, \"PinJump.json\");\n     TestRobot.testLinearAnimation(activity, \"TwitterHeart.json\");\n     TestRobot.testLinearAnimation(activity, \"Hello World.json\");\n+    TestRobot.testLinearAnimation(activity, \"CircleForward.json\");\n+    TestRobot.testLinearAnimation(activity, \"CircleReversed.json\");\n     TestRobot.testLinearAnimation(activity, \"WeAccept.json\", \"Images/WeAccept\", null);\n     TextDelegate delegate = new TextDelegate();\n     delegate.setText(\"NAME\", \"Gabe\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java b/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java\n@@ -22,6 +22,7 @@ public class EllipseContent implements PathContent, BaseKeyframeAnimation.Animat\n   private final LottieDrawable lottieDrawable;\n   private final BaseKeyframeAnimation<?, PointF> sizeAnimation;\n   private final BaseKeyframeAnimation<?, PointF> positionAnimation;\n+  private final CircleShape circleShape;\n \n   @Nullable private TrimPathContent trimPath;\n   private boolean isPathValid;\n@@ -31,6 +32,7 @@ public EllipseContent(LottieDrawable lottieDrawable, BaseLayer layer, CircleShap\n     this.lottieDrawable = lottieDrawable;\n     sizeAnimation = circleShape.getSize().createAnimation();\n     positionAnimation = circleShape.getPosition().createAnimation();\n+    this.circleShape = circleShape;\n \n     layer.addAnimation(sizeAnimation);\n     layer.addAnimation(positionAnimation);\n@@ -80,11 +82,19 @@ private void invalidate() {\n     float cpH = halfHeight * ELLIPSE_CONTROL_POINT_PERCENTAGE;\n \n     path.reset();\n-    path.moveTo(0, -halfHeight);\n-    path.cubicTo(0 + cpW, -halfHeight, halfWidth, 0 - cpH, halfWidth, 0);\n-    path.cubicTo(halfWidth, 0 + cpH, 0 + cpW, halfHeight, 0, halfHeight);\n-    path.cubicTo(0 - cpW, halfHeight, -halfWidth, 0 + cpH, -halfWidth, 0);\n-    path.cubicTo(-halfWidth, 0 - cpH, 0 - cpW, -halfHeight, 0, -halfHeight);\n+    if (circleShape.isReversed()) {\n+      path.moveTo(0, -halfHeight);\n+      path.cubicTo(0 - cpW, -halfHeight, -halfWidth, 0 - cpH, -halfWidth, 0);\n+      path.cubicTo(-halfWidth, 0 + cpH, 0 - cpW, halfHeight, 0, halfHeight);\n+      path.cubicTo(0 + cpW, halfHeight, halfWidth, 0 + cpH, halfWidth, 0);\n+      path.cubicTo(halfWidth, 0 - cpH, 0 + cpW, -halfHeight, 0, -halfHeight);\n+    } else {\n+      path.moveTo(0, -halfHeight);\n+      path.cubicTo(0 + cpW, -halfHeight, halfWidth, 0 - cpH, halfWidth, 0);\n+      path.cubicTo(halfWidth, 0 + cpH, 0 + cpW, halfHeight, 0, halfHeight);\n+      path.cubicTo(0 - cpW, halfHeight, -halfWidth, 0 + cpH, -halfWidth, 0);\n+      path.cubicTo(-halfWidth, 0 - cpH, 0 - cpW, -halfHeight, 0, -halfHeight);\n+    }\n \n     PointF position = positionAnimation.getValue();\n     path.offset(position.x, position.y);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/CircleShape.java b/lottie/src/main/java/com/airbnb/lottie/model/content/CircleShape.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/CircleShape.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/CircleShape.java\n@@ -17,12 +17,14 @@ public class CircleShape implements ContentModel {\n   private final String name;\n   private final AnimatableValue<PointF, PointF> position;\n   private final AnimatablePointValue size;\n+  private final boolean isReversed;\n \n   private CircleShape(String name, AnimatableValue<PointF, PointF> position,\n-      AnimatablePointValue size) {\n+      AnimatablePointValue size, boolean isReversed) {\n     this.name = name;\n     this.position = position;\n     this.size = size;\n+    this.isReversed = isReversed;\n   }\n \n   @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {\n@@ -38,7 +40,9 @@ static CircleShape newInstance(JSONObject json, LottieComposition composition) {\n           json.optString(\"nm\"),\n           AnimatablePathValue\n               .createAnimatablePathOrSplitDimensionPath(json.optJSONObject(\"p\"), composition),\n-          AnimatablePointValue.Factory.newInstance(json.optJSONObject(\"s\"), composition));\n+          AnimatablePointValue.Factory.newInstance(json.optJSONObject(\"s\"), composition),\n+          // \"d\" is 2 for normal and 3 for reversed.\n+          json.optInt(\"d\", 2) == 3);\n     }\n   }\n \n@@ -53,4 +57,8 @@ public AnimatableValue<PointF, PointF> getPosition() {\n   public AnimatablePointValue getSize() {\n     return size;\n   }\n+\n+  public boolean isReversed() {\n+    return isReversed;\n+  }\n }",
    "output": "Add support for ellipse shape direction (#502)\n\nPreviously, ellipses were drawn forwards regardless of the specified direction in after effects.\r\n\r\nFixes #500"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -52,16 +52,16 @@ public class LottieComposition {\n   private final HashSet<String> warnings = new HashSet<>();\n   private final PerformanceTracker performanceTracker = new PerformanceTracker();\n   private final Rect bounds;\n-  private final long startFrame;\n-  private final long endFrame;\n+  private final int startFrame;\n+  private final int endFrame;\n   private final float frameRate;\n   private final float dpScale;\n   /* Bodymovin version */\n   private final int majorVersion;\n   private final int minorVersion;\n   private final int patchVersion;\n \n-  private LottieComposition(Rect bounds, long startFrame, long endFrame, float frameRate,\n+  private LottieComposition(Rect bounds, int startFrame, int endFrame, float frameRate,\n       float dpScale, int major, int minor, int patch) {\n     this.bounds = bounds;\n     this.startFrame = startFrame;\n@@ -124,12 +124,12 @@ public int getPatchVersion() {\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public long getStartFrame() {\n+  public int getStartFrame() {\n     return startFrame;\n   }\n \n   @RestrictTo(RestrictTo.Scope.LIBRARY)\n-  public long getEndFrame() {\n+  public int getEndFrame() {\n     return endFrame;\n   }\n \n@@ -272,8 +272,8 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n         bounds = new Rect(0, 0, scaledWidth, scaledHeight);\n       }\n \n-      long startFrame = json.optLong(\"ip\", 0);\n-      long endFrame = json.optLong(\"op\", 0);\n+      int startFrame = json.optInt(\"ip\", 0);\n+      int endFrame = json.optInt(\"op\", 0);\n       float frameRate = (float) json.optDouble(\"fr\", 0);\n       String version = json.optString(\"v\");\n       String[] versions = version.split(\"[.]\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n@@ -55,14 +55,14 @@ public static void setEndFrames(List<? extends Keyframe<?>> keyframes) {\n   @Nullable public final T startValue;\n   @Nullable public final T endValue;\n   @Nullable public final Interpolator interpolator;\n-  public final float startFrame;\n-  @Nullable public Float endFrame;\n+  public final int startFrame;\n+  @Nullable public Integer endFrame;\n \n   private float startProgress = Float.MIN_VALUE;\n   private float endProgress = Float.MIN_VALUE;\n \n   public Keyframe(LottieComposition composition, @Nullable T startValue, @Nullable T endValue,\n-      @Nullable Interpolator interpolator, float startFrame, @Nullable Float endFrame) {\n+      @Nullable Interpolator interpolator, int startFrame, @Nullable Integer endFrame) {\n     this.composition = composition;\n     this.startValue = startValue;\n     this.endValue = endValue;\n@@ -144,13 +144,13 @@ public static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition com\n         AnimatableValue.Factory<T> valueFactory) {\n       PointF cp1 = null;\n       PointF cp2 = null;\n-      float startFrame = 0;\n+      int startFrame = 0;\n       T startValue = null;\n       T endValue = null;\n       Interpolator interpolator = null;\n \n       if (json.has(\"t\")) {\n-        startFrame = (float) json.optDouble(\"t\", 0);\n+        startFrame = (int) json.optDouble(\"t\", 0);\n         Object startValueJson = json.opt(\"s\");\n         if (startValueJson != null) {\n           startValue = valueFactory.valueFromObject(startValueJson, scale);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java\n@@ -18,8 +18,8 @@ public class PathKeyframe extends Keyframe<PointF> {\n   @Nullable private Path path;\n \n   private PathKeyframe(LottieComposition composition, @Nullable PointF startValue,\n-      @Nullable PointF endValue, @Nullable Interpolator interpolator, float startFrame,\n-      @Nullable Float endFrame) {\n+      @Nullable PointF endValue, @Nullable Interpolator interpolator, int startFrame,\n+      @Nullable Integer endFrame) {\n     super(composition, startValue, endValue, interpolator, startFrame, endFrame);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -324,13 +324,13 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n       // Bodymovin pre-scales the in frame and out frame by the time stretch. However, that will\n       // cause the stretch to be double counted since the in out animation gets treated the same\n       // as all other animations and will have stretch applied to it again.\n-      float inFrame = json.optLong(\"ip\") / timeStretch;\n-      float outFrame = json.optLong(\"op\") / timeStretch;\n+      int inFrame = (int) (json.optLong(\"ip\") / timeStretch);\n+      int outFrame = (int) (json.optLong(\"op\") / timeStretch);\n \n       List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();\n       // Before the in frame\n       if (inFrame > 0) {\n-        Keyframe<Float> preKeyframe = new Keyframe<>(composition, 0f, 0f, null, 0f, inFrame);\n+        Keyframe<Float> preKeyframe = new Keyframe<>(composition, 0f, 0f, null, 0, inFrame);\n         inOutKeyframes.add(preKeyframe);\n       }\n \n@@ -341,7 +341,7 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n       inOutKeyframes.add(visibleKeyframe);\n \n       Keyframe<Float> outKeyframe = new Keyframe<>(\n-          composition, 0f, 0f, null, outFrame, Float.MAX_VALUE);\n+          composition, 0f, 0f, null, outFrame, Integer.MAX_VALUE);\n       inOutKeyframes.add(outKeyframe);\n \n       AnimatableFloatValue timeRemapping = null;",
    "output": "Use ints for start and end frames\n\nBodymovin has some floating point errors in its json that cause\nframes such as `51` to appear as `51.0000020772726` which means\nthat if you set the frame to 51, you'll get the previous keyframe.\n\n#506"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -32,6 +32,13 @@ public class LottieTest {\n       TestColorFilterActivity.class);\n \n   @Test public void testAll() {\n+    testAnimations();\n+    testColorFilters();\n+    testScaleTypes();\n+    testFrameBoundary();\n+  }\n+\n+  private void testAnimations() {\n     MainActivity activity = mainActivityRule.getActivity();\n     TestRobot.testLinearAnimation(activity, \"9squares-AlBoardman.json\");\n     TestRobot.testLinearAnimation(activity, \"EmptyState.json\");\n@@ -89,13 +96,12 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"Tests/TrimPaths.json\");\n     TestRobot.testChangingCompositions(activity, \"TwitterHeart.json\", \"PinJump.json\");\n     TestRobot.testSettingSameComposition(activity, \"PinJump.json\");\n+  }\n \n+  private void testColorFilters() {\n     TestColorFilterActivity colorFilterActivity = colorFilterActivityRule.getActivity();\n     TestRobot.testAddYellowColorFilterInXml(colorFilterActivity);\n     TestRobot.testAddNullColorFilterInXml(colorFilterActivity);\n-\n-    testScaleTypes();\n-    testFrameBoundary();\n   }\n \n   private void testScaleTypes() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -153,11 +153,11 @@ public boolean setComposition(LottieComposition composition) {\n \n     clearComposition();\n     this.composition = composition;\n+    buildCompositionLayer();\n     animator.setCompositionDuration(composition.getDuration());\n-    setProgress(animator.getMinValue());\n+    setProgress(animator.getValue());\n     setScale(scale);\n     updateBounds();\n-    buildCompositionLayer();\n     applyColorFilters();\n \n     // We copy the tasks to a new ArrayList so that if this method is called from multiple threads,\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n@@ -97,7 +97,7 @@ public boolean isStatic() {\n   }\n \n   public boolean containsProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-    return progress >= getStartProgress() && progress <= getEndProgress();\n+    return progress >= getStartProgress() && progress < getEndProgress();\n   }\n \n   @Override public String toString() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java\n@@ -64,17 +64,16 @@ private Keyframe<K> getCurrentKeyframe() {\n       return cachedKeyframe;\n     }\n \n-    int i = 0;\n-    Keyframe<K> keyframe = keyframes.get(0);\n+    Keyframe<K> keyframe = keyframes.get(keyframes.size() - 1);\n     if (progress < keyframe.getStartProgress()) {\n-      cachedKeyframe = keyframe;\n-      return keyframe;\n+      for (int i = keyframes.size() - 1; i >= 0; i--) {\n+        keyframe = keyframes.get(i);\n+        if (keyframe.containsProgress(progress)) {\n+          break;\n+        }\n+      }\n     }\n \n-    while (!keyframe.containsProgress(progress) && i < keyframes.size()) {\n-      keyframe = keyframes.get(i);\n-      i++;\n-    }\n     cachedKeyframe = keyframe;\n     return keyframe;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -272,7 +272,6 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n           composition);\n       MatteType matteType = MatteType.values()[json.optInt(\"tt\")];\n       List<Mask> masks = new ArrayList<>();\n-      List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();\n       JSONArray jsonMasks = json.optJSONArray(\"masksProperties\");\n       if (jsonMasks != null) {\n         for (int i = 0; i < jsonMasks.length(); i++) {\n@@ -328,14 +327,15 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n       float inFrame = json.optLong(\"ip\") / timeStretch;\n       float outFrame = json.optLong(\"op\") / timeStretch;\n \n+      List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();\n       // Before the in frame\n       if (inFrame > 0) {\n         Keyframe<Float> preKeyframe = new Keyframe<>(composition, 0f, 0f, null, 0f, inFrame);\n         inOutKeyframes.add(preKeyframe);\n       }\n \n       // The + 1 is because the animation should be visible on the out frame itself.\n-      outFrame = (outFrame > 0 ? outFrame : composition.getEndFrame() + 1);\n+      outFrame = (outFrame > 0 ? outFrame : composition.getEndFrame()) + 1;\n       Keyframe<Float> visibleKeyframe =\n           new Keyframe<>(composition, 1f, 1f, null, inFrame, outFrame);\n       inOutKeyframes.add(visibleKeyframe);",
    "output": "Reverse the iteration direction for keyframe finding\n\nBodymovin only specifies start time for a frame. The end time of\nthe previous frame cam be implied to be immediately before that.\nDuring keyframe creation, we set the end frame of a keyframe to\nthe start frame of the next one. However, that means that if we\niterate forward to find a keyframe, if you are exactly at the\nbeginning of a keyframe, it will be detected at the end of a keyframe\nrather than the beginning of the next one.\n\nThis also fixes an end frame calculate which was one too short\nfor layers with in out animations.\n\n#506"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -95,6 +95,7 @@ public class LottieTest {\n     TestRobot.testAddNullColorFilterInXml(colorFilterActivity);\n \n     testScaleTypes();\n+    testFrameBoundary();\n   }\n \n   private void testScaleTypes() {\n@@ -143,6 +144,24 @@ private void testScaleTypes() {\n     TestRobot.testAnimationView(context, composition, \"Match Parent\", params, null, null);\n   }\n \n+  private void testFrameBoundary() {\n+    Context context = mainActivityRule.getActivity();\n+    LottieAnimationView animationView = new LottieAnimationView(context);\n+    LottieComposition composition =\n+        LottieComposition.Factory.fromFileSync(context, \"Tests/Frame.json\");\n+    animationView.setComposition(composition);\n+\n+    animationView.setFrame(16);\n+    TestRobot.snapshotView(animationView, \"Frame 16 Red\");\n+    animationView.setFrame(17);\n+    TestRobot.snapshotView(animationView, \"Frame 17 Blue\");\n+    animationView.setFrame(50);\n+    TestRobot.snapshotView(animationView, \"Frame 50 Blue\");\n+    animationView.setFrame(51);\n+    TestRobot.snapshotView(animationView, \"Frame 51 Green\");\n+  }\n+\n+\n   private int dpToPx(int dp) {\n     Resources resources = mainActivityRule.getActivity().getResources();\n     return (int) TypedValue.applyDimension(1, (float) dp, resources.getDisplayMetrics());\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n@@ -139,10 +139,14 @@ static void testAnimationView(Context context, LottieComposition composition,\n     }\n     container.addView(animationView, params);\n \n-    ViewHelpers.setupView(container)\n+    snapshotView(container, name);\n+  }\n+\n+  static void snapshotView(View view, String name) {\n+    ViewHelpers.setupView(view)\n         .layout();\n \n-    Screenshot.snap(container)\n+    Screenshot.snap(view)\n         .setGroup(\"Container\")\n         .setName(name)\n         .record();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -685,6 +685,22 @@ public void pauseAnimation() {\n     enableOrDisableHardwareLayer();\n   }\n \n+  /**\n+   * Sets the progress to the specified frame.\n+   * If the composition isn't set yet, the progress will be set to the frame when\n+   * it is.\n+   */\n+  public void setFrame(int frame) {\n+    lottieDrawable.setFrame(frame);\n+  }\n+\n+  /**\n+   * Get the currently rendered frame.\n+   */\n+  public int getFrame() {\n+    return lottieDrawable.getFrame();\n+  }\n+\n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     lottieDrawable.setProgress(progress);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -484,6 +484,35 @@ public void removeAnimatorListener(Animator.AnimatorListener listener) {\n     animator.removeListener(listener);\n   }\n \n+  /**\n+   * Sets the progress to the specified frame.\n+   * If the composition isn't set yet, the progress will be set to the frame when\n+   * it is.\n+   */\n+  public void setFrame(final int frame) {\n+    if (composition == null) {\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override public void run(LottieComposition composition) {\n+          setFrame(frame);\n+        }\n+      });\n+      return;\n+    }\n+\n+    setProgress(frame / composition.getDurationFrames());\n+  }\n+\n+  /**\n+   * Get the currently rendered frame.\n+   */\n+  public int getFrame() {\n+    if (composition == null) {\n+      return 0;\n+    }\n+\n+    return (int) (getProgress() * composition.getDurationFrames());\n+  }\n+\n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     animator.setValue(progress);\n     if (compositionLayer != null) {",
    "output": "Add setFrame and getFrame APIs\n\nFixes #506"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java\n@@ -21,6 +21,7 @@\n import org.json.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n@@ -301,9 +302,14 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)\n       }\n \n       if (json.has(\"ef\")) {\n+        JSONArray effects = json.optJSONArray(\"ef\");\n+        String[] effectNames = new String[effects.length()];\n+        for (int i = 0; i < effects.length(); i++) {\n+          effectNames[i] = effects.optJSONObject(i).optString(\"nm\");\n+        }\n         composition.addWarning(\"Lottie doesn't support layer effects. If you are using them for \" +\n             \" fills, strokes, trim paths etc. then try adding them directly as contents \" +\n-            \" in your shape.\");\n+            \" in your shape. Found: \" + Arrays.toString(effectNames));\n       }\n \n       float timeStretch = (float) json.optDouble(\"sr\", 1.0);",
    "output": "Improved warning for layer effects"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -13,11 +13,13 @@\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import android.support.annotation.RawRes;\n import android.support.annotation.VisibleForTesting;\n import android.support.v7.widget.AppCompatImageView;\n import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.Log;\n+import android.util.SparseArray;\n \n import com.airbnb.lottie.utils.Utils;\n \n@@ -54,8 +56,12 @@ public enum CacheStrategy {\n     Strong\n   }\n \n-  private static final Map<String, LottieComposition> STRONG_REF_CACHE = new HashMap<>();\n-  private static final Map<String, WeakReference<LottieComposition>> WEAK_REF_CACHE =\n+  private static final SparseArray<LottieComposition> RAW_RES_STRONG_REF_CACHE = new SparseArray<>();\n+  private static final SparseArray<WeakReference<LottieComposition>> RAW_RES_WEAK_REF_CACHE =\n+      new SparseArray<>();\n+\n+  private static final Map<String, LottieComposition> ASSET_STRONG_REF_CACHE = new HashMap<>();\n+  private static final Map<String, WeakReference<LottieComposition>> ASSET_WEAK_REF_CACHE =\n       new HashMap<>();\n \n   private final OnCompositionLoadedListener loadedListener =\n@@ -71,6 +77,7 @@ public enum CacheStrategy {\n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private CacheStrategy defaultCacheStrategy;\n   private String animationName;\n+  private @RawRes int animationResId;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n   private boolean useHardwareLayer = false;\n@@ -100,9 +107,23 @@ private void init(@Nullable AttributeSet attrs) {\n         R.styleable.LottieAnimationView_lottie_cacheStrategy,\n         CacheStrategy.Weak.ordinal());\n     defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n-    String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n-    if (!isInEditMode() && fileName != null) {\n-      setAnimation(fileName);\n+    if (!isInEditMode()) {\n+      boolean hasRawRes = ta.hasValue(R.styleable.LottieAnimationView_lottie_rawRes);\n+      boolean hasFileName = ta.hasValue(R.styleable.LottieAnimationView_lottie_fileName);\n+      if (hasRawRes && hasFileName) {\n+        throw new IllegalArgumentException(\"lottie_rawRes and lottie_fileName cannot be used at \" +\n+            \"the same time. Please use use only one at once.\");\n+      } else if (hasRawRes) {\n+        int rawResId = ta.getResourceId(R.styleable.LottieAnimationView_lottie_rawRes, 0);\n+        if (rawResId != 0) {\n+          setAnimation(rawResId);\n+        }\n+      } else if (hasFileName) {\n+        String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n+        if (fileName != null) {\n+          setAnimation(fileName);\n+        }\n+      }\n     }\n     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n       lottieDrawable.playAnimation();\n@@ -201,6 +222,7 @@ public void clearColorFilters() {\n     Parcelable superState = super.onSaveInstanceState();\n     SavedState ss = new SavedState(superState);\n     ss.animationName = animationName;\n+    ss.animationResId = animationResId;\n     ss.progress = lottieDrawable.getProgress();\n     ss.isAnimating = lottieDrawable.isAnimating();\n     ss.isLooping = lottieDrawable.isLooping();\n@@ -220,6 +242,10 @@ public void clearColorFilters() {\n     if (!TextUtils.isEmpty(animationName)) {\n       setAnimation(animationName);\n     }\n+    animationResId = ss.animationResId;\n+    if (animationResId != 0) {\n+      setAnimation(animationResId);\n+    }\n     setProgress(ss.progress);\n     loop(ss.isLooping);\n     if (ss.isAnimating) {\n@@ -304,6 +330,55 @@ public void useHardwareAcceleration(boolean use) {\n     enableOrDisableHardwareLayer();\n   }\n \n+  /**\n+   * Sets the animation from a file in the raw directory.\n+   * This will load and deserialize the file asynchronously.\n+   * <p>\n+   * Will not cache the composition once loaded.\n+   */\n+  public void setAnimation(@RawRes int animationResId) {\n+    setAnimation(animationResId, defaultCacheStrategy);\n+  }\n+\n+  /**\n+   * Sets the animation from a file in the raw directory.\n+   * This will load and deserialize the file asynchronously.\n+   * <p>\n+   * You may also specify a cache strategy. Specifying {@link CacheStrategy#Strong} will hold a\n+   * strong reference to the composition once it is loaded\n+   * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition.\n+   */\n+  public void setAnimation(@RawRes final int animationResId, final CacheStrategy cacheStrategy) {\n+    this.animationResId = animationResId;\n+    animationName = null;\n+    if (RAW_RES_WEAK_REF_CACHE.indexOfKey(animationResId) > 0) {\n+      WeakReference<LottieComposition> compRef = RAW_RES_WEAK_REF_CACHE.get(animationResId);\n+      LottieComposition ref = compRef.get();\n+      if (ref != null) {\n+        setComposition(ref);\n+        return;\n+      }\n+    } else if (RAW_RES_STRONG_REF_CACHE.indexOfKey(animationResId) > 0) {\n+      setComposition(RAW_RES_STRONG_REF_CACHE.get(animationResId));\n+      return;\n+    }\n+\n+    lottieDrawable.cancelAnimation();\n+    cancelLoaderTask();\n+    compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId,\n+        new OnCompositionLoadedListener() {\n+          @Override public void onCompositionLoaded(LottieComposition composition) {\n+            if (cacheStrategy == CacheStrategy.Strong) {\n+              RAW_RES_STRONG_REF_CACHE.put(animationResId, composition);\n+            } else if (cacheStrategy == CacheStrategy.Weak) {\n+              RAW_RES_WEAK_REF_CACHE.put(animationResId, new WeakReference<>(composition));\n+            }\n+\n+            setComposition(composition);\n+          }\n+        });\n+  }\n+\n   /**\n    * Sets the animation from a file in the assets directory.\n    * This will load and deserialize the file asynchronously.\n@@ -324,15 +399,16 @@ public void setAnimation(String animationName) {\n    */\n   public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n     this.animationName = animationName;\n-    if (WEAK_REF_CACHE.containsKey(animationName)) {\n-      WeakReference<LottieComposition> compRef = WEAK_REF_CACHE.get(animationName);\n+    animationResId = 0;\n+    if (ASSET_WEAK_REF_CACHE.containsKey(animationName)) {\n+      WeakReference<LottieComposition> compRef = ASSET_WEAK_REF_CACHE.get(animationName);\n       LottieComposition ref = compRef.get();\n       if (ref != null) {\n         setComposition(ref);\n         return;\n       }\n-    } else if (STRONG_REF_CACHE.containsKey(animationName)) {\n-      setComposition(STRONG_REF_CACHE.get(animationName));\n+    } else if (ASSET_STRONG_REF_CACHE.containsKey(animationName)) {\n+      setComposition(ASSET_STRONG_REF_CACHE.get(animationName));\n       return;\n     }\n \n@@ -342,9 +418,9 @@ public void setAnimation(final String animationName, final CacheStrategy cacheSt\n         new OnCompositionLoadedListener() {\n           @Override public void onCompositionLoaded(LottieComposition composition) {\n             if (cacheStrategy == CacheStrategy.Strong) {\n-              STRONG_REF_CACHE.put(animationName, composition);\n+              ASSET_STRONG_REF_CACHE.put(animationName, composition);\n             } else if (cacheStrategy == CacheStrategy.Weak) {\n-              WEAK_REF_CACHE.put(animationName, new WeakReference<>(composition));\n+              ASSET_WEAK_REF_CACHE.put(animationName, new WeakReference<>(composition));\n             }\n \n             setComposition(composition);\n@@ -637,6 +713,7 @@ private void enableOrDisableHardwareLayer() {\n \n   private static class SavedState extends BaseSavedState {\n     String animationName;\n+    int animationResId;\n     float progress;\n     boolean isAnimating;\n     boolean isLooping;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -5,6 +5,7 @@\n import android.graphics.Rect;\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n+import android.support.annotation.RawRes;\n import android.support.annotation.RestrictTo;\n import android.support.v4.util.LongSparseArray;\n import android.support.v4.util.SparseArrayCompat;\n@@ -193,6 +194,14 @@ public static Cancellable fromAssetFileName(Context context, String fileName,\n       return fromInputStream(context, stream, loadedListener);\n     }\n \n+    /**\n+     * Loads a composition from a file stored in res/raw.\n+     */\n+    public static Cancellable fromRawFile(Context context, @RawRes int resId,\n+        OnCompositionLoadedListener loadedListener) {\n+      return fromInputStream(context, context.getResources().openRawResource(resId), loadedListener);\n+    }\n+\n     /**\n      * Loads a composition from an arbitrary input stream.\n      * <p>",
    "output": "Introduce a new lottie_rawRes XML attribute on LottieAnimationView (#499)\n\nThe new API follows the “file from assets” API:\r\n  - New setAnimation(int) and setAnimation(int, CacheStrategy) methods\r\n  - If both lottie_fileName & lottie_rawRes are set, an Exception is thrown"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -151,10 +151,10 @@ public boolean setComposition(LottieComposition composition) {\n       return false;\n     }\n \n-    setProgress(0f);\n     clearComposition();\n     this.composition = composition;\n     animator.setCompositionDuration(composition.getDuration());\n+    setProgress(animator.getMinValue());\n     setScale(scale);\n     updateBounds();\n     buildCompositionLayer();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -67,6 +67,10 @@ public void setMinValue(@FloatRange(from = 0f, to = 1f) float minValue) {\n     updateValues();\n   }\n \n+  public float getMinValue() {\n+    return minValue;\n+  }\n+\n   public void setMaxValue(@FloatRange(from = 0f, to = 1f) float maxValue) {\n     if (maxValue <= minValue) {\n       throw new IllegalArgumentException(\"Max value must be greater than min value.\");",
    "output": "Set progress to minValue not 0 when setting a new composition\n\nFixes #492"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -216,7 +216,7 @@ public void clearColorFilters() {\n \n     SavedState ss = (SavedState) state;\n     super.onRestoreInstanceState(ss.getSuperState());\n-    this.animationName = ss.animationName;\n+    animationName = ss.animationName;\n     if (!TextUtils.isEmpty(animationName)) {\n       setAnimation(animationName);\n     }\n@@ -248,7 +248,7 @@ public void clearColorFilters() {\n     // AppCompatImageView constructor will set the image when set from xml\n     // before LottieDrawable has been initialized\n     if (lottieDrawable != null) {\n-        lottieDrawable.recycleBitmaps();\n+      lottieDrawable.recycleBitmaps();\n     }\n   }\n \n@@ -336,7 +336,6 @@ public void setAnimation(final String animationName, final CacheStrategy cacheSt\n       return;\n     }\n \n-    this.animationName = animationName;\n     lottieDrawable.cancelAnimation();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName,",
    "output": "Various cleans (#498)\n\n* Remove a useless this prefix\r\n\r\n* Do not set the animationName twice\r\n\r\nThe assignation is already done at the beginning of the method and the argument animationName is final and hence can’t change.\r\n\r\n* Fix tiny code style issues"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -49,6 +49,7 @@ public LottieValueAnimator() {\n   @Override public void start() {\n     if (systemAnimationsAreDisabled) {\n       setProgress(getMaxProgress());\n+      end();\n     } else {\n       super.start();\n     }",
    "output": "Call end() when starting animation with system animations disabled\n\nPreviously, if system animations were disabled, we would jump\nto the end of an animation when calling start. However, end()\nwas never called so no animation listeners were updated."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n@@ -120,6 +120,23 @@ private static SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCa\n       return pathInterpolatorCache;\n     }\n \n+    @Nullable\n+    private static WeakReference<Interpolator> getInterpolator(int hash) {\n+      // This must be synchronized because get and put isn't thread safe because\n+      // SparseArrayCompat has to create new sized arrays sometimes.\n+      synchronized (Factory.class) {\n+        return pathInterpolatorCache().get(hash);\n+      }\n+    }\n+\n+    private static void putInterpolator(int hash, WeakReference<Interpolator> interpolator) {\n+      // This must be synchronized because get and put isn't thread safe because\n+      // SparseArrayCompat has to create new sized arrays sometimes.\n+      synchronized (Factory.class) {\n+        pathInterpolatorCache.put(hash, interpolator);\n+      }\n+    }\n+\n     private Factory() {\n     }\n \n@@ -163,15 +180,15 @@ public static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition com\n           cp2.x = MiscUtils.clamp(cp2.x, -scale, scale);\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);\n-          WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache().get(hash);\n+          WeakReference<Interpolator> interpolatorRef = getInterpolator(hash);\n           if (interpolatorRef != null) {\n             interpolator = interpolatorRef.get();\n           }\n           if (interpolatorRef == null || interpolator == null) {\n             interpolator = PathInterpolatorCompat.create(\n                 cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n             try {\n-              pathInterpolatorCache().put(hash, new WeakReference<>(interpolator));\n+              putInterpolator(hash, new WeakReference<>(interpolator));\n             } catch (ArrayIndexOutOfBoundsException e) {\n               // It is not clear why but SparseArrayCompat sometimes fails with this:\n               //     https://github.com/airbnb/lottie-android/issues/452",
    "output": "Synchronize path interpolator cache\n\nFixes #452"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java\n@@ -3,9 +3,7 @@\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n-import android.graphics.Rect;\n import android.graphics.RectF;\n-import android.graphics.Region;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n@@ -23,7 +21,6 @@ public class CompositionLayer extends BaseLayer {\n   @Nullable private final BaseKeyframeAnimation<Float, Float> timeRemapping;\n   private final List<BaseLayer> layers = new ArrayList<>();\n   private final RectF rect = new RectF();\n-  private final Rect originalClipRect = new Rect();\n   private final RectF newClipRect = new RectF();\n \n   @Nullable private Boolean hasMatte;\n@@ -79,7 +76,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n \n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"CompositionLayer#draw\");\n-    canvas.getClipBounds(originalClipRect);\n+    canvas.save();\n     newClipRect.set(0, 0, layerModel.getPreCompWidth(), layerModel.getPreCompHeight());\n     parentMatrix.mapRect(newClipRect);\n \n@@ -93,9 +90,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n         layer.draw(canvas, parentMatrix, parentAlpha);\n       }\n     }\n-    if (!originalClipRect.isEmpty()) {\n-      canvas.clipRect(originalClipRect, Region.Op.REPLACE);\n-    }\n+    canvas.restore();\n     L.endSection(\"CompositionLayer#draw\");\n   }\n ",
    "output": "Use save and restore instead of manually restoring clipRect\n\nViews/drawables/canvases are not supposed to be able to expand their\nclip rect so that views can properly clip their children.\nSee these docs for more info: https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.RectF, android.graphics.Region.Op)\n\nWe were relying on undesired behavior before to restore the clip\nrect which seemed to work fine for software accelerated canvases\nbut not hardware accelerated ones. Swiching to save/restore is not\nonly more accurate but fixes clipping issues.\nFixes #457"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/AnimationLinearLayout.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/AnimationLinearLayout.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/AnimationLinearLayout.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/AnimationLinearLayout.java\n@@ -28,7 +28,7 @@ private void init() {\n \n   private void addViewsFor(float progress) {\n     TextView textView = new TextView(getContext());\n-    textView.setText(\"\" + progress);\n+    textView.setText(Float.toString(progress));\n     textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);\n     textView.setPadding(0, 24, 0, 24);\n     LinearLayout.LayoutParams lp = generateDefaultLayoutParams();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -385,7 +385,7 @@ private void playAnimation(final boolean resetProgress) {\n     if (resetProgress) {\n       animator.start();\n     } else {\n-      animator.resume();\n+      animator.resumeAnimation();\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java\n@@ -195,8 +195,8 @@ private static PointF vertexAtIndex(int idx, JSONArray points) {\n       Object x = pointArray.opt(0);\n       Object y = pointArray.opt(1);\n       return new PointF(\n-          x instanceof Double ? new Float((Double) x) : (int) x,\n-          y instanceof Double ? new Float((Double) y) : (int) y);\n+          x instanceof Double ? ((Double) x).floatValue() : (int) x,\n+          y instanceof Double ? ((Double) y).floatValue() : (int) y);\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -125,7 +125,7 @@ public float getMaxProgress() {\n     return maxProgress;\n   }\n \n-  @Override public void resume() {\n+  public void resumeAnimation() {\n     float startingProgress = progress;\n     start();\n     // This has to call through setCurrentPlayTime for compatibility reasons.",
    "output": "Fix build (#470)\n\nAlso bumped some versions and fixed some other lint warnings."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n@@ -110,8 +110,15 @@ public boolean containsProgress(@FloatRange(from = 0f, to = 1f) float progress)\n   }\n \n   public static class Factory {\n-    private static final SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache =\n-        new SparseArrayCompat<>();\n+    private static SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache;\n+\n+    // https://github.com/airbnb/lottie-android/issues/464\n+    private static SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache() {\n+      if (pathInterpolatorCache == null) {\n+        pathInterpolatorCache = new SparseArrayCompat<>();\n+      }\n+      return pathInterpolatorCache;\n+    }\n \n     private Factory() {\n     }\n@@ -156,15 +163,15 @@ public static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition com\n           cp2.x = MiscUtils.clamp(cp2.x, -scale, scale);\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);\n-          WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache.get(hash);\n+          WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache().get(hash);\n           if (interpolatorRef != null) {\n             interpolator = interpolatorRef.get();\n           }\n           if (interpolatorRef == null || interpolator == null) {\n             interpolator = PathInterpolatorCompat.create(\n                 cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n             try {\n-              pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));\n+              pathInterpolatorCache().put(hash, new WeakReference<>(interpolator));\n             } catch (ArrayIndexOutOfBoundsException e) {\n               // It is not clear why but SparseArrayCompat sometimes fails with this:\n               //     https://github.com/airbnb/lottie-android/issues/452",
    "output": "Fix a NPE in Keyframe.Factory"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -8,10 +8,8 @@\n import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.drawable.Drawable;\n-import android.os.Build;\n import android.os.Parcel;\n import android.os.Parcelable;\n-import android.provider.Settings;\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n@@ -21,6 +19,8 @@\n import android.util.AttributeSet;\n import android.util.Log;\n \n+import com.airbnb.lottie.utils.Utils;\n+\n import org.json.JSONObject;\n \n import java.lang.ref.WeakReference;\n@@ -123,12 +123,8 @@ private void init(@Nullable AttributeSet attrs) {\n \n     ta.recycle();\n \n-    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n-      float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),\n-          Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);\n-      if (systemAnimationScale == 0f) {\n-        lottieDrawable.systemAnimationsAreDisabled();\n-      }\n+    if (Utils.getAnimationScale(getContext()) == 0f) {\n+      lottieDrawable.systemAnimationsAreDisabled();\n     }\n \n     enableOrDisableHardwareLayer();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -41,6 +41,7 @@\n  */\n @SuppressWarnings({\"WeakerAccess\", \"unused\"}) public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private static final String TAG = LottieDrawable.class.getSimpleName();\n+  private boolean systemAnimationsAreDisabled;\n \n   private interface LazyCompositionTask {\n     void run(LottieComposition composition);\n@@ -60,7 +61,6 @@ private interface LazyCompositionTask {\n   @Nullable private FontAssetManager fontAssetManager;\n   @Nullable FontAssetDelegate fontAssetDelegate;\n   @Nullable TextDelegate textDelegate;\n-  private boolean systemAnimationsAreDisabled;\n   private boolean enableMergePaths;\n   @Nullable private CompositionLayer compositionLayer;\n   private int alpha = 255;\n@@ -71,10 +71,8 @@ public LottieDrawable() {\n     animator.setInterpolator(new LinearInterpolator());\n     animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n       @Override public void onAnimationUpdate(ValueAnimator animation) {\n-        if (systemAnimationsAreDisabled) {\n-          setProgress(1f);\n-        } else {\n-          setProgress((Float) animation.getAnimatedValue());\n+        if (compositionLayer != null) {\n+          compositionLayer.setProgress(animator.getProgress());\n         }\n       }\n     });\n@@ -366,7 +364,13 @@ public void playAnimation() {\n   }\n \n   public void resumeAnimation() {\n-    playAnimation(animator.getAnimatedFraction() == 1f);\n+    // Reset if they try to resume from the end of the animation\n+    // or if system animations are disabled.\n+    // If they are disabled then LottieValueAnimator will have it jump to its\n+    // max progress.\n+    playAnimation(\n+        animator.getAnimatedFraction() == animator.getMaxProgress() ||\n+        systemAnimationsAreDisabled);\n   }\n \n   private void playAnimation(final boolean resetProgress) {\n@@ -378,12 +382,10 @@ private void playAnimation(final boolean resetProgress) {\n       });\n       return;\n     }\n-    float progress = animator.getProgress();\n-    animator.start();\n-    if (resetProgress || animator.getAnimatedFraction() == 1f) {\n-      animator.setProgress(animator.getMinProgress());\n+    if (resetProgress) {\n+      animator.start();\n     } else {\n-      animator.setProgress(progress);\n+      animator.resume();\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -37,11 +37,23 @@ public LottieValueAnimator() {\n \n     addUpdateListener(new AnimatorUpdateListener() {\n       @Override public void onAnimationUpdate(ValueAnimator animation) {\n-        progress = (float) animation.getAnimatedValue();\n+        if (!systemAnimationsAreDisabled) {\n+          // On older devices, getAnimatedValue and getAnimatedFraction\n+          // will always return 0 if animations are disabled.\n+          progress = (float) animation.getAnimatedValue();\n+        }\n       }\n     });\n   }\n \n+  @Override public void start() {\n+    if (systemAnimationsAreDisabled) {\n+      setProgress(getMaxProgress());\n+    } else {\n+      super.start();\n+    }\n+  }\n+\n   public void systemAnimationsAreDisabled() {\n     this.systemAnimationsAreDisabled = true;\n   }\n@@ -62,16 +74,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     if (this.progress == progress) {\n       return;\n     }\n-    if (progress < minProgress) {\n-      progress = minProgress;\n-    } else if (progress > maxProgress) {\n-      progress = maxProgress;\n-    }\n-    this.progress = progress;\n-    if (getDuration() > 0 && !systemAnimationsAreDisabled) {\n-      float offsetProgress = (progress - minProgress) / (maxProgress - minProgress);\n-      setCurrentPlayTime((long) (getDuration() * offsetProgress));\n-    }\n+    setProgressInternal(progress);\n   }\n \n   /**\n@@ -118,6 +121,10 @@ public float getMinProgress() {\n     return minProgress;\n   }\n \n+  public float getMaxProgress() {\n+    return maxProgress;\n+  }\n+\n   @Override public void resume() {\n     float startingProgress = progress;\n     start();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java\n@@ -5,6 +5,8 @@\n import android.graphics.Path;\n import android.graphics.PathMeasure;\n import android.graphics.PointF;\n+import android.os.Build;\n+import android.provider.Settings;\n import android.support.annotation.Nullable;\n import android.util.DisplayMetrics;\n import android.view.WindowManager;\n@@ -200,4 +202,15 @@ public static int hashFor(float a, float b, float c, float d) {\n     }\n     return result;\n   }\n+\n+  public static float getAnimationScale(Context context) {\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+      return Settings.Global.getFloat(context.getContentResolver(),\n+          Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);\n+    } else {\n+      //noinspection deprecation\n+      return Settings.System.getFloat(context.getContentResolver(),\n+          Settings.System.ANIMATOR_DURATION_SCALE, 1.0f);\n+    }\n+  }\n }",
    "output": "Moved more progress logic into LottieValueAnimator"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -346,6 +346,7 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String\n \n   void systemAnimationsAreDisabled() {\n     systemAnimationsAreDisabled = true;\n+    animator.systemAnimationsAreDisabled();\n   }\n \n   public void loop(boolean loop) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -10,6 +10,7 @@\n  * easily optimizing for the fact that we know that it's a value animator with 2 floats.\n  */\n public class LottieValueAnimator extends ValueAnimator {\n+  private boolean systemAnimationsAreDisabled = false;\n   private boolean isReversed = false;\n   private float minProgress = 0f;\n   private float maxProgress = 1f;\n@@ -41,6 +42,10 @@ public LottieValueAnimator() {\n     });\n   }\n \n+  public void systemAnimationsAreDisabled() {\n+    this.systemAnimationsAreDisabled = true;\n+  }\n+\n   @Override public ValueAnimator setDuration(long duration) {\n     this.originalDuration = duration;\n     updateValues(minProgress, maxProgress);\n@@ -63,7 +68,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n       progress = maxProgress;\n     }\n     this.progress = progress;\n-    if (getDuration() > 0) {\n+    if (getDuration() > 0 && !systemAnimationsAreDisabled) {\n       float offsetProgress = (progress - minProgress) / (maxProgress - minProgress);\n       setCurrentPlayTime((long) (getDuration() * offsetProgress));\n     }",
    "output": "Fix a StackOverflowError when system animations are disabled"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -177,6 +177,8 @@ public boolean setComposition(LottieComposition composition) {\n \n     composition.setPerformanceTrackingEnabled(performanceTrackingEnabled);\n \n+    animator.forceUpdate();\n+\n     return true;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java\n@@ -69,6 +69,26 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n   }\n \n+  /**\n+   * Forces the animation to update even if the progress hasn't changed.\n+   */\n+  public void forceUpdate() {\n+    setProgressInternal(getProgress());\n+  }\n+\n+  private void setProgressInternal(@FloatRange(from = 0f, to = 1f) float progress) {\n+    if (progress < minProgress) {\n+      progress = minProgress;\n+    } else if (progress > maxProgress) {\n+      progress = maxProgress;\n+    }\n+    this.progress = progress;\n+    if (getDuration() > 0) {\n+      float offsetProgress = (progress - minProgress) / (maxProgress - minProgress);\n+      setCurrentPlayTime((long) (getDuration() * offsetProgress));\n+    }\n+  }\n+\n   public float getProgress() {\n     return progress;\n   }",
    "output": "Force update the animator when a composition is set"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -105,8 +105,9 @@ public class TextLayer extends BaseLayer {\n     } else {\n       strokePaint.setColor(documentData.strokeColor);\n     }\n-    fillPaint.setAlpha(transform.getOpacity().getValue());\n-    strokePaint.setAlpha(transform.getOpacity().getValue());\n+    int alpha = transform.getOpacity().getValue() * 255 / 100;\n+    fillPaint.setAlpha(alpha);\n+    strokePaint.setAlpha(alpha);\n \n     if (strokeWidthAnimation != null) {\n       strokePaint.setStrokeWidth(strokeWidthAnimation.getValue());\n@@ -227,6 +228,12 @@ private void drawCharacterFromFont(char c, DocumentData documentData, Canvas can\n   }\n \n   private void drawCharacter(char[] character, Paint paint, Canvas canvas) {\n+    if (paint.getColor() == Color.TRANSPARENT) {\n+      return;\n+    }\n+    if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0) {\n+      return;\n+    }\n     canvas.drawText(character, 0, 1, 0, 0, paint);\n   }\n ",
    "output": "Fixed two bugs with text alpha and stroke"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java\n@@ -99,11 +99,15 @@ public class TextLayer extends BaseLayer {\n     } else {\n       fillPaint.setColor(documentData.color);\n     }\n+\n     if (strokeAnimation != null) {\n       strokePaint.setColor(strokeAnimation.getValue());\n     } else {\n       strokePaint.setColor(documentData.strokeColor);\n     }\n+    fillPaint.setAlpha(transform.getOpacity().getValue());\n+    strokePaint.setAlpha(transform.getOpacity().getValue());\n+\n     if (strokeWidthAnimation != null) {\n       strokePaint.setStrokeWidth(strokeWidthAnimation.getValue());\n     } else {",
    "output": "Apply transform opacity to text\n\nFixes #453"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java b/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java\n@@ -61,15 +61,20 @@ public static FontCharacter newInstance(JSONObject json, LottieComposition compo\n       double width = json.optDouble(\"w\");\n       String style = json.optString(\"style\");\n       String fontFamily = json.optString(\"fFamily\");\n-      JSONArray shapesJson = json.optJSONObject(\"data\").optJSONArray(\"shapes\");\n+      JSONObject data = json.optJSONObject(\"data\");\n       List<ShapeGroup> shapes = Collections.emptyList();\n-      if (shapesJson != null) {\n-        shapes = new ArrayList<>(shapesJson.length());\n-        for (int i = 0; i < shapesJson.length(); i++) {\n-          shapes.add(\n-              (ShapeGroup) ShapeGroup.shapeItemWithJson(shapesJson.optJSONObject(i), composition));\n+\n+      if (data != null) {\n+        JSONArray shapesJson = data.optJSONArray(\"shapes\");\n+        if (shapesJson != null) {\n+          shapes = new ArrayList<>(shapesJson.length());\n+          for (int i = 0; i < shapesJson.length(); i++) {\n+            shapes.add(\n+                (ShapeGroup) ShapeGroup.shapeItemWithJson(shapesJson.optJSONObject(i), composition));\n+          }\n         }\n       }\n+\n       return new FontCharacter(shapes, character, size, width, style, fontFamily);\n     }\n   }",
    "output": "Prevent a crash for letters that have no shapes\n\nFixes #445"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -167,12 +167,17 @@ public boolean setComposition(LottieComposition composition) {\n     applyColorFilters();\n \n     setProgress(progress);\n-    Iterator<LazyCompositionTask> it = lazyCompositionTasks.iterator();\n+\n+    // We copy the tasks to a new ArrayList so that if this method is called from multiple threads,\n+    // then there won't be two iterators iterating and removing at the same time.\n+    Iterator<LazyCompositionTask> it = new ArrayList<>(lazyCompositionTasks).iterator();\n     while (it.hasNext()) {\n       LazyCompositionTask t = it.next();\n       t.run(composition);\n       it.remove();\n     }\n+    lazyCompositionTasks.clear();\n+\n     composition.setPerformanceTrackingEnabled(performanceTrackingEnabled);\n \n     return true;",
    "output": "Prevent a ConcurrentModificationException\n\nFixes #449"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java\n@@ -163,7 +163,14 @@ public static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition com\n           if (interpolatorRef == null || interpolator == null) {\n             interpolator = PathInterpolatorCompat.create(\n                 cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n-            pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));\n+            try {\n+              pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));\n+            } catch (ArrayIndexOutOfBoundsException e) {\n+              // It is not clear why but SparseArrayCompat sometimes fails with this:\n+              //     https://github.com/airbnb/lottie-android/issues/452\n+              // Because this is not a critical operation, we can safely just ignore it.\n+              // I was unable to repro this to attempt a proper fix.\n+            }\n           }\n \n         } else {",
    "output": "Catch an ArrayIndexOutOfBoundsException\n\nFixes #452"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -341,7 +341,7 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String\n   }\n \n   void systemAnimationsAreDisabled() {\n-    // systemAnimationsAreDisabled = true;\n+    systemAnimationsAreDisabled = true;\n   }\n \n   public void loop(boolean loop) {",
    "output": "Uncomment systemAnimationsAreDisabled.\n\nThis was accidentally commented in 151fcf9d067d554281d676d16b67c9ed0d7bee1c"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -225,7 +225,7 @@ private void clearComposition() {\n   }\n \n   @Override public void setColorFilter(@Nullable ColorFilter colorFilter) {\n-    // Do nothing.\n+    throw new UnsupportedOperationException(\"Use addColorFilter instead.\");\n   }\n \n   /**",
    "output": "Throw if setColorFilter is used instead of addColorFilter."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -151,12 +151,13 @@ static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition compositio\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);\n           WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache.get(hash);\n-          if (interpolatorRef == null || interpolatorRef.get() == null) {\n+          if (interpolatorRef != null) {\n+            interpolator = interpolatorRef.get();\n+          }\n+          if (interpolatorRef == null || interpolator == null) {\n             interpolator = PathInterpolatorCompat.create(\n                 cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n             pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));\n-          } else {\n-            interpolator = pathInterpolatorCache.get(hash).get();\n           }\n \n         } else {",
    "output": "Only dereference interpolator cache WeakReference once\n\nFixes #432"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -19,7 +19,9 @@\n import android.view.View;\n import android.view.animation.LinearInterpolator;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Set;\n \n /**\n@@ -33,6 +35,11 @@\n  */\n public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private static final String TAG = LottieDrawable.class.getSimpleName();\n+\n+  private interface LazyCompositionTask {\n+    void run(LottieComposition composition);\n+  }\n+\n   private final Matrix matrix = new Matrix();\n   private LottieComposition composition;\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n@@ -41,14 +48,13 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private float scale = 1f;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n+  private final ArrayList<LazyCompositionTask> lazyCompositionTasks = new ArrayList<>();\n   @Nullable private ImageAssetManager imageAssetManager;\n   @Nullable private String imageAssetsFolder;\n   @Nullable private ImageAssetDelegate imageAssetDelegate;\n   @Nullable private FontAssetManager fontAssetManager;\n   @Nullable FontAssetDelegate fontAssetDelegate;\n   @Nullable TextDelegate textDelegate;\n-  private boolean playAnimationWhenCompositionAdded;\n-  private boolean reverseAnimationWhenCompositionAdded;\n   private boolean systemAnimationsAreDisabled;\n   private boolean enableMergePaths;\n   @Nullable private CompositionLayer compositionLayer;\n@@ -156,13 +162,11 @@ boolean enableMergePathsForKitKatAndAbove() {\n     applyColorFilters();\n \n     setProgress(progress);\n-    if (playAnimationWhenCompositionAdded) {\n-      playAnimationWhenCompositionAdded = false;\n-      playAnimation();\n-    }\n-    if (reverseAnimationWhenCompositionAdded) {\n-      reverseAnimationWhenCompositionAdded = false;\n-      reverseAnimation();\n+    Iterator<LazyCompositionTask> it = lazyCompositionTasks.iterator();\n+    while (it.hasNext()) {\n+      LazyCompositionTask t = it.next();\n+      t.run(composition);\n+      it.remove();\n     }\n     composition.setPerformanceTrackingEnabled(performanceTrackingEnabled);\n \n@@ -357,8 +361,11 @@ void systemAnimationsAreDisabled() {\n \n   private void playAnimation(boolean setStartTime) {\n     if (compositionLayer == null) {\n-      playAnimationWhenCompositionAdded = true;\n-      reverseAnimationWhenCompositionAdded = false;\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override public void run(LottieComposition composition) {\n+          playAnimation();\n+        }\n+      });\n       return;\n     }\n     long playTime = setStartTime ? (long) (progress * animator.getDuration()) : 0;\n@@ -378,8 +385,11 @@ private void playAnimation(boolean setStartTime) {\n \n   private void reverseAnimation(boolean setStartTime) {\n     if (compositionLayer == null) {\n-      playAnimationWhenCompositionAdded = false;\n-      reverseAnimationWhenCompositionAdded = true;\n+      lazyCompositionTasks.add(new LazyCompositionTask() {\n+        @Override public void run(LottieComposition composition) {\n+          reverseAnimation();\n+        }\n+      });\n       return;\n     }\n     if (setStartTime) {\n@@ -481,8 +491,7 @@ private void updateBounds() {\n   }\n \n   @SuppressWarnings(\"WeakerAccess\") public void cancelAnimation() {\n-    playAnimationWhenCompositionAdded = false;\n-    reverseAnimationWhenCompositionAdded = false;\n+    lazyCompositionTasks.clear();\n     animator.cancel();\n   }\n ",
    "output": "Created lazy composition tasks in LottieDrawable"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -136,17 +136,25 @@ private void init(@Nullable AttributeSet attrs) {\n   }\n \n   @Override public void setImageResource(int resId) {\n-    super.setImageResource(resId);\n     recycleBitmaps();\n+    cancelLoaderTask();\n+    super.setImageResource(resId);\n   }\n \n   @Override public void setImageDrawable(Drawable drawable) {\n     if (drawable != lottieDrawable) {\n       recycleBitmaps();\n     }\n+    cancelLoaderTask();\n     super.setImageDrawable(drawable);\n   }\n \n+  @Override public void setImageBitmap(Bitmap bm) {\n+    recycleBitmaps();\n+    cancelLoaderTask();\n+    super.setImageBitmap(bm);\n+  }\n+\n   /**\n    * Add a color filter to specific content on a specific layer.\n    * @param layerName name of the layer where the supplied content name lives\n@@ -323,7 +331,8 @@ public void useHardwareAcceleration(boolean use) {\n    * strong reference to the composition once it is loaded\n    * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition.\n    */\n-  @SuppressWarnings(\"WeakerAccess\") public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n     this.animationName = animationName;\n     if (WEAK_REF_CACHE.containsKey(animationName)) {\n       WeakReference<LottieComposition> compRef = WEAK_REF_CACHE.get(animationName);",
    "output": "Cancel loader tasks when drawable, bitmaps, or resources are set\n\nFixes #405"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -99,7 +99,7 @@ private void init(@Nullable AttributeSet attrs) {\n     TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);\n     int cacheStrategy = ta.getInt(\n         R.styleable.LottieAnimationView_lottie_cacheStrategy,\n-        CacheStrategy.None.ordinal());\n+        CacheStrategy.Weak.ordinal());\n     defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n     String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n     if (!isInEditMode() && fileName != null) {",
    "output": "Make Weak the default cache strategy"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/SolidLayer.java b/lottie/src/main/java/com/airbnb/lottie/SolidLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/SolidLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/SolidLayer.java\n@@ -29,7 +29,7 @@ class SolidLayer extends BaseLayer {\n       return;\n     }\n \n-    int alpha = (int) ((backgroundAlpha / 255f * transform.getOpacity().getValue() / 100f) * 255);\n+    int alpha = (int) (parentAlpha / 255f * (backgroundAlpha / 255f * transform.getOpacity().getValue() / 100f) * 255);\n     paint.setAlpha(alpha);\n     if (alpha > 0) {\n       updateRect(parentMatrix);",
    "output": "Respect parent alpha for solid layers (#420)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -55,14 +55,13 @@ public enum CacheStrategy {\n     Strong\n   }\n \n-  private static final Map<String, LottieComposition> strongRefCache = new HashMap<>();\n-  private static final Map<String, WeakReference<LottieComposition>> weakRefCache =\n+  private static final Map<String, LottieComposition> STRONG_REF_CACHE = new HashMap<>();\n+  private static final Map<String, WeakReference<LottieComposition>> WEAK_REF_CACHE =\n       new HashMap<>();\n \n   private final OnCompositionLoadedListener loadedListener =\n       new OnCompositionLoadedListener() {\n-        @Override\n-        public void onCompositionLoaded(@Nullable LottieComposition composition) {\n+        @Override public void onCompositionLoaded(@Nullable LottieComposition composition) {\n           if (composition != null) {\n             setComposition(composition);\n           }\n@@ -78,9 +77,7 @@ public void onCompositionLoaded(@Nullable LottieComposition composition) {\n   private boolean useHardwareLayer = false;\n \n   @Nullable private Cancellable compositionLoader;\n-  /**\n-   * Can be null because it is created async\n-   */\n+  /** Can be null because it is created async */\n   @Nullable private LottieComposition composition;\n \n   public LottieAnimationView(Context context) {\n@@ -328,15 +325,15 @@ public void useHardwareAcceleration(boolean use) {\n    */\n   @SuppressWarnings(\"WeakerAccess\") public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n     this.animationName = animationName;\n-    if (weakRefCache.containsKey(animationName)) {\n-      WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n+    if (WEAK_REF_CACHE.containsKey(animationName)) {\n+      WeakReference<LottieComposition> compRef = WEAK_REF_CACHE.get(animationName);\n       LottieComposition ref = compRef.get();\n       if (ref != null) {\n         setComposition(ref);\n         return;\n       }\n-    } else if (strongRefCache.containsKey(animationName)) {\n-      setComposition(strongRefCache.get(animationName));\n+    } else if (STRONG_REF_CACHE.containsKey(animationName)) {\n+      setComposition(STRONG_REF_CACHE.get(animationName));\n       return;\n     }\n \n@@ -347,9 +344,9 @@ public void useHardwareAcceleration(boolean use) {\n         new OnCompositionLoadedListener() {\n           @Override public void onCompositionLoaded(LottieComposition composition) {\n             if (cacheStrategy == CacheStrategy.Strong) {\n-              strongRefCache.put(animationName, composition);\n+              STRONG_REF_CACHE.put(animationName, composition);\n             } else if (cacheStrategy == CacheStrategy.Weak) {\n-              weakRefCache.put(animationName, new WeakReference<>(composition));\n+              WEAK_REF_CACHE.put(animationName, new WeakReference<>(composition));\n             }\n \n             setComposition(composition);",
    "output": "Bump a couple deps + minor cleanup (#430)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -265,10 +265,29 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n   }\n \n   /**\n-   * @see #useExperimentalHardwareAcceleration(boolean)\n+   * @see #useHardwareAcceleration(boolean)\n    */\n-  @SuppressWarnings({\"WeakerAccess\", \"unused\"}) public void useExperimentalHardwareAcceleration() {\n-    useExperimentalHardwareAcceleration(true);\n+  @SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+  @Deprecated\n+  public void useExperimentalHardwareAcceleration() {\n+    useHardwareAcceleration(true);\n+  }\n+\n+\n+  /**\n+   * @see #useHardwareAcceleration(boolean)\n+   */\n+  @SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+  @Deprecated\n+  public void useExperimentalHardwareAcceleration(boolean use) {\n+    useHardwareAcceleration(use);\n+  }\n+\n+  /**\n+   * @see #useHardwareAcceleration(boolean)\n+   */\n+  @SuppressWarnings(\"unused\") public void useHardwareAcceleration() {\n+    useHardwareAcceleration(true);\n   }\n \n   /**\n@@ -284,7 +303,7 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n    *    anything about that.\n    */\n   @SuppressWarnings({\"WeakerAccess\", \"unused\"})\n-  public void useExperimentalHardwareAcceleration(boolean use) {\n+  public void useHardwareAcceleration(boolean use) {\n     useHardwareLayer = use;\n     enableOrDisableHardwareLayer();\n   }",
    "output": "Remove experimental from hardware acceleration API"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -311,8 +311,9 @@ public void useExperimentalHardwareAcceleration(boolean use) {\n     this.animationName = animationName;\n     if (weakRefCache.containsKey(animationName)) {\n       WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n-      if (compRef.get() != null) {\n-        setComposition(compRef.get());\n+      LottieComposition ref = compRef.get();\n+      if (ref != null) {\n+        setComposition(ref);\n         return;\n       }\n     } else if (strongRefCache.containsKey(animationName)) {",
    "output": "Make ref strong before checking it (#406)\n\nPotentially unsafe WeakReference handling"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n@@ -21,6 +21,7 @@ private AnimatableFloatValue(List<Keyframe<Float>> keyframes, Float initialValue\n     return new FloatKeyframeAnimation(keyframes);\n   }\n \n+  @Override\n   public Float getInitialValue() {\n     return initialValue;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -21,6 +21,7 @@ private AnimatableIntegerValue() {\n     return new IntegerKeyframeAnimation(keyframes);\n   }\n \n+  @Override\n   public Integer getInitialValue() {\n     return initialValue;\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/BaseAnimatableValue.java b/lottie/src/main/java/com/airbnb/lottie/BaseAnimatableValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseAnimatableValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseAnimatableValue.java\n@@ -29,6 +29,7 @@ O convertType(V value) {\n     return (O) value;\n   }\n \n+  @Override\n   public boolean hasAnimation() {\n     return !keyframes.isEmpty();\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -593,10 +593,12 @@ public void writeToParcel(Parcel out, int flags) {\n \n     public static final Parcelable.Creator<SavedState> CREATOR =\n         new Parcelable.Creator<SavedState>() {\n+          @Override\n           public SavedState createFromParcel(Parcel in) {\n             return new SavedState(in);\n           }\n \n+          @Override\n           public SavedState[] newArray(int size) {\n             return new SavedState[size];\n           }",
    "output": "Added missing override annotations. (#408)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n@@ -138,6 +138,9 @@ boolean hasMasks() {\n             hasMasks = true;\n             return true;\n           }\n+        } else if (layer instanceof CompositionLayer && ((CompositionLayer) layer).hasMasks()) {\n+          hasMasks = true;\n+          return  true;\n         }\n       }\n       hasMasks = false;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -375,24 +375,6 @@ public void setComposition(@NonNull LottieComposition composition) {\n       return;\n     }\n \n-    int screenWidth = Utils.getScreenWidth(getContext());\n-    int screenHeight = Utils.getScreenHeight(getContext());\n-    int compWidth = composition.getBounds().width();\n-    int compHeight = composition.getBounds().height();\n-    if (compWidth > screenWidth ||\n-        compHeight > screenHeight) {\n-      float xScale = screenWidth / (float) compWidth;\n-      float yScale = screenHeight / (float) compHeight;\n-\n-      float maxScaleForScreen = Math.min(xScale, yScale);\n-      setScale(Math.min(maxScaleForScreen, lottieDrawable.getScale()));\n-\n-      Log.w(L.TAG, String.format(\n-          \"Composition larger than the screen %dx%d vs %dx%d. Scaling down.\",\n-          compWidth, compHeight, screenWidth, screenHeight));\n-    }\n-\n-\n     // If you set a different composition on the view, the bounds will not update unless\n     // the drawable is different than the original.\n     setImageDrawable(null);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -169,7 +169,7 @@ boolean enableMergePathsForKitKatAndAbove() {\n     return true;\n   }\n \n-  public void setPerformanceTrackingEnabled(boolean enabled) {\n+  @SuppressWarnings(\"WeakerAccess\") public void setPerformanceTrackingEnabled(boolean enabled) {\n     performanceTrackingEnabled = enabled;\n     if (composition != null) {\n       composition.setPerformanceTrackingEnabled(enabled);\n@@ -296,13 +296,38 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String\n       return;\n     }\n     float scale = this.scale;\n-    if (compositionLayer.hasMatte()) {\n-      scale = Math.min(this.scale, getMaxScale(canvas));\n-    }\n+    float extraScale = 1f;\n+    boolean hasExtraScale = false;\n+    float maxScale = getMaxScale(canvas);\n+    if (compositionLayer.hasMatte() || compositionLayer.hasMasks()) {\n+      // Since we can only scale up the animation so much before masks and mattes get clipped, we\n+      // may have to scale the canvas to fake the rest. This isn't a problem for software rendering\n+      // but hardware accelerated scaling is rasterized so it will appear pixelated.\n+      extraScale = scale / maxScale;\n+      scale = Math.min(scale, maxScale);\n+      // This check fixes some floating point rounding issues.\n+      hasExtraScale = extraScale > 1.001f;\n+    }\n+\n+    if (hasExtraScale) {\n+      canvas.save();\n+      // This is extraScale ^2 because what happens is when the scale increases, the intrinsic size\n+      // of the view increases. That causes the drawable to keep growing even though we are only\n+      // rendering to the size of the view in the top left quarter, leaving the rest blank.\n+      // The first scale by extraScale scales up the canvas so that we are back at the original\n+      // size. The second extraScale is what actually has the scaling effect.\n+      float extraScaleSquared = extraScale * extraScale;\n+      int px = (int) ((composition.getBounds().width() * scale / 2f));\n+      int py = (int) ((composition.getBounds().height() * scale / 2f));\n+      canvas.scale(extraScaleSquared, extraScaleSquared, px, py);\n \n+    }\n     matrix.reset();\n     matrix.preScale(scale, scale);\n     compositionLayer.draw(canvas, matrix, alpha);\n+    if (hasExtraScale) {\n+      canvas.restore();\n+    }\n     L.endSection(\"Drawable#draw\");\n   }\n \n@@ -425,6 +450,7 @@ public float getProgress() {\n     }\n   }\n \n+  @SuppressWarnings(\"WeakerAccess\")\n   public void setTextDelegate(@SuppressWarnings(\"NullableProblems\") TextDelegate textDelegate) {\n     this.textDelegate = textDelegate;\n   }\n@@ -449,6 +475,7 @@ private void updateBounds() {\n     if (composition == null) {\n       return;\n     }\n+    float scale = getScale();\n     setBounds(0, 0, (int) (composition.getBounds().width() * scale),\n         (int) (composition.getBounds().height() * scale));\n   }\n@@ -565,6 +592,10 @@ private FontAssetManager getFontAssetManager() {\n     return null;\n   }\n \n+  /**\n+   * If there are masks or mattes, we can't scale the animation larger than the canvas or else\n+   * the off screen rendering for masks and mattes after saveLayer calls will get clipped.\n+   */\n   private float getMaxScale(@NonNull Canvas canvas) {\n     float maxScaleX = canvas.getWidth() / (float) composition.getBounds().width();\n     float maxScaleY = canvas.getHeight() / (float) composition.getBounds().height();",
    "output": "Allow animations with masks and mattes to scale up\n\nPreviously, animations were given a max scale due to saveLayer,\nwhich is used for mattes and masks, only saving the canvas size.\nThis is problematic when the scale makes the animations larger\nthan the view because the masks and mattes get clipped. This gets\naround that by scaling up the animation up until the size of the\nview then scaling the canvas with the remaining scale.\n\n#395 #301 #161 #326 #315\nFixes #404"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -368,6 +368,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n     lottieDrawable.setCallback(this);\n \n     boolean isNewComposition = lottieDrawable.setComposition(composition);\n+    enableOrDisableHardwareLayer();\n     if (!isNewComposition) {\n       // We can avoid re-setting the drawable, and invalidating the view, since the composition\n       // hasn't changed.",
    "output": "Update hardware layer when setComposition is set\n\nWhen the `LottieDrawable` composition is set, it may autoplay the\nanimation so we need to update the layer type.\nFixes #383"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -181,10 +181,18 @@ static boolean isAtLeastVersion(LottieComposition composition, int major, int mi\n \n   static int hashFor(float a, float b, float c, float d) {\n     int result = 17;\n-    result = (int) (31 * result * a);\n-    result = (int) (31 * result * b);\n-    result = (int) (31 * result * c);\n-    result = (int) (31 * result * d);\n+    if (a != 0) {\n+      result = (int) (31 * result * a);\n+    }\n+    if (b != 0) {\n+      result = (int) (31 * result * b);\n+    }\n+    if (c != 0) {\n+      result = (int) (31 * result * c);\n+    }\n+    if (d != 0) {\n+      result = (int) (31 * result * d);\n+    }\n     return result;\n   }\n }",
    "output": "Fix hashCode calculation\n\nFixes #394"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -3,13 +3,15 @@\n import android.graphics.PointF;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n+import android.support.v4.util.SparseArrayCompat;\n import android.support.v4.view.animation.PathInterpolatorCompat;\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n import org.json.JSONArray;\n import org.json.JSONObject;\n \n+import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -102,6 +104,9 @@ boolean containsProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n   }\n \n   static class Factory {\n+    private static final SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache =\n+        new SparseArrayCompat<>();\n+\n     private Factory() {\n     }\n \n@@ -144,8 +149,16 @@ static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition compositio\n           cp1.y = MiscUtils.clamp(cp1.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           cp2.x = MiscUtils.clamp(cp2.x, -scale, scale);\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n-          interpolator = PathInterpolatorCompat.create(\n-              cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n+          int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);\n+          WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache.get(hash);\n+          if (interpolatorRef == null || interpolatorRef.get() == null) {\n+            interpolator = PathInterpolatorCompat.create(\n+                cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n+            pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));\n+          } else {\n+            interpolator = pathInterpolatorCache.get(hash).get();\n+          }\n+\n         } else {\n           interpolator = LINEAR_INTERPOLATOR;\n         }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -178,4 +178,13 @@ static boolean isAtLeastVersion(LottieComposition composition, int major, int mi\n \n     return composition.getPatchVersion() >= patch;\n   }\n+\n+  static int hashFor(float a, float b, float c, float d) {\n+    int result = 17;\n+    result = (int) (31 * result * a);\n+    result = (int) (31 * result * b);\n+    result = (int) (31 * result * c);\n+    result = (int) (31 * result * d);\n+    return result;\n+  }\n }",
    "output": "Cache PathInterpolators\n\nPathInterpolator builds an array of quantized interpolator values\nupon initialization. This requires many float arrays of ~25\nelements to be created. Reusing them with a weak ref static cache\nwill have significant memory savings in animations that use the\nsame interpolator many times.\n\n#385"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n@@ -28,8 +28,9 @@ private Factory() {\n \n     static AnimatableGradientColorValue newInstance(\n         JSONObject json, LottieComposition composition) {\n+      int points = json.optInt(\"p\", json.optJSONArray(\"k\").length() / 4);\n       AnimatableValueParser.Result<GradientColor> result = AnimatableValueParser\n-          .newInstance(json, 1, composition, new ValueFactory(json.optInt(\"p\")))\n+          .newInstance(json, 1, composition, new ValueFactory(points))\n           .parseJson();\n       GradientColor initialValue = result.initialValue;\n       return new AnimatableGradientColorValue(result.keyframes, initialValue);",
    "output": "Fall back to gradient array length when p is missing\n\nFixes #309"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -97,7 +97,7 @@ static void applyTrimPathIfNeeded(\n       L.endSection(\"applyTrimPathIfNeeded\");\n       return;\n     }\n-    if (length == 0f || Math.abs(endValue - startValue - 1) < .01) {\n+    if (length < 1f || Math.abs(endValue - startValue - 1) < .01) {\n       L.endSection(\"applyTrimPathIfNeeded\");\n       return;\n     }",
    "output": "Don't trim a path when length < 1\n\nPath lengths get casted to integers. Lengths < 1 will round to 0\nand causes a DivideByZero exception"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -328,8 +328,10 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {\n           path.setFillType(Path.FillType.WINDING);\n       }\n       KeyframeAnimation<Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);\n+      int alpha = contentPaint.getAlpha();\n       contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n       canvas.drawPath(path, contentPaint);\n+      contentPaint.setAlpha(alpha);\n     }\n     L.beginSection(\"Layer#restoreLayer\");\n     canvas.restore();",
    "output": "Reset paint alpha after drawing mask"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -148,7 +148,7 @@ private void drawTextWithFont(\n     }\n     fillPaint.setTypeface(typeface);\n     fillPaint.setTextSize(documentData.size * composition.getDpScale());\n-    strokePaint.setTypeface(strokePaint.getTypeface());\n+    strokePaint.setTypeface(fillPaint.getTypeface());\n     strokePaint.setTextSize(fillPaint.getTextSize());\n     for (int i = 0; i < text.length(); i++) {\n       char character = text.charAt(i);",
    "output": "Fix small typeface error when drawing texts (#372)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -78,6 +78,7 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"Tests/ShapeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/SplitDimensions.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Stroke.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/TimeStretch.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TrackMattes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/TrimPaths.json\");\n     TestRobot.testChangingCompositions(activity, \"TwitterHeart.json\", \"PinJump.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -349,6 +349,9 @@ private void setVisible(boolean visible) {\n   }\n \n   void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+    if (layerModel.getTimeStretch() != 0) {\n+      progress /= layerModel.getTimeStretch();\n+    }\n     if (matteLayer != null) {\n       matteLayer.setProgress(progress);\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n@@ -119,6 +119,9 @@ class CompositionLayer extends BaseLayer {\n       long remappedTime = (long) (timeRemapping.getValue() * 1000);\n       progress = remappedTime / (float) duration;\n     }\n+    if (layerModel.getTimeStretch() != 0) {\n+      progress /= layerModel.getTimeStretch();\n+    }\n \n     progress -= layerModel.getStartProgress();\n     for (int i = layers.size() - 1; i >= 0; i--) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -89,7 +89,7 @@ LottieComposition getComposition() {\n     return composition;\n   }\n \n-  @SuppressWarnings(\"unused\") float getTimeStretch() {\n+  float getTimeStretch() {\n     return timeStretch;\n   }\n \n@@ -304,8 +304,11 @@ static Layer newInstance(JSONObject json, LottieComposition composition) {\n         preCompHeight = (int) (json.optInt(\"h\") * composition.getDpScale());\n       }\n \n-      float inFrame = json.optLong(\"ip\");\n-      float outFrame = json.optLong(\"op\");\n+      // Bodymovin pre-scales the in frame and out frame by the time stretch. However, that will\n+      // cause the stretch to be double counted since the in out animation gets treated the same\n+      // as all other animations and will have stretch applied to it again.\n+      float inFrame = json.optLong(\"ip\") / timeStretch;\n+      float outFrame = json.optLong(\"op\") / timeStretch;\n \n       // Before the in frame\n       if (inFrame > 0) {\n@@ -319,11 +322,9 @@ static Layer newInstance(JSONObject json, LottieComposition composition) {\n           new Keyframe<>(composition, 1f, 1f, null, inFrame, outFrame);\n       inOutKeyframes.add(visibleKeyframe);\n \n-      if (outFrame <= composition.getDurationFrames()) {\n-        Keyframe<Float> outKeyframe =\n-            new Keyframe<>(composition, 0f, 0f, null, outFrame, (float) composition.getEndFrame());\n-        inOutKeyframes.add(outKeyframe);\n-      }\n+      Keyframe<Float> outKeyframe = new Keyframe<>(\n+          composition, 0f, 0f, null, outFrame, Float.MAX_VALUE);\n+      inOutKeyframes.add(outKeyframe);\n \n       AnimatableFloatValue timeRemapping = null;\n       if (json.has(\"tm\")) {",
    "output": "Added support for time stretch"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n@@ -156,5 +156,4 @@ private static void throwMissingTransform(String missingProperty) {\n       throw new IllegalArgumentException(\"Missing transform for \" + missingProperty);\n     }\n   }\n-\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -50,6 +50,9 @@ static void setEndFrames(List<? extends Keyframe<?>> keyframes) {\n   @SuppressWarnings(\"WeakerAccess\") final float startFrame;\n   @SuppressWarnings(\"WeakerAccess\") @Nullable Float endFrame;\n \n+  private float startProgress = Float.MIN_VALUE;\n+  private float endProgress = Float.MIN_VALUE;\n+\n   public Keyframe(LottieComposition composition, @Nullable T startValue, @Nullable T endValue,\n       @Nullable Interpolator interpolator, float startFrame, @Nullable Float endFrame) {\n     this.composition = composition;\n@@ -60,15 +63,25 @@ public Keyframe(LottieComposition composition, @Nullable T startValue, @Nullable\n     this.endFrame = endFrame;\n   }\n \n-  @FloatRange(from = 0f, to = 1f)\n   float getStartProgress() {\n-    return startFrame / composition.getDurationFrames();\n+    if (startProgress == Float.MIN_VALUE) {\n+      startProgress = (startFrame  - composition.getStartFrame()) / composition.getDurationFrames();\n+    }\n+    return startProgress;\n   }\n \n-  @FloatRange(from = 0f, to = 1f)\n   float getEndProgress() {\n-    //noinspection Range\n-    return endFrame == null ? 1f : endFrame / composition.getDurationFrames();\n+    if (endProgress == Float.MIN_VALUE) {\n+      if (endFrame == null) {\n+        endProgress = 1f;\n+      } else {\n+        float startProgress = getStartProgress();\n+        float durationFrames = endFrame - startFrame;\n+        float durationProgress = durationFrames / composition.getDurationFrames();\n+        endProgress = startProgress + durationProgress;\n+      }\n+    }\n+    return endProgress;\n   }\n \n   boolean isStatic() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -94,7 +94,7 @@ Layer layerModelForId(long id) {\n \n   @SuppressWarnings(\"WeakerAccess\") public long getDuration() {\n     long frameDuration = endFrame - startFrame;\n-    return (long) (frameDuration / (float) frameRate * 1000);\n+    return (long) (frameDuration / frameRate * 1000);\n   }\n \n   int getMajorVersion() {\n@@ -109,6 +109,10 @@ int getPatchVersion() {\n     return patchVersion;\n   }\n \n+  long getStartFrame() {\n+    return startFrame;\n+  }\n+\n   long getEndFrame() {\n     return endFrame;\n   }\n@@ -139,7 +143,7 @@ Map<String, LottieImageAsset> getImages() {\n   }\n \n   float getDurationFrames() {\n-    return getDuration() * (float) frameRate / 1000f;\n+    return getDuration() * frameRate / 1000f;\n   }\n \n ",
    "output": "Factor composition start and end frames (work area) into progress calculation (#366)\n\n#257"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie;\n \n+import android.support.v4.util.ArraySet;\n import android.support.v4.util.Pair;\n import android.util.Log;\n \n@@ -9,10 +10,16 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n public class PerformanceTracker {\n \n+  public interface FrameListener {\n+    void onFrameRendered(float renderTimeMs);\n+  }\n+\n   private boolean enabled = false;\n+  private final Set<FrameListener> frameListeners = new ArraySet<>();\n   private Map<String, MeanCalculator> layerRenderTimes = new HashMap<>();\n   private final Comparator<Pair<String, Float>> floatComparator =\n       new Comparator<Pair<String, Float>>() {\n@@ -42,6 +49,20 @@ void recordRenderTime(String layerName, float millis) {\n       layerRenderTimes.put(layerName, meanCalculator);\n     }\n     meanCalculator.add(millis);\n+\n+    if (layerName.equals(\"root\")) {\n+      for (FrameListener listener : frameListeners) {\n+        listener.onFrameRendered(millis);\n+      }\n+    }\n+  }\n+\n+  public void addFrameListener(FrameListener frameListener) {\n+    frameListeners.add(frameListener);\n+  }\n+\n+  public void removeFrameListener(FrameListener frameListener) {\n+    frameListeners.add(frameListener);\n   }\n \n   public void clearRenderTimes() {",
    "output": "Added a real time graph of render times"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -160,11 +160,13 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n       return;\n     }\n     buildParentLayerListIfNeeded();\n+    L.beginSection(\"Layer#parentMatrix\");\n     matrix.reset();\n     matrix.set(parentMatrix);\n     for (int i = parentLayers.size() - 1; i >= 0; i--) {\n       matrix.preConcat(parentLayers.get(i).transform.getMatrix());\n     }\n+    L.endSection(\"Layer#parentMatrix\");\n     int alpha = (int)\n         ((parentAlpha / 255f * (float) transform.getOpacity().getValue() / 100f) * 255);\n     if (!hasMatteOnThisLayer() && !hasMasksOnThisLayer()) {\n@@ -176,6 +178,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n       return;\n     }\n \n+    L.beginSection(\"Layer#computeBounds\");\n     rect.set(0, 0, 0, 0);\n     getBounds(rect, matrix);\n     intersectBoundsWithMatte(rect, matrix);\n@@ -184,6 +187,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     intersectBoundsWithMask(rect, matrix);\n \n     rect.set(0, 0, canvas.getWidth(), canvas.getHeight());\n+    L.endSection(\"Layer#computeBounds\");\n \n     L.beginSection(\"Layer#saveLayer\");\n     canvas.saveLayer(rect, contentPaint, Canvas.ALL_SAVE_FLAG);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -130,11 +130,13 @@ abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimatio\n       if (pathGroup.trimPath != null) {\n         applyTrimPath(canvas, pathGroup, parentMatrix);\n       } else {\n-        L.beginSection(\"StrokeContent#drawPath\");\n+        L.beginSection(\"StrokeContent#buildPath\");\n         path.reset();\n         for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {\n           path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n         }\n+        L.endSection(\"StrokeContent#buildPath\");\n+        L.beginSection(\"StrokeContent#drawPath\");\n         canvas.drawPath(path, paint);\n         L.endSection(\"StrokeContent#drawPath\");\n       }\n@@ -143,9 +145,9 @@ abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimatio\n   }\n \n   private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatrix) {\n-    L.beginSection(\"StrokeContent#drawTrimPath\");\n+    L.beginSection(\"StrokeContent#applyTrimPath\");\n     if (pathGroup.trimPath == null) {\n-      L.endSection(\"StrokeContent#drawTrimPath\");\n+      L.endSection(\"StrokeContent#applyTrimPath\");\n       return;\n     }\n     path.reset();\n@@ -206,10 +208,11 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n         }\n       currentLength += length;\n     }\n-    L.endSection(\"StrokeContent#drawTrimPath\");\n+    L.endSection(\"StrokeContent#applyTrimPath\");\n   }\n \n   @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {\n+    L.beginSection(\"StrokeContent#getBounds\");\n     path.reset();\n     for (int i = 0; i < pathGroups.size(); i++) {\n       PathGroup pathGroup = pathGroups.get(i);\n@@ -230,10 +233,13 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n         outBounds.right + 1,\n         outBounds.bottom + 1\n     );\n+    L.endSection(\"StrokeContent#getBounds\");\n   }\n \n   private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n+    L.beginSection(\"StrokeContent#applyDashPattern\");\n     if (dashPatternAnimations.isEmpty()) {\n+      L.endSection(\"StrokeContent#applyDashPattern\");\n       return;\n     }\n \n@@ -257,6 +263,7 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n     }\n     float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue();\n     paint.setPathEffect(new DashPathEffect(dashPatternValues, offset));\n+    L.endSection(\"StrokeContent#applyDashPattern\");\n   }\n \n   /**",
    "output": "Added more systrace markers"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/TypographyDemoActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/TypographyDemoActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/TypographyDemoActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/TypographyDemoActivity.java\n@@ -1,40 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import android.support.annotation.Nullable;\n-import android.support.v7.app.AppCompatActivity;\n-import android.view.View;\n-import android.view.ViewTreeObserver;\n-import android.widget.ScrollView;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class TypographyDemoActivity extends AppCompatActivity {\n-\n-  @BindView(R.id.scroll_view) ScrollView scrollView;\n-  @BindView(R.id.font_view) LottieFontViewGroup fontView;\n-\n-  private final ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener() {\n-    @Override\n-    public void onGlobalLayout() {\n-      scrollView.fullScroll(View.FOCUS_DOWN);\n-    }\n-  };\n-\n-  @Override\n-  protected void onCreate(@Nullable Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-    setContentView(R.layout.activity_typography_demo);\n-    ButterKnife.bind(this);\n-\n-    fontView.getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);\n-  }\n-\n-\n-  @Override\n-  protected void onDestroy() {\n-    fontView.getViewTreeObserver().removeOnGlobalLayoutListener(layoutListener);\n-    super.onDestroy();\n-  }\n-}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/WarningsDialogFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/WarningsDialogFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/WarningsDialogFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/WarningsDialogFragment.java\n@@ -1,84 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import android.support.annotation.Nullable;\n-import android.support.v4.app.DialogFragment;\n-import android.support.v7.widget.RecyclerView;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.Button;\n-import android.widget.TextView;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class WarningsDialogFragment extends DialogFragment {\n-  private static final String ARG_WARNINGS = \"warnings\";\n-\n-  static WarningsDialogFragment newInstance(ArrayList<String> warnings) {\n-    Bundle args = new Bundle();\n-    args.putStringArrayList(ARG_WARNINGS, warnings);\n-    WarningsDialogFragment frag = new WarningsDialogFragment();\n-    frag.setArguments(args);\n-    return frag;\n-  }\n-\n-  @BindView(R.id.recycler_view) RecyclerView recyclerView;\n-  @BindView(R.id.ok_button) Button okButton;\n-\n-  @Nullable @Override\n-  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n-      @Nullable Bundle savedInstanceState) {\n-    View view = inflater.inflate(R.layout.fragment_warnings, container, false);\n-    ButterKnife.bind(this, view);\n-    okButton.setOnClickListener(new View.OnClickListener() {\n-      @Override public void onClick(View v) {\n-        dismiss();\n-      }\n-    });\n-    recyclerView.setAdapter(new Adapter(getArguments().getStringArrayList(ARG_WARNINGS)));\n-    return view;\n-  }\n-\n-  private static final class Adapter extends RecyclerView.Adapter<VH> {\n-\n-    private final List<String> warnings;\n-\n-    private Adapter(List<String> warnings) {\n-      this.warnings = warnings;\n-    }\n-\n-    @Override public VH onCreateViewHolder(ViewGroup parent, int viewType) {\n-      return new VH(parent);\n-    }\n-\n-    @Override public void onBindViewHolder(VH holder, int position) {\n-      holder.bind(warnings.get(position), position != getItemCount() - 1);\n-    }\n-\n-    @Override public int getItemCount() {\n-      return warnings.size();\n-    }\n-  }\n-\n-  static final class VH extends RecyclerView.ViewHolder {\n-\n-    @BindView(R.id.warning) TextView warningView;\n-    @BindView(R.id.divider) View divider;\n-\n-    VH(ViewGroup parent) {\n-      super(LayoutInflater.from(parent.getContext())\n-          .inflate(R.layout.view_holder_warning, parent, false));\n-      ButterKnife.bind(this, itemView);\n-    }\n-\n-    void bind(String warning, boolean showDivider) {\n-      warningView.setText(warning);\n-      divider.setVisibility(showDivider ? View.VISIBLE : View.GONE);\n-    }\n-  }\n-}",
    "output": "Converted TypographyDemoActivity and WarningsDialogFragment to Kotlin"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseUrlDialogFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseUrlDialogFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseUrlDialogFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseUrlDialogFragment.java\n@@ -1,6 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.support.v4.app.DialogFragment;\n-\n-public class ChooseUrlDialogFragment extends DialogFragment {\n-}",
    "output": "Deleted ChooseUrlDialogFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AssetUtils.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AssetUtils.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AssetUtils.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AssetUtils.java\n@@ -1,21 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.content.Context;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-class AssetUtils {\n-\n-  static List<String> getJsonAssets(Context context, String path) throws IOException {\n-    String[] assetList = context.getAssets().list(path);\n-    List<String> files = new ArrayList<>();\n-    for (String asset : assetList) {\n-      if (asset.toLowerCase().endsWith(\".json\")) {\n-        files.add(asset);\n-      }\n-    }\n-    return files;\n-  }\n-}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseAssetDialogFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseAssetDialogFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseAssetDialogFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ChooseAssetDialogFragment.java\n@@ -1,98 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.app.Activity;\n-import android.content.Intent;\n-import android.os.Bundle;\n-import android.support.design.widget.Snackbar;\n-import android.support.v4.app.DialogFragment;\n-import android.support.v7.widget.RecyclerView;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.TextView;\n-\n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class ChooseAssetDialogFragment extends DialogFragment {\n-\n-  static ChooseAssetDialogFragment newInstance() {\n-    return new ChooseAssetDialogFragment();\n-  }\n-\n-  @BindView(R.id.recycler_view) RecyclerView recyclerView;\n-\n-  @Override\n-  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-    View view = inflater.inflate(R.layout.fragment_choose_asset, container, false);\n-    ButterKnife.bind(this, view);\n-    getDialog().setTitle(\"Choose an Asset\");\n-\n-    return view;\n-  }\n-\n-  @Override\n-  public void onStart() {\n-    super.onStart();\n-    getDialog().getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n-    recyclerView.setAdapter(new AssetsAdapter());\n-  }\n-\n-  final class AssetsAdapter extends RecyclerView.Adapter<StringViewHolder> {\n-\n-    private List<String> files = Collections.emptyList();\n-\n-    AssetsAdapter() {\n-      try {\n-        files = AssetUtils.getJsonAssets(getContext(), \"\");\n-      } catch (IOException e) {\n-        //noinspection ConstantConditions\n-        Snackbar.make(getView(), R.string.invalid_assets, Snackbar.LENGTH_LONG).show();\n-      }\n-    }\n-\n-    @Override\n-    public StringViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n-      return new StringViewHolder(parent);\n-    }\n-\n-    @Override\n-    public void onBindViewHolder(StringViewHolder holder, int position) {\n-      String fileName = files.get(position);\n-      holder.bind(fileName);\n-    }\n-\n-    @Override\n-    public int getItemCount() {\n-      return files.size();\n-    }\n-  }\n-\n-  final class StringViewHolder extends RecyclerView.ViewHolder {\n-\n-    @BindView(R.id.title) TextView titleView;\n-\n-    StringViewHolder(ViewGroup parent) {\n-      super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n-      ButterKnife.bind(this, itemView);\n-    }\n-\n-    void bind(final String fileName) {\n-      titleView.setText(fileName);\n-      itemView.setOnClickListener(new View.OnClickListener() {\n-        @Override\n-        public void onClick(View v) {\n-          getTargetFragment().onActivityResult(\n-              getTargetRequestCode(),\n-              Activity.RESULT_OK,\n-              new Intent().putExtra(AnimationFragment.EXTRA_ANIMATION_NAME, fileName));\n-          dismiss();\n-        }\n-      });\n-    }\n-  }\n-}",
    "output": "Converted ChooseAssetDialogFragment to Kotlin"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n@@ -1,133 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import android.support.annotation.Nullable;\n-import android.support.v4.app.Fragment;\n-import android.support.v4.view.ViewPager;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.view.animation.Interpolator;\n-import android.widget.Scroller;\n-\n-import com.airbnb.lottie.LottieAnimationView;\n-import com.matthewtamlin.sliding_intro_screen_library.buttons.IntroButton;\n-import com.matthewtamlin.sliding_intro_screen_library.core.IntroActivity;\n-import com.matthewtamlin.sliding_intro_screen_library.core.LockableViewPager;\n-\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-public class AppIntroActivity extends IntroActivity {\n-  private static final float[] ANIMATION_TIMES = new float[]{\n-      0f,\n-      0.3333f,\n-      0.6666f,\n-      1f,\n-      1f\n-\n-  };\n-  private LottieAnimationView animationView;\n-  private LockableViewPager viewPager;\n-\n-  @Override\n-  protected Collection<? extends Fragment> generatePages(Bundle savedInstanceState) {\n-    return new ArrayList<EmptyFragment>() {{\n-      add(EmptyFragment.newInstance());\n-      add(EmptyFragment.newInstance());\n-      add(EmptyFragment.newInstance());\n-      add(EmptyFragment.newInstance());\n-    }};\n-  }\n-\n-  @Override\n-  protected void onCreate(Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-\n-    animationView = (LottieAnimationView) LayoutInflater.from(this).inflate(R.layout.app_intro_animation_view, getRootView(), false);\n-    viewPager = (LockableViewPager) findViewById(com.matthewtamlin.sliding_intro_screen_library.R.id.intro_activity_viewPager);\n-    getRootView().addView(animationView, 0);\n-    setViewPagerScroller();\n-\n-    addPageChangeListener(new ViewPager.OnPageChangeListener() {\n-      @Override\n-      public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n-        setAnimationProgress(position, positionOffset);\n-      }\n-\n-      @Override\n-      public void onPageSelected(int position) {\n-      }\n-\n-      @Override\n-      public void onPageScrollStateChanged(int state) {\n-      }\n-    });\n-  }\n-\n-  @Override\n-  protected IntroButton.Behaviour generateFinalButtonBehaviour() {\n-    return new IntroButton.Behaviour() {\n-      @Override\n-      public void setActivity(IntroActivity activity) {\n-        finish();\n-      }\n-\n-      @Override\n-      public IntroActivity getActivity() {\n-        return null;\n-      }\n-\n-      @Override\n-      public void run() {\n-      }\n-    };\n-  }\n-\n-  private void setAnimationProgress(int position, float positionOffset) {\n-    float startProgress = ANIMATION_TIMES[position];\n-    float endProgress = ANIMATION_TIMES[position + 1];\n-\n-    animationView.setProgress(lerp(startProgress, endProgress, positionOffset));\n-  }\n-\n-  private float lerp(float startValue, float endValue, float f) {\n-    return startValue + f * (endValue - startValue);\n-  }\n-\n-  public static final class EmptyFragment extends Fragment {\n-\n-    private static EmptyFragment newInstance() {\n-      return new EmptyFragment();\n-    }\n-\n-    @Nullable\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-      return inflater.inflate(R.layout.fragment_empty, container, false);\n-    }\n-  }\n-\n-  private void setViewPagerScroller() {\n-    //noinspection TryWithIdenticalCatches\n-    try {\n-      Field scrollerField = ViewPager.class.getDeclaredField(\"mScroller\");\n-      scrollerField.setAccessible(true);\n-      Field interpolator = ViewPager.class.getDeclaredField(\"sInterpolator\");\n-      interpolator.setAccessible(true);\n-\n-      Scroller scroller = new Scroller(this, (Interpolator) interpolator.get(null)) {\n-        @Override\n-        public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n-          super.startScroll(startX, startY, dx, dy, duration * 7);\n-        }\n-      };\n-      scrollerField.set(viewPager, scroller);\n-    } catch (NoSuchFieldException e) {\n-      // Do nothing.\n-    } catch (IllegalAccessException e) {\n-      // Do nothing.\n-    }\n-  }\n-}",
    "output": "Converted AppIntroActivity to Kotlin"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -1,197 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.content.Intent;\n-import android.net.Uri;\n-import android.os.Bundle;\n-import android.support.annotation.Nullable;\n-import android.support.v4.app.Fragment;\n-import android.support.v7.widget.RecyclerView;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.TextView;\n-\n-import com.airbnb.lottie.LottieAnimationView;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class ListFragment extends Fragment {\n-\n-  static ListFragment newInstance() {\n-    return new ListFragment();\n-  }\n-\n-  private static final String SHORTCUT_VIEWER = \"com.airbnb.lottie.samples.shortcut.VIEWER\";\n-  private static final String SHORTCUT_TYPOGRAPHY = \"com.airbnb.lottie.samples.shortcut.TYPOGRAPHY\";\n-  private static final String SHORTCUT_TUTORIAL = \"com.airbnb.lottie.samples.shortcut.TUTORIAL\";\n-  private static final String SHORTCUT_FULLSCREEN = \"com.airbnb.lottie.samples.shortcut.FULLSCREEN\";\n-\n-  @BindView(R.id.container) ViewGroup container;\n-  @BindView(R.id.recycler_view) RecyclerView recyclerView;\n-  @BindView(R.id.animation_view) LottieAnimationView animationView;\n-\n-  private final FileAdapter adapter = new FileAdapter();\n-\n-  @Override public void onCreate(@Nullable Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-    handleShortcut(getActivity().getIntent().getAction());\n-  }\n-\n-  @Nullable\n-  @Override\n-  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-    View view = inflater.inflate(R.layout.fragment_list, container, false);\n-    ButterKnife.bind(this, view);\n-\n-    recyclerView.setAdapter(adapter);\n-\n-    return view;\n-  }\n-\n-  /**\n-   * Starts the relevant activity/fragment based on which shortcut has been pressed\n-   * @param intentAction specific shortcut action\n-   */\n-  private void handleShortcut(String intentAction) {\n-    switch (intentAction) {\n-      case SHORTCUT_VIEWER:\n-        onViewerClicked();\n-        break;\n-      case SHORTCUT_TYPOGRAPHY:\n-        onTypographyClicked();\n-        break;\n-      case SHORTCUT_TUTORIAL:\n-        onAppIntroPagerClicked();\n-        break;\n-      case SHORTCUT_FULLSCREEN:\n-        onFullScreenClicked();\n-        break;\n-    }\n-  }\n-\n-  @Override\n-  public void onStart() {\n-    super.onStart();\n-    animationView.setProgress(0f);\n-    animationView.playAnimation();\n-  }\n-\n-  @Override\n-  public void onStop() {\n-    super.onStop();\n-    animationView.cancelAnimation();\n-  }\n-\n-  private void onViewerClicked() {\n-    showFragment(AnimationFragment.newInstance());\n-  }\n-\n-  private void onTypographyClicked() {\n-    startActivity(new Intent(getContext(), TypographyDemoActivity.class));\n-  }\n-\n-  private void onAppIntroPagerClicked() {\n-    startActivity(new Intent(getContext(), AppIntroActivity.class));\n-  }\n-\n-  private void onFullScreenClicked() {\n-    startActivity(new Intent(getContext(), FullScreenActivity.class));\n-  }\n-\n-  private void onFontClicked() {\n-    showFragment(FontFragment.newInstance());\n-  }\n-\n-  private void onOpenLottieFilesClicked() {\n-    Intent i = new Intent(Intent.ACTION_VIEW);\n-    i.setData(Uri.parse(\"http://www.lottiefiles.com\"));\n-    startActivity(i);\n-  }\n-\n-  private void showFragment(Fragment fragment) {\n-    getFragmentManager().beginTransaction()\n-        .addToBackStack(null)\n-        .setCustomAnimations(R.anim.slide_in_right, R.anim.hold, R.anim.hold, R.anim.slide_out_right)\n-        .remove(this)\n-        .replace(R.id.content_2, fragment)\n-        .commit();\n-  }\n-\n-  private final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n-    private static final String TAG_VIEWER = \"viewer\";\n-    private static final String TAG_TYPOGRAPHY = \"typography\";\n-    private static final String TAG_APP_INTRO = \"app_intro\";\n-    private static final String TAG_FULL_SCREEN = \"full_screen\";\n-    private static final String TAG_FONT = \"font\";\n-    private static final String TAG_OPEN_LOTTIE_FILES = \"open_lottie_files\";\n-\n-    @Override\n-    public StringViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n-      return new StringViewHolder(parent);\n-    }\n-\n-    @Override\n-    public void onBindViewHolder(StringViewHolder holder, int position) {\n-      switch (position) {\n-        case 0:\n-          holder.bind(\"Animation Viewer\", TAG_VIEWER);\n-          break;\n-        case 1:\n-          holder.bind(\"Animated Typography\", TAG_TYPOGRAPHY);\n-          break;\n-        case 2:\n-          holder.bind(\"Animated App Tutorial\", TAG_APP_INTRO);\n-          break;\n-        case 3:\n-          holder.bind(\"Full screen animation\", TAG_FULL_SCREEN);\n-          break;\n-        case 4:\n-          holder.bind(\"Custom fonts and dynamic text\", TAG_FONT);\n-          break;\n-        case 5:\n-          holder.bind(\"Open lottiefiles.com\", TAG_OPEN_LOTTIE_FILES);\n-          break;\n-      }\n-    }\n-\n-    @Override\n-    public int getItemCount() {\n-      return 6;\n-    }\n-  }\n-\n-  final class StringViewHolder extends RecyclerView.ViewHolder {\n-\n-    @BindView(R.id.title) TextView titleView;\n-\n-    StringViewHolder(ViewGroup parent) {\n-      super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n-      ButterKnife.bind(this, itemView);\n-    }\n-\n-    void bind(String title, String tag) {\n-      titleView.setText(title);\n-      itemView.setTag(tag);\n-\n-      itemView.setOnClickListener(new View.OnClickListener() {\n-        @Override\n-        public void onClick(View v) {\n-          if (FileAdapter.TAG_VIEWER.equals(v.getTag())) {\n-            onViewerClicked();\n-          } else if (FileAdapter.TAG_TYPOGRAPHY.equals(v.getTag())) {\n-            onTypographyClicked();\n-          } else if (FileAdapter.TAG_APP_INTRO.equals(v.getTag())) {\n-            onAppIntroPagerClicked();\n-          } else if (FileAdapter.TAG_FULL_SCREEN.equals(v.getTag())) {\n-            onFullScreenClicked();\n-          } else if (FileAdapter.TAG_FONT.equals(v.getTag())) {\n-            onFontClicked();\n-          } else if (FileAdapter.TAG_OPEN_LOTTIE_FILES.equals(v.getTag())) {\n-            onOpenLottieFilesClicked();\n-          }\n-        }\n-      });\n-    }\n-  }\n-}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/MainActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/MainActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/MainActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/MainActivity.java\n@@ -1,19 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import android.support.v7.app.AppCompatActivity;\n-\n-public class MainActivity extends AppCompatActivity {\n-\n-  @Override\n-  protected void onCreate(Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-    setContentView(R.layout.activity_main);\n-\n-    if (savedInstanceState == null) {\n-      getSupportFragmentManager().beginTransaction()\n-          .replace(R.id.content_1, ListFragment.newInstance())\n-          .commit();\n-    }\n-  }\n-}",
    "output": "Converted MainActivity and ListFragment to Kotlin"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -238,9 +238,9 @@ static Layer newInstance(JSONObject json, LottieComposition composition) {\n         layerType = LayerType.Unknown;\n       }\n \n-      if (layerType == LayerType.Text && !Utils.isAtLeastVersion(composition, 4, 7, 0)) {\n+      if (layerType == LayerType.Text && !Utils.isAtLeastVersion(composition, 4, 8, 0)) {\n         layerType = LayerType.Unknown;\n-        composition.addWarning(\"Text is only supported on bodymovin >= 4.7.0\");\n+        composition.addWarning(\"Text is only supported on bodymovin >= 4.8.0\");\n       }\n \n       long parentId = json.optLong(\"parent\", -1);",
    "output": "Set the minimum version for text to 4.8.0"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -62,6 +62,9 @@ private LottieComposition(Rect bounds, long startFrame, long endFrame, float fra\n     this.majorVersion = major;\n     this.minorVersion = minor;\n     this.patchVersion = patch;\n+    if (!Utils.isAtLeastVersion(this, 4, 5, 0)) {\n+      addWarning(\"Lottie only supports bodymovin >= 4.5.0\");\n+    }\n   }\n \n   void addWarning(String warning) {",
    "output": "Added a warning for bodmovin < 4.5.0\n\nThis is necessary because the closed property on shapes was in a\ndifferent place"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -40,7 +40,6 @@ public class LottieTest {\n     TextDelegate delegate = new TextDelegate();\n     delegate.setText(\"NAME\", \"Gabe\");\n     TestRobot.testLinearAnimation(activity, \"Name.json\", null, delegate);\n-    TestRobot.testLinearAnimation(activity, \"Type.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Beating Heart.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Progress Success.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Touch ID.json\");",
    "output": "Updated hello world animation"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -11,6 +11,7 @@ public class L {\n   private static String[] sections;\n   private static long[] startTimeNs;\n   private static int traceDepth = 0;\n+  private static int depthPastMaxDepth = 0;\n \n   public static void setTraceEnabled(boolean enabled) {\n     if (traceEnabled == enabled) {\n@@ -24,7 +25,11 @@ public static void setTraceEnabled(boolean enabled) {\n   }\n \n   static void beginSection(String section) {\n-    if (!traceEnabled || traceDepth >= MAX_DEPTH) {\n+    if (!traceEnabled) {\n+      return;\n+    }\n+    if (traceDepth == MAX_DEPTH) {\n+      depthPastMaxDepth++;\n       return;\n     }\n     sections[traceDepth] = section;\n@@ -34,6 +39,10 @@ static void beginSection(String section) {\n   }\n \n   static float endSection(String section) {\n+    if (depthPastMaxDepth > 0) {\n+      depthPastMaxDepth--;\n+      return 0;\n+    }\n     if (!traceEnabled) {\n       return 0;\n     }\n@@ -46,6 +55,6 @@ static float endSection(String section) {\n           \". Expected \" + sections[traceDepth] + \".\");\n     }\n     TraceCompat.endSection();\n-    return (System.nanoTime() - startTimeNs[traceDepth + 1]) / 1000000f;\n+    return (System.nanoTime() - startTimeNs[traceDepth]) / 1000000f;\n   }\n }",
    "output": "Fixed an issue when tracing beyond the max trace depth"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n@@ -8,7 +8,6 @@\n import android.support.annotation.Nullable;\n \n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n \n class ContentGroup implements DrawingContent, PathContent,\n@@ -38,32 +37,19 @@ class ContentGroup implements DrawingContent, PathContent,\n       transformAnimation.addListener(this);\n     }\n \n+    List<GreedyContent> greedyContents = new ArrayList<>();\n     for (int i = 0; i < items.size(); i++) {\n       Content content = items.get(i).toContent(lottieDrawable, layer);\n       if (content != null) {\n         contents.add(content);\n+        if (content instanceof GreedyContent) {\n+          greedyContents.add((GreedyContent) content);\n+        }\n       }\n     }\n \n-    List<Content> contentsToRemove = new ArrayList<>();\n-    MergePathsContent currentMergePathsContent = null;\n-    for (int i = contents.size() - 1; i >= 0; i--) {\n-      Content content = contents.get(i);\n-      if (content instanceof MergePathsContent) {\n-        currentMergePathsContent = (MergePathsContent) content;\n-      }\n-      if (currentMergePathsContent != null && content != currentMergePathsContent) {\n-        currentMergePathsContent.addContentIfNeeded(content);\n-        contentsToRemove.add(content);\n-      }\n-    }\n-\n-    Iterator<Content> it = contents.iterator();\n-    while (it.hasNext()) {\n-      Content content = it.next();\n-      if (contentsToRemove.contains(content)) {\n-        it.remove();\n-      }\n+    for (int i = greedyContents.size() - 1; i >= 0; i--) {\n+      greedyContents.get(i).absorbContent(contents.listIterator(contents.size()));\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GreedyContent.java b/lottie/src/main/java/com/airbnb/lottie/GreedyContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GreedyContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GreedyContent.java\n@@ -0,0 +1,19 @@\n+package com.airbnb.lottie;\n+\n+import java.util.ListIterator;\n+\n+/**\n+ * Content that may want to absorb and take ownership of the content around it.\n+ * For example, merge paths will absorb the shapes above it and repeaters will absorb the content\n+ * above it.\n+ */\n+interface GreedyContent {\n+  /**\n+   * An iterator of contents that can be used to take ownership of contents. If ownership is taken,\n+   * the content should be removed from the iterator.\n+   *\n+   * The contents should be iterated by calling hasPrevious() and previous() so that the list of\n+   * contents is traversed from bottom to top which is the correct order for handling AE logic.\n+   */\n+  void absorbContent(ListIterator<Content> contents);\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n@@ -6,9 +6,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.ListIterator;\n \n @TargetApi(Build.VERSION_CODES.KITKAT)\n-class MergePathsContent implements PathContent {\n+class MergePathsContent implements PathContent, GreedyContent {\n   private final Path firstPath = new Path();\n   private final Path remainderPath = new Path();\n   private final Path path = new Path();\n@@ -25,9 +26,16 @@ class MergePathsContent implements PathContent {\n     this.mergePaths = mergePaths;\n   }\n \n-  void addContentIfNeeded(Content content) {\n-    if (content instanceof PathContent) {\n-      pathContents.add((PathContent) content);\n+  @Override public void absorbContent(ListIterator<Content> contents) {\n+    // Fast forward the iterator until after this content.\n+    //noinspection StatementWithEmptyBody\n+    while (contents.hasPrevious() && contents.previous() != this) {}\n+    while (contents.hasPrevious()) {\n+      Content content = contents.previous();\n+      if (content instanceof PathContent) {\n+        pathContents.add((PathContent) content);\n+        contents.remove();\n+      }\n     }\n   }\n ",
    "output": "Created GreedyContents to clean up merge path handling (#362)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -74,6 +74,7 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"Tests/LoopPlayOnce.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Parenting.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Precomps.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/Remap.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/ShapeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/SplitDimensions.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Stroke.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n@@ -14,6 +14,7 @@\n import java.util.List;\n \n class CompositionLayer extends BaseLayer {\n+  @Nullable private final KeyframeAnimation<Float> timeRemapping;\n   private final List<BaseLayer> layers = new ArrayList<>();\n   private final RectF rect = new RectF();\n   private final Rect originalClipRect = new Rect();\n@@ -26,6 +27,15 @@ class CompositionLayer extends BaseLayer {\n       LottieComposition composition) {\n     super(lottieDrawable, layerModel);\n \n+    AnimatableFloatValue timeRemapping = layerModel.getTimeRemapping();\n+    if (timeRemapping != null) {\n+      this.timeRemapping = timeRemapping.createAnimation();\n+      addAnimation(this.timeRemapping);\n+      this.timeRemapping.addUpdateListener(this);\n+    } else {\n+      this.timeRemapping = null;\n+    }\n+\n     LongSparseArray<BaseLayer> layerMap =\n         new LongSparseArray<>(composition.getLayers().size());\n \n@@ -104,6 +114,12 @@ class CompositionLayer extends BaseLayer {\n \n   @Override public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     super.setProgress(progress);\n+    if (timeRemapping != null) {\n+      long duration = lottieDrawable.getComposition().getDuration();\n+      long remappedTime = (long) (timeRemapping.getValue() * 1000);\n+      progress = remappedTime / (float) duration;\n+    }\n+\n     progress -= layerModel.getStartProgress();\n     for (int i = layers.size() - 1; i >= 0; i--) {\n       layers.get(i).setProgress(progress);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -51,16 +51,17 @@ enum MatteType {\n   private final int preCompHeight;\n   @Nullable private final AnimatableTextFrame text;\n   @Nullable private final AnimatableTextProperties textProperties;\n+  @Nullable private final AnimatableFloatValue timeRemapping;\n   private final List<Keyframe<Float>> inOutKeyframes;\n   private final MatteType matteType;\n \n   private Layer(List<Object> shapes, LottieComposition composition, String layerName, long layerId,\n       LayerType layerType, long parentId, @Nullable String refId, List<Mask> masks,\n       AnimatableTransform transform, int solidWidth, int solidHeight, int solidColor,\n       float timeStretch, float startProgress, int preCompWidth, int preCompHeight,\n-      @Nullable AnimatableTextFrame text, AnimatableTextProperties textProperties,\n-      List<Keyframe<Float>> inOutKeyframes,\n-      MatteType matteType) {\n+      @Nullable AnimatableTextFrame text, @Nullable AnimatableTextProperties textProperties,\n+      List<Keyframe<Float>> inOutKeyframes, MatteType matteType,\n+      @Nullable AnimatableFloatValue timeRemapping) {\n     this.shapes = shapes;\n     this.composition = composition;\n     this.layerName = layerName;\n@@ -81,13 +82,14 @@ private Layer(List<Object> shapes, LottieComposition composition, String layerNa\n     this.textProperties = textProperties;\n     this.inOutKeyframes = inOutKeyframes;\n     this.matteType = matteType;\n+    this.timeRemapping = timeRemapping;\n   }\n \n   LottieComposition getComposition() {\n     return composition;\n   }\n \n-  float getTimeStretch() {\n+  @SuppressWarnings(\"unused\") float getTimeStretch() {\n     return timeStretch;\n   }\n \n@@ -163,6 +165,10 @@ int getSolidWidth() {\n     return textProperties;\n   }\n \n+  @Nullable AnimatableFloatValue getTimeRemapping() {\n+    return timeRemapping;\n+  }\n+\n   @Override public String toString() {\n     return toString(\"\");\n   }\n@@ -208,7 +214,7 @@ static Layer newInstance(LottieComposition composition) {\n           Collections.<Mask>emptyList(), AnimatableTransform.Factory.newInstance(),\n           0, 0, 0, 0, 0,\n           bounds.width(), bounds.height(), null, null, Collections.<Keyframe<Float>>emptyList(),\n-          MatteType.None);\n+          MatteType.None, null);\n     }\n \n     static Layer newInstance(JSONObject json, LottieComposition composition) {\n@@ -320,9 +326,16 @@ static Layer newInstance(JSONObject json, LottieComposition composition) {\n         inOutKeyframes.add(outKeyframe);\n       }\n \n+      AnimatableFloatValue timeRemapping = null;\n+      if (json.has(\"tm\")) {\n+        timeRemapping =\n+            AnimatableFloatValue.Factory.newInstance(json.optJSONObject(\"tm\"), composition, false);\n+      }\n+\n       return new Layer(shapes, composition, layerName, layerId, layerType, parentId, refId,\n           masks, transform, solidWidth, solidHeight, solidColor, timeStretch, startProgress,\n-          preCompWidth, preCompHeight, text, textProperties, inOutKeyframes, matteType);\n+          preCompWidth, preCompHeight, text, textProperties, inOutKeyframes, matteType,\n+          timeRemapping);\n     }\n   }\n }",
    "output": "Add support for time remapping (#360)\n\nFixes #330"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -41,7 +41,6 @@ public class LottieTest {\n     delegate.setText(\"NAME\", \"Gabe\");\n     TestRobot.testLinearAnimation(activity, \"Name.json\", null, delegate);\n     TestRobot.testLinearAnimation(activity, \"Type.json\");\n-    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Animated Graph.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Beating Heart.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Progress Success.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Touch ID.json\");",
    "output": "Removed animated graph because it has expressions"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -113,6 +113,10 @@ private static final class TraceSections {\n         addAnimation(animation);\n         animation.addUpdateListener(this);\n       }\n+      for (KeyframeAnimation<Integer> animation : mask.getOpacityAnimations()) {\n+        addAnimation(animation);\n+        animation.addUpdateListener(this);\n+      }\n     }\n     setupInOutAnimations();\n   }\n@@ -316,7 +320,7 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {\n \n   abstract void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha);\n \n-  private void applyMasks(Canvas canvas, Matrix matrix) {\n+  @SuppressLint(\"WrongConstant\") private void applyMasks(Canvas canvas, Matrix matrix) {\n     L.beginSection(traceSections.drawMask);\n     L.beginSection(traceSections.saveLayer);\n     canvas.saveLayer(rect, maskPaint, SAVE_FLAGS);\n@@ -340,6 +344,8 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n         default:\n           path.setFillType(Path.FillType.WINDING);\n       }\n+      KeyframeAnimation<Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);\n+      contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));\n       canvas.drawPath(path, contentPaint);\n     }\n     L.beginSection(traceSections.restoreLayer);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Mask.java b/lottie/src/main/java/com/airbnb/lottie/Mask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Mask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Mask.java\n@@ -12,10 +12,12 @@ enum MaskMode {\n \n   private final MaskMode maskMode;\n   private final AnimatableShapeValue maskPath;\n+  private final AnimatableIntegerValue opacity;\n \n-  private Mask(MaskMode maskMode, AnimatableShapeValue maskPath) {\n+  private Mask(MaskMode maskMode, AnimatableShapeValue maskPath, AnimatableIntegerValue opacity) {\n     this.maskMode = maskMode;\n     this.maskPath = maskPath;\n+    this.opacity = opacity;\n   }\n \n   static class Factory {\n@@ -40,14 +42,10 @@ static Mask newMask(JSONObject json, LottieComposition composition) {\n \n       AnimatableShapeValue maskPath = AnimatableShapeValue.Factory.newInstance(\n           json.optJSONObject(\"pt\"), composition);\n-      // TODO: use this\n-      // JSONObject opacityJson = json.optJSONObject(\"o\");\n-      // if (opacityJson != null) {\n-      //   AnimatableIntegerValue opacity =\n-      //       new AnimatableIntegerValue(opacityJson, composition, false, true);\n-      // }\n-\n-      return new Mask(maskMode, maskPath);\n+      JSONObject opacityJson = json.optJSONObject(\"o\");\n+      AnimatableIntegerValue opacity =\n+          AnimatableIntegerValue.Factory.newInstance(opacityJson, composition);\n+      return new Mask(maskMode, maskPath, opacity);\n     }\n   }\n \n@@ -58,4 +56,8 @@ static Mask newMask(JSONObject json, LottieComposition composition) {\n   AnimatableShapeValue getMaskPath() {\n     return maskPath;\n   }\n+\n+  AnimatableIntegerValue getOpacity() {\n+    return opacity;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java\n@@ -7,13 +7,17 @@\n \n class MaskKeyframeAnimation {\n   private final List<BaseKeyframeAnimation<?, Path>> maskAnimations;\n+  private final List<KeyframeAnimation<Integer>> opacityAnimations;\n   private final List<Mask> masks;\n \n   MaskKeyframeAnimation(List<Mask> masks) {\n     this.masks = masks;\n     this.maskAnimations = new ArrayList<>(masks.size());\n+    this.opacityAnimations = new ArrayList<>(masks.size());\n     for (int i = 0; i < masks.size(); i++) {\n       this.maskAnimations.add(masks.get(i).getMaskPath().createAnimation());\n+      AnimatableIntegerValue opacity = masks.get(i).getOpacity();\n+      opacityAnimations.add(opacity.createAnimation());\n     }\n   }\n \n@@ -24,4 +28,8 @@ List<Mask> getMasks() {\n   List<BaseKeyframeAnimation<?, Path>> getMaskAnimations() {\n     return maskAnimations;\n   }\n+\n+  List<KeyframeAnimation<Integer>> getOpacityAnimations() {\n+    return opacityAnimations;\n+  }\n }",
    "output": "Reenable mask opacity\n\nFixes #359"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -45,14 +45,14 @@ public class LottieComposition {\n   private final Rect bounds;\n   private final long startFrame;\n   private final long endFrame;\n-  private final int frameRate;\n+  private final float frameRate;\n   private final float dpScale;\n   /* Bodymovin version */\n   private final int majorVersion;\n   private final int minorVersion;\n   private final int patchVersion;\n \n-  private LottieComposition(Rect bounds, long startFrame, long endFrame, int frameRate,\n+  private LottieComposition(Rect bounds, long startFrame, long endFrame, float frameRate,\n       float dpScale, int major, int minor, int patch) {\n     this.bounds = bounds;\n     this.startFrame = startFrame;\n@@ -244,7 +244,7 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n \n       long startFrame = json.optLong(\"ip\", 0);\n       long endFrame = json.optLong(\"op\", 0);\n-      int frameRate = json.optInt(\"fr\", 0);\n+      float frameRate = (float) json.optDouble(\"fr\", 0);\n       String version = json.optString(\"v\");\n       String[] versions = version.split(\"[.]\");\n       int major = Integer.parseInt(versions[0]);",
    "output": "Parse framerate as a double to fix animation duration (#358)\n\nFixes #323"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -150,8 +150,8 @@ private static final class TraceSections {\n           path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n         }\n         canvas.drawPath(path, paint);\n+        L.endSection(traceSections.drawPath);\n       }\n-      L.endSection(traceSections.drawPath);\n     }\n     L.endSection(traceSections.draw);\n   }",
    "output": "Fix unbalanced trace endSection call\n\nFixes #357"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -93,8 +93,7 @@ private static final class TraceSections {\n   BaseLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n     this.lottieDrawable = lottieDrawable;\n     this.layerModel = layerModel;\n-    String traceLayerName = layerModel.getName() == null ? \"root\" : layerModel.getName();\n-    traceSections = new TraceSections(traceLayerName);\n+    traceSections = new TraceSections(layerModel.getName());\n     clearPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n     maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n     if (layerModel.getMatteType() == Layer.MatteType.Invert) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -204,7 +204,7 @@ static Layer newInstance(LottieComposition composition) {\n       // TODO: make sure in out keyframes work\n       Rect bounds = composition.getBounds();\n       return new Layer(\n-          Collections.emptyList(), composition, null, -1, LayerType.PreComp, -1, null,\n+          Collections.emptyList(), composition, \"root\", -1, LayerType.PreComp, -1, null,\n           Collections.<Mask>emptyList(), AnimatableTransform.Factory.newInstance(),\n           0, 0, 0, 0, 0,\n           bounds.width(), bounds.height(), null, null, Collections.<Keyframe<Float>>emptyList(),",
    "output": "Default layer name to root"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetManager.java\n@@ -15,14 +15,14 @@\n import java.util.Iterator;\n import java.util.Map;\n \n-class ImageAssetBitmapManager {\n+class ImageAssetManager {\n   private final Context context;\n   private String imagesFolder;\n   @Nullable private ImageAssetDelegate assetDelegate;\n   private final Map<String, LottieImageAsset> imageAssets;\n   private final Map<String, Bitmap> bitmaps = new HashMap<>();\n \n-  ImageAssetBitmapManager(Drawable.Callback callback, String imagesFolder,\n+  ImageAssetManager(Drawable.Callback callback, String imagesFolder,\n       ImageAssetDelegate assetDelegate, Map<String, LottieImageAsset> imageAssets) {\n     this.imagesFolder = imagesFolder;\n     if (!TextUtils.isEmpty(imagesFolder) &&\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -40,7 +40,7 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private float scale = 1f;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n-  @Nullable private ImageAssetBitmapManager imageAssetBitmapManager;\n+  @Nullable private ImageAssetManager imageAssetManager;\n   @Nullable private String imageAssetsFolder;\n   @Nullable private ImageAssetDelegate imageAssetDelegate;\n   private boolean playAnimationWhenCompositionAdded;\n@@ -130,8 +130,8 @@ boolean enableMergePathsForKitKatAndAbove() {\n    *\n    */\n   @SuppressWarnings(\"WeakerAccess\") public void recycleBitmaps() {\n-    if (imageAssetBitmapManager != null) {\n-      imageAssetBitmapManager.recycleBitmaps();\n+    if (imageAssetManager != null) {\n+      imageAssetManager.recycleBitmaps();\n     }\n   }\n \n@@ -181,7 +181,7 @@ private void applyColorFilters() {\n   private void clearComposition() {\n     recycleBitmaps();\n     compositionLayer = null;\n-    imageAssetBitmapManager = null;\n+    imageAssetManager = null;\n     invalidateSelf();\n   }\n \n@@ -386,8 +386,8 @@ public float getProgress() {\n   @SuppressWarnings({\"unused\", \"WeakerAccess\"}) public void setImageAssetDelegate(\n       @SuppressWarnings(\"NullableProblems\") ImageAssetDelegate assetDelegate) {\n     this.imageAssetDelegate = assetDelegate;\n-    if (imageAssetBitmapManager != null) {\n-      imageAssetBitmapManager.setAssetDelegate(assetDelegate);\n+    if (imageAssetManager != null) {\n+      imageAssetManager.setAssetDelegate(assetDelegate);\n     }\n   }\n \n@@ -446,7 +446,7 @@ private void updateBounds() {\n   @Nullable\n   @SuppressWarnings({\"unused\", \"WeakerAccess\"})\n   public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n-    ImageAssetBitmapManager bm = getImageAssetBitmapManager();\n+    ImageAssetManager bm = getImageAssetManager();\n     if (bm == null) {\n       Log.w(L.TAG, \"Cannot update bitmap. Most likely the drawable is not added to a View \" +\n         \"which prevents Lottie from getting a Context.\");\n@@ -459,30 +459,30 @@ public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n \n   @Nullable\n   Bitmap getImageAsset(String id) {\n-    ImageAssetBitmapManager bm = getImageAssetBitmapManager();\n+    ImageAssetManager bm = getImageAssetManager();\n     if (bm != null) {\n       return bm.bitmapForId(id);\n     }\n     return null;\n   }\n \n-  private ImageAssetBitmapManager getImageAssetBitmapManager() {\n+  private ImageAssetManager getImageAssetManager() {\n     if (getCallback() == null) {\n       // We can't get a bitmap since we can't get a Context from the callback.\n       return null;\n     }\n \n-    if (imageAssetBitmapManager != null && !imageAssetBitmapManager.hasSameContext(getContext())) {\n-      imageAssetBitmapManager.recycleBitmaps();\n-      imageAssetBitmapManager = null;\n+    if (imageAssetManager != null && !imageAssetManager.hasSameContext(getContext())) {\n+      imageAssetManager.recycleBitmaps();\n+      imageAssetManager = null;\n     }\n \n-    if (imageAssetBitmapManager == null) {\n-      imageAssetBitmapManager = new ImageAssetBitmapManager(getCallback(),\n+    if (imageAssetManager == null) {\n+      imageAssetManager = new ImageAssetManager(getCallback(),\n           imageAssetsFolder, imageAssetDelegate, composition.getImages());\n     }\n \n-    return imageAssetBitmapManager;\n+    return imageAssetManager;\n   }\n \n   private @Nullable Context getContext() {",
    "output": "Rename ImageAssetBitmapManager to ImageAssetManager"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Font.java b/lottie/src/main/java/com/airbnb/lottie/Font.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Font.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Font.java\n@@ -16,19 +16,19 @@ class Font {\n     this.ascent = ascent;\n   }\n \n-  @SuppressWarnings(\"unused\") public String getFamily() {\n+  @SuppressWarnings(\"unused\") String getFamily() {\n     return family;\n   }\n \n-  public String getName() {\n+  String getName() {\n     return name;\n   }\n \n-  public String getStyle() {\n+  String getStyle() {\n     return style;\n   }\n \n-  @SuppressWarnings(\"unused\") public double getAscent() {\n+  @SuppressWarnings(\"unused\") double getAscent() {\n     return ascent;\n   }\n ",
    "output": "Lower visibility of Font getters"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -35,6 +35,7 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"MotionCorpse-Jrcanest.json\");\n     TestRobot.testLinearAnimation(activity, \"PinJump.json\");\n     TestRobot.testLinearAnimation(activity, \"TwitterHeart.json\");\n+    TestRobot.testLinearAnimation(activity, \"Hello World.json\");\n     TestRobot.testLinearAnimation(activity, \"WeAccept.json\", \"Images/WeAccept\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Animated Graph.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Beating Heart.json\");",
    "output": "Added a test"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n@@ -9,7 +9,7 @@\n class DocumentData {\n \n   String text;\n-  String fontFamily;\n+  @SuppressWarnings(\"WeakerAccess\") String fontName;\n   int size;\n   @SuppressWarnings(\"WeakerAccess\") int justification;\n   int tracking;\n@@ -20,12 +20,11 @@ class DocumentData {\n   boolean strokeOverFill;\n \n \n-  DocumentData(String text, String fontFamily, int size, int justification, int tracking,\n+  DocumentData(String text, String fontName, int size, int justification, int tracking,\n       double lineHeight, @ColorInt int color, @ColorInt int strokeColor, int strokeWidth,\n       boolean strokeOverFill) {\n     this.text = text;\n-    this.fontFamily = fontFamily;\n-    // TODO: figure out what these are.\n+    this.fontName = fontName;\n     this.size = size;\n     this.justification = justification;\n     this.tracking = tracking;\n@@ -38,7 +37,7 @@ class DocumentData {\n \n   void set(DocumentData documentData) {\n     text = documentData.text;\n-    fontFamily = documentData.fontFamily;\n+    fontName = documentData.fontName;\n     size = documentData.size;\n     justification = documentData.justification;\n     tracking = documentData.tracking;\n@@ -54,7 +53,7 @@ private Factory() {\n \n     static DocumentData newInstance(JSONObject json) {\n       String text = json.optString(\"t\");\n-      String fontFamily = json.optString(\"f\");\n+      String fontName = json.optString(\"f\");\n       int size = json.optInt(\"s\");\n       int justification = json.optInt(\"j\");\n       int tracking = json.optInt(\"tr\");\n@@ -78,7 +77,7 @@ static DocumentData newInstance(JSONObject json) {\n       int strokeWidth = json.optInt(\"sw\");\n       boolean strokeOverFill = json.optBoolean(\"of\");\n \n-      return new DocumentData(text, fontFamily, size, justification, tracking, lineHeight, color,\n+      return new DocumentData(text, fontName, size, justification, tracking, lineHeight, color,\n           strokeColor, strokeWidth, strokeOverFill);\n     }\n   }\n@@ -87,7 +86,7 @@ static DocumentData newInstance(JSONObject json) {\n     int result;\n     long temp;\n     result = text.hashCode();\n-    result = 31 * result + fontFamily.hashCode();\n+    result = 31 * result + fontName.hashCode();\n     result = 31 * result + size;\n     result = 31 * result + justification;\n     result = 31 * result + tracking;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Font.java b/lottie/src/main/java/com/airbnb/lottie/Font.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Font.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Font.java\n@@ -0,0 +1,45 @@\n+package com.airbnb.lottie;\n+\n+import org.json.JSONObject;\n+\n+class Font {\n+\n+  private final String family;\n+  private final String name;\n+  private final String style;\n+  private final double ascent;\n+\n+  Font(String family, String name, String style, double ascent) {\n+    this.family = family;\n+    this.name = name;\n+    this.style = style;\n+    this.ascent = ascent;\n+  }\n+\n+  @SuppressWarnings(\"unused\") public String getFamily() {\n+    return family;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getStyle() {\n+    return style;\n+  }\n+\n+  @SuppressWarnings(\"unused\") public double getAscent() {\n+    return ascent;\n+  }\n+\n+  static class Factory {\n+\n+    static Font newInstance(JSONObject json) {\n+      String family = json.optString(\"fFamily\");\n+      String name = json.optString(\"fName\");\n+      String style = json.optString(\"fStyle\");\n+      double ascent = json.optDouble(\"ascent\");\n+      return new Font(family, name, style, ascent);\n+    }\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n@@ -9,10 +9,11 @@\n \n class FontCharacter {\n \n-  static int hashFor(char character, String fontFamily) {\n+  static int hashFor(char character, String fontFamily, String style) {\n     int result = 0;\n     result = 31 * result + (int) character;\n     result = 31 * result + fontFamily.hashCode();\n+    result = 31 * result + style.hashCode();\n     return result;\n   }\n \n@@ -56,10 +57,7 @@ static FontCharacter newInstance(JSONObject json, LottieComposition composition)\n       int size = json.optInt(\"size\");\n       double width = json.optDouble(\"w\");\n       String style = json.optString(\"style\");\n-      // In chars[], fontFamily has spaces but in documentData it doesn't so they hash to different\n-      // things.\n-      // TODO: make bodymovin be consistent\n-      String fontFamily = json.optString(\"fFamily\").replace(\" \", \"\");\n+      String fontFamily = json.optString(\"fFamily\");\n       JSONArray shapesJson = json.optJSONObject(\"data\").optJSONArray(\"shapes\");\n       List<ShapeGroup> shapes = Collections.emptyList();\n       if (shapesJson != null) {\n@@ -74,6 +72,6 @@ static FontCharacter newInstance(JSONObject json, LottieComposition composition)\n   }\n \n   @Override public int hashCode() {\n-    return hashFor(character, fontFamily);\n+    return hashFor(character, fontFamily, style);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -34,6 +34,7 @@ public class LottieComposition {\n \n   private final Map<String, List<Layer>> precomps = new HashMap<>();\n   private final Map<String, LottieImageAsset> images = new HashMap<>();\n+  private final Map<String, Font> fonts = new HashMap<>();\n   private final SparseArrayCompat<FontCharacter> characters = new SparseArrayCompat<>();\n   private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n   private final List<Layer> layers = new ArrayList<>();\n@@ -93,6 +94,10 @@ SparseArrayCompat<FontCharacter> getCharacters() {\n     return characters;\n   }\n \n+  Map<String, Font> getFonts() {\n+    return fonts;\n+  }\n+\n   public boolean hasImages() {\n     return !images.isEmpty();\n   }\n@@ -216,8 +221,9 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n       JSONArray assetsJson = json.optJSONArray(\"assets\");\n       parseImages(assetsJson, composition);\n       parsePrecomps(assetsJson, composition);\n-      parseLayers(json, composition);\n+      parseFonts(json.optJSONObject(\"fonts\"), composition);\n       parseChars(json.optJSONArray(\"chars\"), composition);\n+      parseLayers(json, composition);\n       return composition;\n     }\n \n@@ -287,6 +293,21 @@ private static void parseImages(\n       }\n     }\n \n+    private static void parseFonts(@Nullable JSONObject fonts, LottieComposition composition) {\n+      if (fonts == null) {\n+        return;\n+      }\n+      JSONArray fontsList = fonts.optJSONArray(\"list\");\n+      if (fontsList == null) {\n+        return;\n+      }\n+      int length = fontsList.length();\n+      for (int i = 0; i < length; i++) {\n+        Font font = Font.Factory.newInstance(fontsList.optJSONObject(i));\n+        composition.fonts.put(font.getName(), font);\n+      }\n+    }\n+\n     private static void parseChars(@Nullable JSONArray charsJson, LottieComposition composition) {\n       if (charsJson == null) {\n         return;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -70,6 +70,11 @@ class TextLayer extends BaseLayer {\n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n     DocumentData documentData = textAnimation.getValue();\n+    Font font = composition.getFonts().get(documentData.fontName);\n+    if (font == null) {\n+      // Something is wrong.\n+      return;\n+    }\n     float fontScale = (float) documentData.size / 100f;\n     float parentScale = Utils.getScale(parentMatrix);\n     String text = documentData.text;\n@@ -91,7 +96,8 @@ class TextLayer extends BaseLayer {\n     for (int i = 0; i < text.length(); i++) {\n       char c = text.charAt(i);\n       FontCharacter character =\n-          composition.getCharacters().get(FontCharacter.hashFor(c, documentData.fontFamily));\n+          composition.getCharacters()\n+              .get(FontCharacter.hashFor(c, font.getFamily(), font.getStyle()));\n       if (character == null) {\n         // Something is wrong. Potentially, they didn't export the text as a glyph.\n         continue;\n@@ -113,11 +119,11 @@ class TextLayer extends BaseLayer {\n       }\n       float tx = (float) character.getWidth() * fontScale * composition.getDpScale() * parentScale;\n       // Add tracking\n-      float tracking = documentData.tracking / 25f;\n+      float tracking = documentData.tracking / 10f;\n       if (trackingAnimation != null) {\n-        tracking += trackingAnimation.getValue() / 2.5f;\n+        tracking += trackingAnimation.getValue();\n       }\n-      tx += tracking * composition.getDpScale();\n+      tx += tracking * parentScale;\n       canvas.translate(tx, 0);\n     }\n     canvas.restore();",
    "output": "Access fonts through the actual exported fonts list"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n@@ -30,8 +30,8 @@ static AnimatableTextFrame newInstance(JSONObject json, LottieComposition compos\n   }\n \n   private static class ValueFactory implements AnimatableValue.Factory<DocumentData> {\n-    private static final AnimatableTextFrame.ValueFactory\n-        INSTANCE = new AnimatableTextFrame.ValueFactory();\n+    private static final AnimatableTextFrame.ValueFactory INSTANCE =\n+        new AnimatableTextFrame.ValueFactory();\n \n     private ValueFactory() {\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n@@ -20,7 +20,6 @@ class AnimatableTextProperties {\n     this.tracking = tracking;\n   }\n \n-\n   static final class Factory {\n \n     private Factory() {\n@@ -55,7 +54,6 @@ static AnimatableTextProperties newInstance(JSONObject json, LottieComposition c\n         tracking = AnimatableFloatValue.Factory.newInstance(trackingJson, composition);\n       }\n \n-\n       return new AnimatableTextProperties(color, stroke, strokeWidth, tracking);\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n@@ -11,17 +11,14 @@ class DocumentData {\n   String text;\n   String fontFamily;\n   int size;\n-  int justification;\n+  @SuppressWarnings(\"WeakerAccess\") int justification;\n   int tracking;\n-  double lineHeight;\n+  @SuppressWarnings(\"WeakerAccess\") double lineHeight;\n   @ColorInt int color;\n   @ColorInt int strokeColor;\n   int strokeWidth;\n   boolean strokeOverFill;\n \n-  DocumentData() {\n-  }\n-\n \n   DocumentData(String text, String fontFamily, int size, int justification, int tracking,\n       double lineHeight, @ColorInt int color, @ColorInt int strokeColor, int strokeWidth,\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n@@ -37,10 +37,6 @@ List<ShapeGroup> getShapes() {\n     return shapes;\n   }\n \n-  char getCharacter() {\n-    return character;\n-  }\n-\n   int getSize() {\n     return size;\n   }\n@@ -53,10 +49,6 @@ String getStyle() {\n     return style;\n   }\n \n-  String getFontFamily() {\n-    return fontFamily;\n-  }\n-\n   static class Factory {\n \n     static FontCharacter newInstance(JSONObject json, LottieComposition composition) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/TextKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextKeyframeAnimation.java\n@@ -3,36 +3,11 @@\n import java.util.List;\n \n class TextKeyframeAnimation extends KeyframeAnimation<DocumentData> {\n-  // private DocumentData tempTextFrame = new DocumentData();\n-\n   TextKeyframeAnimation(List<? extends Keyframe<DocumentData>> keyframes) {\n     super(keyframes);\n   }\n \n-  @Override void setProgress(float progress) {\n-    super.setProgress(progress);\n-  }\n-\n   @Override DocumentData getValue(Keyframe<DocumentData> keyframe, float keyframeProgress) {\n     return keyframe.startValue;\n-    // DocumentData startValue = keyframe.startValue;\n-    // DocumentData endValue = keyframe.endValue;\n-    // if (startValue == null) {\n-    //   tempTextFrame.text = \"\";\n-    //   return tempTextFrame;\n-    // }\n-    // if (endValue == null) {\n-    //   tempTextFrame.set(startValue);\n-    //   return tempTextFrame;\n-    // }\n-    // tempTextFrame.text = startValue.text;\n-    // tempTextFrame.fontFamily = startValue.fontFamily;\n-    // tempTextFrame.size = lerp(startValue.size, endValue.size, keyframeProgress);\n-    // tempTextFrame.justification = startValue.justification;\n-    // tempTextFrame.tracking = lerp(startValue.tracking, endValue.tracking, keyframeProgress);\n-    // tempTextFrame.lineHeight = lerp(startValue.lineHeight, endValue.lineHeight, keyframeProgress);\n-    // tempTextFrame.color =\n-    //     GammaEvaluator.evaluate(keyframeProgress, startValue.color, endValue.color);\n-    // return tempTextFrame;\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -22,14 +22,14 @@ class TextLayer extends BaseLayer {\n   private final Paint strokePaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n     setStyle(Style.STROKE);\n   }};\n+  private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n   private final TextKeyframeAnimation textAnimation;\n+  private final LottieDrawable lottieDrawable;\n+  private final LottieComposition composition;\n   @Nullable private KeyframeAnimation<Integer> colorAnimation;\n   @Nullable private KeyframeAnimation<Integer> strokeAnimation;\n   @Nullable private KeyframeAnimation<Float> strokeWidthAnimation;\n   @Nullable private KeyframeAnimation<Float> trackingAnimation;\n-  private final LottieDrawable lottieDrawable;\n-  private final LottieComposition composition;\n-  private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n \n   TextLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n     super(lottieDrawable, layerModel);\n@@ -67,10 +67,6 @@ class TextLayer extends BaseLayer {\n     }\n   }\n \n-  @Override void setProgress(float progress) {\n-    super.setProgress(progress);\n-  }\n-\n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n     DocumentData documentData = textAnimation.getValue();",
    "output": "Cleanup"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java\n@@ -64,7 +64,10 @@ static FontCharacter newInstance(JSONObject json, LottieComposition composition)\n       int size = json.optInt(\"size\");\n       double width = json.optDouble(\"w\");\n       String style = json.optString(\"style\");\n-      String fontFamily = json.optString(\"fFamily\");\n+      // In chars[], fontFamily has spaces but in documentData it doesn't so they hash to different\n+      // things.\n+      // TODO: make bodymovin be consistent\n+      String fontFamily = json.optString(\"fFamily\").replace(\" \", \"\");\n       JSONArray shapesJson = json.optJSONObject(\"data\").optJSONArray(\"shapes\");\n       List<ShapeGroup> shapes = Collections.emptyList();\n       if (shapesJson != null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -81,6 +81,10 @@ private Layer(List<Object> shapes, LottieComposition composition, String layerNa\n     this.textProperties = textProperties;\n     this.inOutKeyframes = inOutKeyframes;\n     this.matteType = matteType;\n+\n+    if (layerType == LayerType.Text && composition.getCharacters().size() == 0) {\n+      composition.addWarning(\"To use text, you must export text as glyphs in Bodymovin.\");\n+    }\n   }\n \n   LottieComposition getComposition() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -96,6 +96,10 @@ class TextLayer extends BaseLayer {\n       char c = text.charAt(i);\n       FontCharacter character =\n           composition.getCharacters().get(FontCharacter.hashFor(c, documentData.fontFamily));\n+      if (character == null) {\n+        // Something is wrong. Potentially, they didn't export the text as a glyph.\n+        continue;\n+      }\n       List<ContentGroup> contentGroups = getContentsForCharacter(character);\n       for (int j = 0; j < contentGroups.size(); j++) {\n         Path path = contentGroups.get(j).getPath();\n@@ -137,10 +141,11 @@ private List<ContentGroup> getContentsForCharacter(FontCharacter character) {\n     if (contentsForCharacter.containsKey(character)) {\n       return contentsForCharacter.get(character);\n     }\n-    int size = character.getShapes().size();\n+    List<ShapeGroup> shapes = character.getShapes();\n+    int size = shapes.size();\n     List<ContentGroup> contents = new ArrayList<>(size);\n     for (int i = 0; i < size; i++) {\n-      ShapeGroup sg = character.getShapes().get(i);\n+      ShapeGroup sg = shapes.get(i);\n       contents.add(new ContentGroup(lottieDrawable, this, sg));\n     }\n     contentsForCharacter.put(character, contents);",
    "output": "Bug fixes"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n@@ -51,7 +51,7 @@ static AnimatableFloatValue newInstance(JSONObject json, LottieComposition compo\n     static AnimatableFloatValue newInstance(JSONObject json, LottieComposition composition,\n         boolean isDp) {\n       float scale = isDp ? composition.getDpScale() : 1f;\n-      if (json.has(\"x\")) {\n+      if (json != null && json.has(\"x\")) {\n         composition.addWarning(\"Lottie doesn't support expressions.\");\n       }\n       AnimatableValueParser.Result<Float> result = AnimatableValueParser\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -1,7 +1,5 @@\n package com.airbnb.lottie;\n \n-import android.util.Log;\n-\n import org.json.JSONObject;\n \n import java.util.List;\n@@ -37,7 +35,7 @@ static AnimatableIntegerValue newInstance() {\n \n     static AnimatableIntegerValue newInstance(\n         JSONObject json, LottieComposition composition) {\n-      if (json.has(\"x\")) {\n+      if (json != null && json.has(\"x\")) {\n         composition.addWarning(\"Lottie doesn't support expressions.\");\n       }\n       AnimatableValueParser.Result<Integer> result = AnimatableValueParser\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n@@ -19,7 +19,7 @@ private Factory() {\n     }\n \n     static AnimatableTextFrame newInstance(JSONObject json, LottieComposition composition) {\n-      if (json.has(\"x\")) {\n+      if (json != null && json.has(\"x\")) {\n         composition.addWarning(\"Lottie doesn't support expressions.\");\n       }\n       AnimatableValueParser.Result<DocumentData> result = AnimatableValueParser\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n@@ -9,12 +9,15 @@ class AnimatableTextProperties {\n   @Nullable final AnimatableColorValue color;\n   @Nullable final AnimatableColorValue stroke;\n   @Nullable final AnimatableFloatValue strokeWidth;\n+  @Nullable final AnimatableFloatValue tracking;\n \n   AnimatableTextProperties(@Nullable AnimatableColorValue color,\n-      @Nullable AnimatableColorValue stroke, @Nullable AnimatableFloatValue strokeWidth) {\n+      @Nullable AnimatableColorValue stroke, @Nullable AnimatableFloatValue strokeWidth,\n+      @Nullable AnimatableFloatValue tracking) {\n     this.color = color;\n     this.stroke = stroke;\n     this.strokeWidth = strokeWidth;\n+    this.tracking = tracking;\n   }\n \n \n@@ -25,22 +28,35 @@ private Factory() {\n \n     static AnimatableTextProperties newInstance(JSONObject json, LottieComposition composition) {\n       if (json == null || !json.has(\"a\")) {\n-        return new AnimatableTextProperties(null, null, null);\n+        return new AnimatableTextProperties(null, null, null, null);\n       }\n       JSONObject animatablePropertiesJson = json.optJSONObject(\"a\");\n       JSONObject colorJson = animatablePropertiesJson.optJSONObject(\"fc\");\n-      AnimatableColorValue color = AnimatableColorValue.Factory.newInstance(colorJson, composition);\n+      AnimatableColorValue color = null;\n+      if (colorJson != null) {\n+        color = AnimatableColorValue.Factory.newInstance(colorJson, composition);\n+      }\n \n       JSONObject strokeJson = animatablePropertiesJson.optJSONObject(\"sc\");\n-      AnimatableColorValue stroke =\n-          AnimatableColorValue.Factory.newInstance(strokeJson, composition);\n+      AnimatableColorValue stroke = null;\n+      if (strokeJson != null) {\n+        stroke = AnimatableColorValue.Factory.newInstance(strokeJson, composition);\n+      }\n \n       JSONObject strokeWidthJson = animatablePropertiesJson.optJSONObject(\"sw\");\n-      AnimatableFloatValue strokeWidth =\n-          AnimatableFloatValue.Factory.newInstance(strokeWidthJson, composition);\n+      AnimatableFloatValue strokeWidth = null;\n+      if (strokeWidthJson != null) {\n+        strokeWidth = AnimatableFloatValue.Factory.newInstance(strokeWidthJson, composition);\n+      }\n+\n+      JSONObject trackingJson = animatablePropertiesJson.optJSONObject(\"t\");\n+      AnimatableFloatValue tracking = null;\n+      if (trackingJson != null) {\n+        tracking = AnimatableFloatValue.Factory.newInstance(trackingJson, composition);\n+      }\n \n \n-      return new AnimatableTextProperties(color, stroke, strokeWidth);\n+      return new AnimatableTextProperties(color, stroke, strokeWidth, tracking);\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -26,6 +26,7 @@ class TextLayer extends BaseLayer {\n   @Nullable private KeyframeAnimation<Integer> colorAnimation;\n   @Nullable private KeyframeAnimation<Integer> strokeAnimation;\n   @Nullable private KeyframeAnimation<Float> strokeWidthAnimation;\n+  @Nullable private KeyframeAnimation<Float> trackingAnimation;\n   private final LottieDrawable lottieDrawable;\n   private final LottieComposition composition;\n   private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n@@ -58,6 +59,12 @@ class TextLayer extends BaseLayer {\n       strokeWidthAnimation.addUpdateListener(this);\n       addAnimation(strokeWidthAnimation);\n     }\n+\n+    if (textProperties != null && textProperties.tracking != null) {\n+      trackingAnimation = textProperties.tracking.createAnimation();\n+      trackingAnimation.addUpdateListener(this);\n+      addAnimation(trackingAnimation);\n+    }\n   }\n \n   @Override void setProgress(float progress) {\n@@ -105,6 +112,12 @@ class TextLayer extends BaseLayer {\n         }\n       }\n       float tx = (float) character.getWidth() * fontScale * composition.getDpScale() * parentScale;\n+      // Add tracking\n+      float tracking = documentData.tracking / 25f;\n+      if (trackingAnimation != null) {\n+        tracking += trackingAnimation.getValue() / 2.5f;\n+      }\n+      tx += tracking * composition.getDpScale();\n       canvas.translate(tx, 0);\n     }\n     canvas.restore();",
    "output": "Added support for animatable tracking"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n@@ -1,13 +1,20 @@\n package com.airbnb.lottie;\n \n+import android.support.annotation.Nullable;\n+\n import org.json.JSONObject;\n \n class AnimatableTextProperties {\n \n-  final AnimatableColorValue color;\n+  @Nullable final AnimatableColorValue color;\n+  @Nullable final AnimatableColorValue stroke;\n+  @Nullable final AnimatableFloatValue strokeWidth;\n \n-  AnimatableTextProperties(AnimatableColorValue color) {\n+  AnimatableTextProperties(@Nullable AnimatableColorValue color,\n+      @Nullable AnimatableColorValue stroke, @Nullable AnimatableFloatValue strokeWidth) {\n     this.color = color;\n+    this.stroke = stroke;\n+    this.strokeWidth = strokeWidth;\n   }\n \n \n@@ -17,11 +24,23 @@ private Factory() {\n     }\n \n     static AnimatableTextProperties newInstance(JSONObject json, LottieComposition composition) {\n-\n-      JSONObject colorJson = json.optJSONObject(\"a\").optJSONObject(\"fc\");\n+      if (json == null || !json.has(\"a\")) {\n+        return new AnimatableTextProperties(null, null, null);\n+      }\n+      JSONObject animatablePropertiesJson = json.optJSONObject(\"a\");\n+      JSONObject colorJson = animatablePropertiesJson.optJSONObject(\"fc\");\n       AnimatableColorValue color = AnimatableColorValue.Factory.newInstance(colorJson, composition);\n \n-      return new AnimatableTextProperties(color);\n+      JSONObject strokeJson = animatablePropertiesJson.optJSONObject(\"sc\");\n+      AnimatableColorValue stroke =\n+          AnimatableColorValue.Factory.newInstance(strokeJson, composition);\n+\n+      JSONObject strokeWidthJson = animatablePropertiesJson.optJSONObject(\"sw\");\n+      AnimatableFloatValue strokeWidth =\n+          AnimatableFloatValue.Factory.newInstance(strokeWidthJson, composition);\n+\n+\n+      return new AnimatableTextProperties(color, stroke, strokeWidth);\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/DocumentData.java b/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/DocumentData.java\n@@ -15,13 +15,17 @@ class DocumentData {\n   int tracking;\n   double lineHeight;\n   @ColorInt int color;\n+  @ColorInt int strokeColor;\n+  int strokeWidth;\n+  boolean strokeOverFill;\n \n   DocumentData() {\n   }\n \n \n   DocumentData(String text, String fontFamily, int size, int justification, int tracking,\n-      double lineHeight, @ColorInt int color) {\n+      double lineHeight, @ColorInt int color, @ColorInt int strokeColor, int strokeWidth,\n+      boolean strokeOverFill) {\n     this.text = text;\n     this.fontFamily = fontFamily;\n     // TODO: figure out what these are.\n@@ -30,6 +34,9 @@ class DocumentData {\n     this.tracking = tracking;\n     this.lineHeight = lineHeight;\n     this.color = color;\n+    this.strokeColor = strokeColor;\n+    this.strokeWidth = strokeWidth;\n+    this.strokeOverFill = strokeOverFill;\n   }\n \n   void set(DocumentData documentData) {\n@@ -61,8 +68,21 @@ static DocumentData newInstance(JSONObject json) {\n           (int) (colorArray.optDouble(0) * 255),\n           (int) (colorArray.optDouble(1) * 255),\n           (int) (colorArray.optDouble(2) * 255));\n+      JSONArray strokeArray = json.optJSONArray(\"sc\");\n+      int strokeColor = 0;\n+      if (strokeArray != null) {\n+        strokeColor = Color.argb(\n+            255,\n+            (int) (strokeArray.optDouble(0) * 255),\n+            (int) (strokeArray.optDouble(1) * 255),\n+            (int) (strokeArray.optDouble(2) * 255));\n+      }\n \n-      return new DocumentData(text, fontFamily, size, justification, tracking, lineHeight, color);\n+      int strokeWidth = json.optInt(\"sw\");\n+      boolean strokeOverFill = json.optBoolean(\"of\");\n+\n+      return new DocumentData(text, fontFamily, size, justification, tracking, lineHeight, color,\n+          strokeColor, strokeWidth, strokeOverFill);\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -1,10 +1,12 @@\n package com.airbnb.lottie;\n \n import android.graphics.Canvas;\n+import android.graphics.Color;\n import android.graphics.Matrix;\n import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.RectF;\n+import android.support.annotation.Nullable;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -14,11 +16,16 @@\n class TextLayer extends BaseLayer {\n   private final RectF rectF = new RectF();\n   private final Matrix matrix = new Matrix();\n-  private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n+  private final Paint fillPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n     setStyle(Style.FILL);\n   }};\n+  private final Paint strokePaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n+    setStyle(Style.STROKE);\n+  }};\n   private final TextKeyframeAnimation textAnimation;\n-  private final KeyframeAnimation<Integer> colorAnimation;\n+  @Nullable private KeyframeAnimation<Integer> colorAnimation;\n+  @Nullable private KeyframeAnimation<Integer> strokeAnimation;\n+  @Nullable private KeyframeAnimation<Float> strokeWidthAnimation;\n   private final LottieDrawable lottieDrawable;\n   private final LottieComposition composition;\n   private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n@@ -32,10 +39,25 @@ class TextLayer extends BaseLayer {\n     textAnimation.addUpdateListener(this);\n     addAnimation(textAnimation);\n \n-    //noinspection ConstantConditions\n-    colorAnimation = layerModel.getTextProperties().color.createAnimation();\n-    colorAnimation.addUpdateListener(this);\n-    addAnimation(colorAnimation);\n+    AnimatableTextProperties textProperties = layerModel.getTextProperties();\n+    if (textProperties != null && textProperties.color != null) {\n+      colorAnimation = textProperties.color.createAnimation();\n+      colorAnimation.addUpdateListener(this);\n+      addAnimation(colorAnimation);\n+    }\n+\n+\n+    if (textProperties != null && textProperties.stroke != null) {\n+      strokeAnimation = textProperties.stroke.createAnimation();\n+      strokeAnimation.addUpdateListener(this);\n+      addAnimation(strokeAnimation);\n+    }\n+\n+    if (textProperties != null && textProperties.strokeWidth != null) {\n+      strokeWidthAnimation = textProperties.strokeWidth.createAnimation();\n+      strokeWidthAnimation.addUpdateListener(this);\n+      addAnimation(strokeWidthAnimation);\n+    }\n   }\n \n   @Override void setProgress(float progress) {\n@@ -44,12 +66,25 @@ class TextLayer extends BaseLayer {\n \n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     canvas.save();\n-    // canvas.concat(parentMatrix);\n     DocumentData documentData = textAnimation.getValue();\n     float fontScale = (float) documentData.size / 100f;\n+    float parentScale = Utils.getScale(parentMatrix);\n     String text = documentData.text;\n-    // TODO: pull the right color.\n-    paint.setColor(colorAnimation.getValue());\n+    if (colorAnimation != null) {\n+      fillPaint.setColor(colorAnimation.getValue());\n+    } else {\n+      fillPaint.setColor(documentData.color);\n+    }\n+    if (strokeAnimation != null) {\n+      strokePaint.setColor(strokeAnimation.getValue());\n+    } else {\n+      strokePaint.setColor(documentData.strokeColor);\n+    }\n+    if (strokeWidthAnimation != null) {\n+      strokePaint.setStrokeWidth(strokeWidthAnimation.getValue());\n+    } else {\n+      strokePaint.setStrokeWidth(documentData.strokeWidth * composition.getDpScale() * parentScale);\n+    }\n     for (int i = 0; i < text.length(); i++) {\n       char c = text.charAt(i);\n       FontCharacter character =\n@@ -61,15 +96,30 @@ class TextLayer extends BaseLayer {\n         matrix.set(parentMatrix);\n         matrix.preScale(fontScale, fontScale);\n         path.transform(matrix);\n-        canvas.drawPath(path, paint);\n+        if (documentData.strokeOverFill) {\n+          drawCharacter(canvas, path, fillPaint);\n+          drawCharacter(canvas, path, strokePaint);\n+        } else {\n+          drawCharacter(canvas, path, strokePaint);\n+          drawCharacter(canvas, path, fillPaint);\n+        }\n       }\n-      float parentScale = Utils.getScale(parentMatrix);\n       float tx = (float) character.getWidth() * fontScale * composition.getDpScale() * parentScale;\n       canvas.translate(tx, 0);\n     }\n     canvas.restore();\n   }\n \n+  private void drawCharacter(Canvas canvas, Path path, Paint paint) {\n+    if (paint.getColor() == Color.TRANSPARENT) {\n+      return;\n+    }\n+    if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0) {\n+      return;\n+    }\n+    canvas.drawPath(path, paint);\n+  }\n+\n   private List<ContentGroup> getContentsForCharacter(FontCharacter character) {\n     if (contentsForCharacter.containsKey(character)) {\n       return contentsForCharacter.get(character);",
    "output": "Added support for static font colors"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -47,8 +47,6 @@ class TextLayer extends BaseLayer {\n     // canvas.concat(parentMatrix);\n     DocumentData documentData = textAnimation.getValue();\n     float fontScale = (float) documentData.size / 100f;\n-    float parentScale = Utils.getScale(parentMatrix);\n-    canvas.translate(0, getLineHeight(documentData) * parentScale);\n     String text = documentData.text;\n     // TODO: pull the right color.\n     paint.setColor(colorAnimation.getValue());\n@@ -60,27 +58,18 @@ class TextLayer extends BaseLayer {\n       for (int j = 0; j < contentGroups.size(); j++) {\n         Path path = contentGroups.get(j).getPath();\n         path.computeBounds(rectF, false);\n-        // matrix.set(parentMatrix);\n-        matrix.reset();\n+        matrix.set(parentMatrix);\n         matrix.preScale(fontScale, fontScale);\n         path.transform(matrix);\n         canvas.drawPath(path, paint);\n       }\n-      float tx = (float) character.getWidth() * fontScale * composition.getDpScale();\n+      float parentScale = Utils.getScale(parentMatrix);\n+      float tx = (float) character.getWidth() * fontScale * composition.getDpScale() * parentScale;\n       canvas.translate(tx, 0);\n     }\n     canvas.restore();\n   }\n \n-  private float getLineHeight(DocumentData documentData) {\n-    if (documentData.lineHeight > 0) {\n-      return (float) (documentData.lineHeight * composition.getDpScale());\n-    }\n-    // Older versions of AE don't support line height so we arbitrarily make it size * 1.2. This\n-    // really shouldn't ever be needed though.\n-    return (float) (documentData.size * 1.2 * composition.getDpScale());\n-  }\n-\n   private List<ContentGroup> getContentsForCharacter(FontCharacter character) {\n     if (contentsForCharacter.containsKey(character)) {\n       return contentsForCharacter.get(character);",
    "output": "Properly space letters when scaling"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java\n@@ -18,8 +18,7 @@ static final class Factory {\n     private Factory() {\n     }\n \n-    static AnimatableTextFrame newInstance(\n-        JSONObject json, LottieComposition composition) {\n+    static AnimatableTextFrame newInstance(JSONObject json, LottieComposition composition) {\n       if (json.has(\"x\")) {\n         composition.addWarning(\"Lottie doesn't support expressions.\");\n       }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java\n@@ -0,0 +1,27 @@\n+package com.airbnb.lottie;\n+\n+import org.json.JSONObject;\n+\n+class AnimatableTextProperties {\n+\n+  final AnimatableColorValue color;\n+\n+  AnimatableTextProperties(AnimatableColorValue color) {\n+    this.color = color;\n+  }\n+\n+\n+  static final class Factory {\n+\n+    private Factory() {\n+    }\n+\n+    static AnimatableTextProperties newInstance(JSONObject json, LottieComposition composition) {\n+\n+      JSONObject colorJson = json.optJSONObject(\"a\").optJSONObject(\"fc\");\n+      AnimatableColorValue color = AnimatableColorValue.Factory.newInstance(colorJson, composition);\n+\n+      return new AnimatableTextProperties(color);\n+    }\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -50,14 +50,16 @@ enum MatteType {\n   private final int preCompWidth;\n   private final int preCompHeight;\n   @Nullable private final AnimatableTextFrame text;\n+  @Nullable private final AnimatableTextProperties textProperties;\n   private final List<Keyframe<Float>> inOutKeyframes;\n   private final MatteType matteType;\n \n   private Layer(List<Object> shapes, LottieComposition composition, String layerName, long layerId,\n       LayerType layerType, long parentId, @Nullable String refId, List<Mask> masks,\n       AnimatableTransform transform, int solidWidth, int solidHeight, int solidColor,\n       float timeStretch, float startProgress, int preCompWidth, int preCompHeight,\n-      @Nullable AnimatableTextFrame text, List<Keyframe<Float>> inOutKeyframes,\n+      @Nullable AnimatableTextFrame text, AnimatableTextProperties textProperties,\n+      List<Keyframe<Float>> inOutKeyframes,\n       MatteType matteType) {\n     this.shapes = shapes;\n     this.composition = composition;\n@@ -76,6 +78,7 @@ private Layer(List<Object> shapes, LottieComposition composition, String layerNa\n     this.preCompWidth = preCompWidth;\n     this.preCompHeight = preCompHeight;\n     this.text = text;\n+    this.textProperties = textProperties;\n     this.inOutKeyframes = inOutKeyframes;\n     this.matteType = matteType;\n   }\n@@ -152,11 +155,14 @@ int getSolidWidth() {\n     return solidWidth;\n   }\n \n-  @Nullable\n-  AnimatableTextFrame getText() {\n+  @Nullable AnimatableTextFrame getText() {\n     return text;\n   }\n \n+  @Nullable AnimatableTextProperties getTextProperties() {\n+    return textProperties;\n+  }\n+\n   @Override public String toString() {\n     return toString(\"\");\n   }\n@@ -201,8 +207,8 @@ static Layer newInstance(LottieComposition composition) {\n           Collections.emptyList(), composition, null, -1, LayerType.PreComp, -1, null,\n           Collections.<Mask>emptyList(), AnimatableTransform.Factory.newInstance(),\n           0, 0, 0, 0, 0,\n-          bounds.width(), bounds.height(), null, Collections.<Keyframe<Float>>emptyList(), MatteType\n-          .None);\n+          bounds.width(), bounds.height(), null, null, Collections.<Keyframe<Float>>emptyList(),\n+          MatteType.None);\n     }\n \n     static Layer newInstance(JSONObject json, LottieComposition composition) {\n@@ -264,9 +270,12 @@ static Layer newInstance(JSONObject json, LottieComposition composition) {\n       }\n \n       AnimatableTextFrame text = null;\n+      AnimatableTextProperties textProperties = null;\n       JSONObject textJson = json.optJSONObject(\"t\");\n       if (textJson != null) {\n         text = AnimatableTextFrame.Factory.newInstance(textJson.optJSONObject(\"d\"), composition);\n+        JSONObject propertiesJson = textJson.optJSONArray(\"a\").optJSONObject(0);\n+        textProperties = AnimatableTextProperties.Factory.newInstance(propertiesJson, composition);\n       }\n \n       if (json.has(\"ef\")) {\n@@ -308,7 +317,7 @@ static Layer newInstance(JSONObject json, LottieComposition composition) {\n \n       return new Layer(shapes, composition, layerName, layerId, layerType, parentId, refId,\n           masks, transform, solidWidth, solidHeight, solidColor, timeStretch, startProgress,\n-          preCompWidth, preCompHeight, text, inOutKeyframes, matteType);\n+          preCompWidth, preCompHeight, text, textProperties, inOutKeyframes, matteType);\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -6,6 +6,7 @@\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n+import android.support.v4.util.SparseArrayCompat;\n import android.util.Log;\n \n import org.json.JSONArray;\n@@ -33,7 +34,7 @@ public class LottieComposition {\n \n   private final Map<String, List<Layer>> precomps = new HashMap<>();\n   private final Map<String, LottieImageAsset> images = new HashMap<>();\n-  private final Map<Integer, FontCharacter> characters = new HashMap<>();\n+  private final SparseArrayCompat<FontCharacter> characters = new SparseArrayCompat<>();\n   private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n   private final List<Layer> layers = new ArrayList<>();\n   // This is stored as a set to avoid duplicates.\n@@ -88,7 +89,7 @@ List<Layer> getPrecomps(String id) {\n     return precomps.get(id);\n   }\n \n-  Map<Integer, FontCharacter> getCharacters() {\n+  SparseArrayCompat<FontCharacter> getCharacters() {\n     return characters;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java\n@@ -5,7 +5,6 @@\n import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.RectF;\n-import android.util.Log;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -19,6 +18,7 @@ class TextLayer extends BaseLayer {\n     setStyle(Style.FILL);\n   }};\n   private final TextKeyframeAnimation textAnimation;\n+  private final KeyframeAnimation<Integer> colorAnimation;\n   private final LottieDrawable lottieDrawable;\n   private final LottieComposition composition;\n   private final Map<FontCharacter, List<ContentGroup>> contentsForCharacter = new HashMap<>();\n@@ -31,6 +31,11 @@ class TextLayer extends BaseLayer {\n     textAnimation = layerModel.getText().createAnimation();\n     textAnimation.addUpdateListener(this);\n     addAnimation(textAnimation);\n+\n+    //noinspection ConstantConditions\n+    colorAnimation = layerModel.getTextProperties().color.createAnimation();\n+    colorAnimation.addUpdateListener(this);\n+    addAnimation(colorAnimation);\n   }\n \n   @Override void setProgress(float progress) {\n@@ -46,7 +51,7 @@ class TextLayer extends BaseLayer {\n     canvas.translate(0, getLineHeight(documentData) * parentScale);\n     String text = documentData.text;\n     // TODO: pull the right color.\n-    // paint.setColor(documentData.color);\n+    paint.setColor(colorAnimation.getValue());\n     for (int i = 0; i < text.length(); i++) {\n       char c = text.charAt(i);\n       FontCharacter character =\n@@ -55,7 +60,6 @@ class TextLayer extends BaseLayer {\n       for (int j = 0; j < contentGroups.size(); j++) {\n         Path path = contentGroups.get(j).getPath();\n         path.computeBounds(rectF, false);\n-        Log.d(\"Gabe\", \"TextLayer#drawLayer\\t\" + c + \" -> \" + rectF);\n         // matrix.set(parentMatrix);\n         matrix.reset();\n         matrix.preScale(fontScale, fontScale);",
    "output": "Color works"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java\n@@ -18,6 +18,7 @@ interface AnimationListener {\n   // This is not a Set because we don't want to create an iterator object on every setProgress.\n   final List<AnimationListener> listeners = new ArrayList<>();\n   private boolean isDiscrete = false;\n+  @Nullable private A previousValue;\n \n   private final List<? extends Keyframe<K>> keyframes;\n   private float progress = 0f;\n@@ -48,8 +49,12 @@ void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n     this.progress = progress;\n \n-    for (int i = 0; i < listeners.size(); i++) {\n-      listeners.get(i).onValueChanged();\n+    A value = getValue();\n+    if (previousValue == null || !previousValue.equals(value)) {\n+      previousValue = value;\n+      for (int i = 0; i < listeners.size(); i++) {\n+        listeners.get(i).onValueChanged();\n+      }\n     }\n   }\n ",
    "output": "Only update an animation when the animation value actually changes"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -22,12 +22,22 @@ static ListFragment newInstance() {\n     return new ListFragment();\n   }\n \n+  private static final String SHORTCUT_VIEWER = \"com.airbnb.lottie.samples.shortcut.VIEWER\";\n+  private static final String SHORTCUT_TYPOGRAPHY = \"com.airbnb.lottie.samples.shortcut.TYPOGRAPHY\";\n+  private static final String SHORTCUT_TUTORIAL = \"com.airbnb.lottie.samples.shortcut.TUTORIAL\";\n+  private static final String SHORTCUT_FULLSCREEN = \"com.airbnb.lottie.samples.shortcut.FULLSCREEN\";\n+\n   @BindView(R.id.container) ViewGroup container;\n   @BindView(R.id.recycler_view) RecyclerView recyclerView;\n   @BindView(R.id.animation_view) LottieAnimationView animationView;\n \n   private final FileAdapter adapter = new FileAdapter();\n \n+  @Override public void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    handleShortcut(getActivity().getIntent().getAction());\n+  }\n+\n   @Nullable\n   @Override\n   public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n@@ -39,6 +49,27 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n     return view;\n   }\n \n+  /**\n+   * Starts the relevant activity/fragment based on which shortcut has been pressed\n+   * @param intentAction specific shortcut action\n+   */\n+  private void handleShortcut(String intentAction) {\n+    switch (intentAction) {\n+      case SHORTCUT_VIEWER:\n+        onViewerClicked();\n+        break;\n+      case SHORTCUT_TYPOGRAPHY:\n+        onTypographyClicked();\n+        break;\n+      case SHORTCUT_TUTORIAL:\n+        onAppIntroPagerClicked();\n+        break;\n+      case SHORTCUT_FULLSCREEN:\n+        onFullScreenClicked();\n+        break;\n+    }\n+  }\n+\n   @Override\n   public void onStart() {\n     super.onStart();",
    "output": "Static Shortcuts for list fragment options"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java b/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java\n@@ -10,8 +10,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import static junit.framework.Assert.assertNotNull;\n-\n /**\n  * Can be used for debugging. When needed, you can acquire and\n  * draw to this bitmap layer when rendering to an offscreen\n@@ -39,19 +37,15 @@ BitmapCanvas acquire(int width, int height, Bitmap.Config config) {\n     } else {\n       Bitmap bitmap = bitmaps.remove(0);\n       canvas = bitmapCanvasMap.get(bitmap);\n-      assertNotNull(canvas);\n     }\n     canvas.getBitmap().eraseColor(Color.TRANSPARENT);\n     return canvas;\n   }\n \n   void release(BitmapCanvas canvas) {\n-    assertNotNull(canvas);\n     Bitmap bitmap = canvasBitmapMap.get(canvas);\n-    assertNotNull(bitmap);\n     int key = getKey(bitmap);\n     List<Bitmap> bitmaps = availableBitmaps.get(key);\n-    assertNotNull(bitmaps);\n     if (bitmaps.contains(bitmap)) {\n       throw new IllegalStateException(\"Canvas already released.\");\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -15,8 +15,6 @@\n import java.util.Iterator;\n import java.util.Map;\n \n-import static junit.framework.Assert.assertNotNull;\n-\n class ImageAssetBitmapManager {\n   private final Context context;\n   private String imagesFolder;\n@@ -26,8 +24,6 @@ class ImageAssetBitmapManager {\n \n   ImageAssetBitmapManager(Drawable.Callback callback, String imagesFolder,\n       ImageAssetDelegate assetDelegate, Map<String, LottieImageAsset> imageAssets) {\n-    assertNotNull(callback);\n-\n     this.imagesFolder = imagesFolder;\n     if (!TextUtils.isEmpty(imagesFolder) &&\n         this.imagesFolder.charAt(this.imagesFolder.length() - 1) != '/') {",
    "output": "Remove junit asserts"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -92,6 +92,9 @@ static void applyTrimPathIfNeeded(\n     pathMeasure.setPath(path, false);\n \n     float length = pathMeasure.getLength();\n+    if (startValue == 1f && endValue == 0f) {\n+      return;\n+    }\n     if (length == 0f || Math.abs(endValue - startValue - 1) < .01) {\n       return;\n     }",
    "output": "Fix a trim path bug\n\nFixes #324"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n@@ -166,9 +166,15 @@ private int getGradientHash() {\n     int endPointProgress = Math.round(endPointAnimation.getProgress() * cacheSteps);\n     int colorProgress = Math.round(colorAnimation.getProgress() * cacheSteps);\n     int hash = 17;\n-    hash = hash * 31 * startPointProgress;\n-    hash = hash * 31 * endPointProgress;\n-    hash = hash * 31 * colorProgress;\n+    if (startPointProgress != 0) {\n+      hash = hash * 31 * startPointProgress;\n+    }\n+    if (endPointProgress != 0) {\n+      hash = hash * 31 * endPointProgress;\n+    }\n+    if (colorProgress != 0) {\n+      hash = hash * 31 * colorProgress;\n+    }\n     return hash;\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GradientStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/GradientStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientStrokeContent.java\n@@ -117,9 +117,15 @@ private int getGradientHash() {\n     int endPointProgress = Math.round(endPointAnimation.getProgress() * cacheSteps);\n     int colorProgress = Math.round(colorAnimation.getProgress() * cacheSteps);\n     int hash = 17;\n-    hash = hash * 31 * startPointProgress;\n-    hash = hash * 31 * endPointProgress;\n-    hash = hash * 31 * colorProgress;\n+    if (startPointProgress != 0) {\n+      hash = hash * 31 * startPointProgress;\n+    }\n+    if (endPointProgress != 0) {\n+      hash = hash * 31 * endPointProgress;\n+    }\n+    if (colorProgress != 0) {\n+      hash = hash * 31 * colorProgress;\n+    }\n     return hash;\n   }\n }",
    "output": "Prevent multiplying the gradient hash by 0"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n@@ -1,5 +1,7 @@\n package com.airbnb.lottie;\n \n+import android.util.Log;\n+\n import org.json.JSONObject;\n \n import java.util.List;\n@@ -51,6 +53,9 @@ static AnimatableFloatValue newInstance(JSONObject json, LottieComposition compo\n     static AnimatableFloatValue newInstance(JSONObject json, LottieComposition composition,\n         boolean isDp) {\n       float scale = isDp ? composition.getDpScale() : 1f;\n+      if (json.has(\"x\")) {\n+        Log.w(L.TAG, \"Animation has expressions which are not supported.\");\n+      }\n       AnimatableValueParser.Result<Float> result = AnimatableValueParser\n           .newInstance(json, scale, composition, ValueFactory.INSTANCE)\n           .parseJson();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -1,5 +1,7 @@\n package com.airbnb.lottie;\n \n+import android.util.Log;\n+\n import org.json.JSONObject;\n \n import java.util.List;\n@@ -35,6 +37,9 @@ static AnimatableIntegerValue newInstance() {\n \n     static AnimatableIntegerValue newInstance(\n         JSONObject json, LottieComposition composition) {\n+      if (json.has(\"x\")) {\n+        Log.w(L.TAG, \"Animation has expressions which are not supported.\");\n+      }\n       AnimatableValueParser.Result<Integer> result = AnimatableValueParser\n           .newInstance(json, 1, composition, ValueFactory.INSTANCE)\n           .parseJson();",
    "output": "Warn when there are expressions in the composition"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -23,6 +23,7 @@\n import android.support.v7.app.AppCompatActivity;\n import android.support.v7.widget.AppCompatSeekBar;\n import android.support.v7.widget.Toolbar;\n+import android.text.TextUtils;\n import android.util.Log;\n import android.view.LayoutInflater;\n import android.view.Menu;\n@@ -218,7 +219,11 @@ private void setDrawableLeft(TextView textView, @DrawableRes int resId) {\n         animationView.setImageAssetsFolder(assetFolders.get(assetName));\n         LottieComposition.Factory.fromAssetFileName(getContext(), assetName,\n             new OnCompositionLoadedListener() {\n-              @Override public void onCompositionLoaded(LottieComposition composition) {\n+              @Override public void onCompositionLoaded(@Nullable LottieComposition composition) {\n+                if (composition == null) {\n+                  onLoadError();\n+                  return;\n+                }\n                 setComposition(composition, assetName);\n               }\n             });\n@@ -236,6 +241,14 @@ private void setDrawableLeft(TextView textView, @DrawableRes int resId) {\n   }\n \n   private void setComposition(LottieComposition composition, String name) {\n+    if (composition.hasImages() && TextUtils.isEmpty(animationView.getImageAssetsFolder())) {\n+      //noinspection ConstantConditions\n+      Snackbar.make(\n+          getView(),\n+          \"This animation has images and no image folder was set\",\n+          Snackbar.LENGTH_LONG).show();\n+      return;\n+    }\n     instructionsContainer.setVisibility(View.GONE);\n     seekBar.setProgress(0);\n     animationView.setComposition(composition);\n@@ -383,7 +396,11 @@ private void onFileLoaded(final Uri uri) {\n \n     LottieComposition.Factory\n         .fromInputStream(getContext(), fis, new OnCompositionLoadedListener() {\n-          @Override public void onCompositionLoaded(LottieComposition composition) {\n+          @Override public void onCompositionLoaded(@Nullable LottieComposition composition) {\n+            if (composition == null) {\n+              onLoadError();\n+              return;\n+            }\n             setComposition(composition, uri.getPath());\n           }\n         });\n@@ -403,7 +420,11 @@ private void loadJsonString(String jsonString) {\n       JSONObject json = new JSONObject(jsonString);\n       LottieComposition.Factory\n           .fromJson(getResources(), json, new OnCompositionLoadedListener() {\n-            @Override public void onCompositionLoaded(LottieComposition composition) {\n+            @Override public void onCompositionLoaded(@Nullable LottieComposition composition) {\n+              if (composition == null) {\n+                onLoadError();\n+                return;\n+              }\n               setComposition(composition, \"Animation\");\n             }\n           });\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -62,8 +62,10 @@ public enum CacheStrategy {\n   private final OnCompositionLoadedListener loadedListener =\n       new OnCompositionLoadedListener() {\n         @Override\n-        public void onCompositionLoaded(LottieComposition composition) {\n-          setComposition(composition);\n+        public void onCompositionLoaded(@Nullable LottieComposition composition) {\n+          if (composition != null) {\n+            setComposition(composition);\n+          }\n           compositionLoader = null;\n         }\n       };\n@@ -414,18 +416,6 @@ public void setComposition(@NonNull LottieComposition composition) {\n     return lottieDrawable.hasMatte();\n   }\n \n-  /**\n-   * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n-   * located because bodymovin uses the name filenames across all compositions (img_#).\n-   * Do NOT rename the images themselves.\n-   *\n-   * If your images are located in src/main/assets/airbnb_loader/ then call\n-   * `setImageAssetsFolder(\"airbnb_loader/\");`.\n-   */\n-  @SuppressWarnings(\"WeakerAccess\") public void setImageAssetsFolder(String imageAssetsFolder) {\n-    lottieDrawable.setImagesAssetsFolder(imageAssetsFolder);\n-  }\n-\n   public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n     lottieDrawable.addAnimatorUpdateListener(updateListener);\n   }\n@@ -476,6 +466,23 @@ public void resumeAnimation() {\n     lottieDrawable.setSpeed(speed);\n   }\n \n+  /**\n+   * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n+   * located because bodymovin uses the name filenames across all compositions (img_#).\n+   * Do NOT rename the images themselves.\n+   *\n+   * If your images are located in src/main/assets/airbnb_loader/ then call\n+   * `setImageAssetsFolder(\"airbnb_loader/\");`.\n+   */\n+  @SuppressWarnings(\"WeakerAccess\") public void setImageAssetsFolder(String imageAssetsFolder) {\n+    lottieDrawable.setImagesAssetsFolder(imageAssetsFolder);\n+  }\n+\n+  @Nullable\n+  public String getImageAssetsFolder() {\n+    return lottieDrawable.getImageAssetsFolder();\n+  }\n+\n   /**\n    * Allows you to modify or clear a bitmap that was loaded for an image either automatically\n    * through {@link #setImageAssetsFolder(String)} or with an {@link ImageAssetDelegate}.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -6,6 +6,7 @@\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n+import android.util.Log;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n@@ -73,7 +74,7 @@ List<Layer> getPrecomps(String id) {\n     return precomps.get(id);\n   }\n \n-  @SuppressWarnings(\"unused\") boolean hasImages() {\n+  public boolean hasImages() {\n     return !images.isEmpty();\n   }\n \n@@ -151,6 +152,7 @@ public static Cancellable fromJson(Resources res, JSONObject json,\n       return loader;\n     }\n \n+    @Nullable\n     @SuppressWarnings(\"WeakerAccess\")\n     static LottieComposition fromInputStream(Resources res, InputStream stream) {\n       try {\n@@ -163,12 +165,15 @@ static LottieComposition fromInputStream(Resources res, InputStream stream) {\n         JSONObject jsonObject = new JSONObject(json);\n         return fromJsonSync(res, jsonObject);\n       } catch (IOException e) {\n-        throw new IllegalStateException(\"Unable to find file.\", e);\n+        Log.e(L.TAG, \"Failed to load composition.\",\n+            new IllegalStateException(\"Unable to find file.\", e));\n       } catch (JSONException e) {\n-        throw new IllegalStateException(\"Unable to load JSON.\", e);\n+        Log.e(L.TAG, \"Failed to load composition.\",\n+            new IllegalStateException(\"Unable to load JSON.\", e));\n       } finally {\n         closeQuietly(stream);\n       }\n+      return null;\n     }\n \n     @SuppressWarnings(\"WeakerAccess\")\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/OnCompositionLoadedListener.java b/lottie/src/main/java/com/airbnb/lottie/OnCompositionLoadedListener.java\n--- a/lottie/src/main/java/com/airbnb/lottie/OnCompositionLoadedListener.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/OnCompositionLoadedListener.java\n@@ -1,5 +1,10 @@\n package com.airbnb.lottie;\n \n+import android.support.annotation.Nullable;\n+\n public interface OnCompositionLoadedListener {\n-  void onCompositionLoaded(LottieComposition composition);\n+  /**\n+   * Composition will be null if there was an error loading it. Check logcat for more details.\n+   */\n+  void onCompositionLoaded(@Nullable LottieComposition composition);\n }",
    "output": "Fail in logcat instead of throwing an exception"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -50,6 +50,11 @@ void setAssetDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     this.assetDelegate = assetDelegate;\n   }\n \n+  @Nullable\n+  Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n+    return bitmaps.put(id, bitmap);\n+  }\n+\n   @Nullable\n   Bitmap bitmapForId(String id) {\n     Bitmap bitmap = bitmaps.get(id);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -4,6 +4,7 @@\n import android.animation.ValueAnimator;\n import android.content.Context;\n import android.content.res.TypedArray;\n+import android.graphics.Bitmap;\n import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.drawable.Drawable;\n@@ -475,6 +476,18 @@ public void resumeAnimation() {\n     lottieDrawable.setSpeed(speed);\n   }\n \n+  /**\n+   * Allows you to modify or clear a bitmap that was loaded for an image either automatically\n+   * through {@link #setImageAssetsFolder(String)} or with an {@link ImageAssetDelegate}.\n+   *\n+   * @return the previous Bitmap or null.\n+   */\n+  @Nullable\n+  @SuppressWarnings({\"unused\", \"WeakerAccess\"})\n+  public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n+    return lottieDrawable.updateBitmap(id, bitmap);\n+  }\n+\n   /**\n    * Use this if you can't bundle images with your app. This may be useful if you download the\n    * animations from the network or have the images saved to an SD Card. In that case, Lottie\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -437,6 +437,26 @@ private void updateBounds() {\n     return composition == null ? -1 : (int) (composition.getBounds().height() * scale);\n   }\n \n+  /**\n+   * Allows you to modify or clear a bitmap that was loaded for an image either automatically\n+   * through {@link #setImagesAssetsFolder(String)} or with an {@link ImageAssetDelegate}.\n+   *\n+   * @return the previous Bitmap or null.\n+   */\n+  @Nullable\n+  @SuppressWarnings({\"unused\", \"WeakerAccess\"})\n+  public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n+    ImageAssetBitmapManager bm = getImageAssetBitmapManager();\n+    if (bm == null) {\n+      Log.w(L.TAG, \"Cannot update bitmap. Most likely the drawable is not added to a View \" +\n+        \"which prevents Lottie from getting a Context.\");\n+      return null;\n+    }\n+    Bitmap ret = bm.updateBitmap(id, bitmap);\n+    invalidateSelf();\n+    return ret;\n+  }\n+\n   @Nullable\n   Bitmap getImageAsset(String id) {\n     ImageAssetBitmapManager bm = getImageAssetBitmapManager();",
    "output": "Allow you to update the Bitmap asset dynamically\n\nFixes #294"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -97,6 +97,10 @@ public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr\n \n   private void init(@Nullable AttributeSet attrs) {\n     TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);\n+    int cacheStrategy = ta.getInt(\n+        R.styleable.LottieAnimationView_lottie_cacheStrategy,\n+        CacheStrategy.None.ordinal());\n+    defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n     String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n     if (!isInEditMode() && fileName != null) {\n       setAnimation(fileName);\n@@ -110,10 +114,6 @@ private void init(@Nullable AttributeSet attrs) {\n     setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n         R.styleable.LottieAnimationView_lottie_enableMergePathsForKitKatAndAbove, false));\n-    int cacheStrategy = ta.getInt(\n-        R.styleable.LottieAnimationView_lottie_cacheStrategy,\n-        CacheStrategy.None.ordinal());\n-    defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n     if (ta.hasValue(R.styleable.LottieAnimationView_lottie_colorFilter)) {\n       addColorFilter(new SimpleColorFilter(ta.getColor(\n           R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT)));",
    "output": "Load cache attribute before animation so the cache strategy gets set\n\nFixes #296"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -313,10 +313,11 @@ private void playAnimation(boolean setStartTime) {\n       reverseAnimationWhenCompositionAdded = false;\n       return;\n     }\n+    long playTime = setStartTime ? (long) (progress * animator.getDuration()) : 0;\n+    animator.start();\n     if (setStartTime) {\n-      animator.setCurrentPlayTime((long) (progress * animator.getDuration()));\n+      animator.setCurrentPlayTime(playTime);\n     }\n-    animator.start();\n   }\n \n   @SuppressWarnings({\"unused\", \"WeakerAccess\"}) public void resumeReverseAnimation() {",
    "output": "Set play time after calling start() rather than before\n\nFixes #310"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -37,7 +37,7 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n   private float speed = 1f;\n   private float progress = 0f;\n-  @Nullable private Float scale;\n+  private float scale = 1f;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   @Nullable private ImageAssetBitmapManager imageAssetBitmapManager;\n@@ -146,9 +146,6 @@ boolean enableMergePathsForKitKatAndAbove() {\n     clearComposition();\n     this.composition = composition;\n     setSpeed(speed);\n-    if (scale == null) {\n-      setScale(1f);\n-    }\n     updateBounds();\n     buildCompositionLayer();\n     applyColorFilters();",
    "output": "Default the scale to 1"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -139,14 +139,6 @@ boolean enableMergePathsForKitKatAndAbove() {\n    * @return True if the composition is different from the previously set composition, false otherwise.\n    */\n   @SuppressWarnings(\"WeakerAccess\") public boolean setComposition(LottieComposition composition) {\n-    if (getCallback() == null) {\n-      throw new IllegalStateException(\n-          \"You or your view must set a Drawable.Callback before setting the composition. This \" +\n-              \"gets done automatically when added to an ImageView. \" +\n-              \"Either call ImageView.setImageDrawable() before setComposition() or call \" +\n-              \"setCallback(yourView.getCallback()) first.\");\n-    }\n-\n     if (this.composition == composition) {\n       return false;\n     }\n@@ -449,10 +441,19 @@ private void updateBounds() {\n \n   @Nullable\n   Bitmap getImageAsset(String id) {\n-    return getImageAssetBitmapManager().bitmapForId(id);\n+    ImageAssetBitmapManager bm = getImageAssetBitmapManager();\n+    if (bm != null) {\n+      return bm.bitmapForId(id);\n+    }\n+    return null;\n   }\n \n   private ImageAssetBitmapManager getImageAssetBitmapManager() {\n+    if (getCallback() == null) {\n+      // We can't get a bitmap since we can't get a Context from the callback.\n+      return null;\n+    }\n+\n     if (imageAssetBitmapManager != null && !imageAssetBitmapManager.hasSameContext(getContext())) {\n       imageAssetBitmapManager.recycleBitmaps();\n       imageAssetBitmapManager = null;",
    "output": "Be more lenient when getCallback() is not set"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -16,11 +16,11 @@\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.design.widget.Snackbar;\n+import android.support.graphics.drawable.VectorDrawableCompat;\n import android.support.v4.app.Fragment;\n import android.support.v4.content.ContextCompat;\n import android.support.v4.util.Pair;\n import android.support.v7.app.AppCompatActivity;\n-import android.support.v7.widget.AppCompatDrawableManager;\n import android.support.v7.widget.AppCompatSeekBar;\n import android.support.v7.widget.Toolbar;\n import android.util.Log;\n@@ -179,8 +179,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n   }\n \n   private void setDrawableLeft(TextView textView, @DrawableRes int resId) {\n-    //noinspection RestrictedApi\n-    Drawable drawable = AppCompatDrawableManager.get().getDrawable(getActivity(), resId);\n+    Drawable drawable = VectorDrawableCompat.create(getResources(), resId, getActivity().getTheme());\n     textView.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);\n   }\n ",
    "output": "Remove restricted vector drawable compat API"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -330,16 +330,16 @@ void onLoadFileClicked() {\n     }\n   }\n \n-  @OnClick(R.id.load_url)\n-  void onLoadUrlClicked() {\n+  @OnClick(R.id.load_url_or_json)\n+  void onLoadUrlOrJsonClicked() {\n     animationView.cancelAnimation();\n-    final EditText urlView = new EditText(getContext());\n+    final EditText urlOrJsonView = new EditText(getContext());\n     new AlertDialog.Builder(getContext())\n-        .setTitle(\"Enter a URL\")\n-        .setView(urlView)\n+        .setTitle(\"Enter a URL or JSON string\")\n+        .setView(urlOrJsonView)\n         .setPositiveButton(\"Load\", new DialogInterface.OnClickListener() {\n           @Override public void onClick(DialogInterface dialog, int which) {\n-            loadUrl(urlView.getText().toString());\n+            loadUrlOrJson(urlOrJsonView.getText().toString());\n           }\n         })\n         .setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n@@ -390,6 +390,29 @@ private void onFileLoaded(final Uri uri) {\n         });\n   }\n \n+  private void loadUrlOrJson(String text) {\n+    if (text.charAt(0) == '{') {\n+      // Assume JSON\n+      loadJsonString(text);\n+      return;\n+    }\n+    loadUrl(text);\n+  }\n+\n+  private void loadJsonString(String jsonString) {\n+    try {\n+      JSONObject json = new JSONObject(jsonString);\n+      LottieComposition.Factory\n+          .fromJson(getResources(), json, new OnCompositionLoadedListener() {\n+            @Override public void onCompositionLoaded(LottieComposition composition) {\n+              setComposition(composition, \"Animation\");\n+            }\n+          });\n+    } catch (JSONException e) {\n+      onLoadError();\n+    }\n+  }\n+\n   private void loadUrl(String url) {\n     Request request;\n     try {\n@@ -415,17 +438,7 @@ private void loadUrl(String url) {\n           onLoadError();\n         }\n \n-        try {\n-          JSONObject json = new JSONObject(response.body().string());\n-          LottieComposition.Factory\n-              .fromJson(getResources(), json, new OnCompositionLoadedListener() {\n-                @Override public void onCompositionLoaded(LottieComposition composition) {\n-                  setComposition(composition, \"Network Animation\");\n-                }\n-              });\n-        } catch (JSONException e) {\n-          onLoadError();\n-        }\n+        loadJsonString(response.body().string());\n       }\n     });\n   }",
    "output": "Allow pasting json in the sample app\n\nFixes #292"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/FullScreenActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/FullScreenActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/FullScreenActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/FullScreenActivity.java\n@@ -0,0 +1,13 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+\n+public class FullScreenActivity extends AppCompatActivity {\n+\n+  @Override public void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.fragment_full_screen);\n+  }\n+}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -64,6 +64,10 @@ private void onAppIntroPagerClicked() {\n     startActivity(new Intent(getContext(), AppIntroActivity.class));\n   }\n \n+  private void onFullScreenClicked() {\n+    startActivity(new Intent(getContext(), FullScreenActivity.class));\n+  }\n+\n   private void onOpenLottieFilesClicked() {\n     Intent i = new Intent(Intent.ACTION_VIEW);\n     i.setData(Uri.parse(\"http://www.lottiefiles.com\"));\n@@ -83,6 +87,7 @@ private final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n     private static final String TAG_VIEWER = \"viewer\";\n     private static final String TAG_TYPOGRAPHY = \"typography\";\n     private static final String TAG_APP_INTRO = \"app_intro\";\n+    private static final String TAG_FULL_SCREEN = \"full_screen\";\n     private static final String TAG_OPEN_LOTTIE_FILES = \"open_lottie_files\";\n \n     @Override\n@@ -103,6 +108,9 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n           holder.bind(\"Animated App Tutorial\", TAG_APP_INTRO);\n           break;\n         case 3:\n+          holder.bind(\"Full screen animation\", TAG_FULL_SCREEN);\n+          break;\n+        case 4:\n           holder.bind(\"Open lottiefiles.com\", TAG_OPEN_LOTTIE_FILES);\n           break;\n       }\n@@ -136,6 +144,8 @@ public void onClick(View v) {\n             onTypographyClicked();\n           } else if (FileAdapter.TAG_APP_INTRO.equals(v.getTag())) {\n             onAppIntroPagerClicked();\n+          } else if (FileAdapter.TAG_FULL_SCREEN.equals(v.getTag())) {\n+            onFullScreenClicked();\n           } else if (FileAdapter.TAG_OPEN_LOTTIE_FILES.equals(v.getTag())) {\n             onOpenLottieFilesClicked();\n           }",
    "output": "Added a full screen example"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -118,15 +118,15 @@ private void init(@Nullable AttributeSet attrs) {\n       addColorFilter(new SimpleColorFilter(ta.getColor(\n           R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT)));\n     }\n-    if(ta.hasValue(R.styleable.LottieAnimationView_lottie_scale)) {\n-        lottieDrawable.setScale(ta.getFloat(R.styleable.LottieAnimationView_lottie_scale, 1f));\n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_scale)) {\n+      lottieDrawable.setScale(ta.getFloat(R.styleable.LottieAnimationView_lottie_scale, 1f));\n     }\n \n     ta.recycle();\n \n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n-    float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),\n-        Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);\n+      float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),\n+          Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);\n       if (systemAnimationScale == 0f) {\n         lottieDrawable.systemAnimationsAreDisabled();\n       }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -154,10 +154,9 @@ boolean enableMergePathsForKitKatAndAbove() {\n     clearComposition();\n     this.composition = composition;\n     setSpeed(speed);\n-    if(scale == null) {\n+    if (scale == null) {\n       setScale(1f);\n     }\n-\n     updateBounds();\n     buildCompositionLayer();\n     applyColorFilters();",
    "output": "Format code"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -118,6 +118,10 @@ private void init(@Nullable AttributeSet attrs) {\n       addColorFilter(new SimpleColorFilter(ta.getColor(\n           R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT)));\n     }\n+    if(ta.hasValue(R.styleable.LottieAnimationView_lottie_scale)) {\n+        lottieDrawable.setScale(ta.getFloat(R.styleable.LottieAnimationView_lottie_scale, 1f));\n+    }\n+\n     ta.recycle();\n \n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n@@ -375,7 +379,10 @@ public void setComposition(@NonNull LottieComposition composition) {\n         compHeight > screenHeight) {\n       float xScale = screenWidth / (float) compWidth;\n       float yScale = screenHeight / (float) compHeight;\n-      setScale(Math.min(xScale, yScale));\n+\n+      float maxScaleForScreen = Math.min(xScale, yScale);\n+      setScale(Math.min(maxScaleForScreen, lottieDrawable.getScale()));\n+\n       Log.w(L.TAG, String.format(\n           \"Composition larger than the screen %dx%d vs %dx%d. Scaling down.\",\n           compWidth, compHeight, screenWidth, screenHeight));\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -36,8 +36,8 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private LottieComposition composition;\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n   private float speed = 1f;\n-  private float scale = 1f;\n   private float progress = 0f;\n+  @Nullable private Float scale;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   @Nullable private ImageAssetBitmapManager imageAssetBitmapManager;\n@@ -154,7 +154,10 @@ boolean enableMergePathsForKitKatAndAbove() {\n     clearComposition();\n     this.composition = composition;\n     setSpeed(speed);\n-    setScale(1f);\n+    if(scale == null) {\n+      setScale(1f);\n+    }\n+\n     updateBounds();\n     buildCompositionLayer();\n     applyColorFilters();",
    "output": "#305 Set scale with xml; Retain composition scale previously set."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -60,7 +60,9 @@ Bitmap bitmapForId(String id) {\n       }\n       if (assetDelegate != null) {\n         bitmap = assetDelegate.fetchBitmap(imageAsset);\n-        bitmaps.put(id, bitmap);\n+        if (bitmap != null) {\n+          bitmaps.put(id, bitmap);\n+        }\n         return bitmap;\n       }\n \n@@ -88,10 +90,7 @@ void recycleBitmaps() {\n     Iterator<Map.Entry<String, Bitmap>> it = bitmaps.entrySet().iterator();\n     while (it.hasNext()) {\n       Map.Entry<String, Bitmap> entry = it.next();\n-      Bitmap value = entry.getValue();\n-      if (value != null) {\n-        value.recycle();\n-      }\n+      entry.getValue().recycle();\n       it.remove();\n     }\n   }",
    "output": "return null in bitmapForId then just don't put it in the map"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -88,7 +88,10 @@ void recycleBitmaps() {\n     Iterator<Map.Entry<String, Bitmap>> it = bitmaps.entrySet().iterator();\n     while (it.hasNext()) {\n       Map.Entry<String, Bitmap> entry = it.next();\n-      entry.getValue().recycle();\n+      Bitmap value = entry.getValue();\n+      if (value != null) {\n+        value.recycle();\n+      }\n       it.remove();\n     }\n   }",
    "output": "fix NullPointerException\n\nIf a null is returned in `ImageAssetDelegate.fetchBitmap()`,` recycleBitmaps()`  method Throws a NullPointerException"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -25,7 +25,7 @@ static Path createPath(PointF startPoint, PointF endPoint, PointF cp1, PointF cp\n     Path path = new Path();\n     path.moveTo(startPoint.x, startPoint.y);\n \n-    if (cp1 != null  && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) { // This Line\n+    if (cp1 != null  && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) {\n       path.cubicTo(\n           startPoint.x + cp1.x, startPoint.y + cp1.y,\n           endPoint.x + cp2.x, endPoint.y + cp2.y,",
    "output": "Bump version to 2.0.0-rc1"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n@@ -15,9 +15,21 @@ static void getPathFromData(ShapeData shapeData, Path outPath) {\n     outPath.moveTo(initialPoint.x, initialPoint.y);\n     for (int i = 0; i < shapeData.getCurves().size(); i++) {\n       CubicCurveData curveData = shapeData.getCurves().get(i);\n-      outPath.cubicTo(curveData.getControlPoint1().x, curveData.getControlPoint1().y,\n-          curveData.getControlPoint2().x, curveData.getControlPoint2().y,\n-          curveData.getVertex().x, curveData.getVertex().y);\n+      PointF cp1 = curveData.getControlPoint1();\n+      PointF cp2 = curveData.getControlPoint2();\n+      PointF vertex = curveData.getVertex();\n+\n+      if (cp2.equals(vertex)) {\n+        // On some phones like Samsung phones, zero valued control points can cause artifacting.\n+        // https://github.com/airbnb/lottie-android/issues/275\n+        //\n+        // This does its best to add a tiny value to the vertex without affecting the final\n+        // animation as much as possible.\n+        outPath.cubicTo(cp1.x, cp1.y, cp2.x, cp2.y, vertex.x + 0.01f, vertex.y + 0.01f);\n+      } else {\n+        outPath.cubicTo(cp1.x, cp1.y, cp2.x, cp2.y, vertex.x, vertex.y);\n+      }\n+\n     }\n     if (shapeData.isClosed()) {\n       outPath.close();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n@@ -145,8 +145,6 @@ private Factory() {\n         PointF previousVertex = vertexAtIndex(i - 1, pointsArray);\n         PointF cp1 = vertexAtIndex(i - 1, outTangents);\n         PointF cp2 = vertexAtIndex(i, inTangents);\n-        ensureNonZeroControlPoint(previousVertex, vertex, cp1);\n-        ensureNonZeroControlPoint(previousVertex, vertex, cp2);\n         PointF shapeCp1 = MiscUtils.addPoints(previousVertex, cp1);\n         PointF shapeCp2 = MiscUtils.addPoints(vertex, cp2);\n \n@@ -183,23 +181,6 @@ private Factory() {\n       return new ShapeData(initialPoint, closed, curves);\n     }\n \n-    /**\n-     * On some phones like Samsung phones, zero valued control points can cause artifacting.\n-     * https://github.com/airbnb/lottie-android/issues/275\n-     *\n-     * This does its best to add a tiny value to the control point without affecting the final\n-     * animation as much as possible.\n-     */\n-    private void ensureNonZeroControlPoint(PointF previousVertex, PointF vertex, PointF cp) {\n-      if (!cp.equals(0f, 0f)) {\n-        return;\n-      }\n-      float dx = vertex.x - previousVertex.x;\n-      float dy = vertex.y - previousVertex.y;\n-      float length = (float) Math.sqrt(dx * dx + dy * dy);\n-      cp.set(dx / length * 0.001f, dy / length * 0.001f);\n-    }\n-\n     private static PointF vertexAtIndex(int idx, JSONArray points) {\n       if (idx >= points.length()) {\n         throw new IllegalArgumentException(",
    "output": "Use a safer way of avoiding artifacts\n\n#275"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -71,7 +71,7 @@ public class AnimationFragment extends Fragment {\n \n   static final String EXTRA_ANIMATION_NAME = \"animation_name\";\n   static final String EXTRA_URL = \"json_url\";\n-  public static final float SCALE_SLIDER_FACTOR = 50f;\n+  private static final float SCALE_SLIDER_FACTOR = 50f;\n \n   static AnimationFragment newInstance() {\n     return new AnimationFragment();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -127,9 +127,9 @@ static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition compositio\n           // TODO: create a HoldInterpolator so progress changes don't invalidate.\n           interpolator = LINEAR_INTERPOLATOR;\n         } else if (cp1 != null) {\n-          cp1.x = MiscUtils.clamp(cp1.x, 0f, 1f);\n+          cp1.x = MiscUtils.clamp(cp1.x, -scale, scale);\n           cp1.y = MiscUtils.clamp(cp1.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n-          cp2.x = MiscUtils.clamp(cp2.x, 0f, 1f);\n+          cp2.x = MiscUtils.clamp(cp2.x, -scale, scale);\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           interpolator = PathInterpolatorCompat.create(\n               cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);",
    "output": "Take scale into account when clamping keyframe values"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n@@ -19,6 +19,9 @@ class CompositionLayer extends BaseLayer {\n   private final Rect originalClipRect = new Rect();\n   private final RectF newClipRect = new RectF();\n \n+  @Nullable private Boolean hasMatte;\n+  @Nullable private Boolean hasMasks;\n+\n   CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<Layer> layerModels,\n       LottieComposition composition) {\n     super(lottieDrawable, layerModel);\n@@ -105,28 +108,37 @@ class CompositionLayer extends BaseLayer {\n   }\n \n   boolean hasMasks() {\n-    for (int i = layers.size() - 1; i >= 0; i--) {\n-      BaseLayer layer = layers.get(i);\n-      if (layer instanceof ShapeLayer) {\n-        if (layer.hasMasksOnThisLayer()) {\n-          return true;\n+    if (hasMasks == null) {\n+      for (int i = layers.size() - 1; i >= 0; i--) {\n+        BaseLayer layer = layers.get(i);\n+        if (layer instanceof ShapeLayer) {\n+          if (layer.hasMasksOnThisLayer()) {\n+            hasMasks = true;\n+            return true;\n+          }\n         }\n       }\n+      hasMasks = false;\n     }\n-    return false;\n+    return hasMasks;\n   }\n \n   boolean hasMatte() {\n-    if (hasMatteOnThisLayer()) {\n-      return true;\n-    }\n-\n-    for (int i = layers.size() - 1; i >= 0; i--) {\n-      if (layers.get(i).hasMatteOnThisLayer()) {\n+    if (hasMatte == null) {\n+      if (hasMatteOnThisLayer()) {\n+        hasMatte = true;\n         return true;\n       }\n+\n+      for (int i = layers.size() - 1; i >= 0; i--) {\n+        if (layers.get(i).hasMatteOnThisLayer()) {\n+          hasMatte = true;\n+          return true;\n+        }\n+      }\n+      hasMatte = false;\n     }\n-    return false;\n+    return hasMatte;\n   }\n \n   @Override public void addColorFilter(@Nullable String layerName, @Nullable String contentName,\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -219,7 +219,7 @@ private void clearComposition() {\n    * @param contentName name of the specific content that the color filter is to be applied\n    * @param colorFilter the color filter, null to clear the color filter\n    */\n-  public void addColorFilterToContent(String layerName, String contentName,\n+  @SuppressWarnings(\"WeakerAccess\") public void addColorFilterToContent(String layerName, String contentName,\n       @Nullable ColorFilter colorFilter) {\n     addColorFilterInternal(layerName, contentName, colorFilter);\n   }\n@@ -229,7 +229,7 @@ public void addColorFilterToContent(String layerName, String contentName,\n    * @param layerName name of the layer that the color filter is to be applied\n    * @param colorFilter the color filter, null to clear the color filter\n    */\n-  public void addColorFilterToLayer(String layerName, @Nullable ColorFilter colorFilter) {\n+  @SuppressWarnings(\"WeakerAccess\") public void addColorFilterToLayer(String layerName, @Nullable ColorFilter colorFilter) {\n     addColorFilterInternal(layerName, null, colorFilter);\n   }\n \n@@ -244,7 +244,7 @@ public void addColorFilter(ColorFilter colorFilter) {\n   /**\n    * Clear all color filters on all layers and all content in the layers\n    */\n-  public void clearColorFilters() {\n+  @SuppressWarnings(\"WeakerAccess\") public void clearColorFilters() {\n     colorFilterData.clear();\n     addColorFilterInternal(null, null, null);\n   }\n@@ -282,6 +282,11 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String\n     if (compositionLayer == null) {\n       return;\n     }\n+    float scale = this.scale;\n+    if (compositionLayer.hasMatte()) {\n+      scale = Math.min(this.scale, getMaxScale(canvas));\n+    }\n+\n     matrix.reset();\n     matrix.preScale(scale, scale);\n     compositionLayer.draw(canvas, matrix, alpha);\n@@ -471,6 +476,12 @@ private ImageAssetBitmapManager getImageAssetBitmapManager() {\n     return null;\n   }\n \n+  private float getMaxScale(@NonNull Canvas canvas) {\n+    float maxScaleX = canvas.getWidth() / (float) composition.getBounds().width();\n+    float maxScaleY = canvas.getHeight() / (float) composition.getBounds().height();\n+    return Math.min(maxScaleX, maxScaleY);\n+  }\n+\n   /**\n    * These Drawable.Callback methods proxy the calls so that this is the drawable that is\n    * actually invalidated, not a child one which will not pass the view's validateDrawable check.\n@@ -535,15 +546,8 @@ private static class ColorFilterData {\n \n       final ColorFilterData other = (ColorFilterData) obj;\n \n-      if (hashCode() != other.hashCode()) {\n-        return false;\n-      }\n-\n-      if (colorFilter != other.colorFilter) {\n-        return false;\n-      }\n+      return hashCode() == other.hashCode() && colorFilter == other.colorFilter;\n \n-      return true;\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n@@ -10,8 +10,6 @@\n import java.util.Collections;\n \n class ShapeLayer extends BaseLayer {\n-  private final Matrix matrix = new Matrix();\n-\n   private final ContentGroup contentGroup;\n \n   ShapeLayer(LottieDrawable lottieDrawable, Layer layerModel) {",
    "output": "Prevent animations with mattes from scaling larger than the canvas\n\nDoing so causes the content to get clipped since the offscreen\nbuffer the matte renders on is too small."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -198,6 +198,13 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n \n     private static void parseLayers(JSONObject json, LottieComposition composition) {\n       JSONArray jsonLayers = json.optJSONArray(\"layers\");\n+      // This should never be null. Bodymovin always exports at least an empty array.\n+      // However, it seems as if the demarshalling from the React Native library sometimes\n+      // causes this to be null. The proper fix should be done there but this will prevent a crash.\n+      // https://github.com/airbnb/lottie-android/issues/279\n+      if (jsonLayers == null) {\n+        return;\n+      }\n       int length = jsonLayers.length();\n       for (int i = 0; i < length; i++) {\n         Layer layer = Layer.Factory.newInstance(jsonLayers.optJSONObject(i), composition);",
    "output": "Prevent a crash when empty array is demarshalled as null from React Native\n\nFixes #279"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n@@ -3,7 +3,9 @@\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n+import android.graphics.Rect;\n import android.graphics.RectF;\n+import android.graphics.Region;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n@@ -14,6 +16,8 @@\n class CompositionLayer extends BaseLayer {\n   private final List<BaseLayer> layers = new ArrayList<>();\n   private final RectF rect = new RectF();\n+  private final Rect originalClipRect = new Rect();\n+  private final RectF newClipRect = new RectF();\n \n   CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<Layer> layerModels,\n       LottieComposition composition) {\n@@ -55,8 +59,21 @@ class CompositionLayer extends BaseLayer {\n   }\n \n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n+    canvas.getClipBounds(originalClipRect);\n+    newClipRect.set(0, 0, layerModel.getPreCompWidth(), layerModel.getPreCompHeight());\n+    parentMatrix.mapRect(newClipRect);\n+\n     for (int i = layers.size() - 1; i >= 0 ; i--) {\n-      layers.get(i).draw(canvas, parentMatrix, parentAlpha);\n+      boolean nonEmptyClip = true;\n+      if (!newClipRect.isEmpty()) {\n+        nonEmptyClip = canvas.clipRect(newClipRect);\n+      }\n+      if (nonEmptyClip) {\n+        layers.get(i).draw(canvas, parentMatrix, parentAlpha);\n+      }\n+    }\n+    if (!originalClipRect.isEmpty()) {\n+      canvas.clipRect(originalClipRect, Region.Op.REPLACE);\n     }\n   }\n ",
    "output": "Clip precomps to their bounds\n\n#281"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n@@ -24,6 +24,7 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n   private final String name;\n   private final LongSparseArray<LinearGradient> linearGradientCache = new LongSparseArray<>();\n   private final LongSparseArray<RadialGradient> radialGradientCache = new LongSparseArray<>();\n+  private final Matrix shaderMatrix = new Matrix();\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final RectF boundsRect = new RectF();\n@@ -81,11 +82,16 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n \n     path.computeBounds(boundsRect, false);\n \n+    Shader shader;\n     if (type == GradientType.Linear) {\n-      paint.setShader(getLinearGradient());\n+      shader = getLinearGradient();\n     } else {\n-      paint.setShader(getRadialGradient());\n+      shader = getRadialGradient();\n     }\n+    shaderMatrix.set(parentMatrix);\n+    shader.setLocalMatrix(shaderMatrix);\n+    paint.setShader(shader);\n+\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n     paint.setAlpha(alpha);\n \n@@ -128,11 +134,8 @@ private LinearGradient getLinearGradient() {\n     GradientColor gradientColor = colorAnimation.getValue();\n     int[] colors = gradientColor.getColors();\n     float[] positions = gradientColor.getPositions();\n-    int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n-    int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n-    int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n-    int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n-    gradient = new LinearGradient(x0, y0, x1, y1, colors, positions, Shader.TileMode.CLAMP);\n+    gradient = new LinearGradient(startPoint.x, startPoint.y, endPoint.x, endPoint.y, colors,\n+        positions, Shader.TileMode.CLAMP);\n     linearGradientCache.put(gradientHash, gradient);\n     return gradient;\n   }\n@@ -148,10 +151,10 @@ private RadialGradient getRadialGradient() {\n     GradientColor gradientColor = colorAnimation.getValue();\n     int[] colors = gradientColor.getColors();\n     float[] positions = gradientColor.getPositions();\n-    int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n-    int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n-    int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n-    int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n+    float x0 = startPoint.x;\n+    float y0 = startPoint.y;\n+    float x1 = endPoint.x;\n+    float y1 = endPoint.y;\n     float r = (float) Math.hypot(x1 - x0, y1 - y0);\n     gradient = new RadialGradient(x0, y0, r, colors, positions, Shader.TileMode.CLAMP);\n     radialGradientCache.put(gradientHash, gradient);",
    "output": "Apply transformation matrices to gradient fills\n\nFixes #273\nFixes #47"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -4,7 +4,6 @@\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.view.animation.PathInterpolatorCompat;\n-import android.util.Log;\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n@@ -128,18 +127,10 @@ static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition compositio\n           // TODO: create a HoldInterpolator so progress changes don't invalidate.\n           interpolator = LINEAR_INTERPOLATOR;\n         } else if (cp1 != null) {\n-          cp1.x = MiscUtils.clamp(cp1.x, -MAX_CP_VALUE, MAX_CP_VALUE);\n+          cp1.x = MiscUtils.clamp(cp1.x, 0f, 1f);\n           cp1.y = MiscUtils.clamp(cp1.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n-          cp2.x = MiscUtils.clamp(cp2.x, -MAX_CP_VALUE, MAX_CP_VALUE);\n+          cp2.x = MiscUtils.clamp(cp2.x, 0f, 1f);\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n-          if (cp1.x < 0 || cp1.x > 1) {\n-            Log.w(L.TAG, \"Invalid control point X value: \" + cp1.x);\n-            cp1.x = MiscUtils.clamp(cp1.x, 0f, 1f);\n-          }\n-          if (cp2.x < 0 || cp2.x > 1) {\n-            Log.w(L.TAG, \"Invalid control point X value: \" + cp2.x);\n-            cp2.x = MiscUtils.clamp(cp2.x, 0f, 1f);\n-          }\n           interpolator = PathInterpolatorCompat.create(\n               cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n         } else {",
    "output": "Clean up keyframe control point clamping"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -4,6 +4,7 @@\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.view.animation.PathInterpolatorCompat;\n+import android.util.Log;\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n@@ -131,6 +132,14 @@ static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition compositio\n           cp1.y = MiscUtils.clamp(cp1.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           cp2.x = MiscUtils.clamp(cp2.x, -MAX_CP_VALUE, MAX_CP_VALUE);\n           cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n+          if (cp1.x < 0 || cp1.x > 1) {\n+            Log.w(L.TAG, \"Invalid control point X value: \" + cp1.x);\n+            cp1.x = MiscUtils.clamp(cp1.x, 0f, 1f);\n+          }\n+          if (cp2.x < 0 || cp2.x > 1) {\n+            Log.w(L.TAG, \"Invalid control point X value: \" + cp2.x);\n+            cp2.x = MiscUtils.clamp(cp2.x, 0f, 1f);\n+          }\n           interpolator = PathInterpolatorCompat.create(\n               cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n         } else {",
    "output": "Prevent invalid control points when creating a keyframe\n\nFixes #288"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n@@ -145,6 +145,8 @@ private Factory() {\n         PointF previousVertex = vertexAtIndex(i - 1, pointsArray);\n         PointF cp1 = vertexAtIndex(i - 1, outTangents);\n         PointF cp2 = vertexAtIndex(i, inTangents);\n+        ensureNonZeroControlPoint(previousVertex, vertex, cp1);\n+        ensureNonZeroControlPoint(previousVertex, vertex, cp2);\n         PointF shapeCp1 = MiscUtils.addPoints(previousVertex, cp1);\n         PointF shapeCp2 = MiscUtils.addPoints(vertex, cp2);\n \n@@ -181,6 +183,23 @@ private Factory() {\n       return new ShapeData(initialPoint, closed, curves);\n     }\n \n+    /**\n+     * On some phones like Samsung phones, zero valued control points can cause artifacting.\n+     * https://github.com/airbnb/lottie-android/issues/275\n+     *\n+     * This does its best to add a tiny value to the control point without affecting the final\n+     * animation as much as possible.\n+     */\n+    private void ensureNonZeroControlPoint(PointF previousVertex, PointF vertex, PointF cp) {\n+      if (!cp.equals(0f, 0f)) {\n+        return;\n+      }\n+      float dx = vertex.x - previousVertex.x;\n+      float dy = vertex.y - previousVertex.y;\n+      float length = (float) Math.sqrt(dx * dx + dy * dy);\n+      cp.set(dx / length * 0.001f, dy / length * 0.001f);\n+    }\n+\n     private static PointF vertexAtIndex(int idx, JSONArray points) {\n       if (idx >= points.length()) {\n         throw new IllegalArgumentException(",
    "output": "Add a small value to zero value control points to avoid artifacting\n\n#275"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -119,7 +119,6 @@ private void init(@Nullable AttributeSet attrs) {\n           R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT)));\n     }\n     ta.recycle();\n-    setLayerType(LAYER_TYPE_SOFTWARE, null);\n \n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n     float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),\n@@ -128,6 +127,8 @@ private void init(@Nullable AttributeSet attrs) {\n         lottieDrawable.systemAnimationsAreDisabled();\n       }\n     }\n+\n+    enableOrDisableHardwareLayer();\n   }\n \n   @Override public void setImageResource(int resId) {\n@@ -523,7 +524,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n \n   private void enableOrDisableHardwareLayer() {\n     boolean useHardwareLayer = this.useHardwareLayer && lottieDrawable.isAnimating();\n-    setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_NONE, null);\n+    setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n   }\n \n   private static class SavedState extends BaseSavedState {",
    "output": "Use a software layer instead of no layer\n\n#260"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -129,7 +129,8 @@ public static Cancellable fromInputStream(Context context, InputStream stream,\n       return loader;\n     }\n \n-    static LottieComposition fromFileSync(Context context, String fileName) {\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public static LottieComposition fromFileSync(Context context, String fileName) {\n       InputStream stream;\n       try {\n         stream = context.getAssets().open(fileName);",
    "output": "Expose LottieComposition#fromFileSync\n\nFixes #282"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -196,6 +196,7 @@ public void addColorFilter(@Nullable ColorFilter colorFilter) {\n     ss.progress = lottieDrawable.getProgress();\n     ss.isAnimating = lottieDrawable.isAnimating();\n     ss.isLooping = lottieDrawable.isLooping();\n+    ss.imageAssetsFolder = lottieDrawable.getImageAssetsFolder();\n     return ss;\n   }\n \n@@ -216,6 +217,7 @@ public void addColorFilter(@Nullable ColorFilter colorFilter) {\n     if (ss.isAnimating) {\n       playAnimation();\n     }\n+    lottieDrawable.setImagesAssetsFolder(ss.imageAssetsFolder);\n   }\n \n   @Override protected void onAttachedToWindow() {\n@@ -529,6 +531,7 @@ private static class SavedState extends BaseSavedState {\n     float progress;\n     boolean isAnimating;\n     boolean isLooping;\n+    String imageAssetsFolder;\n \n     SavedState(Parcelable superState) {\n       super(superState);\n@@ -540,6 +543,7 @@ private SavedState(Parcel in) {\n       progress = in.readFloat();\n       isAnimating = in.readInt() == 1;\n       isLooping = in.readInt() == 1;\n+      imageAssetsFolder = in.readString();\n     }\n \n     @Override\n@@ -549,7 +553,7 @@ public void writeToParcel(Parcel out, int flags) {\n       out.writeFloat(progress);\n       out.writeInt(isAnimating ? 1 : 0);\n       out.writeInt(isLooping ? 1 : 0);\n-\n+      out.writeString(imageAssetsFolder);\n     }\n \n     public static final Parcelable.Creator<SavedState> CREATOR =\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -118,6 +118,10 @@ boolean enableMergePathsForKitKatAndAbove() {\n     this.imageAssetsFolder = imageAssetsFolder;\n   }\n \n+  @SuppressWarnings(\"WeakerAccess\") @Nullable public String getImageAssetsFolder() {\n+    return imageAssetsFolder;\n+  }\n+\n   /**\n    * If you have image assets and use {@link LottieDrawable} directly, you must call this yourself.\n    *",
    "output": "Save imageAssetsFolder in SavedState\n\nFixes #285"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Cancellable.java b/lottie/src/main/java/com/airbnb/lottie/Cancellable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Cancellable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Cancellable.java\n@@ -1,5 +1,5 @@\n package com.airbnb.lottie;\n \n-interface Cancellable {\n+public interface Cancellable {\n   void cancel();\n }",
    "output": "Make Cancellable interface visible\n\nThis is a regression since https://github.com/airbnb/lottie-android/pull/157\nCancellable is returned  from the composition factory but is inaccessible."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -5,6 +5,7 @@\n import android.support.test.runner.AndroidJUnit4;\n \n import com.airbnb.lottie.samples.MainActivity;\n+import com.airbnb.lottie.samples.TestColorFilterActivity;\n \n import org.junit.Rule;\n import org.junit.Test;\n@@ -18,11 +19,14 @@\n @RunWith(AndroidJUnit4.class)\n @LargeTest\n public class LottieTest {\n-  @Rule public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(\n+  @Rule public ActivityTestRule<MainActivity> mainActivityRule = new ActivityTestRule<>(\n       MainActivity.class);\n \n+  @Rule public ActivityTestRule<TestColorFilterActivity> colorFilterActivityRule = new ActivityTestRule<>(\n+      TestColorFilterActivity.class);\n+\n   @Test public void testAll() {\n-    MainActivity activity = activityRule.getActivity();\n+    MainActivity activity = mainActivityRule.getActivity();\n     TestRobot.testLinearAnimation(activity, \"9squares-AlBoardman.json\");\n     TestRobot.testLinearAnimation(activity, \"EmptyState.json\");\n     TestRobot.testLinearAnimation(activity, \"HamburgerArrow.json\");\n@@ -73,5 +77,9 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"Tests/TrimPaths.json\");\n     TestRobot.testChangingCompositions(activity, \"TwitterHeart.json\", \"PinJump.json\");\n     TestRobot.testSettingSameComposition(activity, \"PinJump.json\");\n+\n+    TestColorFilterActivity colorFilterActivity = colorFilterActivityRule.getActivity();\n+    TestRobot.testAddYellowColorFilterInXml(colorFilterActivity);\n+    TestRobot.testAddNullColorFilterInXml(colorFilterActivity);\n   }\n }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n@@ -1,8 +1,11 @@\n package com.airbnb.lottie;\n \n import android.support.annotation.Nullable;\n+import android.view.View;\n \n import com.airbnb.lottie.samples.MainActivity;\n+import com.airbnb.lottie.samples.R;\n+import com.airbnb.lottie.samples.TestColorFilterActivity;\n import com.facebook.testing.screenshot.Screenshot;\n import com.facebook.testing.screenshot.ViewHelpers;\n \n@@ -99,4 +102,20 @@ private static void cleanUpView(final AnimationLinearLayout view, MainActivity a\n       // Do nothing.\n     }\n   }\n+\n+  static void testAddYellowColorFilterInXml(final TestColorFilterActivity activity) {\n+    View view = activity.findViewById(R.id.yellow_color_filter);\n+    Screenshot.snap(view)\n+        .setGroup(\"test_color_filter\")\n+        .setName(\"yellow_color_filter\")\n+        .record();\n+  }\n+\n+  static void testAddNullColorFilterInXml(final TestColorFilterActivity activity) {\n+    View view = activity.findViewById(R.id.null_color_filter);\n+    Screenshot.snap(view)\n+        .setGroup(\"test_color_filter\")\n+        .setName(\"null_color_filter\")\n+        .record();\n+  }\n }\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/TestColorFilterActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/TestColorFilterActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/TestColorFilterActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/TestColorFilterActivity.java\n@@ -0,0 +1,13 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+\n+public class TestColorFilterActivity extends AppCompatActivity {\n+\n+  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_test_color_filter);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Add tests for XML color filter"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -4,6 +4,7 @@\n import android.animation.ValueAnimator;\n import android.content.Context;\n import android.content.res.TypedArray;\n+import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n@@ -113,6 +114,10 @@ private void init(@Nullable AttributeSet attrs) {\n         R.styleable.LottieAnimationView_lottie_cacheStrategy,\n         CacheStrategy.None.ordinal());\n     defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n+    if (ta.hasValue(R.styleable.LottieAnimationView_lottie_colorFilter)) {\n+      addColorFilter(new SimpleColorFilter(ta.getColor(\n+          R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT)));\n+    }\n     ta.recycle();\n     setLayerType(LAYER_TYPE_SOFTWARE, null);\n ",
    "output": "Add styleable attribute for whole animation color filter"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -199,8 +199,7 @@ private void setDrawableLeft(TextView textView, @DrawableRes int resId) {\n     }\n     switch (item.getItemId()) {\n       case R.id.hardware_acceleration:\n-        int layerType = item.isChecked() ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_SOFTWARE;\n-        animationView.setLayerType(layerType, null);\n+        animationView.useExperimentalHardwareAcceleration(item.isChecked());\n         return true;\n       case R.id.merge_paths:\n         animationView.enableMergePathsForKitKatAndAbove(item.isChecked());\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -71,6 +71,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n   private String animationName;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n+  private boolean useHardwareLayer = false;\n \n   @Nullable private Cancellable compositionLoader;\n   /**\n@@ -248,6 +249,13 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n     lottieDrawable.enableMergePathsForKitKatAndAbove(enable);\n   }\n \n+  /**\n+   * @see #useExperimentalHardwareAcceleration(boolean)\n+   */\n+  @SuppressWarnings({\"WeakerAccess\", \"unused\"}) public void useExperimentalHardwareAcceleration() {\n+    useExperimentalHardwareAcceleration(true);\n+  }\n+\n   /**\n    * Enable hardware acceleration for this view.\n    * READ THIS BEFORE ENABLING HARDWARE ACCELERATION:\n@@ -260,8 +268,10 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n    *    potentially break hardware rendering with bugs in their SKIA engine. Lottie cannot do\n    *    anything about that.\n    */\n-  @SuppressWarnings({\"WeakerAccess\", \"unused\"}) public void useExperimentalHardwareAcceleration() {\n-    setLayerType(LAYER_TYPE_HARDWARE, null);\n+  @SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+  public void useExperimentalHardwareAcceleration(boolean use) {\n+    useHardwareLayer = use;\n+    enableOrDisableHardwareLayer();\n   }\n \n   /**\n@@ -428,18 +438,22 @@ public boolean isAnimating() {\n \n   public void playAnimation() {\n     lottieDrawable.playAnimation();\n+    enableOrDisableHardwareLayer();\n   }\n \n   public void resumeAnimation() {\n     lottieDrawable.resumeAnimation();\n+    enableOrDisableHardwareLayer();\n   }\n \n   @SuppressWarnings(\"unused\") public void reverseAnimation() {\n     lottieDrawable.reverseAnimation();\n+    enableOrDisableHardwareLayer();\n   }\n \n   @SuppressWarnings(\"unused\") public void resumeReverseAnimation() {\n     lottieDrawable.resumeReverseAnimation();\n+    enableOrDisableHardwareLayer();\n   }\n \n   @SuppressWarnings(\"unused\") public void setSpeed(float speed) {\n@@ -478,12 +492,14 @@ public float getScale() {\n \n   public void cancelAnimation() {\n     lottieDrawable.cancelAnimation();\n+    enableOrDisableHardwareLayer();\n   }\n \n   public void pauseAnimation() {\n     float progress = getProgress();\n     lottieDrawable.cancelAnimation();\n     setProgress(progress);\n+    enableOrDisableHardwareLayer();\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n@@ -498,6 +514,11 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     return composition != null ? composition.getDuration() : 0;\n   }\n \n+  private void enableOrDisableHardwareLayer() {\n+    boolean useHardwareLayer = this.useHardwareLayer && lottieDrawable.isAnimating();\n+    setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_NONE, null);\n+  }\n+\n   private static class SavedState extends BaseSavedState {\n     String animationName;\n     float progress;",
    "output": "Disable hardawre layer when not animating\n\nFixes #255"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -173,7 +173,8 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n         float endValue = Math.min((endLength - totalLength) / length, 1);\n         Utils.applyTrimPathIfNeeded(trimPathPath, startValue, endValue, 0);\n         canvas.drawPath(trimPathPath, paint);\n-      } else //noinspection StatementWithEmptyBody\n+      } else\n+        //noinspection StatementWithEmptyBody\n         if (currentLength + length < startLength || currentLength > endLength) {\n           // Do nothing\n         } else if (currentLength + length <= endLength && startLength < currentLength) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -92,7 +92,7 @@ static void applyTrimPathIfNeeded(\n     pathMeasure.setPath(path, false);\n \n     float length = pathMeasure.getLength();\n-    if (length == 0f) {\n+    if (length == 0f || Math.abs(endValue - startValue - 1) < .01) {\n       return;\n     }\n     float start = length * startValue;\n@@ -110,11 +110,6 @@ static void applyTrimPathIfNeeded(\n       newEnd = MiscUtils.floorMod(newEnd, length);\n     }\n \n-    // If the start and end are length distance apart, just return the path;\n-    if (Math.abs(Math.abs(newEnd - newStart) - length) < 1) {\n-      return;\n-    }\n-\n     if (newStart < 0) {\n       newStart = MiscUtils.floorMod(newStart, length);\n     }",
    "output": "Fix trim paths from 0 -> 1 when there is an offset\n\nFixes #232"
  },
  {
    "input": "diff --git a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n--- a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n+++ b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n@@ -2,6 +2,7 @@\n \n import android.app.Application;\n import android.support.v4.util.Pair;\n+import android.support.v7.app.AppCompatDelegate;\n import android.view.Gravity;\n \n import com.airbnb.lottie.L;\n@@ -12,9 +13,9 @@ public class LottieApplication extends Application implements ILottieApplication\n   private int droppedFrames;\n   private long droppedFramesStartingNs;\n   private long currentFrameNs;\n-\n   @Override public void onCreate() {\n     super.onCreate();\n+    AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);\n     if (L.DBG) {\n       TinyDancer.create()\n           .startingGravity(Gravity.TOP | Gravity.END)\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -8,16 +8,19 @@\n import android.content.DialogInterface;\n import android.content.Intent;\n import android.content.pm.PackageManager;\n+import android.graphics.drawable.Drawable;\n import android.net.Uri;\n import android.os.Bundle;\n import android.os.Handler;\n+import android.support.annotation.DrawableRes;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.design.widget.Snackbar;\n import android.support.v4.app.Fragment;\n import android.support.v4.content.ContextCompat;\n import android.support.v4.util.Pair;\n import android.support.v7.app.AppCompatActivity;\n+import android.support.v7.widget.AppCompatDrawableManager;\n import android.support.v7.widget.AppCompatSeekBar;\n import android.support.v7.widget.Toolbar;\n import android.util.Log;\n@@ -66,7 +69,6 @@ public class AnimationFragment extends Fragment {\n   private static final int RC_QR = 1340;\n   private static final int RC_CAMERA = 1341;\n \n-\n   static final String EXTRA_ANIMATION_NAME = \"animation_name\";\n   static final String EXTRA_URL = \"json_url\";\n   public static final float SCALE_SLIDER_FACTOR = 50f;\n@@ -92,6 +94,10 @@ static AnimationFragment newInstance() {\n   @BindView(R.id.play_button) ImageButton playButton;\n   @BindView(R.id.loop) ImageButton loopButton;\n   @BindView(R.id.animation_name) TextView animationNameView;\n+  @BindView(R.id.qr_code) TextView qrCodeTextView;\n+  @BindView(R.id.sample_animations) TextView sampleAnimationsTextView;\n+  @BindView(R.id.load_animation) TextView loadAnimationTextView;\n+  @BindView(R.id.load_from_json) TextView loadFromJsonTextView;\n \n   @Nullable\n   @Override\n@@ -110,6 +116,12 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n     setHasOptionsMenu(true);\n     postUpdatePlayButtonText();\n     onLoopChanged();\n+\n+    setDrawableLeft(qrCodeTextView, R.drawable.ic_qr_scan);\n+    setDrawableLeft(sampleAnimationsTextView, R.drawable.ic_assets);\n+    setDrawableLeft(loadAnimationTextView, R.drawable.ic_file);\n+    setDrawableLeft(loadFromJsonTextView, R.drawable.ic_network);\n+\n     animationView.addAnimatorListener(new Animator.AnimatorListener() {\n       @Override public void onAnimationStart(Animator animation) {\n         startRecordingDroppedFrames();\n@@ -143,9 +155,11 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         }\n       }\n \n-      @Override public void onStartTrackingTouch(SeekBar seekBar) { }\n+      @Override public void onStartTrackingTouch(SeekBar seekBar) {\n+      }\n \n-      @Override public void onStopTrackingTouch(SeekBar seekBar) { }\n+      @Override public void onStopTrackingTouch(SeekBar seekBar) {\n+      }\n     });\n \n     scaleSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n@@ -154,14 +168,22 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         scaleTextView.setText(String.format(Locale.US, \"%.2f\", animationView.getScale()));\n       }\n \n-      @Override public void onStartTrackingTouch(SeekBar seekBar) { }\n+      @Override public void onStartTrackingTouch(SeekBar seekBar) {\n+      }\n \n-      @Override public void onStopTrackingTouch(SeekBar seekBar) { }\n+      @Override public void onStopTrackingTouch(SeekBar seekBar) {\n+      }\n     });\n \n     return view;\n   }\n \n+  private void setDrawableLeft(TextView textView, @DrawableRes int resId) {\n+    //noinspection RestrictedApi\n+    Drawable drawable = AppCompatDrawableManager.get().getDrawable(getActivity(), resId);\n+    textView.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);\n+  }\n+\n   @Override public void onStop() {\n     animationView.cancelAnimation();\n     super.onStop();\n@@ -248,19 +270,19 @@ void onLoopChanged() {\n   @Override\n   public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\n       @NonNull int[] grantResults) {\n-    if (requestCode==RC_CAMERA && grantResults.length > 0 && grantResults[0] == PackageManager\n+    if (requestCode == RC_CAMERA && grantResults.length > 0 && grantResults[0] == PackageManager\n         .PERMISSION_GRANTED) {\n       startActivityForResult(new Intent(getContext(), QRScanActivity.class), RC_QR);\n     } else {\n-      Toast.makeText(getContext(),R.string.permission_required,Toast.LENGTH_LONG).show();\n+      Toast.makeText(getContext(), R.string.permission_required, Toast.LENGTH_LONG).show();\n     }\n \n   }\n \n   @OnClick(R.id.qrscan)\n   void onQRScanClicked() {\n     animationView.cancelAnimation();\n-    if(ContextCompat.checkSelfPermission(getContext(), Manifest.permission.CAMERA) !=\n+    if (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.CAMERA) !=\n         PackageManager.PERMISSION_GRANTED) {\n \n       requestPermissions(new String[]{Manifest.permission.CAMERA}, RC_CAMERA);",
    "output": "Fix sample app on Android below Lollipop (#258)\n\nIt was crashing for two reasons:\r\n\r\nSome TextViews were using vector drawables as compound drawables\r\nFixed by getting the drawables with AppCompatDrawableManager and\r\nsetting them programmatically\r\n\r\nSome vector drawables are referencing other vector drawables\r\n(example: ic_invert references ic_invert_black)\r\nFixed by calling AppCompatDelegate.setCompatVectorFromResourcesEnabled(true)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -203,7 +203,7 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     for (int i = 0; i < pathGroups.size(); i++) {\n       PathGroup pathGroup = pathGroups.get(i);\n       for (int j = 0; j < pathGroup.paths.size(); j++) {\n-        path.addPath(pathGroup.paths.get(i).getPath(), parentMatrix);\n+        path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n       }\n     }\n     path.computeBounds(rect, false);",
    "output": "Use the proper PathGroup when calculating stroke bounds\n\nFixes #252"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -25,7 +25,7 @@ static Path createPath(PointF startPoint, PointF endPoint, PointF cp1, PointF cp\n     Path path = new Path();\n     path.moveTo(startPoint.x, startPoint.y);\n \n-    if (cp1 != null && cp1.length() != 0 && cp2 != null && cp2.length() != 0) {\n+    if (cp1 != null  && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) { // This Line\n       path.cubicTo(\n           startPoint.x + cp1.x, startPoint.y + cp1.y,\n           endPoint.x + cp2.x, endPoint.y + cp2.y,",
    "output": "Create a path when either control point is non-zero\n\nFixes #251"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -110,13 +110,19 @@ static void applyTrimPathIfNeeded(\n       newEnd = MiscUtils.floorMod(newEnd, length);\n     }\n \n+    // If the start and end are length distance apart, just return the path;\n+    if (Math.abs(Math.abs(newEnd - newStart) - length) < 1) {\n+      return;\n+    }\n+\n     if (newStart < 0) {\n       newStart = MiscUtils.floorMod(newStart, length);\n     }\n     if (newEnd < 0) {\n       newEnd = MiscUtils.floorMod(newEnd, length);\n     }\n \n+    // If the start and end are equals, return an empty path.\n     if (newStart == newEnd) {\n       path.reset();\n       return;",
    "output": "Fixed an issue with trim paths in which the start is just after the end"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -69,6 +69,7 @@ public class AnimationFragment extends Fragment {\n \n   static final String EXTRA_ANIMATION_NAME = \"animation_name\";\n   static final String EXTRA_URL = \"json_url\";\n+  public static final float SCALE_SLIDER_FACTOR = 50f;\n \n   static AnimationFragment newInstance() {\n     return new AnimationFragment();\n@@ -149,7 +150,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     scaleSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n       @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n-        animationView.setScale(progress / 20f);\n+        animationView.setScale(progress / SCALE_SLIDER_FACTOR);\n         scaleTextView.setText(String.format(Locale.US, \"%.2f\", animationView.getScale()));\n       }\n \n@@ -220,7 +221,8 @@ private void setComposition(LottieComposition composition, String name) {\n     animationView.setComposition(composition);\n     animationNameView.setText(name);\n     scaleTextView.setText(String.format(Locale.US, \"%.2f\", animationView.getScale()));\n-    scaleSeekBar.setProgress((int) (animationView.getScale() * 20f));\n+    scaleSeekBar.setProgress((int) (animationView.getScale() * SCALE_SLIDER_FACTOR));\n+\n   }\n \n   @OnClick(R.id.play_button)",
    "output": "Decreased the sensitivity of the scale slider"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n@@ -101,7 +101,7 @@ private void invalidate() {\n       path.arcTo(rect, 90, 90, false);\n     }\n \n-    path.lineTo(position.x - halfWidth, position.y - halfHeight + 2 * radius);\n+    path.lineTo(position.x - halfWidth, position.y - halfHeight + radius);\n \n     if (radius > 0) {\n       rect.set(position.x - halfWidth,\n@@ -111,7 +111,7 @@ private void invalidate() {\n       path.arcTo(rect, 180, 90, false);\n     }\n \n-    path.lineTo(position.x + halfWidth - 2 * radius, position.y - halfHeight);\n+    path.lineTo(position.x + halfWidth - radius, position.y - halfHeight);\n \n     if (radius > 0) {\n       rect.set(position.x + halfWidth - 2 * radius,",
    "output": "Fix an issue with rounded rectangles\n\nFixes #242"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -226,8 +226,7 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n       return;\n     }\n \n-    float scale = lottieDrawable.getScale();\n-    scale *= Utils.getScale(parentMatrix);\n+    float scale = Utils.getScale(parentMatrix);\n     for (int i = 0; i < dashPatternAnimations.size(); i++) {\n       dashPatternValues[i] = dashPatternAnimations.get(i).getValue();\n       // If the value of the dash pattern or gap is too small, the number of individual sections\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -89,10 +89,6 @@ static void applyTrimPathIfNeeded(Path path, @Nullable TrimPathContent trimPath)\n \n   static void applyTrimPathIfNeeded(\n       Path path, float startValue, float endValue, float offsetValue) {\n-    if (startValue == endValue) {\n-      path.reset();\n-    }\n-\n     pathMeasure.setPath(path, false);\n \n     float length = pathMeasure.getLength();\n@@ -121,6 +117,11 @@ static void applyTrimPathIfNeeded(\n       newEnd = MiscUtils.floorMod(newEnd, length);\n     }\n \n+    if (newStart == newEnd) {\n+      path.reset();\n+      return;\n+    }\n+\n     if (newStart >= newEnd) {\n       newStart -= length;\n     }",
    "output": "Fix two minor bugs with stroke and trim path"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -2,8 +2,10 @@\n \n import android.Manifest;\n import android.animation.Animator;\n+import android.animation.ValueAnimator;\n import android.app.Activity;\n import android.app.AlertDialog;\n+import android.content.DialogInterface;\n import android.content.Intent;\n import android.content.pm.PackageManager;\n import android.net.Uri;\n@@ -12,7 +14,6 @@\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.design.widget.Snackbar;\n-import android.support.v4.app.ActivityCompat;\n import android.support.v4.app.Fragment;\n import android.support.v4.content.ContextCompat;\n import android.support.v4.util.Pair;\n@@ -34,6 +35,7 @@\n \n import com.airbnb.lottie.LottieAnimationView;\n import com.airbnb.lottie.LottieComposition;\n+import com.airbnb.lottie.OnCompositionLoadedListener;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -99,7 +101,11 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n     toolbar.setNavigationIcon(R.drawable.ic_back);\n-    toolbar.setNavigationOnClickListener(v -> getFragmentManager().popBackStack());\n+    toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+      @Override public void onClick(View v) {\n+        getFragmentManager().popBackStack();\n+      }\n+    });\n     setHasOptionsMenu(true);\n     postUpdatePlayButtonText();\n     onLoopChanged();\n@@ -123,7 +129,11 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n       }\n     });\n     animationView.addAnimatorUpdateListener(\n-        animation -> seekBar.setProgress((int) (animation.getAnimatedFraction() * 100)));\n+        new ValueAnimator.AnimatorUpdateListener() {\n+          @Override public void onAnimationUpdate(ValueAnimator animation) {\n+            seekBar.setProgress((int) (animation.getAnimatedFraction() * 100));\n+          }\n+        });\n \n     seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n       @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n@@ -186,7 +196,11 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         final String assetName = data.getStringExtra(EXTRA_ANIMATION_NAME);\n         animationView.setImageAssetsFolder(assetFolders.get(assetName));\n         LottieComposition.Factory.fromAssetFileName(getContext(), assetName,\n-            composition -> setComposition(composition, assetName));\n+            new OnCompositionLoadedListener() {\n+              @Override public void onCompositionLoaded(LottieComposition composition) {\n+                setComposition(composition, assetName);\n+              }\n+            });\n         break;\n       case RC_FILE:\n         onFileLoaded(data.getData());\n@@ -300,13 +314,25 @@ void onLoadUrlClicked() {\n     new AlertDialog.Builder(getContext())\n         .setTitle(\"Enter a URL\")\n         .setView(urlView)\n-        .setPositiveButton(\"Load\", (dialog, which) -> loadUrl(urlView.getText().toString()))\n-        .setNegativeButton(\"Cancel\", (dialog, which) -> dialog.dismiss())\n+        .setPositiveButton(\"Load\", new DialogInterface.OnClickListener() {\n+          @Override public void onClick(DialogInterface dialog, int which) {\n+            loadUrl(urlView.getText().toString());\n+          }\n+        })\n+        .setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n+          @Override public void onClick(DialogInterface dialog, int which) {\n+            dialog.dismiss();\n+          }\n+        })\n         .show();\n   }\n \n   private void postUpdatePlayButtonText() {\n-    new Handler().post(this::updatePlayButtonText);\n+    new Handler().post(new Runnable() {\n+      @Override public void run() {\n+        updatePlayButtonText();\n+      }\n+    });\n   }\n \n   private void updatePlayButtonText() {\n@@ -334,8 +360,11 @@ private void onFileLoaded(final Uri uri) {\n     }\n \n     LottieComposition.Factory\n-        .fromInputStream(getContext(), fis,\n-            composition -> setComposition(composition, uri.getPath()));\n+        .fromInputStream(getContext(), fis, new OnCompositionLoadedListener() {\n+          @Override public void onCompositionLoaded(LottieComposition composition) {\n+            setComposition(composition, uri.getPath());\n+          }\n+        });\n   }\n \n   private void loadUrl(String url) {\n@@ -366,8 +395,11 @@ private void loadUrl(String url) {\n         try {\n           JSONObject json = new JSONObject(response.body().string());\n           LottieComposition.Factory\n-              .fromJson(getResources(), json,\n-                  composition -> setComposition(composition, \"Network Animation\"));\n+              .fromJson(getResources(), json, new OnCompositionLoadedListener() {\n+                @Override public void onCompositionLoaded(LottieComposition composition) {\n+                  setComposition(composition, \"Network Animation\");\n+                }\n+              });\n         } catch (JSONException e) {\n           onLoadError();\n         }\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java\n@@ -7,6 +7,7 @@\n import android.os.Vibrator;\n import android.support.v7.app.AppCompatActivity;\n import android.os.Bundle;\n+import android.view.View;\n \n import com.dlazaro66.qrcodereaderview.QRCodeReaderView;\n \n@@ -34,7 +35,11 @@ protected void onCreate(Bundle savedInstanceState) {\n     qrCodeReaderView.setAutofocusInterval(2000L);\n     qrCodeReaderView.setBackCamera();\n     qrCodeReaderView.setOnQRCodeReadListener(this);\n-    qrCodeReaderView.setOnClickListener(v -> qrCodeReaderView.forceAutoFocus());\n+    qrCodeReaderView.setOnClickListener(new View.OnClickListener() {\n+      @Override public void onClick(View v) {\n+        qrCodeReaderView.forceAutoFocus();\n+      }\n+    });\n \n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -299,14 +299,16 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n     lottieDrawable.cancelAnimation();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName,\n-        composition -> {\n-          if (cacheStrategy == CacheStrategy.Strong) {\n-            strongRefCache.put(animationName, composition);\n-          } else if (cacheStrategy == CacheStrategy.Weak) {\n-            weakRefCache.put(animationName, new WeakReference<>(composition));\n+        new OnCompositionLoadedListener() {\n+          @Override public void onCompositionLoaded(LottieComposition composition) {\n+            if (cacheStrategy == CacheStrategy.Strong) {\n+              strongRefCache.put(animationName, composition);\n+            } else if (cacheStrategy == CacheStrategy.Weak) {\n+              weakRefCache.put(animationName, new WeakReference<>(composition));\n+            }\n+\n+            setComposition(composition);\n           }\n-\n-          setComposition(composition);\n         });\n   }\n ",
    "output": "Revert beta gradle\n\nPeople were having issues building and installing. Bye lambdas for now :("
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -1,15 +1,20 @@\n package com.airbnb.lottie.samples;\n \n+import android.Manifest;\n import android.animation.Animator;\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.content.Intent;\n+import android.content.pm.PackageManager;\n import android.net.Uri;\n import android.os.Bundle;\n import android.os.Handler;\n+import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.design.widget.Snackbar;\n+import android.support.v4.app.ActivityCompat;\n import android.support.v4.app.Fragment;\n+import android.support.v4.content.ContextCompat;\n import android.support.v4.util.Pair;\n import android.support.v7.app.AppCompatActivity;\n import android.support.v7.widget.AppCompatSeekBar;\n@@ -56,7 +61,12 @@ public class AnimationFragment extends Fragment {\n   private static final int RC_ASSET = 1337;\n   private static final int RC_FILE = 1338;\n   private static final int RC_URL = 1339;\n+  private static final int RC_QR = 1340;\n+  private static final int RC_CAMERA = 1341;\n+\n+\n   static final String EXTRA_ANIMATION_NAME = \"animation_name\";\n+  static final String EXTRA_URL = \"json_url\";\n \n   static AnimationFragment newInstance() {\n     return new AnimationFragment();\n@@ -183,6 +193,9 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         break;\n       case RC_URL:\n \n+        break;\n+      case RC_QR:\n+        loadUrl(data.getExtras().getString(EXTRA_URL));\n         break;\n     }\n   }\n@@ -216,6 +229,31 @@ void onLoopChanged() {\n     animationView.loop(loopButton.isActivated());\n   }\n \n+  @Override\n+  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\n+      @NonNull int[] grantResults) {\n+    if (requestCode==RC_CAMERA && grantResults.length > 0 && grantResults[0] == PackageManager\n+        .PERMISSION_GRANTED) {\n+      startActivityForResult(new Intent(getContext(), QRScanActivity.class), RC_QR);\n+    } else {\n+      Toast.makeText(getContext(),R.string.permission_required,Toast.LENGTH_LONG).show();\n+    }\n+\n+  }\n+\n+  @OnClick(R.id.qrscan)\n+  void onQRScanClicked() {\n+    animationView.cancelAnimation();\n+    if(ContextCompat.checkSelfPermission(getContext(), Manifest.permission.CAMERA) !=\n+        PackageManager.PERMISSION_GRANTED) {\n+\n+      requestPermissions(new String[]{Manifest.permission.CAMERA}, RC_CAMERA);\n+\n+    } else {\n+      startActivityForResult(new Intent(getContext(), QRScanActivity.class), RC_QR);\n+    }\n+  }\n+\n   @OnClick(R.id.restart)\n   void onRestartClicked() {\n     boolean restart = animationView.isAnimating();\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/QRScanActivity.java\n@@ -0,0 +1,64 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.PointF;\n+import android.os.Vibrator;\n+import android.support.v7.app.AppCompatActivity;\n+import android.os.Bundle;\n+\n+import com.dlazaro66.qrcodereaderview.QRCodeReaderView;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class QRScanActivity extends AppCompatActivity\n+    implements QRCodeReaderView.OnQRCodeReadListener {\n+\n+  @BindView(R.id.qrdecoderview) QRCodeReaderView qrCodeReaderView;\n+  private Vibrator vibrator;\n+\n+  @Override\n+  protected void onCreate(Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_qrscan);\n+    ButterKnife.bind(this);\n+\n+    vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n+\n+    /*\n+     * Initialize the QR Scanner component\n+     */\n+    qrCodeReaderView.setQRDecodingEnabled(true);\n+    qrCodeReaderView.setAutofocusInterval(2000L);\n+    qrCodeReaderView.setBackCamera();\n+    qrCodeReaderView.setOnQRCodeReadListener(this);\n+    qrCodeReaderView.setOnClickListener(v -> qrCodeReaderView.forceAutoFocus());\n+\n+  }\n+\n+  @Override\n+  protected void onPause() {\n+    super.onPause();\n+    qrCodeReaderView.stopCamera();\n+  }\n+\n+  @Override public void onQRCodeRead(String s, PointF[] pointFS) {\n+    vibrator.vibrate(100);\n+\n+    Intent resultIntent = new Intent();\n+    resultIntent.putExtra(AnimationFragment.EXTRA_URL, s);\n+    setResult(Activity.RESULT_OK, resultIntent);\n+    finish();\n+  }\n+\n+  @Override\n+  protected void onResume() {\n+    super.onResume();\n+    qrCodeReaderView.startCamera();\n+  }\n+\n+\n+\n+}",
    "output": "adapted QR Scanner from Lottie Preview (#248)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -21,6 +21,7 @@ abstract class BaseLayer implements DrawingContent, BaseKeyframeAnimation.Animat\n   private static final int SAVE_FLAGS = Canvas.CLIP_SAVE_FLAG | Canvas.CLIP_TO_LAYER_SAVE_FLAG |\n       Canvas.MATRIX_SAVE_FLAG;\n \n+  @Nullable\n   static BaseLayer forModel(\n     Layer layerModel, LottieDrawable drawable, LottieComposition composition) {\n     switch (layerModel.getLayerType()) {\n@@ -40,7 +41,7 @@ static BaseLayer forModel(\n       default:\n         // Do nothing\n         Log.w(L.TAG, \"Unknown layer type \" + layerModel.getLayerType());\n-        return new NullLayer(drawable, layerModel);\n+        return null;\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java\n@@ -26,6 +26,9 @@ class CompositionLayer extends BaseLayer {\n     for (int i = layerModels.size() - 1; i >= 0; i--) {\n       Layer lm = layerModels.get(i);\n       BaseLayer layer = BaseLayer.forModel(lm, lottieDrawable, composition);\n+      if (layer == null) {\n+        continue;\n+      }\n       layerMap.put(layer.getLayerModel().getId(), layer);\n       if (mattedLayer != null) {\n         mattedLayer.setMatteLayer(layer);",
    "output": "Return null instead of NullLayer for unsupported layers\n\nThis should also prevent strange crashes from unsupported layers."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie;\n \n import android.graphics.PointF;\n+import android.util.Log;\n \n import org.json.JSONObject;\n \n@@ -45,7 +46,11 @@ static AnimatableTransform newInstance(JSONObject json, LottieComposition compos\n       if (anchorJson != null) {\n         anchorPoint = new AnimatablePathValue(anchorJson.opt(\"k\"), composition);\n       } else {\n-        throwMissingTransform(\"anchor\");\n+        // Cameras don't have an anchor point property. Although we don't support them, at least\n+        // we won't crash.\n+        Log.w(L.TAG, \"Layer has no transform property. You may be using an unsupported \" +\n+            \"layer type such as a camera.\");\n+        anchorPoint = new AnimatablePathValue();\n       }\n \n       JSONObject positionJson = json.optJSONObject(\"p\");",
    "output": "Prevent a crash when using certain layer types like Camera"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie;\n \n import android.graphics.Color;\n+import android.support.annotation.IntRange;\n import android.util.Log;\n \n import org.json.JSONArray;\n@@ -28,34 +29,54 @@ private Factory() {\n     static AnimatableGradientColorValue newInstance(\n         JSONObject json, LottieComposition composition) {\n       AnimatableValueParser.Result<GradientColor> result = AnimatableValueParser\n-          .newInstance(json, 1, composition, ValueFactory.INSTANCE)\n+          .newInstance(json, 1, composition, new ValueFactory(json.optInt(\"p\")))\n           .parseJson();\n       GradientColor initialValue = result.initialValue;\n       return new AnimatableGradientColorValue(result.keyframes, initialValue);\n     }\n   }\n \n   private static class ValueFactory implements AnimatableValue.Factory<GradientColor> {\n-    private static final ValueFactory INSTANCE = new ValueFactory();\n+    private final int colorPoints;\n \n-    private ValueFactory() {\n+    private ValueFactory(int colorPoints) {\n+      this.colorPoints = colorPoints;\n     }\n \n+    /**\n+     * Both the color stops and opacity stops are in the same array.\n+     * There are {@link #colorPoints} colors sequentially as:\n+     * [\n+     *     ...,\n+     *     position,\n+     *     red,\n+     *     green,\n+     *     blue,\n+     *     ...\n+     * ]\n+     *\n+     * The remainder of the array is the opacity stops sequentially as:\n+     * [\n+     *     ...,\n+     *     position,\n+     *     opacity,\n+     *     ...\n+     * ]\n+     */\n     @Override public GradientColor valueFromObject(Object object, float scale) {\n       JSONArray array = (JSONArray) object;\n-      int size = array.length() / 4;\n-      float[] positions = new float[size];\n-      int[] colors = new int[size];\n+      float[] positions = new float[colorPoints];\n+      int[] colors = new int[colorPoints];\n       GradientColor gradientColor = new GradientColor(positions, colors);\n       int r = 0;\n       int g = 0;\n-      if (array.length() != size * 4) {\n+      if (array.length() != colorPoints * 4) {\n         Log.w(L.TAG, \"Unexpected gradient length: \" + array.length() +\n-            \". Expected \" + (size * 4) + \". This may affect the appearance of the gradient. \" +\n+            \". Expected \" + (colorPoints * 4) + \". This may affect the appearance of the gradient. \" +\n             \"Make sure to save your After Effects file before exporting an animation with \" +\n             \"gradients.\");\n       }\n-      for (int i = 0; i < size * 4; i++) {\n+      for (int i = 0; i < colorPoints * 4; i++) {\n         int colorIndex = i / 4;\n         double value = array.optDouble(i);\n         switch (i % 4) {\n@@ -75,7 +96,62 @@ private ValueFactory() {\n             break;\n         }\n       }\n+\n+      addOpacityStopsToGradientIfNeeded(gradientColor, array);\n       return gradientColor;\n     }\n+\n+    /**\n+     * This cheats a little bit.\n+     * Opacity stops can be at arbitrary intervals independent of color stops.\n+     * This uses the existing color stops and modifies the opacity at each existing color stop\n+     * based on what the opacity would be.\n+     *\n+     * This should be a good approximation is nearly all cases. However, if there are many more\n+     * opacity stops than color stops, information will be lost.\n+     */\n+    private void addOpacityStopsToGradientIfNeeded(GradientColor gradientColor, JSONArray array) {\n+      int startIndex = colorPoints * 4;\n+      if (array.length() <= startIndex) {\n+        return;\n+      }\n+\n+      int opacityStops = (array.length() - startIndex) / 2;\n+      double[] positions = new double[opacityStops];\n+      double[] opacities = new double[opacityStops];\n+\n+      for (int i = startIndex, j = 0; i < array.length(); i++) {\n+        if (i % 2 == 0) {\n+          positions[j] = array.optDouble(i);\n+        } else {\n+          opacities[j] = array.optDouble(i);\n+          j++;\n+        }\n+      }\n+\n+      for (int i = 0; i < gradientColor.getSize(); i++) {\n+        int color = gradientColor.getColors()[i];\n+        color = Color.argb(\n+            getOpacityAtPosition(gradientColor.getPositions()[i], positions, opacities),\n+            Color.red(color),\n+            Color.green(color),\n+            Color.blue(color)\n+        );\n+        gradientColor.getColors()[i] = color;\n+      }\n+    }\n+\n+    @IntRange(from=0, to=255)\n+    private int getOpacityAtPosition(double position, double[] positions, double[] opacities) {\n+      for (int i = 1; i < positions.length; i++) {\n+        double lastPosition = positions[i - 1];\n+        double thisPosition = positions[i];\n+        if (positions[i] >= position) {\n+          double progress = (position - lastPosition) / (thisPosition - lastPosition);\n+          return (int) (255 * MiscUtils.lerp(opacities[i - 1], opacities[i], progress));\n+        }\n+      }\n+      return (int) (255 * opacities[opacities.length - 1]);\n+    }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFill.java b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n@@ -3,6 +3,7 @@\n import android.graphics.Path;\n import android.support.annotation.Nullable;\n \n+import org.json.JSONException;\n import org.json.JSONObject;\n \n class GradientFill {\n@@ -78,7 +79,15 @@ static GradientFill newInstance(JSONObject json, LottieComposition composition)\n \n       JSONObject jsonColor = json.optJSONObject(\"g\");\n       if (jsonColor != null && jsonColor.has(\"k\")) {\n+        // This is a hack because the \"p\" value which contains the number of color points is outside\n+        // of \"k\" which contains the useful data.\n+        int points = jsonColor.optInt(\"p\");\n         jsonColor = jsonColor.optJSONObject(\"k\");\n+        try {\n+          jsonColor.put(\"p\", points);\n+        } catch (JSONException e) {\n+          // Do nothing. This shouldn't fail.\n+        }\n       }\n       AnimatableGradientColorValue color = null;\n       if (jsonColor != null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n@@ -28,6 +28,10 @@ static float lerp(float a, float b, @FloatRange(from = 0f, to = 1f) float percen\n     return a + percentage * (b - a);\n   }\n \n+  static double lerp(double a, double b, @FloatRange(from = 0f, to = 1f) double percentage) {\n+    return a + percentage * (b - a);\n+  }\n+\n   static int lerp(int a, int b, @FloatRange(from = 0f, to = 1f) float percentage) {\n     return (int) (a + percentage * (b - a));\n   }",
    "output": "Add support for opacity stops in gradients\n\nFixes #236"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -492,7 +492,7 @@ private static class ColorFilterData {\n     @Nullable final String contentName;\n     @Nullable final ColorFilter colorFilter;\n \n-    ColorFilterData(String layerName, @Nullable String contentName,\n+    ColorFilterData(@Nullable String layerName, @Nullable String contentName,\n         @Nullable ColorFilter colorFilter) {\n       this.layerName = layerName;\n       this.contentName = contentName;",
    "output": "Add `@Nullable` to ColorFilterData constructor"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -142,8 +142,8 @@ private void init(@Nullable AttributeSet attrs) {\n    * @param contentName name of the specific content that the color filter is to be applied\n    * @param colorFilter the color filter, null to clear the color filter\n    */\n-  public void addColorFilterToContent(String layerName, String contentName,\n-      @Nullable ColorFilter colorFilter) {\n+  @SuppressWarnings(\"unused\") public void addColorFilterToContent(\n+      String layerName, String contentName, @Nullable ColorFilter colorFilter) {\n     lottieDrawable.addColorFilterToContent(layerName, contentName, colorFilter);\n   }\n \n@@ -152,7 +152,8 @@ public void addColorFilterToContent(String layerName, String contentName,\n    * @param layerName name of the layer that the color filter is to be applied\n    * @param colorFilter the color filter, null to clear the color filter\n    */\n-  public void addColorFilterToLayer(String layerName, @Nullable ColorFilter colorFilter) {\n+  @SuppressWarnings(\"unused\") public void addColorFilterToLayer(\n+      String layerName, @Nullable ColorFilter colorFilter) {\n     lottieDrawable.addColorFilterToLayer(layerName, colorFilter);\n   }\n \n@@ -167,7 +168,7 @@ public void addColorFilter(@Nullable ColorFilter colorFilter) {\n   /**\n    * Clear all color filters on all layers and all content in the layers\n    */\n-  public void clearColorFilters() {\n+  @SuppressWarnings(\"unused\") public void clearColorFilters() {\n     lottieDrawable.clearColorFilters();\n   }\n \n@@ -298,17 +299,14 @@ public void enableMergePathsForKitKatAndAbove(boolean enable) {\n     lottieDrawable.cancelAnimation();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName,\n-        new OnCompositionLoadedListener() {\n-          @Override\n-          public void onCompositionLoaded(LottieComposition composition) {\n-            if (cacheStrategy == CacheStrategy.Strong) {\n-              strongRefCache.put(animationName, composition);\n-            } else if (cacheStrategy == CacheStrategy.Weak) {\n-              weakRefCache.put(animationName, new WeakReference<>(composition));\n-            }\n-\n-            setComposition(composition);\n+        composition -> {\n+          if (cacheStrategy == CacheStrategy.Strong) {\n+            strongRefCache.put(animationName, composition);\n+          } else if (cacheStrategy == CacheStrategy.Weak) {\n+            weakRefCache.put(animationName, new WeakReference<>(composition));\n           }\n+\n+          setComposition(composition);\n         });\n   }\n ",
    "output": "Bumped gradle, build tools, and supper lib versions\n\nAlso enabled Java8 features"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie;\n \n import android.graphics.Color;\n+import android.util.Log;\n \n import org.json.JSONArray;\n import org.json.JSONObject;\n@@ -48,7 +49,13 @@ private ValueFactory() {\n       GradientColor gradientColor = new GradientColor(positions, colors);\n       int r = 0;\n       int g = 0;\n-      for (int i = 0; i < array.length(); i++) {\n+      if (array.length() != size * 4) {\n+        Log.w(L.TAG, \"Unexpected gradient length: \" + array.length() +\n+            \". Expected \" + (size * 4) + \". This may affect the appearance of the gradient. \" +\n+            \"Make sure to save your After Effects file before exporting an animation with \" +\n+            \"gradients.\");\n+      }\n+      for (int i = 0; i < size * 4; i++) {\n         int colorIndex = i / 4;\n         double value = array.optDouble(i);\n         switch (i % 4) {",
    "output": "Prevent a crash when receiving an unexpected gradient length\n\n#236"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java\n@@ -15,6 +15,12 @@\n import java.util.List;\n \n class Keyframe<T> {\n+  /**\n+   * Some animations get exported with insane cp values in the tens of thousands.\n+   * PathInterpolator fails to create the interpolator in those cases and hangs.\n+   * Clamping the cp helps prevent that.\n+   */\n+  private static final float MAX_CP_VALUE = 100;\n   private static final Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();\n \n   /**\n@@ -121,6 +127,10 @@ static <T> Keyframe<T> newInstance(JSONObject json, LottieComposition compositio\n           // TODO: create a HoldInterpolator so progress changes don't invalidate.\n           interpolator = LINEAR_INTERPOLATOR;\n         } else if (cp1 != null) {\n+          cp1.x = MiscUtils.clamp(cp1.x, -MAX_CP_VALUE, MAX_CP_VALUE);\n+          cp1.y = MiscUtils.clamp(cp1.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n+          cp2.x = MiscUtils.clamp(cp2.x, -MAX_CP_VALUE, MAX_CP_VALUE);\n+          cp2.y = MiscUtils.clamp(cp2.y, -MAX_CP_VALUE, MAX_CP_VALUE);\n           interpolator = PathInterpolatorCompat.create(\n               cp1.x / scale, cp1.y / scale, cp2.x / scale, cp2.y / scale);\n         } else {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n@@ -54,4 +54,8 @@ private static int floorDiv(int x, int y) {\n     }\n     return r;\n   }\n+\n+  static float clamp(float number, float min, float max) {\n+    return Math.max(min, Math.min(max, number));\n+  }\n }",
    "output": "Prevent hanging when a control point has an enormous value\n\nFixes #224"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -117,7 +117,7 @@ abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimatio\n       // Android draws a hairline stroke for 0, After Effects doesn't.\n       return;\n     }\n-    applyDashPatternIfNeeded();\n+    applyDashPatternIfNeeded(parentMatrix);\n \n     for (int i = 0; i < pathGroups.size(); i++) {\n       PathGroup pathGroup = pathGroups.get(i);\n@@ -221,12 +221,13 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr\n     );\n   }\n \n-  private void applyDashPatternIfNeeded() {\n+  private void applyDashPatternIfNeeded(Matrix parentMatrix) {\n     if (dashPatternAnimations.isEmpty()) {\n       return;\n     }\n \n     float scale = lottieDrawable.getScale();\n+    scale *= Utils.getScale(parentMatrix);\n     for (int i = 0; i < dashPatternAnimations.size(); i++) {\n       dashPatternValues[i] = dashPatternAnimations.get(i).getValue();\n       // If the value of the dash pattern or gap is too small, the number of individual sections",
    "output": "Apply scale matrix to trim paths\n\n#226"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n@@ -31,4 +31,27 @@ static float lerp(float a, float b, @FloatRange(from = 0f, to = 1f) float percen\n   static int lerp(int a, int b, @FloatRange(from = 0f, to = 1f) float percentage) {\n     return (int) (a + percentage * (b - a));\n   }\n+\n+  static int floorMod(float x, float y) {\n+    return floorMod((int) x, (int) y);\n+  }\n+\n+  /**\n+   * Copied from Math.floorMod in the Android platform.\n+   */\n+  static int floorMod(int x, int y) {\n+    return x - floorDiv(x, y) * y;\n+  }\n+\n+  /**\n+   * Copied from Math.floorDiv in the Android platform.\n+   */\n+  private static int floorDiv(int x, int y) {\n+    int r = x / y;\n+    // if the signs are different and modulo not zero, round down\n+    if ((x ^ y) < 0 && (r * y != x)) {\n+      r--;\n+    }\n+    return r;\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -110,9 +110,17 @@ static void applyTrimPathIfNeeded(\n \n     // If the trim path has rotated around the path, we need to shift it back.\n     if (newStart >= length && newEnd >= length) {\n-      newStart %= length;\n-      newEnd %= length;\n+      newStart = MiscUtils.floorMod(newStart, length);\n+      newEnd = MiscUtils.floorMod(newEnd, length);\n     }\n+\n+    if (newStart < 0) {\n+      newStart = MiscUtils.floorMod(newStart, length);\n+    }\n+    if (newEnd < 0) {\n+      newEnd = MiscUtils.floorMod(newEnd, length);\n+    }\n+\n     if (newStart >= newEnd) {\n       newStart -= length;\n     }",
    "output": "Improved support for negative trim path offsets\n\n#226"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java b/lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java\n@@ -37,8 +37,10 @@ static PathKeyframe newInstance(JSONObject json, LottieComposition composition,\n       PathKeyframe pathKeyframe = new PathKeyframe(composition, keyframe.startValue,\n           keyframe.endValue, keyframe.interpolator, keyframe.startFrame, keyframe.endFrame);\n \n+      boolean equals = keyframe.endValue != null && keyframe.startValue != null &&\n+          keyframe.startValue.equals(keyframe.endValue.x, keyframe.endValue.y);\n       //noinspection ConstantConditions\n-      if (keyframe.endValue != null && !keyframe.startValue.equals(keyframe.endValue)) {\n+      if (pathKeyframe.endValue != null && !equals) {\n         pathKeyframe.path = Utils.createPath(keyframe.startValue, keyframe.endValue, cp1, cp2);\n       }\n       return pathKeyframe;",
    "output": "Fixed a bug with path animations on Jellybean\n\nPointF didn't have an `equals(PointF other)` method until jb-mr2.\nPrior to that, you had to use `equals(float x, float y)`. This\nbroke path animations which relied on that method.\nThis commit uses the backwards compatible `equals(float x, float y)`\nmethod.\n\nFixes #227"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -501,8 +501,13 @@ private static class ColorFilterData {\n \n     @Override public int hashCode() {\n       int hashCode = 17;\n-      hashCode = hashCode * 31 * layerName.hashCode();\n-      hashCode = hashCode * 31 * contentName.hashCode();\n+      if (layerName != null) {\n+        hashCode = hashCode * 31 * layerName.hashCode();\n+      }\n+\n+      if (contentName != null) {\n+        hashCode = hashCode * 31 * contentName.hashCode();\n+      }\n       return hashCode;\n     }\n ",
    "output": "fix crash if either layer name or content name were null (#234)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -96,6 +96,9 @@ static void applyTrimPathIfNeeded(\n     pathMeasure.setPath(path, false);\n \n     float length = pathMeasure.getLength();\n+    if (length == 0f) {\n+      return;\n+    }\n     float start = length * startValue;\n     float end = length * endValue;\n     float newStart = Math.min(start, end);\n@@ -106,11 +109,11 @@ static void applyTrimPathIfNeeded(\n     newEnd += offset;\n \n     // If the trim path has rotated around the path, we need to shift it back.\n-    if (newStart > length && newEnd > length) {\n+    if (newStart >= length && newEnd >= length) {\n       newStart %= length;\n       newEnd %= length;\n     }\n-    if (newStart > newEnd) {\n+    if (newStart >= newEnd) {\n       newStart -= length;\n     }\n ",
    "output": "Offset trim path by length if the start equals the end\n\nFixes #232"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -15,14 +15,10 @@\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.util.Log;\n-import android.util.StringBuilderPrinter;\n import android.view.View;\n import android.view.animation.LinearInterpolator;\n \n-import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n \n /**\n@@ -304,7 +300,7 @@ void systemAnimationsAreDisabled() {\n   }\n \n   @SuppressWarnings(\"WeakerAccess\") public void playAnimation() {\n-    playAnimation(false);\n+    playAnimation((progress > 0.0 && progress < 1.0));\n   }\n \n   @SuppressWarnings(\"WeakerAccess\") public void resumeAnimation() {\n@@ -328,7 +324,7 @@ private void playAnimation(boolean setStartTime) {\n   }\n \n   @SuppressWarnings(\"WeakerAccess\") public void reverseAnimation() {\n-    reverseAnimation(false);\n+    reverseAnimation((progress > 0.0 && progress < 1.0));\n   }\n \n   private void reverseAnimation(boolean setStartTime) {",
    "output": "LottieDrawable: {play/reverse}Animation: Assert progress and update setSetTime properly (#228)\n\n* Allow playAnimation() to mimic behavior of resumeAnimation(), if and only if, progress has occured.\r\n\r\nSigned-off-by: Brandon McAnsh <brandon.mcansh@gmail.com>"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/SimpleColorFilter.java b/lottie/src/main/java/com/airbnb/lottie/SimpleColorFilter.java\n--- a/lottie/src/main/java/com/airbnb/lottie/SimpleColorFilter.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/SimpleColorFilter.java\n@@ -0,0 +1,19 @@\n+package com.airbnb.lottie;\n+\n+import android.graphics.PorterDuff;\n+import android.graphics.PorterDuffColorFilter;\n+import android.support.annotation.ColorInt;\n+\n+/**\n+ * A color filter with a predefined transfer mode that applies the specified color on top of the\n+ * original color. As there are many other transfer modes, please take a look at the definition\n+ * of PorterDuff.Mode.SRC_ATOP to find one that suits your needs.\n+ * This site has a great explanation of Porter/Duff compositing algebra as well as a visual\n+ * representation of many of the transfer modes:\n+ * http://ssp.impulsetrain.com/porterduff.html\n+ */\n+public class SimpleColorFilter extends PorterDuffColorFilter {\n+  public SimpleColorFilter(@ColorInt int color) {\n+    super(color, PorterDuff.Mode.SRC_ATOP);\n+  }\n+}",
    "output": "add color filter documentation to README (#219)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java\n@@ -104,7 +104,9 @@ abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimatio\n         currentPathGroup.paths.add((PathContent) content);\n       }\n     }\n-    pathGroups.add(currentPathGroup);\n+    if (currentPathGroup != null) {\n+      pathGroups.add(currentPathGroup);\n+    }\n   }\n \n   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {",
    "output": "Only add the first path group if it is non-null\n\nFixes #210"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFill.java b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n@@ -94,7 +94,7 @@ static GradientFill newInstance(JSONObject json, LottieComposition composition)\n       int fillTypeInt = json.optInt(\"r\", 1);\n       Path.FillType fillType = fillTypeInt == 1 ? Path.FillType.WINDING : Path.FillType.EVEN_ODD;\n \n-      int gradientTypeInt = json.optInt(\"r\", 1);\n+      int gradientTypeInt = json.optInt(\"t\", 1);\n       GradientType gradientType = gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;\n \n       JSONObject jsonStartPoint = json.optJSONObject(\"s\");",
    "output": "Use \"t\" instead of \"r\" for gradient type\n\n#47"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -421,8 +421,10 @@ public void resumeAnimation() {\n \n   void setScale(float scale) {\n     lottieDrawable.setScale(scale);\n-    setImageDrawable(null);\n-    setImageDrawable(lottieDrawable);\n+    if (getDrawable() == lottieDrawable) {\n+      setImageDrawable(null);\n+      setImageDrawable(lottieDrawable);\n+    }\n   }\n \n   public void cancelAnimation() {",
    "output": "Only reset the drawable in setScale if lottieDrawable is the current drawable"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -192,7 +192,11 @@ private void init(@Nullable AttributeSet attrs) {\n   }\n \n   @VisibleForTesting void recycleBitmaps() {\n-    lottieDrawable.recycleBitmaps();\n+    // AppCompatImageView constructor will set the image when set from xml\n+    // before LottieDrawable has been initialized\n+    if (lottieDrawable != null) {\n+        lottieDrawable.recycleBitmaps();\n+    }\n   }\n \n   /**\n@@ -482,4 +486,4 @@ public SavedState[] newArray(int size) {\n           }\n         };\n   }\n-}\n\\ No newline at end of file\n+}",
    "output": "Assert LottieDrawable when recycling bitmaps (#209)\n\nrecycleBitmaps gets called from the super constructor of LottieAnimationView when a drawable is set from xml and causes a crash."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -50,6 +50,7 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Mail Sent.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Play and Like It.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Gears.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Permission.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Postcard.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Preloader.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Star Wars Rey.json\");",
    "output": "Added Permission from lottifiles"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n@@ -78,6 +78,18 @@ class StrokeContent implements DrawingContent, BaseKeyframeAnimation.AnimationLi\n   }\n \n   @Override public void setContents(List<Content> contentsBefore, List<Content> contentsAfter) {\n+    TrimPathContent trimPathContentBefore = null;\n+    for (int i = contentsBefore.size() - 1; i >= 0; i--) {\n+      Content content = contentsBefore.get(i);\n+      if (content instanceof TrimPathContent &&\n+          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Individually) {\n+        trimPathContentBefore = (TrimPathContent) content;\n+      }\n+    }\n+    if (trimPathContentBefore != null) {\n+      trimPathContentBefore.addListener(this);\n+    }\n+\n     PathGroup currentPathGroup = null;\n     for (int i = contentsAfter.size() - 1; i >= 0; i--) {\n       Content content = contentsAfter.get(i);\n@@ -90,7 +102,7 @@ class StrokeContent implements DrawingContent, BaseKeyframeAnimation.AnimationLi\n         ((TrimPathContent) content).addListener(this);\n       } else if (content instanceof PathContent) {\n         if (currentPathGroup == null) {\n-          currentPathGroup = new PathGroup(null);\n+          currentPathGroup = new PathGroup(trimPathContentBefore);\n         }\n         currentPathGroup.paths.add((PathContent) content);\n       }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -89,6 +89,10 @@ static void applyTrimPathIfNeeded(Path path, @Nullable TrimPathContent trimPath)\n \n   static void applyTrimPathIfNeeded(\n       Path path, float startValue, float endValue, float offsetValue) {\n+    if (startValue == endValue) {\n+      path.reset();\n+    }\n+\n     pathMeasure.setPath(path, false);\n \n     float length = pathMeasure.getLength();",
    "output": "Support TrimPath when set before the stroke"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFill.java b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java\n@@ -106,11 +106,8 @@ static GradientFill newInstance(JSONObject json, LottieComposition composition)\n         endPoint = AnimatablePointValue.Factory.newInstance(jsonEndPoint, composition);\n       }\n \n-      // TODO: radial gradients.\n-\n       return new GradientFill(\n           gradientType, fillType, color, opacity, startPoint, endPoint, null, null);\n-\n     }\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n@@ -6,6 +6,7 @@\n import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.PointF;\n+import android.graphics.RadialGradient;\n import android.graphics.RectF;\n import android.graphics.Shader;\n import android.support.v4.util.LongSparseArray;\n@@ -18,11 +19,13 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n    * Cache the gradients such that it runs at 30fps.\n    */\n   private static final int CACHE_STEPS_MS = 32;\n-  private final LongSparseArray<LinearGradient> gradientCache = new LongSparseArray<>();\n+  private final LongSparseArray<LinearGradient> linearGradientCache = new LongSparseArray<>();\n+  private final LongSparseArray<RadialGradient> radialGradientCache = new LongSparseArray<>();\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final RectF boundsRect = new RectF();\n   private final List<PathContent> paths = new ArrayList<>();\n+  private final GradientFill.GradientType type;\n   private final KeyframeAnimation<GradientColor> colorAnimation;\n   private final KeyframeAnimation<Integer> opacityAnimation;\n   private final KeyframeAnimation<PointF> startPointAnimation;\n@@ -32,6 +35,7 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n \n   GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer, GradientFill fill) {\n     this.lottieDrawable = lottieDrawable;\n+    type = fill.getGradientType();\n     path.setFillType(fill.getFillType());\n     cacheSteps = (int) (lottieDrawable.getComposition().getDuration() / CACHE_STEPS_MS);\n \n@@ -73,7 +77,11 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n \n     path.computeBounds(boundsRect, false);\n \n-    paint.setShader(getGradient());\n+    if (type == GradientFill.GradientType.Linear) {\n+      paint.setShader(getLinearGradient());\n+    } else {\n+      paint.setShader(getRadialGradient());\n+    }\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n     paint.setAlpha(alpha);\n \n@@ -96,9 +104,9 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n     );\n   }\n \n-  private LinearGradient getGradient() {\n+  private LinearGradient getLinearGradient() {\n     int gradientHash = getGradientHash();\n-    LinearGradient gradient = gradientCache.get(gradientHash);\n+    LinearGradient gradient = linearGradientCache.get(gradientHash);\n     if (gradient != null) {\n       return gradient;\n     }\n@@ -112,7 +120,28 @@ private LinearGradient getGradient() {\n     int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n     int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n     gradient = new LinearGradient(x0, y0, x1, y1, colors, positions, Shader.TileMode.CLAMP);\n-    gradientCache.put(gradientHash, gradient);\n+    linearGradientCache.put(gradientHash, gradient);\n+    return gradient;\n+  }\n+\n+  private RadialGradient getRadialGradient() {\n+    int gradientHash = getGradientHash();\n+    RadialGradient gradient = radialGradientCache.get(gradientHash);\n+    if (gradient != null) {\n+      return gradient;\n+    }\n+    PointF startPoint = startPointAnimation.getValue();\n+    PointF endPoint = endPointAnimation.getValue();\n+    GradientColor gradientColor = colorAnimation.getValue();\n+    int[] colors = gradientColor.getColors();\n+    float[] positions = gradientColor.getPositions();\n+    int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);\n+    int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n+    int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n+    int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n+    float r = (float) Math.hypot(x1 - x0, y1 - y0);\n+    gradient = new RadialGradient(x0, y0, r, colors, positions, Shader.TileMode.CLAMP);\n+    radialGradientCache.put(gradientHash, gradient);\n     return gradient;\n   }\n ",
    "output": "Add support for radial gradients\n\nFixes #47"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -69,6 +69,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n   private CacheStrategy defaultCacheStrategy;\n   private String animationName;\n   private boolean wasAnimatingWhenDetached = false;\n+  private boolean autoPlay = false;\n \n   @Nullable private Cancellable compositionLoader;\n   /**\n@@ -99,6 +100,7 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n       lottieDrawable.playAnimation();\n+      autoPlay = true;\n     }\n     lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n@@ -175,7 +177,7 @@ private void init(@Nullable AttributeSet attrs) {\n \n   @Override protected void onAttachedToWindow() {\n     super.onAttachedToWindow();\n-    if (wasAnimatingWhenDetached) {\n+    if (autoPlay && wasAnimatingWhenDetached) {\n       playAnimation();\n     }\n   }",
    "output": "Only resume animation when attached if attr/autoPlay was set\n\nFixes #202"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -2,5 +2,5 @@\n \n public class L {\n   static final String TAG = \"LOTTIE\";\n-  public static final boolean DBG = true;\n+  public static final boolean DBG = false;\n }",
    "output": "Disable debug mode"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -18,6 +18,9 @@\n import android.support.v7.widget.Toolbar;\n import android.util.Log;\n import android.view.LayoutInflater;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.EditText;\n@@ -92,6 +95,7 @@ public void onClick(View v) {\n         getFragmentManager().popBackStack();\n       }\n     });\n+    setHasOptionsMenu(true);\n     postUpdatePlayButtonText();\n     onLoopChanged();\n     animationView.addAnimatorListener(new Animator.AnimatorListener() {\n@@ -142,6 +146,26 @@ public void onAnimationUpdate(ValueAnimator animation) {\n     super.onStop();\n   }\n \n+  @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n+    inflater.inflate(R.menu.fragment_animation, menu);\n+  }\n+\n+  @Override public boolean onOptionsItemSelected(MenuItem item) {\n+    if (item.isCheckable()) {\n+      item.setChecked(!item.isChecked());\n+    }\n+    switch (item.getItemId()) {\n+      case R.id.hardware_acceleration:\n+        int layerType = item.isChecked() ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_SOFTWARE;\n+        animationView.setLayerType(layerType, null);\n+        return true;\n+      case R.id.merge_paths:\n+        animationView.enableMergePathsForKitKatAndAbove(item.isChecked());\n+        return true;\n+    }\n+    return super.onOptionsItemSelected(item);\n+  }\n+\n   @Override public void onActivityResult(int requestCode, int resultCode, Intent data) {\n     if (resultCode != Activity.RESULT_OK) {\n       return;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n@@ -88,7 +88,7 @@ class StrokeContent implements DrawingContent, BaseKeyframeAnimation.AnimationLi\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n     paint.setAlpha(alpha);\n     paint.setStrokeWidth(widthAnimation.getValue() * Utils.getScale(parentMatrix));\n-    if (paint.getStrokeWidth() < 1) {\n+    if (paint.getStrokeWidth() <= 0) {\n       // Android draws a hairline stroke for 0, After Effects doesn't.\n       return;\n     }",
    "output": "Added an option to toggle hardware acceleration and merge paths in the sample app"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -31,7 +31,7 @@ static BaseLayer forModel(\n       case Solid:\n         return new SolidLayer(drawable, layerModel);\n       case Image:\n-        return new ImageLayer(drawable, layerModel);\n+        return new ImageLayer(drawable, layerModel, composition.getDpScale());\n       case Null:\n         return new NullLayer(drawable, layerModel);\n       case Text:\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ImageLayer.java b/lottie/src/main/java/com/airbnb/lottie/ImageLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageLayer.java\n@@ -4,16 +4,21 @@\n import android.graphics.Canvas;\n import android.graphics.Matrix;\n import android.graphics.Paint;\n+import android.graphics.Rect;\n import android.graphics.RectF;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n \n class ImageLayer extends BaseLayer {\n \n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG);\n+  private final Rect src = new Rect();\n+  private final Rect dst = new Rect();\n+  private final float density;\n \n-  ImageLayer(LottieDrawable lottieDrawable, Layer layerModel) {\n+  ImageLayer(LottieDrawable lottieDrawable, Layer layerModel, float density) {\n     super(lottieDrawable, layerModel);\n+    this.density = density;\n   }\n \n   @Override public void drawLayer(@NonNull Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n@@ -24,7 +29,9 @@ class ImageLayer extends BaseLayer {\n     paint.setAlpha(parentAlpha);\n     canvas.save();\n     canvas.concat(parentMatrix);\n-    canvas.drawBitmap(bitmap, 0, 0 , paint);\n+    src.set(0, 0, bitmap.getWidth(), bitmap.getHeight());\n+    dst.set(0, 0, (int) (bitmap.getWidth() * density), (int) (bitmap.getHeight() * density));\n+    canvas.drawBitmap(bitmap, src, dst , paint);\n     canvas.restore();\n   }\n ",
    "output": "Fix bitmap scaling when using hardware acceleration\n\n#151"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -32,6 +32,8 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"PinJump.json\");\n     TestRobot.testLinearAnimation(activity, \"TwitterHeart.json\");\n     TestRobot.testLinearAnimation(activity, \"WeAccept.json\", \"Images/WeAccept\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Animated Graph.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Beating Heart.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Progress Success.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Touch ID.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Loading 1.json\");\n@@ -45,10 +47,12 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Wink.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Shock.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Im Thirsty.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Mail Sent.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Play and Like It.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Gears.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Postcard.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Preloader.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Star Wars Rey.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Tadah Image.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Tadah Video.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Favorite Star.json\");",
    "output": "Added more animations from lottiefiles"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -55,6 +55,7 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - ATM.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/CheckSwitch.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Fill.json\");\n+    TestRobot.testLinearAnimation(activity, \"Tests/GradientFill.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/KeyframeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Laugh4.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/LoopPlayOnce.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n@@ -15,10 +15,9 @@\n \n class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {\n   /**\n-   * Gradient values will be slightly rounded and cached for performance. There will be N\n-   * number of items cached.\n+   * Cache the gradients such that it runs at 30fps.\n    */\n-  private static final int CACHE_STEPS = 100;\n+  private static final int CACHE_STEPS_MS = 32;\n   private final LongSparseArray<LinearGradient> gradientCache = new LongSparseArray<>();\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n@@ -29,10 +28,12 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n   private final KeyframeAnimation<PointF> startPointAnimation;\n   private final KeyframeAnimation<PointF> endPointAnimation;\n   private final LottieDrawable lottieDrawable;\n+  private final int cacheSteps;\n \n   GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer, GradientFill fill) {\n     this.lottieDrawable = lottieDrawable;\n     path.setFillType(fill.getFillType());\n+    cacheSteps = (int) (lottieDrawable.getComposition().getDuration() / CACHE_STEPS_MS);\n \n     colorAnimation = fill.getGradientColor().createAnimation();\n     colorAnimation.addUpdateListener(this);\n@@ -100,9 +101,9 @@ private LinearGradient getGradient() {\n   }\n \n   private int getGradientHash() {\n-    int startPointProgress = Math.round(startPointAnimation.getProgress() * CACHE_STEPS);\n-    int endPointProgress = Math.round(endPointAnimation.getProgress() * CACHE_STEPS);\n-    int colorProgress = Math.round(colorAnimation.getProgress() * CACHE_STEPS);\n+    int startPointProgress = Math.round(startPointAnimation.getProgress() * cacheSteps);\n+    int endPointProgress = Math.round(endPointAnimation.getProgress() * cacheSteps);\n+    int colorProgress = Math.round(colorAnimation.getProgress() * cacheSteps);\n     int hash = 17;\n     hash = hash * 31 * startPointProgress;\n     hash = hash * 31 * endPointProgress;",
    "output": "Prepare 2.0.0-beta1 release (#190)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -44,6 +44,7 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Tongue.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Wink.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Shock.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Im Thirsty.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Play and Like It.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Gears.json\");\n     TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Postcard.json\");",
    "output": "Add I'm Thirsty from lottiefiles"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n@@ -4,13 +4,15 @@\n import android.graphics.Matrix;\n import android.graphics.Path;\n import android.support.annotation.Nullable;\n+import android.util.Log;\n \n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n \n class ContentGroup implements DrawingContent, PathContent,\n     BaseKeyframeAnimation.AnimationListener {\n+  private static final String TAG = ContentGroup.class.getSimpleName();\n   private final Matrix matrix = new Matrix();\n   private final Path path = new Path();\n \n@@ -56,8 +58,11 @@ class ContentGroup implements DrawingContent, PathContent,\n         contents.add(new TrimPathContent(layer, (ShapeTrimPath) item));\n       } else //noinspection StatementWithEmptyBody\n         if (item instanceof MergePaths) {\n-        // Merge paths are not ready yet.\n-        // contents.add(new MergePathsContent((MergePaths) item));\n+          if (lottieDrawable.enableMergePathsForKitKatAndAbove()) {\n+            contents.add(new MergePathsContent((MergePaths) item));\n+          } else {\n+            Log.w(TAG, \"Animation contains merge paths but they are disabled.\");\n+          }\n       }\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -103,6 +103,8 @@ private void init(@Nullable AttributeSet attrs) {\n     lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n     setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n+    enableMergePathsForKitKatAndAbove(ta.getBoolean(\n+        R.styleable.LottieAnimationView_lottie_enableMergePathsForKitKatAndAbove, false));\n     int cacheStrategy = ta.getInt(\n         R.styleable.LottieAnimationView_lottie_cacheStrategy,\n         CacheStrategy.None.ordinal());\n@@ -191,6 +193,18 @@ private void init(@Nullable AttributeSet attrs) {\n     lottieDrawable.recycleBitmaps();\n   }\n \n+  /**\n+   * Enable this to get merge path support for devices running KitKat (19) and above.\n+   *\n+   * Merge paths currently don't work if the the operand shape is entirely contained within the\n+   * first shape. If you need to cut out one shape from another shape, use an even-odd fill type\n+   * instead of using merge paths.\n+   */\n+  @SuppressWarnings({\"WeakerAccess\", \"Unused\"})\n+  public void enableMergePathsForKitKatAndAbove(boolean enable) {\n+    lottieDrawable.enableMergePathsForKitKatAndAbove(enable);\n+  }\n+\n   /**\n    * Enable hardware acceleration for this view.\n    * READ THIS BEFORE ENABLING HARDWARE ACCELERATION:\n@@ -203,7 +217,7 @@ private void init(@Nullable AttributeSet attrs) {\n    *    potentially break hardware rendering with bugs in their SKIA engine. Lottie cannot do\n    *    anything about that.\n    */\n-  @SuppressWarnings(\"WeakerAccess\") public void useExperimentalHardwareAcceleration() {\n+  @SuppressWarnings({\"WeakerAccess\", \"unused\"}) public void useExperimentalHardwareAcceleration() {\n     setLayerType(LAYER_TYPE_HARDWARE, null);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -9,10 +9,12 @@\n import android.graphics.Matrix;\n import android.graphics.PixelFormat;\n import android.graphics.drawable.Drawable;\n+import android.os.Build;\n import android.support.annotation.FloatRange;\n import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import android.util.Log;\n import android.view.View;\n import android.view.animation.LinearInterpolator;\n \n@@ -26,6 +28,7 @@\n  * of compositions.\n  */\n public class LottieDrawable extends Drawable implements Drawable.Callback {\n+  private static final String TAG = LottieDrawable.class.getSimpleName();\n   private final Matrix matrix = new Matrix();\n   private LottieComposition composition;\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n@@ -39,6 +42,7 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private boolean playAnimationWhenCompositionAdded;\n   private boolean reverseAnimationWhenCompositionAdded;\n   private boolean systemAnimationsAreDisabled;\n+  private boolean enableMergePaths;\n   @Nullable private CompositionLayer compositionLayer;\n   private int alpha = 255;\n \n@@ -71,6 +75,28 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n     return compositionLayer != null && compositionLayer.hasMatte();\n   }\n \n+  boolean enableMergePathsForKitKatAndAbove() {\n+    return enableMergePaths;\n+  }\n+\n+  /**\n+   * Enable this to get merge path support for devices running KitKat (19) and above.\n+   *\n+   * Merge paths currently don't work if the the operand shape is entirely contained within the\n+   * first shape. If you need to cut out one shape from another shape, use an even-odd fill type\n+   * instead of using merge paths.\n+   */\n+  @SuppressWarnings(\"WeakerAccess\") public void enableMergePathsForKitKatAndAbove(boolean enable) {\n+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n+      Log.w(TAG, \"Merge paths are not supported pre-Kit Kat.\");\n+      return;\n+    }\n+    enableMergePaths = enable;\n+    if (composition != null) {\n+      buildCompositionLayer();\n+    }\n+  }\n+\n   /**\n    * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n    * located because bodymovin uses the name filenames across all compositions (img_#).\n@@ -122,8 +148,7 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n     setSpeed(speed);\n     setScale(1f);\n     updateBounds();\n-    compositionLayer = new CompositionLayer(\n-        this, Layer.Factory.newInstance(composition), composition.getLayers(), composition);\n+    buildCompositionLayer();\n \n     setProgress(progress);\n     if (playAnimationWhenCompositionAdded) {\n@@ -138,6 +163,11 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n     return true;\n   }\n \n+  private void buildCompositionLayer() {\n+    compositionLayer = new CompositionLayer(\n+        this, Layer.Factory.newInstance(composition), composition.getLayers(), composition);\n+  }\n+\n   private void clearComposition() {\n     recycleBitmaps();\n     compositionLayer = null;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n@@ -7,6 +7,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@TargetApi(Build.VERSION_CODES.KITKAT)\n class MergePathsContent implements PathContent {\n   private final Path firstPath = new Path();\n   private final Path remainderPath = new Path();\n@@ -16,6 +17,9 @@ class MergePathsContent implements PathContent {\n   private final MergePaths mergePaths;\n \n   MergePathsContent(MergePaths mergePaths) {\n+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n+      throw new IllegalStateException(\"Merge paths are not supported pre-KitKat.\");\n+    }\n     this.mergePaths = mergePaths;\n   }\n \n@@ -34,28 +38,9 @@ void addContentIfNeeded(Content content) {\n   @Override public Path getPath() {\n     path.reset();\n \n-    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n-      mergePaths();\n-    } else {\n-      supportMergePaths();\n-    }\n-\n-\n-    return path;\n-  }\n-\n-  private void supportMergePaths() {\n-    for (int i = 0; i < pathContents.size(); i++) {\n-      path.addPath(pathContents.get(i).getPath());\n-    }\n-  }\n-\n-  @TargetApi(Build.VERSION_CODES.KITKAT)\n-  private void mergePaths() {\n-\n     switch (mergePaths.getMode()) {\n       case Merge:\n-        supportMergePaths();\n+        addPaths();\n         break;\n       case Add:\n         opFirstPathWithRest(Path.Op.UNION);\n@@ -70,6 +55,14 @@ private void mergePaths() {\n         opFirstPathWithRest(Path.Op.XOR);\n         break;\n     }\n+\n+    return path;\n+  }\n+\n+  private void addPaths() {\n+    for (int i = 0; i < pathContents.size(); i++) {\n+      path.addPath(pathContents.get(i).getPath());\n+    }\n   }\n \n   @TargetApi(Build.VERSION_CODES.KITKAT)",
    "output": "Add an option to enable merge paths with a disclaimer.\n\nFixes #16"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java\n@@ -109,6 +109,10 @@ public A getValue() {\n     return getValue(getCurrentKeyframe(), getCurrentKeyframeProgress());\n   }\n \n+  float getProgress() {\n+    return progress;\n+  }\n+\n   /**\n    * keyframeProgress will be [0, 1] unless the interpolator has overshoot in which case, this\n    * should be able to handle values outside of that range.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java\n@@ -8,11 +8,18 @@\n import android.graphics.PointF;\n import android.graphics.RectF;\n import android.graphics.Shader;\n+import android.support.v4.util.LongSparseArray;\n \n import java.util.ArrayList;\n import java.util.List;\n \n class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {\n+  /**\n+   * Gradient values will be slightly rounded and cached for performance. There will be N\n+   * number of items cached.\n+   */\n+  private static final int CACHE_STEPS = 100;\n+  private final LongSparseArray<LinearGradient> gradientCache = new LongSparseArray<>();\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final RectF boundsRect = new RectF();\n@@ -65,15 +72,19 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima\n \n     path.computeBounds(boundsRect, false);\n \n-    paint.setShader(getShader());\n+    paint.setShader(getGradient());\n     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);\n     paint.setAlpha(alpha);\n \n     canvas.drawPath(path, paint);\n   }\n \n-  private LinearGradient getShader() {\n-    // TODO: cache these\n+  private LinearGradient getGradient() {\n+    int gradientHash = getGradientHash();\n+    LinearGradient gradient = gradientCache.get(gradientHash);\n+    if (gradient != null) {\n+      return gradient;\n+    }\n     PointF startPoint = startPointAnimation.getValue();\n     PointF endPoint = endPointAnimation.getValue();\n     GradientColor gradientColor = colorAnimation.getValue();\n@@ -83,6 +94,19 @@ private LinearGradient getShader() {\n     int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);\n     int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);\n     int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);\n-    return new LinearGradient(x0 , y0, x1, y1, colors, positions, Shader.TileMode.CLAMP);\n+    gradient = new LinearGradient(x0, y0, x1, y1, colors, positions, Shader.TileMode.CLAMP);\n+    gradientCache.put(gradientHash, gradient);\n+    return gradient;\n+  }\n+\n+  private int getGradientHash() {\n+    int startPointProgress = Math.round(startPointAnimation.getProgress() * CACHE_STEPS);\n+    int endPointProgress = Math.round(endPointAnimation.getProgress() * CACHE_STEPS);\n+    int colorProgress = Math.round(colorAnimation.getProgress() * CACHE_STEPS);\n+    int hash = 17;\n+    hash = hash * 31 * startPointProgress;\n+    hash = hash * 31 * endPointProgress;\n+    hash = hash * 31 * colorProgress;\n+    return hash;\n   }\n }",
    "output": "Cache gradients in rounded increments\n\n#47"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -191,6 +191,22 @@ private void init(@Nullable AttributeSet attrs) {\n     lottieDrawable.recycleBitmaps();\n   }\n \n+  /**\n+   * Enable hardware acceleration for this view.\n+   * READ THIS BEFORE ENABLING HARDWARE ACCELERATION:\n+   * 1) Test your animation on the minimum API level you support. Some drawing features such as\n+   *    dashes and stroke caps have min api levels\n+   *    (https://developer.android.com/guide/topics/graphics/hardware-accel.html#unsupported)\n+   * 2) Enabling hardware acceleration is not always more performant. Check it with your specific\n+   *    animation only if you are having performance issues with software rendering.\n+   * 3) Software rendering is safer and will be consistent across devices. Manufacturers can\n+   *    potentially break hardware rendering with bugs in their SKIA engine. Lottie cannot do\n+   *    anything about that.\n+   */\n+  @SuppressWarnings(\"WeakerAccess\") public void useExperimentalHardwareAcceleration() {\n+    setLayerType(LAYER_TYPE_HARDWARE, null);\n+  }\n+\n   /**\n    * Sets the animation from a file in the assets directory.\n    * This will load and deserialize the file asynchronously.",
    "output": "Allow experimental hardware acceleration with a disclaimer\n\n#151"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -68,6 +68,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private CacheStrategy defaultCacheStrategy;\n   private String animationName;\n+  private boolean wasAnimatingWhenDetached = false;\n \n   @Nullable private Cancellable compositionLoader;\n   /**\n@@ -170,7 +171,18 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n   }\n \n+  @Override protected void onAttachedToWindow() {\n+    super.onAttachedToWindow();\n+    if (wasAnimatingWhenDetached) {\n+      playAnimation();\n+    }\n+  }\n+\n   @Override protected void onDetachedFromWindow() {\n+    if (isAnimating()) {\n+      cancelAnimation();\n+      wasAnimatingWhenDetached = true;\n+    }\n     recycleBitmaps();\n     super.onDetachedFromWindow();\n   }",
    "output": "Cancel and play animations in onDetachedFromWindow and onAttachedToWindow\n\nFixes #193"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java\n@@ -44,11 +44,7 @@ private void invalidate() {\n       Content content = contentsBefore.get(i);\n       if (content instanceof TrimPathContent) {\n         trimPath = (TrimPathContent) content;\n-        trimPath.addListener(new BaseKeyframeAnimation.AnimationListener() {\n-          @Override public void onValueChanged() {\n-            lottieDrawable.invalidateSelf();\n-          }\n-        });\n+        trimPath.addListener(this);\n       }\n     }\n   }\n@@ -83,7 +79,7 @@ private void invalidate() {\n \n     Utils.applyTrimPathIfNeeded(path, trimPath);\n \n-    isPathValid = false;\n+    isPathValid = true;\n     return path;\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java\n@@ -82,11 +82,7 @@ private void invalidate() {\n       Content content = contentsBefore.get(i);\n       if (content instanceof TrimPathContent) {\n         trimPath = (TrimPathContent) content;\n-        trimPath.addListener(new BaseKeyframeAnimation.AnimationListener() {\n-          @Override public void onValueChanged() {\n-            lottieDrawable.invalidateSelf();\n-          }\n-        });\n+        trimPath.addListener(this);\n       }\n     }\n   }\n@@ -111,7 +107,7 @@ private void invalidate() {\n \n     Utils.applyTrimPathIfNeeded(path, trimPath);\n \n-    isPathValid = false;\n+    isPathValid = true;\n     return path;\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n@@ -48,11 +48,7 @@ private void invalidate() {\n       Content content = contentsBefore.get(i);\n       if (content instanceof TrimPathContent) {\n         trimPath = (TrimPathContent) content;\n-        trimPath.addListener(new BaseKeyframeAnimation.AnimationListener() {\n-          @Override public void onValueChanged() {\n-            lottieDrawable.invalidateSelf();\n-          }\n-        });\n+        trimPath.addListener(this);\n       }\n     }\n   }\n@@ -121,7 +117,7 @@ private void invalidate() {\n \n     Utils.applyTrimPathIfNeeded(path, trimPath);\n \n-    isPathValid = false;\n+    isPathValid = true;\n     return path;\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java\n@@ -35,11 +35,7 @@ private void invalidate() {\n       Content content = contentsBefore.get(i);\n       if (content instanceof TrimPathContent) {\n         trimPath = (TrimPathContent) content;\n-        trimPath.addListener(new BaseKeyframeAnimation.AnimationListener() {\n-          @Override public void onValueChanged() {\n-            lottieDrawable.invalidateSelf();\n-          }\n-        });\n+        trimPath.addListener(this);\n       }\n     }\n   }\n@@ -56,7 +52,7 @@ private void invalidate() {\n \n     Utils.applyTrimPathIfNeeded(path, trimPath);\n \n-    isPathValid = false;\n+    isPathValid = true;\n     return path;\n   }\n }",
    "output": "Properly validate paths once they have been created"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie.samples;\n \n import android.content.Intent;\n+import android.net.Uri;\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n import android.support.v4.app.Fragment;\n@@ -63,6 +64,12 @@ private void onAppIntroPagerClicked() {\n     startActivity(new Intent(getContext(), AppIntroActivity.class));\n   }\n \n+  private void onOpenLottieFilesClicked() {\n+    Intent i = new Intent(Intent.ACTION_VIEW);\n+    i.setData(Uri.parse(\"http://www.lottiefiles.com\"));\n+    startActivity(i);\n+  }\n+\n   private void showFragment(Fragment fragment) {\n     getFragmentManager().beginTransaction()\n         .addToBackStack(null)\n@@ -72,14 +79,11 @@ private void showFragment(Fragment fragment) {\n         .commit();\n   }\n \n-  private void onFontClicked() {\n-    startActivity(new Intent(getContext(), FontActivity.class));\n-  }\n-\n-  final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n+  private final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n     private static final String TAG_VIEWER = \"viewer\";\n     private static final String TAG_TYPOGRAPHY = \"typography\";\n     private static final String TAG_APP_INTRO = \"app_intro\";\n+    private static final String TAG_OPEN_LOTTIE_FILES = \"open_lottie_files\";\n \n     @Override\n     public StringViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n@@ -98,12 +102,15 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n         case 2:\n           holder.bind(\"Animated App Tutorial\", TAG_APP_INTRO);\n           break;\n+        case 3:\n+          holder.bind(\"Open lottiefiles.com\", TAG_OPEN_LOTTIE_FILES);\n+          break;\n       }\n     }\n \n     @Override\n     public int getItemCount() {\n-      return 3;\n+      return 4;\n     }\n   }\n \n@@ -129,6 +136,8 @@ public void onClick(View v) {\n             onTypographyClicked();\n           } else if (FileAdapter.TAG_APP_INTRO.equals(v.getTag())) {\n             onAppIntroPagerClicked();\n+          } else if (FileAdapter.TAG_OPEN_LOTTIE_FILES.equals(v.getTag())) {\n+            onOpenLottieFilesClicked();\n           }\n         }\n       });",
    "output": "Add a link to open lottiefiles from the main screen"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -291,7 +291,7 @@ private void updateBounds() {\n         (int) (composition.getBounds().height() * scale));\n   }\n \n-  void cancelAnimation() {\n+  @SuppressWarnings(\"WeakerAccess\") public void cancelAnimation() {\n     playAnimationWhenCompositionAdded = false;\n     reverseAnimationWhenCompositionAdded = false;\n     animator.cancel();",
    "output": "Expose cancelAnimation on LottieDrawable\n\nFixes #180"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -170,8 +170,7 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n   }\n \n-  @Override\n-  protected void onDetachedFromWindow() {\n+  @Override protected void onDetachedFromWindow() {\n     recycleBitmaps();\n     super.onDetachedFromWindow();\n   }\n@@ -186,8 +185,7 @@ protected void onDetachedFromWindow() {\n    * <p>\n    * Will not cache the composition once loaded.\n    */\n-  @SuppressWarnings(\"WeakerAccess\")\n-  public void setAnimation(String animationName) {\n+  @SuppressWarnings(\"WeakerAccess\") public void setAnimation(String animationName) {\n     setAnimation(animationName, defaultCacheStrategy);\n   }\n \n@@ -199,8 +197,7 @@ public void setAnimation(String animationName) {\n    * strong reference to the composition once it is loaded\n    * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition.\n    */\n-  @SuppressWarnings(\"WeakerAccess\")\n-  public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n+  @SuppressWarnings(\"WeakerAccess\") public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n     this.animationName = animationName;\n     if (weakRefCache.containsKey(animationName)) {\n       WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n@@ -394,8 +391,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     lottieDrawable.setProgress(progress);\n   }\n \n-  @FloatRange(from = 0.0f, to = 1.0f)\n-  public float getProgress() {\n+  @FloatRange(from = 0.0f, to = 1.0f) public float getProgress() {\n     return lottieDrawable.getProgress();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -181,15 +181,15 @@ void systemAnimationsAreDisabled() {\n     systemAnimationsAreDisabled = true;\n   }\n \n-  void loop(boolean loop) {\n+  @SuppressWarnings(\"WeakerAccess\") public void loop(boolean loop) {\n     animator.setRepeatCount(loop ? ValueAnimator.INFINITE : 0);\n   }\n \n-  boolean isLooping() {\n+  @SuppressWarnings(\"WeakerAccess\") public boolean isLooping() {\n     return animator.getRepeatCount() == ValueAnimator.INFINITE;\n   }\n \n-  boolean isAnimating() {\n+  @SuppressWarnings(\"WeakerAccess\") public boolean isAnimating() {\n     return animator.isRunning();\n   }\n \n@@ -279,7 +279,7 @@ public float getProgress() {\n     return scale;\n   }\n \n-  @SuppressWarnings(\"WeakerAccess\") LottieComposition getComposition() {\n+  @SuppressWarnings(\"WeakerAccess\") public LottieComposition getComposition() {\n     return composition;\n   }\n \n@@ -297,19 +297,19 @@ void cancelAnimation() {\n     animator.cancel();\n   }\n \n-  void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n+  @SuppressWarnings(\"WeakerAccess\") public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n     animator.addUpdateListener(updateListener);\n   }\n \n-  void removeAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n+  @SuppressWarnings(\"WeakerAccess\") public void removeAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n     animator.removeUpdateListener(updateListener);\n   }\n \n-  void addAnimatorListener(Animator.AnimatorListener listener) {\n+  @SuppressWarnings(\"WeakerAccess\") public void addAnimatorListener(Animator.AnimatorListener listener) {\n     animator.addListener(listener);\n   }\n \n-  void removeAnimatorListener(Animator.AnimatorListener listener) {\n+  @SuppressWarnings(\"WeakerAccess\") public void removeAnimatorListener(Animator.AnimatorListener listener) {\n     animator.removeListener(listener);\n   }\n ",
    "output": "Exposed some more methods on LottieDrawable\n\nFixes #180"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -32,6 +32,26 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"PinJump.json\");\n     TestRobot.testLinearAnimation(activity, \"TwitterHeart.json\");\n     TestRobot.testLinearAnimation(activity, \"WeAccept.json\", \"Images/WeAccept\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Progress Success.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Touch ID.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Loading 1.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Loading 2.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Loading 3.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Loading 4.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Retweet.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Camera.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Video Camera.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Tongue.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Wink.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Emoji Shock.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Play and Like It.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Gears.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Postcard.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Preloader.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Tadah Image.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Tadah Video.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - Favorite Star.json\");\n+    TestRobot.testLinearAnimation(activity, \"lottiefiles.com - ATM.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/CheckSwitch.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Fill.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/KeyframeTypes.json\");\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n@@ -28,7 +28,8 @@ static void testLinearAnimation(MainActivity activity, String fileName,\n         .layout();\n \n     String nameWithoutExtension = fileName\n-        .substring(0, fileName.indexOf('.'))\n+        .substring(0, fileName.lastIndexOf('.'))\n+        .replace(\" \", \"_\")\n         .replace(\"/\", \"_\");\n     Screenshot.snap(view)\n         .setGroup(fileName)\n@@ -74,7 +75,8 @@ private static void loadCompositionOnView(AnimationLinearLayout view, String ima\n \n   private static void recordScreenshots(AnimationLinearLayout view, String fileName) {\n     String nameWithoutExtension = fileName\n-        .substring(0, fileName.indexOf('.'))\n+        .substring(0, fileName.lastIndexOf('.'))\n+        .replace(\" \", \"_\")\n         .replace(\"/\", \"_\");\n     Screenshot.snap(view)\n         .setGroup(fileName)\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -9,7 +9,7 @@ private AnimatableIntegerValue(Integer initialValue) {\n     super(initialValue);\n   }\n \n-  private AnimatableIntegerValue(List<Keyframe<Integer>> keyframes, Integer initialValue) {\n+  AnimatableIntegerValue(List<Keyframe<Integer>> keyframes, Integer initialValue) {\n     super(keyframes, initialValue);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java\n@@ -9,7 +9,7 @@ private AnimatableScaleValue() {\n     super(new ScaleXY());\n   }\n \n-  private AnimatableScaleValue(List<Keyframe<ScaleXY>> keyframes, ScaleXY initialValue) {\n+  AnimatableScaleValue(List<Keyframe<ScaleXY>> keyframes, ScaleXY initialValue) {\n     super(keyframes, initialValue);\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java\n@@ -2,6 +2,8 @@\n \n import org.json.JSONObject;\n \n+import java.util.Collections;\n+\n class AnimatableTransform implements ModifierContent {\n   private final AnimatablePathValue anchorPoint;\n   private final IAnimatablePathValue position;\n@@ -34,9 +36,9 @@ static AnimatableTransform newInstance(LottieComposition composition) {\n     static AnimatableTransform newInstance(JSONObject json, LottieComposition composition) {\n       AnimatablePathValue anchorPoint = null;\n       IAnimatablePathValue position = null;\n-      AnimatableScaleValue scale = null;\n+      AnimatableScaleValue scale;\n       AnimatableFloatValue rotation = null;\n-      AnimatableIntegerValue opacity = null;\n+      AnimatableIntegerValue opacity;\n       JSONObject anchorJson = json.optJSONObject(\"a\");\n       if (anchorJson != null) {\n         anchorPoint = new AnimatablePathValue(anchorJson.opt(\"k\"), composition);\n@@ -56,7 +58,8 @@ static AnimatableTransform newInstance(JSONObject json, LottieComposition compos\n       if (scaleJson != null) {\n         scale = AnimatableScaleValue.Factory.newInstance(scaleJson, composition);\n       } else {\n-        throwMissingTransform(\"scale\");\n+        // Somehow some community animations don't have scale in the transform.\n+        scale = new AnimatableScaleValue(Collections.<Keyframe<ScaleXY>>emptyList(), new ScaleXY());\n       }\n \n       JSONObject rotationJson = json.optJSONObject(\"r\");\n@@ -73,7 +76,8 @@ static AnimatableTransform newInstance(JSONObject json, LottieComposition compos\n       if (opacityJson != null) {\n         opacity = AnimatableIntegerValue.Factory.newInstance(opacityJson, composition);\n       } else {\n-        throwMissingTransform(\"opacity\");\n+        // Somehow some community animations don't have opacity in the transform.\n+        opacity = new AnimatableIntegerValue(Collections.<Keyframe<Integer>>emptyList(), 100);\n       }\n       return new AnimatableTransform(anchorPoint, position, scale, rotation, opacity);\n     }",
    "output": "Added a bunch of animations from lottiefiles.com (#189)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java\n@@ -244,4 +244,8 @@ private void buildParentLayerListIfNeeded() {\n       layer = layer.parentLayer;\n     }\n   }\n+\n+  @Override public void setContents(List<Content> contentsBefore, List<Content> contentsAfter) {\n+    // Do nothing\n+  }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n@@ -9,7 +9,7 @@\n import java.util.Iterator;\n import java.util.List;\n \n-class ContentGroup implements Content, DrawingContent, PathContent {\n+class ContentGroup implements DrawingContent, PathContent {\n   private final Matrix matrix = new Matrix();\n   private final Path path = new Path();\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/DrawingContent.java b/lottie/src/main/java/com/airbnb/lottie/DrawingContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/DrawingContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/DrawingContent.java\n@@ -3,6 +3,6 @@\n import android.graphics.Canvas;\n import android.graphics.Matrix;\n \n-interface DrawingContent {\n+interface DrawingContent extends Content {\n   void draw(Canvas canvas, Matrix parentMatrix, int alpha);\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java\n@@ -6,7 +6,7 @@\n \n import java.util.List;\n \n-class EllipseContent implements Content, PathContent {\n+class EllipseContent implements PathContent {\n   private static final float ELLIPSE_CONTROL_POINT_PERCENTAGE = 0.55228f;\n \n   private final Path path = new Path();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/FillContent.java b/lottie/src/main/java/com/airbnb/lottie/FillContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/FillContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/FillContent.java\n@@ -8,7 +8,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-class FillContent implements Content, DrawingContent {\n+class FillContent implements DrawingContent {\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final List<PathContent> paths = new ArrayList<>();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java\n@@ -7,9 +7,10 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-class MergePathsContent implements Content, PathContent {\n+class MergePathsContent implements PathContent {\n+  private final Path firstPath = new Path();\n+  private final Path remainderPath = new Path();\n   private final Path path = new Path();\n-  private final Path path2 = new Path();\n \n   private final List<PathContent> pathContents = new ArrayList<>();\n   private final MergePaths mergePaths;\n@@ -25,7 +26,9 @@ void addContentIfNeeded(Content content) {\n   }\n \n   @Override public void setContents(List<Content> contentsBefore, List<Content> contentsAfter) {\n-\n+    for (int i = 0; i < pathContents.size(); i++) {\n+      pathContents.get(i).setContents(contentsBefore, contentsAfter);\n+    }\n   }\n \n   @Override public Path getPath() {\n@@ -49,9 +52,10 @@ private void supportMergePaths() {\n \n   @TargetApi(Build.VERSION_CODES.KITKAT)\n   private void mergePaths() {\n+\n     switch (mergePaths.getMode()) {\n       case Merge:\n-        opFirstPathWithRest(Path.Op.INTERSECT);\n+        supportMergePaths();\n         break;\n       case Add:\n         opFirstPathWithRest(Path.Op.UNION);\n@@ -70,10 +74,8 @@ private void mergePaths() {\n \n   @TargetApi(Build.VERSION_CODES.KITKAT)\n   private void opFirstPathWithRest(Path.Op op) {\n-    if (pathContents.size() == 1) {\n-      path.addPath(pathContents.get(0).getPath());\n-      return;\n-    }\n+    remainderPath.reset();\n+    firstPath.reset();\n \n     for (int i = pathContents.size() - 1; i >= 1; i--) {\n       PathContent content = pathContents.get(i);\n@@ -83,10 +85,10 @@ private void opFirstPathWithRest(Path.Op op) {\n         for (int j = pathList.size() - 1; j >= 0; j--) {\n           Path path = pathList.get(j).getPath();\n           path.transform(((ContentGroup) content).getTransformationMatrix());\n-          this.path2.op(path, Path.Op.UNION);\n+          this.remainderPath.addPath(path);\n         }\n       } else {\n-        path2.op(content.getPath(), Path.Op.UNION);\n+        remainderPath.addPath(content.getPath());\n       }\n     }\n \n@@ -96,30 +98,12 @@ private void opFirstPathWithRest(Path.Op op) {\n       for (int j = 0; j < pathList.size(); j++) {\n         Path path = pathList.get(j).getPath();\n         path.transform(((ContentGroup) lastContent).getTransformationMatrix());\n-        this.path.op(path, Path.Op.UNION);\n+        this.firstPath.addPath(path);\n       }\n     } else {\n-      path.set(lastContent.getPath());\n+      firstPath.set(lastContent.getPath());\n     }\n \n-    path.op(path2, op);\n-  }\n-\n-  @TargetApi(Build.VERSION_CODES.KITKAT)\n-  private void addMergePaths(Path.Op op) {\n-    for (int i = 0; i < pathContents.size(); i++) {\n-      PathContent content = pathContents.get(i);\n-\n-      if (content instanceof ContentGroup) {\n-        List<PathContent> pathList = ((ContentGroup) content).getPathList();\n-        for (int j = 0; j < pathList.size(); j++) {\n-          Path path = pathList.get(j).getPath();\n-          path.transform(((ContentGroup) content).getTransformationMatrix());\n-          this.path.op(path, op);\n-        }\n-      } else {\n-        path.op(content.getPath(), op);\n-      }\n-    }\n+    path.op(firstPath, remainderPath, op);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/PathContent.java b/lottie/src/main/java/com/airbnb/lottie/PathContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PathContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PathContent.java\n@@ -2,6 +2,6 @@\n \n import android.graphics.Path;\n \n-interface PathContent {\n+interface PathContent extends Content {\n   Path getPath();\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java\n@@ -6,7 +6,7 @@\n \n import java.util.List;\n \n-class PolystarContent implements Content, PathContent {\n+class PolystarContent implements PathContent {\n   /**\n    * This was empirically derived by creating polystars, converting them to\n    * curves, and calculating a scale factor.\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java\n@@ -7,7 +7,7 @@\n \n import java.util.List;\n \n-class RectangleContent implements Content, PathContent {\n+class RectangleContent implements PathContent {\n   private final Path path = new Path();\n   private final RectF rect = new RectF();\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java\n@@ -5,7 +5,7 @@\n \n import java.util.List;\n \n-class ShapeContent implements Content, PathContent {\n+class ShapeContent implements PathContent {\n   private final Path path = new Path();\n \n   private final LottieDrawable lottieDrawable;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java b/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/StrokeContent.java\n@@ -10,7 +10,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-class StrokeContent implements Content, DrawingContent {\n+class StrokeContent implements DrawingContent {\n   private final Path path = new Path();\n   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final LottieDrawable lottieDrawable;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/TrimPathContent.java b/lottie/src/main/java/com/airbnb/lottie/TrimPathContent.java\n--- a/lottie/src/main/java/com/airbnb/lottie/TrimPathContent.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/TrimPathContent.java\n@@ -3,14 +3,14 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class TrimPathContent implements Content {\n+class TrimPathContent implements Content {\n \n   private final List<BaseKeyframeAnimation.SimpleAnimationListener> listeners = new ArrayList<>();\n   private final BaseKeyframeAnimation<?, Float> startAnimation;\n   private final BaseKeyframeAnimation<?, Float> endAnimation;\n   private final BaseKeyframeAnimation<?, Float> offsetAnimation;\n \n-  public TrimPathContent(BaseLayer layer, ShapeTrimPath trimPath) {\n+  TrimPathContent(BaseLayer layer, ShapeTrimPath trimPath) {\n     startAnimation = trimPath.getStart().createAnimation();\n     endAnimation = trimPath.getEnd().createAnimation();\n     offsetAnimation = trimPath.getOffset().createAnimation();",
    "output": "More work on merge paths (#188)\n\nNot ready to be turned on yet."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -107,7 +107,7 @@ private void init(@Nullable AttributeSet attrs) {\n         CacheStrategy.None.ordinal());\n     defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n     ta.recycle();\n-    setLayerType(LAYER_TYPE_HARDWARE, null);\n+    setLayerType(LAYER_TYPE_SOFTWARE, null);\n \n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n     float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),",
    "output": "Disable hardware acceleration"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n@@ -43,7 +43,7 @@ private void setupShapeGroupWithFill(ShapeFill previousFill,\n         addLayer(shapeLayer);\n       } else if (item instanceof RectangleShape) {\n         RectangleShape shapeRect = (RectangleShape) item;\n-        RectLayer shapeLayer = new RectLayer(\n+        RectContentFillAndStroke shapeLayer = new RectContentFillAndStroke(\n             shapeRect, currentFill, currentStroke, currentTrim, currentTransform, lottieDrawable);\n         addLayer(shapeLayer);\n       } else if (item instanceof CircleShape) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/RectContentFillAndStroke.java b/lottie/src/main/java/com/airbnb/lottie/RectContentFillAndStroke.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RectContentFillAndStroke.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RectContentFillAndStroke.java\n@@ -10,18 +10,19 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-class RectLayer extends AnimatableLayer {\n-  @Nullable private RectShapeContent fillLayer;\n-  @Nullable private RectShapeContent strokeLayer;\n+class RectContentFillAndStroke extends AnimatableLayer {\n+  @Nullable private RectContent fillLayer;\n+  @Nullable private RectContent strokeLayer;\n \n-  RectLayer(RectangleShape rectShape, @Nullable ShapeFill fill, @Nullable ShapeStroke stroke,\n-      @Nullable ShapeTrimPath trim, AnimatableTransform transform, LottieDrawable lottieDrawable) {\n+  RectContentFillAndStroke(RectangleShape rectShape, @Nullable ShapeFill fill,\n+      @Nullable ShapeStroke stroke, @Nullable ShapeTrimPath trim, AnimatableTransform transform,\n+      LottieDrawable lottieDrawable) {\n     super(lottieDrawable);\n \n     setTransform(transform.createAnimation());\n \n     if (fill != null) {\n-      fillLayer = new RectShapeContent(lottieDrawable);\n+      fillLayer = new RectContent(lottieDrawable);\n       //noinspection ConstantConditions\n       fillLayer.setColor(fill.getColor().createAnimation());\n       //noinspection ConstantConditions\n@@ -38,7 +39,7 @@ class RectLayer extends AnimatableLayer {\n     }\n \n     if (stroke != null) {\n-      strokeLayer = new RectShapeContent(lottieDrawable);\n+      strokeLayer = new RectContent(lottieDrawable);\n       strokeLayer.setIsStroke();\n       strokeLayer.setColor(stroke.getColor().createAnimation());\n       strokeLayer.setShapeOpacity(stroke.getOpacity().createAnimation());\n@@ -74,7 +75,7 @@ public void setAlpha(int alpha) {\n     }\n   }\n \n-  private static class RectShapeContent extends ShapeContent {\n+  private static class RectContent extends ShapeContent {\n \n     private final KeyframeAnimation.AnimationListener<PointF> sizeChangedListener =\n         new KeyframeAnimation.AnimationListener<PointF>() {\n@@ -108,7 +109,7 @@ public void onValueChanged(PointF value) {\n \n     private boolean updateRectOnNextDraw;\n \n-    RectShapeContent(LottieDrawable lottieDrawable) {\n+    RectContent(LottieDrawable lottieDrawable) {\n       super(lottieDrawable);\n       setPath(new StaticKeyframeAnimation<>(path));\n     }",
    "output": "Renamed RectLayer to RectContent"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -13,7 +13,6 @@\n import android.support.v4.util.LongSparseArray;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n class LayerView extends AnimatableLayer {\n@@ -114,52 +113,8 @@ private void setupForModel() {\n   }\n \n   private void setupShapeLayer() {\n-    List<Object> reversedItems = new ArrayList<>(layerModel.getShapes());\n-    Collections.reverse(reversedItems);\n-    AnimatableTransform currentTransform = null;\n-    ShapeTrimPath currentTrim = null;\n-    ShapeFill currentFill = null;\n-    ShapeStroke currentStroke = null;\n-\n-    for (int i = 0; i < reversedItems.size(); i++) {\n-      Object item = reversedItems.get(i);\n-      if (item instanceof ShapeGroup) {\n-        ContentGroup groupLayer = new ContentGroup((ShapeGroup) item, currentFill,\n-            currentStroke, currentTrim, currentTransform, getCallback());\n-        addLayer(groupLayer);\n-      } else if (item instanceof AnimatableTransform) {\n-        currentTransform = (AnimatableTransform) item;\n-      } else if (item instanceof ShapeFill) {\n-        currentFill = (ShapeFill) item;\n-      } else if (item instanceof ShapeTrimPath) {\n-        currentTrim = (ShapeTrimPath) item;\n-      } else if (item instanceof ShapeStroke) {\n-        currentStroke = (ShapeStroke) item;\n-      } else if (item instanceof ShapePath) {\n-        ShapePath shapePath = (ShapePath) item;\n-        ShapeLayerView shapeLayer =\n-            new ShapeLayerView(shapePath, currentFill, currentStroke, currentTrim,\n-                AnimatableTransform.Factory.newInstance(composition), getCallback());\n-        addLayer(shapeLayer);\n-      } else if (item instanceof RectangleShape) {\n-        RectangleShape shapeRect = (RectangleShape) item;\n-        RectLayer shapeLayer =\n-            new RectLayer(shapeRect, currentFill, currentStroke, currentTrim,\n-                AnimatableTransform.Factory.newInstance(composition), getCallback());\n-        addLayer(shapeLayer);\n-      } else if (item instanceof CircleShape) {\n-        CircleShape shapeCircle = (CircleShape) item;\n-        EllipseLayer shapeLayer =\n-            new EllipseLayer(shapeCircle, currentFill, currentStroke, currentTrim,\n-                AnimatableTransform.Factory.newInstance(composition), getCallback());\n-        addLayer(shapeLayer);\n-      } else if (item instanceof PolystarShape) {\n-        PolystarShape polystarShape = (PolystarShape) item;\n-        PolystarLayer shapeLayer = new PolystarLayer(polystarShape, currentFill, currentStroke,\n-            currentTrim, AnimatableTransform.Factory.newInstance(composition), getCallback());\n-        addLayer(shapeLayer);\n-      }\n-    }\n+    ShapeGroup shapeGroup = new ShapeGroup(layerModel.getName(), layerModel.getShapes());\n+    addLayer(new ContentGroup(shapeGroup, null, null, null, null, getCallback()));\n   }\n \n   private void setupPreCompLayer() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java b/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java\n@@ -42,7 +42,7 @@ class ShapeGroup {\n   private final String name;\n   private final List<Object> items;\n \n-  private ShapeGroup(String name, List<Object> items) {\n+  ShapeGroup(String name, List<Object> items) {\n     this.name = name;\n     this.items = items;\n   }",
    "output": "DRY LayerView and ContentGroup"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java\n@@ -7,11 +7,11 @@\n import java.util.Collections;\n import java.util.List;\n \n-class GroupLayerView extends AnimatableLayer {\n+class ContentGroup extends AnimatableLayer {\n   private final ShapeGroup shapeGroup;\n   @Nullable private final AnimatableTransform transform;\n \n-  GroupLayerView(ShapeGroup shapeGroup, @Nullable ShapeFill previousFill,\n+  ContentGroup(ShapeGroup shapeGroup, @Nullable ShapeFill previousFill,\n       @Nullable ShapeStroke previousStroke, @Nullable ShapeTrimPath previousTrimPath,\n       @Nullable AnimatableTransform transform, Drawable.Callback callback) {\n     super(callback);\n@@ -69,8 +69,8 @@ private void setupShapeGroupWithFill(ShapeFill previousFill,\n         addLayer(shapeLayer);\n       } else if (item instanceof ShapeGroup) {\n         ShapeGroup shapeGroup = (ShapeGroup) item;\n-        GroupLayerView groupLayer =\n-            new GroupLayerView(shapeGroup, currentFill, currentStroke, currentTrim,\n+        ContentGroup groupLayer =\n+            new ContentGroup(shapeGroup, currentFill, currentStroke, currentTrim,\n                 currentTransform, getCallback());\n         addLayer(groupLayer);\n       }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -124,7 +124,7 @@ private void setupShapeLayer() {\n     for (int i = 0; i < reversedItems.size(); i++) {\n       Object item = reversedItems.get(i);\n       if (item instanceof ShapeGroup) {\n-        GroupLayerView groupLayer = new GroupLayerView((ShapeGroup) item, currentFill,\n+        ContentGroup groupLayer = new ContentGroup((ShapeGroup) item, currentFill,\n             currentStroke, currentTrim, currentTransform, getCallback());\n         addLayer(groupLayer);\n       } else if (item instanceof AnimatableTransform) {",
    "output": "Renamed GroupLayerView ContentGroup"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -134,6 +134,9 @@ private void init(@Nullable AttributeSet attrs) {\n       // We always want to invalidate the root drawable to it redraws the whole drawable.\n       // Eventually it would be great to be able to invalidate just the changed region.\n       super.invalidateDrawable(lottieDrawable);\n+    } else {\n+      // Otherwise work as regular ImageView\n+      super.invalidateDrawable(dr);\n     }\n   }\n ",
    "output": "Fix invalidateDrawable method behavior for non-Lottie images (#181)"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -6,8 +6,6 @@\n import android.app.AlertDialog;\n import android.content.DialogInterface;\n import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n import android.net.Uri;\n import android.os.Bundle;\n import android.os.Handler;\n@@ -28,10 +26,8 @@\n import android.widget.TextView;\n import android.widget.Toast;\n \n-import com.airbnb.lottie.ImageAssetDelegate;\n import com.airbnb.lottie.LottieAnimationView;\n import com.airbnb.lottie.LottieComposition;\n-import com.airbnb.lottie.LottieImageAsset;\n import com.airbnb.lottie.OnCompositionLoadedListener;\n \n import org.json.JSONException;\n@@ -154,23 +150,7 @@ public void onAnimationUpdate(ValueAnimator animation) {\n     switch (requestCode) {\n       case RC_ASSET:\n         final String assetName = data.getStringExtra(EXTRA_ANIMATION_NAME);\n-        // animationView.setImageAssetsFolder(assetFolders.get(assetName));\n-        animationView.setImageAssetDelegate(new ImageAssetDelegate() {\n-          @Override public Bitmap fetchBitmap(LottieImageAsset asset) {\n-            InputStream is;\n-            try {\n-              is = getContext().getAssets().open(\"Images/WeAccept/\" + asset.getFileName());\n-            } catch (IOException e) {\n-              Log.w(\"Gabe\", \"Unable to open asset.\", e);\n-              return null;\n-            }\n-            BitmapFactory.Options opts = new BitmapFactory.Options();\n-            opts.inScaled = true;\n-            opts.inDensity = 160;\n-            Bitmap bitmap = BitmapFactory.decodeStream(is, null, opts);\n-            return bitmap;\n-          }\n-        });\n+        animationView.setImageAssetsFolder(assetFolders.get(assetName));\n         LottieComposition.Factory.fromAssetFileName(getContext(), assetName,\n             new OnCompositionLoadedListener() {\n               @Override",
    "output": "Bump lottie to 1.5.3"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -6,14 +6,12 @@\n import android.content.res.TypedArray;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n-import android.os.Looper;\n import android.os.Parcel;\n import android.os.Parcelable;\n import android.provider.Settings;\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n-import android.support.annotation.UiThread;\n import android.support.annotation.VisibleForTesting;\n import android.support.v7.widget.AppCompatImageView;\n import android.text.TextUtils;\n@@ -174,10 +172,7 @@ protected void onDetachedFromWindow() {\n     super.onDetachedFromWindow();\n   }\n \n-  @UiThread @VisibleForTesting void recycleBitmaps() {\n-    if (Looper.myLooper() != Looper.getMainLooper()) {\n-      throw new IllegalStateException(\"This must be called from the main thread.\");\n-    }\n+  @VisibleForTesting void recycleBitmaps() {\n     lottieDrawable.recycleBitmaps();\n   }\n \n@@ -268,6 +263,21 @@ public void setComposition(@NonNull LottieComposition composition) {\n       return;\n     }\n \n+    int screenWidth = Utils.getScreenWidth(getContext());\n+    int screenHeight = Utils.getScreenHeight(getContext());\n+    int compWidth = composition.getBounds().width();\n+    int compHeight = composition.getBounds().height();\n+    if (compWidth > screenWidth ||\n+        compHeight > screenHeight) {\n+      float xScale = screenWidth / (float) compWidth;\n+      float yScale = screenHeight / (float) compHeight;\n+      setScale(Math.min(xScale, yScale));\n+      Log.w(L.TAG, String.format(\n+          \"Composition larger than the screen %dx%d vs %dx%d. Scaling down.\",\n+          compWidth, compHeight, screenWidth, screenHeight));\n+    }\n+\n+\n     // If you set a different composition on the view, the bounds will not update unless\n     // the drawable is different than the original.\n     setImageDrawable(null);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -132,6 +132,7 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n     clearComposition();\n     this.composition = composition;\n     setSpeed(speed);\n+    setScale(1f);\n     updateBounds();\n     buildLayersForComposition(composition);\n \n@@ -196,9 +197,6 @@ private void buildLayersForComposition(LottieComposition composition) {\n     if (composition == null) {\n       return;\n     }\n-    float xScale = canvas.getWidth() / (float) composition.getBounds().width();\n-    float yScale = canvas.getHeight() / (float) composition.getBounds().height();\n-    setScale(Math.min(xScale, yScale));\n \n     int saveCount = canvas.save();\n     canvas.clipRect(0, 0, getIntrinsicWidth(), getIntrinsicHeight());\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Utils.java b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Utils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java\n@@ -1,12 +1,16 @@\n package com.airbnb.lottie;\n \n+import android.content.Context;\n import android.graphics.Path;\n import android.graphics.PointF;\n+import android.util.DisplayMetrics;\n+import android.view.WindowManager;\n \n import java.io.Closeable;\n \n final class Utils {\n   private static PointF emptyPoint;\n+  private static DisplayMetrics displayMetrics;\n \n   static PointF emptyPoint() {\n     if (emptyPoint == null) {\n@@ -40,4 +44,22 @@ static void closeQuietly(Closeable closeable) {\n       }\n     }\n   }\n+\n+  static int getScreenWidth(Context context) {\n+    if (displayMetrics == null) {\n+      displayMetrics = new DisplayMetrics();\n+    }\n+    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n+    wm.getDefaultDisplay().getMetrics(displayMetrics);\n+    return displayMetrics.widthPixels;\n+  }\n+\n+  static int getScreenHeight(Context context) {\n+    if (displayMetrics == null) {\n+      displayMetrics = new DisplayMetrics();\n+    }\n+    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n+    wm.getDefaultDisplay().getMetrics(displayMetrics);\n+    return displayMetrics.heightPixels;\n+  }\n }",
    "output": "Ran tests (#179)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -119,10 +119,24 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n   }\n \n+  @Override public void setImageResource(int resId) {\n+    super.setImageResource(resId);\n+    recycleBitmaps();\n+  }\n+\n+  @Override public void setImageDrawable(Drawable drawable) {\n+    if (drawable != lottieDrawable) {\n+      recycleBitmaps();\n+    }\n+    super.setImageDrawable(drawable);\n+  }\n+\n   @Override public void invalidateDrawable(Drawable dr) {\n-    // We always want to invalidate the root drawable to it redraws the whole drawable.\n-    // Eventually it would be great to be able to invalidate just the changed region.\n-    super.invalidateDrawable(lottieDrawable);\n+    if (getDrawable() == lottieDrawable) {\n+      // We always want to invalidate the root drawable to it redraws the whole drawable.\n+      // Eventually it would be great to be able to invalidate just the changed region.\n+      super.invalidateDrawable(lottieDrawable);\n+    }\n   }\n \n   @Override protected Parcelable onSaveInstanceState() {",
    "output": "Check for lottieDrawable in some ImageView methods\n\nFixes #159"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/BitmapCanvas.java b/lottie/src/main/java/com/airbnb/lottie/BitmapCanvas.java\n--- a/lottie/src/main/java/com/airbnb/lottie/BitmapCanvas.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/BitmapCanvas.java\n@@ -0,0 +1,18 @@\n+package com.airbnb.lottie;\n+\n+import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n+\n+class BitmapCanvas extends Canvas {\n+\n+  private final Bitmap bitmap;\n+\n+  BitmapCanvas(Bitmap bitmap) {\n+    super(bitmap);\n+    this.bitmap = bitmap;\n+  }\n+\n+  Bitmap getBitmap() {\n+    return bitmap;\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java b/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java\n--- a/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/CanvasPool.java\n@@ -0,0 +1,81 @@\n+package com.airbnb.lottie;\n+\n+import android.graphics.Bitmap;\n+import android.graphics.Color;\n+import android.support.v4.util.LongSparseArray;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.Assert.assertNotNull;\n+\n+class CanvasPool {\n+  private final LongSparseArray<List<Bitmap>> availableBitmaps = new LongSparseArray<>();\n+  private final Map<BitmapCanvas, Bitmap> canvasBitmapMap = new HashMap<>();\n+  private final Map<Bitmap, BitmapCanvas> bitmapCanvasMap = new HashMap<>();\n+\n+  BitmapCanvas acquire(int width, int height, Bitmap.Config config) {\n+    int key = getKey(width, height, config);\n+    List<Bitmap> bitmaps = availableBitmaps.get(key);\n+    if (bitmaps == null) {\n+      bitmaps = new ArrayList<>();\n+      availableBitmaps.put(key, bitmaps);\n+    }\n+\n+    BitmapCanvas canvas;\n+    if (bitmaps.isEmpty()) {\n+      Bitmap bitmap = Bitmap.createBitmap(width, height, config);\n+      canvas = new BitmapCanvas(bitmap);\n+      canvasBitmapMap.put(canvas, bitmap);\n+      bitmapCanvasMap.put(bitmap, canvas);\n+    } else {\n+      Bitmap bitmap = bitmaps.remove(0);\n+      canvas = bitmapCanvasMap.get(bitmap);\n+      assertNotNull(canvas);\n+    }\n+    canvas.getBitmap().eraseColor(Color.TRANSPARENT);\n+    return canvas;\n+  }\n+\n+  void release(BitmapCanvas canvas) {\n+    assertNotNull(canvas);\n+    Bitmap bitmap = canvasBitmapMap.get(canvas);\n+    assertNotNull(bitmap);\n+    int key = getKey(bitmap);\n+    List<Bitmap> bitmaps = availableBitmaps.get(key);\n+    assertNotNull(bitmaps);\n+    if (bitmaps.contains(bitmap)) {\n+      throw new IllegalStateException(\"Canvas already released.\");\n+    }\n+    bitmaps.add(bitmap);\n+  }\n+\n+  void recycleBitmaps() {\n+    for (int i = 0; i < availableBitmaps.size(); i++) {\n+      List<Bitmap> bitmaps = availableBitmaps.valueAt(i);\n+      Iterator<Bitmap> it = bitmaps.iterator();\n+      while (it.hasNext()) {\n+        Bitmap bitmap = it.next();\n+        BitmapCanvas canvas = bitmapCanvasMap.get(bitmap);\n+        bitmapCanvasMap.remove(bitmap);\n+        canvasBitmapMap.remove(canvas);\n+        bitmap.recycle();\n+        it.remove();\n+      }\n+    }\n+    if (!bitmapCanvasMap.isEmpty()) {\n+      throw new IllegalStateException(\"Not all canvases have been released!\");\n+    }\n+  }\n+\n+  private int getKey(Bitmap bitmap) {\n+    return getKey(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());\n+  }\n+\n+  private int getKey(int width, int height, Bitmap.Config config) {\n+    return (width & 0xffff) << 17 | (height & 0xffff) << 1 | (config.ordinal() & 0x1);\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -196,6 +196,10 @@ private void buildLayersForComposition(LottieComposition composition) {\n     if (composition == null) {\n       return;\n     }\n+    float xScale = canvas.getWidth() / (float) composition.getBounds().width();\n+    float yScale = canvas.getHeight() / (float) composition.getBounds().height();\n+    setScale(Math.min(xScale, yScale));\n+\n     int saveCount = canvas.save();\n     canvas.clipRect(0, 0, getIntrinsicWidth(), getIntrinsicHeight());\n     super.draw(canvas);\n@@ -274,7 +278,6 @@ private void reverseAnimation(boolean setStartTime) {\n   @SuppressWarnings(\"WeakerAccess\") public void setScale(float scale) {\n     this.scale = scale;\n     updateBounds();\n-    invalidateSelf();\n   }\n \n   @SuppressWarnings(\"WeakerAccess\") public float getScale() {",
    "output": "Automatically scale compositions to the size of the canvas (#178)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -27,6 +27,7 @@ class LayerView extends AnimatableLayer {\n   private final Paint mainCanvasPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final Paint clearPaint = new Paint();\n   private final Paint imagePaint =\n       new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG);\n \n@@ -54,6 +55,7 @@ class LayerView extends AnimatableLayer {\n       mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n     }\n     maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+    clearPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n \n     setupForModel();\n   }\n@@ -270,6 +272,7 @@ void setMatteLayer(LayerView matteLayer) {\n     // Now apply the parent transformations from the top down.\n     rect.set(canvas.getClipBounds());\n     canvas.saveLayer(rect, mainCanvasPaint, Canvas.ALL_SAVE_FLAG);\n+    canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), clearPaint);\n \n     canvas.save();\n     drawImageIfNeeded(canvas);\n@@ -286,6 +289,7 @@ void setMatteLayer(LayerView matteLayer) {\n \n     if (hasMatte()) {\n       canvas.saveLayer(rect, mattePaint, SAVE_FLAGS);\n+      canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), clearPaint);\n       matteLayer.draw(canvas);\n       canvas.restore();\n     }\n@@ -294,6 +298,7 @@ void setMatteLayer(LayerView matteLayer) {\n \n   private void applyMasks(Canvas canvas) {\n     canvas.saveLayer(rect, maskPaint, SAVE_FLAGS);\n+    canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), clearPaint);\n \n     for (int i = transformLayers.size() - 1; i >= 0; i--) {\n       LayerView layer = transformLayers.get(i);",
    "output": "Clear offscreen buffers before rendering to them\n\nFixes #171"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n@@ -147,6 +147,14 @@ public void setAlpha(int alpha) {\n \n   @Override\n   public int getAlpha() {\n+    return getAlphaInternal();\n+  }\n+\n+  /**\n+   * getAlpha was added in 19. This internal getAlpha allows us to call it\n+   * without having to avoid suppressing the NewApi lint rule.\n+   */\n+  int getAlphaInternal() {\n     float alpha = this.transform == null ? 1f : (this.transform.getOpacity().getValue() / 255f);\n     float parentAlpha = parentLayer == null ? 1f : (parentLayer.getAlpha() / 255f);\n     return (int) (alpha * parentAlpha * 255);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -328,7 +328,7 @@ private void drawImageIfNeeded(Canvas canvas) {\n \n     canvas.save();\n     applyTransformForLayer(canvas, this);\n-    imagePaint.setAlpha(getAlpha());\n+    imagePaint.setAlpha(getAlphaInternal());\n     canvas.drawBitmap(bitmap, 0, 0 ,imagePaint);\n     canvas.restore();\n   }",
    "output": "Fix a NewApi false lint error (#176)"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -184,7 +184,7 @@ void onPlayClicked() {\n       if (animationView.getProgress() == 1f) {\n         animationView.setProgress(0f);\n       }\n-      animationView.playAnimation();\n+      animationView.resumeAnimation();\n       postUpdatePlayButtonText();\n     }\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -320,10 +320,18 @@ public void playAnimation() {\n     lottieDrawable.playAnimation();\n   }\n \n+  public void resumeAnimation() {\n+    lottieDrawable.resumeAnimation();\n+  }\n+\n   @SuppressWarnings(\"unused\") public void reverseAnimation() {\n     lottieDrawable.reverseAnimation();\n   }\n \n+  @SuppressWarnings(\"unused\") public void resumeReverseAnimation() {\n+    lottieDrawable.resumeReverseAnimation();\n+  }\n+\n   @SuppressWarnings(\"unused\") public void setSpeed(float speed) {\n     lottieDrawable.setSpeed(speed);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -226,23 +226,43 @@ boolean isAnimating() {\n     return animator.isRunning();\n   }\n \n-  void playAnimation() {\n+  @SuppressWarnings(\"WeakerAccess\") public void playAnimation() {\n+    playAnimation(false);\n+  }\n+\n+  public void resumeAnimation() {\n+    playAnimation(true);\n+  }\n+\n+  private void playAnimation(boolean setStartTime) {\n     if (layers.isEmpty()) {\n       playAnimationWhenLayerAdded = true;\n       reverseAnimationWhenLayerAdded = false;\n       return;\n     }\n-    animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n+    if (setStartTime) {\n+      animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n+    }\n     animator.start();\n   }\n \n-  void reverseAnimation() {\n+  @SuppressWarnings(\"unused\") public void resumeReverseAnimation() {\n+    reverseAnimation(true);\n+  }\n+\n+  @SuppressWarnings(\"WeakerAccess\") public void reverseAnimation() {\n+    reverseAnimation(false);\n+  }\n+\n+  private void reverseAnimation(boolean setStartTime) {\n     if (layers.isEmpty()) {\n       playAnimationWhenLayerAdded = false;\n       reverseAnimationWhenLayerAdded = true;\n       return;\n     }\n-    animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n+    if (setStartTime) {\n+      animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n+    }\n     animator.reverse();\n   }\n ",
    "output": "Separate API for playing/resuming an animation\n\nFixes #174"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -31,9 +31,9 @@ public class LottieTest {\n     TestRobot.testLinearAnimation(activity, \"MotionCorpse-Jrcanest.json\");\n     TestRobot.testLinearAnimation(activity, \"PinJump.json\");\n     TestRobot.testLinearAnimation(activity, \"TwitterHeart.json\");\n+    TestRobot.testLinearAnimation(activity, \"WeAccept.json\", \"Images/WeAccept\");\n     TestRobot.testLinearAnimation(activity, \"Tests/CheckSwitch.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Fill.json\");\n-    TestRobot.testLinearAnimation(activity, \"Tests/Image.json\", \"Tests/weaccept\");\n     TestRobot.testLinearAnimation(activity, \"Tests/KeyframeTypes.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/Laugh4.json\");\n     TestRobot.testLinearAnimation(activity, \"Tests/LoopPlayOnce.json\");\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -62,7 +62,7 @@ static AnimationFragment newInstance() {\n   }\n \n   private final Map<String, String> assetFolders = new HashMap<String, String>() {{\n-    put(\"WeAccept.json\", \"Tests/weaccept\");\n+    put(\"WeAccept.json\", \"Images/WeAccept\");\n   }};\n \n   private OkHttpClient client;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -328,6 +328,7 @@ private void drawImageIfNeeded(Canvas canvas) {\n \n     canvas.save();\n     applyTransformForLayer(canvas, this);\n+    imagePaint.setAlpha(getAlpha());\n     canvas.drawBitmap(bitmap, 0, 0 ,imagePaint);\n     canvas.restore();\n   }",
    "output": "Apply layer alpha to images\n\nFixes #172"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -35,9 +35,10 @@\n  * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)},\n  * or {@link #setAnimation(JSONObject)}.\n  * <p>\n- * You can also set a default cache strategy with {@link R.attr#lottie_cacheStrategy}.\n+ * You can set a default cache strategy with {@link R.attr#lottie_cacheStrategy}.\n  * <p>\n- * You may manually set the progress of the animation with {@link #setProgress(float)}\n+ * You can manually set the progress of the animation with {@link #setProgress(float)} or\n+ * {@link R.attr#lottie_progress}\n  */\n public class LottieAnimationView extends AppCompatImageView {\n   private static final String TAG = LottieAnimationView.class.getSimpleName();\n@@ -101,6 +102,7 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n     lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n+    setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n     int cacheStrategy = ta.getInt(\n         R.styleable.LottieAnimationView_lottie_cacheStrategy,\n         CacheStrategy.None.ordinal());",
    "output": "Add an attr for progress"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -268,12 +268,14 @@ void setMatteLayer(LayerView matteLayer) {\n     rect.set(canvas.getClipBounds());\n     canvas.saveLayer(rect, mainCanvasPaint, Canvas.ALL_SAVE_FLAG);\n \n+    canvas.save();\n     drawImageIfNeeded(canvas);\n     for (int i = transformLayers.size() - 1; i >= 0; i--) {\n       LayerView layer = transformLayers.get(i);\n       applyTransformForLayer(canvas, layer);\n     }\n     super.draw(canvas);\n+    canvas.restore();\n \n     if (hasMasks()) {\n       applyMasks(canvas);\n@@ -283,7 +285,6 @@ void setMatteLayer(LayerView matteLayer) {\n       canvas.saveLayer(rect, mattePaint, SAVE_FLAGS);\n       matteLayer.draw(canvas);\n       canvas.restore();\n-\n     }\n     canvas.restore();\n   }",
    "output": "Save and restore around drawing the content of a matted or masked layer\n\nWithout this, the canvas transformations would apply to the mask\nor matted layer."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -108,7 +108,6 @@ private void setupForModel() {\n           matteLayer.setParentLayer(parentLayer);\n         }\n       }\n-\n     }\n   }\n \n@@ -248,6 +247,8 @@ void setMatteLayer(LayerView matteLayer) {\n \n     if (precompWidth != 0 || precompHeight != 0) {\n       canvas.clipRect(0, 0, precompWidth, precompHeight);\n+    } else {\n+      canvas.clipRect(0, 0, composition.getBounds().width(), composition.getBounds().height());\n     }\n \n     if (!hasMasks() && !hasMatte()) {\n@@ -264,17 +265,15 @@ void setMatteLayer(LayerView matteLayer) {\n     }\n \n     // Now apply the parent transformations from the top down.\n-    rect.set(0, 0, composition.getBounds().width(), composition.getBounds().height());\n+    rect.set(canvas.getClipBounds());\n     canvas.saveLayer(rect, mainCanvasPaint, Canvas.ALL_SAVE_FLAG);\n \n     drawImageIfNeeded(canvas);\n-    canvas.save();\n     for (int i = transformLayers.size() - 1; i >= 0; i--) {\n       LayerView layer = transformLayers.get(i);\n       applyTransformForLayer(canvas, layer);\n     }\n     super.draw(canvas);\n-    canvas.restore();\n \n     if (hasMasks()) {\n       applyMasks(canvas);\n@@ -284,6 +283,7 @@ void setMatteLayer(LayerView matteLayer) {\n       canvas.saveLayer(rect, mattePaint, SAVE_FLAGS);\n       matteLayer.draw(canvas);\n       canvas.restore();\n+\n     }\n     canvas.restore();\n   }",
    "output": "Use the precomp size to save precomp layers"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -116,7 +116,7 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n   /**\n    * @return True if the composition is different from the previously set composition, false otherwise.\n    */\n-  boolean setComposition(LottieComposition composition) {\n+  @SuppressWarnings(\"WeakerAccess\") public boolean setComposition(LottieComposition composition) {\n     if (getCallback() == null) {\n       throw new IllegalStateException(\n           \"You or your view must set a Drawable.Callback before setting the composition. This \" +",
    "output": "Make LottieDrawable#setComposition public"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n@@ -7,6 +7,7 @@\n import org.json.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n class ShapeData {\n@@ -128,6 +129,8 @@ private Factory() {\n           pointsArray.length() != outTangents.length()) {\n         throw new IllegalStateException(\n             \"Unable to process points array or tangents. \" + pointsData);\n+      } else if (pointsArray.length() == 0) {\n+        return new ShapeData(new PointF(), false, Collections.<CubicCurveData>emptyList());\n       }\n \n       int length = pointsArray.length();",
    "output": "Prevent a crash when there is a shape with no points"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -44,5 +44,7 @@ public class LottieTest {\n     TestRobot.testAnimation(activity, \"Tests/Stroke.json\");\n     TestRobot.testAnimation(activity, \"Tests/TrackMattes.json\");\n     TestRobot.testAnimation(activity, \"Tests/TrimPaths.json\");\n+    TestRobot.testChangingCompositions(activity, \"TwitterHeart.json\", \"PinJump.json\");\n+    TestRobot.testSettingSameComposition(activity, \"PinJump.json\");\n   }\n }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n@@ -12,7 +12,7 @@ class TestRobot {\n       0.5f, 0.6f, 0.7f, 0.8f, 0.9f, 0.95f, 1f};\n \n   static void testStatic(MainActivity activity, String fileName) {\n-    testAnimation(activity, fileName, null, new float[] {0});\n+    testAnimation(activity, fileName, null, new float[]{0});\n   }\n \n   static void testAnimation(MainActivity activity, String fileName) {\n@@ -26,11 +26,49 @@ static void testAnimation(MainActivity activity, String fileName, String imageAs\n   static void testAnimation(MainActivity activity, String fileName, String imageAssetsFolder,\n       float[] progress) {\n     final LottieAnimationView view = new LottieAnimationView(activity);\n+    loadCompositionOnView(view, imageAssetsFolder, fileName);\n+    recordScreenshots(view, fileName, progress);\n+    cleanUpView(view, activity);\n+  }\n+\n+  static void testChangingCompositions(MainActivity activity, String firstFile, String secondFile) {\n+    final LottieAnimationView view = new LottieAnimationView(activity);\n+    loadCompositionOnView(view, null, firstFile);\n+    recordScreenshots(view, \"test_changing_compositions_\" + firstFile, DEFAULT_ANIMATED_PROGRESS);\n+\n+    loadCompositionOnView(view, null, secondFile);\n+    recordScreenshots(view, \"test_changing_compositions_\" + secondFile, DEFAULT_ANIMATED_PROGRESS);\n+\n+    cleanUpView(view, activity);\n+  }\n+\n+  static void testSettingSameComposition(MainActivity activity, String fileName) {\n+    final LottieAnimationView view = new LottieAnimationView(activity);\n+    loadCompositionOnView(view, null, fileName);\n+    recordScreenshots(view, \"same_composition_first_run_\" + fileName, DEFAULT_ANIMATED_PROGRESS);\n+\n+    loadCompositionOnView(view, null, fileName);\n+    recordScreenshots(view, \"same_composition_second_run_\" + fileName, DEFAULT_ANIMATED_PROGRESS);\n+\n+    cleanUpView(view, activity);\n+  }\n+\n+  private static void loadCompositionOnView(LottieAnimationView view, String imageAssetsFolder,\n+      String fileName) {\n+\n+    LottieComposition composition =\n+        LottieComposition.Factory.fromFileSync(view.getContext(), fileName);\n+\n     view.setImageAssetsFolder(imageAssetsFolder);\n-    view.setComposition(LottieComposition.Factory.fromFileSync(activity, fileName));\n-    ViewHelpers.setupView(view)\n+    view.setComposition(composition);\n+\n+    ViewHelpers\n+        .setupView(view)\n         .layout();\n+  }\n \n+  private static void recordScreenshots(LottieAnimationView view, String fileName,\n+      float[] progress) {\n     String nameWithoutExtension = fileName\n         .substring(0, fileName.indexOf('.'))\n         .replace(\"/\", \"_\");\n@@ -41,13 +79,17 @@ static void testAnimation(MainActivity activity, String fileName, String imageAs\n           .setName(String.format(Locale.US, \"%s %d\", nameWithoutExtension, (int) (p * 100)))\n           .record();\n     }\n+  }\n+\n+  private static void cleanUpView(final LottieAnimationView view, MainActivity activity) {\n     final Semaphore semaphore = new Semaphore(1);\n     activity.runOnUiThread(new Runnable() {\n       @Override public void run() {\n         view.recycleBitmaps();\n         semaphore.release();\n       }\n     });\n+\n     try {\n       semaphore.acquire();\n     } catch (InterruptedException e) {",
    "output": "Add tests for changing compositions (#164)\n\nAdds a test for running one composition, and then setting a new composition on the same view and running that one.\r\n\r\nAdds a second test for setting the same composition twice in a row on the same view and making sure it runs as expected the second time.\r\n\r\nI refactored the robot a bit to reuse the test setup code."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -4,7 +4,6 @@\n import android.animation.ValueAnimator;\n import android.content.Context;\n import android.content.res.TypedArray;\n-import android.graphics.Canvas;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n import android.os.Looper;\n@@ -153,20 +152,9 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n   }\n \n-  @Override\n-  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n-    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n-  }\n-\n-  @Override\n-  protected void onDraw(Canvas canvas) {\n-    super.onDraw(canvas);\n-  }\n-\n   @Override\n   protected void onDetachedFromWindow() {\n     recycleBitmaps();\n-\n     super.onDetachedFromWindow();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -27,14 +27,6 @@\n  * {@link com.airbnb.lottie.LottieDrawable}.\n  */\n public class LottieComposition {\n-  /**\n-   * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel\n-   * leaving ~2.3M pixels available.\n-   * Reduce the number a little bit for safety.\n-   * <p>\n-   * Hopefully this can be hardware accelerated someday.\n-   */\n-  private static final int MAX_PIXELS = 1000;\n \n   private final Map<String, List<Layer>> precomps = new HashMap<>();\n   private final Map<String, ImageAsset> images = new HashMap<>();\n@@ -188,12 +180,6 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n       if (width != -1 && height != -1) {\n         int scaledWidth = (int) (width * scale);\n         int scaledHeight = (int) (height * scale);\n-        if (Math.max(scaledWidth, scaledHeight) > MAX_PIXELS) {\n-          float factor = (float) MAX_PIXELS / (float) Math.max(scaledWidth, scaledHeight);\n-          scaledWidth *= factor;\n-          scaledHeight *= factor;\n-          scale *= factor;\n-        }\n         bounds = new Rect(0, 0, scaledWidth, scaledHeight);\n       }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -206,9 +206,8 @@ private void buildLayersForComposition(LottieComposition composition) {\n       float scaleY = bounds.height() / (float) compBounds.height();\n       canvas.scale(scaleX, scaleY);\n     }\n-    super.draw(canvas);\n-    // TODO: delete this?\n     canvas.clipRect(getBounds());\n+    super.draw(canvas);\n     canvas.restoreToCount(saveCount);\n \n   }",
    "output": "Remove MAX_SIZE restriction (#160)\n\nUse large animations at your own risk.\r\nFixes #112"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -256,7 +256,14 @@ public void setComposition(@NonNull LottieComposition composition) {\n       Log.v(TAG, \"Set Composition \\n\" + composition);\n     }\n     lottieDrawable.setCallback(this);\n-    lottieDrawable.setComposition(composition);\n+\n+    boolean isNewComposition = lottieDrawable.setComposition(composition);\n+    if (!isNewComposition) {\n+      // We can avoid re-setting the drawable, and invalidating the view, since the composition\n+      // hasn't changed.\n+      return;\n+    }\n+\n     // If you set a different composition on the view, the bounds will not update unless\n     // the drawable is different than the original.\n     setImageDrawable(null);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -115,21 +115,30 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n     }\n   }\n \n-  void setComposition(LottieComposition composition) {\n+  /**\n+   * @return True if the composition is different from the previously set composition, false otherwise.\n+   */\n+  boolean setComposition(LottieComposition composition) {\n     if (getCallback() == null) {\n       throw new IllegalStateException(\n           \"You or your view must set a Drawable.Callback before setting the composition. This \" +\n               \"gets done automatically when added to an ImageView. \" +\n               \"Either call ImageView.setImageDrawable() before setComposition() or call \" +\n               \"setCallback(yourView.getCallback()) first.\");\n     }\n+\n+    if (this.composition == composition) {\n+      return false;\n+    }\n+\n     clearComposition();\n     this.composition = composition;\n     setSpeed(speed);\n     setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n     buildLayersForComposition(composition);\n \n     setProgress(getProgress());\n+    return true;\n   }\n \n   private void clearComposition() {",
    "output": "Only update lottie drawable if composition changes (#150)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -31,20 +31,18 @@ public class LottieTest {\n     TestRobot.testAnimation(activity, \"MotionCorpse-Jrcanest.json\");\n     TestRobot.testAnimation(activity, \"PinJump.json\");\n     TestRobot.testAnimation(activity, \"TwitterHeart.json\");\n-    TestRobot.testAnimation(activity, \"Tests/LoopPlayOnce.json\");\n     TestRobot.testAnimation(activity, \"Tests/CheckSwitch.json\");\n-    TestRobot.testAnimation(activity, \"Tests/EllipseTrimPath.json\");\n-    TestRobot.testAnimation(activity, \"Tests/SplitDimensions.json\");\n-    TestRobot.testAnimation(activity, \"Tests/TrimPathsFull.json\");\n-    TestRobot.testAnimation(activity, \"Tests/Laugh4.json\");\n-    TestRobot.testAnimation(activity, \"Tests/Star.json\");\n-    TestRobot.testAnimation(activity, \"Tests/Polygon.json\");\n-    TestRobot.testAnimation(activity, \"Tests/PreCompMadness.json\");\n-    TestRobot.testAnimation(activity, \"Tests/MatteParentPrecomp.json\");\n+    TestRobot.testAnimation(activity, \"Tests/Fill.json\");\n     TestRobot.testAnimation(activity, \"Tests/Image.json\", \"Tests/weaccept\");\n-    TestRobot.testStatic(activity, \"Tests/TrimPathFill.json\");\n-    TestRobot.testStatic(activity, \"Tests/Mask_26.json\");\n-    TestRobot.testStatic(activity, \"Tests/MatteInv.json\");\n-    TestRobot.testStatic(activity, \"Tests/MaskInv.json\");\n+    TestRobot.testAnimation(activity, \"Tests/KeyframeTypes.json\");\n+    TestRobot.testAnimation(activity, \"Tests/Laugh4.json\");\n+    TestRobot.testAnimation(activity, \"Tests/LoopPlayOnce.json\");\n+    TestRobot.testAnimation(activity, \"Tests/Parenting.json\");\n+    TestRobot.testAnimation(activity, \"Tests/Precomps.json\");\n+    TestRobot.testAnimation(activity, \"Tests/ShapeTypes.json\");\n+    TestRobot.testAnimation(activity, \"Tests/SplitDimensions.json\");\n+    TestRobot.testAnimation(activity, \"Tests/Stroke.json\");\n+    TestRobot.testAnimation(activity, \"Tests/TrackMattes.json\");\n+    TestRobot.testAnimation(activity, \"Tests/TrimPaths.json\");\n   }\n }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n@@ -8,7 +8,8 @@\n import java.util.concurrent.Semaphore;\n \n class TestRobot {\n-  private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.2f, 0.5f, 1f};\n+  private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.2f, 0.3f, 0.4f,\n+      0.5f, 0.6f, 0.7f, 0.8f, 0.9f, 0.95f, 1f};\n \n   static void testStatic(MainActivity activity, String fileName) {\n     testAnimation(activity, fileName, null, new float[] {0});\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -26,6 +26,10 @@ class ImageAssetBitmapManager {\n       Map<String, ImageAsset> imageAssets) {\n     assertNotNull(callback);\n \n+    if (TextUtils.isEmpty(imagesFolder)) {\n+      throw new IllegalStateException(\"You must specify an image assets folder by calling \" +\n+          \"setImageAssetsFolder on LottieAnimationView or LottieDrawable.\");\n+    }\n     this.imagesFolder = imagesFolder;\n     if (this.imagesFolder.charAt(this.imagesFolder.length() - 1) != '/') {\n       this.imagesFolder += '/';",
    "output": "Added new test files and more test keyframes"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -31,20 +31,14 @@ public class LottieTest {\n     TestRobot.testAnimation(activity, \"MotionCorpse-Jrcanest.json\");\n     TestRobot.testAnimation(activity, \"PinJump.json\");\n     TestRobot.testAnimation(activity, \"TwitterHeart.json\");\n-    TestRobot.testAnimation(activity, \"Tests/Hosts.json\");\n-    TestRobot.testAnimation(activity, \"Tests/LightBulb.json\", null,\n-        new float[]{0f, 0.05f, 0.10f, 0.2f, 0.3f, 0.4f, 0.5f, 1f});\n     TestRobot.testAnimation(activity, \"Tests/LoopPlayOnce.json\");\n-    TestRobot.testAnimation(activity, \"Tests/Alarm.json\");\n     TestRobot.testAnimation(activity, \"Tests/CheckSwitch.json\");\n     TestRobot.testAnimation(activity, \"Tests/EllipseTrimPath.json\");\n     TestRobot.testAnimation(activity, \"Tests/SplitDimensions.json\");\n     TestRobot.testAnimation(activity, \"Tests/TrimPathsFull.json\");\n     TestRobot.testAnimation(activity, \"Tests/Laugh4.json\");\n     TestRobot.testAnimation(activity, \"Tests/Star.json\");\n     TestRobot.testAnimation(activity, \"Tests/Polygon.json\");\n-    TestRobot.testAnimation(activity, \"Tests/AllSet.json\");\n-    TestRobot.testAnimation(activity, \"Tests/City.json\");\n     TestRobot.testAnimation(activity, \"Tests/PreCompMadness.json\");\n     TestRobot.testAnimation(activity, \"Tests/MatteParentPrecomp.json\");\n     TestRobot.testAnimation(activity, \"Tests/Image.json\", \"Tests/weaccept\");",
    "output": "Removed some tests"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -36,6 +36,8 @@\n  * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)},\n  * or {@link #setAnimation(JSONObject)}.\n  * <p>\n+ * You can also set a default cache strategy with {@link R.attr#lottie_cacheStrategy}.\n+ * <p>\n  * You may manually set the progress of the animation with {@link #setProgress(float)}\n  */\n public class LottieAnimationView extends AppCompatImageView {\n@@ -65,6 +67,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n       };\n \n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n+  private CacheStrategy defaultCacheStrategy;\n   private String animationName;\n \n   @Nullable private Cancellable compositionLoader;\n@@ -99,6 +102,10 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n     lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n+    int cacheStrategy = ta.getInt(\n+        R.styleable.LottieAnimationView_lottie_cacheStrategy,\n+        CacheStrategy.None.ordinal());\n+    defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n     ta.recycle();\n     setLayerType(LAYER_TYPE_SOFTWARE, null);\n \n@@ -177,7 +184,7 @@ protected void onDetachedFromWindow() {\n    * Will not cache the composition once loaded.\n    */\n   public void setAnimation(String animationName) {\n-    setAnimation(animationName, CacheStrategy.None);\n+    setAnimation(animationName, defaultCacheStrategy);\n   }\n \n   /**\n@@ -239,6 +246,11 @@ private void cancelLoaderTask() {\n     }\n   }\n \n+  /**\n+   * Sets a composition.\n+   * You can set a default cache strategy if this view was inflated with xml by\n+   * using {@link R.attr#lottie_cacheStrategy}.\n+   */\n   public void setComposition(@NonNull LottieComposition composition) {\n     if (L.DBG) {\n       Log.v(TAG, \"Set Composition \\n\" + composition);",
    "output": "Allow setting a default CacheStrategy in xml\n\nFixes #156"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -11,6 +11,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n \n import static junit.framework.Assert.assertNotNull;\n@@ -69,9 +70,11 @@ Bitmap bitmapForId(String id) {\n   }\n \n   void recycleBitmaps() {\n-    for (String key : bitmaps.keySet()) {\n-      Bitmap bitmap = bitmaps.remove(key);\n-      bitmap.recycle();\n+    Iterator<Map.Entry<String, Bitmap>> it = bitmaps.entrySet().iterator();\n+    while (it.hasNext()) {\n+      Map.Entry<String, Bitmap> entry = it.next();\n+      entry.getValue().recycle();\n+      it.remove();\n     }\n   }\n ",
    "output": "Use an iterator to iterate through bitmaps\n\nFixes #148"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java\n@@ -55,11 +55,15 @@ Bitmap bitmapForId(String id) {\n               \" Set it with LottieComposition#setImagesFolder or LottieDrawable#setImagesFolder\");\n         }\n         is = context.getAssets().open(imagesFolder + imageAsset.getFileName());\n-        bitmap = BitmapFactory.decodeStream(is);\n-        bitmaps.put(id, bitmap);\n       } catch (IOException e) {\n         Log.w(L.TAG, \"Unable to open asset.\", e);\n+        return null;\n       }\n+      BitmapFactory.Options opts = new BitmapFactory.Options();\n+      opts.inScaled = true;\n+      opts.inDensity = 160;\n+      bitmap = BitmapFactory.decodeStream(is, null, opts);\n+      bitmaps.put(id, bitmap);\n     }\n     return bitmap;\n   }",
    "output": "Scale bitmaps for the screen density\n\nFixes #71"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/Cancellable.java b/lottie/src/main/java/com/airbnb/lottie/Cancellable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Cancellable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Cancellable.java\n@@ -1,5 +1,5 @@\n package com.airbnb.lottie;\n \n-interface Cancellable {\n+public interface Cancellable {\n   void cancel();\n }",
    "output": "Cancellable is returned by public functions, but isn't accessible (#157)\n\n* Cancellable is returned by public functions, but isn't accessible\r\n\r\n* add cancel into exampl on README and fix fromJson example to use Factory"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -3,6 +3,7 @@\n import android.content.Context;\n import android.content.res.Resources;\n import android.graphics.Rect;\n+import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n \n@@ -129,7 +130,7 @@ public static Cancellable fromInputStream(Context context, InputStream stream,\n         OnCompositionLoadedListener loadedListener) {\n       FileCompositionLoader loader =\n           new FileCompositionLoader(context.getResources(), loadedListener);\n-      loader.execute(stream);\n+      loader.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, stream);\n       return loader;\n     }\n \n@@ -150,7 +151,7 @@ static LottieComposition fromFileSync(Context context, String fileName) {\n     public static Cancellable fromJson(Resources res, JSONObject json,\n         OnCompositionLoadedListener loadedListener) {\n       JsonCompositionLoader loader = new JsonCompositionLoader(res, loadedListener);\n-      loader.execute(json);\n+      loader.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, json);\n       return loader;\n     }\n ",
    "output": "Use Thread Pool executor for AsyncTasks (#146)\n\nFixes #89"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -337,11 +337,11 @@ private void drawImageIfNeeded(Canvas canvas) {\n     canvas.restore();\n   }\n \n-  private boolean hasMatte() {\n+  boolean hasMatte() {\n     return matteLayer != null;\n   }\n \n-  private boolean hasMasks() {\n+  boolean hasMasks() {\n     return mask != null && !mask.getMaskAnimations().isEmpty();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -255,6 +255,20 @@ public void setComposition(@NonNull LottieComposition composition) {\n     requestLayout();\n   }\n \n+  /**\n+   * Returns whether or not any layers in this composition has masks.\n+   */\n+  @SuppressWarnings(\"unused\") public boolean hasMasks() {\n+    return lottieDrawable.hasMasks();\n+  }\n+\n+  /**\n+   * Returns whether or not any layers in this composition has a matte layer.\n+   */\n+  @SuppressWarnings(\"unused\") public boolean hasMatte() {\n+    return lottieDrawable.hasMatte();\n+  }\n+\n   /**\n    * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n    * located because bodymovin uses the name filenames across all compositions (img_#).\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -54,6 +54,36 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n     });\n   }\n \n+  /**\n+   * Returns whether or not any layers in this composition has masks.\n+   */\n+  @SuppressWarnings(\"unused\") public boolean hasMasks() {\n+    for (AnimatableLayer layer : layers) {\n+      if (!(layer instanceof LayerView)) {\n+        continue;\n+      }\n+      if (((LayerView) layer).hasMasks()){\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether or not any layers in this composition has a matte layer.\n+   */\n+  @SuppressWarnings(\"unused\") public boolean hasMatte() {\n+    for (AnimatableLayer layer : layers) {\n+      if (!(layer instanceof LayerView)) {\n+        continue;\n+      }\n+      if (((LayerView) layer).hasMatte()){\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   /**\n    * If you use image assets, you must explicitly specify the folder in assets/ in which they are\n    * located because bodymovin uses the name filenames across all compositions (img_#).",
    "output": "Added hasMasks and hasMatte to LottieDrawable and LottieAnimationView"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -28,6 +28,8 @@ class LayerView extends AnimatableLayer {\n   private final Paint mainCanvasPaint = new Paint();\n   private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final Paint imagePaint =\n+      new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG);\n \n   private final Layer layerModel;\n   private final LottieComposition composition;\n@@ -256,7 +258,7 @@ void setMatteLayer(LayerView matteLayer) {\n         LayerView layer = transformLayers.get(i);\n         applyTransformForLayer(canvas, layer);\n       }\n-      drawBitmapIfNeeded(canvas);\n+      drawImageIfNeeded(canvas);\n       super.draw(canvas);\n       canvas.restoreToCount(mainCanvasCount);\n       return;\n@@ -268,7 +270,7 @@ void setMatteLayer(LayerView matteLayer) {\n \n     // Now apply the parent transformations from the top down.\n     bitmapCanvas.save();\n-    drawBitmapIfNeeded(bitmapCanvas);\n+    drawImageIfNeeded(bitmapCanvas);\n     for (int i = transformLayers.size() - 1; i >= 0; i--) {\n       LayerView layer = transformLayers.get(i);\n       applyTransformForLayer(bitmapCanvas, layer);\n@@ -319,19 +321,19 @@ private void applyMask(BitmapCanvas canvas, Mask mask,\n     canvas.restore();\n   }\n \n-  private void drawBitmapIfNeeded(Canvas canvas) {\n+  private void drawImageIfNeeded(Canvas canvas) {\n     if (!composition.hasImages()) {\n       return;\n     }\n     String refId = layerModel.getRefId();\n-    Bitmap bitmap = getLottieDrawable().getImageBitmap(refId);\n+    Bitmap bitmap = getLottieDrawable().getImageAsset(refId);\n     if (bitmap == null) {\n       return;\n     }\n \n     canvas.save();\n     applyTransformForLayer(canvas, this);\n-    canvas.drawBitmap(bitmap, 0, 0 ,null);\n+    canvas.drawBitmap(bitmap, 0, 0 ,imagePaint);\n     canvas.restore();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -266,7 +266,7 @@ void removeAnimatorListener(Animator.AnimatorListener listener) {\n     return composition == null ? -1 : composition.getBounds().height();\n   }\n \n-  Bitmap getImageBitmap(String id) {\n+  Bitmap getImageAsset(String id) {\n     return getImageAssetBitmapManager().bitmapForId(id);\n   }\n ",
    "output": "Anti alias and filter image assets (#140)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -239,14 +239,26 @@ void recycleBitmaps() {\n    * actually invalidated, not a child one which will not pass the view's validateDrawable check.\n    */\n   @Override public void invalidateDrawable(Drawable who) {\n-    getCallback().invalidateDrawable(this);\n+    Callback callback = getCallback();\n+    if (callback == null) {\n+      return;\n+    }\n+    callback.invalidateDrawable(this);\n   }\n \n   @Override public void scheduleDrawable(Drawable who, Runnable what, long when) {\n-    getCallback().scheduleDrawable(this, what, when);\n+    Callback callback = getCallback();\n+    if (callback == null) {\n+      return;\n+    }\n+    callback.scheduleDrawable(this, what, when);\n   }\n \n   @Override public void unscheduleDrawable(Drawable who, Runnable what) {\n-    getCallback().unscheduleDrawable(this, what);\n+    Callback callback = getCallback();\n+    if (callback == null) {\n+      return;\n+    }\n+    callback.unscheduleDrawable(this, what);\n   }\n }",
    "output": "Add a null check around getCallback()"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -153,12 +153,6 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n         Layer layer = new Layer(layersJson.optJSONObject(j), composition);\n         layerMap.put(layer.getId(), layer);\n         layers.add(layer);\n-        if (!layer.getMasks().isEmpty()) {\n-          composition.hasMasks = true;\n-        }\n-        if (layer.getMatteType() != null && layer.getMatteType() != Layer.MatteType.None) {\n-          composition.hasMattes = true;\n-        }\n       }\n       String id = precomp.optString(\"id\");\n       composition.precomps.put(id, layers);\n@@ -170,12 +164,6 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n   private static void addLayer(LottieComposition composition, Layer layer) {\n     composition.layers.add(layer);\n     composition.layerMap.put(layer.getId(), layer);\n-    if (!layer.getMasks().isEmpty()) {\n-      composition.hasMasks = true;\n-    }\n-    if (layer.getMatteType() != null && layer.getMatteType() != Layer.MatteType.None) {\n-      composition.hasMattes = true;\n-    }\n   }\n \n   private final Map<String, List<Layer>> precomps = new HashMap<>();\n@@ -185,8 +173,6 @@ private static void addLayer(LottieComposition composition, Layer layer) {\n   private long startFrame;\n   private long endFrame;\n   private int frameRate;\n-  private boolean hasMasks;\n-  private boolean hasMattes;\n   private float scale;\n \n   private LottieComposition(Resources res) {\n@@ -198,11 +184,11 @@ Layer layerModelForId(long id) {\n     return layerMap.get(id);\n   }\n \n-  Rect getBounds() {\n+  @SuppressWarnings(\"WeakerAccess\") public Rect getBounds() {\n     return bounds;\n   }\n \n-  long getDuration() {\n+  @SuppressWarnings(\"WeakerAccess\") public long getDuration() {\n     long frameDuration = endFrame - startFrame;\n     return (long) (frameDuration / (float) frameRate * 1000);\n   }\n@@ -225,15 +211,7 @@ float getDurationFrames() {\n   }\n \n \n-  boolean hasMasks() {\n-    return hasMasks;\n-  }\n-\n-  boolean hasMattes() {\n-    return hasMattes;\n-  }\n-\n-  float getScale() {\n+  public float getScale() {\n     return scale;\n   }\n ",
    "output": "Made a few getters on LottieComposition public\n\n#93"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -41,6 +41,7 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/AllSet.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/City.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/PreCompMadness.json\");\n+    TestRobot.testAnimation(getActivity(), \"Tests/MatteParentPrecomp.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/Mask_26.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/MatteInv.json\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -83,6 +83,10 @@ private void setupForModel() {\n     for (AnimatableLayer layer : layers) {\n       if (layer instanceof LayerView) {\n         layerMap.put(((LayerView) layer).getId(), ((LayerView) layer));\n+        LayerView matteLayer = ((LayerView) layer).matteLayer;\n+        if (matteLayer != null) {\n+          layerMap.put(matteLayer.getId(), matteLayer);\n+        }\n       }\n     }\n \n@@ -91,14 +95,20 @@ private void setupForModel() {\n         continue;\n       }\n       long parentId = ((LayerView) layer).getLayerModel().getParentId();\n-      if (parentId == -1) {\n-        continue;\n-      }\n       LayerView parentLayer = layerMap.get(parentId);\n-      if (parentLayer == null) {\n-        continue;\n+      if (parentLayer != null) {\n+        ((LayerView) layer).setParentLayer(parentLayer);\n+      }\n+\n+      LayerView matteLayer = ((LayerView) layer).matteLayer;\n+      if (matteLayer != null) {\n+        parentId = matteLayer.getLayerModel().getParentId();\n+        parentLayer = layerMap.get(parentId);\n+        if (parentLayer != null) {\n+          matteLayer.setParentLayer(parentLayer);\n+        }\n       }\n-      ((LayerView) layer).setParentLayer(parentLayer);\n+\n     }\n   }\n \n@@ -156,12 +166,23 @@ private void setupPreComp() {\n     if (precompLayers == null) {\n       return;\n     }\n+    LayerView mattedLayer = null;\n     for (int i = precompLayers.size() - 1; i >= 0; i--) {\n       Layer layer = precompLayers.get(i);\n       LayerView layerView =\n           new LayerView(layer, composition, getCallback(), canvasPool);\n       layerView.setPrecompSize(layerModel.getPreCompWidth(), layerModel.getPreCompHeight());\n-      addLayer(layerView);\n+      if (mattedLayer != null) {\n+        mattedLayer.setMatteLayer(layerView);\n+        mattedLayer = null;\n+      } else {\n+        addLayer(layerView);\n+        if (layer.getMatteType() == Layer.MatteType.Add) {\n+          mattedLayer = layerView;\n+        } else if (layer.getMatteType() == Layer.MatteType.Invert) {\n+          mattedLayer = layerView;\n+        }\n+      }\n     }\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -77,21 +77,21 @@ private void buildLayersForComposition(LottieComposition composition) {\n     }\n     LongSparseArray<LayerView> layerMap = new LongSparseArray<>(composition.getLayers().size());\n     List<LayerView> layers = new ArrayList<>(composition.getLayers().size());\n-    LayerView maskedLayer = null;\n+    LayerView mattedLayer = null;\n     for (int i = composition.getLayers().size() - 1; i >= 0; i--) {\n       Layer layer = composition.getLayers().get(i);\n       LayerView layerView;\n       layerView = new LayerView(layer, composition, this, canvasPool);\n       layerMap.put(layerView.getId(), layerView);\n-      if (maskedLayer != null) {\n-        maskedLayer.setMatteLayer(layerView);\n-        maskedLayer = null;\n+      if (mattedLayer != null) {\n+        mattedLayer.setMatteLayer(layerView);\n+        mattedLayer = null;\n       } else {\n         layers.add(layerView);\n         if (layer.getMatteType() == Layer.MatteType.Add) {\n-          maskedLayer = layerView;\n+          mattedLayer = layerView;\n         } else if (layer.getMatteType() == Layer.MatteType.Invert) {\n-          maskedLayer = layerView;\n+          mattedLayer = layerView;\n         }\n       }\n     }",
    "output": "Allow matted layers to establish their parent layer inside of a precomp (#134)\n\n#61"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -44,5 +44,6 @@ public void testAll() {\n     TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/Mask_26.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/MatteInv.json\");\n+    TestRobot.testStatic(getActivity(), \"Tests/MaskInv.json\");\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -21,14 +21,13 @@ class LayerView extends AnimatableLayer {\n   private MaskKeyframeAnimation mask;\n   private LayerView matteLayer;\n \n+  private final PorterDuffXfermode DST_OUT = new PorterDuffXfermode(PorterDuff.Mode.DST_OUT);\n+  private final PorterDuffXfermode DST_IN = new PorterDuffXfermode(PorterDuff.Mode.DST_IN);\n   private final RectF rect = new RectF();\n   private final List<LayerView> transformLayers = new ArrayList<>();\n   private final Paint mainCanvasPaint = new Paint();\n-  private final Paint normalPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n   private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n-    setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n-  }};\n+  private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n   private final Layer layerModel;\n   private final LottieComposition composition;\n@@ -51,9 +50,9 @@ class LayerView extends AnimatableLayer {\n     setBounds(composition.getBounds());\n \n     if (layerModel.getMatteType() == Layer.MatteType.Invert) {\n-      mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n+      mattePaint.setXfermode(DST_OUT);\n     } else {\n-      mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+      mattePaint.setXfermode(DST_IN);\n     }\n \n     setupForModel();\n@@ -203,7 +202,7 @@ private void setPrecompSize(int width, int height) {\n \n   private void setMask(MaskKeyframeAnimation mask) {\n     this.mask = mask;\n-    for (BaseKeyframeAnimation<?, Path> animation : mask.getMasks()) {\n+    for (BaseKeyframeAnimation<?, Path> animation : mask.getMaskAnimations()) {\n       addAnimation(animation);\n       animation.addUpdateListener(pathChangedListener);\n     }\n@@ -255,14 +254,11 @@ void setMatteLayer(LayerView matteLayer) {\n \n     rect.set(0, 0, canvas.getWidth(), canvas.getHeight());\n     if (hasMasks()) {\n-      bitmapCanvas.saveLayer(rect, maskPaint, SAVE_FLAGS);\n-      for (int i = transformLayers.size() - 1; i >= 0; i--) {\n-        LayerView layer = transformLayers.get(i);\n-        applyTransformForLayer(bitmapCanvas, layer);\n+      List<Mask> masks = mask.getMasks();\n+      List<BaseKeyframeAnimation<?, Path>> maskAnimations = mask.getMaskAnimations();\n+      for (int i = 0; i < masks.size(); i++) {\n+        applyMask(bitmapCanvas, masks.get(i), maskAnimations.get(i));\n       }\n-      applyTransformForLayer(bitmapCanvas, this);\n-      bitmapCanvas.drawPath(mask.getMaskUnionPath(), normalPaint);\n-      bitmapCanvas.restore();\n     }\n     bitmapCanvas.restore();\n \n@@ -279,12 +275,33 @@ void setMatteLayer(LayerView matteLayer) {\n     canvasPool.release(bitmapCanvas);\n   }\n \n+  private void applyMask(BitmapCanvas canvas, Mask mask,\n+      BaseKeyframeAnimation<?, Path> maskAnimation) {\n+    switch (mask.getMaskMode()) {\n+      case MaskModeSubtract:\n+        maskPaint.setXfermode(DST_OUT);\n+        break;\n+      case MaskModeAdd:\n+      default:\n+        maskPaint.setXfermode(DST_IN);\n+    }\n+\n+    canvas.saveLayer(rect, maskPaint, SAVE_FLAGS);\n+    for (int i = transformLayers.size() - 1; i >= 0; i--) {\n+      LayerView layer = transformLayers.get(i);\n+      applyTransformForLayer(canvas, layer);\n+    }\n+    applyTransformForLayer(canvas, this);\n+    canvas.drawPath(maskAnimation.getValue(), mainCanvasPaint);\n+    canvas.restore();\n+  }\n+\n   private boolean hasMatte() {\n     return matteLayer != null;\n   }\n \n   private boolean hasMasks() {\n-    return mask != null && !mask.getMasks().isEmpty();\n+    return mask != null && !mask.getMaskAnimations().isEmpty();\n   }\n \n   @Override public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Mask.java b/lottie/src/main/java/com/airbnb/lottie/Mask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Mask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Mask.java\n@@ -3,7 +3,7 @@\n import org.json.JSONObject;\n \n class Mask {\n-  private enum MaskMode {\n+  enum MaskMode {\n     MaskModeAdd,\n     MaskModeSubtract,\n     MaskModeIntersect,\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java\n@@ -7,22 +7,28 @@\n \n class MaskKeyframeAnimation {\n   private final Path path = new Path();\n-  private final List<BaseKeyframeAnimation<?, Path>> masks;\n+  private final List<BaseKeyframeAnimation<?, Path>> maskAnimations;\n+  private final List<Mask> masks;\n \n   MaskKeyframeAnimation(List<Mask> masks) {\n-    this.masks = new ArrayList<>(masks.size());\n+    this.masks = masks;\n+    this.maskAnimations = new ArrayList<>(masks.size());\n     for (int i = 0; i < masks.size(); i++) {\n-      this.masks.add(masks.get(i).getMaskPath().createAnimation());\n+      this.maskAnimations.add(masks.get(i).getMaskPath().createAnimation());\n     }\n   }\n \n-  List<BaseKeyframeAnimation<?, Path>> getMasks() {\n+  List<Mask> getMasks() {\n     return masks;\n   }\n \n+  List<BaseKeyframeAnimation<?, Path>> getMaskAnimations() {\n+    return maskAnimations;\n+  }\n+\n   Path getMaskUnionPath() {\n     path.reset();\n-    for (BaseKeyframeAnimation<?, Path> mask : masks) {\n+    for (BaseKeyframeAnimation<?, Path> mask : maskAnimations) {\n       this.path.addPath(mask.getValue());\n     }\n     return path;",
    "output": "Added support for subtract masks (#132)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -25,7 +25,10 @@ class LayerView extends AnimatableLayer {\n   private final List<LayerView> transformLayers = new ArrayList<>();\n   private final Paint mainCanvasPaint = new Paint();\n   private final Paint normalPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint overlayPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+  private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n+    setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+  }};\n \n   private final Layer layerModel;\n   private final LottieComposition composition;\n@@ -48,9 +51,9 @@ class LayerView extends AnimatableLayer {\n     setBounds(composition.getBounds());\n \n     if (layerModel.getMatteType() == Layer.MatteType.Invert) {\n-      overlayPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n+      mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n     } else {\n-      overlayPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+      mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n     }\n \n     setupForModel();\n@@ -252,7 +255,7 @@ void setMatteLayer(LayerView matteLayer) {\n \n     rect.set(0, 0, canvas.getWidth(), canvas.getHeight());\n     if (hasMasks()) {\n-      bitmapCanvas.saveLayer(rect, overlayPaint, SAVE_FLAGS);\n+      bitmapCanvas.saveLayer(rect, maskPaint, SAVE_FLAGS);\n       for (int i = transformLayers.size() - 1; i >= 0; i--) {\n         LayerView layer = transformLayers.get(i);\n         applyTransformForLayer(bitmapCanvas, layer);\n@@ -264,7 +267,7 @@ void setMatteLayer(LayerView matteLayer) {\n     bitmapCanvas.restore();\n \n     if (hasMatte()) {\n-      bitmapCanvas.saveLayer(rect, overlayPaint, SAVE_FLAGS);\n+      bitmapCanvas.saveLayer(rect, mattePaint, SAVE_FLAGS);\n       matteLayer.draw(bitmapCanvas);\n       bitmapCanvas.restore();\n     }",
    "output": "Fix porter duff mode of mask paint"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -6,6 +6,7 @@\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n+import android.util.Log;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n@@ -141,6 +142,11 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n     for (int i = 0; i < precompsJson.length(); i++) {\n       JSONObject precomp = precompsJson.optJSONObject(i);\n       JSONArray layersJson = precomp.optJSONArray(\"layers\");\n+      if (layersJson == null) {\n+        Log.w(L.TAG, \"Lottie doesn't yet support images.\");\n+        // TODO: image support\n+        continue;\n+      }\n       List<Layer> layers = new ArrayList<>(layersJson.length());\n       LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n       for (int j = 0; j < layersJson.length(); j++) {",
    "output": "Prevent a crash when trying to load an image layer"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -43,5 +43,6 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/PreCompMadness.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/Mask_26.json\");\n+    TestRobot.testStatic(getActivity(), \"Tests/MatteInv.json\");\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -25,9 +25,7 @@ class LayerView extends AnimatableLayer {\n   private final List<LayerView> transformLayers = new ArrayList<>();\n   private final Paint mainCanvasPaint = new Paint();\n   private final Paint normalPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-  private final Paint overlayPaint = new Paint(Paint.ANTI_ALIAS_FLAG) {{\n-    setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n-  }};\n+  private final Paint overlayPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n   private final Layer layerModel;\n   private final LottieComposition composition;\n@@ -49,6 +47,12 @@ class LayerView extends AnimatableLayer {\n     this.canvasPool = canvasPool;\n     setBounds(composition.getBounds());\n \n+    if (layerModel.getMatteType() == Layer.MatteType.Invert) {\n+      overlayPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n+    } else {\n+      overlayPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+    }\n+\n     setupForModel();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -90,6 +90,8 @@ private void buildLayersForComposition(LottieComposition composition) {\n         layers.add(layerView);\n         if (layer.getMatteType() == Layer.MatteType.Add) {\n           maskedLayer = layerView;\n+        } else if (layer.getMatteType() == Layer.MatteType.Invert) {\n+          maskedLayer = layerView;\n         }\n       }\n     }",
    "output": "Added support for alpha inverted masks\n\nFixes #102"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -32,7 +32,7 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n   private boolean reverseAnimationWhenLayerAdded;\n   private boolean systemAnimationsAreDisabled;\n \n-  LottieDrawable() {\n+  @SuppressWarnings(\"WeakerAccess\") public LottieDrawable() {\n     super(null);\n \n     animator.setRepeatCount(0);",
    "output": "Make LottieDrawable constructor public\n\nFixes #93"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n@@ -164,11 +164,23 @@ public void setColorFilter(ColorFilter colorFilter) {\n \n   void setTransform(TransformKeyframeAnimation transform) {\n     this.transform = transform;\n-    addAnimation(transform.getAnchorPoint());\n-    addAnimation(transform.getPosition());\n-    addAnimation(transform.getScale());\n-    addAnimation(transform.getRotation());\n-    addAnimation(transform.getOpacity());\n+    BaseKeyframeAnimation<?, PointF> anchorPoint = transform.getAnchorPoint();\n+    BaseKeyframeAnimation<?, PointF> position = transform.getPosition();\n+    BaseKeyframeAnimation<?, ScaleXY> scale = transform.getScale();\n+    BaseKeyframeAnimation<?, Float> rotation = transform.getRotation();\n+    BaseKeyframeAnimation<?, Integer> opacity = transform.getOpacity();\n+\n+    anchorPoint.addUpdateListener(pointChangedListener);\n+    position.addUpdateListener(pointChangedListener);\n+    scale.addUpdateListener(scaleChangedListener);\n+    rotation.addUpdateListener(floatChangedListener);\n+    opacity.addUpdateListener(integerChangedListener);\n+\n+    addAnimation(anchorPoint);\n+    addAnimation(position);\n+    addAnimation(scale);\n+    addAnimation(rotation);\n+    addAnimation(opacity);\n     invalidateSelf();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Transform.java b/lottie/src/main/java/com/airbnb/lottie/Transform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Transform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Transform.java\n@@ -1,12 +0,0 @@\n-package com.airbnb.lottie;\n-\n-import android.graphics.Rect;\n-\n-interface Transform {\n-  Rect getBounds();\n-  IAnimatablePathValue getPosition();\n-  IAnimatablePathValue getAnchorPoint();\n-  AnimatableScaleValue getScale();\n-  AnimatableFloatValue getRotation();\n-  AnimatableIntegerValue getOpacity();\n-}\n\\ No newline at end of file",
    "output": "Add update listeners TransformKeyframeAnimations"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -232,7 +232,7 @@ void setMatteLayer(LayerView matteLayer) {\n     if (contentCanvas == null || contentBitmap == null) {\n       int mainCanvasCount = saveCanvas(mainCanvas);\n       // Now apply the parent transformations from the top down.\n-      for (int i = 0; i < transformLayers.size(); i++) {\n+      for (int i = transformLayers.size() - 1; i >= 0; i--) {\n         LayerView layer = transformLayers.get(i);\n         applyTransformForLayer(mainCanvas, layer);\n       }",
    "output": "Fix parent view iteration in LayerView"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java\n@@ -27,7 +27,7 @@ class AnimatableFloatValue extends BaseAnimatableValue<Float, Float> {\n       return new StaticKeyframeAnimation<>(initialValue);\n     }\n \n-    return new NumberKeyframeAnimation<>(keyframes, Float.class);\n+    return new FloatKeyframeAnimation(keyframes);\n   }\n \n   public Float getInitialValue() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -31,7 +31,7 @@ class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {\n       return new StaticKeyframeAnimation<>(initialValue);\n     }\n \n-    return new NumberKeyframeAnimation<>(keyframes, Integer.class);\n+    return new IntegerKeyframeAnimation(keyframes);\n   }\n \n   public Integer getInitialValue() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/FloatKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/FloatKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/FloatKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/FloatKeyframeAnimation.java\n@@ -0,0 +1,16 @@\n+package com.airbnb.lottie;\n+\n+import java.util.List;\n+\n+import static com.airbnb.lottie.MiscUtils.lerp;\n+\n+class FloatKeyframeAnimation extends KeyframeAnimation<Float> {\n+\n+  FloatKeyframeAnimation(List<Keyframe<Float>> keyframes) {\n+    super(keyframes);\n+  }\n+\n+  @Override Float getValue(Keyframe<Float> keyframe, float keyframeProgress) {\n+    return lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/IntegerKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/IntegerKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/IntegerKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/IntegerKeyframeAnimation.java\n@@ -0,0 +1,16 @@\n+package com.airbnb.lottie;\n+\n+import java.util.List;\n+\n+import static com.airbnb.lottie.MiscUtils.lerp;\n+\n+class IntegerKeyframeAnimation extends KeyframeAnimation<Integer> {\n+\n+  IntegerKeyframeAnimation(List<Keyframe<Integer>> keyframes) {\n+    super(keyframes);\n+  }\n+\n+  @Override Integer getValue(Keyframe<Integer> keyframe, float keyframeProgress) {\n+    return lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);\n+  }\n+}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -155,8 +155,8 @@ private void setupForModel() {\n \n   private void buildAnimations() {\n     if (!layerModel.getInOutKeyframes().isEmpty()) {\n-      NumberKeyframeAnimation<Float> inOutAnimation = new NumberKeyframeAnimation<>(\n-          layerModel.getInOutKeyframes(), Float.class);\n+      FloatKeyframeAnimation inOutAnimation =\n+          new FloatKeyframeAnimation(layerModel.getInOutKeyframes());\n       inOutAnimation.setIsDiscrete();\n       inOutAnimation.addUpdateListener(new KeyframeAnimation.AnimationListener<Float>() {\n         @Override public void onValueChanged(Float value) {\n@@ -228,12 +228,12 @@ void setMatteLayer(LayerView matteLayer) {\n       transformLayers.add(parent);\n       parent = parent.getParentLayer();\n     }\n-    Collections.reverse(transformLayers);\n \n     if (contentCanvas == null || contentBitmap == null) {\n       int mainCanvasCount = saveCanvas(mainCanvas);\n       // Now apply the parent transformations from the top down.\n-      for (LayerView layer : transformLayers) {\n+      for (int i = 0; i < transformLayers.size(); i++) {\n+        LayerView layer = transformLayers.get(i);\n         applyTransformForLayer(mainCanvas, layer);\n       }\n       super.draw(mainCanvas);\n@@ -244,7 +244,8 @@ void setMatteLayer(LayerView matteLayer) {\n     int contentCanvasCount = saveCanvas(contentCanvas);\n     int maskCanvasCount = saveCanvas(maskCanvas);\n     // Now apply the parent transformations from the top down.\n-    for (LayerView layer : transformLayers) {\n+    for (int i = transformLayers.size() - 1; i >= 0 ; i--) {\n+      LayerView layer = transformLayers.get(i);\n       applyTransformForLayer(contentCanvas, layer);\n       applyTransformForLayer(maskCanvas, layer);\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n@@ -278,8 +278,8 @@ private void updateDashPattern() {\n   }\n \n   @Override public int getAlpha() {\n-    Integer shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n-    Integer transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n+    int shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n+    int transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n     int layerAlpha = super.getAlpha();\n     return (int) ((shapeAlpha / 255f * transformAlpha / 255f * layerAlpha / 255f) * 255);\n   }",
    "output": "Reduce memory overhead by eliminating some unboxing and iterator creation (#126)\n\nMore can be done but this is a good start."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -37,6 +37,7 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/TrimPathsFull.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/Laugh4.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/Star.json\");\n+    TestRobot.testAnimation(getActivity(), \"Tests/Polygon.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java b/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java\n@@ -23,7 +23,7 @@ class PolystarLayer extends AnimatableLayer {\n       PolystarShapeLayer fillLayer = new PolystarShapeLayer(getCallback());\n       fillLayer.setColor(fill.getColor().createAnimation());\n       fillLayer.setAlpha(fill.getOpacity().createAnimation());\n-      fillLayer.updateCircle(polystarShape);\n+      fillLayer.setShape(polystarShape);\n       if (trim != null) {\n         fillLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),\n             trim.getOffset().createAnimation());\n@@ -46,7 +46,7 @@ class PolystarLayer extends AnimatableLayer {\n         strokeLayer.setDashPattern(dashPatternAnimations, stroke.getDashOffset().createAnimation());\n       }\n       strokeLayer.setLineCapType(stroke.getCapType());\n-      strokeLayer.updateCircle(polystarShape);\n+      strokeLayer.setShape(polystarShape);\n       if (trim != null) {\n         strokeLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),\n             trim.getOffset().createAnimation());\n@@ -61,8 +61,11 @@ private static final class PolystarShapeLayer extends ShapeLayer {\n     /**\n      * This was empirically derived by creating polystars, converting them to\n      * curves, and calculating a scale factor.\n+     * It works best for polygons and stars with 3 points and needs more\n+     * work otherwise.\n      */\n     private static final float POLYSTAR_MAGIC_NUMBER = .47829f;\n+    private static final float POLYGON_MAGIC_NUMBER = .25f;\n     private final KeyframeAnimation.AnimationListener<PointF> pointChangedListener =\n         new KeyframeAnimation.AnimationListener<PointF>() {\n           @Override\n@@ -95,7 +98,7 @@ public void onValueChanged(Float value) {\n       setPath(new StaticKeyframeAnimation<>(path));\n     }\n \n-    void updateCircle(PolystarShape polystarShape) {\n+    void setShape(PolystarShape polystarShape) {\n       type = polystarShape.getType();\n \n       if (pointsAnimation != null) {\n@@ -130,24 +133,37 @@ void updateCircle(PolystarShape polystarShape) {\n       rotationAnimation = polystarShape.getRotation().createAnimation();\n       outerRadiusAnimation = polystarShape.getOuterRadius().createAnimation();\n       outerRoundednessAnimation = polystarShape.getOuterRoundedness().createAnimation();\n-      innerRadiusAnimation = polystarShape.getInnerRadius().createAnimation();\n-      innerRoundednessAnimation = polystarShape.getInnerRoundedness().createAnimation();\n+      // Not used for polygons.\n+      if (polystarShape.getInnerRadius() != null) {\n+        innerRadiusAnimation = polystarShape.getInnerRadius().createAnimation();\n+      }\n+      if (polystarShape.getInnerRoundedness() != null) {\n+        innerRoundednessAnimation = polystarShape.getInnerRoundedness().createAnimation();\n+      }\n \n       pointsAnimation.addUpdateListener(floatChangedListener);\n       positionAnimation.addUpdateListener(pointChangedListener);\n       rotationAnimation.addUpdateListener(floatChangedListener);\n       outerRadiusAnimation.addUpdateListener(floatChangedListener);\n       outerRoundednessAnimation.addUpdateListener(floatChangedListener);\n-      innerRadiusAnimation.addUpdateListener(floatChangedListener);\n-      innerRoundednessAnimation.addUpdateListener(floatChangedListener);\n+      if (innerRadiusAnimation != null) {\n+        innerRadiusAnimation.addUpdateListener(floatChangedListener);\n+      }\n+      if (innerRoundednessAnimation != null) {\n+        innerRoundednessAnimation.addUpdateListener(floatChangedListener);\n+      }\n \n       addAnimation(pointsAnimation);\n       addAnimation(positionAnimation);\n       addAnimation(rotationAnimation);\n       addAnimation(outerRadiusAnimation);\n       addAnimation(outerRoundednessAnimation);\n-      addAnimation(innerRadiusAnimation);\n-      addAnimation(innerRoundednessAnimation);\n+      if (innerRadiusAnimation != null) {\n+        addAnimation(innerRadiusAnimation);\n+      }\n+      if (innerRoundednessAnimation != null) {\n+        addAnimation(innerRoundednessAnimation) ;\n+      }\n       onPolystarChanged();\n     }\n \n@@ -272,7 +288,60 @@ private void createStarPath() {\n     }\n \n     private void createPolygonPath() {\n+      int points = (int) Math.floor(pointsAnimation.getValue());\n+      double currentAngle = rotationAnimation == null ? 0f : rotationAnimation.getValue();\n+      // Start at +y instead of +x\n+      currentAngle -= 90;\n+      // convert to radians\n+      currentAngle = Math.toRadians(currentAngle);\n+      // adjust current angle for partial points\n+      float anglePerPoint = (float) (2 * Math.PI / points);\n+\n+      path.reset();\n \n+      float roundedness = outerRoundednessAnimation.getValue() / 100f;\n+      float radius = outerRadiusAnimation.getValue();\n+      float x;\n+      float y;\n+      float previousX;\n+      float previousY;\n+      x = (float) (radius * Math.cos(currentAngle));\n+      y = (float) (radius * Math.sin(currentAngle));\n+      path.moveTo(x, y);\n+      currentAngle += anglePerPoint;\n+\n+      double numPoints = Math.ceil(points);\n+      for (int i = 0; i < numPoints; i++) {\n+        previousX = x;\n+        previousY = y;\n+        x = (float) (radius * Math.cos(currentAngle));\n+        y = (float) (radius * Math.sin(currentAngle));\n+\n+        if (roundedness != 0) {\n+          float cp1Theta = (float) (Math.atan2(previousY, previousX) - Math.PI / 2f);\n+          float cp1Dx = (float) Math.cos(cp1Theta);\n+          float cp1Dy = (float) Math.sin(cp1Theta);\n+\n+          float cp2Theta = (float) (Math.atan2(y, x) - Math.PI / 2f);\n+          float cp2Dx = (float) Math.cos(cp2Theta);\n+          float cp2Dy = (float) Math.sin(cp2Theta);\n+\n+          float cp1x = radius * roundedness * POLYGON_MAGIC_NUMBER * cp1Dx;\n+          float cp1y = radius * roundedness * POLYGON_MAGIC_NUMBER * cp1Dy;\n+          float cp2x = radius * roundedness * POLYGON_MAGIC_NUMBER * cp2Dx;\n+          float cp2y = radius * roundedness * POLYGON_MAGIC_NUMBER * cp2Dy;\n+          path.cubicTo(previousX - cp1x,previousY - cp1y, x + cp2x, y + cp2y, x, y);\n+        } else {\n+          path.lineTo(x, y);\n+        }\n+\n+        currentAngle += anglePerPoint;\n+      }\n+\n+\n+      PointF position = positionAnimation.getValue();\n+      path.offset(position.x, position.y);\n+      path.close();\n     }\n   }\n }",
    "output": "Added support for roundedness on polygons (#124)\n\nIt's not 100% accurate but it's very close and shouldn't be noticeable for most cases."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/RectLayer.java b/lottie/src/main/java/com/airbnb/lottie/RectLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RectLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RectLayer.java\n@@ -168,6 +168,10 @@ private void updateRect() {\n       float halfWidth = size.x / 2f;\n       float halfHeight = size.y / 2f;\n       float radius = rectCornerRadius == null ? 0f : rectCornerRadius.getValue();\n+      float maxRadius = Math.min(halfWidth, halfHeight);\n+      if (radius > maxRadius) {\n+        radius = maxRadius;\n+      }\n \n       // Draw the rectangle top right to bottom left.\n       PointF position = rectPosition == null ? Utils.emptyPoint() : rectPosition.getValue();",
    "output": "Clip rectangle radii when it is set too large (#125)\n\nThis matches the After Effects behavior"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -36,6 +36,7 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/SplitDimensions.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/TrimPathsFull.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/Laugh4.json\");\n+    TestRobot.testAnimation(getActivity(), \"Tests/Star.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java b/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java\n@@ -58,6 +58,11 @@ class PolystarLayer extends AnimatableLayer {\n \n   private static final class PolystarShapeLayer extends ShapeLayer {\n \n+    /**\n+     * This was empirically derived by creating polystars, converting them to\n+     * curves, and calculating a scale factor.\n+     */\n+    private static final float POLYSTAR_MAGIC_NUMBER = .47829f;\n     private final KeyframeAnimation.AnimationListener<PointF> pointChangedListener =\n         new KeyframeAnimation.AnimationListener<PointF>() {\n           @Override\n@@ -161,52 +166,103 @@ private void onPolystarChanged() {\n     private void createStarPath() {\n       float points = pointsAnimation.getValue();\n       double currentAngle = rotationAnimation == null ? 0f : rotationAnimation.getValue();\n-      // Start at +y instead of +9\n+      // Start at +y instead of +x\n       currentAngle -= 90;\n       // convert to radians\n       currentAngle = Math.toRadians(currentAngle);\n       // adjust current angle for partial points\n-      double anglePerPoint = 2 * Math.PI / (double) points;\n-      double halfAnglePerPoint = anglePerPoint / 2.0;\n+      float anglePerPoint = (float) (2 * Math.PI / points);\n+      float halfAnglePerPoint = anglePerPoint / 2.0f;\n       float partialPointAmount = points - (int) points;\n       if (partialPointAmount != 0) {\n         currentAngle += halfAnglePerPoint * (1f - partialPointAmount);\n       }\n \n-      double outerRadius = outerRadiusAnimation.getValue();\n-      double innerRadius = innerRadiusAnimation.getValue();\n+      float outerRadius = outerRadiusAnimation.getValue();\n+      float innerRadius = innerRadiusAnimation.getValue();\n+\n+      float innerRoundedness = 0f;\n+      if (innerRoundednessAnimation != null) {\n+        innerRoundedness = innerRoundednessAnimation.getValue() / 100f;\n+      }\n+      float outerRoundedness = 0f;\n+      if (outerRoundednessAnimation != null) {\n+        outerRoundedness = outerRoundednessAnimation.getValue() / 100f;\n+      }\n \n       path.reset();\n \n \n-      double partialPointRadius = 0;\n+      float x;\n+      float y;\n+      float previousX;\n+      float previousY;\n+      float partialPointRadius = 0;\n       if (partialPointAmount != 0) {\n         partialPointRadius = innerRadius + partialPointAmount * (outerRadius - innerRadius);\n-        path.moveTo((float) (partialPointRadius * Math.cos(currentAngle)),\n-            (float) (partialPointRadius * Math.sin(currentAngle)));\n-        currentAngle += halfAnglePerPoint * partialPointAmount;\n+        x = (float) (partialPointRadius * Math.cos(currentAngle));\n+        y = (float) (partialPointRadius * Math.sin(currentAngle));\n+        path.moveTo(x, y);\n+        currentAngle += anglePerPoint * partialPointAmount / 2f;\n       } else {\n-        path.moveTo((float) (outerRadius * Math.cos(currentAngle)),\n-            (float) (outerRadius * Math.sin(currentAngle)));\n+        x = (float) (outerRadius * Math.cos(currentAngle));\n+        y = (float) (outerRadius * Math.sin(currentAngle));\n+        path.moveTo(x, y);\n         currentAngle += halfAnglePerPoint;\n       }\n \n-      for (int i = 0; i < Math.floor(points); i++) {\n-        path.lineTo((float) (innerRadius * Math.cos(currentAngle)),\n-            (float) (innerRadius * Math.sin(currentAngle)));\n-        currentAngle += halfAnglePerPoint;\n-        path.lineTo((float) (outerRadius * Math.cos(currentAngle)),\n-            (float) (outerRadius * Math.sin(currentAngle)));\n-        currentAngle += halfAnglePerPoint;\n-      }\n+      // True means the line will go to outer radius. False means inner radius.\n+      boolean longSegment = false;\n+      double numPoints = Math.ceil(points) * 2;\n+      for (int i = 0; i < numPoints; i++) {\n+        float radius = longSegment ? outerRadius : innerRadius;\n+        float dTheta = halfAnglePerPoint;\n+        if (partialPointRadius != 0 && i == numPoints - 2) {\n+          dTheta = anglePerPoint * partialPointAmount / 2f;\n+        }\n+        if (partialPointRadius != 0 && i == numPoints - 1) {\n+          radius = partialPointRadius;\n+        }\n+        previousX = x;\n+        previousY = y;\n+        x = (float) (radius * Math.cos(currentAngle));\n+        y = (float) (radius * Math.sin(currentAngle));\n+\n+        if (innerRoundedness == 0 && outerRoundedness == 0) {\n+          path.lineTo(x, y);\n+        } else {\n+          float cp1Theta = (float) (Math.atan2(previousY, previousX) - Math.PI / 2f);\n+          float cp1Dx = (float) Math.cos(cp1Theta);\n+          float cp1Dy = (float) Math.sin(cp1Theta);\n+\n+          float cp2Theta = (float) (Math.atan2(y, x) - Math.PI / 2f);\n+          float cp2Dx = (float) Math.cos(cp2Theta);\n+          float cp2Dy = (float) Math.sin(cp2Theta);\n+\n+          float cp1Roundedness = longSegment ? innerRoundedness : outerRoundedness;\n+          float cp2Roundedness = longSegment ? outerRoundedness : innerRoundedness;\n+          float cp1Radius = longSegment ? innerRadius : outerRadius;\n+          float cp2Radius = longSegment ? outerRadius : innerRadius;\n+\n+          float cp1x = cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER * cp1Dx;\n+          float cp1y = cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER * cp1Dy;\n+          float cp2x = cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER * cp2Dx;\n+          float cp2y = cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER * cp2Dy;\n+          if (partialPointAmount != 0) {\n+            if (i == 0) {\n+              cp1x *= partialPointAmount;\n+              cp1y *= partialPointAmount;\n+            } else if (i == numPoints - 1) {\n+              cp2x *= partialPointAmount;\n+              cp2y *= partialPointAmount;\n+            }\n+          }\n \n-      if (partialPointAmount != 0) {\n-        // currentAngle -= halfAnglePerPoint;\n-        path.lineTo((float) (innerRadius * Math.cos(currentAngle)),\n-            (float) (innerRadius * Math.sin(currentAngle)));\n-        currentAngle += halfAnglePerPoint * partialPointAmount;\n-        path.lineTo((float) (partialPointRadius * Math.cos(currentAngle)),\n-            (float) (partialPointRadius * Math.sin(currentAngle)));\n+          path.cubicTo(previousX - cp1x,previousY - cp1y, x + cp2x, y + cp2y, x, y);\n+        }\n+\n+        currentAngle += dTheta;\n+        longSegment = !longSegment;\n       }\n \n ",
    "output": "Added support for rounded polystars (#121)\n\nThe control points involves a magic number that works best for 3 points. More work will be required to get it right for all stars."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n@@ -106,6 +106,7 @@ public void onValueChanged(ScaleXY value) {\n   private List<BaseKeyframeAnimation<?, Float>> lineDashPattern;\n   private BaseKeyframeAnimation<?, Float> lineDashPatternOffset;\n   private boolean pathPropertiesChanged = true;\n+  private boolean dashPatternChanged;\n \n   ShapeLayer(Drawable.Callback callback) {\n     super(callback);\n@@ -169,6 +170,9 @@ public void draw(@NonNull Canvas canvas) {\n     if (pathPropertiesChanged) {\n       updateTrimPathPath();\n     }\n+    if (dashPatternChanged) {\n+      updateDashPattern();\n+    }\n     if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n       return;\n     }\n@@ -252,6 +256,27 @@ private void updateTrimPathPath() {\n     }\n   }\n \n+  private void updateDashPattern() {\n+    float[] values = new float[lineDashPattern.size()];\n+    for (int i = 0; i < lineDashPattern.size(); i++) {\n+      values[i] = lineDashPattern.get(i).getValue();\n+      // If the value of the dash pattern or gap is too small, the number of individual sections\n+      // approaches infinity as the value approaches 0.\n+      // To mitigate this, we essentially put a minimum value on the dash pattern size of 1px\n+      // and a minimum gap size of 0.01.\n+      if (i % 2 == 0) {\n+        if (values[i] < 1f) {\n+          values[i] = 1f;\n+        }\n+      } else {\n+        if (values[i] < 0.1f) {\n+          values[i] = 0.1f;\n+        }\n+      }\n+    }\n+    paint.setPathEffect(new DashPathEffect(values, lineDashPatternOffset.getValue()));\n+  }\n+\n   @Override public int getAlpha() {\n     Integer shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n     Integer transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n@@ -327,26 +352,18 @@ void setDashPattern(List<BaseKeyframeAnimation<?, Float>> lineDashPattern,\n     }\n     this.lineDashPattern = lineDashPattern;\n     this.lineDashPatternOffset = offset;\n-    addAnimation(lineDashPattern.get(0));\n-    lineDashPattern.get(0).addUpdateListener(dashPatternChangedListener);\n-    if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {\n-      addAnimation(lineDashPattern.get(1));\n-      lineDashPattern.get(1).addUpdateListener(dashPatternChangedListener);\n+    for (int i = 0; i < lineDashPattern.size(); i++) {\n+      BaseKeyframeAnimation<?, Float> dashPattern = lineDashPattern.get(i);\n+      addAnimation(dashPattern);\n+      dashPattern.addUpdateListener(dashPatternChangedListener);\n     }\n     addAnimation(offset);\n     offset.addUpdateListener(dashPatternChangedListener);\n     onDashPatternChanged();\n   }\n \n   private void onDashPatternChanged() {\n-    float[] values = new float[lineDashPattern.size()];\n-    for (int i = 0; i < lineDashPattern.size(); i++) {\n-      values[i] = lineDashPattern.get(i).getValue();\n-      if (values[i] == 0) {\n-        values[i] = 0.01f;\n-      }\n-    }\n-    paint.setPathEffect(new DashPathEffect(values, lineDashPatternOffset.getValue()));\n+    dashPatternChanged = true;\n     invalidateSelf();\n   }\n ",
    "output": "Prevent Lottie from drawing a ~infinite number of paths with 0 dash patterns (#118)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -35,6 +35,7 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/EllipseTrimPath.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/SplitDimensions.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/TrimPathsFull.json\");\n+    TestRobot.testAnimation(getActivity(), \"Tests/Laugh4.json\");\n     TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/Layer.java b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.Color;\n import android.graphics.Rect;\n+import android.support.annotation.Nullable;\n import android.util.Log;\n \n import org.json.JSONArray;\n@@ -35,6 +36,9 @@ static Layer fromJson(JSONObject json, LottieComposition composition) throws JSO\n     Layer layer = new Layer(composition);\n     layer.layerName = json.getString(\"nm\");\n     layer.layerId = json.getLong(\"ind\");\n+    if (json.has(\"refId\")) {\n+      layer.precompId = json.getString(\"refId\");\n+    }\n \n     int layerType = json.getInt(\"ty\");\n     if (layerType <= LottieLayerType.Shape.ordinal()) {\n@@ -89,7 +93,8 @@ static Layer fromJson(JSONObject json, LottieComposition composition) throws JSO\n       // Do nothing.\n     }\n     if (position != null) {\n-      layer.position = AnimatablePathValue.createAnimatablePathOrSplitDimensionPath(position, composition);\n+      layer.position =\n+          AnimatablePathValue.createAnimatablePathOrSplitDimensionPath(position, composition);\n     }\n \n     JSONObject anchor = null;\n@@ -182,6 +187,7 @@ static Layer fromJson(JSONObject json, LottieComposition composition) throws JSO\n   private long layerId;\n   private LottieLayerType layerType;\n   private long parentId = -1;\n+  @Nullable private String precompId;\n \n   private final List<Mask> masks = new ArrayList<>();\n \n@@ -228,6 +234,10 @@ String getName() {\n     return layerName;\n   }\n \n+  @Nullable String getPrecompId() {\n+    return precompId;\n+  }\n+\n   List<Mask> getMasks() {\n     return masks;\n   }\n@@ -305,7 +315,8 @@ String toString(String prefix) {\n       sb.append(prefix).append(\"\\tMasks: \").append(getMasks().size()).append(\"\\n\");\n     }\n     if (getSolidWidth() != 0 && getSolidHeight() != 0) {\n-      sb.append(prefix).append(\"\\tBackground: \").append(String.format(Locale.US, \"%dx%d %X\\n\", getSolidWidth(), getSolidHeight(), getSolidColor()));\n+      sb.append(prefix).append(\"\\tBackground: \").append(String\n+          .format(Locale.US, \"%dx%d %X\\n\", getSolidWidth(), getSolidHeight(), getSolidColor()));\n     }\n     if (!shapes.isEmpty()) {\n       sb.append(prefix).append(\"\\tShapes:\\n\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java\n@@ -12,6 +12,7 @@\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import android.support.v4.util.LongSparseArray;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -56,6 +57,32 @@ class LayerView extends AnimatableLayer {\n       }\n     }\n \n+    List<Layer> precomps = composition.getPrecomps(layerModel.getPrecompId());\n+    LongSparseArray<LayerView> precompMap = new LongSparseArray<>();\n+    if (precomps != null) {\n+      for (int i = precomps.size() - 1; i >= 0; i--) {\n+        LayerView precompLayerView = new LayerView(\n+            precomps.get(i), composition, callback, mainBitmap, maskBitmap, matteBitmap);\n+        addLayer(precompLayerView);\n+        precompMap.put(precompLayerView.getId(), precompLayerView);\n+      }\n+    }\n+\n+    for (AnimatableLayer layer : layers) {\n+      if (!(layer instanceof LayerView)) {\n+        continue;\n+      }\n+      long parentId = ((LayerView) layer).getLayerModel().getParentId();\n+      if (parentId == -1) {\n+        continue;\n+      }\n+      LayerView parentLayer = precompMap.get(parentId);\n+      if (parentLayer == null) {\n+        continue;\n+      }\n+      ((LayerView) layer).setParentLayer(parentLayer);\n+    }\n+\n     setupForModel();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -4,6 +4,7 @@\n import android.content.res.Resources;\n import android.graphics.Rect;\n import android.os.AsyncTask;\n+import android.support.annotation.Nullable;\n import android.support.annotation.VisibleForTesting;\n import android.support.v4.util.LongSparseArray;\n \n@@ -14,7 +15,9 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * After Effects/Bodymovin composition model. This is the serialized model from which the\n@@ -157,14 +160,19 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n     // These are precomps. This naively adds the precomp layers to the main composition.\n     // TODO: Significant work will have to be done to properly support them.\n     try {\n-      JSONArray assets = json.getJSONArray(\"assets\");\n-      for (int i = 0; i < assets.length(); i++) {\n-        JSONObject asset = assets.getJSONObject(i);\n-        JSONArray layers = asset.getJSONArray(\"layers\");\n-        for (int j = 0; j < layers.length(); j++) {\n-          Layer layer = Layer.fromJson(layers.getJSONObject(j), composition);\n-          addLayer(composition, layer);\n+      JSONArray precomps = json.getJSONArray(\"assets\");\n+      for (int i = 0; i < precomps.length(); i++) {\n+        JSONObject precomp = precomps.getJSONObject(i);\n+        JSONArray layersJson = precomp.getJSONArray(\"layers\");\n+        List<Layer> layers = new ArrayList<>(layersJson.length());\n+        LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n+        for (int j = 0; j < layersJson.length(); j++) {\n+          Layer layer = Layer.fromJson(layersJson.getJSONObject(j), composition);\n+          layerMap.put(layer.getId(), layer);\n+          layers.add(layer);\n         }\n+        String id = precomp.getString(\"id\");\n+        composition.precomps.put(id, layers);\n       }\n     } catch (JSONException e) {\n       // Do nothing.\n@@ -184,6 +192,7 @@ private static void addLayer(LottieComposition composition, Layer layer) {\n     }\n   }\n \n+  private final Map<String, List<Layer>> precomps = new HashMap<>();\n   private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n   private final List<Layer> layers = new ArrayList<>();\n   private Rect bounds;\n@@ -226,6 +235,11 @@ List<Layer> getLayers() {\n     return layers;\n   }\n \n+  @Nullable\n+  List<Layer> getPrecomps(String id) {\n+    return precomps.get(id);\n+  }\n+\n   float getDurationFrames() {\n     return getDuration() * (float) frameRate / 1000f;\n   }",
    "output": "Initial precomp support (#114)\n\nThis adds initial precomp support. It works for most relatively simple precomps including precomps with parent layers but doesn't yet support masks, mattes, or start delays.\r\n\r\n#61"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie;\n \n+import android.annotation.SuppressLint;\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.DashPathEffect;\n@@ -162,6 +163,7 @@ private void onPathPropertiesChanged() {\n     invalidateSelf();\n   }\n \n+  @SuppressLint(\"NewApi\")\n   @Override\n   public void draw(@NonNull Canvas canvas) {\n     if (pathPropertiesChanged) {",
    "output": "Suppress lint warning in ShapeLayer#draw (#117)"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -68,8 +68,6 @@ static AnimationFragment newInstance() {\n   @BindView(R.id.invert_colors) ImageButton invertButton;\n   @BindView(R.id.play_button) ImageButton playButton;\n   @BindView(R.id.loop) ImageButton loopButton;\n-  // @BindView(R.id.frames_per_second) TextView fpsView;\n-  // @BindView(R.id.dropped_frames) TextView droppedFramesView;\n   @BindView(R.id.animation_name) TextView animationNameView;\n \n   @Nullable\n@@ -87,11 +85,6 @@ public void onClick(View v) {\n         getFragmentManager().popBackStack();\n       }\n     });\n-\n-    //noinspection ConstantConditions\n-    // fpsView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n-    //noinspection ConstantConditions\n-    // droppedFramesView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n     postUpdatePlayButtonText();\n     onLoopChanged();\n     animationView.addAnimatorListener(new Animator.AnimatorListener() {",
    "output": "Cleaned up dead code and fixed inverted background border in AnimationFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -2,7 +2,6 @@\n \n import android.animation.Animator;\n import android.animation.ValueAnimator;\n-import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.content.DialogInterface;\n@@ -17,6 +16,7 @@\n import android.support.v7.app.AppCompatActivity;\n import android.support.v7.widget.AppCompatSeekBar;\n import android.support.v7.widget.Toolbar;\n+import android.util.Log;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n@@ -47,6 +47,8 @@\n import okhttp3.Response;\n \n public class AnimationFragment extends Fragment {\n+  private static final String TAG = AnimationFragment.class.getSimpleName();\n+\n   private static final int RC_ASSET = 1337;\n   private static final int RC_FILE = 1338;\n   private static final int RC_URL = 1339;\n@@ -345,15 +347,9 @@ private void startRecordingDroppedFrames() {\n     getApplication().startRecordingDroppedFrames();\n   }\n \n-  @SuppressWarnings(\"unused\")\n-  @SuppressLint({\"SetTextI18n\", \"DefaultLocale\"})\n   private void recordDroppedFrames() {\n     Pair<Integer, Long> droppedFrames = getApplication().stopRecordingDroppedFrames();\n-    int targetFrames = (int) ((droppedFrames.second / 1000000000f) * 60);\n-    int actualFrames = targetFrames - droppedFrames.first;\n-    // fpsView.setText(String.format(\"Fps: %.0f\", actualFrames / (animationView.getDuration() /\n-    // 1000f)));\n-    // droppedFramesView.setText(\"Dropped frames: \" + droppedFrames.first);\n+    Log.d(TAG, \"Dropped frames: \" + droppedFrames.first);\n   }\n \n   private ILottieApplication getApplication() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -2,7 +2,6 @@\n \n import android.animation.Animator;\n import android.animation.ValueAnimator;\n-import android.annotation.SuppressLint;\n import android.content.Context;\n import android.content.res.TypedArray;\n import android.graphics.Canvas;\n@@ -149,12 +148,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n     super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n \n-  @SuppressLint(\"MissingSuperCall\")\n-  @Override\n-  protected boolean verifyDrawable(@NonNull Drawable drawable) {\n-    return true;\n-  }\n-\n   @Override\n   protected void onDraw(Canvas canvas) {\n     super.onDraw(canvas);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n@@ -1,6 +1,5 @@\n package com.airbnb.lottie;\n \n-import android.annotation.SuppressLint;\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.DashPathEffect;\n@@ -105,6 +104,7 @@ public void onValueChanged(ScaleXY value) {\n   private BaseKeyframeAnimation<?, Integer> transformAlpha;\n   private List<BaseKeyframeAnimation<?, Float>> lineDashPattern;\n   private BaseKeyframeAnimation<?, Float> lineDashPatternOffset;\n+  private boolean pathPropertiesChanged = true;\n \n   ShapeLayer(Drawable.Callback callback) {\n     super(callback);\n@@ -158,6 +158,27 @@ void onPathChanged() {\n   }\n \n   private void onPathPropertiesChanged() {\n+    pathPropertiesChanged = true;\n+    invalidateSelf();\n+  }\n+\n+  @Override\n+  public void draw(@NonNull Canvas canvas) {\n+    if (pathPropertiesChanged) {\n+      updateTrimPathPath();\n+    }\n+    if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n+      return;\n+    }\n+    paint.setAlpha(getAlpha());\n+    canvas.drawPath(currentPath, paint);\n+    if (!extraTrimPath.isEmpty()) {\n+      canvas.drawPath(extraTrimPath, paint);\n+    }\n+  }\n+\n+  private void updateTrimPathPath() {\n+    pathPropertiesChanged = false;\n     boolean needsStrokeStart =\n         strokeStart != null && strokeStart.getValue() != currentPathStrokeStart;\n     boolean needsStrokeEnd = strokeEnd != null && strokeEnd.getValue() != currentPathStrokeEnd;\n@@ -227,24 +248,6 @@ private void onPathPropertiesChanged() {\n             true);\n       }\n     }\n-\n-    currentPath.computeBounds(tempRect, false);\n-    setBounds((int) tempRect.left, (int) tempRect.top, (int) tempRect.right, (int) tempRect.bottom);\n-\n-    invalidateSelf();\n-  }\n-\n-  @SuppressLint(\"NewApi\")\n-  @Override\n-  public void draw(@NonNull Canvas canvas) {\n-    if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n-      return;\n-    }\n-    paint.setAlpha(getAlpha());\n-    canvas.drawPath(currentPath, paint);\n-    if (!extraTrimPath.isEmpty()) {\n-      canvas.drawPath(extraTrimPath, paint);\n-    }\n   }\n \n   @Override public int getAlpha() {",
    "output": "Only update shape paths once per draw\n\nPreviously, shape paths were updated every time a property changed.\nNow, it will only trigger an update on the next draw call.\n\nAlso removed some dead code."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ColorKeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/ColorKeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ColorKeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ColorKeyframeAnimation.java\n@@ -1,11 +1,8 @@\n package com.airbnb.lottie;\n \n-import android.animation.ArgbEvaluator;\n-\n import java.util.List;\n \n class ColorKeyframeAnimation extends KeyframeAnimation<Integer> {\n-  private final ArgbEvaluator argbEvaluator = new ArgbEvaluator();\n \n   ColorKeyframeAnimation(List<Keyframe<Integer>> keyframes) {\n     super(keyframes);\n@@ -15,6 +12,6 @@ class ColorKeyframeAnimation extends KeyframeAnimation<Integer> {\n     int startColor = keyframe.startValue;\n     int endColor = keyframe.endValue;\n \n-    return (Integer) argbEvaluator.evaluate(keyframeProgress, startColor, endColor);\n+    return GammaEvaluator.evaluate(keyframeProgress, startColor, endColor);\n   }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/GammaEvaluator.java b/lottie/src/main/java/com/airbnb/lottie/GammaEvaluator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/GammaEvaluator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/GammaEvaluator.java\n@@ -0,0 +1,61 @@\n+package com.airbnb.lottie;\n+\n+/**\n+ * Use this instead of {@link android.animation.ArgbEvaluator} because it interpolates through the gamma color\n+ * space which looks better to us humans.\n+ * <p>\n+ * Writted by Romain Guy and Francois Blavoet.\n+ * https://androidstudygroup.slack.com/archives/animation/p1476461064000335\n+ */\n+class GammaEvaluator {\n+\n+  // Opto-electronic conversion function for the sRGB color space\n+  // Takes a gamma-encoded sRGB value and converts it to a linear sRGB value\n+  private static float OECF_sRGB(float linear) {\n+    // IEC 61966-2-1:1999\n+    return linear <= 0.0031308f ?\n+        linear * 12.92f : (float) ((Math.pow(linear, 1.0f / 2.4f) * 1.055f) - 0.055f);\n+  }\n+\n+  // Electro-optical conversion function for the sRGB color space\n+  // Takes a linear sRGB value and converts it to a gamma-encoded sRGB value\n+  private static float EOCF_sRGB(float srgb) {\n+    // IEC 61966-2-1:1999\n+    return srgb <= 0.04045f ? srgb / 12.92f : (float) Math.pow((srgb + 0.055f) / 1.055f, 2.4f);\n+  }\n+\n+  static int evaluate(float fraction, int startInt, int endInt) {\n+    float startA = ((startInt >> 24) & 0xff) / 255.0f;\n+    float startR = ((startInt >> 16) & 0xff) / 255.0f;\n+    float startG = ((startInt >> 8) & 0xff) / 255.0f;\n+    float startB = (startInt & 0xff) / 255.0f;\n+\n+    float endA = ((endInt >> 24) & 0xff) / 255.0f;\n+    float endR = ((endInt >> 16) & 0xff) / 255.0f;\n+    float endG = ((endInt >> 8) & 0xff) / 255.0f;\n+    float endB = (endInt & 0xff) / 255.0f;\n+\n+    // convert from sRGB to linear\n+    startR = EOCF_sRGB(startR);\n+    startG = EOCF_sRGB(startG);\n+    startB = EOCF_sRGB(startB);\n+\n+    endR = EOCF_sRGB(endR);\n+    endG = EOCF_sRGB(endG);\n+    endB = EOCF_sRGB(endB);\n+\n+    // compute the interpolated color in linear space\n+    float a = startA + fraction * (endA - startA);\n+    float r = startR + fraction * (endR - startR);\n+    float g = startG + fraction * (endG - startG);\n+    float b = startB + fraction * (endB - startB);\n+\n+    // convert back to sRGB in the [0..255] range\n+    a = a * 255.0f;\n+    r = OECF_sRGB(r) * 255.0f;\n+    g = OECF_sRGB(g) * 255.0f;\n+    b = OECF_sRGB(b) * 255.0f;\n+\n+    return Math.round(a) << 24 | Math.round(r) << 16 | Math.round(g) << 8 | Math.round(b);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Animate colors through the gamma spectrum (#111)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -291,6 +291,10 @@ public void playAnimation() {\n     lottieDrawable.reverseAnimation();\n   }\n \n+  public void setSpeed(float speed) {\n+    lottieDrawable.setSpeed(speed);\n+  }\n+\n   public void cancelAnimation() {\n     lottieDrawable.cancelAnimation();\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -26,6 +26,7 @@\n public class LottieDrawable extends AnimatableLayer {\n   private LottieComposition composition;\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n+  private float speed = 1f;\n \n   @Nullable private Bitmap mainBitmap = null;\n   @Nullable private Bitmap maskBitmap = null;\n@@ -47,7 +48,7 @@ public class LottieDrawable extends AnimatableLayer {\n           animator.cancel();\n           setProgress(1f);\n         } else {\n-          setProgress(animation.getAnimatedFraction());\n+          setProgress((float) animation.getAnimatedValue());\n         }\n       }\n     });\n@@ -63,7 +64,7 @@ void setComposition(LottieComposition composition) {\n     }\n     clearComposition();\n     this.composition = composition;\n-    animator.setDuration(composition.getDuration());\n+    setSpeed(speed);\n     setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n     buildLayersForComposition(composition);\n \n@@ -200,6 +201,19 @@ void reverseAnimation() {\n     animator.reverse();\n   }\n \n+  void setSpeed(float speed) {\n+    this.speed = speed;\n+    if (speed < 0) {\n+      animator.setFloatValues(1f, 0f);\n+    } else {\n+      animator.setFloatValues(0f, 1f);\n+    }\n+\n+    if (composition != null) {\n+      animator.setDuration((long) (composition.getDuration() / Math.abs(speed)));\n+    }\n+  }\n+\n   void cancelAnimation() {\n     playAnimationWhenLayerAdded = false;\n     reverseAnimationWhenLayerAdded = false;",
    "output": "Add support for variable speed (+/-)\n\n#92"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/RectLayer.java b/lottie/src/main/java/com/airbnb/lottie/RectLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/RectLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/RectLayer.java\n@@ -213,6 +213,7 @@ private void updateRect() {\n             position.y - halfHeight + 2 * radius);\n         path.arcTo(rect, 270, 90, false);\n       }\n+      path.close();\n \n       onPathChanged();\n     }",
    "output": "Close square paths"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -120,7 +120,9 @@ public void onAnimationUpdate(ValueAnimator animation) {\n \n     seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n       @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n-        animationView.setProgress(progress / 100f);\n+        if (!animationView.isAnimating()) {\n+          animationView.setProgress(progress / 100f);\n+        }\n       }\n \n       @Override public void onStartTrackingTouch(SeekBar seekBar) {",
    "output": "Prevent a feedback loop between an animation and the seekbar in the sample app"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -64,12 +64,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n       };\n \n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n-  @FloatRange(from = 0f, to = 1f) private float progress;\n   private String animationName;\n-  private boolean isAnimationLoading;\n-  private boolean setProgressWhenCompositionSet;\n-  private boolean playAnimationWhenCompositionSet;\n-  private boolean reverseAnimationWhenCompositionSet;\n \n   @Nullable private LottieComposition.Cancellable compositionLoader;\n   /**\n@@ -197,22 +192,19 @@ public void setAnimation(String animationName) {\n   @SuppressWarnings(\"WeakerAccess\")\n   public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n     this.animationName = animationName;\n-    if (weakRefCache != null && weakRefCache.containsKey(animationName)) {\n+    if (weakRefCache.containsKey(animationName)) {\n       WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n       if (compRef.get() != null) {\n         setComposition(compRef.get());\n         return;\n       }\n-    } else if (strongRefCache != null && strongRefCache.containsKey(animationName)) {\n+    } else if (strongRefCache.containsKey(animationName)) {\n       setComposition(strongRefCache.get(animationName));\n       return;\n     }\n-    isAnimationLoading = true;\n-    setProgressWhenCompositionSet = false;\n-    playAnimationWhenCompositionSet = false;\n-    reverseAnimationWhenCompositionSet = false;\n \n     this.animationName = animationName;\n+    lottieDrawable.cancelAnimation();\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.fromAssetFileName(getContext(), animationName,\n         new LottieComposition.OnCompositionLoadedListener() {\n@@ -237,11 +229,6 @@ public void onCompositionLoaded(LottieComposition composition) {\n    * bodymovin json from the network and pass it directly here.\n    */\n   public void setAnimation(final JSONObject json) {\n-    isAnimationLoading = true;\n-    setProgressWhenCompositionSet = false;\n-    playAnimationWhenCompositionSet = false;\n-    reverseAnimationWhenCompositionSet = false;\n-\n     cancelLoaderTask();\n     compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);\n   }\n@@ -264,26 +251,8 @@ public void setComposition(@NonNull LottieComposition composition) {\n     setImageDrawable(null);\n     setImageDrawable(lottieDrawable);\n \n-    isAnimationLoading = false;\n-\n-    if (setProgressWhenCompositionSet) {\n-      setProgressWhenCompositionSet = false;\n-      setProgress(progress);\n-    } else {\n-      setProgress(0f);\n-    }\n-\n     this.composition = composition;\n \n-    if (playAnimationWhenCompositionSet) {\n-      playAnimationWhenCompositionSet = false;\n-      playAnimation();\n-    }\n-    if (reverseAnimationWhenCompositionSet) {\n-      reverseAnimationWhenCompositionSet = false;\n-      reverseAnimation();\n-    }\n-\n     requestLayout();\n   }\n \n@@ -315,51 +284,30 @@ public boolean isAnimating() {\n   }\n \n   public void playAnimation() {\n-    if (isAnimationLoading) {\n-      playAnimationWhenCompositionSet = true;\n-      reverseAnimationWhenCompositionSet = false;\n-      return;\n-    }\n     lottieDrawable.playAnimation();\n   }\n \n-  public void reverseAnimation() {\n-    if (isAnimationLoading) {\n-      playAnimationWhenCompositionSet = false;\n-      reverseAnimationWhenCompositionSet = true;\n-      return;\n-    }\n+  @SuppressWarnings(\"unused\") public void reverseAnimation() {\n     lottieDrawable.reverseAnimation();\n   }\n \n   public void cancelAnimation() {\n-    setProgressWhenCompositionSet = false;\n-    playAnimationWhenCompositionSet = false;\n-    reverseAnimationWhenCompositionSet = false;\n     lottieDrawable.cancelAnimation();\n   }\n \n   public void pauseAnimation() {\n-    setProgressWhenCompositionSet = false;\n-    playAnimationWhenCompositionSet = false;\n-    reverseAnimationWhenCompositionSet = false;\n     float progress = getProgress();\n     lottieDrawable.cancelAnimation();\n     setProgress(progress);\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-    this.progress = progress;\n-    if (isAnimationLoading) {\n-      setProgressWhenCompositionSet = true;\n-      return;\n-    }\n     lottieDrawable.setProgress(progress);\n   }\n \n   @FloatRange(from = 0.0f, to = 1.0f)\n   public float getProgress() {\n-    return progress;\n+    return lottieDrawable.getProgress();\n   }\n \n   public long getDuration() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -67,7 +67,7 @@ void setComposition(LottieComposition composition) {\n     setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n     buildLayersForComposition(composition);\n \n-    getCallback().invalidateDrawable(this);\n+    setProgress(getProgress());\n   }\n \n   private void clearComposition() {",
    "output": "Let LottieDrawable handle progress and loading states\n\nFixes #103"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java b/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java\n@@ -40,6 +40,9 @@ static Object shapeItemWithJson(JSONObject json, int framerate, LottieCompositio\n         return new RectangleShape(json, framerate, composition);\n       case \"tm\":\n         return new ShapeTrimPath(json, framerate, composition);\n+      case \"sr\":\n+        throw new IllegalArgumentException(\"Lottie doesn't yet support polystars. Convert your \" +\n+            \"layer to a shape first.\");\n     }\n     return null;\n   }",
    "output": "Throw if an animation uses polystars because it isn't supported yet\n\n#98"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -35,5 +35,6 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/EllipseTrimPath.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/SplitDimensions.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/TrimPathsFull.json\");\n+    TestRobot.testStatic(getActivity(), \"Tests/TrimPathFill.json\");\n   }\n }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java\n@@ -9,6 +9,10 @@\n class TestRobot {\n   private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.2f, 0.5f, 1f};\n \n+  static void testStatic(MainActivity activity, String fileName) {\n+    testAnimation(activity, fileName, new float[] {0});\n+  }\n+\n   static void testAnimation(MainActivity activity, String fileName) {\n     testAnimation(activity, fileName, DEFAULT_ANIMATED_PROGRESS);\n   }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/EllipseShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/EllipseShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/EllipseShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/EllipseShapeLayer.java\n@@ -26,6 +26,10 @@ class EllipseShapeLayer extends AnimatableLayer {\n       fillLayer.updateCircle(\n           circleShape.getPosition().createAnimation(),\n           circleShape.getSize().createAnimation());\n+      if (trim != null) {\n+        fillLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),\n+            trim.getOffset().createAnimation());\n+      }\n       addLayer(fillLayer);\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayerView.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayerView.java\n@@ -28,6 +28,10 @@ class ShapeLayerView extends AnimatableLayer {\n       fillLayer.setShapeAlpha(fill.getOpacity().createAnimation());\n       fillLayer.setTransformAlpha(transformModel.getOpacity().createAnimation());\n       fillLayer.setScale(scale.createAnimation());\n+      if (trim != null) {\n+        fillLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),\n+            trim.getOffset().createAnimation());\n+      }\n       addLayer(fillLayer);\n     }\n ",
    "output": "Apply trim paths to shape fills\n\nFixes #85"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -23,7 +23,7 @@\n  * handles bitmap recycling and asynchronous loading\n  * of compositions.\n  */\n-class LottieDrawable extends AnimatableLayer {\n+public class LottieDrawable extends AnimatableLayer {\n   private LottieComposition composition;\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n ",
    "output": "Make LottieDrawable public again\n\nFixes #93"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -69,6 +69,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n   private boolean isAnimationLoading;\n   private boolean setProgressWhenCompositionSet;\n   private boolean playAnimationWhenCompositionSet;\n+  private boolean reverseAnimationWhenCompositionSet;\n \n   @Nullable private LottieComposition.Cancellable compositionLoader;\n   /**\n@@ -209,6 +210,7 @@ public void setAnimation(final String animationName, final CacheStrategy cacheSt\n     isAnimationLoading = true;\n     setProgressWhenCompositionSet = false;\n     playAnimationWhenCompositionSet = false;\n+    reverseAnimationWhenCompositionSet = false;\n \n     this.animationName = animationName;\n     cancelLoaderTask();\n@@ -238,6 +240,7 @@ public void setAnimation(final JSONObject json) {\n     isAnimationLoading = true;\n     setProgressWhenCompositionSet = false;\n     playAnimationWhenCompositionSet = false;\n+    reverseAnimationWhenCompositionSet = false;\n \n     cancelLoaderTask();\n     compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);\n@@ -276,6 +279,10 @@ public void setComposition(@NonNull LottieComposition composition) {\n       playAnimationWhenCompositionSet = false;\n       playAnimation();\n     }\n+    if (reverseAnimationWhenCompositionSet) {\n+      reverseAnimationWhenCompositionSet = false;\n+      reverseAnimation();\n+    }\n \n     requestLayout();\n   }\n@@ -310,20 +317,32 @@ public boolean isAnimating() {\n   public void playAnimation() {\n     if (isAnimationLoading) {\n       playAnimationWhenCompositionSet = true;\n+      reverseAnimationWhenCompositionSet = false;\n       return;\n     }\n     lottieDrawable.playAnimation();\n   }\n \n+  public void reverseAnimation() {\n+    if (isAnimationLoading) {\n+      playAnimationWhenCompositionSet = false;\n+      reverseAnimationWhenCompositionSet = true;\n+      return;\n+    }\n+    lottieDrawable.reverseAnimation();\n+  }\n+\n   public void cancelAnimation() {\n     setProgressWhenCompositionSet = false;\n     playAnimationWhenCompositionSet = false;\n+    reverseAnimationWhenCompositionSet = false;\n     lottieDrawable.cancelAnimation();\n   }\n \n   public void pauseAnimation() {\n     setProgressWhenCompositionSet = false;\n     playAnimationWhenCompositionSet = false;\n+    reverseAnimationWhenCompositionSet = false;\n     float progress = getProgress();\n     lottieDrawable.cancelAnimation();\n     setProgress(progress);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -33,6 +33,7 @@ class LottieDrawable extends AnimatableLayer {\n   @Nullable private Bitmap mainBitmapForMatte = null;\n   @Nullable private Bitmap maskBitmapForMatte = null;\n   private boolean playAnimationWhenLayerAdded;\n+  private boolean reverseAnimationWhenLayerAdded;\n   private boolean systemAnimationsAreDisabled;\n \n   LottieDrawable() {\n@@ -182,14 +183,26 @@ boolean isAnimating() {\n   void playAnimation() {\n     if (layers.isEmpty()) {\n       playAnimationWhenLayerAdded = true;\n+      reverseAnimationWhenLayerAdded = false;\n       return;\n     }\n     animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n     animator.start();\n   }\n \n+  void reverseAnimation() {\n+    if (layers.isEmpty()) {\n+      playAnimationWhenLayerAdded = false;\n+      reverseAnimationWhenLayerAdded = true;\n+      return;\n+    }\n+    animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n+    animator.reverse();\n+  }\n+\n   void cancelAnimation() {\n     playAnimationWhenLayerAdded = false;\n+    reverseAnimationWhenLayerAdded = false;\n     animator.cancel();\n   }\n \n@@ -200,6 +213,10 @@ void addLayer(AnimatableLayer layer) {\n       playAnimationWhenLayerAdded = false;\n       playAnimation();\n     }\n+    if (reverseAnimationWhenLayerAdded) {\n+      reverseAnimationWhenLayerAdded = false;\n+      reverseAnimation();\n+    }\n   }\n \n   void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {",
    "output": "Expose reverseAnimation in LottieDrawable and LottieAnimationView\n\nFixes #93"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java\n@@ -106,6 +106,7 @@ class AnimatableShapeValue extends BaseAnimatableValue<ShapeData, Path> {\n       }\n \n       shape.addCurve(new CubicCurveData(shapeCp1, shapeCp2, vertex));\n+      shape.setClosed(true);\n     }\n     return shape;\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n--- a/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/MiscUtils.java\n@@ -19,6 +19,9 @@ static void getPathFromData(ShapeData shapeData, Path outPath) {\n           curveData.getControlPoint2().x, curveData.getControlPoint2().y,\n           curveData.getVertex().x, curveData.getVertex().y);\n     }\n+    if (shapeData.isClosed()) {\n+      outPath.close();\n+    }\n   }\n \n   static float lerp(float a, float b, @FloatRange(from = 0f, to = 1f) float percentage) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeData.java\n@@ -9,6 +9,7 @@\n class ShapeData {\n   private final List<CubicCurveData> curves = new ArrayList<>();\n   private PointF initialPoint;\n+  private boolean closed;\n \n   void setInitialPoint(PointF initialPoint) {\n     this.initialPoint = initialPoint;\n@@ -29,6 +30,14 @@ void addCurve(CubicCurveData curve) {\n     curves.add(curve);\n   }\n \n+  public boolean isClosed() {\n+    return closed;\n+  }\n+\n+  public void setClosed(boolean closed) {\n+    this.closed = closed;\n+  }\n+\n   List<CubicCurveData> getCurves() {\n     return curves;\n   }\n@@ -38,6 +47,8 @@ void interpolateBetween(ShapeData shapeData1, ShapeData shapeData2,\n     if (initialPoint == null) {\n       initialPoint = new PointF();\n     }\n+    setClosed(shapeData1.isClosed() || shapeData2.isClosed());\n+\n     if (!curves.isEmpty() && curves.size() != shapeData1.getCurves().size()\n         && curves.size() != shapeData2.getCurves().size()) {\n       throw new IllegalStateException(\"Curves must have the same number of control points. This: \"",
    "output": "Properly close paths (#83)\n\nFixes #43"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java\n@@ -3,7 +3,6 @@\n \n import android.test.ActivityInstrumentationTestCase2;\n \n-import com.airbnb.lottie.TestRobot;\n import com.airbnb.lottie.samples.MainActivity;\n \n import org.junit.Test;\n@@ -35,5 +34,6 @@ public void testAll() {\n     TestRobot.testAnimation(getActivity(), \"Tests/CheckSwitch.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/EllipseTrimPath.json\");\n     TestRobot.testAnimation(getActivity(), \"Tests/SplitDimensions.json\");\n+    TestRobot.testAnimation(getActivity(), \"Tests/TrimPathsFull.json\");\n   }\n }",
    "output": "Added a test for TrimPathsFull"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java\n@@ -197,6 +197,15 @@ private void onPathPropertiesChanged() {\n       newStart += currentPathStrokeOffset;\n       newEnd += currentPathStrokeOffset;\n \n+      // If the trim path has rotated around the path, we need to shift it back.\n+      if (newStart > length && newEnd > length) {\n+        newStart %= length;\n+        newEnd %= length;\n+      }\n+      if (newStart > newEnd) {\n+        newStart -= length;\n+      }\n+\n       pathMeasure.getSegment(\n           newStart,\n           newEnd,\n@@ -210,6 +219,12 @@ private void onPathPropertiesChanged() {\n             newEnd % length,\n             extraTrimPath,\n             true);\n+      } else if (newStart < 0) {\n+        pathMeasure.getSegment(\n+            length + newStart,\n+            length,\n+            extraTrimPath,\n+            true);\n       }\n     }\n ",
    "output": "Allow trim paths that have looped multiple times\n\n#80"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -187,7 +187,7 @@ void onPlayClicked() {\n   @OnClick(R.id.loop)\n   void onLoopChanged() {\n     loopButton.setActivated(!loopButton.isActivated());\n-    animationView.loop(loopButton.isEnabled());\n+    animationView.loop(loopButton.isActivated());\n   }\n \n   @OnClick(R.id.restart)",
    "output": "Fixed looping in AnimationFragment"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -50,8 +50,9 @@ public enum CacheStrategy {\n     Strong\n   }\n \n-  @Nullable private static Map<String, LottieComposition> strongRefCache;\n-  @Nullable private static Map<String, WeakReference<LottieComposition>> weakRefCache;\n+  private static final Map<String, LottieComposition> strongRefCache = new HashMap<>();\n+  private static final Map<String, WeakReference<LottieComposition>> weakRefCache =\n+      new HashMap<>();\n \n   private final LottieComposition.OnCompositionLoadedListener loadedListener =\n       new LottieComposition.OnCompositionLoadedListener() {\n@@ -216,14 +217,8 @@ public void setAnimation(final String animationName, final CacheStrategy cacheSt\n           @Override\n           public void onCompositionLoaded(LottieComposition composition) {\n             if (cacheStrategy == CacheStrategy.Strong) {\n-              if (strongRefCache == null) {\n-                strongRefCache = new HashMap<>();\n-              }\n               strongRefCache.put(animationName, composition);\n             } else if (cacheStrategy == CacheStrategy.Weak) {\n-              if (weakRefCache == null) {\n-                weakRefCache = new HashMap<>();\n-              }\n               weakRefCache.put(animationName, new WeakReference<>(composition));\n             }\n ",
    "output": "Initialize caches inline\n\nFixes #59"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -30,6 +30,8 @@ class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {\n       return Math.round((Integer) object * scale);\n     } else if (object instanceof JSONArray && ((JSONArray) object).get(0) instanceof Integer) {\n       return Math.round(((JSONArray) object).getInt(0) * scale);\n+    } else if (object instanceof JSONArray && ((JSONArray) object).get(0) instanceof Double) {\n+      return (int) Math.round(((JSONArray) object).getDouble(0) * scale);\n     }\n     return null;\n   }",
    "output": "Allow AnimatableIntegerValue to parse decimal values inside of an array\n\nFixes #34"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java\n@@ -5,7 +5,7 @@\n import android.graphics.Rect;\n import android.os.AsyncTask;\n import android.support.annotation.VisibleForTesting;\n-import android.util.LongSparseArray;\n+import android.support.v4.util.LongSparseArray;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -8,7 +8,7 @@\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.annotation.VisibleForTesting;\n-import android.util.LongSparseArray;\n+import android.support.v4.util.LongSparseArray;\n import android.view.animation.LinearInterpolator;\n \n import java.util.ArrayList;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n@@ -3,6 +3,7 @@\n import android.animation.ValueAnimator;\n import android.content.Context;\n import android.graphics.PointF;\n+import android.os.Build;\n import android.view.View;\n import android.view.ViewTreeObserver;\n import android.view.animation.LinearInterpolator;\n@@ -150,7 +151,12 @@ public void onValueChanged(PointF anchor) {\n             .addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n               @Override\n               public void onGlobalLayout() {\n-                view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n+                  view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n+                } else {\n+                  //noinspection deprecation\n+                  view.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n+                }\n                 setViewAnchor(view, layer.getAnchor().getInitialPoint());\n               }\n             });\n@@ -173,7 +179,7 @@ public LottieViewAnimator start() {\n     return this;\n   }\n \n-  public LottieViewAnimator cancel() {\n+  @SuppressWarnings(\"unused\") public LottieViewAnimator cancel() {\n     animator.cancel();\n     return this;\n   }",
    "output": "Lower the minSdk to 14\n\nNOTE: neither Google nor Genymotion has ICS emulators so this is untested\nFixes #64"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java\n@@ -160,7 +160,6 @@ void applyTransformForLayer(@Nullable Canvas canvas, AnimatableLayer layer) {\n     }\n   }\n \n-\n   @Override\n   public void setAlpha(int alpha) {\n     throw new IllegalArgumentException(\"This shouldn't be used.\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -7,8 +7,10 @@\n import android.content.res.TypedArray;\n import android.graphics.Canvas;\n import android.graphics.drawable.Drawable;\n+import android.os.Build;\n import android.os.Parcel;\n import android.os.Parcelable;\n+import android.provider.Settings;\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n@@ -100,6 +102,14 @@ private void init(@Nullable AttributeSet attrs) {\n     lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n     ta.recycle();\n     setLayerType(LAYER_TYPE_SOFTWARE, null);\n+\n+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+    float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),\n+        Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);\n+      if (systemAnimationScale == 0f) {\n+        lottieDrawable.systemAnimationsAreDisabled();\n+      }\n+    }\n   }\n \n   @Override public void invalidateDrawable(Drawable dr) {\n@@ -160,8 +170,7 @@ protected void onDetachedFromWindow() {\n     super.onDetachedFromWindow();\n   }\n \n-  @VisibleForTesting\n-  public void recycleBitmaps() {\n+  @VisibleForTesting void recycleBitmaps() {\n     lottieDrawable.recycleBitmaps();\n   }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java\n@@ -33,6 +33,7 @@ class LottieDrawable extends AnimatableLayer {\n   @Nullable private Bitmap mainBitmapForMatte = null;\n   @Nullable private Bitmap maskBitmapForMatte = null;\n   private boolean playAnimationWhenLayerAdded;\n+  private boolean systemAnimationsAreDisabled;\n \n   LottieDrawable() {\n     super(null);\n@@ -41,7 +42,12 @@ class LottieDrawable extends AnimatableLayer {\n     animator.setInterpolator(new LinearInterpolator());\n     animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n       @Override public void onAnimationUpdate(ValueAnimator animation) {\n-        setProgress(animation.getAnimatedFraction());\n+        if (systemAnimationsAreDisabled) {\n+          animator.cancel();\n+          setProgress(1f);\n+        } else {\n+          setProgress(animation.getAnimatedFraction());\n+        }\n       }\n     });\n   }\n@@ -157,6 +163,10 @@ private void buildLayersForComposition(LottieComposition composition) {\n \n   }\n \n+  void systemAnimationsAreDisabled() {\n+    systemAnimationsAreDisabled = true;\n+  }\n+\n   void loop(boolean loop) {\n     animator.setRepeatCount(loop ? ValueAnimator.INFINITE : 0);\n   }",
    "output": "Fix animations to 1 if system animations are disabled\n\nFixes #79"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java\n@@ -22,7 +22,11 @@ class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {\n   }\n \n   @Override protected Integer valueFromObject(Object object, float scale) throws JSONException {\n-    if (object instanceof Integer) {\n+    if (object instanceof Float) {\n+      return Math.round((Float) object * scale);\n+    } else if (object instanceof Double) {\n+      return (int) Math.round((Double) object * scale);\n+    } else if (object instanceof Integer) {\n       return Math.round((Integer) object * scale);\n     } else if (object instanceof JSONArray && ((JSONArray) object).get(0) instanceof Integer) {\n       return Math.round(((JSONArray) object).getInt(0) * scale);",
    "output": "Allow AnimatableIntegerValue to parse decimal values\n\nFixes #72"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n@@ -158,7 +158,7 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {\n       return true;\n     }\n \n-    if (!isValidKey(keyCode)) {\n+    if (!isValidKey(event)) {\n       return super.onKeyUp(keyCode, event);\n     }\n \n@@ -193,8 +193,11 @@ public void onCompositionLoaded(LottieComposition composition) {\n     return true;\n   }\n \n-  private boolean isValidKey(int keyCode) {\n-    if (keyCode >= KeyEvent.KEYCODE_A && keyCode <= KeyEvent.KEYCODE_Z) {\n+  private boolean isValidKey(KeyEvent event) {\n+    if (!event.hasNoModifiers()) {\n+      return false;\n+    }\n+    if (event.getKeyCode() >= KeyEvent.KEYCODE_A && event.getKeyCode() <= KeyEvent.KEYCODE_Z) {\n       return true;\n     }\n ",
    "output": "Ignore characters with modifiers\n\nFixes #63"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -7,7 +7,6 @@\n import android.app.AlertDialog;\n import android.content.DialogInterface;\n import android.content.Intent;\n-import android.database.Cursor;\n import android.net.Uri;\n import android.os.Bundle;\n import android.os.Handler;\n@@ -36,7 +35,7 @@\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.net.URISyntaxException;\n+import java.io.InputStream;\n \n import butterknife.BindView;\n import butterknife.ButterKnife;\n@@ -161,13 +160,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n                 });\n                 break;\n             case RC_FILE:\n-                Uri uri = data.getData();\n-                try {\n-                    String path = getPath(uri);\n-                    onFileLoaded(path);\n-                } catch (URISyntaxException e) {\n-                    onLoadError();\n-                }\n+                onFileLoaded(data.getData());\n                 break;\n             case RC_URL:\n \n@@ -230,7 +223,7 @@ void onLoadAssetClicked() {\n     void onLoadFileClicked() {\n         animationView.cancelAnimation();\n         Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n-        intent.setType(\"*/*.json\");\n+        intent.setType(\"*/*\");\n         intent.addCategory(Intent.CATEGORY_OPENABLE);\n \n         try {\n@@ -276,36 +269,21 @@ private void updatePlayButtonText() {\n         playButton.setActivated(animationView.isAnimating());\n     }\n \n-    private String getPath(Uri uri) throws URISyntaxException {\n-        if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n-            String[] projection = { \"_data\" };\n-            Cursor cursor = null;\n+    private void onFileLoaded(final Uri uri) {\n+        InputStream fis;\n \n-            try {\n-                cursor = getContext().getContentResolver().query(uri, projection, null, null, null);\n-                int column_index = cursor.getColumnIndexOrThrow(\"_data\");\n-                if (cursor.moveToFirst()) {\n-                    return cursor.getString(column_index);\n-                }\n-            } catch (Exception e) {\n-                // Eat it\n-            } finally {\n-                if (cursor != null) {\n-                    cursor.close();\n-                }\n-            }\n-        }\n-        else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n-            return uri.getPath();\n-        }\n-\n-        return null;\n-    }\n-\n-    private void onFileLoaded(final String fileName) {\n-        FileInputStream fis;\n         try {\n-            fis = new FileInputStream(fileName);\n+            switch (uri.getScheme()) {\n+                case \"file\":\n+                    fis = new FileInputStream(uri.getPath());\n+                    break;\n+                case \"content\":\n+                    fis = getContext().getContentResolver().openInputStream(uri);\n+                    break;\n+                default:\n+                    onLoadError();\n+                    return;\n+            }\n         } catch (FileNotFoundException e) {\n             onLoadError();\n             return;\n@@ -314,7 +292,7 @@ private void onFileLoaded(final String fileName) {\n         LottieComposition.fromInputStream(getContext(), fis, new LottieComposition.OnCompositionLoadedListener() {\n             @Override\n             public void onCompositionLoaded(LottieComposition composition) {\n-                setComposition(composition, fileName);\n+                setComposition(composition, uri.getPath());\n             }\n         });\n     }",
    "output": "Allow LottieSample to open files with a file:// or content:// scheme"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n@@ -89,12 +89,13 @@ static Layer fromJson(JSONObject json, LottieComposition composition) {\n                 if (L.DBG) Log.d(TAG, \"\\tOpacity=\" + layer.opacity.getInitialValue());\n             }\n \n-            JSONObject rotation = null;\n+            JSONObject rotation;\n             try {\n                 rotation = ks.getJSONObject(\"r\");\n             } catch (JSONException e) {\n-                // Do nothing.\n+                rotation = ks.getJSONObject(\"rz\");\n             }\n+\n             if (rotation != null) {\n                 layer.rotation = new AnimatableFloatValue(rotation, layer.frameRate, composition, false);\n                 if (L.DBG) Log.d(TAG, \"\\tRotation=\" + layer.rotation.getInitialValue());",
    "output": "Support rotation when it is set on the Z axis"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -105,6 +105,13 @@ public void draw(@NonNull Canvas canvas) {\n         canvas.restoreToCount(saveCount);\n     }\n \n+    @Override\n+    public void invalidateSelf() {\n+        if (parentLayer != null) {\n+            parentLayer.invalidateSelf();\n+        }\n+    }\n+\n     int saveCanvas(@Nullable Canvas canvas) {\n         if (canvas == null) {\n             return 0;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n@@ -132,7 +132,10 @@ private void buildLayersForComposition(LottieComposition composition) {\n \n     @Override\n     public void invalidateSelf() {\n-        super.invalidateSelf();\n+        final Callback callback = getCallback();\n+        if (callback != null) {\n+            callback.invalidateDrawable(this);\n+        }\n     }\n \n     @Override",
    "output": "Invalidate LottieDrawable with itself so that it can be verified (#49)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n@@ -30,5 +30,6 @@ public void testAll() {\n         TestRobot.testAnimation(getActivity(), \"Tests/LoopPlayOnce.json\");\n         TestRobot.testAnimation(getActivity(), \"Tests/Alarm.json\");\n         TestRobot.testAnimation(getActivity(), \"Tests/CheckSwitch.json\");\n+        TestRobot.testAnimation(getActivity(), \"Tests/EllipseTrimPath.json\");\n     }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -232,9 +232,6 @@ void addLayer(AnimatableLayer layer) {\n         layer.parentLayer = this;\n         layers.add(layer);\n         layer.setProgress(progress);\n-        if (this.alpha != null) {\n-            layer.setAlpha(this.alpha);\n-        }\n         invalidateSelf();\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n@@ -1,6 +1,5 @@\n package com.airbnb.lottie.layers;\n \n-import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.PointF;\n import android.graphics.drawable.Drawable;\n@@ -82,17 +81,13 @@ public void onValueChanged(PointF progress) {\n             }\n         };\n \n-        private final Paint paint = new Paint();\n         private final Path path = new Path();\n \n         private KeyframeAnimation<PointF> circleSize;\n         private KeyframeAnimation<PointF> circlePosition;\n \n         CircleShapeLayer(Drawable.Callback callback) {\n             super(callback);\n-            paint.setAntiAlias(true);\n-            paint.setStyle(Paint.Style.FILL);\n-\n             setPath(new StaticKeyframeAnimation<>(path));\n         }\n ",
    "output": "Prevent parent layers from overwriting child layer's alpha (#48)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -90,7 +90,7 @@ public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr\n     private void init(@Nullable AttributeSet attrs) {\n         TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);\n         String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n-        if (fileName != null) {\n+        if (!isInEditMode() && fileName != null) {\n             setAnimation(fileName);\n         }\n         if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {",
    "output": "Bugfix - Render LottieAnimationView in edit mode (#42)\n\n* Changes the init() method of the LottieAnimationView so the animation is only set if the view is not in edit mode (e.g. layout preview).\r\n\r\n* Reverts code formatting."
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n@@ -68,7 +68,7 @@ public void onPageScrollStateChanged(int state) { }\n     protected IntroButton.Behaviour generateFinalButtonBehaviour() {\n         return new IntroButton.Behaviour() {\n             @Override\n-            public void setActivity(IntroActivity activity) { }\n+            public void setActivity(IntroActivity activity) { finish();}\n \n             @Override\n             public IntroActivity getActivity() {",
    "output": "fix : close AppIntroActivity when DONE pressed (#32)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -13,10 +13,10 @@\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.annotation.VisibleForTesting;\n+import android.support.v7.widget.AppCompatImageView;\n import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.Log;\n-import android.widget.ImageView;\n \n import com.airbnb.lottie.layers.LottieDrawable;\n import com.airbnb.lottie.model.LottieComposition;\n@@ -37,7 +37,7 @@\n  *\n  * You may manually set the progress of the animation with {@link #setProgress(float)}\n  */\n-public class LottieAnimationView extends ImageView {\n+public class LottieAnimationView extends AppCompatImageView {\n     private static final String TAG = LottieAnimationView.class.getSimpleName();\n \n     /**\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java\n@@ -9,7 +9,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-@RestrictTo(RestrictTo.Scope.GROUP_ID)\n+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n public abstract class KeyframeAnimation<T> {\n \n     public interface AnimationListener<T> {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -19,7 +19,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-@RestrictTo(RestrictTo.Scope.GROUP_ID)\n+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n public class AnimatableLayer extends Drawable {\n \n     private final KeyframeAnimation.AnimationListener<Integer> integerChangedListener = new KeyframeAnimation.AnimationListener<Integer>() {\n@@ -48,8 +48,7 @@ public void onValueChanged(PointF progress) {\n     };\n \n     final List<AnimatableLayer> layers = new ArrayList<>();\n-    @Nullable AnimatableLayer parentLayer;\n-\n+    @Nullable private AnimatableLayer parentLayer;\n \n     private KeyframeAnimation<PointF> position;\n     private KeyframeAnimation<PointF> anchorPoint;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie.layers;\n \n+import android.annotation.SuppressLint;\n import android.graphics.Canvas;\n import android.graphics.DashPathEffect;\n import android.graphics.Paint;\n@@ -320,6 +321,7 @@ void setRectSize(KeyframeAnimation<PointF> rectSize) {\n             invalidateSelf();\n         }\n \n+        @SuppressLint(\"NewApi\")\n         @Override\n         public void draw(@NonNull Canvas canvas) {\n             if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie.layers;\n \n+import android.annotation.SuppressLint;\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.DashPathEffect;\n@@ -209,6 +210,7 @@ private void onPathPropertiesChanged() {\n         invalidateSelf();\n     }\n \n+    @SuppressLint(\"NewApi\")\n     @Override\n     public void draw(@NonNull Canvas canvas) {\n         if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {",
    "output": "Miscellaneous gradle and project fixes (#20)\n\n* Miscellaneous gradle and project fixes\r\n\r\n* Moar tweaks"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -91,6 +91,7 @@ public void onClick(View v) {\n         //noinspection ConstantConditions\n         // droppedFramesView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n         postUpdatePlayButtonText();\n+        onLoopChanged();\n         animationView.addAnimatorListener(new Animator.AnimatorListener() {\n             @Override\n             public void onAnimationStart(Animator animation) {",
    "output": "Auto loop AnimationFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -41,6 +41,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n     @Override\n     public void onStart() {\n         super.onStart();\n+        animationView.setProgress(0f);\n         animationView.playAnimation();\n     }\n ",
    "output": "Restart the Lottie animation when returning to ListFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -10,6 +10,8 @@\n import android.view.ViewGroup;\n import android.widget.TextView;\n \n+import com.airbnb.lottie.LottieAnimationView;\n+\n import butterknife.BindView;\n import butterknife.ButterKnife;\n \n@@ -21,6 +23,7 @@ static ListFragment newInstance() {\n \n     @BindView(R.id.container) ViewGroup container;\n     @BindView(R.id.recycler_view) RecyclerView recyclerView;\n+    @BindView(R.id.animation_view) LottieAnimationView animationView;\n \n     private final FileAdapter adapter = new FileAdapter();\n \n@@ -35,6 +38,18 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         return view;\n     }\n \n+    @Override\n+    public void onStart() {\n+        super.onStart();\n+        animationView.playAnimation();\n+    }\n+\n+    @Override\n+    public void onStop() {\n+        super.onStop();\n+        animationView.cancelAnimation();\n+    }\n+\n     private void onViewerClicked() {\n         showFragment(AnimationFragment.newInstance());\n     }",
    "output": "Start and stop the list fragment animation in onStart and onStop"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n@@ -22,10 +22,10 @@\n public class AppIntroActivity extends IntroActivity {\n     private static final float[] ANIMATION_TIMES = new float[] {\n             0f,\n-            0.2795f,\n-            0.5488f,\n-            0.7650f,\n+            0.3333f,\n+            0.6666f,\n             1f,\n+            1f\n \n     };\n     private LottieAnimationView animationView;\n@@ -50,8 +50,6 @@ protected void onCreate(Bundle savedInstanceState) {\n         getRootView().addView(animationView, 0);\n         setViewPagerScroller();\n \n-        viewPager.setCurrentItem(1, true);\n-\n         addPageChangeListener(new ViewPager.OnPageChangeListener() {\n             @Override\n             public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n@@ -117,7 +115,7 @@ private void setViewPagerScroller() {\n             Scroller scroller = new Scroller(this, (Interpolator) interpolator.get(null)) {\n                 @Override\n                 public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n-                    super.startScroll(startX, startY, dx, dy, duration * 10);\n+                    super.startScroll(startX, startY, dx, dy, duration * 7);\n                 }\n             };\n             scrollerField.set(viewPager, scroller);\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -80,7 +80,7 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                     holder.bind(\"Animated Typography\", TAG_TYPOGRAPHY);\n                     break;\n                 case 2:\n-                    holder.bind(\"Animated app intro\", TAG_APP_INTRO);\n+                    holder.bind(\"Animated App Tutorial\", TAG_APP_INTRO);\n                     break;\n             }\n         }",
    "output": "Updated Walkthrough animation"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n@@ -17,15 +17,18 @@ public LottieTest() {\n \n     @Test\n     public void testAll() {\n-        TestRobot.testAnimatedFile(getActivity(), \"Alarm.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel01.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel03.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"CheckSwitch.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Diamond.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Heart.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Hosts.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"LightBulb.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Stars.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"LoopPlayOnce.json\");\n+        TestRobot.testAnimation(getActivity(), \"9squares-AlBoardman.json\");\n+        TestRobot.testAnimation(getActivity(), \"EmptyState.json\");\n+        TestRobot.testAnimation(getActivity(), \"HamburgerArrow.json\");\n+        TestRobot.testAnimation(getActivity(), \"LottieLogo1.json\");\n+        TestRobot.testAnimation(getActivity(), \"LottieLogo2.json\");\n+        TestRobot.testAnimation(getActivity(), \"MotionCorpse-Jrcanest.json\");\n+        TestRobot.testAnimation(getActivity(), \"PinJump.json\");\n+        TestRobot.testAnimation(getActivity(), \"TwitterHeart.json\");\n+        TestRobot.testAnimation(getActivity(), \"Tests/Hosts.json\");\n+        TestRobot.testAnimation(getActivity(), \"Tests/LightBulb.json\", new float[] {0f, 0.05f, 0.10f, 0.2f, 0.3f, 0.4f, 0.5f, 1f});\n+        TestRobot.testAnimation(getActivity(), \"Tests/LoopPlayOnce.json\");\n+        TestRobot.testAnimation(getActivity(), \"Tests/Alarm.json\");\n+        TestRobot.testAnimation(getActivity(), \"Tests/CheckSwitch.json\");\n     }\n }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n@@ -11,21 +11,19 @@ class TestRobot {\n     private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.2f, 0.5f, 1f};\n     private static final float[] DEFAULT_STATIC_PROGRESS = {0f};\n \n-    static void testAnimatedFile(MainActivity activity, String fileName) {\n-        testFile(activity, fileName, DEFAULT_ANIMATED_PROGRESS);\n+    static void testAnimation(MainActivity activity, String fileName) {\n+        testAnimation(activity, fileName, DEFAULT_ANIMATED_PROGRESS);\n     }\n \n-    static void testStaticFile(MainActivity activity, String fileName) {\n-        testFile(activity, fileName, DEFAULT_STATIC_PROGRESS);\n-    }\n-\n-    private static void testFile(MainActivity activity, String fileName, float[] progress) {\n+    static void testAnimation(MainActivity activity, String fileName, float[] progress) {\n         LottieAnimationView view = new LottieAnimationView(activity);\n         view.setComposition(LottieComposition.fromFileSync(activity, fileName));\n         ViewHelpers.setupView(view)\n                 .layout();\n \n-        String nameWithoutExtension = fileName.substring(0, fileName.indexOf('.'));\n+        String nameWithoutExtension = fileName\n+                .substring(0, fileName.indexOf('.'))\n+                .replace(\"/\", \"_\");\n         for (float p : progress) {\n             view.setProgress(p);\n             Screenshot.snap(view)\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -60,9 +60,11 @@ static AnimationFragment newInstance() {\n     private OkHttpClient client;\n \n     @BindView(R.id.toolbar) Toolbar toolbar;\n+    @BindView(R.id.instructions) ViewGroup instructionsContainer;\n     @BindView(R.id.animation_container) ViewGroup animationContainer;\n     @BindView(R.id.animation_view) LottieAnimationView animationView;\n     @BindView(R.id.seek_bar) AppCompatSeekBar seekBar;\n+    @BindView(R.id.invert_colors) ImageButton invertButton;\n     @BindView(R.id.play_button) ImageButton playButton;\n     @BindView(R.id.loop) ImageButton loopButton;\n     // @BindView(R.id.frames_per_second) TextView fpsView;\n@@ -77,6 +79,12 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n         ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n         toolbar.setNavigationIcon(R.drawable.ic_back);\n+        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                getFragmentManager().popBackStack();\n+            }\n+        });\n \n         //noinspection ConstantConditions\n         // fpsView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n@@ -167,6 +175,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n     }\n \n     private void setComposition(LottieComposition composition, String name) {\n+        instructionsContainer.setVisibility(View.GONE);\n         seekBar.setProgress(0);\n         animationView.setComposition(composition);\n         animationNameView.setText(name);\n@@ -204,7 +213,8 @@ void onRestartClicked() {\n \n     @OnClick(R.id.invert_colors)\n     void onInvertClicked() {\n-        animationContainer.setEnabled(!animationContainer.isEnabled());\n+        animationContainer.setActivated(!animationContainer.isActivated());\n+        invertButton.setActivated(animationContainer.isActivated());\n     }\n \n     @OnClick(R.id.load_asset)",
    "output": "Updated test files again"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -188,7 +188,7 @@ void onPlayClicked() {\n \n     @OnClick(R.id.loop)\n     void onLoopChanged() {\n-        loopButton.setEnabled(!loopButton.isEnabled());\n+        loopButton.setActivated(!loopButton.isActivated());\n         animationView.loop(loopButton.isEnabled());\n     }\n ",
    "output": "Allow loop to be turned back on"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -143,6 +143,10 @@ public void setPath(KeyframeAnimation<Path> path) {\n     void onPathChanged() {\n         currentPath.reset();\n         currentPath.set(path.getValue());\n+        currentPathStrokeStart = Float.NaN;\n+        currentPathStrokeEnd = Float.NaN;\n+        currentPathScaleX = Float.NaN;\n+        currentPathScaleY = Float.NaN;\n         onPathPropertiesChanged();\n         invalidateSelf();\n     }",
    "output": "Fixed a bug that caused path properties to not be reapplied when updating a path"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -15,18 +15,18 @@\n import android.support.design.widget.Snackbar;\n import android.support.v4.app.Fragment;\n import android.support.v4.util.Pair;\n+import android.support.v7.app.AppCompatActivity;\n import android.support.v7.widget.AppCompatSeekBar;\n+import android.support.v7.widget.Toolbar;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n-import android.widget.Button;\n import android.widget.EditText;\n+import android.widget.ImageButton;\n import android.widget.SeekBar;\n import android.widget.TextView;\n import android.widget.Toast;\n-import android.widget.ToggleButton;\n \n-import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieAnimationView;\n import com.airbnb.lottie.model.LottieComposition;\n \n@@ -40,16 +40,13 @@\n \n import butterknife.BindView;\n import butterknife.ButterKnife;\n-import butterknife.OnCheckedChanged;\n import butterknife.OnClick;\n import okhttp3.Call;\n import okhttp3.Callback;\n import okhttp3.OkHttpClient;\n import okhttp3.Request;\n import okhttp3.Response;\n \n-import static com.airbnb.lottie.samples.R.id.play;\n-\n public class AnimationFragment extends Fragment {\n     private static final int RC_ASSET = 1337;\n     private static final int RC_FILE = 1338;\n@@ -62,12 +59,14 @@ static AnimationFragment newInstance() {\n \n     private OkHttpClient client;\n \n+    @BindView(R.id.toolbar) Toolbar toolbar;\n+    @BindView(R.id.animation_container) ViewGroup animationContainer;\n     @BindView(R.id.animation_view) LottieAnimationView animationView;\n     @BindView(R.id.seek_bar) AppCompatSeekBar seekBar;\n-    @BindView(R.id.play) Button playButton;\n-    @BindView(R.id.loop_button) ToggleButton loopButton;\n-    @BindView(R.id.frames_per_second) TextView fpsView;\n-    @BindView(R.id.dropped_frames) TextView droppedFramesView;\n+    @BindView(R.id.play_button) ImageButton playButton;\n+    @BindView(R.id.loop) ImageButton loopButton;\n+    // @BindView(R.id.frames_per_second) TextView fpsView;\n+    // @BindView(R.id.dropped_frames) TextView droppedFramesView;\n     @BindView(R.id.animation_name) TextView animationNameView;\n \n     @Nullable\n@@ -76,12 +75,14 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         View view = inflater.inflate(R.layout.fragment_animation, container, false);\n         ButterKnife.bind(this, view);\n \n+        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n+        toolbar.setNavigationIcon(R.drawable.ic_back);\n+\n         //noinspection ConstantConditions\n-        fpsView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n+        // fpsView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n         //noinspection ConstantConditions\n-        droppedFramesView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n+        // droppedFramesView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n         postUpdatePlayButtonText();\n-        loopButton.setChecked(true);\n         animationView.addAnimatorListener(new Animator.AnimatorListener() {\n             @Override\n             public void onAnimationStart(Animator animation) {\n@@ -166,35 +167,57 @@ public void onCompositionLoaded(LottieComposition composition) {\n     }\n \n     private void setComposition(LottieComposition composition, String name) {\n+        seekBar.setProgress(0);\n         animationView.setComposition(composition);\n         animationNameView.setText(name);\n     }\n \n-    @OnClick(play)\n+    @OnClick(R.id.play_button)\n     void onPlayClicked() {\n         if (animationView.isAnimating()) {\n-            animationView.cancelAnimation();\n+            animationView.pauseAnimation();\n             postUpdatePlayButtonText();\n         } else {\n+            if (animationView.getProgress() == 1f) {\n+                animationView.setProgress(0f);\n+            }\n             animationView.playAnimation();\n             postUpdatePlayButtonText();\n         }\n     }\n \n-    @OnCheckedChanged(R.id.loop_button)\n-    void onLoopChanged(boolean loop) {\n-        animationView.loop(loop);\n+    @OnClick(R.id.loop)\n+    void onLoopChanged() {\n+        loopButton.setEnabled(!loopButton.isEnabled());\n+        animationView.loop(loopButton.isEnabled());\n+    }\n+\n+    @OnClick(R.id.restart)\n+    void onRestartClicked() {\n+        boolean restart = animationView.isAnimating();\n+        animationView.cancelAnimation();\n+        animationView.setProgress(0f);\n+        if (restart) {\n+            animationView.playAnimation();\n+        }\n+    }\n+\n+    @OnClick(R.id.invert_colors)\n+    void onInvertClicked() {\n+        animationContainer.setEnabled(!animationContainer.isEnabled());\n     }\n \n     @OnClick(R.id.load_asset)\n     void onLoadAssetClicked() {\n+        animationView.cancelAnimation();\n         android.support.v4.app.DialogFragment assetFragment = ChooseAssetDialogFragment.newInstance();\n         assetFragment.setTargetFragment(this, RC_ASSET);\n         assetFragment.show(getFragmentManager(), \"assets\");\n     }\n \n     @OnClick(R.id.load_file)\n     void onLoadFileClicked() {\n+        animationView.cancelAnimation();\n         Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n         intent.setType(\"*/*.json\");\n         intent.addCategory(Intent.CATEGORY_OPENABLE);\n@@ -209,6 +232,7 @@ void onLoadFileClicked() {\n \n     @OnClick(R.id.load_url)\n     void onLoadUrlClicked() {\n+        animationView.cancelAnimation();\n         final EditText urlView = new EditText(getContext());\n         new AlertDialog.Builder(getContext())\n                 .setTitle(\"Enter a URL\")\n@@ -238,7 +262,7 @@ public void run() {\n     }\n \n     private void updatePlayButtonText() {\n-        playButton.setText(animationView.isAnimating() ? \"Cancel\" : \"Play\");\n+        playButton.setActivated(animationView.isAnimating());\n     }\n \n     private String getPath(Uri uri) throws URISyntaxException {\n@@ -335,13 +359,14 @@ private void startRecordingDroppedFrames() {\n         getApplication().startRecordingDroppedFrames();\n     }\n \n+    @SuppressWarnings(\"unused\")\n     @SuppressLint({\"SetTextI18n\", \"DefaultLocale\"})\n     private void recordDroppedFrames() {\n         Pair<Integer, Long> droppedFrames = getApplication().stopRecordingDroppedFrames();\n         int targetFrames = (int) ((droppedFrames.second / 1000000000f) * 60);\n         int actualFrames = targetFrames - droppedFrames.first;\n-        fpsView.setText(String.format(\"Fps: %.0f\", actualFrames / (animationView.getDuration() / 1000f)));\n-        droppedFramesView.setText(\"Dropped frames: \" + droppedFrames.first);\n+        // fpsView.setText(String.format(\"Fps: %.0f\", actualFrames / (animationView.getDuration() / 1000f)));\n+        // droppedFramesView.setText(\"Dropped frames: \" + droppedFrames.first);\n     }\n \n     private ILottieApplication getApplication() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -316,6 +316,14 @@ public void cancelAnimation() {\n         lottieDrawable.cancelAnimation();\n     }\n \n+    public void pauseAnimation() {\n+        setProgressWhenCompositionSet = false;\n+        playAnimationWhenCompositionSet = false;\n+        float progress = getProgress();\n+        lottieDrawable.cancelAnimation();\n+        setProgress(progress);\n+    }\n+\n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n         this.progress = progress;\n         if (isAnimationLoading) {\n@@ -325,6 +333,11 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n         lottieDrawable.setProgress(progress);\n     }\n \n+    @FloatRange(from=0.0f, to=1.0f)\n+    public float getProgress() {\n+        return progress;\n+    }\n+\n     public long getDuration() {\n         return composition != null ? composition.getDuration() : 0;\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -96,7 +96,9 @@ public void draw(@NonNull Canvas canvas) {\n                 alpha = alpha * this.alpha.getValue() / 255;\n             }\n             solidBackgroundPaint.setAlpha(alpha);\n-            canvas.drawRect(getBounds(), solidBackgroundPaint);\n+            if (alpha > 0) {\n+                canvas.drawRect(getBounds(), solidBackgroundPaint);\n+            }\n         }\n         for (int i = 0; i < layers.size(); i++) {\n             layers.get(i).draw(canvas);",
    "output": "Made AnimationFragment much prettier and presentable"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -4,9 +4,7 @@\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n import android.support.v4.app.Fragment;\n-import android.support.v7.app.AppCompatActivity;\n import android.support.v7.widget.RecyclerView;\n-import android.support.v7.widget.Toolbar;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n@@ -22,7 +20,6 @@ static ListFragment newInstance() {\n     }\n \n     @BindView(R.id.container) ViewGroup container;\n-    @BindView(R.id.toolbar) Toolbar toolbar;\n     @BindView(R.id.recycler_view) RecyclerView recyclerView;\n \n     private final FileAdapter adapter = new FileAdapter();\n@@ -32,7 +29,6 @@ static ListFragment newInstance() {\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.fragment_list, container, false);\n         ButterKnife.bind(this, view);\n-        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n \n         recyclerView.setAdapter(adapter);\n ",
    "output": "Added an animated lottie logo to ListFragment. Needs an updated asset"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n@@ -56,7 +56,6 @@ public void onCompositionLoaded(LottieComposition composition) {\n                 cursorView.loop(true);\n                 cursorView.playAnimation();\n                 addView(cursorView);\n-                views.add(cursorView);\n             }\n         });\n     }\n@@ -76,7 +75,7 @@ public void addView(View child, int index) {\n     }\n \n     private void removeLastView() {\n-        if (!views.isEmpty()) {\n+        if (views.size() > 1) {\n             int position = views.size() - 2;\n             removeView(views.get(position));\n             views.remove(position);",
    "output": "Fixed a crash in the typography fragment"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -5,6 +5,7 @@\n import android.graphics.Rect;\n import android.os.AsyncTask;\n import android.support.annotation.RestrictTo;\n+import android.support.annotation.VisibleForTesting;\n import android.util.LongSparseArray;\n \n import org.json.JSONArray;\n@@ -194,6 +195,12 @@ private LottieComposition(Resources res) {\n         scale = res.getDisplayMetrics().density;\n     }\n \n+    @VisibleForTesting\n+    public LottieComposition(long duration) {\n+        scale = 1f;\n+        this.duration = duration;\n+    }\n+\n \n     Layer layerModelForId(long id) {\n         return layerMap.get(id);\n\ndiff --git a/lottie/src/test/java/com/airbnb/lottie/KeyframeAnimationTest.java b/lottie/src/test/java/com/airbnb/lottie/KeyframeAnimationTest.java\n--- a/lottie/src/test/java/com/airbnb/lottie/KeyframeAnimationTest.java\n+++ b/lottie/src/test/java/com/airbnb/lottie/KeyframeAnimationTest.java\n@@ -2,8 +2,10 @@\n \n \n import android.view.animation.Interpolator;\n+import android.view.animation.LinearInterpolator;\n \n import com.airbnb.lottie.animation.NumberKeyframeAnimation;\n+import com.airbnb.lottie.model.LottieComposition;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -19,23 +21,32 @@\n @RunWith(RobolectricTestRunner.class)\n @Config(manifest = Config.NONE)\n public class KeyframeAnimationTest {\n-  @Test\n-  public void simpleAnimation() {\n-\n-    List<Float> keyTimes = Arrays.asList(0f, 0.5f, 1f);\n-    List<Float> values = Arrays.asList(0f, 1f, 10f);\n-\n-    NumberKeyframeAnimation<Float> animation = new NumberKeyframeAnimation<>(1000, 1000, keyTimes, Float.class, values, new ArrayList<Interpolator>(0));\n-\n-    animation.setProgress(0f);\n-    assertEquals(animation.getValue(), 0f);\n-    animation.setProgress(0.25f);\n-    assertEquals(animation.getValue(), 0.5f);\n-    animation.setProgress(0.5f);\n-    assertEquals(animation.getValue(), 1f);\n-    animation.setProgress(0.75f);\n-    assertEquals(animation.getValue(), 5.5f);\n-    animation.setProgress(1f);\n-    assertEquals(animation.getValue(), 10f);\n-  }\n+\n+    @Test\n+    public void simpleAnimation() {\n+        List<Float> keyTimes = Arrays.asList(0f, 0.5f, 1f);\n+        List<Float> values = Arrays.asList(0f, 1f, 10f);\n+\n+        NumberKeyframeAnimation<Float> animation = new NumberKeyframeAnimation<>(\n+                1000,\n+                new LottieComposition(1000),\n+                keyTimes,\n+                Float.class,\n+                values,\n+                new ArrayList<Interpolator>(1) {{\n+                    add(new LinearInterpolator());\n+                    add(new LinearInterpolator());\n+                }});\n+\n+        animation.setProgress(0f);\n+        assertEquals(animation.getValue(), 0f);\n+        animation.setProgress(0.25f);\n+        assertEquals(animation.getValue(), 0.5f);\n+        animation.setProgress(0.5f);\n+        assertEquals(animation.getValue(), 1f);\n+        animation.setProgress(0.75f);\n+        assertEquals(animation.getValue(), 5.5f);\n+        animation.setProgress(1f);\n+        assertEquals(animation.getValue(), 10f);\n+    }\n }\n\\ No newline at end of file",
    "output": "Fixed a broken keyframe animation test"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -130,20 +130,20 @@ void applyTransformForLayer(@Nullable Canvas canvas, AnimatableLayer layer) {\n             }\n         }\n \n-        if (layer.transform != null) {\n-            ScaleXY scale = layer.transform.getValue();\n-            if (scale.getScaleX() != 1f || scale.getScaleY() != 1f) {\n-                canvas.scale(scale.getScaleX(), scale.getScaleY());\n-            }\n-        }\n-\n         if (layer.rotation != null) {\n             float rotation = layer.rotation.getValue();\n             if (rotation != 0f) {\n                 canvas.rotate(rotation);\n             }\n         }\n \n+        if (layer.transform != null) {\n+            ScaleXY scale = layer.transform.getValue();\n+            if (scale.getScaleX() != 1f || scale.getScaleY() != 1f) {\n+                canvas.scale(scale.getScaleX(), scale.getScaleY());\n+            }\n+        }\n+\n         if (layer.anchorPoint != null) {\n             PointF anchorPoint = layer.anchorPoint.getValue();\n             if (anchorPoint.x != 0 || anchorPoint.y != 0) {",
    "output": "Fix a bug that would rotate things the wrong way"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -172,8 +172,9 @@ void setAlpha(KeyframeAnimation<Integer> alpha) {\n \n     @Override\n     public int getAlpha() {\n-        return (int) ((int) (alpha == null ? 1f : alpha.getValue()) *\n-                (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f) * 255);\n+        float alpha = this.alpha == null ? 1f : (this.alpha.getValue() / 255f);\n+        float parentAlpha = parentLayer == null ? 1f : (parentLayer.getAlpha() / 255f);\n+        return (int) (alpha * parentAlpha * 255);\n     }\n \n     @Override",
    "output": "Fixed a remaining bug in layer alpha"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -172,7 +172,8 @@ void setAlpha(KeyframeAnimation<Integer> alpha) {\n \n     @Override\n     public int getAlpha() {\n-        return (int) (alpha == null ? 255 : alpha.getValue() * (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f));\n+        return (int) ((int) (alpha == null ? 1f : alpha.getValue()) *\n+                (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f) * 255);\n     }\n \n     @Override",
    "output": "Fixed a bug in inheriting layer alpha from parent layers"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java\n@@ -0,0 +1,130 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.view.ViewPager;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.view.animation.Interpolator;\n+import android.widget.Scroller;\n+\n+import com.airbnb.lottie.LottieAnimationView;\n+import com.matthewtamlin.sliding_intro_screen_library.buttons.IntroButton;\n+import com.matthewtamlin.sliding_intro_screen_library.core.IntroActivity;\n+import com.matthewtamlin.sliding_intro_screen_library.core.LockableViewPager;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+public class AppIntroActivity extends IntroActivity {\n+    private static final float[] ANIMATION_TIMES = new float[] {\n+            0f,\n+            0.2795f,\n+            0.5488f,\n+            0.7650f,\n+            1f,\n+\n+    };\n+    private LottieAnimationView animationView;\n+    private LockableViewPager viewPager;\n+\n+    @Override\n+    protected Collection<? extends Fragment> generatePages(Bundle savedInstanceState) {\n+        return new ArrayList<EmptyFragment>() {{\n+            add(EmptyFragment.newInstance());\n+            add(EmptyFragment.newInstance());\n+            add(EmptyFragment.newInstance());\n+            add(EmptyFragment.newInstance());\n+        }};\n+    }\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+\n+        animationView = (LottieAnimationView) LayoutInflater.from(this).inflate(R.layout.app_intro_animation_view, getRootView(), false);\n+        viewPager = (LockableViewPager) findViewById(com.matthewtamlin.sliding_intro_screen_library.R.id.intro_activity_viewPager);\n+        getRootView().addView(animationView, 0);\n+        setViewPagerScroller();\n+\n+        viewPager.setCurrentItem(1, true);\n+\n+        addPageChangeListener(new ViewPager.OnPageChangeListener() {\n+            @Override\n+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n+                setAnimationProgress(position, positionOffset);\n+            }\n+\n+            @Override\n+            public void onPageSelected(int position) { }\n+\n+            @Override\n+            public void onPageScrollStateChanged(int state) { }\n+        });\n+    }\n+\n+    @Override\n+    protected IntroButton.Behaviour generateFinalButtonBehaviour() {\n+        return new IntroButton.Behaviour() {\n+            @Override\n+            public void setActivity(IntroActivity activity) { }\n+\n+            @Override\n+            public IntroActivity getActivity() {\n+                return null;\n+            }\n+\n+            @Override\n+            public void run() { }\n+        };\n+    }\n+\n+    private void setAnimationProgress(int position, float positionOffset) {\n+        float startProgress = ANIMATION_TIMES[position];\n+        float endProgress = ANIMATION_TIMES[position + 1];\n+\n+        animationView.setProgress(lerp(startProgress, endProgress, positionOffset));\n+    }\n+\n+    private float lerp(float startValue, float endValue, float f) {\n+        return startValue + f * (endValue - startValue);\n+    }\n+\n+    public static final class EmptyFragment extends Fragment {\n+\n+        private static EmptyFragment newInstance() {\n+            return new EmptyFragment();\n+        }\n+\n+        @Nullable\n+        @Override\n+        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+            return inflater.inflate(R.layout.fragment_empty, container, false);\n+        }\n+    }\n+\n+    private void setViewPagerScroller() {\n+        //noinspection TryWithIdenticalCatches\n+        try {\n+            Field scrollerField = ViewPager.class.getDeclaredField(\"mScroller\");\n+            scrollerField.setAccessible(true);\n+            Field interpolator = ViewPager.class.getDeclaredField(\"sInterpolator\");\n+            interpolator.setAccessible(true);\n+\n+            Scroller scroller = new Scroller(this, (Interpolator) interpolator.get(null)) {\n+                @Override\n+                public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n+                    super.startScroll(startX, startY, dx, dy, duration * 10);\n+                }\n+            };\n+            scrollerField.set(viewPager, scroller);\n+        } catch (NoSuchFieldException e) {\n+            // Do nothing.\n+        } catch (IllegalAccessException e) {\n+            // Do nothing.\n+        }\n+    }\n+}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n@@ -1,102 +0,0 @@\n-package com.airbnb.lottie.samples;\n-\n-import android.os.Bundle;\n-import android.support.annotation.Nullable;\n-import android.support.v4.app.Fragment;\n-import android.support.v4.view.PagerAdapter;\n-import android.support.v4.view.ViewPager;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.view.ViewTreeObserver;\n-import android.view.animation.Interpolator;\n-import android.widget.Scroller;\n-\n-import com.airbnb.lottie.LottieAnimationView;\n-\n-import java.lang.reflect.Field;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class AppIntroFragment extends Fragment {\n-    private static int PAGES = 3;\n-\n-    static AppIntroFragment newInstance() {\n-        return new AppIntroFragment();\n-    }\n-\n-    @BindView(R.id.animation_view) LottieAnimationView animationView;\n-    @BindView(R.id.view_pager) ViewPager viewPager;\n-\n-    @Nullable\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        View view = inflater.inflate(R.layout.fragment_app_intro, container, false);\n-        ButterKnife.bind(this, view);\n-\n-        setViewPagerScroller();\n-        viewPager.setAdapter(new PagerAdapter() {\n-            @Override\n-            public int getCount() {\n-                return PAGES + 1;\n-            }\n-\n-            @Override\n-            public boolean isViewFromObject(View view, Object object) {\n-                return object == view;\n-            }\n-\n-            @Override\n-            public Object instantiateItem(ViewGroup container, int position) {\n-                View view = LayoutInflater.from(container.getContext()).inflate(R.layout.pager_item_app_intro, container, false);\n-                container.addView(view);\n-                return view;\n-            }\n-\n-            @Override\n-            public void destroyItem(ViewGroup container, int position, Object object) {\n-                container.removeView((View) object);\n-            }\n-        });\n-\n-        viewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {\n-            @Override\n-            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n-                animationView.setProgress(position / (float) PAGES + positionOffset / (float) PAGES);\n-            }\n-        });\n-\n-        viewPager.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n-            @Override\n-            public void onGlobalLayout() {\n-                viewPager.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n-                viewPager.setCurrentItem(1, true);\n-            }\n-        });\n-\n-        return view;\n-    }\n-\n-    private void setViewPagerScroller() {\n-        //noinspection TryWithIdenticalCatches\n-        try {\n-            Field scrollerField = ViewPager.class.getDeclaredField(\"mScroller\");\n-            scrollerField.setAccessible(true);\n-            Field interpolator = ViewPager.class.getDeclaredField(\"sInterpolator\");\n-            interpolator.setAccessible(true);\n-\n-            Scroller scroller = new Scroller(getContext(), (Interpolator) interpolator.get(null)) {\n-                @Override\n-                public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n-                    super.startScroll(startX, startY, dx, dy, duration * 15);\n-                }\n-            };\n-            scrollerField.set(viewPager, scroller);\n-        } catch (NoSuchFieldException e) {\n-            // Do nothing.\n-        } catch (IllegalAccessException e) {\n-            // Do nothing.\n-        }\n-    }\n-}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -69,7 +69,7 @@ private void onViewTestClicked() {\n     }\n \n     private void onAppIntroPagerClicked() {\n-        showFragment(AppIntroFragment.newInstance());\n+        startActivity(new Intent(getContext(), AppIntroActivity.class));\n     }\n \n     private void showFragment(Fragment fragment) {",
    "output": "Improved the app intro activity"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n@@ -17,6 +17,7 @@\n import java.lang.reflect.Field;\n \n import butterknife.BindView;\n+import butterknife.ButterKnife;\n \n public class AppIntroFragment extends Fragment {\n     private static int PAGES = 3;\n@@ -32,6 +33,7 @@ static AppIntroFragment newInstance() {\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.fragment_app_intro, container, false);\n+        ButterKnife.bind(this, view);\n \n         setViewPagerScroller();\n         viewPager.setAdapter(new PagerAdapter() {\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -132,7 +132,7 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n \n         @Override\n         public int getItemCount() {\n-            return (files == null ? 0 : files.size()) + VIEW_TYPE_FILE - 1;\n+            return (files == null ? 0 : files.size()) + VIEW_TYPE_FILE;\n         }\n \n         @Override",
    "output": "Updated json"
  },
  {
    "input": "diff --git a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n--- a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n+++ b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n@@ -4,6 +4,7 @@\n import android.support.v4.util.Pair;\n import android.view.Gravity;\n \n+import com.airbnb.lottie.L;\n import com.codemonkeylabs.fpslibrary.FrameDataCallback;\n import com.codemonkeylabs.fpslibrary.TinyDancer;\n \n@@ -16,18 +17,21 @@ public class LottieApplication extends Application implements ILottieApplication\n     @Override\n     public void onCreate() {\n         super.onCreate();\n-        TinyDancer.create()\n-                .startingGravity(Gravity.TOP|Gravity.END)\n-                .startingXPosition(0)\n-                .startingYPosition(0)\n-                .addFrameDataCallback(new FrameDataCallback() {\n-                    @Override\n-                    public void doFrame(long previousFrameNs, long currentFrameNs, int droppedFrames) {\n-                        LottieApplication.this.droppedFrames += droppedFrames;\n-                        LottieApplication.this.currentFrameNs = currentFrameNs;\n-                    }\n-                })\n-                .show(this);\n+        if (L.DBG) {\n+            TinyDancer.create()\n+                    .startingGravity(Gravity.TOP|Gravity.END)\n+                    .startingXPosition(0)\n+                    .startingYPosition(0)\n+                    .addFrameDataCallback(new FrameDataCallback() {\n+                        @Override\n+                        public void doFrame(long previousFrameNs, long currentFrameNs, int droppedFrames) {\n+                            LottieApplication.this.droppedFrames += droppedFrames;\n+                            LottieApplication.this.currentFrameNs = currentFrameNs;\n+                        }\n+                    })\n+                    .show(this);\n+        }\n+\n     }\n \n     @Override\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -17,6 +17,7 @@\n import android.widget.TextView;\n import android.widget.ToggleButton;\n \n+import com.airbnb.lottie.L;\n import com.airbnb.lottie.LottieAnimationView;\n \n import butterknife.BindView;\n@@ -50,6 +51,10 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         View view = inflater.inflate(R.layout.fragment_animation, container, false);\n         ButterKnife.bind(this, view);\n \n+        //noinspection ConstantConditions\n+        fpsView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n+        //noinspection ConstantConditions\n+        droppedFramesView.setVisibility(L.DBG ? View.VISIBLE : View.GONE);\n         postUpdatePlayButtonText();\n         loopButton.setChecked(true);\n         animationView.addAnimatorListener(new Animator.AnimatorListener() {",
    "output": "Disable animation fragment fps features when L.DBG is false"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n@@ -53,6 +53,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n                         ViewGroup.LayoutParams.WRAP_CONTENT\n                 ));\n                 cursorView.setComposition(composition);\n+                cursorView.loop(true);\n                 cursorView.playAnimation();\n                 addView(cursorView);\n                 views.add(cursorView);\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -48,6 +48,7 @@ public void onValueChanged(PointF progress) {\n     };\n \n     final List<AnimatableLayer> layers = new ArrayList<>();\n+    @Nullable AnimatableLayer parentLayer;\n \n \n     private KeyframeAnimation<PointF> position;\n@@ -165,16 +166,13 @@ void setAlpha(KeyframeAnimation<Integer> alpha) {\n         this.alpha = alpha;\n         addAnimation(alpha);\n         alpha.addUpdateListener(integerChangedListener);\n-        for (AnimatableLayer layer : layers) {\n-            layer.setAlpha(alpha);\n-        }\n \n         invalidateSelf();\n     }\n \n     @Override\n     public int getAlpha() {\n-        return alpha.getValue();\n+        return (int) (alpha == null ? 255 : alpha.getValue() * (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f));\n     }\n \n     @Override\n@@ -228,6 +226,7 @@ public int getOpacity() {\n     }\n \n     void addLayer(AnimatableLayer layer) {\n+        layer.parentLayer = this;\n         layers.add(layer);\n         layer.setProgress(progress);\n         if (this.alpha != null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n@@ -84,7 +84,7 @@ private static class RoundRectLayer extends AnimatableLayer {\n         private final KeyframeAnimation.AnimationListener<Integer> alphaChangedListener = new KeyframeAnimation.AnimationListener<Integer>() {\n             @Override\n             public void onValueChanged(Integer value) {\n-                onAlphaChanged();\n+                invalidateSelf();\n             }\n         };\n \n@@ -158,7 +158,7 @@ void setShapeAlpha(KeyframeAnimation<Integer> shapeAlpha) {\n             this.shapeAlpha = shapeAlpha;\n             addAnimation(shapeAlpha);\n             shapeAlpha.addUpdateListener(alphaChangedListener);\n-            onAlphaChanged();\n+            invalidateSelf();\n         }\n \n         void setTransformAlpha(KeyframeAnimation<Integer> transformAlpha) {\n@@ -169,14 +169,9 @@ void setTransformAlpha(KeyframeAnimation<Integer> transformAlpha) {\n             this.transformAlpha = transformAlpha;\n             addAnimation(transformAlpha);\n             transformAlpha.addUpdateListener(alphaChangedListener);\n-            onAlphaChanged();\n+            invalidateSelf();\n         }\n \n-        private void onAlphaChanged() {\n-            Integer shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n-            Integer transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n-            setAlpha((int) ((shapeAlpha / 255f * transformAlpha / 255f) * 255));\n-        }\n \n         @Override\n         public void setAlpha(int alpha) {\n@@ -185,7 +180,10 @@ public void setAlpha(int alpha) {\n \n         @Override\n         public int getAlpha() {\n-            return paint.getAlpha();\n+            Integer shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n+            Integer transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n+            int layerAlpha = super.getAlpha();\n+            return (int) ((shapeAlpha / 255f * transformAlpha / 255f * layerAlpha / 255f) * 255);\n         }\n \n         public void setColor(KeyframeAnimation<Integer> color) {\n@@ -327,6 +325,7 @@ public void draw(@NonNull Canvas canvas) {\n             if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n                 return;\n             }\n+            paint.setAlpha(getAlpha());\n             float halfWidth = rectSize.getValue().x / 2f;\n             float halfHeight = rectSize.getValue().y / 2f;\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -31,7 +31,7 @@ public void onValueChanged(Path value) {\n     private final KeyframeAnimation.AnimationListener<Integer> alphaChangedListener = new KeyframeAnimation.AnimationListener<Integer>() {\n         @Override\n         public void onValueChanged(Integer value) {\n-            onAlphaChanged();\n+            invalidateSelf();\n         }\n     };\n \n@@ -210,6 +210,7 @@ public void draw(@NonNull Canvas canvas) {\n         if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n             return;\n         }\n+        paint.setAlpha(getAlpha());\n         canvas.drawPath(currentPath, paint);\n         if (!extraTrimPath.isEmpty()) {\n             canvas.drawPath(extraTrimPath, paint);\n@@ -218,7 +219,10 @@ public void draw(@NonNull Canvas canvas) {\n \n     @Override\n     public int getAlpha() {\n-        return paint.getAlpha();\n+        Integer shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n+        Integer transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n+        int layerAlpha = super.getAlpha();\n+        return (int) ((shapeAlpha / 255f * transformAlpha / 255f * layerAlpha / 255f) * 255);\n     }\n \n     void setShapeAlpha(KeyframeAnimation<Integer> shapeAlpha) {\n@@ -229,7 +233,7 @@ void setShapeAlpha(KeyframeAnimation<Integer> shapeAlpha) {\n         this.shapeAlpha = shapeAlpha;\n         addAnimation(shapeAlpha);\n         shapeAlpha.addUpdateListener(alphaChangedListener);\n-        onAlphaChanged();\n+        invalidateSelf();\n     }\n \n     void setTransformAlpha(KeyframeAnimation<Integer> transformAlpha) {\n@@ -240,13 +244,7 @@ void setTransformAlpha(KeyframeAnimation<Integer> transformAlpha) {\n         this.transformAlpha = transformAlpha;\n         addAnimation(transformAlpha);\n         transformAlpha.addUpdateListener(alphaChangedListener);\n-        onAlphaChanged();\n-    }\n-\n-    private void onAlphaChanged() {\n-        Integer shapeAlpha = this.shapeAlpha == null ? 255 : this.shapeAlpha.getValue();\n-        Integer transformAlpha = this.transformAlpha == null ? 255 : this.transformAlpha.getValue();\n-        setAlpha((int) ((shapeAlpha / 255f * transformAlpha / 255f) * 255));\n+        invalidateSelf();\n     }\n \n     @Override",
    "output": "Fixed layer opacity only applying to background fill"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lottie.samples;\n \n import android.content.Context;\n+import android.support.annotation.Nullable;\n import android.text.InputType;\n import android.util.AttributeSet;\n import android.view.KeyEvent;\n@@ -24,6 +25,8 @@ public class LottieFontViewGroup extends FrameLayout {\n     private final Map<Character, LottieComposition> compositionMap = new HashMap<>();\n     private final List<View> views = new ArrayList<>();\n \n+    @Nullable private LottieAnimationView cursorView;\n+\n     public LottieFontViewGroup(Context context) {\n         super(context);\n         init();\n@@ -41,21 +44,39 @@ public LottieFontViewGroup(Context context, AttributeSet attrs, int defStyleAttr\n \n     private void init() {\n         setFocusableInTouchMode(true);\n+        LottieComposition.fromAssetFileName(getContext(), \"Amelie/BlinkingCursor.json\", new LottieComposition.OnCompositionLoadedListener() {\n+            @Override\n+            public void onCompositionLoaded(LottieComposition composition) {\n+                cursorView = new LottieAnimationView(getContext());\n+                cursorView.setLayoutParams(new LottieFontViewGroup.LayoutParams(\n+                        ViewGroup.LayoutParams.WRAP_CONTENT,\n+                        ViewGroup.LayoutParams.WRAP_CONTENT\n+                ));\n+                cursorView.setComposition(composition);\n+                cursorView.playAnimation();\n+                addView(cursorView);\n+                views.add(cursorView);\n+            }\n+        });\n     }\n \n-    void addSpace() {\n+    private void addSpace() {\n         addView(createSpaceView());\n     }\n \n     @Override\n-    public void addView(View child) {\n-        super.addView(child);\n-        views.add(child);\n+    public void addView(View child, int index) {\n+        super.addView(child, index);\n+        if (index == -1) {\n+            views.add(child);\n+        } else {\n+            views.add(index, child);\n+        }\n     }\n \n-    void removeLastView() {\n+    private void removeLastView() {\n         if (!views.isEmpty()) {\n-            int position = views.size() - 1;\n+            int position = views.size() - 2;\n             removeView(views.get(position));\n             views.remove(position);\n         }\n@@ -139,7 +160,12 @@ private void addComposition(LottieComposition composition) {\n         ));\n         lottieAnimationView.setComposition(composition);\n         lottieAnimationView.playAnimation();\n-        addView(lottieAnimationView);\n+        if (cursorView == null) {\n+            addView(lottieAnimationView);\n+        } else {\n+            int index = indexOfChild(cursorView);\n+            addView(lottieAnimationView, index);\n+        }\n     }\n \n     private boolean fitsOnCurrentLine(int currentX, View view) {",
    "output": "Added a blinking cursor to the font fragment"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -179,9 +179,6 @@ private void onPathPropertiesChanged() {\n             float newEnd = Math.max(start, end);\n \n             currentPath.reset();\n-            // Workaround to get hardware acceleration on KitKat\n-            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n-            currentPath.rLineTo(0, 0);\n             currentPathStrokeOffset = strokeOffset.getValue() / 360f * length;\n             newStart += currentPathStrokeOffset;\n             newEnd += currentPathStrokeOffset;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java b/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java\n@@ -34,4 +34,9 @@ public AnimatableFloatValue getStart() {\n     public AnimatableFloatValue getOffset() {\n         return offset;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"Trim Path: {start: \" + start + \", end: \" + end + \", offset: \" + offset + \"}\";\n+    }\n }",
    "output": "Fixed an issue that caused there to be a dot at the center of some paths"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n@@ -17,25 +17,21 @@\n import java.lang.reflect.Field;\n \n import butterknife.BindView;\n-import butterknife.ButterKnife;\n-import butterknife.Unbinder;\n \n public class AppIntroFragment extends Fragment {\n     private static int PAGES = 3;\n \n-    public static AppIntroFragment newInstance() {\n+    static AppIntroFragment newInstance() {\n         return new AppIntroFragment();\n     }\n \n-    private Unbinder unbinder;\n     @BindView(R.id.animation_view) LottieAnimationView animationView;\n     @BindView(R.id.view_pager) ViewPager viewPager;\n \n     @Nullable\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.fragment_app_intro, container, false);\n-        unbinder = ButterKnife.bind(this, view);\n \n         setViewPagerScroller();\n         viewPager.setAdapter(new PagerAdapter() {",
    "output": "Cleaned up AppIntroFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroFragment.java\n@@ -0,0 +1,104 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.view.PagerAdapter;\n+import android.support.v4.view.ViewPager;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.view.ViewTreeObserver;\n+import android.view.animation.Interpolator;\n+import android.widget.Scroller;\n+\n+import com.airbnb.lottie.LottieAnimationView;\n+\n+import java.lang.reflect.Field;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+import butterknife.Unbinder;\n+\n+public class AppIntroFragment extends Fragment {\n+    private static int PAGES = 3;\n+\n+    public static AppIntroFragment newInstance() {\n+        return new AppIntroFragment();\n+    }\n+\n+    private Unbinder unbinder;\n+    @BindView(R.id.animation_view) LottieAnimationView animationView;\n+    @BindView(R.id.view_pager) ViewPager viewPager;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View view = inflater.inflate(R.layout.fragment_app_intro, container, false);\n+        unbinder = ButterKnife.bind(this, view);\n+\n+        setViewPagerScroller();\n+        viewPager.setAdapter(new PagerAdapter() {\n+            @Override\n+            public int getCount() {\n+                return PAGES + 1;\n+            }\n+\n+            @Override\n+            public boolean isViewFromObject(View view, Object object) {\n+                return object == view;\n+            }\n+\n+            @Override\n+            public Object instantiateItem(ViewGroup container, int position) {\n+                View view = LayoutInflater.from(container.getContext()).inflate(R.layout.pager_item_app_intro, container, false);\n+                container.addView(view);\n+                return view;\n+            }\n+\n+            @Override\n+            public void destroyItem(ViewGroup container, int position, Object object) {\n+                container.removeView((View) object);\n+            }\n+        });\n+\n+        viewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {\n+            @Override\n+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n+                animationView.setProgress(position / (float) PAGES + positionOffset / (float) PAGES);\n+            }\n+        });\n+\n+        viewPager.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n+            @Override\n+            public void onGlobalLayout() {\n+                viewPager.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n+                viewPager.setCurrentItem(1, true);\n+            }\n+        });\n+\n+        return view;\n+    }\n+\n+    private void setViewPagerScroller() {\n+        //noinspection TryWithIdenticalCatches\n+        try {\n+            Field scrollerField = ViewPager.class.getDeclaredField(\"mScroller\");\n+            scrollerField.setAccessible(true);\n+            Field interpolator = ViewPager.class.getDeclaredField(\"sInterpolator\");\n+            interpolator.setAccessible(true);\n+\n+            Scroller scroller = new Scroller(getContext(), (Interpolator) interpolator.get(null)) {\n+                @Override\n+                public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n+                    super.startScroll(startX, startY, dx, dy, duration * 15);\n+                }\n+            };\n+            scrollerField.set(viewPager, scroller);\n+        } catch (NoSuchFieldException e) {\n+            // Do nothing.\n+        } catch (IllegalAccessException e) {\n+            // Do nothing.\n+        }\n+    }\n+}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -68,6 +68,10 @@ private void onViewTestClicked() {\n         showFragment(ViewAnimationFragment.newInstance());\n     }\n \n+    private void onAppIntroPagerClicked() {\n+        showFragment(AppIntroFragment.newInstance());\n+    }\n+\n     private void showFragment(Fragment fragment) {\n         getFragmentManager().beginTransaction()\n                 .addToBackStack(null)\n@@ -86,7 +90,8 @@ final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n         static final int VIEW_TYPE_LOCAL_FILE = 1;\n         static final int VIEW_TYPE_VIEW_TEST = 2;\n         static final int VIEW_TYPE_FONT = 3;\n-        static final int VIEW_TYPE_FILE = 4;\n+        static final int VIEW_TYPE_APP_INTRO = 4;\n+        static final int VIEW_TYPE_FILE = 5;\n \n         @Nullable private List<String> files = null;\n \n@@ -115,6 +120,9 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                 case VIEW_TYPE_FONT:\n                     holder.bind(\"Demo: Animated Typography\");\n                     break;\n+                case VIEW_TYPE_APP_INTRO:\n+                    holder.bind(\"Demo: App Intro Pager\");\n+                    break;\n                 default:\n                     //noinspection ConstantConditions\n                     String fileName = files.get(position - VIEW_TYPE_FILE);\n@@ -165,6 +173,9 @@ public void onClick(View v) {\n                         case FileAdapter.VIEW_TYPE_FONT:\n                             onFontClicked();\n                             break;\n+                        case FileAdapter.VIEW_TYPE_APP_INTRO:\n+                            onAppIntroPagerClicked();\n+                            break;\n                         default:\n                             onFileClicked(fileName);\n                     }",
    "output": "Added an app intro fragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n@@ -3,22 +3,12 @@\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n import android.support.v7.app.AppCompatActivity;\n-import android.view.KeyEvent;\n-import android.view.ViewGroup;\n-\n-import com.airbnb.lottie.LottieAnimationView;\n-import com.airbnb.lottie.model.LottieComposition;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n \n import butterknife.BindView;\n import butterknife.ButterKnife;\n \n public class FontActivity extends AppCompatActivity {\n \n-    private Map<Character, LottieComposition> compositionMap = new HashMap<>();\n-\n     @BindView(R.id.font_view) LottieFontViewGroup fontView;\n \n     @Override\n@@ -27,49 +17,4 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {\n         setContentView(R.layout.activity_font);\n         ButterKnife.bind(this);\n     }\n-\n-    @Override\n-    public boolean onKeyDown(int keyCode, KeyEvent event) {\n-        if (keyCode == KeyEvent.KEYCODE_SPACE) {\n-            fontView.addSpace();\n-            return true;\n-        }\n-\n-        if (keyCode == KeyEvent.KEYCODE_DEL) {\n-            fontView.removeLastView();\n-            return true;\n-        }\n-\n-        if (event.getKeyCode() < KeyEvent.KEYCODE_A || event.getKeyCode() > KeyEvent.KEYCODE_Z) {\n-            return super.onKeyDown(keyCode, event);\n-        }\n-\n-\n-        final char letter = Character.toUpperCase((char) event.getUnicodeChar());\n-        if (compositionMap.containsKey(letter)) {\n-            addComposition(compositionMap.get(letter));\n-        } else {\n-            String fileName = \"Amelie/\" + letter + \".json\";\n-            LottieComposition.fromAssetFileName(this, fileName, new LottieComposition.OnCompositionLoadedListener() {\n-                @Override\n-                public void onCompositionLoaded(LottieComposition composition) {\n-                    compositionMap.put(letter, composition);\n-                    addComposition(composition);\n-                }\n-            });\n-        }\n-\n-        return true;\n-    }\n-\n-    private void addComposition(LottieComposition composition) {\n-        LottieAnimationView lottieAnimationView = new LottieAnimationView(this);\n-        lottieAnimationView.setLayoutParams(new LottieFontViewGroup.LayoutParams(\n-                ViewGroup.LayoutParams.WRAP_CONTENT,\n-                ViewGroup.LayoutParams.WRAP_CONTENT\n-        ));\n-        lottieAnimationView.setComposition(composition);\n-        lottieAnimationView.playAnimation();\n-        fontView.addView(lottieAnimationView);\n-    }\n }\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n@@ -1,28 +1,46 @@\n package com.airbnb.lottie.samples;\n \n import android.content.Context;\n+import android.text.InputType;\n import android.util.AttributeSet;\n+import android.view.KeyEvent;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.view.inputmethod.BaseInputConnection;\n+import android.view.inputmethod.EditorInfo;\n+import android.view.inputmethod.InputConnection;\n import android.widget.FrameLayout;\n \n+import com.airbnb.lottie.LottieAnimationView;\n+import com.airbnb.lottie.model.LottieComposition;\n+\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n public class LottieFontViewGroup extends FrameLayout {\n \n+    private final Map<Character, LottieComposition> compositionMap = new HashMap<>();\n     private final List<View> views = new ArrayList<>();\n \n     public LottieFontViewGroup(Context context) {\n         super(context);\n+        init();\n     }\n \n     public LottieFontViewGroup(Context context, AttributeSet attrs) {\n         super(context, attrs);\n+        init();\n     }\n \n     public LottieFontViewGroup(Context context, AttributeSet attrs, int defStyleAttr) {\n         super(context, attrs, defStyleAttr);\n+        init();\n+    }\n+\n+    private void init() {\n+        setFocusableInTouchMode(true);\n     }\n \n     void addSpace() {\n@@ -65,6 +83,65 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto\n         }\n     }\n \n+    @Override\n+    public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n+        BaseInputConnection fic = new BaseInputConnection(this, false);\n+        outAttrs.actionLabel = null;\n+        outAttrs.inputType = InputType.TYPE_NULL;\n+        outAttrs.imeOptions = EditorInfo.IME_ACTION_NEXT;\n+        return fic;\n+    }\n+\n+    @Override\n+    public boolean onCheckIsTextEditor() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onKeyUp(int keyCode, KeyEvent event) {\n+        if (keyCode == KeyEvent.KEYCODE_SPACE) {\n+            addSpace();\n+            return true;\n+        }\n+\n+        if (keyCode == KeyEvent.KEYCODE_DEL) {\n+            removeLastView();\n+            return true;\n+        }\n+\n+        if (event.getKeyCode() < KeyEvent.KEYCODE_A || event.getKeyCode() > KeyEvent.KEYCODE_Z) {\n+            return super.onKeyDown(keyCode, event);\n+        }\n+\n+\n+        final char letter = Character.toUpperCase((char) event.getUnicodeChar());\n+        if (compositionMap.containsKey(letter)) {\n+            addComposition(compositionMap.get(letter));\n+        } else {\n+            String fileName = \"Amelie/\" + letter + \".json\";\n+            LottieComposition.fromAssetFileName(getContext(), fileName, new LottieComposition.OnCompositionLoadedListener() {\n+                @Override\n+                public void onCompositionLoaded(LottieComposition composition) {\n+                    compositionMap.put(letter, composition);\n+                    addComposition(composition);\n+                }\n+            });\n+        }\n+\n+        return true;\n+    }\n+\n+    private void addComposition(LottieComposition composition) {\n+        LottieAnimationView lottieAnimationView = new LottieAnimationView(getContext());\n+        lottieAnimationView.setLayoutParams(new LottieFontViewGroup.LayoutParams(\n+                ViewGroup.LayoutParams.WRAP_CONTENT,\n+                ViewGroup.LayoutParams.WRAP_CONTENT\n+        ));\n+        lottieAnimationView.setComposition(composition);\n+        lottieAnimationView.playAnimation();\n+        addView(lottieAnimationView);\n+    }\n+\n     private boolean fitsOnCurrentLine(int currentX, View view) {\n         return currentX + view.getMeasuredWidth() < getWidth() - getPaddingRight();\n     }",
    "output": "Moved font handling from the activity to the view group"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -74,6 +74,8 @@ public void onValueChanged(ScaleXY value) {\n     private final Paint paint = new Paint();\n     private final Path tempPath = new Path();\n     private final Path currentPath = new Path();\n+    /** Path for the trim path when it loops around the end back to the start */\n+    private final Path extraTrimPath = new Path();\n     private final PathMeasure pathMeasure = new PathMeasure();\n \n     private float currentPathScaleX;\n@@ -165,25 +167,39 @@ private void onPathPropertiesChanged() {\n             currentPath.transform(scaleMatrix, currentPath);\n         }\n \n-        if (needsStrokeStart || needsStrokeEnd) {\n+        if (needsStrokeStart || needsStrokeEnd || needsStrokeOffset) {\n             tempPath.set(currentPath);\n             pathMeasure.setPath(tempPath, false);\n+            currentPathStrokeStart = strokeStart.getValue();\n+            currentPathStrokeEnd = strokeEnd.getValue();\n             float length = pathMeasure.getLength();\n-            float start = length * strokeStart.getValue() / 100f;\n-            float end = length * strokeEnd.getValue() / 100f;\n-            // TODO: use offset.\n+            float start = length * currentPathStrokeStart / 100f;\n+            float end = length * currentPathStrokeEnd / 100f;\n+            float newStart = Math.min(start, end);\n+            float newEnd = Math.max(start, end);\n \n             currentPath.reset();\n             // Workaround to get hardware acceleration on KitKat\n             // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n             currentPath.rLineTo(0, 0);\n-            currentPathStrokeStart = Math.min(start, end);\n-            currentPathStrokeEnd = Math.max(start, end);\n+            currentPathStrokeOffset = strokeOffset.getValue() / 360f * length;\n+            newStart += currentPathStrokeOffset;\n+            newEnd += currentPathStrokeOffset;\n+\n             pathMeasure.getSegment(\n-                    currentPathStrokeStart,\n-                    currentPathStrokeEnd,\n+                    newStart,\n+                    newEnd,\n                     currentPath,\n                     true);\n+\n+            extraTrimPath.reset();\n+            if (newEnd > length) {\n+                pathMeasure.getSegment(\n+                        0,\n+                        newEnd % length,\n+                        extraTrimPath,\n+                        true);\n+            }\n         }\n \n         currentPath.computeBounds(tempRect, false);\n@@ -198,6 +214,9 @@ public void draw(@NonNull Canvas canvas) {\n             return;\n         }\n         canvas.drawPath(currentPath, paint);\n+        if (!extraTrimPath.isEmpty()) {\n+            canvas.drawPath(extraTrimPath, paint);\n+        }\n     }\n \n     @Override",
    "output": "Fixed trim paths"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java\n@@ -27,7 +27,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         ButterKnife.bind(this, view);\n \n         messageBubble.setTag(R.id.lottie_layer_name, \"Tip\");\n-        LottieViewAnimator.of(getContext(), \"Tip_04.json\", messageBubble)\n+        LottieViewAnimator.of(getContext(), \"Tip.json\", messageBubble)\n                 .loop(true)\n                 .start();\n ",
    "output": "Updated view animation"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -43,7 +43,6 @@ static AnimationFragment newInstance(String fileName) {\n     @BindView(R.id.loop_button) ToggleButton loopButton;\n     @BindView(R.id.frames_per_second) TextView fpsView;\n     @BindView(R.id.dropped_frames) TextView droppedFramesView;\n-    @BindView(R.id.dropped_frames_per_second) TextView droppedFramesPerSecondView;\n \n     @Nullable\n     @Override\n@@ -150,8 +149,6 @@ private void recordDroppedFrames() {\n         int actualFrames = targetFrames - droppedFrames.first;\n         fpsView.setText(String.format(\"Fps: %.0f\", actualFrames / (animationView.getDuration() / 1000f)));\n         droppedFramesView.setText(\"Dropped frames: \" + droppedFrames.first);\n-        float droppedFps = droppedFrames.first / (droppedFrames.second / 1000000000f);\n-        droppedFramesPerSecondView.setText(String.format(\"Dropped frames per second: %.0f\", droppedFps));\n     }\n \n     private ILottieApplication getApplication() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n@@ -57,7 +57,7 @@ public class LayerView extends AnimatableLayer {\n     @Nullable private LayerView parentLayer;\n \n \n-    public LayerView(Layer layerModel, LottieComposition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {\n+    LayerView(Layer layerModel, LottieComposition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {\n         super(callback);\n         this.layerModel = layerModel;\n         this.composition = composition;\n@@ -154,11 +154,11 @@ public void onValueChanged(Float progress) {\n         }\n     }\n \n-    public Layer getLayerModel() {\n+    Layer getLayerModel() {\n         return layerModel;\n     }\n \n-    public void setParentLayer(@Nullable LayerView parentLayer) {\n+    void setParentLayer(@Nullable LayerView parentLayer) {\n         this.parentLayer = parentLayer;\n     }\n \n@@ -181,7 +181,7 @@ public void onValueChanged(Path progress) {\n         }\n     }\n \n-    public void setMatteLayer(LayerView matteLayer) {\n+    void setMatteLayer(LayerView matteLayer) {\n         if (matteBitmap == null) {\n             throw new IllegalArgumentException(\"Cannot set a matte if no matte bitmap was given!\");\n         }\n@@ -243,6 +243,7 @@ public void draw(@NonNull Canvas mainCanvas) {\n         if (hasMasks()) {\n             for (int i = 0; i < mask.getMasks().size(); i++) {\n                 Path path = mask.getMasks().get(i).getValue();\n+                //noinspection ConstantConditions\n                 maskCanvas.drawPath(path, maskShapePaint);\n             }\n             if (!hasMattes()) {",
    "output": "Updated readme and descoped some methods"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -142,23 +142,41 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n             JSONArray jsonLayers = json.getJSONArray(\"layers\");\n             for (int i = 0; i < jsonLayers.length(); i++) {\n                 Layer layer = Layer.fromJson(jsonLayers.getJSONObject(i), composition);\n-                composition.layers.add(layer);\n-                composition.layerMap.put(layer.getId(), layer);\n-                if (!layer.getMasks().isEmpty()) {\n-                    composition.hasMasks = true;\n-                }\n-                if (layer.getMatteType() != null && layer.getMatteType() != Layer.MatteType.None) {\n-                    composition.hasMattes = true;\n-                }\n+                addLayer(composition, layer);\n             }\n         } catch (JSONException e) {\n             throw new IllegalStateException(\"Unable to find layers.\", e);\n         }\n \n+        try {\n+            JSONArray assets = json.getJSONArray(\"assets\");\n+            for (int i = 0; i < assets.length(); i++) {\n+                JSONObject asset = assets.getJSONObject(i);\n+                JSONArray layers = asset.getJSONArray(\"layers\");\n+                for (int j = 0; j < layers.length(); j++) {\n+                    Layer layer = Layer.fromJson(layers.getJSONObject(j), composition);\n+                    addLayer(composition, layer);\n+                }\n+            }\n+        } catch (JSONException e) {\n+            // Do nothing.\n+        }\n+\n \n         return composition;\n     }\n \n+    private static void addLayer(LottieComposition composition, Layer layer) {\n+        composition.layers.add(layer);\n+        composition.layerMap.put(layer.getId(), layer);\n+        if (!layer.getMasks().isEmpty()) {\n+            composition.hasMasks = true;\n+        }\n+        if (layer.getMatteType() != null && layer.getMatteType() != Layer.MatteType.None) {\n+            composition.hasMattes = true;\n+        }\n+    }\n+\n     private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n     private final List<Layer> layers = new ArrayList<>();\n     private Rect bounds;",
    "output": "Add layers that are in assets"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java\n@@ -25,7 +25,7 @@ public LottieFontViewGroup(Context context, AttributeSet attrs, int defStyleAttr\n         super(context, attrs, defStyleAttr);\n     }\n \n-    public void addSpace() {\n+    void addSpace() {\n         addView(createSpaceView());\n     }\n \n@@ -35,7 +35,7 @@ public void addView(View child) {\n         views.add(child);\n     }\n \n-    public void removeLastView() {\n+    void removeLastView() {\n         if (!views.isEmpty()) {\n             int position = views.size() - 1;\n             removeView(views.get(position));\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -101,6 +101,13 @@ private void init(@Nullable AttributeSet attrs) {\n         setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }\n \n+    @Override\n+    public void invalidateDrawable(Drawable dr) {\n+        // We always want to invalidate the root drawable to it redraws the whole drawable.\n+        // Eventually it would be great to be able to invalidate just the changed region.\n+        super.invalidateDrawable(lottieDrawable);\n+    }\n+\n     @Override\n     protected Parcelable onSaveInstanceState() {\n         Parcelable superState = super.onSaveInstanceState();\n@@ -242,8 +249,9 @@ public void setComposition(@NonNull LottieComposition composition) {\n         if (L.DBG) {\n             Log.v(TAG, \"Set Composition \\n\" + composition);\n         }\n-        setImageDrawable(lottieDrawable);\n+        lottieDrawable.setCallback(this);\n         lottieDrawable.setComposition(composition);\n+        setImageDrawable(lottieDrawable);\n \n         isAnimationLoading = false;\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -234,7 +234,7 @@ void addLayer(AnimatableLayer layer) {\n         invalidateSelf();\n     }\n \n-    public void clearLayers() {\n+    void clearLayers() {\n         layers.clear();\n         invalidateSelf();\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n@@ -128,6 +128,11 @@ private void buildLayersForComposition(LottieComposition composition) {\n         }\n     }\n \n+    @Override\n+    public void invalidateSelf() {\n+        super.invalidateSelf();\n+    }\n+\n     @Override\n     public void draw(@NonNull Canvas canvas) {\n         if (composition == null) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -83,7 +83,7 @@ public void onValueChanged(ScaleXY value) {\n     private float currentPathStrokeOffset = 0;\n \n     @Nullable private KeyframeAnimation<ScaleXY> scale;\n-    private final RectF scaleRect = new RectF();\n+    private final RectF tempRect = new RectF();\n     private final Matrix scaleMatrix = new Matrix();\n \n     private KeyframeAnimation<Path> path;\n@@ -158,10 +158,10 @@ private void onPathPropertiesChanged() {\n         currentPath.set(path.getValue());\n \n         if (needsScaleX || needsScaleY) {\n-            currentPath.computeBounds(scaleRect, true);\n+            currentPath.computeBounds(tempRect, false);\n             currentPathScaleX = scale.getValue().getScaleX();\n             currentPathScaleY = scale.getValue().getScaleY();\n-            scaleMatrix.setScale(currentPathScaleX, currentPathScaleY, scaleRect.centerX(), scaleRect.centerY());\n+            scaleMatrix.setScale(currentPathScaleX, currentPathScaleY, tempRect.centerX(), tempRect.centerY());\n             currentPath.transform(scaleMatrix, currentPath);\n         }\n \n@@ -185,7 +185,7 @@ private void onPathPropertiesChanged() {\n                     currentPath,\n                     true);\n         }\n-\n+        \n         invalidateSelf();\n     }\n ",
    "output": "Fixed an invalidation bug"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -2,7 +2,6 @@\n \n import android.content.Intent;\n import android.os.Bundle;\n-import android.support.annotation.DrawableRes;\n import android.support.annotation.Nullable;\n import android.support.design.widget.Snackbar;\n import android.support.v4.app.Fragment;\n@@ -14,8 +13,6 @@\n import android.view.ViewGroup;\n import android.widget.TextView;\n \n-import com.airbnb.lottie.LottieAnimationView;\n-\n import java.io.IOException;\n import java.util.List;\n \n@@ -104,16 +101,16 @@ public StringViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n         public void onBindViewHolder(StringViewHolder holder, int position) {\n             switch (holder.getItemViewType()) {\n                 case VIEW_TYPE_NETWORK:\n-                    holder.bind(\"Demo: Load from network\", R.drawable.ic_network);\n+                    holder.bind(\"Demo: Load from network\");\n                     break;\n                 case VIEW_TYPE_LOCAL_FILE:\n-                    holder.bind(\"Demo: Load from local file\", R.drawable.ic_local_file);\n+                    holder.bind(\"Demo: Load from local file\");\n                     break;\n                 case VIEW_TYPE_VIEW_TEST:\n-                    holder.bind(\"Demo: Animate View\", R.drawable.ic_view);\n+                    holder.bind(\"Demo: Animate View\");\n                     break;\n                 case VIEW_TYPE_FONT:\n-                    holder.bind(\"Demo: Animated Typography\", \"Amelie/A.json\");\n+                    holder.bind(\"Demo: Animated Typography\");\n                     break;\n                 default:\n                     //noinspection ConstantConditions\n@@ -135,35 +132,19 @@ public int getItemViewType(int position) {\n \n     final class StringViewHolder extends RecyclerView.ViewHolder {\n \n-        @BindView(R.id.file_name) TextView fileNameView;\n-        @BindView(R.id.animation_view) LottieAnimationView animationView;\n+        @BindView(R.id.title) TextView titleView;\n \n         StringViewHolder(ViewGroup parent) {\n             super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n             ButterKnife.bind(this, itemView);\n         }\n \n-        void bind(String fileName) {\n-            bind(fileName, fileName, 0);\n-        }\n-\n-        void bind(String fileName, @DrawableRes int icon) {\n-            bind(fileName, fileName, icon);\n+        void bind(String title) {\n+            bind(title, title);\n         }\n \n-        void bind(String fileName, String title) {\n-            bind(fileName, title, 0);\n-        }\n-\n-        void bind(String title, final String fileName, @DrawableRes int icon) {\n-            fileNameView.setText(title);\n-            if (fileName.contains(\".json\")) {\n-                animationView.setAnimation(fileName, LottieAnimationView.CacheStrategy.Strong);\n-                animationView.setProgress(1f);\n-            } else if (icon > 0) {\n-                // animationView.setScaleType(ImageView.ScaleType.CENTER);\n-                animationView.setImageResource(icon);\n-            }\n+        void bind(String title, final String fileName) {\n+            titleView.setText(title);\n \n             itemView.setOnClickListener(new View.OnClickListener() {\n                 @Override",
    "output": "Removed animations from list fragment. The scrolling with masks caused too much memory churn"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -110,7 +110,7 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                     holder.bind(\"Demo: Load from local file\", R.drawable.ic_local_file);\n                     break;\n                 case VIEW_TYPE_LOCAL_FILE:\n-                    holder.bind(\"Demo: Load from local file\");\n+                    holder.bind(\"Demo: Load from local file\", R.drawable.ic_local_file);\n                     break;\n                 case VIEW_TYPE_VIEW_TEST:\n                     holder.bind(\"Demo: Animate View\", R.drawable.ic_view);",
    "output": "Added icons for demo rows"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -109,6 +109,9 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                 case VIEW_TYPE_LOCAL_FILE:\n                     holder.bind(\"Demo: Load from local file\", R.drawable.ic_local_file);\n                     break;\n+                case VIEW_TYPE_LOCAL_FILE:\n+                    holder.bind(\"Demo: Load from local file\");\n+                    break;\n                 case VIEW_TYPE_VIEW_TEST:\n                     holder.bind(\"Demo: Animate View\", R.drawable.ic_view);\n                     break;",
    "output": "Added local file fragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -98,7 +98,12 @@ public void onStopTrackingTouch(SeekBar seekBar) {}\n \n         if (savedInstanceState == null) {\n             String fileName = getArguments().getString(ARG_FILE_NAME);\n-            animationView.setAnimation(fileName);\n+            try {\n+                animationView.setAnimation(fileName);\n+            } catch (OutOfMemoryError error) {\n+                // The ListFragment can cause a ton of memory churn because there are many samples with masks and/or mattes.\n+                // Because of the churn, we may hit an OOM here.\n+            }\n         }\n \n         return view;",
    "output": "Catch OOM in AnimationFragment"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n@@ -9,15 +9,19 @@\n import android.view.KeyEvent;\n import android.widget.TextView;\n \n-import com.airbnb.lottie.LottieAnimationView;\n import com.airbnb.lottie.layers.LottieDrawable;\n import com.airbnb.lottie.model.LottieComposition;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import butterknife.BindView;\n import butterknife.ButterKnife;\n \n public class FontActivity extends AppCompatActivity {\n \n+    private Map<Character, LottieComposition> compositionMap = new HashMap<>();\n+\n     @BindView(R.id.text_view) TextView textView;\n \n     private final SpannableStringBuilder ssb = new SpannableStringBuilder();\n@@ -47,14 +51,20 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n             return false;\n         }\n \n-        char letter = Character.toUpperCase((char) event.getUnicodeChar());\n-        String fileName = \"Amelie/\" + letter + \".json\";\n-        LottieComposition.fromFile(this, fileName, new LottieComposition.OnCompositionLoadedListener() {\n-            @Override\n-            public void onCompositionLoaded(LottieComposition composition) {\n-                addComposition(composition);\n-            }\n-        });\n+\n+        final char letter = Character.toUpperCase((char) event.getUnicodeChar());\n+        if (compositionMap.containsKey(letter)) {\n+            addComposition(compositionMap.get(letter));\n+        } else {\n+            String fileName = \"Amelie/\" + letter + \".json\";\n+            LottieComposition.fromFile(this, fileName, new LottieComposition.OnCompositionLoadedListener() {\n+                @Override\n+                public void onCompositionLoaded(LottieComposition composition) {\n+                    compositionMap.put(letter, composition);\n+                    addComposition(composition);\n+                }\n+            });\n+        }\n \n         return true;\n     }\n@@ -63,7 +73,13 @@ private void addComposition(LottieComposition composition) {\n         LottieDrawable drawable = new LottieDrawable(composition, new Drawable.Callback() {\n             @Override\n             public void invalidateDrawable(Drawable who) {\n-                textView.setText(ssb);\n+                textView.post(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        // This may not render the last frame if we don't post this.\n+                        textView.setText(ssb);\n+                    }\n+                });\n             }\n \n             @Override\n@@ -79,7 +95,8 @@ public void unscheduleDrawable(Drawable who, Runnable what) {\n         drawable.playAnimation();\n         drawable.setBounds(0, 0, 100, 100);\n         ImageSpan span = new ImageSpan(drawable);\n-        ssb.append(\"A\", span, 0);\n+        ssb.append(\"_\");\n+        ssb.setSpan(span, ssb.length() - 1, ssb.length(), 0);\n         textView.setText(ssb);\n     }\n }",
    "output": "Improved the font demo"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java\n@@ -0,0 +1,85 @@\n+package com.airbnb.lottie.samples;\n+\n+import android.graphics.drawable.Drawable;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.text.SpannableStringBuilder;\n+import android.text.style.ImageSpan;\n+import android.view.KeyEvent;\n+import android.widget.TextView;\n+\n+import com.airbnb.lottie.LottieAnimationView;\n+import com.airbnb.lottie.layers.LottieDrawable;\n+import com.airbnb.lottie.model.LottieComposition;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class FontActivity extends AppCompatActivity {\n+\n+    @BindView(R.id.text_view) TextView textView;\n+\n+    private final SpannableStringBuilder ssb = new SpannableStringBuilder();\n+\n+    @Override\n+    protected void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_font);\n+        ButterKnife.bind(this);\n+    }\n+\n+    @Override\n+    public boolean onKeyDown(int keyCode, KeyEvent event) {\n+        if (keyCode == KeyEvent.KEYCODE_SPACE) {\n+            ssb.append(\"    \");\n+            textView.setText(ssb);\n+            return true;\n+        }\n+\n+        if (keyCode == KeyEvent.KEYCODE_DEL && ssb.length() > 0) {\n+            ssb.delete(ssb.length() - 1, ssb.length());\n+            textView.setText(ssb);\n+            return true;\n+        }\n+\n+        if (event.getKeyCode() < KeyEvent.KEYCODE_A || event.getKeyCode() > KeyEvent.KEYCODE_Z) {\n+            return false;\n+        }\n+\n+        char letter = Character.toUpperCase((char) event.getUnicodeChar());\n+        String fileName = \"Amelie/\" + letter + \".json\";\n+        LottieComposition.fromFile(this, fileName, new LottieComposition.OnCompositionLoadedListener() {\n+            @Override\n+            public void onCompositionLoaded(LottieComposition composition) {\n+                addComposition(composition);\n+            }\n+        });\n+\n+        return true;\n+    }\n+\n+    private void addComposition(LottieComposition composition) {\n+        LottieDrawable drawable = new LottieDrawable(composition, new Drawable.Callback() {\n+            @Override\n+            public void invalidateDrawable(Drawable who) {\n+                textView.setText(ssb);\n+            }\n+\n+            @Override\n+            public void scheduleDrawable(Drawable who, Runnable what, long when) {\n+\n+            }\n+\n+            @Override\n+            public void unscheduleDrawable(Drawable who, Runnable what) {\n+\n+            }\n+        });\n+        drawable.playAnimation();\n+        drawable.setBounds(0, 0, 100, 100);\n+        ImageSpan span = new ImageSpan(drawable);\n+        ssb.append(\"A\", span, 0);\n+        textView.setText(ssb);\n+    }\n+}\n\ndiff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lottie.samples;\n \n+import android.content.Intent;\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n import android.support.design.widget.Snackbar;\n@@ -86,11 +87,16 @@ private void onViewTestClicked() {\n                 .commit();\n     }\n \n+    private void onFontClicked() {\n+        startActivity(new Intent(getContext(), FontActivity.class));\n+    }\n+\n     final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n         static final int VIEW_TYPE_GRID = 1;\n         static final int VIEW_TYPE_CYCLE = 2;\n         static final int VIEW_TYPE_VIEW_TEST = 3;\n-        static final int VIEW_TYPE_FILE = 4;\n+        static final int VIEW_TYPE_FONT = 4;\n+        static final int VIEW_TYPE_FILE = 5;\n \n         @Nullable private List<String> files = null;\n \n@@ -116,6 +122,9 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                 case VIEW_TYPE_VIEW_TEST:\n                     holder.bind(\"View Test\");\n                     break;\n+                case VIEW_TYPE_FONT:\n+                    holder.bind(\"Animated Typography Demo\", \"Amelie/A.json\");\n+                    break;\n                 default:\n                     //noinspection ConstantConditions\n                     String fileName = files.get(position - VIEW_TYPE_FILE + 1);\n@@ -137,6 +146,8 @@ public int getItemViewType(int position) {\n                     return VIEW_TYPE_CYCLE;\n                 case 2:\n                     return VIEW_TYPE_VIEW_TEST;\n+                case 3:\n+                    return VIEW_TYPE_FONT;\n                 default:\n                     return VIEW_TYPE_FILE;\n             }\n@@ -153,10 +164,14 @@ final class StringViewHolder extends RecyclerView.ViewHolder {\n             ButterKnife.bind(this, itemView);\n         }\n \n-        void bind(final String name) {\n-            fileNameView.setText(name);\n-            if (name.contains(\".json\")) {\n-                animationView.setAnimation(name, LottieAnimationView.CacheStrategy.Strong);\n+        void bind(String fileName) {\n+            bind(fileName, fileName);\n+        }\n+\n+        void bind(String title, final String fileName) {\n+            fileNameView.setText(title);\n+            if (fileName.contains(\".json\")) {\n+                animationView.setAnimation(fileName, LottieAnimationView.CacheStrategy.Strong);\n                 animationView.setProgress(1f);\n             }\n \n@@ -173,8 +188,11 @@ public void onClick(View v) {\n                         case FileAdapter.VIEW_TYPE_VIEW_TEST:\n                             onViewTestClicked();\n                             break;\n+                        case FileAdapter.VIEW_TYPE_FONT:\n+                            onFontClicked();\n+                            break;\n                         default:\n-                            onFileClicked(name);\n+                            onFileClicked(fileName);\n                     }\n                 }\n             });\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n@@ -5,7 +5,6 @@\n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n import android.graphics.Rect;\n-import android.graphics.drawable.Drawable;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.annotation.VisibleForTesting;\n@@ -20,6 +19,8 @@\n \n public class LottieDrawable extends AnimatableLayer {\n \n+    private LottieComposition composition;\n+\n     private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n \n     @Nullable private Bitmap mainBitmap = null;\n@@ -29,7 +30,11 @@ public class LottieDrawable extends AnimatableLayer {\n     @Nullable private Bitmap maskBitmapForMatte = null;\n     private boolean playAnimationWhenLayerAdded;\n \n-    public LottieDrawable(Drawable.Callback callback) {\n+    public LottieDrawable(Callback callback) {\n+        this(null, callback);\n+    }\n+\n+    public LottieDrawable(@Nullable LottieComposition composition, Callback callback) {\n         super(0, callback);\n         animator.setRepeatCount(0);\n         animator.setInterpolator(new LinearInterpolator());\n@@ -39,20 +44,25 @@ public void onAnimationUpdate(ValueAnimator animation) {\n                 setProgress(animation.getAnimatedFraction());\n             }\n         });\n-    }\n \n-    private void clearComposition() {\n-        recycleBitmaps();\n-        clearLayers();\n+        if (composition != null) {\n+            setComposition(composition);\n+        }\n     }\n \n-    public void setComposition(@NonNull LottieComposition composition) {\n+    public void setComposition(LottieComposition composition) {\n+        this.composition = composition;\n+        animator.setDuration(composition.getDuration());\n         clearComposition();\n-        setCompDuration(composition.getDuration());\n         setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n         buildLayersForComposition(composition);\n     }\n \n+    private void clearComposition() {\n+        recycleBitmaps();\n+        clearLayers();\n+    }\n+\n     private void buildLayersForComposition(LottieComposition composition) {\n         if (composition == null) {\n             throw new IllegalStateException(\"Composition is null\");\n@@ -112,14 +122,23 @@ private void buildLayersForComposition(LottieComposition composition) {\n         }\n     }\n \n-    public void setCompDuration(long duration) {\n-        animator.setDuration(duration);\n-    }\n-\n     @Override\n     public void draw(@NonNull Canvas canvas) {\n+        if (composition == null) {\n+            return;\n+        }\n+        Rect bounds = getBounds();\n+        Rect compBounds = composition.getBounds();\n+        int saveCount = canvas.save();\n+        if (!bounds.equals(compBounds)) {\n+            float scaleX = bounds.width() / (float) compBounds.width();\n+            float scaleY = bounds.height() / (float) compBounds.height();\n+            canvas.scale(scaleX, scaleY);\n+        }\n         super.draw(canvas);\n         canvas.clipRect(getBounds());\n+        canvas.restoreToCount(saveCount);\n+\n     }\n \n     public void loop(boolean loop) {",
    "output": "Added a font demo"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -18,7 +18,7 @@\n import android.util.Log;\n import android.widget.ImageView;\n \n-import com.airbnb.lottie.layers.RootLayer;\n+import com.airbnb.lottie.layers.LottieDrawable;\n import com.airbnb.lottie.model.LottieComposition;\n \n import org.json.JSONObject;\n@@ -72,7 +72,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n         }\n     };\n \n-    private final RootLayer rootLayer = new RootLayer(this);\n+    private final LottieDrawable lottieDrawable = new LottieDrawable(this);\n     @FloatRange(from=0f, to=1f) private float progress;\n     private String animationName;\n     private boolean isScreenshotTest;\n@@ -107,9 +107,9 @@ private void init(@Nullable AttributeSet attrs) {\n             setAnimation(fileName);\n         }\n         if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n-            rootLayer.playAnimation();\n+            lottieDrawable.playAnimation();\n         }\n-        rootLayer.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n+        lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n         ta.recycle();\n         setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }\n@@ -119,9 +119,9 @@ protected Parcelable onSaveInstanceState() {\n         Parcelable superState = super.onSaveInstanceState();\n         SavedState ss = new SavedState(superState);\n         ss.animationName = animationName;\n-        ss.progress = rootLayer.getProgress();\n-        ss.isAnimating = rootLayer.isAnimating();\n-        ss.isLooping = rootLayer.isLooping();\n+        ss.progress = lottieDrawable.getProgress();\n+        ss.isAnimating = lottieDrawable.isAnimating();\n+        ss.isLooping = lottieDrawable.isLooping();\n         return ss;\n     }\n \n@@ -153,8 +153,8 @@ protected boolean verifyDrawable(@NonNull Drawable drawable) {\n \n     @Override\n     public void invalidateDrawable(@NonNull Drawable dr) {\n-        if (!hasInvalidatedThisFrame && rootLayer != null) {\n-            super.invalidateDrawable(rootLayer);\n+        if (!hasInvalidatedThisFrame && lottieDrawable != null) {\n+            super.invalidateDrawable(lottieDrawable);\n             hasInvalidatedThisFrame = true;\n         }\n     }\n@@ -174,7 +174,7 @@ protected void onDetachedFromWindow() {\n \n     @VisibleForTesting\n     public void recycleBitmaps() {\n-        rootLayer.recycleBitmaps();\n+        lottieDrawable.recycleBitmaps();\n     }\n \n     /**\n@@ -255,7 +255,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n             Log.v(TAG, \"Set Composition \\n\" + composition);\n         }\n \n-        rootLayer.setComposition(composition);\n+        lottieDrawable.setComposition(composition);\n \n         isAnimationLoading = false;\n \n@@ -267,7 +267,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n         }\n \n         this.composition = composition;\n-        setImageDrawable(rootLayer);\n+        setImageDrawable(lottieDrawable);\n \n         if (playAnimationWhenCompositionSet) {\n             playAnimationWhenCompositionSet = false;\n@@ -279,43 +279,43 @@ public void setComposition(@NonNull LottieComposition composition) {\n \n \n     public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n-        rootLayer.addAnimatorUpdateListener(updateListener);\n+        lottieDrawable.addAnimatorUpdateListener(updateListener);\n     }\n \n     @SuppressWarnings(\"unused\")\n     public void removeUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n-        rootLayer.removeAnimatorUpdateListener(updateListener);\n+        lottieDrawable.removeAnimatorUpdateListener(updateListener);\n     }\n \n     public void addAnimatorListener(Animator.AnimatorListener listener) {\n-        rootLayer.addAnimatorListener(listener);\n+        lottieDrawable.addAnimatorListener(listener);\n     }\n \n     @SuppressWarnings(\"unused\")\n     public void removeAnimatorListener(Animator.AnimatorListener listener) {\n-        rootLayer.removeAnimatorListener(listener);\n+        lottieDrawable.removeAnimatorListener(listener);\n     }\n \n     public void loop(boolean loop) {\n-        rootLayer.loop(loop);\n+        lottieDrawable.loop(loop);\n     }\n \n     public boolean isAnimating() {\n-        return rootLayer.isAnimating();\n+        return lottieDrawable.isAnimating();\n     }\n \n     public void playAnimation() {\n         if (isAnimationLoading) {\n             playAnimationWhenCompositionSet = true;\n             return;\n         }\n-        rootLayer.playAnimation();\n+        lottieDrawable.playAnimation();\n     }\n \n     public void cancelAnimation() {\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n-        rootLayer.cancelAnimation();\n+        lottieDrawable.cancelAnimation();\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n@@ -324,7 +324,7 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n             setProgressWhenCompositionSet = true;\n             return;\n         }\n-        rootLayer.setProgress(progress);\n+        lottieDrawable.setProgress(progress);\n     }\n \n     public long getDuration() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java\n@@ -18,7 +18,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class RootLayer extends AnimatableLayer {\n+public class LottieDrawable extends AnimatableLayer {\n \n     private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n \n@@ -29,7 +29,7 @@ public class RootLayer extends AnimatableLayer {\n     @Nullable private Bitmap maskBitmapForMatte = null;\n     private boolean playAnimationWhenLayerAdded;\n \n-    public RootLayer(Drawable.Callback callback) {\n+    public LottieDrawable(Drawable.Callback callback) {\n         super(0, callback);\n         animator.setRepeatCount(0);\n         animator.setInterpolator(new LinearInterpolator());",
    "output": "Renamed RootLayer to LottieDrawable"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -156,7 +156,7 @@ final class StringViewHolder extends RecyclerView.ViewHolder {\n         void bind(final String name) {\n             fileNameView.setText(name);\n             if (name.contains(\".json\")) {\n-                animationView.setAnimation(name);\n+                animationView.setAnimation(name, LottieAnimationView.CacheStrategy.Strong);\n                 animationView.setProgress(1f);\n             }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -28,8 +28,11 @@\n \n import org.json.JSONObject;\n \n+import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -44,6 +47,16 @@\n public class LottieAnimationView extends ImageView {\n     private static final String TAG = LottieAnimationView.class.getSimpleName();\n \n+    /**\n+     * Caching strategy for compositions that will be reused frequently.\n+     * Weak or Strong indicates the GC reference strength of the composition in the cache.\n+     */\n+    public enum CacheStrategy {\n+        None,\n+        Weak,\n+        Strong\n+    }\n+\n     /**\n      * Returns a {@link LottieAnimationView} that will allow it to be used without being attached to a window.\n      * Normally this isn't possible.\n@@ -55,6 +68,9 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n         return view;\n     }\n \n+    @Nullable private static Map<String, LottieComposition> strongRefCache;\n+    @Nullable private static Map<String, WeakReference<LottieComposition>> weakRefCache;\n+\n     private final LottieComposition.OnCompositionLoadedListener loadedListener = new LottieComposition.OnCompositionLoadedListener() {\n         @Override\n         public void onCompositionLoaded(LottieComposition composition) {\n@@ -191,19 +207,57 @@ public void recycleBitmaps() {\n             maskBitmapForMatte = null;\n         }\n     }\n+    /**\n+     * Sets the animation from a file in the assets directory.\n+     * This will load and deserialize the file asynchronously.\n+     *\n+     * Will not cache the composition once loaded.\n+     */\n+    public void setAnimation(String animationName) {\n+        setAnimation(animationName, CacheStrategy.None);\n+    }\n \n     /**\n      * Sets the animation from a file in the assets directory.\n      * This will load and deserialize the file asynchronously.\n      */\n-    public void setAnimation(final String animationName) {\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n+        this.animationName = animationName;\n+        if (weakRefCache != null && weakRefCache.containsKey(animationName)) {\n+            WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n+            if (compRef.get() != null) {\n+                setComposition(compRef.get());\n+                return;\n+            }\n+        } else if (strongRefCache != null && strongRefCache.containsKey(animationName)) {\n+            setComposition(strongRefCache.get(animationName));\n+            return;\n+        }\n         isAnimationLoading = true;\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n \n         this.animationName = animationName;\n         cancelLoaderTask();\n-        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);\n+        compositionLoader = LottieComposition.fromFile(getContext(), animationName, new LottieComposition.OnCompositionLoadedListener() {\n+            @Override\n+            public void onCompositionLoaded(LottieComposition composition) {\n+                if (cacheStrategy == CacheStrategy.Strong) {\n+                    if (strongRefCache == null) {\n+                        strongRefCache = new HashMap<>();\n+                    }\n+                    strongRefCache.put(animationName, composition);\n+                } else if (cacheStrategy == CacheStrategy.Weak) {\n+                    if (weakRefCache == null) {\n+                        weakRefCache = new HashMap<>();\n+                    }\n+                    weakRefCache.put(animationName, new WeakReference<>(composition));\n+                }\n+\n+                setComposition(composition);\n+            }\n+        });\n     }\n \n     /**\n@@ -227,10 +281,6 @@ private void cancelLoaderTask() {\n     }\n \n     public void setComposition(@NonNull LottieComposition composition) {\n-        if (getWindowToken() == null && !isScreenshotTest) {\n-            return;\n-        }\n-\n         if (L.DBG) {\n             Log.v(TAG, \"Set Composition \\n\" + composition);\n         }",
    "output": "Added composition caching back"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java\n@@ -12,6 +12,8 @@\n import android.view.ViewGroup;\n import android.widget.TextView;\n \n+import com.airbnb.lottie.LottieAnimationView;\n+\n import java.io.IOException;\n import java.util.List;\n \n@@ -116,7 +118,8 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                     break;\n                 default:\n                     //noinspection ConstantConditions\n-                    holder.bind(files.get(position - VIEW_TYPE_FILE + 1));\n+                    String fileName = files.get(position - VIEW_TYPE_FILE + 1);\n+                    holder.bind(fileName);\n             }\n         }\n \n@@ -143,6 +146,7 @@ public int getItemViewType(int position) {\n     final class StringViewHolder extends RecyclerView.ViewHolder {\n \n         @BindView(R.id.file_name) TextView fileNameView;\n+        @BindView(R.id.animation_view) LottieAnimationView animationView;\n \n         StringViewHolder(ViewGroup parent) {\n             super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n@@ -151,6 +155,11 @@ final class StringViewHolder extends RecyclerView.ViewHolder {\n \n         void bind(final String name) {\n             fileNameView.setText(name);\n+            if (name.contains(\".json\")) {\n+                animationView.setAnimation(name);\n+                animationView.setProgress(1f);\n+            }\n+\n             itemView.setOnClickListener(new View.OnClickListener() {\n                 @Override\n                 public void onClick(View v) {",
    "output": "Add a preview to list items"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -13,7 +13,6 @@\n import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n-import android.util.Log;\n \n import com.airbnb.lottie.animation.KeyframeAnimation;\n import com.airbnb.lottie.model.ShapeStroke;\n@@ -166,28 +165,25 @@ private void onPathPropertiesChanged() {\n             currentPath.transform(scaleMatrix, currentPath);\n         }\n \n-        if (needsStrokeStart || needsStrokeEnd || needsStrokeOffset) {\n+        if (needsStrokeStart || needsStrokeEnd) {\n             tempPath.set(currentPath);\n             pathMeasure.setPath(tempPath, false);\n-            currentPathStrokeOffset = strokeOffset.getValue();\n-            currentPathStrokeStart = strokeStart.getValue();\n-            currentPathStrokeEnd = strokeEnd.getValue();\n             float length = pathMeasure.getLength();\n-            if (length > 0) {\n-                float offset = length * currentPathStrokeOffset / 100f;\n-                float start = (length * currentPathStrokeStart / 100f + offset);\n-                float end = (length * currentPathStrokeEnd / 100f + offset);\n-\n-                currentPath.reset();\n-                // Workaround to get hardware acceleration on KitKat\n-                // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n-                currentPath.rLineTo(0, 0);\n-                pathMeasure.getSegment(\n-                        Math.min(start, end),\n-                        Math.max(start, end),\n-                        currentPath,\n-                        true);\n-            }\n+            float start = length * strokeStart.getValue() / 100f;\n+            float end = length * strokeEnd.getValue() / 100f;\n+            // TODO: use offset.\n+\n+            currentPath.reset();\n+            // Workaround to get hardware acceleration on KitKat\n+            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n+            currentPath.rLineTo(0, 0);\n+            currentPathStrokeStart = Math.min(start, end);\n+            currentPathStrokeEnd = Math.max(start, end);\n+            pathMeasure.getSegment(\n+                    currentPathStrokeStart,\n+                    currentPathStrokeEnd,\n+                    currentPath,\n+                    true);\n         }\n \n         invalidateSelf();",
    "output": "Reverted ShapeLayer#trimPath because it was broken"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -4,6 +4,7 @@\n import android.animation.ValueAnimator;\n import android.annotation.SuppressLint;\n import android.os.Bundle;\n+import android.os.Handler;\n import android.support.annotation.Nullable;\n import android.support.v4.app.Fragment;\n import android.support.v4.util.Pair;\n@@ -50,7 +51,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         View view = inflater.inflate(R.layout.fragment_animation, container, false);\n         ButterKnife.bind(this, view);\n \n-        updatePlayButtonText();\n+        postUpdatePlayButtonText();\n         loopButton.setChecked(true);\n         animationView.addAnimatorListener(new Animator.AnimatorListener() {\n             @Override\n@@ -61,10 +62,13 @@ public void onAnimationStart(Animator animation) {\n             @Override\n             public void onAnimationEnd(Animator animation) {\n                 recordDroppedFrames();\n+                postUpdatePlayButtonText();\n             }\n \n             @Override\n-            public void onAnimationCancel(Animator animation) {}\n+            public void onAnimationCancel(Animator animation) {\n+                postUpdatePlayButtonText();\n+            }\n \n             @Override\n             public void onAnimationRepeat(Animator animation) {\n@@ -110,23 +114,29 @@ public void onStop() {\n     public void onPlayClicked() {\n         if (animationView.isAnimating()) {\n             animationView.cancelAnimation();\n-            updatePlayButtonText();\n+            postUpdatePlayButtonText();\n         } else {\n             animationView.playAnimation();\n-            updatePlayButtonText();\n+            postUpdatePlayButtonText();\n         }\n     }\n \n+    private void postUpdatePlayButtonText() {\n+        new Handler().post(new Runnable() {\n+            @Override\n+            public void run() {\n+                updatePlayButtonText();\n+            }\n+        });\n+    }\n+\n     private void updatePlayButtonText() {\n         playButton.setText(animationView.isAnimating() ? \"Cancel\" : \"Play\");\n     }\n \n     @OnCheckedChanged(R.id.loop_button)\n     public void onLoopChanged(boolean loop) {\n         animationView.loop(loop);\n-        if (!loop) {\n-            animationView.cancelAnimation();\n-        }\n     }\n \n     private void startRecordingDroppedFrames() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/L.java b/lottie/src/main/java/com/airbnb/lottie/L.java\n--- a/lottie/src/main/java/com/airbnb/lottie/L.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/L.java\n@@ -1,5 +1,5 @@\n package com.airbnb.lottie;\n \n public class L {\n-    public static final boolean DBG = true;\n+    public static final boolean DBG = false;\n }",
    "output": "Fixed AnimationFragment play button state"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/Mask.java b/lottie/src/main/java/com/airbnb/lottie/model/Mask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Mask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Mask.java\n@@ -20,7 +20,10 @@ private enum MaskMode {\n \n     public Mask(JSONObject json, int frameRate, long compDuration) {\n         try {\n-            boolean closed = json.getBoolean(\"cl\");\n+            boolean closed = false;\n+            if (json.has(\"cl\")) {\n+                closed = json.getBoolean(\"cl\");\n+            }\n             String mode = json.getString(\"mode\");\n             switch (mode) {\n                 case \"a\":\n@@ -38,6 +41,7 @@ public Mask(JSONObject json, int frameRate, long compDuration) {\n \n             maskPath = new AnimatableShapeValue(json.getJSONObject(\"pt\"), frameRate, compDuration, closed);\n             AnimatableIntegerValue opacity = new AnimatableIntegerValue(json.getJSONObject(\"o\"), frameRate, compDuration, false, true);\n+            // TODO: use this.\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Unable to parse mask. \" + json, e);\n         }",
    "output": "Added a TODO to Mask opacity"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java\n@@ -1,8 +1,5 @@\n package com.airbnb.lottie.animatable;\n \n-import android.support.annotation.Nullable;\n-\n-import com.airbnb.lottie.model.RemapInterface;\n import com.airbnb.lottie.animation.KeyframeAnimation;\n import com.airbnb.lottie.animation.NumberKeyframeAnimation;\n \n@@ -12,10 +9,16 @@\n \n public class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {\n \n-    @Nullable private RemapInterface<Integer> remapInterface;\n \n-    public AnimatableIntegerValue(JSONObject json, int frameRate, long compDuration, boolean isDp) {\n+    public AnimatableIntegerValue(JSONObject json, int frameRate, long compDuration, boolean isDp, boolean remap100To255) {\n         super(json, frameRate, compDuration, isDp);\n+        if (remap100To255) {\n+            initialValue = initialValue * 255 / 100;\n+            getObservable().setValue(initialValue);\n+            for (int i = 0; i < keyValues.size(); i++) {\n+                keyValues.set(i, keyValues.get(i) * 255 / 100);\n+            }\n+        }\n     }\n \n     @Override\n@@ -41,33 +44,7 @@ public void onValueChanged(Integer progress) {\n         return animation;\n     }\n \n-    public void remap100To255() {\n-        remapValues(0, 100, 0, 255);\n-    }\n-\n-    @SuppressWarnings(\"SameParameterValue\")\n-    private void remapValues(final int fromMin, final int fromMax, final int toMin, final int toMax) {\n-        remapInterface = new RemapInterface<Integer>() {\n-            @Override\n-            public Integer remap(Integer inValue) {\n-                Integer remappedValue;\n-                if (inValue < fromMin) {\n-                    remappedValue = toMin;\n-                } else if (inValue > fromMax) {\n-                    remappedValue = toMax;\n-                } else {\n-                    remappedValue = (int) (toMin + (inValue / (float) (fromMax - fromMin) * (toMax - toMin)));\n-                }\n-                return remappedValue;\n-            }\n-        };\n-        observable.setValue(remapInterface.remap(observable.getValue()));\n-    }\n-\n     public Integer getInitialValue() {\n-        if (remapInterface != null) {\n-            return remapInterface.remap(initialValue);\n-        }\n         return initialValue;\n     }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n@@ -97,8 +97,7 @@ static Layer fromJson(JSONObject json, LottieComposition composition) {\n             } catch (JSONException e) {\n             }\n             if (opacity != null) {\n-                layer.opacity = new AnimatableIntegerValue(opacity, layer.frameRate, composition.getDuration(), false);\n-                layer.opacity.remap100To255();\n+                layer.opacity = new AnimatableIntegerValue(opacity, layer.frameRate, composition.getDuration(), false, true);\n                 if (L.DBG) Log.d(TAG, \"\\tOpacity=\" + layer.opacity.getInitialValue());\n             }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Mask.java b/lottie/src/main/java/com/airbnb/lottie/model/Mask.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Mask.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Mask.java\n@@ -37,8 +37,7 @@ public Mask(JSONObject json, int frameRate, long compDuration) {\n             }\n \n             maskPath = new AnimatableShapeValue(json.getJSONObject(\"pt\"), frameRate, compDuration, closed);\n-            AnimatableIntegerValue opacity = new AnimatableIntegerValue(json.getJSONObject(\"o\"), frameRate, compDuration, false);\n-            opacity.remap100To255();\n+            AnimatableIntegerValue opacity = new AnimatableIntegerValue(json.getJSONObject(\"o\"), frameRate, compDuration, false, true);\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Unable to parse mask. \" + json, e);\n         }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/RemapInterface.java b/lottie/src/main/java/com/airbnb/lottie/model/RemapInterface.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/RemapInterface.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/RemapInterface.java\n@@ -1,7 +0,0 @@\n-package com.airbnb.lottie.model;\n-\n-public interface RemapInterface<T extends Number> {\n-\n-    T remap(T inValue);\n-\n-}\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/ShapeFill.java b/lottie/src/main/java/com/airbnb/lottie/model/ShapeFill.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/ShapeFill.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/ShapeFill.java\n@@ -32,8 +32,7 @@ public ShapeFill(JSONObject json, int frameRate, long compDuration) {\n             jsonOpacity = json.getJSONObject(\"o\");\n         } catch (JSONException e) { }\n         if (jsonOpacity != null) {\n-            opacity = new AnimatableIntegerValue(jsonOpacity, frameRate, compDuration, false);\n-            opacity.remap100To255();\n+            opacity = new AnimatableIntegerValue(jsonOpacity, frameRate, compDuration, false, true);\n         }\n \n         try {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/ShapeStroke.java b/lottie/src/main/java/com/airbnb/lottie/model/ShapeStroke.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/ShapeStroke.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/ShapeStroke.java\n@@ -44,8 +44,7 @@ public enum LineJoinType {\n             width = new AnimatableFloatValue(widthJson, frameRate, compDuration);\n \n             JSONObject opacityJson = json.getJSONObject(\"o\");\n-            opacity = new AnimatableIntegerValue(opacityJson, frameRate, compDuration, false);\n-            opacity.remap100To255();\n+            opacity = new AnimatableIntegerValue(opacityJson, frameRate, compDuration, false, true);\n \n             capType = LineCapType.values()[json.getInt(\"lc\") - 1];\n             joinType = LineJoinType.values()[json.getInt(\"lj\") - 1];\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/ShapeTransform.java b/lottie/src/main/java/com/airbnb/lottie/model/ShapeTransform.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/ShapeTransform.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/ShapeTransform.java\n@@ -65,8 +65,7 @@ public class ShapeTransform {\n         } catch (JSONException e) {\n             throw new IllegalStateException(\"Transform has no opacity.\");\n         }\n-        opacity = new AnimatableIntegerValue(jsonOpacity, frameRate, compDuration, false);\n-        opacity.remap100To255();\n+        opacity = new AnimatableIntegerValue(jsonOpacity, frameRate, compDuration, false, true);\n \n         if (L.DBG) Log.d(TAG, \"Parsed new shape transform \" + toString());\n     }",
    "output": "Removed RemapInterface"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -21,7 +21,7 @@\n import android.widget.ImageView;\n \n import com.airbnb.lottie.layers.LayerView;\n-import com.airbnb.lottie.layers.RootAnimatableLayer;\n+import com.airbnb.lottie.layers.RootLayer;\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.model.LottieComposition;\n \n@@ -63,7 +63,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n     };\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n-    private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n+    private final RootLayer rootLayer = new RootLayer(this);\n     @FloatRange(from=0f, to=1f) private float progress;\n     private String animationName;\n     private boolean isScreenshotTest;\n@@ -104,9 +104,9 @@ private void init(@Nullable AttributeSet attrs) {\n             setAnimation(fileName);\n         }\n         if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n-            rootAnimatableLayer.playAnimation();\n+            rootLayer.playAnimation();\n         }\n-        rootAnimatableLayer.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n+        rootLayer.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n         ta.recycle();\n         setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }\n@@ -116,9 +116,9 @@ protected Parcelable onSaveInstanceState() {\n         Parcelable superState = super.onSaveInstanceState();\n         SavedState ss = new SavedState(superState);\n         ss.animationName = animationName;\n-        ss.progress = rootAnimatableLayer.getProgress();\n-        ss.isAnimating = rootAnimatableLayer.isAnimating();\n-        ss.isLooping = rootAnimatableLayer.isLooping();\n+        ss.progress = rootLayer.getProgress();\n+        ss.isAnimating = rootLayer.isAnimating();\n+        ss.isLooping = rootLayer.isLooping();\n         return ss;\n     }\n \n@@ -150,8 +150,8 @@ protected boolean verifyDrawable(@NonNull Drawable drawable) {\n \n     @Override\n     public void invalidateDrawable(@NonNull Drawable dr) {\n-        if (!hasInvalidatedThisFrame && rootAnimatableLayer != null) {\n-            super.invalidateDrawable(rootAnimatableLayer);\n+        if (!hasInvalidatedThisFrame && rootLayer != null) {\n+            super.invalidateDrawable(rootLayer);\n             hasInvalidatedThisFrame = true;\n         }\n     }\n@@ -244,11 +244,11 @@ public void setComposition(@NonNull LottieComposition composition) {\n         }\n \n         this.composition = composition;\n-        rootAnimatableLayer.setCompDuration(composition.getDuration());\n-        rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n+        rootLayer.setCompDuration(composition.getDuration());\n+        rootLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n         buildSubviewsForComposition();\n         requestLayout();\n-        setImageDrawable(rootAnimatableLayer);\n+        setImageDrawable(rootLayer);\n \n         if (playAnimationWhenCompositionSet) {\n             playAnimationWhenCompositionSet = false;\n@@ -295,57 +295,57 @@ private void buildSubviewsForComposition() {\n                 if (layer.getMatteType() == Layer.MatteType.Add) {\n                     maskedLayer = layerView;\n                 }\n-                rootAnimatableLayer.addLayer(layerView);\n+                rootLayer.addLayer(layerView);\n             }\n         }\n     }\n \n     private void clearComposition() {\n         composition = null;\n         recycleBitmaps();\n-        rootAnimatableLayer.clearLayers();\n+        rootLayer.clearLayers();\n         layerMap.clear();\n     }\n \n \n     public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n-        rootAnimatableLayer.addAnimatorUpdateListener(updateListener);\n+        rootLayer.addAnimatorUpdateListener(updateListener);\n     }\n \n     @SuppressWarnings(\"unused\")\n     public void removeUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n-        rootAnimatableLayer.removeAnimatorUpdateListener(updateListener);\n+        rootLayer.removeAnimatorUpdateListener(updateListener);\n     }\n \n     public void addAnimatorListener(Animator.AnimatorListener listener) {\n-        rootAnimatableLayer.addAnimatorListener(listener);\n+        rootLayer.addAnimatorListener(listener);\n     }\n \n     @SuppressWarnings(\"unused\")\n     public void removeAnimatorListener(Animator.AnimatorListener listener) {\n-        rootAnimatableLayer.removeAnimatorListener(listener);\n+        rootLayer.removeAnimatorListener(listener);\n     }\n \n     public void loop(boolean loop) {\n-        rootAnimatableLayer.loop(loop);\n+        rootLayer.loop(loop);\n     }\n \n     public boolean isAnimating() {\n-        return rootAnimatableLayer.isAnimating();\n+        return rootLayer.isAnimating();\n     }\n \n     public void playAnimation() {\n         if (isAnimationLoading) {\n             playAnimationWhenCompositionSet = true;\n             return;\n         }\n-        rootAnimatableLayer.playAnimation();\n+        rootLayer.playAnimation();\n     }\n \n     public void cancelAnimation() {\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n-        rootAnimatableLayer.cancelAnimation();\n+        rootLayer.cancelAnimation();\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n@@ -354,7 +354,7 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n             setProgressWhenCompositionSet = true;\n             return;\n         }\n-        rootAnimatableLayer.setProgress(progress);\n+        rootLayer.setProgress(progress);\n     }\n \n     public long getDuration() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n@@ -65,7 +65,7 @@ private void setupShapeGroupWithFill(ShapeFill previousFill,\n                 addLayer(shapeLayer);\n             } else if (item instanceof RectangleShape) {\n                 RectangleShape shapeRect = (RectangleShape) item;\n-                RectShapeLayer shapeLayer = new RectShapeLayer(shapeRect, currentFill, currentStroke, currentTransform, compDuration, getCallback());\n+                RectLayer shapeLayer = new RectLayer(shapeRect, currentFill, currentStroke, currentTransform, compDuration, getCallback());\n                 addLayer(shapeLayer);\n             } else if (item instanceof CircleShape) {\n                 CircleShape shapeCircle = (CircleShape) item;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java\n@@ -18,7 +18,7 @@\n \n import java.util.List;\n \n-class RectShapeLayer extends AnimatableLayer {\n+class RectLayer extends AnimatableLayer {\n \n     private final ShapeTransform transformModel;\n     private final ShapeStroke stroke;\n@@ -28,7 +28,7 @@ class RectShapeLayer extends AnimatableLayer {\n     @Nullable private RoundRectLayer fillLayer;\n     @Nullable private RoundRectLayer strokeLayer;\n \n-    RectShapeLayer(RectangleShape rectShape, @Nullable ShapeFill fill,\n+    RectLayer(RectangleShape rectShape, @Nullable ShapeFill fill,\n             @Nullable ShapeStroke stroke, ShapeTransform transform, long duration, Drawable.Callback callback) {\n         super(duration, callback);\n         this.rectShape = rectShape;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RootLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RootLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RootLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RootLayer.java\n@@ -7,13 +7,13 @@\n import android.support.annotation.NonNull;\n import android.view.animation.LinearInterpolator;\n \n-public class RootAnimatableLayer extends AnimatableLayer {\n+public class RootLayer extends AnimatableLayer {\n \n     private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n \n     private boolean playAnimationWhenLayerAdded;\n \n-    public RootAnimatableLayer(Drawable.Callback callback) {\n+    public RootLayer(Drawable.Callback callback) {\n         super(0, callback);\n         animator.setRepeatCount(0);\n         animator.setInterpolator(new LinearInterpolator());",
    "output": "Renamed RootAnimatableLayer and RectShapeLayer"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java\n@@ -27,7 +27,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         ButterKnife.bind(this, view);\n \n         messageBubble.setTag(R.id.lottie_layer_name, \"Null\");\n-        LottieViewAnimator.of(getContext(), \"ViewTest02.json\", messageBubble)\n+        LottieViewAnimator.of(getContext(), \"Tip_02.json\", messageBubble)\n                 .loop(true)\n                 .start();\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n@@ -4,6 +4,7 @@\n import android.content.Context;\n import android.graphics.PointF;\n import android.view.View;\n+import android.view.ViewTreeObserver;\n import android.view.animation.LinearInterpolator;\n \n import com.airbnb.lottie.animation.KeyframeAnimation;\n@@ -37,6 +38,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n     private boolean startWhenReady = false;\n \n     private LottieViewAnimator(Context context, String fileName, View... views) {\n+        L.SCALE = context.getResources().getDisplayMetrics().density;\n         viewsMap = new HashMap<>(views.length);\n \n         for (View view : views) {\n@@ -62,47 +64,75 @@ public void onAnimationUpdate(ValueAnimator animation) {\n     private void setComposition(LottieComposition composition) {\n         animator.setDuration(composition.getDuration());\n \n-        for (Layer layer : composition.getLayers()) {\n+        for (final Layer layer : composition.getLayers()) {\n             final View view = viewsMap.get(layer.getLayerName());\n             if (view == null) {\n                 continue;\n             }\n \n-            KeyframeAnimation<PointF> position = layer.getPosition().animationForKeyPath();\n-            position.addUpdateListener(new KeyframeAnimation.AnimationListener<PointF>() {\n-                @Override\n-                public void onValueChanged(PointF progress) {\n-                    view.setTranslationX(progress.x);\n-                    view.setTranslationY(progress.y);\n-                }\n-            });\n-            animatableValues.add(position);\n+            if (layer.getPosition().hasAnimation()) {\n+                KeyframeAnimation<PointF> position = layer.getPosition().animationForKeyPath();\n+                position.addUpdateListener(new KeyframeAnimation.AnimationListener<PointF>() {\n+                    @Override\n+                    public void onValueChanged(PointF progress) {\n+                        view.setTranslationX(progress.x);\n+                        view.setTranslationY(progress.y);\n+                    }\n+                });\n+                animatableValues.add(position);\n+            }\n             PointF initialPosition = layer.getPosition().getInitialPoint();\n             view.setTranslationX(initialPosition.x);\n             view.setTranslationY(initialPosition.y);\n \n-            KeyframeAnimation<ScaleXY> scale = layer.getScale().animationForKeyPath();\n-            scale.addUpdateListener(new KeyframeAnimation.AnimationListener<ScaleXY>() {\n-                @Override\n-                public void onValueChanged(ScaleXY scale) {\n-                    view.setScaleX(scale.getScaleX());\n-                    view.setScaleY(scale.getScaleY());\n-                }\n-            });\n-            animatableValues.add(scale);\n+            if (layer.getScale().hasAnimation()) {\n+                KeyframeAnimation<ScaleXY> scale = layer.getScale().animationForKeyPath();\n+                scale.addUpdateListener(new KeyframeAnimation.AnimationListener<ScaleXY>() {\n+                    @Override\n+                    public void onValueChanged(ScaleXY scale) {\n+                        view.setScaleX(scale.getScaleX());\n+                        view.setScaleY(scale.getScaleY());\n+                    }\n+                });\n+                animatableValues.add(scale);\n+            }\n             ScaleXY initialScale = layer.getScale().getInitialValue();\n             view.setScaleX(initialScale.getScaleX());\n             view.setScaleY(initialScale.getScaleY());\n \n-            KeyframeAnimation<Float> rotation = layer.getRotation().animationForKeyPath();\n-            rotation.addUpdateListener(new KeyframeAnimation.AnimationListener<Float>() {\n-                @Override\n-                public void onValueChanged(Float rotation) {\n-                    view.setRotation(rotation);\n-                }\n-            });\n-            animatableValues.add(rotation);\n+            if (layer.getRotation().hasAnimation()) {\n+                KeyframeAnimation<Float> rotation = layer.getRotation().animationForKeyPath();\n+                rotation.addUpdateListener(new KeyframeAnimation.AnimationListener<Float>() {\n+                    @Override\n+                    public void onValueChanged(Float rotation) {\n+                        view.setRotation(rotation);\n+                    }\n+                });\n+                animatableValues.add(rotation);\n+            }\n             view.setRotation(layer.getRotation().getInitialValue());\n+\n+            if (layer.getAnchor().hasAnimation()) {\n+                KeyframeAnimation<PointF> anchor = layer.getAnchor().animationForKeyPath();\n+                anchor.addUpdateListener(new KeyframeAnimation.AnimationListener<PointF>() {\n+                    @Override\n+                    public void onValueChanged(PointF anchor) {\n+                        setViewAnchor(view, anchor);\n+                    }\n+                });\n+            }\n+            if (view.getWidth() > 0) {\n+                setViewAnchor(view, layer.getAnchor().getInitialPoint());\n+\n+            } else {\n+                view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n+                    @Override\n+                    public void onGlobalLayout() {\n+                        view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n+                        setViewAnchor(view, layer.getAnchor().getInitialPoint());\n+                    }\n+                });\n+            }\n         }\n \n         if (startWhenReady) {\n@@ -135,4 +165,9 @@ public LottieViewAnimator setProgress(float progress) {\n         animator.setCurrentPlayTime((long) (progress * animator.getDuration()));\n         return this;\n     }\n+\n+    private void setViewAnchor(View view, PointF anchor) {\n+        view.setPivotX(anchor.x * view.getWidth() / (100f * L.SCALE));\n+        view.setPivotY(anchor.y * view.getHeight() / (100f * L.SCALE));\n+    }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n@@ -169,7 +169,7 @@ public Observable<PointF> getObservable() {\n     }\n \n     @Override\n-    public KeyframeAnimation animationForKeyPath() {\n+    public KeyframeAnimation<PointF> animationForKeyPath() {\n         if (!hasAnimation()) {\n             return null;\n         }",
    "output": "Added anchor point support to LottieViewAnimator\n\nAlso fixed a crash when a view animation had non-animated properties"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java\n@@ -36,8 +36,8 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n-                \"BusinessTravel01_Still.json\",\n-                \"Diamond 2.json\",\n+                \"BusinessTravel01.json\",\n+                \"Diamond.json\",\n                 \"LightBulb.json\",\n                 \"Alarm.json\",\n         };",
    "output": "Merge pull request #9 from airbnb/nsilverman-fix-grid-sample\n\nSample: Fix grid files"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -58,6 +58,7 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n         @Override\n         public void onCompositionLoaded(LottieComposition composition) {\n             setComposition(composition);\n+            compositionLoader = null;\n         }\n     };\n \n@@ -70,6 +71,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n     private boolean setProgressWhenCompositionSet;\n     private boolean playAnimationWhenCompositionSet;\n \n+    @Nullable private LottieComposition.Cancellable compositionLoader;\n     /** Can be null because it is created async */\n     @Nullable private LottieComposition composition;\n     private boolean hasInvalidatedThisFrame;\n@@ -201,7 +203,8 @@ public void setAnimation(final String animationName) {\n         playAnimationWhenCompositionSet = false;\n \n         this.animationName = animationName;\n-        LottieComposition.fromFile(getContext(), animationName, loadedListener);\n+        cancelLoaderTask();\n+        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);\n     }\n \n     /**\n@@ -213,7 +216,15 @@ public void setAnimation(final JSONObject json) {\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n \n-        LottieComposition.fromJson(getContext(), json, loadedListener);\n+        cancelLoaderTask();\n+        compositionLoader = LottieComposition.fromJson(getContext(), json, loadedListener);\n+    }\n+\n+    private void cancelLoaderTask() {\n+        if (compositionLoader != null) {\n+            compositionLoader.cancel();\n+            compositionLoader = null;\n+        }\n     }\n \n     public void setComposition(@NonNull LottieComposition composition) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -22,6 +22,10 @@ public interface OnCompositionLoadedListener {\n         void onCompositionLoaded(LottieComposition composition);\n     }\n \n+    public interface Cancellable {\n+        void cancel();\n+    }\n+\n     /**\n      * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel leaving ~2.3M pixels available.\n      * Reduce the number a little bit for safety.\n@@ -30,14 +34,16 @@ public interface OnCompositionLoadedListener {\n      */\n     private static final int MAX_PIXELS = 1000;\n \n-    public static void fromFile(Context context, String fileName, OnCompositionLoadedListener loadedListener) {\n+    public static Cancellable fromFile(Context context, String fileName, OnCompositionLoadedListener loadedListener) {\n         InputStream file;\n         try {\n             file = context.getAssets().open(fileName);\n         } catch (IOException e) {\n             throw new IllegalStateException(\"Unable to find file \" + fileName, e);\n         }\n-        new FileCompositionLoader(loadedListener).execute(file);\n+        FileCompositionLoader loader = new FileCompositionLoader(loadedListener);\n+        loader.execute(file);\n+        return loader;\n     }\n \n     public static LottieComposition fromFileSync(Context context, String fileName) {\n@@ -50,8 +56,10 @@ public static LottieComposition fromFileSync(Context context, String fileName) {\n         return fromInputStream(file);\n     }\n \n-    public static void fromJson(Context context, JSONObject json, OnCompositionLoadedListener loadedListener) {\n-        new JsonCompositionLoader(loadedListener).execute(json);\n+    public static Cancellable fromJson(Context context, JSONObject json, OnCompositionLoadedListener loadedListener) {\n+        JsonCompositionLoader loader = new JsonCompositionLoader(loadedListener);\n+        loader.execute(json);\n+        return loader;\n     }\n \n     private static LottieComposition fromInputStream(InputStream file) {\n@@ -175,7 +183,7 @@ public boolean hasMattes() {\n         return hasMattes;\n     }\n \n-    private static final class FileCompositionLoader extends AsyncTask<InputStream, Void, LottieComposition> {\n+    private static final class FileCompositionLoader extends CompositionLoader<InputStream> {\n \n         private final OnCompositionLoadedListener loadedListener;\n \n@@ -194,7 +202,7 @@ protected void onPostExecute(LottieComposition composition) {\n         }\n     }\n \n-    private static final class JsonCompositionLoader extends AsyncTask<JSONObject, Void, LottieComposition> {\n+    private static final class JsonCompositionLoader extends CompositionLoader<JSONObject> {\n \n         private final OnCompositionLoadedListener loadedListener;\n \n@@ -212,4 +220,14 @@ protected void onPostExecute(LottieComposition composition) {\n             loadedListener.onCompositionLoaded(composition);\n         }\n     }\n+\n+    private abstract static class CompositionLoader<Params>\n+            extends AsyncTask<Params, Void, LottieComposition>\n+            implements Cancellable {\n+\n+        @Override\n+        public void cancel() {\n+            cancel(true);\n+        }\n+    }\n }",
    "output": "Merge pull request #14 from airbnb/nsilverman-loader-fix\n\nCancel loading tasks when a new animation is set"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -58,6 +58,7 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n         @Override\n         public void onCompositionLoaded(LottieComposition composition) {\n             setComposition(composition);\n+            compositionLoader = null;\n         }\n     };\n \n@@ -70,6 +71,7 @@ public void onCompositionLoaded(LottieComposition composition) {\n     private boolean setProgressWhenCompositionSet;\n     private boolean playAnimationWhenCompositionSet;\n \n+    @Nullable private LottieComposition.Cancellable compositionLoader;\n     /** Can be null because it is created async */\n     @Nullable private LottieComposition composition;\n     private boolean hasInvalidatedThisFrame;\n@@ -201,7 +203,8 @@ public void setAnimation(final String animationName) {\n         playAnimationWhenCompositionSet = false;\n \n         this.animationName = animationName;\n-        LottieComposition.fromFile(getContext(), animationName, loadedListener);\n+        cancelLoaderTask();\n+        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);\n     }\n \n     /**\n@@ -213,7 +216,15 @@ public void setAnimation(final JSONObject json) {\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n \n-        LottieComposition.fromJson(getContext(), json, loadedListener);\n+        cancelLoaderTask();\n+        compositionLoader = LottieComposition.fromJson(getContext(), json, loadedListener);\n+    }\n+\n+    private void cancelLoaderTask() {\n+        if (compositionLoader != null) {\n+            compositionLoader.cancel();\n+            compositionLoader = null;\n+        }\n     }\n \n     public void setComposition(@NonNull LottieComposition composition) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -22,6 +22,10 @@ public interface OnCompositionLoadedListener {\n         void onCompositionLoaded(LottieComposition composition);\n     }\n \n+    public interface Cancellable {\n+        void cancel();\n+    }\n+\n     /**\n      * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel leaving ~2.3M pixels available.\n      * Reduce the number a little bit for safety.\n@@ -30,14 +34,16 @@ public interface OnCompositionLoadedListener {\n      */\n     private static final int MAX_PIXELS = 1000;\n \n-    public static void fromFile(Context context, String fileName, OnCompositionLoadedListener loadedListener) {\n+    public static Cancellable fromFile(Context context, String fileName, OnCompositionLoadedListener loadedListener) {\n         InputStream file;\n         try {\n             file = context.getAssets().open(fileName);\n         } catch (IOException e) {\n             throw new IllegalStateException(\"Unable to find file \" + fileName, e);\n         }\n-        new FileCompositionLoader(loadedListener).execute(file);\n+        FileCompositionLoader loader = new FileCompositionLoader(loadedListener);\n+        loader.execute(file);\n+        return loader;\n     }\n \n     public static LottieComposition fromFileSync(Context context, String fileName) {\n@@ -50,8 +56,10 @@ public static LottieComposition fromFileSync(Context context, String fileName) {\n         return fromInputStream(file);\n     }\n \n-    public static void fromJson(Context context, JSONObject json, OnCompositionLoadedListener loadedListener) {\n-        new JsonCompositionLoader(loadedListener).execute(json);\n+    public static Cancellable fromJson(Context context, JSONObject json, OnCompositionLoadedListener loadedListener) {\n+        JsonCompositionLoader loader = new JsonCompositionLoader(loadedListener);\n+        loader.execute(json);\n+        return loader;\n     }\n \n     private static LottieComposition fromInputStream(InputStream file) {\n@@ -175,7 +183,7 @@ public boolean hasMattes() {\n         return hasMattes;\n     }\n \n-    private static final class FileCompositionLoader extends AsyncTask<InputStream, Void, LottieComposition> {\n+    private static final class FileCompositionLoader extends CompositionLoader<InputStream> {\n \n         private final OnCompositionLoadedListener loadedListener;\n \n@@ -194,7 +202,7 @@ protected void onPostExecute(LottieComposition composition) {\n         }\n     }\n \n-    private static final class JsonCompositionLoader extends AsyncTask<JSONObject, Void, LottieComposition> {\n+    private static final class JsonCompositionLoader extends CompositionLoader<JSONObject> {\n \n         private final OnCompositionLoadedListener loadedListener;\n \n@@ -212,4 +220,14 @@ protected void onPostExecute(LottieComposition composition) {\n             loadedListener.onCompositionLoaded(composition);\n         }\n     }\n+\n+    private abstract static class CompositionLoader<Params>\n+            extends AsyncTask<Params, Void, LottieComposition>\n+            implements Cancellable {\n+\n+        @Override\n+        public void cancel() {\n+            cancel(true);\n+        }\n+    }\n }",
    "output": "Cancel loading tasks when a new animation is set"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n@@ -148,7 +148,7 @@ private void onCircleSizeChanged() {\n             path.cubicTo(0 - cpW, halfHeight, -halfWidth, 0 + cpH, -halfWidth, 0);\n             path.cubicTo(-halfWidth, 0 - cpH, 0 - cpW, -halfHeight, 0, -halfHeight);\n             observable.setValue(path);\n-            onTrimPathChanged();\n+            onPathChanged();\n \n             invalidateSelf();\n         }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -57,23 +57,28 @@ public void onChanged() {\n         }\n     };\n \n-    private final Observable.OnChangedListener trimPathChangedListener = new Observable.OnChangedListener() {\n+    private final Observable.OnChangedListener pathPropertyChangedListener = new Observable.OnChangedListener() {\n         @Override\n         public void onChanged() {\n-            onTrimPathChanged();\n+            onPathPropertiesChanged();\n         }\n     };\n \n \n     private final RectF bounds = new RectF();\n     private final Paint paint = new Paint();\n-    private final Path trimPath = new Path();\n+    private final Path tempPath = new Path();\n+    private final Path currentPath = new Path();\n     private final PathMeasure pathMeasure = new PathMeasure();\n \n+    private float currentPathScaleX;\n+    private float currentPathScaleY;\n+    private float currentPathStrokeStart;\n+    private float currentPathStrokeEnd = 100;\n+\n     @Nullable private Observable<ScaleXY> scale;\n     private final RectF scaleRect = new RectF();\n     private final Matrix scaleMatrix = new Matrix();\n-    private final Path scaledPath = new Path();\n \n     private Observable<Path> path;\n     private Observable<Integer> color;\n@@ -122,39 +127,61 @@ public void setPath(Observable<Path> path) {\n         onPathChanged();\n     }\n \n-    private void onPathChanged() {\n-        if (path != null && path.getValue() != null && scale != null) {\n-            path.getValue().computeBounds(scaleRect, true);\n-            scaleMatrix.setScale(scale.getValue().getScaleX(), scale.getValue().getScaleY(), scaleRect.centerX(), scaleRect.centerY());\n-            path.getValue().transform(scaleMatrix, scaledPath);\n-        } else {\n-            scaledPath.reset();\n-            scaledPath.set(path.getValue());\n-        }\n-        pathMeasure.setPath(scaledPath, false);\n+    void onPathChanged() {\n+        currentPath.reset();\n+        currentPath.set(path.getValue());\n+        onPathPropertiesChanged();\n         invalidateSelf();\n-        updateBounds();\n     }\n \n-    private void updateBounds() {\n-        scaledPath.computeBounds(bounds, true);\n-        bounds.left -= paint.getStrokeWidth();\n-        bounds.top -= paint.getStrokeWidth();\n-        bounds.right += paint.getStrokeWidth();\n-        bounds.bottom += paint.getStrokeWidth();\n-        setBounds(0, 0, (int) bounds.width(), (int) bounds.height());\n+    private void onPathPropertiesChanged() {\n+        boolean needsStrokeStart = strokeStart != null && strokeStart.getValue() != currentPathStrokeStart;\n+        boolean needsStrokeEnd = strokeEnd != null && strokeEnd.getValue() != currentPathStrokeEnd;\n+        boolean needsScaleX = scale != null && scale.getValue().getScaleX() != currentPathScaleX;\n+        boolean needsScaleY = scale != null && scale.getValue().getScaleY() != currentPathScaleY;\n+\n+        if (!needsStrokeStart && !needsStrokeEnd && !needsScaleX && !needsScaleY) {\n+            return;\n+        }\n+        currentPath.set(path.getValue());\n+\n+        if (needsScaleX || needsScaleY) {\n+            currentPath.computeBounds(scaleRect, true);\n+            currentPathScaleX = scale.getValue().getScaleX();\n+            currentPathScaleY = scale.getValue().getScaleY();\n+            scaleMatrix.setScale(currentPathScaleX, currentPathScaleY, scaleRect.centerX(), scaleRect.centerY());\n+            currentPath.transform(scaleMatrix, currentPath);\n+        }\n+\n+        if (needsStrokeStart || needsStrokeEnd) {\n+            tempPath.set(currentPath);\n+            pathMeasure.setPath(tempPath, false);\n+            float length = pathMeasure.getLength();\n+            float start = length * strokeStart.getValue() / 100f;\n+            float end = length * strokeEnd.getValue() / 100f;\n+\n+            currentPath.reset();\n+            // Workaround to get hardware acceleration on KitKat\n+            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n+            currentPath.rLineTo(0, 0);\n+            currentPathStrokeStart = Math.min(start, end);\n+            currentPathStrokeEnd = Math.max(start, end);\n+            pathMeasure.getSegment(\n+                    currentPathStrokeStart,\n+                    currentPathStrokeEnd,\n+                    currentPath,\n+                    true);\n+        }\n+\n+        invalidateSelf();\n     }\n \n     @Override\n     public void draw(@NonNull Canvas canvas) {\n         if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n             return;\n         }\n-        if (!trimPath.isEmpty()) {\n-            canvas.drawPath(trimPath, paint);\n-        } else {\n-            canvas.drawPath(scaledPath, paint);\n-        }\n+        canvas.drawPath(currentPath, paint);\n     }\n \n     @Override\n@@ -213,7 +240,6 @@ void setLineWidth(Observable<Float> lineWidth) {\n \n     private void onLineWidthChanged() {\n         paint.setStrokeWidth(lineWidth.getValue());\n-        updateBounds();\n         invalidateSelf();\n     }\n \n@@ -278,48 +304,24 @@ void setLineJoinType(ShapeStroke.LineJoinType lineJoinType) {\n \n     void setTrimPath(Observable<Float> strokeStart, Observable<Float> strokeEnd) {\n         if (this.strokeStart != null) {\n-            this.strokeStart.removeChangeListener(trimPathChangedListener);\n+            this.strokeStart.removeChangeListener(pathPropertyChangedListener);\n         }\n         if (this.strokeEnd != null) {\n-            this.strokeEnd.removeChangeListener(trimPathChangedListener);\n+            this.strokeEnd.removeChangeListener(pathPropertyChangedListener);\n         }\n         this.strokeStart = strokeStart;\n         this.strokeEnd = strokeEnd;\n-        strokeStart.addChangeListener(trimPathChangedListener);\n-        strokeEnd.addChangeListener(trimPathChangedListener);\n-        onTrimPathChanged();\n-    }\n-\n-    void onTrimPathChanged() {\n-        if (strokeStart != null && strokeEnd != null) {\n-            float strokeStartVal = strokeStart.getValue();\n-            float strokeEndVal = strokeEnd.getValue();\n-            if (strokeStartVal == 0 && strokeEndVal == 100 && trimPath.isEmpty()) {\n-                return;\n-            }\n-            float length = pathMeasure.getLength();\n-            float start = length * strokeStartVal / 100f;\n-            float end = length * strokeEndVal / 100f;\n-\n-            trimPath.reset();\n-            // Workaround to get hardware acceleration on KitKat\n-            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n-            trimPath.rLineTo(0, 0);\n-            pathMeasure.getSegment(\n-                    Math.min(start, end),\n-                    Math.max(start, end),\n-                    trimPath,\n-                    true);\n-        }\n-        invalidateSelf();\n+        strokeStart.addChangeListener(pathPropertyChangedListener);\n+        strokeEnd.addChangeListener(pathPropertyChangedListener);\n+        onPathPropertiesChanged();\n     }\n \n     void setScale(@SuppressWarnings(\"NullableProblems\") Observable<ScaleXY> scale) {\n         if (this.scale != null) {\n-            this.scale.removeChangeListener(pathChangedListener);\n+            this.scale.removeChangeListener(pathPropertyChangedListener);\n         }\n         this.scale = scale;\n-        scale.addChangeListener(pathChangedListener);\n-        onPathChanged();\n+        scale.addChangeListener(pathPropertyChangedListener);\n+        onPathPropertiesChanged();\n     }\n }",
    "output": "Refactored ShapeLayer which actually fixed some bugs"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java\n@@ -294,6 +294,9 @@ void onTrimPathChanged() {\n         if (strokeStart != null && strokeEnd != null) {\n             float strokeStartVal = strokeStart.getValue();\n             float strokeEndVal = strokeEnd.getValue();\n+            if (strokeStartVal == 0 && strokeEndVal == 100 && trimPath.isEmpty()) {\n+                return;\n+            }\n             float length = pathMeasure.getLength();\n             float start = length * strokeStartVal / 100f;\n             float end = length * strokeEndVal / 100f;",
    "output": "Ignore trim paths that go from 0 to 100"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java\n@@ -64,8 +64,9 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         }\n         this.progress = progress;\n \n+        T value = getValue();\n         for (int i = 0; i < listeners.size(); i++) {\n-            listeners.get(i).onValueChanged(getValue());\n+            listeners.get(i).onValueChanged(value);\n         }\n     }\n ",
    "output": "Move getValue() out of loop for performance."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableShapeValue.java b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableShapeValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableShapeValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableShapeValue.java\n@@ -17,7 +17,7 @@\n \n @SuppressWarnings({\"EmptyCatchBlock\"})\n public class AnimatableShapeValue extends BaseAnimatableValue<ShapeData, Path> {\n-    private final boolean closed;\n+    private boolean closed;\n \n     public AnimatableShapeValue(JSONObject json, int frameRate, long compDuration, boolean closed) {\n         super(null, frameRate, compDuration, true);\n@@ -52,6 +52,12 @@ protected ShapeData valueFromObject(Object object, float scale) throws JSONExcep\n             pointsArray = pointsData.getJSONArray(\"v\");\n             inTangents = pointsData.getJSONArray(\"i\");\n             outTangents = pointsData.getJSONArray(\"o\");\n+\n+            if (pointsData.has(\"c\")) {\n+                // Bodymovin < 4.4 uses \"closed\" one level up in the json so it is passed in to the constructor.\n+                // Bodymovin 4.4+ has closed here.\n+                closed = pointsData.getBoolean(\"c\");\n+            }\n         } catch (JSONException e) { }\n \n         if (pointsArray == null || inTangents == null || outTangents == null ||\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/ShapePath.java b/lottie/src/main/java/com/airbnb/lottie/model/ShapePath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/ShapePath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/ShapePath.java\n@@ -13,7 +13,6 @@ public class ShapePath {\n     private static final String TAG = ShapePath.class.getSimpleName();\n \n     private String name;\n-    private boolean closed;\n     private int index;\n     private AnimatableShapeValue shapePath;\n \n@@ -30,10 +29,11 @@ public ShapePath(JSONObject json, int frameRate, long compDuration) {\n             throw new IllegalArgumentException(\"Layer has no name.\", e);\n         }\n \n+        boolean closed = false;\n         try {\n             closed = json.getBoolean(\"closed\");\n         } catch (JSONException e) {\n-            throw new IllegalArgumentException(\"ShapePath index \" + index + \" has no value for 'closed'.\", e);\n+            // Do nothing. Bodymovin 4.4 moved \"closed\" to be \"c\" inside of the shape json itself.\n         }\n \n         JSONObject shape;\n@@ -58,7 +58,6 @@ public AnimationGroup createAnimation() {\n     @Override\n     public String toString() {\n         return \"ShapePath{\" + \"name=\" + name +\n-                \", closed=\" + closed +\n                 \", index=\" + index +\n                 \", hasAnimation=\" + shapePath.hasAnimation() +\n                 '}';",
    "output": "Added support for bodymovin 4.4 (#13)"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n@@ -8,7 +8,7 @@\n import java.util.Locale;\n \n class TestRobot {\n-    private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.15f, 0.20f, 0.25f, 0.30f, 0.40f, 0.50f, 0.60f, 0.70f, 0.80f, 0.90f, 1f};\n+    private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.2f, 0.5f, 1f};\n     private static final float[] DEFAULT_STATIC_PROGRESS = {0f};\n \n     static void testAnimatedFile(MainActivity activity, String fileName) {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n@@ -130,7 +130,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                     cp1 = keyframe.has(\"to\") ? JsonUtils.pointFromJsonArray(keyframe.getJSONArray(\"to\"), L.SCALE) : null;\n                     cp2 = keyframe.has(\"ti\") ? JsonUtils.pointFromJsonArray(keyframe.getJSONArray(\"ti\"), L.SCALE) : null;\n                     PointF vertex = JsonUtils.pointFromJsonArray(keyframe.getJSONArray(\"e\"), L.SCALE);\n-                    if (cp1 != null && cp2 != null) {\n+                    if (cp1 != null && cp2 != null && cp1.length() != 0 && cp2.length() != 0) {\n                         animationPath.cubicTo(\n                                 startPoint.x + cp1.x, startPoint.y + cp1.y,\n                                 vertex.x + cp2.x, vertex.y + cp2.y,\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/utils/SegmentedPath.java b/lottie/src/main/java/com/airbnb/lottie/utils/SegmentedPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/utils/SegmentedPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/utils/SegmentedPath.java\n@@ -17,6 +17,13 @@ public void moveTo(float x, float y) {\n \n     public void lineTo(float x, float y) {\n         Path path = new Path();\n+        // This is a small hack that ensures that an actual path will get created.\n+        // Without this, a lineTo call to the current point will end up creating an empty path\n+        // which breaks animations.\n+        if (currentPoint.x == x && currentPoint.y == y) {\n+            x += 0.01f;\n+            y += 0.01f;\n+        }\n         path.moveTo(currentPoint.x, currentPoint.y);\n         path.lineTo(x, y);\n         segments.add(path);",
    "output": "Fixed a bug that caused empty paths to not be part of an animation (#12)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -25,6 +25,8 @@\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.model.LottieComposition;\n \n+import org.json.JSONObject;\n+\n import java.util.Collections;\n import java.util.List;\n \n@@ -202,6 +204,18 @@ public void setAnimation(final String animationName) {\n         LottieComposition.fromFile(getContext(), animationName, loadedListener);\n     }\n \n+    /**\n+     * Sets the animation from a JSONObject.\n+     * This will load and deserialize the file asynchronously.\n+     */\n+    public void setAnimation(final JSONObject json) {\n+        isAnimationLoading = true;\n+        setProgressWhenCompositionSet = false;\n+        playAnimationWhenCompositionSet = false;\n+\n+        LottieComposition.fromJson(getContext(), json, loadedListener);\n+    }\n+\n     public void setComposition(@NonNull LottieComposition composition) {\n         if (getWindowToken() == null && !isScreenshotTest) {\n             return;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -37,7 +37,7 @@ public static void fromFile(Context context, String fileName, OnCompositionLoade\n         } catch (IOException e) {\n             throw new IllegalStateException(\"Unable to find file \" + fileName, e);\n         }\n-        new CompositionLoader(loadedListener).execute(file);\n+        new FileCompositionLoader(loadedListener).execute(file);\n     }\n \n     public static LottieComposition fromFileSync(Context context, String fileName) {\n@@ -50,6 +50,10 @@ public static LottieComposition fromFileSync(Context context, String fileName) {\n         return fromInputStream(file);\n     }\n \n+    public static void fromJson(Context context, JSONObject json, OnCompositionLoadedListener loadedListener) {\n+        new JsonCompositionLoader(loadedListener).execute(json);\n+    }\n+\n     private static LottieComposition fromInputStream(InputStream file) {\n         try {\n             int size = file.available();\n@@ -171,21 +175,16 @@ public boolean hasMattes() {\n         return hasMattes;\n     }\n \n-    private static final class CompositionLoader extends AsyncTask<InputStream, Void, LottieComposition> {\n+    private static final class FileCompositionLoader extends AsyncTask<InputStream, Void, LottieComposition> {\n \n         private final OnCompositionLoadedListener loadedListener;\n \n-        CompositionLoader(OnCompositionLoadedListener loadedListener) {\n+        FileCompositionLoader(OnCompositionLoadedListener loadedListener) {\n             this.loadedListener = loadedListener;\n         }\n \n         @Override\n         protected LottieComposition doInBackground(InputStream... params) {\n-            try {\n-                Thread.sleep(3000);\n-            } catch (InterruptedException e) {\n-                e.printStackTrace();\n-            }\n             return fromInputStream(params[0]);\n         }\n \n@@ -194,4 +193,23 @@ protected void onPostExecute(LottieComposition composition) {\n             loadedListener.onCompositionLoaded(composition);\n         }\n     }\n+\n+    private static final class JsonCompositionLoader extends AsyncTask<JSONObject, Void, LottieComposition> {\n+\n+        private final OnCompositionLoadedListener loadedListener;\n+\n+        JsonCompositionLoader(OnCompositionLoadedListener loadedListener) {\n+            this.loadedListener = loadedListener;\n+        }\n+\n+        @Override\n+        protected LottieComposition doInBackground(JSONObject... params) {\n+            return fromJsonSync(params[0]);\n+        }\n+\n+        @Override\n+        protected void onPostExecute(LottieComposition composition) {\n+            loadedListener.onCompositionLoaded(composition);\n+        }\n+    }\n }",
    "output": "Added JSONObject back to the public API for network requests"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -25,12 +25,8 @@\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.model.LottieComposition;\n \n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -44,16 +40,6 @@\n  */\n public class LottieAnimationView extends ImageView {\n \n-    /**\n-     * Caching strategy for compositions that will be reused frequently.\n-     * Weak or Strong indicates the GC reference strength of the composition in the cache.\n-     */\n-    public enum CacheStrategy {\n-        None,\n-        Weak,\n-        Strong\n-    }\n-\n \n     /**\n      * Returns a {@link LottieAnimationView} that will allow it to be used without being attached to a window.\n@@ -66,8 +52,12 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n         return view;\n     }\n \n-    @Nullable private static Map<String, LottieComposition> strongRefCache;\n-    @Nullable private static Map<String, WeakReference<LottieComposition>> weakRefCache;\n+    private final LottieComposition.OnCompositionLoadedListener loadedListener = new LottieComposition.OnCompositionLoadedListener() {\n+        @Override\n+        public void onCompositionLoaded(LottieComposition composition) {\n+            setComposition(composition);\n+        }\n+    };\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n     private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n@@ -199,50 +189,17 @@ public void recycleBitmaps() {\n         }\n     }\n \n-    public void setAnimation(String animationName) {\n-        setAnimation(animationName, CacheStrategy.None);\n-    }\n-\n     /**\n      * Sets the animation from a file in the assets directory.\n      * This will load and deserialize the file asynchronously.\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n-    public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n-        this.animationName = animationName;\n-        if (weakRefCache != null && weakRefCache.containsKey(animationName)) {\n-            WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n-            if (compRef.get() != null) {\n-                setComposition(compRef.get());\n-                return;\n-            }\n-        } else if (strongRefCache != null && strongRefCache.containsKey(animationName)) {\n-            setComposition(strongRefCache.get(animationName));\n-            return;\n-        }\n-\n+    public void setAnimation(final String animationName) {\n         isAnimationLoading = true;\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n \n-        LottieComposition.fromFile(getContext(), animationName, new LottieComposition.OnCompositionLoadedListener() {\n-            @Override\n-            public void onCompositionLoaded(LottieComposition composition) {\n-                if (cacheStrategy == CacheStrategy.Strong) {\n-                    if (strongRefCache == null) {\n-                        strongRefCache = new HashMap<>();\n-                    }\n-                    strongRefCache.put(animationName, composition);\n-                } else if (cacheStrategy == CacheStrategy.Weak) {\n-                    if (weakRefCache == null) {\n-                        weakRefCache = new HashMap<>();\n-                    }\n-                    weakRefCache.put(animationName, new WeakReference<>(composition));\n-                }\n-\n-                setComposition(composition);\n-            }\n-        });\n+        this.animationName = animationName;\n+        LottieComposition.fromFile(getContext(), animationName, loadedListener);\n     }\n \n     public void setComposition(@NonNull LottieComposition composition) {\n@@ -276,7 +233,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n \n     private void buildSubviewsForComposition() {\n         //noinspection ConstantConditions\n-        List<Layer> reversedLayers = new ArrayList<>(composition.getLayers());\n+        List<Layer> reversedLayers = composition.getLayers();\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();",
    "output": "Reverted cache strategy. Compositions aren't reusable yet."
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -26,6 +26,7 @@\n import com.airbnb.lottie.model.LottieComposition;\n \n import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -275,7 +276,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n \n     private void buildSubviewsForComposition() {\n         //noinspection ConstantConditions\n-        List<Layer> reversedLayers = composition.getLayers();\n+        List<Layer> reversedLayers = new ArrayList<>(composition.getLayers());\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n@@ -12,6 +12,7 @@\n import com.airbnb.lottie.model.ShapeTransform;\n import com.airbnb.lottie.model.ShapeTrimPath;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n@@ -40,7 +41,7 @@ private void setupShapeGroupWithFill(ShapeFill previousFill,\n             setRotation(shapeTransform.getRotation().getObservable());\n         }\n \n-        List<Object> reversedItems = shapeGroup.getItems();\n+        List<Object> reversedItems = new ArrayList<>(shapeGroup.getItems());\n         Collections.reverse(reversedItems);\n \n         ShapeFill currentFill = previousFill;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n@@ -17,18 +17,19 @@\n import android.view.animation.Interpolator;\n \n import com.airbnb.lottie.animatable.AnimationGroup;\n-import com.airbnb.lottie.model.LottieComposition;\n+import com.airbnb.lottie.animatable.Observable;\n+import com.airbnb.lottie.animation.KeyframeAnimation;\n+import com.airbnb.lottie.animation.NumberKeyframeAnimation;\n import com.airbnb.lottie.model.Layer;\n+import com.airbnb.lottie.model.LottieComposition;\n import com.airbnb.lottie.model.ShapeFill;\n import com.airbnb.lottie.model.ShapeGroup;\n import com.airbnb.lottie.model.ShapeStroke;\n import com.airbnb.lottie.model.ShapeTransform;\n import com.airbnb.lottie.model.ShapeTrimPath;\n-import com.airbnb.lottie.animation.KeyframeAnimation;\n-import com.airbnb.lottie.animation.NumberKeyframeAnimation;\n import com.airbnb.lottie.utils.ScaleXY;\n-import com.airbnb.lottie.animatable.Observable;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n@@ -116,7 +117,7 @@ public void onChanged() {\n \n         setVisible(layerModel.hasInAnimation(), false);\n \n-        List<Object> reversedItems = layerModel.getShapes();\n+        List<Object> reversedItems = new ArrayList<>(layerModel.getShapes());\n         Collections.reverse(reversedItems);\n         ShapeTransform currentTransform = null;\n         ShapeTrimPath currentTrimPath = null;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -13,7 +13,6 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.lang.ref.WeakReference;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -174,22 +173,25 @@ public boolean hasMattes() {\n \n     private static final class CompositionLoader extends AsyncTask<InputStream, Void, LottieComposition> {\n \n-        private final WeakReference<OnCompositionLoadedListener> loadedListenerRef;\n+        private final OnCompositionLoadedListener loadedListener;\n \n         CompositionLoader(OnCompositionLoadedListener loadedListener) {\n-            loadedListenerRef = new WeakReference<>(loadedListener);\n+            this.loadedListener = loadedListener;\n         }\n \n         @Override\n         protected LottieComposition doInBackground(InputStream... params) {\n+            try {\n+                Thread.sleep(3000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n             return fromInputStream(params[0]);\n         }\n \n         @Override\n         protected void onPostExecute(LottieComposition composition) {\n-            if (loadedListenerRef.get() != null) {\n-                loadedListenerRef.get().onCompositionLoaded(composition);\n-            }\n+            loadedListener.onCompositionLoaded(composition);\n         }\n     }\n }",
    "output": "Copy lists before reversing an allow anonymous callbacks when loading compositions"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -25,8 +25,11 @@\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.model.LottieComposition;\n \n+import java.lang.ref.WeakReference;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -40,6 +43,16 @@\n  */\n public class LottieAnimationView extends ImageView {\n \n+    /**\n+     * Caching strategy for compositions that will be reused frequently.\n+     * Weak or Strong indicates the GC reference strength of the composition in the cache.\n+     */\n+    public enum CacheStrategy {\n+        None,\n+        Weak,\n+        Strong\n+    }\n+\n \n     /**\n      * Returns a {@link LottieAnimationView} that will allow it to be used without being attached to a window.\n@@ -52,12 +65,8 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n         return view;\n     }\n \n-    private final LottieComposition.OnCompositionLoadedListener loadedListener = new LottieComposition.OnCompositionLoadedListener() {\n-        @Override\n-        public void onCompositionLoaded(LottieComposition composition) {\n-            setComposition(composition);\n-        }\n-    };\n+    @Nullable private static Map<String, LottieComposition> strongRefCache;\n+    @Nullable private static Map<String, WeakReference<LottieComposition>> weakRefCache;\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n     private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n@@ -189,17 +198,50 @@ public void recycleBitmaps() {\n         }\n     }\n \n+    public void setAnimation(String animationName) {\n+        setAnimation(animationName, CacheStrategy.None);\n+    }\n+\n     /**\n      * Sets the animation from a file in the assets directory.\n      * This will load and deserialize the file asynchronously.\n      */\n-    public void setAnimation(final String animationName) {\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n+        this.animationName = animationName;\n+        if (weakRefCache != null && weakRefCache.containsKey(animationName)) {\n+            WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n+            if (compRef.get() != null) {\n+                setComposition(compRef.get());\n+                return;\n+            }\n+        } else if (strongRefCache != null && strongRefCache.containsKey(animationName)) {\n+            setComposition(strongRefCache.get(animationName));\n+            return;\n+        }\n+\n         isAnimationLoading = true;\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n \n-        this.animationName = animationName;\n-        LottieComposition.fromFile(getContext(), animationName, loadedListener);\n+        LottieComposition.fromFile(getContext(), animationName, new LottieComposition.OnCompositionLoadedListener() {\n+            @Override\n+            public void onCompositionLoaded(LottieComposition composition) {\n+                if (cacheStrategy == CacheStrategy.Strong) {\n+                    if (strongRefCache == null) {\n+                        strongRefCache = new HashMap<>();\n+                    }\n+                    strongRefCache.put(animationName, composition);\n+                } else if (cacheStrategy == CacheStrategy.Weak) {\n+                    if (weakRefCache == null) {\n+                        weakRefCache = new HashMap<>();\n+                    }\n+                    weakRefCache.put(animationName, new WeakReference<>(composition));\n+                }\n+\n+                setComposition(composition);\n+            }\n+        });\n     }\n \n     public void setComposition(@NonNull LottieComposition composition) {",
    "output": "Added a caching strategy to LottieAnimationView#setAnimation"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -12,8 +12,8 @@\n import android.support.annotation.NonNull;\n \n import com.airbnb.lottie.animatable.AnimationGroup;\n-import com.airbnb.lottie.utils.ScaleXY;\n import com.airbnb.lottie.animatable.Observable;\n+import com.airbnb.lottie.utils.ScaleXY;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -32,11 +32,12 @@ public void onChanged() {\n     private Observable<PointF> anchorPoint;\n     /** This should mimic CALayer#transform */\n     private Observable<ScaleXY> transform;\n-    private Observable<Integer> alpha;\n+    private Observable<Integer> alpha = null;\n     private Observable<Float> rotation;\n     final long compDuration;\n \n     private final Paint solidBackgroundPaint = new Paint();\n+    @ColorInt private int backgroundColor;\n     private final List<AnimationGroup> animations = new ArrayList<>();\n     @FloatRange(from = 0f, to = 1f) private float progress;\n \n@@ -49,8 +50,8 @@ public void onChanged() {\n     }\n \n     void setBackgroundColor(@ColorInt int color) {\n+        this.backgroundColor = color;\n         solidBackgroundPaint.setColor(color);\n-        solidBackgroundPaint.setAlpha(Color.alpha(color));\n         invalidateSelf();\n     }\n \n@@ -85,7 +86,13 @@ public void draw(@NonNull Canvas canvas) {\n             }\n         }\n \n-        if (solidBackgroundPaint.getAlpha() != 0) {\n+        int backgroundAlpha = Color.alpha(backgroundColor);\n+        if (backgroundAlpha != 0) {\n+            int alpha = backgroundAlpha;\n+            if (this.alpha != null) {\n+                alpha = alpha * this.alpha.getValue() / 255;\n+            }\n+            solidBackgroundPaint.setAlpha(alpha);\n             canvas.drawRect(getBounds(), solidBackgroundPaint);\n         }\n         for (int i = 0; i < layers.size(); i++) {\n@@ -100,7 +107,15 @@ public void setAlpha(int alpha) {\n     }\n \n     void setAlpha(Observable<Integer> alpha) {\n+        if (this.alpha != null) {\n+            this.alpha.removeChangeListener(changedListener);\n+        }\n         this.alpha = alpha;\n+        alpha.addChangeListener(changedListener);\n+        for (AnimatableLayer layer : layers) {\n+            layer.setAlpha(alpha);\n+        }\n+\n         invalidateSelf();\n     }\n \n@@ -154,6 +169,9 @@ public int getOpacity() {\n     void addLayer(AnimatableLayer layer) {\n         layers.add(layer);\n         layer.setProgress(progress);\n+        if (this.alpha != null) {\n+            layer.setAlpha(this.alpha);\n+        }\n         invalidateSelf();\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n@@ -104,6 +104,7 @@ private void setupForModel(Drawable.Callback callback) {\n         childContainerLayer.setAnchorPoint(layerModel.getAnchor().getObservable());\n         childContainerLayer.setTransform(layerModel.getScale().getObservable());\n         childContainerLayer.setRotation(layerModel.getRotation().getObservable());\n+        setAlpha(layerModel.getOpacity().getObservable());\n         layerModel.getOpacity().getObservable().addChangeListener(new Observable.OnChangedListener() {\n             @Override\n             public void onChanged() {",
    "output": "Fixed alpha on background colors"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java\n@@ -77,7 +77,7 @@ public void onValueChanged(PointF progress) {\n                 }\n             });\n             animatableValues.add(position);\n-            PointF initialPosition = layer.getPosition().getInitialValue();\n+            PointF initialPosition = layer.getPosition().getInitialPoint();\n             view.setTranslationX(initialPosition.x);\n             view.setTranslationY(initialPosition.y);\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java\n@@ -190,6 +190,10 @@ public boolean hasAnimation() {\n         return animationPath.hasSegments();\n     }\n \n+    public PointF getInitialPoint() {\n+        return initialPoint;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"AnimatablePathValue{\" + \"initialPoint=\" + initialPoint + '}';\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n@@ -9,7 +9,6 @@\n import com.airbnb.lottie.animatable.AnimatableFloatValue;\n import com.airbnb.lottie.animatable.AnimatableIntegerValue;\n import com.airbnb.lottie.animatable.AnimatablePathValue;\n-import com.airbnb.lottie.animatable.AnimatablePointValue;\n import com.airbnb.lottie.animatable.AnimatableScaleValue;\n import com.airbnb.lottie.animatable.AnimationGroup;\n \n@@ -119,7 +118,7 @@ static Layer fromJson(JSONObject json, LottieComposition composition) {\n             } catch (JSONException e) {\n             }\n             if (position != null) {\n-                layer.position = new AnimatablePointValue(position, layer.frameRate, composition.getDuration());\n+                layer.position = new AnimatablePathValue(position, layer.frameRate, composition.getDuration());\n                 if (L.DBG) Log.d(TAG, \"\\tPosition=\" + layer.getPosition().toString());\n             }\n \n@@ -238,7 +237,7 @@ static Layer fromJson(JSONObject json, LottieComposition composition) {\n \n     private AnimatableIntegerValue opacity;\n     private AnimatableFloatValue rotation;\n-    private AnimatablePointValue position;\n+    private AnimatablePathValue position;\n \n     private AnimatablePathValue anchor;\n     private AnimatableScaleValue scale;\n@@ -306,7 +305,7 @@ public long getParentId() {\n         return parentId;\n     }\n \n-    public AnimatablePointValue getPosition() {\n+    public AnimatablePathValue getPosition() {\n         return position;\n     }\n ",
    "output": "Added new json and fixed animatable path values (#10)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -24,7 +24,7 @@\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.layers.LayerView;\n import com.airbnb.lottie.layers.RootAnimatableLayer;\n-import com.airbnb.lottie.model.Composition;\n+import com.airbnb.lottie.model.LottieComposition;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -69,7 +69,7 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n     @Nullable private AsyncTask jsonToCompositionTask;\n \n     /** Can be null because it is created async */\n-    @Nullable private Composition composition;\n+    @Nullable private LottieComposition composition;\n     private boolean hasInvalidatedThisFrame;\n     @Nullable private Bitmap mainBitmap = null;\n     @Nullable private Bitmap maskBitmap = null;\n@@ -243,15 +243,15 @@ public void setAnimation(JSONObject json) {\n         }\n \n         // TODO: cancel these if the View gets detached.\n-        jsonToCompositionTask = new AsyncTask<JSONObject, Void, Composition>() {\n+        jsonToCompositionTask = new AsyncTask<JSONObject, Void, LottieComposition>() {\n \n             @Override\n-            protected Composition doInBackground(JSONObject... params) {\n-                return Composition.fromJson(params[0]);\n+            protected LottieComposition doInBackground(JSONObject... params) {\n+                return LottieComposition.fromJson(params[0]);\n             }\n \n             @Override\n-            protected void onPostExecute(Composition model) {\n+            protected void onPostExecute(LottieComposition model) {\n                 setComposition(model);\n             }\n         }.execute(json);\n@@ -293,7 +293,7 @@ private JSONObject setAnimationSync(InputStream file) {\n     }\n \n     private void setJsonSync(JSONObject json) {\n-        Composition composition = Composition.fromJson(json);\n+        LottieComposition composition = LottieComposition.fromJson(json);\n         setComposition(composition);\n     }\n \n@@ -303,7 +303,7 @@ private void onAnimationLoadingFail() {\n         playAnimationWhenCompositionSet = false;\n     }\n \n-    private void setComposition(@NonNull Composition composition) {\n+    private void setComposition(@NonNull LottieComposition composition) {\n         if (getWindowToken() == null && !isScreenshotTest) {\n             return;\n         }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n@@ -17,7 +17,7 @@\n import android.view.animation.Interpolator;\n \n import com.airbnb.lottie.animatable.AnimationGroup;\n-import com.airbnb.lottie.model.Composition;\n+import com.airbnb.lottie.model.LottieComposition;\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.model.ShapeFill;\n import com.airbnb.lottie.model.ShapeGroup;\n@@ -50,13 +50,13 @@ public class LayerView extends AnimatableLayer {\n     private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final Layer layerModel;\n-    private final Composition composition;\n+    private final LottieComposition composition;\n \n     private long parentId = -1;\n     private AnimatableLayer childContainerLayer;\n \n \n-    public LayerView(Layer layerModel, Composition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {\n+    public LayerView(Layer layerModel, LottieComposition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {\n         super(composition.getDuration(), callback);\n         this.layerModel = layerModel;\n         this.composition = composition;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/MaskLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/MaskLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/MaskLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/MaskLayer.java\n@@ -2,7 +2,7 @@\n \n import android.graphics.drawable.Drawable;\n \n-import com.airbnb.lottie.model.Composition;\n+import com.airbnb.lottie.model.LottieComposition;\n import com.airbnb.lottie.model.Mask;\n \n import java.util.List;\n@@ -11,7 +11,7 @@ class MaskLayer extends AnimatableLayer {\n \n     private final List<Mask> masks;\n \n-    MaskLayer(List<Mask> masks, Composition composition, Drawable.Callback callback) {\n+    MaskLayer(List<Mask> masks, LottieComposition composition, Drawable.Callback callback) {\n         super(composition.getDuration(), callback);\n         this.masks = masks;\n     }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java\n@@ -4,15 +4,15 @@\n import android.util.Log;\n \n import com.airbnb.lottie.L;\n-import com.airbnb.lottie.model.Composition;\n+import com.airbnb.lottie.model.LottieComposition;\n import com.airbnb.lottie.model.Layer;\n \n class ParentLayer extends AnimatableLayer {\n     private static final String TAG = ParentLayer.class.getSimpleName();\n \n     private final Layer parentModel;\n \n-    ParentLayer(Layer parent, Composition composition, Drawable.Callback callback) {\n+    ParentLayer(Layer parent, LottieComposition composition, Drawable.Callback callback) {\n         super(composition.getDuration(), callback);\n         setBounds(parent.getCompBounds());\n         this.parentModel = parent;\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/Layer.java\n@@ -42,7 +42,7 @@ public enum MatteType {\n     }\n \n     @SuppressWarnings(\"UnusedAssignment\")\n-    static Layer fromJson(JSONObject json, Composition composition) {\n+    static Layer fromJson(JSONObject json, LottieComposition composition) {\n         Layer layer = new Layer();\n         try {\n             if (L.DBG) Log.d(TAG, \"Parsing new layer.\");\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -12,7 +12,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class Composition {\n+public class LottieComposition {\n     /**\n      * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel leaving ~2.3M pixels available.\n      * Reduce the number a little bit for safety.\n@@ -21,8 +21,8 @@ public class Composition {\n      */\n     private static final int MAX_PIXELS = 1000;\n \n-    public static Composition fromJson(JSONObject json) {\n-        Composition composition = new Composition();\n+    public static LottieComposition fromJson(JSONObject json) {\n+        LottieComposition composition = new LottieComposition();\n \n         int width = -1;\n         int height = -1;",
    "output": "Rename Composition to LottieComposition since it will be exposed as an API"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -146,7 +146,7 @@ protected boolean verifyDrawable(@NonNull Drawable drawable) {\n \n     @Override\n     public void invalidateDrawable(@NonNull Drawable dr) {\n-        if (!hasInvalidatedThisFrame) {\n+        if (!hasInvalidatedThisFrame && rootAnimatableLayer != null) {\n             super.invalidateDrawable(rootAnimatableLayer);\n             hasInvalidatedThisFrame = true;\n         }",
    "output": "Fix a NPE and bump version"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -59,9 +59,11 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n     private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n+    @FloatRange(from=0f, to=1f) private float progress;\n     private String animationName;\n     private boolean isScreenshotTest;\n     private boolean isAnimationLoading;\n+    private boolean setProgressWhenCompositionSet;\n     private boolean playAnimationWhenCompositionSet;\n     @Nullable private AsyncTask fileToJsonTask;\n     @Nullable private AsyncTask jsonToCompositionTask;\n@@ -193,6 +195,8 @@ public void recycleBitmaps() {\n      */\n     public void setAnimation(final String animationName) {\n         isAnimationLoading = true;\n+        setProgressWhenCompositionSet = false;\n+        playAnimationWhenCompositionSet = false;\n \n         this.animationName = animationName;\n \n@@ -295,6 +299,7 @@ private void setJsonSync(JSONObject json) {\n \n     private void onAnimationLoadingFail() {\n         isAnimationLoading = false;\n+        setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n     }\n \n@@ -303,8 +308,16 @@ private void setComposition(@NonNull Composition composition) {\n             return;\n         }\n \n+        isAnimationLoading = false;\n+\n         clearComposition();\n-        setProgress(0f);\n+\n+        if (setProgressWhenCompositionSet) {\n+            setProgressWhenCompositionSet = false;\n+            setProgress(progress);\n+        } else {\n+            setProgress(0f);\n+        }\n \n         this.composition = composition;\n         rootAnimatableLayer.setCompDuration(composition.getDuration());\n@@ -313,7 +326,6 @@ private void setComposition(@NonNull Composition composition) {\n         requestLayout();\n         setImageDrawable(rootAnimatableLayer);\n \n-        isAnimationLoading = false;\n         if (playAnimationWhenCompositionSet) {\n             playAnimationWhenCompositionSet = false;\n             playAnimation();\n@@ -405,11 +417,17 @@ public void playAnimation() {\n     }\n \n     public void cancelAnimation() {\n+        setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n         rootAnimatableLayer.cancelAnimation();\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n+        this.progress = progress;\n+        if (isAnimationLoading) {\n+            setProgressWhenCompositionSet = true;\n+            return;\n+        }\n         rootAnimatableLayer.setProgress(progress);\n     }\n ",
    "output": "Merge pull request #8 from airbnb/nsilverman-delay-setprogress\n\nDelay setProgress(...) if animation is loading"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java\n@@ -36,8 +36,8 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n-                \"BusinessTravel01_Still.json\",\n-                \"Diamond 2.json\",\n+                \"BusinessTravel01.json\",\n+                \"Diamond.json\",\n                 \"LightBulb.json\",\n                 \"Alarm.json\",\n         };",
    "output": "Sample: Fix grid files"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -59,9 +59,11 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n     private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n+    @FloatRange(from=0f, to=1f) private float progress;\n     private String animationName;\n     private boolean isScreenshotTest;\n     private boolean isAnimationLoading;\n+    private boolean setProgressWhenCompositionSet;\n     private boolean playAnimationWhenCompositionSet;\n     @Nullable private AsyncTask fileToJsonTask;\n     @Nullable private AsyncTask jsonToCompositionTask;\n@@ -193,6 +195,8 @@ public void recycleBitmaps() {\n      */\n     public void setAnimation(final String animationName) {\n         isAnimationLoading = true;\n+        setProgressWhenCompositionSet = false;\n+        playAnimationWhenCompositionSet = false;\n \n         this.animationName = animationName;\n \n@@ -295,6 +299,7 @@ private void setJsonSync(JSONObject json) {\n \n     private void onAnimationLoadingFail() {\n         isAnimationLoading = false;\n+        setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n     }\n \n@@ -303,8 +308,16 @@ private void setComposition(@NonNull Composition composition) {\n             return;\n         }\n \n+        isAnimationLoading = false;\n+\n         clearComposition();\n-        setProgress(0f);\n+\n+        if (setProgressWhenCompositionSet) {\n+            setProgressWhenCompositionSet = false;\n+            setProgress(progress);\n+        } else {\n+            setProgress(0f);\n+        }\n \n         this.composition = composition;\n         rootAnimatableLayer.setCompDuration(composition.getDuration());\n@@ -313,7 +326,6 @@ private void setComposition(@NonNull Composition composition) {\n         requestLayout();\n         setImageDrawable(rootAnimatableLayer);\n \n-        isAnimationLoading = false;\n         if (playAnimationWhenCompositionSet) {\n             playAnimationWhenCompositionSet = false;\n             playAnimation();\n@@ -405,11 +417,17 @@ public void playAnimation() {\n     }\n \n     public void cancelAnimation() {\n+        setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n         rootAnimatableLayer.cancelAnimation();\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n+        this.progress = progress;\n+        if (isAnimationLoading) {\n+            setProgressWhenCompositionSet = true;\n+            return;\n+        }\n         rootAnimatableLayer.setProgress(progress);\n     }\n ",
    "output": "Delay setProgress(...) if animation is loading"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -199,11 +199,27 @@ protected JSONObject doInBackground(InputStream... params) {\n \n             @Override\n             protected void onPostExecute(JSONObject jsonObject) {\n-                setJson(jsonObject);\n+                setAnimation(jsonObject);\n             }\n         }.execute(file);\n     }\n \n+    public void setAnimation(JSONObject json) {\n+        // TODO: cancel these if the iew gets detached.\n+        new AsyncTask<JSONObject, Void, Composition>() {\n+\n+            @Override\n+            protected Composition doInBackground(JSONObject... params) {\n+                return Composition.fromJson(params[0]);\n+            }\n+\n+            @Override\n+            protected void onPostExecute(Composition model) {\n+                setComposition(model);\n+            }\n+        }.execute(json);\n+    }\n+\n     /**\n      * Like {@link #setAnimation(String)} except it loads and deserializes the file\n      * synchronously. This should only be used for tests.\n@@ -236,22 +252,6 @@ private JSONObject setAnimationSync(InputStream file) {\n         }\n     }\n \n-    private void setJson(JSONObject json) {\n-        // TODO: cancel these if the iew gets detached.\n-        new AsyncTask<JSONObject, Void, Composition>() {\n-\n-            @Override\n-            protected Composition doInBackground(JSONObject... params) {\n-                return Composition.fromJson(params[0]);\n-            }\n-\n-            @Override\n-            protected void onPostExecute(Composition model) {\n-                setComposition(model);\n-            }\n-        }.execute(json);\n-    }\n-\n     private void setJsonSync(JSONObject json) {\n         Composition composition = Composition.fromJson(json);\n         setComposition(composition);",
    "output": "Made setAnimation(JSONObject) public"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableValue.java b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableValue.java\n@@ -2,7 +2,6 @@\n \n import com.airbnb.lottie.animation.KeyframeAnimation;\n \n-@SuppressWarnings(\"WeakerAccess\")\n public interface AnimatableValue<T> {\n \n     KeyframeAnimation animationForKeyPath();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -20,7 +20,7 @@\n \n public class AnimatableLayer extends Drawable {\n \n-    protected final List<AnimatableLayer> layers = new ArrayList<>();\n+    final List<AnimatableLayer> layers = new ArrayList<>();\n     private final Observable.OnChangedListener changedListener = new Observable.OnChangedListener() {\n         @Override\n         public void onChanged() {\n@@ -151,7 +151,7 @@ public int getOpacity() {\n         return PixelFormat.TRANSLUCENT;\n     }\n \n-    public void addLayer(AnimatableLayer layer) {\n+    void addLayer(AnimatableLayer layer) {\n         layers.add(layer);\n         layer.setProgress(progress);\n         invalidateSelf();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java b/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java\n@@ -25,7 +25,7 @@ public AnimatableFloatValue getEnd() {\n         return end;\n     }\n \n-    public AnimatableFloatValue getOffset() {\n+    private AnimatableFloatValue getOffset() {\n         return offset;\n     }\n ",
    "output": "Minor scope cleanup"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java\n@@ -28,15 +28,12 @@ public void onChanged() {\n         }\n     };\n \n-    /** This should mimic CALayer#position */\n     private Observable<PointF> position;\n-    /** This should mimic CALayer#anchorPoint */\n     private Observable<PointF> anchorPoint;\n     /** This should mimic CALayer#transform */\n     private Observable<LottieTransform3D> transform;\n-    /** This should mimic CALayer#sublayerTransform */\n     private Observable<Integer> alpha;\n-    private Observable<Float> sublayerTransform;\n+    private Observable<Float> rotation;\n     final long compDuration;\n \n     private final Paint solidBackgroundPaint = new Paint();\n@@ -75,8 +72,8 @@ public void draw(@NonNull Canvas canvas) {\n             }\n         }\n \n-        if (sublayerTransform != null && sublayerTransform.getValue() != null) {\n-            float rotation = sublayerTransform.getValue();\n+        if (rotation != null && rotation.getValue() != null) {\n+            float rotation = this.rotation.getValue();\n             if (rotation != 0f) {\n                 canvas.rotate(rotation);\n             }\n@@ -141,12 +138,12 @@ void setTransform(Observable<LottieTransform3D> transform) {\n         transform.addChangeListener(changedListener);\n     }\n \n-    void setSublayerTransform(Observable<Float> sublayerTransform) {\n-        if (this.sublayerTransform != null) {\n-            this.sublayerTransform.removeChangeListener(changedListener);\n+    void setRotation(Observable<Float> rotation) {\n+        if (this.rotation != null) {\n+            this.rotation.removeChangeListener(changedListener);\n         }\n-        this.sublayerTransform = sublayerTransform;\n-        sublayerTransform.addChangeListener(changedListener);\n+        this.rotation = rotation;\n+        rotation.addChangeListener(changedListener);\n     }\n \n     @Override\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java\n@@ -37,7 +37,7 @@ class EllipseShapeLayer extends AnimatableLayer {\n         setAlpha(transform.getOpacity().getObservable());\n         setPosition(transform.getPosition().getObservable());\n         setTransform(transform.getScale().getObservable());\n-        setSublayerTransform(transform.getRotation().getObservable());\n+        setRotation(transform.getRotation().getObservable());\n \n         if (fill != null) {\n             fillLayer = new CircleShapeLayer(getCallback());\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java\n@@ -37,7 +37,7 @@ private void setupShapeGroupWithFill(ShapeFill previousFill,\n             setPosition(shapeTransform.getPosition().getObservable());\n             setAlpha(shapeTransform.getOpacity().getObservable());\n             setTransform(shapeTransform.getScale().getObservable());\n-            setSublayerTransform(shapeTransform.getRotation().getObservable());\n+            setRotation(shapeTransform.getRotation().getObservable());\n         }\n \n         List<Object> reversedItems = shapeGroup.getItems();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java\n@@ -103,7 +103,7 @@ private void setupForModel(Drawable.Callback callback) {\n         childContainerLayer.setPosition(layerModel.getPosition().getObservable());\n         childContainerLayer.setAnchorPoint(layerModel.getAnchor().getObservable());\n         childContainerLayer.setTransform(layerModel.getScale().getObservable());\n-        childContainerLayer.setSublayerTransform(layerModel.getRotation().getObservable());\n+        childContainerLayer.setRotation(layerModel.getRotation().getObservable());\n         layerModel.getOpacity().getObservable().addChangeListener(new Observable.OnChangedListener() {\n             @Override\n             public void onChanged() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ParentLayer.java\n@@ -24,7 +24,7 @@ private void setupLayerFromModel() {\n         setPosition(parentModel.getPosition().getObservable());\n         setAnchorPoint(parentModel.getAnchor().getObservable());\n         setTransform(parentModel.getScale().getObservable());\n-        setSublayerTransform(parentModel.getRotation().getObservable());\n+        setRotation(parentModel.getRotation().getObservable());\n         buildAnimations();\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RectShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RectShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RectShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RectShapeLayer.java\n@@ -41,7 +41,7 @@ class RectShapeLayer extends AnimatableLayer {\n         setAlpha(transform.getOpacity().getObservable());\n         setPosition(transform.getPosition().getObservable());\n         setTransform(transform.getScale().getObservable());\n-        setSublayerTransform(transform.getRotation().getObservable());\n+        setRotation(transform.getRotation().getObservable());\n \n         if (fill != null) {\n             fillLayer = new RoundRectLayer(duration, getCallback());\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayerView.java\n@@ -35,7 +35,7 @@ class ShapeLayerView extends AnimatableLayer {\n         setBounds(transformModel.getCompBounds());\n         setAnchorPoint(transformModel.getAnchor().getObservable());\n         setPosition(transformModel.getPosition().getObservable());\n-        setSublayerTransform(transformModel.getRotation().getObservable());\n+        setRotation(transformModel.getRotation().getObservable());\n \n         Observable<LottieTransform3D> scale = transformModel.getScale().getObservable();\n         setTransform(transformModel.getScale().getObservable());",
    "output": "s/sublayerTransform/rotation/"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n@@ -20,7 +20,7 @@\n \n public class LottieAnimatableLayer extends Drawable {\n \n-    private final List<LottieAnimatableLayer> layers = new ArrayList<>();\n+    protected final List<LottieAnimatableLayer> layers = new ArrayList<>();\n     private final Observable.OnChangedListener changedListener = new Observable.OnChangedListener() {\n         @Override\n         public void onChanged() {\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java\n@@ -11,6 +11,8 @@ public class RootLottieAnimatableLayer extends LottieAnimatableLayer {\n \n     private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n \n+    private boolean playAnimationWhenLayerAdded;\n+\n     public RootLottieAnimatableLayer(Drawable.Callback callback) {\n         super(0, callback);\n         animator.setRepeatCount(0);\n@@ -45,15 +47,29 @@ public boolean isAnimating() {\n         return animator.isRunning();\n     }\n \n-    public void play() {\n+    public void playAnimation() {\n+        if (layers.isEmpty()) {\n+            playAnimationWhenLayerAdded = true;\n+            return;\n+        }\n         animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n         animator.start();\n     }\n \n     public void cancelAnimation() {\n+        playAnimationWhenLayerAdded = false;\n         animator.cancel();\n     }\n \n+    @Override\n+    public void addLayer(LottieAnimatableLayer layer) {\n+        super.addLayer(layer);\n+        if (playAnimationWhenLayerAdded) {\n+            playAnimationWhenLayerAdded = false;\n+            playAnimation();\n+        }\n+    }\n+\n     public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n         animator.addUpdateListener(updateListener);\n     }",
    "output": "Delay playing an animation until a layer is set"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -16,6 +16,7 @@\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.support.annotation.VisibleForTesting;\n+import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n import android.widget.ImageView;\n@@ -93,7 +94,7 @@ private void init(@Nullable AttributeSet attrs) {\n             setAnimation(fileName);\n         }\n         if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {\n-            rootAnimatableLayer.play();\n+            rootAnimatableLayer.playAnimation();\n         }\n         rootAnimatableLayer.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n         ta.recycle();\n@@ -121,7 +122,9 @@ protected void onRestoreInstanceState(Parcelable state) {\n         SavedState ss = (SavedState) state;\n         super.onRestoreInstanceState(ss.getSuperState());\n         this.animationName = ss.animationName;\n-        setAnimation(animationName);\n+        if (!TextUtils.isEmpty(animationName)) {\n+            setAnimation(animationName);\n+        }\n         setProgress(ss.progress);\n         loop(ss.isLooping);\n         if (ss.isAnimating) {\n@@ -336,7 +339,7 @@ public boolean isAnimating() {\n     }\n \n     public void playAnimation() {\n-        rootAnimatableLayer.play();\n+        rootAnimatableLayer.playAnimation();\n     }\n \n     public void cancelAnimation() {",
    "output": "Don't restore animation name if it is empty"
  },
  {
    "input": "diff --git a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n--- a/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n+++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java\n@@ -52,8 +52,6 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n         updatePlayButtonText();\n         loopButton.setChecked(true);\n-        String fileName = getArguments().getString(ARG_FILE_NAME);\n-        animationView.setAnimation(fileName);\n         animationView.addAnimatorListener(new Animator.AnimatorListener() {\n             @Override\n             public void onAnimationStart(Animator animation) {\n@@ -94,6 +92,11 @@ public void onStartTrackingTouch(SeekBar seekBar) {}\n             public void onStopTrackingTouch(SeekBar seekBar) {}\n         });\n \n+        if (savedInstanceState == null) {\n+            String fileName = getArguments().getString(ARG_FILE_NAME);\n+            animationView.setAnimation(fileName);\n+        }\n+\n         return view;\n     }\n \n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -2,13 +2,16 @@\n \n import android.animation.Animator;\n import android.animation.ValueAnimator;\n+import android.annotation.SuppressLint;\n import android.content.Context;\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n@@ -55,6 +58,7 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n \n     private final LongSparseArray<LottieLayerView> layerMap = new LongSparseArray<>();\n     private final RootLottieAnimatableLayer rootAnimatableLayer = new RootLottieAnimatableLayer(this);\n+    private String animationName;\n     private boolean isScreenshotTest;\n \n     /** Can be null because it is created async */\n@@ -96,6 +100,36 @@ private void init(@Nullable AttributeSet attrs) {\n         setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }\n \n+    @Override\n+    protected Parcelable onSaveInstanceState() {\n+        Parcelable superState = super.onSaveInstanceState();\n+        SavedState ss = new SavedState(superState);\n+        ss.animationName = animationName;\n+        ss.progress = rootAnimatableLayer.getProgress();\n+        ss.isAnimating = rootAnimatableLayer.isAnimating();\n+        ss.isLooping = rootAnimatableLayer.isLooping();\n+        return ss;\n+    }\n+\n+    @Override\n+    protected void onRestoreInstanceState(Parcelable state) {\n+        if(!(state instanceof SavedState)) {\n+            super.onRestoreInstanceState(state);\n+            return;\n+        }\n+\n+        SavedState ss = (SavedState) state;\n+        super.onRestoreInstanceState(ss.getSuperState());\n+        this.animationName = ss.animationName;\n+        setAnimation(animationName);\n+        setProgress(ss.progress);\n+        loop(ss.isLooping);\n+        if (ss.isAnimating) {\n+            playAnimation();\n+        }\n+    }\n+\n+    @SuppressLint(\"MissingSuperCall\")\n     @Override\n     protected boolean verifyDrawable(@NonNull Drawable drawable) {\n         return true;\n@@ -146,6 +180,7 @@ public void recycleBitmaps() {\n      * This will load and deserialize the file asynchronously.\n      */\n     public void setAnimation(String animationName) {\n+        this.animationName = animationName;\n         InputStream file;\n         try {\n             file = getContext().getAssets().open(animationName);\n@@ -315,4 +350,43 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n     public long getDuration() {\n         return composition != null ? composition.getDuration() : 0;\n     }\n+\n+    static class SavedState extends BaseSavedState {\n+        String animationName;\n+        float progress;\n+        boolean isAnimating;\n+        boolean isLooping;\n+\n+        SavedState(Parcelable superState) {\n+            super(superState);\n+        }\n+\n+        private SavedState(Parcel in) {\n+            super(in);\n+            animationName = in.readString();\n+            progress = in.readFloat();\n+            isAnimating = in.readInt() == 1;\n+            isLooping = in.readInt() == 1;\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel out, int flags) {\n+            super.writeToParcel(out, flags);\n+            out.writeString(animationName);\n+            out.writeFloat(progress);\n+            out.writeInt(isAnimating ? 1 : 0);\n+            out.writeInt(isLooping ? 1 : 0);\n+\n+        }\n+\n+        public static final Parcelable.Creator<SavedState> CREATOR =\n+                new Parcelable.Creator<SavedState>() {\n+                    public SavedState createFromParcel(Parcel in) {\n+                        return new SavedState(in);\n+                    }\n+                    public SavedState[] newArray(int size) {\n+                        return new SavedState[size];\n+                    }\n+                };\n+    }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n@@ -41,6 +41,7 @@ public void onChanged() {\n \n     private final Paint solidBackgroundPaint = new Paint();\n     private final List<LottieAnimationGroup> animations = new ArrayList<>();\n+    @FloatRange(from = 0f, to = 1f) private float progress;\n \n     LottieAnimatableLayer(long compDuration, Drawable.Callback callback) {\n         setCallback(callback);\n@@ -155,10 +156,12 @@ public int getOpacity() {\n \n     public void addLayer(LottieAnimatableLayer layer) {\n         layers.add(layer);\n+        layer.setProgress(progress);\n         invalidateSelf();\n     }\n \n     public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        this.progress = progress;\n         for (int i = 0; i < animations.size(); i++) {\n             animations.get(i).setProgress(progress);\n         }\n@@ -167,4 +170,8 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n             layers.get(i).setProgress(progress);\n         }\n     }\n+\n+    public float getProgress() {\n+        return progress;\n+    }\n }\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/RootLottieAnimatableLayer.java\n@@ -37,11 +37,16 @@ public void loop(boolean loop) {\n         animator.setRepeatCount(loop ? ValueAnimator.INFINITE : 0);\n     }\n \n+    public boolean isLooping() {\n+        return animator.getRepeatCount() == ValueAnimator.INFINITE;\n+    }\n+\n     public boolean isAnimating() {\n         return animator.isRunning();\n     }\n \n     public void play() {\n+        animator.setCurrentPlayTime((long) (getProgress() * animator.getDuration()));\n         animator.start();\n     }\n ",
    "output": "Add saved state"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieEllipseShapeLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieEllipseShapeLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieEllipseShapeLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieEllipseShapeLayer.java\n@@ -138,20 +138,15 @@ private void onCircleSizeChanged() {\n             float halfHeight = circleSize.getValue().y / 2f;\n             setBounds(0, 0, (int) halfWidth * 2, (int) halfHeight * 2);\n \n-            PointF circleQ1 = new PointF(0, -halfHeight);\n-            PointF circleQ2 = new PointF(halfWidth, 0);\n-            PointF circleQ3 = new PointF(0, halfHeight);\n-            PointF circleQ4 = new PointF(-halfWidth, 0);\n-\n             float cpW = halfWidth * ELLIPSE_CONTROL_POINT_PERCENTAGE;\n             float cpH = halfHeight * ELLIPSE_CONTROL_POINT_PERCENTAGE;\n \n             path.reset();\n-            path.moveTo(circleQ1.x, circleQ1.y);\n-            path.cubicTo(circleQ1.x + cpW, circleQ1.y, circleQ2.x, circleQ2.y - cpH, circleQ2.x, circleQ2.y);\n-            path.cubicTo(circleQ2.x, circleQ2.y + cpH, circleQ3.x + cpW, circleQ3.y, circleQ3.x, circleQ3.y);\n-            path.cubicTo(circleQ3.x - cpW, circleQ3.y, circleQ4.x, circleQ4.y + cpH, circleQ4.x, circleQ4.y);\n-            path.cubicTo(circleQ4.x, circleQ4.y - cpH, circleQ1.x - cpW, circleQ1.y, circleQ1.x, circleQ1.y);\n+            path.moveTo(0, -halfHeight);\n+            path.cubicTo(0 + cpW, -halfHeight, halfWidth, 0 - cpH, halfWidth, 0);\n+            path.cubicTo(halfWidth, 0 + cpH, 0 + cpW, halfHeight, 0, halfHeight);\n+            path.cubicTo(0 - cpW, halfHeight, -halfWidth, 0 + cpH, -halfWidth, 0);\n+            path.cubicTo(-halfWidth, 0 - cpH, 0 - cpW, -halfHeight, 0, -halfHeight);\n             observable.setValue(path);\n             onTrimPathChanged();\n ",
    "output": "Cleaned up PointF usage in LootieEllipseShapeLayer"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n@@ -18,17 +18,11 @@ public LottieTest() {\n     public void testAll() {\n         TestRobot.testAnimatedFile(getActivity(), \"Alarm.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel01.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel02.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel03.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"CheckSwitch.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Diamond.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Heart.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Hosts.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"House.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Identity_AllSet.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Identity_City.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Identity_GovtID.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Identity_Selfie.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"LightBulb.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Stars.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"LoopPlayOnce.json\");",
    "output": "Updated screenshots"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java\n@@ -155,9 +155,6 @@ public int getOpacity() {\n \n     public void addLayer(LottieAnimatableLayer layer) {\n         layers.add(layer);\n-        int width = Math.max(getBounds().width(), layer.getBounds().width());\n-        int height = Math.max(getBounds().height(), layer.getBounds().height());\n-        setBounds(0, 0, width, height);\n         invalidateSelf();\n     }\n ",
    "output": "Removed extra padding from larger layers (#5)"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/layers/LottieLayerView.java b/lottie/src/main/java/com/airbnb/lottie/layers/LottieLayerView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/layers/LottieLayerView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieLayerView.java\n@@ -65,6 +65,7 @@ public LottieLayerView(LottieLayer layerModel, LottieComposition composition, Ca\n         this.maskBitmap = maskBitmap;\n         this.matteBitmap = matteBitmap;\n         this.contentBitmap = mainBitmap;\n+        mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n         setBounds(composition.getBounds());\n         if (contentBitmap != null) {\n             contentCanvas = new Canvas(contentBitmap);\n@@ -242,7 +243,6 @@ public void draw(@NonNull Canvas mainCanvas) {\n \n         if (matteCanvas != null && matteBitmap != null && matte != null) {\n             matte.draw(matteCanvas);\n-            mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n             //noinspection ConstantConditions\n             matteCanvas.drawBitmap(mainBitmap, 0, 0, mattePaint);\n             mainCanvas.drawBitmap(matteBitmap, 0, 0, mainCanvasPaint);",
    "output": "Only set the mattePaint xfer mode once"
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n@@ -29,7 +29,7 @@ public void testAll() {\n         TestRobot.testAnimatedFile(getActivity(), \"Identity_City.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Identity_GovtID.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Identity_Selfie.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Lightbulb.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"LightBulb.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Stars.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"LoopPlayOnce.json\");\n     }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n@@ -19,7 +19,7 @@ static void testStaticFile(MainActivity activity, String fileName) {\n     }\n \n     private static void testFile(MainActivity activity, String fileName, float[] progress) {\n-        LottieAnimationView view = new LottieAnimationView(activity);\n+        LottieAnimationView view = LottieAnimationView.forScreenshotTest(activity);\n         view.setAnimationSync(fileName);\n         ViewHelpers.setupView(view)\n                 .layout();\n\ndiff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -31,8 +31,21 @@\n import java.util.List;\n \n public class LottieAnimationView extends ImageView {\n+\n+    /**\n+     * Returns a {@link LottieAnimationView} that will allow it to be used without being attached to a window.\n+     * Normally this isn't possible.\n+     */\n+    @VisibleForTesting\n+    public static LottieAnimationView forScreenshotTest(Context context) {\n+        LottieAnimationView view = new LottieAnimationView(context);\n+        view.isScreenshotTest = true;\n+        return view;\n+    }\n+\n     private final LongSparseArray<LottieLayerView> layerMap = new LongSparseArray<>();\n     private final RootLottieAnimatableLayer rootAnimatableLayer = new RootLottieAnimatableLayer(this);\n+    private boolean isScreenshotTest;\n \n     /** Can be null because it is created async */\n     @Nullable private LottieComposition composition;\n@@ -207,7 +220,7 @@ private void setJsonSync(JSONObject json) {\n     }\n \n     private void setComposition(@NonNull LottieComposition composition) {\n-        if (getWindowToken() == null) {\n+        if (getWindowToken() == null && !isScreenshotTest) {\n             return;\n         }\n         this.composition = composition;",
    "output": "Allowed LottieAnimationView to be used when not attached to a window for tests"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -70,6 +70,7 @@ private void init(@Nullable AttributeSet attrs) {\n         }\n         rootAnimatableLayer.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n         ta.recycle();\n+        setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }\n \n     @Override",
    "output": "Reenabled forced software rendering because it makes some animations janky"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n--- a/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java\n@@ -70,7 +70,6 @@ private void init(@Nullable AttributeSet attrs) {\n         }\n         rootAnimatableLayer.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));\n         ta.recycle();\n-        setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }\n \n     @Override\n@@ -95,12 +94,22 @@ public void invalidateDrawable(@NonNull Drawable dr) {\n         }\n     }\n \n+    @Override\n+    public void invalidate(int l, int t, int r, int b) {\n+        super.invalidate(l, t, r, b);\n+    }\n+\n     @Override\n     protected void onDraw(Canvas canvas) {\n         hasInvalidatedThisFrame = false;\n         super.onDraw(canvas);\n     }\n \n+    @Override\n+    public void draw(Canvas canvas) {\n+        super.draw(canvas);\n+    }\n+\n     @Override\n     protected void onDetachedFromWindow() {\n         recycleBitmaps();\n@@ -197,6 +206,9 @@ private void setJsonSync(JSONObject json) {\n     }\n \n     private void setComposition(@NonNull LottieComposition composition) {\n+        if (getWindowToken() == null) {\n+            return;\n+        }\n         this.composition = composition;\n         rootAnimatableLayer.setCompDuration(composition.getDuration());\n         rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());",
    "output": "Partially fixed rendering on JB\n\nFor some reason manually setting the layer to sofware actually forced\nit to use a hardware layer. Removing it fixes some rendering but if\nhardware acceleration was triggered by something else, it will still break."
  },
  {
    "input": "diff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java\n@@ -5,6 +5,9 @@\n \n import org.junit.Test;\n \n+/**\n+ * Run these with: ./gradlew --daemon recordMode screenshotTests\n+ */\n public class LottieTest extends ActivityInstrumentationTestCase2<MainActivity> {\n \n     public LottieTest() {\n@@ -13,15 +16,21 @@ public LottieTest() {\n \n     @Test\n     public void testAll() {\n-        TestRobot.testStaticFile(getActivity(), \"Hosts Still.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Alarm.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel01.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel02.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel03.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"LightBulb.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Diamond 2.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"CheckSwitch.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"Alarm.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Diamond.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Heart.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Hosts.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"House.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Identity_AllSet.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Identity_City.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Identity_GovtID.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Identity_Selfie.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Lightbulb.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Stars.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"LoopPlayOnce.json\");\n-        TestRobot.testAnimatedFile(getActivity(), \"City.json\");\n     }\n }\n\ndiff --git a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n--- a/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java\n@@ -1,7 +1,5 @@\n package com.airbnb.lottie.samples;\n \n-import android.content.Context;\n-\n import com.airbnb.lottie.LottieAnimationView;\n import com.facebook.testing.screenshot.Screenshot;\n import com.facebook.testing.screenshot.ViewHelpers;\n@@ -12,16 +10,16 @@ class TestRobot {\n     private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.15f, 0.20f, 0.25f, 0.30f, 0.40f, 0.50f, 0.60f, 0.70f, 0.80f, 0.90f, 1f};\n     private static final float[] DEFAULT_STATIC_PROGRESS = {0f};\n \n-    static void testAnimatedFile(Context context, String fileName) {\n-        testFile(context, fileName, DEFAULT_ANIMATED_PROGRESS);\n+    static void testAnimatedFile(MainActivity activity, String fileName) {\n+        testFile(activity, fileName, DEFAULT_ANIMATED_PROGRESS);\n     }\n \n-    static void testStaticFile(Context context, String fileName) {\n-        testFile(context, fileName, DEFAULT_STATIC_PROGRESS);\n+    static void testStaticFile(MainActivity activity, String fileName) {\n+        testFile(activity, fileName, DEFAULT_STATIC_PROGRESS);\n     }\n \n-    private static void testFile(Context context, String fileName, float[] progress) {\n-        LottieAnimationView view = new LottieAnimationView(context);\n+    private static void testFile(MainActivity activity, String fileName, float[] progress) {\n+        LottieAnimationView view = new LottieAnimationView(activity);\n         view.setAnimationSync(fileName);\n         ViewHelpers.setupView(view)\n                 .layout();",
    "output": "Updated JSON"
  },
  {
    "input": "diff --git a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n--- a/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n+++ b/LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java\n@@ -2,6 +2,10 @@\n \n import android.app.Application;\n import android.support.v4.util.Pair;\n+import android.view.Gravity;\n+\n+import com.codemonkeylabs.fpslibrary.FrameDataCallback;\n+import com.codemonkeylabs.fpslibrary.TinyDancer;\n \n public class LottieApplication extends Application implements ILottieApplication {\n \n@@ -12,18 +16,18 @@ public class LottieApplication extends Application implements ILottieApplication\n     @Override\n     public void onCreate() {\n         super.onCreate();\n-//        TinyDancer.create()\n-//                .startingGravity(Gravity.TOP|Gravity.END)\n-//                .startingXPosition(0)\n-//                .startingYPosition(0)\n-//                .addFrameDataCallback(new FrameDataCallback() {\n-//                    @Override\n-//                    public void doFrame(long previousFrameNs, long currentFrameNs, int droppedFrames) {\n-//                        LottieApplication.this.droppedFrames += droppedFrames;\n-//                        LottieApplication.this.currentFrameNs = currentFrameNs;\n-//                    }\n-//                })\n-//                .show(this);\n+        TinyDancer.create()\n+                .startingGravity(Gravity.TOP|Gravity.END)\n+                .startingXPosition(0)\n+                .startingYPosition(0)\n+                .addFrameDataCallback(new FrameDataCallback() {\n+                    @Override\n+                    public void doFrame(long previousFrameNs, long currentFrameNs, int droppedFrames) {\n+                        LottieApplication.this.droppedFrames += droppedFrames;\n+                        LottieApplication.this.currentFrameNs = currentFrameNs;\n+                    }\n+                })\n+                .show(this);\n     }\n \n     @Override",
    "output": "Reenabled TinyDancer"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/animation/LottieAnimatableShapeValue.java b/lottie/src/main/java/com/airbnb/lottie/animation/LottieAnimatableShapeValue.java\n--- a/lottie/src/main/java/com/airbnb/lottie/animation/LottieAnimatableShapeValue.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/animation/LottieAnimatableShapeValue.java\n@@ -133,8 +133,7 @@ private PointF vertexAtIndex(int idx, JSONArray points) {\n     @Override\n     public LottieKeyframeAnimation animationForKeyPath() {\n         LottieShapeKeyframeAnimation animation = new LottieShapeKeyframeAnimation(duration, compDuration, keyTimes, keyValues, interpolators);\n-        // TODO: use this\n-//        animation.setStartDelay(delay);\n+        animation.setStartDelay(delay);\n         animation.addUpdateListener(new LottieKeyframeAnimation.AnimationListener<Path>() {\n             @Override\n             public void onValueChanged(Path progress) {",
    "output": "Reenabled shape start-delays"
  },
  {
    "input": "diff --git a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n--- a/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n+++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java\n@@ -15,12 +15,12 @@\n \n public class LottieComposition {\n     /**\n-     * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixell leaving ~2.3M pixels available.\n+     * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel leaving ~2.3M pixels available.\n      * Reduce the number a little bit for safety.\n      *\n      * Hopefully this can be hardware accelerated someday.\n      */\n-    private static final int MAX_PIXELS = 2000000;\n+    private static final int MAX_PIXELS = 1000;\n \n     public static LottieComposition fromJson(JSONObject json) {\n         LottieComposition composition = new LottieComposition();\n@@ -37,7 +37,7 @@ public static LottieComposition fromJson(JSONObject json) {\n             int scaledWidth = (int) (width * L.SCALE);\n             int scaledHeight = (int) (height * L.SCALE);\n             if (scaledWidth * scaledHeight > MAX_PIXELS) {\n-                float factor = (float) Math.sqrt(MAX_PIXELS / (float) (scaledWidth * scaledHeight));\n+                float factor = (float) MAX_PIXELS / (float) Math.max(scaledWidth, scaledHeight);\n                 scaledWidth *= factor;\n                 scaledHeight *= factor;\n                 L.SCALE *= factor;",
    "output": "Updated max size logic"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java\n@@ -20,7 +20,6 @@\n public class LotteAnimatablePathValue implements LotteAnimatableValue<PointF> {\n \n     private final Observable<PointF> observable = new Observable<>();\n-    private final List<PointF> pointKeyframes = new ArrayList<>();\n     private final List<Float> keyTimes = new ArrayList<>();\n     private final List<Interpolator> interpolators = new ArrayList<>();\n     private final long compDuration;\n@@ -102,21 +101,18 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                 if (outPoint != null) {\n                     PointF vertex = outPoint;\n                     animationPath.lineTo(vertex.x, vertex.y);\n-                    pointKeyframes.add(vertex);\n                     interpolators.add(new LinearInterpolator());\n                     outPoint = null;\n                 }\n \n                 PointF startPoint = keyframe.has(\"s\") ? pointFromValueArray(keyframe.getJSONArray(\"s\")) : new PointF();\n                 if (addStartValue) {\n                     if (i == 0) {\n-                        pointKeyframes.add(startPoint);\n                         animationPath.moveTo(startPoint.x, startPoint.y);\n                         initialPoint = startPoint;\n                         observable.setValue(initialPoint);\n                     } else {\n                         animationPath.lineTo(startPoint.x, startPoint.y);\n-                        pointKeyframes.add(startPoint);\n                         interpolators.add(new LinearInterpolator());\n                     }\n                     addStartValue = false;\n@@ -134,7 +130,6 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                     cp1 = keyframe.has(\"to\") ? pointFromValueArray(keyframe.getJSONArray(\"to\")) : null;\n                     cp2 = keyframe.has(\"ti\") ? pointFromValueArray(keyframe.getJSONArray(\"ti\")) : null;\n                     PointF vertex = pointFromValueArray(keyframe.getJSONArray(\"e\"));\n-                    pointKeyframes.add(vertex);\n                     if (cp1 != null && cp2 != null) {\n                         animationPath.cubicTo(\n                                 startPoint.x + cp1.x, startPoint.y + cp1.y,\n@@ -163,8 +158,6 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                     addTimePadding = true;\n                 }\n             }\n-\n-            observable.setValue(pointKeyframes.get(0));\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Unable to parse keyframes \" + keyframes, e);\n         }\n@@ -238,7 +231,7 @@ public void onValueChanged(PointF progress) {\n \n     @Override\n     public boolean hasAnimation() {\n-        return animationPath.hasSegments() || !pointKeyframes.isEmpty();\n+        return animationPath.hasSegments();\n     }\n \n     @Override",
    "output": "Removed redundant field in LotteAnimatablePathValue"
  },
  {
    "input": "diff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java\n@@ -12,13 +12,18 @@ public LotteTest() {\n     }\n \n     @Test\n-    public void testHosts() {\n+    public void testAll() {\n         TestRobot.testStaticFile(getActivity(), \"Hosts Still.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel01.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"BusinessTravel03.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"LightBulb.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Diamond 2.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"CheckSwitch.json\");\n         TestRobot.testAnimatedFile(getActivity(), \"Alarm.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Stars.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"Selfie.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"LoopPlayOnce.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"City.json\");\n+        TestRobot.testAnimatedFile(getActivity(), \"House.json\");\n     }\n }\n\ndiff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRobot.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRobot.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRobot.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRobot.java\n@@ -34,5 +34,6 @@ private static void testFile(Context context, String fileName, float[] progress)\n                     .setName(String.format(Locale.US, \"%s %d\", nameWithoutExtension, (int) (p * 100)))\n                     .record();\n         }\n+        view.recycleBitmaps();\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -12,6 +12,7 @@\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import android.support.annotation.VisibleForTesting;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n import android.widget.ImageView;\n@@ -101,6 +102,13 @@ protected void onDraw(Canvas canvas) {\n \n     @Override\n     protected void onDetachedFromWindow() {\n+        recycleBitmaps();\n+\n+        super.onDetachedFromWindow();\n+    }\n+\n+    @VisibleForTesting\n+    public void recycleBitmaps() {\n         if (mainBitmap != null) {\n             mainBitmap.recycle();\n         }\n@@ -116,8 +124,6 @@ protected void onDetachedFromWindow() {\n         if (maskBitmapForMatte != null) {\n             maskBitmapForMatte.recycle();\n         }\n-\n-        super.onDetachedFromWindow();\n     }\n \n     public void setAnimation(String animationName) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePathValue.java\n@@ -219,10 +219,6 @@ public Observable<PointF> getObservable() {\n         return observable;\n     }\n \n-    public PointF getInitialPoint() {\n-        return initialPoint;\n-    }\n-\n     @Override\n     public LotteKeyframeAnimation animationForKeyPath() {\n         if (!hasAnimation()) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -191,6 +191,9 @@ public void setMatte(LotteLayerView matte) {\n     @Override\n     public void draw(@NonNull Canvas mainCanvas) {\n         if (contentBitmap != null) {\n+            if (contentBitmap.isRecycled()) {\n+                return;\n+            }\n             contentBitmap.eraseColor(Color.TRANSPARENT);\n         }\n         if (maskBitmap != null) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java b/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java\n@@ -19,17 +19,15 @@ public void lineTo(float x, float y) {\n         Path path = new Path();\n         path.moveTo(currentPoint.x, currentPoint.y);\n         path.lineTo(x, y);\n-        // TODO: figure out why this isn't needed/figure out why it breaks with it enabled\n-//        segments.add(path);\n+        segments.add(path);\n         currentPoint.set(x, y);\n     }\n \n     public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3) {\n         Path path = new Path();\n         path.moveTo(currentPoint.x, currentPoint.y);\n         path.cubicTo(x1, y1, x2, y2, x3, y3);\n-        // TODO: figure out why this isn't needed/figure out why it breaks with it enabled\n-//        segments.add(path);\n+        segments.add(path);\n         currentPoint.set(x3, y3);\n     }\n ",
    "output": "Added a bunch of new screenshot tests"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -34,12 +34,12 @@ public void onChanged() {\n     /** This should mimic CALayer#position */\n     private Observable<PointF> position;\n     /** This should mimic CALayer#anchorPoint */\n-    protected Observable<PointF> anchorPoint;\n+    private Observable<PointF> anchorPoint;\n     /** This should mimic CALayer#transform */\n     private Observable<LotteTransform3D> transform;\n     /** This should mimic CALayer#sublayerTransform */\n     private Observable<Number> alpha;\n-    protected Observable<Number> sublayerTransform;\n+    private Observable<Number> sublayerTransform;\n     protected long compDuration;\n \n     private final Paint solidBackgroundPaint = new Paint();\n@@ -119,6 +119,14 @@ public void setColorFilter(ColorFilter colorFilter) {\n \n     }\n \n+    public void setAnchorPoint(Observable<PointF> anchorPoint) {\n+        if (this.anchorPoint != null) {\n+            this.anchorPoint.removeChangeListemer(changedListener);\n+        }\n+        this.anchorPoint = anchorPoint;\n+        anchorPoint.addChangeListener(changedListener);\n+    }\n+\n     public void setPosition(Observable<PointF> position) {\n         if (this.position != null) {\n             this.position.removeChangeListemer(changedListener);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -37,7 +37,7 @@ class LotteEllipseShapeLayer extends LotteAnimatableLayer {\n         this.transformModel = transform;\n \n         setBounds(transform.getCompBounds());\n-        anchorPoint = transform.getAnchor().getObservable();\n+        setAnchorPoint(transform.getAnchor().getObservable());\n         setAlpha(transform.getOpacity().getObservable());\n         setPosition(transform.getPosition().getObservable());\n         setTransform(transform.getScale().getObservable());\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n@@ -44,11 +44,11 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n             LotteShapeStroke previousStroke, LotteShapeTrimPath previousTrimPath) {\n         if (shapeTransform != null) {\n             setBounds(shapeTransform.getCompBounds());\n-            anchorPoint = shapeTransform.getAnchor().getObservable();\n+            setAnchorPoint(shapeTransform.getAnchor().getObservable());\n             setPosition(shapeTransform.getPosition().getObservable());\n             setAlpha(shapeTransform.getOpacity().getObservable());\n             setTransform(shapeTransform.getScale().getObservable());\n-            sublayerTransform = shapeTransform.getRotation().getObservable();\n+            setSublayerTransform(shapeTransform.getRotation().getObservable());\n         }\n \n         List<Object> reversedItems = shapeGroup.getItems();\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -80,8 +80,9 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callb\n     }\n \n     private void setupForModel(Drawable.Callback callback) {\n-        anchorPoint = new Observable<>();\n+        Observable<PointF> anchorPoint = new Observable<>();\n         anchorPoint.setValue(new PointF());\n+        setAnchorPoint(anchorPoint);\n \n         childContainerLayer = new LotteAnimatableLayer(composition.getDuration(), getCallback());\n         childContainerLayer.setCallback(callback);\n@@ -104,9 +105,9 @@ private void setupForModel(Drawable.Callback callback) {\n         addLayer(currentChild);\n \n         childContainerLayer.setPosition(layerModel.getPosition().getObservable());\n-        childContainerLayer.anchorPoint = layerModel.getAnchor().getObservable();\n+        childContainerLayer.setAnchorPoint(layerModel.getAnchor().getObservable());\n         childContainerLayer.setTransform(layerModel.getScale().getObservable());\n-        childContainerLayer.sublayerTransform = layerModel.getRotation().getObservable();\n+        childContainerLayer.setSublayerTransform(layerModel.getRotation().getObservable());\n         layerModel.getOpacity().getObservable().addChangeListener(new Observable.OnChangedListener() {\n             @Override\n             public void onChanged() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n@@ -26,9 +26,9 @@ public LotteParentLayer(LotteLayer parent, LotteComposition composition, Drawabl\n \n     private void setupLayerFromModel() {\n         setPosition(parentModel.getPosition().getObservable());\n-        anchorPoint = parentModel.getAnchor().getObservable();\n+        setAnchorPoint(parentModel.getAnchor().getObservable());\n         setTransform(parentModel.getScale().getObservable());\n-        sublayerTransform = parentModel.getRotation().getObservable();\n+        setSublayerTransform(parentModel.getRotation().getObservable());\n         buildAnimations();\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -45,11 +45,11 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n \n         paint.setAntiAlias(true);\n         setBounds(transform.getCompBounds());\n-        anchorPoint = transform.getAnchor().getObservable();\n+        setAnchorPoint(transform.getAnchor().getObservable());\n         setAlpha(transform.getOpacity().getObservable());\n         setPosition(transform.getPosition().getObservable());\n         setTransform(transform.getScale().getObservable());\n-        sublayerTransform = transform.getRotation().getObservable();\n+        setSublayerTransform(transform.getRotation().getObservable());\n \n         if (fill != null) {\n             fillLayer = new LotteRoundRectLayer(duration, getCallback());\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -45,9 +45,9 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n         strokePaint.setAntiAlias(true);\n \n         setBounds(transformModel.getCompBounds());\n-        anchorPoint = transformModel.getAnchor().getObservable();\n+        setAnchorPoint(transformModel.getAnchor().getObservable());\n         setPosition(transformModel.getPosition().getObservable());\n-        sublayerTransform = transformModel.getRotation().getObservable();\n+        setSublayerTransform(transformModel.getRotation().getObservable());\n \n         Observable<LotteTransform3D> scale = transformModel.getScale().getObservable();\n         setTransform(transformModel.getScale().getObservable());",
    "output": "Properly set sublayerTransform and anchorPoint\n\nThey were never getting set properly to have change listeners so the\noptimization to drop observable events that didn't change had no effect"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -36,11 +36,11 @@ public class LotteAnimationView extends ImageView {\n     /** Can be null because it is created async */\n     @Nullable private LotteComposition composition;\n     private boolean hasInvalidatedThisFrame;\n-    @Nullable private Bitmap mainBitmap;\n-    @Nullable private Bitmap maskBitmap;\n-    @Nullable private Bitmap matteBitmap;\n-    @Nullable private Bitmap mainBitmapForMatte;\n-    @Nullable private Bitmap maskBitmapForMatte;\n+    @Nullable private Bitmap mainBitmap = null;\n+    @Nullable private Bitmap maskBitmap = null;\n+    @Nullable private Bitmap matteBitmap = null;\n+    @Nullable private Bitmap mainBitmapForMatte = null;\n+    @Nullable private Bitmap maskBitmapForMatte = null;\n \n     public LotteAnimationView(Context context) {\n         super(context);\n@@ -204,12 +204,15 @@ private void buildSubviewsForComposition() {\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();\n-        mainBitmap = (composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n-        maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n-        matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n-\n-        mainBitmapForMatte = null;\n-        maskBitmapForMatte = null;\n+        if (composition.hasMasks() || composition.hasMattes()) {\n+            mainBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);\n+        }\n+        if (composition.hasMasks()) {\n+            maskBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);\n+        }\n+        if (composition.hasMattes()) {\n+            matteBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);\n+        }\n         LotteLayerView maskedLayer = null;\n         for (int i = 0; i < reversedLayers.size(); i++) {\n             LotteLayer layer = reversedLayers.get(i);",
    "output": "Cleaned up logic for initializing bitmaps"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -41,7 +41,6 @@ public class LotteAnimationView extends ImageView {\n     @Nullable private Bitmap matteBitmap;\n     @Nullable private Bitmap mainBitmapForMatte;\n     @Nullable private Bitmap maskBitmapForMatte;\n-    @Nullable private Bitmap matteBitmapForMatte;\n \n     public LotteAnimationView(Context context) {\n         super(context);\n@@ -117,9 +116,6 @@ protected void onDetachedFromWindow() {\n         if (maskBitmapForMatte != null) {\n             maskBitmapForMatte.recycle();\n         }\n-        if (matteBitmapForMatte != null) {\n-            matteBitmapForMatte.recycle();\n-        }\n \n         super.onDetachedFromWindow();\n     }\n@@ -214,7 +210,6 @@ private void buildSubviewsForComposition() {\n \n         mainBitmapForMatte = null;\n         maskBitmapForMatte = null;\n-        matteBitmapForMatte = null;\n         LotteLayerView maskedLayer = null;\n         for (int i = 0; i < reversedLayers.size(); i++) {\n             LotteLayer layer = reversedLayers.get(i);\n@@ -224,11 +219,12 @@ private void buildSubviewsForComposition() {\n             } else {\n                 if (mainBitmapForMatte == null) {\n                     mainBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);\n-                    // TODO: only create matte mask and matte if necessary.\n+                }\n+                if (maskBitmapForMatte == null && !layer.getMasks().isEmpty()) {\n                     maskBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);\n-                    matteBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);\n                 }\n-                layerView = new LotteLayerView(layer, composition, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n+\n+                layerView = new LotteLayerView(layer, composition, this, mainBitmapForMatte, maskBitmapForMatte, null);\n             }\n             layerMap.put(layerView.getId(), layerView);\n             if (maskedLayer != null) {",
    "output": "Optimized bitmaps for compositions with mattes"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/L.java b/lotte/src/main/java/com/airbnb/lotte/L.java\n--- a/lotte/src/main/java/com/airbnb/lotte/L.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/L.java\n@@ -1,5 +1,5 @@\n package com.airbnb.lotte;\n \n public class L {\n-    public static boolean DBG = true;\n+    public static boolean DBG = false;\n }",
    "output": "Turn off debug mode"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -37,9 +37,9 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n                 \"BusinessTravel01_Still.json\",\n-                \"Icon_Diamond_Still.json\",\n-                \"Icon_Lightbulb_Still.json\",\n-                \"Icon_Lightbulb_Still_02.json\",\n+                \"Diamond 2.json\",\n+                \"LightBulb.json\",\n+                \"Alarm.json\",\n         };\n \n         @Override",
    "output": "Updated grid fragment"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -10,6 +10,7 @@\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;\n import android.support.annotation.FloatRange;\n+import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n@@ -32,7 +33,8 @@ public class LotteAnimationView extends ImageView {\n     private final LongSparseArray<LotteLayerView> layerMap = new LongSparseArray<>();\n     private final RootLotteAnimatableLayer rootAnimatableLayer = new RootLotteAnimatableLayer(this);\n \n-    private LotteComposition composition;\n+    /** Can be null because it is created async */\n+    @Nullable private LotteComposition composition;\n     private boolean hasInvalidatedThisFrame;\n     @Nullable private Bitmap mainBitmap;\n     @Nullable private Bitmap maskBitmap;\n@@ -80,12 +82,12 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n     }\n \n     @Override\n-    protected boolean verifyDrawable(Drawable drawable) {\n+    protected boolean verifyDrawable(@NonNull Drawable drawable) {\n         return true;\n     }\n \n     @Override\n-    public void invalidateDrawable(Drawable dr) {\n+    public void invalidateDrawable(@NonNull Drawable dr) {\n         if (!hasInvalidatedThisFrame) {\n             super.invalidateDrawable(rootAnimatableLayer);\n             hasInvalidatedThisFrame = true;\n@@ -191,7 +193,7 @@ private void setJsonSync(JSONObject json) {\n         setComposition(composition);\n     }\n \n-    public void setComposition(LotteComposition composition) {\n+    public void setComposition(@NonNull LotteComposition composition) {\n         this.composition = composition;\n         rootAnimatableLayer.setCompDuration(composition.getDuration());\n         rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n@@ -201,6 +203,7 @@ public void setComposition(LotteComposition composition) {\n     }\n \n     private void buildSubviewsForComposition() {\n+        //noinspection ConstantConditions\n         List<LotteLayer> reversedLayers = composition.getLayers();\n         Collections.reverse(reversedLayers);\n \n@@ -278,10 +281,10 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n     }\n \n     public int getFrameRate() {\n-        return composition.getFrameRate();\n+        return composition != null ? composition.getFrameRate() : 60;\n     }\n \n     public long getDuration() {\n-        return composition.getDuration();\n+        return composition != null ? composition.getDuration() : 0;\n     }\n }",
    "output": "Annotate composition as nullable"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n@@ -50,6 +50,8 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         View view = inflater.inflate(R.layout.fragment_animation, container, false);\n         ButterKnife.bind(this, view);\n \n+        updatePlayButtonText();\n+        loopButton.setChecked(true);\n         String fileName = getArguments().getString(ARG_FILE_NAME);\n         animationView.setAnimation(fileName);\n         animationView.addAnimatorListener(new Animator.AnimatorListener() {\n@@ -105,13 +107,17 @@ public void onStop() {\n     public void onPlayClicked() {\n         if (animationView.isAnimating()) {\n             animationView.cancelAnimation();\n-            playButton.setText(\"Play\");\n+            updatePlayButtonText();\n         } else {\n             animationView.playAnimation();\n-            playButton.setText(\"Cancel\");\n+            updatePlayButtonText();\n         }\n     }\n \n+    private void updatePlayButtonText() {\n+        playButton.setText(animationView.isAnimating() ? \"Cancel\" : \"Play\");\n+    }\n+\n     @OnCheckedChanged(R.id.loop_button)\n     public void onLoopChanged(boolean loop) {\n         animationView.loop(loop);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -58,10 +58,14 @@ public LotteAnimationView(Context context, AttributeSet attrs, int defStyleAttr)\n \n     private void init(@Nullable AttributeSet attrs) {\n         TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LotteAnimationView);\n-        String fileName = ta.getString(R.styleable.LotteAnimationView_fileName);\n+        String fileName = ta.getString(R.styleable.LotteAnimationView_lotte_fileName);\n         if (fileName != null) {\n             setAnimation(fileName);\n         }\n+        if (ta.getBoolean(R.styleable.LotteAnimationView_lotte_autoPlay, false)) {\n+            rootAnimatableLayer.play();\n+        }\n+        rootAnimatableLayer.loop(ta.getBoolean(R.styleable.LotteAnimationView_lotte_loop, false));\n         ta.recycle();\n         setLayerType(LAYER_TYPE_SOFTWARE, null);\n     }",
    "output": "Add LotteAnimationView atts for autoPlay and loop"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lotte.samples;\n \n import android.animation.Animator;\n+import android.animation.ValueAnimator;\n import android.annotation.SuppressLint;\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n@@ -10,6 +11,7 @@\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.Button;\n import android.widget.SeekBar;\n import android.widget.TextView;\n import android.widget.ToggleButton;\n@@ -21,6 +23,8 @@\n import butterknife.OnCheckedChanged;\n import butterknife.OnClick;\n \n+import static com.airbnb.lotte.samples.R.id.play;\n+\n public class AnimationFragment extends Fragment {\n     private static final String ARG_FILE_NAME = \"file_name\";\n \n@@ -34,6 +38,7 @@ static AnimationFragment newInstance(String fileName) {\n \n     @BindView(R.id.animation_view) LotteAnimationView animationView;\n     @BindView(R.id.seek_bar) AppCompatSeekBar seekBar;\n+    @BindView(play) Button playButton;\n     @BindView(R.id.loop_button) ToggleButton loopButton;\n     @BindView(R.id.frames_per_second) TextView fpsView;\n     @BindView(R.id.dropped_frames) TextView droppedFramesView;\n@@ -67,6 +72,12 @@ public void onAnimationRepeat(Animator animation) {\n                 startRecordingDroppedFrames();\n             }\n         });\n+        animationView.addAnimatorUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n+            @Override\n+            public void onAnimationUpdate(ValueAnimator animation) {\n+                seekBar.setProgress((int) (animation.getAnimatedFraction() * 100));\n+            }\n+        });\n \n         seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n             @Override\n@@ -90,14 +101,23 @@ public void onStop() {\n         super.onStop();\n     }\n \n-    @OnClick(R.id.play)\n+    @OnClick(play)\n     public void onPlayClicked() {\n-        animationView.play();\n+        if (animationView.isAnimating()) {\n+            animationView.cancelAnimation();\n+            playButton.setText(\"Play\");\n+        } else {\n+            animationView.playAnimation();\n+            playButton.setText(\"Cancel\");\n+        }\n     }\n \n     @OnCheckedChanged(R.id.loop_button)\n     public void onLoopChanged(boolean loop) {\n         animationView.loop(loop);\n+        if (!loop) {\n+            animationView.cancelAnimation();\n+        }\n     }\n \n     private void startRecordingDroppedFrames() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -257,7 +257,11 @@ public void loop(boolean loop) {\n         rootAnimatableLayer.loop(loop);\n     }\n \n-    public void play() {\n+    public boolean isAnimating() {\n+        return rootAnimatableLayer.isAnimating();\n+    }\n+\n+    public void playAnimation() {\n         rootAnimatableLayer.play();\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n@@ -37,6 +37,10 @@ public void loop(boolean loop) {\n         animator.setRepeatCount(loop ? ValueAnimator.INFINITE : 0);\n     }\n \n+    public boolean isAnimating() {\n+        return animator.isRunning();\n+    }\n+\n     public void play() {\n         animator.start();\n     }",
    "output": "Update the seek bar when the animation is running\n\nPress play again to cancel"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -66,11 +66,14 @@ public void addUpdateListener(AnimationListener<T> listener) {\n     public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         if (progress < getStartDelayProgress()) {\n             progress = 0f;\n-        } else if (progress > getDurationEndProgress()){\n+        } else if (progress > getDurationEndProgress()) {\n             progress = 1f;\n         } else {\n             progress = (progress - getStartDelayProgress()) / getDurationRangeProgress();\n         }\n+        if (progress == this.progress) {\n+            return;\n+        }\n         this.progress = progress;\n \n         for (int i = 0; i < listeners.size(); i++) {",
    "output": "Don't udpate progress or observable if the value hasn't changed"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -13,7 +13,6 @@\n import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n-import android.util.Log;\n \n import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n import com.airbnb.lotte.model.LotteShapeStroke;\n@@ -26,8 +25,6 @@\n  * Mimics CAShapeLayer\n  */\n public class LotteShapeLayer extends LotteAnimatableLayer {\n-    private static final float MIN_TRIM_PATH_CHANGE_DELTA = 7;\n-\n     private final Observable.OnChangedListener pathChangedListener = new Observable.OnChangedListener() {\n         @Override\n         public void onChanged() {\n@@ -86,8 +83,6 @@ public void onChanged() {\n     private Observable<Number> lineWidth;\n     @Nullable private Observable<Number> strokeStart;\n     @Nullable private Observable<Number> strokeEnd;\n-    private float lastMeasuredStrokeStart = Float.MIN_VALUE;\n-    private float lastMeasuredStrokeEnd = Float.MIN_VALUE;\n \n     private Observable<Number> shapeAlpha;\n     private Observable<Number> transformAlpha;\n@@ -306,13 +301,6 @@ void onTrimPathChanged() {\n         if (strokeStart != null && strokeEnd != null) {\n             float strokeStartVal = (float) strokeStart.getValue();\n             float strokeEndVal = (float) strokeEnd.getValue();\n-            if (Math.abs(strokeStartVal - lastMeasuredStrokeStart) < MIN_TRIM_PATH_CHANGE_DELTA &&\n-                    Math.abs(strokeEndVal - lastMeasuredStrokeEnd) < MIN_TRIM_PATH_CHANGE_DELTA) {\n-                return;\n-            }\n-            lastMeasuredStrokeStart = strokeStartVal;\n-            lastMeasuredStrokeEnd = strokeEndVal;\n-\n             float length = pathMeasure.getLength();\n             float start = length * strokeStartVal / 100f;\n             float end = length * strokeEndVal / 100f;",
    "output": "Removed trim path caching because it causes some animations (like alarm) to look bad"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -72,7 +72,7 @@ public void draw(@NonNull Canvas canvas) {\n             }\n         }\n         if (transform != null && transform.getValue() != null) {\n-            if (transform.getValue().getScaleX() != 0f || transform.getValue().getScaleY() != 0f) {\n+            if (transform.getValue().getScaleX() != 1f || transform.getValue().getScaleY() != 1f) {\n                 canvas.scale(transform.getValue().getScaleX(), transform.getValue().getScaleY());\n             }\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -259,7 +259,7 @@ private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {\n         }\n \n         LotteTransform3D scale = layer.getScale().getObservable().getValue();\n-        if (scale.getScaleX() != 0f || scale.getScaleY() != 0f) {\n+        if (scale.getScaleX() != 1f || scale.getScaleY() != 1f) {\n             canvas.scale(scale.getScaleX(), scale.getScaleY());\n         }\n ",
    "output": "Fixed a scale perf optimization"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -34,6 +34,12 @@ public class LotteAnimationView extends ImageView {\n \n     private LotteComposition composition;\n     private boolean hasInvalidatedThisFrame;\n+    @Nullable private Bitmap mainBitmap;\n+    @Nullable private Bitmap maskBitmap;\n+    @Nullable private Bitmap matteBitmap;\n+    @Nullable private Bitmap mainBitmapForMatte;\n+    @Nullable private Bitmap maskBitmapForMatte;\n+    @Nullable private Bitmap matteBitmapForMatte;\n \n     public LotteAnimationView(Context context) {\n         super(context);\n@@ -88,6 +94,30 @@ protected void onDraw(Canvas canvas) {\n         super.onDraw(canvas);\n     }\n \n+    @Override\n+    protected void onDetachedFromWindow() {\n+        if (mainBitmap != null) {\n+            mainBitmap.recycle();\n+        }\n+        if (maskBitmap != null) {\n+            maskBitmap.recycle();\n+        }\n+        if (matteBitmap != null) {\n+            matteBitmap.recycle();\n+        }\n+        if (mainBitmapForMatte != null) {\n+            mainBitmapForMatte.recycle();\n+        }\n+        if (maskBitmapForMatte != null) {\n+            maskBitmapForMatte.recycle();\n+        }\n+        if (matteBitmapForMatte != null) {\n+            matteBitmapForMatte.recycle();\n+        }\n+\n+        super.onDetachedFromWindow();\n+    }\n+\n     public void setAnimation(String animationName) {\n         InputStream file;\n         try {\n@@ -171,13 +201,13 @@ private void buildSubviewsForComposition() {\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();\n-        Bitmap mainBitmap = (composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n-        Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n-        Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n+        mainBitmap = (composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n+        maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n+        matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n \n-        Bitmap mainBitmapForMatte = null;\n-        Bitmap maskBitmapForMatte = null;\n-        Bitmap matteBitmapForMatte = null;\n+        mainBitmapForMatte = null;\n+        maskBitmapForMatte = null;\n+        matteBitmapForMatte = null;\n         LotteLayerView maskedLayer = null;\n         for (int i = 0; i < reversedLayers.size(); i++) {\n             LotteLayer layer = reversedLayers.get(i);",
    "output": "Recycle bitmaps when detached from the window"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -67,18 +67,27 @@ public void addAnimation(LotteAnimationGroup animation) {\n     public void draw(@NonNull Canvas canvas) {\n         canvas.save();\n         if (position != null && position.getValue() != null) {\n-            canvas.translate(position.getValue().x, position.getValue().y);\n+            if (position.getValue().x != 0 || position.getValue().y != 0) {\n+                canvas.translate(position.getValue().x, position.getValue().y);\n+            }\n         }\n         if (transform != null && transform.getValue() != null) {\n-            canvas.scale(transform.getValue().getScaleX(), transform.getValue().getScaleY());\n+            if (transform.getValue().getScaleX() != 0f || transform.getValue().getScaleY() != 0f) {\n+                canvas.scale(transform.getValue().getScaleX(), transform.getValue().getScaleY());\n+            }\n         }\n \n         if (sublayerTransform != null && sublayerTransform.getValue() != null) {\n-            canvas.rotate((float) sublayerTransform.getValue());\n+            float rotation = (float) sublayerTransform.getValue();\n+            if (rotation != 0f) {\n+                canvas.rotate(rotation);\n+            }\n         }\n \n         if (anchorPoint != null && anchorPoint.getValue() != null) {\n-            canvas.translate(-anchorPoint.getValue().x, -anchorPoint.getValue().y);\n+            if (anchorPoint.getValue().x != 0 || anchorPoint.getValue().y != 0) {\n+                canvas.translate(-anchorPoint.getValue().x, -anchorPoint.getValue().y);\n+            }\n         }\n \n         if (solidBackgroundPaint.getAlpha() != 0) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -254,15 +254,24 @@ public void draw(@NonNull Canvas mainCanvas) {\n \n     private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {\n         PointF position = layer.getPosition().getObservable().getValue();\n-        canvas.translate(position.x, position.y);\n+        if (position.x != 0 || position.y != 0) {\n+            canvas.translate(position.x, position.y);\n+        }\n \n         LotteTransform3D scale = layer.getScale().getObservable().getValue();\n-        canvas.scale(scale.getScaleX(), scale.getScaleY());\n+        if (scale.getScaleX() != 0f || scale.getScaleY() != 0f) {\n+            canvas.scale(scale.getScaleX(), scale.getScaleY());\n+        }\n \n-        canvas.rotate((float) layer.getRotation().getObservable().getValue());\n+        float rotation = (float) layer.getRotation().getObservable().getValue();\n+        if (rotation != 0f) {\n+            canvas.rotate(rotation);\n+        }\n \n         PointF translation = layer.getAnchor().getObservable().getValue();\n-        canvas.translate(-translation.x, -translation.y);\n+        if (translation.x != 0 || translation.y != 0) {\n+            canvas.translate(-translation.x, -translation.y);\n+        }\n     }\n \n     @Override",
    "output": "Prevent doing many canvas operations when their values are 0"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -32,6 +32,7 @@ public interface AnimationListener<T> {\n     private int cachedKeyframeIndex = -1;\n     private float cachedKeyframeIndexStart;\n     private float cachedKeyframeIndexEnd;\n+    private float cachedDurationEndProgress = Float.MIN_VALUE;\n \n     public LotteKeyframeAnimation(@AnimatableProperty int property, long duration, long compDuration, List<Float> keyTimes) {\n         this.property = property;\n@@ -42,6 +43,7 @@ public LotteKeyframeAnimation(@AnimatableProperty int property, long duration, l\n \n     public LotteKeyframeAnimation setStartDelay(long startDelay) {\n         this.startDelay = startDelay;\n+        cachedDurationEndProgress = Float.MIN_VALUE;\n         return this;\n     }\n \n@@ -106,7 +108,11 @@ protected float getStartDelayProgress() {\n \n     @FloatRange(from=0f, to=1f)\n     private float getDurationEndProgress() {\n-        return getStartDelayProgress() + getDurationRangeProgress();\n+        if (cachedDurationEndProgress == Float.MIN_VALUE) {\n+            // This was taking a surprisingly long time according to systrace. Cache it!\n+            cachedDurationEndProgress = getStartDelayProgress() + getDurationRangeProgress();\n+        }\n+        return cachedDurationEndProgress;\n     }\n \n     @FloatRange(from=0f, to=1f)",
    "output": "Cache duration range progress. It was surprisingly slow on systrace"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -13,6 +13,7 @@\n import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import android.util.Log;\n \n import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n import com.airbnb.lotte.model.LotteShapeStroke;\n@@ -25,13 +26,7 @@\n  * Mimics CAShapeLayer\n  */\n public class LotteShapeLayer extends LotteAnimatableLayer {\n-\n-    private final Observable.OnChangedListener changedListener = new Observable.OnChangedListener() {\n-        @Override\n-        public void onChanged() {\n-            invalidateSelf();\n-        }\n-    };\n+    private static final float MIN_TRIM_PATH_CHANGE_DELTA = 7;\n \n     private final Observable.OnChangedListener pathChangedListener = new Observable.OnChangedListener() {\n         @Override\n@@ -91,6 +86,8 @@ public void onChanged() {\n     private Observable<Number> lineWidth;\n     @Nullable private Observable<Number> strokeStart;\n     @Nullable private Observable<Number> strokeEnd;\n+    private float lastMeasuredStrokeStart = Float.MIN_VALUE;\n+    private float lastMeasuredStrokeEnd = Float.MIN_VALUE;\n \n     private Observable<Number> shapeAlpha;\n     private Observable<Number> transformAlpha;\n@@ -307,9 +304,18 @@ void setTrimPath(Observable<Number> strokeStart, Observable<Number> strokeEnd) {\n \n     void onTrimPathChanged() {\n         if (strokeStart != null && strokeEnd != null) {\n+            float strokeStartVal = (float) strokeStart.getValue();\n+            float strokeEndVal = (float) strokeEnd.getValue();\n+            if (Math.abs(strokeStartVal - lastMeasuredStrokeStart) < MIN_TRIM_PATH_CHANGE_DELTA &&\n+                    Math.abs(strokeEndVal - lastMeasuredStrokeEnd) < MIN_TRIM_PATH_CHANGE_DELTA) {\n+                return;\n+            }\n+            lastMeasuredStrokeStart = strokeStartVal;\n+            lastMeasuredStrokeEnd = strokeEndVal;\n+\n             float length = pathMeasure.getLength();\n-            float start = length * ((Float) strokeStart.getValue()) / 100f;\n-            float end = length * ((Float) strokeEnd.getValue()) / 100f;\n+            float start = length * strokeStartVal / 100f;\n+            float end = length * strokeEndVal / 100f;\n \n             trimPath.reset();\n             // Workaround to get hardware acceleration on KitKat",
    "output": "Cache small trim path deltas for perf\n\nThis looks good with stars but it may need to be tuned for other animations\nto look good"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -29,6 +29,10 @@ public interface AnimationListener<T> {\n \n     private float progress;\n \n+    private int cachedKeyframeIndex = -1;\n+    private float cachedKeyframeIndexStart;\n+    private float cachedKeyframeIndexEnd;\n+\n     public LotteKeyframeAnimation(@AnimatableProperty int property, long duration, long compDuration, List<Float> keyTimes) {\n         this.property = property;\n         this.duration = duration;\n@@ -74,11 +78,19 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n \n     int getKeyframeIndex() {\n         int keyframeIndex = 1;\n-        float keyTime = keyTimes.get(1);\n-        while (keyTime < progress && keyframeIndex < keyTimes.size() - 1) {\n-            keyframeIndex++;\n-            keyTime = keyTimes.get(keyframeIndex);\n+        if (cachedKeyframeIndex != -1 && progress >= cachedKeyframeIndexStart && progress <= cachedKeyframeIndexEnd) {\n+            keyframeIndex = cachedKeyframeIndex;\n+        } else {\n+            float keyTime = keyTimes.get(1);\n+            while (keyTime < progress && keyframeIndex < keyTimes.size() - 1) {\n+                keyframeIndex++;\n+                keyTime = keyTimes.get(keyframeIndex);\n+            }\n+            cachedKeyframeIndex = keyframeIndex;\n+            cachedKeyframeIndexStart = keyTimes.get(cachedKeyframeIndex - 1);\n+            cachedKeyframeIndexEnd = keyTimes.get(cachedKeyframeIndex);\n         }\n+\n         return keyframeIndex - 1;\n     }\n ",
    "output": "Cache keyframe indexes for a slight performance boost"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n@@ -107,7 +107,7 @@ private void startRecordingDroppedFrames() {\n     @SuppressLint({\"SetTextI18n\", \"DefaultLocale\"})\n     private void recordDroppedFrames() {\n         Pair<Integer, Long> droppedFrames = getApplication().stopRecordingDroppedFrames();\n-        int targetFrames = (int) ((droppedFrames.second / 1000000000f) * animationView.getFrameRate());\n+        int targetFrames = (int) ((droppedFrames.second / 1000000000f) * 60);\n         int actualFrames = targetFrames - droppedFrames.first;\n         fpsView.setText(String.format(\"Fps: %.0f\", actualFrames / (animationView.getDuration() / 1000f)));\n         droppedFramesView.setText(\"Dropped frames: \" + droppedFrames.first);",
    "output": "Set the fps counter target framerate to 60 rather than to the composition framerate\n\nAndroid's target framerate is always 60"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -205,7 +205,7 @@ public void draw(@NonNull Canvas mainCanvas) {\n         if (matteBitmap != null) {\n             matteBitmap.eraseColor(Color.TRANSPARENT);\n         }\n-        if (!isVisible()) {\n+        if (!isVisible() || mainCanvasPaint.getAlpha() == 0) {\n             return;\n         }\n         if (contentCanvas == null || contentBitmap == null) {",
    "output": "Treat a main canvas paint with alpha 0 the same as not visible"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -171,7 +171,7 @@ private void buildSubviewsForComposition() {\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();\n-        Bitmap mainBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n+        Bitmap mainBitmap = (composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n         Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n         Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -208,7 +208,7 @@ public void draw(@NonNull Canvas mainCanvas) {\n         if (!isVisible()) {\n             return;\n         }\n-        if (contentCanvas == null || contentBitmap != null) {\n+        if (contentCanvas == null || contentBitmap == null) {\n             super.draw(mainCanvas);\n             return;\n         }",
    "output": "Fixed a regression in mattes"
  },
  {
    "input": "diff --git a/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java b/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n--- a/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n+++ b/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n@@ -1,25 +1,45 @@\n package com.airbnb.lotte.samples;\n \n import android.app.Application;\n+import android.support.v4.util.Pair;\n import android.view.Gravity;\n \n import com.codemonkeylabs.fpslibrary.FrameDataCallback;\n import com.codemonkeylabs.fpslibrary.TinyDancer;\n \n-public class LotteApplication extends Application {\n+public class LotteApplication extends Application implements ILotteApplication {\n+\n+    private int droppedFrames;\n+    private long droppedFramesStartingNs;\n+    private long currentFrameNs;\n \n     @Override\n     public void onCreate() {\n         TinyDancer.create()\n                 .startingGravity(Gravity.TOP|Gravity.END)\n-                .startingXPosition(50)\n-                .startingYPosition(50)\n+                .startingXPosition(0)\n+                .startingYPosition(0)\n                 .addFrameDataCallback(new FrameDataCallback() {\n                     @Override\n-                    public void doFrame(long previousFrameNS, long currentFrameNS, int droppedFrames) {\n-                        //collect your stats here\n+                    public void doFrame(long previousFrameNs, long currentFrameNs, int droppedFrames) {\n+                        LotteApplication.this.droppedFrames += droppedFrames;\n+                        LotteApplication.this.currentFrameNs = currentFrameNs;\n                     }\n                 })\n                 .show(this);\n     }\n+\n+    @Override\n+    public void startRecordingDroppedFrames() {\n+        droppedFrames = 0;\n+        droppedFramesStartingNs = currentFrameNs;\n+    }\n+\n+    @Override\n+    public Pair<Integer, Long> stopRecordingDroppedFrames() {\n+        long duration = currentFrameNs - droppedFramesStartingNs;\n+        Pair<Integer, Long> ret = new Pair<>(droppedFrames, duration);\n+        droppedFrames = 0;\n+        return ret;\n+    }\n }\n\ndiff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n@@ -1,13 +1,17 @@\n package com.airbnb.lotte.samples;\n \n+import android.animation.Animator;\n+import android.annotation.SuppressLint;\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n import android.support.v4.app.Fragment;\n+import android.support.v4.util.Pair;\n import android.support.v7.widget.AppCompatSeekBar;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.SeekBar;\n+import android.widget.TextView;\n import android.widget.ToggleButton;\n \n import com.airbnb.lotte.LotteAnimationView;\n@@ -31,6 +35,9 @@ static AnimationFragment newInstance(String fileName) {\n     @BindView(R.id.animation_view) LotteAnimationView animationView;\n     @BindView(R.id.seek_bar) AppCompatSeekBar seekBar;\n     @BindView(R.id.loop_button) ToggleButton loopButton;\n+    @BindView(R.id.frames_per_second) TextView fpsView;\n+    @BindView(R.id.dropped_frames) TextView droppedFramesView;\n+    @BindView(R.id.dropped_frames_per_second) TextView droppedFramesPerSecondView;\n \n     @Nullable\n     @Override\n@@ -40,27 +47,49 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n         String fileName = getArguments().getString(ARG_FILE_NAME);\n         animationView.setAnimation(fileName);\n+        animationView.addAnimatorListener(new Animator.AnimatorListener() {\n+            @Override\n+            public void onAnimationStart(Animator animation) {\n+                startRecordingDroppedFrames();\n+            }\n \n-        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n             @Override\n-            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n-                animationView.setProgress(progress / 100f);\n+            public void onAnimationEnd(Animator animation) {\n+                recordDroppedFrames();\n             }\n \n             @Override\n-            public void onStartTrackingTouch(SeekBar seekBar) {\n+            public void onAnimationCancel(Animator animation) {}\n \n+            @Override\n+            public void onAnimationRepeat(Animator animation) {\n+                recordDroppedFrames();\n+                startRecordingDroppedFrames();\n             }\n+        });\n \n+        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n             @Override\n-            public void onStopTrackingTouch(SeekBar seekBar) {\n-\n+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n+                animationView.setProgress(progress / 100f);\n             }\n+\n+            @Override\n+            public void onStartTrackingTouch(SeekBar seekBar) {}\n+\n+            @Override\n+            public void onStopTrackingTouch(SeekBar seekBar) {}\n         });\n \n         return view;\n     }\n \n+    @Override\n+    public void onStop() {\n+        animationView.cancelAnimation();\n+        super.onStop();\n+    }\n+\n     @OnClick(R.id.play)\n     public void onPlayClicked() {\n         animationView.play();\n@@ -70,4 +99,23 @@ public void onPlayClicked() {\n     public void onLoopChanged(boolean loop) {\n         animationView.loop(loop);\n     }\n+\n+    private void startRecordingDroppedFrames() {\n+        getApplication().startRecordingDroppedFrames();\n+    }\n+\n+    @SuppressLint({\"SetTextI18n\", \"DefaultLocale\"})\n+    private void recordDroppedFrames() {\n+        Pair<Integer, Long> droppedFrames = getApplication().stopRecordingDroppedFrames();\n+        int targetFrames = (int) ((droppedFrames.second / 1000000000f) * animationView.getFrameRate());\n+        int actualFrames = targetFrames - droppedFrames.first;\n+        fpsView.setText(String.format(\"Fps: %.0f\", actualFrames / (animationView.getDuration() / 1000f)));\n+        droppedFramesView.setText(\"Dropped frames: \" + droppedFrames.first);\n+        float droppedFps = droppedFrames.first / (droppedFrames.second / 1000000000f);\n+        droppedFramesPerSecondView.setText(String.format(\"Dropped frames per second: %.0f\", droppedFps));\n+    }\n+\n+    private ILotteApplication getApplication() {\n+        return (ILotteApplication) getActivity().getApplication();\n+    }\n }\n\ndiff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/ILotteApplication.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/ILotteApplication.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/ILotteApplication.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/ILotteApplication.java\n@@ -0,0 +1,9 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.support.v4.util.Pair;\n+\n+interface ILotteApplication {\n+    void startRecordingDroppedFrames();\n+    /** Returns the number of frames dropped since starting **/\n+    Pair<Integer, Long> stopRecordingDroppedFrames();\n+}\n\ndiff --git a/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java b/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java\n--- a/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java\n+++ b/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java\n@@ -1,6 +1,15 @@\n package com.airbnb.lotte.samples;\n \n import android.app.Application;\n+import android.support.v4.util.Pair;\n \n-public class LotteApplication extends Application {\n+public class LotteApplication extends Application implements ILotteApplication {\n+    @Override\n+    public void startRecordingDroppedFrames() {\n+    }\n+\n+    @Override\n+    public Pair<Integer, Long> stopRecordingDroppedFrames() {\n+        return new Pair<>(0, 0L);\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -231,11 +231,19 @@ public void play() {\n         rootAnimatableLayer.play();\n     }\n \n-    public void pause() {\n-        rootAnimatableLayer.pause();\n+    public void cancelAnimation() {\n+        rootAnimatableLayer.cancelAnimation();\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n         rootAnimatableLayer.setProgress(progress);\n     }\n+\n+    public int getFrameRate() {\n+        return composition.getFrameRate();\n+    }\n+\n+    public long getDuration() {\n+        return composition.getDuration();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n@@ -41,8 +41,8 @@ public void play() {\n         animator.start();\n     }\n \n-    public void pause() {\n-        animator.start();\n+    public void cancelAnimation() {\n+        animator.cancel();\n     }\n \n     public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {",
    "output": "Added FPS debug information to the sample app"
  },
  {
    "input": "diff --git a/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java b/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n--- a/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n+++ b/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n@@ -11,19 +11,9 @@ public class LotteApplication extends Application {\n     @Override\n     public void onCreate() {\n         TinyDancer.create()\n-                .show(this);\n-\n-        //alternatively\n-        TinyDancer.create()\n-                .redFlagPercentage(.1f) // set red indicator for 10%\n-                .startingGravity(Gravity.TOP)\n-                .startingXPosition(200)\n-                .startingYPosition(600)\n-                .show(this);\n-\n-        //you can add a callback to get frame times and the calculated\n-        //number of dropped frames within that window\n-        TinyDancer.create()\n+                .startingGravity(Gravity.TOP|Gravity.END)\n+                .startingXPosition(50)\n+                .startingYPosition(50)\n                 .addFrameDataCallback(new FrameDataCallback() {\n                     @Override\n                     public void doFrame(long previousFrameNS, long currentFrameNS, int droppedFrames) {",
    "output": "Cleaned up TinyDancer init and positioning"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -5,6 +5,7 @@\n import android.content.Context;\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;",
    "output": "Readded a missing import from a merge conflict"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -5,7 +5,6 @@\n import android.content.Context;\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n-import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;\n@@ -58,7 +57,6 @@ private void init(@Nullable AttributeSet attrs) {\n         }\n         ta.recycle();\n         setLayerType(LAYER_TYPE_SOFTWARE, null);\n-        setImageDrawable(rootAnimatableLayer);\n     }\n \n     @Override\n@@ -164,6 +162,7 @@ public void setComposition(LotteComposition composition) {\n         rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n         buildSubviewsForComposition();\n         requestLayout();\n+        setImageDrawable(rootAnimatableLayer);\n     }\n \n     private void buildSubviewsForComposition() {",
    "output": "Fixed root drawable creation on pre-Marshmallow devices"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -170,25 +170,10 @@ private void buildSubviewsForComposition() {\n         List<LotteLayer> reversedLayers = composition.getLayers();\n         Collections.reverse(reversedLayers);\n \n-        boolean needsMatte = false;\n-        boolean needsMask = false;\n-        for (int i = 0; i < reversedLayers.size(); i++) {\n-            LotteLayer layer = reversedLayers.get(i);\n-            if (layer.getMatteType() != null && layer.getMatteType() != LotteLayer.MatteType.None) {\n-                needsMatte = true;\n-            }\n-            if (!layer.getMasks().isEmpty()) {\n-                needsMask = true;\n-            }\n-            if (needsMatte && needsMask) {\n-                break;\n-            }\n-        }\n-\n         Rect bounds = composition.getBounds();\n-        Bitmap mainBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);\n-        Bitmap maskBitmap = needsMask ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n-        Bitmap matteBitmap = needsMatte ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n+        Bitmap mainBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n+        Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n+        Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n \n         Bitmap mainBitmapForMatte = null;\n         Bitmap maskBitmapForMatte = null;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -13,6 +13,7 @@\n import android.graphics.drawable.Drawable;\n import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n import android.util.SparseArray;\n \n import com.airbnb.lotte.animation.LotteAnimatableProperty;\n@@ -41,12 +42,12 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private LotteLayerView matte;\n \n     private final Paint mainCanvasPaint = new Paint();\n-    private final Bitmap bitmap;\n-    private final Bitmap maskBitmap;\n-    private final Bitmap matteBitmap;\n-    private final Canvas contentCanvas;\n-    private Canvas maskCanvas;\n-    private Canvas matteCanvas;\n+    @Nullable private final Bitmap contentBitmap;\n+    @Nullable private final Bitmap maskBitmap;\n+    @Nullable private final Bitmap matteBitmap;\n+    @Nullable private Canvas contentCanvas;\n+    @Nullable private Canvas maskCanvas;\n+    @Nullable private Canvas matteCanvas;\n     private final Paint maskShapePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n     private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n     private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n@@ -60,16 +61,21 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private Observable<Number> opacity;\n \n \n-    public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callback callback, Bitmap mainBitmap, Bitmap maskBitmap, Bitmap matteBitmap) {\n+    public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {\n         super(composition.getDuration(), callback);\n         this.layerModel = layerModel;\n         this.composition = composition;\n         this.maskBitmap = maskBitmap;\n         this.matteBitmap = matteBitmap;\n-        this.bitmap = mainBitmap;\n+        this.contentBitmap = mainBitmap;\n         setBounds(composition.getBounds());\n-        maskPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n-        contentCanvas = new Canvas(bitmap);\n+        if (contentBitmap != null) {\n+            contentCanvas = new Canvas(contentBitmap);\n+            if (maskBitmap != null) {\n+                maskPaint.setShader(new BitmapShader(contentBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+            }\n+        }\n+\n         setupForModel(callback);\n     }\n \n@@ -136,7 +142,7 @@ public void onChanged() {\n             }\n         }\n \n-        if (layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {\n+        if (maskBitmap != null && layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition, getCallback());\n             maskCanvas = new Canvas(maskBitmap);\n         }\n@@ -181,13 +187,18 @@ public void setMask(LotteMaskLayer mask) {\n     }\n \n     public void setMatte(LotteLayerView matte) {\n+        if (matteBitmap == null) {\n+            throw new IllegalArgumentException(\"Cannot set a matte if no matte contentBitmap was given!\");\n+        }\n         this.matte = matte;\n         matteCanvas = new Canvas(matteBitmap);\n     }\n \n     @Override\n     public void draw(@NonNull Canvas mainCanvas) {\n-        bitmap.eraseColor(Color.TRANSPARENT);\n+        if (contentBitmap != null) {\n+            contentBitmap.eraseColor(Color.TRANSPARENT);\n+        }\n         if (maskBitmap != null) {\n             maskBitmap.eraseColor(Color.TRANSPARENT);\n         }\n@@ -197,10 +208,14 @@ public void draw(@NonNull Canvas mainCanvas) {\n         if (!isVisible()) {\n             return;\n         }\n+        if (contentCanvas == null || contentBitmap != null) {\n+            super.draw(mainCanvas);\n+            return;\n+        }\n         super.draw(contentCanvas);\n \n         Bitmap mainBitmap;\n-        if (mask != null && !mask.getMasks().isEmpty()) {\n+        if (maskBitmap != null && maskCanvas != null && mask != null && !mask.getMasks().isEmpty()) {\n             int maskSaveCount = maskCanvas.save();\n             long parentId = this.parentId;\n             while (parentId >= 0) {\n@@ -222,14 +237,16 @@ public void draw(@NonNull Canvas mainCanvas) {\n             mainBitmap = maskBitmap;\n         } else {\n             if (matte == null) {\n-                mainCanvas.drawBitmap(bitmap, 0, 0, mainCanvasPaint);\n+                //noinspection ConstantConditions\n+                mainCanvas.drawBitmap(contentBitmap, 0, 0, mainCanvasPaint);\n             }\n-            mainBitmap = bitmap;\n+            mainBitmap = contentBitmap;\n         }\n \n-        if (matte != null) {\n+        if (matteCanvas != null && matteBitmap != null && matte != null) {\n             matte.draw(matteCanvas);\n             mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n+            //noinspection ConstantConditions\n             matteCanvas.drawBitmap(mainBitmap, 0, 0, mattePaint);\n             mainCanvas.drawBitmap(matteBitmap, 0, 0, mainCanvasPaint);\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteComposition.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteComposition.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteComposition.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteComposition.java\n@@ -48,6 +48,12 @@ public static LotteComposition fromJson(JSONObject json) {\n                 LotteLayer layer = LotteLayer.fromJson(jsonLayers.getJSONObject(i), composition);\n                 composition.layers.add(layer);\n                 composition.layerMap.put(layer.getId(), layer);\n+                if (!layer.getMasks().isEmpty()) {\n+                    composition.hasMasks = true;\n+                }\n+                if (layer.getMatteType() != null && layer.getMatteType() != LotteLayer.MatteType.None) {\n+                    composition.hasMattes = true;\n+                }\n             }\n         } catch (JSONException e) {\n             throw new IllegalStateException(\"Unable to find layers.\", e);\n@@ -64,6 +70,8 @@ public static LotteComposition fromJson(JSONObject json) {\n     private long endFrame;\n     private int frameRate;\n     private long duration;\n+    private boolean hasMasks;\n+    private boolean hasMattes;\n \n     public LotteLayer layerModelForId(long id) {\n         return layerMap.get(id);\n@@ -89,10 +97,6 @@ public long getEndFrame() {\n         return endFrame;\n     }\n \n-    public void setEndFrame(long endFrame) {\n-        this.endFrame = endFrame;\n-    }\n-\n     public int getFrameRate() {\n         return frameRate;\n     }\n@@ -113,7 +117,11 @@ public long getStartFrame() {\n         return startFrame;\n     }\n \n-    public void setStartFrame(long startFrame) {\n-        this.startFrame = startFrame;\n+    public boolean hasMasks() {\n+        return hasMasks;\n+    }\n+\n+    public boolean hasMattes() {\n+        return hasMattes;\n     }\n }",
    "output": "If there are no masks or mattes, draw on the original canvas"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -172,7 +172,8 @@ private void buildSubviewsForComposition() {\n \n         boolean needsMatte = false;\n         boolean needsMask = false;\n-        for (LotteLayer layer : reversedLayers) {\n+        for (int i = 0; i < reversedLayers.size(); i++) {\n+            LotteLayer layer = reversedLayers.get(i);\n             if (layer.getMatteType() != null && layer.getMatteType() != LotteLayer.MatteType.None) {\n                 needsMatte = true;\n             }\n@@ -193,7 +194,8 @@ private void buildSubviewsForComposition() {\n         Bitmap maskBitmapForMatte = null;\n         Bitmap matteBitmapForMatte = null;\n         LotteLayerView maskedLayer = null;\n-        for (LotteLayer layer : reversedLayers) {\n+        for (int i = 0; i < reversedLayers.size(); i++) {\n+            LotteLayer layer = reversedLayers.get(i);\n             LotteLayerView layerView;\n             if (maskedLayer == null) {\n                 layerView = new LotteLayerView(layer, composition, this, mainBitmap, maskBitmap, matteBitmap);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n@@ -31,8 +31,8 @@ public LotteAnimationGroup(List<LotteKeyframeAnimation> animations) {\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n-        for (LotteKeyframeAnimation animation : animations) {\n-            animation.setProgress(progress);\n+        for (int i = 0; i < animations.size(); i++) {\n+            animations.get(i).setProgress(progress);\n         }\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -84,8 +84,8 @@ public void draw(@NonNull Canvas canvas) {\n         if (solidBackgroundPaint.getAlpha() != 0) {\n             canvas.drawRect(getBounds(), solidBackgroundPaint);\n         }\n-        for (Drawable layer : layers) {\n-            layer.draw(canvas);\n+        for (int i = 0; i < layers.size(); i++) {\n+            layers.get(i).draw(canvas);\n         }\n         canvas.restore();\n     }\n@@ -148,12 +148,12 @@ public void addLayer(LotteAnimatableLayer layer) {\n     }\n \n     public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-        for (LotteAnimationGroup animation : animations) {\n-            animation.setProgress(progress);\n+        for (int i = 0; i < animations.size(); i++) {\n+            animations.get(i).setProgress(progress);\n         }\n \n-        for (LotteAnimatableLayer layer : layers) {\n-            layer.setProgress(progress);\n+        for (int i = 0; i < layers.size(); i++) {\n+            layers.get(i).setProgress(progress);\n         }\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n@@ -59,7 +59,8 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n         LotteShapeTransform currentTransform = null;\n         LotteShapeTrimPath currentTrim = previousTrimPath;\n \n-        for (Object item : reversedItems) {\n+        for (int i = 0; i < reversedItems.size(); i++) {\n+            Object item = reversedItems.get(i);\n             if (item instanceof LotteShapeTransform) {\n                 currentTransform = (LotteShapeTransform) item;\n             } else if (item instanceof LotteShapeStroke) {\n@@ -89,6 +90,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n                 groupLayers.add(groupLayer);\n                 addLayer(groupLayer);\n             }\n+\n         }\n \n         buildAnimation();\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -5,6 +5,7 @@\n import android.graphics.Canvas;\n import android.graphics.Color;\n import android.graphics.Paint;\n+import android.graphics.Path;\n import android.graphics.PointF;\n import android.graphics.PorterDuff;\n import android.graphics.PorterDuffXfermode;\n@@ -18,7 +19,6 @@\n import com.airbnb.lotte.animation.LotteAnimatableValue;\n import com.airbnb.lotte.animation.LotteAnimationGroup;\n import com.airbnb.lotte.model.LotteComposition;\n-import com.airbnb.lotte.model.LotteMask;\n import com.airbnb.lotte.model.LotteShapeFill;\n import com.airbnb.lotte.model.LotteShapeGroup;\n import com.airbnb.lotte.model.LotteShapeStroke;\n@@ -119,7 +119,8 @@ public void onChanged() {\n         LotteShapeFill currentFill = null;\n         LotteShapeStroke currentStroke = null;\n \n-        for (Object item : reversedItems) {\n+        for (int i = 0; i < reversedItems.size(); i++) {\n+            Object item = reversedItems.get(i);\n             if (item instanceof LotteShapeGroup) {\n                 LotteGroupLayerView groupLayer = new LotteGroupLayerView((LotteShapeGroup) item, currentFill,\n                         currentStroke, currentTrimPath, currentTransform, compDuration, getCallback());\n@@ -210,8 +211,9 @@ public void draw(@NonNull Canvas mainCanvas) {\n \n             applyTransformForLayer(maskCanvas, layerModel);\n \n-            for (LotteMask m : mask.getMasks()) {\n-                maskCanvas.drawPath(m.getMaskPath().getObservable().getValue(), maskShapePaint);\n+            for (int i = 0; i < mask.getMasks().size(); i++) {\n+                Path path = mask.getMasks().get(i).getMaskPath().getObservable().getValue();\n+                maskCanvas.drawPath(path, maskShapePaint);\n             }\n             maskCanvas.restoreToCount(maskSaveCount);\n             if (matte == null) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -67,8 +67,8 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         }\n         this.progress = progress;\n \n-        for (AnimationListener<T> l : listeners) {\n-            l.onValueChanged(getValueForProgress(progress));\n+        for (int i = 0; i < listeners.size(); i++) {\n+            listeners.get(i).onValueChanged(getValueForProgress(progress));\n         }\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/MiscUtils.java b/lotte/src/main/java/com/airbnb/lotte/utils/MiscUtils.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/MiscUtils.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/MiscUtils.java\n@@ -17,7 +17,8 @@ public static void getPathFromData(LotteShapeData shapeData, Path outPath) {\n         outPath.reset();\n         PointF initialPoint = shapeData.getInitialPoint();\n         outPath.moveTo(initialPoint.x, initialPoint.y);\n-        for (LotteCubicCurveData curveData : shapeData.getCurves()) {\n+        for (int i = 0; i < shapeData.getCurves().size(); i++) {\n+            LotteCubicCurveData curveData = shapeData.getCurves().get(i);\n             outPath.cubicTo(curveData.getControlPoint1().x, curveData.getControlPoint1().y,\n                     curveData.getControlPoint2().x, curveData.getControlPoint2().y,\n                     curveData.getVertex().x, curveData.getVertex().y);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/Observable.java b/lotte/src/main/java/com/airbnb/lotte/utils/Observable.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/Observable.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/Observable.java\n@@ -33,8 +33,8 @@ public void removeChangeListemer(OnChangedListener listener) {\n \n     public void setValue(T value) {\n         this.value = value;\n-        for (OnChangedListener listener : listeners) {\n-            listener.onChanged();\n+        for (int i = 0; i < listeners.size(); i++) {\n+            listeners.get(i).onChanged();\n         }\n     }\n ",
    "output": "Replace all foreach loops with fori loops for performance\n\nAccording to systrace, the iterators for the foreach loops added up\nsince they were getting called so frequently (setProgress for each layer\nand observable updates for each layer)"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -33,6 +33,7 @@ public class LotteAnimationView extends ImageView {\n     private final RootLotteAnimatableLayer rootAnimatableLayer = new RootLotteAnimatableLayer(this);\n \n     private LotteComposition composition;\n+    private boolean hasInvalidatedThisFrame;\n \n     public LotteAnimationView(Context context) {\n         super(context);\n@@ -75,8 +76,17 @@ protected boolean verifyDrawable(Drawable drawable) {\n     }\n \n     @Override\n-    public void draw(Canvas canvas) {\n-        super.draw(canvas);\n+    public void invalidateDrawable(Drawable dr) {\n+        if (!hasInvalidatedThisFrame) {\n+            super.invalidateDrawable(rootAnimatableLayer);\n+            hasInvalidatedThisFrame = true;\n+        }\n+    }\n+\n+    @Override\n+    protected void onDraw(Canvas canvas) {\n+        hasInvalidatedThisFrame = false;\n+        super.onDraw(canvas);\n     }\n \n     public void setAnimation(String animationName) {",
    "output": "Limit invalidateDrawable to once per frame"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -1,5 +1,7 @@\n package com.airbnb.lotte;\n \n+import android.animation.Animator;\n+import android.animation.ValueAnimator;\n import android.content.Context;\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n@@ -151,6 +153,22 @@ public void setModel(LotteComposition composition) {\n         rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n     }\n \n+    public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n+        rootAnimatableLayer.addAnimatorUpdateListener(updateListener);\n+    }\n+\n+    public void removeUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n+        rootAnimatableLayer.removeAnimatorUpdateListener(updateListener);\n+    }\n+\n+    public void addAnimatorListener(Animator.AnimatorListener listener) {\n+        rootAnimatableLayer.addAnimatorListener(listener);\n+    }\n+\n+    public void removeAnimatorListener(Animator.AnimatorListener listener) {\n+        rootAnimatableLayer.removeAnimatorListener(listener);\n+    }\n+\n     public void loop(boolean loop) {\n         rootAnimatableLayer.loop(loop);\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lotte.layers;\n \n+import android.animation.Animator;\n import android.animation.ValueAnimator;\n import android.graphics.Canvas;\n import android.graphics.drawable.Drawable;\n@@ -37,6 +38,22 @@ public void play() {\n         animator.start();\n     }\n \n+    public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n+        animator.addUpdateListener(updateListener);\n+    }\n+\n+    public void removeAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {\n+        animator.removeUpdateListener(updateListener);\n+    }\n+\n+    public void addAnimatorListener(Animator.AnimatorListener listener) {\n+        animator.addListener(listener);\n+    }\n+\n+    public void removeAnimatorListener(Animator.AnimatorListener listener) {\n+        animator.removeListener(listener);\n+    }\n+\n     @Override\n     public int getIntrinsicWidth() {\n         return getBounds().width();",
    "output": "Add animation listeners to RootAnimatableLayer and LotteAnimationView"
  },
  {
    "input": "diff --git a/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java b/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n--- a/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n+++ b/LotteSample/src/debug/java/com/airbnb/lotte/samples/LotteApplication.java\n@@ -0,0 +1,35 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.app.Application;\n+import android.view.Gravity;\n+\n+import com.codemonkeylabs.fpslibrary.FrameDataCallback;\n+import com.codemonkeylabs.fpslibrary.TinyDancer;\n+\n+public class LotteApplication extends Application {\n+\n+    @Override\n+    public void onCreate() {\n+        TinyDancer.create()\n+                .show(this);\n+\n+        //alternatively\n+        TinyDancer.create()\n+                .redFlagPercentage(.1f) // set red indicator for 10%\n+                .startingGravity(Gravity.TOP)\n+                .startingXPosition(200)\n+                .startingYPosition(600)\n+                .show(this);\n+\n+        //you can add a callback to get frame times and the calculated\n+        //number of dropped frames within that window\n+        TinyDancer.create()\n+                .addFrameDataCallback(new FrameDataCallback() {\n+                    @Override\n+                    public void doFrame(long previousFrameNS, long currentFrameNS, int droppedFrames) {\n+                        //collect your stats here\n+                    }\n+                })\n+                .show(this);\n+    }\n+}\n\ndiff --git a/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java b/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java\n--- a/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java\n+++ b/LotteSample/src/release/java/com/airbnb/lotte/samples/LotteApplication.java\n@@ -0,0 +1,6 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.app.Application;\n+\n+public class LotteApplication extends Application {\n+}",
    "output": "Added tiny dancer"
  },
  {
    "input": "diff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/AlarmTest.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/AlarmTest.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/AlarmTest.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/AlarmTest.java\n@@ -0,0 +1,127 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.test.ActivityInstrumentationTestCase2;\n+\n+import com.airbnb.lotte.LotteAnimationView;\n+import com.facebook.testing.screenshot.Screenshot;\n+import com.facebook.testing.screenshot.ViewHelpers;\n+\n+import org.junit.Test;\n+\n+public class AlarmTest extends ActivityInstrumentationTestCase2<MainActivity> {\n+\n+    public AlarmTest() {\n+        super(MainActivity.class);\n+    }\n+\n+    @Test\n+    public void testAlarm0() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 0\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm10() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(0.10f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 10\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm15() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(0.15f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 15\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm20() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(0.20f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 20\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm25() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(0.25f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 25\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm50() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(0.50f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 50\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm75() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(0.75f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 75\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testAlarm100() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"Alarm.json\");\n+        view.setProgress(1f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"Alarm\")\n+                .setName(\"Alarm 100\")\n+                .record();\n+    }\n+}\n\\ No newline at end of file",
    "output": "Added some json and an alarm test"
  },
  {
    "input": "diff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CheckSwitchTest.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CheckSwitchTest.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CheckSwitchTest.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CheckSwitchTest.java\n@@ -0,0 +1,127 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.test.ActivityInstrumentationTestCase2;\n+\n+import com.airbnb.lotte.LotteAnimationView;\n+import com.facebook.testing.screenshot.Screenshot;\n+import com.facebook.testing.screenshot.ViewHelpers;\n+\n+import org.junit.Test;\n+\n+public class CheckSwitchTest extends ActivityInstrumentationTestCase2<MainActivity> {\n+\n+    public CheckSwitchTest() {\n+        super(MainActivity.class);\n+    }\n+\n+    @Test\n+    public void testCheckSwitch0() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 0\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch10() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(0.10f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 10\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch15() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(0.15f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 15\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch20() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(0.20f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 20\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch25() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(0.25f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 25\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch50() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(0.50f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 50\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch75() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(0.75f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 75\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCheckSwitch100() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"CheckSwitch.json\");\n+        view.setProgress(1f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"CheckSwitch\")\n+                .setName(\"CheckSwitch 100\")\n+                .record();\n+    }\n+}\n\\ No newline at end of file\n\ndiff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CityTest.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CityTest.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CityTest.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/CityTest.java\n@@ -0,0 +1,128 @@\n+package com.airbnb.lotte.samples;\n+\n+\n+import android.test.ActivityInstrumentationTestCase2;\n+\n+import com.airbnb.lotte.LotteAnimationView;\n+import com.facebook.testing.screenshot.Screenshot;\n+import com.facebook.testing.screenshot.ViewHelpers;\n+\n+import org.junit.Test;\n+\n+public class CityTest extends ActivityInstrumentationTestCase2<MainActivity> {\n+\n+    public CityTest() {\n+        super(MainActivity.class);\n+    }\n+\n+    @Test\n+    public void testCity0() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 0\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity10() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(0.10f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 10\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity15() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(0.15f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 15\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity20() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(0.20f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 20\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity25() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(0.25f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 25\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity50() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(0.50f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 50\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity75() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(0.75f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 75\")\n+                .record();\n+    }\n+\n+    @Test\n+    public void testCity100() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimationSync(\"City.json\");\n+        view.setProgress(1f);\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setGroup(\"City\")\n+                .setName(\"City 100\")\n+                .record();\n+    }\n+}\n\\ No newline at end of file",
    "output": "Added city and check switch tests"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -68,13 +68,15 @@ public void onChanged() {\n         }\n     };\n \n+\n+\n     private final RectF bounds = new RectF();\n     private final Paint paint = new Paint();\n     private final Path trimPath = new Path();\n     private PathMeasure pathMeasure = new PathMeasure();\n     private float pathLength;\n \n-    private Observable<LotteTransform3D> scale = new Observable<>(new LotteTransform3D());\n+    @Nullable private Observable<LotteTransform3D> scale;\n     private final RectF scaleRect = new RectF();\n     private final Matrix scaleMatrix = new Matrix();\n     private Path scaledPath = new Path();\n@@ -94,7 +96,6 @@ public LotteShapeLayer(Drawable.Callback callback) {\n         super(0, callback);\n         paint.setStyle(Paint.Style.FILL);\n         paint.setAntiAlias(true);\n-        scale.getValue().scale(1f, 1f);\n     }\n \n     public void setStyle(Paint.Style style) {\n@@ -135,10 +136,13 @@ public void setPath(Observable<Path> path) {\n     }\n \n     private void onPathChanged() {\n-        if (path != null && path.getValue() != null && scale != null && scale.getValue() != null) {\n+        if (path != null && path.getValue() != null && scale != null) {\n             path.getValue().computeBounds(scaleRect, true);\n             scaleMatrix.setScale(scale.getValue().getScaleX(), scale.getValue().getScaleY(), scaleRect.centerX(), scaleRect.centerY());\n             path.getValue().transform(scaleMatrix, scaledPath);\n+        } else {\n+            scaledPath.reset();\n+            scaledPath.set(path.getValue());\n         }\n         pathMeasure.setPath(scaledPath, false);\n         // Cache for perf.\n@@ -305,7 +309,11 @@ public void setTrimPath(Observable<Number> strokeStart, Observable<Number> strok\n     }\n \n     public void setScale(Observable<LotteTransform3D> scale) {\n+        if (this.scale != null) {\n+            this.scale.removeChangeListemer(pathChangedListener);\n+        }\n         this.scale = scale;\n+        scale.addChangeListener(pathChangedListener);\n         onPathChanged();\n     }\n }",
    "output": "Add a change listener for shape scale values"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -204,7 +204,7 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)\n                 keys.add(0f);\n                 keyTimes.add(1f);\n             } else {\n-                keys.add(0f);\n+                keys.add(1f);\n                 keyTimes.add(1f);\n             }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -10,6 +10,7 @@\n import android.graphics.PorterDuffXfermode;\n import android.graphics.Shader;\n import android.graphics.drawable.Drawable;\n+import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n import android.util.SparseArray;\n \n@@ -73,7 +74,6 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callb\n     }\n \n     private void setupForModel(Drawable.Callback callback) {\n-        setBounds(composition.getBounds());\n         anchorPoint = new Observable<>();\n         anchorPoint.setValue(new PointF());\n \n@@ -245,6 +245,30 @@ private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {\n         canvas.translate(-translation.x, -translation.y);\n     }\n \n+    @Override\n+    public void play() {\n+        super.play();\n+        if (matte != null) {\n+            matte.play();\n+        }\n+    }\n+\n+    @Override\n+    public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        super.setProgress(progress);\n+        if (matte != null) {\n+            matte.setProgress(progress);\n+        }\n+    }\n+\n+    @Override\n+    public void setMaxDuration(long maxDuration) {\n+        super.setMaxDuration(maxDuration);\n+        if (matte != null) {\n+            matte.setMaxDuration(maxDuration);\n+        }\n+    }\n+\n     public long getId() {\n         return layerModel.getId();\n     }",
    "output": "Wired up some missing calls to matte layers"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -214,7 +214,6 @@ private void buildSubviewsForModel() {\n             }\n         }\n \n-        long maxDuration = rootAnimatableLayer.getMaxDuration();\n-        rootAnimatableLayer.setMaxDuration(maxDuration);\n+        rootAnimatableLayer.setMaxDuration(sceneModel.getDuration());\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n@@ -12,7 +12,6 @@\n public class LotteAnimationGroup {\n \n     private final List<LotteKeyframeAnimation> animations;\n-    private long maxDuration = 0;\n \n     public LotteAnimationGroup(SparseArray<LotteAnimatableValue> propertyAnimations) {\n         animations = new ArrayList<>(propertyAnimations.size());\n@@ -23,11 +22,6 @@ public LotteAnimationGroup(SparseArray<LotteAnimatableValue> propertyAnimations)\n             if (animatableValue.hasAnimation()) {\n                 LotteKeyframeAnimation animation = animatableValue.animationForKeyPath(property);\n                 animations.add(animation);\n-\n-                long animationDuration = animation.getDuration() + animation.getStartDelay();\n-                if (animationDuration > maxDuration) {\n-                    maxDuration = animationDuration;\n-                }\n             }\n         }\n     }\n@@ -48,12 +42,7 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n         }\n     }\n \n-    public long getMaxDuration() {\n-        return maxDuration;\n-    }\n-\n     public void setMaxDuration(long maxDuration) {\n-        this.maxDuration = maxDuration;\n         for (LotteKeyframeAnimation<?> animation : animations) {\n             animation.setTotalDuration(maxDuration);\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -45,6 +45,7 @@ public void onChanged() {\n \n     private final Paint solidBackgroundPaint = new Paint();\n     protected final List<LotteAnimationGroup> animations = new ArrayList<>();\n+    private float progress;\n \n     public LotteAnimatableLayer(long duration, Drawable.Callback callback) {\n         setCallback(callback);\n@@ -173,6 +174,7 @@ public void play() {\n     }\n \n     public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        this.progress = progress;\n         for (LotteAnimationGroup animation : animations) {\n             animation.setProgress(progress);\n         }\n@@ -182,23 +184,6 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         }\n     }\n \n-    public long getMaxDuration() {\n-        long maxDuration = 0;\n-        for (LotteAnimationGroup animationGroup : animations) {\n-            long md = animationGroup.getMaxDuration();\n-            if (md > maxDuration) {\n-                maxDuration = md;\n-            }\n-        }\n-        for (LotteAnimatableLayer layer : layers) {\n-            long md = layer.getMaxDuration();\n-            if (md > maxDuration) {\n-                maxDuration = md;\n-            }\n-        }\n-        return maxDuration;\n-    }\n-\n     public void setMaxDuration(long maxDuration) {\n         for (LotteAnimationGroup animationGroup : animations) {\n             animationGroup.setMaxDuration(maxDuration);",
    "output": "Use comp duration instead of manually calculating maxDuration"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -206,6 +206,7 @@ public void updateCircle(Observable<PointF> circlePosition, Observable<PointF> c\n         private void onCircleSizeChanged() {\n             float halfWidth = circleSize.getValue().x / 2f;\n             float halfHeight = circleSize.getValue().y / 2f;\n+            setBounds(0, 0, (int) halfWidth * 2, (int) halfHeight * 2);\n \n             PointF circleQ1 = new PointF(0, -halfHeight);\n             PointF circleQ2 = new PointF(halfWidth, 0);\n@@ -250,16 +251,19 @@ private void updateTrimPath() {\n                 float start = length * ((Float) strokeStart.getValue()) / 100f;\n                 float end = length * ((Float) strokeEnd.getValue()) / 100f;\n \n+                trimPath.reset();\n                 pathMeasure.getSegment(\n                         Math.min(start, end),\n                         Math.max(start, end),\n                         trimPath,\n                         true);\n             }\n+            invalidateSelf();\n         }\n \n         public void setStyle(Paint.Style style) {\n             paint.setStyle(style);\n+            invalidateSelf();\n         }\n \n         public void setLineWidth(Observable<Number> lineWidth) {\n@@ -273,6 +277,7 @@ public void setLineWidth(Observable<Number> lineWidth) {\n \n         private void onLineWidthChanged() {\n             paint.setStrokeWidth((float) lineWidth.getValue());\n+            invalidateSelf();\n         }\n \n         public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {\n@@ -301,6 +306,9 @@ private void onDashPatternChanged() {\n             float[] values = new float[lineDashPattern.size()];\n             for (int i = 0; i < lineDashPattern.size(); i++) {\n                 values[i] = (float) lineDashPattern.get(i).getObservable().getValue();\n+                if (values[i] == 0) {\n+                    values[i] = 0.01f;\n+                }\n             }\n             assert lineDashPatternOffset != null;\n             paint.setPathEffect(new DashPathEffect(values, (float) lineDashPatternOffset.getObservable().getValue()));\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -258,6 +258,9 @@ private void onDashPatternChanged() {\n         float[] values = new float[lineDashPattern.size()];\n         for (int i = 0; i < lineDashPattern.size(); i++) {\n             values[i] = (float) lineDashPattern.get(i).getObservable().getValue();\n+            if (values[i] == 0) {\n+                values[i] = 0.01f;\n+            }\n         }\n         paint.setPathEffect(new DashPathEffect(values, (float) lineDashPatternOffset.getObservable().getValue()));\n         invalidateSelf();",
    "output": "Fixed dash patterns not working when a value was 0"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -297,15 +297,17 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot\n         }\n \n         private void onDashPatternChanged() {\n+            assert lineDashPattern != null;\n             float[] values = new float[lineDashPattern.size()];\n             for (int i = 0; i < lineDashPattern.size(); i++) {\n                 values[i] = (float) lineDashPattern.get(i).getObservable().getValue();\n             }\n+            assert lineDashPatternOffset != null;\n             paint.setPathEffect(new DashPathEffect(values, (float) lineDashPatternOffset.getObservable().getValue()));\n             invalidateSelf();\n         }\n \n-        public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n+        void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n             switch (lineCapType) {\n                 case Round:\n                     paint.setStrokeCap(Paint.Cap.ROUND);\n@@ -316,21 +318,7 @@ public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n             }\n         }\n \n-        public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n-            switch (lineJoinType) {\n-                case Bevel:\n-                    paint.setStrokeJoin(Paint.Join.BEVEL);\n-                    break;\n-                case Miter:\n-                    paint.setStrokeJoin(Paint.Join.MITER);\n-                    break;\n-                case Round:\n-                    paint.setStrokeJoin(Paint.Join.ROUND);\n-                    break;\n-            }\n-        }\n-\n-        void setColor(Observable<Integer> color) {\n+        void setColor(@SuppressWarnings(\"NullableProblems\") Observable<Integer> color) {\n             if (this.color != null) {\n                 this.color.removeChangeListemer(colorChangedListener);\n             }",
    "output": "Minor nit cleanup in LotteEllipseShapeLayer"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -180,7 +180,7 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)\n \n         layer.hasInAnimation = layer.inFrame > composition.getStartFrame();\n         layer.hasOutAnimation = layer.outFrame < composition.getEndFrame();\n-        layer.hasInOutAnimation = layer.hasInOutAnimation || layer.hasOutAnimation;\n+        layer.hasInOutAnimation = layer.hasInAnimation || layer.hasOutAnimation;\n \n         if (layer.hasInOutAnimation) {\n             List<Float> keys = new ArrayList<>();",
    "output": "Fixed a bug where some in out animations wouldn't work"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -289,7 +289,9 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot\n             this.lineDashPattern = lineDashPattern;\n             this.lineDashPatternOffset = offset;\n             lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);\n-            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);\n+            if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {\n+                lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);\n+            }\n             offset.getObservable().addChangeListener(dashPatternChangedListener);\n             onDashPatternChanged();\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -275,7 +275,9 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot\n             this.lineDashPattern = lineDashPattern;\n             this.lineDashPatternOffset = offset;\n             lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);\n-            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);\n+            if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {\n+                lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);\n+            }\n             offset.getObservable().addChangeListener(dashPatternChangedListener);\n             onDashPatternChanged();\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -247,7 +247,9 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot\n         this.lineDashPattern = lineDashPattern;\n         this.lineDashPatternOffset = offset;\n         lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);\n-        lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);\n+        if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {\n+            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);\n+        }\n         offset.getObservable().addChangeListener(dashPatternChangedListener);\n         onDashPatternChanged();\n     }",
    "output": "Fixed another crash setting listeners on dash patterns"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -278,6 +278,7 @@ private void onLineWidthChanged() {\n         public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {\n             if (this.lineDashPattern != null) {\n                 this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);\n+                this.lineDashPattern.get(1).getObservable().removeChangeListemer(dashPatternChangedListener);\n             }\n             if (this.lineDashPatternOffset != null) {\n                 this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -264,6 +264,7 @@ private void onLineWidthChanged() {\n         public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {\n             if (this.lineDashPattern != null) {\n                 this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);\n+                this.lineDashPattern.get(1).getObservable().removeChangeListemer(dashPatternChangedListener);\n             }\n             if (this.lineDashPatternOffset != null) {\n                 this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -236,6 +236,7 @@ private void onLineWidthChanged() {\n     public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {\n         if (this.lineDashPattern != null) {\n             this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);\n+            this.lineDashPattern.get(1).getObservable().removeChangeListemer(dashPatternChangedListener);\n         }\n         if (this.lineDashPatternOffset != null) {\n             this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);",
    "output": "Fixed a crash in dash pattern listeners"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -101,7 +101,7 @@ public long getDuration() {\n \n     @FloatRange(from=0f, to=1f)\n     protected float getStartDelayProgress() {\n-        return (float) startDelay / (float) (startDelay + duration);\n+        return (float) startDelay / (float) (animator.getDuration());\n     }\n \n     @FloatRange(from=0f, to=1f)",
    "output": "Fixed parented animation durations"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -343,6 +343,9 @@ private void onColorChanged() {\n \n         @Override\n         public void draw(@NonNull Canvas canvas) {\n+            if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n+                return;\n+            }\n             super.draw(canvas);\n             if (trimPath.isEmpty()) {\n                 canvas.drawPath(path, paint);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -342,6 +342,9 @@ public void setRectSize(Observable<PointF> rectSize) {\n \n         @Override\n         public void draw(@NonNull Canvas canvas) {\n+            if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n+                return;\n+            }\n             super.draw(canvas);\n             float halfWidth = rectSize.getValue().x / 2f;\n             float halfHeight = rectSize.getValue().y / 2f;",
    "output": "Added support for ellipse and rect strokes with 0 width"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -11,6 +11,7 @@\n import android.graphics.RectF;\n import android.graphics.drawable.Drawable;\n import android.support.annotation.IntRange;\n+import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n \n import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n@@ -156,7 +157,10 @@ private void updateBounds() {\n     }\n \n     @Override\n-    public void draw(Canvas canvas) {\n+    public void draw(@NonNull Canvas canvas) {\n+        if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {\n+            return;\n+        }\n         if (strokeStart != null && strokeEnd != null) {\n             trimPath.reset();\n             pathMeasure.getSegment(pathLength * (((Float) strokeStart.getValue()) / 100f), pathLength * (((Float) strokeEnd.getValue()) / 100f), trimPath, true);",
    "output": "Fixed support for 0 width strokes"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -188,23 +188,23 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)\n             long length = composition.getEndFrame() - composition.getStartFrame();\n \n             if (layer.hasInAnimation) {\n-                keys.add(1f);\n-                keyTimes.add(0f);\n                 keys.add(0f);\n+                keyTimes.add(0f);\n+                keys.add(1f);\n                 float inTime = layer.inFrame / (float) length;\n                 keyTimes.add(inTime);\n             } else {\n-                keys.add(0f);\n+                keys.add(1f);\n                 keyTimes.add(0f);\n             }\n \n             if (layer.hasOutAnimation) {\n                 keys.add(0f);\n                 keyTimes.add(layer.outFrame / (float) length);\n-                keys.add(1f);\n+                keys.add(0f);\n                 keyTimes.add(1f);\n             } else {\n-                keys.add(1f);\n+                keys.add(0f);\n                 keyTimes.add(1f);\n             }\n \n@@ -266,15 +266,15 @@ public long getFrameRate() {\n         return frameRate;\n     }\n \n-    public boolean isHasInAnimation() {\n+    public boolean hasInAnimation() {\n         return hasInAnimation;\n     }\n \n-    public boolean isHasInOutAnimation() {\n+    public boolean hasInOutAnimation() {\n         return hasInOutAnimation;\n     }\n \n-    public boolean isHasOutAnimation() {\n+    public boolean hasOutAnimation() {\n         return hasOutAnimation;\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -110,7 +110,7 @@ public void onChanged() {\n         });\n         mainCanvasPaint.setAlpha(Math.round((float) layerModel.getOpacity().getObservable().getValue()));\n \n-        setVisible(layerModel.isHasInAnimation(), false);\n+        setVisible(layerModel.hasInAnimation(), false);\n \n         List<Object> reversedItems = layerModel.getShapes();\n         Collections.reverse(reversedItems);\n@@ -151,7 +151,7 @@ private void buildAnimations() {\n         propertyAnimations.put(LotteAnimatableProperty.SUBLAYER_TRANSFORM, layerModel.getRotation());\n         childContainerLayer.addAnimation(new LotteAnimationGroup(propertyAnimations));\n \n-        if (layerModel.isHasInOutAnimation()) {\n+        if (layerModel.hasInOutAnimation()) {\n             LotteNumberKeyframeAnimation<Float> inOutAnimation = new LotteNumberKeyframeAnimation<>(\n                     LotteAnimatableProperty.HIDDEN,\n                     layerModel.getCompDuration(),\n@@ -169,6 +169,8 @@ public void onValueChanged(Float progress) {\n             List<LotteKeyframeAnimation> animations = new ArrayList<>(1);\n             animations.add(inOutAnimation);\n             addAnimation(new LotteAnimationGroup(animations));\n+        } else {\n+            setVisible(true, false);\n         }\n     }\n \n@@ -190,6 +192,9 @@ public void draw(@NonNull Canvas mainCanvas) {\n         if (matteBitmap != null) {\n             matteBitmap.eraseColor(Color.TRANSPARENT);\n         }\n+        if (!isVisible()) {\n+            return;\n+        }\n         super.draw(contentCanvas);\n \n         Bitmap mainBitmap;",
    "output": "Added support for in out animations"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n@@ -12,6 +12,7 @@\n import com.airbnb.lotte.utils.LottePathKeyframeAnimation;\n import com.airbnb.lotte.utils.LottePointKeyframeAnimation;\n import com.airbnb.lotte.utils.Observable;\n+import com.airbnb.lotte.utils.SegmentedPath;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n@@ -30,7 +31,7 @@ public class LotteAnimatablePointValue implements LotteAnimatableValue<PointF> {\n \n     private boolean usePathAnimation = true;\n     private PointF initialPoint;\n-    private final Path animationPath = new Path();\n+    private final SegmentedPath animationPath = new SegmentedPath();\n     private long delay;\n     private long duration;\n     private long startFrame;\n@@ -260,10 +261,10 @@ public LotteKeyframeAnimation animationForKeyPath(@AnimatableProperty int proper\n         } else {\n             animation = new LottePointKeyframeAnimation(property, duration, keyTimes, pointKeyframes);\n         }\n-        animation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener() {\n+        animation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener<PointF>() {\n             @Override\n-            public void onValueChanged(Object progress) {\n-                observable.setValue((PointF) progress);\n+            public void onValueChanged(PointF progress) {\n+                observable.setValue(progress);\n             }\n         });\n         animation.setStartDelay(delay);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java\n@@ -1,6 +1,5 @@\n package com.airbnb.lotte.utils;\n \n-import android.graphics.Path;\n import android.graphics.PathMeasure;\n import android.graphics.PointF;\n import android.support.annotation.FloatRange;\n@@ -13,11 +12,13 @@\n public class LottePathKeyframeAnimation extends LotteKeyframeAnimation<PointF> {\n     private final PointF point = new PointF();\n     private final float[] pos = new float[2];\n-    private final PathMeasure pathMeasure;\n+    private final SegmentedPath segmentedPath;\n+    private PathMeasure pathMeasure;\n+    private int pathMeasureKeyframeIndex = -1;\n \n-    public LottePathKeyframeAnimation(@AnimatableProperty int property, long duration, List<Float> keyTimes, Path path) {\n+    public LottePathKeyframeAnimation(@AnimatableProperty int property, long duration, List<Float> keyTimes, SegmentedPath segmentedPath) {\n         super(property, duration, keyTimes);\n-        pathMeasure = new PathMeasure(path, false);\n+        this.segmentedPath = segmentedPath;\n     }\n \n     @Override\n@@ -32,7 +33,24 @@ public PointF getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress\n             return point;\n         }\n \n-        pathMeasure.getPosTan(progress * pathMeasure.getLength(), pos, null);\n+        int keyframeIndex = getKeyframeIndex();\n+        if (pathMeasureKeyframeIndex != keyframeIndex) {\n+            pathMeasureKeyframeIndex = keyframeIndex;\n+            pathMeasure = new PathMeasure(segmentedPath.getSegment(keyframeIndex), false);\n+        }\n+\n+        float startKeytime = keyTimes.get(keyframeIndex);\n+        float endKeytime = keyTimes.get(keyframeIndex + 1);\n+\n+        float percentageIntoFrame = 0;\n+        if (!isDiscrete) {\n+            percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);\n+            if (interpolators != null) {\n+                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);\n+            }\n+        }\n+\n+        pathMeasure.getPosTan(percentageIntoFrame * pathMeasure.getLength(), pos, null);\n         point.set(pos[0], pos[1]);\n         return point;\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java b/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/SegmentedPath.java\n@@ -0,0 +1,39 @@\n+package com.airbnb.lotte.utils;\n+\n+import android.graphics.Path;\n+import android.graphics.PointF;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SegmentedPath {\n+\n+    private final List<Path> segments = new ArrayList<>();\n+    private final PointF currentPoint = new PointF();\n+\n+    public void moveTo(float x, float y) {\n+        currentPoint.set(x, y);\n+    }\n+\n+    public void lineTo(float x, float y) {\n+        Path path = new Path();\n+        path.moveTo(currentPoint.x, currentPoint.y);\n+        path.lineTo(x, y);\n+        currentPoint.set(x, y);\n+    }\n+\n+    public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3) {\n+        Path path = new Path();\n+        path.moveTo(currentPoint.x, currentPoint.y);\n+        path.cubicTo(x1, y1, x2, y2, x3, y3);\n+        currentPoint.set(x3, y3);\n+    }\n+\n+    public Path getSegment(int index) {\n+        return segments.get(index);\n+    }\n+\n+    public boolean isEmpty() {\n+        return segments.isEmpty();\n+    }\n+}",
    "output": "Fixed path keyframe animations by creating a segmented path"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -189,28 +189,32 @@ private void buildSubviewsForModel() {\n         Bitmap maskBitmapForMatte = null;\n         Bitmap matteBitmapForMatte = null;\n         LotteLayerView maskedLayer = null;\n+        LotteAnimatableLayer rootAnimatableLayer = (LotteAnimatableLayer) getDrawable();\n         for (LotteLayer layer : reversedLayers) {\n-            LotteLayerView layerDrawable;\n+            LotteLayerView layerView;\n             if (maskedLayer == null) {\n-                layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmap, maskBitmap, matteBitmap);\n+                layerView = new LotteLayerView(layer, sceneModel, this, mainBitmap, maskBitmap, matteBitmap);\n             } else {\n                 if (mainBitmapForMatte == null) {\n                     mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n                     maskBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n                     matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n                 }\n-                layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n+                layerView = new LotteLayerView(layer, sceneModel, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n             }\n-            layerMap.put(layerDrawable.getId(), layerDrawable);\n+            layerMap.put(layerView.getId(), layerView);\n             if (maskedLayer != null) {\n-                maskedLayer.setMatte(layerDrawable);\n+                maskedLayer.setMatte(layerView);\n                 maskedLayer = null;\n             } else {\n                 if (layer.getMatteType() == LotteLayer.MatteType.Add) {\n-                    maskedLayer = layerDrawable;\n+                    maskedLayer = layerView;\n                 }\n-                ((LotteAnimatableLayer) getDrawable()).addLayer(layerDrawable);\n+                rootAnimatableLayer.addLayer(layerView);\n             }\n         }\n+\n+        long maxDuration = rootAnimatableLayer.getMaxDuration();\n+        rootAnimatableLayer.setMaxDuration(maxDuration);\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n@@ -12,7 +12,7 @@\n public class LotteAnimationGroup {\n \n     private final List<LotteKeyframeAnimation> animations;\n-    private long duration;\n+    private long maxDuration = 0;\n \n     public LotteAnimationGroup(SparseArray<LotteAnimatableValue> propertyAnimations) {\n         animations = new ArrayList<>(propertyAnimations.size());\n@@ -25,8 +25,8 @@ public LotteAnimationGroup(SparseArray<LotteAnimatableValue> propertyAnimations)\n                 animations.add(animation);\n \n                 long animationDuration = animation.getDuration() + animation.getStartDelay();\n-                if (animationDuration > duration) {\n-                    duration = animationDuration;\n+                if (animationDuration > maxDuration) {\n+                    maxDuration = animationDuration;\n                 }\n             }\n         }\n@@ -47,4 +47,15 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n             animation.setProgress(progress);\n         }\n     }\n+\n+    public long getMaxDuration() {\n+        return maxDuration;\n+    }\n+\n+    public void setMaxDuration(long maxDuration) {\n+        this.maxDuration = maxDuration;\n+        for (LotteKeyframeAnimation<?> animation : animations) {\n+            animation.setTotalDuration(maxDuration);\n+        }\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -181,4 +181,30 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n             layer.setProgress(progress);\n         }\n     }\n+\n+    public long getMaxDuration() {\n+        long maxDuration = 0;\n+        for (LotteAnimationGroup animationGroup : animations) {\n+            long md = animationGroup.getMaxDuration();\n+            if (md > maxDuration) {\n+                maxDuration = md;\n+            }\n+        }\n+        for (LotteAnimatableLayer layer : layers) {\n+            long md = layer.getMaxDuration();\n+            if (md > maxDuration) {\n+                maxDuration = md;\n+            }\n+        }\n+        return maxDuration;\n+    }\n+\n+    public void setMaxDuration(long maxDuration) {\n+        for (LotteAnimationGroup animationGroup : animations) {\n+            animationGroup.setMaxDuration(maxDuration);\n+        }\n+        for (LotteAnimatableLayer layer : layers) {\n+            layer.setMaxDuration(maxDuration);\n+        }\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -36,7 +36,6 @@ public LotteKeyframeAnimation(@AnimatableProperty int property, long duration, L\n         this.property = property;\n         this.duration = duration;\n         this.keyTimes = keyTimes;\n-        animator.setDuration(duration);\n         animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n             @Override\n             public void onAnimationUpdate(ValueAnimator animation) {\n@@ -47,10 +46,13 @@ public void onAnimationUpdate(ValueAnimator animation) {\n \n     public LotteKeyframeAnimation setStartDelay(long startDelay) {\n         this.startDelay = startDelay;\n-        animator.setDuration(duration + startDelay);\n         return this;\n     }\n \n+    public void setTotalDuration(long totalDuration) {\n+        animator.setDuration(totalDuration);\n+    }\n+\n     public void setIsDiscrete() {\n         isDiscrete = true;\n     }\n@@ -70,8 +72,10 @@ public void addUpdateListener(AnimationListener<T> listener) {\n     public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         if (progress < getStartDelayProgress()) {\n             progress = 0f;\n+        } else if (progress > getDurationEndProgress()){\n+            progress = 1f;\n         } else {\n-            progress = (progress - getStartDelayProgress()) / getDurationProgressRange();\n+            progress = (progress - getStartDelayProgress()) / getDurationRangeProgress();\n         }\n         this.progress = progress;\n \n@@ -101,8 +105,13 @@ protected float getStartDelayProgress() {\n     }\n \n     @FloatRange(from=0f, to=1f)\n-    private float getDurationProgressRange() {\n-        return 1f - getStartDelayProgress();\n+    private float getDurationEndProgress() {\n+        return getStartDelayProgress() + getDurationRangeProgress();\n+    }\n+\n+    @FloatRange(from=0f, to=1f)\n+    private float getDurationRangeProgress() {\n+        return (float) duration / (float) animator.getDuration();\n     }\n \n     public long getStartDelay() {",
    "output": "Use the same max duration for all animations so that progress can be set uniformly"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -22,7 +22,7 @@\n public class LotteAnimatableLayer extends Drawable {\n     private static final String TAG = LotteAnimatableLayer.class.getSimpleName();\n \n-    protected final List<Drawable> layers = new ArrayList<>();\n+    protected final List<LotteAnimatableLayer> layers = new ArrayList<>();\n \n     protected final Observable.OnChangedListener changedListener = new Observable.OnChangedListener() {\n         @Override\n@@ -152,7 +152,7 @@ public int getOpacity() {\n         return PixelFormat.TRANSLUCENT;\n     }\n \n-    public void addLayer(Drawable layer) {\n+    public void addLayer(LotteAnimatableLayer layer) {\n         layers.add(layer);\n         int width = Math.max(getBounds().width(), layer.getBounds().width());\n         int height = Math.max(getBounds().height(), layer.getBounds().height());\n@@ -177,10 +177,8 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n             animation.setProgress(progress);\n         }\n \n-        for (Drawable layer : layers) {\n-            if (layer instanceof LotteAnimatableLayer) {\n-                ((LotteAnimatableLayer) layer).setProgress(progress);\n-            }\n+        for (LotteAnimatableLayer layer : layers) {\n+            layer.setProgress(progress);\n         }\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -159,10 +159,10 @@ private void buildAnimations() {\n                     Float.class,\n                     layerModel.getInOutKeyFrames());\n             inOutAnimation.setIsDiscrete();\n-            inOutAnimation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener() {\n+            inOutAnimation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener<Float>() {\n                 @Override\n-                public void onValueChanged(Object progress) {\n-                    setVisible((float) progress == 1f, false);\n+                public void onValueChanged(Float progress) {\n+                    setVisible(progress == 1f, false);\n                 }\n             });\n             setVisible(inOutAnimation.getValueForProgress(0f) == 1f, false);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LayerDrawableCompat.java b/lotte/src/main/java/com/airbnb/lotte/utils/LayerDrawableCompat.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LayerDrawableCompat.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LayerDrawableCompat.java\n@@ -1,45 +0,0 @@\n-package com.airbnb.lotte.utils;\n-\n-import android.graphics.Canvas;\n-import android.graphics.ColorFilter;\n-import android.graphics.PixelFormat;\n-import android.graphics.drawable.Drawable;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class LayerDrawableCompat extends Drawable {\n-\n-    private List<Drawable> drawables = new ArrayList<>(2);\n-\n-    public void addDrawable(Drawable drawable) {\n-        drawables.add(drawable);\n-        invalidateSelf();\n-    }\n-\n-    @Override\n-    public void draw(Canvas canvas) {\n-        for (Drawable d : drawables) {\n-            d.draw(canvas);\n-        }\n-    }\n-\n-    @Override\n-    public void setAlpha(int alpha) {\n-        for (Drawable d : drawables) {\n-            d.setAlpha(alpha);\n-        }\n-    }\n-\n-    @Override\n-    public void setColorFilter(ColorFilter colorFilter) {\n-        for (Drawable d : drawables) {\n-            d.setColorFilter(colorFilter);\n-        }\n-    }\n-\n-    @Override\n-    public int getOpacity() {\n-        return PixelFormat.TRANSLUCENT;\n-    }\n-}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -40,7 +40,7 @@ public LotteKeyframeAnimation(@AnimatableProperty int property, long duration, L\n         animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n             @Override\n             public void onAnimationUpdate(ValueAnimator animation) {\n-                setProgress((Float) animation.getAnimatedValue());\n+                setProgress(animation.getAnimatedFraction());\n             }\n         });\n     }\n@@ -74,10 +74,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n             progress = (progress - getStartDelayProgress()) / getDurationProgressRange();\n         }\n         this.progress = progress;\n-        onProgressChanged();\n-    }\n \n-    private void onProgressChanged() {\n         for (AnimationListener<T> l : listeners) {\n             l.onValueChanged(getValueForProgress(progress));\n         }\n@@ -99,7 +96,7 @@ public long getDuration() {\n     }\n \n     @FloatRange(from=0f, to=1f)\n-    private float getStartDelayProgress() {\n+    protected float getStartDelayProgress() {\n         return (float) startDelay / (float) (startDelay + duration);\n     }\n ",
    "output": "Minor cleanup"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n@@ -100,7 +100,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n             for (int i = 0; i < keyframes.length(); i++) {\n                 JSONObject keyframe = keyframes.getJSONObject(i);\n                 long frame = keyframe.getLong(\"t\");\n-                float timePercentage = (float) (frame - startFrame) / (float) frameRate;\n+                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;\n \n                 if (outPoint != null) {\n                     PointF vertex = outPoint;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java\n@@ -32,21 +32,7 @@ public PointF getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress\n             return point;\n         }\n \n-        int keyframeIndex = getKeyframeIndex();\n-\n-        float startKeytime = keyTimes.get(keyframeIndex);\n-        float endKeytime = keyTimes.get(keyframeIndex + 1);\n-\n-\n-        float percentageIntoFrame = 0;\n-        if (!isDiscrete) {\n-            percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);\n-            if (interpolators != null) {\n-                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);\n-            }\n-        }\n-\n-        pathMeasure.getPosTan(startKeytime + percentageIntoFrame * (endKeytime - startKeytime) * pathMeasure.getLength(), pos, null);\n+        pathMeasure.getPosTan(progress * pathMeasure.getLength(), pos, null);\n         point.set(pos[0], pos[1]);\n         return point;\n     }",
    "output": "Fixed path animation measurement"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/AnimationFragment.java\n@@ -3,9 +3,11 @@\n import android.os.Bundle;\n import android.support.annotation.Nullable;\n import android.support.v4.app.Fragment;\n+import android.support.v7.widget.AppCompatSeekBar;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.SeekBar;\n \n import com.airbnb.lotte.LotteAnimationView;\n \n@@ -25,6 +27,7 @@ static AnimationFragment newInstance(String fileName) {\n     }\n \n     @BindView(R.id.animation_view) LotteAnimationView animationView;\n+    @BindView(R.id.seek_bar) AppCompatSeekBar seekBar;\n \n     @Nullable\n     @Override\n@@ -35,6 +38,23 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         String fileName = getArguments().getString(ARG_FILE_NAME);\n         animationView.setAnimation(fileName);\n \n+        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n+            @Override\n+            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n+                animationView.setProgress(progress / 100f);\n+            }\n+\n+            @Override\n+            public void onStartTrackingTouch(SeekBar seekBar) {\n+\n+            }\n+\n+            @Override\n+            public void onStopTrackingTouch(SeekBar seekBar) {\n+\n+            }\n+        });\n+\n         return view;\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -5,6 +5,7 @@\n import android.graphics.Bitmap;\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;\n+import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n@@ -154,6 +155,10 @@ public void play(@Nullable OnAnimationCompletedListener listener) {\n         animationContainer.play();\n     }\n \n+    public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n+        animationContainer.setProgress(progress);\n+    }\n+\n     public void pause() {\n \n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimationGroup.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lotte.animation;\n \n+import android.support.annotation.FloatRange;\n import android.util.SparseArray;\n \n import com.airbnb.lotte.animation.LotteAnimatableProperty.AnimatableProperty;\n@@ -40,4 +41,10 @@ public void play() {\n             animation.play();\n         }\n     }\n+\n+    public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n+        for (LotteKeyframeAnimation animation : animations) {\n+            animation.setProgress(progress);\n+        }\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -8,6 +8,7 @@\n import android.graphics.PointF;\n import android.graphics.drawable.Drawable;\n import android.support.annotation.ColorInt;\n+import android.support.annotation.FloatRange;\n import android.support.annotation.NonNull;\n \n import com.airbnb.lotte.animation.LotteAnimationGroup;\n@@ -170,4 +171,16 @@ public void play() {\n             }\n         }\n     }\n+\n+    public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        for (LotteAnimationGroup animation : animations) {\n+            animation.setProgress(progress);\n+        }\n+\n+        for (Drawable layer : layers) {\n+            if (layer instanceof LotteAnimatableLayer) {\n+                ((LotteAnimatableLayer) layer).setProgress(progress);\n+            }\n+        }\n+    }\n }",
    "output": "Added a seekbar"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -162,9 +162,23 @@ private void buildSubviewsForModel() {\n         List<LotteLayer> reversedLayers = sceneModel.getLayers();\n         Collections.reverse(reversedLayers);\n \n+        boolean needsMatte = false;\n+        boolean needsMask = false;\n+        for (LotteLayer layer : reversedLayers) {\n+            if (layer.getMatteType() != null && layer.getMatteType() != LotteLayer.MatteType.None) {\n+                needsMatte = true;\n+            }\n+            if (!layer.getMasks().isEmpty()) {\n+                needsMask = true;\n+            }\n+            if (needsMatte && needsMask) {\n+                break;\n+            }\n+        }\n+\n         Bitmap mainBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n-        Bitmap maskBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n-        Bitmap matteBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        Bitmap maskBitmap = needsMask ? Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8) : null;\n+        Bitmap matteBitmap = needsMatte ? Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888) : null;\n \n         Bitmap mainBitmapForMatte = null;\n         Bitmap maskBitmapForMatte = null;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -135,7 +135,7 @@ public void onChanged() {\n             }\n         }\n \n-        if (layerModel.getMasks() != null) {\n+        if (layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition, getCallback());\n             maskCanvas = new Canvas(maskBitmap);\n         }",
    "output": "Prevent ever creating a mask or matte bitmap when not necessary"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator animation) {\n \n     public LotteKeyframeAnimation setStartDelay(long startDelay) {\n         this.startDelay = startDelay;\n-        animator.setStartDelay(startDelay);\n+        animator.setDuration(duration + startDelay);\n         return this;\n     }\n ",
    "output": "Fixed animation startDelay"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n@@ -4,17 +4,13 @@\n import android.graphics.drawable.Drawable;\n import android.support.annotation.NonNull;\n \n-import com.airbnb.lotte.utils.LotteTransform3D;\n-import com.airbnb.lotte.utils.Observable;\n-\n public class RootLotteAnimatableLayer extends LotteAnimatableLayer {\n     public RootLotteAnimatableLayer(Drawable.Callback callback) {\n         super(0, callback);\n     }\n \n     @Override\n     public void draw(@NonNull Canvas canvas) {\n-        setTransform(new Observable<>(new LotteTransform3D()));\n         super.draw(canvas);\n         canvas.clipRect(getBounds());\n     }",
    "output": "Remove transform from root layer"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -176,9 +176,9 @@ private void buildSubviewsForModel() {\n                 layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmap, maskBitmap, matteBitmap);\n             } else {\n                 if (mainBitmapForMatte == null) {\n-                    mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_4444);\n+                    mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n                     maskBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n-                    matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_4444);\n+                    matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n                 }\n                 layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n             }",
    "output": "Use even lower quality bitmaps for mattes"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -176,9 +176,9 @@ private void buildSubviewsForModel() {\n                 layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmap, maskBitmap, matteBitmap);\n             } else {\n                 if (mainBitmapForMatte == null) {\n-                    mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+                    mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_4444);\n                     maskBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n-                    matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+                    matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_4444);\n                 }\n                 layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n             }",
    "output": "User lower quality bitmaps for mattes"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -166,15 +166,20 @@ private void buildSubviewsForModel() {\n         Bitmap maskBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n         Bitmap matteBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n \n-        Bitmap mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n-        Bitmap maskBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n-        Bitmap matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        Bitmap mainBitmapForMatte = null;\n+        Bitmap maskBitmapForMatte = null;\n+        Bitmap matteBitmapForMatte = null;\n         LotteLayerView maskedLayer = null;\n         for (LotteLayer layer : reversedLayers) {\n             LotteLayerView layerDrawable;\n             if (maskedLayer == null) {\n                 layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmap, maskBitmap, matteBitmap);\n             } else {\n+                if (mainBitmapForMatte == null) {\n+                    mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+                    maskBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n+                    matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+                }\n                 layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n             }\n             layerMap.put(layerDrawable.getId(), layerDrawable);",
    "output": "Lazily create Matte bitmaps"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -105,6 +105,11 @@ private void buildAnimation() {\n             propertyAnimations.put(LotteAnimatableProperty.RECT_SIZE, circleShape.getSize());\n             propertyAnimations.put(LotteAnimatableProperty.CIRCLE_POSITION, circleShape.getPosition());\n             propertyAnimations.put(LotteAnimatableProperty.CIRCLE_SIZE, circleShape.getSize());\n+            if (trim != null) {\n+                propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_START, trim.getStart());\n+                propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_END, trim.getEnd());\n+                propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_OFFSET, trim.getOffset());\n+            }\n             strokeLayer.addAnimation(new LotteAnimationGroup(propertyAnimations));\n         }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -22,7 +22,7 @@\n /**\n  * Mimics CAShapeLayer\n  */\n-public class LotteShapeLayer extends Drawable {\n+public class LotteShapeLayer extends LotteAnimatableLayer {\n \n     private final Observable.OnChangedListener changedListener = new Observable.OnChangedListener() {\n         @Override\n@@ -80,7 +80,7 @@ public void onChanged() {\n     private Observable<Number> transformAlpha;\n \n     public LotteShapeLayer(Drawable.Callback callback) {\n-        setCallback(callback);\n+        super(0, callback);\n         paint.setStyle(Paint.Style.FILL);\n         paint.setAntiAlias(true);\n         scale.getValue().scale(1f, 1f);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -83,35 +83,37 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n     }\n \n     private void buildAnimation() {\n-        SparseArray<LotteAnimatableValue> propertyAnimations = new SparseArray<>();\n         if (transformModel != null) {\n+            SparseArray<LotteAnimatableValue> propertyAnimations = new SparseArray<>();\n             propertyAnimations.put(LotteAnimatableProperty.OPACITY, transformModel.getOpacity());\n             propertyAnimations.put(LotteAnimatableProperty.POSITION, transformModel.getPosition());\n             propertyAnimations.put(LotteAnimatableProperty.ANCHOR_POINT, transformModel.getAnchor());\n             propertyAnimations.put(LotteAnimatableProperty.TRANSFORM, transformModel.getScale());\n             propertyAnimations.put(LotteAnimatableProperty.SUBLAYER_TRANSFORM, transformModel.getRotation());\n+            addAnimation(new LotteAnimationGroup(propertyAnimations));\n         }\n \n-        if (stroke != null) {\n+        if (stroke != null && strokeLayer != null) {\n+            SparseArray<LotteAnimatableValue> propertyAnimations = new SparseArray<>();\n             propertyAnimations.put(LotteAnimatableProperty.STROKE_COLOR, stroke.getColor());\n             propertyAnimations.put(LotteAnimatableProperty.OPACITY, stroke.getOpacity());\n             propertyAnimations.put(LotteAnimatableProperty.LINE_WIDTH, stroke.getWidth());\n             propertyAnimations.put(LotteAnimatableProperty.PATH, path.getShapePath());\n+            if (trim != null) {\n+                propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_START, trim.getStart());\n+                propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_END, trim.getEnd());\n+                propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_OFFSET, trim.getOffset());\n+            }\n+            strokeLayer.addAnimation(new LotteAnimationGroup(propertyAnimations));\n         }\n \n-        if (trim != null) {\n-            propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_START, trim.getStart());\n-            propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_END, trim.getEnd());\n-            propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_OFFSET, trim.getOffset());\n-        }\n-\n-        if (fill != null) {\n+        if (fill != null && fillLayer != null) {\n+            SparseArray<LotteAnimatableValue> propertyAnimations = new SparseArray<>();\n             propertyAnimations.put(LotteAnimatableProperty.BACKGROUND_COLOR, fill.getColor());\n             propertyAnimations.put(LotteAnimatableProperty.OPACITY, fill.getOpacity());\n             propertyAnimations.put(LotteAnimatableProperty.PATH, path.getShapePath());\n+            fillLayer.addAnimation(new LotteAnimationGroup(propertyAnimations));\n         }\n-\n-        addAnimation(new LotteAnimationGroup(propertyAnimations));\n     }\n \n     @Override",
    "output": "Fixed the layers some animations were attached to"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -159,13 +159,10 @@ private void buildAnimations() {\n             inOutAnimation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener() {\n                 @Override\n                 public void onValueChanged(Object progress) {\n-                    if ((float) progress == 1f) {\n-                        setVisible(true, false);\n-                    } else {\n-                        setVisible(false, false);\n-                    }\n+                    setVisible((float) progress == 1f, false);\n                 }\n             });\n+            setVisible(inOutAnimation.getValueForProgress(0f) == 1f, false);\n             List<LotteKeyframeAnimation> animations = new ArrayList<>(1);\n             animations.add(inOutAnimation);\n             addAnimation(new LotteAnimationGroup(animations));",
    "output": "Update the initial value of the inOutAnimation"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -2,6 +2,7 @@\n \n import android.content.Context;\n import android.content.res.TypedArray;\n+import android.graphics.Bitmap;\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n@@ -161,9 +162,21 @@ private void buildSubviewsForModel() {\n         List<LotteLayer> reversedLayers = sceneModel.getLayers();\n         Collections.reverse(reversedLayers);\n \n+        Bitmap mainBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        Bitmap maskBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n+        Bitmap matteBitmap = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+\n+        Bitmap mainBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        Bitmap maskBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ALPHA_8);\n+        Bitmap matteBitmapForMatte = Bitmap.createBitmap(sceneModel.getBounds().width(), sceneModel.getBounds().height(), Bitmap.Config.ARGB_8888);\n         LotteLayerView maskedLayer = null;\n         for (LotteLayer layer : reversedLayers) {\n-            LotteLayerView layerDrawable = new LotteLayerView(layer, sceneModel, this);\n+            LotteLayerView layerDrawable;\n+            if (maskedLayer == null) {\n+                layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmap, maskBitmap, matteBitmap);\n+            } else {\n+                layerDrawable = new LotteLayerView(layer, sceneModel, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);\n+            }\n             layerMap.put(layerDrawable.getId(), layerDrawable);\n             if (maskedLayer != null) {\n                 maskedLayer.setMatte(layerDrawable);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -41,8 +41,8 @@ public class LotteLayerView extends LotteAnimatableLayer {\n \n     private final Paint mainCanvasPaint = new Paint();\n     private final Bitmap bitmap;\n-    private Bitmap maskBitmap;\n-    private Bitmap matteBitmap;\n+    private final Bitmap maskBitmap;\n+    private final Bitmap matteBitmap;\n     private final Canvas contentCanvas;\n     private Canvas maskCanvas;\n     private Canvas matteCanvas;\n@@ -60,12 +60,14 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private Observable<Number> opacity;\n \n \n-    public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Drawable.Callback callback) {\n+    public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callback callback, Bitmap mainBitmap, Bitmap maskBitmap, Bitmap matteBitmap) {\n         super(composition.getDuration(), callback);\n         this.layerModel = layerModel;\n         this.composition = composition;\n+        this.maskBitmap = maskBitmap;\n+        this.matteBitmap = matteBitmap;\n+        this.bitmap = mainBitmap;\n         setBounds(composition.getBounds());\n-        bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         maskPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n         contentCanvas = new Canvas(bitmap);\n         setupForModel(callback);\n@@ -136,10 +138,6 @@ public void onChanged() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition, getCallback());\n-            maskBitmap = Bitmap.createBitmap(\n-                    composition.getBounds().width(),\n-                    composition.getBounds().height(),\n-                    Bitmap.Config.ALPHA_8);\n             maskCanvas = new Canvas(maskBitmap);\n         }\n         buildAnimations();\n@@ -180,7 +178,6 @@ public void setMask(LotteMaskLayer mask) {\n \n     public void setMatte(LotteLayerView matte) {\n         this.matte = matte;\n-        matteBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         matteCanvas = new Canvas(matteBitmap);\n     }\n ",
    "output": "Reuse bitmaps across layers!"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -183,28 +183,28 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)\n         layer.hasInOutAnimation = layer.hasInOutAnimation || layer.hasOutAnimation;\n \n         if (layer.hasInOutAnimation) {\n-            List<Long> keys = new ArrayList<>();\n+            List<Float> keys = new ArrayList<>();\n             List<Float> keyTimes = new ArrayList<>();\n             long length = composition.getEndFrame() - composition.getStartFrame();\n \n             if (layer.hasInAnimation) {\n-                keys.add(1L);\n+                keys.add(1f);\n                 keyTimes.add(0f);\n-                keys.add(0L);\n+                keys.add(0f);\n                 float inTime = layer.inFrame / (float) length;\n                 keyTimes.add(inTime);\n             } else {\n-                keys.add(0L);\n+                keys.add(0f);\n                 keyTimes.add(0f);\n             }\n \n             if (layer.hasOutAnimation) {\n-                keys.add(0L);\n+                keys.add(0f);\n                 keyTimes.add(layer.outFrame / (float) length);\n-                keys.add(1L);\n+                keys.add(1f);\n                 keyTimes.add(1f);\n             } else {\n-                keys.add(1L);\n+                keys.add(1f);\n                 keyTimes.add(1f);\n             }\n \n@@ -244,7 +244,7 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)\n     private boolean hasOutAnimation;\n     private boolean hasInAnimation;\n     private boolean hasInOutAnimation;\n-    @Nullable private List<Long> inOutKeyFrames;\n+    @Nullable private List<Float> inOutKeyFrames;\n     @Nullable private List<Float> inOutKeyTimes;\n     private long compDuration;\n \n@@ -283,7 +283,7 @@ public long getInFrame() {\n     }\n \n     @Nullable\n-    public List<Long> getInOutKeyFrames() {\n+    public List<Float> getInOutKeyFrames() {\n         return inOutKeyFrames;\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -55,7 +55,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n \n     private long parentId = -1;\n     private LotteAnimationGroup animation;\n-    private LotteKeyframeAnimation inOutAnimation;\n+    private LotteNumberKeyframeAnimation<Float> inOutAnimation;\n     private LotteAnimatableLayer childContainerLayer;\n     private Observable<Number> opacity;\n \n@@ -156,8 +156,18 @@ private void buildAnimations() {\n \n         if (layerModel.isHasInOutAnimation()) {\n             inOutAnimation = new LotteNumberKeyframeAnimation<>(LotteAnimatableProperty.HIDDEN, layerModel.getCompDuration(),\n-                    layerModel.getInOutKeyTimes(), Long.class, layerModel.getInOutKeyFrames());\n+                    layerModel.getInOutKeyTimes(), Float.class, layerModel.getInOutKeyFrames());\n             inOutAnimation.setIsDiscrete();\n+            inOutAnimation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener() {\n+                @Override\n+                public void onValueChanged(Object progress) {\n+                    if ((float) progress == 1f) {\n+                        setVisible(true, false);\n+                    } else {\n+                        setVisible(false, false);\n+                    }\n+                }\n+            });\n             List<LotteKeyframeAnimation> animations = new ArrayList<>(1);\n             animations.add(inOutAnimation);\n             addAnimation(new LotteAnimationGroup(animations));",
    "output": "Added support for inOutAnimation"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -21,8 +21,6 @@\n \n import java.util.List;\n \n-import static android.R.attr.width;\n-\n public class LotteEllipseShapeLayer extends LotteAnimatableLayer {\n \n     private final LotteShapeCircle circleShape;\n@@ -215,7 +213,7 @@ public void setLineWidth(Observable<Number> lineWidth) {\n         }\n \n         private void onLineWidthChanged() {\n-            paint.setStrokeWidth(width);\n+            paint.setStrokeWidth((float) lineWidth.getValue());\n         }\n \n         public void setDashPattern(List<Float> lineDashPattern, float offset) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -88,7 +88,6 @@ private void setupForModel(Drawable.Callback callback) {\n                 this.parentId = parentId;\n             }\n             LotteLayer parentModel = composition.layerModelForId(parentId);\n-            // TODO: see if we can avoid this every time.\n             LotteParentLayer parentLayer = new LotteParentLayer(parentModel, composition, getCallback());\n             parentLayer.setCallback(callback);\n             parentLayer.addLayer(currentChild);",
    "output": "Fixed ellipse line width"
  },
  {
    "input": "diff --git a/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java b/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java\n--- a/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java\n+++ b/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java\n@@ -1,7 +1,8 @@\n package com.airbnb.lotte;\n \n \n-import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n+import com.airbnb.lotte.animation.LotteAnimatableProperty;\n+import com.airbnb.lotte.utils.LotteNumberKeyframeAnimation;\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -22,7 +23,7 @@ public void simpleAnimation() throws Exception {\n     List<Float> keyTimes = Arrays.asList(0f, 0.5f, 1f);\n     List<Float> values = Arrays.asList(0f, 1f, 10f);\n \n-    LotteKeyframeAnimation animation = new LotteKeyframeAnimation(\"alpha\", 1000, keyTimes, values);\n+    LotteNumberKeyframeAnimation<Float> animation = new LotteNumberKeyframeAnimation<>(LotteAnimatableProperty.OPACITY, 1000, keyTimes, Float.class, values);\n \n     assertEquals(animation.getValueForProgress(0f), 0f);\n     assertEquals(animation.getValueForProgress(0.25f), 0.5f);",
    "output": "Fixed a test"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n@@ -43,7 +43,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n             setBounds(shapeTransform.getCompBounds());\n             anchorPoint = shapeTransform.getAnchor().getObservable();\n             setPosition(shapeTransform.getPosition().getObservable());\n-            setAlpha((int) (shapeTransform.getOpacity().getInitialValue()));\n+            setAlpha(shapeTransform.getOpacity().getObservable());\n             setTransform(shapeTransform.getScale().getObservable());\n             sublayerTransform = shapeTransform.getRotation().getObservable();\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -25,6 +25,7 @@\n import com.airbnb.lotte.model.LotteShapeTrimPath;\n import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n import com.airbnb.lotte.utils.LotteNumberKeyframeAnimation;\n+import com.airbnb.lotte.utils.LotteTransform3D;\n import com.airbnb.lotte.utils.Observable;\n \n import java.util.ArrayList;\n@@ -213,20 +214,16 @@ public void draw(@NonNull Canvas mainCanvas) {\n     }\n \n     private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {\n-        if (layer.getPosition() != null) {\n-            canvas.translate(layer.getPosition().getInitialPoint().x, layer.getPosition().getInitialPoint().y);\n-        }\n-        if (layer.getScale().getInitialScale() != null) {\n-            canvas.scale(layer.getScale().getInitialScale().getScaleX(), layer.getScale().getInitialScale().getScaleY());\n-        }\n+        PointF position = layer.getPosition().getObservable().getValue();\n+        canvas.translate(position.x, position.y);\n \n-        if (layer.getRotation().getInitialValue() != 0) {\n-            canvas.rotate(layer.getRotation().getInitialValue());\n-        }\n+        LotteTransform3D scale = layer.getScale().getObservable().getValue();\n+        canvas.scale(scale.getScaleX(), scale.getScaleY());\n \n-        if (layer.getAnchor() != null) {\n-            canvas.translate(-layer.getAnchor().getInitialPoint().x, -layer.getAnchor().getInitialPoint().y);\n-        }\n+        canvas.rotate((float) layer.getRotation().getObservable().getValue());\n+\n+        PointF translation = layer.getAnchor().getObservable().getValue();\n+        canvas.translate(-translation.x, -translation.y);\n     }\n \n     public long getId() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java\n@@ -1,6 +1,5 @@\n package com.airbnb.lotte.layers;\n \n-import android.graphics.Color;\n import android.graphics.drawable.Drawable;\n \n import com.airbnb.lotte.model.LotteComposition;\n@@ -19,18 +18,6 @@ public LotteMaskLayer(List<LotteMask> masks, LotteComposition composition, Drawa\n         this.composition = composition;\n     }\n \n-    private void setupViewFromModel() {\n-        for (LotteMask mask : masks) {\n-            LotteShapeLayer maskLayer = new LotteShapeLayer(getCallback());\n-            maskLayer.setPath(mask.getMaskPath().getObservable());\n-            maskLayer.setColor(Color.WHITE);\n-            maskLayer.setAlpha((int) (mask.getOpacity().getInitialValue()));\n-            addLayer(maskLayer);\n-\n-            // TODO: animations\n-        }\n-    }\n-\n     public List<LotteMask> getMasks() {\n         return masks;\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -8,7 +8,6 @@\n import android.graphics.RectF;\n import android.graphics.drawable.Drawable;\n import android.support.annotation.ColorInt;\n-import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.util.SparseArray;\n@@ -20,7 +19,6 @@\n import com.airbnb.lotte.model.LotteShapeRectangle;\n import com.airbnb.lotte.model.LotteShapeStroke;\n import com.airbnb.lotte.model.LotteShapeTransform;\n-import com.airbnb.lotte.utils.LotteTransform3D;\n import com.airbnb.lotte.utils.Observable;\n \n import java.util.List;\n@@ -48,17 +46,16 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n         paint.setAntiAlias(true);\n         setBounds(transform.getCompBounds());\n         anchorPoint = transform.getAnchor().getObservable();\n-        setAlpha((int) (transform.getOpacity().getInitialValue()));\n+        setAlpha(transform.getOpacity().getObservable());\n         setPosition(transform.getPosition().getObservable());\n         setTransform(transform.getScale().getObservable());\n-        sublayerTransform = new Observable<>(new LotteTransform3D());\n-        sublayerTransform.getValue().rotateZ(transform.getRotation().getInitialValue());\n+        sublayerTransform = transform.getRotation().getObservable();\n \n         if (fill != null) {\n             fillLayer = new LotteRoundRectLayer(duration, getCallback());\n             fillLayer.setColor(fill.getColor().getInitialColor());\n-            fillLayer.setShapeAlpha((int) (fill.getOpacity().getInitialValue()));\n-            fillLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n+            fillLayer.setShapeAlpha(fill.getOpacity().getObservable());\n+            fillLayer.setTransformAlpha(transformModel.getOpacity().getObservable());\n             fillLayer.setRectCornerRadius(rectShape.getCornerRadius().getInitialValue());\n             fillLayer.setRectSize(rectShape.getSize().getInitialPoint());\n             fillLayer.setRectPosition(rectShape.getPosition().getInitialPoint());\n@@ -69,8 +66,8 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n             strokeLayer = new LotteRoundRectLayer(duration, getCallback());\n             strokeLayer.setStyle(Paint.Style.STROKE);\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n-            strokeLayer.setShapeAlpha((int) (stroke.getOpacity().getInitialValue()));\n-            strokeLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n+            strokeLayer.setShapeAlpha(stroke.getOpacity().getObservable());\n+            strokeLayer.setTransformAlpha(transformModel.getOpacity().getObservable());\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n             strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());\n@@ -136,15 +133,22 @@ public void draw(@NonNull Canvas canvas) {\n     private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n         private static final String TAG = LotteRoundRectLayer.class.getSimpleName();\n \n+        private final Observable.OnChangedListener alphaChangedListener = new Observable.OnChangedListener() {\n+            @Override\n+            public void onChanged() {\n+                onAlphaChanged();\n+            }\n+        };\n+\n         private final Paint paint = new Paint();\n         private final RectF fillRect = new RectF();\n \n         private PointF rectPosition;\n         private PointF rectSize;\n         private float rectCornerRadius;\n \n-        @IntRange(from = 0, to = 255) private int shapeAlpha;\n-        @IntRange(from = 0, to = 255) private int transformAlpha;\n+        private Observable<Number> shapeAlpha;\n+        private Observable<Number> transformAlpha;\n \n         @Nullable private PathEffect dashPatternPathEffect;\n         @Nullable private PathEffect lineJoinPathEffect;\n@@ -155,14 +159,28 @@ private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n             paint.setStyle(Paint.Style.FILL);\n         }\n \n-        public void setShapeAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+        public void setShapeAlpha(Observable<Number> alpha) {\n+            if (this.shapeAlpha != null) {\n+                this.shapeAlpha.removeChangeListemer(alphaChangedListener);\n+            }\n             this.shapeAlpha = alpha;\n-            setAlpha((shapeAlpha * transformAlpha) / 255);\n+            alpha.addChangeListener(alphaChangedListener);\n+            onAlphaChanged();\n         }\n \n-        public void setTransformAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+        public void setTransformAlpha(Observable<Number> alpha) {\n+            if (this.transformAlpha != null) {\n+                this.transformAlpha.removeChangeListemer(alphaChangedListener);\n+            }\n             transformAlpha = alpha;\n-            setAlpha((shapeAlpha * transformAlpha) / 255);\n+            alpha.addChangeListener(alphaChangedListener);\n+            onAlphaChanged();\n+        }\n+\n+        private void onAlphaChanged() {\n+            Float shapeAlpha = this.shapeAlpha == null ? 1f : (Float) this.shapeAlpha.getValue();\n+            Float transformAlpha = this.transformAlpha == null ? 1f : (Float) this.transformAlpha.getValue();\n+            setAlpha((int) ((shapeAlpha * transformAlpha) * 255));\n         }\n \n         @Override",
    "output": "Switched some more initial values to use observables"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n@@ -133,11 +133,11 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                 PointF cp1;\n                 PointF cp2;\n                 if (keyframe.has(\"e\")) {\n-                    cp1 = pointFromValueArray(keyframe.getJSONArray(\"to\"));\n-                    cp2 = pointFromValueArray(keyframe.getJSONArray(\"ti\"));\n+                    cp1 = keyframe.has(\"to\") ? pointFromValueArray(keyframe.getJSONArray(\"to\")) : null;\n+                    cp2 = keyframe.has(\"ti\") ? pointFromValueArray(keyframe.getJSONArray(\"ti\")) : null;\n                     PointF vertex = pointFromValueArray(keyframe.getJSONArray(\"e\"));\n                     pointKeyframes.add(vertex);\n-                    if (cp1.x != 0 || cp1.y != 0 || cp2.x != 0 || cp2.y != 0) {\n+                    if (cp1 != null && cp2 != null) {\n                         PointF inVertex = startPoint;\n                         animationPath.cubicTo(\n                                 inVertex.x + cp1.x, inVertex.y + cp1.y,\n@@ -160,7 +160,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n \n                 keyTimes.add(timePercentage);\n \n-                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                if (keyframe.has(\"h\") && keyframe.getInt(\"h\") == 1) {\n                     outPoint = startPoint;\n                     addStartValue = true;\n                     addTimePadding = true;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n@@ -130,14 +130,14 @@ private void buildAnimationForKeyFrames(JSONArray keyframes, boolean closed) {\n \n                 keyTimes.add(timePercentage);\n \n-                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                if (keyframe.has(\"h\") && keyframe.getInt(\"h\") == 1) {\n                     outShape = startShape;\n                     addStartValue = true;\n                     addTimePadding = true;\n                 }\n             }\n         } catch (JSONException e) {\n-            throw new IllegalArgumentException(\"Unable to parse shape animation \" + keyframes, e);\n+            throw new IllegalArgumentException(\"Unable to parse shape animation\", e);\n         }\n \n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -36,7 +36,13 @@ public void onChanged() {\n         @Override\n         public void onChanged() {\n             onPathChanged();\n-            invalidateSelf();\n+        }\n+    };\n+\n+    private final Observable.OnChangedListener alphaChangedListener = new Observable.OnChangedListener() {\n+        @Override\n+        public void onChanged() {\n+            onAlphaChanged();\n         }\n     };\n \n@@ -56,8 +62,8 @@ public void onChanged() {\n     @Nullable private Observable<Number> strokeStart;\n     @Nullable private Observable<Number> strokeEnd;\n \n-    @IntRange(from = 0, to = 255) private int shapeAlpha;\n-    @IntRange(from = 0, to = 255) private int transformAlpha;\n+    private Observable<Number> shapeAlpha;\n+    private Observable<Number> transformAlpha;\n \n     public LotteShapeLayer(Drawable.Callback callback) {\n         setCallback(callback);\n@@ -95,7 +101,7 @@ public void setPath(Observable<Path> path) {\n     }\n \n     private void onPathChanged() {\n-        if (path != null && path.getValue() != null) {\n+        if (path != null && path.getValue() != null && scale != null && scale.getValue() != null) {\n             path.getValue().computeBounds(scaleRect, true);\n             scaleMatrix.setScale(scale.getValue().getScaleX(), scale.getValue().getScaleY(), scaleRect.centerX(), scaleRect.centerY());\n             path.getValue().transform(scaleMatrix, scaledPath);\n@@ -135,19 +141,34 @@ public int getAlpha() {\n         return paint.getAlpha();\n     }\n \n-    public void setShapeAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+    public void setShapeAlpha(Observable<Number> alpha) {\n+        if (this.shapeAlpha != null) {\n+            this.shapeAlpha.removeChangeListemer(alphaChangedListener);\n+        }\n         this.shapeAlpha = alpha;\n-        setAlpha((shapeAlpha * transformAlpha) / 255);\n+        alpha.addChangeListener(alphaChangedListener);\n+        onAlphaChanged();\n     }\n \n-    public void setTransformAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+    public void setTransformAlpha(Observable<Number> alpha) {\n+        if (this.transformAlpha != null) {\n+            this.transformAlpha.removeChangeListemer(alphaChangedListener);\n+        }\n         transformAlpha = alpha;\n-        setAlpha((shapeAlpha * transformAlpha) / 255);\n+        alpha.addChangeListener(alphaChangedListener);\n+        onAlphaChanged();\n+    }\n+\n+    private void onAlphaChanged() {\n+        Float shapeAlpha = this.shapeAlpha == null ? 1f : (Float) this.shapeAlpha.getValue();\n+        Float transformAlpha = this.transformAlpha == null ? 1f : (Float) this.transformAlpha.getValue();\n+        setAlpha((int) ((shapeAlpha * transformAlpha) * 255));\n     }\n \n     @Override\n     public void setAlpha(@IntRange(from = 0, to = 255) int alpha) {\n         paint.setAlpha(alpha);\n+        invalidateSelf();\n     }\n \n     @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -56,8 +56,8 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             fillLayer = new LotteShapeLayer(getCallback());\n             fillLayer.setPath(path.getShapePath().getObservable());\n             fillLayer.setColor(fill.getColor().getInitialColor());\n-            fillLayer.setShapeAlpha((int) (fill.getOpacity().getInitialValue()));\n-            fillLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n+            fillLayer.setShapeAlpha(fill.getOpacity().getObservable());\n+            fillLayer.setTransformAlpha(transformModel.getOpacity().getObservable());\n             fillLayer.setScale(initialScale);\n             addLayer(fillLayer);\n         }\n@@ -67,8 +67,8 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             strokeLayer.setStyle(Paint.Style.STROKE);\n             strokeLayer.setPath(path.getShapePath().getObservable());\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n-            strokeLayer.setShapeAlpha((int) (stroke.getOpacity().getInitialValue()));\n-            strokeLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n+            strokeLayer.setShapeAlpha(stroke.getOpacity().getObservable());\n+            strokeLayer.setTransformAlpha(transformModel.getOpacity().getObservable());\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n             strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());",
    "output": "Fixed a few typing errors and opacity animations"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n@@ -136,14 +136,14 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                         timingFunction = new LinearInterpolator();\n                     }\n                     timingFunctions.add(timingFunction);\n+                }\n \n-                    keyTimes.add(timePercentage);\n+                keyTimes.add(timePercentage);\n \n-                    if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n-                        outColor = startColor;\n-                        addStartValue = true;\n-                        addTimePadding = true;\n-                    }\n+                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                    outColor = startColor;\n+                    addStartValue = true;\n+                    addTimePadding = true;\n                 }\n             }\n         } catch (JSONException e) {",
    "output": "Fixed a misaligned block in AnimatableColorValue"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n@@ -33,7 +33,7 @@ public class LotteAnimatableShapeValue implements LotteAnimatableValue<Path> {\n     private LotteShapeData initialShape;\n     private final List<LotteShapeData> shapeKeyframes = new ArrayList<>();\n     private final List<Float> keyTimes = new ArrayList<>();\n-    private List<Interpolator> interpolators;\n+    private final List<Interpolator> interpolators = new ArrayList<>();\n     private long delay;\n     private long duration;\n     private int startFrame;\n@@ -90,7 +90,7 @@ private void buildAnimationForKeyFrames(JSONArray keyframes, boolean closed) {\n                     outShape = null;\n                 }\n \n-                LotteShapeData startShape = keyframe.has(\"s\") ? bezierShapeFromValue(keyframe.getJSONObject(\"s\"), closed) : null;\n+                LotteShapeData startShape = keyframe.has(\"s\") ? bezierShapeFromValue(keyframe.getJSONArray(\"s\"), closed) : null;\n                 if (addStartValue) {\n                     if (keyframe.has(\"s\")) {\n                         if (i == 0) {\n@@ -112,7 +112,8 @@ private void buildAnimationForKeyFrames(JSONArray keyframes, boolean closed) {\n                 }\n \n                 if (keyframe.has(\"e\")) {\n-                    JSONObject endShape = keyframe.getJSONObject(\"e\");\n+                    JSONArray endShape = keyframe.getJSONArray(\"e\");\n+                    shapeKeyframes.add(bezierShapeFromValue(endFrame, closed));\n \n                     Interpolator interpolator;\n                     if (keyframe.has(\"o\") && keyframe.has(\"i\")) {",
    "output": "Fixed a few bugs in AnimatableShapeValue. Doesn't quite work yet but close"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n@@ -156,7 +156,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n     private Float numberValueFromObject(Object valueObject) throws JSONException {\n         if (valueObject instanceof Float) {\n             return (Float) valueObject;\n-        } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Float) {\n+        } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Double) {\n             return new Float(((JSONArray) valueObject).getDouble(0));\n         } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Integer) {\n             return new Float(((JSONArray) valueObject).getInt(0));\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -90,9 +90,11 @@ private void buildAnimation() {\n         propertyAnimations.put(LotteAnimatableProperty.ANCHOR_POINT, transformModel.getAnchor());\n         propertyAnimations.put(LotteAnimatableProperty.TRANSFORM, transformModel.getScale());\n         propertyAnimations.put(LotteAnimatableProperty.SUBLAYER_TRANSFORM, transformModel.getRotation());\n-        propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_START, trim.getStart());\n-        propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_END, trim.getEnd());\n-        propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_OFFSET, trim.getOffset());\n+        if (trim != null) {\n+            propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_START, trim.getStart());\n+            propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_END, trim.getEnd());\n+            propertyAnimations.put(LotteAnimatableProperty.TRIM_PATH_OFFSET, trim.getOffset());\n+        }\n         addAnimation(new LotteAnimationGroup(propertyAnimations));\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java\n@@ -17,7 +17,7 @@ public LotteNumberKeyframeAnimation(@AnimatableProperty int property, long durat\n         super(property, duration, keyTimes);\n         this.klass = klass;\n         if (keyTimes.size() != values.size()) {\n-            throw new IllegalArgumentException(\"Key times and values must be the same length \" + keyTimes.size() + \" vs \" + values.size());\n+            throw new IllegalArgumentException(\"Key times and values must be the same length \" + keyTimes + \" vs \" + values);\n         }\n         this.values = values;\n     }",
    "output": "Fixed LotteAnimatableNumberValue number parsing"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -97,6 +97,7 @@ private void updateBounds() {\n     @Override\n     public void draw(Canvas canvas) {\n         if (strokeStart != null && strokeEnd != null) {\n+            trimPath.reset();\n             pathMeasure.getSegment(pathLength * (((Float) strokeStart.getValue()) / 100f), pathLength * (((Float) strokeEnd.getValue()) / 100f), trimPath, true);\n             // Workaround to get hardware acceleration on KitKat\n             // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -30,10 +30,6 @@ public class LotteShapeLayerView extends LotteAnimatableLayer {\n     @Nullable private LotteShapeLayer fillLayer;\n     @Nullable private LotteShapeLayer strokeLayer;\n \n-    private LotteAnimationGroup animation;\n-    private LotteAnimationGroup strokeAnimation;\n-    private LotteAnimationGroup fillAnimation;\n-\n     public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             @Nullable LotteShapeStroke stroke, @Nullable LotteShapeTrimPath trim,\n             LotteShapeTransform transformModel, long duration, Drawable.Callback callback) {",
    "output": "Reset trim path Path before drawing"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n@@ -44,7 +44,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n         if (shapeTransform != null) {\n             setBounds(shapeTransform.getCompBounds());\n             anchorPoint = shapeTransform.getAnchor().getObservable();\n-            position.setValue(shapeTransform.getPosition().getInitialPoint());\n+            position = shapeTransform.getPosition().getObservable();\n             setAlpha((int) (shapeTransform.getOpacity().getInitialValue()));\n             transform = shapeTransform.getScale().getObservable();\n             sublayerTransform = new Observable<>(new LotteTransform3D());",
    "output": "Fixed a crash with GroupLayerView position setting with a transform applied"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -36,11 +36,10 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n-                \"Opacity_01.json\",\n-                \"Opacity_02.json\",\n-                \"Opacity_03.json\",\n-                \"Opacity_04.json\",\n-                \"Opacity_05.json\",\n+                \"BusinessTravel01_Still.json\",\n+                \"Icon_Diamond_Still.json\",\n+                \"Icon_Lightbulb_Still.json\",\n+                \"Icon_Lightbulb_Still_02.json\",\n         };\n \n         @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n@@ -26,7 +26,7 @@ public LotteParentLayer(LotteLayer parent, LotteComposition composition, Drawabl\n     }\n \n     private void setupLayerFromModel() {\n-        position.setValue(parentModel.getPosition().getInitialPoint());\n+        position = parentModel.getPosition().getObservable();\n         anchorPoint = parentModel.getAnchor().getInitialPoint();\n         transform = parentModel.getScale().getInitialScale();\n         sublayerTransform = new LotteTransform3D();\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -49,7 +49,7 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n \n         setBounds(transformModel.getCompBounds());\n         anchorPoint = transformModel.getAnchor().getInitialPoint();\n-        position.setValue(transformModel.getPosition().getInitialPoint());\n+        position = transformModel.getPosition().getObservable();\n         sublayerTransform = new LotteTransform3D();\n         sublayerTransform.rotateZ(transformModel.getRotation().getInitialValue());\n ",
    "output": "Prevented static shapes from crashing"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n@@ -129,7 +129,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n \n                 if (keyframe.has(\"e\")) {\n                     PointF vertex = pointFromValueArray(keyframe.getJSONArray(\"e\"));\n-\n+                    pointKeyframes.add(vertex);\n                     if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n                         PointF cp1 = pointFromValueArray(keyframe.getJSONArray(\"to\"));\n                         PointF cp2 = pointFromValueArray(keyframe.getJSONArray(\"ti\"));",
    "output": "Added missing line in LotteAnimatablePointValue"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -36,10 +36,11 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n-                \"Icon_Lightbulb_Still_02.json\",\n-                \"Icon_Lightbulb_Still.json\",\n-                \"bigClock.json\",\n-                \"Icon_Diamond_Still.json\"\n+                \"Opacity_01.json\",\n+                \"Opacity_02.json\",\n+                \"Opacity_03.json\",\n+                \"Opacity_04.json\",\n+                \"Opacity_05.json\",\n         };\n \n         @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -7,6 +7,7 @@\n import android.graphics.PointF;\n import android.graphics.RectF;\n import android.support.annotation.ColorInt;\n+import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.util.Log;\n@@ -57,26 +58,26 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n         if (fill != null) {\n             fillLayer = new LotteRoundRectLayer(duration);\n             fillLayer.setColor(fill.getColor().getInitialColor());\n-            fillLayer.setAlpha((int) (fill.getOpacity().getInitialValue()));\n+            fillLayer.setShapeAlpha((int) (fill.getOpacity().getInitialValue()));\n+            fillLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n             fillLayer.setRectCornerRadius(rectShape.getCornerRadius().getInitialValue());\n             fillLayer.setRectSize(rectShape.getSize().getInitialPoint());\n             fillLayer.setRectPosition(rectShape.getPosition().getInitialPoint());\n-            fillLayer.setAlpha((int) transformModel.getOpacity().getInitialValue());\n             addLayer(fillLayer);\n         }\n \n         if (stroke != null) {\n             strokeLayer = new LotteRoundRectLayer(duration);\n             strokeLayer.setStyle(Paint.Style.STROKE);\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n-            strokeLayer.setAlpha((int) (stroke.getOpacity().getInitialValue()));\n+            strokeLayer.setShapeAlpha((int) (stroke.getOpacity().getInitialValue()));\n+            strokeLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n             strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.setRectCornerRadius(rectShape.getCornerRadius().getInitialValue());\n             strokeLayer.setRectSize(rectShape.getSize().getInitialPoint());\n             strokeLayer.setRectPosition(rectShape.getPosition().getInitialPoint());\n-            strokeLayer.setAlpha((int) transformModel.getOpacity().getInitialValue());\n             strokeLayer.setLineJoinType(stroke.getJoinType());\n             addLayer(strokeLayer);\n         }\n@@ -114,6 +115,9 @@ private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n         private PointF rectSize;\n         private float rectCornerRadius;\n \n+        @IntRange(from = 0, to = 255) private int shapeAlpha;\n+        @IntRange(from = 0, to = 255) private int transformAlpha;\n+\n         @Nullable private PathEffect dashPatternPathEffect;\n         @Nullable private PathEffect lineJoinPathEffect;\n \n@@ -123,6 +127,26 @@ private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n             paint.setStyle(Paint.Style.FILL);\n         }\n \n+        public void setShapeAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+            this.shapeAlpha = alpha;\n+            setAlpha((shapeAlpha * transformAlpha) / 255);\n+        }\n+\n+        public void setTransformAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+            transformAlpha = alpha;\n+            setAlpha((shapeAlpha * transformAlpha) / 255);\n+        }\n+\n+        @Override\n+        public void setAlpha(int alpha) {\n+            paint.setAlpha(alpha);\n+        }\n+\n+        @Override\n+        public int getAlpha() {\n+            return paint.getAlpha();\n+        }\n+\n         public void setColor(@ColorInt int color) {\n             paint.setColor(color);\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -38,6 +38,9 @@ public class LotteShapeLayer extends Drawable {\n     private float strokeStart = -1f;\n     private float strokeEnd = -1f;\n \n+    @IntRange(from = 0, to = 255) private int shapeAlpha;\n+    @IntRange(from = 0, to = 255) private int transformAlpha;\n+\n     public LotteShapeLayer() {\n         paint.setStyle(Paint.Style.FILL);\n         paint.setAntiAlias(true);\n@@ -88,6 +91,16 @@ public int getAlpha() {\n         return paint.getAlpha();\n     }\n \n+    public void setShapeAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+        this.shapeAlpha = alpha;\n+        setAlpha((shapeAlpha * transformAlpha) / 255);\n+    }\n+\n+    public void setTransformAlpha(@IntRange(from = 0, to = 255) int alpha) {\n+        transformAlpha = alpha;\n+        setAlpha((shapeAlpha * transformAlpha) / 255);\n+    }\n+\n     @Override\n     public void setAlpha(@IntRange(from = 0, to = 255) int alpha) {\n         paint.setAlpha(alpha);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -55,9 +55,9 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             fillLayer = new LotteShapeLayer();\n             fillLayer.setPath(path.getShapePath().getInitialShape());\n             fillLayer.setColor(fill.getColor().getInitialColor());\n-            fillLayer.setAlpha((int) (fill.getOpacity().getInitialValue()));\n+            fillLayer.setShapeAlpha((int) (fill.getOpacity().getInitialValue()));\n+            fillLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n             fillLayer.setScale(initialScale.getScaleX(), initialScale.getScaleY());\n-            fillLayer.setAlpha((int) transformModel.getOpacity().getInitialValue());\n             addLayer(fillLayer);\n         }\n \n@@ -66,13 +66,13 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             strokeLayer.setStyle(Paint.Style.STROKE);\n             strokeLayer.setPath(path.getShapePath().getInitialShape());\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n-            strokeLayer.setAlpha((int) (stroke.getOpacity().getInitialValue()));\n+            strokeLayer.setShapeAlpha((int) (stroke.getOpacity().getInitialValue()));\n+            strokeLayer.setTransformAlpha((int) transformModel.getOpacity().getInitialValue());\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n             strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.setLineJoinType(stroke.getJoinType());\n             strokeLayer.setScale(initialScale.getScaleX(), initialScale.getScaleY());\n-            strokeLayer.setAlpha((int) transformModel.getOpacity().getInitialValue());\n             if (trim != null) {\n                 strokeLayer.setStrokeStart(trim.getStart().getInitialValue());\n                 strokeLayer.setStrokeEnd(trim.getEnd().getInitialValue());",
    "output": "Added support for shape and transform opacity"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n@@ -195,7 +195,7 @@ public LotteKeyframeAnimation animationForKeyPath(String keyPath) {\n \n     @Override\n     public boolean hasAnimation() {\n-        return false;\n+        return !valueKeyframes.isEmpty();\n     }\n \n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n@@ -27,7 +27,7 @@ public class LotteAnimatablePointValue implements LotteAnimatableValue {\n \n     private boolean usePathAnimation = true;\n     private PointF initialPoint;\n-    private Path animationPath;\n+    private final Path animationPath = new Path();\n     private long delayMs;\n     private long durationMs;\n     private long startFrame;\n@@ -233,7 +233,7 @@ public LotteKeyframeAnimation animationForKeyPath(String keyPath) {\n         }\n \n         LotteKeyframeAnimation animation;\n-        if (animationPath != null && usePathAnimation) {\n+        if (!animationPath.isEmpty() && usePathAnimation) {\n             animation = new LottePathKeyframeAnimation(keyPath, durationMs, keyTimes, animationPath);\n         } else {\n             animation = new LottePointKeyframeAnimation(keyPath, durationMs, keyTimes, pointKeyframes);\n@@ -244,7 +244,7 @@ public LotteKeyframeAnimation animationForKeyPath(String keyPath) {\n \n     @Override\n     public boolean hasAnimation() {\n-        return animationPath != null || !pointKeyframes.isEmpty();\n+        return !animationPath.isEmpty() || !pointKeyframes.isEmpty();\n     }\n \n     @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java\n@@ -25,8 +25,8 @@ public class LotteAnimatableScaleValue implements LotteAnimatableValue {\n     private final List<Float> keyTimes = new ArrayList<>();\n     private final List<Interpolator> interpolators = new ArrayList<>();\n \n-    private float delay;\n-    private float duration;\n+    private long delay;\n+    private long duration;\n     private int startFrame;\n     private int durationFrames;\n     private int frameRate;\n@@ -149,12 +149,15 @@ public LotteTransform3D getInitialScale() {\n \n     @Override\n     public LotteKeyframeAnimation animationForKeyPath(String keyPath) {\n-        return null;\n+        LotteKeyframeAnimation animation = new LotteTransformKeyframeAnimation(keyPath, duration, keyTimes, scaleKeyframes);\n+        animation.setInterpolators(interpolators);\n+        animation.setStartDelay(delay);\n+        return animation;\n     }\n \n     @Override\n     public boolean hasAnimation() {\n-        return false;\n+        return !scaleKeyframes.isEmpty();\n     }\n \n     @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteTransformKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteTransformKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteTransformKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteTransformKeyframeAnimation.java\n@@ -0,0 +1,23 @@\n+package com.airbnb.lotte.animation;\n+\n+import android.support.annotation.FloatRange;\n+\n+import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n+import com.airbnb.lotte.utils.LotteTransform3D;\n+\n+import java.util.List;\n+\n+public class LotteTransformKeyframeAnimation extends LotteKeyframeAnimation<LotteTransform3D> {\n+    private final List<LotteTransform3D> transforms;\n+\n+    public LotteTransformKeyframeAnimation(String objectProperty, long duration, List<Float> keyTimes, List<LotteTransform3D> transforms) {\n+        super(objectProperty, duration, keyTimes);\n+        this.transforms = transforms;\n+    }\n+\n+    @Override\n+    public LotteTransform3D getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        // TODO\n+        return null;\n+    }\n+}",
    "output": "Implemented some hasAnimation properties and a few other missing pieces"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n@@ -94,14 +94,12 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n \n                 Integer startColor = colorValueFromArray(keyframe.getJSONArray(\"s\"));\n                 if (addStartValue) {\n-                    if (startColor != null) {\n-                        if (i == 0) {\n-                            initialColor = startColor;\n-                        }\n-                        colorKeyframes.add(startColor);\n-                        if (!timingFunctions.isEmpty()) {\n-                            timingFunctions.add(new LinearInterpolator());\n-                        }\n+                    if (i == 0) {\n+                        initialColor = startColor;\n+                    }\n+                    colorKeyframes.add(startColor);\n+                    if (!timingFunctions.isEmpty()) {\n+                        timingFunctions.add(new LinearInterpolator());\n                     }\n                     addStartValue = false;\n                 }\n@@ -113,25 +111,23 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                 }\n \n                 Integer endColor = colorValueFromArray(keyframe.getJSONArray(\"e\"));\n-                if (endColor != null) {\n-                    colorKeyframes.add(endColor);\n-                    /**\n-                     * Timing function for time interpolation between keyframes.\n-                     * Should be n - 1 where n is the number of keyframes.\n-                     */\n-                    Interpolator timingFunction;\n-                    if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n-                        JSONObject timingControlPoint1 = keyframe.getJSONObject(\"o\");\n-                        JSONObject timingControlPoint2 = keyframe.getJSONObject(\"i\");\n-                        PointF cp1 = JsonUtils.pointValueFromDict(timingControlPoint1);\n-                        PointF cp2 = JsonUtils.pointValueFromDict(timingControlPoint2);\n-\n-                        timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n-                    } else {\n-                        timingFunction = new LinearInterpolator();\n-                    }\n-                    timingFunctions.add(timingFunction);\n+                colorKeyframes.add(endColor);\n+                /**\n+                 * Timing function for time interpolation between keyframes.\n+                 * Should be n - 1 where n is the number of keyframes.\n+                 */\n+                Interpolator timingFunction;\n+                if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n+                    JSONObject timingControlPoint1 = keyframe.getJSONObject(\"o\");\n+                    JSONObject timingControlPoint2 = keyframe.getJSONObject(\"i\");\n+                    PointF cp1 = JsonUtils.pointValueFromDict(timingControlPoint1);\n+                    PointF cp2 = JsonUtils.pointValueFromDict(timingControlPoint2);\n+\n+                    timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+                } else {\n+                    timingFunction = new LinearInterpolator();\n                 }\n+                timingFunctions.add(timingFunction);\n \n                 keyTimes.add(timePercentage);\n \n@@ -175,6 +171,7 @@ public LotteKeyframeAnimation animationForKeyPath(String keyPath) {\n             return null;\n         }\n         LotteKeyframeAnimation animation = new LotteColorKeyframeAnimation(keyPath, duration, keyTimes, colorKeyframes);\n+        animation.setStartDelay(delay);\n         animation.setInterpolators(timingFunctions);\n         return animation;\n     }\n@@ -191,9 +188,6 @@ public int getInitialColor() {\n \n     @Override\n     public String toString() {\n-        final StringBuilder sb = new StringBuilder(\"LotteAnimatableColorValue{\");\n-        sb.append(\"initialColor=\").append(initialColor);\n-        sb.append('}');\n-        return sb.toString();\n+        return \"LotteAnimatableColorValue{\" + \"initialColor=\" + initialColor + '}';\n     }\n }",
    "output": "Minor cleanup to LotteAnimatableColorValue"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n import android.graphics.Color;\n import android.support.annotation.ColorInt;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableGroup.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableGroup.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n public class LotteAnimatableGroup {\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n import android.annotation.SuppressLint;\n import android.graphics.PointF;\n@@ -7,6 +7,7 @@\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n+import com.airbnb.lotte.model.RemapInterface;\n import com.airbnb.lotte.utils.JsonUtils;\n import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n import com.airbnb.lotte.utils.LotteValueKeyframeAnimation;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n import android.graphics.Path;\n import android.graphics.PointF;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n import android.graphics.PointF;\n import android.support.v4.view.animation.PathInterpolatorCompat;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java\n@@ -1,11 +1,13 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n import android.graphics.Path;\n import android.graphics.PointF;\n import android.support.v4.view.animation.PathInterpolatorCompat;\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n+import com.airbnb.lotte.model.LotteCubicCurveData;\n+import com.airbnb.lotte.model.LotteShapeData;\n import com.airbnb.lotte.utils.JsonUtils;\n import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n import com.airbnb.lotte.utils.LotteShapeKeyframeAnimation;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableValue.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableValue.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimation.java b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimation.java\n@@ -1,4 +1,4 @@\n-package com.airbnb.lotte.model;\n+package com.airbnb.lotte.animation;\n \n \n import android.animation.ValueAnimator;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -6,9 +6,9 @@\n import android.util.Log;\n \n import com.airbnb.lotte.L;\n-import com.airbnb.lotte.model.LotteAnimatableNumberValue;\n-import com.airbnb.lotte.model.LotteAnimatablePointValue;\n-import com.airbnb.lotte.model.LotteAnimatableScaleValue;\n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n+import com.airbnb.lotte.animation.LotteAnimatablePointValue;\n+import com.airbnb.lotte.animation.LotteAnimatableScaleValue;\n import com.airbnb.lotte.model.LotteComposition;\n import com.airbnb.lotte.model.LotteMask;\n import com.airbnb.lotte.model.LotteShapeGroup;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java\n@@ -1,5 +1,8 @@\n package com.airbnb.lotte.model;\n \n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n+import com.airbnb.lotte.animation.LotteAnimatableShapeValue;\n+\n import org.json.JSONException;\n import org.json.JSONObject;\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java\n@@ -1,5 +1,7 @@\n package com.airbnb.lotte.model;\n \n+import com.airbnb.lotte.animation.LotteAnimatablePointValue;\n+\n import org.json.JSONException;\n import org.json.JSONObject;\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n@@ -3,6 +3,8 @@\n import android.util.Log;\n \n import com.airbnb.lotte.L;\n+import com.airbnb.lotte.animation.LotteAnimatableColorValue;\n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n@@ -3,6 +3,7 @@\n import android.util.Log;\n \n import com.airbnb.lotte.L;\n+import com.airbnb.lotte.animation.LotteAnimatableShapeValue;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java\n@@ -3,6 +3,8 @@\n import android.util.Log;\n \n import com.airbnb.lotte.L;\n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n+import com.airbnb.lotte.animation.LotteAnimatablePointValue;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n@@ -1,5 +1,8 @@\n package com.airbnb.lotte.model;\n \n+import com.airbnb.lotte.animation.LotteAnimatableColorValue;\n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n+\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java\n@@ -4,6 +4,9 @@\n import android.util.Log;\n \n import com.airbnb.lotte.L;\n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n+import com.airbnb.lotte.animation.LotteAnimatablePointValue;\n+import com.airbnb.lotte.animation.LotteAnimatableScaleValue;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n@@ -1,5 +1,7 @@\n package com.airbnb.lotte.model;\n \n+import com.airbnb.lotte.animation.LotteAnimatableNumberValue;\n+\n import org.json.JSONException;\n import org.json.JSONObject;\n ",
    "output": "Created an animation package"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n@@ -1,8 +1,11 @@\n package com.airbnb.lotte.model;\n \n-import android.graphics.Point;\n+import android.graphics.PointF;\n+import android.support.v4.view.animation.PathInterpolatorCompat;\n import android.view.animation.Interpolator;\n+import android.view.animation.LinearInterpolator;\n \n+import com.airbnb.lotte.utils.JsonUtils;\n import com.airbnb.lotte.utils.LotteTransform3D;\n \n import org.json.JSONArray;\n@@ -17,9 +20,9 @@ public class LotteAnimatableScaleValue implements LotteAnimatableValue {\n     private static final String TAG = LotteAnimatableScaleValue.class.getSimpleName();\n \n     private LotteTransform3D initialScale;\n-    private final List<Point> scaleKeyframes = new ArrayList<>();\n+    private final List<LotteTransform3D> scaleKeyframes = new ArrayList<>();\n     private final List<Float> keyTimes = new ArrayList<>();\n-    private final List<Interpolator> timingFunctions = new ArrayList<>();\n+    private final List<Interpolator> interpolators = new ArrayList<>();\n \n     private float delay;\n     private float duration;\n@@ -50,7 +53,82 @@ public LotteAnimatableScaleValue(JSONObject scaleValues, long frameRate) {\n     }\n \n     private void buildAnimationForKeyframes(JSONArray keyframes) {\n-        // TODO\n+        try {\n+            startFrame = keyframes.getJSONObject(0).getInt(\"t\");\n+            int endFrame = keyframes.getJSONObject(keyframes.length() - 1).getInt(\"t\");\n+\n+            if (endFrame <= startFrame) {\n+                throw new IllegalArgumentException(\"End frame must be after start frame \" + endFrame + \" vs \" + startFrame);\n+            }\n+\n+            durationFrames = endFrame - startFrame;\n+\n+            duration = durationFrames / frameRate;\n+            delay = startFrame / frameRate;\n+\n+            boolean addStartValue = true;\n+            boolean addTimePadding = false;\n+            LotteTransform3D outValue = null;\n+\n+            for (int i = 0; i < keyframes.length(); i++) {\n+                JSONObject keyframe = keyframes.getJSONObject(i);\n+                int frame = keyframe.getInt(\"t\");\n+                float timePercentage = (frame - startFrame) / (float) durationFrames;\n+\n+                if (outValue != null) {\n+                    scaleKeyframes.add(outValue);\n+                    interpolators.add(new LinearInterpolator());\n+                    outValue = null;\n+                }\n+\n+                LotteTransform3D startValue = null;\n+                if (addStartValue) {\n+                    if (keyframe.has(\"s\")) {\n+                        startValue = xformForValueArray(keyframe.getJSONArray(\"s\"));\n+                        if (i == 0) {\n+                            initialScale = startValue;\n+                        }\n+                        scaleKeyframes.add(startValue);\n+                        if (!interpolators.isEmpty()) {\n+                            interpolators.add(new LinearInterpolator());\n+                        }\n+                    }\n+                    addStartValue = false;\n+                }\n+\n+                if (addTimePadding) {\n+                    float holdPercentage = timePercentage - 0.00001f;\n+                    keyTimes.add(holdPercentage);\n+                    addTimePadding = false;\n+                }\n+\n+                if (keyframe.has(\"e\")) {\n+                    LotteTransform3D endValue = xformForValueArray(keyframe.getJSONArray(\"e\"));\n+                    scaleKeyframes.add(endValue);\n+\n+                    Interpolator interpolator;\n+\n+                    if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n+                        PointF cp1 = JsonUtils.pointValueFromDict(keyframe.getJSONObject(\"o\"));\n+                        PointF cp2 = JsonUtils.pointValueFromDict(keyframe.getJSONObject(\"i\"));\n+                        interpolator = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+                    } else {\n+                        interpolator = new LinearInterpolator();\n+                    }\n+                    interpolators.add(interpolator);\n+                }\n+\n+                keyTimes.add(timePercentage);\n+\n+                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                    outValue = startValue;\n+                    addStartValue = true;\n+                    addTimePadding = true;\n+                }\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse scale animation \" + keyframes, e);\n+        }\n     }\n \n     private LotteTransform3D xformForValueArray(JSONArray value) {",
    "output": "Implemented LotteAnimatableScaleValue but not tested."
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n@@ -7,6 +7,7 @@\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n+import com.airbnb.lotte.utils.JsonUtils;\n import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n \n import org.json.JSONArray;\n@@ -123,8 +124,8 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                     if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n                         JSONObject timingControlPoint1 = keyframe.getJSONObject(\"o\");\n                         JSONObject timingControlPoint2 = keyframe.getJSONObject(\"i\");\n-                        PointF cp1 = pointValueFromDict(timingControlPoint1);\n-                        PointF cp2 = pointValueFromDict(timingControlPoint2);\n+                        PointF cp1 = JsonUtils.pointValueFromDict(timingControlPoint1);\n+                        PointF cp2 = JsonUtils.pointValueFromDict(timingControlPoint2);\n \n                         timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n                     } else {\n@@ -156,28 +157,6 @@ private Float numberValueFromObject(Object valueObject) throws JSONException {\n         return null;\n     }\n \n-    private PointF pointValueFromDict(JSONObject values) {\n-        PointF point = new PointF();\n-        try {\n-            Object x = values.get(\"x\");\n-            if (x instanceof Float) {\n-                point.x = (float) x;\n-            } else if (x instanceof JSONArray) {\n-                point.x = new Float(((JSONArray) x).getDouble(0));\n-            }\n-\n-            Object y = values.get(\"y\");\n-            if (y instanceof Float) {\n-                point.y = (float) y;\n-            } else if (y instanceof JSONArray) {\n-                point.y = new Float(((JSONArray) y).getDouble(0));\n-            }\n-        } catch (JSONException e) {\n-            throw new IllegalArgumentException(\"Unable to parse point \" + values, e);\n-        }\n-        return point;\n-    }\n-\n     public void remapValues(final float fromMin, final float fromMax, final float toMin, final float toMax) {\n         remapInterface = new RemapInterface() {\n             @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n@@ -166,7 +166,7 @@ private PointF pointFromValueArray(JSONArray values) {\n             try {\n                 return new PointF((float) values.getDouble(0), (float) values.getDouble(1));\n             } catch (JSONException e) {\n-                throw new IllegalArgumentException(\"Unable to parse point for \" + values);\n+                throw new IllegalArgumentException(\"Unable to parse point for \" + values, e);\n             }\n         }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n@@ -2,11 +2,17 @@\n \n import android.graphics.Path;\n import android.graphics.PointF;\n+import android.support.v4.view.animation.PathInterpolatorCompat;\n+import android.view.animation.Interpolator;\n+import android.view.animation.LinearInterpolator;\n+\n+import com.airbnb.lotte.utils.JsonUtils;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import static com.airbnb.lotte.utils.MiscUtils.addPoints;\n@@ -16,8 +22,9 @@ public class LotteAnimatableShapeValue implements LotteAnimatableValue {\n     private static final String TAG = LotteAnimatableShapeValue.class.getSimpleName();\n \n     private Path initialShape;\n-    private List<Integer> shapeKeyframes;\n-    private List<Integer> keyTimes;\n+    private List<Path> shapeKeyframes = new ArrayList<>();\n+    private List<Float> keyTimes = new ArrayList<>();\n+    private List<Interpolator> interpolators;\n     private long delay;\n     private long duration;\n     private int startFrame;\n@@ -43,8 +50,82 @@ public LotteAnimatableShapeValue(JSONObject shapeValues, int frameRate, boolean\n         }\n     }\n \n-    private void buildAnimationForKeyFrames(JSONArray value, boolean closed) {\n-        // TODO\n+    private void buildAnimationForKeyFrames(JSONArray keyframes, boolean closed) {\n+        try {\n+            startFrame = keyframes.getJSONObject(0).getInt(\"t\");\n+            int endFrame = keyframes.getJSONObject(keyframes.length() - 1).getInt(\"t\");\n+\n+            if (endFrame <= startFrame) {\n+                throw new IllegalArgumentException(\"End frame must be after start frame \" + endFrame + \" vs \" + startFrame);\n+            }\n+\n+            durationFrames = endFrame - startFrame;\n+\n+            duration = durationFrames / frameRate;\n+            delay = startFrame / frameRate;\n+\n+            boolean addStartValue = true;\n+            boolean addTimePadding = false;\n+            Path outShape = null;\n+\n+            for (int i = 0; i < keyframes.length(); i++) {\n+                JSONObject keyframe = keyframes.getJSONObject(i);\n+                int frame = keyframe.getInt(\"t\");\n+                float timePercentage = (frame - startFrame) / (float) durationFrames;\n+\n+                if (outShape != null) {\n+                    shapeKeyframes.add(outShape);\n+                    interpolators.add(new LinearInterpolator());\n+                    outShape = null;\n+                }\n+\n+                Path startShape = keyframe.has(\"s\") ? bezierShapeFromValue(keyframe.getJSONObject(\"s\"), closed) : null;\n+                if (addStartValue) {\n+                    if (keyframe.has(\"s\")) {\n+                        if (i == 0) {\n+                            initialShape = startShape;\n+                        }\n+\n+                        shapeKeyframes.add(startShape);\n+                        if (!interpolators.isEmpty()) {\n+                            interpolators.add(new LinearInterpolator());\n+                        }\n+                    }\n+                    addStartValue = false;\n+                }\n+\n+                if (addTimePadding) {\n+                    float holdPercentage = timePercentage - 0.00001f;\n+                    keyTimes.add(holdPercentage);\n+                    addTimePadding = false;\n+                }\n+\n+                if (keyframe.has(\"e\")) {\n+                    JSONObject endShape = keyframe.getJSONObject(\"e\");\n+\n+                    Interpolator interpolator;\n+                    if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n+                        PointF cp1 = JsonUtils.pointValueFromDict(keyframe.getJSONObject(\"o\"));\n+                        PointF cp2 = JsonUtils.pointValueFromDict(keyframe.getJSONObject(\"i\"));\n+                        interpolator = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+                    } else {\n+                        interpolator = new LinearInterpolator();\n+                    }\n+                    interpolators.add(interpolator);\n+\n+                    keyTimes.add(timePercentage);\n+\n+                    if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                        outShape = startShape;\n+                        addStartValue = true;\n+                        addTimePadding = true;\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse shape animation \" + keyframes, e);\n+        }\n+\n     }\n \n     private Path bezierShapeFromValue(Object value, boolean closed) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/JsonUtils.java b/lotte/src/main/java/com/airbnb/lotte/utils/JsonUtils.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/JsonUtils.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/JsonUtils.java\n@@ -0,0 +1,36 @@\n+package com.airbnb.lotte.utils;\n+\n+import android.graphics.PointF;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class JsonUtils {\n+\n+\n+    private JsonUtils() {\n+    }\n+\n+    public static PointF pointValueFromDict(JSONObject values) {\n+        PointF point = new PointF();\n+        try {\n+            Object x = values.get(\"x\");\n+            if (x instanceof Float) {\n+                point.x = (float) x;\n+            } else if (x instanceof JSONArray) {\n+                point.x = new Float(((JSONArray) x).getDouble(0));\n+            }\n+\n+            Object y = values.get(\"y\");\n+            if (y instanceof Float) {\n+                point.y = (float) y;\n+            } else if (y instanceof JSONArray) {\n+                point.y = new Float(((JSONArray) y).getDouble(0));\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse point \" + values, e);\n+        }\n+        return point;\n+    }\n+}",
    "output": "Implemented LotteAnimatableShapeValue but not tested"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n@@ -7,6 +7,8 @@\n import android.view.animation.Interpolator;\n import android.view.animation.LinearInterpolator;\n \n+import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n+\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -204,8 +206,10 @@ public float getInitialValue() {\n \n \n     @Override\n-    public Object animationForKeyPath(String keyPath) {\n-        return null;\n+    public LotteKeyframeAnimation animationForKeyPath(String keyPath) {\n+        LotteKeyframeAnimation animation = new LotteKeyframeAnimation(keyPath, durationMs, keyTimes, valueKeyframes);\n+        animation.setStartDelay(delayMs);\n+        return animation;\n     }\n \n     @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n@@ -19,7 +19,7 @@ public class LotteAnimatablePointValue implements LotteAnimatableValue {\n \n     private final List<PointF> pointKeyframes = new ArrayList<>();\n     private final List<Float> keyTimes = new ArrayList<>();\n-    private final List<Interpolator> timingFunctions = new ArrayList<>();\n+    private final List<Interpolator> interpolators = new ArrayList<>();\n \n     private boolean usePathAnimation = true;\n     private PointF initialPoint;\n@@ -87,18 +87,18 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n \n             boolean addStartValue = true;\n             boolean addTimePadding =  false;\n-            JSONArray outPoint = null;\n+            PointF outPoint = null;\n \n             for (int i = 0; i < keyframes.length(); i++) {\n                 JSONObject keyframe = keyframes.getJSONObject(i);\n                 long frame = keyframe.getLong(\"t\");\n                 float timePercentage = (frame - startFrame) / durationFrames;\n \n                 if (outPoint != null) {\n-                    PointF vertex = pointFromValueArray(outPoint);\n+                    PointF vertex = outPoint;\n                     animationPath.lineTo(vertex.x, vertex.y);\n                     pointKeyframes.add(vertex);\n-                    timingFunctions.add(new LinearInterpolator());\n+                    interpolators.add(new LinearInterpolator());\n                     outPoint = null;\n                 }\n \n@@ -111,7 +111,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                     } else {\n                         animationPath.lineTo(startPoint.x, startPoint.y);\n                         pointKeyframes.add(startPoint);\n-                        timingFunctions.add(new LinearInterpolator());\n+                        interpolators.add(new LinearInterpolator());\n                     }\n                     addStartValue = false;\n                 }\n@@ -125,24 +125,33 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                 if (keyframe.has(\"e\")) {\n                     PointF vertex = pointFromValueArray(keyframe.getJSONArray(\"e\"));\n \n-                    Interpolator timingFunction;\n                     if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n                         PointF cp1 = pointFromValueArray(keyframe.getJSONArray(\"to\"));\n                         PointF cp2 = pointFromValueArray(keyframe.getJSONArray(\"ti\"));\n-                        // TODO: inVertex\n-//                        animationPath.cubicTo(inVer);\n+                        PointF inVertex = startPoint;\n+                        animationPath.cubicTo(\n+                                inVertex.x + cp1.x, inVertex.y + cp1.y,\n+                                vertex.x + cp2.x, vertex.y + cp2.y,\n+                                vertex.x, vertex.y);\n+                    } else {\n+                        animationPath.lineTo(vertex.x, vertex.y);\n+                    }\n \n-                        timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+                    Interpolator interpolator;\n+                    if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n+                        PointF cp1 = pointFromValueObject(keyframe.getJSONObject(\"o\"));\n+                        PointF cp2 = pointFromValueObject(keyframe.getJSONObject(\"i\"));\n+                        interpolator = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n                     } else {\n-                        timingFunction = new LinearInterpolator();\n+                        interpolator = new LinearInterpolator();\n                     }\n-                    timingFunctions.add(timingFunction);\n+                    interpolators.add(interpolator);\n                 }\n \n                 keyTimes.add(timePercentage);\n \n                 if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n-//                    outPoint = startValue;\n+                    outPoint = startPoint;\n                     addStartValue = true;\n                     addTimePadding = true;\n                 }\n@@ -164,6 +173,30 @@ private PointF pointFromValueArray(JSONArray values) {\n         return new PointF();\n     }\n \n+    private PointF pointFromValueObject(JSONObject value) {\n+        try {\n+            Object x = value.get(\"x\");\n+            Object y = value.get(\"y\");\n+\n+            PointF point = new PointF();\n+            if (x instanceof JSONArray) {\n+                point.x = new Float(((JSONArray) x).getDouble(0));\n+            } else {\n+                point.x = new Float((Double) x);\n+            }\n+\n+            if (y instanceof JSONArray) {\n+                point.y = new Float(((JSONArray) y).getDouble(0));\n+            } else {\n+                point.y = new Float((Double) y);\n+            }\n+\n+            return point;\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse point for \" + value);\n+        }\n+    }\n+\n \n     public void remapPointsFromBounds(Rect bounds) {\n         // TODO",
    "output": "Implemented of LotteAnimatablePointValue but not tested"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -11,14 +11,14 @@\n import android.support.annotation.NonNull;\n \n import com.airbnb.lotte.model.LotteComposition;\n-import com.airbnb.lotte.model.LotteKeyframeAnimation;\n import com.airbnb.lotte.model.LotteMask;\n import com.airbnb.lotte.model.LotteShapeFill;\n import com.airbnb.lotte.model.LotteShapeGroup;\n import com.airbnb.lotte.model.LotteShapeStroke;\n import com.airbnb.lotte.model.LotteShapeTransform;\n import com.airbnb.lotte.model.LotteShapeTrimPath;\n import com.airbnb.lotte.utils.LotteAnimationGroup;\n+import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n import com.airbnb.lotte.utils.LotteTransform3D;\n \n import java.util.Collections;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n@@ -21,8 +21,8 @@ public class LotteAnimatableNumberValue implements LotteAnimatableValue {\n     @Nullable private RemapInterface remapInterface;\n     private float initialValue;\n \n-    private final ArrayList<Float> valueKeyframes = new ArrayList<>();\n-    private final ArrayList<Float> keyTimes = new ArrayList<>();\n+    private final List<Float> valueKeyframes = new ArrayList<>();\n+    private final List<Float> keyTimes = new ArrayList<>();\n     private final List<Interpolator> timingFunctions = new ArrayList<>();\n     private long delayMs;\n     private long durationMs;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteKeyframeAnimation.java\n@@ -1,4 +0,0 @@\n-package com.airbnb.lotte.model;\n-\n-public class LotteKeyframeAnimation {\n-}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java\n@@ -0,0 +1,103 @@\n+package com.airbnb.lotte.utils;\n+\n+import android.animation.ValueAnimator;\n+import android.support.annotation.FloatRange;\n+import android.support.annotation.Nullable;\n+import android.view.animation.Interpolator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LotteKeyframeAnimation {\n+\n+    public interface AnimationListener {\n+        void onValueChanged(float progress);\n+    }\n+\n+    private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n+    private final List<AnimationListener> listeners = new ArrayList<>();\n+    private final String objectProperty;\n+    private final List<Float> values;\n+    private final List<Float> keyTimes;\n+    private final long duration;\n+\n+    private long startDelay;\n+    @Nullable private List<Interpolator> interpolators;\n+\n+    private float progress;\n+\n+    public LotteKeyframeAnimation(String objectProperty, long duration, List<Float> keyTimes, List<Float> values) {\n+        if (keyTimes.size() != values.size()) {\n+            throw new IllegalArgumentException(\"Key times and values must be the same length \" + keyTimes.size() + \" vs \" + values.size());\n+        }\n+\n+        this.objectProperty = objectProperty;\n+        this.duration = duration;\n+        this.keyTimes = keyTimes;\n+        this.values = values;\n+        animator.setDuration(duration);\n+        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n+            @Override\n+            public void onAnimationUpdate(ValueAnimator animation) {\n+                setProgress((Float) animation.getAnimatedValue());\n+            }\n+        });\n+    }\n+\n+    public LotteKeyframeAnimation setStartDelay(long startDelay) {\n+        this.startDelay = startDelay;\n+        animator.setStartDelay(startDelay);\n+        return this;\n+    }\n+\n+    public LotteKeyframeAnimation setInterpolators(List<Interpolator> interpolators) {\n+        if (interpolators.size() != values.size()) {\n+            throw new IllegalArgumentException(\"Interpolators and values must be the same length \" + interpolators.size() + \" vs \" + values.size());\n+        }\n+        this.interpolators = interpolators;\n+        return this;\n+    }\n+\n+    public void addUpdateListener(AnimationListener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        this.progress = progress;\n+        onProgressChanged();\n+    }\n+\n+    protected void onProgressChanged() {\n+        for (AnimationListener l : listeners) {\n+            l.onValueChanged(getValueForProgress(progress));\n+        }\n+    }\n+\n+    public float getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n+        if (progress < startDelay) {\n+            return 0f;\n+        } else if (progress > startDelay + duration) {\n+            return values.get(values.size() - 1);\n+        }\n+\n+        int keyframeIndex = 1;\n+        float keyTime = keyTimes.get(1);\n+        while (keyTime < progress && keyframeIndex < keyTimes.size() - 1) {\n+            keyframeIndex++;\n+            keyTime = keyTimes.get(0);\n+        }\n+\n+        float startProgress = keyTimes.get(keyframeIndex - 1);\n+        float endProgress = keyTimes.get(keyframeIndex);\n+\n+        float percentageIntoFrame = (progress - startProgress) / (endProgress - startProgress);\n+        if (interpolators != null) {\n+            percentageIntoFrame = interpolators.get(keyframeIndex - 1).getInterpolation(percentageIntoFrame);\n+        }\n+\n+        float startValue = values.get(keyframeIndex - 1);\n+        float endValue = values.get(keyframeIndex);\n+\n+        return startValue + percentageIntoFrame * (endValue - startValue);\n+    }\n+}\n\ndiff --git a/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java b/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n--- a/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n+++ b/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n@@ -1,17 +0,0 @@\n-package com.airbnb.lotte;\n-\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-/**\n- * Example local unit test, which will execute on the development machine (host).\n- *\n- * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n- */\n-public class ExampleUnitTest {\n-  @Test\n-  public void addition_isCorrect() throws Exception {\n-    assertEquals(4, 2 + 2);\n-  }\n-}\n\\ No newline at end of file\n\ndiff --git a/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java b/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java\n--- a/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java\n+++ b/lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java\n@@ -0,0 +1,33 @@\n+package com.airbnb.lotte;\n+\n+\n+import com.airbnb.lotte.utils.LotteKeyframeAnimation;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class LotteKeyframeAnimationTest {\n+  @Test\n+  public void simpleAnimation() throws Exception {\n+\n+    List<Float> keyTimes = Arrays.asList(0f, 0.5f, 1f);\n+    List<Float> values = Arrays.asList(0f, 1f, 10f);\n+\n+    LotteKeyframeAnimation animation = new LotteKeyframeAnimation(\"alpha\", 1000, keyTimes, values);\n+\n+    assertEquals(animation.getValueForProgress(0f), 0f);\n+    assertEquals(animation.getValueForProgress(0.25f), 0.5f);\n+    assertEquals(animation.getValueForProgress(0.5f), 1f);\n+    assertEquals(animation.getValueForProgress(0.75f), 5.5f);\n+    assertEquals(animation.getValueForProgress(1f), 10f);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Created LotteKeyframeAnimation"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -37,12 +37,8 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n                 \"Icon_Lightbulb_Still.json\",\n-                \"Mask_22.json\",\n-                \"Mask_23.json\",\n                 \"bigClock.json\",\n-                \"Icon_Diamond_Still.json\",\n-                \"Mask_20.json\",\n-                \"ellipseTrim.json\",\n+                \"Icon_Diamond_Still.json\"\n         };\n \n         @Override",
    "output": "Removed test json"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -69,7 +69,7 @@ public LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill,\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n             strokeLayer.setAlpha((int) (stroke.getOpacity().getInitialValue() * 255));\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n-            strokeLayer.setDashPattern(stroke.getLineDashPattern());\n+            strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.updateCircle(\n                     circleShape.getPosition().getInitialPoint(),\n@@ -159,15 +159,15 @@ public void setLineWidth(float width) {\n             paint.setStrokeWidth(width);\n         }\n \n-        public void setDashPattern(List<Float> lineDashPattern) {\n+        public void setDashPattern(List<Float> lineDashPattern, float offset) {\n             if (lineDashPattern.isEmpty()) {\n                 return;\n             }\n             float[] values = new float[lineDashPattern.size()];\n             for (int i = 0; i < lineDashPattern.size(); i++) {\n                 values[i] = lineDashPattern.get(i);\n             }\n-            paint.setPathEffect(new DashPathEffect(values, 0f));\n+            paint.setPathEffect(new DashPathEffect(values, offset));\n         }\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -70,7 +70,7 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n             strokeLayer.setAlpha((int) (stroke.getOpacity().getInitialValue() * 255));\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n-            strokeLayer.setDashPattern(stroke.getLineDashPattern());\n+            strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.rectCornerRadius = rectShape.getCornerRadius().getInitialValue();\n             strokeLayer.setRectSize(rectShape.getSize().getInitialPoint());\n@@ -122,15 +122,15 @@ public void setLineWidth(float width) {\n             paint.setStrokeWidth(width);\n         }\n \n-        public void setDashPattern(List<Float> lineDashPattern) {\n+        public void setDashPattern(List<Float> lineDashPattern, float offset) {\n             if (lineDashPattern.isEmpty()) {\n                 return;\n             }\n             float[] values = new float[lineDashPattern.size()];\n             for (int i = 0; i < lineDashPattern.size(); i++) {\n                 values[i] = lineDashPattern.get(i);\n             }\n-            paint.setPathEffect(new DashPathEffect(values, 0f));\n+            paint.setPathEffect(new DashPathEffect(values, offset));\n         }\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -109,15 +109,15 @@ public void setLineWidth(float width) {\n         invalidateSelf();\n     }\n \n-    public void setDashPattern(List<Float> lineDashPattern) {\n+    public void setDashPattern(List<Float> lineDashPattern, float offset) {\n         if (lineDashPattern.isEmpty()) {\n             return;\n         }\n         float[] values = new float[lineDashPattern.size()];\n         for (int i = 0; i < lineDashPattern.size(); i++) {\n             values[i] = lineDashPattern.get(i);\n         }\n-        paint.setPathEffect(new DashPathEffect(values, 0f));\n+        paint.setPathEffect(new DashPathEffect(values, offset));\n     }\n \n     public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -68,7 +68,7 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             strokeLayer.setColor(stroke.getColor().getInitialColor());\n             strokeLayer.setAlpha((int) (stroke.getOpacity().getInitialValue() * 255));\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n-            strokeLayer.setDashPattern(stroke.getLineDashPattern());\n+            strokeLayer.setDashPattern(stroke.getLineDashPattern(), stroke.getDashOffset());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.setLineJoinType(stroke.getJoinType());\n             strokeLayer.setScale(initialScale.getScaleX(), initialScale.getScaleY());\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n@@ -22,6 +22,7 @@ public enum LineJoinType {\n         Bevel\n     }\n \n+    private float offset;\n     private final List<Float> lineDashPattern = new ArrayList<>();\n \n     private boolean fillEnabled;\n@@ -51,11 +52,14 @@ public LotteShapeStroke(JSONObject json, int frameRate) {\n                 JSONArray dashesJson = json.getJSONArray(\"d\");\n                 for (int i = 0; i < dashesJson.length(); i++) {\n                     JSONObject dashJson = dashesJson.getJSONObject(i);\n-                    if (dashJson.getString(\"n\").equals(\"o\")) {\n-                        continue;\n+                    String n = dashJson.getString(\"n\");\n+                    if (n.equals(\"o\")) {\n+                        JSONObject value = dashJson.getJSONObject(\"v\");\n+                        offset = new LotteAnimatableNumberValue(value, frameRate).getInitialValue();\n+                    } else if (n.equals(\"d\") || n.equals(\"g\")) {\n+                        JSONObject value = dashJson.getJSONObject(\"v\");\n+                        lineDashPattern.add(new LotteAnimatableNumberValue(value, frameRate).getInitialValue());\n                     }\n-                    JSONObject value = dashJson.getJSONObject(\"v\");\n-                    lineDashPattern.add(new LotteAnimatableNumberValue(value, frameRate).getInitialValue());\n                 }\n                 if (lineDashPattern.size() == 1) {\n                     // If there is only 1 value then it is assumed to be equal parts on and off.\n@@ -83,6 +87,10 @@ public List<Float> getLineDashPattern() {\n         return lineDashPattern;\n     }\n \n+    public float getDashOffset() {\n+        return offset;\n+    }\n+\n     public LineCapType getCapType() {\n         return capType;\n     }",
    "output": "Added support for line dash offset"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -1,8 +1,6 @@\n package com.airbnb.lotte.layers;\n \n-import android.graphics.Canvas;\n import android.graphics.Paint;\n-import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n \n import com.airbnb.lotte.model.LotteShapeFill;\n@@ -108,12 +106,4 @@ public LotteShapeTransform getTransform() {\n     public LotteShapeTrimPath getTrim() {\n         return trim;\n     }\n-\n-    @Override\n-    public void draw(@NonNull Canvas canvas) {\n-        super.draw(canvas);\n-//        if (fillPaint.getAlpha() != 0) {\n-//            canvas.drawPath(path.getShapePath().getInitialShape(), fillPaint);\n-//        }\n-    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n@@ -57,6 +57,10 @@ public LotteShapeStroke(JSONObject json, int frameRate) {\n                     JSONObject value = dashJson.getJSONObject(\"v\");\n                     lineDashPattern.add(new LotteAnimatableNumberValue(value, frameRate).getInitialValue());\n                 }\n+                if (lineDashPattern.size() == 1) {\n+                    // If there is only 1 value then it is assumed to be equal parts on and off.\n+                    lineDashPattern.add(lineDashPattern.get(0));\n+                }\n             }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Unable to parse stroke \" + json, e);",
    "output": "Fixed dashes with only 1 value"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -75,6 +75,7 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n             strokeLayer.rectCornerRadius = rectShape.getCornerRadius().getInitialValue();\n             strokeLayer.setRectSize(rectShape.getSize().getInitialPoint());\n             strokeLayer.rectPosition = rectShape.getPosition().getInitialPoint();\n+            strokeLayer.setLineJoinType(stroke.getJoinType());\n             addLayer(strokeLayer);\n         }\n \n@@ -192,7 +193,11 @@ public void draw(@NonNull Canvas canvas) {\n                     rectPosition.x + halfWidth,\n                     rectPosition.y + halfHeight);\n             if (L.DBG) Log.d(TAG, \"Drawing round rect \" + fillRect.toShortString() + \" radius \" + rectCornerRadius);\n-            canvas.drawRoundRect(fillRect, rectCornerRadius, rectCornerRadius, paint);\n+            if (rectCornerRadius == 0) {\n+                canvas.drawRect(fillRect, paint);\n+            } else {\n+                canvas.drawRoundRect(fillRect, rectCornerRadius, rectCornerRadius, paint);\n+            }\n         }\n     }\n ",
    "output": "Added support for rect join type"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -5,6 +5,8 @@\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PointF;\n+import android.graphics.PorterDuff;\n+import android.graphics.PorterDuffXfermode;\n import android.graphics.Shader;\n import android.support.annotation.NonNull;\n \n@@ -134,13 +136,14 @@ public void setMatte(LotteLayerView matte) {\n         this.matte = matte;\n         matteBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         matteCanvas = new Canvas(matteBitmap);\n-        mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+//        mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n     }\n \n     @Override\n     public void draw(@NonNull Canvas mainCanvas) {\n         super.draw(contentCanvas);\n \n+        Bitmap mainBitmap;\n         if (mask != null && !mask.getMasks().isEmpty()) {\n             int maskSaveCount = maskCanvas.save();\n             long parentId = this.parentId;\n@@ -159,15 +162,19 @@ public void draw(@NonNull Canvas mainCanvas) {\n             if (matte == null) {\n                 mainCanvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n             }\n+            mainBitmap = maskBitmap;\n         } else {\n             if (matte == null) {\n                 mainCanvas.drawBitmap(bitmap, 0, 0, null);\n             }\n+            mainBitmap = bitmap;\n         }\n \n         if (matte != null) {\n             matte.draw(matteCanvas);\n-            mainCanvas.drawBitmap(matteBitmap, 0, 0, mattePaint);\n+            mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n+            matteCanvas.drawBitmap(mainBitmap, 0, 0, mattePaint);\n+            mainCanvas.drawBitmap(matteBitmap, 0, 0, new Paint());\n         }\n     }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n@@ -1,10 +1,11 @@\n package com.airbnb.lotte.model;\n \n import android.graphics.Path;\n-import android.graphics.Point;\n import android.graphics.PointF;\n import android.graphics.Rect;\n+import android.support.v4.view.animation.PathInterpolatorCompat;\n import android.view.animation.Interpolator;\n+import android.view.animation.LinearInterpolator;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n@@ -16,17 +17,17 @@\n public class LotteAnimatablePointValue implements LotteAnimatableValue {\n     private static final String TAG = LotteAnimatablePointValue.class.getSimpleName();\n \n-    private final List<Point> pointKeyframes = new ArrayList<>();\n+    private final List<PointF> pointKeyframes = new ArrayList<>();\n     private final List<Float> keyTimes = new ArrayList<>();\n     private final List<Interpolator> timingFunctions = new ArrayList<>();\n \n     private boolean usePathAnimation = true;\n     private PointF initialPoint;\n     private Path animationPath;\n-    private float delay;\n-    private float duratoin;\n-    private int startFrame;\n-    private int durationFrames;\n+    private float delayMs;\n+    private float durationMs;\n+    private long startFrame;\n+    private long durationFrames;\n     private int frameRate;\n \n     public LotteAnimatablePointValue(JSONObject pointValues, int frameRate) {\n@@ -61,7 +62,94 @@ public LotteAnimatablePointValue(JSONObject pointValues, int frameRate) {\n     }\n \n     private void buildAnimationForKeyframes(JSONArray keyframes) {\n-        // TODO\n+        try {\n+            for (int i = 0; i < keyframes.length(); i++) {\n+                JSONObject kf = keyframes.getJSONObject(i);\n+                if (kf.has(\"t\")) {\n+                    startFrame = kf.getLong(\"t\");\n+                    break;\n+                }\n+            }\n+\n+            for (int i = keyframes.length() - 1; i >= 0; i--) {\n+                JSONObject keyframe = keyframes.getJSONObject(i);\n+                if (keyframe.has(\"t\")) {\n+                    long endFrame = keyframe.getLong(\"t\");\n+                    if (endFrame <= startFrame) {\n+                        throw new IllegalStateException(\"Invalid frame duration \" + startFrame + \"->\" + endFrame);\n+                    }\n+                    durationFrames = endFrame - startFrame;\n+                    durationMs = durationFrames / frameRate;\n+                    delayMs = startFrame / frameRate;\n+                    break;\n+                }\n+            }\n+\n+            boolean addStartValue = true;\n+            boolean addTimePadding =  false;\n+            JSONArray outPoint = null;\n+\n+            for (int i = 0; i < keyframes.length(); i++) {\n+                JSONObject keyframe = keyframes.getJSONObject(i);\n+                long frame = keyframe.getLong(\"t\");\n+                float timePercentage = (frame - startFrame) / durationFrames;\n+\n+                if (outPoint != null) {\n+                    PointF vertex = pointFromValueArray(outPoint);\n+                    animationPath.lineTo(vertex.x, vertex.y);\n+                    pointKeyframes.add(vertex);\n+                    timingFunctions.add(new LinearInterpolator());\n+                    outPoint = null;\n+                }\n+\n+                PointF startPoint = pointFromValueArray(keyframe.getJSONArray(\"s\"));\n+                if (addStartValue) {\n+                    if (i == 0) {\n+                        pointKeyframes.add(startPoint);\n+                        animationPath.moveTo(startPoint.x, startPoint.y);\n+                        initialPoint = startPoint;\n+                    } else {\n+                        animationPath.lineTo(startPoint.x, startPoint.y);\n+                        pointKeyframes.add(startPoint);\n+                        timingFunctions.add(new LinearInterpolator());\n+                    }\n+                    addStartValue = false;\n+                }\n+\n+                if (addTimePadding) {\n+                    float holdPercentage = timePercentage - 0.00001f;\n+                    keyTimes.add(holdPercentage);\n+                    addTimePadding = false;\n+                }\n+\n+                if (keyframe.has(\"e\")) {\n+                    PointF vertex = pointFromValueArray(keyframe.getJSONArray(\"e\"));\n+\n+                    Interpolator timingFunction;\n+                    if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n+                        PointF cp1 = pointFromValueArray(keyframe.getJSONArray(\"to\"));\n+                        PointF cp2 = pointFromValueArray(keyframe.getJSONArray(\"ti\"));\n+                        // TODO: inVertex\n+//                        animationPath.cubicTo(inVer);\n+\n+                        timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+                    } else {\n+                        timingFunction = new LinearInterpolator();\n+                    }\n+                    timingFunctions.add(timingFunction);\n+                }\n+\n+                keyTimes.add(timePercentage);\n+\n+                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+//                    outPoint = startValue;\n+                    addStartValue = true;\n+                    addTimePadding = true;\n+                }\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse keyframes \" + keyframes, e);\n+        }\n     }\n \n     private PointF pointFromValueArray(JSONArray values) {",
    "output": "Mattes work but use an ARGB_8888 canvas"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n@@ -1,19 +1,34 @@\n package com.airbnb.lotte.model;\n \n import android.annotation.SuppressLint;\n+import android.graphics.PointF;\n import android.support.annotation.Nullable;\n+import android.support.v4.view.animation.PathInterpolatorCompat;\n+import android.view.animation.Interpolator;\n+import android.view.animation.LinearInterpolator;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n @SuppressWarnings({\"FieldCanBeLocal\", \"unused\"})\n public class LotteAnimatableNumberValue implements LotteAnimatableValue {\n \n     private final int frameRate;\n     @Nullable private RemapInterface remapInterface;\n     private float initialValue;\n \n+    private final ArrayList<Float> valueKeyframes = new ArrayList<>();\n+    private final ArrayList<Float> keyTimes = new ArrayList<>();\n+    private final List<Interpolator> timingFunctions = new ArrayList<>();\n+    private long delayMs;\n+    private long durationMs;\n+    private long startFrame;\n+    private long durationFrames;\n+\n     @SuppressLint(\"UseValueOf\")\n     public LotteAnimatableNumberValue(JSONObject numberValues, int frameRate) {\n         this.frameRate = frameRate;\n@@ -37,7 +52,128 @@ public LotteAnimatableNumberValue(JSONObject numberValues, int frameRate) {\n     }\n \n     private void buildAnimationForKeyframes(JSONArray keyframes) {\n-        // TODO\n+        try {\n+            for (int i = 0; i < keyframes.length(); i++) {\n+                JSONObject kf = keyframes.getJSONObject(i);\n+                if (kf.has(\"t\")) {\n+                    startFrame = kf.getLong(\"t\");\n+                    break;\n+                }\n+            }\n+\n+            for (int i = keyframes.length() - 1; i >= 0; i--) {\n+                JSONObject keyframe = keyframes.getJSONObject(i);\n+                if (keyframe.has(\"t\")) {\n+                    long endFrame = keyframe.getLong(\"t\");\n+                    if (endFrame <= startFrame) {\n+                        throw new IllegalStateException(\"Invalid frame duration \" + startFrame + \"->\" + endFrame);\n+                    }\n+                    durationFrames = endFrame - startFrame;\n+                    durationMs = durationFrames / frameRate;\n+                    delayMs = startFrame / frameRate;\n+                    break;\n+                }\n+            }\n+\n+            boolean addStartValue = true;\n+            boolean addTimePadding =  false;\n+            Float outValue = null;\n+\n+            for (int i = 0; i < keyframes.length(); i++) {\n+                JSONObject keyframe = keyframes.getJSONObject(i);\n+                long frame = keyframe.getLong(\"t\");\n+                float timePercentage = (frame - startFrame) / durationFrames;\n+\n+                if (outValue != null) {\n+                    valueKeyframes.add(outValue);\n+                    timingFunctions.add(new LinearInterpolator());\n+                    outValue = null;\n+                }\n+\n+                Float startValue = numberValueFromObject(keyframe.get(\"s\"));\n+                if (addStartValue) {\n+                    if (startValue != null) {\n+                        if (i == 0) {\n+                            initialValue = startValue;\n+                        }\n+                        valueKeyframes.add(startValue);\n+                        if (!timingFunctions.isEmpty()) {\n+                            timingFunctions.add(new LinearInterpolator());\n+                        }\n+                    }\n+                    addStartValue = false;\n+                }\n+\n+                if (addTimePadding) {\n+                    float holdPercentage = timePercentage - 0.00001f;\n+                    keyTimes.add(holdPercentage);\n+                    addTimePadding = false;\n+                }\n+\n+                Float endValue = numberValueFromObject(keyframe.get(\"e\"));\n+                if (endValue != null) {\n+                    valueKeyframes.add(endValue);\n+                    /**\n+                     * Timing function for time interpolation between keyframes.\n+                     * Should be n - 1 where n is the number of keyframes.\n+                     */\n+                    Interpolator timingFunction;\n+                    if (keyframe.has(\"o\") && keyframe.has(\"i\")) {\n+                        JSONObject timingControlPoint1 = keyframe.getJSONObject(\"o\");\n+                        JSONObject timingControlPoint2 = keyframe.getJSONObject(\"i\");\n+                        PointF cp1 = pointValueFromDict(timingControlPoint1);\n+                        PointF cp2 = pointValueFromDict(timingControlPoint2);\n+\n+                        timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);\n+                    } else {\n+                        timingFunction = new LinearInterpolator();\n+                    }\n+                    timingFunctions.add(timingFunction);\n+                }\n+\n+                keyTimes.add(timePercentage);\n+\n+                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                    outValue = startValue;\n+                    addStartValue = true;\n+                    addTimePadding = true;\n+                }\n+            }\n+        } catch (JSONException e) {\n+\n+        }\n+    }\n+\n+    @Nullable\n+    private Float numberValueFromObject(Object valueObject) throws JSONException {\n+        if (valueObject instanceof Float) {\n+            return (Float) valueObject;\n+        } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Float) {\n+            return new Float(((JSONArray) valueObject).getDouble(0));\n+        }\n+        return null;\n+    }\n+\n+    private PointF pointValueFromDict(JSONObject values) {\n+        PointF point = new PointF();\n+        try {\n+            Object x = values.get(\"x\");\n+            if (x instanceof Float) {\n+                point.x = (float) x;\n+            } else if (x instanceof JSONArray) {\n+                point.x = new Float(((JSONArray) x).getDouble(0));\n+            }\n+\n+            Object y = values.get(\"y\");\n+            if (y instanceof Float) {\n+                point.y = (float) y;\n+            } else if (y instanceof JSONArray) {\n+                point.y = new Float(((JSONArray) y).getDouble(0));\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse point \" + values, e);\n+        }\n+        return point;\n     }\n \n     public void remapValues(float fromMin, float fromMax, float toMin, float toMax) {",
    "output": "Added parsing for LotteAnimatableNumberValue"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -172,11 +172,12 @@ public void setDashPattern(List<Float> lineDashPattern) {\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n             switch (lineCapType) {\n-                case Butt:\n-                    paint.setStrokeCap(Paint.Cap.BUTT);\n                 case Round:\n-                default:\n                     paint.setStrokeCap(Paint.Cap.ROUND);\n+                    break;\n+                case Butt:\n+                default:\n+                    paint.setStrokeCap(Paint.Cap.BUTT);\n             }\n         }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -134,11 +134,12 @@ public void setDashPattern(List<Float> lineDashPattern) {\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n             switch (lineCapType) {\n+                case Round:\n+                    paint.setStrokeCap(Paint.Cap.ROUND);\n+                    break;\n                 case Butt:\n                     paint.setStrokeCap(Paint.Cap.BUTT);\n-                case Round:\n                 default:\n-                    paint.setStrokeCap(Paint.Cap.ROUND);\n             }\n         }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -122,11 +122,12 @@ public void setDashPattern(List<Float> lineDashPattern) {\n \n     public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n         switch (lineCapType) {\n-            case Butt:\n-                paint.setStrokeCap(Paint.Cap.BUTT);\n             case Round:\n-            default:\n                 paint.setStrokeCap(Paint.Cap.ROUND);\n+                break;\n+            case Butt:\n+            default:\n+                paint.setStrokeCap(Paint.Cap.BUTT);\n         }\n     }\n ",
    "output": "Changed default line cap to be Butt"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/L.java b/lotte/src/main/java/com/airbnb/lotte/L.java\n--- a/lotte/src/main/java/com/airbnb/lotte/L.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/L.java\n@@ -1,5 +1,5 @@\n package com.airbnb.lotte;\n \n public class L {\n-    public static boolean DBG = false;\n+    public static boolean DBG = true;\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -8,9 +8,7 @@\n import android.graphics.drawable.Drawable;\n import android.support.annotation.ColorInt;\n import android.support.annotation.NonNull;\n-import android.util.Log;\n \n-import com.airbnb.lotte.L;\n import com.airbnb.lotte.utils.LotteTransform3D;\n \n import java.util.ArrayList;\n@@ -79,7 +77,6 @@ public void draw(@NonNull Canvas canvas) {\n \n         if (solidBackgroundPaint.getAlpha() != 0) {\n             canvas.drawRect(getBounds(), solidBackgroundPaint);\n-           if (L.DBG) Log.d(TAG, \"Drawing solid \" + Integer.toHexString(solidBackgroundPaint.getColor()) + \" at \" + getBounds().toShortString() + \" canvas \" + canvas.getWidth() + \"x\" + canvas.getHeight());\n         }\n         for (Drawable layer : layers) {\n             layer.draw(canvas);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -84,11 +84,11 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)\n             JSONObject opacity = null;\n             try {\n                 opacity = ks.getJSONObject(\"o\");\n-                if (L.DBG) Log.d(TAG, \"\\tOpacity=\" + opacity);\n             } catch (JSONException e) { }\n             if (opacity != null) {\n                 layer.opacity = new LotteAnimatableNumberValue(opacity, layer.frameRate);\n                 layer.opacity.remapValues(0, 100, 0, 1);\n+                if (L.DBG) Log.d(TAG, \"\\tOpacity=\" + layer.opacity.getInitialValue());\n             }\n \n             JSONObject rotation = null;\n@@ -137,6 +137,7 @@ public float remap(float inValue) {\n \n             try {\n                 layer.matteType = MatteType.values()[json.getInt(\"tt\")];\n+                if (L.DBG) Log.d(TAG, \"\\tMatte=\" + layer.matteType);\n             } catch (JSONException e) { }\n \n             JSONArray jsonMasks = null;\n@@ -157,7 +158,11 @@ public float remap(float inValue) {\n             } catch (JSONException e) { }\n             if (shapes != null) {\n                 for (int i = 0; i < shapes.length(); i++) {\n-                    layer.shapes.add(LotteShapeGroup.shapeItemWithJson(shapes.getJSONObject(i), layer.frameRate, layer.compBounds));\n+                    Object shape = LotteShapeGroup.shapeItemWithJson(shapes.getJSONObject(i), layer.frameRate, layer.compBounds);\n+                    if (shape != null) {\n+                        layer.shapes.add(shape);\n+                        if (L.DBG) Log.d(TAG, \"\\tShapes+=\" + shape.getClass().getSimpleName());\n+                    }\n                 }\n             }\n         } catch (JSONException e) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n@@ -2,9 +2,6 @@\n \n import android.graphics.Rect;\n import android.support.annotation.Nullable;\n-import android.util.Log;\n-\n-import com.airbnb.lotte.L;\n \n import org.json.JSONArray;\n import org.json.JSONException;\n@@ -27,10 +24,6 @@ public static Object shapeItemWithJson(JSONObject json, int framerate, Rect comp\n             throw new IllegalStateException(\"Shape has no type.\");\n         }\n \n-        try {\n-            if (L.DBG) Log.d(TAG, \"Parsing group layer \" + json.getString(\"nm\") + \" type \" + type);\n-        } catch (JSONException e) { }\n-\n         switch (type) {\n             case \"gr\":\n                 return new LotteShapeGroup(json, framerate, compBounds);\n@@ -85,8 +78,6 @@ public LotteShapeGroup(JSONObject json, int frameRate, Rect compBounds) {\n                 items.add(newItem);\n             }\n         }\n-\n-        if (L.DBG) Log.d(TAG, \"Parsed new group \" + name);\n     }\n \n     public List<Object> getItems() {",
    "output": "Cleaned up some logs"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -36,14 +36,12 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n \n     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n         private static final String[] FILE_NAMES = {\n-                \"bigClock.json\",\n-                \"Icon_Diamond_Still.json\",\n                 \"Icon_Lightbulb_Still.json\",\n-                \"Mask_19.json\",\n-                \"Mask_20.json\",\n-                \"Mask_21.json\",\n                 \"Mask_22.json\",\n                 \"Mask_23.json\",\n+                \"bigClock.json\",\n+                \"Icon_Diamond_Still.json\",\n+                \"Mask_20.json\",\n                 \"ellipseTrim.json\",\n         };\n ",
    "output": "Updated lightbulb asset"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -37,6 +37,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private Canvas matteCanvas;\n     private final Paint maskShapePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n     private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+    private final Paint mattePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n@@ -133,6 +134,7 @@ public void setMatte(LotteLayerView matte) {\n         this.matte = matte;\n         matteBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         matteCanvas = new Canvas(matteBitmap);\n+        mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n     }\n \n     @Override\n@@ -164,12 +166,7 @@ public void draw(@NonNull Canvas mainCanvas) {\n         }\n \n         if (matte != null) {\n-            // a = Sa * Da\n-            // c = Dc\n-            Paint mattePaint = new Paint();\n-            mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n             matte.draw(matteCanvas);\n-\n             mainCanvas.drawBitmap(matteBitmap, 0, 0, mattePaint);\n         }\n     }",
    "output": "Reuse matte paint"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -30,9 +30,6 @@ public class LotteAnimatableLayer extends Drawable {\n     protected LotteTransform3D transform;\n     /** This should mimic CALayer#sublayerTransform */\n     protected LotteTransform3D sublayerTransform;\n-    /** CALayer#mask */\n-    protected LotteMaskLayer mask;\n-    protected LotteLayerView matte;\n     protected long duration;\n     protected float speed;\n \n@@ -54,14 +51,6 @@ public void setBackgroundColor(@ColorInt int color) {\n         invalidateSelf();\n     }\n \n-    public void setMask(LotteMaskLayer mask) {\n-        this.mask = mask;\n-    }\n-\n-    public void setMatte(LotteLayerView matte) {\n-        this.matte = matte;\n-    }\n-\n     public float getSpeed() {\n         return speed;\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -25,18 +25,23 @@\n @SuppressWarnings(\"unused\")\n public class LotteLayerView extends LotteAnimatableLayer {\n \n+    /** CALayer#mask */\n+    protected LotteMaskLayer mask;\n+    protected LotteLayerView matte;\n+\n     private final Bitmap bitmap;\n     private Bitmap maskBitmap;\n+    private Bitmap matteBitmap;\n     private final Canvas contentCanvas;\n     private Canvas maskCanvas;\n+    private Canvas matteCanvas;\n     private final Paint maskShapePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n     private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n \n     private long parentId = -1;\n-    private LotteAnimatableLayer childContainerLayer;\n     private LotteLayer rotationLayer;\n     private LotteAnimationGroup animation;\n     private LotteKeyframeAnimation inOutAnimation;\n@@ -57,7 +62,7 @@ private void setupForModel() {\n         setBounds(composition.getBounds());\n         anchorPoint = new PointF();\n \n-        childContainerLayer =  new LotteAnimatableLayer(0);\n+        LotteAnimatableLayer childContainerLayer = new LotteAnimatableLayer(0);\n         childContainerLayer.setBackgroundColor(layerModel.getSolidColor());\n         childContainerLayer.setBounds(0, 0, layerModel.getSolidWidth(), layerModel.getSolidHeight());\n \n@@ -120,6 +125,16 @@ private void setupForModel() {\n         buildAnimations();\n     }\n \n+    public void setMask(LotteMaskLayer mask) {\n+        this.mask = mask;\n+    }\n+\n+    public void setMatte(LotteLayerView matte) {\n+        this.matte = matte;\n+        matteBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        matteCanvas = new Canvas(matteBitmap);\n+    }\n+\n     @Override\n     public void draw(@NonNull Canvas mainCanvas) {\n         super.draw(contentCanvas);\n@@ -153,9 +168,9 @@ public void draw(@NonNull Canvas mainCanvas) {\n             // c = Dc\n             Paint mattePaint = new Paint();\n             mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n-            matte.draw(contentCanvas);\n+            matte.draw(matteCanvas);\n \n-            mainCanvas.drawBitmap(matte.bitmap, 0, 0, mattePaint);\n+            mainCanvas.drawBitmap(matteBitmap, 0, 0, mattePaint);\n         }\n     }\n ",
    "output": "Created a bitmap for mattes.\n\nMoved matte and mask into LotteAnimatableLayer"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -42,6 +42,8 @@ private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n                 \"Mask_19.json\",\n                 \"Mask_20.json\",\n                 \"Mask_21.json\",\n+                \"Mask_22.json\",\n+                \"Mask_23.json\",\n                 \"ellipseTrim.json\",\n         };\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -139,19 +139,23 @@ public void draw(@NonNull Canvas mainCanvas) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), maskShapePaint);\n             }\n             maskCanvas.restoreToCount(maskSaveCount);\n-            mainCanvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n+            if (matte == null) {\n+                mainCanvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n+            }\n         } else {\n-            mainCanvas.drawBitmap(bitmap, 0, 0, null);\n+            if (matte == null) {\n+                mainCanvas.drawBitmap(bitmap, 0, 0, null);\n+            }\n         }\n \n         if (matte != null) {\n             // a = Sa * Da\n             // c = Dc\n             Paint mattePaint = new Paint();\n-//            mattePaint.setShader(new BitmapShader(matte.getContentBitmap(), Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n-            matte.draw(matte.contentCanvas);\n+            mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+            matte.draw(contentCanvas);\n \n-            mainCanvas.drawBitmap(maskBitmap, 0, 0, mattePaint);\n+            mainCanvas.drawBitmap(matte.bitmap, 0, 0, mattePaint);\n         }\n     }\n ",
    "output": "Mask22 works (simple Matte)"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -42,6 +42,7 @@ private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n                 \"Mask_19.json\",\n                 \"Mask_20.json\",\n                 \"Mask_21.json\",\n+                \"ellipseTrim.json\",\n         };\n \n         @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -143,6 +143,16 @@ public void draw(@NonNull Canvas mainCanvas) {\n         } else {\n             mainCanvas.drawBitmap(bitmap, 0, 0, null);\n         }\n+\n+        if (matte != null) {\n+            // a = Sa * Da\n+            // c = Dc\n+            Paint mattePaint = new Paint();\n+//            mattePaint.setShader(new BitmapShader(matte.getContentBitmap(), Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+            matte.draw(matte.contentCanvas);\n+\n+            mainCanvas.drawBitmap(maskBitmap, 0, 0, mattePaint);\n+        }\n     }\n \n     private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {",
    "output": "First attempt at Matte's. Not quite working yet"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -39,27 +39,9 @@ private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n                 \"bigClock.json\",\n                 \"Icon_Diamond_Still.json\",\n                 \"Icon_Lightbulb_Still.json\",\n-                \"ellipseTrim.json\",\n-                \"Mask_01.json\",\n-                \"Mask_02.json\",\n-                \"Mask_03.json\",\n-                \"Mask_04.json\",\n-                \"Mask_05.json\",\n-                \"Mask_06.json\",\n-                \"Mask_06b.json\",\n-                \"Mask_07.json\",\n-                \"Mask_08.json\",\n-                \"Mask_09.json\",\n-                \"Mask_10.json\",\n-                \"Mask_11.json\",\n-                \"Mask_11b.json\",\n-                \"Mask_12.json\",\n-                \"Mask_13.json\",\n-                \"Mask_14.json\",\n-                \"Mask_15.json\",\n-                \"Mask_16.json\",\n-                \"Mask_17.json\",\n-                \"Mask_18.json\",\n+                \"Mask_19.json\",\n+                \"Mask_20.json\",\n+                \"Mask_21.json\",\n         };\n \n         @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -35,6 +35,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n \n+    private long parentId = -1;\n     private LotteAnimatableLayer childContainerLayer;\n     private LotteLayer rotationLayer;\n     private LotteAnimationGroup animation;\n@@ -63,6 +64,9 @@ private void setupForModel() {\n         long parentId = layerModel.getParentId();\n         LotteAnimatableLayer currentChild = childContainerLayer;\n         while (parentId >= 0) {\n+            if (parentId >= 0) {\n+                this.parentId = parentId;\n+            }\n             LotteLayer parentModel = composition.layerModelForId(parentId);\n             LotteParentLayer parentLayer = new LotteParentLayer(parentModel, composition);\n             parentLayer.addLayer(currentChild);\n@@ -122,20 +126,14 @@ public void draw(@NonNull Canvas mainCanvas) {\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n             int maskSaveCount = maskCanvas.save();\n-            if (childContainerLayer.position != null) {\n-                maskCanvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n-            }\n-            if (childContainerLayer.transform != null) {\n-                maskCanvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n+            long parentId = this.parentId;\n+            while (parentId >= 0) {\n+                LotteLayer parent = composition.layerModelForId(parentId);\n+                applyTransformForLayer(maskCanvas, parent);\n+                parentId = parent.getParentId();\n             }\n \n-            if (childContainerLayer.sublayerTransform != null) {\n-                maskCanvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n-            }\n-\n-            if (childContainerLayer.anchorPoint != null) {\n-                maskCanvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n-            }\n+            applyTransformForLayer(maskCanvas, layerModel);\n \n             for (LotteMask m : mask.getMasks()) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), maskShapePaint);\n@@ -147,6 +145,23 @@ public void draw(@NonNull Canvas mainCanvas) {\n         }\n     }\n \n+    private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {\n+        if (layer.getPosition() != null) {\n+            canvas.translate(layer.getPosition().getInitialPoint().x, layer.getPosition().getInitialPoint().y);\n+        }\n+        if (layer.getScale().getInitialScale() != null) {\n+            canvas.scale(layer.getScale().getInitialScale().getScaleX(), layer.getScale().getInitialScale().getScaleY());\n+        }\n+\n+        if (layer.getRotation().getInitialValue() != 0) {\n+            canvas.rotate(layer.getRotation().getInitialValue());\n+        }\n+\n+        if (layer.getAnchor() != null) {\n+            canvas.translate(-layer.getAnchor().getInitialPoint().x, -layer.getAnchor().getInitialPoint().y);\n+        }\n+    }\n+\n     private void buildAnimations() {\n         // TODO\n     }",
    "output": "Parented masks work"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -20,7 +20,7 @@\n public class LotteAnimatableLayer extends Drawable {\n     private static final String TAG = LotteAnimatableLayer.class.getSimpleName();\n \n-    private final List<Drawable> layers = new ArrayList<>();\n+    protected final List<Drawable> layers = new ArrayList<>();\n \n     /** This should mimic CALayer#position */\n     protected PointF position;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -27,7 +27,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n \n     private final Bitmap bitmap;\n     private Bitmap maskBitmap;\n-    private final Canvas canvas;\n+    private final Canvas contentCanvas;\n     private Canvas maskCanvas;\n     private final Paint maskShapePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n     private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n@@ -48,7 +48,7 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         setBounds(composition.getBounds());\n         bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         maskPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n-        canvas = new Canvas(bitmap);\n+        contentCanvas = new Canvas(bitmap);\n         setupForModel();\n     }\n \n@@ -117,8 +117,8 @@ private void setupForModel() {\n     }\n \n     @Override\n-    public void draw(@NonNull Canvas canvas) {\n-        super.draw(this.canvas);\n+    public void draw(@NonNull Canvas mainCanvas) {\n+        super.draw(contentCanvas);\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n             int maskSaveCount = maskCanvas.save();\n@@ -141,9 +141,9 @@ public void draw(@NonNull Canvas canvas) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), maskShapePaint);\n             }\n             maskCanvas.restoreToCount(maskSaveCount);\n-            canvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n+            mainCanvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n         } else {\n-            canvas.drawBitmap(bitmap, 0, 0, null);\n+            mainCanvas.drawBitmap(bitmap, 0, 0, null);\n         }\n     }\n ",
    "output": "Renamed canvases in LotteAnimatableLayer"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -52,6 +52,7 @@ private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n                 \"Mask_09.json\",\n                 \"Mask_10.json\",\n                 \"Mask_11.json\",\n+                \"Mask_11b.json\",\n                 \"Mask_12.json\",\n                 \"Mask_13.json\",\n                 \"Mask_14.json\",\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -29,6 +29,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private Bitmap maskBitmap;\n     private final Canvas canvas;\n     private Canvas maskCanvas;\n+    private final Paint maskShapePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n     private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final LotteLayer layerModel;\n@@ -137,7 +138,7 @@ public void draw(@NonNull Canvas canvas) {\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n-                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), new Paint());\n+                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), maskShapePaint);\n             }\n             maskCanvas.restoreToCount(maskSaveCount);\n             canvas.drawBitmap(maskBitmap, 0, 0, maskPaint);",
    "output": "Reuse and anti alias mask paint"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -8,6 +8,7 @@\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.TextView;\n \n import com.airbnb.lotte.LotteAnimationView;\n \n@@ -76,14 +77,19 @@ public int getItemCount() {\n         }\n     }\n \n-    private static final class ViewHolder extends RecyclerView.ViewHolder {\n+    static final class ViewHolder extends RecyclerView.ViewHolder {\n+\n+        @BindView(R.id.name) TextView nameView;\n+        @BindView(R.id.animation_view) LotteAnimationView animationView;\n \n         public ViewHolder(ViewGroup parent) {\n             super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_grid_item, parent, false));\n+            ButterKnife.bind(this, itemView);\n         }\n \n         void bind(String name) {\n-            ((LotteAnimationView) itemView).setAnimation(name);\n+            nameView.setText(name);\n+            animationView.setAnimation(name);\n         }\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/L.java b/lotte/src/main/java/com/airbnb/lotte/L.java\n--- a/lotte/src/main/java/com/airbnb/lotte/L.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/L.java\n@@ -1,5 +1,5 @@\n package com.airbnb.lotte;\n \n public class L {\n-    public static boolean DBG = true;\n+    public static boolean DBG = false;\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -2,6 +2,7 @@\n \n import android.content.Context;\n import android.content.res.TypedArray;\n+import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n@@ -70,34 +71,64 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n \n     @Override\n     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n-//        if (animationContainer != null) {\n-//            setMeasuredDimension(animationContainer.getBounds().width(), animationContainer.getBounds().height());\n-//        } else {\n+        if (animationContainer != null && MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.EXACTLY && MeasureSpec.getMode(heightMeasureSpec) != MeasureSpec.EXACTLY) {\n+            setMeasuredDimension(animationContainer.getBounds().width(), animationContainer.getBounds().height());\n+        } else {\n             super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n-//        }\n+        }\n     }\n \n     public void setAnimation(String animationName) {\n+        setImageDrawable(null);\n         InputStream file;\n         try {\n             file = getContext().getAssets().open(animationName);\n-            int size = file.available();\n-            byte[] buffer = new byte[size];\n-            //noinspection ResultOfMethodCallIgnored\n-            file.read(buffer);\n-            file.close();\n-            String json = new String(buffer, \"UTF-8\");\n-\n-            setJson(new JSONObject(json));\n         } catch (IOException e) {\n             throw new IllegalStateException(\"Unable to find file \" + animationName, e);\n-        } catch (JSONException e) {\n-            throw new IllegalStateException(\"Unable to load JSON.\", e);\n         }\n+\n+        new AsyncTask<InputStream, Void, JSONObject>() {\n+            @Override\n+            protected JSONObject doInBackground(InputStream... params) {\n+                try {\n+                    InputStream file = params[0];\n+                    int size = file.available();\n+                    byte[] buffer = new byte[size];\n+                    //noinspection ResultOfMethodCallIgnored\n+                    file.read(buffer);\n+                    file.close();\n+                    String json = new String(buffer, \"UTF-8\");\n+\n+                    return new JSONObject(json);\n+                } catch (IOException e) {\n+                    throw new IllegalStateException(\"Unable to find file.\", e);\n+                } catch (JSONException e) {\n+                    throw new IllegalStateException(\"Unable to load JSON.\", e);\n+                }\n+            }\n+\n+            @Override\n+            protected void onPostExecute(JSONObject jsonObject) {\n+                setJson(jsonObject);\n+            }\n+        }.execute(file);\n     }\n \n     public void setJson(JSONObject json) {\n-        setModel(LotteComposition.fromJson(json));\n+        new AsyncTask<JSONObject, Void, LotteComposition>() {\n+\n+            @Override\n+            protected LotteComposition doInBackground(JSONObject... params) {\n+                return LotteComposition.fromJson(params[0]);\n+            }\n+\n+            @Override\n+            protected void onPostExecute(LotteComposition model) {\n+                setModel(model);\n+                setImageDrawable(animationContainer);\n+                buildSubviewsForModel();\n+            }\n+        }.execute(json);\n     }\n \n     public void setModel(LotteComposition model) {\n@@ -106,8 +137,6 @@ public void setModel(LotteComposition model) {\n         animationContainer = new RootLotteAnimatableLayer();\n         animationContainer.setBounds(0, 0, getWidth(), getHeight());\n         animationContainer.setSpeed(0f);\n-        setImageDrawable(animationContainer);\n-        buildSubviewsForModel();\n     }\n \n     public void play() {",
    "output": "Load JSON async"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/GridFragment.java\n@@ -0,0 +1,89 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import android.support.v7.widget.GridLayoutManager;\n+import android.support.v7.widget.RecyclerView;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+\n+import com.airbnb.lotte.LotteAnimationView;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class GridFragment extends Fragment {\n+\n+    public static GridFragment newInstance() {\n+        return new GridFragment();\n+    }\n+\n+    @BindView(R.id.grid) RecyclerView recyclerView;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View view = inflater.inflate(R.layout.fragment_grid, container, false);\n+        ButterKnife.bind(this, view);\n+\n+        recyclerView.setLayoutManager(new GridLayoutManager(getContext(), 2));\n+        recyclerView.setAdapter(new Adapter());\n+        return view;\n+    }\n+\n+    private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {\n+        private static final String[] FILE_NAMES = {\n+                \"bigClock.json\",\n+                \"Icon_Diamond_Still.json\",\n+                \"Icon_Lightbulb_Still.json\",\n+                \"ellipseTrim.json\",\n+                \"Mask_01.json\",\n+                \"Mask_02.json\",\n+                \"Mask_03.json\",\n+                \"Mask_04.json\",\n+                \"Mask_05.json\",\n+                \"Mask_06.json\",\n+                \"Mask_06b.json\",\n+                \"Mask_07.json\",\n+                \"Mask_08.json\",\n+                \"Mask_09.json\",\n+                \"Mask_10.json\",\n+                \"Mask_11.json\",\n+                \"Mask_12.json\",\n+                \"Mask_13.json\",\n+                \"Mask_14.json\",\n+                \"Mask_15.json\",\n+                \"Mask_16.json\",\n+                \"Mask_17.json\",\n+                \"Mask_18.json\",\n+        };\n+\n+        @Override\n+        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n+            return new ViewHolder(parent);\n+        }\n+\n+        @Override\n+        public void onBindViewHolder(ViewHolder holder, int position) {\n+            holder.bind(FILE_NAMES[position]);\n+        }\n+\n+        @Override\n+        public int getItemCount() {\n+            return FILE_NAMES.length;\n+        }\n+    }\n+\n+    private static final class ViewHolder extends RecyclerView.ViewHolder {\n+\n+        public ViewHolder(ViewGroup parent) {\n+            super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_grid_item, parent, false));\n+        }\n+\n+        void bind(String name) {\n+            ((LotteAnimationView) itemView).setAnimation(name);\n+        }\n+    }\n+}\n\ndiff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java\n@@ -11,7 +11,6 @@\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.TextView;\n-import android.widget.Toast;\n \n import java.io.IOException;\n \n@@ -59,7 +58,12 @@ private void onFileClicked(String fileName) {\n     }\n \n     private void onGridClicked() {\n-        Toast.makeText(getContext(), \"Grid\", Toast.LENGTH_SHORT).show();\n+        getFragmentManager().beginTransaction()\n+                .addToBackStack(null)\n+                .setCustomAnimations(R.anim.slide_in_right, R.anim.hold, R.anim.hold, R.anim.slide_out_right)\n+                .remove(this)\n+                .replace(R.id.content_2, GridFragment.newInstance())\n+                .commit();\n     }\n \n     final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n@@ -84,7 +88,7 @@ public void onBindViewHolder(StringViewHolder holder, int position) {\n                 holder.bind(\"Grid\");\n             } else {\n                 //noinspection ConstantConditions\n-                holder.bind(files[position]);\n+                holder.bind(files[position - 1]);\n             }\n         }\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lotte;\n \n import android.content.Context;\n+import android.content.res.TypedArray;\n import android.support.annotation.Nullable;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n@@ -52,6 +53,12 @@ public LotteAnimationView(Context context, AttributeSet attrs, int defStyleAttr)\n     }\n \n     private void init(@Nullable AttributeSet attrs) {\n+        TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LotteAnimationView);\n+        String fileName = ta.getString(R.styleable.LotteAnimationView_fileName);\n+        if (fileName != null) {\n+            setAnimation(fileName);\n+        }\n+        ta.recycle();\n     }\n \n     @Override\n@@ -63,11 +70,11 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n \n     @Override\n     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n-        if (animationContainer != null) {\n-            setMeasuredDimension(animationContainer.getBounds().width(), animationContainer.getBounds().height());\n-        } else {\n+//        if (animationContainer != null) {\n+//            setMeasuredDimension(animationContainer.getBounds().width(), animationContainer.getBounds().height());\n+//        } else {\n             super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n-        }\n+//        }\n     }\n \n     public void setAnimation(String animationName) {\n@@ -83,7 +90,7 @@ public void setAnimation(String animationName) {\n \n             setJson(new JSONObject(json));\n         } catch (IOException e) {\n-            throw new IllegalStateException(\"Unable to find file.\", e);\n+            throw new IllegalStateException(\"Unable to find file \" + animationName, e);\n         } catch (JSONException e) {\n             throw new IllegalStateException(\"Unable to load JSON.\", e);\n         }",
    "output": "Added a grid fragment"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java\n@@ -11,6 +11,7 @@\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.TextView;\n+import android.widget.Toast;\n \n import java.io.IOException;\n \n@@ -57,8 +58,13 @@ private void onFileClicked(String fileName) {\n                 .commit();\n     }\n \n-    final class FileAdapter extends RecyclerView.Adapter<FileViewHolder> {\n+    private void onGridClicked() {\n+        Toast.makeText(getContext(), \"Grid\", Toast.LENGTH_SHORT).show();\n+    }\n \n+    final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n+        static final int VIEW_TYPE_GRID = 1;\n+        static final int VIEW_TYPE_FILE = 2;\n \n         @Nullable private String[] files = null;\n \n@@ -68,37 +74,50 @@ void setFiles(@Nullable String[] files) {\n         }\n \n         @Override\n-        public FileViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n-            return new FileViewHolder(parent);\n+        public StringViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n+            return new StringViewHolder(parent);\n         }\n \n         @Override\n-        public void onBindViewHolder(FileViewHolder holder, int position) {\n-            //noinspection ConstantConditions\n-            holder.bind(files[position]);\n+        public void onBindViewHolder(StringViewHolder holder, int position) {\n+            if (holder.getItemViewType() == VIEW_TYPE_GRID) {\n+                holder.bind(\"Grid\");\n+            } else {\n+                //noinspection ConstantConditions\n+                holder.bind(files[position]);\n+            }\n         }\n \n         @Override\n         public int getItemCount() {\n-            return files == null ? 0 : files.length;\n+            return (files == null ? 0 : files.length) + 1;\n+        }\n+\n+        @Override\n+        public int getItemViewType(int position) {\n+            return position == 0 ? VIEW_TYPE_GRID : VIEW_TYPE_FILE;\n         }\n     }\n \n-    final class FileViewHolder extends RecyclerView.ViewHolder {\n+    final class StringViewHolder extends RecyclerView.ViewHolder {\n \n         @BindView(R.id.file_name) TextView fileNameView;\n \n-        FileViewHolder(ViewGroup parent) {\n+        StringViewHolder(ViewGroup parent) {\n             super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n             ButterKnife.bind(this, itemView);\n         }\n \n-        void bind(final String fileName) {\n-            fileNameView.setText(fileName);\n+        void bind(final String name) {\n+            fileNameView.setText(name);\n             itemView.setOnClickListener(new View.OnClickListener() {\n                 @Override\n                 public void onClick(View v) {\n-                    onFileClicked(fileName);\n+                    if (getItemViewType() == FileAdapter.VIEW_TYPE_GRID) {\n+                        onGridClicked();\n+                    } else {\n+                        onFileClicked(name);\n+                    }\n                 }\n             });\n         }",
    "output": "Added a grid option to the list fragment to display multiple files at the same time\n\nTODO: implement the fragment"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -19,29 +19,25 @@\n import com.airbnb.lotte.utils.LotteAnimationGroup;\n import com.airbnb.lotte.utils.LotteTransform3D;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+@SuppressWarnings(\"unused\")\n public class LotteLayerView extends LotteAnimatableLayer {\n \n     private final Bitmap bitmap;\n     private Bitmap maskBitmap;\n     private final Canvas canvas;\n     private Canvas maskCanvas;\n-    private final Paint individualMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-    private final Paint compositeMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-    private final Paint contentPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+    private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n \n-    private List<LotteGroupLayerView> shapeLayers = new ArrayList<>();\n     private LotteAnimatableLayer childContainerLayer;\n     private LotteLayer rotationLayer;\n     private LotteAnimationGroup animation;\n     private LotteKeyframeAnimation inOutAnimation;\n-    private List<LotteParentLayer> parentLayers;\n \n \n     public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n@@ -50,17 +46,8 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         this.composition = composition;\n         setBounds(composition.getBounds());\n         bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n-        individualMaskPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+        maskPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n         canvas = new Canvas(bitmap);\n-        float[] invertAlphaMatrix = {\n-                1, 0, 0, 0, 0,\n-                0, 1, 0, 0, 0,\n-                0, 0, 1, 0, 0,\n-                0, 0, 0, -1, 255\n-        };\n-//        compositeMaskPaint.setColorFilter(new ColorMatrixColorFilter(invertAlphaMatrix));\n-//        compositeMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n-//        contentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));\n         setupForModel();\n     }\n \n@@ -74,12 +61,10 @@ private void setupForModel() {\n \n         long parentId = layerModel.getParentId();\n         LotteAnimatableLayer currentChild = childContainerLayer;\n-        parentLayers = new ArrayList<>();\n         while (parentId >= 0) {\n             LotteLayer parentModel = composition.layerModelForId(parentId);\n             LotteParentLayer parentLayer = new LotteParentLayer(parentModel, composition);\n             parentLayer.addLayer(currentChild);\n-            parentLayers.add(parentLayer);\n             currentChild = parentLayer;\n             parentId = parentModel.getParentId();\n         }\n@@ -92,12 +77,6 @@ private void setupForModel() {\n         childContainerLayer.transform = layerModel.getScale().getInitialScale();\n         childContainerLayer.sublayerTransform = new LotteTransform3D();\n         childContainerLayer.sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n-//        position = layerModel.getPosition().getInitialPoint();\n-//        anchorPoint = layerModel.getAnchor().getInitialPoint();\n-//        transform = layerModel.getScale().getInitialScale();\n-//        sublayerTransform = new LotteTransform3D();\n-//        sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n-\n \n         setVisible(layerModel.isHasInAnimation(), false);\n \n@@ -113,7 +92,6 @@ private void setupForModel() {\n                 LotteGroupLayerView groupLayer = new LotteGroupLayerView((LotteShapeGroup) item, currentFill,\n                         currentStroke, currentTrimPath, currentTransform, duration);\n                 childContainerLayer.addLayer(groupLayer);\n-                shapeLayers.add(groupLayer);\n             } else if (item instanceof LotteShapeTransform) {\n                 currentTransform = (LotteShapeTransform) item;\n             } else if (item instanceof LotteShapeFill) {\n@@ -128,7 +106,10 @@ private void setupForModel() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n-            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ALPHA_8);\n+            maskBitmap = Bitmap.createBitmap(\n+                    composition.getBounds().width(),\n+                    composition.getBounds().height(),\n+                    Bitmap.Config.ALPHA_8);\n             maskCanvas = new Canvas(maskBitmap);\n         }\n         buildAnimations();\n@@ -159,9 +140,7 @@ public void draw(@NonNull Canvas canvas) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), new Paint());\n             }\n             maskCanvas.restoreToCount(maskSaveCount);\n-            Paint paint = new Paint();\n-            paint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n-            canvas.drawBitmap(maskBitmap, 0, 0, paint);\n+            canvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, null);\n         }",
    "output": "Cleaned up LotteLayerView"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -5,8 +5,6 @@\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PointF;\n-import android.graphics.PorterDuff;\n-import android.graphics.PorterDuffXfermode;\n import android.graphics.Shader;\n import android.support.annotation.NonNull;\n \n@@ -130,7 +128,7 @@ private void setupForModel() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n-            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ALPHA_8);\n             maskCanvas = new Canvas(maskBitmap);\n         }\n         buildAnimations();\n@@ -141,36 +139,29 @@ public void draw(@NonNull Canvas canvas) {\n         super.draw(this.canvas);\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n-            int saveCount = this.canvas.save();\n             int maskSaveCount = maskCanvas.save();\n             if (childContainerLayer.position != null) {\n-                this.canvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n                 maskCanvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n             }\n             if (childContainerLayer.transform != null) {\n-                this.canvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n                 maskCanvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n             }\n \n             if (childContainerLayer.sublayerTransform != null) {\n-                this.canvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n                 maskCanvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n             }\n \n             if (childContainerLayer.anchorPoint != null) {\n-                this.canvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n                 maskCanvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), new Paint());\n             }\n-            this.canvas.restoreToCount(saveCount);\n             maskCanvas.restoreToCount(maskSaveCount);\n             Paint paint = new Paint();\n-            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n-            maskCanvas.drawBitmap(bitmap, 0, 0, paint);\n-            canvas.drawBitmap(maskBitmap, 0, 0, new Paint());\n+            paint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+            canvas.drawBitmap(maskBitmap, 0, 0, paint);\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, null);\n         }",
    "output": "Updated mask to use ALPHA_8"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -5,6 +5,8 @@\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PointF;\n+import android.graphics.PorterDuff;\n+import android.graphics.PorterDuffXfermode;\n import android.graphics.Shader;\n import android.support.annotation.NonNull;\n \n@@ -139,27 +141,36 @@ public void draw(@NonNull Canvas canvas) {\n         super.draw(this.canvas);\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n-            int maskSaveCount = canvas.save();\n+            int saveCount = this.canvas.save();\n+            int maskSaveCount = maskCanvas.save();\n             if (childContainerLayer.position != null) {\n-                canvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n+                this.canvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n+                maskCanvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n             }\n             if (childContainerLayer.transform != null) {\n-                canvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n+                this.canvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n+                maskCanvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n             }\n \n             if (childContainerLayer.sublayerTransform != null) {\n-                canvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n+                this.canvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n+                maskCanvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n             }\n \n             if (childContainerLayer.anchorPoint != null) {\n-                canvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n+                this.canvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n+                maskCanvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n-                canvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n+                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), new Paint());\n             }\n-//            canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), individualMaskPaint);\n-            canvas.restoreToCount(maskSaveCount);\n+            this.canvas.restoreToCount(saveCount);\n+            maskCanvas.restoreToCount(maskSaveCount);\n+            Paint paint = new Paint();\n+            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n+            maskCanvas.drawBitmap(bitmap, 0, 0, paint);\n+            canvas.drawBitmap(maskBitmap, 0, 0, new Paint());\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, null);\n         }",
    "output": "Another attempt at masks. They all seem to be working but the mask is argb8888"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -1,11 +1,11 @@\n package com.airbnb.lotte.layers;\n \n import android.graphics.Bitmap;\n+import android.graphics.BitmapShader;\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PointF;\n-import android.graphics.PorterDuff;\n-import android.graphics.PorterDuffXfermode;\n+import android.graphics.Shader;\n import android.support.annotation.NonNull;\n \n import com.airbnb.lotte.model.LotteComposition;\n@@ -50,6 +50,7 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         this.composition = composition;\n         setBounds(composition.getBounds());\n         bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        individualMaskPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n         canvas = new Canvas(bitmap);\n         float[] invertAlphaMatrix = {\n                 1, 0, 0, 0, 0,\n@@ -58,7 +59,7 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n                 0, 0, 0, -1, 255\n         };\n //        compositeMaskPaint.setColorFilter(new ColorMatrixColorFilter(invertAlphaMatrix));\n-        compositeMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+//        compositeMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n //        contentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));\n         setupForModel();\n     }\n@@ -138,31 +139,29 @@ public void draw(@NonNull Canvas canvas) {\n         super.draw(this.canvas);\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n-            int maskSaveCount = maskCanvas.save();\n-            if (position != null) {\n-                maskCanvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n+            int maskSaveCount = canvas.save();\n+            if (childContainerLayer.position != null) {\n+                canvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n             }\n-            if (transform != null) {\n-                maskCanvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n+            if (childContainerLayer.transform != null) {\n+                canvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n             }\n \n-            if (sublayerTransform != null) {\n-                maskCanvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n+            if (childContainerLayer.sublayerTransform != null) {\n+                canvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n             }\n \n-            if (anchorPoint != null) {\n-                maskCanvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n+            if (childContainerLayer.anchorPoint != null) {\n+                canvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n-                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n+                canvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n             }\n-            maskCanvas.restoreToCount(maskSaveCount);\n-            canvas.drawBitmap(bitmap, 0, 0, contentPaint /*contentPaint*/);\n-            this.canvas.drawBitmap(maskBitmap, 0, 0, compositeMaskPaint /*compositeMaskPaint*/);\n-            canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n+//            canvas.drawRect(0, 0, canvas.getWidth(), canvas.getHeight(), individualMaskPaint);\n+            canvas.restoreToCount(maskSaveCount);\n         } else {\n-            canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n+            canvas.drawBitmap(bitmap, 0, 0, null);\n         }\n     }\n ",
    "output": "Draw the mask with a bitmap shader"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -37,7 +37,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private final LotteComposition composition;\n \n     private List<LotteGroupLayerView> shapeLayers = new ArrayList<>();\n-    private LotteLayer childContainerLayer;\n+    private LotteAnimatableLayer childContainerLayer;\n     private LotteLayer rotationLayer;\n     private LotteAnimationGroup animation;\n     private LotteKeyframeAnimation inOutAnimation;\n@@ -67,7 +67,7 @@ private void setupForModel() {\n         setBounds(composition.getBounds());\n         anchorPoint = new PointF();\n \n-        LotteAnimatableLayer childContainerLayer = new LotteAnimatableLayer(0);\n+        childContainerLayer =  new LotteAnimatableLayer(0);\n         childContainerLayer.setBackgroundColor(layerModel.getSolidColor());\n         childContainerLayer.setBounds(0, 0, layerModel.getSolidWidth(), layerModel.getSolidHeight());\n \n@@ -85,6 +85,19 @@ private void setupForModel() {\n         addLayer(currentChild);\n \n         childContainerLayer.setAlpha((int) (layerModel.getOpacity().getInitialValue() * 255));\n+\n+        childContainerLayer.position = layerModel.getPosition().getInitialPoint();\n+        childContainerLayer.anchorPoint = layerModel.getAnchor().getInitialPoint();\n+        childContainerLayer.transform = layerModel.getScale().getInitialScale();\n+        childContainerLayer.sublayerTransform = new LotteTransform3D();\n+        childContainerLayer.sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n+//        position = layerModel.getPosition().getInitialPoint();\n+//        anchorPoint = layerModel.getAnchor().getInitialPoint();\n+//        transform = layerModel.getScale().getInitialScale();\n+//        sublayerTransform = new LotteTransform3D();\n+//        sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n+\n+\n         setVisible(layerModel.isHasInAnimation(), false);\n \n         List<Object> reversedItems = layerModel.getShapes();\n@@ -111,12 +124,6 @@ private void setupForModel() {\n             }\n         }\n \n-        position = layerModel.getPosition().getInitialPoint();\n-        anchorPoint = layerModel.getAnchor().getInitialPoint();\n-        transform = layerModel.getScale().getInitialScale();\n-        sublayerTransform = new LotteTransform3D();\n-        sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n-\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n@@ -133,19 +140,18 @@ public void draw(@NonNull Canvas canvas) {\n         if (mask != null && !mask.getMasks().isEmpty()) {\n             int maskSaveCount = maskCanvas.save();\n             if (position != null) {\n-                maskCanvas.translate(position.x, position.y);\n+                maskCanvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n             }\n             if (transform != null) {\n-                maskCanvas.scale(transform.getScaleX(), transform.getScaleY());\n+                maskCanvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n             }\n \n             if (sublayerTransform != null) {\n-                maskCanvas.rotate(sublayerTransform.getRotationZ());\n+                maskCanvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n             }\n \n             if (anchorPoint != null) {\n-//                maskCanvas.translate(canvas.getWidth() / 2, canvas.getHeight() / 2);\n-                maskCanvas.translate(-anchorPoint.x, -anchorPoint.y);\n+                maskCanvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n@@ -158,7 +164,6 @@ public void draw(@NonNull Canvas canvas) {\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n         }\n-\n     }\n \n     private void buildAnimations() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n@@ -18,7 +18,7 @@ public LotteParentLayer(LotteLayer parent, LotteComposition composition) {\n         setBounds(parent.getCompBounds());\n         this.parentModel = parent;\n         setupLayerFromModel();\n-        if (L.DBG) Log.d(TAG, \"Creating parentModel layer for \" + parent.toString());\n+        if (L.DBG) Log.d(TAG, \"Creating parentModel layer for \" + parent.getLayerName());\n     }\n \n     private void setupLayerFromModel() {",
    "output": "WIP bigClock works again but masks are broken"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -85,11 +85,6 @@ private void setupForModel() {\n         addLayer(currentChild);\n \n         childContainerLayer.setAlpha((int) (layerModel.getOpacity().getInitialValue() * 255));\n-        childContainerLayer.position = layerModel.getPosition().getInitialPoint();\n-        childContainerLayer.anchorPoint = layerModel.getAnchor().getInitialPoint();\n-        childContainerLayer.transform = layerModel.getScale().getInitialScale();\n-        childContainerLayer.sublayerTransform = new LotteTransform3D();\n-        childContainerLayer.sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n         setVisible(layerModel.isHasInAnimation(), false);\n \n         List<Object> reversedItems = layerModel.getShapes();\n@@ -116,18 +111,23 @@ private void setupForModel() {\n             }\n         }\n \n+        position = layerModel.getPosition().getInitialPoint();\n+        anchorPoint = layerModel.getAnchor().getInitialPoint();\n+        transform = layerModel.getScale().getInitialScale();\n+        sublayerTransform = new LotteTransform3D();\n+        sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());\n+\n+\n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n             maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n             maskCanvas = new Canvas(maskBitmap);\n-//            childContainerLayer.setMask(mask);\n         }\n         buildAnimations();\n     }\n \n     @Override\n     public void draw(@NonNull Canvas canvas) {\n-        int saveCount = canvas.save();\n         super.draw(this.canvas);\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n@@ -144,22 +144,21 @@ public void draw(@NonNull Canvas canvas) {\n             }\n \n             if (anchorPoint != null) {\n-                maskCanvas.translate(canvas.getWidth() / 2, canvas.getHeight() / 2);\n+//                maskCanvas.translate(canvas.getWidth() / 2, canvas.getHeight() / 2);\n                 maskCanvas.translate(-anchorPoint.x, -anchorPoint.y);\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n             }\n             maskCanvas.restoreToCount(maskSaveCount);\n-            canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint /*contentPaint*/);\n+            canvas.drawBitmap(bitmap, 0, 0, contentPaint /*contentPaint*/);\n             this.canvas.drawBitmap(maskBitmap, 0, 0, compositeMaskPaint /*compositeMaskPaint*/);\n             canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n         }\n \n-        canvas.restoreToCount(saveCount);\n     }\n \n     private void buildAnimations() {",
    "output": "Moved transforms from childContainer to LotteLayerView\n\nMasks work but bigClock doesn't"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -2,7 +2,6 @@\n \n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n-import android.graphics.ColorMatrixColorFilter;\n import android.graphics.Paint;\n import android.graphics.PointF;\n import android.graphics.PorterDuff;\n@@ -58,9 +57,9 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n                 0, 0, 1, 0, 0,\n                 0, 0, 0, -1, 255\n         };\n-        compositeMaskPaint.setColorFilter(new ColorMatrixColorFilter(invertAlphaMatrix));\n+//        compositeMaskPaint.setColorFilter(new ColorMatrixColorFilter(invertAlphaMatrix));\n         compositeMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n-        contentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_ATOP));\n+//        contentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));\n         setupForModel();\n     }\n \n@@ -119,9 +118,9 @@ private void setupForModel() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n-            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ALPHA_8);\n+            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n             maskCanvas = new Canvas(maskBitmap);\n-            childContainerLayer.setMask(mask);\n+//            childContainerLayer.setMask(mask);\n         }\n         buildAnimations();\n     }\n@@ -130,12 +129,32 @@ private void setupForModel() {\n     public void draw(@NonNull Canvas canvas) {\n         int saveCount = canvas.save();\n         super.draw(this.canvas);\n+\n         if (mask != null && !mask.getMasks().isEmpty()) {\n+            int maskSaveCount = maskCanvas.save();\n+            if (position != null) {\n+                maskCanvas.translate(position.x, position.y);\n+            }\n+            if (transform != null) {\n+                maskCanvas.scale(transform.getScaleX(), transform.getScaleY());\n+            }\n+\n+            if (sublayerTransform != null) {\n+                maskCanvas.rotate(sublayerTransform.getRotationZ());\n+            }\n+\n+            if (anchorPoint != null) {\n+                maskCanvas.translate(canvas.getWidth() / 2, canvas.getHeight() / 2);\n+                maskCanvas.translate(-anchorPoint.x, -anchorPoint.y);\n+            }\n+\n             for (LotteMask m : mask.getMasks()) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n             }\n-            canvas.drawBitmap(maskBitmap, 0, 0, compositeMaskPaint);\n-            canvas.drawBitmap(bitmap, 0, 0, contentPaint);\n+            maskCanvas.restoreToCount(maskSaveCount);\n+            canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint /*contentPaint*/);\n+            this.canvas.drawBitmap(maskBitmap, 0, 0, compositeMaskPaint /*compositeMaskPaint*/);\n+            canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n         }",
    "output": "Mask 5 and 6 works but uses less efficient mask bitmap and masks 1-4 are translated too much"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -130,15 +130,16 @@ private void setupForModel() {\n     public void draw(@NonNull Canvas canvas) {\n         int saveCount = canvas.save();\n         super.draw(this.canvas);\n-\n-        if (mask != null) {\n+        if (mask != null && !mask.getMasks().isEmpty()) {\n             for (LotteMask m : mask.getMasks()) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n             }\n             canvas.drawBitmap(maskBitmap, 0, 0, compositeMaskPaint);\n+            canvas.drawBitmap(bitmap, 0, 0, contentPaint);\n+        } else {\n+            canvas.drawBitmap(bitmap, 0, 0, individualMaskPaint);\n         }\n \n-        canvas.drawBitmap(bitmap, 0, 0, contentPaint);\n         canvas.restoreToCount(saveCount);\n     }\n ",
    "output": "Fixed the drawing of layers with no masks"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -30,8 +30,9 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private Bitmap maskBitmap;\n     private final Canvas canvas;\n     private Canvas maskCanvas;\n-    private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n-    private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+    private final Paint individualMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+    private final Paint compositeMaskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+    private final Paint contentPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n@@ -51,15 +52,15 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         setBounds(composition.getBounds());\n         bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         canvas = new Canvas(bitmap);\n-        // Inverts the alpha channel.\n-        float[] colorMatrix = {\n+        float[] invertAlphaMatrix = {\n                 1, 0, 0, 0, 0,\n                 0, 1, 0, 0, 0,\n                 0, 0, 1, 0, 0,\n                 0, 0, 0, -1, 255\n         };\n-        maskPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));\n-        maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n+        compositeMaskPaint.setColorFilter(new ColorMatrixColorFilter(invertAlphaMatrix));\n+        compositeMaskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\n+        contentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_ATOP));\n         setupForModel();\n     }\n \n@@ -118,7 +119,7 @@ private void setupForModel() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n-            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ALPHA_8);\n             maskCanvas = new Canvas(maskBitmap);\n             childContainerLayer.setMask(mask);\n         }\n@@ -132,12 +133,12 @@ public void draw(@NonNull Canvas canvas) {\n \n         if (mask != null) {\n             for (LotteMask m : mask.getMasks()) {\n-                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), paint);\n+                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), individualMaskPaint);\n             }\n-            this.canvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n+            canvas.drawBitmap(maskBitmap, 0, 0, compositeMaskPaint);\n         }\n \n-        canvas.drawBitmap(bitmap, 0, 0, paint);\n+        canvas.drawBitmap(bitmap, 0, 0, contentPaint);\n         canvas.restoreToCount(saveCount);\n     }\n ",
    "output": "Alpha mask now uses ALPHA_8 for memory efficiency"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -215,7 +215,7 @@ public float remap(float inValue) {\n     private Rect compBounds;\n     private int frameRate;\n \n-    private List<LotteMask> masks;\n+    private List<LotteMask> masks = new ArrayList<>();\n \n     private int solidWidth;\n     private int solidHeight;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.Bitmap;\n import android.graphics.Canvas;\n+import android.graphics.ColorMatrixColorFilter;\n import android.graphics.Paint;\n import android.graphics.PointF;\n import android.graphics.PorterDuff;\n@@ -26,9 +27,11 @@\n public class LotteLayerView extends LotteAnimatableLayer {\n \n     private final Bitmap bitmap;\n+    private Bitmap maskBitmap;\n     private final Canvas canvas;\n-    private final Paint paint = new Paint();\n-    private final Paint maskPaint = new Paint();\n+    private Canvas maskCanvas;\n+    private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n+    private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n \n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n@@ -48,7 +51,15 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         setBounds(composition.getBounds());\n         bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         canvas = new Canvas(bitmap);\n-        maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OVER));\n+        // Inverts the alpha channel.\n+        float[] colorMatrix = {\n+                1, 0, 0, 0, 0,\n+                0, 1, 0, 0, 0,\n+                0, 0, 1, 0, 0,\n+                0, 0, 0, -1, 255\n+        };\n+        maskPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));\n+        maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\n         setupForModel();\n     }\n \n@@ -107,6 +118,8 @@ private void setupForModel() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n+            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+            maskCanvas = new Canvas(maskBitmap);\n             childContainerLayer.setMask(mask);\n         }\n         buildAnimations();\n@@ -116,14 +129,16 @@ private void setupForModel() {\n     public void draw(@NonNull Canvas canvas) {\n         int saveCount = canvas.save();\n         super.draw(this.canvas);\n-        canvas.drawBitmap(bitmap, 0, 0, paint);\n-        canvas.restoreToCount(saveCount);\n \n         if (mask != null) {\n             for (LotteMask m : mask.getMasks()) {\n-                canvas.drawPath(m.getMaskPath().getInitialShape(), maskPaint);\n+                maskCanvas.drawPath(m.getMaskPath().getInitialShape(), paint);\n             }\n+            this.canvas.drawBitmap(maskBitmap, 0, 0, maskPaint);\n         }\n+\n+        canvas.drawBitmap(bitmap, 0, 0, paint);\n+        canvas.restoreToCount(saveCount);\n     }\n \n     private void buildAnimations() {",
    "output": "Simple masks work"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -157,8 +157,7 @@ public float remap(float inValue) {\n             } catch (JSONException e) { }\n             if (shapes != null) {\n                 for (int i = 0; i < shapes.length(); i++) {\n-                    LotteShapeGroup shapeGroup = new LotteShapeGroup(shapes.getJSONObject(i), layer.frameRate, layer.compBounds);\n-                    layer.shapes.add(shapeGroup);\n+                    layer.shapes.add(LotteShapeGroup.shapeItemWithJson(shapes.getJSONObject(i), layer.frameRate, layer.compBounds));\n                 }\n             }\n         } catch (JSONException e) {\n@@ -216,7 +215,7 @@ public float remap(float inValue) {\n     private Rect compBounds;\n     private int frameRate;\n \n-    private List<LotteMask> masks = new ArrayList<>();\n+    private List<LotteMask> masks;\n \n     private int solidWidth;\n     private int solidHeight;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -4,10 +4,13 @@\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PointF;\n+import android.graphics.PorterDuff;\n+import android.graphics.PorterDuffXfermode;\n import android.support.annotation.NonNull;\n \n import com.airbnb.lotte.model.LotteComposition;\n import com.airbnb.lotte.model.LotteKeyframeAnimation;\n+import com.airbnb.lotte.model.LotteMask;\n import com.airbnb.lotte.model.LotteShapeFill;\n import com.airbnb.lotte.model.LotteShapeGroup;\n import com.airbnb.lotte.model.LotteShapeStroke;\n@@ -25,6 +28,7 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private final Bitmap bitmap;\n     private final Canvas canvas;\n     private final Paint paint = new Paint();\n+    private final Paint maskPaint = new Paint();\n \n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n@@ -44,6 +48,7 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         setBounds(composition.getBounds());\n         bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n         canvas = new Canvas(bitmap);\n+        maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OVER));\n         setupForModel();\n     }\n \n@@ -114,6 +119,11 @@ public void draw(@NonNull Canvas canvas) {\n         canvas.drawBitmap(bitmap, 0, 0, paint);\n         canvas.restoreToCount(saveCount);\n \n+        if (mask != null) {\n+            for (LotteMask m : mask.getMasks()) {\n+                canvas.drawPath(m.getMaskPath().getInitialShape(), maskPaint);\n+            }\n+        }\n     }\n \n     private void buildAnimations() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n@@ -17,6 +17,41 @@\n public class LotteShapeGroup {\n     private static final String TAG = LotteShapeGroup.class.getSimpleName();\n \n+    @Nullable\n+    public static Object shapeItemWithJson(JSONObject json, int framerate, Rect compBounds) {\n+        String type = null;\n+        try {\n+            type = json.getString(\"ty\");\n+        } catch (JSONException e) { }\n+        if (type == null) {\n+            throw new IllegalStateException(\"Shape has no type.\");\n+        }\n+\n+        try {\n+            if (L.DBG) Log.d(TAG, \"Parsing group layer \" + json.getString(\"nm\") + \" type \" + type);\n+        } catch (JSONException e) { }\n+\n+        switch (type) {\n+            case \"gr\":\n+                return new LotteShapeGroup(json, framerate, compBounds);\n+            case \"st\":\n+                return new LotteShapeStroke(json, framerate);\n+            case \"fl\":\n+                return new LotteShapeFill(json, framerate);\n+            case \"tr\":\n+                return new LotteShapeTransform(json, framerate, compBounds);\n+            case \"sh\":\n+                return new LotteShapePath(json, framerate);\n+            case \"el\":\n+                return new LotteShapeCircle(json, framerate);\n+            case \"rc\":\n+                return new LotteShapeRectangle(json, framerate);\n+            case \"tm\":\n+                return new LotteShapeTrimPath(json, framerate);\n+        }\n+        return null;\n+    }\n+\n     private String name;\n     private final List<Object> items = new ArrayList<>();\n \n@@ -54,41 +89,6 @@ public LotteShapeGroup(JSONObject json, int frameRate, Rect compBounds) {\n         if (L.DBG) Log.d(TAG, \"Parsed new group \" + name);\n     }\n \n-    @Nullable\n-    private Object shapeItemWithJson(JSONObject json, int framerate, Rect compBounds) {\n-        String type = null;\n-        try {\n-            type = json.getString(\"ty\");\n-        } catch (JSONException e) { }\n-        if (type == null) {\n-            throw new IllegalStateException(\"Shape has no type.\");\n-        }\n-\n-        try {\n-            if (L.DBG) Log.d(TAG, \"Parsing group layer \" + json.getString(\"nm\") + \" type \" + type);\n-        } catch (JSONException e) { }\n-\n-        switch (type) {\n-            case \"gr\":\n-                return new LotteShapeGroup(json, framerate, compBounds);\n-            case \"st\":\n-                return new LotteShapeStroke(json, framerate);\n-            case \"fl\":\n-                return new LotteShapeFill(json, framerate);\n-            case \"tr\":\n-                return new LotteShapeTransform(json, framerate, compBounds);\n-            case \"sh\":\n-                return new LotteShapePath(json, framerate);\n-            case \"el\":\n-                return new LotteShapeCircle(json, framerate);\n-            case \"rc\":\n-                return new LotteShapeRectangle(json, framerate);\n-            case \"tm\":\n-                return new LotteShapeTrimPath(json, framerate);\n-        }\n-        return null;\n-    }\n-\n     public List<Object> getItems() {\n         return items;\n     }",
    "output": "Shapes now exist at the correct level rather than always being parsed into a ShapeGroup"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -1,6 +1,10 @@\n package com.airbnb.lotte.layers;\n \n+import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n+import android.graphics.Paint;\n import android.graphics.PointF;\n+import android.support.annotation.NonNull;\n \n import com.airbnb.lotte.model.LotteComposition;\n import com.airbnb.lotte.model.LotteKeyframeAnimation;\n@@ -18,6 +22,10 @@\n \n public class LotteLayerView extends LotteAnimatableLayer {\n \n+    private final Bitmap bitmap;\n+    private final Canvas canvas;\n+    private final Paint paint = new Paint();\n+\n     private final LotteLayer layerModel;\n     private final LotteComposition composition;\n \n@@ -34,6 +42,8 @@ public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n         this.layerModel = layerModel;\n         this.composition = composition;\n         setBounds(composition.getBounds());\n+        bitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+        canvas = new Canvas(bitmap);\n         setupForModel();\n     }\n \n@@ -97,6 +107,15 @@ private void setupForModel() {\n         buildAnimations();\n     }\n \n+    @Override\n+    public void draw(@NonNull Canvas canvas) {\n+        int saveCount = canvas.save();\n+        super.draw(this.canvas);\n+        canvas.drawBitmap(bitmap, 0, 0, paint);\n+        canvas.restoreToCount(saveCount);\n+\n+    }\n+\n     private void buildAnimations() {\n         // TODO\n     }",
    "output": "Render each LotteLayerView on its own canvas"
  },
  {
    "input": "diff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/LotteTest.java\n@@ -0,0 +1,31 @@\n+package com.airbnb.lotte.samples;\n+\n+\n+import android.test.ActivityInstrumentationTestCase2;\n+\n+import com.airbnb.lotte.LotteAnimationView;\n+import com.facebook.testing.screenshot.Screenshot;\n+import com.facebook.testing.screenshot.ViewHelpers;\n+\n+import org.junit.Test;\n+\n+public class LotteTest extends ActivityInstrumentationTestCase2<MainActivity> {\n+\n+    public LotteTest() {\n+        super(MainActivity.class);\n+    }\n+\n+    @Test\n+\n+    public void testSquishy() {\n+        LotteAnimationView view = new LotteAnimationView(getActivity());\n+        view.setAnimation(\"twoShapes.json\");\n+        ViewHelpers.setupView(view)\n+                .layout();\n+\n+        Screenshot.snap(view)\n+                .setName(\"Two Shapes\")\n+                .record();\n+\n+    }\n+}\n\ndiff --git a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRunner.java b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRunner.java\n--- a/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRunner.java\n+++ b/LotteSample/src/androidTest/java/com/airbnb/lotte/samples/TestRunner.java\n@@ -0,0 +1,7 @@\n+package com.airbnb.lotte.samples;\n+\n+import android.support.test.runner.AndroidJUnitRunner;\n+\n+\n+public class TestRunner extends AndroidJUnitRunner {\n+}",
    "output": "Added Facebook screenshot tests but they don't quite work yet"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -124,7 +124,8 @@ private void buildSubviewsForModel() {\n             LotteLayerView layerDrawable = new LotteLayerView(layer, sceneModel);\n             layerMap.put(layerDrawable.getId(), layerDrawable);\n             if (maskedLayer != null) {\n-                maskedLayer.setMask(layerDrawable);\n+                maskedLayer.setMatte(layerDrawable);\n+                maskedLayer = null;\n             } else {\n                 if (layer.getMatteType() == LotteLayer.MatteType.Add) {\n                     maskedLayer = layerDrawable;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -30,8 +30,10 @@ public class LotteAnimatableLayer extends Drawable {\n     protected LotteTransform3D transform;\n     /** This should mimic CALayer#sublayerTransform */\n     protected LotteTransform3D sublayerTransform;\n-    protected long duration;\n+    /** CALayer#mask */\n     protected LotteMaskLayer mask;\n+    protected LotteLayerView matte;\n+    protected long duration;\n     protected float speed;\n \n     private final Paint solidBackgroundPaint = new Paint();\n@@ -56,6 +58,10 @@ public void setMask(LotteMaskLayer mask) {\n         this.mask = mask;\n     }\n \n+    public void setMatte(LotteLayerView matte) {\n+        this.matte = matte;\n+    }\n+\n     public float getSpeed() {\n         return speed;\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java\n@@ -27,8 +27,6 @@ public class LotteLayerView extends LotteAnimatableLayer {\n     private LotteAnimationGroup animation;\n     private LotteKeyframeAnimation inOutAnimation;\n     private List<LotteParentLayer> parentLayers;\n-    private LotteMaskLayer maskLayer;\n-    private LotteLayerView mask;\n \n \n     public LotteLayerView(LotteLayer layerModel, LotteComposition composition) {\n@@ -93,16 +91,8 @@ private void setupForModel() {\n         }\n \n         if (layerModel.getMasks() != null) {\n-            maskLayer = new LotteMaskLayer(layerModel.getMasks(), composition);\n-            childContainerLayer.setMask(maskLayer);\n-        }\n-\n-        // TODO: figure out if this is necessary\n-        List<Object> childLayers = new ArrayList<>(parentLayers.size() + shapeLayers.size() + (maskLayer == null ? 0 : 1));\n-        childLayers.addAll(parentLayers);\n-        childLayers.addAll(shapeLayers);\n-        if (maskLayer != null) {\n-            childLayers.add(maskLayer);\n+            mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n+            childContainerLayer.setMask(mask);\n         }\n         buildAnimations();\n     }\n@@ -114,16 +104,4 @@ private void buildAnimations() {\n     public long getId() {\n         return layerModel.getId();\n     }\n-\n-    public LotteMaskLayer getMaskLayer() {\n-        return maskLayer;\n-    }\n-\n-    public void setMaskLayer(LotteMaskLayer maskLayer) {\n-        this.maskLayer = maskLayer;\n-    }\n-\n-    public void setMask(LotteLayerView mask) {\n-        this.mask = mask;\n-    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java\n@@ -5,14 +5,12 @@\n import com.airbnb.lotte.model.LotteComposition;\n import com.airbnb.lotte.model.LotteMask;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n public class LotteMaskLayer extends LotteAnimatableLayer {\n \n     private final List<LotteMask> masks;\n     private final LotteComposition composition;\n-    private final List<LotteMaskLayer> maskLayers = new ArrayList<>();\n \n     public LotteMaskLayer(List<LotteMask> masks, LotteComposition composition) {\n         super(composition.getDuration());\n@@ -27,6 +25,12 @@ private void setupViewFromModel() {\n             maskLayer.setColor(Color.WHITE);\n             maskLayer.setAlpha((int) (mask.getOpacity().getInitialValue() * 255));\n             addLayer(maskLayer);\n+\n+            // TODO: animations\n         }\n     }\n+\n+    public List<LotteMask> getMasks() {\n+        return masks;\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteMask.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lotte.model;\n \n+import org.json.JSONException;\n import org.json.JSONObject;\n \n public class LotteMask {\n@@ -17,8 +18,30 @@ public enum MaskMode {\n     private LotteAnimatableShapeValue maskPath;\n     private LotteAnimatableNumberValue opacity;\n \n-    public LotteMask(JSONObject json, long frameRate) {\n-        // TODO\n+    public LotteMask(JSONObject json, int frameRate) {\n+        try {\n+            closed = json.getBoolean(\"cl\");\n+            inverted = json.getBoolean(\"inv\");\n+            String mode = json.getString(\"mode\");\n+            switch (mode) {\n+                case \"a\":\n+                    maskMode = MaskMode.MaskModeAdd;\n+                    break;\n+                case \"s\":\n+                    maskMode = MaskMode.MaskModeSubtract;\n+                    break;\n+                case \"i\":\n+                    maskMode = MaskMode.MaskModeIntersect;\n+                    break;\n+                default:\n+                        maskMode = MaskMode.MaskModeUnknown;\n+            }\n+\n+            maskPath = new LotteAnimatableShapeValue(json.getJSONObject(\"pt\"), frameRate, closed);\n+            opacity = new LotteAnimatableNumberValue(json.getJSONObject(\"o\"), frameRate);\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse mask. \" + json, e);\n+        }\n     }\n \n     public boolean isClosed() {",
    "output": "Some setup for Masks and Mattes. They don't work yet though."
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -216,7 +216,7 @@ public float remap(float inValue) {\n     private Rect compBounds;\n     private int frameRate;\n \n-    private List<LotteMask> masks;\n+    private List<LotteMask> masks = new ArrayList<>();\n \n     private int solidWidth;\n     private int solidHeight;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -3,10 +3,12 @@\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.DashPathEffect;\n+import android.graphics.Matrix;\n import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.PathMeasure;\n import android.graphics.PixelFormat;\n+import android.graphics.RectF;\n import android.graphics.drawable.Drawable;\n import android.support.annotation.ColorInt;\n import android.support.annotation.IntRange;\n@@ -25,6 +27,12 @@ public class LotteShapeLayer extends Drawable {\n     private PathMeasure pathMeasure = new PathMeasure();\n     private float pathLength;\n \n+    private float scaleX = 1f;\n+    private float scaleY = 1f;\n+    private final RectF scaleRect = new RectF();\n+    private final Matrix scaleMatrix = new Matrix();\n+    private Path scaledPath = new Path();\n+\n     private Path path;\n     @IntRange(from = 0, to = 255) private int alpha;\n     private float strokeStart = -1f;\n@@ -49,14 +57,16 @@ public void setColor(@ColorInt int strokeColor) {\n     }\n \n     public Path getPath() {\n-        return path;\n+        return scaledPath;\n     }\n \n     public void setPath(Path path) {\n         this.path = path;\n-        pathMeasure.setPath(path, false);\n+        setScale(scaleX, scaleY);\n+        pathMeasure.setPath(scaledPath, false);\n         // Cache for perf.\n         pathLength = pathMeasure.getLength();\n+        invalidateSelf();\n     }\n \n     @Override\n@@ -68,7 +78,7 @@ public void draw(Canvas canvas) {\n             trimPath.rLineTo(0, 0);\n             canvas.drawPath(trimPath, paint);\n         } else {\n-            canvas.drawPath(path, paint);\n+            canvas.drawPath(scaledPath, paint);\n         }\n \n     }\n@@ -141,4 +151,10 @@ public void setStrokeEnd(float strokeEnd) {\n     public void setStrokeStart(float strokeStart) {\n         this.strokeStart = strokeStart;\n     }\n+\n+    public void setScale(float scaleX, float scaleY) {\n+        path.computeBounds(scaleRect, true);\n+        scaleMatrix.setScale(scaleX, scaleY, scaleRect.centerX(), scaleRect.centerY());\n+        path.transform(scaleMatrix, scaledPath);\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -49,15 +49,17 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n         anchorPoint = transformModel.getAnchor().getInitialPoint();\n         setAlpha((int) (transformModel.getOpacity().getInitialValue() * 255));\n         position = transformModel.getPosition().getInitialPoint();\n-        this.transform = transformModel.getScale().getInitialScale();\n         sublayerTransform = new LotteTransform3D();\n         sublayerTransform.rotateZ((float) Math.toDegrees(transformModel.getRotation().getInitialValue()));\n \n+        LotteTransform3D initialScale = transformModel.getScale().getInitialScale();\n+        this.transform = initialScale;\n         if (fill != null) {\n             fillLayer = new LotteShapeLayer();\n             fillLayer.setPath(path.getShapePath().getInitialShape());\n             fillLayer.setColor(fill.getColor().getInitialColor());\n             fillLayer.setAlpha((int) (fill.getOpacity().getInitialValue() * 255));\n+            fillLayer.setScale(initialScale.getScaleX(), initialScale.getScaleY());\n             addLayer(fillLayer);\n         }\n \n@@ -71,6 +73,7 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             strokeLayer.setDashPattern(stroke.getLineDashPattern());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.setLineJoinType(stroke.getJoinType());\n+            strokeLayer.setScale(initialScale.getScaleX(), initialScale.getScaleY());\n \n             if (trim != null) {\n                 strokeLayer.setStrokeStart(trim.getStart().getInitialValue());",
    "output": "Scale shape paths instead of their canvas"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -1,6 +1,7 @@\n package com.airbnb.lotte.layers;\n \n import android.graphics.Canvas;\n+import android.graphics.DashPathEffect;\n import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.PathMeasure;\n@@ -94,11 +95,8 @@ private static final class LotteCircleShapeLayer extends LotteAnimatableLayer {\n \n         private PointF circleSize;\n         private PointF circlePosition;\n-        private List<Float> lineDashPattern;\n-        private LotteShapeStroke.LineCapType lineCapType;\n-        private LotteShapeStroke.LineJoinType lineJoinType;\n-        private float strokeStart;\n-        private float strokeEnd;\n+        private float strokeStart = -1f;\n+        private float strokeEnd = -1f;\n \n         public LotteCircleShapeLayer(long duration) {\n             super(duration);\n@@ -140,7 +138,7 @@ public void setTrimPath(float strokeStart, float strokeEnd) {\n         }\n \n         private void updateTrimPath() {\n-            if (strokeStart != strokeEnd) {\n+            if (strokeStart != -1f && strokeEnd != -1f) {\n                 float length = pathMeasure.getLength();\n                 float start = length * strokeStart / 100f;\n                 float end = length * strokeEnd / 100f;\n@@ -162,11 +160,17 @@ public void setLineWidth(float width) {\n         }\n \n         public void setDashPattern(List<Float> lineDashPattern) {\n-            this.lineDashPattern = lineDashPattern;\n+            if (lineDashPattern.isEmpty()) {\n+                return;\n+            }\n+            float[] values = new float[lineDashPattern.size()];\n+            for (int i = 0; i < lineDashPattern.size(); i++) {\n+                values[i] = lineDashPattern.get(i);\n+            }\n+            paint.setPathEffect(new DashPathEffect(values, 0f));\n         }\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n-            this.lineCapType = lineCapType;\n             switch (lineCapType) {\n                 case Butt:\n                     paint.setStrokeCap(Paint.Cap.BUTT);\n@@ -177,7 +181,17 @@ public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n         }\n \n         public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n-            this.lineJoinType = lineJoinType;\n+            switch (lineJoinType) {\n+                case Bevel:\n+                    paint.setStrokeJoin(Paint.Join.BEVEL);\n+                    break;\n+                case Miter:\n+                    paint.setStrokeJoin(Paint.Join.MITER);\n+                    break;\n+                case Round:\n+                    paint.setStrokeJoin(Paint.Join.ROUND);\n+                    break;\n+            }\n         }\n \n         void setColor(@ColorInt int color) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -1,7 +1,9 @@\n package com.airbnb.lotte.layers;\n \n import android.graphics.Canvas;\n+import android.graphics.DashPathEffect;\n import android.graphics.Paint;\n+import android.graphics.PathEffect;\n import android.graphics.PointF;\n import android.graphics.RectF;\n import android.support.annotation.ColorInt;\n@@ -71,7 +73,7 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n             strokeLayer.setDashPattern(stroke.getLineDashPattern());\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.rectCornerRadius = rectShape.getCornerRadius().getInitialValue();\n-            strokeLayer.rectSize = rectShape.getSize().getInitialPoint();\n+            strokeLayer.setRectSize(rectShape.getSize().getInitialPoint());\n             strokeLayer.rectPosition = rectShape.getPosition().getInitialPoint();\n             addLayer(strokeLayer);\n         }\n@@ -97,9 +99,9 @@ private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n         private PointF rectPosition;\n         private PointF rectSize;\n         private float rectCornerRadius;\n-        private List<Float> lineDashPattern;\n-        private LotteShapeStroke.LineCapType lineCapType;\n-        private LotteShapeStroke.LineJoinType lineJoinType;\n+\n+        @Nullable private PathEffect dashPatternPathEffect;\n+        @Nullable private PathEffect lineJoinPathEffect;\n \n         LotteRoundRectLayer(long duration) {\n             super(duration);\n@@ -120,11 +122,17 @@ public void setLineWidth(float width) {\n         }\n \n         public void setDashPattern(List<Float> lineDashPattern) {\n-            this.lineDashPattern = lineDashPattern;\n+            if (lineDashPattern.isEmpty()) {\n+                return;\n+            }\n+            float[] values = new float[lineDashPattern.size()];\n+            for (int i = 0; i < lineDashPattern.size(); i++) {\n+                values[i] = lineDashPattern.get(i);\n+            }\n+            paint.setPathEffect(new DashPathEffect(values, 0f));\n         }\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n-            this.lineCapType = lineCapType;\n             switch (lineCapType) {\n                 case Butt:\n                     paint.setStrokeCap(Paint.Cap.BUTT);\n@@ -135,7 +143,17 @@ public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n         }\n \n         public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n-            this.lineJoinType = lineJoinType;\n+            switch (lineJoinType) {\n+                case Bevel:\n+                    paint.setStrokeJoin(Paint.Join.BEVEL);\n+                    break;\n+                case Miter:\n+                    paint.setStrokeJoin(Paint.Join.MITER);\n+                    break;\n+                case Round:\n+                    paint.setStrokeJoin(Paint.Join.ROUND);\n+                    break;\n+            }\n         }\n \n         public float getRectCornerRadius() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -2,14 +2,14 @@\n \n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n+import android.graphics.DashPathEffect;\n import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.PathMeasure;\n import android.graphics.PixelFormat;\n import android.graphics.drawable.Drawable;\n import android.support.annotation.ColorInt;\n import android.support.annotation.IntRange;\n-import android.support.annotation.Nullable;\n \n import com.airbnb.lotte.model.LotteShapeStroke;\n \n@@ -27,11 +27,8 @@ public class LotteShapeLayer extends Drawable {\n \n     private Path path;\n     @IntRange(from = 0, to = 255) private int alpha;\n-    @Nullable private List<Float> lineDashPattern;\n-    private LotteShapeStroke.LineCapType lineCapType;\n-    private LotteShapeStroke.LineJoinType lineJoinType;\n-    private float strokeStart;\n-    private float strokeEnd;\n+    private float strokeStart = -1f;\n+    private float strokeEnd = -1f;\n \n     public LotteShapeLayer() {\n         paint.setStyle(Paint.Style.FILL);\n@@ -64,7 +61,7 @@ public void setPath(Path path) {\n \n     @Override\n     public void draw(Canvas canvas) {\n-        if (strokeStart != strokeEnd) {\n+        if (strokeStart != -1f && strokeEnd != -1f) {\n             pathMeasure.getSegment(pathLength * (strokeStart / 100f), pathLength * (strokeEnd / 100f), trimPath, true);\n             // Workaround to get hardware acceleration on KitKat\n             // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n@@ -103,11 +100,17 @@ public void setLineWidth(float width) {\n     }\n \n     public void setDashPattern(List<Float> lineDashPattern) {\n-        this.lineDashPattern = lineDashPattern;\n+        if (lineDashPattern.isEmpty()) {\n+            return;\n+        }\n+        float[] values = new float[lineDashPattern.size()];\n+        for (int i = 0; i < lineDashPattern.size(); i++) {\n+            values[i] = lineDashPattern.get(i);\n+        }\n+        paint.setPathEffect(new DashPathEffect(values, 0f));\n     }\n \n     public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n-        this.lineCapType = lineCapType;\n         switch (lineCapType) {\n             case Butt:\n                 paint.setStrokeCap(Paint.Cap.BUTT);\n@@ -118,7 +121,17 @@ public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n     }\n \n     public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n-        this.lineJoinType = lineJoinType;\n+        switch (lineJoinType) {\n+            case Bevel:\n+                paint.setStrokeJoin(Paint.Join.BEVEL);\n+                break;\n+            case Miter:\n+                paint.setStrokeJoin(Paint.Join.MITER);\n+                break;\n+            case Round:\n+                paint.setStrokeJoin(Paint.Join.ROUND);\n+                break;\n+        }\n     }\n \n     public void setStrokeEnd(float strokeEnd) {",
    "output": "Added line join type and path effect support"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -74,7 +74,9 @@ public void draw(@NonNull Canvas canvas) {\n             canvas.scale(transform.getScaleX(), transform.getScaleY());\n         }\n \n-        // TODO sublayer transform (used for rotation).\n+        if (sublayerTransform != null) {\n+            canvas.rotate(sublayerTransform.getRotationZ());\n+        }\n \n         if (anchorPoint != null) {\n             canvas.translate(-anchorPoint.x, -anchorPoint.y);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -167,6 +167,13 @@ public void setDashPattern(List<Float> lineDashPattern) {\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n             this.lineCapType = lineCapType;\n+            switch (lineCapType) {\n+                case Butt:\n+                    paint.setStrokeCap(Paint.Cap.BUTT);\n+                case Round:\n+                default:\n+                    paint.setStrokeCap(Paint.Cap.ROUND);\n+            }\n         }\n \n         public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -125,6 +125,13 @@ public void setDashPattern(List<Float> lineDashPattern) {\n \n         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n             this.lineCapType = lineCapType;\n+            switch (lineCapType) {\n+                case Butt:\n+                    paint.setStrokeCap(Paint.Cap.BUTT);\n+                case Round:\n+                default:\n+                    paint.setStrokeCap(Paint.Cap.ROUND);\n+            }\n         }\n \n         public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -108,6 +108,13 @@ public void setDashPattern(List<Float> lineDashPattern) {\n \n     public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n         this.lineCapType = lineCapType;\n+        switch (lineCapType) {\n+            case Butt:\n+                paint.setStrokeCap(Paint.Cap.BUTT);\n+            case Round:\n+            default:\n+                paint.setStrokeCap(Paint.Cap.ROUND);\n+        }\n     }\n \n     public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n@@ -3,6 +3,8 @@\n import android.graphics.Canvas;\n import android.support.annotation.NonNull;\n \n+import com.airbnb.lotte.utils.LotteTransform3D;\n+\n public class RootLotteAnimatableLayer extends LotteAnimatableLayer {\n \n     public RootLotteAnimatableLayer() {\n@@ -11,6 +13,7 @@ public RootLotteAnimatableLayer() {\n \n     @Override\n     public void draw(@NonNull Canvas canvas) {\n+        transform = new LotteTransform3D();\n         super.draw(canvas);\n         canvas.clipRect(getBounds());\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n@@ -56,7 +56,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n     private LotteTransform3D xformForValueArray(JSONArray value) {\n         try {\n             if (value.length() >= 2) {\n-                return new LotteTransform3D().scale((float) value.getDouble(0) / 100f, (float) value.getDouble(1) / 100f, 1);\n+                return new LotteTransform3D().scale((float) value.getDouble(0) / 100f, (float) value.getDouble(1) / 100f);\n             }\n         } catch (JSONException e) {}\n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/utils/LotteTransform3D.java b/lotte/src/main/java/com/airbnb/lotte/utils/LotteTransform3D.java\n--- a/lotte/src/main/java/com/airbnb/lotte/utils/LotteTransform3D.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteTransform3D.java\n@@ -1,33 +1,31 @@\n package com.airbnb.lotte.utils;\n \n-import android.opengl.Matrix;\n-\n public class LotteTransform3D {\n-    private static final int IDX_SX = 0;\n-    private static final int IDX_SY = 5;\n-\n-    private final float[] matrix = new float[16];\n-\n-    public LotteTransform3D() {\n-        Matrix.setIdentityM(matrix, 0);\n-    }\n+    private float rotationZ;\n+    private float scaleX = 1f;\n+    private float scaleY = 1f;\n \n-    public LotteTransform3D scale(float sx, float sy, float sz) {\n-        Matrix.scaleM(matrix, 0, sx, sy, sz);\n+    public LotteTransform3D scale(float sx, float sy) {\n+        this.scaleX = sx;\n+        this.scaleY = sy;\n         return this;\n     }\n \n     public LotteTransform3D rotateZ(float rz) {\n-        Matrix.rotateM(matrix, 0, rz, 0, 0, 1);\n+        rotationZ = rz;\n         return this;\n     }\n \n+    public float getRotationZ() {\n+        return rotationZ;\n+    }\n+\n     public float getScaleX() {\n-        return matrix[IDX_SX];\n+        return scaleX;\n     }\n \n     public float getScaleY() {\n-        return matrix[IDX_SY];\n+        return scaleY;\n     }\n \n     @Override",
    "output": "Added sublayer transform for rotation"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -2,6 +2,8 @@\n \n import android.graphics.Canvas;\n import android.graphics.Paint;\n+import android.graphics.Path;\n+import android.graphics.PathMeasure;\n import android.graphics.PointF;\n import android.graphics.RectF;\n import android.support.annotation.ColorInt;\n@@ -54,8 +56,9 @@ public LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill,\n             fillLayer = new LotteCircleShapeLayer(duration);\n             fillLayer.setColor(fill.getColor().getInitialColor());\n             fillLayer.setAlpha((int) (fill.getOpacity().getInitialValue() * 255));\n-            fillLayer.circlePosition = circleShape.getPosition().getInitialPoint();\n-            fillLayer.circleSize = circleShape.getSize().getInitialPoint();\n+            fillLayer.updateCircle(\n+                    circleShape.getPosition().getInitialPoint(),\n+                    circleShape.getSize().getInitialPoint());\n             addLayer(fillLayer);\n         }\n \n@@ -67,21 +70,27 @@ public LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill,\n             strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n             strokeLayer.setDashPattern(stroke.getLineDashPattern());\n             strokeLayer.setLineCapType(stroke.getCapType());\n-            strokeLayer.circlePosition = circleShape.getPosition().getInitialPoint();\n-            strokeLayer.circleSize = circleShape.getSize().getInitialPoint();\n+            strokeLayer.updateCircle(\n+                    circleShape.getPosition().getInitialPoint(),\n+                    circleShape.getSize().getInitialPoint());\n             if (trim != null) {\n-                strokeLayer.strokeStart = trim.getStart().getInitialValue();\n-                strokeLayer.strokeEnd = trim.getEnd().getInitialValue();\n+                strokeLayer.setTrimPath(\n+                        trim.getStart().getInitialValue(),\n+                        trim.getEnd().getInitialValue());\n             }\n \n             addLayer(strokeLayer);\n         }\n     }\n \n     private static final class LotteCircleShapeLayer extends LotteAnimatableLayer {\n+        private static final float ELLIPSE_CONTROL_POINT_PERCENTAGE = 0.55228f;\n \n         private final RectF rect = new RectF();\n         private final Paint paint = new Paint();\n+        private final Path path = new Path();\n+        private final Path trimPath = new Path();\n+        private final PathMeasure pathMeasure = new PathMeasure();\n \n         private PointF circleSize;\n         private PointF circlePosition;\n@@ -97,6 +106,53 @@ public LotteCircleShapeLayer(long duration) {\n             paint.setStyle(Paint.Style.FILL);\n         }\n \n+        public void updateCircle(PointF circlePosition, PointF circleSize) {\n+            this.circleSize = circleSize;\n+            this.circlePosition = circlePosition;\n+            float halfWidth = circleSize.x / 2f;\n+            float halfHeight = circleSize.y / 2f;\n+\n+            PointF circleQ1 = new PointF(0, -halfHeight);\n+            PointF circleQ2 = new PointF(halfWidth, 0);\n+            PointF circleQ3 = new PointF(0, halfHeight);\n+            PointF circleQ4 = new PointF(-halfWidth, 0);\n+\n+            float cpW = halfWidth * ELLIPSE_CONTROL_POINT_PERCENTAGE;\n+            float cpH = halfHeight * ELLIPSE_CONTROL_POINT_PERCENTAGE;\n+\n+            path.reset();\n+            path.moveTo(circleQ1.x, circleQ1.y);\n+            path.cubicTo(circleQ1.x + cpW, circleQ1.y, circleQ2.x, circleQ2.y - cpH, circleQ2.x, circleQ2.y);\n+            path.cubicTo(circleQ2.x, circleQ2.y + cpH, circleQ3.x + cpW, circleQ3.y, circleQ3.x, circleQ3.y);\n+            path.cubicTo(circleQ3.x - cpW, circleQ3.y, circleQ4.x, circleQ4.y + cpH, circleQ4.x, circleQ4.y);\n+            path.cubicTo(circleQ4.x, circleQ4.y - cpH, circleQ1.x - cpW, circleQ1.y, circleQ1.x, circleQ1.y);\n+\n+            pathMeasure.setPath(path, false);\n+            updateTrimPath();\n+            invalidateSelf();\n+        }\n+\n+        public void setTrimPath(float strokeStart, float strokeEnd) {\n+            this.strokeStart = strokeStart;\n+            this.strokeEnd = strokeEnd;\n+            updateTrimPath();\n+            invalidateSelf();\n+        }\n+\n+        private void updateTrimPath() {\n+            if (strokeStart != strokeEnd) {\n+                float length = pathMeasure.getLength();\n+                float start = length * strokeStart / 100f;\n+                float end = length * strokeEnd / 100f;\n+\n+                pathMeasure.getSegment(\n+                        Math.min(start, end),\n+                        Math.max(start, end),\n+                        trimPath,\n+                        true);\n+            }\n+        }\n+\n         public void setStyle(Paint.Style style) {\n             paint.setStyle(style);\n         }\n@@ -125,13 +181,11 @@ void setColor(@ColorInt int color) {\n         @Override\n         public void draw(@NonNull Canvas canvas) {\n             super.draw(canvas);\n-            float halfWidth = circleSize.x / 2f;\n-            float halfHeight = circleSize.y / 2f;\n-            rect.set(circlePosition.x - halfWidth,\n-                    circlePosition.y - halfHeight,\n-                    circlePosition.x + halfHeight,\n-                    circlePosition.y + halfHeight);\n-            canvas.drawOval(rect, paint);\n+            if (trimPath.isEmpty()) {\n+                canvas.drawPath(path, paint);\n+            } else {\n+                canvas.drawPath(trimPath, paint);\n+            }\n         }\n     }\n }",
    "output": "Ellipse trim path works"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -69,6 +69,11 @@ public LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill,\n             strokeLayer.setLineCapType(stroke.getCapType());\n             strokeLayer.circlePosition = circleShape.getPosition().getInitialPoint();\n             strokeLayer.circleSize = circleShape.getSize().getInitialPoint();\n+            if (trim != null) {\n+                strokeLayer.strokeStart = trim.getStart().getInitialValue();\n+                strokeLayer.strokeEnd = trim.getEnd().getInitialValue();\n+            }\n+\n             addLayer(strokeLayer);\n         }\n     }\n@@ -83,6 +88,8 @@ private static final class LotteCircleShapeLayer extends LotteAnimatableLayer {\n         private List<Float> lineDashPattern;\n         private LotteShapeStroke.LineCapType lineCapType;\n         private LotteShapeStroke.LineJoinType lineJoinType;\n+        private float strokeStart;\n+        private float strokeEnd;\n \n         public LotteCircleShapeLayer(long duration) {\n             super(duration);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -4,6 +4,7 @@\n import android.graphics.ColorFilter;\n import android.graphics.Paint;\n import android.graphics.Path;\n+import android.graphics.PathMeasure;\n import android.graphics.PixelFormat;\n import android.graphics.drawable.Drawable;\n import android.support.annotation.ColorInt;\n@@ -20,6 +21,9 @@\n public class LotteShapeLayer extends Drawable {\n \n     private final Paint paint = new Paint();\n+    private final Path trimPath = new Path();\n+    private PathMeasure pathMeasure = new PathMeasure();\n+    private float pathLength;\n \n     private Path path;\n     @IntRange(from = 0, to = 255) private int alpha;\n@@ -53,11 +57,23 @@ public Path getPath() {\n \n     public void setPath(Path path) {\n         this.path = path;\n+        pathMeasure.setPath(path, false);\n+        // Cache for perf.\n+        pathLength = pathMeasure.getLength();\n     }\n \n     @Override\n     public void draw(Canvas canvas) {\n-        canvas.drawPath(path, paint);\n+        if (strokeStart != strokeEnd) {\n+            pathMeasure.getSegment(pathLength * (strokeStart / 100f), pathLength * (strokeEnd / 100f), trimPath, true);\n+            // Workaround to get hardware acceleration on KitKat\n+            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n+            trimPath.rLineTo(0, 0);\n+            canvas.drawPath(trimPath, paint);\n+        } else {\n+            canvas.drawPath(path, paint);\n+        }\n+\n     }\n \n     @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -73,7 +73,8 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             strokeLayer.setLineJoinType(stroke.getJoinType());\n \n             if (trim != null) {\n-                // TODO\n+                strokeLayer.setStrokeStart(trim.getStart().getInitialValue());\n+                strokeLayer.setStrokeEnd(trim.getEnd().getInitialValue());\n             }\n             addLayer(strokeLayer);\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n@@ -1,5 +1,6 @@\n package com.airbnb.lotte.model;\n \n+import android.annotation.SuppressLint;\n import android.support.annotation.Nullable;\n \n import org.json.JSONArray;\n@@ -13,6 +14,7 @@ public class LotteAnimatableNumberValue implements LotteAnimatableValue {\n     @Nullable private RemapInterface remapInterface;\n     private float initialValue;\n \n+    @SuppressLint(\"UseValueOf\")\n     public LotteAnimatableNumberValue(JSONObject numberValues, int frameRate) {\n         this.frameRate = frameRate;\n         try {\n@@ -24,7 +26,7 @@ public LotteAnimatableNumberValue(JSONObject numberValues, int frameRate) {\n                 buildAnimationForKeyframes((JSONArray) value);\n             } else if (value instanceof Double) {\n                 // Single value, no animation\n-                initialValue = (float) value;\n+                initialValue = new Float((Double) value);\n             } else if (value instanceof Integer) {\n                 initialValue = (Integer) value;\n             }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n@@ -26,7 +26,9 @@ public LotteShapeGroup(JSONObject json, int frameRate, Rect compBounds) {\n             jsonItems = json.getJSONArray(\"it\");\n         } catch (JSONException e) {}\n         if (jsonItems == null) {\n-            throw new IllegalStateException(\"There are no items.\");\n+            // Thought this was necessary but maybe not?\n+            // throw new IllegalStateException(\"There are no items.\");\n+            jsonItems = new JSONArray();\n         }\n \n         try {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n@@ -1,16 +1,36 @@\n package com.airbnb.lotte.model;\n \n-import android.util.Log;\n-\n-import com.airbnb.lotte.L;\n-\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n public class LotteShapeTrimPath {\n     private static final String TAG = LotteShapeTrimPath.class.getSimpleName();\n \n-    public LotteShapeTrimPath(JSONObject json, long frameRate) {\n-        if (L.DBG) Log.d(TAG, \"Parsed new trim path. TODO\");\n-        // TODO\n+    private LotteAnimatableNumberValue start;\n+    private LotteAnimatableNumberValue end;\n+    private LotteAnimatableNumberValue offset;\n+\n+    public LotteShapeTrimPath(JSONObject json, int frameRate) {\n+        try {\n+            start = new LotteAnimatableNumberValue(json.getJSONObject(\"s\"), frameRate);\n+            start.remapValues(0, 100, 0, 1);\n+            end = new LotteAnimatableNumberValue(json.getJSONObject(\"e\"), frameRate);\n+            end.remapValues(0, 100, 0, 1);\n+            offset = new LotteAnimatableNumberValue(json.getJSONObject(\"o\"), frameRate);\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Unable to parse trim path \" + json, e);\n+        }\n+    }\n+\n+    public LotteAnimatableNumberValue getEnd() {\n+        return end;\n+    }\n+\n+    public LotteAnimatableNumberValue getOffset() {\n+        return offset;\n+    }\n+\n+    public LotteAnimatableNumberValue getStart() {\n+        return start;\n     }\n }",
    "output": "Shape path trim works"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java\n@@ -36,7 +36,6 @@ public class LotteEllipseShapeLayer extends LotteAnimatableLayer {\n     public LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill, LotteShapeStroke stroke,\n             LotteShapeTrimPath trim, LotteShapeTransform transform, long duration) {\n         super(duration);\n-        // TODO\n         this.circleShape = circleShape;\n         this.fill = fill;\n         this.stroke = stroke;\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -17,6 +17,8 @@\n import com.airbnb.lotte.utils.LotteAnimationGroup;\n import com.airbnb.lotte.utils.LotteTransform3D;\n \n+import java.util.List;\n+\n public class LotteRectShapeLayer extends LotteAnimatableLayer {\n \n     private final Paint paint = new Paint();\n@@ -51,8 +53,8 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n         sublayerTransform.rotateZ(transform.getRotation().getInitialValue());\n \n         if (fill != null) {\n-            fillLayer = new LotteRoundRectLayer(0);\n-            fillLayer.setFillColor(fill.getColor().getInitialColor());\n+            fillLayer = new LotteRoundRectLayer(duration);\n+            fillLayer.setColor(fill.getColor().getInitialColor());\n             fillLayer.setAlpha((int) (fill.getOpacity().getInitialValue() * 255));\n             fillLayer.setRectCornerRadius(rectShape.getCornerRadius().getInitialValue());\n             fillLayer.setRectSize(rectShape.getSize().getInitialPoint());\n@@ -61,7 +63,17 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi\n         }\n \n         if (stroke != null) {\n-            // TODO\n+            strokeLayer = new LotteRoundRectLayer(duration);\n+            strokeLayer.setStyle(Paint.Style.STROKE);\n+            strokeLayer.setColor(stroke.getColor().getInitialColor());\n+            strokeLayer.setAlpha((int) (stroke.getOpacity().getInitialValue() * 255));\n+            strokeLayer.setLineWidth(stroke.getWidth().getInitialValue());\n+            strokeLayer.setDashPattern(stroke.getLineDashPattern());\n+            strokeLayer.setLineCapType(stroke.getCapType());\n+            strokeLayer.rectCornerRadius = rectShape.getCornerRadius().getInitialValue();\n+            strokeLayer.rectSize = rectShape.getSize().getInitialPoint();\n+            strokeLayer.rectPosition = rectShape.getPosition().getInitialPoint();\n+            addLayer(strokeLayer);\n         }\n \n         // TODO\n@@ -85,17 +97,40 @@ private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n         private PointF rectPosition;\n         private PointF rectSize;\n         private float rectCornerRadius;\n+        private List<Float> lineDashPattern;\n+        private LotteShapeStroke.LineCapType lineCapType;\n+        private LotteShapeStroke.LineJoinType lineJoinType;\n \n         LotteRoundRectLayer(long duration) {\n             super(duration);\n             paint.setAntiAlias(true);\n             paint.setStyle(Paint.Style.FILL);\n         }\n \n-        public void setFillColor(@ColorInt int color) {\n+        public void setColor(@ColorInt int color) {\n             paint.setColor(color);\n         }\n \n+        public void setStyle(Paint.Style style) {\n+            paint.setStyle(style);\n+        }\n+\n+        public void setLineWidth(float width) {\n+            paint.setStrokeWidth(width);\n+        }\n+\n+        public void setDashPattern(List<Float> lineDashPattern) {\n+            this.lineDashPattern = lineDashPattern;\n+        }\n+\n+        public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {\n+            this.lineCapType = lineCapType;\n+        }\n+\n+        public void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {\n+            this.lineJoinType = lineJoinType;\n+        }\n+\n         public float getRectCornerRadius() {\n             return rectCornerRadius;\n         }",
    "output": "Implemented rect stroke"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java\n@@ -9,6 +9,7 @@\n import com.airbnb.lotte.layers.LotteAnimatableLayer;\n import com.airbnb.lotte.layers.LotteLayer;\n import com.airbnb.lotte.layers.LotteLayerView;\n+import com.airbnb.lotte.layers.RootLotteAnimatableLayer;\n import com.airbnb.lotte.model.LotteComposition;\n \n import org.json.JSONException;\n@@ -86,7 +87,7 @@ public void setJson(JSONObject json) {\n     public void setModel(LotteComposition model) {\n         sceneModel = model;\n         animationSpeed = 1f;\n-        animationContainer = new LotteAnimatableLayer(0);\n+        animationContainer = new RootLotteAnimatableLayer();\n         animationContainer.setBounds(0, 0, getWidth(), getHeight());\n         animationContainer.setSpeed(0f);\n         setImageDrawable(animationContainer);\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -88,8 +88,6 @@ public void draw(@NonNull Canvas canvas) {\n             layer.draw(canvas);\n         }\n         canvas.restore();\n-\n-        canvas.clipRect(getBounds());\n     }\n \n     @Override\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java\n@@ -1,5 +1,7 @@\n package com.airbnb.lotte.layers;\n \n+import android.graphics.Canvas;\n+import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n \n import com.airbnb.lotte.model.LotteShapeCircle;\n@@ -83,6 +85,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n                 LotteShapeGroup shapeGroup = (LotteShapeGroup) item;\n                 LotteGroupLayerView groupLayer = new LotteGroupLayerView(shapeGroup, currentFill, currentStroke, currentTrim, currentTransform, duration);\n                 groupLayers.add(groupLayer);\n+                addLayer(groupLayer);\n             }\n         }\n \n@@ -92,4 +95,9 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n     private void buildAnimation() {\n         // TODO\n     }\n+\n+    @Override\n+    public void draw(@NonNull Canvas canvas) {\n+        super.draw(canvas);\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java\n@@ -31,6 +31,7 @@ public class LotteShapeLayer extends Drawable {\n \n     public LotteShapeLayer() {\n         paint.setStyle(Paint.Style.FILL);\n+        paint.setAntiAlias(true);\n     }\n \n     public void setStyle(Paint.Style style) {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java\n@@ -0,0 +1,17 @@\n+package com.airbnb.lotte.layers;\n+\n+import android.graphics.Canvas;\n+import android.support.annotation.NonNull;\n+\n+public class RootLotteAnimatableLayer extends LotteAnimatableLayer {\n+\n+    public RootLotteAnimatableLayer() {\n+        super(0);\n+    }\n+\n+    @Override\n+    public void draw(@NonNull Canvas canvas) {\n+        super.draw(canvas);\n+        canvas.clipRect(getBounds());\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n@@ -117,7 +117,11 @@ private PointF vertexAtIndex(int idx, JSONArray points) {\n \n         try {\n             JSONArray pointArray = points.getJSONArray(idx);\n-            return new PointF((int) pointArray.get(0), (int) pointArray.get(1));\n+            Object x = pointArray.get(0);\n+            Object y = pointArray.get(1);\n+                return new PointF(\n+                        x instanceof Double ? new Float((Double) x) : (int) x,\n+                        y instanceof Double ? new Float((Double) y) : (int) y);\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Unable to get point.\", e);\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n@@ -17,10 +17,10 @@\n public class LotteShapeGroup {\n     private static final String TAG = LotteShapeGroup.class.getSimpleName();\n \n+    private String name;\n     private final List<Object> items = new ArrayList<>();\n \n     public LotteShapeGroup(JSONObject json, int frameRate, Rect compBounds) {\n-        if (L.DBG) Log.d(TAG, \"Parsing new shape group.\");\n         JSONArray jsonItems = null;\n         try {\n             jsonItems = json.getJSONArray(\"it\");\n@@ -29,6 +29,10 @@ public LotteShapeGroup(JSONObject json, int frameRate, Rect compBounds) {\n             throw new IllegalStateException(\"There are no items.\");\n         }\n \n+        try {\n+            name = json.getString(\"nm\");\n+        } catch (JSONException e) {}\n+\n         for (int i = 0; i < jsonItems.length(); i++) {\n             JSONObject jsonItem = null;\n             try {\n@@ -44,6 +48,8 @@ public LotteShapeGroup(JSONObject json, int frameRate, Rect compBounds) {\n                 items.add(newItem);\n             }\n         }\n+\n+        if (L.DBG) Log.d(TAG, \"Parsed new group \" + name);\n     }\n \n     @Nullable\n@@ -56,6 +62,10 @@ private Object shapeItemWithJson(JSONObject json, int framerate, Rect compBounds\n             throw new IllegalStateException(\"Shape has no type.\");\n         }\n \n+        try {\n+            if (L.DBG) Log.d(TAG, \"Parsing group layer \" + json.getString(\"nm\") + \" type \" + type);\n+        } catch (JSONException e) { }\n+\n         switch (type) {\n             case \"gr\":\n                 return new LotteShapeGroup(json, framerate, compBounds);\n@@ -80,4 +90,12 @@ private Object shapeItemWithJson(JSONObject json, int framerate, Rect compBounds\n     public List<Object> getItems() {\n         return items;\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteShapeGroup{\");\n+        sb.append(\"name='\").append(name).append('\\'');\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n@@ -10,6 +10,7 @@\n public class LotteShapePath {\n     private static final String TAG = LotteShapePath.class.getSimpleName();\n \n+    private String name;\n     private boolean closed;\n     private int index;\n     private LotteAnimatableShapeValue shapePath;\n@@ -18,13 +19,19 @@ public LotteShapePath(JSONObject json, int frameRate) {\n         try {\n             index = json.getInt(\"ind\");\n         } catch (JSONException e) {\n-            throw new IllegalArgumentException(\"ShapePath has no index.\");\n+            throw new IllegalArgumentException(\"ShapePath has no index.\", e);\n+        }\n+\n+        try {\n+            name = json.getString(\"nm\");\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Layer has no name.\", e);\n         }\n \n         try {\n             closed = json.getBoolean(\"closed\");\n         } catch (JSONException e) {\n-            throw new IllegalArgumentException(\"ShapePath index \" + index + \" has no value for 'closed'.\");\n+            throw new IllegalArgumentException(\"ShapePath index \" + index + \" has no value for 'closed'.\", e);\n         }\n \n         JSONObject shape = null;\n@@ -45,7 +52,8 @@ public LotteAnimatableShapeValue getShapePath() {\n     @Override\n     public String toString() {\n         final StringBuilder sb = new StringBuilder(\"LotteShapePath{\");\n-        sb.append(\"closed=\").append(closed);\n+        sb.append(\"name=\").append(name);\n+        sb.append(\", closed=\").append(closed);\n         sb.append(\", index=\").append(index);\n         sb.append(\", shapePath=\").append(shapePath.getInitialShape());\n         sb.append('}');\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n@@ -1,9 +1,5 @@\n package com.airbnb.lotte.model;\n \n-import android.util.Log;\n-\n-import com.airbnb.lotte.L;\n-\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -36,7 +32,6 @@ public enum LineJoinType {\n     private LineJoinType joinType;\n \n     public LotteShapeStroke(JSONObject json, int frameRate) {\n-        if (L.DBG) Log.d(TAG, \"Parsing new shape stroke.\");\n         try {\n             JSONObject colorJson = json.getJSONObject(\"c\");\n             color = new LotteAnimatableColorValue(colorJson, frameRate);",
    "output": "Two shapes works"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java\n@@ -1,7 +1,6 @@\n package com.airbnb.lotte.layers;\n \n import android.graphics.Canvas;\n-import android.graphics.Color;\n import android.graphics.ColorFilter;\n import android.graphics.Paint;\n import android.graphics.PixelFormat;\n@@ -40,6 +39,7 @@ public class LotteAnimatableLayer extends Drawable {\n     public LotteAnimatableLayer(long duration) {\n         this.duration = duration;\n \n+        solidBackgroundPaint.setAlpha(0);\n         solidBackgroundPaint.setStyle(Paint.Style.FILL);\n     }\n \n@@ -80,7 +80,7 @@ public void draw(@NonNull Canvas canvas) {\n             canvas.translate(-anchorPoint.x, -anchorPoint.y);\n         }\n \n-        if (solidBackgroundPaint.getColor() != Color.BLACK) {\n+        if (solidBackgroundPaint.getAlpha() != 0) {\n             canvas.drawRect(getBounds(), solidBackgroundPaint);\n            if (L.DBG) Log.d(TAG, \"Drawing solid \" + Integer.toHexString(solidBackgroundPaint.getColor()) + \" at \" + getBounds().toShortString() + \" canvas \" + canvas.getWidth() + \"x\" + canvas.getHeight());\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java\n@@ -41,6 +41,7 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n         this.trim = trim;\n         this.transformModel = transformModel;\n \n+        fillPaint.setAlpha(0);\n         fillPaint.setAntiAlias(true);\n         strokePaint.setAntiAlias(true);\n \n@@ -68,7 +69,6 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,\n             // TODO\n         }\n \n-        strokeLayer.setFillColor(0);\n     }\n \n     public LotteShapeFill getFill() {\n@@ -94,6 +94,8 @@ public LotteShapeTrimPath getTrim() {\n     @Override\n     public void draw(@NonNull Canvas canvas) {\n         super.draw(canvas);\n-        canvas.drawPath(path.getShapePath().getInitialShape(), fillPaint);\n+        if (fillPaint.getAlpha() != 0) {\n+            canvas.drawPath(path.getShapePath().getInitialShape(), fillPaint);\n+        }\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n@@ -2,15 +2,73 @@\n \n import android.graphics.Color;\n import android.support.annotation.ColorInt;\n+import android.view.animation.Interpolator;\n \n+import org.json.JSONArray;\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class LotteAnimatableColorValue implements LotteAnimatableValue {\n \n-    @ColorInt private int initialColor = Color.RED; // TODO\n+    private final List<Integer> colorKeyFrames = new ArrayList<>();\n+    private final List<Integer> keyTimes = new ArrayList<>();\n+    private final List<Interpolator> timingFunctions = new ArrayList<>();\n+    private long delay;\n+    private long duration;\n+\n+    private long startFrame;\n+    private long durationFrames;\n+    private int frameRate;\n+\n+    @ColorInt private int initialColor;\n+\n+    public LotteAnimatableColorValue(JSONObject colorValues, int frameRate) {\n+        this.frameRate = frameRate;\n+        try {\n+            Object value = colorValues.get(\"k\");\n+\n+            if (value instanceof JSONArray) {\n+                Object firstObject = ((JSONArray) value).get(0);\n+                if (firstObject instanceof JSONObject && ((JSONObject) firstObject).has(\"t\")) {\n+                    // Keyframes\n+                    buildAnimationForKeyframes((JSONArray) value);\n+                } else {\n+                    initialColor = colorValueFromArray((JSONArray) value);\n+                }\n+            } else {\n+                throw new IllegalStateException(\"Invalid color values.\");\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalStateException(\"Unable to parse color \" + colorValues, e);\n+        }\n+    }\n+\n+    private void buildAnimationForKeyframes(JSONArray keyframes) {\n+\n+    }\n+\n+    @ColorInt\n+    private int colorValueFromArray(JSONArray colorArray) throws JSONException {\n+        if (colorArray.length() == 4) {\n+            boolean shouldUse255 = false;\n+            for (int i = 0; i < colorArray.length(); i++) {\n+                double colorChannel = colorArray.getDouble(i);\n+                if (colorChannel <= 1f) {\n+                    shouldUse255 = true;\n+                }\n+            }\n \n-    public LotteAnimatableColorValue(JSONObject colorValues, long frameRate) {\n-        // TODO\n+            float multiplier = shouldUse255 ? 255f : 1f;\n+            return Color.argb(\n+                    (int) (colorArray.getDouble(3) * multiplier),\n+                    (int) (colorArray.getDouble(0) * multiplier),\n+                    (int) (colorArray.getDouble(1) * multiplier),\n+                    (int) (colorArray.getDouble(2) * multiplier));\n+        }\n+        return Color.BLACK;\n     }\n \n \n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n@@ -117,7 +117,7 @@ private PointF vertexAtIndex(int idx, JSONArray points) {\n \n         try {\n             JSONArray pointArray = points.getJSONArray(idx);\n-            return new PointF((Float) pointArray.get(0), (Float) pointArray.get(1));\n+            return new PointF((int) pointArray.get(0), (int) pointArray.get(1));\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Unable to get point.\", e);\n         }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n@@ -15,13 +15,13 @@ public class LotteShapeFill {\n     private LotteAnimatableColorValue color;\n     private LotteAnimatableNumberValue opacity;\n \n-    public LotteShapeFill(JSONObject json, long frameRate) {\n+    public LotteShapeFill(JSONObject json, int frameRate) {\n         JSONObject jsonColor = null;\n         try {\n             jsonColor = json.getJSONObject(\"c\");\n         } catch (JSONException e) { }\n         if (jsonColor != null) {\n-            color = new LotteAnimatableColorValue(json, frameRate);\n+            color = new LotteAnimatableColorValue(jsonColor, frameRate);\n         }\n \n         JSONObject jsonOpacity = null;",
    "output": "Bezier fill with color works"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java\n@@ -339,4 +339,36 @@ public int getSolidHeight() {\n     public int getSolidWidth() {\n         return solidWidth;\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteLayer{\");\n+        sb.append(\"anchor=\").append(anchor);\n+        sb.append(\", shapes=\").append(shapes);\n+        sb.append(\", layerName='\").append(layerName).append('\\'');\n+        sb.append(\", layerId=\").append(layerId);\n+        sb.append(\", layerType=\").append(layerType);\n+        sb.append(\", parentId=\").append(parentId);\n+        sb.append(\", inFrame=\").append(inFrame);\n+        sb.append(\", outFrame=\").append(outFrame);\n+        sb.append(\", compBounds=\").append(compBounds);\n+        sb.append(\", frameRate=\").append(frameRate);\n+        sb.append(\", masks=\").append(masks);\n+        sb.append(\", solidWidth=\").append(solidWidth);\n+        sb.append(\", solidHeight=\").append(solidHeight);\n+        sb.append(\", solidColor=\").append(solidColor);\n+        sb.append(\", opacity=\").append(opacity);\n+        sb.append(\", rotation=\").append(rotation);\n+        sb.append(\", position=\").append(position);\n+        sb.append(\", scale=\").append(scale);\n+        sb.append(\", hasOutAnimation=\").append(hasOutAnimation);\n+        sb.append(\", hasInAnimation=\").append(hasInAnimation);\n+        sb.append(\", hasInOutAnimation=\").append(hasInOutAnimation);\n+        sb.append(\", inOutKeyFrames=\").append(inOutKeyFrames);\n+        sb.append(\", inOutKeyTimes=\").append(inOutKeyTimes);\n+        sb.append(\", compDuration=\").append(compDuration);\n+        sb.append(\", matteType=\").append(matteType);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java\n@@ -1,10 +1,14 @@\n package com.airbnb.lotte.layers;\n \n+import android.util.Log;\n+\n+import com.airbnb.lotte.L;\n import com.airbnb.lotte.model.LotteComposition;\n import com.airbnb.lotte.utils.LotteAnimationGroup;\n import com.airbnb.lotte.utils.LotteTransform3D;\n \n public class LotteParentLayer extends LotteAnimatableLayer {\n+    private static final String TAG = LotteParentLayer.class.getSimpleName();\n \n     private LotteLayer parent;\n     private LotteAnimationGroup animation;\n@@ -13,6 +17,7 @@ public LotteParentLayer(LotteLayer parent, LotteComposition composition) {\n         super(composition.getDuration());\n         this.parent = parent;\n         setupLayerFromModel();\n+        if (L.DBG) Log.d(TAG, \"Creating parent layer for \" + parent.toString());\n     }\n \n     private void setupLayerFromModel() {\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n--- a/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java\n@@ -7,7 +7,9 @@\n import android.support.annotation.ColorInt;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n+import android.util.Log;\n \n+import com.airbnb.lotte.L;\n import com.airbnb.lotte.model.LotteShapeFill;\n import com.airbnb.lotte.model.LotteShapeRectangle;\n import com.airbnb.lotte.model.LotteShapeStroke;\n@@ -75,6 +77,7 @@ public void draw(@NonNull Canvas canvas) {\n     }\n \n     private static class LotteRoundRectLayer extends LotteAnimatableLayer {\n+        private static final String TAG = LotteRoundRectLayer.class.getSimpleName();\n \n         private final Paint fillPaint = new Paint();\n         private final RectF fillRect = new RectF();\n@@ -127,6 +130,7 @@ public void draw(@NonNull Canvas canvas) {\n                     rectPosition.y - halfHeight,\n                     rectPosition.x + halfWidth,\n                     rectPosition.y + halfHeight);\n+            if (L.DBG) Log.d(TAG, \"Drawing round rect \" + fillRect.toShortString() + \" radius \" + rectCornerRadius);\n             canvas.drawRoundRect(fillRect, rectCornerRadius, rectCornerRadius, fillPaint);\n         }\n     }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n@@ -28,4 +28,12 @@ public boolean hasAnimation() {\n     public int getInitialColor() {\n         return initialColor;\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteAnimatableColorValue{\");\n+        sb.append(\"initialColor=\").append(initialColor);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java\n@@ -8,9 +8,11 @@\n public class LotteAnimatableNumberValue implements LotteAnimatableValue {\n \n     @Nullable private RemapInterface remapInterface;\n+    private float initialValue;\n \n     public LotteAnimatableNumberValue(JSONObject numberValues, long frameRate) {\n         // TODO\n+        initialValue = 1f;\n     }\n \n     public void remapValues(float fromMin, float fromMax, float toMin, float toMax) {\n@@ -24,7 +26,7 @@ public void remapWith(RemapInterface remapInterface) {\n     @FloatRange(from=0f, to=1f)\n     public float getInitialValue() {\n         // TODO\n-        return 1f;\n+        return initialValue;\n     }\n \n \n@@ -37,4 +39,13 @@ public Object animationForKeyPath(String keyPath) {\n     public boolean hasAnimation() {\n         return false;\n     }\n+\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteAnimatableNumberValue{\");\n+        sb.append(\"initialValue=\").append(initialValue);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java\n@@ -50,7 +50,7 @@ public LotteAnimatablePointValue(JSONObject pointValues, int frameRate) {\n                 throw new IllegalArgumentException(\"Unable to parse value.\");\n             }\n \n-            if (firstObject instanceof JSONObject && ((JSONObject) firstObject).has(\"k\")) {\n+            if (firstObject instanceof JSONObject && ((JSONObject) firstObject).has(\"t\")) {\n                 // Keyframes\n                 buildAnimationForKeyframes((JSONArray) value);\n             } else {\n@@ -98,4 +98,12 @@ public Object animationForKeyPath(String keyPath) {\n     public boolean hasAnimation() {\n         return false;\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteAnimatablePointValue{\");\n+        sb.append(\"initialPoint=\").append(initialPoint);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableScaleValue.java\n@@ -77,4 +77,12 @@ public Object animationForKeyPath(String keyPath) {\n     public boolean hasAnimation() {\n         return false;\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteAnimatableScaleValue{\");\n+        sb.append(\"initialScale=\").append(initialScale);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java\n@@ -137,4 +137,11 @@ public boolean hasAnimation() {\n         return false;\n     }\n \n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"LotteAnimatableShapeValue{\");\n+        sb.append(\"initialShape=\").append(initialShape);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }",
    "output": "Added a bunch of toStrings"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableColorValue.java\n@@ -0,0 +1,21 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteAnimatableColorValue implements LotteAnimatableValue {\n+\n+    public LotteAnimatableColorValue(JSONObject colorValues, long frameRate) {\n+        // TODO\n+    }\n+\n+\n+    @Override\n+    public Object animationForKeyPath(String keyPath) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean hasAnimation() {\n+        return false;\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n@@ -1,10 +1,35 @@\n package com.airbnb.lotte.model;\n \n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+@SuppressWarnings({\"EmptyCatchBlock\", \"WeakerAccess\", \"FieldCanBeLocal\"})\n public class LotteShapeFill {\n \n+    private boolean fillEnabled;\n+    private LotteAnimatableColorValue color;\n+    private LotteAnimatableNumberValue opacity;\n+\n     public LotteShapeFill(JSONObject json, long frameRate) {\n-        // TODO\n+        JSONObject jsonColor = null;\n+        try {\n+            jsonColor = json.getJSONObject(\"c\");\n+        } catch (JSONException e) { }\n+        if (jsonColor != null) {\n+            color = new LotteAnimatableColorValue(json, frameRate);\n+        }\n+\n+        JSONObject jsonOpacity = null;\n+        try {\n+            jsonOpacity = json.getJSONObject(\"o\");\n+        } catch (JSONException e) { }\n+        if (jsonOpacity != null) {\n+            opacity = new LotteAnimatableNumberValue(jsonOpacity, frameRate);\n+            opacity.remapValues(0, 100, 0, 1);\n+        }\n+\n+        try {\n+            fillEnabled = json.getBoolean(\"fillEnabled\");\n+        } catch (JSONException e) { }\n     }\n }",
    "output": "Parse LotteShapeFill json"
  },
  {
    "input": "diff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeCircle.java\n@@ -0,0 +1,10 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapeCircle {\n+\n+    public LotteShapeCircle(JSONObject json, long frameRate) {\n+        // TODO\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeFill.java\n@@ -0,0 +1,10 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapeFill {\n+\n+    public LotteShapeFill(JSONObject json, long frameRate) {\n+        // TODO\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeGroup.java\n@@ -1,12 +1,65 @@\n package com.airbnb.lotte.model;\n \n import android.graphics.Rect;\n+import android.support.annotation.Nullable;\n \n+import org.json.JSONArray;\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@SuppressWarnings({\"EmptyCatchBlock\", \"FieldCanBeLocal\"})\n public class LotteShapeGroup {\n \n-    public LotteShapeGroup(JSONObject json, long frameRate, Rect bound) {\n-        // TODO\n+    private final List<Object> items = new ArrayList<>();\n+\n+    public LotteShapeGroup(JSONObject json, long frameRate, Rect compBounds) {\n+        JSONArray jsonItems = null;\n+        try {\n+            jsonItems = json.getJSONArray(\"it\");\n+        } catch (JSONException e) {}\n+        if (jsonItems == null) {\n+            throw new IllegalStateException(\"There are no items.\");\n+        }\n+\n+        for (int i = 0; i < items.size(); i++) {\n+            Object newItem = shapeItemWithJson(json, frameRate, compBounds);\n+            if (newItem != null) {\n+                items.add(newItem);\n+            }\n+        }\n+    }\n+\n+    @Nullable\n+    private Object shapeItemWithJson(JSONObject json, long framerate, Rect compBounds) {\n+        String type = null;\n+        try {\n+            type = json.getString(\"ty\");\n+        } catch (JSONException e) { }\n+        if (type == null) {\n+            throw new IllegalStateException(\"Shape has no type.\");\n+        }\n+\n+        switch (type) {\n+            case \"gr\":\n+                return new LotteShapeGroup(json, framerate, compBounds);\n+            case \"st\":\n+                return new LotteShapeStroke(json, framerate);\n+            case \"fl\":\n+                return new LotteShapeFill(json, framerate);\n+            case \"tr\":\n+                return new LotteShapeTransform(json, framerate, compBounds);\n+            case \"sh\":\n+                return new LotteShapePath(json, framerate);\n+            case \"el\":\n+                return new LotteShapeCircle(json, framerate);\n+            case \"rc\":\n+                return new LotteShapeRectangle(json, framerate);\n+            case \"tm\":\n+                return new LotteShapeTrimPath(json, framerate);\n+        }\n+        return null;\n     }\n }\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapePath.java\n@@ -0,0 +1,10 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapePath {\n+\n+    public LotteShapePath(JSONObject json, long frameRate) {\n+        // TODO\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeRectangle.java\n@@ -0,0 +1,10 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapeRectangle {\n+\n+    public LotteShapeRectangle(JSONObject json, long frameRate) {\n+        // TODO\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeStroke.java\n@@ -0,0 +1,11 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapeStroke {\n+\n+    public LotteShapeStroke(JSONObject json, long frameRate) {\n+        // TODO\n+    }\n+\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTransform.java\n@@ -0,0 +1,12 @@\n+package com.airbnb.lotte.model;\n+\n+import android.graphics.Rect;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapeTransform {\n+\n+    public LotteShapeTransform(JSONObject json, long frameRate, Rect compBounds) {\n+        // TODO\n+    }\n+}\n\ndiff --git a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n--- a/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n+++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteShapeTrimPath.java\n@@ -0,0 +1,10 @@\n+package com.airbnb.lotte.model;\n+\n+import org.json.JSONObject;\n+\n+public class LotteShapeTrimPath {\n+\n+    public LotteShapeTrimPath(JSONObject json, long frameRate) {\n+        // TODO\n+    }\n+}",
    "output": "Added shape group json parsing"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/AnimationFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/AnimationFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/AnimationFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/AnimationFragment.java\n@@ -0,0 +1,38 @@\n+package com.airbnb.lotte;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v4.app.Fragment;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class AnimationFragment extends Fragment {\n+    private static final String ARG_FILE_NAME = \"file_name\";\n+\n+    static AnimationFragment newInstance(String fileName) {\n+        AnimationFragment frag = new AnimationFragment();\n+        Bundle args = new Bundle();\n+        args.putString(ARG_FILE_NAME, fileName);\n+        frag.setArguments(args);\n+        return frag;\n+    }\n+\n+    @BindView(R.id.file_name) TextView fileNameView;\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View view = inflater.inflate(R.layout.fragment_animation, container, false);\n+        ButterKnife.bind(this, view);\n+\n+        String fileName = getArguments().getString(ARG_FILE_NAME);\n+        fileNameView.setText(fileName);\n+\n+        return view;\n+    }\n+}\n\ndiff --git a/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java\n@@ -41,14 +41,20 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n         try {\n             adapter.setFiles(getContext().getAssets().list(\"\"));\n         } catch (IOException e) {\n+            //noinspection ConstantConditions\n             Snackbar.make(container, R.string.invalid_assets, Snackbar.LENGTH_LONG).show();\n         }\n \n         return view;\n     }\n \n     private void onFileClicked(String fileName) {\n-\n+        getFragmentManager().beginTransaction()\n+                .addToBackStack(null)\n+                .setCustomAnimations(R.anim.slide_in_right, R.anim.hold, R.anim.hold, R.anim.slide_out_right)\n+                .remove(this)\n+                .replace(R.id.content_2, AnimationFragment.newInstance(fileName))\n+                .commit();\n     }\n \n     final class FileAdapter extends RecyclerView.Adapter<FileViewHolder> {\n@@ -87,9 +93,14 @@ final class FileViewHolder extends RecyclerView.ViewHolder {\n             ButterKnife.bind(this, itemView);\n         }\n \n-        void bind(String fileName) {\n+        void bind(final String fileName) {\n             fileNameView.setText(fileName);\n-            onFileClicked(fileName);\n+            itemView.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    onFileClicked(fileName);\n+                }\n+            });\n         }\n     }\n }\n\ndiff --git a/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java b/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java\n@@ -12,7 +12,7 @@ protected void onCreate(Bundle savedInstanceState) {\n \n         if (savedInstanceState == null) {\n             getSupportFragmentManager().beginTransaction()\n-                    .replace(R.id.content, ListFragment.newInstance())\n+                    .replace(R.id.content_1, ListFragment.newInstance())\n                     .commit();\n         }\n     }",
    "output": "Added AnimationFragment"
  },
  {
    "input": "diff --git a/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java b/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/ListFragment.java\n@@ -0,0 +1,95 @@\n+package com.airbnb.lotte;\n+\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.design.widget.Snackbar;\n+import android.support.v4.app.Fragment;\n+import android.support.v7.app.AppCompatActivity;\n+import android.support.v7.widget.RecyclerView;\n+import android.support.v7.widget.Toolbar;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import java.io.IOException;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class ListFragment extends Fragment {\n+\n+    static ListFragment newInstance() {\n+        return new ListFragment();\n+    }\n+\n+    @BindView(R.id.container) ViewGroup container;\n+    @BindView(R.id.toolbar) Toolbar toolbar;\n+    @BindView(R.id.recycler_view) RecyclerView recyclerView;\n+\n+    private final FileAdapter adapter = new FileAdapter();\n+\n+    @Nullable\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+        View view = inflater.inflate(R.layout.fragment_list, container, false);\n+        ButterKnife.bind(this, view);\n+        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);\n+\n+        recyclerView.setAdapter(adapter);\n+        String[] files = null;\n+        try {\n+            adapter.setFiles(getContext().getAssets().list(\"\"));\n+        } catch (IOException e) {\n+            Snackbar.make(container, R.string.invalid_assets, Snackbar.LENGTH_LONG).show();\n+        }\n+\n+        return view;\n+    }\n+\n+    private void onFileClicked(String fileName) {\n+\n+    }\n+\n+    final class FileAdapter extends RecyclerView.Adapter<FileViewHolder> {\n+\n+\n+        @Nullable private String[] files = null;\n+\n+        void setFiles(@Nullable String[] files) {\n+            this.files = files;\n+            notifyDataSetChanged();\n+        }\n+\n+        @Override\n+        public FileViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n+            return new FileViewHolder(parent);\n+        }\n+\n+        @Override\n+        public void onBindViewHolder(FileViewHolder holder, int position) {\n+            //noinspection ConstantConditions\n+            holder.bind(files[position]);\n+        }\n+\n+        @Override\n+        public int getItemCount() {\n+            return files == null ? 0 : files.length;\n+        }\n+    }\n+\n+    final class FileViewHolder extends RecyclerView.ViewHolder {\n+\n+        @BindView(R.id.file_name) TextView fileNameView;\n+\n+        FileViewHolder(ViewGroup parent) {\n+            super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n+            ButterKnife.bind(this, itemView);\n+        }\n+\n+        void bind(String fileName) {\n+            fileNameView.setText(fileName);\n+            onFileClicked(fileName);\n+        }\n+    }\n+}\n\ndiff --git a/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java b/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java\n--- a/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java\n+++ b/LotteSample/src/main/java/com/airbnb/lotte/MainActivity.java\n@@ -1,13 +1,19 @@\n package com.airbnb.lotte;\n \n-import android.support.v7.app.AppCompatActivity;\n import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n \n public class MainActivity extends AppCompatActivity {\n \n-  @Override\n-  protected void onCreate(Bundle savedInstanceState) {\n-    super.onCreate(savedInstanceState);\n-    setContentView(R.layout.activity_main);\n-  }\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_main);\n+\n+        if (savedInstanceState == null) {\n+            getSupportFragmentManager().beginTransaction()\n+                    .replace(R.id.content, ListFragment.newInstance())\n+                    .commit();\n+        }\n+    }\n }",
    "output": "Added a list of assets"
  },
  {
    "input": "diff --git a/lotte/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java b/lotte/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java\n--- a/lotte/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java\n+++ b/lotte/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java\n@@ -0,0 +1,26 @@\n+package com.airbnb.lotte;\n+\n+import android.content.Context;\n+import android.support.test.InstrumentationRegistry;\n+import android.support.test.runner.AndroidJUnit4;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Instrumentation test, which will execute on an Android device.\n+ *\n+ * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n+ */\n+@RunWith(AndroidJUnit4.class)\n+public class ExampleInstrumentedTest {\n+  @Test\n+  public void useAppContext() throws Exception {\n+    // Context of the app under test.\n+    Context appContext = InstrumentationRegistry.getTargetContext();\n+\n+    assertEquals(\"com.airbnb.lotte.test\", appContext.getPackageName());\n+  }\n+}\n\ndiff --git a/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java b/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n--- a/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n+++ b/lotte/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n@@ -0,0 +1,17 @@\n+package com.airbnb.lotte;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Example local unit test, which will execute on the development machine (host).\n+ *\n+ * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n+ */\n+public class ExampleUnitTest {\n+  @Test\n+  public void addition_isCorrect() throws Exception {\n+    assertEquals(4, 2 + 2);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Added lotte module"
  },
  {
    "input": "diff --git a/app/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java b/app/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java\n--- a/app/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java\n+++ b/app/src/androidTest/java/com/airbnb/lotte/ExampleInstrumentedTest.java\n@@ -0,0 +1,26 @@\n+package com.airbnb.lotte;\n+\n+import android.content.Context;\n+import android.support.test.InstrumentationRegistry;\n+import android.support.test.runner.AndroidJUnit4;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Instrumentation test, which will execute on an Android device.\n+ *\n+ * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n+ */\n+@RunWith(AndroidJUnit4.class)\n+public class ExampleInstrumentedTest {\n+  @Test\n+  public void useAppContext() throws Exception {\n+    // Context of the app under test.\n+    Context appContext = InstrumentationRegistry.getTargetContext();\n+\n+    assertEquals(\"com.airbnb.lotte\", appContext.getPackageName());\n+  }\n+}\n\ndiff --git a/app/src/main/java/com/airbnb/lotte/MainActivity.java b/app/src/main/java/com/airbnb/lotte/MainActivity.java\n--- a/app/src/main/java/com/airbnb/lotte/MainActivity.java\n+++ b/app/src/main/java/com/airbnb/lotte/MainActivity.java\n@@ -0,0 +1,13 @@\n+package com.airbnb.lotte;\n+\n+import android.support.v7.app.AppCompatActivity;\n+import android.os.Bundle;\n+\n+public class MainActivity extends AppCompatActivity {\n+\n+  @Override\n+  protected void onCreate(Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_main);\n+  }\n+}\n\ndiff --git a/app/src/test/java/com/airbnb/lotte/ExampleUnitTest.java b/app/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n--- a/app/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n+++ b/app/src/test/java/com/airbnb/lotte/ExampleUnitTest.java\n@@ -0,0 +1,17 @@\n+package com.airbnb.lotte;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Example local unit test, which will execute on the development machine (host).\n+ *\n+ * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n+ */\n+public class ExampleUnitTest {\n+  @Test\n+  public void addition_isCorrect() throws Exception {\n+    assertEquals(4, 2 + 2);\n+  }\n+}\n\\ No newline at end of file",
    "output": "Initial commit"
  }
]